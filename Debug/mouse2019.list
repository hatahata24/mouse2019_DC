
mouse2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011834  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  080119c4  080119c4  000219c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801208c  0801208c  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801208c  0801208c  0002208c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012094  08012094  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012094  08012094  00022094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012098  08012098  00022098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0801209c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014fc  200000ec  08012188  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015e8  08012188  000315e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016893  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030ac  00000000  00000000  000469af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e8  00000000  00000000  00049a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001298  00000000  00000000  0004ae48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022976  00000000  00000000  0004c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010c79  00000000  00000000  0006ea56  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c807d  00000000  00000000  0007f6cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014774c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d2c  00000000  00000000  001477c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ec 	.word	0x200000ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080119ac 	.word	0x080119ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	080119ac 	.word	0x080119ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_Init+0x40>)
 8000f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_Init+0x40>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x40>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 fd07 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f00f f85e 	bl	801002c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fd1f 	bl	80019de <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 fce7 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000080 	.word	0x20000080
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004
 8001000:	20000120 	.word	0x20000120

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000120 	.word	0x20000120

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_Delay+0x40>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e033      	b.n	80010de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f00e fffc 	bl	801007c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d118      	bne.n	80010d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a6:	f023 0302 	bic.w	r3, r3, #2
 80010aa:	f043 0202 	orr.w	r2, r3, #2
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fa92 	bl	80015dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
 80010ce:	e001      	b.n	80010d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Start+0x1a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e0a5      	b.n	800124e <HAL_ADC_Start+0x166>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d018      	beq.n	800114a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001128:	4b4c      	ldr	r3, [pc, #304]	; (800125c <HAL_ADC_Start+0x174>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_ADC_Start+0x178>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9a      	lsrs	r2, r3, #18
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800113c:	e002      	b.n	8001144 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3b01      	subs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d179      	bne.n	800124c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001182:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001196:	d106      	bne.n	80011a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f023 0206 	bic.w	r2, r3, #6
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d12a      	bne.n	8001224 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_ADC_Start+0x180>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d015      	beq.n	8001204 <HAL_ADC_Start+0x11c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_ADC_Start+0x184>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d105      	bne.n	80011ee <HAL_ADC_Start+0x106>
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00a      	beq.n	8001204 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_ADC_Start+0x188>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d129      	bne.n	800124c <HAL_ADC_Start+0x164>
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d823      	bhi.n	800124c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11c      	bne.n	800124c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	e013      	b.n	800124c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_ADC_Start+0x180>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_ADC_Start+0x164>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800124a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000080 	.word	0x20000080
 8001260:	431bde83 	.word	0x431bde83
 8001264:	40012300 	.word	0x40012300
 8001268:	40012000 	.word	0x40012000
 800126c:	40012100 	.word	0x40012100
 8001270:	40012200 	.word	0x40012200

08001274 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001290:	d113      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a0:	d10b      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0220 	orr.w	r2, r3, #32
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e05c      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012ba:	f7ff fea3 	bl	8001004 <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012c0:	e01a      	b.n	80012f8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d016      	beq.n	80012f8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <HAL_ADC_PollForConversion+0x6c>
 80012d0:	f7ff fe98 	bl	8001004 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d20b      	bcs.n	80012f8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f043 0204 	orr.w	r2, r3, #4
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e03d      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b02      	cmp	r3, #2
 8001304:	d1dd      	bne.n	80012c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0212 	mvn.w	r2, #18
 800130e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d123      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800132e:	2b00      	cmp	r3, #0
 8001330:	d11f      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134a:	2b00      	cmp	r3, #0
 800134c:	d111      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e105      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x228>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d925      	bls.n	8001410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3b1e      	subs	r3, #30
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43da      	mvns	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	400a      	ands	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	3b1e      	subs	r3, #30
 8001404:	409a      	lsls	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e022      	b.n	8001456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	2207      	movs	r2, #7
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6919      	ldr	r1, [r3, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4403      	add	r3, r0
 800144c:	409a      	lsls	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b06      	cmp	r3, #6
 800145c:	d824      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b05      	subs	r3, #5
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b05      	subs	r3, #5
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
 80014a6:	e04c      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d824      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b23      	subs	r3, #35	; 0x23
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43da      	mvns	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b23      	subs	r3, #35	; 0x23
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e023      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b41      	subs	r3, #65	; 0x41
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_ADC_ConfigChannel+0x234>)
 8001544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d109      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d105      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d123      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d003      	beq.n	800157e <HAL_ADC_ConfigChannel+0x1e6>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b11      	cmp	r3, #17
 800157c:	d11b      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_ADC_ConfigChannel+0x240>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9a      	lsrs	r2, r3, #18
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	40012000 	.word	0x40012000
 80015d4:	20000080 	.word	0x20000080
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <ADC_Init+0x1f0>)
 80015e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <ADC_Init+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e00f      	b.n	80016da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0202 	bic.w	r2, r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
 80016f4:	005a      	lsls	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001716:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	035a      	lsls	r2, r3, #13
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e007      	b.n	8001750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	3b01      	subs	r3, #1
 800176c:	051a      	lsls	r2, r3, #20
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001792:	025a      	lsls	r2, r3, #9
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	029a      	lsls	r2, r3, #10
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a0c:	7e1b      	ldrb	r3, [r3, #24]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_FLASH_Program+0x1e>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e03b      	b.n	8001a8e <HAL_FLASH_Program+0x96>
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a20:	f000 f870 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d12b      	bne.n	8001a86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a34:	783b      	ldrb	r3, [r7, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	68b8      	ldr	r0, [r7, #8]
 8001a3a:	f000 f917 	bl	8001c6c <FLASH_Program_Byte>
 8001a3e:	e016      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	68b8      	ldr	r0, [r7, #8]
 8001a4c:	f000 f8ea 	bl	8001c24 <FLASH_Program_HalfWord>
 8001a50:	e00d      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d105      	bne.n	8001a64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68b8      	ldr	r0, [r7, #8]
 8001a5e:	f000 f8bf 	bl	8001be0 <FLASH_Program_Word>
 8001a62:	e004      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f000 f88b 	bl	8001b84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a72:	f000 f847 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a76:	4603      	mov	r3, r0
 8001a78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000124 	.word	0x20000124
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da0b      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_FLASH_Unlock+0x3c>)
 8001ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_FLASH_Unlock+0x40>)
 8001abc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da01      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	45670123 	.word	0x45670123
 8001ae0:	cdef89ab 	.word	0xcdef89ab

08001ae4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001af2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <FLASH_WaitForLastOperation+0x78>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b16:	f7ff fa75 	bl	8001004 <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b1c:	e010      	b.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d00c      	beq.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <FLASH_WaitForLastOperation+0x38>
 8001b2c:	f7ff fa6a 	bl	8001004 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d201      	bcs.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e019      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e8      	bne.n	8001b1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b6a:	f000 f8a1 	bl	8001cb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
  
}  
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000124 	.word	0x20000124
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b84:	b490      	push	{r4, r7}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001ba2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	f04f 0400 	mov.w	r4, #0
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	2400      	movs	r4, #0
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	3204      	adds	r2, #4
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc90      	pop	{r4, r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	801a      	strh	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cce:	2210      	movs	r2, #16
 8001cd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cec:	2220      	movs	r2, #32
 8001cee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	f043 0320 	orr.w	r3, r3, #32
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	60da      	str	r2, [r3, #12]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023c00 	.word	0x40023c00
 8001d58:	20000124 	.word	0x20000124

08001d5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d70:	7e1b      	ldrb	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_FLASHEx_Erase+0x1e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e058      	b.n	8001e2c <HAL_FLASHEx_Erase+0xd0>
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d84:	f7ff febe 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d148      	bne.n	8001e24 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d115      	bne.n	8001dce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f844 	bl	8001e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db8:	f7ff fea4 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6113      	str	r3, [r2, #16]
 8001dcc:	e028      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	e01c      	b.n	8001e10 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68b8      	ldr	r0, [r7, #8]
 8001de0:	f000 f850 	bl	8001e84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de8:	f7ff fe8c 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dfa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	601a      	str	r2, [r3, #0]
          break;
 8001e08:	e00a      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3da      	bcc.n	8001dd6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001e20:	f000 f878 	bl	8001f14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	761a      	strb	r2, [r3, #24]

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000124 	.word	0x20000124
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6113      	str	r3, [r2, #16]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e010      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e009      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d103      	bne.n	8001ebc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e002      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	490f      	ldr	r1, [pc, #60]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ee4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6113      	str	r3, [r2, #16]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
  }
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e16b      	b.n	8002294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 815a 	bne.w	800228e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x4a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d123      	bne.n	8002032 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0203 	and.w	r2, r3, #3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00b      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207a:	2b11      	cmp	r3, #17
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b12      	cmp	r3, #18
 8002084:	d130      	bne.n	80020e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 0201 	and.w	r2, r3, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80b4 	beq.w	800228e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x308>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_GPIO_Init+0x30c>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02b      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d025      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d019      	beq.n	80021ba <HAL_GPIO_Init+0x21a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x216>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00d      	beq.n	80021b2 <HAL_GPIO_Init+0x212>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_GPIO_Init+0x328>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x32c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_GPIO_Init+0x20a>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e00e      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00c      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ae:	2306      	movs	r3, #6
 80021b0:	e00a      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c6:	2300      	movs	r3, #0
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d8:	4934      	ldr	r1, [pc, #208]	; (80022ac <HAL_GPIO_Init+0x30c>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_GPIO_Init+0x330>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220a:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f67f ae90 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3724      	adds	r7, #36	; 0x24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e22d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b9d      	ldr	r3, [pc, #628]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e208      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe08 	bl	8001004 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fe04 	bl	8001004 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1cd      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fdf4 	bl	8001004 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fdf0 	bl	8001004 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1b9      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e18d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fda9 	bl	8001004 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fda5 	bl	8001004 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e16e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd88 	bl	8001004 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fd84 	bl	8001004 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e14d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fd68 	bl	8001004 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fd64 	bl	8001004 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e12d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fd51 	bl	8001004 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fd4d 	bl	8001004 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e116      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a0 	beq.w	80026d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fd13 	bl	8001004 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e011      	b.n	8002606 <HAL_RCC_OscConfig+0x2ce>
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
 80025f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fd06 	bl	8001004 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0cf      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2f0>
 800261a:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 8002630:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a5c      	ldr	r2, [pc, #368]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fccb 	bl	8001004 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fcc7 	bl	8001004 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e08e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x33a>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fcb5 	bl	8001004 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fcb1 	bl	8001004 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e078      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d064      	beq.n	80027a4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d05c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d141      	bne.n	8002772 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc86 	bl	8001004 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fc82 	bl	8001004 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04b      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	3b01      	subs	r3, #1
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	491d      	ldr	r1, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fc5b 	bl	8001004 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fc57 	bl	8001004 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e020      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x41a>
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fc44 	bl	8001004 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fc40 	bl	8001004 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x448>
 800279e:	e001      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000
 80027b4:	40023800 	.word	0x40023800
 80027b8:	42470060 	.word	0x42470060

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0ca      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d90c      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b6      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002810:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002828:	4b52      	ldr	r3, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	494c      	ldr	r1, [pc, #304]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d119      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d003      	beq.n	800287a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e065      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4933      	ldr	r1, [pc, #204]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fbaa 	bl	8001004 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fba6 	bl	8001004 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20c      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e030      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4915      	ldr	r1, [pc, #84]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	490d      	ldr	r1, [pc, #52]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002942:	f000 f81d 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002946:	4601      	mov	r1, r0
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	fa21 f303 	lsr.w	r3, r1, r3
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe fb0c 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	08011fd8 	.word	0x08011fd8
 800297c:	20000080 	.word	0x20000080

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d007      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x32>
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d008      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x38>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 808d 	bne.w	8002ac6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 80029ae:	60bb      	str	r3, [r7, #8]
       break;
 80029b0:	e08c      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029b4:	60bb      	str	r3, [r7, #8]
      break;
 80029b6:	e089      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b8:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d023      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	f04f 0400 	mov.w	r4, #0
 80029d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	ea03 0501 	and.w	r5, r3, r1
 80029e4:	ea04 0602 	and.w	r6, r4, r2
 80029e8:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ea:	fb02 f106 	mul.w	r1, r2, r6
 80029ee:	2200      	movs	r2, #0
 80029f0:	fb02 f205 	mul.w	r2, r2, r5
 80029f4:	440a      	add	r2, r1
 80029f6:	493a      	ldr	r1, [pc, #232]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f8:	fba5 0101 	umull	r0, r1, r5, r1
 80029fc:	1853      	adds	r3, r2, r1
 80029fe:	4619      	mov	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4623      	mov	r3, r4
 8002a0a:	f7fe f915 	bl	8000c38 <__aeabi_uldivmod>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e049      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	099b      	lsrs	r3, r3, #6
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	ea03 0501 	and.w	r5, r3, r1
 8002a2c:	ea04 0602 	and.w	r6, r4, r2
 8002a30:	4629      	mov	r1, r5
 8002a32:	4632      	mov	r2, r6
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	0154      	lsls	r4, r2, #5
 8002a3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a42:	014b      	lsls	r3, r1, #5
 8002a44:	4619      	mov	r1, r3
 8002a46:	4622      	mov	r2, r4
 8002a48:	1b49      	subs	r1, r1, r5
 8002a4a:	eb62 0206 	sbc.w	r2, r2, r6
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	f04f 0400 	mov.w	r4, #0
 8002a56:	0194      	lsls	r4, r2, #6
 8002a58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a5c:	018b      	lsls	r3, r1, #6
 8002a5e:	1a5b      	subs	r3, r3, r1
 8002a60:	eb64 0402 	sbc.w	r4, r4, r2
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	00e2      	lsls	r2, r4, #3
 8002a6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a72:	00d9      	lsls	r1, r3, #3
 8002a74:	460b      	mov	r3, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	195b      	adds	r3, r3, r5
 8002a7a:	eb44 0406 	adc.w	r4, r4, r6
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	02a2      	lsls	r2, r4, #10
 8002a88:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a8c:	0299      	lsls	r1, r3, #10
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4614      	mov	r4, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	4621      	mov	r1, r4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f04f 0400 	mov.w	r4, #0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	f7fe f8ca 	bl	8000c38 <__aeabi_uldivmod>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	60bb      	str	r3, [r7, #8]
      break;
 8002ac4:	e002      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ac8:	60bb      	str	r3, [r7, #8]
      break;
 8002aca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002acc:	68bb      	ldr	r3, [r7, #8]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	017d7840 	.word	0x017d7840

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000080 	.word	0x20000080

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b04:	4601      	mov	r1, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	08011fe8 	.word	0x08011fe8

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffdc 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0b5b      	lsrs	r3, r3, #13
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	08011fe8 	.word	0x08011fe8

08002b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e056      	b.n	8002c0c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f00d fac3 	bl	8010104 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	f003 0104 	and.w	r1, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_SPI_Transmit+0x22>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e11e      	b.n	8002e74 <HAL_SPI_Transmit+0x260>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c3e:	f7fe f9e1 	bl	8001004 <HAL_GetTick>
 8002c42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
 8002c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c58:	e103      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_SPI_Transmit+0x52>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c6a:	e0fa      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb2:	d107      	bne.n	8002cc4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d007      	beq.n	8002ce2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cea:	d14b      	bne.n	8002d84 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Transmit+0xe6>
 8002cf4:	8afb      	ldrh	r3, [r7, #22]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d13e      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d1e:	e02b      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d112      	bne.n	8002d54 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	1c9a      	adds	r2, r3, #2
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d52:	e011      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d54:	f7fe f956 	bl	8001004 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d803      	bhi.n	8002d6c <HAL_SPI_Transmit+0x158>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d102      	bne.n	8002d72 <HAL_SPI_Transmit+0x15e>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d76:	e074      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ce      	bne.n	8002d20 <HAL_SPI_Transmit+0x10c>
 8002d82:	e04c      	b.n	8002e1e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Transmit+0x17e>
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d140      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002db8:	e02c      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d113      	bne.n	8002df0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dee:	e011      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df0:	f7fe f908 	bl	8001004 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d803      	bhi.n	8002e08 <HAL_SPI_Transmit+0x1f4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_Transmit+0x1fa>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e12:	e026      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1cd      	bne.n	8002dba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fba4 	bl	8003570 <SPI_EndRxTxTransaction>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e000      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e98:	d112      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8e9 	bl	800308e <HAL_SPI_TransmitReceive>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	e0e2      	b.n	8003086 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Receive+0x52>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0db      	b.n	8003086 <HAL_SPI_Receive+0x20a>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed6:	f7fe f895 	bl	8001004 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eec:	e0c2      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_SPI_Receive+0x7e>
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002efe:	e0b9      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2204      	movs	r2, #4
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f46:	d107      	bne.n	8002f58 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d007      	beq.n	8002f76 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d162      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f7e:	e02e      	b.n	8002fde <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d115      	bne.n	8002fba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f103 020c 	add.w	r2, r3, #12
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fb8:	e011      	b.n	8002fde <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fba:	f7fe f823 	bl	8001004 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d803      	bhi.n	8002fd2 <HAL_SPI_Receive+0x156>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d102      	bne.n	8002fd8 <HAL_SPI_Receive+0x15c>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fdc:	e04a      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1cb      	bne.n	8002f80 <HAL_SPI_Receive+0x104>
 8002fe8:	e031      	b.n	800304e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d113      	bne.n	8003020 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	b292      	uxth	r2, r2
 8003004:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800301e:	e011      	b.n	8003044 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003020:	f7fd fff0 	bl	8001004 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d803      	bhi.n	8003038 <HAL_SPI_Receive+0x1bc>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d102      	bne.n	800303e <HAL_SPI_Receive+0x1c2>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003042:	e017      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1cd      	bne.n	8002fea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa27 	bl	80034a6 <SPI_EndRxTransaction>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
 8003070:	e000      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003072:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b08c      	sub	sp, #48	; 0x30
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800309c:	2301      	movs	r3, #1
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x26>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e18a      	b.n	80033ca <HAL_SPI_TransmitReceive+0x33c>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030bc:	f7fd ffa2 	bl	8001004 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d00f      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e4:	d107      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
 80030ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d003      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030fc:	e15b      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003116:	e14e      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b04      	cmp	r3, #4
 8003122:	d003      	beq.n	800312c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2205      	movs	r2, #5
 8003128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	887a      	ldrh	r2, [r7, #2]
 8003142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d007      	beq.n	8003180 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003188:	d178      	bne.n	800327c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x10a>
 8003192:	8b7b      	ldrh	r3, [r7, #26]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d166      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	e053      	b.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11b      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d113      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d119      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d014      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	b292      	uxth	r2, r2
 8003228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003242:	2301      	movs	r3, #1
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003246:	f7fd fedd 	bl	8001004 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003252:	429a      	cmp	r2, r3
 8003254:	d807      	bhi.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d003      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003264:	e0a7      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1a6      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1a1      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 800327a:	e07c      	b.n	8003376 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_TransmitReceive+0x1fc>
 8003284:	8b7b      	ldrh	r3, [r7, #26]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d16b      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b0:	e057      	b.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d11c      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d114      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d119      	bne.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d014      	beq.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003338:	2301      	movs	r3, #1
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800333c:	f7fd fe62 	bl	8001004 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003348:	429a      	cmp	r2, r3
 800334a:	d803      	bhi.n	8003354 <HAL_SPI_TransmitReceive+0x2c6>
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d102      	bne.n	800335a <HAL_SPI_TransmitReceive+0x2cc>
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003360:	e029      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1a2      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d19d      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8f8 	bl	8003570 <SPI_EndRxTxTransaction>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003392:	e010      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	e000      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033e2:	e04c      	b.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d048      	beq.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033ec:	f7fd fe0a 	bl	8001004 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d902      	bls.n	8003402 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d13d      	bne.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003410:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341a:	d111      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d004      	beq.n	8003430 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d107      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d10f      	bne.n	800346a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d1a3      	bne.n	80033e4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d111      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	d004      	beq.n	80034d0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d107      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e8:	d12a      	bne.n	8003540 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f2:	d012      	beq.n	800351a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff67 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02d      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e026      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	2101      	movs	r1, #1
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff54 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e013      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	2101      	movs	r1, #1
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff41 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e000      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <SPI_EndRxTxTransaction+0x7c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <SPI_EndRxTxTransaction+0x80>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0d5b      	lsrs	r3, r3, #21
 8003588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359a:	d112      	bne.n	80035c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2180      	movs	r1, #128	; 0x80
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff13 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e00f      	b.n	80035e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d0f2      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x52>
 80035dc:	e000      	b.n	80035e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80035de:	bf00      	nop
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000080 	.word	0x20000080
 80035f0:	165e9f81 	.word	0x165e9f81

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e01d      	b.n	8003642 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f00c fdba 	bl	8010194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 fc70 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d007      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e01d      	b.n	80036e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f815 	bl	80036e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f000 fc21 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 feec 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <HAL_TIM_PWM_Start+0x74>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_TIM_PWM_Start+0x2c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_TIM_PWM_Start+0x78>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d101      	bne.n	800372c <HAL_TIM_PWM_Start+0x30>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_TIM_PWM_Start+0x32>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b06      	cmp	r3, #6
 8003752:	d007      	beq.n	8003764 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000
 8003774:	40010400 	.word	0x40010400

08003778 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 feae 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_TIM_PWM_Stop+0xa8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_PWM_Stop+0x2c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_TIM_PWM_Stop+0xac>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_PWM_Stop+0x30>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_TIM_PWM_Stop+0x32>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d017      	beq.n	80037de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	f240 4344 	movw	r3, #1092	; 0x444
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	f240 4344 	movw	r3, #1092	; 0x444
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40010000 	.word	0x40010000
 8003824:	40010400 	.word	0x40010400

08003828 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e083      	b.n	8003944 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f00c fcf1 	bl	8010238 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386c:	f023 0307 	bic.w	r3, r3, #7
 8003870:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f000 fb4b 	bl	8003f18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	4313      	orrs	r3, r2
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038c8:	f023 030c 	bic.w	r3, r3, #12
 80038cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	4313      	orrs	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	011a      	lsls	r2, r3, #4
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	4313      	orrs	r3, r2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003906:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4313      	orrs	r3, r2
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_TIM_Encoder_Start+0x16>
 800395c:	2b04      	cmp	r3, #4
 800395e:	d008      	beq.n	8003972 <HAL_TIM_Encoder_Start+0x26>
 8003960:	e00f      	b.n	8003982 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fdbe 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003970:	e016      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	2104      	movs	r1, #4
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fdb6 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003980:	e00e      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fdae 	bl	80044ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2201      	movs	r2, #1
 8003996:	2104      	movs	r1, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fda7 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 800399e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d122      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d11b      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f06f 0202 	mvn.w	r2, #2
 80039e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fa6c 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a02:	e005      	b.n	8003a10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa5e 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fa6f 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d122      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d11b      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0204 	mvn.w	r2, #4
 8003a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fa42 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a56:	e005      	b.n	8003a64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa34 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa45 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d122      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d11b      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0208 	mvn.w	r2, #8
 8003a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2204      	movs	r2, #4
 8003a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa18 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003aaa:	e005      	b.n	8003ab8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa0a 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa1b 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d122      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d11b      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f06f 0210 	mvn.w	r2, #16
 8003ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f9ee 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003afe:	e005      	b.n	8003b0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f9e0 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9f1 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10e      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0201 	mvn.w	r2, #1
 8003b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f007 fa25 	bl	800af88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d10e      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	d107      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fd35 	bl	80045d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d10e      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9b6 	bl	8003f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d107      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f06f 0220 	mvn.w	r2, #32
 8003bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fcff 	bl	80045c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e0b4      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b0c      	cmp	r3, #12
 8003bfa:	f200 809f 	bhi.w	8003d3c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c39 	.word	0x08003c39
 8003c08:	08003d3d 	.word	0x08003d3d
 8003c0c:	08003d3d 	.word	0x08003d3d
 8003c10:	08003d3d 	.word	0x08003d3d
 8003c14:	08003c79 	.word	0x08003c79
 8003c18:	08003d3d 	.word	0x08003d3d
 8003c1c:	08003d3d 	.word	0x08003d3d
 8003c20:	08003d3d 	.word	0x08003d3d
 8003c24:	08003cbb 	.word	0x08003cbb
 8003c28:	08003d3d 	.word	0x08003d3d
 8003c2c:	08003d3d 	.word	0x08003d3d
 8003c30:	08003d3d 	.word	0x08003d3d
 8003c34:	08003cfb 	.word	0x08003cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fa0a 	bl	8004058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0208 	orr.w	r2, r2, #8
 8003c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0204 	bic.w	r2, r2, #4
 8003c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6999      	ldr	r1, [r3, #24]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	619a      	str	r2, [r3, #24]
      break;
 8003c76:	e062      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fa5a 	bl	8004138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	021a      	lsls	r2, r3, #8
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	619a      	str	r2, [r3, #24]
      break;
 8003cb8:	e041      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 faaf 	bl	8004224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0208 	orr.w	r2, r2, #8
 8003cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0204 	bic.w	r2, r2, #4
 8003ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69d9      	ldr	r1, [r3, #28]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	61da      	str	r2, [r3, #28]
      break;
 8003cf8:	e021      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fb03 	bl	800430c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	021a      	lsls	r2, r3, #8
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	61da      	str	r2, [r3, #28]
      break;
 8003d3a:	e000      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIM_ConfigClockSource+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e0a6      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x166>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d067      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0x120>
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d80b      	bhi.n	8003dc4 <HAL_TIM_ConfigClockSource+0x6c>
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d073      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d802      	bhi.n	8003dba <HAL_TIM_ConfigClockSource+0x62>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d06f      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003db8:	e078      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d06c      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003dbe:	2b30      	cmp	r3, #48	; 0x30
 8003dc0:	d06a      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dc2:	e073      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dc4:	2b70      	cmp	r3, #112	; 0x70
 8003dc6:	d00d      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x8c>
 8003dc8:	2b70      	cmp	r3, #112	; 0x70
 8003dca:	d804      	bhi.n	8003dd6 <HAL_TIM_ConfigClockSource+0x7e>
 8003dcc:	2b50      	cmp	r3, #80	; 0x50
 8003dce:	d033      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0xe0>
 8003dd0:	2b60      	cmp	r3, #96	; 0x60
 8003dd2:	d041      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dd4:	e06a      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d066      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x152>
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d017      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003de2:	e063      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6899      	ldr	r1, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f000 fb5a 	bl	80044ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	609a      	str	r2, [r3, #8]
      break;
 8003e10:	e04c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6899      	ldr	r1, [r3, #8]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f000 fb43 	bl	80044ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e34:	609a      	str	r2, [r3, #8]
      break;
 8003e36:	e039      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f000 fab7 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2150      	movs	r1, #80	; 0x50
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fb10 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e56:	e029      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f000 fad6 	bl	8004416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2160      	movs	r1, #96	; 0x60
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fb00 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e76:	e019      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f000 fa97 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2140      	movs	r1, #64	; 0x40
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 faf0 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e96:	e009      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fae7 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e000      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a40      	ldr	r2, [pc, #256]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d027      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d023      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d017      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a28      	ldr	r2, [pc, #160]	; (8004040 <TIM_Base_SetConfig+0x128>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a27      	ldr	r2, [pc, #156]	; (8004044 <TIM_Base_SetConfig+0x12c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a26      	ldr	r2, [pc, #152]	; (8004048 <TIM_Base_SetConfig+0x130>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_Base_SetConfig+0x134>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <TIM_Base_SetConfig+0x138>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <TIM_Base_SetConfig+0x13c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0xf8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d103      	bne.n	8004018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	615a      	str	r2, [r3, #20]
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800
 800404c:	40001800 	.word	0x40001800
 8004050:	40001c00 	.word	0x40001c00
 8004054:	40002000 	.word	0x40002000

08004058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f023 0302 	bic.w	r3, r3, #2
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a20      	ldr	r2, [pc, #128]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC1_SetConfig+0x64>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10c      	bne.n	80040d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0308 	bic.w	r3, r3, #8
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a15      	ldr	r2, [pc, #84]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_OC1_SetConfig+0x8e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d111      	bne.n	800410a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40010000 	.word	0x40010000
 8004134:	40010400 	.word	0x40010400

08004138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0210 	bic.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0320 	bic.w	r3, r3, #32
 8004182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a22      	ldr	r2, [pc, #136]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC2_SetConfig+0x68>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10d      	bne.n	80041bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC2_SetConfig+0x94>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d113      	bne.n	80041f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40010400 	.word	0x40010400

08004224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800426c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_OC3_SetConfig+0x66>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10d      	bne.n	80042a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a16      	ldr	r2, [pc, #88]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_OC3_SetConfig+0x92>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d113      	bne.n	80042de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40010000 	.word	0x40010000
 8004308:	40010400 	.word	0x40010400

0800430c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	031b      	lsls	r3, r3, #12
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <TIM_OC4_SetConfig+0xa4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_OC4_SetConfig+0x68>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <TIM_OC4_SetConfig+0xa8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d109      	bne.n	8004388 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40010400 	.word	0x40010400

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	f043 0307 	orr.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2201      	movs	r2, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1a      	ldr	r2, [r3, #32]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800454a:	2302      	movs	r3, #2
 800454c:	e032      	b.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004586:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e03f      	b.n	800467a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f00b ff0e 	bl	8010430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2224      	movs	r2, #36	; 0x24
 8004618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f90b 	bl	8004848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af02      	add	r7, sp, #8
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b20      	cmp	r3, #32
 80046a0:	f040 8083 	bne.w	80047aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Transmit+0x2e>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e07b      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_UART_Transmit+0x40>
 80046be:	2302      	movs	r3, #2
 80046c0:	e074      	b.n	80047ac <HAL_UART_Transmit+0x12a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2221      	movs	r2, #33	; 0x21
 80046d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046d8:	f7fc fc94 	bl	8001004 <HAL_GetTick>
 80046dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ea:	e042      	b.n	8004772 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	d122      	bne.n	800474a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f850 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e046      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004730:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3302      	adds	r3, #2
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	e017      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3301      	adds	r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	e013      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f82d 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e023      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	60ba      	str	r2, [r7, #8]
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1b7      	bne.n	80046ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2200      	movs	r2, #0
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f814 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e00a      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c4:	e02c      	b.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d028      	beq.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d4:	f7fc fc16 	bl	8001004 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d21d      	bcs.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e00f      	b.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	d0c3      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004848:	b5b0      	push	{r4, r5, r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004888:	f023 030c 	bic.w	r3, r3, #12
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	430b      	orrs	r3, r1
 8004894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b4:	f040 80e4 	bne.w	8004a80 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4aab      	ldr	r2, [pc, #684]	; (8004b6c <UART_SetConfig+0x324>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <UART_SetConfig+0x84>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4aaa      	ldr	r2, [pc, #680]	; (8004b70 <UART_SetConfig+0x328>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d16c      	bne.n	80049a6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80048cc:	f7fe f92a 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009a      	lsls	r2, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	4aa3      	ldr	r2, [pc, #652]	; (8004b74 <UART_SetConfig+0x32c>)
 80048e8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	011c      	lsls	r4, r3, #4
 80048f0:	f7fe f918 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009a      	lsls	r2, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fbb2 f5f3 	udiv	r5, r2, r3
 800490a:	f7fe f90b 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800490e:	4602      	mov	r2, r0
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009a      	lsls	r2, r3, #2
 8004918:	441a      	add	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	4a93      	ldr	r2, [pc, #588]	; (8004b74 <UART_SetConfig+0x32c>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	2264      	movs	r2, #100	; 0x64
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	1aeb      	subs	r3, r5, r3
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	3332      	adds	r3, #50	; 0x32
 8004938:	4a8e      	ldr	r2, [pc, #568]	; (8004b74 <UART_SetConfig+0x32c>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004946:	441c      	add	r4, r3
 8004948:	f7fe f8ec 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800494c:	4602      	mov	r2, r0
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009a      	lsls	r2, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004962:	f7fe f8df 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004966:	4602      	mov	r2, r0
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	009a      	lsls	r2, r3, #2
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	4a7d      	ldr	r2, [pc, #500]	; (8004b74 <UART_SetConfig+0x32c>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2264      	movs	r2, #100	; 0x64
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	1aeb      	subs	r3, r5, r3
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	3332      	adds	r3, #50	; 0x32
 8004990:	4a78      	ldr	r2, [pc, #480]	; (8004b74 <UART_SetConfig+0x32c>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	f003 0207 	and.w	r2, r3, #7
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4422      	add	r2, r4
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	e154      	b.n	8004c50 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80049a6:	f7fe f8a9 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009a      	lsls	r2, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	4a6c      	ldr	r2, [pc, #432]	; (8004b74 <UART_SetConfig+0x32c>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	011c      	lsls	r4, r3, #4
 80049ca:	f7fe f897 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	009a      	lsls	r2, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80049e4:	f7fe f88a 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	009a      	lsls	r2, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	4a5d      	ldr	r2, [pc, #372]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	2264      	movs	r2, #100	; 0x64
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	1aeb      	subs	r3, r5, r3
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	3332      	adds	r3, #50	; 0x32
 8004a12:	4a58      	ldr	r2, [pc, #352]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a20:	441c      	add	r4, r3
 8004a22:	f7fe f86b 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009a      	lsls	r2, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a3c:	f7fe f85e 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009a      	lsls	r2, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	4a47      	ldr	r2, [pc, #284]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2264      	movs	r2, #100	; 0x64
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	1aeb      	subs	r3, r5, r3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	4a42      	ldr	r2, [pc, #264]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 0207 	and.w	r2, r3, #7
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4422      	add	r2, r4
 8004a7c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004a7e:	e0e7      	b.n	8004c50 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a39      	ldr	r2, [pc, #228]	; (8004b6c <UART_SetConfig+0x324>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <UART_SetConfig+0x24c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a38      	ldr	r2, [pc, #224]	; (8004b70 <UART_SetConfig+0x328>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d171      	bne.n	8004b78 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a94:	f7fe f846 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009a      	lsls	r2, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <UART_SetConfig+0x32c>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	011c      	lsls	r4, r3, #4
 8004ab8:	f7fe f834 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009a      	lsls	r2, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ad2:	f7fe f827 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <UART_SetConfig+0x32c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2264      	movs	r2, #100	; 0x64
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	1aeb      	subs	r3, r5, r3
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	3332      	adds	r3, #50	; 0x32
 8004b00:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0c:	441c      	add	r4, r3
 8004b0e:	f7fe f809 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b28:	f7fd fffc 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	009a      	lsls	r2, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	2264      	movs	r2, #100	; 0x64
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	1aeb      	subs	r3, r5, r3
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	3332      	adds	r3, #50	; 0x32
 8004b56:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4422      	add	r2, r4
 8004b68:	609a      	str	r2, [r3, #8]
 8004b6a:	e071      	b.n	8004c50 <UART_SetConfig+0x408>
 8004b6c:	40011000 	.word	0x40011000
 8004b70:	40011400 	.word	0x40011400
 8004b74:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b78:	f7fd ffc0 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009a      	lsls	r2, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	4a31      	ldr	r2, [pc, #196]	; (8004c58 <UART_SetConfig+0x410>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	011c      	lsls	r4, r3, #4
 8004b9c:	f7fd ffae 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009a      	lsls	r2, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bb6:	f7fd ffa1 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009a      	lsls	r2, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <UART_SetConfig+0x410>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2264      	movs	r2, #100	; 0x64
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	1aeb      	subs	r3, r5, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <UART_SetConfig+0x410>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	441c      	add	r4, r3
 8004bf2:	f7fd ff83 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009a      	lsls	r2, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c0c:	f7fd ff76 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009a      	lsls	r2, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <UART_SetConfig+0x410>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	2264      	movs	r2, #100	; 0x64
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
 8004c34:	1aeb      	subs	r3, r5, r3
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	3332      	adds	r3, #50	; 0x32
 8004c3a:	4a07      	ldr	r2, [pc, #28]	; (8004c58 <UART_SetConfig+0x410>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	f003 020f 	and.w	r2, r3, #15
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4422      	add	r2, r4
 8004c4c:	609a      	str	r2, [r3, #8]
}
 8004c4e:	e7ff      	b.n	8004c50 <UART_SetConfig+0x408>
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bdb0      	pop	{r4, r5, r7, pc}
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <drive_init>:
//drive_init
// 走行系の変数の初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
	MF.FLAGS = 0;
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <drive_init+0x14>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	801a      	strh	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	20000f74 	.word	0x20000f74

08004c74 <drive_ready>:
//drive_ready
// 走行前のLED点滅&ジャイロのドリフト計算
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_ready(void){
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
	  while(ad_fl <= WALL_BASE_FL){
 8004c78:	e00f      	b.n	8004c9a <drive_ready+0x26>
		  led_write(1, 1, 1);
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	2001      	movs	r0, #1
 8004c80:	f00a ffb4 	bl	800fbec <led_write>
		  HAL_Delay(200);
 8004c84:	20c8      	movs	r0, #200	; 0xc8
 8004c86:	f7fc f9c9 	bl	800101c <HAL_Delay>
		  led_write(0, 0, 0);
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	2000      	movs	r0, #0
 8004c90:	f00a ffac 	bl	800fbec <led_write>
		  HAL_Delay(200);
 8004c94:	20c8      	movs	r0, #200	; 0xc8
 8004c96:	f7fc f9c1 	bl	800101c <HAL_Delay>
	  while(ad_fl <= WALL_BASE_FL){
 8004c9a:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <drive_ready+0x48>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2bc8      	cmp	r3, #200	; 0xc8
 8004ca0:	d9eb      	bls.n	8004c7a <drive_ready+0x6>
	  }
	  gyro_drift_flag = 1;
 8004ca2:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <drive_ready+0x4c>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(2000);
 8004ca8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004cac:	f7fc f9b6 	bl	800101c <HAL_Delay>
	  degree_z = 0;
 8004cb0:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <drive_ready+0x50>)
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
}
 8004cb8:	bf00      	nop
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20000d64 	.word	0x20000d64
 8004cc0:	20000aa4 	.word	0x20000aa4
 8004cc4:	20000b64 	.word	0x20000b64

08004cc8 <drive_start>:
//drive_start
// 走行開始前に走行距離と機体角度を初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//走行距離の初期化
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	4a0e      	ldr	r2, [pc, #56]	; (8004d0c <drive_start+0x44>)
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	4a0e      	ldr	r2, [pc, #56]	; (8004d10 <drive_start+0x48>)
 8004cd6:	6013      	str	r3, [r2, #0]
	if(!H_accel_flag) target_speed_l = target_speed_r = 0;		//モータ出力の初期化
 8004cd8:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <drive_start+0x4c>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d105      	bne.n	8004cec <drive_start+0x24>
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	4a0c      	ldr	r2, [pc, #48]	; (8004d18 <drive_start+0x50>)
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	4a0c      	ldr	r2, [pc, #48]	; (8004d1c <drive_start+0x54>)
 8004cea:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8004cec:	4a0c      	ldr	r2, [pc, #48]	; (8004d20 <drive_start+0x58>)
 8004cee:	8813      	ldrh	r3, [r2, #0]
 8004cf0:	f043 0302 	orr.w	r3, r3, #2
 8004cf4:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8004cf6:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <drive_start+0x58>)
 8004cf8:	8813      	ldrh	r3, [r2, #0]
 8004cfa:	f043 0304 	orr.w	r3, r3, #4
 8004cfe:	8013      	strh	r3, [r2, #0]
}
 8004d00:	bf00      	nop
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20000af4 	.word	0x20000af4
 8004d10:	200015d0 	.word	0x200015d0
 8004d14:	200002c9 	.word	0x200002c9
 8004d18:	200001a0 	.word	0x200001a0
 8004d1c:	20000c0c 	.word	0x20000c0c
 8004d20:	20000f74 	.word	0x20000f74

08004d24 <drive_stop>:
//drive_stop
// 走行を終了する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <drive_stop+0x3c>)
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4a0c      	ldr	r2, [pc, #48]	; (8004d64 <drive_stop+0x40>)
 8004d32:	6013      	str	r3, [r2, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	4a0b      	ldr	r2, [pc, #44]	; (8004d68 <drive_stop+0x44>)
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	4a0b      	ldr	r2, [pc, #44]	; (8004d6c <drive_stop+0x48>)
 8004d3e:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 0;
 8004d40:	4a0b      	ldr	r2, [pc, #44]	; (8004d70 <drive_stop+0x4c>)
 8004d42:	8813      	ldrh	r3, [r2, #0]
 8004d44:	f36f 0341 	bfc	r3, #1, #1
 8004d48:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 0;
 8004d4a:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <drive_stop+0x4c>)
 8004d4c:	8813      	ldrh	r3, [r2, #0]
 8004d4e:	f36f 0382 	bfc	r3, #2, #1
 8004d52:	8013      	strh	r3, [r2, #0]
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000af4 	.word	0x20000af4
 8004d64:	200015d0 	.word	0x200015d0
 8004d68:	20000780 	.word	0x20000780
 8004d6c:	20000bb0 	.word	0x20000bb0
 8004d70:	20000f74 	.word	0x20000f74

08004d74 <control_start>:
//control_start
// wallとgyroの姿勢制御を開始する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_start(){
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004d78:	4a07      	ldr	r2, [pc, #28]	; (8004d98 <control_start+0x24>)
 8004d7a:	8813      	ldrh	r3, [r2, #0]
 8004d7c:	f043 0308 	orr.w	r3, r3, #8
 8004d80:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004d82:	4a05      	ldr	r2, [pc, #20]	; (8004d98 <control_start+0x24>)
 8004d84:	8813      	ldrh	r3, [r2, #0]
 8004d86:	f043 0310 	orr.w	r3, r3, #16
 8004d8a:	8013      	strh	r3, [r2, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	20000f74 	.word	0x20000f74

08004d9c <control_stop>:
//control_stop
// wallとgyroの姿勢制御を停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_stop(){
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 0;										//wall制御を無効にする
 8004da0:	4a07      	ldr	r2, [pc, #28]	; (8004dc0 <control_stop+0x24>)
 8004da2:	8813      	ldrh	r3, [r2, #0]
 8004da4:	f36f 03c3 	bfc	r3, #3, #1
 8004da8:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 0;										//gyro制御を無効にする
 8004daa:	4a05      	ldr	r2, [pc, #20]	; (8004dc0 <control_stop+0x24>)
 8004dac:	8813      	ldrh	r3, [r2, #0]
 8004dae:	f36f 1304 	bfc	r3, #4, #1
 8004db2:	8013      	strh	r3, [r2, #0]
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000f74 	.word	0x20000f74

08004dc4 <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
// 引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
// 戻り値: なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	460a      	mov	r2, r1
 8004dce:	71fb      	strb	r3, [r7, #7]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d13e      	bne.n	8004e58 <drive_dir+0x94>
		if(dir == 0){
 8004dda:	79bb      	ldrb	r3, [r7, #6]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10f      	bne.n	8004e00 <drive_dir+0x3c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004de0:	2201      	movs	r2, #1
 8004de2:	2120      	movs	r1, #32
 8004de4:	483f      	ldr	r0, [pc, #252]	; (8004ee4 <drive_dir+0x120>)
 8004de6:	f7fd fa8d 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 8004dea:	2200      	movs	r2, #0
 8004dec:	2110      	movs	r1, #16
 8004dee:	483d      	ldr	r0, [pc, #244]	; (8004ee4 <drive_dir+0x120>)
 8004df0:	f7fd fa88 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004df4:	2201      	movs	r2, #1
 8004df6:	2101      	movs	r1, #1
 8004df8:	483b      	ldr	r0, [pc, #236]	; (8004ee8 <drive_dir+0x124>)
 8004dfa:	f7fd fa83 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
		}
	}
}
 8004dfe:	e06c      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 1){
 8004e00:	79bb      	ldrb	r3, [r7, #6]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d10f      	bne.n	8004e26 <drive_dir+0x62>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	//L_CW
 8004e06:	2200      	movs	r2, #0
 8004e08:	2120      	movs	r1, #32
 8004e0a:	4836      	ldr	r0, [pc, #216]	; (8004ee4 <drive_dir+0x120>)
 8004e0c:	f7fd fa7a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e10:	2201      	movs	r2, #1
 8004e12:	2110      	movs	r1, #16
 8004e14:	4833      	ldr	r0, [pc, #204]	; (8004ee4 <drive_dir+0x120>)
 8004e16:	f7fd fa75 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	4832      	ldr	r0, [pc, #200]	; (8004ee8 <drive_dir+0x124>)
 8004e20:	f7fd fa70 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e24:	e059      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 2){
 8004e26:	79bb      	ldrb	r3, [r7, #6]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d10f      	bne.n	8004e4c <drive_dir+0x88>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	2120      	movs	r1, #32
 8004e30:	482c      	ldr	r0, [pc, #176]	; (8004ee4 <drive_dir+0x120>)
 8004e32:	f7fd fa67 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e36:	2201      	movs	r2, #1
 8004e38:	2110      	movs	r1, #16
 8004e3a:	482a      	ldr	r0, [pc, #168]	; (8004ee4 <drive_dir+0x120>)
 8004e3c:	f7fd fa62 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e40:	2201      	movs	r2, #1
 8004e42:	2101      	movs	r1, #1
 8004e44:	4828      	ldr	r0, [pc, #160]	; (8004ee8 <drive_dir+0x124>)
 8004e46:	f7fd fa5d 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e4a:	e046      	b.n	8004eda <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4825      	ldr	r0, [pc, #148]	; (8004ee8 <drive_dir+0x124>)
 8004e52:	f7fd fa57 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e56:	e040      	b.n	8004eda <drive_dir+0x116>
		if(dir == 0){
 8004e58:	79bb      	ldrb	r3, [r7, #6]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d110      	bne.n	8004e80 <drive_dir+0xbc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004e5e:	2201      	movs	r2, #1
 8004e60:	2102      	movs	r1, #2
 8004e62:	4821      	ldr	r0, [pc, #132]	; (8004ee8 <drive_dir+0x124>)
 8004e64:	f7fd fa4e 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e6e:	481e      	ldr	r0, [pc, #120]	; (8004ee8 <drive_dir+0x124>)
 8004e70:	f7fd fa48 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e74:	2201      	movs	r2, #1
 8004e76:	2101      	movs	r1, #1
 8004e78:	481b      	ldr	r0, [pc, #108]	; (8004ee8 <drive_dir+0x124>)
 8004e7a:	f7fd fa43 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e7e:	e02c      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 1){
 8004e80:	79bb      	ldrb	r3, [r7, #6]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d110      	bne.n	8004ea8 <drive_dir+0xe4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	//R_CW
 8004e86:	2200      	movs	r2, #0
 8004e88:	2102      	movs	r1, #2
 8004e8a:	4817      	ldr	r0, [pc, #92]	; (8004ee8 <drive_dir+0x124>)
 8004e8c:	f7fd fa3a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004e90:	2201      	movs	r2, #1
 8004e92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e96:	4814      	ldr	r0, [pc, #80]	; (8004ee8 <drive_dir+0x124>)
 8004e98:	f7fd fa34 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	4811      	ldr	r0, [pc, #68]	; (8004ee8 <drive_dir+0x124>)
 8004ea2:	f7fd fa2f 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ea6:	e018      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 2){
 8004ea8:	79bb      	ldrb	r3, [r7, #6]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d110      	bne.n	8004ed0 <drive_dir+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004eae:	2201      	movs	r2, #1
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	480d      	ldr	r0, [pc, #52]	; (8004ee8 <drive_dir+0x124>)
 8004eb4:	f7fd fa26 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ebe:	480a      	ldr	r0, [pc, #40]	; (8004ee8 <drive_dir+0x124>)
 8004ec0:	f7fd fa20 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4807      	ldr	r0, [pc, #28]	; (8004ee8 <drive_dir+0x124>)
 8004eca:	f7fd fa1b 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ece:	e004      	b.n	8004eda <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	4804      	ldr	r0, [pc, #16]	; (8004ee8 <drive_dir+0x124>)
 8004ed6:	f7fd fa15 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40020800 	.word	0x40020800
 8004ee8:	40020400 	.word	0x40020400

08004eec <run_select>:
//run_select
// a走行速度を選択する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void run_select(){
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
	full_led_write(YELLOW);
 8004ef2:	2006      	movs	r0, #6
 8004ef4:	f00a feb4 	bl	800fc60 <full_led_write>
	int mode = 0;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	607b      	str	r3, [r7, #4]

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	b2d8      	uxtb	r0, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	b2d9      	uxtb	r1, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	f00a fe66 	bl	800fbec <led_write>
		if(dist_r >= 20){
 8004f20:	4b21      	ldr	r3, [pc, #132]	; (8004fa8 <run_select+0xbc>)
 8004f22:	edd3 7a00 	vldr	s15, [r3]
 8004f26:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f32:	db0f      	blt.n	8004f54 <run_select+0x68>
			  mode++;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3301      	adds	r3, #1
 8004f38:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8004f3a:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <run_select+0xbc>)
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b07      	cmp	r3, #7
 8004f46:	dd01      	ble.n	8004f4c <run_select+0x60>
				  mode = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	4817      	ldr	r0, [pc, #92]	; (8004fac <run_select+0xc0>)
 8004f50:	f00b fc1a 	bl	8010788 <iprintf>
		}
		if(dist_r <= -20){
 8004f54:	4b14      	ldr	r3, [pc, #80]	; (8004fa8 <run_select+0xbc>)
 8004f56:	edd3 7a00 	vldr	s15, [r3]
 8004f5a:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8004f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f66:	d80f      	bhi.n	8004f88 <run_select+0x9c>
			  mode--;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8004f6e:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <run_select+0xbc>)
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	da01      	bge.n	8004f80 <run_select+0x94>
				  mode = 7;
 8004f7c:	2307      	movs	r3, #7
 8004f7e:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	480a      	ldr	r0, [pc, #40]	; (8004fac <run_select+0xc0>)
 8004f84:	f00b fc00 	bl	8010788 <iprintf>
		}
		if(ad_fl >= WALL_BASE_FL){
 8004f88:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <run_select+0xc4>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2bc7      	cmp	r3, #199	; 0xc7
 8004f8e:	d9b5      	bls.n	8004efc <run_select+0x10>
			  run_mode = mode;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <run_select+0xc8>)
 8004f96:	701a      	strb	r2, [r3, #0]
			  full_led_write(BLUEGREEN);
 8004f98:	2004      	movs	r0, #4
 8004f9a:	f00a fe61 	bl	800fc60 <full_led_write>
			  break;
 8004f9e:	bf00      	nop
		}
	}
}
 8004fa0:	bf00      	nop
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000af4 	.word	0x20000af4
 8004fac:	080119c4 	.word	0x080119c4
 8004fb0:	20000d64 	.word	0x20000d64
 8004fb4:	20000456 	.word	0x20000456

08004fb8 <driveA>:
//driveA
// 指定距離、指定加速度で加速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004fb8:	b590      	push	{r4, r7, lr}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	4608      	mov	r0, r1
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4623      	mov	r3, r4
 8004fc8:	80fb      	strh	r3, [r7, #6]
 8004fca:	4603      	mov	r3, r0
 8004fcc:	80bb      	strh	r3, [r7, #4]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	807b      	strh	r3, [r7, #2]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 8004fd6:	88bb      	ldrh	r3, [r7, #4]
 8004fd8:	ee07 3a90 	vmov	s15, r3
 8004fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe0:	4b25      	ldr	r3, [pc, #148]	; (8005078 <driveA+0xc0>)
 8004fe2:	edc3 7a00 	vstr	s15, [r3]
 8004fe6:	4b25      	ldr	r3, [pc, #148]	; (800507c <driveA+0xc4>)
 8004fe8:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8004fec:	887b      	ldrh	r3, [r7, #2]
 8004fee:	ee07 3a90 	vmov	s15, r3
 8004ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff6:	4b22      	ldr	r3, [pc, #136]	; (8005080 <driveA+0xc8>)
 8004ff8:	edc3 7a00 	vstr	s15, [r3]
 8004ffc:	4b21      	ldr	r3, [pc, #132]	; (8005084 <driveA+0xcc>)
 8004ffe:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 8005002:	88fb      	ldrh	r3, [r7, #6]
 8005004:	ee07 3a90 	vmov	s15, r3
 8005008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500c:	4b1e      	ldr	r3, [pc, #120]	; (8005088 <driveA+0xd0>)
 800500e:	edc3 7a00 	vstr	s15, [r3]
 8005012:	4b1e      	ldr	r3, [pc, #120]	; (800508c <driveA+0xd4>)
 8005014:	edc3 7a00 	vstr	s15, [r3]
	if(H_accel_flag)target_speed_l = target_speed_r = speed_min_p;
 8005018:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <driveA+0xd8>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <driveA+0x7e>
 8005020:	88bb      	ldrh	r3, [r7, #4]
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502a:	4b1a      	ldr	r3, [pc, #104]	; (8005094 <driveA+0xdc>)
 800502c:	edc3 7a00 	vstr	s15, [r3]
 8005030:	4b19      	ldr	r3, [pc, #100]	; (8005098 <driveA+0xe0>)
 8005032:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//走行開始
 8005036:	f7ff fe47 	bl	8004cc8 <drive_start>

	//----走行----
	while((dist_l < dist) || (dist_r < dist));				//左右のモータが指定距離以上進むまで待機
 800503a:	bf00      	nop
 800503c:	883b      	ldrh	r3, [r7, #0]
 800503e:	ee07 3a90 	vmov	s15, r3
 8005042:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005046:	4b15      	ldr	r3, [pc, #84]	; (800509c <driveA+0xe4>)
 8005048:	edd3 7a00 	vldr	s15, [r3]
 800504c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005054:	dcf2      	bgt.n	800503c <driveA+0x84>
 8005056:	883b      	ldrh	r3, [r7, #0]
 8005058:	ee07 3a90 	vmov	s15, r3
 800505c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005060:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <driveA+0xe8>)
 8005062:	edd3 7a00 	vldr	s15, [r3]
 8005066:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800506a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506e:	dce5      	bgt.n	800503c <driveA+0x84>

//	drive_stop();
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	bd90      	pop	{r4, r7, pc}
 8005078:	20000f78 	.word	0x20000f78
 800507c:	20000b5c 	.word	0x20000b5c
 8005080:	200001a4 	.word	0x200001a4
 8005084:	2000077c 	.word	0x2000077c
 8005088:	20000ae8 	.word	0x20000ae8
 800508c:	20000d68 	.word	0x20000d68
 8005090:	200002c9 	.word	0x200002c9
 8005094:	200001a0 	.word	0x200001a0
 8005098:	20000c0c 	.word	0x20000c0c
 800509c:	200015d0 	.word	0x200015d0
 80050a0:	20000af4 	.word	0x20000af4

080050a4 <driveD>:
//driveD
// 指定距離、指定減速度で減速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 80050a4:	b590      	push	{r4, r7, lr}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	4604      	mov	r4, r0
 80050ac:	4608      	mov	r0, r1
 80050ae:	4611      	mov	r1, r2
 80050b0:	461a      	mov	r2, r3
 80050b2:	4623      	mov	r3, r4
 80050b4:	80fb      	strh	r3, [r7, #6]
 80050b6:	4603      	mov	r3, r0
 80050b8:	80bb      	strh	r3, [r7, #4]
 80050ba:	460b      	mov	r3, r1
 80050bc:	807b      	strh	r3, [r7, #2]
 80050be:	4613      	mov	r3, r2
 80050c0:	803b      	strh	r3, [r7, #0]

	float speed_0 = (speed_l + speed_r) / 2;								//等速走行距離を計算するためにmain.cより参照
 80050c2:	4b58      	ldr	r3, [pc, #352]	; (8005224 <driveD+0x180>)
 80050c4:	ed93 7a00 	vldr	s14, [r3]
 80050c8:	4b57      	ldr	r3, [pc, #348]	; (8005228 <driveD+0x184>)
 80050ca:	edd3 7a00 	vldr	s15, [r3]
 80050ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050d2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80050d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050da:	edc7 7a03 	vstr	s15, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 80050de:	88bb      	ldrh	r3, [r7, #4]
 80050e0:	ee07 3a90 	vmov	s15, r3
 80050e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e8:	4b50      	ldr	r3, [pc, #320]	; (800522c <driveD+0x188>)
 80050ea:	edc3 7a00 	vstr	s15, [r3]
 80050ee:	4b50      	ldr	r3, [pc, #320]	; (8005230 <driveD+0x18c>)
 80050f0:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 80050f4:	887b      	ldrh	r3, [r7, #2]
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fe:	4b4d      	ldr	r3, [pc, #308]	; (8005234 <driveD+0x190>)
 8005100:	edc3 7a00 	vstr	s15, [r3]
 8005104:	4b4c      	ldr	r3, [pc, #304]	; (8005238 <driveD+0x194>)
 8005106:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 800510a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005116:	4b49      	ldr	r3, [pc, #292]	; (800523c <driveD+0x198>)
 8005118:	edc3 7a00 	vstr	s15, [r3]
 800511c:	4b48      	ldr	r3, [pc, #288]	; (8005240 <driveD+0x19c>)
 800511e:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//等速走行距離 = 総距離 - 減速に必要な距離
 8005122:	883b      	ldrh	r3, [r7, #0]
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800512c:	4b40      	ldr	r3, [pc, #256]	; (8005230 <driveD+0x18c>)
 800512e:	edd3 6a00 	vldr	s13, [r3]
 8005132:	4b3f      	ldr	r3, [pc, #252]	; (8005230 <driveD+0x18c>)
 8005134:	edd3 7a00 	vldr	s15, [r3]
 8005138:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800513c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005140:	edd7 7a03 	vldr	s15, [r7, #12]
 8005144:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005148:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800514c:	4b3c      	ldr	r3, [pc, #240]	; (8005240 <driveD+0x19c>)
 800514e:	edd3 7a00 	vldr	s15, [r3]
 8005152:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005156:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800515a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800515e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005162:	ee17 3a90 	vmov	r3, s15
 8005166:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	4a33      	ldr	r2, [pc, #204]	; (800523c <driveD+0x198>)
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	4a33      	ldr	r2, [pc, #204]	; (8005240 <driveD+0x19c>)
 8005172:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	4a32      	ldr	r2, [pc, #200]	; (8005244 <driveD+0x1a0>)
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	4a32      	ldr	r2, [pc, #200]	; (8005248 <driveD+0x1a4>)
 800517e:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 8005180:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005184:	2b00      	cmp	r3, #0
 8005186:	dd1c      	ble.n	80051c2 <driveD+0x11e>
		//----等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));	//a左右のモータが等速分の距離以上進むまで待機
 8005188:	bf00      	nop
 800518a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005196:	4b2c      	ldr	r3, [pc, #176]	; (8005248 <driveD+0x1a4>)
 8005198:	edd3 7a00 	vldr	s15, [r3]
 800519c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a4:	dcf1      	bgt.n	800518a <driveD+0xe6>
 80051a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051b2:	4b24      	ldr	r3, [pc, #144]	; (8005244 <driveD+0x1a0>)
 80051b4:	edd3 7a00 	vldr	s15, [r3]
 80051b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	dce3      	bgt.n	800518a <driveD+0xe6>
	}
	accel_l = accel_r = accel_p;
 80051c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ce:	4b1b      	ldr	r3, [pc, #108]	; (800523c <driveD+0x198>)
 80051d0:	edc3 7a00 	vstr	s15, [r3]
 80051d4:	4b1a      	ldr	r3, [pc, #104]	; (8005240 <driveD+0x19c>)
 80051d6:	edc3 7a00 	vstr	s15, [r3]
	//----減速走行----
	while((dist_l < dist) || (dist_r < dist));			//a左右のモータが減速分の距離以上進むまで待機
 80051da:	bf00      	nop
 80051dc:	883b      	ldrh	r3, [r7, #0]
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051e6:	4b18      	ldr	r3, [pc, #96]	; (8005248 <driveD+0x1a4>)
 80051e8:	edd3 7a00 	vldr	s15, [r3]
 80051ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f4:	dcf2      	bgt.n	80051dc <driveD+0x138>
 80051f6:	883b      	ldrh	r3, [r7, #0]
 80051f8:	ee07 3a90 	vmov	s15, r3
 80051fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005200:	4b10      	ldr	r3, [pc, #64]	; (8005244 <driveD+0x1a0>)
 8005202:	edd3 7a00 	vldr	s15, [r3]
 8005206:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800520a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520e:	dce5      	bgt.n	80051dc <driveD+0x138>

	if(!H_accel_flag)drive_stop();											//走行停止
 8005210:	4b0e      	ldr	r3, [pc, #56]	; (800524c <driveD+0x1a8>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <driveD+0x178>
 8005218:	f7ff fd84 	bl	8004d24 <drive_stop>
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	bd90      	pop	{r4, r7, pc}
 8005224:	20000af8 	.word	0x20000af8
 8005228:	200002bc 	.word	0x200002bc
 800522c:	20000f78 	.word	0x20000f78
 8005230:	20000b5c 	.word	0x20000b5c
 8005234:	200001a4 	.word	0x200001a4
 8005238:	2000077c 	.word	0x2000077c
 800523c:	20000ae8 	.word	0x20000ae8
 8005240:	20000d68 	.word	0x20000d68
 8005244:	20000af4 	.word	0x20000af4
 8005248:	200015d0 	.word	0x200015d0
 800524c:	200002c9 	.word	0x200002c9

08005250 <driveU>:
//driveU
// 指定距離分等速走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;									//等速走行のため加速度は0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	4a28      	ldr	r2, [pc, #160]	; (8005300 <driveU+0xb0>)
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	4a28      	ldr	r2, [pc, #160]	; (8005304 <driveU+0xb4>)
 8005264:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	4a27      	ldr	r2, [pc, #156]	; (8005308 <driveU+0xb8>)
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	4a27      	ldr	r2, [pc, #156]	; (800530c <driveU+0xbc>)
 8005270:	6013      	str	r3, [r2, #0]

	//----走行----
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 8005272:	e024      	b.n	80052be <driveU+0x6e>
		if(MF.FLAG.WEDGE){
 8005274:	4b26      	ldr	r3, [pc, #152]	; (8005310 <driveU+0xc0>)
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01d      	beq.n	80052be <driveU+0x6e>
			if(ad_l < WALL_BASE_L-30 || ad_r < WALL_BASE_R-10){
 8005282:	4b24      	ldr	r3, [pc, #144]	; (8005314 <driveU+0xc4>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b6d      	cmp	r3, #109	; 0x6d
 8005288:	d903      	bls.n	8005292 <driveU+0x42>
 800528a:	4b23      	ldr	r3, [pc, #140]	; (8005318 <driveU+0xc8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b6d      	cmp	r3, #109	; 0x6d
 8005290:	d815      	bhi.n	80052be <driveU+0x6e>
				while((dist_l < W_DIST) || (dist_r < W_DIST));	//左右のモータが壁切れ用指定距離以上進むまで待機
 8005292:	bf00      	nop
 8005294:	4b1d      	ldr	r3, [pc, #116]	; (800530c <driveU+0xbc>)
 8005296:	edd3 7a00 	vldr	s15, [r3]
 800529a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800531c <driveU+0xcc>
 800529e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a6:	d4f5      	bmi.n	8005294 <driveU+0x44>
 80052a8:	4b17      	ldr	r3, [pc, #92]	; (8005308 <driveU+0xb8>)
 80052aa:	edd3 7a00 	vldr	s15, [r3]
 80052ae:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800531c <driveU+0xcc>
 80052b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ba:	d4eb      	bmi.n	8005294 <driveU+0x44>
			break;
 80052bc:	e019      	b.n	80052f2 <driveU+0xa2>
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	ee07 3a90 	vmov	s15, r3
 80052c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052c8:	4b10      	ldr	r3, [pc, #64]	; (800530c <driveU+0xbc>)
 80052ca:	edd3 7a00 	vldr	s15, [r3]
 80052ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d6:	dccd      	bgt.n	8005274 <driveU+0x24>
 80052d8:	88fb      	ldrh	r3, [r7, #6]
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052e2:	4b09      	ldr	r3, [pc, #36]	; (8005308 <driveU+0xb8>)
 80052e4:	edd3 7a00 	vldr	s15, [r3]
 80052e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f0:	dcc0      	bgt.n	8005274 <driveU+0x24>
			}
		}
	}
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	20000ae8 	.word	0x20000ae8
 8005304:	20000d68 	.word	0x20000d68
 8005308:	20000af4 	.word	0x20000af4
 800530c:	200015d0 	.word	0x200015d0
 8005310:	20000f74 	.word	0x20000f74
 8005314:	20000b04 	.word	0x20000b04
 8005318:	20000f70 	.word	0x20000f70
 800531c:	428c0000 	.word	0x428c0000

08005320 <driveC>:
//driveC
// 指定距離分デフォルト速度で走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 800532a:	4b19      	ldr	r3, [pc, #100]	; (8005390 <driveC+0x70>)
 800532c:	4a19      	ldr	r2, [pc, #100]	; (8005394 <driveC+0x74>)
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	4a19      	ldr	r2, [pc, #100]	; (8005398 <driveC+0x78>)
 8005332:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 150;
 8005334:	4b16      	ldr	r3, [pc, #88]	; (8005390 <driveC+0x70>)
 8005336:	4a19      	ldr	r2, [pc, #100]	; (800539c <driveC+0x7c>)
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	4a19      	ldr	r2, [pc, #100]	; (80053a0 <driveC+0x80>)
 800533c:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;												//等速走行のため加速度は0
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	4a18      	ldr	r2, [pc, #96]	; (80053a4 <driveC+0x84>)
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	4a18      	ldr	r2, [pc, #96]	; (80053a8 <driveC+0x88>)
 8005348:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 800534a:	f7ff fcbd 	bl	8004cc8 <drive_start>
	//====回転====
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが定速分の距離以上進むまで待機
 800534e:	bf00      	nop
 8005350:	88fb      	ldrh	r3, [r7, #6]
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800535a:	4b14      	ldr	r3, [pc, #80]	; (80053ac <driveC+0x8c>)
 800535c:	edd3 7a00 	vldr	s15, [r3]
 8005360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005368:	dcf2      	bgt.n	8005350 <driveC+0x30>
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	ee07 3a90 	vmov	s15, r3
 8005370:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005374:	4b0e      	ldr	r3, [pc, #56]	; (80053b0 <driveC+0x90>)
 8005376:	edd3 7a00 	vldr	s15, [r3]
 800537a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800537e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005382:	dce5      	bgt.n	8005350 <driveC+0x30>

	drive_stop();											//走行停止
 8005384:	f7ff fcce 	bl	8004d24 <drive_stop>
}
 8005388:	bf00      	nop
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	43160000 	.word	0x43160000
 8005394:	20000f78 	.word	0x20000f78
 8005398:	20000b5c 	.word	0x20000b5c
 800539c:	200001a4 	.word	0x200001a4
 80053a0:	2000077c 	.word	0x2000077c
 80053a4:	20000ae8 	.word	0x20000ae8
 80053a8:	20000d68 	.word	0x20000d68
 80053ac:	200015d0 	.word	0x200015d0
 80053b0:	20000af4 	.word	0x20000af4

080053b4 <driveC2>:
//driveC2
//a指定距離分デフォルト逆回転速度で走行して停止する
//a引数1：dist …… 走行距離
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC2(uint16_t dist){
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4603      	mov	r3, r0
 80053bc:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = -250;
 80053be:	4b1a      	ldr	r3, [pc, #104]	; (8005428 <driveC2+0x74>)
 80053c0:	4a1a      	ldr	r2, [pc, #104]	; (800542c <driveC2+0x78>)
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	4a1a      	ldr	r2, [pc, #104]	; (8005430 <driveC2+0x7c>)
 80053c6:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = -250;
 80053c8:	4b17      	ldr	r3, [pc, #92]	; (8005428 <driveC2+0x74>)
 80053ca:	4a1a      	ldr	r2, [pc, #104]	; (8005434 <driveC2+0x80>)
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	4a1a      	ldr	r2, [pc, #104]	; (8005438 <driveC2+0x84>)
 80053d0:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;									//a等速走行のため加速度は0
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	4a19      	ldr	r2, [pc, #100]	; (800543c <driveC2+0x88>)
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	4a19      	ldr	r2, [pc, #100]	; (8005440 <driveC2+0x8c>)
 80053dc:	6013      	str	r3, [r2, #0]

	drive_start();											//a走行開始
 80053de:	f7ff fc73 	bl	8004cc8 <drive_start>
	//====a回転====
	while((dist_l > (-1*dist)) || (dist_r > (-1*dist)));	//a左右のモータが定速分の逆走距離以上進むまで待機
 80053e2:	bf00      	nop
 80053e4:	88fb      	ldrh	r3, [r7, #6]
 80053e6:	425b      	negs	r3, r3
 80053e8:	ee07 3a90 	vmov	s15, r3
 80053ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053f0:	4b14      	ldr	r3, [pc, #80]	; (8005444 <driveC2+0x90>)
 80053f2:	edd3 7a00 	vldr	s15, [r3]
 80053f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053fe:	d4f1      	bmi.n	80053e4 <driveC2+0x30>
 8005400:	88fb      	ldrh	r3, [r7, #6]
 8005402:	425b      	negs	r3, r3
 8005404:	ee07 3a90 	vmov	s15, r3
 8005408:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800540c:	4b0e      	ldr	r3, [pc, #56]	; (8005448 <driveC2+0x94>)
 800540e:	edd3 7a00 	vldr	s15, [r3]
 8005412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541a:	d4e3      	bmi.n	80053e4 <driveC2+0x30>

	drive_stop();											//a走行停止
 800541c:	f7ff fc82 	bl	8004d24 <drive_stop>
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	c37a0000 	.word	0xc37a0000
 800542c:	20000f78 	.word	0x20000f78
 8005430:	20000b5c 	.word	0x20000b5c
 8005434:	200001a4 	.word	0x200001a4
 8005438:	2000077c 	.word	0x2000077c
 800543c:	20000ae8 	.word	0x20000ae8
 8005440:	20000d68 	.word	0x20000d68
 8005444:	200015d0 	.word	0x200015d0
 8005448:	20000af4 	.word	0x20000af4

0800544c <slalomF>:
//slalomF
//aスラロームの前オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomF(int16_t accel_p, int16_t speed_p, uint8_t dist_p, uint16_t wall_fl, uint16_t wall_fr){
 800544c:	b590      	push	{r4, r7, lr}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	4604      	mov	r4, r0
 8005454:	4608      	mov	r0, r1
 8005456:	4611      	mov	r1, r2
 8005458:	461a      	mov	r2, r3
 800545a:	4623      	mov	r3, r4
 800545c:	80fb      	strh	r3, [r7, #6]
 800545e:	4603      	mov	r3, r0
 8005460:	80bb      	strh	r3, [r7, #4]
 8005462:	460b      	mov	r3, r1
 8005464:	70fb      	strb	r3, [r7, #3]
 8005466:	4613      	mov	r3, r2
 8005468:	803b      	strh	r3, [r7, #0]
	MF.FLAG.GYRO = 0;
 800546a:	4a2d      	ldr	r2, [pc, #180]	; (8005520 <slalomF+0xd4>)
 800546c:	8813      	ldrh	r3, [r2, #0]
 800546e:	f36f 2308 	bfc	r3, #8, #1
 8005472:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005474:	4a2a      	ldr	r2, [pc, #168]	; (8005520 <slalomF+0xd4>)
 8005476:	8813      	ldrh	r3, [r2, #0]
 8005478:	f043 0304 	orr.w	r3, r3, #4
 800547c:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 800547e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800548a:	4b26      	ldr	r3, [pc, #152]	; (8005524 <slalomF+0xd8>)
 800548c:	edc3 7a00 	vstr	s15, [r3]
 8005490:	4b25      	ldr	r3, [pc, #148]	; (8005528 <slalomF+0xdc>)
 8005492:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 8005496:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054a2:	4b22      	ldr	r3, [pc, #136]	; (800552c <slalomF+0xe0>)
 80054a4:	edc3 7a00 	vstr	s15, [r3]
 80054a8:	4b21      	ldr	r3, [pc, #132]	; (8005530 <slalomF+0xe4>)
 80054aa:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 80054ae:	f7ff fc61 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	4a1f      	ldr	r2, [pc, #124]	; (8005534 <slalomF+0xe8>)
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	4a1f      	ldr	r2, [pc, #124]	; (8005538 <slalomF+0xec>)
 80054bc:	6013      	str	r3, [r2, #0]
	while(dist_l < dist_p && dist_r < dist_p){
 80054be:	e00d      	b.n	80054dc <slalomF+0x90>
		if(ad_fl > wall_fl && ad_fr > wall_fr){
 80054c0:	883a      	ldrh	r2, [r7, #0]
 80054c2:	4b1e      	ldr	r3, [pc, #120]	; (800553c <slalomF+0xf0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d208      	bcs.n	80054dc <slalomF+0x90>
 80054ca:	8b3a      	ldrh	r2, [r7, #24]
 80054cc:	4b1c      	ldr	r3, [pc, #112]	; (8005540 <slalomF+0xf4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d203      	bcs.n	80054dc <slalomF+0x90>
			full_led_write(RED);
 80054d4:	2001      	movs	r0, #1
 80054d6:	f00a fbc3 	bl	800fc60 <full_led_write>
			break;
 80054da:	e019      	b.n	8005510 <slalomF+0xc4>
	while(dist_l < dist_p && dist_r < dist_p){
 80054dc:	78fb      	ldrb	r3, [r7, #3]
 80054de:	ee07 3a90 	vmov	s15, r3
 80054e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054e6:	4b14      	ldr	r3, [pc, #80]	; (8005538 <slalomF+0xec>)
 80054e8:	edd3 7a00 	vldr	s15, [r3]
 80054ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f4:	dd0c      	ble.n	8005510 <slalomF+0xc4>
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	ee07 3a90 	vmov	s15, r3
 80054fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005500:	4b0c      	ldr	r3, [pc, #48]	; (8005534 <slalomF+0xe8>)
 8005502:	edd3 7a00 	vldr	s15, [r3]
 8005506:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800550a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550e:	dcd7      	bgt.n	80054c0 <slalomF+0x74>
		}
	}
	drive_stop();
 8005510:	f7ff fc08 	bl	8004d24 <drive_stop>
	control_stop();
 8005514:	f7ff fc42 	bl	8004d9c <control_stop>
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	bd90      	pop	{r4, r7, pc}
 8005520:	20000f74 	.word	0x20000f74
 8005524:	20000ae8 	.word	0x20000ae8
 8005528:	20000d68 	.word	0x20000d68
 800552c:	200001a4 	.word	0x200001a4
 8005530:	2000077c 	.word	0x2000077c
 8005534:	20000af4 	.word	0x20000af4
 8005538:	200015d0 	.word	0x200015d0
 800553c:	20000d64 	.word	0x20000d64
 8005540:	20000c10 	.word	0x20000c10

08005544 <slalomR>:
//slalomR
//aスラロームの旋回部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomR(int16_t degaccel_p, int16_t omega_p, int16_t degree_p, int16_t speed_p){
 8005544:	b490      	push	{r4, r7}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	4604      	mov	r4, r0
 800554c:	4608      	mov	r0, r1
 800554e:	4611      	mov	r1, r2
 8005550:	461a      	mov	r2, r3
 8005552:	4623      	mov	r3, r4
 8005554:	80fb      	strh	r3, [r7, #6]
 8005556:	4603      	mov	r3, r0
 8005558:	80bb      	strh	r3, [r7, #4]
 800555a:	460b      	mov	r3, r1
 800555c:	807b      	strh	r3, [r7, #2]
 800555e:	4613      	mov	r3, r2
 8005560:	803b      	strh	r3, [r7, #0]
	MF.FLAG.GYRO = 1;
 8005562:	4a82      	ldr	r2, [pc, #520]	; (800576c <slalomR+0x228>)
 8005564:	8813      	ldrh	r3, [r2, #0]
 8005566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800556a:	8013      	strh	r3, [r2, #0]
	target_degaccel_z = degaccel_p;
 800556c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005570:	ee07 3a90 	vmov	s15, r3
 8005574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005578:	4b7d      	ldr	r3, [pc, #500]	; (8005770 <slalomR+0x22c>)
 800557a:	edc3 7a00 	vstr	s15, [r3]
	target_omega_z = 0;
 800557e:	4b7d      	ldr	r3, [pc, #500]	; (8005774 <slalomR+0x230>)
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
	speed_G = speed_p;
 8005586:	f9b7 3000 	ldrsh.w	r3, [r7]
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005592:	4b79      	ldr	r3, [pc, #484]	; (8005778 <slalomR+0x234>)
 8005594:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_degree;

	if(omega_p < 0){
 8005598:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	da1f      	bge.n	80055e0 <slalomR+0x9c>
		omega_min = omega_p;
 80055a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80055a4:	ee07 3a90 	vmov	s15, r3
 80055a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055ac:	4b73      	ldr	r3, [pc, #460]	; (800577c <slalomR+0x238>)
 80055ae:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_min * omega_min / target_degaccel_z / 2;
 80055b2:	4b72      	ldr	r3, [pc, #456]	; (800577c <slalomR+0x238>)
 80055b4:	ed93 7a00 	vldr	s14, [r3]
 80055b8:	4b70      	ldr	r3, [pc, #448]	; (800577c <slalomR+0x238>)
 80055ba:	edd3 7a00 	vldr	s15, [r3]
 80055be:	ee67 6a27 	vmul.f32	s13, s14, s15
 80055c2:	4b6b      	ldr	r3, [pc, #428]	; (8005770 <slalomR+0x22c>)
 80055c4:	edd3 7a00 	vldr	s15, [r3]
 80055c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80055d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055d8:	ee17 3a90 	vmov	r3, s15
 80055dc:	81fb      	strh	r3, [r7, #14]
 80055de:	e01e      	b.n	800561e <slalomR+0xda>
	}else{
		omega_max = omega_p;
 80055e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80055e4:	ee07 3a90 	vmov	s15, r3
 80055e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055ec:	4b64      	ldr	r3, [pc, #400]	; (8005780 <slalomR+0x23c>)
 80055ee:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_max * omega_max / target_degaccel_z / 2;
 80055f2:	4b63      	ldr	r3, [pc, #396]	; (8005780 <slalomR+0x23c>)
 80055f4:	ed93 7a00 	vldr	s14, [r3]
 80055f8:	4b61      	ldr	r3, [pc, #388]	; (8005780 <slalomR+0x23c>)
 80055fa:	edd3 7a00 	vldr	s15, [r3]
 80055fe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005602:	4b5b      	ldr	r3, [pc, #364]	; (8005770 <slalomR+0x22c>)
 8005604:	edd3 7a00 	vldr	s15, [r3]
 8005608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800560c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005610:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005618:	ee17 3a90 	vmov	r3, s15
 800561c:	81fb      	strh	r3, [r7, #14]
	}

	MF.FLAG.DRV = 1;
 800561e:	4a53      	ldr	r2, [pc, #332]	; (800576c <slalomR+0x228>)
 8005620:	8813      	ldrh	r3, [r2, #0]
 8005622:	f043 0302 	orr.w	r3, r3, #2
 8005626:	8013      	strh	r3, [r2, #0]
	if(omega_p < 0){
 8005628:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	da14      	bge.n	800565a <slalomR+0x116>
		while(degree_z > target_degree_z+c_degree);
 8005630:	bf00      	nop
 8005632:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005636:	ee07 3a90 	vmov	s15, r3
 800563a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800563e:	4b51      	ldr	r3, [pc, #324]	; (8005784 <slalomR+0x240>)
 8005640:	edd3 7a00 	vldr	s15, [r3]
 8005644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005648:	4b4f      	ldr	r3, [pc, #316]	; (8005788 <slalomR+0x244>)
 800564a:	edd3 7a00 	vldr	s15, [r3]
 800564e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005656:	d4ec      	bmi.n	8005632 <slalomR+0xee>
 8005658:	e013      	b.n	8005682 <slalomR+0x13e>
	}else{
		while(degree_z < target_degree_z+c_degree);
 800565a:	bf00      	nop
 800565c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005660:	ee07 3a90 	vmov	s15, r3
 8005664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005668:	4b46      	ldr	r3, [pc, #280]	; (8005784 <slalomR+0x240>)
 800566a:	edd3 7a00 	vldr	s15, [r3]
 800566e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005672:	4b45      	ldr	r3, [pc, #276]	; (8005788 <slalomR+0x244>)
 8005674:	edd3 7a00 	vldr	s15, [r3]
 8005678:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800567c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005680:	dcec      	bgt.n	800565c <slalomR+0x118>
	}

	target_degaccel_z = 0;
 8005682:	4b3b      	ldr	r3, [pc, #236]	; (8005770 <slalomR+0x22c>)
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	601a      	str	r2, [r3, #0]

	if(omega_p < 0){
 800568a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	da18      	bge.n	80056c4 <slalomR+0x180>
		while(degree_z > target_degree_z+(degree_p-c_degree-4));
 8005692:	bf00      	nop
 8005694:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005698:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	3b04      	subs	r3, #4
 80056a0:	ee07 3a90 	vmov	s15, r3
 80056a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056a8:	4b36      	ldr	r3, [pc, #216]	; (8005784 <slalomR+0x240>)
 80056aa:	edd3 7a00 	vldr	s15, [r3]
 80056ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056b2:	4b35      	ldr	r3, [pc, #212]	; (8005788 <slalomR+0x244>)
 80056b4:	edd3 7a00 	vldr	s15, [r3]
 80056b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c0:	d4e8      	bmi.n	8005694 <slalomR+0x150>
 80056c2:	e017      	b.n	80056f4 <slalomR+0x1b0>
	}else{
		while(degree_z < target_degree_z+(degree_p-c_degree+4));
 80056c4:	bf00      	nop
 80056c6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80056ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	3304      	adds	r3, #4
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056da:	4b2a      	ldr	r3, [pc, #168]	; (8005784 <slalomR+0x240>)
 80056dc:	edd3 7a00 	vldr	s15, [r3]
 80056e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056e4:	4b28      	ldr	r3, [pc, #160]	; (8005788 <slalomR+0x244>)
 80056e6:	edd3 7a00 	vldr	s15, [r3]
 80056ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f2:	dce8      	bgt.n	80056c6 <slalomR+0x182>
	}

	target_degaccel_z = -degaccel_p;
 80056f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056f8:	425b      	negs	r3, r3
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005702:	4b1b      	ldr	r3, [pc, #108]	; (8005770 <slalomR+0x22c>)
 8005704:	edc3 7a00 	vstr	s15, [r3]

	if(omega_p < 0){
 8005708:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	da14      	bge.n	800573a <slalomR+0x1f6>
		while(degree_z > target_degree_z+degree_p);
 8005710:	bf00      	nop
 8005712:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005716:	ee07 3a90 	vmov	s15, r3
 800571a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800571e:	4b19      	ldr	r3, [pc, #100]	; (8005784 <slalomR+0x240>)
 8005720:	edd3 7a00 	vldr	s15, [r3]
 8005724:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005728:	4b17      	ldr	r3, [pc, #92]	; (8005788 <slalomR+0x244>)
 800572a:	edd3 7a00 	vldr	s15, [r3]
 800572e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005736:	d4ec      	bmi.n	8005712 <slalomR+0x1ce>
	}else{
		while(degree_z < target_degree_z+degree_p);
	}
}
 8005738:	e013      	b.n	8005762 <slalomR+0x21e>
		while(degree_z < target_degree_z+degree_p);
 800573a:	bf00      	nop
 800573c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005740:	ee07 3a90 	vmov	s15, r3
 8005744:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005748:	4b0e      	ldr	r3, [pc, #56]	; (8005784 <slalomR+0x240>)
 800574a:	edd3 7a00 	vldr	s15, [r3]
 800574e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005752:	4b0d      	ldr	r3, [pc, #52]	; (8005788 <slalomR+0x244>)
 8005754:	edd3 7a00 	vldr	s15, [r3]
 8005758:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800575c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005760:	dcec      	bgt.n	800573c <slalomR+0x1f8>
}
 8005762:	bf00      	nop
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bc90      	pop	{r4, r7}
 800576a:	4770      	bx	lr
 800576c:	20000f74 	.word	0x20000f74
 8005770:	20000b60 	.word	0x20000b60
 8005774:	200001a8 	.word	0x200001a8
 8005778:	20000afc 	.word	0x20000afc
 800577c:	200002b8 	.word	0x200002b8
 8005780:	20000aec 	.word	0x20000aec
 8005784:	20000c08 	.word	0x20000c08
 8005788:	20000b64 	.word	0x20000b64

0800578c <slalomB>:
//slalomB
//aスラロームの後オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomB(int16_t accel_p, int16_t speed_p, uint8_t dist_p){
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	4603      	mov	r3, r0
 8005794:	80fb      	strh	r3, [r7, #6]
 8005796:	460b      	mov	r3, r1
 8005798:	80bb      	strh	r3, [r7, #4]
 800579a:	4613      	mov	r3, r2
 800579c:	70fb      	strb	r3, [r7, #3]
	MF.FLAG.GYRO = 0;
 800579e:	4a25      	ldr	r2, [pc, #148]	; (8005834 <slalomB+0xa8>)
 80057a0:	8813      	ldrh	r3, [r2, #0]
 80057a2:	f36f 2308 	bfc	r3, #8, #1
 80057a6:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80057a8:	4a22      	ldr	r2, [pc, #136]	; (8005834 <slalomB+0xa8>)
 80057aa:	8813      	ldrh	r3, [r2, #0]
 80057ac:	f043 0304 	orr.w	r3, r3, #4
 80057b0:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 80057b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057b6:	ee07 3a90 	vmov	s15, r3
 80057ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057be:	4b1e      	ldr	r3, [pc, #120]	; (8005838 <slalomB+0xac>)
 80057c0:	edc3 7a00 	vstr	s15, [r3]
 80057c4:	4b1d      	ldr	r3, [pc, #116]	; (800583c <slalomB+0xb0>)
 80057c6:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 80057ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057d6:	4b1a      	ldr	r3, [pc, #104]	; (8005840 <slalomB+0xb4>)
 80057d8:	edc3 7a00 	vstr	s15, [r3]
 80057dc:	4b19      	ldr	r3, [pc, #100]	; (8005844 <slalomB+0xb8>)
 80057de:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 80057e2:	f7ff fac7 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	4a17      	ldr	r2, [pc, #92]	; (8005848 <slalomB+0xbc>)
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	4a17      	ldr	r2, [pc, #92]	; (800584c <slalomB+0xc0>)
 80057f0:	6013      	str	r3, [r2, #0]
	while(dist_l < dist_p && dist_r < dist_p);
 80057f2:	bf00      	nop
 80057f4:	78fb      	ldrb	r3, [r7, #3]
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057fe:	4b13      	ldr	r3, [pc, #76]	; (800584c <slalomB+0xc0>)
 8005800:	edd3 7a00 	vldr	s15, [r3]
 8005804:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800580c:	dc00      	bgt.n	8005810 <slalomB+0x84>
}
 800580e:	e00c      	b.n	800582a <slalomB+0x9e>
	while(dist_l < dist_p && dist_r < dist_p);
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800581a:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <slalomB+0xbc>)
 800581c:	edd3 7a00 	vldr	s15, [r3]
 8005820:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005828:	dce4      	bgt.n	80057f4 <slalomB+0x68>
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	20000f74 	.word	0x20000f74
 8005838:	20000ae8 	.word	0x20000ae8
 800583c:	20000d68 	.word	0x20000d68
 8005840:	200001a4 	.word	0x200001a4
 8005844:	2000077c 	.word	0x2000077c
 8005848:	20000af4 	.word	0x20000af4
 800584c:	200015d0 	.word	0x200015d0

08005850 <set_position>:
//set_position
// 機体の尻を壁に当てて場所を区画中央に合わせる
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(){
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0

  driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8005854:	2064      	movs	r0, #100	; 0x64
 8005856:	f7ff fdad 	bl	80053b4 <driveC2>
  degree_z = target_degree_z;
 800585a:	4b05      	ldr	r3, [pc, #20]	; (8005870 <set_position+0x20>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a05      	ldr	r2, [pc, #20]	; (8005874 <set_position+0x24>)
 8005860:	6013      	str	r3, [r2, #0]
  start_flag = 0;
 8005862:	4b05      	ldr	r3, [pc, #20]	; (8005878 <set_position+0x28>)
 8005864:	2200      	movs	r2, #0
 8005866:	701a      	strb	r2, [r3, #0]
  start_sectionA();
 8005868:	f000 f808 	bl	800587c <start_sectionA>
  //driveC(SETPOS_SET);           //aデフォルト速度で区画中心になる分回転。回転後に停止する
}
 800586c:	bf00      	nop
 800586e:	bd80      	pop	{r7, pc}
 8005870:	20000c08 	.word	0x20000c08
 8005874:	20000b64 	.word	0x20000b64
 8005878:	200015d4 	.word	0x200015d4

0800587c <start_sectionA>:
//start_sectionA
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA(void){
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0

	control_start();
 8005880:	f7ff fa78 	bl	8004d74 <control_start>
	if(run_mode == LOW){
 8005884:	4b64      	ldr	r3, [pc, #400]	; (8005a18 <start_sectionA+0x19c>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b01      	cmp	r3, #1
 800588c:	d12a      	bne.n	80058e4 <start_sectionA+0x68>
		if(start_flag == 0){
 800588e:	4b63      	ldr	r3, [pc, #396]	; (8005a1c <start_sectionA+0x1a0>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d108      	bne.n	80058aa <start_sectionA+0x2e>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005898:	237d      	movs	r3, #125	; 0x7d
 800589a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800589e:	2132      	movs	r1, #50	; 0x32
 80058a0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80058a4:	f7ff fb88 	bl	8004fb8 <driveA>
 80058a8:	e0a8      	b.n	80059fc <start_sectionA+0x180>
		}else if(start_flag == 1){
 80058aa:	4b5c      	ldr	r3, [pc, #368]	; (8005a1c <start_sectionA+0x1a0>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d108      	bne.n	80058c6 <start_sectionA+0x4a>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 80058b4:	235b      	movs	r3, #91	; 0x5b
 80058b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80058ba:	2132      	movs	r1, #50	; 0x32
 80058bc:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80058c0:	f7ff fb7a 	bl	8004fb8 <driveA>
 80058c4:	e09a      	b.n	80059fc <start_sectionA+0x180>
		}else if(start_flag == 2){
 80058c6:	4b55      	ldr	r3, [pc, #340]	; (8005a1c <start_sectionA+0x1a0>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	f040 8095 	bne.w	80059fc <start_sectionA+0x180>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_START_HALF);				//aスタート半区画分加速しながら走行。走行後は停止しない
 80058d2:	2323      	movs	r3, #35	; 0x23
 80058d4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80058d8:	2132      	movs	r1, #50	; 0x32
 80058da:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80058de:	f7ff fb6b 	bl	8004fb8 <driveA>
 80058e2:	e08b      	b.n	80059fc <start_sectionA+0x180>
		}
	}else if(run_mode == MIDDLE){
 80058e4:	4b4c      	ldr	r3, [pc, #304]	; (8005a18 <start_sectionA+0x19c>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d129      	bne.n	8005942 <start_sectionA+0xc6>
		if(start_flag == 0){
 80058ee:	4b4b      	ldr	r3, [pc, #300]	; (8005a1c <start_sectionA+0x1a0>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d108      	bne.n	800590a <start_sectionA+0x8e>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_START);				//aスタート区画分加速しながら走行。走行後は停止しない
 80058f8:	237d      	movs	r3, #125	; 0x7d
 80058fa:	f44f 7216 	mov.w	r2, #600	; 0x258
 80058fe:	2132      	movs	r1, #50	; 0x32
 8005900:	f241 7070 	movw	r0, #6000	; 0x1770
 8005904:	f7ff fb58 	bl	8004fb8 <driveA>
 8005908:	e078      	b.n	80059fc <start_sectionA+0x180>
		}else if(start_flag == 1){
 800590a:	4b44      	ldr	r3, [pc, #272]	; (8005a1c <start_sectionA+0x1a0>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b01      	cmp	r3, #1
 8005912:	d108      	bne.n	8005926 <start_sectionA+0xaa>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);				//a半区画分加速しながら走行。走行後は停止しない
 8005914:	235b      	movs	r3, #91	; 0x5b
 8005916:	f44f 7216 	mov.w	r2, #600	; 0x258
 800591a:	2132      	movs	r1, #50	; 0x32
 800591c:	f241 7070 	movw	r0, #6000	; 0x1770
 8005920:	f7ff fb4a 	bl	8004fb8 <driveA>
 8005924:	e06a      	b.n	80059fc <start_sectionA+0x180>
		}else if(start_flag == 2){
 8005926:	4b3d      	ldr	r3, [pc, #244]	; (8005a1c <start_sectionA+0x1a0>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d165      	bne.n	80059fc <start_sectionA+0x180>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005930:	2323      	movs	r3, #35	; 0x23
 8005932:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005936:	2132      	movs	r1, #50	; 0x32
 8005938:	f241 7070 	movw	r0, #6000	; 0x1770
 800593c:	f7ff fb3c 	bl	8004fb8 <driveA>
 8005940:	e05c      	b.n	80059fc <start_sectionA+0x180>
		}
	}else if(run_mode == HIGH){
 8005942:	4b35      	ldr	r3, [pc, #212]	; (8005a18 <start_sectionA+0x19c>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b03      	cmp	r3, #3
 800594a:	d129      	bne.n	80059a0 <start_sectionA+0x124>
		if(start_flag == 0){
 800594c:	4b33      	ldr	r3, [pc, #204]	; (8005a1c <start_sectionA+0x1a0>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d108      	bne.n	8005968 <start_sectionA+0xec>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005956:	237d      	movs	r3, #125	; 0x7d
 8005958:	f44f 7248 	mov.w	r2, #800	; 0x320
 800595c:	2132      	movs	r1, #50	; 0x32
 800595e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005962:	f7ff fb29 	bl	8004fb8 <driveA>
 8005966:	e049      	b.n	80059fc <start_sectionA+0x180>
		}else if(start_flag == 1){
 8005968:	4b2c      	ldr	r3, [pc, #176]	; (8005a1c <start_sectionA+0x1a0>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b01      	cmp	r3, #1
 8005970:	d108      	bne.n	8005984 <start_sectionA+0x108>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005972:	235b      	movs	r3, #91	; 0x5b
 8005974:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005978:	2132      	movs	r1, #50	; 0x32
 800597a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800597e:	f7ff fb1b 	bl	8004fb8 <driveA>
 8005982:	e03b      	b.n	80059fc <start_sectionA+0x180>
		}else if(start_flag == 2){
 8005984:	4b25      	ldr	r3, [pc, #148]	; (8005a1c <start_sectionA+0x1a0>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d136      	bne.n	80059fc <start_sectionA+0x180>
			driveA(10000, SPEED_MIN, SPEED_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 800598e:	2323      	movs	r3, #35	; 0x23
 8005990:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005994:	2132      	movs	r1, #50	; 0x32
 8005996:	f242 7010 	movw	r0, #10000	; 0x2710
 800599a:	f7ff fb0d 	bl	8004fb8 <driveA>
 800599e:	e02d      	b.n	80059fc <start_sectionA+0x180>
		}
	}else if(run_mode == HIGH_HIGH){
 80059a0:	4b1d      	ldr	r3, [pc, #116]	; (8005a18 <start_sectionA+0x19c>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d128      	bne.n	80059fc <start_sectionA+0x180>
		if(start_flag == 0){
 80059aa:	4b1c      	ldr	r3, [pc, #112]	; (8005a1c <start_sectionA+0x1a0>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d108      	bne.n	80059c6 <start_sectionA+0x14a>
			driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 80059b4:	237d      	movs	r3, #125	; 0x7d
 80059b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059ba:	2132      	movs	r1, #50	; 0x32
 80059bc:	f242 7010 	movw	r0, #10000	; 0x2710
 80059c0:	f7ff fafa 	bl	8004fb8 <driveA>
 80059c4:	e01a      	b.n	80059fc <start_sectionA+0x180>
		}else if(start_flag == 1){
 80059c6:	4b15      	ldr	r3, [pc, #84]	; (8005a1c <start_sectionA+0x1a0>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d108      	bne.n	80059e2 <start_sectionA+0x166>
			driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 80059d0:	235b      	movs	r3, #91	; 0x5b
 80059d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059d6:	2132      	movs	r1, #50	; 0x32
 80059d8:	f242 7010 	movw	r0, #10000	; 0x2710
 80059dc:	f7ff faec 	bl	8004fb8 <driveA>
 80059e0:	e00c      	b.n	80059fc <start_sectionA+0x180>
		}else if(start_flag == 2){
 80059e2:	4b0e      	ldr	r3, [pc, #56]	; (8005a1c <start_sectionA+0x1a0>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d107      	bne.n	80059fc <start_sectionA+0x180>
			driveA(15000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 80059ec:	2323      	movs	r3, #35	; 0x23
 80059ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059f2:	2132      	movs	r1, #50	; 0x32
 80059f4:	f643 2098 	movw	r0, #15000	; 0x3a98
 80059f8:	f7ff fade 	bl	8004fb8 <driveA>
		}
	}
	start_flag = 1;
 80059fc:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <start_sectionA+0x1a0>)
 80059fe:	2201      	movs	r2, #1
 8005a00:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005a02:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <start_sectionA+0x1a4>)
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <start_sectionA+0x198>
 8005a10:	f00a f8b2 	bl	800fb78 <get_wall_info>
}
 8005a14:	bf00      	nop
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000456 	.word	0x20000456
 8005a1c:	200015d4 	.word	0x200015d4
 8005a20:	20000f74 	.word	0x20000f74

08005a24 <half_sectionA>:
//half_sectionA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0

	control_start();
 8005a28:	f7ff f9a4 	bl	8004d74 <control_start>
	if(run_mode == LOW){
 8005a2c:	4b20      	ldr	r3, [pc, #128]	; (8005ab0 <half_sectionA+0x8c>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d108      	bne.n	8005a48 <half_sectionA+0x24>
		driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005a36:	235b      	movs	r3, #91	; 0x5b
 8005a38:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005a3c:	2132      	movs	r1, #50	; 0x32
 8005a3e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005a42:	f7ff fab9 	bl	8004fb8 <driveA>
 8005a46:	e028      	b.n	8005a9a <half_sectionA+0x76>
	}else if(run_mode == MIDDLE){
 8005a48:	4b19      	ldr	r3, [pc, #100]	; (8005ab0 <half_sectionA+0x8c>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d108      	bne.n	8005a64 <half_sectionA+0x40>
		driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分加速しながら走行。走行後は停止しない
 8005a52:	235b      	movs	r3, #91	; 0x5b
 8005a54:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005a58:	2132      	movs	r1, #50	; 0x32
 8005a5a:	f241 7070 	movw	r0, #6000	; 0x1770
 8005a5e:	f7ff faab 	bl	8004fb8 <driveA>
 8005a62:	e01a      	b.n	8005a9a <half_sectionA+0x76>
	}else if(run_mode == HIGH){
 8005a64:	4b12      	ldr	r3, [pc, #72]	; (8005ab0 <half_sectionA+0x8c>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d108      	bne.n	8005a80 <half_sectionA+0x5c>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005a6e:	235b      	movs	r3, #91	; 0x5b
 8005a70:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005a74:	2132      	movs	r1, #50	; 0x32
 8005a76:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005a7a:	f7ff fa9d 	bl	8004fb8 <driveA>
 8005a7e:	e00c      	b.n	8005a9a <half_sectionA+0x76>
	}else if(run_mode == HIGH_HIGH){
 8005a80:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <half_sectionA+0x8c>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d107      	bne.n	8005a9a <half_sectionA+0x76>
		driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005a8a:	235b      	movs	r3, #91	; 0x5b
 8005a8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a90:	2132      	movs	r1, #50	; 0x32
 8005a92:	f242 7010 	movw	r0, #10000	; 0x2710
 8005a96:	f7ff fa8f 	bl	8004fb8 <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8005a9a:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <half_sectionA+0x90>)
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <half_sectionA+0x88>
 8005aa8:	f00a f866 	bl	800fb78 <get_wall_info>
}
 8005aac:	bf00      	nop
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20000456 	.word	0x20000456
 8005ab4:	20000f74 	.word	0x20000f74

08005ab8 <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0

	control_start();
 8005abc:	f7ff f95a 	bl	8004d74 <control_start>
	if(run_mode == LOW){
 8005ac0:	4b1a      	ldr	r3, [pc, #104]	; (8005b2c <half_sectionD+0x74>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d107      	bne.n	8005ada <half_sectionD+0x22>
		driveD(-4000, SPEED_MIN, SPEED_LOW, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005aca:	235b      	movs	r3, #91	; 0x5b
 8005acc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005ad0:	2132      	movs	r1, #50	; 0x32
 8005ad2:	4817      	ldr	r0, [pc, #92]	; (8005b30 <half_sectionD+0x78>)
 8005ad4:	f7ff fae6 	bl	80050a4 <driveD>
	}else if(run_mode == HIGH){
		driveD(-8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == HIGH_HIGH){
		driveD(-10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005ad8:	e025      	b.n	8005b26 <half_sectionD+0x6e>
	}else if(run_mode == MIDDLE){
 8005ada:	4b14      	ldr	r3, [pc, #80]	; (8005b2c <half_sectionD+0x74>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d107      	bne.n	8005af4 <half_sectionD+0x3c>
		driveD(-6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分指定減速度で減速走行。走行後は停止する
 8005ae4:	235b      	movs	r3, #91	; 0x5b
 8005ae6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005aea:	2132      	movs	r1, #50	; 0x32
 8005aec:	4811      	ldr	r0, [pc, #68]	; (8005b34 <half_sectionD+0x7c>)
 8005aee:	f7ff fad9 	bl	80050a4 <driveD>
}
 8005af2:	e018      	b.n	8005b26 <half_sectionD+0x6e>
	}else if(run_mode == HIGH){
 8005af4:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <half_sectionD+0x74>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d107      	bne.n	8005b0e <half_sectionD+0x56>
		driveD(-8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005afe:	235b      	movs	r3, #91	; 0x5b
 8005b00:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005b04:	2132      	movs	r1, #50	; 0x32
 8005b06:	480c      	ldr	r0, [pc, #48]	; (8005b38 <half_sectionD+0x80>)
 8005b08:	f7ff facc 	bl	80050a4 <driveD>
}
 8005b0c:	e00b      	b.n	8005b26 <half_sectionD+0x6e>
	}else if(run_mode == HIGH_HIGH){
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <half_sectionD+0x74>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d106      	bne.n	8005b26 <half_sectionD+0x6e>
		driveD(-10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005b18:	235b      	movs	r3, #91	; 0x5b
 8005b1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b1e:	2132      	movs	r1, #50	; 0x32
 8005b20:	4806      	ldr	r0, [pc, #24]	; (8005b3c <half_sectionD+0x84>)
 8005b22:	f7ff fabf 	bl	80050a4 <driveD>
}
 8005b26:	bf00      	nop
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20000456 	.word	0x20000456
 8005b30:	fffff060 	.word	0xfffff060
 8005b34:	ffffe890 	.word	0xffffe890
 8005b38:	ffffe0c0 	.word	0xffffe0c0
 8005b3c:	ffffd8f0 	.word	0xffffd8f0

08005b40 <half_sectionU>:
//half_sectionU
// 等速で半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionU(void){
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005b44:	2007      	movs	r0, #7
 8005b46:	f00a f88b 	bl	800fc60 <full_led_write>
	control_start();
 8005b4a:	f7ff f913 	bl	8004d74 <control_start>
	driveU(SEC_HALF);													//半区画分等速走行。走行後は停止しない
 8005b4e:	205b      	movs	r0, #91	; 0x5b
 8005b50:	f7ff fb7e 	bl	8005250 <driveU>
}
 8005b54:	bf00      	nop
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <half_sectionV>:
//half_sectionV
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionV(void){
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005b5c:	2007      	movs	r0, #7
 8005b5e:	f00a f87f 	bl	800fc60 <full_led_write>
	control_start();
 8005b62:	f7ff f907 	bl	8004d74 <control_start>
	driveU(SEC_HALF_V);													//半区画分等速走行。走行後は停止しない
 8005b66:	2082      	movs	r0, #130	; 0x82
 8005b68:	f7ff fb72 	bl	8005250 <driveU>
}
 8005b6c:	bf00      	nop
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <one_section>:
//one_section
// 1区画分進んで停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_section(void){
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0

	half_sectionA();													//半区画分加速走行
 8005b74:	f7ff ff56 	bl	8005a24 <half_sectionA>
	half_sectionD();													//半区画分減速走行のち停止
 8005b78:	f7ff ff9e 	bl	8005ab8 <half_sectionD>
}
 8005b7c:	bf00      	nop
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <one_sectionA>:
//one_sectionA
// 1区画分加速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA(void){
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8005b84:	2004      	movs	r0, #4
 8005b86:	f00a f86b 	bl	800fc60 <full_led_write>
	control_start();
 8005b8a:	f7ff f8f3 	bl	8004d74 <control_start>
	if(run_mode == LOW){
 8005b8e:	4b2b      	ldr	r3, [pc, #172]	; (8005c3c <one_sectionA+0xbc>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d10d      	bne.n	8005bb4 <one_sectionA+0x34>
		driveA(accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005b98:	4b29      	ldr	r3, [pc, #164]	; (8005c40 <one_sectionA+0xc0>)
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	b21b      	sxth	r3, r3
 8005b9e:	b298      	uxth	r0, r3
 8005ba0:	4b28      	ldr	r3, [pc, #160]	; (8005c44 <one_sectionA+0xc4>)
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b21b      	sxth	r3, r3
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	23b6      	movs	r3, #182	; 0xb6
 8005baa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005bae:	f7ff fa03 	bl	8004fb8 <driveA>
 8005bb2:	e037      	b.n	8005c24 <one_sectionA+0xa4>
	}else if(run_mode == MIDDLE){
 8005bb4:	4b21      	ldr	r3, [pc, #132]	; (8005c3c <one_sectionA+0xbc>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d10d      	bne.n	8005bda <one_sectionA+0x5a>
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分加速走行。走行後は停止しない
 8005bbe:	4b20      	ldr	r3, [pc, #128]	; (8005c40 <one_sectionA+0xc0>)
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b21b      	sxth	r3, r3
 8005bc4:	b298      	uxth	r0, r3
 8005bc6:	4b1f      	ldr	r3, [pc, #124]	; (8005c44 <one_sectionA+0xc4>)
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	b21b      	sxth	r3, r3
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	23b6      	movs	r3, #182	; 0xb6
 8005bd0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005bd4:	f7ff f9f0 	bl	8004fb8 <driveA>
 8005bd8:	e024      	b.n	8005c24 <one_sectionA+0xa4>
	}else if(run_mode == HIGH){
 8005bda:	4b18      	ldr	r3, [pc, #96]	; (8005c3c <one_sectionA+0xbc>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d10d      	bne.n	8005c00 <one_sectionA+0x80>
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005be4:	4b16      	ldr	r3, [pc, #88]	; (8005c40 <one_sectionA+0xc0>)
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	b21b      	sxth	r3, r3
 8005bea:	b298      	uxth	r0, r3
 8005bec:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <one_sectionA+0xc4>)
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b21b      	sxth	r3, r3
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	23b6      	movs	r3, #182	; 0xb6
 8005bf6:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005bfa:	f7ff f9dd 	bl	8004fb8 <driveA>
 8005bfe:	e011      	b.n	8005c24 <one_sectionA+0xa4>
	}else if(run_mode == HIGH_HIGH){
 8005c00:	4b0e      	ldr	r3, [pc, #56]	; (8005c3c <one_sectionA+0xbc>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d10c      	bne.n	8005c24 <one_sectionA+0xa4>
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005c0a:	4b0d      	ldr	r3, [pc, #52]	; (8005c40 <one_sectionA+0xc0>)
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	b21b      	sxth	r3, r3
 8005c10:	b298      	uxth	r0, r3
 8005c12:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <one_sectionA+0xc4>)
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b21b      	sxth	r3, r3
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	23b6      	movs	r3, #182	; 0xb6
 8005c1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c20:	f7ff f9ca 	bl	8004fb8 <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005c24:	4b08      	ldr	r3, [pc, #32]	; (8005c48 <one_sectionA+0xc8>)
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <one_sectionA+0xb6>
 8005c32:	f009 ffa1 	bl	800fb78 <get_wall_info>
}
 8005c36:	bf00      	nop
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000456 	.word	0x20000456
 8005c40:	20000454 	.word	0x20000454
 8005c44:	20000f88 	.word	0x20000f88
 8005c48:	20000f74 	.word	0x20000f74

08005c4c <one_sectionD>:
//one_sectionD
// 1区画分減速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD(void){
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005c50:	2003      	movs	r0, #3
 8005c52:	f00a f805 	bl	800fc60 <full_led_write>
	control_start();
 8005c56:	f7ff f88d 	bl	8004d74 <control_start>
		driveA(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
	}else if(run_mode == HIGH){
		driveA(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
	}
*/
	if(run_mode == LOW){
 8005c5a:	4b31      	ldr	r3, [pc, #196]	; (8005d20 <one_sectionD+0xd4>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d110      	bne.n	8005c86 <one_sectionD+0x3a>
		driveD(-accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF*2);				//1区画分減速走行。走行後は停止しない
 8005c64:	4b2f      	ldr	r3, [pc, #188]	; (8005d24 <one_sectionD+0xd8>)
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	b21b      	sxth	r3, r3
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	425b      	negs	r3, r3
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	b218      	sxth	r0, r3
 8005c72:	4b2d      	ldr	r3, [pc, #180]	; (8005d28 <one_sectionD+0xdc>)
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	b21b      	sxth	r3, r3
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	23b6      	movs	r3, #182	; 0xb6
 8005c7c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005c80:	f7ff fa10 	bl	80050a4 <driveD>
 8005c84:	e040      	b.n	8005d08 <one_sectionD+0xbc>
	}else if(run_mode == MIDDLE){
 8005c86:	4b26      	ldr	r3, [pc, #152]	; (8005d20 <one_sectionD+0xd4>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d110      	bne.n	8005cb2 <one_sectionD+0x66>
		driveD(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005c90:	4b24      	ldr	r3, [pc, #144]	; (8005d24 <one_sectionD+0xd8>)
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	b21b      	sxth	r3, r3
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	425b      	negs	r3, r3
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	b218      	sxth	r0, r3
 8005c9e:	4b22      	ldr	r3, [pc, #136]	; (8005d28 <one_sectionD+0xdc>)
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	b21b      	sxth	r3, r3
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	23b6      	movs	r3, #182	; 0xb6
 8005ca8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005cac:	f7ff f9fa 	bl	80050a4 <driveD>
 8005cb0:	e02a      	b.n	8005d08 <one_sectionD+0xbc>
	}else if(run_mode == HIGH){
 8005cb2:	4b1b      	ldr	r3, [pc, #108]	; (8005d20 <one_sectionD+0xd4>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d110      	bne.n	8005cde <one_sectionD+0x92>
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005cbc:	4b19      	ldr	r3, [pc, #100]	; (8005d24 <one_sectionD+0xd8>)
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	b21b      	sxth	r3, r3
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	425b      	negs	r3, r3
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	b218      	sxth	r0, r3
 8005cca:	4b17      	ldr	r3, [pc, #92]	; (8005d28 <one_sectionD+0xdc>)
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	b21b      	sxth	r3, r3
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	23b6      	movs	r3, #182	; 0xb6
 8005cd4:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005cd8:	f7ff f9e4 	bl	80050a4 <driveD>
 8005cdc:	e014      	b.n	8005d08 <one_sectionD+0xbc>
	}else if(run_mode == HIGH_HIGH){
 8005cde:	4b10      	ldr	r3, [pc, #64]	; (8005d20 <one_sectionD+0xd4>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	d10f      	bne.n	8005d08 <one_sectionD+0xbc>
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005ce8:	4b0e      	ldr	r3, [pc, #56]	; (8005d24 <one_sectionD+0xd8>)
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	b21b      	sxth	r3, r3
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	425b      	negs	r3, r3
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	b218      	sxth	r0, r3
 8005cf6:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <one_sectionD+0xdc>)
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b21b      	sxth	r3, r3
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	23b6      	movs	r3, #182	; 0xb6
 8005d00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d04:	f7ff f9ce 	bl	80050a4 <driveD>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005d08:	4b08      	ldr	r3, [pc, #32]	; (8005d2c <one_sectionD+0xe0>)
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <one_sectionD+0xce>
 8005d16:	f009 ff2f 	bl	800fb78 <get_wall_info>
}
 8005d1a:	bf00      	nop
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	20000456 	.word	0x20000456
 8005d24:	20000454 	.word	0x20000454
 8005d28:	20000f88 	.word	0x20000f88
 8005d2c:	20000f74 	.word	0x20000f74

08005d30 <one_sectionVA>:
//one_sectionVA
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVA(void){
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8005d34:	2004      	movs	r0, #4
 8005d36:	f009 ff93 	bl	800fc60 <full_led_write>
	control_start();
 8005d3a:	f7ff f81b 	bl	8004d74 <control_start>
	if(run_mode == LOW){
 8005d3e:	4b28      	ldr	r3, [pc, #160]	; (8005de0 <one_sectionVA+0xb0>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d10e      	bne.n	8005d66 <one_sectionVA+0x36>
		driveA(accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005d48:	4b26      	ldr	r3, [pc, #152]	; (8005de4 <one_sectionVA+0xb4>)
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	b21b      	sxth	r3, r3
 8005d4e:	b298      	uxth	r0, r3
 8005d50:	4b25      	ldr	r3, [pc, #148]	; (8005de8 <one_sectionVA+0xb8>)
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b21b      	sxth	r3, r3
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005d5c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005d60:	f7ff f92a 	bl	8004fb8 <driveA>
	}else if(run_mode == HIGH){
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}else if(run_mode == HIGH_HIGH){
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}
}
 8005d64:	e03a      	b.n	8005ddc <one_sectionVA+0xac>
	}else if(run_mode == MIDDLE){
 8005d66:	4b1e      	ldr	r3, [pc, #120]	; (8005de0 <one_sectionVA+0xb0>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d10e      	bne.n	8005d8e <one_sectionVA+0x5e>
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005d70:	4b1c      	ldr	r3, [pc, #112]	; (8005de4 <one_sectionVA+0xb4>)
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	b21b      	sxth	r3, r3
 8005d76:	b298      	uxth	r0, r3
 8005d78:	4b1b      	ldr	r3, [pc, #108]	; (8005de8 <one_sectionVA+0xb8>)
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b21b      	sxth	r3, r3
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005d84:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005d88:	f7ff f916 	bl	8004fb8 <driveA>
}
 8005d8c:	e026      	b.n	8005ddc <one_sectionVA+0xac>
	}else if(run_mode == HIGH){
 8005d8e:	4b14      	ldr	r3, [pc, #80]	; (8005de0 <one_sectionVA+0xb0>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d10e      	bne.n	8005db6 <one_sectionVA+0x86>
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005d98:	4b12      	ldr	r3, [pc, #72]	; (8005de4 <one_sectionVA+0xb4>)
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	b21b      	sxth	r3, r3
 8005d9e:	b298      	uxth	r0, r3
 8005da0:	4b11      	ldr	r3, [pc, #68]	; (8005de8 <one_sectionVA+0xb8>)
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b21b      	sxth	r3, r3
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005dac:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005db0:	f7ff f902 	bl	8004fb8 <driveA>
}
 8005db4:	e012      	b.n	8005ddc <one_sectionVA+0xac>
	}else if(run_mode == HIGH_HIGH){
 8005db6:	4b0a      	ldr	r3, [pc, #40]	; (8005de0 <one_sectionVA+0xb0>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d10d      	bne.n	8005ddc <one_sectionVA+0xac>
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005dc0:	4b08      	ldr	r3, [pc, #32]	; (8005de4 <one_sectionVA+0xb4>)
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	b21b      	sxth	r3, r3
 8005dc6:	b298      	uxth	r0, r3
 8005dc8:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <one_sectionVA+0xb8>)
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	b21b      	sxth	r3, r3
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005dd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005dd8:	f7ff f8ee 	bl	8004fb8 <driveA>
}
 8005ddc:	bf00      	nop
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20000456 	.word	0x20000456
 8005de4:	20000454 	.word	0x20000454
 8005de8:	20000f88 	.word	0x20000f88

08005dec <one_sectionVD>:
//one_sectionVD
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVD(void){
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005df0:	2003      	movs	r0, #3
 8005df2:	f009 ff35 	bl	800fc60 <full_led_write>
	control_start();
 8005df6:	f7fe ffbd 	bl	8004d74 <control_start>
		driveA(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);			//1区画分減速走行。走行後は停止しない
	}else if(run_mode == HIGH){
		driveA(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}
*/
	if(run_mode == LOW){
 8005dfa:	4b2e      	ldr	r3, [pc, #184]	; (8005eb4 <one_sectionVD+0xc8>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d111      	bne.n	8005e28 <one_sectionVD+0x3c>
		driveD(-accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8005e04:	4b2c      	ldr	r3, [pc, #176]	; (8005eb8 <one_sectionVD+0xcc>)
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b21b      	sxth	r3, r3
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	425b      	negs	r3, r3
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	b218      	sxth	r0, r3
 8005e12:	4b2a      	ldr	r3, [pc, #168]	; (8005ebc <one_sectionVD+0xd0>)
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b21b      	sxth	r3, r3
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005e1e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005e22:	f7ff f93f 	bl	80050a4 <driveD>
	}else if(run_mode == HIGH){
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}else if(run_mode == HIGH_HIGH){
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}
}
 8005e26:	e043      	b.n	8005eb0 <one_sectionVD+0xc4>
	}else if(run_mode == MIDDLE){
 8005e28:	4b22      	ldr	r3, [pc, #136]	; (8005eb4 <one_sectionVD+0xc8>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d111      	bne.n	8005e56 <one_sectionVD+0x6a>
		driveD(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);			//1区画分減速走行。走行後は停止しない
 8005e32:	4b21      	ldr	r3, [pc, #132]	; (8005eb8 <one_sectionVD+0xcc>)
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	b21b      	sxth	r3, r3
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	425b      	negs	r3, r3
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	b218      	sxth	r0, r3
 8005e40:	4b1e      	ldr	r3, [pc, #120]	; (8005ebc <one_sectionVD+0xd0>)
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b21b      	sxth	r3, r3
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005e4c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005e50:	f7ff f928 	bl	80050a4 <driveD>
}
 8005e54:	e02c      	b.n	8005eb0 <one_sectionVD+0xc4>
	}else if(run_mode == HIGH){
 8005e56:	4b17      	ldr	r3, [pc, #92]	; (8005eb4 <one_sectionVD+0xc8>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d111      	bne.n	8005e84 <one_sectionVD+0x98>
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8005e60:	4b15      	ldr	r3, [pc, #84]	; (8005eb8 <one_sectionVD+0xcc>)
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	b21b      	sxth	r3, r3
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	425b      	negs	r3, r3
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	b218      	sxth	r0, r3
 8005e6e:	4b13      	ldr	r3, [pc, #76]	; (8005ebc <one_sectionVD+0xd0>)
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b21b      	sxth	r3, r3
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005e7a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005e7e:	f7ff f911 	bl	80050a4 <driveD>
}
 8005e82:	e015      	b.n	8005eb0 <one_sectionVD+0xc4>
	}else if(run_mode == HIGH_HIGH){
 8005e84:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <one_sectionVD+0xc8>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d110      	bne.n	8005eb0 <one_sectionVD+0xc4>
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8005e8e:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <one_sectionVD+0xcc>)
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b21b      	sxth	r3, r3
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	425b      	negs	r3, r3
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	b218      	sxth	r0, r3
 8005e9c:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <one_sectionVD+0xd0>)
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b21b      	sxth	r3, r3
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005ea8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005eac:	f7ff f8fa 	bl	80050a4 <driveD>
}
 8005eb0:	bf00      	nop
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20000456 	.word	0x20000456
 8005eb8:	20000454 	.word	0x20000454
 8005ebc:	20000f88 	.word	0x20000f88

08005ec0 <one_sectionU>:
//one_sectionU
// 等速で1区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005ec4:	2007      	movs	r0, #7
 8005ec6:	f009 fecb 	bl	800fc60 <full_led_write>
	control_start();
 8005eca:	f7fe ff53 	bl	8004d74 <control_start>
	driveU(SEC_HALF*2);													//1区画分等速走行。走行後は停止しない
 8005ece:	20b6      	movs	r0, #182	; 0xb6
 8005ed0:	f7ff f9be 	bl	8005250 <driveU>
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得
 8005ed4:	4b05      	ldr	r3, [pc, #20]	; (8005eec <one_sectionU+0x2c>)
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <one_sectionU+0x26>
 8005ee2:	f009 fe49 	bl	800fb78 <get_wall_info>
}
 8005ee6:	bf00      	nop
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000f74 	.word	0x20000f74

08005ef0 <rotate_R90>:
//rotate_R90
// 右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 8005ef0:	b598      	push	{r3, r4, r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 8005ef4:	4b56      	ldr	r3, [pc, #344]	; (8006050 <rotate_R90+0x160>)
 8005ef6:	4a57      	ldr	r2, [pc, #348]	; (8006054 <rotate_R90+0x164>)
 8005ef8:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 8005efa:	4b57      	ldr	r3, [pc, #348]	; (8006058 <rotate_R90+0x168>)
 8005efc:	4a57      	ldr	r2, [pc, #348]	; (800605c <rotate_R90+0x16c>)
 8005efe:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8005f00:	4b57      	ldr	r3, [pc, #348]	; (8006060 <rotate_R90+0x170>)
 8005f02:	4a58      	ldr	r2, [pc, #352]	; (8006064 <rotate_R90+0x174>)
 8005f04:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 8005f06:	4b52      	ldr	r3, [pc, #328]	; (8006050 <rotate_R90+0x160>)
 8005f08:	edd3 7a00 	vldr	s15, [r3]
 8005f0c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8006068 <rotate_R90+0x178>
 8005f10:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f14:	ee16 0a90 	vmov	r0, s13
 8005f18:	f7fa fb0e 	bl	8000538 <__aeabi_f2d>
 8005f1c:	a34a      	add	r3, pc, #296	; (adr r3, 8006048 <rotate_R90+0x158>)
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	f7fa fb61 	bl	80005e8 <__aeabi_dmul>
 8005f26:	4603      	mov	r3, r0
 8005f28:	460c      	mov	r4, r1
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	f04f 0200 	mov.w	r2, #0
 8005f32:	4b4e      	ldr	r3, [pc, #312]	; (800606c <rotate_R90+0x17c>)
 8005f34:	f7fa fb58 	bl	80005e8 <__aeabi_dmul>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	4621      	mov	r1, r4
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f48:	f7fa fc78 	bl	800083c <__aeabi_ddiv>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	460c      	mov	r4, r1
 8005f50:	4618      	mov	r0, r3
 8005f52:	4621      	mov	r1, r4
 8005f54:	f7fa fe20 	bl	8000b98 <__aeabi_d2f>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	4b45      	ldr	r3, [pc, #276]	; (8006070 <rotate_R90+0x180>)
 8005f5c:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 8005f5e:	4b3c      	ldr	r3, [pc, #240]	; (8006050 <rotate_R90+0x160>)
 8005f60:	edd3 7a00 	vldr	s15, [r3]
 8005f64:	eef1 7a67 	vneg.f32	s15, s15
 8005f68:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006068 <rotate_R90+0x178>
 8005f6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f70:	ee16 0a90 	vmov	r0, s13
 8005f74:	f7fa fae0 	bl	8000538 <__aeabi_f2d>
 8005f78:	a333      	add	r3, pc, #204	; (adr r3, 8006048 <rotate_R90+0x158>)
 8005f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7e:	f7fa fb33 	bl	80005e8 <__aeabi_dmul>
 8005f82:	4603      	mov	r3, r0
 8005f84:	460c      	mov	r4, r1
 8005f86:	4618      	mov	r0, r3
 8005f88:	4621      	mov	r1, r4
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	4b37      	ldr	r3, [pc, #220]	; (800606c <rotate_R90+0x17c>)
 8005f90:	f7fa fb2a 	bl	80005e8 <__aeabi_dmul>
 8005f94:	4603      	mov	r3, r0
 8005f96:	460c      	mov	r4, r1
 8005f98:	4618      	mov	r0, r3
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fa4:	f7fa fc4a 	bl	800083c <__aeabi_ddiv>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	4618      	mov	r0, r3
 8005fae:	4621      	mov	r1, r4
 8005fb0:	f7fa fdf2 	bl	8000b98 <__aeabi_d2f>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	4b2f      	ldr	r3, [pc, #188]	; (8006074 <rotate_R90+0x184>)
 8005fb8:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005fba:	f7fe fe85 	bl	8004cc8 <drive_start>
	control_stop();
 8005fbe:	f7fe feed 	bl	8004d9c <control_stop>
	while(degree_z > target_degree_z-80);
 8005fc2:	bf00      	nop
 8005fc4:	4b2c      	ldr	r3, [pc, #176]	; (8006078 <rotate_R90+0x188>)
 8005fc6:	edd3 7a00 	vldr	s15, [r3]
 8005fca:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800607c <rotate_R90+0x18c>
 8005fce:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005fd2:	4b2b      	ldr	r3, [pc, #172]	; (8006080 <rotate_R90+0x190>)
 8005fd4:	edd3 7a00 	vldr	s15, [r3]
 8005fd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fe0:	d4f0      	bmi.n	8005fc4 <rotate_R90+0xd4>

	accel_l = -30000;
 8005fe2:	4b1d      	ldr	r3, [pc, #116]	; (8006058 <rotate_R90+0x168>)
 8005fe4:	4a27      	ldr	r2, [pc, #156]	; (8006084 <rotate_R90+0x194>)
 8005fe6:	601a      	str	r2, [r3, #0]
	accel_r = 30000;
 8005fe8:	4b1d      	ldr	r3, [pc, #116]	; (8006060 <rotate_R90+0x170>)
 8005fea:	4a27      	ldr	r2, [pc, #156]	; (8006088 <rotate_R90+0x198>)
 8005fec:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 8005fee:	4b27      	ldr	r3, [pc, #156]	; (800608c <rotate_R90+0x19c>)
 8005ff0:	4a27      	ldr	r2, [pc, #156]	; (8006090 <rotate_R90+0x1a0>)
 8005ff2:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 8005ff4:	4b27      	ldr	r3, [pc, #156]	; (8006094 <rotate_R90+0x1a4>)
 8005ff6:	4a28      	ldr	r2, [pc, #160]	; (8006098 <rotate_R90+0x1a8>)
 8005ff8:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 8005ffa:	bf00      	nop
 8005ffc:	4b1e      	ldr	r3, [pc, #120]	; (8006078 <rotate_R90+0x188>)
 8005ffe:	edd3 7a00 	vldr	s15, [r3]
 8006002:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800609c <rotate_R90+0x1ac>
 8006006:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800600a:	4b1d      	ldr	r3, [pc, #116]	; (8006080 <rotate_R90+0x190>)
 800600c:	edd3 7a00 	vldr	s15, [r3]
 8006010:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006018:	d4f0      	bmi.n	8005ffc <rotate_R90+0x10c>

	if(!MF.FLAG.XDIR){
 800601a:	4b21      	ldr	r3, [pc, #132]	; (80060a0 <rotate_R90+0x1b0>)
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d104      	bne.n	8006032 <rotate_R90+0x142>
		turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006028:	2101      	movs	r1, #1
 800602a:	2001      	movs	r0, #1
 800602c:	f008 f848 	bl	800e0c0 <turn_dir>
 8006030:	e003      	b.n	800603a <rotate_R90+0x14a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006032:	2103      	movs	r1, #3
 8006034:	2002      	movs	r0, #2
 8006036:	f008 f843 	bl	800e0c0 <turn_dir>
	}
	drive_stop();
 800603a:	f7fe fe73 	bl	8004d24 <drive_stop>
}
 800603e:	bf00      	nop
 8006040:	bd98      	pop	{r3, r4, r7, pc}
 8006042:	bf00      	nop
 8006044:	f3af 8000 	nop.w
 8006048:	54442d18 	.word	0x54442d18
 800604c:	400921fb 	.word	0x400921fb
 8006050:	200001a8 	.word	0x200001a8
 8006054:	44480000 	.word	0x44480000
 8006058:	20000d68 	.word	0x20000d68
 800605c:	453b8000 	.word	0x453b8000
 8006060:	20000ae8 	.word	0x20000ae8
 8006064:	c53b8000 	.word	0xc53b8000
 8006068:	43340000 	.word	0x43340000
 800606c:	40508000 	.word	0x40508000
 8006070:	2000077c 	.word	0x2000077c
 8006074:	20000f78 	.word	0x20000f78
 8006078:	20000c08 	.word	0x20000c08
 800607c:	42a00000 	.word	0x42a00000
 8006080:	20000b64 	.word	0x20000b64
 8006084:	c6ea6000 	.word	0xc6ea6000
 8006088:	46ea6000 	.word	0x46ea6000
 800608c:	20000b5c 	.word	0x20000b5c
 8006090:	42c80000 	.word	0x42c80000
 8006094:	200001a4 	.word	0x200001a4
 8006098:	c2c80000 	.word	0xc2c80000
 800609c:	42b40000 	.word	0x42b40000
 80060a0:	20000f74 	.word	0x20000f74
 80060a4:	00000000 	.word	0x00000000

080060a8 <rotate_L90>:
//rotate_L90
// 左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 80060a8:	b598      	push	{r3, r4, r7, lr}
 80060aa:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 80060ac:	4b56      	ldr	r3, [pc, #344]	; (8006208 <rotate_L90+0x160>)
 80060ae:	4a57      	ldr	r2, [pc, #348]	; (800620c <rotate_L90+0x164>)
 80060b0:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 80060b2:	4b57      	ldr	r3, [pc, #348]	; (8006210 <rotate_L90+0x168>)
 80060b4:	4a57      	ldr	r2, [pc, #348]	; (8006214 <rotate_L90+0x16c>)
 80060b6:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 80060b8:	4b57      	ldr	r3, [pc, #348]	; (8006218 <rotate_L90+0x170>)
 80060ba:	4a58      	ldr	r2, [pc, #352]	; (800621c <rotate_L90+0x174>)
 80060bc:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 80060be:	4b52      	ldr	r3, [pc, #328]	; (8006208 <rotate_L90+0x160>)
 80060c0:	edd3 7a00 	vldr	s15, [r3]
 80060c4:	eef1 7a67 	vneg.f32	s15, s15
 80060c8:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006220 <rotate_L90+0x178>
 80060cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80060d0:	ee16 0a90 	vmov	r0, s13
 80060d4:	f7fa fa30 	bl	8000538 <__aeabi_f2d>
 80060d8:	a349      	add	r3, pc, #292	; (adr r3, 8006200 <rotate_L90+0x158>)
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	f7fa fa83 	bl	80005e8 <__aeabi_dmul>
 80060e2:	4603      	mov	r3, r0
 80060e4:	460c      	mov	r4, r1
 80060e6:	4618      	mov	r0, r3
 80060e8:	4621      	mov	r1, r4
 80060ea:	f04f 0200 	mov.w	r2, #0
 80060ee:	4b4d      	ldr	r3, [pc, #308]	; (8006224 <rotate_L90+0x17c>)
 80060f0:	f7fa fa7a 	bl	80005e8 <__aeabi_dmul>
 80060f4:	4603      	mov	r3, r0
 80060f6:	460c      	mov	r4, r1
 80060f8:	4618      	mov	r0, r3
 80060fa:	4621      	mov	r1, r4
 80060fc:	f04f 0200 	mov.w	r2, #0
 8006100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006104:	f7fa fb9a 	bl	800083c <__aeabi_ddiv>
 8006108:	4603      	mov	r3, r0
 800610a:	460c      	mov	r4, r1
 800610c:	4618      	mov	r0, r3
 800610e:	4621      	mov	r1, r4
 8006110:	f7fa fd42 	bl	8000b98 <__aeabi_d2f>
 8006114:	4602      	mov	r2, r0
 8006116:	4b44      	ldr	r3, [pc, #272]	; (8006228 <rotate_L90+0x180>)
 8006118:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 800611a:	4b3b      	ldr	r3, [pc, #236]	; (8006208 <rotate_L90+0x160>)
 800611c:	edd3 7a00 	vldr	s15, [r3]
 8006120:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006220 <rotate_L90+0x178>
 8006124:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006128:	ee16 0a90 	vmov	r0, s13
 800612c:	f7fa fa04 	bl	8000538 <__aeabi_f2d>
 8006130:	a333      	add	r3, pc, #204	; (adr r3, 8006200 <rotate_L90+0x158>)
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	f7fa fa57 	bl	80005e8 <__aeabi_dmul>
 800613a:	4603      	mov	r3, r0
 800613c:	460c      	mov	r4, r1
 800613e:	4618      	mov	r0, r3
 8006140:	4621      	mov	r1, r4
 8006142:	f04f 0200 	mov.w	r2, #0
 8006146:	4b37      	ldr	r3, [pc, #220]	; (8006224 <rotate_L90+0x17c>)
 8006148:	f7fa fa4e 	bl	80005e8 <__aeabi_dmul>
 800614c:	4603      	mov	r3, r0
 800614e:	460c      	mov	r4, r1
 8006150:	4618      	mov	r0, r3
 8006152:	4621      	mov	r1, r4
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800615c:	f7fa fb6e 	bl	800083c <__aeabi_ddiv>
 8006160:	4603      	mov	r3, r0
 8006162:	460c      	mov	r4, r1
 8006164:	4618      	mov	r0, r3
 8006166:	4621      	mov	r1, r4
 8006168:	f7fa fd16 	bl	8000b98 <__aeabi_d2f>
 800616c:	4602      	mov	r2, r0
 800616e:	4b2f      	ldr	r3, [pc, #188]	; (800622c <rotate_L90+0x184>)
 8006170:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8006172:	f7fe fda9 	bl	8004cc8 <drive_start>
	control_stop();
 8006176:	f7fe fe11 	bl	8004d9c <control_stop>
	while(degree_z < target_degree_z+80);
 800617a:	bf00      	nop
 800617c:	4b2c      	ldr	r3, [pc, #176]	; (8006230 <rotate_L90+0x188>)
 800617e:	edd3 7a00 	vldr	s15, [r3]
 8006182:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006234 <rotate_L90+0x18c>
 8006186:	ee37 7a87 	vadd.f32	s14, s15, s14
 800618a:	4b2b      	ldr	r3, [pc, #172]	; (8006238 <rotate_L90+0x190>)
 800618c:	edd3 7a00 	vldr	s15, [r3]
 8006190:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006198:	dcf0      	bgt.n	800617c <rotate_L90+0xd4>

	accel_l = 30000;
 800619a:	4b1d      	ldr	r3, [pc, #116]	; (8006210 <rotate_L90+0x168>)
 800619c:	4a27      	ldr	r2, [pc, #156]	; (800623c <rotate_L90+0x194>)
 800619e:	601a      	str	r2, [r3, #0]
	accel_r = -30000;
 80061a0:	4b1d      	ldr	r3, [pc, #116]	; (8006218 <rotate_L90+0x170>)
 80061a2:	4a27      	ldr	r2, [pc, #156]	; (8006240 <rotate_L90+0x198>)
 80061a4:	601a      	str	r2, [r3, #0]
	speed_max_l = -100;
 80061a6:	4b27      	ldr	r3, [pc, #156]	; (8006244 <rotate_L90+0x19c>)
 80061a8:	4a27      	ldr	r2, [pc, #156]	; (8006248 <rotate_L90+0x1a0>)
 80061aa:	601a      	str	r2, [r3, #0]
	speed_min_r = 100;
 80061ac:	4b27      	ldr	r3, [pc, #156]	; (800624c <rotate_L90+0x1a4>)
 80061ae:	4a28      	ldr	r2, [pc, #160]	; (8006250 <rotate_L90+0x1a8>)
 80061b0:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 80061b2:	bf00      	nop
 80061b4:	4b1e      	ldr	r3, [pc, #120]	; (8006230 <rotate_L90+0x188>)
 80061b6:	edd3 7a00 	vldr	s15, [r3]
 80061ba:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006254 <rotate_L90+0x1ac>
 80061be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061c2:	4b1d      	ldr	r3, [pc, #116]	; (8006238 <rotate_L90+0x190>)
 80061c4:	edd3 7a00 	vldr	s15, [r3]
 80061c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d0:	dcf0      	bgt.n	80061b4 <rotate_L90+0x10c>

	if(!MF.FLAG.XDIR){
 80061d2:	4b21      	ldr	r3, [pc, #132]	; (8006258 <rotate_L90+0x1b0>)
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d104      	bne.n	80061ea <rotate_L90+0x142>
		turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 80061e0:	2101      	movs	r1, #1
 80061e2:	20ff      	movs	r0, #255	; 0xff
 80061e4:	f007 ff6c 	bl	800e0c0 <turn_dir>
 80061e8:	e003      	b.n	80061f2 <rotate_L90+0x14a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 80061ea:	2103      	movs	r1, #3
 80061ec:	20fe      	movs	r0, #254	; 0xfe
 80061ee:	f007 ff67 	bl	800e0c0 <turn_dir>
	}
	drive_stop();
 80061f2:	f7fe fd97 	bl	8004d24 <drive_stop>
}
 80061f6:	bf00      	nop
 80061f8:	bd98      	pop	{r3, r4, r7, pc}
 80061fa:	bf00      	nop
 80061fc:	f3af 8000 	nop.w
 8006200:	54442d18 	.word	0x54442d18
 8006204:	400921fb 	.word	0x400921fb
 8006208:	200001a8 	.word	0x200001a8
 800620c:	44480000 	.word	0x44480000
 8006210:	20000d68 	.word	0x20000d68
 8006214:	c53b8000 	.word	0xc53b8000
 8006218:	20000ae8 	.word	0x20000ae8
 800621c:	453b8000 	.word	0x453b8000
 8006220:	43340000 	.word	0x43340000
 8006224:	40508000 	.word	0x40508000
 8006228:	20000b5c 	.word	0x20000b5c
 800622c:	200001a4 	.word	0x200001a4
 8006230:	20000c08 	.word	0x20000c08
 8006234:	42a00000 	.word	0x42a00000
 8006238:	20000b64 	.word	0x20000b64
 800623c:	46ea6000 	.word	0x46ea6000
 8006240:	c6ea6000 	.word	0xc6ea6000
 8006244:	2000077c 	.word	0x2000077c
 8006248:	c2c80000 	.word	0xc2c80000
 800624c:	20000f78 	.word	0x20000f78
 8006250:	42c80000 	.word	0x42c80000
 8006254:	42b40000 	.word	0x42b40000
 8006258:	20000f74 	.word	0x20000f74
 800625c:	00000000 	.word	0x00000000

08006260 <rotate_180>:
//rotate_180
// 180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 8006260:	b598      	push	{r3, r4, r7, lr}
 8006262:	af00      	add	r7, sp, #0

	full_led_write(GREEN);
 8006264:	2002      	movs	r0, #2
 8006266:	f009 fcfb 	bl	800fc60 <full_led_write>
	target_omega_z = 800;
 800626a:	4b55      	ldr	r3, [pc, #340]	; (80063c0 <rotate_180+0x160>)
 800626c:	4a55      	ldr	r2, [pc, #340]	; (80063c4 <rotate_180+0x164>)
 800626e:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 8006270:	4b55      	ldr	r3, [pc, #340]	; (80063c8 <rotate_180+0x168>)
 8006272:	4a56      	ldr	r2, [pc, #344]	; (80063cc <rotate_180+0x16c>)
 8006274:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8006276:	4b56      	ldr	r3, [pc, #344]	; (80063d0 <rotate_180+0x170>)
 8006278:	4a56      	ldr	r2, [pc, #344]	; (80063d4 <rotate_180+0x174>)
 800627a:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 800627c:	4b50      	ldr	r3, [pc, #320]	; (80063c0 <rotate_180+0x160>)
 800627e:	edd3 7a00 	vldr	s15, [r3]
 8006282:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80063d8 <rotate_180+0x178>
 8006286:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800628a:	ee16 0a90 	vmov	r0, s13
 800628e:	f7fa f953 	bl	8000538 <__aeabi_f2d>
 8006292:	a349      	add	r3, pc, #292	; (adr r3, 80063b8 <rotate_180+0x158>)
 8006294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006298:	f7fa f9a6 	bl	80005e8 <__aeabi_dmul>
 800629c:	4603      	mov	r3, r0
 800629e:	460c      	mov	r4, r1
 80062a0:	4618      	mov	r0, r3
 80062a2:	4621      	mov	r1, r4
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	4b4c      	ldr	r3, [pc, #304]	; (80063dc <rotate_180+0x17c>)
 80062aa:	f7fa f99d 	bl	80005e8 <__aeabi_dmul>
 80062ae:	4603      	mov	r3, r0
 80062b0:	460c      	mov	r4, r1
 80062b2:	4618      	mov	r0, r3
 80062b4:	4621      	mov	r1, r4
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062be:	f7fa fabd 	bl	800083c <__aeabi_ddiv>
 80062c2:	4603      	mov	r3, r0
 80062c4:	460c      	mov	r4, r1
 80062c6:	4618      	mov	r0, r3
 80062c8:	4621      	mov	r1, r4
 80062ca:	f7fa fc65 	bl	8000b98 <__aeabi_d2f>
 80062ce:	4602      	mov	r2, r0
 80062d0:	4b43      	ldr	r3, [pc, #268]	; (80063e0 <rotate_180+0x180>)
 80062d2:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 80062d4:	4b3a      	ldr	r3, [pc, #232]	; (80063c0 <rotate_180+0x160>)
 80062d6:	edd3 7a00 	vldr	s15, [r3]
 80062da:	eef1 7a67 	vneg.f32	s15, s15
 80062de:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80063d8 <rotate_180+0x178>
 80062e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062e6:	ee16 0a90 	vmov	r0, s13
 80062ea:	f7fa f925 	bl	8000538 <__aeabi_f2d>
 80062ee:	a332      	add	r3, pc, #200	; (adr r3, 80063b8 <rotate_180+0x158>)
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	f7fa f978 	bl	80005e8 <__aeabi_dmul>
 80062f8:	4603      	mov	r3, r0
 80062fa:	460c      	mov	r4, r1
 80062fc:	4618      	mov	r0, r3
 80062fe:	4621      	mov	r1, r4
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	4b35      	ldr	r3, [pc, #212]	; (80063dc <rotate_180+0x17c>)
 8006306:	f7fa f96f 	bl	80005e8 <__aeabi_dmul>
 800630a:	4603      	mov	r3, r0
 800630c:	460c      	mov	r4, r1
 800630e:	4618      	mov	r0, r3
 8006310:	4621      	mov	r1, r4
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800631a:	f7fa fa8f 	bl	800083c <__aeabi_ddiv>
 800631e:	4603      	mov	r3, r0
 8006320:	460c      	mov	r4, r1
 8006322:	4618      	mov	r0, r3
 8006324:	4621      	mov	r1, r4
 8006326:	f7fa fc37 	bl	8000b98 <__aeabi_d2f>
 800632a:	4602      	mov	r2, r0
 800632c:	4b2d      	ldr	r3, [pc, #180]	; (80063e4 <rotate_180+0x184>)
 800632e:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8006330:	f7fe fcca 	bl	8004cc8 <drive_start>
	control_stop();
 8006334:	f7fe fd32 	bl	8004d9c <control_stop>
	while(degree_z > target_degree_z-170);
 8006338:	bf00      	nop
 800633a:	4b2b      	ldr	r3, [pc, #172]	; (80063e8 <rotate_180+0x188>)
 800633c:	edd3 7a00 	vldr	s15, [r3]
 8006340:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80063ec <rotate_180+0x18c>
 8006344:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006348:	4b29      	ldr	r3, [pc, #164]	; (80063f0 <rotate_180+0x190>)
 800634a:	edd3 7a00 	vldr	s15, [r3]
 800634e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006356:	d4f0      	bmi.n	800633a <rotate_180+0xda>

	accel_l = -30000;
 8006358:	4b1b      	ldr	r3, [pc, #108]	; (80063c8 <rotate_180+0x168>)
 800635a:	4a26      	ldr	r2, [pc, #152]	; (80063f4 <rotate_180+0x194>)
 800635c:	601a      	str	r2, [r3, #0]
	accel_r = 30000;
 800635e:	4b1c      	ldr	r3, [pc, #112]	; (80063d0 <rotate_180+0x170>)
 8006360:	4a25      	ldr	r2, [pc, #148]	; (80063f8 <rotate_180+0x198>)
 8006362:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 8006364:	4b25      	ldr	r3, [pc, #148]	; (80063fc <rotate_180+0x19c>)
 8006366:	4a26      	ldr	r2, [pc, #152]	; (8006400 <rotate_180+0x1a0>)
 8006368:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 800636a:	4b26      	ldr	r3, [pc, #152]	; (8006404 <rotate_180+0x1a4>)
 800636c:	4a26      	ldr	r2, [pc, #152]	; (8006408 <rotate_180+0x1a8>)
 800636e:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 8006370:	bf00      	nop
 8006372:	4b1d      	ldr	r3, [pc, #116]	; (80063e8 <rotate_180+0x188>)
 8006374:	edd3 7a00 	vldr	s15, [r3]
 8006378:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80063d8 <rotate_180+0x178>
 800637c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006380:	4b1b      	ldr	r3, [pc, #108]	; (80063f0 <rotate_180+0x190>)
 8006382:	edd3 7a00 	vldr	s15, [r3]
 8006386:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800638a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800638e:	d4f0      	bmi.n	8006372 <rotate_180+0x112>

	if(!MF.FLAG.XDIR){
 8006390:	4b1e      	ldr	r3, [pc, #120]	; (800640c <rotate_180+0x1ac>)
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d104      	bne.n	80063a8 <rotate_180+0x148>
		turn_dir(DIR_TURN_180, 1);										//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 800639e:	2101      	movs	r1, #1
 80063a0:	2002      	movs	r0, #2
 80063a2:	f007 fe8d 	bl	800e0c0 <turn_dir>
 80063a6:	e003      	b.n	80063b0 <rotate_180+0x150>
	}else{
		turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 80063a8:	2103      	movs	r1, #3
 80063aa:	2004      	movs	r0, #4
 80063ac:	f007 fe88 	bl	800e0c0 <turn_dir>
	}
	drive_stop();
 80063b0:	f7fe fcb8 	bl	8004d24 <drive_stop>

}
 80063b4:	bf00      	nop
 80063b6:	bd98      	pop	{r3, r4, r7, pc}
 80063b8:	54442d18 	.word	0x54442d18
 80063bc:	400921fb 	.word	0x400921fb
 80063c0:	200001a8 	.word	0x200001a8
 80063c4:	44480000 	.word	0x44480000
 80063c8:	20000d68 	.word	0x20000d68
 80063cc:	453b8000 	.word	0x453b8000
 80063d0:	20000ae8 	.word	0x20000ae8
 80063d4:	c53b8000 	.word	0xc53b8000
 80063d8:	43340000 	.word	0x43340000
 80063dc:	40508000 	.word	0x40508000
 80063e0:	2000077c 	.word	0x2000077c
 80063e4:	20000f78 	.word	0x20000f78
 80063e8:	20000c08 	.word	0x20000c08
 80063ec:	432a0000 	.word	0x432a0000
 80063f0:	20000b64 	.word	0x20000b64
 80063f4:	c6ea6000 	.word	0xc6ea6000
 80063f8:	46ea6000 	.word	0x46ea6000
 80063fc:	20000b5c 	.word	0x20000b5c
 8006400:	42c80000 	.word	0x42c80000
 8006404:	200001a4 	.word	0x200001a4
 8006408:	c2c80000 	.word	0xc2c80000
 800640c:	20000f74 	.word	0x20000f74

08006410 <slalom_R90>:
//slalom_R90
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8006416:	2005      	movs	r0, #5
 8006418:	f009 fc22 	bl	800fc60 <full_led_write>
	if(run_mode == LOW){
 800641c:	4b65      	ldr	r3, [pc, #404]	; (80065b4 <slalom_R90+0x1a4>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b01      	cmp	r3, #1
 8006424:	d12a      	bne.n	800647c <slalom_R90+0x6c>
		slalomF(10000, SPEED_LOW, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 8006426:	23fa      	movs	r3, #250	; 0xfa
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800642e:	2219      	movs	r2, #25
 8006430:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006434:	f242 7010 	movw	r0, #10000	; 0x2710
 8006438:	f7ff f808 	bl	800544c <slalomF>
		slalomR(-SLALOM_DEGACCEL, -SLALOM_OMEGA, -90, SPEED_LOW);
 800643c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006440:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006444:	495c      	ldr	r1, [pc, #368]	; (80065b8 <slalom_R90+0x1a8>)
 8006446:	485d      	ldr	r0, [pc, #372]	; (80065bc <slalom_R90+0x1ac>)
 8006448:	f7ff f87c 	bl	8005544 <slalomR>

		if(!MF.FLAG.XDIR){
 800644c:	4b5c      	ldr	r3, [pc, #368]	; (80065c0 <slalom_R90+0x1b0>)
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d104      	bne.n	8006464 <slalom_R90+0x54>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800645a:	2101      	movs	r1, #1
 800645c:	2001      	movs	r0, #1
 800645e:	f007 fe2f 	bl	800e0c0 <turn_dir>
 8006462:	e003      	b.n	800646c <slalom_R90+0x5c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006464:	2103      	movs	r1, #3
 8006466:	2002      	movs	r0, #2
 8006468:	f007 fe2a 	bl	800e0c0 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, SLALOM_OFFSET_B);
 800646c:	2219      	movs	r2, #25
 800646e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006472:	f242 7010 	movw	r0, #10000	; 0x2710
 8006476:	f7ff f989 	bl	800578c <slalomB>
 800647a:	e08e      	b.n	800659a <slalom_R90+0x18a>
	}else if(run_mode == MIDDLE){
 800647c:	4b4d      	ldr	r3, [pc, #308]	; (80065b4 <slalom_R90+0x1a4>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d12a      	bne.n	80064dc <slalom_R90+0xcc>
		slalomF(10000, SPEED_MIDDLE, SLALOM_M_OFFSET_F, SLALOM_M_WALL_FL, SLALOM_M_WALL_FR);
 8006486:	23f0      	movs	r3, #240	; 0xf0
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800648e:	221c      	movs	r2, #28
 8006490:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006494:	f242 7010 	movw	r0, #10000	; 0x2710
 8006498:	f7fe ffd8 	bl	800544c <slalomF>
		slalomR(-SLALOM_M_DEGACCEL, -SLALOM_M_OMEGA, -90, SPEED_MIDDLE);
 800649c:	f44f 7316 	mov.w	r3, #600	; 0x258
 80064a0:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80064a4:	4947      	ldr	r1, [pc, #284]	; (80065c4 <slalom_R90+0x1b4>)
 80064a6:	4848      	ldr	r0, [pc, #288]	; (80065c8 <slalom_R90+0x1b8>)
 80064a8:	f7ff f84c 	bl	8005544 <slalomR>

		if(!MF.FLAG.XDIR){
 80064ac:	4b44      	ldr	r3, [pc, #272]	; (80065c0 <slalom_R90+0x1b0>)
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d104      	bne.n	80064c4 <slalom_R90+0xb4>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80064ba:	2101      	movs	r1, #1
 80064bc:	2001      	movs	r0, #1
 80064be:	f007 fdff 	bl	800e0c0 <turn_dir>
 80064c2:	e003      	b.n	80064cc <slalom_R90+0xbc>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80064c4:	2103      	movs	r1, #3
 80064c6:	2002      	movs	r0, #2
 80064c8:	f007 fdfa 	bl	800e0c0 <turn_dir>
		}
		slalomB(10000, SPEED_MIDDLE, SLALOM_M_OFFSET_B);
 80064cc:	2232      	movs	r2, #50	; 0x32
 80064ce:	f44f 7116 	mov.w	r1, #600	; 0x258
 80064d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80064d6:	f7ff f959 	bl	800578c <slalomB>
 80064da:	e05e      	b.n	800659a <slalom_R90+0x18a>
	}else if(run_mode == HIGH){
 80064dc:	4b35      	ldr	r3, [pc, #212]	; (80065b4 <slalom_R90+0x1a4>)
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d12a      	bne.n	800653c <slalom_R90+0x12c>
		slalomF(10000, SPEED_HIGH, SLALOM_H_OFFSET_F, SLALOM_H_WALL_FL, SLALOM_H_WALL_FR);
 80064e6:	23b4      	movs	r3, #180	; 0xb4
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80064ee:	221c      	movs	r2, #28
 80064f0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80064f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80064f8:	f7fe ffa8 	bl	800544c <slalomF>
		slalomR(-SLALOM_H_DEGACCEL, -SLALOM_H_OMEGA, -70, SPEED_HIGH);
 80064fc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006500:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8006504:	4931      	ldr	r1, [pc, #196]	; (80065cc <slalom_R90+0x1bc>)
 8006506:	4832      	ldr	r0, [pc, #200]	; (80065d0 <slalom_R90+0x1c0>)
 8006508:	f7ff f81c 	bl	8005544 <slalomR>

		if(!MF.FLAG.XDIR){
 800650c:	4b2c      	ldr	r3, [pc, #176]	; (80065c0 <slalom_R90+0x1b0>)
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d104      	bne.n	8006524 <slalom_R90+0x114>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800651a:	2101      	movs	r1, #1
 800651c:	2001      	movs	r0, #1
 800651e:	f007 fdcf 	bl	800e0c0 <turn_dir>
 8006522:	e003      	b.n	800652c <slalom_R90+0x11c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006524:	2103      	movs	r1, #3
 8006526:	2002      	movs	r0, #2
 8006528:	f007 fdca 	bl	800e0c0 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH, SLALOM_H_OFFSET_B);
 800652c:	225f      	movs	r2, #95	; 0x5f
 800652e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006532:	f242 7010 	movw	r0, #10000	; 0x2710
 8006536:	f7ff f929 	bl	800578c <slalomB>
 800653a:	e02e      	b.n	800659a <slalom_R90+0x18a>
	}else if(run_mode == HIGH_HIGH){
 800653c:	4b1d      	ldr	r3, [pc, #116]	; (80065b4 <slalom_R90+0x1a4>)
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b04      	cmp	r3, #4
 8006544:	d129      	bne.n	800659a <slalom_R90+0x18a>
		slalomF(10000, SPEED_HIGH_HIGH, SLALOM_H_H_OFFSET_F, SLALOM_H_H_WALL_FL, SLALOM_H_H_WALL_FR);
 8006546:	23b4      	movs	r3, #180	; 0xb4
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800654e:	220a      	movs	r2, #10
 8006550:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006554:	f242 7010 	movw	r0, #10000	; 0x2710
 8006558:	f7fe ff78 	bl	800544c <slalomF>
		slalomR(-SLALOM_H_H_DEGACCEL, -SLALOM_H_H_OMEGA, -70, SPEED_HIGH_HIGH);
 800655c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006560:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8006564:	491b      	ldr	r1, [pc, #108]	; (80065d4 <slalom_R90+0x1c4>)
 8006566:	481c      	ldr	r0, [pc, #112]	; (80065d8 <slalom_R90+0x1c8>)
 8006568:	f7fe ffec 	bl	8005544 <slalomR>

		if(!MF.FLAG.XDIR){
 800656c:	4b14      	ldr	r3, [pc, #80]	; (80065c0 <slalom_R90+0x1b0>)
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d104      	bne.n	8006584 <slalom_R90+0x174>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800657a:	2101      	movs	r1, #1
 800657c:	2001      	movs	r0, #1
 800657e:	f007 fd9f 	bl	800e0c0 <turn_dir>
 8006582:	e003      	b.n	800658c <slalom_R90+0x17c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006584:	2103      	movs	r1, #3
 8006586:	2002      	movs	r0, #2
 8006588:	f007 fd9a 	bl	800e0c0 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH_HIGH, SLALOM_H_H_OFFSET_B);
 800658c:	220a      	movs	r2, #10
 800658e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006592:	f242 7010 	movw	r0, #10000	; 0x2710
 8006596:	f7ff f8f9 	bl	800578c <slalomB>
	}
	if(!MF.FLAG.SCND)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 800659a:	4b09      	ldr	r3, [pc, #36]	; (80065c0 <slalom_R90+0x1b0>)
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <slalom_R90+0x19c>
 80065a8:	f009 fae6 	bl	800fb78 <get_wall_info>
}
 80065ac:	bf00      	nop
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20000456 	.word	0x20000456
 80065b8:	fffffdda 	.word	0xfffffdda
 80065bc:	fffff060 	.word	0xfffff060
 80065c0:	20000f74 	.word	0x20000f74
 80065c4:	fffffc7c 	.word	0xfffffc7c
 80065c8:	ffffd120 	.word	0xffffd120
 80065cc:	fffffb50 	.word	0xfffffb50
 80065d0:	ffffa240 	.word	0xffffa240
 80065d4:	fffff830 	.word	0xfffff830
 80065d8:	ffffb1e0 	.word	0xffffb1e0

080065dc <slalom_L90>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80065e2:	2006      	movs	r0, #6
 80065e4:	f009 fb3c 	bl	800fc60 <full_led_write>
	if(run_mode == LOW){
 80065e8:	4b67      	ldr	r3, [pc, #412]	; (8006788 <slalom_L90+0x1ac>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d12b      	bne.n	800664a <slalom_L90+0x6e>
		slalomF(10000, SPEED_LOW, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 80065f2:	23fa      	movs	r3, #250	; 0xfa
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80065fa:	2219      	movs	r2, #25
 80065fc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006600:	f242 7010 	movw	r0, #10000	; 0x2710
 8006604:	f7fe ff22 	bl	800544c <slalomF>
		slalomR(SLALOM_DEGACCEL, SLALOM_OMEGA, 90, SPEED_LOW);
 8006608:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800660c:	225a      	movs	r2, #90	; 0x5a
 800660e:	f240 2126 	movw	r1, #550	; 0x226
 8006612:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006616:	f7fe ff95 	bl	8005544 <slalomR>

		if(!MF.FLAG.XDIR){
 800661a:	4b5c      	ldr	r3, [pc, #368]	; (800678c <slalom_L90+0x1b0>)
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d104      	bne.n	8006632 <slalom_L90+0x56>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006628:	2101      	movs	r1, #1
 800662a:	20ff      	movs	r0, #255	; 0xff
 800662c:	f007 fd48 	bl	800e0c0 <turn_dir>
 8006630:	e003      	b.n	800663a <slalom_L90+0x5e>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006632:	2103      	movs	r1, #3
 8006634:	20fe      	movs	r0, #254	; 0xfe
 8006636:	f007 fd43 	bl	800e0c0 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, SLALOM_OFFSET_B);
 800663a:	2219      	movs	r2, #25
 800663c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006640:	f242 7010 	movw	r0, #10000	; 0x2710
 8006644:	f7ff f8a2 	bl	800578c <slalomB>
 8006648:	e091      	b.n	800676e <slalom_L90+0x192>
	}else if(run_mode == MIDDLE){
 800664a:	4b4f      	ldr	r3, [pc, #316]	; (8006788 <slalom_L90+0x1ac>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d12b      	bne.n	80066ac <slalom_L90+0xd0>
		slalomF(10000, SPEED_MIDDLE, SLALOM_M_OFFSET_F, SLALOM_M_WALL_FL, SLALOM_M_WALL_FR);
 8006654:	23f0      	movs	r3, #240	; 0xf0
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800665c:	221c      	movs	r2, #28
 800665e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006662:	f242 7010 	movw	r0, #10000	; 0x2710
 8006666:	f7fe fef1 	bl	800544c <slalomF>
		slalomR(SLALOM_M_DEGACCEL, SLALOM_M_OMEGA, 90, SPEED_MIDDLE);
 800666a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800666e:	225a      	movs	r2, #90	; 0x5a
 8006670:	f44f 7161 	mov.w	r1, #900	; 0x384
 8006674:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8006678:	f7fe ff64 	bl	8005544 <slalomR>

		if(!MF.FLAG.XDIR){
 800667c:	4b43      	ldr	r3, [pc, #268]	; (800678c <slalom_L90+0x1b0>)
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d104      	bne.n	8006694 <slalom_L90+0xb8>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800668a:	2101      	movs	r1, #1
 800668c:	20ff      	movs	r0, #255	; 0xff
 800668e:	f007 fd17 	bl	800e0c0 <turn_dir>
 8006692:	e003      	b.n	800669c <slalom_L90+0xc0>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006694:	2103      	movs	r1, #3
 8006696:	20fe      	movs	r0, #254	; 0xfe
 8006698:	f007 fd12 	bl	800e0c0 <turn_dir>
		}
		slalomB(10000, SPEED_MIDDLE, SLALOM_M_OFFSET_B);
 800669c:	2232      	movs	r2, #50	; 0x32
 800669e:	f44f 7116 	mov.w	r1, #600	; 0x258
 80066a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80066a6:	f7ff f871 	bl	800578c <slalomB>
 80066aa:	e060      	b.n	800676e <slalom_L90+0x192>
	}else if(run_mode == HIGH){
 80066ac:	4b36      	ldr	r3, [pc, #216]	; (8006788 <slalom_L90+0x1ac>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	d12b      	bne.n	800670e <slalom_L90+0x132>
		slalomF(10000, SPEED_HIGH, SLALOM_H_OFFSET_F, SLALOM_H_WALL_FL, SLALOM_H_WALL_FR);
 80066b6:	23b4      	movs	r3, #180	; 0xb4
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80066be:	221c      	movs	r2, #28
 80066c0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80066c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80066c8:	f7fe fec0 	bl	800544c <slalomF>
		slalomR(SLALOM_H_DEGACCEL, SLALOM_H_OMEGA, 70, SPEED_HIGH);
 80066cc:	f44f 7348 	mov.w	r3, #800	; 0x320
 80066d0:	2246      	movs	r2, #70	; 0x46
 80066d2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80066d6:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 80066da:	f7fe ff33 	bl	8005544 <slalomR>

		if(!MF.FLAG.XDIR){
 80066de:	4b2b      	ldr	r3, [pc, #172]	; (800678c <slalom_L90+0x1b0>)
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d104      	bne.n	80066f6 <slalom_L90+0x11a>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80066ec:	2101      	movs	r1, #1
 80066ee:	20ff      	movs	r0, #255	; 0xff
 80066f0:	f007 fce6 	bl	800e0c0 <turn_dir>
 80066f4:	e003      	b.n	80066fe <slalom_L90+0x122>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80066f6:	2103      	movs	r1, #3
 80066f8:	20fe      	movs	r0, #254	; 0xfe
 80066fa:	f007 fce1 	bl	800e0c0 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH, SLALOM_H_OFFSET_B);
 80066fe:	225f      	movs	r2, #95	; 0x5f
 8006700:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006704:	f242 7010 	movw	r0, #10000	; 0x2710
 8006708:	f7ff f840 	bl	800578c <slalomB>
 800670c:	e02f      	b.n	800676e <slalom_L90+0x192>
	}else if(run_mode == HIGH_HIGH){
 800670e:	4b1e      	ldr	r3, [pc, #120]	; (8006788 <slalom_L90+0x1ac>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b04      	cmp	r3, #4
 8006716:	d12a      	bne.n	800676e <slalom_L90+0x192>
		slalomF(10000, SPEED_HIGH_HIGH, SLALOM_H_H_OFFSET_F, SLALOM_H_H_WALL_FL, SLALOM_H_H_WALL_FR);
 8006718:	23b4      	movs	r3, #180	; 0xb4
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8006720:	220a      	movs	r2, #10
 8006722:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006726:	f242 7010 	movw	r0, #10000	; 0x2710
 800672a:	f7fe fe8f 	bl	800544c <slalomF>
		slalomR(SLALOM_H_H_DEGACCEL, SLALOM_H_H_OMEGA, 70, SPEED_HIGH_HIGH);
 800672e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006732:	2246      	movs	r2, #70	; 0x46
 8006734:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006738:	f644 6020 	movw	r0, #20000	; 0x4e20
 800673c:	f7fe ff02 	bl	8005544 <slalomR>

		if(!MF.FLAG.XDIR){
 8006740:	4b12      	ldr	r3, [pc, #72]	; (800678c <slalom_L90+0x1b0>)
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d104      	bne.n	8006758 <slalom_L90+0x17c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800674e:	2101      	movs	r1, #1
 8006750:	20ff      	movs	r0, #255	; 0xff
 8006752:	f007 fcb5 	bl	800e0c0 <turn_dir>
 8006756:	e003      	b.n	8006760 <slalom_L90+0x184>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006758:	2103      	movs	r1, #3
 800675a:	20fe      	movs	r0, #254	; 0xfe
 800675c:	f007 fcb0 	bl	800e0c0 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH_HIGH, SLALOM_H_H_OFFSET_B);
 8006760:	220a      	movs	r2, #10
 8006762:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006766:	f242 7010 	movw	r0, #10000	; 0x2710
 800676a:	f7ff f80f 	bl	800578c <slalomB>
	}
	if(!MF.FLAG.SCND)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 800676e:	4b07      	ldr	r3, [pc, #28]	; (800678c <slalom_L90+0x1b0>)
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <slalom_L90+0x1a4>
 800677c:	f009 f9fc 	bl	800fb78 <get_wall_info>
}
 8006780:	bf00      	nop
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20000456 	.word	0x20000456
 800678c:	20000f74 	.word	0x20000f74

08006790 <Lslalom_R90>:
//Lslalom_R90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R90(void){
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8006796:	2005      	movs	r0, #5
 8006798:	f009 fa62 	bl	800fc60 <full_led_write>
	if(run_mode == LOW){
 800679c:	4b5f      	ldr	r3, [pc, #380]	; (800691c <Lslalom_R90+0x18c>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d12a      	bne.n	80067fc <Lslalom_R90+0x6c>
		slalomF(10000, SPEED_LOW, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 80067a6:	2364      	movs	r3, #100	; 0x64
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	23c8      	movs	r3, #200	; 0xc8
 80067ac:	2232      	movs	r2, #50	; 0x32
 80067ae:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80067b2:	f242 7010 	movw	r0, #10000	; 0x2710
 80067b6:	f7fe fe49 	bl	800544c <slalomF>
		slalomR(-LSLALOM_DEGACCEL, -LSLALOM_OMEGA, -90, SPEED_LOW);
 80067ba:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80067be:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80067c2:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 80067c6:	4856      	ldr	r0, [pc, #344]	; (8006920 <Lslalom_R90+0x190>)
 80067c8:	f7fe febc 	bl	8005544 <slalomR>

		if(!MF.FLAG.XDIR){
 80067cc:	4b55      	ldr	r3, [pc, #340]	; (8006924 <Lslalom_R90+0x194>)
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d104      	bne.n	80067e4 <Lslalom_R90+0x54>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80067da:	2101      	movs	r1, #1
 80067dc:	2001      	movs	r0, #1
 80067de:	f007 fc6f 	bl	800e0c0 <turn_dir>
 80067e2:	e003      	b.n	80067ec <Lslalom_R90+0x5c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80067e4:	2103      	movs	r1, #3
 80067e6:	2002      	movs	r0, #2
 80067e8:	f007 fc6a 	bl	800e0c0 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LSLALOM_OFFSET_B);
 80067ec:	2232      	movs	r2, #50	; 0x32
 80067ee:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80067f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80067f6:	f7fe ffc9 	bl	800578c <slalomB>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_B);
	}
}
 80067fa:	e08c      	b.n	8006916 <Lslalom_R90+0x186>
	}else if(run_mode == MIDDLE){
 80067fc:	4b47      	ldr	r3, [pc, #284]	; (800691c <Lslalom_R90+0x18c>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d129      	bne.n	800685a <Lslalom_R90+0xca>
		slalomF(10000, SPEED_MIDDLE, LSLALOM_M_OFFSET_F, LSLALOM_M_WALL_FL, LSLALOM_M_WALL_FR);
 8006806:	2364      	movs	r3, #100	; 0x64
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	23c8      	movs	r3, #200	; 0xc8
 800680c:	223f      	movs	r2, #63	; 0x3f
 800680e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006812:	f242 7010 	movw	r0, #10000	; 0x2710
 8006816:	f7fe fe19 	bl	800544c <slalomF>
		slalomR(-LSLALOM_M_DEGACCEL, -LSLALOM_M_OMEGA, -90, SPEED_MIDDLE);
 800681a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800681e:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006822:	4941      	ldr	r1, [pc, #260]	; (8006928 <Lslalom_R90+0x198>)
 8006824:	4841      	ldr	r0, [pc, #260]	; (800692c <Lslalom_R90+0x19c>)
 8006826:	f7fe fe8d 	bl	8005544 <slalomR>
		if(!MF.FLAG.XDIR){
 800682a:	4b3e      	ldr	r3, [pc, #248]	; (8006924 <Lslalom_R90+0x194>)
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d104      	bne.n	8006842 <Lslalom_R90+0xb2>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006838:	2101      	movs	r1, #1
 800683a:	2001      	movs	r0, #1
 800683c:	f007 fc40 	bl	800e0c0 <turn_dir>
 8006840:	e003      	b.n	800684a <Lslalom_R90+0xba>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006842:	2103      	movs	r1, #3
 8006844:	2002      	movs	r0, #2
 8006846:	f007 fc3b 	bl	800e0c0 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LSLALOM_M_OFFSET_B);
 800684a:	223f      	movs	r2, #63	; 0x3f
 800684c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006850:	f242 7010 	movw	r0, #10000	; 0x2710
 8006854:	f7fe ff9a 	bl	800578c <slalomB>
}
 8006858:	e05d      	b.n	8006916 <Lslalom_R90+0x186>
	}else if(run_mode == HIGH){
 800685a:	4b30      	ldr	r3, [pc, #192]	; (800691c <Lslalom_R90+0x18c>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b03      	cmp	r3, #3
 8006862:	d129      	bne.n	80068b8 <Lslalom_R90+0x128>
		slalomF(10000, SPEED_HIGH, LSLALOM_H_OFFSET_F, LSLALOM_H_WALL_FL, LSLALOM_H_WALL_FR);
 8006864:	2364      	movs	r3, #100	; 0x64
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	23c8      	movs	r3, #200	; 0xc8
 800686a:	223c      	movs	r2, #60	; 0x3c
 800686c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006870:	f242 7010 	movw	r0, #10000	; 0x2710
 8006874:	f7fe fdea 	bl	800544c <slalomF>
		slalomR(-LSLALOM_H_DEGACCEL, -LSLALOM_H_OMEGA, -90, SPEED_HIGH);
 8006878:	f44f 7348 	mov.w	r3, #800	; 0x320
 800687c:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006880:	492b      	ldr	r1, [pc, #172]	; (8006930 <Lslalom_R90+0x1a0>)
 8006882:	482c      	ldr	r0, [pc, #176]	; (8006934 <Lslalom_R90+0x1a4>)
 8006884:	f7fe fe5e 	bl	8005544 <slalomR>
		if(!MF.FLAG.XDIR){
 8006888:	4b26      	ldr	r3, [pc, #152]	; (8006924 <Lslalom_R90+0x194>)
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d104      	bne.n	80068a0 <Lslalom_R90+0x110>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006896:	2101      	movs	r1, #1
 8006898:	2001      	movs	r0, #1
 800689a:	f007 fc11 	bl	800e0c0 <turn_dir>
 800689e:	e003      	b.n	80068a8 <Lslalom_R90+0x118>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80068a0:	2103      	movs	r1, #3
 80068a2:	2002      	movs	r0, #2
 80068a4:	f007 fc0c 	bl	800e0c0 <turn_dir>
		slalomB(10000, SPEED_HIGH, LSLALOM_H_OFFSET_B);
 80068a8:	223c      	movs	r2, #60	; 0x3c
 80068aa:	f44f 7148 	mov.w	r1, #800	; 0x320
 80068ae:	f242 7010 	movw	r0, #10000	; 0x2710
 80068b2:	f7fe ff6b 	bl	800578c <slalomB>
}
 80068b6:	e02e      	b.n	8006916 <Lslalom_R90+0x186>
	}else if(run_mode == HIGH_HIGH){
 80068b8:	4b18      	ldr	r3, [pc, #96]	; (800691c <Lslalom_R90+0x18c>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d129      	bne.n	8006916 <Lslalom_R90+0x186>
		slalomF(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_F, LSLALOM_H_H_WALL_FL, LSLALOM_H_H_WALL_FR);
 80068c2:	2364      	movs	r3, #100	; 0x64
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	23c8      	movs	r3, #200	; 0xc8
 80068c8:	221e      	movs	r2, #30
 80068ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80068ce:	f242 7010 	movw	r0, #10000	; 0x2710
 80068d2:	f7fe fdbb 	bl	800544c <slalomF>
		slalomR(-LSLALOM_H_H_DEGACCEL, -LSLALOM_H_H_OMEGA, -90, SPEED_HIGH_HIGH);
 80068d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068da:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80068de:	4916      	ldr	r1, [pc, #88]	; (8006938 <Lslalom_R90+0x1a8>)
 80068e0:	f246 30c0 	movw	r0, #25536	; 0x63c0
 80068e4:	f7fe fe2e 	bl	8005544 <slalomR>
		if(!MF.FLAG.XDIR){
 80068e8:	4b0e      	ldr	r3, [pc, #56]	; (8006924 <Lslalom_R90+0x194>)
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d104      	bne.n	8006900 <Lslalom_R90+0x170>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80068f6:	2101      	movs	r1, #1
 80068f8:	2001      	movs	r0, #1
 80068fa:	f007 fbe1 	bl	800e0c0 <turn_dir>
 80068fe:	e003      	b.n	8006908 <Lslalom_R90+0x178>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006900:	2103      	movs	r1, #3
 8006902:	2002      	movs	r0, #2
 8006904:	f007 fbdc 	bl	800e0c0 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_B);
 8006908:	221e      	movs	r2, #30
 800690a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800690e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006912:	f7fe ff3b 	bl	800578c <slalomB>
}
 8006916:	bf00      	nop
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20000456 	.word	0x20000456
 8006920:	fffff830 	.word	0xfffff830
 8006924:	20000f74 	.word	0x20000f74
 8006928:	fffffe70 	.word	0xfffffe70
 800692c:	fffff060 	.word	0xfffff060
 8006930:	fffffda8 	.word	0xfffffda8
 8006934:	ffffee6c 	.word	0xffffee6c
 8006938:	fffffce0 	.word	0xfffffce0

0800693c <Lslalom_L90>:
//Lslalom_L90
// 大回りスラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L90(void){
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8006942:	2006      	movs	r0, #6
 8006944:	f009 f98c 	bl	800fc60 <full_led_write>
	if(run_mode == LOW){
 8006948:	4b5f      	ldr	r3, [pc, #380]	; (8006ac8 <Lslalom_L90+0x18c>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b01      	cmp	r3, #1
 8006950:	d129      	bne.n	80069a6 <Lslalom_L90+0x6a>
		slalomF(10000, SPEED_LOW, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 8006952:	2364      	movs	r3, #100	; 0x64
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	23c8      	movs	r3, #200	; 0xc8
 8006958:	2232      	movs	r2, #50	; 0x32
 800695a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800695e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006962:	f7fe fd73 	bl	800544c <slalomF>
		slalomR(LSLALOM_DEGACCEL, LSLALOM_OMEGA, 90, SPEED_LOW);
 8006966:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800696a:	225a      	movs	r2, #90	; 0x5a
 800696c:	21c8      	movs	r1, #200	; 0xc8
 800696e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006972:	f7fe fde7 	bl	8005544 <slalomR>

		if(!MF.FLAG.XDIR){
 8006976:	4b55      	ldr	r3, [pc, #340]	; (8006acc <Lslalom_L90+0x190>)
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d104      	bne.n	800698e <Lslalom_L90+0x52>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006984:	2101      	movs	r1, #1
 8006986:	20ff      	movs	r0, #255	; 0xff
 8006988:	f007 fb9a 	bl	800e0c0 <turn_dir>
 800698c:	e003      	b.n	8006996 <Lslalom_L90+0x5a>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800698e:	2103      	movs	r1, #3
 8006990:	20fe      	movs	r0, #254	; 0xfe
 8006992:	f007 fb95 	bl	800e0c0 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LSLALOM_OFFSET_B);
 8006996:	2232      	movs	r2, #50	; 0x32
 8006998:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800699c:	f242 7010 	movw	r0, #10000	; 0x2710
 80069a0:	f7fe fef4 	bl	800578c <slalomB>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_B);
	}
}
 80069a4:	e08d      	b.n	8006ac2 <Lslalom_L90+0x186>
	}else if(run_mode == MIDDLE){
 80069a6:	4b48      	ldr	r3, [pc, #288]	; (8006ac8 <Lslalom_L90+0x18c>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d12a      	bne.n	8006a06 <Lslalom_L90+0xca>
		slalomF(10000, SPEED_MIDDLE, LSLALOM_M_OFFSET_F, LSLALOM_M_WALL_FL, LSLALOM_M_WALL_FR);
 80069b0:	2364      	movs	r3, #100	; 0x64
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	23c8      	movs	r3, #200	; 0xc8
 80069b6:	223f      	movs	r2, #63	; 0x3f
 80069b8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80069bc:	f242 7010 	movw	r0, #10000	; 0x2710
 80069c0:	f7fe fd44 	bl	800544c <slalomF>
		slalomR(LSLALOM_M_DEGACCEL, LSLALOM_M_OMEGA, 90, SPEED_MIDDLE);
 80069c4:	f44f 7316 	mov.w	r3, #600	; 0x258
 80069c8:	225a      	movs	r2, #90	; 0x5a
 80069ca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80069ce:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80069d2:	f7fe fdb7 	bl	8005544 <slalomR>
		if(!MF.FLAG.XDIR){
 80069d6:	4b3d      	ldr	r3, [pc, #244]	; (8006acc <Lslalom_L90+0x190>)
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d104      	bne.n	80069ee <Lslalom_L90+0xb2>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80069e4:	2101      	movs	r1, #1
 80069e6:	20ff      	movs	r0, #255	; 0xff
 80069e8:	f007 fb6a 	bl	800e0c0 <turn_dir>
 80069ec:	e003      	b.n	80069f6 <Lslalom_L90+0xba>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80069ee:	2103      	movs	r1, #3
 80069f0:	20fe      	movs	r0, #254	; 0xfe
 80069f2:	f007 fb65 	bl	800e0c0 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LSLALOM_M_OFFSET_B);
 80069f6:	223f      	movs	r2, #63	; 0x3f
 80069f8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80069fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a00:	f7fe fec4 	bl	800578c <slalomB>
}
 8006a04:	e05d      	b.n	8006ac2 <Lslalom_L90+0x186>
	}else if(run_mode == HIGH){
 8006a06:	4b30      	ldr	r3, [pc, #192]	; (8006ac8 <Lslalom_L90+0x18c>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b03      	cmp	r3, #3
 8006a0e:	d12a      	bne.n	8006a66 <Lslalom_L90+0x12a>
		slalomF(10000, SPEED_HIGH, LSLALOM_H_OFFSET_F, LSLALOM_H_WALL_FL, LSLALOM_H_WALL_FR);
 8006a10:	2364      	movs	r3, #100	; 0x64
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	23c8      	movs	r3, #200	; 0xc8
 8006a16:	223c      	movs	r2, #60	; 0x3c
 8006a18:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006a1c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a20:	f7fe fd14 	bl	800544c <slalomF>
		slalomR(LSLALOM_H_DEGACCEL, LSLALOM_H_OMEGA, 90, SPEED_HIGH);
 8006a24:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006a28:	225a      	movs	r2, #90	; 0x5a
 8006a2a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006a2e:	f241 1094 	movw	r0, #4500	; 0x1194
 8006a32:	f7fe fd87 	bl	8005544 <slalomR>
		if(!MF.FLAG.XDIR){
 8006a36:	4b25      	ldr	r3, [pc, #148]	; (8006acc <Lslalom_L90+0x190>)
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d104      	bne.n	8006a4e <Lslalom_L90+0x112>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006a44:	2101      	movs	r1, #1
 8006a46:	20ff      	movs	r0, #255	; 0xff
 8006a48:	f007 fb3a 	bl	800e0c0 <turn_dir>
 8006a4c:	e003      	b.n	8006a56 <Lslalom_L90+0x11a>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006a4e:	2103      	movs	r1, #3
 8006a50:	20fe      	movs	r0, #254	; 0xfe
 8006a52:	f007 fb35 	bl	800e0c0 <turn_dir>
		slalomB(10000, SPEED_HIGH, LSLALOM_H_OFFSET_B);
 8006a56:	223c      	movs	r2, #60	; 0x3c
 8006a58:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006a5c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a60:	f7fe fe94 	bl	800578c <slalomB>
}
 8006a64:	e02d      	b.n	8006ac2 <Lslalom_L90+0x186>
	}else if(run_mode == HIGH_HIGH){
 8006a66:	4b18      	ldr	r3, [pc, #96]	; (8006ac8 <Lslalom_L90+0x18c>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	d128      	bne.n	8006ac2 <Lslalom_L90+0x186>
		slalomF(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_F, LSLALOM_H_H_WALL_FL, LSLALOM_H_H_WALL_FR);
 8006a70:	2364      	movs	r3, #100	; 0x64
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	23c8      	movs	r3, #200	; 0xc8
 8006a76:	221e      	movs	r2, #30
 8006a78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a7c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a80:	f7fe fce4 	bl	800544c <slalomF>
		slalomR(LSLALOM_H_H_DEGACCEL, LSLALOM_H_H_OMEGA, 90, SPEED_HIGH_HIGH);
 8006a84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a88:	225a      	movs	r2, #90	; 0x5a
 8006a8a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006a8e:	4810      	ldr	r0, [pc, #64]	; (8006ad0 <Lslalom_L90+0x194>)
 8006a90:	f7fe fd58 	bl	8005544 <slalomR>
		if(!MF.FLAG.XDIR){
 8006a94:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <Lslalom_L90+0x190>)
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d104      	bne.n	8006aac <Lslalom_L90+0x170>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	20ff      	movs	r0, #255	; 0xff
 8006aa6:	f007 fb0b 	bl	800e0c0 <turn_dir>
 8006aaa:	e003      	b.n	8006ab4 <Lslalom_L90+0x178>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006aac:	2103      	movs	r1, #3
 8006aae:	20fe      	movs	r0, #254	; 0xfe
 8006ab0:	f007 fb06 	bl	800e0c0 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_B);
 8006ab4:	221e      	movs	r2, #30
 8006ab6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006aba:	f242 7010 	movw	r0, #10000	; 0x2710
 8006abe:	f7fe fe65 	bl	800578c <slalomB>
}
 8006ac2:	bf00      	nop
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	20000456 	.word	0x20000456
 8006acc:	20000f74 	.word	0x20000f74
 8006ad0:	ffff9c40 	.word	0xffff9c40

08006ad4 <Lslalom_R180>:
//Lslalom_R180
// スラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R180(void){
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af02      	add	r7, sp, #8
	full_led_write(GREEN);
 8006ada:	2002      	movs	r0, #2
 8006adc:	f009 f8c0 	bl	800fc60 <full_led_write>
	if(run_mode == LOW){
 8006ae0:	4b66      	ldr	r3, [pc, #408]	; (8006c7c <Lslalom_R180+0x1a8>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d12d      	bne.n	8006b46 <Lslalom_R180+0x72>
		slalomF(10000, SPEED_LOW, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 8006aea:	2364      	movs	r3, #100	; 0x64
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	23c8      	movs	r3, #200	; 0xc8
 8006af0:	223c      	movs	r2, #60	; 0x3c
 8006af2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006af6:	f242 7010 	movw	r0, #10000	; 0x2710
 8006afa:	f7fe fca7 	bl	800544c <slalomF>
		slalomR(-LROTATE_DEGACCEL, -LROTATE_OMEGA, -180, SPEED_LOW);
 8006afe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006b02:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8006b06:	495e      	ldr	r1, [pc, #376]	; (8006c80 <Lslalom_R180+0x1ac>)
 8006b08:	485e      	ldr	r0, [pc, #376]	; (8006c84 <Lslalom_R180+0x1b0>)
 8006b0a:	f7fe fd1b 	bl	8005544 <slalomR>

		if(!MF.FLAG.XDIR){
 8006b0e:	4b5e      	ldr	r3, [pc, #376]	; (8006c88 <Lslalom_R180+0x1b4>)
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d108      	bne.n	8006b2e <Lslalom_R180+0x5a>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	2001      	movs	r0, #1
 8006b20:	f007 face 	bl	800e0c0 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b24:	2101      	movs	r1, #1
 8006b26:	2001      	movs	r0, #1
 8006b28:	f007 faca 	bl	800e0c0 <turn_dir>
 8006b2c:	e003      	b.n	8006b36 <Lslalom_R180+0x62>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b2e:	2103      	movs	r1, #3
 8006b30:	2004      	movs	r0, #4
 8006b32:	f007 fac5 	bl	800e0c0 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LROTATE_OFFSET_B);
 8006b36:	223c      	movs	r2, #60	; 0x3c
 8006b38:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006b3c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b40:	f7fe fe24 	bl	800578c <slalomB>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_H_H_OFFSET_B);
	}
}
 8006b44:	e097      	b.n	8006c76 <Lslalom_R180+0x1a2>
	}else if(run_mode == MIDDLE){
 8006b46:	4b4d      	ldr	r3, [pc, #308]	; (8006c7c <Lslalom_R180+0x1a8>)
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d12d      	bne.n	8006bac <Lslalom_R180+0xd8>
		slalomF(10000, SPEED_MIDDLE, LROTATE_M_OFFSET_F, LROTATE_M_WALL_FL, LROTATE_M_WALL_FR);
 8006b50:	2364      	movs	r3, #100	; 0x64
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	23c8      	movs	r3, #200	; 0xc8
 8006b56:	223c      	movs	r2, #60	; 0x3c
 8006b58:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006b5c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b60:	f7fe fc74 	bl	800544c <slalomF>
		slalomR(-LROTATE_M_DEGACCEL, -LROTATE_M_OMEGA, -180, SPEED_MIDDLE);
 8006b64:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006b68:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8006b6c:	4947      	ldr	r1, [pc, #284]	; (8006c8c <Lslalom_R180+0x1b8>)
 8006b6e:	4848      	ldr	r0, [pc, #288]	; (8006c90 <Lslalom_R180+0x1bc>)
 8006b70:	f7fe fce8 	bl	8005544 <slalomR>
		if(!MF.FLAG.XDIR){
 8006b74:	4b44      	ldr	r3, [pc, #272]	; (8006c88 <Lslalom_R180+0x1b4>)
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d108      	bne.n	8006b94 <Lslalom_R180+0xc0>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b82:	2101      	movs	r1, #1
 8006b84:	2001      	movs	r0, #1
 8006b86:	f007 fa9b 	bl	800e0c0 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	2001      	movs	r0, #1
 8006b8e:	f007 fa97 	bl	800e0c0 <turn_dir>
 8006b92:	e003      	b.n	8006b9c <Lslalom_R180+0xc8>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b94:	2103      	movs	r1, #3
 8006b96:	2004      	movs	r0, #4
 8006b98:	f007 fa92 	bl	800e0c0 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LROTATE_M_OFFSET_B);
 8006b9c:	223c      	movs	r2, #60	; 0x3c
 8006b9e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006ba2:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ba6:	f7fe fdf1 	bl	800578c <slalomB>
}
 8006baa:	e064      	b.n	8006c76 <Lslalom_R180+0x1a2>
	}else if(run_mode == HIGH){
 8006bac:	4b33      	ldr	r3, [pc, #204]	; (8006c7c <Lslalom_R180+0x1a8>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d12d      	bne.n	8006c12 <Lslalom_R180+0x13e>
		slalomF(10000, SPEED_HIGH, LROTATE_H_OFFSET_F, LROTATE_H_WALL_FL, LROTATE_H_WALL_FR);
 8006bb6:	235a      	movs	r3, #90	; 0x5a
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	23b4      	movs	r3, #180	; 0xb4
 8006bbc:	2228      	movs	r2, #40	; 0x28
 8006bbe:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006bc2:	f242 7010 	movw	r0, #10000	; 0x2710
 8006bc6:	f7fe fc41 	bl	800544c <slalomF>
		slalomR(-LROTATE_H_DEGACCEL, -LROTATE_H_OMEGA, -180, SPEED_HIGH);
 8006bca:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006bce:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8006bd2:	492e      	ldr	r1, [pc, #184]	; (8006c8c <Lslalom_R180+0x1b8>)
 8006bd4:	482e      	ldr	r0, [pc, #184]	; (8006c90 <Lslalom_R180+0x1bc>)
 8006bd6:	f7fe fcb5 	bl	8005544 <slalomR>
		if(!MF.FLAG.XDIR){
 8006bda:	4b2b      	ldr	r3, [pc, #172]	; (8006c88 <Lslalom_R180+0x1b4>)
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d108      	bne.n	8006bfa <Lslalom_R180+0x126>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006be8:	2101      	movs	r1, #1
 8006bea:	2001      	movs	r0, #1
 8006bec:	f007 fa68 	bl	800e0c0 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	2001      	movs	r0, #1
 8006bf4:	f007 fa64 	bl	800e0c0 <turn_dir>
 8006bf8:	e003      	b.n	8006c02 <Lslalom_R180+0x12e>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006bfa:	2103      	movs	r1, #3
 8006bfc:	2004      	movs	r0, #4
 8006bfe:	f007 fa5f 	bl	800e0c0 <turn_dir>
		slalomB(10000, SPEED_HIGH, LROTATE_H_OFFSET_B);
 8006c02:	2228      	movs	r2, #40	; 0x28
 8006c04:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006c08:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c0c:	f7fe fdbe 	bl	800578c <slalomB>
}
 8006c10:	e031      	b.n	8006c76 <Lslalom_R180+0x1a2>
	}else if(run_mode == HIGH_HIGH){
 8006c12:	4b1a      	ldr	r3, [pc, #104]	; (8006c7c <Lslalom_R180+0x1a8>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	d12c      	bne.n	8006c76 <Lslalom_R180+0x1a2>
		slalomF(10000, SPEED_HIGH_HIGH, LROTATE_H_H_OFFSET_F, LROTATE_H_H_WALL_FL, LROTATE_H_H_WALL_FR);
 8006c1c:	235a      	movs	r3, #90	; 0x5a
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	23b4      	movs	r3, #180	; 0xb4
 8006c22:	2228      	movs	r2, #40	; 0x28
 8006c24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006c28:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c2c:	f7fe fc0e 	bl	800544c <slalomF>
		slalomR(-LROTATE_H_H_DEGACCEL, -LROTATE_H_H_OMEGA, -180, SPEED_HIGH_HIGH);
 8006c30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c34:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8006c38:	4914      	ldr	r1, [pc, #80]	; (8006c8c <Lslalom_R180+0x1b8>)
 8006c3a:	4816      	ldr	r0, [pc, #88]	; (8006c94 <Lslalom_R180+0x1c0>)
 8006c3c:	f7fe fc82 	bl	8005544 <slalomR>
		if(!MF.FLAG.XDIR){
 8006c40:	4b11      	ldr	r3, [pc, #68]	; (8006c88 <Lslalom_R180+0x1b4>)
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d108      	bne.n	8006c60 <Lslalom_R180+0x18c>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c4e:	2101      	movs	r1, #1
 8006c50:	2001      	movs	r0, #1
 8006c52:	f007 fa35 	bl	800e0c0 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c56:	2101      	movs	r1, #1
 8006c58:	2001      	movs	r0, #1
 8006c5a:	f007 fa31 	bl	800e0c0 <turn_dir>
 8006c5e:	e003      	b.n	8006c68 <Lslalom_R180+0x194>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c60:	2103      	movs	r1, #3
 8006c62:	2004      	movs	r0, #4
 8006c64:	f007 fa2c 	bl	800e0c0 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_H_H_OFFSET_B);
 8006c68:	2228      	movs	r2, #40	; 0x28
 8006c6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006c6e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c72:	f7fe fd8b 	bl	800578c <slalomB>
}
 8006c76:	bf00      	nop
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20000456 	.word	0x20000456
 8006c80:	fffffefc 	.word	0xfffffefc
 8006c84:	fffff830 	.word	0xfffff830
 8006c88:	20000f74 	.word	0x20000f74
 8006c8c:	fffffda8 	.word	0xfffffda8
 8006c90:	fffff448 	.word	0xfffff448
 8006c94:	ffffe890 	.word	0xffffe890

08006c98 <Lslalom_L180>:
//Lslalom_L180
// 大回りスラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L180(void){
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af02      	add	r7, sp, #8
	full_led_write(GREEN);
 8006c9e:	2002      	movs	r0, #2
 8006ca0:	f008 ffde 	bl	800fc60 <full_led_write>
	if(run_mode == LOW){
 8006ca4:	4b68      	ldr	r3, [pc, #416]	; (8006e48 <Lslalom_L180+0x1b0>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d12e      	bne.n	8006d0c <Lslalom_L180+0x74>
		slalomF(10000, SPEED_LOW, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 8006cae:	2364      	movs	r3, #100	; 0x64
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	23c8      	movs	r3, #200	; 0xc8
 8006cb4:	223c      	movs	r2, #60	; 0x3c
 8006cb6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006cba:	f242 7010 	movw	r0, #10000	; 0x2710
 8006cbe:	f7fe fbc5 	bl	800544c <slalomF>
		slalomR(LROTATE_DEGACCEL, LROTATE_OMEGA, 180, SPEED_LOW);
 8006cc2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006cc6:	22b4      	movs	r2, #180	; 0xb4
 8006cc8:	f44f 7182 	mov.w	r1, #260	; 0x104
 8006ccc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006cd0:	f7fe fc38 	bl	8005544 <slalomR>

		if(!MF.FLAG.XDIR){
 8006cd4:	4b5d      	ldr	r3, [pc, #372]	; (8006e4c <Lslalom_L180+0x1b4>)
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d108      	bne.n	8006cf4 <Lslalom_L180+0x5c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	20ff      	movs	r0, #255	; 0xff
 8006ce6:	f007 f9eb 	bl	800e0c0 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006cea:	2101      	movs	r1, #1
 8006cec:	20ff      	movs	r0, #255	; 0xff
 8006cee:	f007 f9e7 	bl	800e0c0 <turn_dir>
 8006cf2:	e003      	b.n	8006cfc <Lslalom_L180+0x64>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006cf4:	2103      	movs	r1, #3
 8006cf6:	20fc      	movs	r0, #252	; 0xfc
 8006cf8:	f007 f9e2 	bl	800e0c0 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LROTATE_OFFSET_B);
 8006cfc:	223c      	movs	r2, #60	; 0x3c
 8006cfe:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006d02:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d06:	f7fe fd41 	bl	800578c <slalomB>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_H_H_OFFSET_B);
	}
}
 8006d0a:	e09a      	b.n	8006e42 <Lslalom_L180+0x1aa>
	}else if(run_mode == MIDDLE){
 8006d0c:	4b4e      	ldr	r3, [pc, #312]	; (8006e48 <Lslalom_L180+0x1b0>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d12e      	bne.n	8006d74 <Lslalom_L180+0xdc>
		slalomF(10000, SPEED_MIDDLE, LROTATE_M_OFFSET_F, LROTATE_M_WALL_FL, LROTATE_M_WALL_FR);
 8006d16:	2364      	movs	r3, #100	; 0x64
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	23c8      	movs	r3, #200	; 0xc8
 8006d1c:	223c      	movs	r2, #60	; 0x3c
 8006d1e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006d22:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d26:	f7fe fb91 	bl	800544c <slalomF>
		slalomR(LROTATE_M_DEGACCEL, LROTATE_M_OMEGA, 180, SPEED_MIDDLE);
 8006d2a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006d2e:	22b4      	movs	r2, #180	; 0xb4
 8006d30:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006d34:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006d38:	f7fe fc04 	bl	8005544 <slalomR>
		if(!MF.FLAG.XDIR){
 8006d3c:	4b43      	ldr	r3, [pc, #268]	; (8006e4c <Lslalom_L180+0x1b4>)
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d108      	bne.n	8006d5c <Lslalom_L180+0xc4>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	20ff      	movs	r0, #255	; 0xff
 8006d4e:	f007 f9b7 	bl	800e0c0 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d52:	2101      	movs	r1, #1
 8006d54:	20ff      	movs	r0, #255	; 0xff
 8006d56:	f007 f9b3 	bl	800e0c0 <turn_dir>
 8006d5a:	e003      	b.n	8006d64 <Lslalom_L180+0xcc>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d5c:	2103      	movs	r1, #3
 8006d5e:	20fc      	movs	r0, #252	; 0xfc
 8006d60:	f007 f9ae 	bl	800e0c0 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LROTATE_M_OFFSET_B);
 8006d64:	223c      	movs	r2, #60	; 0x3c
 8006d66:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006d6a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d6e:	f7fe fd0d 	bl	800578c <slalomB>
}
 8006d72:	e066      	b.n	8006e42 <Lslalom_L180+0x1aa>
	}else if(run_mode == HIGH){
 8006d74:	4b34      	ldr	r3, [pc, #208]	; (8006e48 <Lslalom_L180+0x1b0>)
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d12e      	bne.n	8006ddc <Lslalom_L180+0x144>
		slalomF(10000, SPEED_HIGH, LROTATE_H_OFFSET_F, LROTATE_H_WALL_FL, LROTATE_H_WALL_FR);
 8006d7e:	235a      	movs	r3, #90	; 0x5a
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	23b4      	movs	r3, #180	; 0xb4
 8006d84:	2228      	movs	r2, #40	; 0x28
 8006d86:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006d8a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d8e:	f7fe fb5d 	bl	800544c <slalomF>
		slalomR(LROTATE_H_DEGACCEL, LROTATE_H_OMEGA, 180, SPEED_HIGH);
 8006d92:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006d96:	22b4      	movs	r2, #180	; 0xb4
 8006d98:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006d9c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006da0:	f7fe fbd0 	bl	8005544 <slalomR>
		if(!MF.FLAG.XDIR){
 8006da4:	4b29      	ldr	r3, [pc, #164]	; (8006e4c <Lslalom_L180+0x1b4>)
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d108      	bne.n	8006dc4 <Lslalom_L180+0x12c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006db2:	2101      	movs	r1, #1
 8006db4:	20ff      	movs	r0, #255	; 0xff
 8006db6:	f007 f983 	bl	800e0c0 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006dba:	2101      	movs	r1, #1
 8006dbc:	20ff      	movs	r0, #255	; 0xff
 8006dbe:	f007 f97f 	bl	800e0c0 <turn_dir>
 8006dc2:	e003      	b.n	8006dcc <Lslalom_L180+0x134>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006dc4:	2103      	movs	r1, #3
 8006dc6:	20fc      	movs	r0, #252	; 0xfc
 8006dc8:	f007 f97a 	bl	800e0c0 <turn_dir>
		slalomB(10000, SPEED_HIGH, LROTATE_H_OFFSET_B);
 8006dcc:	2228      	movs	r2, #40	; 0x28
 8006dce:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006dd2:	f242 7010 	movw	r0, #10000	; 0x2710
 8006dd6:	f7fe fcd9 	bl	800578c <slalomB>
}
 8006dda:	e032      	b.n	8006e42 <Lslalom_L180+0x1aa>
	}else if(run_mode == HIGH_HIGH){
 8006ddc:	4b1a      	ldr	r3, [pc, #104]	; (8006e48 <Lslalom_L180+0x1b0>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	d12d      	bne.n	8006e42 <Lslalom_L180+0x1aa>
		slalomF(10000, SPEED_HIGH_HIGH, LROTATE_H_H_OFFSET_F, LROTATE_H_H_WALL_FL, LROTATE_H_H_WALL_FR);
 8006de6:	235a      	movs	r3, #90	; 0x5a
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	23b4      	movs	r3, #180	; 0xb4
 8006dec:	2228      	movs	r2, #40	; 0x28
 8006dee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006df2:	f242 7010 	movw	r0, #10000	; 0x2710
 8006df6:	f7fe fb29 	bl	800544c <slalomF>
		slalomR(LROTATE_H_H_DEGACCEL, LROTATE_H_H_OMEGA, 180, SPEED_HIGH_HIGH);
 8006dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006dfe:	22b4      	movs	r2, #180	; 0xb4
 8006e00:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006e04:	f241 7070 	movw	r0, #6000	; 0x1770
 8006e08:	f7fe fb9c 	bl	8005544 <slalomR>
		if(!MF.FLAG.XDIR){
 8006e0c:	4b0f      	ldr	r3, [pc, #60]	; (8006e4c <Lslalom_L180+0x1b4>)
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d108      	bne.n	8006e2c <Lslalom_L180+0x194>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	20ff      	movs	r0, #255	; 0xff
 8006e1e:	f007 f94f 	bl	800e0c0 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e22:	2101      	movs	r1, #1
 8006e24:	20ff      	movs	r0, #255	; 0xff
 8006e26:	f007 f94b 	bl	800e0c0 <turn_dir>
 8006e2a:	e003      	b.n	8006e34 <Lslalom_L180+0x19c>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e2c:	2103      	movs	r1, #3
 8006e2e:	20fc      	movs	r0, #252	; 0xfc
 8006e30:	f007 f946 	bl	800e0c0 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_H_H_OFFSET_B);
 8006e34:	2228      	movs	r2, #40	; 0x28
 8006e36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006e3a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e3e:	f7fe fca5 	bl	800578c <slalomB>
}
 8006e42:	bf00      	nop
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	20000456 	.word	0x20000456
 8006e4c:	20000f74 	.word	0x20000f74

08006e50 <v_R45>:
//v_R45
// 区画中心から右に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45(void){
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8006e56:	2005      	movs	r0, #5
 8006e58:	f008 ff02 	bl	800fc60 <full_led_write>
	if(run_mode == LOW){
 8006e5c:	4b9a      	ldr	r3, [pc, #616]	; (80070c8 <v_R45+0x278>)
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d147      	bne.n	8006ef6 <v_R45+0xa6>
		if(!v_flag){
 8006e66:	4b99      	ldr	r3, [pc, #612]	; (80070cc <v_R45+0x27c>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10c      	bne.n	8006e88 <v_R45+0x38>
			slalomF(10000, SPEED_LOW, V_OFFSET_F, NO_WALL, NO_WALL);
 8006e6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e78:	2228      	movs	r2, #40	; 0x28
 8006e7a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006e7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e82:	f7fe fae3 	bl	800544c <slalomF>
 8006e86:	e00b      	b.n	8006ea0 <v_R45+0x50>
		}else{
			slalomF(10000, SPEED_LOW, V_OFFSET_B, NO_WALL, NO_WALL);
 8006e88:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e92:	2250      	movs	r2, #80	; 0x50
 8006e94:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006e98:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e9c:	f7fe fad6 	bl	800544c <slalomF>
		}
		slalomR(-V_DEGACCEL, -V_OMEGA, -45, SPEED_LOW);
 8006ea0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006ea4:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8006ea8:	4989      	ldr	r1, [pc, #548]	; (80070d0 <v_R45+0x280>)
 8006eaa:	488a      	ldr	r0, [pc, #552]	; (80070d4 <v_R45+0x284>)
 8006eac:	f7fe fb4a 	bl	8005544 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8006eb0:	2103      	movs	r1, #3
 8006eb2:	2001      	movs	r0, #1
 8006eb4:	f007 f904 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 8006eb8:	4b84      	ldr	r3, [pc, #528]	; (80070cc <v_R45+0x27c>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	bfb8      	it	lt
 8006ec6:	425b      	neglt	r3, r3
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	4b80      	ldr	r3, [pc, #512]	; (80070cc <v_R45+0x27c>)
 8006ecc:	701a      	strb	r2, [r3, #0]

		if(!v_flag){
 8006ece:	4b7f      	ldr	r3, [pc, #508]	; (80070cc <v_R45+0x27c>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d107      	bne.n	8006ee6 <v_R45+0x96>
			slalomB(10000, SPEED_LOW, V_OFFSET_F);
 8006ed6:	2228      	movs	r2, #40	; 0x28
 8006ed8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006edc:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ee0:	f7fe fc54 	bl	800578c <slalomB>
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_F+10);
		}else{
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_B);
		}
	}
}
 8006ee4:	e0ed      	b.n	80070c2 <v_R45+0x272>
			slalomB(10000, SPEED_LOW, V_OFFSET_B);
 8006ee6:	2250      	movs	r2, #80	; 0x50
 8006ee8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006eec:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ef0:	f7fe fc4c 	bl	800578c <slalomB>
}
 8006ef4:	e0e5      	b.n	80070c2 <v_R45+0x272>
	}else if(run_mode == MIDDLE){
 8006ef6:	4b74      	ldr	r3, [pc, #464]	; (80070c8 <v_R45+0x278>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d147      	bne.n	8006f90 <v_R45+0x140>
		if(!v_flag){
 8006f00:	4b72      	ldr	r3, [pc, #456]	; (80070cc <v_R45+0x27c>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10c      	bne.n	8006f22 <v_R45+0xd2>
			slalomF(10000, SPEED_MIDDLE, V_M_OFFSET_F, NO_WALL, NO_WALL);
 8006f08:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f12:	2228      	movs	r2, #40	; 0x28
 8006f14:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006f18:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f1c:	f7fe fa96 	bl	800544c <slalomF>
 8006f20:	e00b      	b.n	8006f3a <v_R45+0xea>
			slalomF(10000, SPEED_MIDDLE, V_M_OFFSET_B-18, NO_WALL, NO_WALL);
 8006f22:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f2c:	223a      	movs	r2, #58	; 0x3a
 8006f2e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006f32:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f36:	f7fe fa89 	bl	800544c <slalomF>
		slalomR(-V_M_DEGACCEL, -V_M_OMEGA, -45, SPEED_MIDDLE);
 8006f3a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006f3e:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8006f42:	4965      	ldr	r1, [pc, #404]	; (80070d8 <v_R45+0x288>)
 8006f44:	4865      	ldr	r0, [pc, #404]	; (80070dc <v_R45+0x28c>)
 8006f46:	f7fe fafd 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8006f4a:	2103      	movs	r1, #3
 8006f4c:	2001      	movs	r0, #1
 8006f4e:	f007 f8b7 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 8006f52:	4b5e      	ldr	r3, [pc, #376]	; (80070cc <v_R45+0x27c>)
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	3301      	adds	r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	bfb8      	it	lt
 8006f60:	425b      	neglt	r3, r3
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	4b59      	ldr	r3, [pc, #356]	; (80070cc <v_R45+0x27c>)
 8006f66:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 8006f68:	4b58      	ldr	r3, [pc, #352]	; (80070cc <v_R45+0x27c>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d107      	bne.n	8006f80 <v_R45+0x130>
			slalomB(10000, SPEED_MIDDLE, V_M_OFFSET_F+10);
 8006f70:	2232      	movs	r2, #50	; 0x32
 8006f72:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006f76:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f7a:	f7fe fc07 	bl	800578c <slalomB>
}
 8006f7e:	e0a0      	b.n	80070c2 <v_R45+0x272>
			slalomB(10000, SPEED_MIDDLE, V_M_OFFSET_B);
 8006f80:	224c      	movs	r2, #76	; 0x4c
 8006f82:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006f86:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f8a:	f7fe fbff 	bl	800578c <slalomB>
}
 8006f8e:	e098      	b.n	80070c2 <v_R45+0x272>
	}else if(run_mode == HIGH){
 8006f90:	4b4d      	ldr	r3, [pc, #308]	; (80070c8 <v_R45+0x278>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d147      	bne.n	800702a <v_R45+0x1da>
		if(!v_flag){
 8006f9a:	4b4c      	ldr	r3, [pc, #304]	; (80070cc <v_R45+0x27c>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10c      	bne.n	8006fbc <v_R45+0x16c>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_F, NO_WALL, NO_WALL);
 8006fa2:	f241 3388 	movw	r3, #5000	; 0x1388
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	f241 3388 	movw	r3, #5000	; 0x1388
 8006fac:	2217      	movs	r2, #23
 8006fae:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006fb2:	f242 7010 	movw	r0, #10000	; 0x2710
 8006fb6:	f7fe fa49 	bl	800544c <slalomF>
 8006fba:	e00b      	b.n	8006fd4 <v_R45+0x184>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_B-18, NO_WALL, NO_WALL);
 8006fbc:	f241 3388 	movw	r3, #5000	; 0x1388
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	f241 3388 	movw	r3, #5000	; 0x1388
 8006fc6:	223e      	movs	r2, #62	; 0x3e
 8006fc8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006fcc:	f242 7010 	movw	r0, #10000	; 0x2710
 8006fd0:	f7fe fa3c 	bl	800544c <slalomF>
		slalomR(-V_H_DEGACCEL, -V_H_OMEGA, -45, SPEED_HIGH);
 8006fd4:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006fd8:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8006fdc:	493e      	ldr	r1, [pc, #248]	; (80070d8 <v_R45+0x288>)
 8006fde:	483f      	ldr	r0, [pc, #252]	; (80070dc <v_R45+0x28c>)
 8006fe0:	f7fe fab0 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8006fe4:	2103      	movs	r1, #3
 8006fe6:	2001      	movs	r0, #1
 8006fe8:	f007 f86a 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 8006fec:	4b37      	ldr	r3, [pc, #220]	; (80070cc <v_R45+0x27c>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	bfb8      	it	lt
 8006ffa:	425b      	neglt	r3, r3
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	4b33      	ldr	r3, [pc, #204]	; (80070cc <v_R45+0x27c>)
 8007000:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 8007002:	4b32      	ldr	r3, [pc, #200]	; (80070cc <v_R45+0x27c>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d107      	bne.n	800701a <v_R45+0x1ca>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_F+10);
 800700a:	2221      	movs	r2, #33	; 0x21
 800700c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007010:	f242 7010 	movw	r0, #10000	; 0x2710
 8007014:	f7fe fbba 	bl	800578c <slalomB>
}
 8007018:	e053      	b.n	80070c2 <v_R45+0x272>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B);
 800701a:	2250      	movs	r2, #80	; 0x50
 800701c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007020:	f242 7010 	movw	r0, #10000	; 0x2710
 8007024:	f7fe fbb2 	bl	800578c <slalomB>
}
 8007028:	e04b      	b.n	80070c2 <v_R45+0x272>
	}else if(run_mode == HIGH_HIGH){
 800702a:	4b27      	ldr	r3, [pc, #156]	; (80070c8 <v_R45+0x278>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b04      	cmp	r3, #4
 8007032:	d146      	bne.n	80070c2 <v_R45+0x272>
		if(!v_flag){
 8007034:	4b25      	ldr	r3, [pc, #148]	; (80070cc <v_R45+0x27c>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10c      	bne.n	8007056 <v_R45+0x206>
			slalomF(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_F, NO_WALL, NO_WALL);
 800703c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	f241 3388 	movw	r3, #5000	; 0x1388
 8007046:	2217      	movs	r2, #23
 8007048:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800704c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007050:	f7fe f9fc 	bl	800544c <slalomF>
 8007054:	e00b      	b.n	800706e <v_R45+0x21e>
			slalomF(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_B-18, NO_WALL, NO_WALL);
 8007056:	f241 3388 	movw	r3, #5000	; 0x1388
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007060:	223e      	movs	r2, #62	; 0x3e
 8007062:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007066:	f242 7010 	movw	r0, #10000	; 0x2710
 800706a:	f7fe f9ef 	bl	800544c <slalomF>
		slalomR(-V_H_H_DEGACCEL, -V_H_H_OMEGA, -45, SPEED_HIGH_HIGH);
 800706e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007072:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007076:	4918      	ldr	r1, [pc, #96]	; (80070d8 <v_R45+0x288>)
 8007078:	4818      	ldr	r0, [pc, #96]	; (80070dc <v_R45+0x28c>)
 800707a:	f7fe fa63 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800707e:	2103      	movs	r1, #3
 8007080:	2001      	movs	r0, #1
 8007082:	f007 f81d 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 8007086:	4b11      	ldr	r3, [pc, #68]	; (80070cc <v_R45+0x27c>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	3301      	adds	r3, #1
 800708c:	2b00      	cmp	r3, #0
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	bfb8      	it	lt
 8007094:	425b      	neglt	r3, r3
 8007096:	b2da      	uxtb	r2, r3
 8007098:	4b0c      	ldr	r3, [pc, #48]	; (80070cc <v_R45+0x27c>)
 800709a:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 800709c:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <v_R45+0x27c>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d107      	bne.n	80070b4 <v_R45+0x264>
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_F+10);
 80070a4:	2221      	movs	r2, #33	; 0x21
 80070a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80070aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80070ae:	f7fe fb6d 	bl	800578c <slalomB>
}
 80070b2:	e006      	b.n	80070c2 <v_R45+0x272>
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_B);
 80070b4:	2250      	movs	r2, #80	; 0x50
 80070b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80070ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80070be:	f7fe fb65 	bl	800578c <slalomB>
}
 80070c2:	bf00      	nop
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	20000456 	.word	0x20000456
 80070cc:	20000af0 	.word	0x20000af0
 80070d0:	fffffed4 	.word	0xfffffed4
 80070d4:	fffff448 	.word	0xfffff448
 80070d8:	fffffe70 	.word	0xfffffe70
 80070dc:	ffffe0c0 	.word	0xffffe0c0

080070e0 <v_L45>:
//v_L45
// 区画中心から左に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45(void){
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80070e6:	2006      	movs	r0, #6
 80070e8:	f008 fdba 	bl	800fc60 <full_led_write>
	if(run_mode == LOW){
 80070ec:	4b9c      	ldr	r3, [pc, #624]	; (8007360 <v_L45+0x280>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d148      	bne.n	8007188 <v_L45+0xa8>
		if(!v_flag){
 80070f6:	4b9b      	ldr	r3, [pc, #620]	; (8007364 <v_L45+0x284>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10c      	bne.n	8007118 <v_L45+0x38>
			slalomF(10000, SPEED_LOW, V_OFFSET_F+15, NO_WALL, NO_WALL);
 80070fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	f241 3388 	movw	r3, #5000	; 0x1388
 8007108:	2237      	movs	r2, #55	; 0x37
 800710a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800710e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007112:	f7fe f99b 	bl	800544c <slalomF>
 8007116:	e00b      	b.n	8007130 <v_L45+0x50>
		}else{
			slalomF(10000, SPEED_LOW, V_OFFSET_B+5, NO_WALL, NO_WALL);
 8007118:	f241 3388 	movw	r3, #5000	; 0x1388
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007122:	2255      	movs	r2, #85	; 0x55
 8007124:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007128:	f242 7010 	movw	r0, #10000	; 0x2710
 800712c:	f7fe f98e 	bl	800544c <slalomF>
		}
		slalomR(V_DEGACCEL, V_OMEGA, 55, SPEED_LOW);
 8007130:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007134:	2237      	movs	r2, #55	; 0x37
 8007136:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800713a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800713e:	f7fe fa01 	bl	8005544 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007142:	2103      	movs	r1, #3
 8007144:	20ff      	movs	r0, #255	; 0xff
 8007146:	f006 ffbb 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 800714a:	4b86      	ldr	r3, [pc, #536]	; (8007364 <v_L45+0x284>)
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	3301      	adds	r3, #1
 8007150:	2b00      	cmp	r3, #0
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	bfb8      	it	lt
 8007158:	425b      	neglt	r3, r3
 800715a:	b2da      	uxtb	r2, r3
 800715c:	4b81      	ldr	r3, [pc, #516]	; (8007364 <v_L45+0x284>)
 800715e:	701a      	strb	r2, [r3, #0]

		if(!v_flag){
 8007160:	4b80      	ldr	r3, [pc, #512]	; (8007364 <v_L45+0x284>)
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d107      	bne.n	8007178 <v_L45+0x98>
			slalomB(10000, SPEED_LOW, V_OFFSET_F+15);
 8007168:	2237      	movs	r2, #55	; 0x37
 800716a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800716e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007172:	f7fe fb0b 	bl	800578c <slalomB>
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_F+35);
		}else{
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_B+20);
		}
	}
}
 8007176:	e0f0      	b.n	800735a <v_L45+0x27a>
			slalomB(10000, SPEED_LOW, V_OFFSET_B+5);
 8007178:	2255      	movs	r2, #85	; 0x55
 800717a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800717e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007182:	f7fe fb03 	bl	800578c <slalomB>
}
 8007186:	e0e8      	b.n	800735a <v_L45+0x27a>
	}else if(run_mode == MIDDLE){
 8007188:	4b75      	ldr	r3, [pc, #468]	; (8007360 <v_L45+0x280>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b02      	cmp	r3, #2
 8007190:	d148      	bne.n	8007224 <v_L45+0x144>
		if(!v_flag){
 8007192:	4b74      	ldr	r3, [pc, #464]	; (8007364 <v_L45+0x284>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10c      	bne.n	80071b4 <v_L45+0xd4>
			slalomF(10000, SPEED_MIDDLE, V_M_OFFSET_F, NO_WALL, NO_WALL);
 800719a:	f241 3388 	movw	r3, #5000	; 0x1388
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80071a4:	2228      	movs	r2, #40	; 0x28
 80071a6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80071aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80071ae:	f7fe f94d 	bl	800544c <slalomF>
 80071b2:	e00b      	b.n	80071cc <v_L45+0xec>
			slalomF(10000, SPEED_MIDDLE, V_M_OFFSET_B-25, NO_WALL, NO_WALL);
 80071b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80071be:	2233      	movs	r2, #51	; 0x33
 80071c0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80071c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80071c8:	f7fe f940 	bl	800544c <slalomF>
		slalomR(V_M_DEGACCEL, V_M_OMEGA, 45, SPEED_MIDDLE);
 80071cc:	f44f 7316 	mov.w	r3, #600	; 0x258
 80071d0:	222d      	movs	r2, #45	; 0x2d
 80071d2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80071d6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80071da:	f7fe f9b3 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80071de:	2103      	movs	r1, #3
 80071e0:	20ff      	movs	r0, #255	; 0xff
 80071e2:	f006 ff6d 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 80071e6:	4b5f      	ldr	r3, [pc, #380]	; (8007364 <v_L45+0x284>)
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	3301      	adds	r3, #1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	bfb8      	it	lt
 80071f4:	425b      	neglt	r3, r3
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	4b5a      	ldr	r3, [pc, #360]	; (8007364 <v_L45+0x284>)
 80071fa:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 80071fc:	4b59      	ldr	r3, [pc, #356]	; (8007364 <v_L45+0x284>)
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d107      	bne.n	8007214 <v_L45+0x134>
			slalomB(10000, SPEED_MIDDLE, V_M_OFFSET_F+35);
 8007204:	224b      	movs	r2, #75	; 0x4b
 8007206:	f44f 7116 	mov.w	r1, #600	; 0x258
 800720a:	f242 7010 	movw	r0, #10000	; 0x2710
 800720e:	f7fe fabd 	bl	800578c <slalomB>
}
 8007212:	e0a2      	b.n	800735a <v_L45+0x27a>
			slalomB(10000, SPEED_MIDDLE, V_M_OFFSET_B+20);
 8007214:	2260      	movs	r2, #96	; 0x60
 8007216:	f44f 7116 	mov.w	r1, #600	; 0x258
 800721a:	f242 7010 	movw	r0, #10000	; 0x2710
 800721e:	f7fe fab5 	bl	800578c <slalomB>
}
 8007222:	e09a      	b.n	800735a <v_L45+0x27a>
	}else if(run_mode == HIGH){
 8007224:	4b4e      	ldr	r3, [pc, #312]	; (8007360 <v_L45+0x280>)
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b03      	cmp	r3, #3
 800722c:	d148      	bne.n	80072c0 <v_L45+0x1e0>
		if(!v_flag){
 800722e:	4b4d      	ldr	r3, [pc, #308]	; (8007364 <v_L45+0x284>)
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10c      	bne.n	8007250 <v_L45+0x170>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_F, NO_WALL, NO_WALL);
 8007236:	f241 3388 	movw	r3, #5000	; 0x1388
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007240:	2217      	movs	r2, #23
 8007242:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007246:	f242 7010 	movw	r0, #10000	; 0x2710
 800724a:	f7fe f8ff 	bl	800544c <slalomF>
 800724e:	e00b      	b.n	8007268 <v_L45+0x188>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_B-25, NO_WALL, NO_WALL);
 8007250:	f241 3388 	movw	r3, #5000	; 0x1388
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	f241 3388 	movw	r3, #5000	; 0x1388
 800725a:	2237      	movs	r2, #55	; 0x37
 800725c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007260:	f242 7010 	movw	r0, #10000	; 0x2710
 8007264:	f7fe f8f2 	bl	800544c <slalomF>
		slalomR(V_H_DEGACCEL, V_H_OMEGA, 45, SPEED_HIGH);
 8007268:	f44f 7348 	mov.w	r3, #800	; 0x320
 800726c:	222d      	movs	r2, #45	; 0x2d
 800726e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007272:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007276:	f7fe f965 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800727a:	2103      	movs	r1, #3
 800727c:	20ff      	movs	r0, #255	; 0xff
 800727e:	f006 ff1f 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 8007282:	4b38      	ldr	r3, [pc, #224]	; (8007364 <v_L45+0x284>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	3301      	adds	r3, #1
 8007288:	2b00      	cmp	r3, #0
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	bfb8      	it	lt
 8007290:	425b      	neglt	r3, r3
 8007292:	b2da      	uxtb	r2, r3
 8007294:	4b33      	ldr	r3, [pc, #204]	; (8007364 <v_L45+0x284>)
 8007296:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 8007298:	4b32      	ldr	r3, [pc, #200]	; (8007364 <v_L45+0x284>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d107      	bne.n	80072b0 <v_L45+0x1d0>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_F+35);
 80072a0:	223a      	movs	r2, #58	; 0x3a
 80072a2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80072a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80072aa:	f7fe fa6f 	bl	800578c <slalomB>
}
 80072ae:	e054      	b.n	800735a <v_L45+0x27a>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B+20);
 80072b0:	2264      	movs	r2, #100	; 0x64
 80072b2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80072b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80072ba:	f7fe fa67 	bl	800578c <slalomB>
}
 80072be:	e04c      	b.n	800735a <v_L45+0x27a>
	}else if(run_mode == HIGH_HIGH){
 80072c0:	4b27      	ldr	r3, [pc, #156]	; (8007360 <v_L45+0x280>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d147      	bne.n	800735a <v_L45+0x27a>
		if(!v_flag){
 80072ca:	4b26      	ldr	r3, [pc, #152]	; (8007364 <v_L45+0x284>)
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10c      	bne.n	80072ec <v_L45+0x20c>
			slalomF(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_F, NO_WALL, NO_WALL);
 80072d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80072dc:	2217      	movs	r2, #23
 80072de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80072e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80072e6:	f7fe f8b1 	bl	800544c <slalomF>
 80072ea:	e00b      	b.n	8007304 <v_L45+0x224>
			slalomF(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_B-25, NO_WALL, NO_WALL);
 80072ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80072f6:	2237      	movs	r2, #55	; 0x37
 80072f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80072fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007300:	f7fe f8a4 	bl	800544c <slalomF>
		slalomR(V_H_H_DEGACCEL, V_H_H_OMEGA, 45, SPEED_HIGH_HIGH);
 8007304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007308:	222d      	movs	r2, #45	; 0x2d
 800730a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800730e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007312:	f7fe f917 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007316:	2103      	movs	r1, #3
 8007318:	20ff      	movs	r0, #255	; 0xff
 800731a:	f006 fed1 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 800731e:	4b11      	ldr	r3, [pc, #68]	; (8007364 <v_L45+0x284>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	3301      	adds	r3, #1
 8007324:	2b00      	cmp	r3, #0
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	bfb8      	it	lt
 800732c:	425b      	neglt	r3, r3
 800732e:	b2da      	uxtb	r2, r3
 8007330:	4b0c      	ldr	r3, [pc, #48]	; (8007364 <v_L45+0x284>)
 8007332:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 8007334:	4b0b      	ldr	r3, [pc, #44]	; (8007364 <v_L45+0x284>)
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d107      	bne.n	800734c <v_L45+0x26c>
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_F+35);
 800733c:	223a      	movs	r2, #58	; 0x3a
 800733e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007342:	f242 7010 	movw	r0, #10000	; 0x2710
 8007346:	f7fe fa21 	bl	800578c <slalomB>
}
 800734a:	e006      	b.n	800735a <v_L45+0x27a>
			slalomB(10000, SPEED_HIGH_HIGH, V_H_H_OFFSET_B+20);
 800734c:	2264      	movs	r2, #100	; 0x64
 800734e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007352:	f242 7010 	movw	r0, #10000	; 0x2710
 8007356:	f7fe fa19 	bl	800578c <slalomB>
}
 800735a:	bf00      	nop
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	20000456 	.word	0x20000456
 8007364:	20000af0 	.word	0x20000af0

08007368 <v_R45D>:
//v_R45D
//a区画中心から右に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45D(void){
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 800736e:	2005      	movs	r0, #5
 8007370:	f008 fc76 	bl	800fc60 <full_led_write>
	if(run_mode == LOW){
 8007374:	4b54      	ldr	r3, [pc, #336]	; (80074c8 <v_R45D+0x160>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b01      	cmp	r3, #1
 800737c:	d14e      	bne.n	800741c <v_R45D+0xb4>
		if(!v_flag){
 800737e:	4b53      	ldr	r3, [pc, #332]	; (80074cc <v_R45D+0x164>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10c      	bne.n	80073a0 <v_R45D+0x38>
			slalomF(10000, SPEED_LOW, V_OFFSET_F, NO_WALL, NO_WALL);
 8007386:	f241 3388 	movw	r3, #5000	; 0x1388
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007390:	2228      	movs	r2, #40	; 0x28
 8007392:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007396:	f242 7010 	movw	r0, #10000	; 0x2710
 800739a:	f7fe f857 	bl	800544c <slalomF>
 800739e:	e00b      	b.n	80073b8 <v_R45D+0x50>
		}else{
			slalomF(10000, SPEED_LOW, V_OFFSET_B, NO_WALL, NO_WALL);
 80073a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80073aa:	2250      	movs	r2, #80	; 0x50
 80073ac:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80073b0:	f242 7010 	movw	r0, #10000	; 0x2710
 80073b4:	f7fe f84a 	bl	800544c <slalomF>
		}
		slalomR(-V_DEGACCEL, -V_OMEGA, -45, SPEED_LOW);
 80073b8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80073bc:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80073c0:	4943      	ldr	r1, [pc, #268]	; (80074d0 <v_R45D+0x168>)
 80073c2:	4844      	ldr	r0, [pc, #272]	; (80074d4 <v_R45D+0x16c>)
 80073c4:	f7fe f8be 	bl	8005544 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80073c8:	2103      	movs	r1, #3
 80073ca:	2001      	movs	r0, #1
 80073cc:	f006 fe78 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 80073d0:	4b3e      	ldr	r3, [pc, #248]	; (80074cc <v_R45D+0x164>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	3301      	adds	r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	bfb8      	it	lt
 80073de:	425b      	neglt	r3, r3
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	4b3a      	ldr	r3, [pc, #232]	; (80074cc <v_R45D+0x164>)
 80073e4:	701a      	strb	r2, [r3, #0]

		if(!v_flag){
 80073e6:	4b39      	ldr	r3, [pc, #228]	; (80074cc <v_R45D+0x164>)
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d107      	bne.n	80073fe <v_R45D+0x96>
			slalomB(10000, SPEED_LOW, V_OFFSET_F-10);
 80073ee:	221e      	movs	r2, #30
 80073f0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80073f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80073f8:	f7fe f9c8 	bl	800578c <slalomB>
 80073fc:	e006      	b.n	800740c <v_R45D+0xa4>
		}else{
			slalomB(10000, SPEED_LOW, V_OFFSET_B-10);
 80073fe:	2246      	movs	r2, #70	; 0x46
 8007400:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007404:	f242 7010 	movw	r0, #10000	; 0x2710
 8007408:	f7fe f9c0 	bl	800578c <slalomB>
		}
		driveD(-10000, SPEED_MIN, SPEED_LOW, 10);
 800740c:	230a      	movs	r3, #10
 800740e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007412:	2132      	movs	r1, #50	; 0x32
 8007414:	4830      	ldr	r0, [pc, #192]	; (80074d8 <v_R45D+0x170>)
 8007416:	f7fd fe45 	bl	80050a4 <driveD>
		}else{
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B-10);
		}
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
	}
}
 800741a:	e052      	b.n	80074c2 <v_R45D+0x15a>
	}else if(run_mode == HIGH){
 800741c:	4b2a      	ldr	r3, [pc, #168]	; (80074c8 <v_R45D+0x160>)
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b03      	cmp	r3, #3
 8007424:	d14d      	bne.n	80074c2 <v_R45D+0x15a>
		if(!v_flag){
 8007426:	4b29      	ldr	r3, [pc, #164]	; (80074cc <v_R45D+0x164>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10c      	bne.n	8007448 <v_R45D+0xe0>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_F, NO_WALL, NO_WALL);
 800742e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	f241 3388 	movw	r3, #5000	; 0x1388
 8007438:	2217      	movs	r2, #23
 800743a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800743e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007442:	f7fe f803 	bl	800544c <slalomF>
 8007446:	e00b      	b.n	8007460 <v_R45D+0xf8>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_B-18, NO_WALL, NO_WALL);
 8007448:	f241 3388 	movw	r3, #5000	; 0x1388
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007452:	223e      	movs	r2, #62	; 0x3e
 8007454:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007458:	f242 7010 	movw	r0, #10000	; 0x2710
 800745c:	f7fd fff6 	bl	800544c <slalomF>
		slalomR(-V_H_DEGACCEL, -V_H_OMEGA, -45, SPEED_HIGH);
 8007460:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007464:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007468:	491c      	ldr	r1, [pc, #112]	; (80074dc <v_R45D+0x174>)
 800746a:	481d      	ldr	r0, [pc, #116]	; (80074e0 <v_R45D+0x178>)
 800746c:	f7fe f86a 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007470:	2103      	movs	r1, #3
 8007472:	2001      	movs	r0, #1
 8007474:	f006 fe24 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 8007478:	4b14      	ldr	r3, [pc, #80]	; (80074cc <v_R45D+0x164>)
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	3301      	adds	r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	bfb8      	it	lt
 8007486:	425b      	neglt	r3, r3
 8007488:	b2da      	uxtb	r2, r3
 800748a:	4b10      	ldr	r3, [pc, #64]	; (80074cc <v_R45D+0x164>)
 800748c:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 800748e:	4b0f      	ldr	r3, [pc, #60]	; (80074cc <v_R45D+0x164>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d107      	bne.n	80074a6 <v_R45D+0x13e>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_F);
 8007496:	2217      	movs	r2, #23
 8007498:	f44f 7148 	mov.w	r1, #800	; 0x320
 800749c:	f242 7010 	movw	r0, #10000	; 0x2710
 80074a0:	f7fe f974 	bl	800578c <slalomB>
 80074a4:	e006      	b.n	80074b4 <v_R45D+0x14c>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B-10);
 80074a6:	2246      	movs	r2, #70	; 0x46
 80074a8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80074ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80074b0:	f7fe f96c 	bl	800578c <slalomB>
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
 80074b4:	230a      	movs	r3, #10
 80074b6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80074ba:	2132      	movs	r1, #50	; 0x32
 80074bc:	4806      	ldr	r0, [pc, #24]	; (80074d8 <v_R45D+0x170>)
 80074be:	f7fd fdf1 	bl	80050a4 <driveD>
}
 80074c2:	bf00      	nop
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	20000456 	.word	0x20000456
 80074cc:	20000af0 	.word	0x20000af0
 80074d0:	fffffed4 	.word	0xfffffed4
 80074d4:	fffff448 	.word	0xfffff448
 80074d8:	ffffd8f0 	.word	0xffffd8f0
 80074dc:	fffffe70 	.word	0xfffffe70
 80074e0:	ffffe0c0 	.word	0xffffe0c0

080074e4 <v_L45D>:
//v_L45D
//a区画中心から左に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45D(void){
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80074ea:	2006      	movs	r0, #6
 80074ec:	f008 fbb8 	bl	800fc60 <full_led_write>
	if(run_mode == LOW){
 80074f0:	4b55      	ldr	r3, [pc, #340]	; (8007648 <v_L45D+0x164>)
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d14f      	bne.n	800759a <v_L45D+0xb6>
		if(!v_flag){
 80074fa:	4b54      	ldr	r3, [pc, #336]	; (800764c <v_L45D+0x168>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10c      	bne.n	800751c <v_L45D+0x38>
			slalomF(10000, SPEED_LOW, V_OFFSET_F+15, NO_WALL, NO_WALL);
 8007502:	f241 3388 	movw	r3, #5000	; 0x1388
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	f241 3388 	movw	r3, #5000	; 0x1388
 800750c:	2237      	movs	r2, #55	; 0x37
 800750e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007512:	f242 7010 	movw	r0, #10000	; 0x2710
 8007516:	f7fd ff99 	bl	800544c <slalomF>
 800751a:	e00b      	b.n	8007534 <v_L45D+0x50>
		}else{
			slalomF(10000, SPEED_LOW, V_OFFSET_B+5, NO_WALL, NO_WALL);
 800751c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	f241 3388 	movw	r3, #5000	; 0x1388
 8007526:	2255      	movs	r2, #85	; 0x55
 8007528:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800752c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007530:	f7fd ff8c 	bl	800544c <slalomF>
		}
		slalomR(V_DEGACCEL, V_OMEGA, 55, SPEED_LOW);
 8007534:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007538:	2237      	movs	r2, #55	; 0x37
 800753a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800753e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007542:	f7fd ffff 	bl	8005544 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007546:	2103      	movs	r1, #3
 8007548:	20ff      	movs	r0, #255	; 0xff
 800754a:	f006 fdb9 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 800754e:	4b3f      	ldr	r3, [pc, #252]	; (800764c <v_L45D+0x168>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	3301      	adds	r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	bfb8      	it	lt
 800755c:	425b      	neglt	r3, r3
 800755e:	b2da      	uxtb	r2, r3
 8007560:	4b3a      	ldr	r3, [pc, #232]	; (800764c <v_L45D+0x168>)
 8007562:	701a      	strb	r2, [r3, #0]

		if(!v_flag){
 8007564:	4b39      	ldr	r3, [pc, #228]	; (800764c <v_L45D+0x168>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d107      	bne.n	800757c <v_L45D+0x98>
			slalomB(10000, SPEED_LOW, V_OFFSET_F+5);
 800756c:	222d      	movs	r2, #45	; 0x2d
 800756e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007572:	f242 7010 	movw	r0, #10000	; 0x2710
 8007576:	f7fe f909 	bl	800578c <slalomB>
 800757a:	e006      	b.n	800758a <v_L45D+0xa6>
		}else{
			slalomB(10000, SPEED_LOW, V_OFFSET_B-5);
 800757c:	224b      	movs	r2, #75	; 0x4b
 800757e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007582:	f242 7010 	movw	r0, #10000	; 0x2710
 8007586:	f7fe f901 	bl	800578c <slalomB>
		}
		driveD(-10000, SPEED_MIN, SPEED_LOW, 10);
 800758a:	230a      	movs	r3, #10
 800758c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007590:	2132      	movs	r1, #50	; 0x32
 8007592:	482f      	ldr	r0, [pc, #188]	; (8007650 <v_L45D+0x16c>)
 8007594:	f7fd fd86 	bl	80050a4 <driveD>
		}else{
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B+10);
		}
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
	}
}
 8007598:	e053      	b.n	8007642 <v_L45D+0x15e>
	}else if(run_mode == HIGH){
 800759a:	4b2b      	ldr	r3, [pc, #172]	; (8007648 <v_L45D+0x164>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d14e      	bne.n	8007642 <v_L45D+0x15e>
		if(!v_flag){
 80075a4:	4b29      	ldr	r3, [pc, #164]	; (800764c <v_L45D+0x168>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10c      	bne.n	80075c6 <v_L45D+0xe2>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_F, NO_WALL, NO_WALL);
 80075ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80075b6:	2217      	movs	r2, #23
 80075b8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80075bc:	f242 7010 	movw	r0, #10000	; 0x2710
 80075c0:	f7fd ff44 	bl	800544c <slalomF>
 80075c4:	e00b      	b.n	80075de <v_L45D+0xfa>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_B-12, NO_WALL, NO_WALL);
 80075c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80075d0:	2244      	movs	r2, #68	; 0x44
 80075d2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80075d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80075da:	f7fd ff37 	bl	800544c <slalomF>
		slalomR(V_H_DEGACCEL, V_H_OMEGA, 45, SPEED_HIGH);
 80075de:	f44f 7348 	mov.w	r3, #800	; 0x320
 80075e2:	222d      	movs	r2, #45	; 0x2d
 80075e4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80075e8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80075ec:	f7fd ffaa 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80075f0:	2103      	movs	r1, #3
 80075f2:	20ff      	movs	r0, #255	; 0xff
 80075f4:	f006 fd64 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 80075f8:	4b14      	ldr	r3, [pc, #80]	; (800764c <v_L45D+0x168>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	3301      	adds	r3, #1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	bfb8      	it	lt
 8007606:	425b      	neglt	r3, r3
 8007608:	b2da      	uxtb	r2, r3
 800760a:	4b10      	ldr	r3, [pc, #64]	; (800764c <v_L45D+0x168>)
 800760c:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 800760e:	4b0f      	ldr	r3, [pc, #60]	; (800764c <v_L45D+0x168>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d107      	bne.n	8007626 <v_L45D+0x142>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_F+25);
 8007616:	2230      	movs	r2, #48	; 0x30
 8007618:	f44f 7148 	mov.w	r1, #800	; 0x320
 800761c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007620:	f7fe f8b4 	bl	800578c <slalomB>
 8007624:	e006      	b.n	8007634 <v_L45D+0x150>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B+10);
 8007626:	225a      	movs	r2, #90	; 0x5a
 8007628:	f44f 7148 	mov.w	r1, #800	; 0x320
 800762c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007630:	f7fe f8ac 	bl	800578c <slalomB>
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
 8007634:	230a      	movs	r3, #10
 8007636:	f44f 7248 	mov.w	r2, #800	; 0x320
 800763a:	2132      	movs	r1, #50	; 0x32
 800763c:	4804      	ldr	r0, [pc, #16]	; (8007650 <v_L45D+0x16c>)
 800763e:	f7fd fd31 	bl	80050a4 <driveD>
}
 8007642:	bf00      	nop
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	20000456 	.word	0x20000456
 800764c:	20000af0 	.word	0x20000af0
 8007650:	ffffd8f0 	.word	0xffffd8f0

08007654 <v_R90>:
//v_R90
// 柱中心から右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R90(void){
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 800765a:	2006      	movs	r0, #6
 800765c:	f008 fb00 	bl	800fc60 <full_led_write>
	if(run_mode == LOW){
 8007660:	4b4a      	ldr	r3, [pc, #296]	; (800778c <v_R90+0x138>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b01      	cmp	r3, #1
 8007668:	d11f      	bne.n	80076aa <v_R90+0x56>
		slalomF(10000, SPEED_LOW, VV_OFFSET_F, NO_WALL, NO_WALL);
 800766a:	f241 3388 	movw	r3, #5000	; 0x1388
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	f241 3388 	movw	r3, #5000	; 0x1388
 8007674:	2232      	movs	r2, #50	; 0x32
 8007676:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800767a:	f242 7010 	movw	r0, #10000	; 0x2710
 800767e:	f7fd fee5 	bl	800544c <slalomF>
		slalomR(-VV_DEGACCEL, -VV_OMEGA, -90, SPEED_LOW);
 8007682:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007686:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800768a:	4941      	ldr	r1, [pc, #260]	; (8007790 <v_R90+0x13c>)
 800768c:	4841      	ldr	r0, [pc, #260]	; (8007794 <v_R90+0x140>)
 800768e:	f7fd ff59 	bl	8005544 <slalomR>

		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007692:	2103      	movs	r1, #3
 8007694:	2002      	movs	r0, #2
 8007696:	f006 fd13 	bl	800e0c0 <turn_dir>

		slalomB(10000, SPEED_LOW, VV_OFFSET_B);
 800769a:	2232      	movs	r2, #50	; 0x32
 800769c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80076a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80076a4:	f7fe f872 	bl	800578c <slalomB>

		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_HIGH_HIGH, VV_H_H_OFFSET_B);
	}
}
 80076a8:	e06d      	b.n	8007786 <v_R90+0x132>
	}else if(run_mode == MIDDLE){
 80076aa:	4b38      	ldr	r3, [pc, #224]	; (800778c <v_R90+0x138>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d11f      	bne.n	80076f4 <v_R90+0xa0>
		slalomF(10000, SPEED_MIDDLE, VV_M_OFFSET_F, NO_WALL, NO_WALL);
 80076b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80076be:	223a      	movs	r2, #58	; 0x3a
 80076c0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80076c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80076c8:	f7fd fec0 	bl	800544c <slalomF>
		slalomR(-VV_M_DEGACCEL, -VV_M_OMEGA, -90, SPEED_HIGH);
 80076cc:	f44f 7348 	mov.w	r3, #800	; 0x320
 80076d0:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80076d4:	4930      	ldr	r1, [pc, #192]	; (8007798 <v_R90+0x144>)
 80076d6:	4831      	ldr	r0, [pc, #196]	; (800779c <v_R90+0x148>)
 80076d8:	f7fd ff34 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 80076dc:	2103      	movs	r1, #3
 80076de:	2002      	movs	r0, #2
 80076e0:	f006 fcee 	bl	800e0c0 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, VV_M_OFFSET_B);
 80076e4:	223a      	movs	r2, #58	; 0x3a
 80076e6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80076ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80076ee:	f7fe f84d 	bl	800578c <slalomB>
}
 80076f2:	e048      	b.n	8007786 <v_R90+0x132>
	}else if(run_mode == HIGH){
 80076f4:	4b25      	ldr	r3, [pc, #148]	; (800778c <v_R90+0x138>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d11f      	bne.n	800773e <v_R90+0xea>
		slalomF(10000, SPEED_HIGH, VV_H_OFFSET_F, NO_WALL, NO_WALL);
 80076fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	f241 3388 	movw	r3, #5000	; 0x1388
 8007708:	2223      	movs	r2, #35	; 0x23
 800770a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800770e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007712:	f7fd fe9b 	bl	800544c <slalomF>
		slalomR(-VV_H_DEGACCEL, -VV_H_OMEGA, -90, SPEED_HIGH);
 8007716:	f44f 7348 	mov.w	r3, #800	; 0x320
 800771a:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800771e:	491e      	ldr	r1, [pc, #120]	; (8007798 <v_R90+0x144>)
 8007720:	481e      	ldr	r0, [pc, #120]	; (800779c <v_R90+0x148>)
 8007722:	f7fd ff0f 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 8007726:	2103      	movs	r1, #3
 8007728:	2002      	movs	r0, #2
 800772a:	f006 fcc9 	bl	800e0c0 <turn_dir>
		slalomB(10000, SPEED_HIGH, VV_H_OFFSET_B);
 800772e:	2241      	movs	r2, #65	; 0x41
 8007730:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007734:	f242 7010 	movw	r0, #10000	; 0x2710
 8007738:	f7fe f828 	bl	800578c <slalomB>
}
 800773c:	e023      	b.n	8007786 <v_R90+0x132>
	}else if(run_mode == HIGH_HIGH){
 800773e:	4b13      	ldr	r3, [pc, #76]	; (800778c <v_R90+0x138>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b04      	cmp	r3, #4
 8007746:	d11e      	bne.n	8007786 <v_R90+0x132>
		slalomF(10000, SPEED_HIGH_HIGH, VV_H_H_OFFSET_F, NO_WALL, NO_WALL);
 8007748:	f241 3388 	movw	r3, #5000	; 0x1388
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007752:	2223      	movs	r2, #35	; 0x23
 8007754:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007758:	f242 7010 	movw	r0, #10000	; 0x2710
 800775c:	f7fd fe76 	bl	800544c <slalomF>
		slalomR(-VV_H_H_DEGACCEL, -VV_H_H_OMEGA, -90, SPEED_HIGH_HIGH);
 8007760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007764:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8007768:	490b      	ldr	r1, [pc, #44]	; (8007798 <v_R90+0x144>)
 800776a:	480c      	ldr	r0, [pc, #48]	; (800779c <v_R90+0x148>)
 800776c:	f7fd feea 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 8007770:	2103      	movs	r1, #3
 8007772:	2002      	movs	r0, #2
 8007774:	f006 fca4 	bl	800e0c0 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, VV_H_H_OFFSET_B);
 8007778:	2241      	movs	r2, #65	; 0x41
 800777a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800777e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007782:	f7fe f803 	bl	800578c <slalomB>
}
 8007786:	bf00      	nop
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	20000456 	.word	0x20000456
 8007790:	fffffea2 	.word	0xfffffea2
 8007794:	fffff254 	.word	0xfffff254
 8007798:	fffffce0 	.word	0xfffffce0
 800779c:	ffffd8f0 	.word	0xffffd8f0

080077a0 <v_L90>:
//v_L90
// 柱中心から左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L90(void){
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 80077a6:	2005      	movs	r0, #5
 80077a8:	f008 fa5a 	bl	800fc60 <full_led_write>
	if(run_mode == LOW){
 80077ac:	4b4c      	ldr	r3, [pc, #304]	; (80078e0 <v_L90+0x140>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d120      	bne.n	80077f8 <v_L90+0x58>
		slalomF(10000, SPEED_LOW, VV_OFFSET_F, NO_WALL, NO_WALL);
 80077b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80077c0:	2232      	movs	r2, #50	; 0x32
 80077c2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80077c6:	f242 7010 	movw	r0, #10000	; 0x2710
 80077ca:	f7fd fe3f 	bl	800544c <slalomF>
		slalomR(VV_DEGACCEL, VV_OMEGA, 90, SPEED_LOW);
 80077ce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80077d2:	225a      	movs	r2, #90	; 0x5a
 80077d4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80077d8:	f640 50ac 	movw	r0, #3500	; 0xdac
 80077dc:	f7fd feb2 	bl	8005544 <slalomR>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80077e0:	2103      	movs	r1, #3
 80077e2:	20fe      	movs	r0, #254	; 0xfe
 80077e4:	f006 fc6c 	bl	800e0c0 <turn_dir>

		slalomB(10000, SPEED_LOW, VV_OFFSET_B);
 80077e8:	2232      	movs	r2, #50	; 0x32
 80077ea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80077ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80077f2:	f7fd ffcb 	bl	800578c <slalomB>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_HIGH_HIGH, VV_H_H_OFFSET_B);
	}
}
 80077f6:	e070      	b.n	80078da <v_L90+0x13a>
	}else if(run_mode == MIDDLE){
 80077f8:	4b39      	ldr	r3, [pc, #228]	; (80078e0 <v_L90+0x140>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d120      	bne.n	8007844 <v_L90+0xa4>
		slalomF(10000, SPEED_MIDDLE, VV_M_OFFSET_F, NO_WALL, NO_WALL);
 8007802:	f241 3388 	movw	r3, #5000	; 0x1388
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	f241 3388 	movw	r3, #5000	; 0x1388
 800780c:	223a      	movs	r2, #58	; 0x3a
 800780e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007812:	f242 7010 	movw	r0, #10000	; 0x2710
 8007816:	f7fd fe19 	bl	800544c <slalomF>
		slalomR(VV_M_DEGACCEL, VV_M_OMEGA, 90, SPEED_MIDDLE);
 800781a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800781e:	225a      	movs	r2, #90	; 0x5a
 8007820:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007824:	f242 7010 	movw	r0, #10000	; 0x2710
 8007828:	f7fd fe8c 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800782c:	2103      	movs	r1, #3
 800782e:	20fe      	movs	r0, #254	; 0xfe
 8007830:	f006 fc46 	bl	800e0c0 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, VV_M_OFFSET_B);
 8007834:	223a      	movs	r2, #58	; 0x3a
 8007836:	f44f 7116 	mov.w	r1, #600	; 0x258
 800783a:	f242 7010 	movw	r0, #10000	; 0x2710
 800783e:	f7fd ffa5 	bl	800578c <slalomB>
}
 8007842:	e04a      	b.n	80078da <v_L90+0x13a>
	}else if(run_mode == HIGH){
 8007844:	4b26      	ldr	r3, [pc, #152]	; (80078e0 <v_L90+0x140>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b03      	cmp	r3, #3
 800784c:	d120      	bne.n	8007890 <v_L90+0xf0>
		slalomF(10000, SPEED_HIGH, VV_H_OFFSET_F, NO_WALL, NO_WALL);
 800784e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	f241 3388 	movw	r3, #5000	; 0x1388
 8007858:	2223      	movs	r2, #35	; 0x23
 800785a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800785e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007862:	f7fd fdf3 	bl	800544c <slalomF>
		slalomR(VV_H_DEGACCEL, VV_H_OMEGA, 90, SPEED_HIGH);
 8007866:	f44f 7348 	mov.w	r3, #800	; 0x320
 800786a:	225a      	movs	r2, #90	; 0x5a
 800786c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007870:	f242 7010 	movw	r0, #10000	; 0x2710
 8007874:	f7fd fe66 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007878:	2103      	movs	r1, #3
 800787a:	20fe      	movs	r0, #254	; 0xfe
 800787c:	f006 fc20 	bl	800e0c0 <turn_dir>
		slalomB(10000, SPEED_HIGH, VV_H_OFFSET_B);
 8007880:	2241      	movs	r2, #65	; 0x41
 8007882:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007886:	f242 7010 	movw	r0, #10000	; 0x2710
 800788a:	f7fd ff7f 	bl	800578c <slalomB>
}
 800788e:	e024      	b.n	80078da <v_L90+0x13a>
	}else if(run_mode == HIGH_HIGH){
 8007890:	4b13      	ldr	r3, [pc, #76]	; (80078e0 <v_L90+0x140>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b04      	cmp	r3, #4
 8007898:	d11f      	bne.n	80078da <v_L90+0x13a>
		slalomF(10000, SPEED_HIGH_HIGH, VV_H_H_OFFSET_F, NO_WALL, NO_WALL);
 800789a:	f241 3388 	movw	r3, #5000	; 0x1388
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80078a4:	2223      	movs	r2, #35	; 0x23
 80078a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80078aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80078ae:	f7fd fdcd 	bl	800544c <slalomF>
		slalomR(VV_H_H_DEGACCEL, VV_H_H_OMEGA, 90, SPEED_HIGH_HIGH);
 80078b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078b6:	225a      	movs	r2, #90	; 0x5a
 80078b8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80078bc:	f242 7010 	movw	r0, #10000	; 0x2710
 80078c0:	f7fd fe40 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80078c4:	2103      	movs	r1, #3
 80078c6:	20fe      	movs	r0, #254	; 0xfe
 80078c8:	f006 fbfa 	bl	800e0c0 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, VV_H_H_OFFSET_B);
 80078cc:	2241      	movs	r2, #65	; 0x41
 80078ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80078d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80078d6:	f7fd ff59 	bl	800578c <slalomB>
}
 80078da:	bf00      	nop
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	20000456 	.word	0x20000456

080078e4 <v_R135>:
//v_R135
// 区画中心から右に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135(void){
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80078ea:	2006      	movs	r0, #6
 80078ec:	f008 f9b8 	bl	800fc60 <full_led_write>
	if(run_mode == LOW){
 80078f0:	4b9a      	ldr	r3, [pc, #616]	; (8007b5c <v_R135+0x278>)
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d147      	bne.n	800798a <v_R135+0xa6>
		if(!v_flag){
 80078fa:	4b99      	ldr	r3, [pc, #612]	; (8007b60 <v_R135+0x27c>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10c      	bne.n	800791c <v_R135+0x38>
			slalomF(10000, SPEED_LOW, VVV_OFFSET_F, NO_WALL, NO_WALL);
 8007902:	f241 3388 	movw	r3, #5000	; 0x1388
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	f241 3388 	movw	r3, #5000	; 0x1388
 800790c:	2246      	movs	r2, #70	; 0x46
 800790e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007912:	f242 7010 	movw	r0, #10000	; 0x2710
 8007916:	f7fd fd99 	bl	800544c <slalomF>
 800791a:	e00b      	b.n	8007934 <v_R135+0x50>
		}else{
			slalomF(10000, SPEED_LOW, VVV_OFFSET_B, NO_WALL, NO_WALL);
 800791c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	f241 3388 	movw	r3, #5000	; 0x1388
 8007926:	223a      	movs	r2, #58	; 0x3a
 8007928:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800792c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007930:	f7fd fd8c 	bl	800544c <slalomF>
		}
		slalomR(-VVV_DEGACCEL, -VVV_OMEGA, -135, SPEED_LOW);
 8007934:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007938:	f06f 0286 	mvn.w	r2, #134	; 0x86
 800793c:	4989      	ldr	r1, [pc, #548]	; (8007b64 <v_R135+0x280>)
 800793e:	488a      	ldr	r0, [pc, #552]	; (8007b68 <v_R135+0x284>)
 8007940:	f7fd fe00 	bl	8005544 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007944:	2103      	movs	r1, #3
 8007946:	2003      	movs	r0, #3
 8007948:	f006 fbba 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 800794c:	4b84      	ldr	r3, [pc, #528]	; (8007b60 <v_R135+0x27c>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	3301      	adds	r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	bfb8      	it	lt
 800795a:	425b      	neglt	r3, r3
 800795c:	b2da      	uxtb	r2, r3
 800795e:	4b80      	ldr	r3, [pc, #512]	; (8007b60 <v_R135+0x27c>)
 8007960:	701a      	strb	r2, [r3, #0]

		if(!v_flag){
 8007962:	4b7f      	ldr	r3, [pc, #508]	; (8007b60 <v_R135+0x27c>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d107      	bne.n	800797a <v_R135+0x96>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_F);
 800796a:	2246      	movs	r2, #70	; 0x46
 800796c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007970:	f242 7010 	movw	r0, #10000	; 0x2710
 8007974:	f7fd ff0a 	bl	800578c <slalomB>
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
		}else{
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
		}
	}
}
 8007978:	e0ed      	b.n	8007b56 <v_R135+0x272>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_B);
 800797a:	223a      	movs	r2, #58	; 0x3a
 800797c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007980:	f242 7010 	movw	r0, #10000	; 0x2710
 8007984:	f7fd ff02 	bl	800578c <slalomB>
}
 8007988:	e0e5      	b.n	8007b56 <v_R135+0x272>
	}else if(run_mode == MIDDLE){
 800798a:	4b74      	ldr	r3, [pc, #464]	; (8007b5c <v_R135+0x278>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b02      	cmp	r3, #2
 8007992:	d147      	bne.n	8007a24 <v_R135+0x140>
		if(!v_flag){
 8007994:	4b72      	ldr	r3, [pc, #456]	; (8007b60 <v_R135+0x27c>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10c      	bne.n	80079b6 <v_R135+0xd2>
			slalomF(10000, SPEED_MIDDLE, VVV_M_OFFSET_F, NO_WALL, NO_WALL);
 800799c:	f241 3388 	movw	r3, #5000	; 0x1388
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80079a6:	2246      	movs	r2, #70	; 0x46
 80079a8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80079ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80079b0:	f7fd fd4c 	bl	800544c <slalomF>
 80079b4:	e00b      	b.n	80079ce <v_R135+0xea>
			slalomF(10000, SPEED_MIDDLE, VVV_M_OFFSET_B, NO_WALL, NO_WALL);
 80079b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80079c0:	2236      	movs	r2, #54	; 0x36
 80079c2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80079c6:	f242 7010 	movw	r0, #10000	; 0x2710
 80079ca:	f7fd fd3f 	bl	800544c <slalomF>
		slalomR(-VVV_M_DEGACCEL, -VVV_M_OMEGA, -135, SPEED_MIDDLE);
 80079ce:	f44f 7316 	mov.w	r3, #600	; 0x258
 80079d2:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80079d6:	4965      	ldr	r1, [pc, #404]	; (8007b6c <v_R135+0x288>)
 80079d8:	4865      	ldr	r0, [pc, #404]	; (8007b70 <v_R135+0x28c>)
 80079da:	f7fd fdb3 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80079de:	2103      	movs	r1, #3
 80079e0:	2003      	movs	r0, #3
 80079e2:	f006 fb6d 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 80079e6:	4b5e      	ldr	r3, [pc, #376]	; (8007b60 <v_R135+0x27c>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	3301      	adds	r3, #1
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	bfb8      	it	lt
 80079f4:	425b      	neglt	r3, r3
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	4b59      	ldr	r3, [pc, #356]	; (8007b60 <v_R135+0x27c>)
 80079fa:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 80079fc:	4b58      	ldr	r3, [pc, #352]	; (8007b60 <v_R135+0x27c>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d107      	bne.n	8007a14 <v_R135+0x130>
			slalomB(10000, SPEED_MIDDLE, VVV_M_OFFSET_F);
 8007a04:	2246      	movs	r2, #70	; 0x46
 8007a06:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007a0a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a0e:	f7fd febd 	bl	800578c <slalomB>
}
 8007a12:	e0a0      	b.n	8007b56 <v_R135+0x272>
			slalomB(10000, SPEED_MIDDLE, VVV_M_OFFSET_F);
 8007a14:	2246      	movs	r2, #70	; 0x46
 8007a16:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007a1a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a1e:	f7fd feb5 	bl	800578c <slalomB>
}
 8007a22:	e098      	b.n	8007b56 <v_R135+0x272>
	}else if(run_mode == HIGH){
 8007a24:	4b4d      	ldr	r3, [pc, #308]	; (8007b5c <v_R135+0x278>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d147      	bne.n	8007abe <v_R135+0x1da>
		if(!v_flag){
 8007a2e:	4b4c      	ldr	r3, [pc, #304]	; (8007b60 <v_R135+0x27c>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10c      	bne.n	8007a50 <v_R135+0x16c>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_F, NO_WALL, NO_WALL);
 8007a36:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a40:	2278      	movs	r2, #120	; 0x78
 8007a42:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007a46:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a4a:	f7fd fcff 	bl	800544c <slalomF>
 8007a4e:	e00b      	b.n	8007a68 <v_R135+0x184>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_B, NO_WALL, NO_WALL);
 8007a50:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a5a:	2246      	movs	r2, #70	; 0x46
 8007a5c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007a60:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a64:	f7fd fcf2 	bl	800544c <slalomF>
		slalomR(-VVV_H_DEGACCEL, -VVV_H_OMEGA, -135, SPEED_HIGH);
 8007a68:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007a6c:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8007a70:	4940      	ldr	r1, [pc, #256]	; (8007b74 <v_R135+0x290>)
 8007a72:	4841      	ldr	r0, [pc, #260]	; (8007b78 <v_R135+0x294>)
 8007a74:	f7fd fd66 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007a78:	2103      	movs	r1, #3
 8007a7a:	2003      	movs	r0, #3
 8007a7c:	f006 fb20 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 8007a80:	4b37      	ldr	r3, [pc, #220]	; (8007b60 <v_R135+0x27c>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	3301      	adds	r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	bfb8      	it	lt
 8007a8e:	425b      	neglt	r3, r3
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	4b33      	ldr	r3, [pc, #204]	; (8007b60 <v_R135+0x27c>)
 8007a94:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 8007a96:	4b32      	ldr	r3, [pc, #200]	; (8007b60 <v_R135+0x27c>)
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d107      	bne.n	8007aae <v_R135+0x1ca>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F);
 8007a9e:	2278      	movs	r2, #120	; 0x78
 8007aa0:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007aa4:	f242 7010 	movw	r0, #10000	; 0x2710
 8007aa8:	f7fd fe70 	bl	800578c <slalomB>
}
 8007aac:	e053      	b.n	8007b56 <v_R135+0x272>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F);
 8007aae:	2278      	movs	r2, #120	; 0x78
 8007ab0:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007ab4:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ab8:	f7fd fe68 	bl	800578c <slalomB>
}
 8007abc:	e04b      	b.n	8007b56 <v_R135+0x272>
	}else if(run_mode == HIGH_HIGH){
 8007abe:	4b27      	ldr	r3, [pc, #156]	; (8007b5c <v_R135+0x278>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b04      	cmp	r3, #4
 8007ac6:	d146      	bne.n	8007b56 <v_R135+0x272>
		if(!v_flag){
 8007ac8:	4b25      	ldr	r3, [pc, #148]	; (8007b60 <v_R135+0x27c>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10c      	bne.n	8007aea <v_R135+0x206>
			slalomF(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F, NO_WALL, NO_WALL);
 8007ad0:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ada:	2278      	movs	r2, #120	; 0x78
 8007adc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007ae0:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ae4:	f7fd fcb2 	bl	800544c <slalomF>
 8007ae8:	e00b      	b.n	8007b02 <v_R135+0x21e>
			slalomF(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_B, NO_WALL, NO_WALL);
 8007aea:	f241 3388 	movw	r3, #5000	; 0x1388
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	f241 3388 	movw	r3, #5000	; 0x1388
 8007af4:	2246      	movs	r2, #70	; 0x46
 8007af6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007afa:	f242 7010 	movw	r0, #10000	; 0x2710
 8007afe:	f7fd fca5 	bl	800544c <slalomF>
		slalomR(-VVV_H_H_DEGACCEL, -VVV_H_H_OMEGA, -135, SPEED_HIGH_HIGH);
 8007b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b06:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8007b0a:	491a      	ldr	r1, [pc, #104]	; (8007b74 <v_R135+0x290>)
 8007b0c:	481a      	ldr	r0, [pc, #104]	; (8007b78 <v_R135+0x294>)
 8007b0e:	f7fd fd19 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007b12:	2103      	movs	r1, #3
 8007b14:	2003      	movs	r0, #3
 8007b16:	f006 fad3 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 8007b1a:	4b11      	ldr	r3, [pc, #68]	; (8007b60 <v_R135+0x27c>)
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	bfb8      	it	lt
 8007b28:	425b      	neglt	r3, r3
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	4b0c      	ldr	r3, [pc, #48]	; (8007b60 <v_R135+0x27c>)
 8007b2e:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 8007b30:	4b0b      	ldr	r3, [pc, #44]	; (8007b60 <v_R135+0x27c>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d107      	bne.n	8007b48 <v_R135+0x264>
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
 8007b38:	2278      	movs	r2, #120	; 0x78
 8007b3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007b3e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b42:	f7fd fe23 	bl	800578c <slalomB>
}
 8007b46:	e006      	b.n	8007b56 <v_R135+0x272>
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
 8007b48:	2278      	movs	r2, #120	; 0x78
 8007b4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007b4e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b52:	f7fd fe1b 	bl	800578c <slalomB>
}
 8007b56:	bf00      	nop
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	20000456 	.word	0x20000456
 8007b60:	20000af0 	.word	0x20000af0
 8007b64:	fffffed4 	.word	0xfffffed4
 8007b68:	fffff448 	.word	0xfffff448
 8007b6c:	fffffe0c 	.word	0xfffffe0c
 8007b70:	ffffec78 	.word	0xffffec78
 8007b74:	fffffce0 	.word	0xfffffce0
 8007b78:	ffffe0c0 	.word	0xffffe0c0

08007b7c <v_L135>:
//v_L135
// 区画中心から左に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135(void){
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8007b82:	2005      	movs	r0, #5
 8007b84:	f008 f86c 	bl	800fc60 <full_led_write>
	if(run_mode == LOW){
 8007b88:	4b9c      	ldr	r3, [pc, #624]	; (8007dfc <v_L135+0x280>)
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d148      	bne.n	8007c24 <v_L135+0xa8>
		if(!v_flag){
 8007b92:	4b9b      	ldr	r3, [pc, #620]	; (8007e00 <v_L135+0x284>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10c      	bne.n	8007bb4 <v_L135+0x38>
			slalomF(10000, SPEED_LOW, VVV_OFFSET_F, NO_WALL, NO_WALL);
 8007b9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ba4:	2246      	movs	r2, #70	; 0x46
 8007ba6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007baa:	f242 7010 	movw	r0, #10000	; 0x2710
 8007bae:	f7fd fc4d 	bl	800544c <slalomF>
 8007bb2:	e00b      	b.n	8007bcc <v_L135+0x50>
		}else{
			slalomF(10000, SPEED_LOW, VVV_OFFSET_B, NO_WALL, NO_WALL);
 8007bb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bbe:	223a      	movs	r2, #58	; 0x3a
 8007bc0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007bc4:	f242 7010 	movw	r0, #10000	; 0x2710
 8007bc8:	f7fd fc40 	bl	800544c <slalomF>
		}
		slalomR(VVV_DEGACCEL, VVV_OMEGA, 135, SPEED_LOW);
 8007bcc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007bd0:	2287      	movs	r2, #135	; 0x87
 8007bd2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007bd6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007bda:	f7fd fcb3 	bl	8005544 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007bde:	2103      	movs	r1, #3
 8007be0:	20fd      	movs	r0, #253	; 0xfd
 8007be2:	f006 fa6d 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 8007be6:	4b86      	ldr	r3, [pc, #536]	; (8007e00 <v_L135+0x284>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	3301      	adds	r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	bfb8      	it	lt
 8007bf4:	425b      	neglt	r3, r3
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	4b81      	ldr	r3, [pc, #516]	; (8007e00 <v_L135+0x284>)
 8007bfa:	701a      	strb	r2, [r3, #0]

		if(!v_flag){
 8007bfc:	4b80      	ldr	r3, [pc, #512]	; (8007e00 <v_L135+0x284>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d107      	bne.n	8007c14 <v_L135+0x98>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_F);
 8007c04:	2246      	movs	r2, #70	; 0x46
 8007c06:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007c0a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c0e:	f7fd fdbd 	bl	800578c <slalomB>
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
		}else{
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
		}
	}
}
 8007c12:	e0f0      	b.n	8007df6 <v_L135+0x27a>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_B);
 8007c14:	223a      	movs	r2, #58	; 0x3a
 8007c16:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007c1a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c1e:	f7fd fdb5 	bl	800578c <slalomB>
}
 8007c22:	e0e8      	b.n	8007df6 <v_L135+0x27a>
	}else if(run_mode == MIDDLE){
 8007c24:	4b75      	ldr	r3, [pc, #468]	; (8007dfc <v_L135+0x280>)
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d148      	bne.n	8007cc0 <v_L135+0x144>
		if(!v_flag){
 8007c2e:	4b74      	ldr	r3, [pc, #464]	; (8007e00 <v_L135+0x284>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10c      	bne.n	8007c50 <v_L135+0xd4>
			slalomF(10000, SPEED_MIDDLE, VVV_M_OFFSET_F, NO_WALL, NO_WALL);
 8007c36:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c40:	2246      	movs	r2, #70	; 0x46
 8007c42:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007c46:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c4a:	f7fd fbff 	bl	800544c <slalomF>
 8007c4e:	e00b      	b.n	8007c68 <v_L135+0xec>
			slalomF(10000, SPEED_MIDDLE, VVV_M_OFFSET_B, NO_WALL, NO_WALL);
 8007c50:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c5a:	2236      	movs	r2, #54	; 0x36
 8007c5c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007c60:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c64:	f7fd fbf2 	bl	800544c <slalomF>
		slalomR(VVV_M_DEGACCEL, VVV_M_OMEGA, 135, SPEED_MIDDLE);
 8007c68:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007c6c:	2287      	movs	r2, #135	; 0x87
 8007c6e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007c72:	f241 3088 	movw	r0, #5000	; 0x1388
 8007c76:	f7fd fc65 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007c7a:	2103      	movs	r1, #3
 8007c7c:	20fd      	movs	r0, #253	; 0xfd
 8007c7e:	f006 fa1f 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 8007c82:	4b5f      	ldr	r3, [pc, #380]	; (8007e00 <v_L135+0x284>)
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	3301      	adds	r3, #1
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	bfb8      	it	lt
 8007c90:	425b      	neglt	r3, r3
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	4b5a      	ldr	r3, [pc, #360]	; (8007e00 <v_L135+0x284>)
 8007c96:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 8007c98:	4b59      	ldr	r3, [pc, #356]	; (8007e00 <v_L135+0x284>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d107      	bne.n	8007cb0 <v_L135+0x134>
			slalomB(10000, SPEED_MIDDLE, VVV_M_OFFSET_F);
 8007ca0:	2246      	movs	r2, #70	; 0x46
 8007ca2:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007ca6:	f242 7010 	movw	r0, #10000	; 0x2710
 8007caa:	f7fd fd6f 	bl	800578c <slalomB>
}
 8007cae:	e0a2      	b.n	8007df6 <v_L135+0x27a>
			slalomB(10000, SPEED_MIDDLE, VVV_M_OFFSET_F);
 8007cb0:	2246      	movs	r2, #70	; 0x46
 8007cb2:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007cb6:	f242 7010 	movw	r0, #10000	; 0x2710
 8007cba:	f7fd fd67 	bl	800578c <slalomB>
}
 8007cbe:	e09a      	b.n	8007df6 <v_L135+0x27a>
	}else if(run_mode == HIGH){
 8007cc0:	4b4e      	ldr	r3, [pc, #312]	; (8007dfc <v_L135+0x280>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d148      	bne.n	8007d5c <v_L135+0x1e0>
		if(!v_flag){
 8007cca:	4b4d      	ldr	r3, [pc, #308]	; (8007e00 <v_L135+0x284>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10c      	bne.n	8007cec <v_L135+0x170>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_F, NO_WALL, NO_WALL);
 8007cd2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cdc:	2278      	movs	r2, #120	; 0x78
 8007cde:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007ce2:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ce6:	f7fd fbb1 	bl	800544c <slalomF>
 8007cea:	e00b      	b.n	8007d04 <v_L135+0x188>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_B, NO_WALL, NO_WALL);
 8007cec:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cf6:	2246      	movs	r2, #70	; 0x46
 8007cf8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007cfc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d00:	f7fd fba4 	bl	800544c <slalomF>
		slalomR(VVV_H_DEGACCEL, VVV_H_OMEGA, 135, SPEED_HIGH);
 8007d04:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007d08:	2287      	movs	r2, #135	; 0x87
 8007d0a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007d0e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007d12:	f7fd fc17 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007d16:	2103      	movs	r1, #3
 8007d18:	20fd      	movs	r0, #253	; 0xfd
 8007d1a:	f006 f9d1 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 8007d1e:	4b38      	ldr	r3, [pc, #224]	; (8007e00 <v_L135+0x284>)
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	3301      	adds	r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	bfb8      	it	lt
 8007d2c:	425b      	neglt	r3, r3
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	4b33      	ldr	r3, [pc, #204]	; (8007e00 <v_L135+0x284>)
 8007d32:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 8007d34:	4b32      	ldr	r3, [pc, #200]	; (8007e00 <v_L135+0x284>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d107      	bne.n	8007d4c <v_L135+0x1d0>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F);
 8007d3c:	2278      	movs	r2, #120	; 0x78
 8007d3e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007d42:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d46:	f7fd fd21 	bl	800578c <slalomB>
}
 8007d4a:	e054      	b.n	8007df6 <v_L135+0x27a>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F);
 8007d4c:	2278      	movs	r2, #120	; 0x78
 8007d4e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007d52:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d56:	f7fd fd19 	bl	800578c <slalomB>
}
 8007d5a:	e04c      	b.n	8007df6 <v_L135+0x27a>
	}else if(run_mode == HIGH_HIGH){
 8007d5c:	4b27      	ldr	r3, [pc, #156]	; (8007dfc <v_L135+0x280>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	d147      	bne.n	8007df6 <v_L135+0x27a>
		if(!v_flag){
 8007d66:	4b26      	ldr	r3, [pc, #152]	; (8007e00 <v_L135+0x284>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10c      	bne.n	8007d88 <v_L135+0x20c>
			slalomF(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F, NO_WALL, NO_WALL);
 8007d6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d78:	2278      	movs	r2, #120	; 0x78
 8007d7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d82:	f7fd fb63 	bl	800544c <slalomF>
 8007d86:	e00b      	b.n	8007da0 <v_L135+0x224>
			slalomF(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_B, NO_WALL, NO_WALL);
 8007d88:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d92:	2246      	movs	r2, #70	; 0x46
 8007d94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d98:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d9c:	f7fd fb56 	bl	800544c <slalomF>
		slalomR(VVV_H_H_DEGACCEL, VVV_H_H_OMEGA, 135, SPEED_HIGH_HIGH);
 8007da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007da4:	2287      	movs	r2, #135	; 0x87
 8007da6:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007daa:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007dae:	f7fd fbc9 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007db2:	2103      	movs	r1, #3
 8007db4:	20fd      	movs	r0, #253	; 0xfd
 8007db6:	f006 f983 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 8007dba:	4b11      	ldr	r3, [pc, #68]	; (8007e00 <v_L135+0x284>)
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	bfb8      	it	lt
 8007dc8:	425b      	neglt	r3, r3
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	4b0c      	ldr	r3, [pc, #48]	; (8007e00 <v_L135+0x284>)
 8007dce:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 8007dd0:	4b0b      	ldr	r3, [pc, #44]	; (8007e00 <v_L135+0x284>)
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d107      	bne.n	8007de8 <v_L135+0x26c>
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
 8007dd8:	2278      	movs	r2, #120	; 0x78
 8007dda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007dde:	f242 7010 	movw	r0, #10000	; 0x2710
 8007de2:	f7fd fcd3 	bl	800578c <slalomB>
}
 8007de6:	e006      	b.n	8007df6 <v_L135+0x27a>
			slalomB(10000, SPEED_HIGH_HIGH, VVV_H_H_OFFSET_F);
 8007de8:	2278      	movs	r2, #120	; 0x78
 8007dea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007dee:	f242 7010 	movw	r0, #10000	; 0x2710
 8007df2:	f7fd fccb 	bl	800578c <slalomB>
}
 8007df6:	bf00      	nop
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	20000456 	.word	0x20000456
 8007e00:	20000af0 	.word	0x20000af0

08007e04 <v_R135D>:
//v_R135D
// 区画中心から右に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135D(void){
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8007e0a:	2006      	movs	r0, #6
 8007e0c:	f007 ff28 	bl	800fc60 <full_led_write>
	if(run_mode == LOW){
 8007e10:	4b69      	ldr	r3, [pc, #420]	; (8007fb8 <v_R135D+0x1b4>)
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d14e      	bne.n	8007eb8 <v_R135D+0xb4>
		if(!v_flag){
 8007e1a:	4b68      	ldr	r3, [pc, #416]	; (8007fbc <v_R135D+0x1b8>)
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10c      	bne.n	8007e3c <v_R135D+0x38>
			slalomF(10000, SPEED_LOW, VVV_OFFSET_F, NO_WALL, NO_WALL);
 8007e22:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e2c:	2246      	movs	r2, #70	; 0x46
 8007e2e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007e32:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e36:	f7fd fb09 	bl	800544c <slalomF>
 8007e3a:	e00b      	b.n	8007e54 <v_R135D+0x50>
		}else{
			slalomF(10000, SPEED_LOW, VVV_OFFSET_B, NO_WALL, NO_WALL);
 8007e3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e46:	223a      	movs	r2, #58	; 0x3a
 8007e48:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007e4c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e50:	f7fd fafc 	bl	800544c <slalomF>
		}
		slalomR(-VVV_DEGACCEL, -VVV_OMEGA, -135, SPEED_LOW);
 8007e54:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007e58:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8007e5c:	4958      	ldr	r1, [pc, #352]	; (8007fc0 <v_R135D+0x1bc>)
 8007e5e:	4859      	ldr	r0, [pc, #356]	; (8007fc4 <v_R135D+0x1c0>)
 8007e60:	f7fd fb70 	bl	8005544 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007e64:	2103      	movs	r1, #3
 8007e66:	2003      	movs	r0, #3
 8007e68:	f006 f92a 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 8007e6c:	4b53      	ldr	r3, [pc, #332]	; (8007fbc <v_R135D+0x1b8>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	3301      	adds	r3, #1
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	bfb8      	it	lt
 8007e7a:	425b      	neglt	r3, r3
 8007e7c:	b2da      	uxtb	r2, r3
 8007e7e:	4b4f      	ldr	r3, [pc, #316]	; (8007fbc <v_R135D+0x1b8>)
 8007e80:	701a      	strb	r2, [r3, #0]

		if(!v_flag){
 8007e82:	4b4e      	ldr	r3, [pc, #312]	; (8007fbc <v_R135D+0x1b8>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d107      	bne.n	8007e9a <v_R135D+0x96>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_F-10);
 8007e8a:	223c      	movs	r2, #60	; 0x3c
 8007e8c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007e90:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e94:	f7fd fc7a 	bl	800578c <slalomB>
 8007e98:	e006      	b.n	8007ea8 <v_R135D+0xa4>
		}else{
			slalomB(10000, SPEED_LOW, VVV_OFFSET_B-10);
 8007e9a:	2230      	movs	r2, #48	; 0x30
 8007e9c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007ea0:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ea4:	f7fd fc72 	bl	800578c <slalomB>
		}
		driveD(-10000, SPEED_MIN, SPEED_LOW, 10);
 8007ea8:	230a      	movs	r3, #10
 8007eaa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007eae:	2132      	movs	r1, #50	; 0x32
 8007eb0:	4845      	ldr	r0, [pc, #276]	; (8007fc8 <v_R135D+0x1c4>)
 8007eb2:	f7fd f8f7 	bl	80050a4 <driveD>
		}else{
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F-10);
		}
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
	}
}
 8007eb6:	e07c      	b.n	8007fb2 <v_R135D+0x1ae>
	}else if(run_mode == HIGH){
 8007eb8:	4b3f      	ldr	r3, [pc, #252]	; (8007fb8 <v_R135D+0x1b4>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d177      	bne.n	8007fb2 <v_R135D+0x1ae>
		if(!v_flag){
 8007ec2:	4b3e      	ldr	r3, [pc, #248]	; (8007fbc <v_R135D+0x1b8>)
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d121      	bne.n	8007f0e <v_R135D+0x10a>
			while(dist_l < VVV_H_OFFSET_F && dist_r < VVV_H_OFFSET_F);
 8007eca:	bf00      	nop
 8007ecc:	4b3f      	ldr	r3, [pc, #252]	; (8007fcc <v_R135D+0x1c8>)
 8007ece:	edd3 7a00 	vldr	s15, [r3]
 8007ed2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8007fd0 <v_R135D+0x1cc>
 8007ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ede:	d509      	bpl.n	8007ef4 <v_R135D+0xf0>
 8007ee0:	4b3c      	ldr	r3, [pc, #240]	; (8007fd4 <v_R135D+0x1d0>)
 8007ee2:	edd3 7a00 	vldr	s15, [r3]
 8007ee6:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8007fd0 <v_R135D+0x1cc>
 8007eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ef2:	d4eb      	bmi.n	8007ecc <v_R135D+0xc8>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_F, NO_WALL, NO_WALL);
 8007ef4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	f241 3388 	movw	r3, #5000	; 0x1388
 8007efe:	2278      	movs	r2, #120	; 0x78
 8007f00:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007f04:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f08:	f7fd faa0 	bl	800544c <slalomF>
 8007f0c:	e020      	b.n	8007f50 <v_R135D+0x14c>
			while(dist_l < VVV_H_OFFSET_B && dist_r < VVV_H_OFFSET_B);
 8007f0e:	bf00      	nop
 8007f10:	4b2e      	ldr	r3, [pc, #184]	; (8007fcc <v_R135D+0x1c8>)
 8007f12:	edd3 7a00 	vldr	s15, [r3]
 8007f16:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007fd8 <v_R135D+0x1d4>
 8007f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f22:	d509      	bpl.n	8007f38 <v_R135D+0x134>
 8007f24:	4b2b      	ldr	r3, [pc, #172]	; (8007fd4 <v_R135D+0x1d0>)
 8007f26:	edd3 7a00 	vldr	s15, [r3]
 8007f2a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007fd8 <v_R135D+0x1d4>
 8007f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f36:	d4eb      	bmi.n	8007f10 <v_R135D+0x10c>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_B, NO_WALL, NO_WALL);
 8007f38:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f42:	2246      	movs	r2, #70	; 0x46
 8007f44:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007f48:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f4c:	f7fd fa7e 	bl	800544c <slalomF>
		slalomR(-VVV_H_DEGACCEL, -VVV_H_OMEGA, -135, SPEED_HIGH);
 8007f50:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007f54:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8007f58:	4920      	ldr	r1, [pc, #128]	; (8007fdc <v_R135D+0x1d8>)
 8007f5a:	4821      	ldr	r0, [pc, #132]	; (8007fe0 <v_R135D+0x1dc>)
 8007f5c:	f7fd faf2 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007f60:	2103      	movs	r1, #3
 8007f62:	2003      	movs	r0, #3
 8007f64:	f006 f8ac 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 8007f68:	4b14      	ldr	r3, [pc, #80]	; (8007fbc <v_R135D+0x1b8>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	bfb8      	it	lt
 8007f76:	425b      	neglt	r3, r3
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	4b10      	ldr	r3, [pc, #64]	; (8007fbc <v_R135D+0x1b8>)
 8007f7c:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 8007f7e:	4b0f      	ldr	r3, [pc, #60]	; (8007fbc <v_R135D+0x1b8>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d107      	bne.n	8007f96 <v_R135D+0x192>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F-10);
 8007f86:	226e      	movs	r2, #110	; 0x6e
 8007f88:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007f8c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f90:	f7fd fbfc 	bl	800578c <slalomB>
 8007f94:	e006      	b.n	8007fa4 <v_R135D+0x1a0>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F-10);
 8007f96:	226e      	movs	r2, #110	; 0x6e
 8007f98:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007f9c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007fa0:	f7fd fbf4 	bl	800578c <slalomB>
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
 8007fa4:	230a      	movs	r3, #10
 8007fa6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007faa:	2132      	movs	r1, #50	; 0x32
 8007fac:	4806      	ldr	r0, [pc, #24]	; (8007fc8 <v_R135D+0x1c4>)
 8007fae:	f7fd f879 	bl	80050a4 <driveD>
}
 8007fb2:	bf00      	nop
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20000456 	.word	0x20000456
 8007fbc:	20000af0 	.word	0x20000af0
 8007fc0:	fffffed4 	.word	0xfffffed4
 8007fc4:	fffff448 	.word	0xfffff448
 8007fc8:	ffffd8f0 	.word	0xffffd8f0
 8007fcc:	200015d0 	.word	0x200015d0
 8007fd0:	42f00000 	.word	0x42f00000
 8007fd4:	20000af4 	.word	0x20000af4
 8007fd8:	428c0000 	.word	0x428c0000
 8007fdc:	fffffce0 	.word	0xfffffce0
 8007fe0:	ffffe0c0 	.word	0xffffe0c0

08007fe4 <v_L135D>:
//v_L135D
// 区画中心から左に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135D(void){
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8007fea:	2005      	movs	r0, #5
 8007fec:	f007 fe38 	bl	800fc60 <full_led_write>
	if(run_mode == LOW){
 8007ff0:	4b80      	ldr	r3, [pc, #512]	; (80081f4 <v_L135D+0x210>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d14f      	bne.n	800809a <v_L135D+0xb6>
		if(!v_flag){
 8007ffa:	4b7f      	ldr	r3, [pc, #508]	; (80081f8 <v_L135D+0x214>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10c      	bne.n	800801c <v_L135D+0x38>
			slalomF(10000, SPEED_LOW, VVV_OFFSET_F, NO_WALL, NO_WALL);
 8008002:	f241 3388 	movw	r3, #5000	; 0x1388
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	f241 3388 	movw	r3, #5000	; 0x1388
 800800c:	2246      	movs	r2, #70	; 0x46
 800800e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008012:	f242 7010 	movw	r0, #10000	; 0x2710
 8008016:	f7fd fa19 	bl	800544c <slalomF>
 800801a:	e00b      	b.n	8008034 <v_L135D+0x50>
		}else{
			slalomF(10000, SPEED_LOW, VVV_OFFSET_B, NO_WALL, NO_WALL);
 800801c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	f241 3388 	movw	r3, #5000	; 0x1388
 8008026:	223a      	movs	r2, #58	; 0x3a
 8008028:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800802c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008030:	f7fd fa0c 	bl	800544c <slalomF>
		}
		slalomR(VVV_DEGACCEL, VVV_OMEGA, 135, SPEED_LOW);
 8008034:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008038:	2287      	movs	r2, #135	; 0x87
 800803a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800803e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008042:	f7fd fa7f 	bl	8005544 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008046:	2103      	movs	r1, #3
 8008048:	20fd      	movs	r0, #253	; 0xfd
 800804a:	f006 f839 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 800804e:	4b6a      	ldr	r3, [pc, #424]	; (80081f8 <v_L135D+0x214>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	3301      	adds	r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	bfb8      	it	lt
 800805c:	425b      	neglt	r3, r3
 800805e:	b2da      	uxtb	r2, r3
 8008060:	4b65      	ldr	r3, [pc, #404]	; (80081f8 <v_L135D+0x214>)
 8008062:	701a      	strb	r2, [r3, #0]

		if(!v_flag){
 8008064:	4b64      	ldr	r3, [pc, #400]	; (80081f8 <v_L135D+0x214>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d107      	bne.n	800807c <v_L135D+0x98>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_F-10);
 800806c:	223c      	movs	r2, #60	; 0x3c
 800806e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008072:	f242 7010 	movw	r0, #10000	; 0x2710
 8008076:	f7fd fb89 	bl	800578c <slalomB>
 800807a:	e006      	b.n	800808a <v_L135D+0xa6>
		}else{
			slalomB(10000, SPEED_LOW, VVV_OFFSET_B-10);
 800807c:	2230      	movs	r2, #48	; 0x30
 800807e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008082:	f242 7010 	movw	r0, #10000	; 0x2710
 8008086:	f7fd fb81 	bl	800578c <slalomB>
		}
		driveD(-10000, SPEED_MIN, SPEED_LOW, 10);
 800808a:	230a      	movs	r3, #10
 800808c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008090:	2132      	movs	r1, #50	; 0x32
 8008092:	485a      	ldr	r0, [pc, #360]	; (80081fc <v_L135D+0x218>)
 8008094:	f7fd f806 	bl	80050a4 <driveD>
			while(dist_l < VVV_H_OFFSET_B-10 && dist_r < VVV_H_OFFSET_B-10);
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_B-10);
		}
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
	}
}
 8008098:	e0a8      	b.n	80081ec <v_L135D+0x208>
	}else if(run_mode == HIGH){
 800809a:	4b56      	ldr	r3, [pc, #344]	; (80081f4 <v_L135D+0x210>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b03      	cmp	r3, #3
 80080a2:	f040 80a3 	bne.w	80081ec <v_L135D+0x208>
		if(!v_flag){
 80080a6:	4b54      	ldr	r3, [pc, #336]	; (80081f8 <v_L135D+0x214>)
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d121      	bne.n	80080f2 <v_L135D+0x10e>
			while(dist_l < VVV_H_OFFSET_F && dist_r < VVV_H_OFFSET_F);
 80080ae:	bf00      	nop
 80080b0:	4b53      	ldr	r3, [pc, #332]	; (8008200 <v_L135D+0x21c>)
 80080b2:	edd3 7a00 	vldr	s15, [r3]
 80080b6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8008204 <v_L135D+0x220>
 80080ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c2:	d509      	bpl.n	80080d8 <v_L135D+0xf4>
 80080c4:	4b50      	ldr	r3, [pc, #320]	; (8008208 <v_L135D+0x224>)
 80080c6:	edd3 7a00 	vldr	s15, [r3]
 80080ca:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8008204 <v_L135D+0x220>
 80080ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d6:	d4eb      	bmi.n	80080b0 <v_L135D+0xcc>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_F, NO_WALL, NO_WALL);
 80080d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	f241 3388 	movw	r3, #5000	; 0x1388
 80080e2:	2278      	movs	r2, #120	; 0x78
 80080e4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80080e8:	f242 7010 	movw	r0, #10000	; 0x2710
 80080ec:	f7fd f9ae 	bl	800544c <slalomF>
 80080f0:	e020      	b.n	8008134 <v_L135D+0x150>
			while(dist_l < VVV_H_OFFSET_B && dist_r < VVV_H_OFFSET_B);
 80080f2:	bf00      	nop
 80080f4:	4b42      	ldr	r3, [pc, #264]	; (8008200 <v_L135D+0x21c>)
 80080f6:	edd3 7a00 	vldr	s15, [r3]
 80080fa:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800820c <v_L135D+0x228>
 80080fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008106:	d509      	bpl.n	800811c <v_L135D+0x138>
 8008108:	4b3f      	ldr	r3, [pc, #252]	; (8008208 <v_L135D+0x224>)
 800810a:	edd3 7a00 	vldr	s15, [r3]
 800810e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800820c <v_L135D+0x228>
 8008112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800811a:	d4eb      	bmi.n	80080f4 <v_L135D+0x110>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_B, NO_WALL, NO_WALL);
 800811c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	f241 3388 	movw	r3, #5000	; 0x1388
 8008126:	2246      	movs	r2, #70	; 0x46
 8008128:	f44f 7148 	mov.w	r1, #800	; 0x320
 800812c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008130:	f7fd f98c 	bl	800544c <slalomF>
		slalomR(VVV_H_DEGACCEL, VVV_H_OMEGA, 135, SPEED_HIGH);
 8008134:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008138:	2287      	movs	r2, #135	; 0x87
 800813a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800813e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8008142:	f7fd f9ff 	bl	8005544 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008146:	2103      	movs	r1, #3
 8008148:	20fd      	movs	r0, #253	; 0xfd
 800814a:	f005 ffb9 	bl	800e0c0 <turn_dir>
		v_flag = (v_flag+1)%2;
 800814e:	4b2a      	ldr	r3, [pc, #168]	; (80081f8 <v_L135D+0x214>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	3301      	adds	r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	bfb8      	it	lt
 800815c:	425b      	neglt	r3, r3
 800815e:	b2da      	uxtb	r2, r3
 8008160:	4b25      	ldr	r3, [pc, #148]	; (80081f8 <v_L135D+0x214>)
 8008162:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 8008164:	4b24      	ldr	r3, [pc, #144]	; (80081f8 <v_L135D+0x214>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d11c      	bne.n	80081a6 <v_L135D+0x1c2>
			while(dist_l < VVV_H_OFFSET_F-10 && dist_r < VVV_H_OFFSET_F-10);
 800816c:	bf00      	nop
 800816e:	4b24      	ldr	r3, [pc, #144]	; (8008200 <v_L135D+0x21c>)
 8008170:	edd3 7a00 	vldr	s15, [r3]
 8008174:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8008210 <v_L135D+0x22c>
 8008178:	eef4 7ac7 	vcmpe.f32	s15, s14
 800817c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008180:	d509      	bpl.n	8008196 <v_L135D+0x1b2>
 8008182:	4b21      	ldr	r3, [pc, #132]	; (8008208 <v_L135D+0x224>)
 8008184:	edd3 7a00 	vldr	s15, [r3]
 8008188:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8008210 <v_L135D+0x22c>
 800818c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008194:	d4eb      	bmi.n	800816e <v_L135D+0x18a>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F-10);
 8008196:	226e      	movs	r2, #110	; 0x6e
 8008198:	f44f 7148 	mov.w	r1, #800	; 0x320
 800819c:	f242 7010 	movw	r0, #10000	; 0x2710
 80081a0:	f7fd faf4 	bl	800578c <slalomB>
 80081a4:	e01b      	b.n	80081de <v_L135D+0x1fa>
			while(dist_l < VVV_H_OFFSET_B-10 && dist_r < VVV_H_OFFSET_B-10);
 80081a6:	bf00      	nop
 80081a8:	4b15      	ldr	r3, [pc, #84]	; (8008200 <v_L135D+0x21c>)
 80081aa:	edd3 7a00 	vldr	s15, [r3]
 80081ae:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8008214 <v_L135D+0x230>
 80081b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ba:	d509      	bpl.n	80081d0 <v_L135D+0x1ec>
 80081bc:	4b12      	ldr	r3, [pc, #72]	; (8008208 <v_L135D+0x224>)
 80081be:	edd3 7a00 	vldr	s15, [r3]
 80081c2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8008214 <v_L135D+0x230>
 80081c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ce:	d4eb      	bmi.n	80081a8 <v_L135D+0x1c4>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_B-10);
 80081d0:	223c      	movs	r2, #60	; 0x3c
 80081d2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80081d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80081da:	f7fd fad7 	bl	800578c <slalomB>
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
 80081de:	230a      	movs	r3, #10
 80081e0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80081e4:	2132      	movs	r1, #50	; 0x32
 80081e6:	4805      	ldr	r0, [pc, #20]	; (80081fc <v_L135D+0x218>)
 80081e8:	f7fc ff5c 	bl	80050a4 <driveD>
}
 80081ec:	bf00      	nop
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	20000456 	.word	0x20000456
 80081f8:	20000af0 	.word	0x20000af0
 80081fc:	ffffd8f0 	.word	0xffffd8f0
 8008200:	200015d0 	.word	0x200015d0
 8008204:	42f00000 	.word	0x42f00000
 8008208:	20000af4 	.word	0x20000af4
 800820c:	428c0000 	.word	0x428c0000
 8008210:	42dc0000 	.word	0x42dc0000
 8008214:	42700000 	.word	0x42700000

08008218 <test_select>:
//test_select
// 走行系テスト選択
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void test_select(void){
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
	int mode = 0;
 800821e:	2300      	movs	r3, #0
 8008220:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	483b      	ldr	r0, [pc, #236]	; (8008314 <test_select+0xfc>)
 8008226:	f008 faaf 	bl	8010788 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	b2db      	uxtb	r3, r3
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	b2d8      	uxtb	r0, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	b2db      	uxtb	r3, r3
 8008238:	f003 0302 	and.w	r3, r3, #2
 800823c:	b2d9      	uxtb	r1, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	b2db      	uxtb	r3, r3
 8008242:	f003 0304 	and.w	r3, r3, #4
 8008246:	b2db      	uxtb	r3, r3
 8008248:	461a      	mov	r2, r3
 800824a:	f007 fccf 	bl	800fbec <led_write>
		  if(dist_r >= 20){
 800824e:	4b32      	ldr	r3, [pc, #200]	; (8008318 <test_select+0x100>)
 8008250:	edd3 7a00 	vldr	s15, [r3]
 8008254:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800825c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008260:	db0f      	blt.n	8008282 <test_select+0x6a>
			  mode++;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	3301      	adds	r3, #1
 8008266:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8008268:	4b2b      	ldr	r3, [pc, #172]	; (8008318 <test_select+0x100>)
 800826a:	f04f 0200 	mov.w	r2, #0
 800826e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b07      	cmp	r3, #7
 8008274:	dd01      	ble.n	800827a <test_select+0x62>
				  mode = 0;
 8008276:	2300      	movs	r3, #0
 8008278:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800827a:	6879      	ldr	r1, [r7, #4]
 800827c:	4827      	ldr	r0, [pc, #156]	; (800831c <test_select+0x104>)
 800827e:	f008 fa83 	bl	8010788 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8008282:	4b25      	ldr	r3, [pc, #148]	; (8008318 <test_select+0x100>)
 8008284:	edd3 7a00 	vldr	s15, [r3]
 8008288:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800828c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008294:	d80f      	bhi.n	80082b6 <test_select+0x9e>
			  mode--;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3b01      	subs	r3, #1
 800829a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800829c:	4b1e      	ldr	r3, [pc, #120]	; (8008318 <test_select+0x100>)
 800829e:	f04f 0200 	mov.w	r2, #0
 80082a2:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	da01      	bge.n	80082ae <test_select+0x96>
				  mode = 7;
 80082aa:	2307      	movs	r3, #7
 80082ac:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80082ae:	6879      	ldr	r1, [r7, #4]
 80082b0:	481a      	ldr	r0, [pc, #104]	; (800831c <test_select+0x104>)
 80082b2:	f008 fa69 	bl	8010788 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80082b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80082ba:	4819      	ldr	r0, [pc, #100]	; (8008320 <test_select+0x108>)
 80082bc:	f7fa f80a 	bl	80022d4 <HAL_GPIO_ReadPin>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1b1      	bne.n	800822a <test_select+0x12>
			  HAL_Delay(50);
 80082c6:	2032      	movs	r0, #50	; 0x32
 80082c8:	f7f8 fea8 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80082cc:	bf00      	nop
 80082ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80082d2:	4813      	ldr	r0, [pc, #76]	; (8008320 <test_select+0x108>)
 80082d4:	f7f9 fffe 	bl	80022d4 <HAL_GPIO_ReadPin>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d0f7      	beq.n	80082ce <test_select+0xb6>
			  switch(mode){
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d8a1      	bhi.n	800822a <test_select+0x12>
 80082e6:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <test_select+0xd4>)
 80082e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ec:	080082fd 	.word	0x080082fd
 80082f0:	08008303 	.word	0x08008303
 80082f4:	08008309 	.word	0x08008309
 80082f8:	0800830f 	.word	0x0800830f
				case 1:
					init_test();
 80082fc:	f000 f812 	bl	8008324 <init_test>
					break;
 8008300:	e007      	b.n	8008312 <test_select+0xfa>

				case 2:
					slalom_test();
 8008302:	f000 f917 	bl	8008534 <slalom_test>
					break;
 8008306:	e004      	b.n	8008312 <test_select+0xfa>

				case 3:
					sample_course_run();
 8008308:	f001 fc76 	bl	8009bf8 <sample_course_run>
					break;
 800830c:	e001      	b.n	8008312 <test_select+0xfa>
				case 4:
					v_test();
 800830e:	f000 fc21 	bl	8008b54 <v_test>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008312:	e78a      	b.n	800822a <test_select+0x12>
 8008314:	080119d0 	.word	0x080119d0
 8008318:	20000af4 	.word	0x20000af4
 800831c:	080119c4 	.word	0x080119c4
 8008320:	40020000 	.word	0x40020000

08008324 <init_test>:
//init_test
// 初期基幹関数走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0

	int mode = 0;
 800832a:	2300      	movs	r3, #0
 800832c:	617b      	str	r3, [r7, #20]
	printf("Test Init Run, Mode : %d\n", mode);
 800832e:	6979      	ldr	r1, [r7, #20]
 8008330:	4871      	ldr	r0, [pc, #452]	; (80084f8 <init_test+0x1d4>)
 8008332:	f008 fa29 	bl	8010788 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	b2db      	uxtb	r3, r3
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	b2d8      	uxtb	r0, r3
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	b2db      	uxtb	r3, r3
 8008344:	f003 0302 	and.w	r3, r3, #2
 8008348:	b2d9      	uxtb	r1, r3
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	b2db      	uxtb	r3, r3
 800834e:	f003 0304 	and.w	r3, r3, #4
 8008352:	b2db      	uxtb	r3, r3
 8008354:	461a      	mov	r2, r3
 8008356:	f007 fc49 	bl	800fbec <led_write>
		  if(dist_r >= 20){
 800835a:	4b68      	ldr	r3, [pc, #416]	; (80084fc <init_test+0x1d8>)
 800835c:	edd3 7a00 	vldr	s15, [r3]
 8008360:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008364:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800836c:	db0f      	blt.n	800838e <init_test+0x6a>
			  mode++;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	3301      	adds	r3, #1
 8008372:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8008374:	4b61      	ldr	r3, [pc, #388]	; (80084fc <init_test+0x1d8>)
 8008376:	f04f 0200 	mov.w	r2, #0
 800837a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	2b07      	cmp	r3, #7
 8008380:	dd01      	ble.n	8008386 <init_test+0x62>
				  mode = 0;
 8008382:	2300      	movs	r3, #0
 8008384:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 8008386:	6979      	ldr	r1, [r7, #20]
 8008388:	485d      	ldr	r0, [pc, #372]	; (8008500 <init_test+0x1dc>)
 800838a:	f008 f9fd 	bl	8010788 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800838e:	4b5b      	ldr	r3, [pc, #364]	; (80084fc <init_test+0x1d8>)
 8008390:	edd3 7a00 	vldr	s15, [r3]
 8008394:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8008398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800839c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a0:	d80f      	bhi.n	80083c2 <init_test+0x9e>
			  mode--;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 80083a8:	4b54      	ldr	r3, [pc, #336]	; (80084fc <init_test+0x1d8>)
 80083aa:	f04f 0200 	mov.w	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	da01      	bge.n	80083ba <init_test+0x96>
				  mode = 7;
 80083b6:	2307      	movs	r3, #7
 80083b8:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 80083ba:	6979      	ldr	r1, [r7, #20]
 80083bc:	4850      	ldr	r0, [pc, #320]	; (8008500 <init_test+0x1dc>)
 80083be:	f008 f9e3 	bl	8010788 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80083c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80083c6:	484f      	ldr	r0, [pc, #316]	; (8008504 <init_test+0x1e0>)
 80083c8:	f7f9 ff84 	bl	80022d4 <HAL_GPIO_ReadPin>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1b1      	bne.n	8008336 <init_test+0x12>
			  HAL_Delay(50);
 80083d2:	2032      	movs	r0, #50	; 0x32
 80083d4:	f7f8 fe22 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80083d8:	bf00      	nop
 80083da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80083de:	4849      	ldr	r0, [pc, #292]	; (8008504 <init_test+0x1e0>)
 80083e0:	f7f9 ff78 	bl	80022d4 <HAL_GPIO_ReadPin>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d0f7      	beq.n	80083da <init_test+0xb6>
			  drive_ready();
 80083ea:	f7fc fc43 	bl	8004c74 <drive_ready>
			  get_base();
 80083ee:	f007 fba5 	bl	800fb3c <get_base>

			  switch(mode){
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2b07      	cmp	r3, #7
 80083f6:	d89e      	bhi.n	8008336 <init_test+0x12>
 80083f8:	a201      	add	r2, pc, #4	; (adr r2, 8008400 <init_test+0xdc>)
 80083fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fe:	bf00      	nop
 8008400:	08008421 	.word	0x08008421
 8008404:	08008427 	.word	0x08008427
 8008408:	08008447 	.word	0x08008447
 800840c:	08008465 	.word	0x08008465
 8008410:	08008483 	.word	0x08008483
 8008414:	080084a1 	.word	0x080084a1
 8008418:	080084cb 	.word	0x080084cb
 800841c:	080084e1 	.word	0x080084e1
				case 0:
					get_base();
 8008420:	f007 fb8c 	bl	800fb3c <get_base>
					break;
 8008424:	e067      	b.n	80084f6 <init_test+0x1d2>
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 8008426:	4838      	ldr	r0, [pc, #224]	; (8008508 <init_test+0x1e4>)
 8008428:	f008 fa22 	bl	8010870 <puts>
					for(int i = 0; i < 1; i++){
 800842c:	2300      	movs	r3, #0
 800842e:	613b      	str	r3, [r7, #16]
 8008430:	e005      	b.n	800843e <init_test+0x11a>
						driveC(SEC_HALF*2);	//一区画のパルス分デフォルトインターバルで走行
 8008432:	20b6      	movs	r0, #182	; 0xb6
 8008434:	f7fc ff74 	bl	8005320 <driveC>
					for(int i = 0; i < 1; i++){
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	3301      	adds	r3, #1
 800843c:	613b      	str	r3, [r7, #16]
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	ddf6      	ble.n	8008432 <init_test+0x10e>
					}
					break;
 8008444:	e057      	b.n	80084f6 <init_test+0x1d2>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 8008446:	4831      	ldr	r0, [pc, #196]	; (800850c <init_test+0x1e8>)
 8008448:	f008 fa12 	bl	8010870 <puts>
					for(int i = 0; i < 32; i++){
 800844c:	2300      	movs	r3, #0
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	e004      	b.n	800845c <init_test+0x138>
						rotate_R90();				//16回右90度回転、つまり4周回転
 8008452:	f7fd fd4d 	bl	8005ef0 <rotate_R90>
					for(int i = 0; i < 32; i++){
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	3301      	adds	r3, #1
 800845a:	60fb      	str	r3, [r7, #12]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2b1f      	cmp	r3, #31
 8008460:	ddf7      	ble.n	8008452 <init_test+0x12e>
					}
					break;
 8008462:	e048      	b.n	80084f6 <init_test+0x1d2>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 8008464:	482a      	ldr	r0, [pc, #168]	; (8008510 <init_test+0x1ec>)
 8008466:	f008 fa03 	bl	8010870 <puts>
					for(int i = 0; i < 32; i++){
 800846a:	2300      	movs	r3, #0
 800846c:	60bb      	str	r3, [r7, #8]
 800846e:	e004      	b.n	800847a <init_test+0x156>
						rotate_L90();				//16回左90度回転、つまり4周回転
 8008470:	f7fd fe1a 	bl	80060a8 <rotate_L90>
					for(int i = 0; i < 32; i++){
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	3301      	adds	r3, #1
 8008478:	60bb      	str	r3, [r7, #8]
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2b1f      	cmp	r3, #31
 800847e:	ddf7      	ble.n	8008470 <init_test+0x14c>
					}
					break;
 8008480:	e039      	b.n	80084f6 <init_test+0x1d2>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 8008482:	4824      	ldr	r0, [pc, #144]	; (8008514 <init_test+0x1f0>)
 8008484:	f008 f9f4 	bl	8010870 <puts>
					for(int i = 0; i < 16; i++){
 8008488:	2300      	movs	r3, #0
 800848a:	607b      	str	r3, [r7, #4]
 800848c:	e004      	b.n	8008498 <init_test+0x174>
						rotate_180();				//8回右180度回転、つまり4周回転
 800848e:	f7fd fee7 	bl	8006260 <rotate_180>
					for(int i = 0; i < 16; i++){
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	3301      	adds	r3, #1
 8008496:	607b      	str	r3, [r7, #4]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b0f      	cmp	r3, #15
 800849c:	ddf7      	ble.n	800848e <init_test+0x16a>
					}
					break;
 800849e:	e02a      	b.n	80084f6 <init_test+0x1d2>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 80084a0:	481d      	ldr	r0, [pc, #116]	; (8008518 <init_test+0x1f4>)
 80084a2:	f008 f9e5 	bl	8010870 <puts>
					get_base();
 80084a6:	f007 fb49 	bl	800fb3c <get_base>
					half_sectionA();				//半区画のパルス分加速しながら走行
 80084aa:	f7fd fabb 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 6-1; i++){
 80084ae:	2300      	movs	r3, #0
 80084b0:	603b      	str	r3, [r7, #0]
 80084b2:	e004      	b.n	80084be <init_test+0x19a>
						one_sectionU();			//一区画のパルス分等速走行
 80084b4:	f7fd fd04 	bl	8005ec0 <one_sectionU>
					for(int i = 0; i < 6-1; i++){
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	3301      	adds	r3, #1
 80084bc:	603b      	str	r3, [r7, #0]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	ddf7      	ble.n	80084b4 <init_test+0x190>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 80084c4:	f7fd faf8 	bl	8005ab8 <half_sectionD>
					break;
 80084c8:	e015      	b.n	80084f6 <init_test+0x1d2>
				case 6:
					//----a宴会芸モード----
					target_degree_z = degree_z;
 80084ca:	4b14      	ldr	r3, [pc, #80]	; (800851c <init_test+0x1f8>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a14      	ldr	r2, [pc, #80]	; (8008520 <init_test+0x1fc>)
 80084d0:	6013      	str	r3, [r2, #0]
					accel_l = 5000;
 80084d2:	4b14      	ldr	r3, [pc, #80]	; (8008524 <init_test+0x200>)
 80084d4:	4a14      	ldr	r2, [pc, #80]	; (8008528 <init_test+0x204>)
 80084d6:	601a      	str	r2, [r3, #0]

					enkai_flag = 1;
 80084d8:	4b14      	ldr	r3, [pc, #80]	; (800852c <init_test+0x208>)
 80084da:	2201      	movs	r2, #1
 80084dc:	701a      	strb	r2, [r3, #0]

					while(1);
 80084de:	e7fe      	b.n	80084de <init_test+0x1ba>
					break;
				case 7:
					//----a停止時前壁補正モード----
					MF.FLAG.FWALL = 1;
 80084e0:	4a13      	ldr	r2, [pc, #76]	; (8008530 <init_test+0x20c>)
 80084e2:	8813      	ldrh	r3, [r2, #0]
 80084e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084e8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.DRV = 1;
 80084ea:	4a11      	ldr	r2, [pc, #68]	; (8008530 <init_test+0x20c>)
 80084ec:	8813      	ldrh	r3, [r2, #0]
 80084ee:	f043 0302 	orr.w	r3, r3, #2
 80084f2:	8013      	strh	r3, [r2, #0]
					while(1);
 80084f4:	e7fe      	b.n	80084f4 <init_test+0x1d0>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80084f6:	e71e      	b.n	8008336 <init_test+0x12>
 80084f8:	080119e8 	.word	0x080119e8
 80084fc:	20000af4 	.word	0x20000af4
 8008500:	080119c4 	.word	0x080119c4
 8008504:	40020000 	.word	0x40020000
 8008508:	08011a04 	.word	0x08011a04
 800850c:	08011a28 	.word	0x08011a28
 8008510:	08011a34 	.word	0x08011a34
 8008514:	08011a40 	.word	0x08011a40
 8008518:	08011a4c 	.word	0x08011a4c
 800851c:	20000b64 	.word	0x20000b64
 8008520:	20000c08 	.word	0x20000c08
 8008524:	20000d68 	.word	0x20000d68
 8008528:	459c4000 	.word	0x459c4000
 800852c:	20000bbc 	.word	0x20000bbc
 8008530:	20000f74 	.word	0x20000f74

08008534 <slalom_test>:
//slalom_test
// スラローム走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 8008534:	b580      	push	{r7, lr}
 8008536:	b094      	sub	sp, #80	; 0x50
 8008538:	af00      	add	r7, sp, #0

	int mode = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	64fb      	str	r3, [r7, #76]	; 0x4c
	printf("Test Slalom Run, Mode : %d\n", mode);
 800853e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008540:	48af      	ldr	r0, [pc, #700]	; (8008800 <slalom_test+0x2cc>)
 8008542:	f008 f921 	bl	8010788 <iprintf>

	run_select();
 8008546:	f7fc fcd1 	bl	8004eec <run_select>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800854a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800854c:	b2db      	uxtb	r3, r3
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	b2d8      	uxtb	r0, r3
 8008554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008556:	b2db      	uxtb	r3, r3
 8008558:	f003 0302 	and.w	r3, r3, #2
 800855c:	b2d9      	uxtb	r1, r3
 800855e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008560:	b2db      	uxtb	r3, r3
 8008562:	f003 0304 	and.w	r3, r3, #4
 8008566:	b2db      	uxtb	r3, r3
 8008568:	461a      	mov	r2, r3
 800856a:	f007 fb3f 	bl	800fbec <led_write>
		  if(dist_r >= 20){
 800856e:	4ba5      	ldr	r3, [pc, #660]	; (8008804 <slalom_test+0x2d0>)
 8008570:	edd3 7a00 	vldr	s15, [r3]
 8008574:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800857c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008580:	db20      	blt.n	80085c4 <slalom_test+0x90>
			  mode++;
 8008582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008584:	3301      	adds	r3, #1
 8008586:	64fb      	str	r3, [r7, #76]	; 0x4c
			  dist_r = 0;
 8008588:	4b9e      	ldr	r3, [pc, #632]	; (8008804 <slalom_test+0x2d0>)
 800858a:	f04f 0200 	mov.w	r2, #0
 800858e:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 8008590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008592:	2b07      	cmp	r3, #7
 8008594:	dc03      	bgt.n	800859e <slalom_test+0x6a>
				  full_led_write(WHITE);
 8008596:	2007      	movs	r0, #7
 8008598:	f007 fb62 	bl	800fc60 <full_led_write>
 800859c:	e009      	b.n	80085b2 <slalom_test+0x7e>
			  }else if(mode < 16){
 800859e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085a0:	2b0f      	cmp	r3, #15
 80085a2:	dc03      	bgt.n	80085ac <slalom_test+0x78>
				  full_led_write(BLUEGREEN);
 80085a4:	2004      	movs	r0, #4
 80085a6:	f007 fb5b 	bl	800fc60 <full_led_write>
 80085aa:	e002      	b.n	80085b2 <slalom_test+0x7e>
			  }else{
				  full_led_write(PURPLE);
 80085ac:	2005      	movs	r0, #5
 80085ae:	f007 fb57 	bl	800fc60 <full_led_write>
			  }
			  if(mode > 23){
 80085b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b4:	2b17      	cmp	r3, #23
 80085b6:	dd01      	ble.n	80085bc <slalom_test+0x88>
				  mode = 0;
 80085b8:	2300      	movs	r3, #0
 80085ba:	64fb      	str	r3, [r7, #76]	; 0x4c
			  }
			  printf("Mode : %d\n", mode);
 80085bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80085be:	4892      	ldr	r0, [pc, #584]	; (8008808 <slalom_test+0x2d4>)
 80085c0:	f008 f8e2 	bl	8010788 <iprintf>
		  }
		  if(dist_r <= -20){
 80085c4:	4b8f      	ldr	r3, [pc, #572]	; (8008804 <slalom_test+0x2d0>)
 80085c6:	edd3 7a00 	vldr	s15, [r3]
 80085ca:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80085ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085d6:	d820      	bhi.n	800861a <slalom_test+0xe6>
			  mode--;
 80085d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085da:	3b01      	subs	r3, #1
 80085dc:	64fb      	str	r3, [r7, #76]	; 0x4c
			  dist_r = 0;
 80085de:	4b89      	ldr	r3, [pc, #548]	; (8008804 <slalom_test+0x2d0>)
 80085e0:	f04f 0200 	mov.w	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 80085e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e8:	2b07      	cmp	r3, #7
 80085ea:	dc03      	bgt.n	80085f4 <slalom_test+0xc0>
				  full_led_write(WHITE);
 80085ec:	2007      	movs	r0, #7
 80085ee:	f007 fb37 	bl	800fc60 <full_led_write>
 80085f2:	e009      	b.n	8008608 <slalom_test+0xd4>
			  }else if(mode < 16){
 80085f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085f6:	2b0f      	cmp	r3, #15
 80085f8:	dc03      	bgt.n	8008602 <slalom_test+0xce>
				  full_led_write(BLUEGREEN);
 80085fa:	2004      	movs	r0, #4
 80085fc:	f007 fb30 	bl	800fc60 <full_led_write>
 8008600:	e002      	b.n	8008608 <slalom_test+0xd4>
			  }else{
				  full_led_write(PURPLE);
 8008602:	2005      	movs	r0, #5
 8008604:	f007 fb2c 	bl	800fc60 <full_led_write>
			  }
			  if(mode < 0){
 8008608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800860a:	2b00      	cmp	r3, #0
 800860c:	da01      	bge.n	8008612 <slalom_test+0xde>
				  mode = 23;
 800860e:	2317      	movs	r3, #23
 8008610:	64fb      	str	r3, [r7, #76]	; 0x4c
			  }
			  printf("Mode : %d\n", mode);
 8008612:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008614:	487c      	ldr	r0, [pc, #496]	; (8008808 <slalom_test+0x2d4>)
 8008616:	f008 f8b7 	bl	8010788 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800861a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800861e:	487b      	ldr	r0, [pc, #492]	; (800880c <slalom_test+0x2d8>)
 8008620:	f7f9 fe58 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d18f      	bne.n	800854a <slalom_test+0x16>
			  HAL_Delay(50);
 800862a:	2032      	movs	r0, #50	; 0x32
 800862c:	f7f8 fcf6 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8008630:	bf00      	nop
 8008632:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008636:	4875      	ldr	r0, [pc, #468]	; (800880c <slalom_test+0x2d8>)
 8008638:	f7f9 fe4c 	bl	80022d4 <HAL_GPIO_ReadPin>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0f7      	beq.n	8008632 <slalom_test+0xfe>
			  drive_ready();
 8008642:	f7fc fb17 	bl	8004c74 <drive_ready>
			  get_base();
 8008646:	f007 fa79 	bl	800fb3c <get_base>

			  switch(mode){
 800864a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800864c:	2b10      	cmp	r3, #16
 800864e:	f200 8254 	bhi.w	8008afa <slalom_test+0x5c6>
 8008652:	a201      	add	r2, pc, #4	; (adr r2, 8008658 <slalom_test+0x124>)
 8008654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008658:	0800869d 	.word	0x0800869d
 800865c:	080086a3 	.word	0x080086a3
 8008660:	080086cd 	.word	0x080086cd
 8008664:	080086f7 	.word	0x080086f7
 8008668:	0800871d 	.word	0x0800871d
 800866c:	08008757 	.word	0x08008757
 8008670:	08008799 	.word	0x08008799
 8008674:	080088cb 	.word	0x080088cb
 8008678:	08008903 	.word	0x08008903
 800867c:	0800893b 	.word	0x0800893b
 8008680:	08008973 	.word	0x08008973
 8008684:	080089ab 	.word	0x080089ab
 8008688:	080089e3 	.word	0x080089e3
 800868c:	08008a1b 	.word	0x08008a1b
 8008690:	08008a53 	.word	0x08008a53
 8008694:	08008a8b 	.word	0x08008a8b
 8008698:	08008ac3 	.word	0x08008ac3
				case 0:
					get_base();
 800869c:	f007 fa4e 	bl	800fb3c <get_base>
					break;
 80086a0:	e22b      	b.n	8008afa <slalom_test+0x5c6>
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 80086a2:	485b      	ldr	r0, [pc, #364]	; (8008810 <slalom_test+0x2dc>)
 80086a4:	f008 f8e4 	bl	8010870 <puts>
//					run_mode = LOW;
					half_sectionA();
 80086a8:	f7fd f9bc 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 80086ac:	2300      	movs	r3, #0
 80086ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80086b0:	e006      	b.n	80086c0 <slalom_test+0x18c>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 80086b2:	f7fd fead 	bl	8006410 <slalom_R90>
						one_sectionU();
 80086b6:	f7fd fc03 	bl	8005ec0 <one_sectionU>
					for(int i = 0; i < 1; i++){
 80086ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086bc:	3301      	adds	r3, #1
 80086be:	64bb      	str	r3, [r7, #72]	; 0x48
 80086c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	ddf5      	ble.n	80086b2 <slalom_test+0x17e>
					}
					half_sectionD();
 80086c6:	f7fd f9f7 	bl	8005ab8 <half_sectionD>
					break;
 80086ca:	e216      	b.n	8008afa <slalom_test+0x5c6>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 80086cc:	4851      	ldr	r0, [pc, #324]	; (8008814 <slalom_test+0x2e0>)
 80086ce:	f008 f8cf 	bl	8010870 <puts>
//					run_mode = LOW;
					half_sectionA();
 80086d2:	f7fd f9a7 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 80086d6:	2300      	movs	r3, #0
 80086d8:	647b      	str	r3, [r7, #68]	; 0x44
 80086da:	e006      	b.n	80086ea <slalom_test+0x1b6>
						slalom_L90();				//16回右90度回転、つまり4周回転
 80086dc:	f7fd ff7e 	bl	80065dc <slalom_L90>
						one_sectionU();
 80086e0:	f7fd fbee 	bl	8005ec0 <one_sectionU>
					for(int i = 0; i < 1; i++){
 80086e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086e6:	3301      	adds	r3, #1
 80086e8:	647b      	str	r3, [r7, #68]	; 0x44
 80086ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	ddf5      	ble.n	80086dc <slalom_test+0x1a8>
					}
					half_sectionD();
 80086f0:	f7fd f9e2 	bl	8005ab8 <half_sectionD>
					break;
 80086f4:	e201      	b.n	8008afa <slalom_test+0x5c6>
				case 3:
					//----slalom右折----
					printf("slalom turn right .\n");
 80086f6:	4846      	ldr	r0, [pc, #280]	; (8008810 <slalom_test+0x2dc>)
 80086f8:	f008 f8ba 	bl	8010870 <puts>
//					run_mode = LOW;
					half_sectionA();
 80086fc:	f7fd f992 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008700:	2300      	movs	r3, #0
 8008702:	643b      	str	r3, [r7, #64]	; 0x40
 8008704:	e004      	b.n	8008710 <slalom_test+0x1dc>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 8008706:	f7fd fe83 	bl	8006410 <slalom_R90>
					for(int i = 0; i < 1; i++){
 800870a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800870c:	3301      	adds	r3, #1
 800870e:	643b      	str	r3, [r7, #64]	; 0x40
 8008710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008712:	2b00      	cmp	r3, #0
 8008714:	ddf7      	ble.n	8008706 <slalom_test+0x1d2>
					}
					half_sectionD();
 8008716:	f7fd f9cf 	bl	8005ab8 <half_sectionD>
					break;
 800871a:	e1ee      	b.n	8008afa <slalom_test+0x5c6>
				case 4:
					//----slalom左折----
					printf("slalom turn left .\n");
 800871c:	483d      	ldr	r0, [pc, #244]	; (8008814 <slalom_test+0x2e0>)
 800871e:	f008 f8a7 	bl	8010870 <puts>
//					run_mode = LOW;
					half_sectionA();
 8008722:	f7fd f97f 	bl	8005a24 <half_sectionA>
					MF.FLAG.LOG = 1;
 8008726:	4a3c      	ldr	r2, [pc, #240]	; (8008818 <slalom_test+0x2e4>)
 8008728:	8813      	ldrh	r3, [r2, #0]
 800872a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800872e:	8013      	strh	r3, [r2, #0]
					for(int i = 0; i < 1; i++){
 8008730:	2300      	movs	r3, #0
 8008732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008734:	e004      	b.n	8008740 <slalom_test+0x20c>
						slalom_L90();				//16回右90度回転、つまり4周回転
 8008736:	f7fd ff51 	bl	80065dc <slalom_L90>
					for(int i = 0; i < 1; i++){
 800873a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800873c:	3301      	adds	r3, #1
 800873e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008742:	2b00      	cmp	r3, #0
 8008744:	ddf7      	ble.n	8008736 <slalom_test+0x202>
					}
					MF.FLAG.LOG = 0;
 8008746:	4a34      	ldr	r2, [pc, #208]	; (8008818 <slalom_test+0x2e4>)
 8008748:	8813      	ldrh	r3, [r2, #0]
 800874a:	f36f 1386 	bfc	r3, #6, #1
 800874e:	8013      	strh	r3, [r2, #0]
					half_sectionD();
 8008750:	f7fd f9b2 	bl	8005ab8 <half_sectionD>
					printf("r start\n");
					for(int j = 0; j < log_allay; j++){
						printf("%d\n", get_speed_r[j]);
					}
					printf("r end\n");
*/					break;
 8008754:	e1d1      	b.n	8008afa <slalom_test+0x5c6>
				case 5:
					//----slalom2右折 High Speed----
					printf("slalom turn right High Speed .\n");
 8008756:	4831      	ldr	r0, [pc, #196]	; (800881c <slalom_test+0x2e8>)
 8008758:	f008 f88a 	bl	8010870 <puts>
					run_mode = HIGH;
 800875c:	4b30      	ldr	r3, [pc, #192]	; (8008820 <slalom_test+0x2ec>)
 800875e:	2203      	movs	r2, #3
 8008760:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008762:	f7fd f95f 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 8; i++){
 8008766:	2300      	movs	r3, #0
 8008768:	63bb      	str	r3, [r7, #56]	; 0x38
 800876a:	e00c      	b.n	8008786 <slalom_test+0x252>
						full_led_write(RED);
 800876c:	2001      	movs	r0, #1
 800876e:	f007 fa77 	bl	800fc60 <full_led_write>
						slalom_R90();				//16回右90度回転、つまり4周回転
 8008772:	f7fd fe4d 	bl	8006410 <slalom_R90>
						full_led_write(GREEN);
 8008776:	2002      	movs	r0, #2
 8008778:	f007 fa72 	bl	800fc60 <full_led_write>
						one_sectionU();
 800877c:	f7fd fba0 	bl	8005ec0 <one_sectionU>
					for(int i = 0; i < 8; i++){
 8008780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008782:	3301      	adds	r3, #1
 8008784:	63bb      	str	r3, [r7, #56]	; 0x38
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	2b07      	cmp	r3, #7
 800878a:	ddef      	ble.n	800876c <slalom_test+0x238>
					}
					full_led_write(BLUE);
 800878c:	2003      	movs	r0, #3
 800878e:	f007 fa67 	bl	800fc60 <full_led_write>
					half_sectionD();
 8008792:	f7fd f991 	bl	8005ab8 <half_sectionD>
					break;
 8008796:	e1b0      	b.n	8008afa <slalom_test+0x5c6>
				case 6:
					//----slalom2左折 High Speed----
					printf("slalom turn left High Speed .\n");
 8008798:	4822      	ldr	r0, [pc, #136]	; (8008824 <slalom_test+0x2f0>)
 800879a:	f008 f869 	bl	8010870 <puts>
					run_mode = HIGH;
 800879e:	4b20      	ldr	r3, [pc, #128]	; (8008820 <slalom_test+0x2ec>)
 80087a0:	2203      	movs	r2, #3
 80087a2:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 80087a4:	f7fd f93e 	bl	8005a24 <half_sectionA>
					MF.FLAG.LOG = 1;
 80087a8:	4a1b      	ldr	r2, [pc, #108]	; (8008818 <slalom_test+0x2e4>)
 80087aa:	8813      	ldrh	r3, [r2, #0]
 80087ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b0:	8013      	strh	r3, [r2, #0]
					for(int i = 0; i < 1; i++){
 80087b2:	2300      	movs	r3, #0
 80087b4:	637b      	str	r3, [r7, #52]	; 0x34
 80087b6:	e00c      	b.n	80087d2 <slalom_test+0x29e>
						full_led_write(RED);
 80087b8:	2001      	movs	r0, #1
 80087ba:	f007 fa51 	bl	800fc60 <full_led_write>
						slalom_L90();				//16回左90度回転、つまり4周回転
 80087be:	f7fd ff0d 	bl	80065dc <slalom_L90>
						MF.FLAG.LOG = 0;
 80087c2:	4a15      	ldr	r2, [pc, #84]	; (8008818 <slalom_test+0x2e4>)
 80087c4:	8813      	ldrh	r3, [r2, #0]
 80087c6:	f36f 1386 	bfc	r3, #6, #1
 80087ca:	8013      	strh	r3, [r2, #0]
					for(int i = 0; i < 1; i++){
 80087cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ce:	3301      	adds	r3, #1
 80087d0:	637b      	str	r3, [r7, #52]	; 0x34
 80087d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	ddef      	ble.n	80087b8 <slalom_test+0x284>
//						full_led_write(GREEN);
//						one_sectionU();
					}
					full_led_write(BLUE);
 80087d8:	2003      	movs	r0, #3
 80087da:	f007 fa41 	bl	800fc60 <full_led_write>
					half_sectionD();
 80087de:	f7fd f96b 	bl	8005ab8 <half_sectionD>
					while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET);
 80087e2:	bf00      	nop
 80087e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80087e8:	4808      	ldr	r0, [pc, #32]	; (800880c <slalom_test+0x2d8>)
 80087ea:	f7f9 fd73 	bl	80022d4 <HAL_GPIO_ReadPin>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d0f7      	beq.n	80087e4 <slalom_test+0x2b0>
					printf("omega start\n");
 80087f4:	480c      	ldr	r0, [pc, #48]	; (8008828 <slalom_test+0x2f4>)
 80087f6:	f008 f83b 	bl	8010870 <puts>
					for(int j = 0; j < log_allay; j++){
 80087fa:	2300      	movs	r3, #0
 80087fc:	633b      	str	r3, [r7, #48]	; 0x30
 80087fe:	e020      	b.n	8008842 <slalom_test+0x30e>
 8008800:	08011a6c 	.word	0x08011a6c
 8008804:	20000af4 	.word	0x20000af4
 8008808:	080119c4 	.word	0x080119c4
 800880c:	40020000 	.word	0x40020000
 8008810:	08011a88 	.word	0x08011a88
 8008814:	08011a9c 	.word	0x08011a9c
 8008818:	20000f74 	.word	0x20000f74
 800881c:	08011ab0 	.word	0x08011ab0
 8008820:	20000456 	.word	0x20000456
 8008824:	08011ad0 	.word	0x08011ad0
 8008828:	08011af0 	.word	0x08011af0
						printf("%d\n", get_omega[j]);
 800882c:	4ab5      	ldr	r2, [pc, #724]	; (8008b04 <slalom_test+0x5d0>)
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008834:	4619      	mov	r1, r3
 8008836:	48b4      	ldr	r0, [pc, #720]	; (8008b08 <slalom_test+0x5d4>)
 8008838:	f007 ffa6 	bl	8010788 <iprintf>
					for(int j = 0; j < log_allay; j++){
 800883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883e:	3301      	adds	r3, #1
 8008840:	633b      	str	r3, [r7, #48]	; 0x30
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	2bc7      	cmp	r3, #199	; 0xc7
 8008846:	ddf1      	ble.n	800882c <slalom_test+0x2f8>
					}
					printf("omega end\n");
 8008848:	48b0      	ldr	r0, [pc, #704]	; (8008b0c <slalom_test+0x5d8>)
 800884a:	f008 f811 	bl	8010870 <puts>
					while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET);
 800884e:	bf00      	nop
 8008850:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008854:	48ae      	ldr	r0, [pc, #696]	; (8008b10 <slalom_test+0x5dc>)
 8008856:	f7f9 fd3d 	bl	80022d4 <HAL_GPIO_ReadPin>
 800885a:	4603      	mov	r3, r0
 800885c:	2b01      	cmp	r3, #1
 800885e:	d0f7      	beq.n	8008850 <slalom_test+0x31c>
					for(int j = 0; j < log_allay; j++){
 8008860:	2300      	movs	r3, #0
 8008862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008864:	e00a      	b.n	800887c <slalom_test+0x348>
						printf("%d\n", get_speed_l[j]);
 8008866:	4aab      	ldr	r2, [pc, #684]	; (8008b14 <slalom_test+0x5e0>)
 8008868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800886e:	4619      	mov	r1, r3
 8008870:	48a5      	ldr	r0, [pc, #660]	; (8008b08 <slalom_test+0x5d4>)
 8008872:	f007 ff89 	bl	8010788 <iprintf>
					for(int j = 0; j < log_allay; j++){
 8008876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008878:	3301      	adds	r3, #1
 800887a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800887c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887e:	2bc7      	cmp	r3, #199	; 0xc7
 8008880:	ddf1      	ble.n	8008866 <slalom_test+0x332>
					}
					printf("l end\n");
 8008882:	48a5      	ldr	r0, [pc, #660]	; (8008b18 <slalom_test+0x5e4>)
 8008884:	f007 fff4 	bl	8010870 <puts>
					while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET);
 8008888:	bf00      	nop
 800888a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800888e:	48a0      	ldr	r0, [pc, #640]	; (8008b10 <slalom_test+0x5dc>)
 8008890:	f7f9 fd20 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008894:	4603      	mov	r3, r0
 8008896:	2b01      	cmp	r3, #1
 8008898:	d0f7      	beq.n	800888a <slalom_test+0x356>
					printf("r start\n");
 800889a:	48a0      	ldr	r0, [pc, #640]	; (8008b1c <slalom_test+0x5e8>)
 800889c:	f007 ffe8 	bl	8010870 <puts>
					for(int j = 0; j < log_allay; j++){
 80088a0:	2300      	movs	r3, #0
 80088a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80088a4:	e00a      	b.n	80088bc <slalom_test+0x388>
						printf("%d\n", get_speed_r[j]);
 80088a6:	4a9e      	ldr	r2, [pc, #632]	; (8008b20 <slalom_test+0x5ec>)
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ae:	4619      	mov	r1, r3
 80088b0:	4895      	ldr	r0, [pc, #596]	; (8008b08 <slalom_test+0x5d4>)
 80088b2:	f007 ff69 	bl	8010788 <iprintf>
					for(int j = 0; j < log_allay; j++){
 80088b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b8:	3301      	adds	r3, #1
 80088ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	2bc7      	cmp	r3, #199	; 0xc7
 80088c0:	ddf1      	ble.n	80088a6 <slalom_test+0x372>
					}
					printf("r end\n");
 80088c2:	4898      	ldr	r0, [pc, #608]	; (8008b24 <slalom_test+0x5f0>)
 80088c4:	f007 ffd4 	bl	8010870 <puts>
					break;
 80088c8:	e117      	b.n	8008afa <slalom_test+0x5c6>
				case 7:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 80088ca:	4897      	ldr	r0, [pc, #604]	; (8008b28 <slalom_test+0x5f4>)
 80088cc:	f007 ffd0 	bl	8010870 <puts>
					run_mode = LOW;
 80088d0:	4b96      	ldr	r3, [pc, #600]	; (8008b2c <slalom_test+0x5f8>)
 80088d2:	2201      	movs	r2, #1
 80088d4:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 80088d6:	f7fd f8a5 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 80088da:	2300      	movs	r3, #0
 80088dc:	627b      	str	r3, [r7, #36]	; 0x24
 80088de:	e007      	b.n	80088f0 <slalom_test+0x3bc>
						full_led_write(GREEN);
 80088e0:	2002      	movs	r0, #2
 80088e2:	f007 f9bd 	bl	800fc60 <full_led_write>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 80088e6:	f7fd ff53 	bl	8006790 <Lslalom_R90>
					for(int i = 0; i < 1; i++){
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	3301      	adds	r3, #1
 80088ee:	627b      	str	r3, [r7, #36]	; 0x24
 80088f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	ddf4      	ble.n	80088e0 <slalom_test+0x3ac>
					}
					full_led_write(BLUE);
 80088f6:	2003      	movs	r0, #3
 80088f8:	f007 f9b2 	bl	800fc60 <full_led_write>
					half_sectionD();
 80088fc:	f7fd f8dc 	bl	8005ab8 <half_sectionD>
					break;
 8008900:	e0fb      	b.n	8008afa <slalom_test+0x5c6>
				case 8:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 8008902:	488b      	ldr	r0, [pc, #556]	; (8008b30 <slalom_test+0x5fc>)
 8008904:	f007 ffb4 	bl	8010870 <puts>
					run_mode = LOW;
 8008908:	4b88      	ldr	r3, [pc, #544]	; (8008b2c <slalom_test+0x5f8>)
 800890a:	2201      	movs	r2, #1
 800890c:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 800890e:	f7fd f889 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008912:	2300      	movs	r3, #0
 8008914:	623b      	str	r3, [r7, #32]
 8008916:	e007      	b.n	8008928 <slalom_test+0x3f4>
						full_led_write(GREEN);
 8008918:	2002      	movs	r0, #2
 800891a:	f007 f9a1 	bl	800fc60 <full_led_write>
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 800891e:	f7fe f80d 	bl	800693c <Lslalom_L90>
					for(int i = 0; i < 1; i++){
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	3301      	adds	r3, #1
 8008926:	623b      	str	r3, [r7, #32]
 8008928:	6a3b      	ldr	r3, [r7, #32]
 800892a:	2b00      	cmp	r3, #0
 800892c:	ddf4      	ble.n	8008918 <slalom_test+0x3e4>
					}
					full_led_write(BLUE);
 800892e:	2003      	movs	r0, #3
 8008930:	f007 f996 	bl	800fc60 <full_led_write>
					half_sectionD();
 8008934:	f7fd f8c0 	bl	8005ab8 <half_sectionD>
					break;
 8008938:	e0df      	b.n	8008afa <slalom_test+0x5c6>
				case 9:
					//----Lslalom2右折 High Speed----
					printf("Lslalom turn right High Speed .\n");
 800893a:	487e      	ldr	r0, [pc, #504]	; (8008b34 <slalom_test+0x600>)
 800893c:	f007 ff98 	bl	8010870 <puts>
					run_mode = HIGH;
 8008940:	4b7a      	ldr	r3, [pc, #488]	; (8008b2c <slalom_test+0x5f8>)
 8008942:	2203      	movs	r2, #3
 8008944:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008946:	f7fd f86d 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 800894a:	2300      	movs	r3, #0
 800894c:	61fb      	str	r3, [r7, #28]
 800894e:	e007      	b.n	8008960 <slalom_test+0x42c>
						full_led_write(GREEN);
 8008950:	2002      	movs	r0, #2
 8008952:	f007 f985 	bl	800fc60 <full_led_write>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 8008956:	f7fd ff1b 	bl	8006790 <Lslalom_R90>
					for(int i = 0; i < 1; i++){
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	3301      	adds	r3, #1
 800895e:	61fb      	str	r3, [r7, #28]
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	2b00      	cmp	r3, #0
 8008964:	ddf4      	ble.n	8008950 <slalom_test+0x41c>
					}
					full_led_write(BLUE);
 8008966:	2003      	movs	r0, #3
 8008968:	f007 f97a 	bl	800fc60 <full_led_write>
					half_sectionD();
 800896c:	f7fd f8a4 	bl	8005ab8 <half_sectionD>
					break;
 8008970:	e0c3      	b.n	8008afa <slalom_test+0x5c6>
				case 10:
					//----Lslalom2左折 High Speed----
					printf("Lslalom turn left High Speed .\n");
 8008972:	4871      	ldr	r0, [pc, #452]	; (8008b38 <slalom_test+0x604>)
 8008974:	f007 ff7c 	bl	8010870 <puts>
					run_mode = HIGH;
 8008978:	4b6c      	ldr	r3, [pc, #432]	; (8008b2c <slalom_test+0x5f8>)
 800897a:	2203      	movs	r2, #3
 800897c:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 800897e:	f7fd f851 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008982:	2300      	movs	r3, #0
 8008984:	61bb      	str	r3, [r7, #24]
 8008986:	e007      	b.n	8008998 <slalom_test+0x464>
						full_led_write(GREEN);
 8008988:	2002      	movs	r0, #2
 800898a:	f007 f969 	bl	800fc60 <full_led_write>
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 800898e:	f7fd ffd5 	bl	800693c <Lslalom_L90>
					for(int i = 0; i < 1; i++){
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	3301      	adds	r3, #1
 8008996:	61bb      	str	r3, [r7, #24]
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	ddf4      	ble.n	8008988 <slalom_test+0x454>
					}
					full_led_write(BLUE);
 800899e:	2003      	movs	r0, #3
 80089a0:	f007 f95e 	bl	800fc60 <full_led_write>
					half_sectionD();
 80089a4:	f7fd f888 	bl	8005ab8 <half_sectionD>
					break;
 80089a8:	e0a7      	b.n	8008afa <slalom_test+0x5c6>
				case 11:
					//----Lslalom3右折 High High Speed----
					printf("Lslalom turn right High High Speed .\n");
 80089aa:	4864      	ldr	r0, [pc, #400]	; (8008b3c <slalom_test+0x608>)
 80089ac:	f007 ff60 	bl	8010870 <puts>
					run_mode = HIGH_HIGH;
 80089b0:	4b5e      	ldr	r3, [pc, #376]	; (8008b2c <slalom_test+0x5f8>)
 80089b2:	2204      	movs	r2, #4
 80089b4:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 80089b6:	f7fd f835 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 80089ba:	2300      	movs	r3, #0
 80089bc:	617b      	str	r3, [r7, #20]
 80089be:	e007      	b.n	80089d0 <slalom_test+0x49c>
						full_led_write(GREEN);
 80089c0:	2002      	movs	r0, #2
 80089c2:	f007 f94d 	bl	800fc60 <full_led_write>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 80089c6:	f7fd fee3 	bl	8006790 <Lslalom_R90>
					for(int i = 0; i < 1; i++){
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	3301      	adds	r3, #1
 80089ce:	617b      	str	r3, [r7, #20]
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	ddf4      	ble.n	80089c0 <slalom_test+0x48c>
					}
					full_led_write(BLUE);
 80089d6:	2003      	movs	r0, #3
 80089d8:	f007 f942 	bl	800fc60 <full_led_write>
					half_sectionD();
 80089dc:	f7fd f86c 	bl	8005ab8 <half_sectionD>
					break;
 80089e0:	e08b      	b.n	8008afa <slalom_test+0x5c6>
				case 12:
					//----Lslalom3左折 High High Speed----
					printf("Lslalom turn left High High Speed .\n");
 80089e2:	4857      	ldr	r0, [pc, #348]	; (8008b40 <slalom_test+0x60c>)
 80089e4:	f007 ff44 	bl	8010870 <puts>
					run_mode = HIGH_HIGH;
 80089e8:	4b50      	ldr	r3, [pc, #320]	; (8008b2c <slalom_test+0x5f8>)
 80089ea:	2204      	movs	r2, #4
 80089ec:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 80089ee:	f7fd f819 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 80089f2:	2300      	movs	r3, #0
 80089f4:	613b      	str	r3, [r7, #16]
 80089f6:	e007      	b.n	8008a08 <slalom_test+0x4d4>
						full_led_write(GREEN);
 80089f8:	2002      	movs	r0, #2
 80089fa:	f007 f931 	bl	800fc60 <full_led_write>
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 80089fe:	f7fd ff9d 	bl	800693c <Lslalom_L90>
					for(int i = 0; i < 1; i++){
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	3301      	adds	r3, #1
 8008a06:	613b      	str	r3, [r7, #16]
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	ddf4      	ble.n	80089f8 <slalom_test+0x4c4>
					}
					full_led_write(BLUE);
 8008a0e:	2003      	movs	r0, #3
 8008a10:	f007 f926 	bl	800fc60 <full_led_write>
					half_sectionD();
 8008a14:	f7fd f850 	bl	8005ab8 <half_sectionD>
					break;
 8008a18:	e06f      	b.n	8008afa <slalom_test+0x5c6>
				case 13:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 8008a1a:	484a      	ldr	r0, [pc, #296]	; (8008b44 <slalom_test+0x610>)
 8008a1c:	f007 ff28 	bl	8010870 <puts>
					run_mode = LOW;
 8008a20:	4b42      	ldr	r3, [pc, #264]	; (8008b2c <slalom_test+0x5f8>)
 8008a22:	2201      	movs	r2, #1
 8008a24:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008a26:	f7fc fffd 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60fb      	str	r3, [r7, #12]
 8008a2e:	e007      	b.n	8008a40 <slalom_test+0x50c>
						full_led_write(GREEN);
 8008a30:	2002      	movs	r0, #2
 8008a32:	f007 f915 	bl	800fc60 <full_led_write>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 8008a36:	f7fe f84d 	bl	8006ad4 <Lslalom_R180>
					for(int i = 0; i < 1; i++){
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	ddf4      	ble.n	8008a30 <slalom_test+0x4fc>
					}
					full_led_write(BLUE);
 8008a46:	2003      	movs	r0, #3
 8008a48:	f007 f90a 	bl	800fc60 <full_led_write>
					half_sectionD();
 8008a4c:	f7fd f834 	bl	8005ab8 <half_sectionD>
					break;
 8008a50:	e053      	b.n	8008afa <slalom_test+0x5c6>
				case 14:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 8008a52:	483d      	ldr	r0, [pc, #244]	; (8008b48 <slalom_test+0x614>)
 8008a54:	f007 ff0c 	bl	8010870 <puts>
					run_mode = LOW;
 8008a58:	4b34      	ldr	r3, [pc, #208]	; (8008b2c <slalom_test+0x5f8>)
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008a5e:	f7fc ffe1 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008a62:	2300      	movs	r3, #0
 8008a64:	60bb      	str	r3, [r7, #8]
 8008a66:	e007      	b.n	8008a78 <slalom_test+0x544>
						full_led_write(GREEN);
 8008a68:	2002      	movs	r0, #2
 8008a6a:	f007 f8f9 	bl	800fc60 <full_led_write>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 8008a6e:	f7fe f913 	bl	8006c98 <Lslalom_L180>
					for(int i = 0; i < 1; i++){
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	3301      	adds	r3, #1
 8008a76:	60bb      	str	r3, [r7, #8]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	ddf4      	ble.n	8008a68 <slalom_test+0x534>
					}
					full_led_write(BLUE);
 8008a7e:	2003      	movs	r0, #3
 8008a80:	f007 f8ee 	bl	800fc60 <full_led_write>
					half_sectionD();
 8008a84:	f7fd f818 	bl	8005ab8 <half_sectionD>
					break;
 8008a88:	e037      	b.n	8008afa <slalom_test+0x5c6>
				case 15:
					//----Lslalom右180 High Speed----
					printf("Lslalom turn right & right High Speed .\n");
 8008a8a:	4830      	ldr	r0, [pc, #192]	; (8008b4c <slalom_test+0x618>)
 8008a8c:	f007 fef0 	bl	8010870 <puts>
					run_mode = HIGH;
 8008a90:	4b26      	ldr	r3, [pc, #152]	; (8008b2c <slalom_test+0x5f8>)
 8008a92:	2203      	movs	r2, #3
 8008a94:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008a96:	f7fc ffc5 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	607b      	str	r3, [r7, #4]
 8008a9e:	e007      	b.n	8008ab0 <slalom_test+0x57c>
						full_led_write(GREEN);
 8008aa0:	2002      	movs	r0, #2
 8008aa2:	f007 f8dd 	bl	800fc60 <full_led_write>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 8008aa6:	f7fe f815 	bl	8006ad4 <Lslalom_R180>
					for(int i = 0; i < 1; i++){
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	3301      	adds	r3, #1
 8008aae:	607b      	str	r3, [r7, #4]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	ddf4      	ble.n	8008aa0 <slalom_test+0x56c>
					}
					full_led_write(BLUE);
 8008ab6:	2003      	movs	r0, #3
 8008ab8:	f007 f8d2 	bl	800fc60 <full_led_write>
					half_sectionD();
 8008abc:	f7fc fffc 	bl	8005ab8 <half_sectionD>
					break;
 8008ac0:	e01b      	b.n	8008afa <slalom_test+0x5c6>
				case 16:
					//----Lslalom左180 High Speed----
					printf("Lslalom turn left & left High Speed .\n");
 8008ac2:	4823      	ldr	r0, [pc, #140]	; (8008b50 <slalom_test+0x61c>)
 8008ac4:	f007 fed4 	bl	8010870 <puts>
					run_mode = HIGH;
 8008ac8:	4b18      	ldr	r3, [pc, #96]	; (8008b2c <slalom_test+0x5f8>)
 8008aca:	2203      	movs	r2, #3
 8008acc:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008ace:	f7fc ffa9 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	603b      	str	r3, [r7, #0]
 8008ad6:	e007      	b.n	8008ae8 <slalom_test+0x5b4>
						full_led_write(GREEN);
 8008ad8:	2002      	movs	r0, #2
 8008ada:	f007 f8c1 	bl	800fc60 <full_led_write>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 8008ade:	f7fe f8db 	bl	8006c98 <Lslalom_L180>
					for(int i = 0; i < 1; i++){
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	603b      	str	r3, [r7, #0]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	ddf4      	ble.n	8008ad8 <slalom_test+0x5a4>
					}
					full_led_write(BLUE);
 8008aee:	2003      	movs	r0, #3
 8008af0:	f007 f8b6 	bl	800fc60 <full_led_write>
					half_sectionD();
 8008af4:	f7fc ffe0 	bl	8005ab8 <half_sectionD>
					break;
 8008af8:	bf00      	nop

			  }
			  full_led_write(RED);
 8008afa:	2001      	movs	r0, #1
 8008afc:	f007 f8b0 	bl	800fc60 <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008b00:	e523      	b.n	800854a <slalom_test+0x16>
 8008b02:	bf00      	nop
 8008b04:	200012b0 	.word	0x200012b0
 8008b08:	08011afc 	.word	0x08011afc
 8008b0c:	08011b00 	.word	0x08011b00
 8008b10:	40020000 	.word	0x40020000
 8008b14:	20000784 	.word	0x20000784
 8008b18:	08011b0c 	.word	0x08011b0c
 8008b1c:	08011b14 	.word	0x08011b14
 8008b20:	2000045c 	.word	0x2000045c
 8008b24:	08011b1c 	.word	0x08011b1c
 8008b28:	08011b24 	.word	0x08011b24
 8008b2c:	20000456 	.word	0x20000456
 8008b30:	08011b3c 	.word	0x08011b3c
 8008b34:	08011b50 	.word	0x08011b50
 8008b38:	08011b70 	.word	0x08011b70
 8008b3c:	08011b90 	.word	0x08011b90
 8008b40:	08011bb8 	.word	0x08011bb8
 8008b44:	08011bdc 	.word	0x08011bdc
 8008b48:	08011bfc 	.word	0x08011bfc
 8008b4c:	08011c18 	.word	0x08011c18
 8008b50:	08011c40 	.word	0x08011c40

08008b54 <v_test>:
//v_test
// 斜め走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_test(void){
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b096      	sub	sp, #88	; 0x58
 8008b58:	af00      	add	r7, sp, #0

	int mode = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	657b      	str	r3, [r7, #84]	; 0x54
	printf("Test V Run, Mode : %d\n", mode);
 8008b5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b60:	48bf      	ldr	r0, [pc, #764]	; (8008e60 <v_test+0x30c>)
 8008b62:	f007 fe11 	bl	8010788 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	b2d8      	uxtb	r0, r3
 8008b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	f003 0302 	and.w	r3, r3, #2
 8008b78:	b2d9      	uxtb	r1, r3
 8008b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	f003 0304 	and.w	r3, r3, #4
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	461a      	mov	r2, r3
 8008b86:	f007 f831 	bl	800fbec <led_write>
		  if(dist_r >= 20){
 8008b8a:	4bb6      	ldr	r3, [pc, #728]	; (8008e64 <v_test+0x310>)
 8008b8c:	edd3 7a00 	vldr	s15, [r3]
 8008b90:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b9c:	db20      	blt.n	8008be0 <v_test+0x8c>
			  mode++;
 8008b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	657b      	str	r3, [r7, #84]	; 0x54
			  dist_r = 0;
 8008ba4:	4baf      	ldr	r3, [pc, #700]	; (8008e64 <v_test+0x310>)
 8008ba6:	f04f 0200 	mov.w	r2, #0
 8008baa:	601a      	str	r2, [r3, #0]
			  if(mode > 23){
 8008bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bae:	2b17      	cmp	r3, #23
 8008bb0:	dd01      	ble.n	8008bb6 <v_test+0x62>
				  mode = 0;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	657b      	str	r3, [r7, #84]	; 0x54
			  }
			  if(mode < 8){
 8008bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bb8:	2b07      	cmp	r3, #7
 8008bba:	dc03      	bgt.n	8008bc4 <v_test+0x70>
				  full_led_write(WHITE);
 8008bbc:	2007      	movs	r0, #7
 8008bbe:	f007 f84f 	bl	800fc60 <full_led_write>
 8008bc2:	e009      	b.n	8008bd8 <v_test+0x84>
			  }else if(mode < 16){
 8008bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bc6:	2b0f      	cmp	r3, #15
 8008bc8:	dc03      	bgt.n	8008bd2 <v_test+0x7e>
				  full_led_write(BLUEGREEN);
 8008bca:	2004      	movs	r0, #4
 8008bcc:	f007 f848 	bl	800fc60 <full_led_write>
 8008bd0:	e002      	b.n	8008bd8 <v_test+0x84>
			  }else{
				  full_led_write(PURPLE);
 8008bd2:	2005      	movs	r0, #5
 8008bd4:	f007 f844 	bl	800fc60 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 8008bd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bda:	48a3      	ldr	r0, [pc, #652]	; (8008e68 <v_test+0x314>)
 8008bdc:	f007 fdd4 	bl	8010788 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8008be0:	4ba0      	ldr	r3, [pc, #640]	; (8008e64 <v_test+0x310>)
 8008be2:	edd3 7a00 	vldr	s15, [r3]
 8008be6:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8008bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf2:	d820      	bhi.n	8008c36 <v_test+0xe2>
			  mode--;
 8008bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	657b      	str	r3, [r7, #84]	; 0x54
			  dist_r = 0;
 8008bfa:	4b9a      	ldr	r3, [pc, #616]	; (8008e64 <v_test+0x310>)
 8008bfc:	f04f 0200 	mov.w	r2, #0
 8008c00:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8008c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	da01      	bge.n	8008c0c <v_test+0xb8>
				  mode = 23;
 8008c08:	2317      	movs	r3, #23
 8008c0a:	657b      	str	r3, [r7, #84]	; 0x54
			  }
			  if(mode < 8){
 8008c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c0e:	2b07      	cmp	r3, #7
 8008c10:	dc03      	bgt.n	8008c1a <v_test+0xc6>
				  full_led_write(WHITE);
 8008c12:	2007      	movs	r0, #7
 8008c14:	f007 f824 	bl	800fc60 <full_led_write>
 8008c18:	e009      	b.n	8008c2e <v_test+0xda>
			  }else if(mode < 16){
 8008c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c1c:	2b0f      	cmp	r3, #15
 8008c1e:	dc03      	bgt.n	8008c28 <v_test+0xd4>
				  full_led_write(BLUEGREEN);
 8008c20:	2004      	movs	r0, #4
 8008c22:	f007 f81d 	bl	800fc60 <full_led_write>
 8008c26:	e002      	b.n	8008c2e <v_test+0xda>
			  }else{
				  full_led_write(PURPLE);
 8008c28:	2005      	movs	r0, #5
 8008c2a:	f007 f819 	bl	800fc60 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 8008c2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c30:	488d      	ldr	r0, [pc, #564]	; (8008e68 <v_test+0x314>)
 8008c32:	f007 fda9 	bl	8010788 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8008c36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008c3a:	488c      	ldr	r0, [pc, #560]	; (8008e6c <v_test+0x318>)
 8008c3c:	f7f9 fb4a 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d18f      	bne.n	8008b66 <v_test+0x12>
			  HAL_Delay(50);
 8008c46:	2032      	movs	r0, #50	; 0x32
 8008c48:	f7f8 f9e8 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8008c4c:	bf00      	nop
 8008c4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008c52:	4886      	ldr	r0, [pc, #536]	; (8008e6c <v_test+0x318>)
 8008c54:	f7f9 fb3e 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d0f7      	beq.n	8008c4e <v_test+0xfa>
			  drive_ready();
 8008c5e:	f7fc f809 	bl	8004c74 <drive_ready>

			  MF.FLAG.XDIR = 1;
 8008c62:	4a83      	ldr	r2, [pc, #524]	; (8008e70 <v_test+0x31c>)
 8008c64:	8813      	ldrh	r3, [r2, #0]
 8008c66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008c6a:	8013      	strh	r3, [r2, #0]
			  v_flag = 0;
 8008c6c:	4b81      	ldr	r3, [pc, #516]	; (8008e74 <v_test+0x320>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	701a      	strb	r2, [r3, #0]
			  get_base();
 8008c72:	f006 ff63 	bl	800fb3c <get_base>

			  switch(mode){
 8008c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c78:	2b14      	cmp	r3, #20
 8008c7a:	f200 8247 	bhi.w	800910c <v_test+0x5b8>
 8008c7e:	a201      	add	r2, pc, #4	; (adr r2, 8008c84 <v_test+0x130>)
 8008c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c84:	08008cd9 	.word	0x08008cd9
 8008c88:	08008cdf 	.word	0x08008cdf
 8008c8c:	08008d11 	.word	0x08008d11
 8008c90:	08008d43 	.word	0x08008d43
 8008c94:	08008d7d 	.word	0x08008d7d
 8008c98:	08008db7 	.word	0x08008db7
 8008c9c:	08008de9 	.word	0x08008de9
 8008ca0:	08008e1b 	.word	0x08008e1b
 8008ca4:	08008e49 	.word	0x08008e49
 8008ca8:	08008ead 	.word	0x08008ead
 8008cac:	08008edf 	.word	0x08008edf
 8008cb0:	08008f11 	.word	0x08008f11
 8008cb4:	08008f43 	.word	0x08008f43
 8008cb8:	08008f75 	.word	0x08008f75
 8008cbc:	08008faf 	.word	0x08008faf
 8008cc0:	08008fe9 	.word	0x08008fe9
 8008cc4:	0800901b 	.word	0x0800901b
 8008cc8:	0800904d 	.word	0x0800904d
 8008ccc:	0800907b 	.word	0x0800907b
 8008cd0:	080090a9 	.word	0x080090a9
 8008cd4:	080090db 	.word	0x080090db
				case 0:
					get_base();
 8008cd8:	f006 ff30 	bl	800fb3c <get_base>
					break;
 8008cdc:	e216      	b.n	800910c <v_test+0x5b8>
				case 1:
					//----V右45----
					printf("V 45 right .\n");
 8008cde:	4866      	ldr	r0, [pc, #408]	; (8008e78 <v_test+0x324>)
 8008ce0:	f007 fdc6 	bl	8010870 <puts>
					run_mode = LOW;
 8008ce4:	4b65      	ldr	r3, [pc, #404]	; (8008e7c <v_test+0x328>)
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008cea:	f7fc fe9b 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 32; i++){
 8008cee:	2300      	movs	r3, #0
 8008cf0:	653b      	str	r3, [r7, #80]	; 0x50
 8008cf2:	e004      	b.n	8008cfe <v_test+0x1aa>
						v_R45();
 8008cf4:	f7fe f8ac 	bl	8006e50 <v_R45>
					for(int i = 0; i < 32; i++){
 8008cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	653b      	str	r3, [r7, #80]	; 0x50
 8008cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d00:	2b1f      	cmp	r3, #31
 8008d02:	ddf7      	ble.n	8008cf4 <v_test+0x1a0>
					}
					full_led_write(BLUE);
 8008d04:	2003      	movs	r0, #3
 8008d06:	f006 ffab 	bl	800fc60 <full_led_write>
					half_sectionD();
 8008d0a:	f7fc fed5 	bl	8005ab8 <half_sectionD>
					break;
 8008d0e:	e1fd      	b.n	800910c <v_test+0x5b8>
				case 2:
					//----V左45----
					printf("V 45 left .\n");
 8008d10:	485b      	ldr	r0, [pc, #364]	; (8008e80 <v_test+0x32c>)
 8008d12:	f007 fdad 	bl	8010870 <puts>
					run_mode = LOW;
 8008d16:	4b59      	ldr	r3, [pc, #356]	; (8008e7c <v_test+0x328>)
 8008d18:	2201      	movs	r2, #1
 8008d1a:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008d1c:	f7fc fe82 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 32; i++){
 8008d20:	2300      	movs	r3, #0
 8008d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d24:	e004      	b.n	8008d30 <v_test+0x1dc>
						v_L45();
 8008d26:	f7fe f9db 	bl	80070e0 <v_L45>
					for(int i = 0; i < 32; i++){
 8008d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d32:	2b1f      	cmp	r3, #31
 8008d34:	ddf7      	ble.n	8008d26 <v_test+0x1d2>
					}
					full_led_write(BLUE);
 8008d36:	2003      	movs	r0, #3
 8008d38:	f006 ff92 	bl	800fc60 <full_led_write>
					half_sectionD();
 8008d3c:	f7fc febc 	bl	8005ab8 <half_sectionD>
					break;
 8008d40:	e1e4      	b.n	800910c <v_test+0x5b8>
				case 3:
					//----V右90----
					printf("V 90 right .\n");
 8008d42:	4850      	ldr	r0, [pc, #320]	; (8008e84 <v_test+0x330>)
 8008d44:	f007 fd94 	bl	8010870 <puts>
					run_mode = LOW;
 8008d48:	4b4c      	ldr	r3, [pc, #304]	; (8008e7c <v_test+0x328>)
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008d4e:	f7fc fe69 	bl	8005a24 <half_sectionA>
					v_R45();
 8008d52:	f7fe f87d 	bl	8006e50 <v_R45>
					for(int i = 0; i < 1; i++){
 8008d56:	2300      	movs	r3, #0
 8008d58:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d5a:	e004      	b.n	8008d66 <v_test+0x212>
						v_R90();
 8008d5c:	f7fe fc7a 	bl	8007654 <v_R90>
					for(int i = 0; i < 1; i++){
 8008d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d62:	3301      	adds	r3, #1
 8008d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	ddf7      	ble.n	8008d5c <v_test+0x208>
					}
					v_R45();
 8008d6c:	f7fe f870 	bl	8006e50 <v_R45>
					full_led_write(BLUE);
 8008d70:	2003      	movs	r0, #3
 8008d72:	f006 ff75 	bl	800fc60 <full_led_write>
					half_sectionD();
 8008d76:	f7fc fe9f 	bl	8005ab8 <half_sectionD>
					break;
 8008d7a:	e1c7      	b.n	800910c <v_test+0x5b8>
				case 4:
					//----V左90----
					printf("V 90 left .\n");
 8008d7c:	4842      	ldr	r0, [pc, #264]	; (8008e88 <v_test+0x334>)
 8008d7e:	f007 fd77 	bl	8010870 <puts>
					run_mode = LOW;
 8008d82:	4b3e      	ldr	r3, [pc, #248]	; (8008e7c <v_test+0x328>)
 8008d84:	2201      	movs	r2, #1
 8008d86:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008d88:	f7fc fe4c 	bl	8005a24 <half_sectionA>
					v_L45();
 8008d8c:	f7fe f9a8 	bl	80070e0 <v_L45>
					for(int i = 0; i < 1; i++){
 8008d90:	2300      	movs	r3, #0
 8008d92:	647b      	str	r3, [r7, #68]	; 0x44
 8008d94:	e004      	b.n	8008da0 <v_test+0x24c>
						v_L90();
 8008d96:	f7fe fd03 	bl	80077a0 <v_L90>
					for(int i = 0; i < 1; i++){
 8008d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8008da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	ddf7      	ble.n	8008d96 <v_test+0x242>
					}
					v_L45();
 8008da6:	f7fe f99b 	bl	80070e0 <v_L45>
					full_led_write(BLUE);
 8008daa:	2003      	movs	r0, #3
 8008dac:	f006 ff58 	bl	800fc60 <full_led_write>
					half_sectionD();
 8008db0:	f7fc fe82 	bl	8005ab8 <half_sectionD>
					break;
 8008db4:	e1aa      	b.n	800910c <v_test+0x5b8>
				case 5:
					//----V右135----
					printf("V 135 right .\n");
 8008db6:	4835      	ldr	r0, [pc, #212]	; (8008e8c <v_test+0x338>)
 8008db8:	f007 fd5a 	bl	8010870 <puts>
					run_mode = LOW;
 8008dbc:	4b2f      	ldr	r3, [pc, #188]	; (8008e7c <v_test+0x328>)
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008dc2:	f7fc fe2f 	bl	8005a24 <half_sectionA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8008dca:	e004      	b.n	8008dd6 <v_test+0x282>
						v_R135();
 8008dcc:	f7fe fd8a 	bl	80078e4 <v_R135>
					for(int i = 0; i < 1; i++){
 8008dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8008dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	ddf7      	ble.n	8008dcc <v_test+0x278>
					}
//					v_R45();
					full_led_write(BLUE);
 8008ddc:	2003      	movs	r0, #3
 8008dde:	f006 ff3f 	bl	800fc60 <full_led_write>
					half_sectionD();
 8008de2:	f7fc fe69 	bl	8005ab8 <half_sectionD>
					break;
 8008de6:	e191      	b.n	800910c <v_test+0x5b8>
				case 6:
					//----V左135----
					printf("V 135 left .\n");
 8008de8:	4829      	ldr	r0, [pc, #164]	; (8008e90 <v_test+0x33c>)
 8008dea:	f007 fd41 	bl	8010870 <puts>
					run_mode = LOW;
 8008dee:	4b23      	ldr	r3, [pc, #140]	; (8008e7c <v_test+0x328>)
 8008df0:	2201      	movs	r2, #1
 8008df2:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008df4:	f7fc fe16 	bl	8005a24 <half_sectionA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 8008df8:	2300      	movs	r3, #0
 8008dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dfc:	e004      	b.n	8008e08 <v_test+0x2b4>
						v_L135();
 8008dfe:	f7fe febd 	bl	8007b7c <v_L135>
					for(int i = 0; i < 1; i++){
 8008e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e04:	3301      	adds	r3, #1
 8008e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	ddf7      	ble.n	8008dfe <v_test+0x2aa>
					}
//					v_L45();
					full_led_write(BLUE);
 8008e0e:	2003      	movs	r0, #3
 8008e10:	f006 ff26 	bl	800fc60 <full_led_write>
					half_sectionD();
 8008e14:	f7fc fe50 	bl	8005ab8 <half_sectionD>
					break;
 8008e18:	e178      	b.n	800910c <v_test+0x5b8>
				case 7:
					//----V右45D----
					printf("V 45 right .\n");
 8008e1a:	4817      	ldr	r0, [pc, #92]	; (8008e78 <v_test+0x324>)
 8008e1c:	f007 fd28 	bl	8010870 <puts>
					run_mode = LOW;
 8008e20:	4b16      	ldr	r3, [pc, #88]	; (8008e7c <v_test+0x328>)
 8008e22:	2201      	movs	r2, #1
 8008e24:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008e26:	f7fc fdfd 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e2e:	e004      	b.n	8008e3a <v_test+0x2e6>
						v_R45D();
 8008e30:	f7fe fa9a 	bl	8007368 <v_R45D>
					for(int i = 0; i < 1; i++){
 8008e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e36:	3301      	adds	r3, #1
 8008e38:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	ddf7      	ble.n	8008e30 <v_test+0x2dc>
					}
					full_led_write(BLUE);
 8008e40:	2003      	movs	r0, #3
 8008e42:	f006 ff0d 	bl	800fc60 <full_led_write>
					break;
 8008e46:	e161      	b.n	800910c <v_test+0x5b8>
				case 8:
					//----V左45D----
					printf("V 45 left .\n");
 8008e48:	480d      	ldr	r0, [pc, #52]	; (8008e80 <v_test+0x32c>)
 8008e4a:	f007 fd11 	bl	8010870 <puts>
					run_mode = LOW;
 8008e4e:	4b0b      	ldr	r3, [pc, #44]	; (8008e7c <v_test+0x328>)
 8008e50:	2201      	movs	r2, #1
 8008e52:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008e54:	f7fc fde6 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008e58:	2300      	movs	r3, #0
 8008e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e5c:	e01f      	b.n	8008e9e <v_test+0x34a>
 8008e5e:	bf00      	nop
 8008e60:	08011c68 	.word	0x08011c68
 8008e64:	20000af4 	.word	0x20000af4
 8008e68:	080119c4 	.word	0x080119c4
 8008e6c:	40020000 	.word	0x40020000
 8008e70:	20000f74 	.word	0x20000f74
 8008e74:	20000af0 	.word	0x20000af0
 8008e78:	08011c80 	.word	0x08011c80
 8008e7c:	20000456 	.word	0x20000456
 8008e80:	08011c90 	.word	0x08011c90
 8008e84:	08011c9c 	.word	0x08011c9c
 8008e88:	08011cac 	.word	0x08011cac
 8008e8c:	08011cb8 	.word	0x08011cb8
 8008e90:	08011cc8 	.word	0x08011cc8
						v_L45D();
 8008e94:	f7fe fb26 	bl	80074e4 <v_L45D>
					for(int i = 0; i < 1; i++){
 8008e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	ddf7      	ble.n	8008e94 <v_test+0x340>
					}
					full_led_write(BLUE);
 8008ea4:	2003      	movs	r0, #3
 8008ea6:	f006 fedb 	bl	800fc60 <full_led_write>
					break;
 8008eaa:	e12f      	b.n	800910c <v_test+0x5b8>
				case 9:
					//----V右135D----
					printf("V 135 right .\n");
 8008eac:	4899      	ldr	r0, [pc, #612]	; (8009114 <v_test+0x5c0>)
 8008eae:	f007 fcdf 	bl	8010870 <puts>
					run_mode = LOW;
 8008eb2:	4b99      	ldr	r3, [pc, #612]	; (8009118 <v_test+0x5c4>)
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008eb8:	f7fc fdb4 	bl	8005a24 <half_sectionA>
					v_R45();
 8008ebc:	f7fd ffc8 	bl	8006e50 <v_R45>
					for(int i = 0; i < 1; i++){
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	633b      	str	r3, [r7, #48]	; 0x30
 8008ec4:	e004      	b.n	8008ed0 <v_test+0x37c>
						v_R135D();
 8008ec6:	f7fe ff9d 	bl	8007e04 <v_R135D>
					for(int i = 0; i < 1; i++){
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	3301      	adds	r3, #1
 8008ece:	633b      	str	r3, [r7, #48]	; 0x30
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	ddf7      	ble.n	8008ec6 <v_test+0x372>
					}
					full_led_write(BLUE);
 8008ed6:	2003      	movs	r0, #3
 8008ed8:	f006 fec2 	bl	800fc60 <full_led_write>
					break;
 8008edc:	e116      	b.n	800910c <v_test+0x5b8>
				case 10:
					//----V左135D----
					printf("V 135 left .\n");
 8008ede:	488f      	ldr	r0, [pc, #572]	; (800911c <v_test+0x5c8>)
 8008ee0:	f007 fcc6 	bl	8010870 <puts>
					run_mode = LOW;
 8008ee4:	4b8c      	ldr	r3, [pc, #560]	; (8009118 <v_test+0x5c4>)
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008eea:	f7fc fd9b 	bl	8005a24 <half_sectionA>
					v_L45();
 8008eee:	f7fe f8f7 	bl	80070e0 <v_L45>
					for(int i = 0; i < 1; i++){
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ef6:	e004      	b.n	8008f02 <v_test+0x3ae>
						v_L135D();
 8008ef8:	f7ff f874 	bl	8007fe4 <v_L135D>
					for(int i = 0; i < 1; i++){
 8008efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efe:	3301      	adds	r3, #1
 8008f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	ddf7      	ble.n	8008ef8 <v_test+0x3a4>
					}
					full_led_write(BLUE);
 8008f08:	2003      	movs	r0, #3
 8008f0a:	f006 fea9 	bl	800fc60 <full_led_write>
					break;
 8008f0e:	e0fd      	b.n	800910c <v_test+0x5b8>
				case 11:
					//----V右45 High Speed----
					printf("V 45 right .\n");
 8008f10:	4883      	ldr	r0, [pc, #524]	; (8009120 <v_test+0x5cc>)
 8008f12:	f007 fcad 	bl	8010870 <puts>
					run_mode = HIGH;
 8008f16:	4b80      	ldr	r3, [pc, #512]	; (8009118 <v_test+0x5c4>)
 8008f18:	2203      	movs	r2, #3
 8008f1a:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008f1c:	f7fc fd82 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008f20:	2300      	movs	r3, #0
 8008f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f24:	e004      	b.n	8008f30 <v_test+0x3dc>
						v_R45();
 8008f26:	f7fd ff93 	bl	8006e50 <v_R45>
					for(int i = 0; i < 1; i++){
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	ddf7      	ble.n	8008f26 <v_test+0x3d2>
					}
					full_led_write(BLUE);
 8008f36:	2003      	movs	r0, #3
 8008f38:	f006 fe92 	bl	800fc60 <full_led_write>
					half_sectionD();
 8008f3c:	f7fc fdbc 	bl	8005ab8 <half_sectionD>
					break;
 8008f40:	e0e4      	b.n	800910c <v_test+0x5b8>
				case 12:
					//----V左45 High Speed----
					printf("V 45 left .\n");
 8008f42:	4878      	ldr	r0, [pc, #480]	; (8009124 <v_test+0x5d0>)
 8008f44:	f007 fc94 	bl	8010870 <puts>
					run_mode = HIGH;
 8008f48:	4b73      	ldr	r3, [pc, #460]	; (8009118 <v_test+0x5c4>)
 8008f4a:	2203      	movs	r2, #3
 8008f4c:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008f4e:	f7fc fd69 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008f52:	2300      	movs	r3, #0
 8008f54:	627b      	str	r3, [r7, #36]	; 0x24
 8008f56:	e004      	b.n	8008f62 <v_test+0x40e>
						v_L45();
 8008f58:	f7fe f8c2 	bl	80070e0 <v_L45>
					for(int i = 0; i < 1; i++){
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5e:	3301      	adds	r3, #1
 8008f60:	627b      	str	r3, [r7, #36]	; 0x24
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	ddf7      	ble.n	8008f58 <v_test+0x404>
					}
					full_led_write(BLUE);
 8008f68:	2003      	movs	r0, #3
 8008f6a:	f006 fe79 	bl	800fc60 <full_led_write>
					half_sectionD();
 8008f6e:	f7fc fda3 	bl	8005ab8 <half_sectionD>
					break;
 8008f72:	e0cb      	b.n	800910c <v_test+0x5b8>
				case 13:
					//----V右90 High Speed----
					printf("V 90 right .\n");
 8008f74:	486c      	ldr	r0, [pc, #432]	; (8009128 <v_test+0x5d4>)
 8008f76:	f007 fc7b 	bl	8010870 <puts>
					run_mode = HIGH;
 8008f7a:	4b67      	ldr	r3, [pc, #412]	; (8009118 <v_test+0x5c4>)
 8008f7c:	2203      	movs	r2, #3
 8008f7e:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008f80:	f7fc fd50 	bl	8005a24 <half_sectionA>
					v_R45();
 8008f84:	f7fd ff64 	bl	8006e50 <v_R45>
					for(int i = 0; i < 1; i++){
 8008f88:	2300      	movs	r3, #0
 8008f8a:	623b      	str	r3, [r7, #32]
 8008f8c:	e004      	b.n	8008f98 <v_test+0x444>
						v_R90();
 8008f8e:	f7fe fb61 	bl	8007654 <v_R90>
					for(int i = 0; i < 1; i++){
 8008f92:	6a3b      	ldr	r3, [r7, #32]
 8008f94:	3301      	adds	r3, #1
 8008f96:	623b      	str	r3, [r7, #32]
 8008f98:	6a3b      	ldr	r3, [r7, #32]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	ddf7      	ble.n	8008f8e <v_test+0x43a>
					}
					v_R45();
 8008f9e:	f7fd ff57 	bl	8006e50 <v_R45>
					full_led_write(BLUE);
 8008fa2:	2003      	movs	r0, #3
 8008fa4:	f006 fe5c 	bl	800fc60 <full_led_write>
					half_sectionD();
 8008fa8:	f7fc fd86 	bl	8005ab8 <half_sectionD>
					break;
 8008fac:	e0ae      	b.n	800910c <v_test+0x5b8>
				case 14:
					//----V左90 High Speed----
					printf("V 90 left .\n");
 8008fae:	485f      	ldr	r0, [pc, #380]	; (800912c <v_test+0x5d8>)
 8008fb0:	f007 fc5e 	bl	8010870 <puts>
					run_mode = HIGH;
 8008fb4:	4b58      	ldr	r3, [pc, #352]	; (8009118 <v_test+0x5c4>)
 8008fb6:	2203      	movs	r2, #3
 8008fb8:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008fba:	f7fc fd33 	bl	8005a24 <half_sectionA>
					v_L45();
 8008fbe:	f7fe f88f 	bl	80070e0 <v_L45>
					for(int i = 0; i < 1; i++){
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	61fb      	str	r3, [r7, #28]
 8008fc6:	e004      	b.n	8008fd2 <v_test+0x47e>
						v_L90();
 8008fc8:	f7fe fbea 	bl	80077a0 <v_L90>
					for(int i = 0; i < 1; i++){
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	61fb      	str	r3, [r7, #28]
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	ddf7      	ble.n	8008fc8 <v_test+0x474>
					}
					v_L45();
 8008fd8:	f7fe f882 	bl	80070e0 <v_L45>
					full_led_write(BLUE);
 8008fdc:	2003      	movs	r0, #3
 8008fde:	f006 fe3f 	bl	800fc60 <full_led_write>
					half_sectionD();
 8008fe2:	f7fc fd69 	bl	8005ab8 <half_sectionD>
					break;
 8008fe6:	e091      	b.n	800910c <v_test+0x5b8>
				case 15:
					//----V右135 High Speed----
					printf("V 135 right .\n");
 8008fe8:	484a      	ldr	r0, [pc, #296]	; (8009114 <v_test+0x5c0>)
 8008fea:	f007 fc41 	bl	8010870 <puts>
					run_mode = HIGH;
 8008fee:	4b4a      	ldr	r3, [pc, #296]	; (8009118 <v_test+0x5c4>)
 8008ff0:	2203      	movs	r2, #3
 8008ff2:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008ff4:	f7fc fd16 	bl	8005a24 <half_sectionA>
//					v_R452();
					for(int i = 0; i < 1; i++){
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	61bb      	str	r3, [r7, #24]
 8008ffc:	e004      	b.n	8009008 <v_test+0x4b4>
						v_R135();
 8008ffe:	f7fe fc71 	bl	80078e4 <v_R135>
					for(int i = 0; i < 1; i++){
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	3301      	adds	r3, #1
 8009006:	61bb      	str	r3, [r7, #24]
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	2b00      	cmp	r3, #0
 800900c:	ddf7      	ble.n	8008ffe <v_test+0x4aa>
					}
//					v_R452();
					full_led_write(BLUE);
 800900e:	2003      	movs	r0, #3
 8009010:	f006 fe26 	bl	800fc60 <full_led_write>
					half_sectionD();
 8009014:	f7fc fd50 	bl	8005ab8 <half_sectionD>
					break;
 8009018:	e078      	b.n	800910c <v_test+0x5b8>
				case 16:
					//----V左135 High Speed----
					printf("V 135 left .\n");
 800901a:	4840      	ldr	r0, [pc, #256]	; (800911c <v_test+0x5c8>)
 800901c:	f007 fc28 	bl	8010870 <puts>
					run_mode = HIGH;
 8009020:	4b3d      	ldr	r3, [pc, #244]	; (8009118 <v_test+0x5c4>)
 8009022:	2203      	movs	r2, #3
 8009024:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8009026:	f7fc fcfd 	bl	8005a24 <half_sectionA>
//					v_L452();
					for(int i = 0; i < 1; i++){
 800902a:	2300      	movs	r3, #0
 800902c:	617b      	str	r3, [r7, #20]
 800902e:	e004      	b.n	800903a <v_test+0x4e6>
						v_L135();
 8009030:	f7fe fda4 	bl	8007b7c <v_L135>
					for(int i = 0; i < 1; i++){
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	3301      	adds	r3, #1
 8009038:	617b      	str	r3, [r7, #20]
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	2b00      	cmp	r3, #0
 800903e:	ddf7      	ble.n	8009030 <v_test+0x4dc>
					}
//					v_L452();
					full_led_write(BLUE);
 8009040:	2003      	movs	r0, #3
 8009042:	f006 fe0d 	bl	800fc60 <full_led_write>
					half_sectionD();
 8009046:	f7fc fd37 	bl	8005ab8 <half_sectionD>
					break;
 800904a:	e05f      	b.n	800910c <v_test+0x5b8>
				case 17:
					//----V右45D High Speed----
					printf("V 45 right .\n");
 800904c:	4834      	ldr	r0, [pc, #208]	; (8009120 <v_test+0x5cc>)
 800904e:	f007 fc0f 	bl	8010870 <puts>
					run_mode = HIGH;
 8009052:	4b31      	ldr	r3, [pc, #196]	; (8009118 <v_test+0x5c4>)
 8009054:	2203      	movs	r2, #3
 8009056:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8009058:	f7fc fce4 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 800905c:	2300      	movs	r3, #0
 800905e:	613b      	str	r3, [r7, #16]
 8009060:	e004      	b.n	800906c <v_test+0x518>
						v_R45D();
 8009062:	f7fe f981 	bl	8007368 <v_R45D>
					for(int i = 0; i < 1; i++){
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	3301      	adds	r3, #1
 800906a:	613b      	str	r3, [r7, #16]
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	ddf7      	ble.n	8009062 <v_test+0x50e>
					}
					full_led_write(BLUE);
 8009072:	2003      	movs	r0, #3
 8009074:	f006 fdf4 	bl	800fc60 <full_led_write>
					break;
 8009078:	e048      	b.n	800910c <v_test+0x5b8>
				case 18:
					//----V左45D High Speed----
					printf("V 45 left .\n");
 800907a:	482a      	ldr	r0, [pc, #168]	; (8009124 <v_test+0x5d0>)
 800907c:	f007 fbf8 	bl	8010870 <puts>
					run_mode = HIGH;
 8009080:	4b25      	ldr	r3, [pc, #148]	; (8009118 <v_test+0x5c4>)
 8009082:	2203      	movs	r2, #3
 8009084:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8009086:	f7fc fccd 	bl	8005a24 <half_sectionA>
					for(int i = 0; i < 1; i++){
 800908a:	2300      	movs	r3, #0
 800908c:	60fb      	str	r3, [r7, #12]
 800908e:	e004      	b.n	800909a <v_test+0x546>
						v_L45D();
 8009090:	f7fe fa28 	bl	80074e4 <v_L45D>
					for(int i = 0; i < 1; i++){
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	3301      	adds	r3, #1
 8009098:	60fb      	str	r3, [r7, #12]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	ddf7      	ble.n	8009090 <v_test+0x53c>
					}
					full_led_write(BLUE);
 80090a0:	2003      	movs	r0, #3
 80090a2:	f006 fddd 	bl	800fc60 <full_led_write>
					break;
 80090a6:	e031      	b.n	800910c <v_test+0x5b8>
				case 19:
					//----V右135D High Speed----
					printf("V 135 right .\n");
 80090a8:	481a      	ldr	r0, [pc, #104]	; (8009114 <v_test+0x5c0>)
 80090aa:	f007 fbe1 	bl	8010870 <puts>
					run_mode = HIGH;
 80090ae:	4b1a      	ldr	r3, [pc, #104]	; (8009118 <v_test+0x5c4>)
 80090b0:	2203      	movs	r2, #3
 80090b2:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 80090b4:	f7fc fcb6 	bl	8005a24 <half_sectionA>
					v_R45();
 80090b8:	f7fd feca 	bl	8006e50 <v_R45>
					for(int i = 0; i < 1; i++){
 80090bc:	2300      	movs	r3, #0
 80090be:	60bb      	str	r3, [r7, #8]
 80090c0:	e004      	b.n	80090cc <v_test+0x578>
						v_R135D();
 80090c2:	f7fe fe9f 	bl	8007e04 <v_R135D>
					for(int i = 0; i < 1; i++){
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	3301      	adds	r3, #1
 80090ca:	60bb      	str	r3, [r7, #8]
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	ddf7      	ble.n	80090c2 <v_test+0x56e>
					}
					full_led_write(BLUE);
 80090d2:	2003      	movs	r0, #3
 80090d4:	f006 fdc4 	bl	800fc60 <full_led_write>
					break;
 80090d8:	e018      	b.n	800910c <v_test+0x5b8>
				case 20:
					//----V左135D High Speed----
					printf("V 135 left .\n");
 80090da:	4810      	ldr	r0, [pc, #64]	; (800911c <v_test+0x5c8>)
 80090dc:	f007 fbc8 	bl	8010870 <puts>
					run_mode = HIGH;
 80090e0:	4b0d      	ldr	r3, [pc, #52]	; (8009118 <v_test+0x5c4>)
 80090e2:	2203      	movs	r2, #3
 80090e4:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 80090e6:	f7fc fc9d 	bl	8005a24 <half_sectionA>
					v_L45();
 80090ea:	f7fd fff9 	bl	80070e0 <v_L45>
					for(int i = 0; i < 1; i++){
 80090ee:	2300      	movs	r3, #0
 80090f0:	607b      	str	r3, [r7, #4]
 80090f2:	e004      	b.n	80090fe <v_test+0x5aa>
						v_L135D();
 80090f4:	f7fe ff76 	bl	8007fe4 <v_L135D>
					for(int i = 0; i < 1; i++){
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	3301      	adds	r3, #1
 80090fc:	607b      	str	r3, [r7, #4]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	ddf7      	ble.n	80090f4 <v_test+0x5a0>
					}
					full_led_write(BLUE);
 8009104:	2003      	movs	r0, #3
 8009106:	f006 fdab 	bl	800fc60 <full_led_write>
					break;
 800910a:	bf00      	nop
			}
		full_led_write(RED);
 800910c:	2001      	movs	r0, #1
 800910e:	f006 fda7 	bl	800fc60 <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009112:	e528      	b.n	8008b66 <v_test+0x12>
 8009114:	08011cb8 	.word	0x08011cb8
 8009118:	20000456 	.word	0x20000456
 800911c:	08011cc8 	.word	0x08011cc8
 8009120:	08011c80 	.word	0x08011c80
 8009124:	08011c90 	.word	0x08011c90
 8009128:	08011c9c 	.word	0x08011c9c
 800912c:	08011cac 	.word	0x08011cac

08009130 <pass_test>:
//pass_test
// pass圧縮走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_test(void){
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0

	int mode = 0;
 8009136:	2300      	movs	r3, #0
 8009138:	607b      	str	r3, [r7, #4]
	printf("Test pass Run, Mode : %d\n", mode);
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	48b3      	ldr	r0, [pc, #716]	; (800940c <pass_test+0x2dc>)
 800913e:	f007 fb23 	bl	8010788 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	b2db      	uxtb	r3, r3
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	b2d8      	uxtb	r0, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	b2db      	uxtb	r3, r3
 8009150:	f003 0302 	and.w	r3, r3, #2
 8009154:	b2d9      	uxtb	r1, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	b2db      	uxtb	r3, r3
 800915a:	f003 0304 	and.w	r3, r3, #4
 800915e:	b2db      	uxtb	r3, r3
 8009160:	461a      	mov	r2, r3
 8009162:	f006 fd43 	bl	800fbec <led_write>
		  if(dist_r >= 20){
 8009166:	4baa      	ldr	r3, [pc, #680]	; (8009410 <pass_test+0x2e0>)
 8009168:	edd3 7a00 	vldr	s15, [r3]
 800916c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009178:	db0f      	blt.n	800919a <pass_test+0x6a>
			  mode++;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3301      	adds	r3, #1
 800917e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009180:	4ba3      	ldr	r3, [pc, #652]	; (8009410 <pass_test+0x2e0>)
 8009182:	f04f 0200 	mov.w	r2, #0
 8009186:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b07      	cmp	r3, #7
 800918c:	dd01      	ble.n	8009192 <pass_test+0x62>
				  mode = 0;
 800918e:	2300      	movs	r3, #0
 8009190:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009192:	6879      	ldr	r1, [r7, #4]
 8009194:	489f      	ldr	r0, [pc, #636]	; (8009414 <pass_test+0x2e4>)
 8009196:	f007 faf7 	bl	8010788 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800919a:	4b9d      	ldr	r3, [pc, #628]	; (8009410 <pass_test+0x2e0>)
 800919c:	edd3 7a00 	vldr	s15, [r3]
 80091a0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80091a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ac:	d80f      	bhi.n	80091ce <pass_test+0x9e>
			  mode--;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80091b4:	4b96      	ldr	r3, [pc, #600]	; (8009410 <pass_test+0x2e0>)
 80091b6:	f04f 0200 	mov.w	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	da01      	bge.n	80091c6 <pass_test+0x96>
				  mode = 7;
 80091c2:	2307      	movs	r3, #7
 80091c4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80091c6:	6879      	ldr	r1, [r7, #4]
 80091c8:	4892      	ldr	r0, [pc, #584]	; (8009414 <pass_test+0x2e4>)
 80091ca:	f007 fadd 	bl	8010788 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80091ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80091d2:	4891      	ldr	r0, [pc, #580]	; (8009418 <pass_test+0x2e8>)
 80091d4:	f7f9 f87e 	bl	80022d4 <HAL_GPIO_ReadPin>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1b1      	bne.n	8009142 <pass_test+0x12>
			  HAL_Delay(50);
 80091de:	2032      	movs	r0, #50	; 0x32
 80091e0:	f7f7 ff1c 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80091e4:	bf00      	nop
 80091e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80091ea:	488b      	ldr	r0, [pc, #556]	; (8009418 <pass_test+0x2e8>)
 80091ec:	f7f9 f872 	bl	80022d4 <HAL_GPIO_ReadPin>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0f7      	beq.n	80091e6 <pass_test+0xb6>
			  drive_ready();
 80091f6:	f7fb fd3d 	bl	8004c74 <drive_ready>
			  v_flag = 0;
 80091fa:	4b88      	ldr	r3, [pc, #544]	; (800941c <pass_test+0x2ec>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	701a      	strb	r2, [r3, #0]

			  switch(mode){
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b07      	cmp	r3, #7
 8009204:	d89d      	bhi.n	8009142 <pass_test+0x12>
 8009206:	a201      	add	r2, pc, #4	; (adr r2, 800920c <pass_test+0xdc>)
 8009208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920c:	0800922d 	.word	0x0800922d
 8009210:	080092a5 	.word	0x080092a5
 8009214:	0800931d 	.word	0x0800931d
 8009218:	08009395 	.word	0x08009395
 800921c:	08009451 	.word	0x08009451
 8009220:	08009143 	.word	0x08009143
 8009224:	08009143 	.word	0x08009143
 8009228:	08009143 	.word	0x08009143
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800922c:	487c      	ldr	r0, [pc, #496]	; (8009420 <pass_test+0x2f0>)
 800922e:	f007 fb1f 	bl	8010870 <puts>

					MF.FLAG.SCND = 0;
 8009232:	4a7c      	ldr	r2, [pc, #496]	; (8009424 <pass_test+0x2f4>)
 8009234:	8813      	ldrh	r3, [r2, #0]
 8009236:	f36f 1345 	bfc	r3, #5, #1
 800923a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800923c:	4a79      	ldr	r2, [pc, #484]	; (8009424 <pass_test+0x2f4>)
 800923e:	8813      	ldrh	r3, [r2, #0]
 8009240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009244:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 8009246:	4b78      	ldr	r3, [pc, #480]	; (8009428 <pass_test+0x2f8>)
 8009248:	2202      	movs	r2, #2
 800924a:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800924c:	4b77      	ldr	r3, [pc, #476]	; (800942c <pass_test+0x2fc>)
 800924e:	2200      	movs	r2, #0
 8009250:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009252:	4b77      	ldr	r3, [pc, #476]	; (8009430 <pass_test+0x300>)
 8009254:	f241 3288 	movw	r2, #5000	; 0x1388
 8009258:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800925a:	4b76      	ldr	r3, [pc, #472]	; (8009434 <pass_test+0x304>)
 800925c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009260:	801a      	strh	r2, [r3, #0]
					start_flag = 0;
 8009262:	4b72      	ldr	r3, [pc, #456]	; (800942c <pass_test+0x2fc>)
 8009264:	2200      	movs	r2, #0
 8009266:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8009268:	4b73      	ldr	r3, [pc, #460]	; (8009438 <pass_test+0x308>)
 800926a:	2209      	movs	r2, #9
 800926c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800926e:	4b73      	ldr	r3, [pc, #460]	; (800943c <pass_test+0x30c>)
 8009270:	2206      	movs	r2, #6
 8009272:	701a      	strb	r2, [r3, #0]

					get_base();
 8009274:	f006 fc62 	bl	800fb3c <get_base>

					searchC();
 8009278:	f003 ff56 	bl	800d128 <searchC>
					HAL_Delay(2000);
 800927c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009280:	f7f7 fecc 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009284:	4b6d      	ldr	r3, [pc, #436]	; (800943c <pass_test+0x30c>)
 8009286:	2200      	movs	r2, #0
 8009288:	701a      	strb	r2, [r3, #0]
 800928a:	4b6c      	ldr	r3, [pc, #432]	; (800943c <pass_test+0x30c>)
 800928c:	781a      	ldrb	r2, [r3, #0]
 800928e:	4b6a      	ldr	r3, [pc, #424]	; (8009438 <pass_test+0x308>)
 8009290:	701a      	strb	r2, [r3, #0]
					searchC();
 8009292:	f003 ff49 	bl	800d128 <searchC>

					goal_x = GOAL_X;
 8009296:	4b68      	ldr	r3, [pc, #416]	; (8009438 <pass_test+0x308>)
 8009298:	2209      	movs	r2, #9
 800929a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800929c:	4b67      	ldr	r3, [pc, #412]	; (800943c <pass_test+0x30c>)
 800929e:	2206      	movs	r2, #6
 80092a0:	701a      	strb	r2, [r3, #0]
					break;
 80092a2:	e111      	b.n	80094c8 <pass_test+0x398>
				case 1:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 80092a4:	4866      	ldr	r0, [pc, #408]	; (8009440 <pass_test+0x310>)
 80092a6:	f007 fae3 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 80092aa:	4a5e      	ldr	r2, [pc, #376]	; (8009424 <pass_test+0x2f4>)
 80092ac:	8813      	ldrh	r3, [r2, #0]
 80092ae:	f043 0320 	orr.w	r3, r3, #32
 80092b2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80092b4:	4a5b      	ldr	r2, [pc, #364]	; (8009424 <pass_test+0x2f4>)
 80092b6:	8813      	ldrh	r3, [r2, #0]
 80092b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092bc:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 80092be:	4b5a      	ldr	r3, [pc, #360]	; (8009428 <pass_test+0x2f8>)
 80092c0:	2201      	movs	r2, #1
 80092c2:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 80092c4:	4b59      	ldr	r3, [pc, #356]	; (800942c <pass_test+0x2fc>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 80092ca:	4b59      	ldr	r3, [pc, #356]	; (8009430 <pass_test+0x300>)
 80092cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 80092d2:	4b58      	ldr	r3, [pc, #352]	; (8009434 <pass_test+0x304>)
 80092d4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80092d8:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 80092da:	4b5a      	ldr	r3, [pc, #360]	; (8009444 <pass_test+0x314>)
 80092dc:	2203      	movs	r2, #3
 80092de:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 80092e0:	4b55      	ldr	r3, [pc, #340]	; (8009438 <pass_test+0x308>)
 80092e2:	2209      	movs	r2, #9
 80092e4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80092e6:	4b55      	ldr	r3, [pc, #340]	; (800943c <pass_test+0x30c>)
 80092e8:	2206      	movs	r2, #6
 80092ea:	701a      	strb	r2, [r3, #0]

					get_base();
 80092ec:	f006 fc26 	bl	800fb3c <get_base>

					searchF3();
 80092f0:	f004 f9e4 	bl	800d6bc <searchF3>
					HAL_Delay(2000);
 80092f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80092f8:	f7f7 fe90 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80092fc:	4b4f      	ldr	r3, [pc, #316]	; (800943c <pass_test+0x30c>)
 80092fe:	2200      	movs	r2, #0
 8009300:	701a      	strb	r2, [r3, #0]
 8009302:	4b4e      	ldr	r3, [pc, #312]	; (800943c <pass_test+0x30c>)
 8009304:	781a      	ldrb	r2, [r3, #0]
 8009306:	4b4c      	ldr	r3, [pc, #304]	; (8009438 <pass_test+0x308>)
 8009308:	701a      	strb	r2, [r3, #0]
					searchF3();
 800930a:	f004 f9d7 	bl	800d6bc <searchF3>

					goal_x = GOAL_X;
 800930e:	4b4a      	ldr	r3, [pc, #296]	; (8009438 <pass_test+0x308>)
 8009310:	2209      	movs	r2, #9
 8009312:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009314:	4b49      	ldr	r3, [pc, #292]	; (800943c <pass_test+0x30c>)
 8009316:	2206      	movs	r2, #6
 8009318:	701a      	strb	r2, [r3, #0]
					break;
 800931a:	e0d5      	b.n	80094c8 <pass_test+0x398>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 800931c:	484a      	ldr	r0, [pc, #296]	; (8009448 <pass_test+0x318>)
 800931e:	f007 faa7 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 8009322:	4a40      	ldr	r2, [pc, #256]	; (8009424 <pass_test+0x2f4>)
 8009324:	8813      	ldrh	r3, [r2, #0]
 8009326:	f043 0320 	orr.w	r3, r3, #32
 800932a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800932c:	4a3d      	ldr	r2, [pc, #244]	; (8009424 <pass_test+0x2f4>)
 800932e:	8813      	ldrh	r3, [r2, #0]
 8009330:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009334:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 8009336:	4b3c      	ldr	r3, [pc, #240]	; (8009428 <pass_test+0x2f8>)
 8009338:	2203      	movs	r2, #3
 800933a:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800933c:	4b3b      	ldr	r3, [pc, #236]	; (800942c <pass_test+0x2fc>)
 800933e:	2200      	movs	r2, #0
 8009340:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009342:	4b3b      	ldr	r3, [pc, #236]	; (8009430 <pass_test+0x300>)
 8009344:	f241 3288 	movw	r2, #5000	; 0x1388
 8009348:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800934a:	4b3a      	ldr	r3, [pc, #232]	; (8009434 <pass_test+0x304>)
 800934c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009350:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8009352:	4b3c      	ldr	r3, [pc, #240]	; (8009444 <pass_test+0x314>)
 8009354:	2203      	movs	r2, #3
 8009356:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009358:	4b37      	ldr	r3, [pc, #220]	; (8009438 <pass_test+0x308>)
 800935a:	2209      	movs	r2, #9
 800935c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800935e:	4b37      	ldr	r3, [pc, #220]	; (800943c <pass_test+0x30c>)
 8009360:	2206      	movs	r2, #6
 8009362:	701a      	strb	r2, [r3, #0]

					get_base();
 8009364:	f006 fbea 	bl	800fb3c <get_base>

					searchF3();
 8009368:	f004 f9a8 	bl	800d6bc <searchF3>
					HAL_Delay(2000);
 800936c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009370:	f7f7 fe54 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009374:	4b31      	ldr	r3, [pc, #196]	; (800943c <pass_test+0x30c>)
 8009376:	2200      	movs	r2, #0
 8009378:	701a      	strb	r2, [r3, #0]
 800937a:	4b30      	ldr	r3, [pc, #192]	; (800943c <pass_test+0x30c>)
 800937c:	781a      	ldrb	r2, [r3, #0]
 800937e:	4b2e      	ldr	r3, [pc, #184]	; (8009438 <pass_test+0x308>)
 8009380:	701a      	strb	r2, [r3, #0]
					searchF3();
 8009382:	f004 f99b 	bl	800d6bc <searchF3>

					goal_x = GOAL_X;
 8009386:	4b2c      	ldr	r3, [pc, #176]	; (8009438 <pass_test+0x308>)
 8009388:	2209      	movs	r2, #9
 800938a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800938c:	4b2b      	ldr	r3, [pc, #172]	; (800943c <pass_test+0x30c>)
 800938e:	2206      	movs	r2, #6
 8009390:	701a      	strb	r2, [r3, #0]
					break;
 8009392:	e099      	b.n	80094c8 <pass_test+0x398>
				case 3:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 8009394:	482d      	ldr	r0, [pc, #180]	; (800944c <pass_test+0x31c>)
 8009396:	f007 fa6b 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 800939a:	4a22      	ldr	r2, [pc, #136]	; (8009424 <pass_test+0x2f4>)
 800939c:	8813      	ldrh	r3, [r2, #0]
 800939e:	f043 0320 	orr.w	r3, r3, #32
 80093a2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80093a4:	4a1f      	ldr	r2, [pc, #124]	; (8009424 <pass_test+0x2f4>)
 80093a6:	8813      	ldrh	r3, [r2, #0]
 80093a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80093ac:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 80093ae:	4b1e      	ldr	r3, [pc, #120]	; (8009428 <pass_test+0x2f8>)
 80093b0:	2201      	movs	r2, #1
 80093b2:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 80093b4:	4b1d      	ldr	r3, [pc, #116]	; (800942c <pass_test+0x2fc>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 80093ba:	4b1d      	ldr	r3, [pc, #116]	; (8009430 <pass_test+0x300>)
 80093bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80093c0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 80093c2:	4b1c      	ldr	r3, [pc, #112]	; (8009434 <pass_test+0x304>)
 80093c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80093c8:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 80093ca:	4b1e      	ldr	r3, [pc, #120]	; (8009444 <pass_test+0x314>)
 80093cc:	2204      	movs	r2, #4
 80093ce:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 80093d0:	4b19      	ldr	r3, [pc, #100]	; (8009438 <pass_test+0x308>)
 80093d2:	2209      	movs	r2, #9
 80093d4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80093d6:	4b19      	ldr	r3, [pc, #100]	; (800943c <pass_test+0x30c>)
 80093d8:	2206      	movs	r2, #6
 80093da:	701a      	strb	r2, [r3, #0]

					get_base();
 80093dc:	f006 fbae 	bl	800fb3c <get_base>

					searchF4();
 80093e0:	f004 fa30 	bl	800d844 <searchF4>
					HAL_Delay(2000);
 80093e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80093e8:	f7f7 fe18 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80093ec:	4b13      	ldr	r3, [pc, #76]	; (800943c <pass_test+0x30c>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	701a      	strb	r2, [r3, #0]
 80093f2:	4b12      	ldr	r3, [pc, #72]	; (800943c <pass_test+0x30c>)
 80093f4:	781a      	ldrb	r2, [r3, #0]
 80093f6:	4b10      	ldr	r3, [pc, #64]	; (8009438 <pass_test+0x308>)
 80093f8:	701a      	strb	r2, [r3, #0]
					searchF4();
 80093fa:	f004 fa23 	bl	800d844 <searchF4>

					goal_x = GOAL_X;
 80093fe:	4b0e      	ldr	r3, [pc, #56]	; (8009438 <pass_test+0x308>)
 8009400:	2209      	movs	r2, #9
 8009402:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009404:	4b0d      	ldr	r3, [pc, #52]	; (800943c <pass_test+0x30c>)
 8009406:	2206      	movs	r2, #6
 8009408:	701a      	strb	r2, [r3, #0]
					break;
 800940a:	e05d      	b.n	80094c8 <pass_test+0x398>
 800940c:	08011cd8 	.word	0x08011cd8
 8009410:	20000af4 	.word	0x20000af4
 8009414:	080119c4 	.word	0x080119c4
 8009418:	40020000 	.word	0x40020000
 800941c:	20000af0 	.word	0x20000af0
 8009420:	08011cf4 	.word	0x08011cf4
 8009424:	20000f74 	.word	0x20000f74
 8009428:	20000456 	.word	0x20000456
 800942c:	200015d4 	.word	0x200015d4
 8009430:	20000454 	.word	0x20000454
 8009434:	20000f88 	.word	0x20000f88
 8009438:	20000bb9 	.word	0x20000bb9
 800943c:	20000b54 	.word	0x20000b54
 8009440:	08011d08 	.word	0x08011d08
 8009444:	20000457 	.word	0x20000457
 8009448:	08011d18 	.word	0x08011d18
 800944c:	08011d28 	.word	0x08011d28
				case 4:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 8009450:	481e      	ldr	r0, [pc, #120]	; (80094cc <pass_test+0x39c>)
 8009452:	f007 fa0d 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 8009456:	4a1e      	ldr	r2, [pc, #120]	; (80094d0 <pass_test+0x3a0>)
 8009458:	8813      	ldrh	r3, [r2, #0]
 800945a:	f043 0320 	orr.w	r3, r3, #32
 800945e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009460:	4a1b      	ldr	r2, [pc, #108]	; (80094d0 <pass_test+0x3a0>)
 8009462:	8813      	ldrh	r3, [r2, #0]
 8009464:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009468:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800946a:	4b1a      	ldr	r3, [pc, #104]	; (80094d4 <pass_test+0x3a4>)
 800946c:	2203      	movs	r2, #3
 800946e:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8009470:	4b19      	ldr	r3, [pc, #100]	; (80094d8 <pass_test+0x3a8>)
 8009472:	2200      	movs	r2, #0
 8009474:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009476:	4b19      	ldr	r3, [pc, #100]	; (80094dc <pass_test+0x3ac>)
 8009478:	f241 3288 	movw	r2, #5000	; 0x1388
 800947c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800947e:	4b18      	ldr	r3, [pc, #96]	; (80094e0 <pass_test+0x3b0>)
 8009480:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009484:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 8009486:	4b17      	ldr	r3, [pc, #92]	; (80094e4 <pass_test+0x3b4>)
 8009488:	2204      	movs	r2, #4
 800948a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800948c:	4b16      	ldr	r3, [pc, #88]	; (80094e8 <pass_test+0x3b8>)
 800948e:	2209      	movs	r2, #9
 8009490:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009492:	4b16      	ldr	r3, [pc, #88]	; (80094ec <pass_test+0x3bc>)
 8009494:	2206      	movs	r2, #6
 8009496:	701a      	strb	r2, [r3, #0]

					get_base();
 8009498:	f006 fb50 	bl	800fb3c <get_base>

					searchF4();
 800949c:	f004 f9d2 	bl	800d844 <searchF4>
					HAL_Delay(2000);
 80094a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80094a4:	f7f7 fdba 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80094a8:	4b10      	ldr	r3, [pc, #64]	; (80094ec <pass_test+0x3bc>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	701a      	strb	r2, [r3, #0]
 80094ae:	4b0f      	ldr	r3, [pc, #60]	; (80094ec <pass_test+0x3bc>)
 80094b0:	781a      	ldrb	r2, [r3, #0]
 80094b2:	4b0d      	ldr	r3, [pc, #52]	; (80094e8 <pass_test+0x3b8>)
 80094b4:	701a      	strb	r2, [r3, #0]
					searchF4();
 80094b6:	f004 f9c5 	bl	800d844 <searchF4>

					goal_x = GOAL_X;
 80094ba:	4b0b      	ldr	r3, [pc, #44]	; (80094e8 <pass_test+0x3b8>)
 80094bc:	2209      	movs	r2, #9
 80094be:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80094c0:	4b0a      	ldr	r3, [pc, #40]	; (80094ec <pass_test+0x3bc>)
 80094c2:	2206      	movs	r2, #6
 80094c4:	701a      	strb	r2, [r3, #0]
					break;
 80094c6:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80094c8:	e63b      	b.n	8009142 <pass_test+0x12>
 80094ca:	bf00      	nop
 80094cc:	08011d28 	.word	0x08011d28
 80094d0:	20000f74 	.word	0x20000f74
 80094d4:	20000456 	.word	0x20000456
 80094d8:	200015d4 	.word	0x200015d4
 80094dc:	20000454 	.word	0x20000454
 80094e0:	20000f88 	.word	0x20000f88
 80094e4:	20000457 	.word	0x20000457
 80094e8:	20000bb9 	.word	0x20000bb9
 80094ec:	20000b54 	.word	0x20000b54

080094f0 <simple_run>:
//simple_run
// 超信地走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void simple_run(void){
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0

	int mode = 0;
 80094f6:	2300      	movs	r3, #0
 80094f8:	607b      	str	r3, [r7, #4]
	printf("Simple Run, Mode : %d\n", mode);
 80094fa:	6879      	ldr	r1, [r7, #4]
 80094fc:	4878      	ldr	r0, [pc, #480]	; (80096e0 <simple_run+0x1f0>)
 80094fe:	f007 f943 	bl	8010788 <iprintf>

	while(1){

		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	b2db      	uxtb	r3, r3
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	b2d8      	uxtb	r0, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	b2db      	uxtb	r3, r3
 8009510:	f003 0302 	and.w	r3, r3, #2
 8009514:	b2d9      	uxtb	r1, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	b2db      	uxtb	r3, r3
 800951a:	f003 0304 	and.w	r3, r3, #4
 800951e:	b2db      	uxtb	r3, r3
 8009520:	461a      	mov	r2, r3
 8009522:	f006 fb63 	bl	800fbec <led_write>
		  if(dist_r >= 20){
 8009526:	4b6f      	ldr	r3, [pc, #444]	; (80096e4 <simple_run+0x1f4>)
 8009528:	edd3 7a00 	vldr	s15, [r3]
 800952c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009538:	db0f      	blt.n	800955a <simple_run+0x6a>
			  mode++;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	3301      	adds	r3, #1
 800953e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009540:	4b68      	ldr	r3, [pc, #416]	; (80096e4 <simple_run+0x1f4>)
 8009542:	f04f 0200 	mov.w	r2, #0
 8009546:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2b07      	cmp	r3, #7
 800954c:	dd01      	ble.n	8009552 <simple_run+0x62>
				  mode = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009552:	6879      	ldr	r1, [r7, #4]
 8009554:	4864      	ldr	r0, [pc, #400]	; (80096e8 <simple_run+0x1f8>)
 8009556:	f007 f917 	bl	8010788 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800955a:	4b62      	ldr	r3, [pc, #392]	; (80096e4 <simple_run+0x1f4>)
 800955c:	edd3 7a00 	vldr	s15, [r3]
 8009560:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800956c:	d80f      	bhi.n	800958e <simple_run+0x9e>
			  mode--;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	3b01      	subs	r3, #1
 8009572:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009574:	4b5b      	ldr	r3, [pc, #364]	; (80096e4 <simple_run+0x1f4>)
 8009576:	f04f 0200 	mov.w	r2, #0
 800957a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	da01      	bge.n	8009586 <simple_run+0x96>
				  mode = 7;
 8009582:	2307      	movs	r3, #7
 8009584:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009586:	6879      	ldr	r1, [r7, #4]
 8009588:	4857      	ldr	r0, [pc, #348]	; (80096e8 <simple_run+0x1f8>)
 800958a:	f007 f8fd 	bl	8010788 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800958e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009592:	4856      	ldr	r0, [pc, #344]	; (80096ec <simple_run+0x1fc>)
 8009594:	f7f8 fe9e 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1b1      	bne.n	8009502 <simple_run+0x12>
			  HAL_Delay(50);
 800959e:	2032      	movs	r0, #50	; 0x32
 80095a0:	f7f7 fd3c 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80095a4:	bf00      	nop
 80095a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80095aa:	4850      	ldr	r0, [pc, #320]	; (80096ec <simple_run+0x1fc>)
 80095ac:	f7f8 fe92 	bl	80022d4 <HAL_GPIO_ReadPin>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d0f7      	beq.n	80095a6 <simple_run+0xb6>
			  drive_ready();
 80095b6:	f7fb fb5d 	bl	8004c74 <drive_ready>

			  switch(mode){
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b07      	cmp	r3, #7
 80095be:	d8a0      	bhi.n	8009502 <simple_run+0x12>
 80095c0:	a201      	add	r2, pc, #4	; (adr r2, 80095c8 <simple_run+0xd8>)
 80095c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c6:	bf00      	nop
 80095c8:	08009503 	.word	0x08009503
 80095cc:	080095e9 	.word	0x080095e9
 80095d0:	0800963b 	.word	0x0800963b
 80095d4:	0800968d 	.word	0x0800968d
 80095d8:	08009503 	.word	0x08009503
 80095dc:	08009503 	.word	0x08009503
 80095e0:	08009503 	.word	0x08009503
 80095e4:	08009503 	.word	0x08009503

				case 0:
					break;
				case 1:
					//----一次探索走行----
					printf("First Run.\n");
 80095e8:	4841      	ldr	r0, [pc, #260]	; (80096f0 <simple_run+0x200>)
 80095ea:	f007 f941 	bl	8010870 <puts>

					MF.FLAG.SCND = 0;
 80095ee:	4a41      	ldr	r2, [pc, #260]	; (80096f4 <simple_run+0x204>)
 80095f0:	8813      	ldrh	r3, [r2, #0]
 80095f2:	f36f 1345 	bfc	r3, #5, #1
 80095f6:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 80095f8:	4b3f      	ldr	r3, [pc, #252]	; (80096f8 <simple_run+0x208>)
 80095fa:	2201      	movs	r2, #1
 80095fc:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 80095fe:	4b3f      	ldr	r3, [pc, #252]	; (80096fc <simple_run+0x20c>)
 8009600:	2209      	movs	r2, #9
 8009602:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009604:	4b3e      	ldr	r3, [pc, #248]	; (8009700 <simple_run+0x210>)
 8009606:	2206      	movs	r2, #6
 8009608:	701a      	strb	r2, [r3, #0]

					get_base();
 800960a:	f006 fa97 	bl	800fb3c <get_base>

					searchA();
 800960e:	f003 fc7f 	bl	800cf10 <searchA>
					HAL_Delay(2000);
 8009612:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009616:	f7f7 fd01 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800961a:	4b39      	ldr	r3, [pc, #228]	; (8009700 <simple_run+0x210>)
 800961c:	2200      	movs	r2, #0
 800961e:	701a      	strb	r2, [r3, #0]
 8009620:	4b37      	ldr	r3, [pc, #220]	; (8009700 <simple_run+0x210>)
 8009622:	781a      	ldrb	r2, [r3, #0]
 8009624:	4b35      	ldr	r3, [pc, #212]	; (80096fc <simple_run+0x20c>)
 8009626:	701a      	strb	r2, [r3, #0]
					searchA();
 8009628:	f003 fc72 	bl	800cf10 <searchA>

					goal_x = GOAL_X;
 800962c:	4b33      	ldr	r3, [pc, #204]	; (80096fc <simple_run+0x20c>)
 800962e:	2209      	movs	r2, #9
 8009630:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009632:	4b33      	ldr	r3, [pc, #204]	; (8009700 <simple_run+0x210>)
 8009634:	2206      	movs	r2, #6
 8009636:	701a      	strb	r2, [r3, #0]

					break;
 8009638:	e051      	b.n	80096de <simple_run+0x1ee>

				case 2:
					//----一次探索連続走行----
					printf("First Run. (Continuous)\n");
 800963a:	4832      	ldr	r0, [pc, #200]	; (8009704 <simple_run+0x214>)
 800963c:	f007 f918 	bl	8010870 <puts>

					MF.FLAG.SCND = 0;
 8009640:	4a2c      	ldr	r2, [pc, #176]	; (80096f4 <simple_run+0x204>)
 8009642:	8813      	ldrh	r3, [r2, #0]
 8009644:	f36f 1345 	bfc	r3, #5, #1
 8009648:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800964a:	4b2b      	ldr	r3, [pc, #172]	; (80096f8 <simple_run+0x208>)
 800964c:	2201      	movs	r2, #1
 800964e:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8009650:	4b2a      	ldr	r3, [pc, #168]	; (80096fc <simple_run+0x20c>)
 8009652:	2209      	movs	r2, #9
 8009654:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009656:	4b2a      	ldr	r3, [pc, #168]	; (8009700 <simple_run+0x210>)
 8009658:	2206      	movs	r2, #6
 800965a:	701a      	strb	r2, [r3, #0]

					get_base();
 800965c:	f006 fa6e 	bl	800fb3c <get_base>

					searchB();
 8009660:	f003 fcd8 	bl	800d014 <searchB>
					HAL_Delay(2000);
 8009664:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009668:	f7f7 fcd8 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800966c:	4b24      	ldr	r3, [pc, #144]	; (8009700 <simple_run+0x210>)
 800966e:	2200      	movs	r2, #0
 8009670:	701a      	strb	r2, [r3, #0]
 8009672:	4b23      	ldr	r3, [pc, #140]	; (8009700 <simple_run+0x210>)
 8009674:	781a      	ldrb	r2, [r3, #0]
 8009676:	4b21      	ldr	r3, [pc, #132]	; (80096fc <simple_run+0x20c>)
 8009678:	701a      	strb	r2, [r3, #0]
					searchB();
 800967a:	f003 fccb 	bl	800d014 <searchB>

					goal_x = GOAL_X;
 800967e:	4b1f      	ldr	r3, [pc, #124]	; (80096fc <simple_run+0x20c>)
 8009680:	2209      	movs	r2, #9
 8009682:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009684:	4b1e      	ldr	r3, [pc, #120]	; (8009700 <simple_run+0x210>)
 8009686:	2206      	movs	r2, #6
 8009688:	701a      	strb	r2, [r3, #0]

					break;
 800968a:	e028      	b.n	80096de <simple_run+0x1ee>

				case 3:
					//----二次探索走行----
					printf("Second Run. (Continuous)\n");
 800968c:	481e      	ldr	r0, [pc, #120]	; (8009708 <simple_run+0x218>)
 800968e:	f007 f8ef 	bl	8010870 <puts>

					MF.FLAG.SCND = 1;
 8009692:	4a18      	ldr	r2, [pc, #96]	; (80096f4 <simple_run+0x204>)
 8009694:	8813      	ldrh	r3, [r2, #0]
 8009696:	f043 0320 	orr.w	r3, r3, #32
 800969a:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800969c:	4b16      	ldr	r3, [pc, #88]	; (80096f8 <simple_run+0x208>)
 800969e:	2201      	movs	r2, #1
 80096a0:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 80096a2:	4b16      	ldr	r3, [pc, #88]	; (80096fc <simple_run+0x20c>)
 80096a4:	2209      	movs	r2, #9
 80096a6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80096a8:	4b15      	ldr	r3, [pc, #84]	; (8009700 <simple_run+0x210>)
 80096aa:	2206      	movs	r2, #6
 80096ac:	701a      	strb	r2, [r3, #0]

					get_base();
 80096ae:	f006 fa45 	bl	800fb3c <get_base>

					searchB();
 80096b2:	f003 fcaf 	bl	800d014 <searchB>
					HAL_Delay(2000);
 80096b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80096ba:	f7f7 fcaf 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80096be:	4b10      	ldr	r3, [pc, #64]	; (8009700 <simple_run+0x210>)
 80096c0:	2200      	movs	r2, #0
 80096c2:	701a      	strb	r2, [r3, #0]
 80096c4:	4b0e      	ldr	r3, [pc, #56]	; (8009700 <simple_run+0x210>)
 80096c6:	781a      	ldrb	r2, [r3, #0]
 80096c8:	4b0c      	ldr	r3, [pc, #48]	; (80096fc <simple_run+0x20c>)
 80096ca:	701a      	strb	r2, [r3, #0]
					searchB();
 80096cc:	f003 fca2 	bl	800d014 <searchB>

					goal_x = GOAL_X;
 80096d0:	4b0a      	ldr	r3, [pc, #40]	; (80096fc <simple_run+0x20c>)
 80096d2:	2209      	movs	r2, #9
 80096d4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80096d6:	4b0a      	ldr	r3, [pc, #40]	; (8009700 <simple_run+0x210>)
 80096d8:	2206      	movs	r2, #6
 80096da:	701a      	strb	r2, [r3, #0]

					break;
 80096dc:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80096de:	e710      	b.n	8009502 <simple_run+0x12>
 80096e0:	08011d38 	.word	0x08011d38
 80096e4:	20000af4 	.word	0x20000af4
 80096e8:	080119c4 	.word	0x080119c4
 80096ec:	40020000 	.word	0x40020000
 80096f0:	08011d50 	.word	0x08011d50
 80096f4:	20000f74 	.word	0x20000f74
 80096f8:	20000456 	.word	0x20000456
 80096fc:	20000bb9 	.word	0x20000bb9
 8009700:	20000b54 	.word	0x20000b54
 8009704:	08011d5c 	.word	0x08011d5c
 8009708:	08011d74 	.word	0x08011d74

0800970c <slalom_run>:
//slalom_run
// スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_run(void){
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0

	int mode = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	607b      	str	r3, [r7, #4]
	printf("Slalom Run, Mode : %d\n", mode);
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	48a6      	ldr	r0, [pc, #664]	; (80099b4 <slalom_run+0x2a8>)
 800971a:	f007 f835 	bl	8010788 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	b2db      	uxtb	r3, r3
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	b2d8      	uxtb	r0, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	b2db      	uxtb	r3, r3
 800972c:	f003 0302 	and.w	r3, r3, #2
 8009730:	b2d9      	uxtb	r1, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	b2db      	uxtb	r3, r3
 8009736:	f003 0304 	and.w	r3, r3, #4
 800973a:	b2db      	uxtb	r3, r3
 800973c:	461a      	mov	r2, r3
 800973e:	f006 fa55 	bl	800fbec <led_write>
		  if(dist_r >= 20){
 8009742:	4b9d      	ldr	r3, [pc, #628]	; (80099b8 <slalom_run+0x2ac>)
 8009744:	edd3 7a00 	vldr	s15, [r3]
 8009748:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800974c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009754:	db0f      	blt.n	8009776 <slalom_run+0x6a>
			  mode++;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	3301      	adds	r3, #1
 800975a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800975c:	4b96      	ldr	r3, [pc, #600]	; (80099b8 <slalom_run+0x2ac>)
 800975e:	f04f 0200 	mov.w	r2, #0
 8009762:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b07      	cmp	r3, #7
 8009768:	dd01      	ble.n	800976e <slalom_run+0x62>
				  mode = 0;
 800976a:	2300      	movs	r3, #0
 800976c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800976e:	6879      	ldr	r1, [r7, #4]
 8009770:	4892      	ldr	r0, [pc, #584]	; (80099bc <slalom_run+0x2b0>)
 8009772:	f007 f809 	bl	8010788 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8009776:	4b90      	ldr	r3, [pc, #576]	; (80099b8 <slalom_run+0x2ac>)
 8009778:	edd3 7a00 	vldr	s15, [r3]
 800977c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009788:	d80f      	bhi.n	80097aa <slalom_run+0x9e>
			  mode--;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	3b01      	subs	r3, #1
 800978e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009790:	4b89      	ldr	r3, [pc, #548]	; (80099b8 <slalom_run+0x2ac>)
 8009792:	f04f 0200 	mov.w	r2, #0
 8009796:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	da01      	bge.n	80097a2 <slalom_run+0x96>
				  mode = 7;
 800979e:	2307      	movs	r3, #7
 80097a0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80097a2:	6879      	ldr	r1, [r7, #4]
 80097a4:	4885      	ldr	r0, [pc, #532]	; (80099bc <slalom_run+0x2b0>)
 80097a6:	f006 ffef 	bl	8010788 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80097aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80097ae:	4884      	ldr	r0, [pc, #528]	; (80099c0 <slalom_run+0x2b4>)
 80097b0:	f7f8 fd90 	bl	80022d4 <HAL_GPIO_ReadPin>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1b1      	bne.n	800971e <slalom_run+0x12>
			  HAL_Delay(50);
 80097ba:	2032      	movs	r0, #50	; 0x32
 80097bc:	f7f7 fc2e 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80097c0:	bf00      	nop
 80097c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80097c6:	487e      	ldr	r0, [pc, #504]	; (80099c0 <slalom_run+0x2b4>)
 80097c8:	f7f8 fd84 	bl	80022d4 <HAL_GPIO_ReadPin>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d0f7      	beq.n	80097c2 <slalom_run+0xb6>
			  drive_ready();
 80097d2:	f7fb fa4f 	bl	8004c74 <drive_ready>

			  switch(mode){
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b07      	cmp	r3, #7
 80097da:	d8a0      	bhi.n	800971e <slalom_run+0x12>
 80097dc:	a201      	add	r2, pc, #4	; (adr r2, 80097e4 <slalom_run+0xd8>)
 80097de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e2:	bf00      	nop
 80097e4:	08009805 	.word	0x08009805
 80097e8:	08009877 	.word	0x08009877
 80097ec:	080098cf 	.word	0x080098cf
 80097f0:	08009941 	.word	0x08009941
 80097f4:	080099ed 	.word	0x080099ed
 80097f8:	08009a5f 	.word	0x08009a5f
 80097fc:	08009ac9 	.word	0x08009ac9
 8009800:	08009b4d 	.word	0x08009b4d

			  case 0:
					//----一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 8009804:	486f      	ldr	r0, [pc, #444]	; (80099c4 <slalom_run+0x2b8>)
 8009806:	f007 f833 	bl	8010870 <puts>

					MF.FLAG.SCND = 0;
 800980a:	4a6f      	ldr	r2, [pc, #444]	; (80099c8 <slalom_run+0x2bc>)
 800980c:	8813      	ldrh	r3, [r2, #0]
 800980e:	f36f 1345 	bfc	r3, #5, #1
 8009812:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 8009814:	4a6c      	ldr	r2, [pc, #432]	; (80099c8 <slalom_run+0x2bc>)
 8009816:	8813      	ldrh	r3, [r2, #0]
 8009818:	f36f 2349 	bfc	r3, #9, #1
 800981c:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800981e:	4b6b      	ldr	r3, [pc, #428]	; (80099cc <slalom_run+0x2c0>)
 8009820:	2201      	movs	r2, #1
 8009822:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8009824:	4b6a      	ldr	r3, [pc, #424]	; (80099d0 <slalom_run+0x2c4>)
 8009826:	2200      	movs	r2, #0
 8009828:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800982a:	4b6a      	ldr	r3, [pc, #424]	; (80099d4 <slalom_run+0x2c8>)
 800982c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009830:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8009832:	4b69      	ldr	r3, [pc, #420]	; (80099d8 <slalom_run+0x2cc>)
 8009834:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009838:	801a      	strh	r2, [r3, #0]


					goal_x = GOAL_X;
 800983a:	4b68      	ldr	r3, [pc, #416]	; (80099dc <slalom_run+0x2d0>)
 800983c:	2209      	movs	r2, #9
 800983e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009840:	4b67      	ldr	r3, [pc, #412]	; (80099e0 <slalom_run+0x2d4>)
 8009842:	2206      	movs	r2, #6
 8009844:	701a      	strb	r2, [r3, #0]

					get_base();
 8009846:	f006 f979 	bl	800fb3c <get_base>

					searchC();
 800984a:	f003 fc6d 	bl	800d128 <searchC>
					HAL_Delay(2000);
 800984e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009852:	f7f7 fbe3 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009856:	4b62      	ldr	r3, [pc, #392]	; (80099e0 <slalom_run+0x2d4>)
 8009858:	2200      	movs	r2, #0
 800985a:	701a      	strb	r2, [r3, #0]
 800985c:	4b60      	ldr	r3, [pc, #384]	; (80099e0 <slalom_run+0x2d4>)
 800985e:	781a      	ldrb	r2, [r3, #0]
 8009860:	4b5e      	ldr	r3, [pc, #376]	; (80099dc <slalom_run+0x2d0>)
 8009862:	701a      	strb	r2, [r3, #0]
					searchC();
 8009864:	f003 fc60 	bl	800d128 <searchC>

					goal_x = GOAL_X;
 8009868:	4b5c      	ldr	r3, [pc, #368]	; (80099dc <slalom_run+0x2d0>)
 800986a:	2209      	movs	r2, #9
 800986c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800986e:	4b5c      	ldr	r3, [pc, #368]	; (80099e0 <slalom_run+0x2d4>)
 8009870:	2206      	movs	r2, #6
 8009872:	701a      	strb	r2, [r3, #0]
					break;
 8009874:	e1ac      	b.n	8009bd0 <slalom_run+0x4c4>

				case 1:
					//----二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 8009876:	485b      	ldr	r0, [pc, #364]	; (80099e4 <slalom_run+0x2d8>)
 8009878:	f006 fffa 	bl	8010870 <puts>

					MF.FLAG.SCND = 1;
 800987c:	4a52      	ldr	r2, [pc, #328]	; (80099c8 <slalom_run+0x2bc>)
 800987e:	8813      	ldrh	r3, [r2, #0]
 8009880:	f043 0320 	orr.w	r3, r3, #32
 8009884:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009886:	4b51      	ldr	r3, [pc, #324]	; (80099cc <slalom_run+0x2c0>)
 8009888:	2201      	movs	r2, #1
 800988a:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800988c:	4b50      	ldr	r3, [pc, #320]	; (80099d0 <slalom_run+0x2c4>)
 800988e:	2200      	movs	r2, #0
 8009890:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8009892:	4b52      	ldr	r3, [pc, #328]	; (80099dc <slalom_run+0x2d0>)
 8009894:	2209      	movs	r2, #9
 8009896:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009898:	4b51      	ldr	r3, [pc, #324]	; (80099e0 <slalom_run+0x2d4>)
 800989a:	2206      	movs	r2, #6
 800989c:	701a      	strb	r2, [r3, #0]

					get_base();
 800989e:	f006 f94d 	bl	800fb3c <get_base>

					searchC();
 80098a2:	f003 fc41 	bl	800d128 <searchC>
					HAL_Delay(2000);
 80098a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80098aa:	f7f7 fbb7 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80098ae:	4b4c      	ldr	r3, [pc, #304]	; (80099e0 <slalom_run+0x2d4>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	701a      	strb	r2, [r3, #0]
 80098b4:	4b4a      	ldr	r3, [pc, #296]	; (80099e0 <slalom_run+0x2d4>)
 80098b6:	781a      	ldrb	r2, [r3, #0]
 80098b8:	4b48      	ldr	r3, [pc, #288]	; (80099dc <slalom_run+0x2d0>)
 80098ba:	701a      	strb	r2, [r3, #0]
					searchC();
 80098bc:	f003 fc34 	bl	800d128 <searchC>

					goal_x = GOAL_X;
 80098c0:	4b46      	ldr	r3, [pc, #280]	; (80099dc <slalom_run+0x2d0>)
 80098c2:	2209      	movs	r2, #9
 80098c4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80098c6:	4b46      	ldr	r3, [pc, #280]	; (80099e0 <slalom_run+0x2d4>)
 80098c8:	2206      	movs	r2, #6
 80098ca:	701a      	strb	r2, [r3, #0]
					break;
 80098cc:	e180      	b.n	8009bd0 <slalom_run+0x4c4>

				case 2:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 80098ce:	4846      	ldr	r0, [pc, #280]	; (80099e8 <slalom_run+0x2dc>)
 80098d0:	f006 ffce 	bl	8010870 <puts>

					MF.FLAG.SCND = 1;
 80098d4:	4a3c      	ldr	r2, [pc, #240]	; (80099c8 <slalom_run+0x2bc>)
 80098d6:	8813      	ldrh	r3, [r2, #0]
 80098d8:	f043 0320 	orr.w	r3, r3, #32
 80098dc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80098de:	4a3a      	ldr	r2, [pc, #232]	; (80099c8 <slalom_run+0x2bc>)
 80098e0:	8813      	ldrh	r3, [r2, #0]
 80098e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80098e6:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 80098e8:	4b38      	ldr	r3, [pc, #224]	; (80099cc <slalom_run+0x2c0>)
 80098ea:	2201      	movs	r2, #1
 80098ec:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 80098ee:	4b38      	ldr	r3, [pc, #224]	; (80099d0 <slalom_run+0x2c4>)
 80098f0:	2200      	movs	r2, #0
 80098f2:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 80098f4:	4b37      	ldr	r3, [pc, #220]	; (80099d4 <slalom_run+0x2c8>)
 80098f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80098fa:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 80098fc:	4b36      	ldr	r3, [pc, #216]	; (80099d8 <slalom_run+0x2cc>)
 80098fe:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009902:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8009904:	4b35      	ldr	r3, [pc, #212]	; (80099dc <slalom_run+0x2d0>)
 8009906:	2209      	movs	r2, #9
 8009908:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800990a:	4b35      	ldr	r3, [pc, #212]	; (80099e0 <slalom_run+0x2d4>)
 800990c:	2206      	movs	r2, #6
 800990e:	701a      	strb	r2, [r3, #0]

					get_base();
 8009910:	f006 f914 	bl	800fb3c <get_base>

					searchD();
 8009914:	f003 fd28 	bl	800d368 <searchD>
					HAL_Delay(2000);
 8009918:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800991c:	f7f7 fb7e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009920:	4b2f      	ldr	r3, [pc, #188]	; (80099e0 <slalom_run+0x2d4>)
 8009922:	2200      	movs	r2, #0
 8009924:	701a      	strb	r2, [r3, #0]
 8009926:	4b2e      	ldr	r3, [pc, #184]	; (80099e0 <slalom_run+0x2d4>)
 8009928:	781a      	ldrb	r2, [r3, #0]
 800992a:	4b2c      	ldr	r3, [pc, #176]	; (80099dc <slalom_run+0x2d0>)
 800992c:	701a      	strb	r2, [r3, #0]
					searchD();
 800992e:	f003 fd1b 	bl	800d368 <searchD>

					goal_x = GOAL_X;
 8009932:	4b2a      	ldr	r3, [pc, #168]	; (80099dc <slalom_run+0x2d0>)
 8009934:	2209      	movs	r2, #9
 8009936:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009938:	4b29      	ldr	r3, [pc, #164]	; (80099e0 <slalom_run+0x2d4>)
 800993a:	2206      	movs	r2, #6
 800993c:	701a      	strb	r2, [r3, #0]
					break;
 800993e:	e147      	b.n	8009bd0 <slalom_run+0x4c4>

				case 3:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8009940:	4829      	ldr	r0, [pc, #164]	; (80099e8 <slalom_run+0x2dc>)
 8009942:	f006 ff95 	bl	8010870 <puts>

					MF.FLAG.SCND = 1;
 8009946:	4a20      	ldr	r2, [pc, #128]	; (80099c8 <slalom_run+0x2bc>)
 8009948:	8813      	ldrh	r3, [r2, #0]
 800994a:	f043 0320 	orr.w	r3, r3, #32
 800994e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009950:	4a1d      	ldr	r2, [pc, #116]	; (80099c8 <slalom_run+0x2bc>)
 8009952:	8813      	ldrh	r3, [r2, #0]
 8009954:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009958:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800995a:	4b1c      	ldr	r3, [pc, #112]	; (80099cc <slalom_run+0x2c0>)
 800995c:	2201      	movs	r2, #1
 800995e:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8009960:	4b1b      	ldr	r3, [pc, #108]	; (80099d0 <slalom_run+0x2c4>)
 8009962:	2200      	movs	r2, #0
 8009964:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009966:	4b1b      	ldr	r3, [pc, #108]	; (80099d4 <slalom_run+0x2c8>)
 8009968:	f241 3288 	movw	r2, #5000	; 0x1388
 800996c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800996e:	4b1a      	ldr	r3, [pc, #104]	; (80099d8 <slalom_run+0x2cc>)
 8009970:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009974:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8009976:	4b19      	ldr	r3, [pc, #100]	; (80099dc <slalom_run+0x2d0>)
 8009978:	2209      	movs	r2, #9
 800997a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800997c:	4b18      	ldr	r3, [pc, #96]	; (80099e0 <slalom_run+0x2d4>)
 800997e:	2206      	movs	r2, #6
 8009980:	701a      	strb	r2, [r3, #0]

					get_base();
 8009982:	f006 f8db 	bl	800fb3c <get_base>

					searchD();
 8009986:	f003 fcef 	bl	800d368 <searchD>
					HAL_Delay(2000);
 800998a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800998e:	f7f7 fb45 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009992:	4b13      	ldr	r3, [pc, #76]	; (80099e0 <slalom_run+0x2d4>)
 8009994:	2200      	movs	r2, #0
 8009996:	701a      	strb	r2, [r3, #0]
 8009998:	4b11      	ldr	r3, [pc, #68]	; (80099e0 <slalom_run+0x2d4>)
 800999a:	781a      	ldrb	r2, [r3, #0]
 800999c:	4b0f      	ldr	r3, [pc, #60]	; (80099dc <slalom_run+0x2d0>)
 800999e:	701a      	strb	r2, [r3, #0]
					searchD();
 80099a0:	f003 fce2 	bl	800d368 <searchD>

					goal_x = GOAL_X;
 80099a4:	4b0d      	ldr	r3, [pc, #52]	; (80099dc <slalom_run+0x2d0>)
 80099a6:	2209      	movs	r2, #9
 80099a8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80099aa:	4b0d      	ldr	r3, [pc, #52]	; (80099e0 <slalom_run+0x2d4>)
 80099ac:	2206      	movs	r2, #6
 80099ae:	701a      	strb	r2, [r3, #0]
					break;
 80099b0:	e10e      	b.n	8009bd0 <slalom_run+0x4c4>
 80099b2:	bf00      	nop
 80099b4:	08011d90 	.word	0x08011d90
 80099b8:	20000af4 	.word	0x20000af4
 80099bc:	080119c4 	.word	0x080119c4
 80099c0:	40020000 	.word	0x40020000
 80099c4:	08011cf4 	.word	0x08011cf4
 80099c8:	20000f74 	.word	0x20000f74
 80099cc:	20000456 	.word	0x20000456
 80099d0:	200015d4 	.word	0x200015d4
 80099d4:	20000454 	.word	0x20000454
 80099d8:	20000f88 	.word	0x20000f88
 80099dc:	20000bb9 	.word	0x20000bb9
 80099e0:	20000b54 	.word	0x20000b54
 80099e4:	08011da8 	.word	0x08011da8
 80099e8:	08011dc0 	.word	0x08011dc0

				case 4:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 80099ec:	4879      	ldr	r0, [pc, #484]	; (8009bd4 <slalom_run+0x4c8>)
 80099ee:	f006 ff3f 	bl	8010870 <puts>

					MF.FLAG.SCND = 1;
 80099f2:	4a79      	ldr	r2, [pc, #484]	; (8009bd8 <slalom_run+0x4cc>)
 80099f4:	8813      	ldrh	r3, [r2, #0]
 80099f6:	f043 0320 	orr.w	r3, r3, #32
 80099fa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80099fc:	4a76      	ldr	r2, [pc, #472]	; (8009bd8 <slalom_run+0x4cc>)
 80099fe:	8813      	ldrh	r3, [r2, #0]
 8009a00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a04:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009a06:	4b75      	ldr	r3, [pc, #468]	; (8009bdc <slalom_run+0x4d0>)
 8009a08:	2201      	movs	r2, #1
 8009a0a:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8009a0c:	4b74      	ldr	r3, [pc, #464]	; (8009be0 <slalom_run+0x4d4>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009a12:	4b74      	ldr	r3, [pc, #464]	; (8009be4 <slalom_run+0x4d8>)
 8009a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a18:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1500;
 8009a1a:	4b73      	ldr	r3, [pc, #460]	; (8009be8 <slalom_run+0x4dc>)
 8009a1c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009a20:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8009a22:	4b72      	ldr	r3, [pc, #456]	; (8009bec <slalom_run+0x4e0>)
 8009a24:	2209      	movs	r2, #9
 8009a26:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009a28:	4b71      	ldr	r3, [pc, #452]	; (8009bf0 <slalom_run+0x4e4>)
 8009a2a:	2206      	movs	r2, #6
 8009a2c:	701a      	strb	r2, [r3, #0]

					get_base();
 8009a2e:	f006 f885 	bl	800fb3c <get_base>

					searchD();
 8009a32:	f003 fc99 	bl	800d368 <searchD>
					HAL_Delay(2000);
 8009a36:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009a3a:	f7f7 faef 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009a3e:	4b6c      	ldr	r3, [pc, #432]	; (8009bf0 <slalom_run+0x4e4>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	701a      	strb	r2, [r3, #0]
 8009a44:	4b6a      	ldr	r3, [pc, #424]	; (8009bf0 <slalom_run+0x4e4>)
 8009a46:	781a      	ldrb	r2, [r3, #0]
 8009a48:	4b68      	ldr	r3, [pc, #416]	; (8009bec <slalom_run+0x4e0>)
 8009a4a:	701a      	strb	r2, [r3, #0]
					searchD();
 8009a4c:	f003 fc8c 	bl	800d368 <searchD>

					goal_x = GOAL_X;
 8009a50:	4b66      	ldr	r3, [pc, #408]	; (8009bec <slalom_run+0x4e0>)
 8009a52:	2209      	movs	r2, #9
 8009a54:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009a56:	4b66      	ldr	r3, [pc, #408]	; (8009bf0 <slalom_run+0x4e4>)
 8009a58:	2206      	movs	r2, #6
 8009a5a:	701a      	strb	r2, [r3, #0]
					break;
 8009a5c:	e0b8      	b.n	8009bd0 <slalom_run+0x4c4>

				case 5:
					//----二次走行スラローム+直線優先----
					printf("High Speed Run. (Slalom)\n");
 8009a5e:	4865      	ldr	r0, [pc, #404]	; (8009bf4 <slalom_run+0x4e8>)
 8009a60:	f006 ff06 	bl	8010870 <puts>

					MF.FLAG.SCND = 1;
 8009a64:	4a5c      	ldr	r2, [pc, #368]	; (8009bd8 <slalom_run+0x4cc>)
 8009a66:	8813      	ldrh	r3, [r2, #0]
 8009a68:	f043 0320 	orr.w	r3, r3, #32
 8009a6c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009a6e:	4a5a      	ldr	r2, [pc, #360]	; (8009bd8 <slalom_run+0x4cc>)
 8009a70:	8813      	ldrh	r3, [r2, #0]
 8009a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a76:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009a78:	4b58      	ldr	r3, [pc, #352]	; (8009bdc <slalom_run+0x4d0>)
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8009a7e:	4b58      	ldr	r3, [pc, #352]	; (8009be0 <slalom_run+0x4d4>)
 8009a80:	2200      	movs	r2, #0
 8009a82:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8009a84:	4b59      	ldr	r3, [pc, #356]	; (8009bec <slalom_run+0x4e0>)
 8009a86:	2209      	movs	r2, #9
 8009a88:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009a8a:	4b59      	ldr	r3, [pc, #356]	; (8009bf0 <slalom_run+0x4e4>)
 8009a8c:	2206      	movs	r2, #6
 8009a8e:	701a      	strb	r2, [r3, #0]

					get_base();
 8009a90:	f006 f854 	bl	800fb3c <get_base>

					HAL_Delay(5000);
 8009a94:	f241 3088 	movw	r0, #5000	; 0x1388
 8009a98:	f7f7 fac0 	bl	800101c <HAL_Delay>
					searchC();
 8009a9c:	f003 fb44 	bl	800d128 <searchC>
					HAL_Delay(2000);
 8009aa0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009aa4:	f7f7 faba 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009aa8:	4b51      	ldr	r3, [pc, #324]	; (8009bf0 <slalom_run+0x4e4>)
 8009aaa:	2200      	movs	r2, #0
 8009aac:	701a      	strb	r2, [r3, #0]
 8009aae:	4b50      	ldr	r3, [pc, #320]	; (8009bf0 <slalom_run+0x4e4>)
 8009ab0:	781a      	ldrb	r2, [r3, #0]
 8009ab2:	4b4e      	ldr	r3, [pc, #312]	; (8009bec <slalom_run+0x4e0>)
 8009ab4:	701a      	strb	r2, [r3, #0]
					searchC();
 8009ab6:	f003 fb37 	bl	800d128 <searchC>

					goal_x = GOAL_X;
 8009aba:	4b4c      	ldr	r3, [pc, #304]	; (8009bec <slalom_run+0x4e0>)
 8009abc:	2209      	movs	r2, #9
 8009abe:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009ac0:	4b4b      	ldr	r3, [pc, #300]	; (8009bf0 <slalom_run+0x4e4>)
 8009ac2:	2206      	movs	r2, #6
 8009ac4:	701a      	strb	r2, [r3, #0]
					break;
 8009ac6:	e083      	b.n	8009bd0 <slalom_run+0x4c4>

				case 6:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 8009ac8:	484a      	ldr	r0, [pc, #296]	; (8009bf4 <slalom_run+0x4e8>)
 8009aca:	f006 fed1 	bl	8010870 <puts>

					MF.FLAG.SCND = 1;
 8009ace:	4a42      	ldr	r2, [pc, #264]	; (8009bd8 <slalom_run+0x4cc>)
 8009ad0:	8813      	ldrh	r3, [r2, #0]
 8009ad2:	f043 0320 	orr.w	r3, r3, #32
 8009ad6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009ad8:	4a3f      	ldr	r2, [pc, #252]	; (8009bd8 <slalom_run+0x4cc>)
 8009ada:	8813      	ldrh	r3, [r2, #0]
 8009adc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ae0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009ae2:	4a3d      	ldr	r2, [pc, #244]	; (8009bd8 <slalom_run+0x4cc>)
 8009ae4:	8813      	ldrh	r3, [r2, #0]
 8009ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009aea:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 8009aec:	4b3b      	ldr	r3, [pc, #236]	; (8009bdc <slalom_run+0x4d0>)
 8009aee:	2203      	movs	r2, #3
 8009af0:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8009af2:	4b3b      	ldr	r3, [pc, #236]	; (8009be0 <slalom_run+0x4d4>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009af8:	4b3a      	ldr	r3, [pc, #232]	; (8009be4 <slalom_run+0x4d8>)
 8009afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009afe:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8009b00:	4b39      	ldr	r3, [pc, #228]	; (8009be8 <slalom_run+0x4dc>)
 8009b02:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009b06:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8009b08:	4b38      	ldr	r3, [pc, #224]	; (8009bec <slalom_run+0x4e0>)
 8009b0a:	2209      	movs	r2, #9
 8009b0c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009b0e:	4b38      	ldr	r3, [pc, #224]	; (8009bf0 <slalom_run+0x4e4>)
 8009b10:	2206      	movs	r2, #6
 8009b12:	701a      	strb	r2, [r3, #0]

					get_base();
 8009b14:	f006 f812 	bl	800fb3c <get_base>

					HAL_Delay(5000);
 8009b18:	f241 3088 	movw	r0, #5000	; 0x1388
 8009b1c:	f7f7 fa7e 	bl	800101c <HAL_Delay>
//					searchD2();
					searchD();
 8009b20:	f003 fc22 	bl	800d368 <searchD>
					HAL_Delay(2000);
 8009b24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009b28:	f7f7 fa78 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009b2c:	4b30      	ldr	r3, [pc, #192]	; (8009bf0 <slalom_run+0x4e4>)
 8009b2e:	2200      	movs	r2, #0
 8009b30:	701a      	strb	r2, [r3, #0]
 8009b32:	4b2f      	ldr	r3, [pc, #188]	; (8009bf0 <slalom_run+0x4e4>)
 8009b34:	781a      	ldrb	r2, [r3, #0]
 8009b36:	4b2d      	ldr	r3, [pc, #180]	; (8009bec <slalom_run+0x4e0>)
 8009b38:	701a      	strb	r2, [r3, #0]
//					searchD2();
					searchD();
 8009b3a:	f003 fc15 	bl	800d368 <searchD>

					goal_x = GOAL_X;
 8009b3e:	4b2b      	ldr	r3, [pc, #172]	; (8009bec <slalom_run+0x4e0>)
 8009b40:	2209      	movs	r2, #9
 8009b42:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009b44:	4b2a      	ldr	r3, [pc, #168]	; (8009bf0 <slalom_run+0x4e4>)
 8009b46:	2206      	movs	r2, #6
 8009b48:	701a      	strb	r2, [r3, #0]
					break;
 8009b4a:	e041      	b.n	8009bd0 <slalom_run+0x4c4>

				case 7:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 8009b4c:	4829      	ldr	r0, [pc, #164]	; (8009bf4 <slalom_run+0x4e8>)
 8009b4e:	f006 fe8f 	bl	8010870 <puts>

					MF.FLAG.SCND = 1;
 8009b52:	4a21      	ldr	r2, [pc, #132]	; (8009bd8 <slalom_run+0x4cc>)
 8009b54:	8813      	ldrh	r3, [r2, #0]
 8009b56:	f043 0320 	orr.w	r3, r3, #32
 8009b5a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009b5c:	4a1e      	ldr	r2, [pc, #120]	; (8009bd8 <slalom_run+0x4cc>)
 8009b5e:	8813      	ldrh	r3, [r2, #0]
 8009b60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009b64:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009b66:	4a1c      	ldr	r2, [pc, #112]	; (8009bd8 <slalom_run+0x4cc>)
 8009b68:	8813      	ldrh	r3, [r2, #0]
 8009b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b6e:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 8009b70:	4b1a      	ldr	r3, [pc, #104]	; (8009bdc <slalom_run+0x4d0>)
 8009b72:	2203      	movs	r2, #3
 8009b74:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8009b76:	4b1a      	ldr	r3, [pc, #104]	; (8009be0 <slalom_run+0x4d4>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009b7c:	4b19      	ldr	r3, [pc, #100]	; (8009be4 <slalom_run+0x4d8>)
 8009b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b82:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 8009b84:	4b18      	ldr	r3, [pc, #96]	; (8009be8 <slalom_run+0x4dc>)
 8009b86:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009b8a:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8009b8c:	4b17      	ldr	r3, [pc, #92]	; (8009bec <slalom_run+0x4e0>)
 8009b8e:	2209      	movs	r2, #9
 8009b90:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009b92:	4b17      	ldr	r3, [pc, #92]	; (8009bf0 <slalom_run+0x4e4>)
 8009b94:	2206      	movs	r2, #6
 8009b96:	701a      	strb	r2, [r3, #0]

					get_base();
 8009b98:	f005 ffd0 	bl	800fb3c <get_base>

					HAL_Delay(5000);
 8009b9c:	f241 3088 	movw	r0, #5000	; 0x1388
 8009ba0:	f7f7 fa3c 	bl	800101c <HAL_Delay>
//					searchD2();
					searchD();
 8009ba4:	f003 fbe0 	bl	800d368 <searchD>
					HAL_Delay(2000);
 8009ba8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009bac:	f7f7 fa36 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009bb0:	4b0f      	ldr	r3, [pc, #60]	; (8009bf0 <slalom_run+0x4e4>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	701a      	strb	r2, [r3, #0]
 8009bb6:	4b0e      	ldr	r3, [pc, #56]	; (8009bf0 <slalom_run+0x4e4>)
 8009bb8:	781a      	ldrb	r2, [r3, #0]
 8009bba:	4b0c      	ldr	r3, [pc, #48]	; (8009bec <slalom_run+0x4e0>)
 8009bbc:	701a      	strb	r2, [r3, #0]
//					searchD2();
					searchD();
 8009bbe:	f003 fbd3 	bl	800d368 <searchD>

					goal_x = GOAL_X;
 8009bc2:	4b0a      	ldr	r3, [pc, #40]	; (8009bec <slalom_run+0x4e0>)
 8009bc4:	2209      	movs	r2, #9
 8009bc6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009bc8:	4b09      	ldr	r3, [pc, #36]	; (8009bf0 <slalom_run+0x4e4>)
 8009bca:	2206      	movs	r2, #6
 8009bcc:	701a      	strb	r2, [r3, #0]
					break;
 8009bce:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009bd0:	e5a5      	b.n	800971e <slalom_run+0x12>
 8009bd2:	bf00      	nop
 8009bd4:	08011dc0 	.word	0x08011dc0
 8009bd8:	20000f74 	.word	0x20000f74
 8009bdc:	20000456 	.word	0x20000456
 8009be0:	200015d4 	.word	0x200015d4
 8009be4:	20000454 	.word	0x20000454
 8009be8:	20000f88 	.word	0x20000f88
 8009bec:	20000bb9 	.word	0x20000bb9
 8009bf0:	20000b54 	.word	0x20000b54
 8009bf4:	08011ddc 	.word	0x08011ddc

08009bf8 <sample_course_run>:
//sample_course_run
// 試験走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sample_course_run(void){
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0

	int mode = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	607b      	str	r3, [r7, #4]
	printf("Sample Course Run, Mode : %d\n", mode);
 8009c02:	6879      	ldr	r1, [r7, #4]
 8009c04:	488f      	ldr	r0, [pc, #572]	; (8009e44 <sample_course_run+0x24c>)
 8009c06:	f006 fdbf 	bl	8010788 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	f003 0301 	and.w	r3, r3, #1
 8009c12:	b2d8      	uxtb	r0, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	f003 0302 	and.w	r3, r3, #2
 8009c1c:	b2d9      	uxtb	r1, r3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	f003 0304 	and.w	r3, r3, #4
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	461a      	mov	r2, r3
 8009c2a:	f005 ffdf 	bl	800fbec <led_write>
		  if(dist_r >= 20){
 8009c2e:	4b86      	ldr	r3, [pc, #536]	; (8009e48 <sample_course_run+0x250>)
 8009c30:	edd3 7a00 	vldr	s15, [r3]
 8009c34:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c40:	db0f      	blt.n	8009c62 <sample_course_run+0x6a>
			  mode++;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3301      	adds	r3, #1
 8009c46:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009c48:	4b7f      	ldr	r3, [pc, #508]	; (8009e48 <sample_course_run+0x250>)
 8009c4a:	f04f 0200 	mov.w	r2, #0
 8009c4e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b07      	cmp	r3, #7
 8009c54:	dd01      	ble.n	8009c5a <sample_course_run+0x62>
				  mode = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009c5a:	6879      	ldr	r1, [r7, #4]
 8009c5c:	487b      	ldr	r0, [pc, #492]	; (8009e4c <sample_course_run+0x254>)
 8009c5e:	f006 fd93 	bl	8010788 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8009c62:	4b79      	ldr	r3, [pc, #484]	; (8009e48 <sample_course_run+0x250>)
 8009c64:	edd3 7a00 	vldr	s15, [r3]
 8009c68:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c74:	d80f      	bhi.n	8009c96 <sample_course_run+0x9e>
			  mode--;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009c7c:	4b72      	ldr	r3, [pc, #456]	; (8009e48 <sample_course_run+0x250>)
 8009c7e:	f04f 0200 	mov.w	r2, #0
 8009c82:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	da01      	bge.n	8009c8e <sample_course_run+0x96>
				  mode = 7;
 8009c8a:	2307      	movs	r3, #7
 8009c8c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	486e      	ldr	r0, [pc, #440]	; (8009e4c <sample_course_run+0x254>)
 8009c92:	f006 fd79 	bl	8010788 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009c96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009c9a:	486d      	ldr	r0, [pc, #436]	; (8009e50 <sample_course_run+0x258>)
 8009c9c:	f7f8 fb1a 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1b1      	bne.n	8009c0a <sample_course_run+0x12>
			  HAL_Delay(50);
 8009ca6:	2032      	movs	r0, #50	; 0x32
 8009ca8:	f7f7 f9b8 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009cac:	bf00      	nop
 8009cae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009cb2:	4867      	ldr	r0, [pc, #412]	; (8009e50 <sample_course_run+0x258>)
 8009cb4:	f7f8 fb0e 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d0f7      	beq.n	8009cae <sample_course_run+0xb6>
			  drive_ready();
 8009cbe:	f7fa ffd9 	bl	8004c74 <drive_ready>

			  switch(mode){
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b07      	cmp	r3, #7
 8009cc6:	d8a0      	bhi.n	8009c0a <sample_course_run+0x12>
 8009cc8:	a201      	add	r2, pc, #4	; (adr r2, 8009cd0 <sample_course_run+0xd8>)
 8009cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cce:	bf00      	nop
 8009cd0:	08009cf1 	.word	0x08009cf1
 8009cd4:	08009cf7 	.word	0x08009cf7
 8009cd8:	08009d19 	.word	0x08009d19
 8009cdc:	08009d3b 	.word	0x08009d3b
 8009ce0:	08009c0b 	.word	0x08009c0b
 8009ce4:	08009d4d 	.word	0x08009d4d
 8009ce8:	08009dc7 	.word	0x08009dc7
 8009cec:	08009c0b 	.word	0x08009c0b
				case 0:
					get_base();
 8009cf0:	f005 ff24 	bl	800fb3c <get_base>
					break;
 8009cf4:	e0a4      	b.n	8009e40 <sample_course_run+0x248>

				case 1:
					//----サンプルコース1　超信地----
					half_sectionA();
 8009cf6:	f7fb fe95 	bl	8005a24 <half_sectionA>
					half_sectionD();
 8009cfa:	f7fb fedd 	bl	8005ab8 <half_sectionD>
					rotate_R90();
 8009cfe:	f7fc f8f7 	bl	8005ef0 <rotate_R90>
					half_sectionA();
 8009d02:	f7fb fe8f 	bl	8005a24 <half_sectionA>
					half_sectionD();
 8009d06:	f7fb fed7 	bl	8005ab8 <half_sectionD>
					rotate_R90();
 8009d0a:	f7fc f8f1 	bl	8005ef0 <rotate_R90>
					half_sectionA();
 8009d0e:	f7fb fe89 	bl	8005a24 <half_sectionA>
					half_sectionD();
 8009d12:	f7fb fed1 	bl	8005ab8 <half_sectionD>
					break;
 8009d16:	e093      	b.n	8009e40 <sample_course_run+0x248>

				case 2:
					//----サンプルコース1　超信地----
					half_sectionA();
 8009d18:	f7fb fe84 	bl	8005a24 <half_sectionA>
					half_sectionD();
 8009d1c:	f7fb fecc 	bl	8005ab8 <half_sectionD>
					rotate_L90();
 8009d20:	f7fc f9c2 	bl	80060a8 <rotate_L90>
					half_sectionA();
 8009d24:	f7fb fe7e 	bl	8005a24 <half_sectionA>
					half_sectionD();
 8009d28:	f7fb fec6 	bl	8005ab8 <half_sectionD>
					rotate_L90();
 8009d2c:	f7fc f9bc 	bl	80060a8 <rotate_L90>
					half_sectionA();
 8009d30:	f7fb fe78 	bl	8005a24 <half_sectionA>
					half_sectionD();
 8009d34:	f7fb fec0 	bl	8005ab8 <half_sectionD>
					break;
 8009d38:	e082      	b.n	8009e40 <sample_course_run+0x248>

				case 3:
					//---サンプルコース2　スラローム----
					half_sectionA();
 8009d3a:	f7fb fe73 	bl	8005a24 <half_sectionA>
					slalom_R90();
 8009d3e:	f7fc fb67 	bl	8006410 <slalom_R90>
					slalom_R90();
 8009d42:	f7fc fb65 	bl	8006410 <slalom_R90>
					half_sectionD();
 8009d46:	f7fb feb7 	bl	8005ab8 <half_sectionD>
					break;
 8009d4a:	e079      	b.n	8009e40 <sample_course_run+0x248>
					goal_y = GOAL_Y;
*/					break;

				case 5:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 8009d4c:	4841      	ldr	r0, [pc, #260]	; (8009e54 <sample_course_run+0x25c>)
 8009d4e:	f006 fd8f 	bl	8010870 <puts>

					MF.FLAG.SCND = 0;
 8009d52:	4a41      	ldr	r2, [pc, #260]	; (8009e58 <sample_course_run+0x260>)
 8009d54:	8813      	ldrh	r3, [r2, #0]
 8009d56:	f36f 1345 	bfc	r3, #5, #1
 8009d5a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009d5c:	4a3e      	ldr	r2, [pc, #248]	; (8009e58 <sample_course_run+0x260>)
 8009d5e:	8813      	ldrh	r3, [r2, #0]
 8009d60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d64:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009d66:	4a3c      	ldr	r2, [pc, #240]	; (8009e58 <sample_course_run+0x260>)
 8009d68:	8813      	ldrh	r3, [r2, #0]
 8009d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d6e:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8009d70:	4b3a      	ldr	r3, [pc, #232]	; (8009e5c <sample_course_run+0x264>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009d76:	4b3a      	ldr	r3, [pc, #232]	; (8009e60 <sample_course_run+0x268>)
 8009d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d7c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8009d7e:	4b39      	ldr	r3, [pc, #228]	; (8009e64 <sample_course_run+0x26c>)
 8009d80:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009d84:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 8009d86:	4b38      	ldr	r3, [pc, #224]	; (8009e68 <sample_course_run+0x270>)
 8009d88:	2209      	movs	r2, #9
 8009d8a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009d8c:	4b37      	ldr	r3, [pc, #220]	; (8009e6c <sample_course_run+0x274>)
 8009d8e:	2206      	movs	r2, #6
 8009d90:	701a      	strb	r2, [r3, #0]

					get_base();
 8009d92:	f005 fed3 	bl	800fb3c <get_base>

					searchC();
 8009d96:	f003 f9c7 	bl	800d128 <searchC>
					HAL_Delay(2000);
 8009d9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009d9e:	f7f7 f93d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009da2:	4b32      	ldr	r3, [pc, #200]	; (8009e6c <sample_course_run+0x274>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	701a      	strb	r2, [r3, #0]
 8009da8:	4b30      	ldr	r3, [pc, #192]	; (8009e6c <sample_course_run+0x274>)
 8009daa:	781a      	ldrb	r2, [r3, #0]
 8009dac:	4b2e      	ldr	r3, [pc, #184]	; (8009e68 <sample_course_run+0x270>)
 8009dae:	701a      	strb	r2, [r3, #0]
					searchE();
 8009db0:	f003 fbdc 	bl	800d56c <searchE>

					searchC();
 8009db4:	f003 f9b8 	bl	800d128 <searchC>
					goal_x = GOAL_X;
 8009db8:	4b2b      	ldr	r3, [pc, #172]	; (8009e68 <sample_course_run+0x270>)
 8009dba:	2209      	movs	r2, #9
 8009dbc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009dbe:	4b2b      	ldr	r3, [pc, #172]	; (8009e6c <sample_course_run+0x274>)
 8009dc0:	2206      	movs	r2, #6
 8009dc2:	701a      	strb	r2, [r3, #0]

					break;
 8009dc4:	e03c      	b.n	8009e40 <sample_course_run+0x248>

				case 6:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 8009dc6:	4823      	ldr	r0, [pc, #140]	; (8009e54 <sample_course_run+0x25c>)
 8009dc8:	f006 fd52 	bl	8010870 <puts>

					MF.FLAG.SCND = 0;
 8009dcc:	4a22      	ldr	r2, [pc, #136]	; (8009e58 <sample_course_run+0x260>)
 8009dce:	8813      	ldrh	r3, [r2, #0]
 8009dd0:	f36f 1345 	bfc	r3, #5, #1
 8009dd4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009dd6:	4a20      	ldr	r2, [pc, #128]	; (8009e58 <sample_course_run+0x260>)
 8009dd8:	8813      	ldrh	r3, [r2, #0]
 8009dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009dde:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009de0:	4a1d      	ldr	r2, [pc, #116]	; (8009e58 <sample_course_run+0x260>)
 8009de2:	8813      	ldrh	r3, [r2, #0]
 8009de4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009de8:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8009dea:	4b1c      	ldr	r3, [pc, #112]	; (8009e5c <sample_course_run+0x264>)
 8009dec:	2200      	movs	r2, #0
 8009dee:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009df0:	4b1b      	ldr	r3, [pc, #108]	; (8009e60 <sample_course_run+0x268>)
 8009df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009df6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8009df8:	4b1a      	ldr	r3, [pc, #104]	; (8009e64 <sample_course_run+0x26c>)
 8009dfa:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009dfe:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 8009e00:	4b19      	ldr	r3, [pc, #100]	; (8009e68 <sample_course_run+0x270>)
 8009e02:	2207      	movs	r2, #7
 8009e04:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009e06:	4b19      	ldr	r3, [pc, #100]	; (8009e6c <sample_course_run+0x274>)
 8009e08:	2207      	movs	r2, #7
 8009e0a:	701a      	strb	r2, [r3, #0]

					get_base();
 8009e0c:	f005 fe96 	bl	800fb3c <get_base>

					searchC();
 8009e10:	f003 f98a 	bl	800d128 <searchC>
					HAL_Delay(2000);
 8009e14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009e18:	f7f7 f900 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009e1c:	4b13      	ldr	r3, [pc, #76]	; (8009e6c <sample_course_run+0x274>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	701a      	strb	r2, [r3, #0]
 8009e22:	4b12      	ldr	r3, [pc, #72]	; (8009e6c <sample_course_run+0x274>)
 8009e24:	781a      	ldrb	r2, [r3, #0]
 8009e26:	4b10      	ldr	r3, [pc, #64]	; (8009e68 <sample_course_run+0x270>)
 8009e28:	701a      	strb	r2, [r3, #0]
					searchE();
 8009e2a:	f003 fb9f 	bl	800d56c <searchE>

					searchC();
 8009e2e:	f003 f97b 	bl	800d128 <searchC>
					goal_x = 7;
 8009e32:	4b0d      	ldr	r3, [pc, #52]	; (8009e68 <sample_course_run+0x270>)
 8009e34:	2207      	movs	r2, #7
 8009e36:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009e38:	4b0c      	ldr	r3, [pc, #48]	; (8009e6c <sample_course_run+0x274>)
 8009e3a:	2207      	movs	r2, #7
 8009e3c:	701a      	strb	r2, [r3, #0]

					break;
 8009e3e:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009e40:	e6e3      	b.n	8009c0a <sample_course_run+0x12>
 8009e42:	bf00      	nop
 8009e44:	08011df8 	.word	0x08011df8
 8009e48:	20000af4 	.word	0x20000af4
 8009e4c:	080119c4 	.word	0x080119c4
 8009e50:	40020000 	.word	0x40020000
 8009e54:	08011e18 	.word	0x08011e18
 8009e58:	20000f74 	.word	0x20000f74
 8009e5c:	200015d4 	.word	0x200015d4
 8009e60:	20000454 	.word	0x20000454
 8009e64:	20000f88 	.word	0x20000f88
 8009e68:	20000bb9 	.word	0x20000bb9
 8009e6c:	20000b54 	.word	0x20000b54

08009e70 <perfect_slalom>:
//perfect_slalom
// 本番用スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_slalom(void){
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0

	int mode = 0;
 8009e76:	2300      	movs	r3, #0
 8009e78:	607b      	str	r3, [r7, #4]
	printf("Perfect Slalom, Mode : %d\n", mode);
 8009e7a:	6879      	ldr	r1, [r7, #4]
 8009e7c:	48b2      	ldr	r0, [pc, #712]	; (800a148 <perfect_slalom+0x2d8>)
 8009e7e:	f006 fc83 	bl	8010788 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	f003 0301 	and.w	r3, r3, #1
 8009e8a:	b2d8      	uxtb	r0, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	f003 0302 	and.w	r3, r3, #2
 8009e94:	b2d9      	uxtb	r1, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	f003 0304 	and.w	r3, r3, #4
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	f005 fea3 	bl	800fbec <led_write>
		  if(dist_r >= 20){
 8009ea6:	4ba9      	ldr	r3, [pc, #676]	; (800a14c <perfect_slalom+0x2dc>)
 8009ea8:	edd3 7a00 	vldr	s15, [r3]
 8009eac:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009eb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eb8:	db0f      	blt.n	8009eda <perfect_slalom+0x6a>
			  mode++;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009ec0:	4ba2      	ldr	r3, [pc, #648]	; (800a14c <perfect_slalom+0x2dc>)
 8009ec2:	f04f 0200 	mov.w	r2, #0
 8009ec6:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b07      	cmp	r3, #7
 8009ecc:	dd01      	ble.n	8009ed2 <perfect_slalom+0x62>
				  mode = 0;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009ed2:	6879      	ldr	r1, [r7, #4]
 8009ed4:	489e      	ldr	r0, [pc, #632]	; (800a150 <perfect_slalom+0x2e0>)
 8009ed6:	f006 fc57 	bl	8010788 <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(dist_r <= -20){
 8009eda:	4b9c      	ldr	r3, [pc, #624]	; (800a14c <perfect_slalom+0x2dc>)
 8009edc:	edd3 7a00 	vldr	s15, [r3]
 8009ee0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eec:	d80f      	bhi.n	8009f0e <perfect_slalom+0x9e>
			  mode--;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009ef4:	4b95      	ldr	r3, [pc, #596]	; (800a14c <perfect_slalom+0x2dc>)
 8009ef6:	f04f 0200 	mov.w	r2, #0
 8009efa:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	da01      	bge.n	8009f06 <perfect_slalom+0x96>
				  mode = 7;
 8009f02:	2307      	movs	r3, #7
 8009f04:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	4891      	ldr	r0, [pc, #580]	; (800a150 <perfect_slalom+0x2e0>)
 8009f0a:	f006 fc3d 	bl	8010788 <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009f0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f12:	4890      	ldr	r0, [pc, #576]	; (800a154 <perfect_slalom+0x2e4>)
 8009f14:	f7f8 f9de 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1b1      	bne.n	8009e82 <perfect_slalom+0x12>
			  HAL_Delay(50);
 8009f1e:	2032      	movs	r0, #50	; 0x32
 8009f20:	f7f7 f87c 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009f24:	bf00      	nop
 8009f26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f2a:	488a      	ldr	r0, [pc, #552]	; (800a154 <perfect_slalom+0x2e4>)
 8009f2c:	f7f8 f9d2 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d0f7      	beq.n	8009f26 <perfect_slalom+0xb6>
/*			  for(int i=0; i<m_ok; i++){
	  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
	  		  }
*/
			  drive_ready();
 8009f36:	f7fa fe9d 	bl	8004c74 <drive_ready>
/*	  		  for(int i=0; i<m_start; i++){
	  			  buzzer(mario_start[i][0], mario_start[i][1]);
	  			  full_led_write(RED);
	  		  }
*/
			  switch(mode){
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2b07      	cmp	r3, #7
 8009f3e:	d8a0      	bhi.n	8009e82 <perfect_slalom+0x12>
 8009f40:	a201      	add	r2, pc, #4	; (adr r2, 8009f48 <perfect_slalom+0xd8>)
 8009f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f46:	bf00      	nop
 8009f48:	08009e83 	.word	0x08009e83
 8009f4c:	08009f69 	.word	0x08009f69
 8009f50:	08009fe5 	.word	0x08009fe5
 8009f54:	0800a061 	.word	0x0800a061
 8009f58:	0800a0cd 	.word	0x0800a0cd
 8009f5c:	0800a181 	.word	0x0800a181
 8009f60:	0800a1fd 	.word	0x0800a1fd
 8009f64:	0800a279 	.word	0x0800a279
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 8009f68:	487b      	ldr	r0, [pc, #492]	; (800a158 <perfect_slalom+0x2e8>)
 8009f6a:	f006 fc81 	bl	8010870 <puts>
					MF.FLAG.SCND = 0;
 8009f6e:	4a7b      	ldr	r2, [pc, #492]	; (800a15c <perfect_slalom+0x2ec>)
 8009f70:	8813      	ldrh	r3, [r2, #0]
 8009f72:	f36f 1345 	bfc	r3, #5, #1
 8009f76:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009f78:	4a78      	ldr	r2, [pc, #480]	; (800a15c <perfect_slalom+0x2ec>)
 8009f7a:	8813      	ldrh	r3, [r2, #0]
 8009f7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f80:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 8009f82:	4a76      	ldr	r2, [pc, #472]	; (800a15c <perfect_slalom+0x2ec>)
 8009f84:	8813      	ldrh	r3, [r2, #0]
 8009f86:	f36f 238a 	bfc	r3, #10, #1
 8009f8a:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009f8c:	4b74      	ldr	r3, [pc, #464]	; (800a160 <perfect_slalom+0x2f0>)
 8009f8e:	2201      	movs	r2, #1
 8009f90:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8009f92:	4b74      	ldr	r3, [pc, #464]	; (800a164 <perfect_slalom+0x2f4>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009f98:	4b73      	ldr	r3, [pc, #460]	; (800a168 <perfect_slalom+0x2f8>)
 8009f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f9e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8009fa0:	4b72      	ldr	r3, [pc, #456]	; (800a16c <perfect_slalom+0x2fc>)
 8009fa2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009fa6:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 8009fa8:	4b71      	ldr	r3, [pc, #452]	; (800a170 <perfect_slalom+0x300>)
 8009faa:	2207      	movs	r2, #7
 8009fac:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009fae:	4b71      	ldr	r3, [pc, #452]	; (800a174 <perfect_slalom+0x304>)
 8009fb0:	2207      	movs	r2, #7
 8009fb2:	701a      	strb	r2, [r3, #0]

					get_base();
 8009fb4:	f005 fdc2 	bl	800fb3c <get_base>

					searchC();
 8009fb8:	f003 f8b6 	bl	800d128 <searchC>
					HAL_Delay(2000);
 8009fbc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009fc0:	f7f7 f82c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009fc4:	4b6b      	ldr	r3, [pc, #428]	; (800a174 <perfect_slalom+0x304>)
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	701a      	strb	r2, [r3, #0]
 8009fca:	4b6a      	ldr	r3, [pc, #424]	; (800a174 <perfect_slalom+0x304>)
 8009fcc:	781a      	ldrb	r2, [r3, #0]
 8009fce:	4b68      	ldr	r3, [pc, #416]	; (800a170 <perfect_slalom+0x300>)
 8009fd0:	701a      	strb	r2, [r3, #0]
					searchC();
 8009fd2:	f003 f8a9 	bl	800d128 <searchC>

					goal_x = 7;
 8009fd6:	4b66      	ldr	r3, [pc, #408]	; (800a170 <perfect_slalom+0x300>)
 8009fd8:	2207      	movs	r2, #7
 8009fda:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009fdc:	4b65      	ldr	r3, [pc, #404]	; (800a174 <perfect_slalom+0x304>)
 8009fde:	2207      	movs	r2, #7
 8009fe0:	701a      	strb	r2, [r3, #0]
					break;
 8009fe2:	e14c      	b.n	800a27e <perfect_slalom+0x40e>

				case 2:
					//----a二次走行スラローム+既知区間加速走行 speed1----
					printf("First Run. (Continuous)\n");
 8009fe4:	4864      	ldr	r0, [pc, #400]	; (800a178 <perfect_slalom+0x308>)
 8009fe6:	f006 fc43 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 8009fea:	4a5c      	ldr	r2, [pc, #368]	; (800a15c <perfect_slalom+0x2ec>)
 8009fec:	8813      	ldrh	r3, [r2, #0]
 8009fee:	f043 0320 	orr.w	r3, r3, #32
 8009ff2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009ff4:	4a59      	ldr	r2, [pc, #356]	; (800a15c <perfect_slalom+0x2ec>)
 8009ff6:	8813      	ldrh	r3, [r2, #0]
 8009ff8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ffc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009ffe:	4a57      	ldr	r2, [pc, #348]	; (800a15c <perfect_slalom+0x2ec>)
 800a000:	8813      	ldrh	r3, [r2, #0]
 800a002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a006:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800a008:	4b55      	ldr	r3, [pc, #340]	; (800a160 <perfect_slalom+0x2f0>)
 800a00a:	2201      	movs	r2, #1
 800a00c:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800a00e:	4b55      	ldr	r3, [pc, #340]	; (800a164 <perfect_slalom+0x2f4>)
 800a010:	2200      	movs	r2, #0
 800a012:	701a      	strb	r2, [r3, #0]

					accel_hs = 5000;
 800a014:	4b54      	ldr	r3, [pc, #336]	; (800a168 <perfect_slalom+0x2f8>)
 800a016:	f241 3288 	movw	r2, #5000	; 0x1388
 800a01a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a01c:	4b53      	ldr	r3, [pc, #332]	; (800a16c <perfect_slalom+0x2fc>)
 800a01e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a022:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800a024:	4b52      	ldr	r3, [pc, #328]	; (800a170 <perfect_slalom+0x300>)
 800a026:	2207      	movs	r2, #7
 800a028:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a02a:	4b52      	ldr	r3, [pc, #328]	; (800a174 <perfect_slalom+0x304>)
 800a02c:	2207      	movs	r2, #7
 800a02e:	701a      	strb	r2, [r3, #0]

					get_base();
 800a030:	f005 fd84 	bl	800fb3c <get_base>

					searchD();
 800a034:	f003 f998 	bl	800d368 <searchD>
					HAL_Delay(2000);
 800a038:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a03c:	f7f6 ffee 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a040:	4b4c      	ldr	r3, [pc, #304]	; (800a174 <perfect_slalom+0x304>)
 800a042:	2200      	movs	r2, #0
 800a044:	701a      	strb	r2, [r3, #0]
 800a046:	4b4b      	ldr	r3, [pc, #300]	; (800a174 <perfect_slalom+0x304>)
 800a048:	781a      	ldrb	r2, [r3, #0]
 800a04a:	4b49      	ldr	r3, [pc, #292]	; (800a170 <perfect_slalom+0x300>)
 800a04c:	701a      	strb	r2, [r3, #0]
					searchD();
 800a04e:	f003 f98b 	bl	800d368 <searchD>

					goal_x = 7;
 800a052:	4b47      	ldr	r3, [pc, #284]	; (800a170 <perfect_slalom+0x300>)
 800a054:	2207      	movs	r2, #7
 800a056:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a058:	4b46      	ldr	r3, [pc, #280]	; (800a174 <perfect_slalom+0x304>)
 800a05a:	2207      	movs	r2, #7
 800a05c:	701a      	strb	r2, [r3, #0]
					break;
 800a05e:	e10e      	b.n	800a27e <perfect_slalom+0x40e>

				case 3:
					//----a二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 800a060:	4846      	ldr	r0, [pc, #280]	; (800a17c <perfect_slalom+0x30c>)
 800a062:	f006 fc05 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 800a066:	4a3d      	ldr	r2, [pc, #244]	; (800a15c <perfect_slalom+0x2ec>)
 800a068:	8813      	ldrh	r3, [r2, #0]
 800a06a:	f043 0320 	orr.w	r3, r3, #32
 800a06e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800a070:	4a3a      	ldr	r2, [pc, #232]	; (800a15c <perfect_slalom+0x2ec>)
 800a072:	8813      	ldrh	r3, [r2, #0]
 800a074:	f36f 2349 	bfc	r3, #9, #1
 800a078:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a07a:	4a38      	ldr	r2, [pc, #224]	; (800a15c <perfect_slalom+0x2ec>)
 800a07c:	8813      	ldrh	r3, [r2, #0]
 800a07e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a082:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a084:	4b36      	ldr	r3, [pc, #216]	; (800a160 <perfect_slalom+0x2f0>)
 800a086:	2203      	movs	r2, #3
 800a088:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800a08a:	4b36      	ldr	r3, [pc, #216]	; (800a164 <perfect_slalom+0x2f4>)
 800a08c:	2200      	movs	r2, #0
 800a08e:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800a090:	4b37      	ldr	r3, [pc, #220]	; (800a170 <perfect_slalom+0x300>)
 800a092:	2207      	movs	r2, #7
 800a094:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a096:	4b37      	ldr	r3, [pc, #220]	; (800a174 <perfect_slalom+0x304>)
 800a098:	2207      	movs	r2, #7
 800a09a:	701a      	strb	r2, [r3, #0]

					get_base();
 800a09c:	f005 fd4e 	bl	800fb3c <get_base>

					searchC();
 800a0a0:	f003 f842 	bl	800d128 <searchC>
					HAL_Delay(2000);
 800a0a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a0a8:	f7f6 ffb8 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a0ac:	4b31      	ldr	r3, [pc, #196]	; (800a174 <perfect_slalom+0x304>)
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	701a      	strb	r2, [r3, #0]
 800a0b2:	4b30      	ldr	r3, [pc, #192]	; (800a174 <perfect_slalom+0x304>)
 800a0b4:	781a      	ldrb	r2, [r3, #0]
 800a0b6:	4b2e      	ldr	r3, [pc, #184]	; (800a170 <perfect_slalom+0x300>)
 800a0b8:	701a      	strb	r2, [r3, #0]
					searchC();
 800a0ba:	f003 f835 	bl	800d128 <searchC>
					goal_x = 7;
 800a0be:	4b2c      	ldr	r3, [pc, #176]	; (800a170 <perfect_slalom+0x300>)
 800a0c0:	2207      	movs	r2, #7
 800a0c2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a0c4:	4b2b      	ldr	r3, [pc, #172]	; (800a174 <perfect_slalom+0x304>)
 800a0c6:	2207      	movs	r2, #7
 800a0c8:	701a      	strb	r2, [r3, #0]
					break;
 800a0ca:	e0d8      	b.n	800a27e <perfect_slalom+0x40e>

				case 4:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800a0cc:	482b      	ldr	r0, [pc, #172]	; (800a17c <perfect_slalom+0x30c>)
 800a0ce:	f006 fbcf 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 800a0d2:	4a22      	ldr	r2, [pc, #136]	; (800a15c <perfect_slalom+0x2ec>)
 800a0d4:	8813      	ldrh	r3, [r2, #0]
 800a0d6:	f043 0320 	orr.w	r3, r3, #32
 800a0da:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a0dc:	4a1f      	ldr	r2, [pc, #124]	; (800a15c <perfect_slalom+0x2ec>)
 800a0de:	8813      	ldrh	r3, [r2, #0]
 800a0e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a0e4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a0e6:	4a1d      	ldr	r2, [pc, #116]	; (800a15c <perfect_slalom+0x2ec>)
 800a0e8:	8813      	ldrh	r3, [r2, #0]
 800a0ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a0ee:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a0f0:	4b1b      	ldr	r3, [pc, #108]	; (800a160 <perfect_slalom+0x2f0>)
 800a0f2:	2203      	movs	r2, #3
 800a0f4:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800a0f6:	4b1b      	ldr	r3, [pc, #108]	; (800a164 <perfect_slalom+0x2f4>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	701a      	strb	r2, [r3, #0]

					accel_hs = 3000;
 800a0fc:	4b1a      	ldr	r3, [pc, #104]	; (800a168 <perfect_slalom+0x2f8>)
 800a0fe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800a102:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a104:	4b19      	ldr	r3, [pc, #100]	; (800a16c <perfect_slalom+0x2fc>)
 800a106:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a10a:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800a10c:	4b18      	ldr	r3, [pc, #96]	; (800a170 <perfect_slalom+0x300>)
 800a10e:	2207      	movs	r2, #7
 800a110:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a112:	4b18      	ldr	r3, [pc, #96]	; (800a174 <perfect_slalom+0x304>)
 800a114:	2207      	movs	r2, #7
 800a116:	701a      	strb	r2, [r3, #0]

					get_base();
 800a118:	f005 fd10 	bl	800fb3c <get_base>

					searchD();
 800a11c:	f003 f924 	bl	800d368 <searchD>
					HAL_Delay(2000);
 800a120:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a124:	f7f6 ff7a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a128:	4b12      	ldr	r3, [pc, #72]	; (800a174 <perfect_slalom+0x304>)
 800a12a:	2200      	movs	r2, #0
 800a12c:	701a      	strb	r2, [r3, #0]
 800a12e:	4b11      	ldr	r3, [pc, #68]	; (800a174 <perfect_slalom+0x304>)
 800a130:	781a      	ldrb	r2, [r3, #0]
 800a132:	4b0f      	ldr	r3, [pc, #60]	; (800a170 <perfect_slalom+0x300>)
 800a134:	701a      	strb	r2, [r3, #0]
					searchD();
 800a136:	f003 f917 	bl	800d368 <searchD>

					goal_x = 7;
 800a13a:	4b0d      	ldr	r3, [pc, #52]	; (800a170 <perfect_slalom+0x300>)
 800a13c:	2207      	movs	r2, #7
 800a13e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a140:	4b0c      	ldr	r3, [pc, #48]	; (800a174 <perfect_slalom+0x304>)
 800a142:	2207      	movs	r2, #7
 800a144:	701a      	strb	r2, [r3, #0]
					break;
 800a146:	e09a      	b.n	800a27e <perfect_slalom+0x40e>
 800a148:	08011e4c 	.word	0x08011e4c
 800a14c:	20000af4 	.word	0x20000af4
 800a150:	080119c4 	.word	0x080119c4
 800a154:	40020000 	.word	0x40020000
 800a158:	08011d50 	.word	0x08011d50
 800a15c:	20000f74 	.word	0x20000f74
 800a160:	20000456 	.word	0x20000456
 800a164:	200015d4 	.word	0x200015d4
 800a168:	20000454 	.word	0x20000454
 800a16c:	20000f88 	.word	0x20000f88
 800a170:	20000bb9 	.word	0x20000bb9
 800a174:	20000b54 	.word	0x20000b54
 800a178:	08011d5c 	.word	0x08011d5c
 800a17c:	08011da8 	.word	0x08011da8

				case 5:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800a180:	483f      	ldr	r0, [pc, #252]	; (800a280 <perfect_slalom+0x410>)
 800a182:	f006 fb75 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 800a186:	4a3f      	ldr	r2, [pc, #252]	; (800a284 <perfect_slalom+0x414>)
 800a188:	8813      	ldrh	r3, [r2, #0]
 800a18a:	f043 0320 	orr.w	r3, r3, #32
 800a18e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a190:	4a3c      	ldr	r2, [pc, #240]	; (800a284 <perfect_slalom+0x414>)
 800a192:	8813      	ldrh	r3, [r2, #0]
 800a194:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a198:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a19a:	4a3a      	ldr	r2, [pc, #232]	; (800a284 <perfect_slalom+0x414>)
 800a19c:	8813      	ldrh	r3, [r2, #0]
 800a19e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a1a2:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a1a4:	4b38      	ldr	r3, [pc, #224]	; (800a288 <perfect_slalom+0x418>)
 800a1a6:	2203      	movs	r2, #3
 800a1a8:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800a1aa:	4b38      	ldr	r3, [pc, #224]	; (800a28c <perfect_slalom+0x41c>)
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 800a1b0:	4b37      	ldr	r3, [pc, #220]	; (800a290 <perfect_slalom+0x420>)
 800a1b2:	f242 7210 	movw	r2, #10000	; 0x2710
 800a1b6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800a1b8:	4b36      	ldr	r3, [pc, #216]	; (800a294 <perfect_slalom+0x424>)
 800a1ba:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a1be:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800a1c0:	4b35      	ldr	r3, [pc, #212]	; (800a298 <perfect_slalom+0x428>)
 800a1c2:	2207      	movs	r2, #7
 800a1c4:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a1c6:	4b35      	ldr	r3, [pc, #212]	; (800a29c <perfect_slalom+0x42c>)
 800a1c8:	2207      	movs	r2, #7
 800a1ca:	701a      	strb	r2, [r3, #0]

					get_base();
 800a1cc:	f005 fcb6 	bl	800fb3c <get_base>

					searchD();
 800a1d0:	f003 f8ca 	bl	800d368 <searchD>
					HAL_Delay(2000);
 800a1d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a1d8:	f7f6 ff20 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a1dc:	4b2f      	ldr	r3, [pc, #188]	; (800a29c <perfect_slalom+0x42c>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	701a      	strb	r2, [r3, #0]
 800a1e2:	4b2e      	ldr	r3, [pc, #184]	; (800a29c <perfect_slalom+0x42c>)
 800a1e4:	781a      	ldrb	r2, [r3, #0]
 800a1e6:	4b2c      	ldr	r3, [pc, #176]	; (800a298 <perfect_slalom+0x428>)
 800a1e8:	701a      	strb	r2, [r3, #0]
					searchD();
 800a1ea:	f003 f8bd 	bl	800d368 <searchD>

					goal_x = 7;
 800a1ee:	4b2a      	ldr	r3, [pc, #168]	; (800a298 <perfect_slalom+0x428>)
 800a1f0:	2207      	movs	r2, #7
 800a1f2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a1f4:	4b29      	ldr	r3, [pc, #164]	; (800a29c <perfect_slalom+0x42c>)
 800a1f6:	2207      	movs	r2, #7
 800a1f8:	701a      	strb	r2, [r3, #0]
					break;
 800a1fa:	e040      	b.n	800a27e <perfect_slalom+0x40e>

				case 6:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800a1fc:	4820      	ldr	r0, [pc, #128]	; (800a280 <perfect_slalom+0x410>)
 800a1fe:	f006 fb37 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 800a202:	4a20      	ldr	r2, [pc, #128]	; (800a284 <perfect_slalom+0x414>)
 800a204:	8813      	ldrh	r3, [r2, #0]
 800a206:	f043 0320 	orr.w	r3, r3, #32
 800a20a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a20c:	4a1d      	ldr	r2, [pc, #116]	; (800a284 <perfect_slalom+0x414>)
 800a20e:	8813      	ldrh	r3, [r2, #0]
 800a210:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a214:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a216:	4a1b      	ldr	r2, [pc, #108]	; (800a284 <perfect_slalom+0x414>)
 800a218:	8813      	ldrh	r3, [r2, #0]
 800a21a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a21e:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a220:	4b19      	ldr	r3, [pc, #100]	; (800a288 <perfect_slalom+0x418>)
 800a222:	2203      	movs	r2, #3
 800a224:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800a226:	4b19      	ldr	r3, [pc, #100]	; (800a28c <perfect_slalom+0x41c>)
 800a228:	2200      	movs	r2, #0
 800a22a:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 800a22c:	4b18      	ldr	r3, [pc, #96]	; (800a290 <perfect_slalom+0x420>)
 800a22e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a232:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800a234:	4b17      	ldr	r3, [pc, #92]	; (800a294 <perfect_slalom+0x424>)
 800a236:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a23a:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800a23c:	4b16      	ldr	r3, [pc, #88]	; (800a298 <perfect_slalom+0x428>)
 800a23e:	2207      	movs	r2, #7
 800a240:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a242:	4b16      	ldr	r3, [pc, #88]	; (800a29c <perfect_slalom+0x42c>)
 800a244:	2207      	movs	r2, #7
 800a246:	701a      	strb	r2, [r3, #0]

					get_base();
 800a248:	f005 fc78 	bl	800fb3c <get_base>

					searchD();
 800a24c:	f003 f88c 	bl	800d368 <searchD>
					HAL_Delay(2000);
 800a250:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a254:	f7f6 fee2 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a258:	4b10      	ldr	r3, [pc, #64]	; (800a29c <perfect_slalom+0x42c>)
 800a25a:	2200      	movs	r2, #0
 800a25c:	701a      	strb	r2, [r3, #0]
 800a25e:	4b0f      	ldr	r3, [pc, #60]	; (800a29c <perfect_slalom+0x42c>)
 800a260:	781a      	ldrb	r2, [r3, #0]
 800a262:	4b0d      	ldr	r3, [pc, #52]	; (800a298 <perfect_slalom+0x428>)
 800a264:	701a      	strb	r2, [r3, #0]
					searchD();
 800a266:	f003 f87f 	bl	800d368 <searchD>

					goal_x = 7;
 800a26a:	4b0b      	ldr	r3, [pc, #44]	; (800a298 <perfect_slalom+0x428>)
 800a26c:	2207      	movs	r2, #7
 800a26e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a270:	4b0a      	ldr	r3, [pc, #40]	; (800a29c <perfect_slalom+0x42c>)
 800a272:	2207      	movs	r2, #7
 800a274:	701a      	strb	r2, [r3, #0]
					break;
 800a276:	e002      	b.n	800a27e <perfect_slalom+0x40e>

				case 7:
					perfect_pass();
 800a278:	f000 f812 	bl	800a2a0 <perfect_pass>
					break;
 800a27c:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a27e:	e600      	b.n	8009e82 <perfect_slalom+0x12>
 800a280:	08011da8 	.word	0x08011da8
 800a284:	20000f74 	.word	0x20000f74
 800a288:	20000456 	.word	0x20000456
 800a28c:	200015d4 	.word	0x200015d4
 800a290:	20000454 	.word	0x20000454
 800a294:	20000f88 	.word	0x20000f88
 800a298:	20000bb9 	.word	0x20000bb9
 800a29c:	20000b54 	.word	0x20000b54

0800a2a0 <perfect_pass>:
//perfect_pass
// a本番用pass圧縮走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_pass(void){
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0

	int mode = 0;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	607b      	str	r3, [r7, #4]
	printf("Perfect Pass Press, Mode : %d\n", mode);
 800a2aa:	6879      	ldr	r1, [r7, #4]
 800a2ac:	489a      	ldr	r0, [pc, #616]	; (800a518 <perfect_pass+0x278>)
 800a2ae:	f006 fa6b 	bl	8010788 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	f003 0301 	and.w	r3, r3, #1
 800a2ba:	b2d8      	uxtb	r0, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	f003 0302 	and.w	r3, r3, #2
 800a2c4:	b2d9      	uxtb	r1, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	f003 0304 	and.w	r3, r3, #4
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	f005 fc8b 	bl	800fbec <led_write>
		  if(dist_r >= 20){
 800a2d6:	4b91      	ldr	r3, [pc, #580]	; (800a51c <perfect_pass+0x27c>)
 800a2d8:	edd3 7a00 	vldr	s15, [r3]
 800a2dc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a2e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2e8:	db0f      	blt.n	800a30a <perfect_pass+0x6a>
			  mode++;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a2f0:	4b8a      	ldr	r3, [pc, #552]	; (800a51c <perfect_pass+0x27c>)
 800a2f2:	f04f 0200 	mov.w	r2, #0
 800a2f6:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2b07      	cmp	r3, #7
 800a2fc:	dd01      	ble.n	800a302 <perfect_pass+0x62>
				  mode = 0;
 800a2fe:	2300      	movs	r3, #0
 800a300:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a302:	6879      	ldr	r1, [r7, #4]
 800a304:	4886      	ldr	r0, [pc, #536]	; (800a520 <perfect_pass+0x280>)
 800a306:	f006 fa3f 	bl	8010788 <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(dist_r <= -20){
 800a30a:	4b84      	ldr	r3, [pc, #528]	; (800a51c <perfect_pass+0x27c>)
 800a30c:	edd3 7a00 	vldr	s15, [r3]
 800a310:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a314:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a31c:	d80f      	bhi.n	800a33e <perfect_pass+0x9e>
			  mode--;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	3b01      	subs	r3, #1
 800a322:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a324:	4b7d      	ldr	r3, [pc, #500]	; (800a51c <perfect_pass+0x27c>)
 800a326:	f04f 0200 	mov.w	r2, #0
 800a32a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	da01      	bge.n	800a336 <perfect_pass+0x96>
				  mode = 7;
 800a332:	2307      	movs	r3, #7
 800a334:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a336:	6879      	ldr	r1, [r7, #4]
 800a338:	4879      	ldr	r0, [pc, #484]	; (800a520 <perfect_pass+0x280>)
 800a33a:	f006 fa25 	bl	8010788 <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a33e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a342:	4878      	ldr	r0, [pc, #480]	; (800a524 <perfect_pass+0x284>)
 800a344:	f7f7 ffc6 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1b1      	bne.n	800a2b2 <perfect_pass+0x12>
			  HAL_Delay(50);
 800a34e:	2032      	movs	r0, #50	; 0x32
 800a350:	f7f6 fe64 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a354:	bf00      	nop
 800a356:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a35a:	4872      	ldr	r0, [pc, #456]	; (800a524 <perfect_pass+0x284>)
 800a35c:	f7f7 ffba 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d0f7      	beq.n	800a356 <perfect_pass+0xb6>
/*			  for(int i=0; i<m_ok; i++){
	  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
	  		  }
*/
			  drive_ready();
 800a366:	f7fa fc85 	bl	8004c74 <drive_ready>
/*	  		  for(int i=0; i<m_start; i++){
	  			  buzzer(mario_start[i][0], mario_start[i][1]);
	  			  full_led_write(RED);
	  		  }
*/
			  switch(mode){
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2b07      	cmp	r3, #7
 800a36e:	d8a0      	bhi.n	800a2b2 <perfect_pass+0x12>
 800a370:	a201      	add	r2, pc, #4	; (adr r2, 800a378 <perfect_pass+0xd8>)
 800a372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a376:	bf00      	nop
 800a378:	0800a2b3 	.word	0x0800a2b3
 800a37c:	0800a399 	.word	0x0800a399
 800a380:	0800a415 	.word	0x0800a415
 800a384:	0800a497 	.word	0x0800a497
 800a388:	0800a555 	.word	0x0800a555
 800a38c:	0800a2b3 	.word	0x0800a2b3
 800a390:	0800a5fd 	.word	0x0800a5fd
 800a394:	0800a885 	.word	0x0800a885
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800a398:	4863      	ldr	r0, [pc, #396]	; (800a528 <perfect_pass+0x288>)
 800a39a:	f006 fa69 	bl	8010870 <puts>
					MF.FLAG.SCND = 0;
 800a39e:	4a63      	ldr	r2, [pc, #396]	; (800a52c <perfect_pass+0x28c>)
 800a3a0:	8813      	ldrh	r3, [r2, #0]
 800a3a2:	f36f 1345 	bfc	r3, #5, #1
 800a3a6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a3a8:	4a60      	ldr	r2, [pc, #384]	; (800a52c <perfect_pass+0x28c>)
 800a3aa:	8813      	ldrh	r3, [r2, #0]
 800a3ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3b0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a3b2:	4a5e      	ldr	r2, [pc, #376]	; (800a52c <perfect_pass+0x28c>)
 800a3b4:	8813      	ldrh	r3, [r2, #0]
 800a3b6:	f36f 238a 	bfc	r3, #10, #1
 800a3ba:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a3bc:	4b5c      	ldr	r3, [pc, #368]	; (800a530 <perfect_pass+0x290>)
 800a3be:	2202      	movs	r2, #2
 800a3c0:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800a3c2:	4b5c      	ldr	r3, [pc, #368]	; (800a534 <perfect_pass+0x294>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a3c8:	4b5b      	ldr	r3, [pc, #364]	; (800a538 <perfect_pass+0x298>)
 800a3ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ce:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a3d0:	4b5a      	ldr	r3, [pc, #360]	; (800a53c <perfect_pass+0x29c>)
 800a3d2:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a3d6:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800a3d8:	4b59      	ldr	r3, [pc, #356]	; (800a540 <perfect_pass+0x2a0>)
 800a3da:	2207      	movs	r2, #7
 800a3dc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a3de:	4b59      	ldr	r3, [pc, #356]	; (800a544 <perfect_pass+0x2a4>)
 800a3e0:	2207      	movs	r2, #7
 800a3e2:	701a      	strb	r2, [r3, #0]

					get_base();
 800a3e4:	f005 fbaa 	bl	800fb3c <get_base>

					searchC();
 800a3e8:	f002 fe9e 	bl	800d128 <searchC>
					HAL_Delay(2000);
 800a3ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a3f0:	f7f6 fe14 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a3f4:	4b53      	ldr	r3, [pc, #332]	; (800a544 <perfect_pass+0x2a4>)
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	701a      	strb	r2, [r3, #0]
 800a3fa:	4b52      	ldr	r3, [pc, #328]	; (800a544 <perfect_pass+0x2a4>)
 800a3fc:	781a      	ldrb	r2, [r3, #0]
 800a3fe:	4b50      	ldr	r3, [pc, #320]	; (800a540 <perfect_pass+0x2a0>)
 800a400:	701a      	strb	r2, [r3, #0]
					searchC();
 800a402:	f002 fe91 	bl	800d128 <searchC>

					goal_x = 7;
 800a406:	4b4e      	ldr	r3, [pc, #312]	; (800a540 <perfect_pass+0x2a0>)
 800a408:	2207      	movs	r2, #7
 800a40a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a40c:	4b4d      	ldr	r3, [pc, #308]	; (800a544 <perfect_pass+0x2a4>)
 800a40e:	2207      	movs	r2, #7
 800a410:	701a      	strb	r2, [r3, #0]
					break;
 800a412:	e363      	b.n	800aadc <perfect_pass+0x83c>

				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 800a414:	484c      	ldr	r0, [pc, #304]	; (800a548 <perfect_pass+0x2a8>)
 800a416:	f006 fa2b 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 800a41a:	4a44      	ldr	r2, [pc, #272]	; (800a52c <perfect_pass+0x28c>)
 800a41c:	8813      	ldrh	r3, [r2, #0]
 800a41e:	f043 0320 	orr.w	r3, r3, #32
 800a422:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a424:	4a41      	ldr	r2, [pc, #260]	; (800a52c <perfect_pass+0x28c>)
 800a426:	8813      	ldrh	r3, [r2, #0]
 800a428:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a42c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a42e:	4a3f      	ldr	r2, [pc, #252]	; (800a52c <perfect_pass+0x28c>)
 800a430:	8813      	ldrh	r3, [r2, #0]
 800a432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a436:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a438:	4b3d      	ldr	r3, [pc, #244]	; (800a530 <perfect_pass+0x290>)
 800a43a:	2202      	movs	r2, #2
 800a43c:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800a43e:	4b3d      	ldr	r3, [pc, #244]	; (800a534 <perfect_pass+0x294>)
 800a440:	2200      	movs	r2, #0
 800a442:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a444:	4b3c      	ldr	r3, [pc, #240]	; (800a538 <perfect_pass+0x298>)
 800a446:	f241 3288 	movw	r2, #5000	; 0x1388
 800a44a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a44c:	4b3b      	ldr	r3, [pc, #236]	; (800a53c <perfect_pass+0x29c>)
 800a44e:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a452:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a454:	4b3d      	ldr	r3, [pc, #244]	; (800a54c <perfect_pass+0x2ac>)
 800a456:	2203      	movs	r2, #3
 800a458:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800a45a:	4b39      	ldr	r3, [pc, #228]	; (800a540 <perfect_pass+0x2a0>)
 800a45c:	2207      	movs	r2, #7
 800a45e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a460:	4b38      	ldr	r3, [pc, #224]	; (800a544 <perfect_pass+0x2a4>)
 800a462:	2207      	movs	r2, #7
 800a464:	701a      	strb	r2, [r3, #0]

					get_base();
 800a466:	f005 fb69 	bl	800fb3c <get_base>

					searchF3();
 800a46a:	f003 f927 	bl	800d6bc <searchF3>
					HAL_Delay(2000);
 800a46e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a472:	f7f6 fdd3 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a476:	4b33      	ldr	r3, [pc, #204]	; (800a544 <perfect_pass+0x2a4>)
 800a478:	2200      	movs	r2, #0
 800a47a:	701a      	strb	r2, [r3, #0]
 800a47c:	4b31      	ldr	r3, [pc, #196]	; (800a544 <perfect_pass+0x2a4>)
 800a47e:	781a      	ldrb	r2, [r3, #0]
 800a480:	4b2f      	ldr	r3, [pc, #188]	; (800a540 <perfect_pass+0x2a0>)
 800a482:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a484:	f003 f91a 	bl	800d6bc <searchF3>

					goal_x = 7;
 800a488:	4b2d      	ldr	r3, [pc, #180]	; (800a540 <perfect_pass+0x2a0>)
 800a48a:	2207      	movs	r2, #7
 800a48c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a48e:	4b2d      	ldr	r3, [pc, #180]	; (800a544 <perfect_pass+0x2a4>)
 800a490:	2207      	movs	r2, #7
 800a492:	701a      	strb	r2, [r3, #0]
					break;
 800a494:	e322      	b.n	800aadc <perfect_pass+0x83c>
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 800a496:	482e      	ldr	r0, [pc, #184]	; (800a550 <perfect_pass+0x2b0>)
 800a498:	f006 f9ea 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 800a49c:	4a23      	ldr	r2, [pc, #140]	; (800a52c <perfect_pass+0x28c>)
 800a49e:	8813      	ldrh	r3, [r2, #0]
 800a4a0:	f043 0320 	orr.w	r3, r3, #32
 800a4a4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a4a6:	4a21      	ldr	r2, [pc, #132]	; (800a52c <perfect_pass+0x28c>)
 800a4a8:	8813      	ldrh	r3, [r2, #0]
 800a4aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a4ae:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a4b0:	4a1e      	ldr	r2, [pc, #120]	; (800a52c <perfect_pass+0x28c>)
 800a4b2:	8813      	ldrh	r3, [r2, #0]
 800a4b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a4b8:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a4ba:	4b1d      	ldr	r3, [pc, #116]	; (800a530 <perfect_pass+0x290>)
 800a4bc:	2203      	movs	r2, #3
 800a4be:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800a4c0:	4b1c      	ldr	r3, [pc, #112]	; (800a534 <perfect_pass+0x294>)
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a4c6:	4b1c      	ldr	r3, [pc, #112]	; (800a538 <perfect_pass+0x298>)
 800a4c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4cc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a4ce:	4b1b      	ldr	r3, [pc, #108]	; (800a53c <perfect_pass+0x29c>)
 800a4d0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a4d4:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a4d6:	4b1d      	ldr	r3, [pc, #116]	; (800a54c <perfect_pass+0x2ac>)
 800a4d8:	2203      	movs	r2, #3
 800a4da:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800a4dc:	4b18      	ldr	r3, [pc, #96]	; (800a540 <perfect_pass+0x2a0>)
 800a4de:	2207      	movs	r2, #7
 800a4e0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a4e2:	4b18      	ldr	r3, [pc, #96]	; (800a544 <perfect_pass+0x2a4>)
 800a4e4:	2207      	movs	r2, #7
 800a4e6:	701a      	strb	r2, [r3, #0]

					get_base();
 800a4e8:	f005 fb28 	bl	800fb3c <get_base>

					searchF3();
 800a4ec:	f003 f8e6 	bl	800d6bc <searchF3>
					HAL_Delay(2000);
 800a4f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a4f4:	f7f6 fd92 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a4f8:	4b12      	ldr	r3, [pc, #72]	; (800a544 <perfect_pass+0x2a4>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	701a      	strb	r2, [r3, #0]
 800a4fe:	4b11      	ldr	r3, [pc, #68]	; (800a544 <perfect_pass+0x2a4>)
 800a500:	781a      	ldrb	r2, [r3, #0]
 800a502:	4b0f      	ldr	r3, [pc, #60]	; (800a540 <perfect_pass+0x2a0>)
 800a504:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a506:	f003 f8d9 	bl	800d6bc <searchF3>

					goal_x = 7;
 800a50a:	4b0d      	ldr	r3, [pc, #52]	; (800a540 <perfect_pass+0x2a0>)
 800a50c:	2207      	movs	r2, #7
 800a50e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a510:	4b0c      	ldr	r3, [pc, #48]	; (800a544 <perfect_pass+0x2a4>)
 800a512:	2207      	movs	r2, #7
 800a514:	701a      	strb	r2, [r3, #0]
					break;
 800a516:	e2e1      	b.n	800aadc <perfect_pass+0x83c>
 800a518:	08011e68 	.word	0x08011e68
 800a51c:	20000af4 	.word	0x20000af4
 800a520:	080119c4 	.word	0x080119c4
 800a524:	40020000 	.word	0x40020000
 800a528:	08011d50 	.word	0x08011d50
 800a52c:	20000f74 	.word	0x20000f74
 800a530:	20000456 	.word	0x20000456
 800a534:	200015d4 	.word	0x200015d4
 800a538:	20000454 	.word	0x20000454
 800a53c:	20000f88 	.word	0x20000f88
 800a540:	20000bb9 	.word	0x20000bb9
 800a544:	20000b54 	.word	0x20000b54
 800a548:	08011d08 	.word	0x08011d08
 800a54c:	20000457 	.word	0x20000457
 800a550:	08011d18 	.word	0x08011d18
				case 4:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800a554:	4820      	ldr	r0, [pc, #128]	; (800a5d8 <perfect_pass+0x338>)
 800a556:	f006 f98b 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 800a55a:	4a20      	ldr	r2, [pc, #128]	; (800a5dc <perfect_pass+0x33c>)
 800a55c:	8813      	ldrh	r3, [r2, #0]
 800a55e:	f043 0320 	orr.w	r3, r3, #32
 800a562:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a564:	4a1d      	ldr	r2, [pc, #116]	; (800a5dc <perfect_pass+0x33c>)
 800a566:	8813      	ldrh	r3, [r2, #0]
 800a568:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a56c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a56e:	4a1b      	ldr	r2, [pc, #108]	; (800a5dc <perfect_pass+0x33c>)
 800a570:	8813      	ldrh	r3, [r2, #0]
 800a572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a576:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a578:	4b19      	ldr	r3, [pc, #100]	; (800a5e0 <perfect_pass+0x340>)
 800a57a:	2202      	movs	r2, #2
 800a57c:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800a57e:	4b19      	ldr	r3, [pc, #100]	; (800a5e4 <perfect_pass+0x344>)
 800a580:	2200      	movs	r2, #0
 800a582:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a584:	4b18      	ldr	r3, [pc, #96]	; (800a5e8 <perfect_pass+0x348>)
 800a586:	f241 3288 	movw	r2, #5000	; 0x1388
 800a58a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a58c:	4b17      	ldr	r3, [pc, #92]	; (800a5ec <perfect_pass+0x34c>)
 800a58e:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a592:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800a594:	4b16      	ldr	r3, [pc, #88]	; (800a5f0 <perfect_pass+0x350>)
 800a596:	2204      	movs	r2, #4
 800a598:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800a59a:	4b16      	ldr	r3, [pc, #88]	; (800a5f4 <perfect_pass+0x354>)
 800a59c:	2207      	movs	r2, #7
 800a59e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a5a0:	4b15      	ldr	r3, [pc, #84]	; (800a5f8 <perfect_pass+0x358>)
 800a5a2:	2207      	movs	r2, #7
 800a5a4:	701a      	strb	r2, [r3, #0]

					get_base();
 800a5a6:	f005 fac9 	bl	800fb3c <get_base>

					searchF4();
 800a5aa:	f003 f94b 	bl	800d844 <searchF4>
					HAL_Delay(2000);
 800a5ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a5b2:	f7f6 fd33 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a5b6:	4b10      	ldr	r3, [pc, #64]	; (800a5f8 <perfect_pass+0x358>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	701a      	strb	r2, [r3, #0]
 800a5bc:	4b0e      	ldr	r3, [pc, #56]	; (800a5f8 <perfect_pass+0x358>)
 800a5be:	781a      	ldrb	r2, [r3, #0]
 800a5c0:	4b0c      	ldr	r3, [pc, #48]	; (800a5f4 <perfect_pass+0x354>)
 800a5c2:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a5c4:	f003 f93e 	bl	800d844 <searchF4>

					goal_x = 7;
 800a5c8:	4b0a      	ldr	r3, [pc, #40]	; (800a5f4 <perfect_pass+0x354>)
 800a5ca:	2207      	movs	r2, #7
 800a5cc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a5ce:	4b0a      	ldr	r3, [pc, #40]	; (800a5f8 <perfect_pass+0x358>)
 800a5d0:	2207      	movs	r2, #7
 800a5d2:	701a      	strb	r2, [r3, #0]
					break;
 800a5d4:	e282      	b.n	800aadc <perfect_pass+0x83c>
 800a5d6:	bf00      	nop
 800a5d8:	08011d28 	.word	0x08011d28
 800a5dc:	20000f74 	.word	0x20000f74
 800a5e0:	20000456 	.word	0x20000456
 800a5e4:	200015d4 	.word	0x200015d4
 800a5e8:	20000454 	.word	0x20000454
 800a5ec:	20000f88 	.word	0x20000f88
 800a5f0:	20000457 	.word	0x20000457
 800a5f4:	20000bb9 	.word	0x20000bb9
 800a5f8:	20000b54 	.word	0x20000b54

				case 5:
					break;
				case 6:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800a5fc:	4895      	ldr	r0, [pc, #596]	; (800a854 <perfect_pass+0x5b4>)
 800a5fe:	f006 f937 	bl	8010870 <puts>
					MF.FLAG.SCND = 0;
 800a602:	4a95      	ldr	r2, [pc, #596]	; (800a858 <perfect_pass+0x5b8>)
 800a604:	8813      	ldrh	r3, [r2, #0]
 800a606:	f36f 1345 	bfc	r3, #5, #1
 800a60a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a60c:	4a92      	ldr	r2, [pc, #584]	; (800a858 <perfect_pass+0x5b8>)
 800a60e:	8813      	ldrh	r3, [r2, #0]
 800a610:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a614:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a616:	4a90      	ldr	r2, [pc, #576]	; (800a858 <perfect_pass+0x5b8>)
 800a618:	8813      	ldrh	r3, [r2, #0]
 800a61a:	f36f 238a 	bfc	r3, #10, #1
 800a61e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a620:	4b8e      	ldr	r3, [pc, #568]	; (800a85c <perfect_pass+0x5bc>)
 800a622:	2202      	movs	r2, #2
 800a624:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800a626:	4b8e      	ldr	r3, [pc, #568]	; (800a860 <perfect_pass+0x5c0>)
 800a628:	2200      	movs	r2, #0
 800a62a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a62c:	4b8d      	ldr	r3, [pc, #564]	; (800a864 <perfect_pass+0x5c4>)
 800a62e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a632:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a634:	4b8c      	ldr	r3, [pc, #560]	; (800a868 <perfect_pass+0x5c8>)
 800a636:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a63a:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800a63c:	4b8b      	ldr	r3, [pc, #556]	; (800a86c <perfect_pass+0x5cc>)
 800a63e:	2209      	movs	r2, #9
 800a640:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a642:	4b8b      	ldr	r3, [pc, #556]	; (800a870 <perfect_pass+0x5d0>)
 800a644:	2206      	movs	r2, #6
 800a646:	701a      	strb	r2, [r3, #0]

					get_base();
 800a648:	f005 fa78 	bl	800fb3c <get_base>

					searchC();
 800a64c:	f002 fd6c 	bl	800d128 <searchC>
					HAL_Delay(2000);
 800a650:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a654:	f7f6 fce2 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a658:	4b85      	ldr	r3, [pc, #532]	; (800a870 <perfect_pass+0x5d0>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	701a      	strb	r2, [r3, #0]
 800a65e:	4b84      	ldr	r3, [pc, #528]	; (800a870 <perfect_pass+0x5d0>)
 800a660:	781a      	ldrb	r2, [r3, #0]
 800a662:	4b82      	ldr	r3, [pc, #520]	; (800a86c <perfect_pass+0x5cc>)
 800a664:	701a      	strb	r2, [r3, #0]
					searchC();
 800a666:	f002 fd5f 	bl	800d128 <searchC>

					degree_z = target_degree_z;
 800a66a:	4b82      	ldr	r3, [pc, #520]	; (800a874 <perfect_pass+0x5d4>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a82      	ldr	r2, [pc, #520]	; (800a878 <perfect_pass+0x5d8>)
 800a670:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800a672:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a676:	f7f6 fcd1 	bl	800101c <HAL_Delay>


					//----a二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 800a67a:	4880      	ldr	r0, [pc, #512]	; (800a87c <perfect_pass+0x5dc>)
 800a67c:	f006 f8f8 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 800a680:	4a75      	ldr	r2, [pc, #468]	; (800a858 <perfect_pass+0x5b8>)
 800a682:	8813      	ldrh	r3, [r2, #0]
 800a684:	f043 0320 	orr.w	r3, r3, #32
 800a688:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a68a:	4a73      	ldr	r2, [pc, #460]	; (800a858 <perfect_pass+0x5b8>)
 800a68c:	8813      	ldrh	r3, [r2, #0]
 800a68e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a692:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a694:	4a70      	ldr	r2, [pc, #448]	; (800a858 <perfect_pass+0x5b8>)
 800a696:	8813      	ldrh	r3, [r2, #0]
 800a698:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a69c:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a69e:	4b6f      	ldr	r3, [pc, #444]	; (800a85c <perfect_pass+0x5bc>)
 800a6a0:	2202      	movs	r2, #2
 800a6a2:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800a6a4:	4b6e      	ldr	r3, [pc, #440]	; (800a860 <perfect_pass+0x5c0>)
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	701a      	strb	r2, [r3, #0]

					accel_hs = 5000;
 800a6aa:	4b6e      	ldr	r3, [pc, #440]	; (800a864 <perfect_pass+0x5c4>)
 800a6ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6b0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a6b2:	4b6d      	ldr	r3, [pc, #436]	; (800a868 <perfect_pass+0x5c8>)
 800a6b4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a6b8:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a6ba:	4b6c      	ldr	r3, [pc, #432]	; (800a86c <perfect_pass+0x5cc>)
 800a6bc:	2209      	movs	r2, #9
 800a6be:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a6c0:	4b6b      	ldr	r3, [pc, #428]	; (800a870 <perfect_pass+0x5d0>)
 800a6c2:	2206      	movs	r2, #6
 800a6c4:	701a      	strb	r2, [r3, #0]

					searchD();
 800a6c6:	f002 fe4f 	bl	800d368 <searchD>
					HAL_Delay(2000);
 800a6ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a6ce:	f7f6 fca5 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a6d2:	4b67      	ldr	r3, [pc, #412]	; (800a870 <perfect_pass+0x5d0>)
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	701a      	strb	r2, [r3, #0]
 800a6d8:	4b65      	ldr	r3, [pc, #404]	; (800a870 <perfect_pass+0x5d0>)
 800a6da:	781a      	ldrb	r2, [r3, #0]
 800a6dc:	4b63      	ldr	r3, [pc, #396]	; (800a86c <perfect_pass+0x5cc>)
 800a6de:	701a      	strb	r2, [r3, #0]
					searchD();
 800a6e0:	f002 fe42 	bl	800d368 <searchD>

					degree_z = target_degree_z;
 800a6e4:	4b63      	ldr	r3, [pc, #396]	; (800a874 <perfect_pass+0x5d4>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a63      	ldr	r2, [pc, #396]	; (800a878 <perfect_pass+0x5d8>)
 800a6ea:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800a6ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a6f0:	f7f6 fc94 	bl	800101c <HAL_Delay>
					degree_z = target_degree_z;
					HAL_Delay(2000);

*/
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800a6f4:	4862      	ldr	r0, [pc, #392]	; (800a880 <perfect_pass+0x5e0>)
 800a6f6:	f006 f8bb 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 800a6fa:	4a57      	ldr	r2, [pc, #348]	; (800a858 <perfect_pass+0x5b8>)
 800a6fc:	8813      	ldrh	r3, [r2, #0]
 800a6fe:	f043 0320 	orr.w	r3, r3, #32
 800a702:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a704:	4a54      	ldr	r2, [pc, #336]	; (800a858 <perfect_pass+0x5b8>)
 800a706:	8813      	ldrh	r3, [r2, #0]
 800a708:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a70c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a70e:	4a52      	ldr	r2, [pc, #328]	; (800a858 <perfect_pass+0x5b8>)
 800a710:	8813      	ldrh	r3, [r2, #0]
 800a712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a716:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a718:	4b50      	ldr	r3, [pc, #320]	; (800a85c <perfect_pass+0x5bc>)
 800a71a:	2203      	movs	r2, #3
 800a71c:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800a71e:	4b50      	ldr	r3, [pc, #320]	; (800a860 <perfect_pass+0x5c0>)
 800a720:	2200      	movs	r2, #0
 800a722:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800a724:	4b4f      	ldr	r3, [pc, #316]	; (800a864 <perfect_pass+0x5c4>)
 800a726:	f242 7210 	movw	r2, #10000	; 0x2710
 800a72a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a72c:	4b4e      	ldr	r3, [pc, #312]	; (800a868 <perfect_pass+0x5c8>)
 800a72e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a732:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a734:	4b4d      	ldr	r3, [pc, #308]	; (800a86c <perfect_pass+0x5cc>)
 800a736:	2209      	movs	r2, #9
 800a738:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a73a:	4b4d      	ldr	r3, [pc, #308]	; (800a870 <perfect_pass+0x5d0>)
 800a73c:	2206      	movs	r2, #6
 800a73e:	701a      	strb	r2, [r3, #0]

					searchD();
 800a740:	f002 fe12 	bl	800d368 <searchD>
					HAL_Delay(2000);
 800a744:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a748:	f7f6 fc68 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a74c:	4b48      	ldr	r3, [pc, #288]	; (800a870 <perfect_pass+0x5d0>)
 800a74e:	2200      	movs	r2, #0
 800a750:	701a      	strb	r2, [r3, #0]
 800a752:	4b47      	ldr	r3, [pc, #284]	; (800a870 <perfect_pass+0x5d0>)
 800a754:	781a      	ldrb	r2, [r3, #0]
 800a756:	4b45      	ldr	r3, [pc, #276]	; (800a86c <perfect_pass+0x5cc>)
 800a758:	701a      	strb	r2, [r3, #0]
					searchD();
 800a75a:	f002 fe05 	bl	800d368 <searchD>

					degree_z = target_degree_z;
 800a75e:	4b45      	ldr	r3, [pc, #276]	; (800a874 <perfect_pass+0x5d4>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a45      	ldr	r2, [pc, #276]	; (800a878 <perfect_pass+0x5d8>)
 800a764:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800a766:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a76a:	f7f6 fc57 	bl	800101c <HAL_Delay>


					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed2----
					printf("Second Run. (Slalom)\n");
 800a76e:	4844      	ldr	r0, [pc, #272]	; (800a880 <perfect_pass+0x5e0>)
 800a770:	f006 f87e 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 800a774:	4a38      	ldr	r2, [pc, #224]	; (800a858 <perfect_pass+0x5b8>)
 800a776:	8813      	ldrh	r3, [r2, #0]
 800a778:	f043 0320 	orr.w	r3, r3, #32
 800a77c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a77e:	4a36      	ldr	r2, [pc, #216]	; (800a858 <perfect_pass+0x5b8>)
 800a780:	8813      	ldrh	r3, [r2, #0]
 800a782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a786:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a788:	4a33      	ldr	r2, [pc, #204]	; (800a858 <perfect_pass+0x5b8>)
 800a78a:	8813      	ldrh	r3, [r2, #0]
 800a78c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a790:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a792:	4b32      	ldr	r3, [pc, #200]	; (800a85c <perfect_pass+0x5bc>)
 800a794:	2203      	movs	r2, #3
 800a796:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800a798:	4b31      	ldr	r3, [pc, #196]	; (800a860 <perfect_pass+0x5c0>)
 800a79a:	2200      	movs	r2, #0
 800a79c:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800a79e:	4b31      	ldr	r3, [pc, #196]	; (800a864 <perfect_pass+0x5c4>)
 800a7a0:	f242 7210 	movw	r2, #10000	; 0x2710
 800a7a4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800a7a6:	4b30      	ldr	r3, [pc, #192]	; (800a868 <perfect_pass+0x5c8>)
 800a7a8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a7ac:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a7ae:	4b2f      	ldr	r3, [pc, #188]	; (800a86c <perfect_pass+0x5cc>)
 800a7b0:	2209      	movs	r2, #9
 800a7b2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a7b4:	4b2e      	ldr	r3, [pc, #184]	; (800a870 <perfect_pass+0x5d0>)
 800a7b6:	2206      	movs	r2, #6
 800a7b8:	701a      	strb	r2, [r3, #0]

					searchD();
 800a7ba:	f002 fdd5 	bl	800d368 <searchD>
					HAL_Delay(2000);
 800a7be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a7c2:	f7f6 fc2b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a7c6:	4b2a      	ldr	r3, [pc, #168]	; (800a870 <perfect_pass+0x5d0>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	701a      	strb	r2, [r3, #0]
 800a7cc:	4b28      	ldr	r3, [pc, #160]	; (800a870 <perfect_pass+0x5d0>)
 800a7ce:	781a      	ldrb	r2, [r3, #0]
 800a7d0:	4b26      	ldr	r3, [pc, #152]	; (800a86c <perfect_pass+0x5cc>)
 800a7d2:	701a      	strb	r2, [r3, #0]
					searchD();
 800a7d4:	f002 fdc8 	bl	800d368 <searchD>

					degree_z = target_degree_z;
 800a7d8:	4b26      	ldr	r3, [pc, #152]	; (800a874 <perfect_pass+0x5d4>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a26      	ldr	r2, [pc, #152]	; (800a878 <perfect_pass+0x5d8>)
 800a7de:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800a7e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a7e4:	f7f6 fc1a 	bl	800101c <HAL_Delay>


					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed3----
					printf("Second Run. (Slalom)\n");
 800a7e8:	4825      	ldr	r0, [pc, #148]	; (800a880 <perfect_pass+0x5e0>)
 800a7ea:	f006 f841 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 800a7ee:	4a1a      	ldr	r2, [pc, #104]	; (800a858 <perfect_pass+0x5b8>)
 800a7f0:	8813      	ldrh	r3, [r2, #0]
 800a7f2:	f043 0320 	orr.w	r3, r3, #32
 800a7f6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a7f8:	4a17      	ldr	r2, [pc, #92]	; (800a858 <perfect_pass+0x5b8>)
 800a7fa:	8813      	ldrh	r3, [r2, #0]
 800a7fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a800:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a802:	4a15      	ldr	r2, [pc, #84]	; (800a858 <perfect_pass+0x5b8>)
 800a804:	8813      	ldrh	r3, [r2, #0]
 800a806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a80a:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a80c:	4b13      	ldr	r3, [pc, #76]	; (800a85c <perfect_pass+0x5bc>)
 800a80e:	2203      	movs	r2, #3
 800a810:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800a812:	4b13      	ldr	r3, [pc, #76]	; (800a860 <perfect_pass+0x5c0>)
 800a814:	2200      	movs	r2, #0
 800a816:	701a      	strb	r2, [r3, #0]
					accel_hs = 20000;
 800a818:	4b12      	ldr	r3, [pc, #72]	; (800a864 <perfect_pass+0x5c4>)
 800a81a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800a81e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800a820:	4b11      	ldr	r3, [pc, #68]	; (800a868 <perfect_pass+0x5c8>)
 800a822:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a826:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a828:	4b10      	ldr	r3, [pc, #64]	; (800a86c <perfect_pass+0x5cc>)
 800a82a:	2209      	movs	r2, #9
 800a82c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a82e:	4b10      	ldr	r3, [pc, #64]	; (800a870 <perfect_pass+0x5d0>)
 800a830:	2206      	movs	r2, #6
 800a832:	701a      	strb	r2, [r3, #0]

					searchD();
 800a834:	f002 fd98 	bl	800d368 <searchD>
					HAL_Delay(2000);
 800a838:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a83c:	f7f6 fbee 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a840:	4b0b      	ldr	r3, [pc, #44]	; (800a870 <perfect_pass+0x5d0>)
 800a842:	2200      	movs	r2, #0
 800a844:	701a      	strb	r2, [r3, #0]
 800a846:	4b0a      	ldr	r3, [pc, #40]	; (800a870 <perfect_pass+0x5d0>)
 800a848:	781a      	ldrb	r2, [r3, #0]
 800a84a:	4b08      	ldr	r3, [pc, #32]	; (800a86c <perfect_pass+0x5cc>)
 800a84c:	701a      	strb	r2, [r3, #0]
					searchD();
 800a84e:	f002 fd8b 	bl	800d368 <searchD>
					searchF4();

					goal_x = 7;
					goal_y = 7;

*/					break;
 800a852:	e143      	b.n	800aadc <perfect_pass+0x83c>
 800a854:	08011d50 	.word	0x08011d50
 800a858:	20000f74 	.word	0x20000f74
 800a85c:	20000456 	.word	0x20000456
 800a860:	200015d4 	.word	0x200015d4
 800a864:	20000454 	.word	0x20000454
 800a868:	20000f88 	.word	0x20000f88
 800a86c:	20000bb9 	.word	0x20000bb9
 800a870:	20000b54 	.word	0x20000b54
 800a874:	20000c08 	.word	0x20000c08
 800a878:	20000b64 	.word	0x20000b64
 800a87c:	08011d74 	.word	0x08011d74
 800a880:	08011da8 	.word	0x08011da8

					break;
				case 7:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800a884:	4896      	ldr	r0, [pc, #600]	; (800aae0 <perfect_pass+0x840>)
 800a886:	f005 fff3 	bl	8010870 <puts>
					MF.FLAG.SCND = 0;
 800a88a:	4a96      	ldr	r2, [pc, #600]	; (800aae4 <perfect_pass+0x844>)
 800a88c:	8813      	ldrh	r3, [r2, #0]
 800a88e:	f36f 1345 	bfc	r3, #5, #1
 800a892:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a894:	4a93      	ldr	r2, [pc, #588]	; (800aae4 <perfect_pass+0x844>)
 800a896:	8813      	ldrh	r3, [r2, #0]
 800a898:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a89c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a89e:	4a91      	ldr	r2, [pc, #580]	; (800aae4 <perfect_pass+0x844>)
 800a8a0:	8813      	ldrh	r3, [r2, #0]
 800a8a2:	f36f 238a 	bfc	r3, #10, #1
 800a8a6:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a8a8:	4b8f      	ldr	r3, [pc, #572]	; (800aae8 <perfect_pass+0x848>)
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800a8ae:	4b8f      	ldr	r3, [pc, #572]	; (800aaec <perfect_pass+0x84c>)
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a8b4:	4b8e      	ldr	r3, [pc, #568]	; (800aaf0 <perfect_pass+0x850>)
 800a8b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8ba:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a8bc:	4b8d      	ldr	r3, [pc, #564]	; (800aaf4 <perfect_pass+0x854>)
 800a8be:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a8c2:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800a8c4:	4b8c      	ldr	r3, [pc, #560]	; (800aaf8 <perfect_pass+0x858>)
 800a8c6:	2207      	movs	r2, #7
 800a8c8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a8ca:	4b8c      	ldr	r3, [pc, #560]	; (800aafc <perfect_pass+0x85c>)
 800a8cc:	2207      	movs	r2, #7
 800a8ce:	701a      	strb	r2, [r3, #0]

					get_base();
 800a8d0:	f005 f934 	bl	800fb3c <get_base>

					searchC();
 800a8d4:	f002 fc28 	bl	800d128 <searchC>
					HAL_Delay(2000);
 800a8d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a8dc:	f7f6 fb9e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a8e0:	4b86      	ldr	r3, [pc, #536]	; (800aafc <perfect_pass+0x85c>)
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	701a      	strb	r2, [r3, #0]
 800a8e6:	4b85      	ldr	r3, [pc, #532]	; (800aafc <perfect_pass+0x85c>)
 800a8e8:	781a      	ldrb	r2, [r3, #0]
 800a8ea:	4b83      	ldr	r3, [pc, #524]	; (800aaf8 <perfect_pass+0x858>)
 800a8ec:	701a      	strb	r2, [r3, #0]
					searchC();
 800a8ee:	f002 fc1b 	bl	800d128 <searchC>

					degree_z = target_degree_z;
 800a8f2:	4b83      	ldr	r3, [pc, #524]	; (800ab00 <perfect_pass+0x860>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a83      	ldr	r2, [pc, #524]	; (800ab04 <perfect_pass+0x864>)
 800a8f8:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800a8fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a8fe:	f7f6 fb8d 	bl	800101c <HAL_Delay>


					//----a二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 800a902:	4881      	ldr	r0, [pc, #516]	; (800ab08 <perfect_pass+0x868>)
 800a904:	f005 ffb4 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 800a908:	4a76      	ldr	r2, [pc, #472]	; (800aae4 <perfect_pass+0x844>)
 800a90a:	8813      	ldrh	r3, [r2, #0]
 800a90c:	f043 0320 	orr.w	r3, r3, #32
 800a910:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a912:	4a74      	ldr	r2, [pc, #464]	; (800aae4 <perfect_pass+0x844>)
 800a914:	8813      	ldrh	r3, [r2, #0]
 800a916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a91a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a91c:	4a71      	ldr	r2, [pc, #452]	; (800aae4 <perfect_pass+0x844>)
 800a91e:	8813      	ldrh	r3, [r2, #0]
 800a920:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a924:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a926:	4b70      	ldr	r3, [pc, #448]	; (800aae8 <perfect_pass+0x848>)
 800a928:	2202      	movs	r2, #2
 800a92a:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800a92c:	4b6f      	ldr	r3, [pc, #444]	; (800aaec <perfect_pass+0x84c>)
 800a92e:	2200      	movs	r2, #0
 800a930:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a932:	4b6f      	ldr	r3, [pc, #444]	; (800aaf0 <perfect_pass+0x850>)
 800a934:	f241 3288 	movw	r2, #5000	; 0x1388
 800a938:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a93a:	4b6e      	ldr	r3, [pc, #440]	; (800aaf4 <perfect_pass+0x854>)
 800a93c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a940:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800a942:	4b6d      	ldr	r3, [pc, #436]	; (800aaf8 <perfect_pass+0x858>)
 800a944:	2207      	movs	r2, #7
 800a946:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a948:	4b6c      	ldr	r3, [pc, #432]	; (800aafc <perfect_pass+0x85c>)
 800a94a:	2207      	movs	r2, #7
 800a94c:	701a      	strb	r2, [r3, #0]

					searchD();
 800a94e:	f002 fd0b 	bl	800d368 <searchD>
					HAL_Delay(2000);
 800a952:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a956:	f7f6 fb61 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a95a:	4b68      	ldr	r3, [pc, #416]	; (800aafc <perfect_pass+0x85c>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	701a      	strb	r2, [r3, #0]
 800a960:	4b66      	ldr	r3, [pc, #408]	; (800aafc <perfect_pass+0x85c>)
 800a962:	781a      	ldrb	r2, [r3, #0]
 800a964:	4b64      	ldr	r3, [pc, #400]	; (800aaf8 <perfect_pass+0x858>)
 800a966:	701a      	strb	r2, [r3, #0]
					searchD();
 800a968:	f002 fcfe 	bl	800d368 <searchD>

					degree_z = target_degree_z;
 800a96c:	4b64      	ldr	r3, [pc, #400]	; (800ab00 <perfect_pass+0x860>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a64      	ldr	r2, [pc, #400]	; (800ab04 <perfect_pass+0x864>)
 800a972:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800a974:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a978:	f7f6 fb50 	bl	800101c <HAL_Delay>
					degree_z = target_degree_z;
					HAL_Delay(2000);

*/
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800a97c:	4863      	ldr	r0, [pc, #396]	; (800ab0c <perfect_pass+0x86c>)
 800a97e:	f005 ff77 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 800a982:	4a58      	ldr	r2, [pc, #352]	; (800aae4 <perfect_pass+0x844>)
 800a984:	8813      	ldrh	r3, [r2, #0]
 800a986:	f043 0320 	orr.w	r3, r3, #32
 800a98a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a98c:	4a55      	ldr	r2, [pc, #340]	; (800aae4 <perfect_pass+0x844>)
 800a98e:	8813      	ldrh	r3, [r2, #0]
 800a990:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a994:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a996:	4a53      	ldr	r2, [pc, #332]	; (800aae4 <perfect_pass+0x844>)
 800a998:	8813      	ldrh	r3, [r2, #0]
 800a99a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a99e:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a9a0:	4b51      	ldr	r3, [pc, #324]	; (800aae8 <perfect_pass+0x848>)
 800a9a2:	2203      	movs	r2, #3
 800a9a4:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800a9a6:	4b51      	ldr	r3, [pc, #324]	; (800aaec <perfect_pass+0x84c>)
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800a9ac:	4b50      	ldr	r3, [pc, #320]	; (800aaf0 <perfect_pass+0x850>)
 800a9ae:	f242 7210 	movw	r2, #10000	; 0x2710
 800a9b2:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800a9b4:	4b4f      	ldr	r3, [pc, #316]	; (800aaf4 <perfect_pass+0x854>)
 800a9b6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a9ba:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800a9bc:	4b4e      	ldr	r3, [pc, #312]	; (800aaf8 <perfect_pass+0x858>)
 800a9be:	2207      	movs	r2, #7
 800a9c0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a9c2:	4b4e      	ldr	r3, [pc, #312]	; (800aafc <perfect_pass+0x85c>)
 800a9c4:	2207      	movs	r2, #7
 800a9c6:	701a      	strb	r2, [r3, #0]

					searchD();
 800a9c8:	f002 fcce 	bl	800d368 <searchD>
					HAL_Delay(2000);
 800a9cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a9d0:	f7f6 fb24 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a9d4:	4b49      	ldr	r3, [pc, #292]	; (800aafc <perfect_pass+0x85c>)
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	701a      	strb	r2, [r3, #0]
 800a9da:	4b48      	ldr	r3, [pc, #288]	; (800aafc <perfect_pass+0x85c>)
 800a9dc:	781a      	ldrb	r2, [r3, #0]
 800a9de:	4b46      	ldr	r3, [pc, #280]	; (800aaf8 <perfect_pass+0x858>)
 800a9e0:	701a      	strb	r2, [r3, #0]
					searchD();
 800a9e2:	f002 fcc1 	bl	800d368 <searchD>

					degree_z = target_degree_z;
 800a9e6:	4b46      	ldr	r3, [pc, #280]	; (800ab00 <perfect_pass+0x860>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a46      	ldr	r2, [pc, #280]	; (800ab04 <perfect_pass+0x864>)
 800a9ec:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800a9ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a9f2:	f7f6 fb13 	bl	800101c <HAL_Delay>


					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed2----
					printf("Second Run. (Slalom)\n");
 800a9f6:	4845      	ldr	r0, [pc, #276]	; (800ab0c <perfect_pass+0x86c>)
 800a9f8:	f005 ff3a 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 800a9fc:	4a39      	ldr	r2, [pc, #228]	; (800aae4 <perfect_pass+0x844>)
 800a9fe:	8813      	ldrh	r3, [r2, #0]
 800aa00:	f043 0320 	orr.w	r3, r3, #32
 800aa04:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800aa06:	4a37      	ldr	r2, [pc, #220]	; (800aae4 <perfect_pass+0x844>)
 800aa08:	8813      	ldrh	r3, [r2, #0]
 800aa0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa0e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800aa10:	4a34      	ldr	r2, [pc, #208]	; (800aae4 <perfect_pass+0x844>)
 800aa12:	8813      	ldrh	r3, [r2, #0]
 800aa14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aa18:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800aa1a:	4b33      	ldr	r3, [pc, #204]	; (800aae8 <perfect_pass+0x848>)
 800aa1c:	2203      	movs	r2, #3
 800aa1e:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800aa20:	4b32      	ldr	r3, [pc, #200]	; (800aaec <perfect_pass+0x84c>)
 800aa22:	2200      	movs	r2, #0
 800aa24:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800aa26:	4b32      	ldr	r3, [pc, #200]	; (800aaf0 <perfect_pass+0x850>)
 800aa28:	f242 7210 	movw	r2, #10000	; 0x2710
 800aa2c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800aa2e:	4b31      	ldr	r3, [pc, #196]	; (800aaf4 <perfect_pass+0x854>)
 800aa30:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800aa34:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800aa36:	4b30      	ldr	r3, [pc, #192]	; (800aaf8 <perfect_pass+0x858>)
 800aa38:	2207      	movs	r2, #7
 800aa3a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800aa3c:	4b2f      	ldr	r3, [pc, #188]	; (800aafc <perfect_pass+0x85c>)
 800aa3e:	2207      	movs	r2, #7
 800aa40:	701a      	strb	r2, [r3, #0]

					searchD();
 800aa42:	f002 fc91 	bl	800d368 <searchD>
					HAL_Delay(2000);
 800aa46:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aa4a:	f7f6 fae7 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800aa4e:	4b2b      	ldr	r3, [pc, #172]	; (800aafc <perfect_pass+0x85c>)
 800aa50:	2200      	movs	r2, #0
 800aa52:	701a      	strb	r2, [r3, #0]
 800aa54:	4b29      	ldr	r3, [pc, #164]	; (800aafc <perfect_pass+0x85c>)
 800aa56:	781a      	ldrb	r2, [r3, #0]
 800aa58:	4b27      	ldr	r3, [pc, #156]	; (800aaf8 <perfect_pass+0x858>)
 800aa5a:	701a      	strb	r2, [r3, #0]
					searchD();
 800aa5c:	f002 fc84 	bl	800d368 <searchD>

					degree_z = target_degree_z;
 800aa60:	4b27      	ldr	r3, [pc, #156]	; (800ab00 <perfect_pass+0x860>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a27      	ldr	r2, [pc, #156]	; (800ab04 <perfect_pass+0x864>)
 800aa66:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800aa68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aa6c:	f7f6 fad6 	bl	800101c <HAL_Delay>


					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed3----
					printf("Second Run. (Slalom)\n");
 800aa70:	4826      	ldr	r0, [pc, #152]	; (800ab0c <perfect_pass+0x86c>)
 800aa72:	f005 fefd 	bl	8010870 <puts>
					MF.FLAG.SCND = 1;
 800aa76:	4a1b      	ldr	r2, [pc, #108]	; (800aae4 <perfect_pass+0x844>)
 800aa78:	8813      	ldrh	r3, [r2, #0]
 800aa7a:	f043 0320 	orr.w	r3, r3, #32
 800aa7e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800aa80:	4a18      	ldr	r2, [pc, #96]	; (800aae4 <perfect_pass+0x844>)
 800aa82:	8813      	ldrh	r3, [r2, #0]
 800aa84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa88:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800aa8a:	4a16      	ldr	r2, [pc, #88]	; (800aae4 <perfect_pass+0x844>)
 800aa8c:	8813      	ldrh	r3, [r2, #0]
 800aa8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aa92:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800aa94:	4b14      	ldr	r3, [pc, #80]	; (800aae8 <perfect_pass+0x848>)
 800aa96:	2203      	movs	r2, #3
 800aa98:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800aa9a:	4b14      	ldr	r3, [pc, #80]	; (800aaec <perfect_pass+0x84c>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	701a      	strb	r2, [r3, #0]
					accel_hs = 20000;
 800aaa0:	4b13      	ldr	r3, [pc, #76]	; (800aaf0 <perfect_pass+0x850>)
 800aaa2:	f644 6220 	movw	r2, #20000	; 0x4e20
 800aaa6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2500;
 800aaa8:	4b12      	ldr	r3, [pc, #72]	; (800aaf4 <perfect_pass+0x854>)
 800aaaa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800aaae:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800aab0:	4b11      	ldr	r3, [pc, #68]	; (800aaf8 <perfect_pass+0x858>)
 800aab2:	2207      	movs	r2, #7
 800aab4:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800aab6:	4b11      	ldr	r3, [pc, #68]	; (800aafc <perfect_pass+0x85c>)
 800aab8:	2207      	movs	r2, #7
 800aaba:	701a      	strb	r2, [r3, #0]

					searchD();
 800aabc:	f002 fc54 	bl	800d368 <searchD>
					HAL_Delay(2000);
 800aac0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aac4:	f7f6 faaa 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800aac8:	4b0c      	ldr	r3, [pc, #48]	; (800aafc <perfect_pass+0x85c>)
 800aaca:	2200      	movs	r2, #0
 800aacc:	701a      	strb	r2, [r3, #0]
 800aace:	4b0b      	ldr	r3, [pc, #44]	; (800aafc <perfect_pass+0x85c>)
 800aad0:	781a      	ldrb	r2, [r3, #0]
 800aad2:	4b09      	ldr	r3, [pc, #36]	; (800aaf8 <perfect_pass+0x858>)
 800aad4:	701a      	strb	r2, [r3, #0]
					searchD();
 800aad6:	f002 fc47 	bl	800d368 <searchD>
					searchF4();

					goal_x = 7;
					goal_y = 7;

*/					break;
 800aada:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800aadc:	f7ff bbe9 	b.w	800a2b2 <perfect_pass+0x12>
 800aae0:	08011d50 	.word	0x08011d50
 800aae4:	20000f74 	.word	0x20000f74
 800aae8:	20000456 	.word	0x20000456
 800aaec:	200015d4 	.word	0x200015d4
 800aaf0:	20000454 	.word	0x20000454
 800aaf4:	20000f88 	.word	0x20000f88
 800aaf8:	20000bb9 	.word	0x20000bb9
 800aafc:	20000b54 	.word	0x20000b54
 800ab00:	20000c08 	.word	0x20000c08
 800ab04:	20000b64 	.word	0x20000b64
 800ab08:	08011d74 	.word	0x08011d74
 800ab0c:	08011da8 	.word	0x08011da8

0800ab10 <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b088      	sub	sp, #32
 800ab14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 800ab16:	2300      	movs	r3, #0
 800ab18:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 800ab1e:	230b      	movs	r3, #11
 800ab20:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 800ab22:	2301      	movs	r3, #1
 800ab24:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800ab26:	2302      	movs	r3, #2
 800ab28:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 800ab2a:	f7f6 ffb9 	bl	8001aa0 <HAL_FLASH_Unlock>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 800ab32:	7ffb      	ldrb	r3, [r7, #31]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d001      	beq.n	800ab3c <eeprom_enable_write+0x2c>
 800ab38:	7ffb      	ldrb	r3, [r7, #31]
 800ab3a:	e009      	b.n	800ab50 <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800ab3c:	1d3a      	adds	r2, r7, #4
 800ab3e:	f107 0308 	add.w	r3, r7, #8
 800ab42:	4611      	mov	r1, r2
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7f7 f909 	bl	8001d5c <HAL_FLASHEx_Erase>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	77fb      	strb	r3, [r7, #31]
  return status;
 800ab4e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3720      	adds	r7, #32
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 800ab5c:	f7f6 ffc2 	bl	8001ae4 <HAL_FLASH_Lock>
 800ab60:	4603      	mov	r3, r0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 800ab66:	b590      	push	{r4, r7, lr}
 800ab68:	b085      	sub	sp, #20
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	460b      	mov	r3, r1
 800ab70:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + EEPROM_START_ADDRESS;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800ab78:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800ab7c:	005b      	lsls	r3, r3, #1
 800ab7e:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 800ab80:	887b      	ldrh	r3, [r7, #2]
 800ab82:	f04f 0400 	mov.w	r4, #0
 800ab86:	461a      	mov	r2, r3
 800ab88:	4623      	mov	r3, r4
 800ab8a:	6879      	ldr	r1, [r7, #4]
 800ab8c:	2001      	movs	r0, #1
 800ab8e:	f7f6 ff33 	bl	80019f8 <HAL_FLASH_Program>
 800ab92:	4603      	mov	r3, r0
 800ab94:	73fb      	strb	r3, [r7, #15]
  return status;
 800ab96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3714      	adds	r7, #20
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd90      	pop	{r4, r7, pc}

0800aba0 <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 800aba0:	b480      	push	{r7}
 800aba2:	b085      	sub	sp, #20
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 800aba8:	2300      	movs	r3, #0
 800abaa:	81fb      	strh	r3, [r7, #14]
  address = address*2 + EEPROM_START_ADDRESS;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800abb2:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800abb6:	005b      	lsls	r3, r3, #1
 800abb8:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	81fb      	strh	r3, [r7, #14]
  return val;
 800abc0:	89fb      	ldrh	r3, [r7, #14]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3714      	adds	r7, #20
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
	...

0800abd0 <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); 					// wait start up
 800abd6:	2064      	movs	r0, #100	; 0x64
 800abd8:	f7f6 fa20 	bl	800101c <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); 	// 1. read who am i
 800abdc:	2075      	movs	r0, #117	; 0x75
 800abde:	f000 f82f 	bl	800ac40 <read_byte>
 800abe2:	4603      	mov	r3, r0
 800abe4:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); 		// 2. check who am i value
 800abe6:	79fb      	ldrb	r3, [r7, #7]
 800abe8:	4619      	mov	r1, r3
 800abea:	4813      	ldr	r0, [pc, #76]	; (800ac38 <gyro_init+0x68>)
 800abec:	f005 fdcc 	bl	8010788 <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 800abf0:	79fb      	ldrb	r3, [r7, #7]
 800abf2:	2b98      	cmp	r3, #152	; 0x98
 800abf4:	d003      	beq.n	800abfe <gyro_init+0x2e>
    while(1){
      printf("gyro_error\r");
 800abf6:	4811      	ldr	r0, [pc, #68]	; (800ac3c <gyro_init+0x6c>)
 800abf8:	f005 fdc6 	bl	8010788 <iprintf>
 800abfc:	e7fb      	b.n	800abf6 <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 800abfe:	2032      	movs	r0, #50	; 0x32
 800ac00:	f7f6 fa0c 	bl	800101c <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); 	// 3. set pwr_might
 800ac04:	2100      	movs	r1, #0
 800ac06:	206b      	movs	r0, #107	; 0x6b
 800ac08:	f000 f846 	bl	800ac98 <write_byte>

  HAL_Delay(50);
 800ac0c:	2032      	movs	r0, #50	; 0x32
 800ac0e:	f7f6 fa05 	bl	800101c <HAL_Delay>
  write_byte(CONFIG, 0x00); 		// 4. set config
 800ac12:	2100      	movs	r1, #0
 800ac14:	201a      	movs	r0, #26
 800ac16:	f000 f83f 	bl	800ac98 <write_byte>

  HAL_Delay(50);
 800ac1a:	2032      	movs	r0, #50	; 0x32
 800ac1c:	f7f6 f9fe 	bl	800101c <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); 	// 5. set gyro config
 800ac20:	2118      	movs	r1, #24
 800ac22:	201b      	movs	r0, #27
 800ac24:	f000 f838 	bl	800ac98 <write_byte>

  HAL_Delay(50);
 800ac28:	2032      	movs	r0, #50	; 0x32
 800ac2a:	f7f6 f9f7 	bl	800101c <HAL_Delay>
}
 800ac2e:	bf00      	nop
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	08011e88 	.word	0x08011e88
 800ac3c:	08011e90 	.word	0x08011e90

0800ac40 <read_byte>:


uint8_t read_byte(uint8_t reg){
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	4603      	mov	r3, r0
 800ac48:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET ); 	//cs = Low;
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	2104      	movs	r1, #4
 800ac4e:	4810      	ldr	r0, [pc, #64]	; (800ac90 <read_byte+0x50>)
 800ac50:	f7f7 fb58 	bl	8002304 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 800ac54:	79fb      	ldrb	r3, [r7, #7]
 800ac56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800ac5e:	f107 010f 	add.w	r1, r7, #15
 800ac62:	2364      	movs	r3, #100	; 0x64
 800ac64:	2201      	movs	r2, #1
 800ac66:	480b      	ldr	r0, [pc, #44]	; (800ac94 <read_byte+0x54>)
 800ac68:	f7f7 ffd4 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); 						// read 1byte(read data)
 800ac6c:	f107 010e 	add.w	r1, r7, #14
 800ac70:	2364      	movs	r3, #100	; 0x64
 800ac72:	2201      	movs	r2, #1
 800ac74:	4807      	ldr	r0, [pc, #28]	; (800ac94 <read_byte+0x54>)
 800ac76:	f7f8 f901 	bl	8002e7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET );  	//cs = High;
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	2104      	movs	r1, #4
 800ac7e:	4804      	ldr	r0, [pc, #16]	; (800ac90 <read_byte+0x50>)
 800ac80:	f7f7 fb40 	bl	8002304 <HAL_GPIO_WritePin>
  return val;
 800ac84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	40020c00 	.word	0x40020c00
 800ac94:	20000144 	.word	0x20000144

0800ac98 <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	4603      	mov	r3, r0
 800aca0:	460a      	mov	r2, r1
 800aca2:	71fb      	strb	r3, [r7, #7]
 800aca4:	4613      	mov	r3, r2
 800aca6:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 800aca8:	79fb      	ldrb	r3, [r7, #7]
 800acaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); 	// cs = Low;
 800acb2:	2200      	movs	r2, #0
 800acb4:	2104      	movs	r1, #4
 800acb6:	480c      	ldr	r0, [pc, #48]	; (800ace8 <write_byte+0x50>)
 800acb8:	f7f7 fb24 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800acbc:	f107 010f 	add.w	r1, r7, #15
 800acc0:	2364      	movs	r3, #100	; 0x64
 800acc2:	2201      	movs	r2, #1
 800acc4:	4809      	ldr	r0, [pc, #36]	; (800acec <write_byte+0x54>)
 800acc6:	f7f7 ffa5 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); 					// read 1byte(write data)
 800acca:	1db9      	adds	r1, r7, #6
 800accc:	2364      	movs	r3, #100	; 0x64
 800acce:	2201      	movs	r2, #1
 800acd0:	4806      	ldr	r0, [pc, #24]	; (800acec <write_byte+0x54>)
 800acd2:	f7f7 ff9f 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); 		// cs = High;
 800acd6:	2201      	movs	r2, #1
 800acd8:	2104      	movs	r1, #4
 800acda:	4803      	ldr	r0, [pc, #12]	; (800ace8 <write_byte+0x50>)
 800acdc:	f7f7 fb12 	bl	8002304 <HAL_GPIO_WritePin>
}
 800ace0:	bf00      	nop
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	40020c00 	.word	0x40020c00
 800acec:	20000144 	.word	0x20000144

0800acf0 <accel_read_x>:


float accel_read_x(void){
 800acf0:	b590      	push	{r4, r7, lr}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
  int16_t accel_x;
  float accel;

  // H:8bit shift, Link h and l
  accel_x = (int16_t)((int16_t)(read_byte(ACCEL_XOUT_H) << 8) | read_byte(ACCEL_XOUT_L));
 800acf6:	203b      	movs	r0, #59	; 0x3b
 800acf8:	f7ff ffa2 	bl	800ac40 <read_byte>
 800acfc:	4603      	mov	r3, r0
 800acfe:	021b      	lsls	r3, r3, #8
 800ad00:	b21c      	sxth	r4, r3
 800ad02:	203c      	movs	r0, #60	; 0x3c
 800ad04:	f7ff ff9c 	bl	800ac40 <read_byte>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	b21b      	sxth	r3, r3
 800ad0c:	4323      	orrs	r3, r4
 800ad0e:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_x / ACCEL_FACTOR); // dps to accel
 800ad10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	da01      	bge.n	800ad1c <accel_read_x+0x2c>
 800ad18:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ad1c:	12db      	asrs	r3, r3, #11
 800ad1e:	b21b      	sxth	r3, r3
 800ad20:	ee07 3a90 	vmov	s15, r3
 800ad24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad28:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	ee07 3a90 	vmov	s15, r3
}
 800ad32:	eeb0 0a67 	vmov.f32	s0, s15
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd90      	pop	{r4, r7, pc}

0800ad3c <accel_read_y>:


float accel_read_y(void){
 800ad3c:	b590      	push	{r4, r7, lr}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
  int16_t accel_y;
  float accel;

  // H:8bit shift, Link h and l
  accel_y = (int16_t)((int16_t)(read_byte(ACCEL_YOUT_H) << 8) | read_byte(ACCEL_YOUT_L));
 800ad42:	203d      	movs	r0, #61	; 0x3d
 800ad44:	f7ff ff7c 	bl	800ac40 <read_byte>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	021b      	lsls	r3, r3, #8
 800ad4c:	b21c      	sxth	r4, r3
 800ad4e:	203e      	movs	r0, #62	; 0x3e
 800ad50:	f7ff ff76 	bl	800ac40 <read_byte>
 800ad54:	4603      	mov	r3, r0
 800ad56:	b21b      	sxth	r3, r3
 800ad58:	4323      	orrs	r3, r4
 800ad5a:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_y / ACCEL_FACTOR); // dps to accel
 800ad5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	da01      	bge.n	800ad68 <accel_read_y+0x2c>
 800ad64:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ad68:	12db      	asrs	r3, r3, #11
 800ad6a:	b21b      	sxth	r3, r3
 800ad6c:	ee07 3a90 	vmov	s15, r3
 800ad70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad74:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	ee07 3a90 	vmov	s15, r3
}
 800ad7e:	eeb0 0a67 	vmov.f32	s0, s15
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd90      	pop	{r4, r7, pc}

0800ad88 <accel_read_z>:


float accel_read_z(void){
 800ad88:	b590      	push	{r4, r7, lr}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
  int16_t accel_z;
  float accel;

  // H:8bit shift, Link h and l
  accel_z = (int16_t)((int16_t)(read_byte(ACCEL_ZOUT_H) << 8) | read_byte(ACCEL_ZOUT_L));
 800ad8e:	203f      	movs	r0, #63	; 0x3f
 800ad90:	f7ff ff56 	bl	800ac40 <read_byte>
 800ad94:	4603      	mov	r3, r0
 800ad96:	021b      	lsls	r3, r3, #8
 800ad98:	b21c      	sxth	r4, r3
 800ad9a:	2040      	movs	r0, #64	; 0x40
 800ad9c:	f7ff ff50 	bl	800ac40 <read_byte>
 800ada0:	4603      	mov	r3, r0
 800ada2:	b21b      	sxth	r3, r3
 800ada4:	4323      	orrs	r3, r4
 800ada6:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_z / ACCEL_FACTOR-7); // dps to accel
 800ada8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800adac:	2b00      	cmp	r3, #0
 800adae:	da01      	bge.n	800adb4 <accel_read_z+0x2c>
 800adb0:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800adb4:	12db      	asrs	r3, r3, #11
 800adb6:	b21b      	sxth	r3, r3
 800adb8:	3b07      	subs	r3, #7
 800adba:	ee07 3a90 	vmov	s15, r3
 800adbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adc2:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	ee07 3a90 	vmov	s15, r3
}
 800adcc:	eeb0 0a67 	vmov.f32	s0, s15
 800add0:	370c      	adds	r7, #12
 800add2:	46bd      	mov	sp, r7
 800add4:	bd90      	pop	{r4, r7, pc}
	...

0800add8 <gyro_read_x>:


float gyro_read_x(void){
 800add8:	b590      	push	{r4, r7, lr}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
  int16_t gyro_x;
  float omega;

  // H:8bit shift, Link h and l
  gyro_x = (int16_t)((int16_t)(read_byte(GYRO_XOUT_H) << 8) | read_byte(GYRO_XOUT_L));
 800adde:	2043      	movs	r0, #67	; 0x43
 800ade0:	f7ff ff2e 	bl	800ac40 <read_byte>
 800ade4:	4603      	mov	r3, r0
 800ade6:	021b      	lsls	r3, r3, #8
 800ade8:	b21c      	sxth	r4, r3
 800adea:	2044      	movs	r0, #68	; 0x44
 800adec:	f7ff ff28 	bl	800ac40 <read_byte>
 800adf0:	4603      	mov	r3, r0
 800adf2:	b21b      	sxth	r3, r3
 800adf4:	4323      	orrs	r3, r4
 800adf6:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_x / GYRO_FACTOR+1.4); // dps to deg/sec
 800adf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7f5 fb89 	bl	8000514 <__aeabi_i2d>
 800ae02:	a30f      	add	r3, pc, #60	; (adr r3, 800ae40 <gyro_read_x+0x68>)
 800ae04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae08:	f7f5 fd18 	bl	800083c <__aeabi_ddiv>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	460c      	mov	r4, r1
 800ae10:	4618      	mov	r0, r3
 800ae12:	4621      	mov	r1, r4
 800ae14:	a30c      	add	r3, pc, #48	; (adr r3, 800ae48 <gyro_read_x+0x70>)
 800ae16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1a:	f7f5 fa2f 	bl	800027c <__adddf3>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	460c      	mov	r4, r1
 800ae22:	4618      	mov	r0, r3
 800ae24:	4621      	mov	r1, r4
 800ae26:	f7f5 feb7 	bl	8000b98 <__aeabi_d2f>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	603b      	str	r3, [r7, #0]
  return omega;
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	ee07 3a90 	vmov	s15, r3
}
 800ae34:	eeb0 0a67 	vmov.f32	s0, s15
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd90      	pop	{r4, r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	66666666 	.word	0x66666666
 800ae44:	40306666 	.word	0x40306666
 800ae48:	66666666 	.word	0x66666666
 800ae4c:	3ff66666 	.word	0x3ff66666

0800ae50 <gyro_read_y>:


float gyro_read_y(void){
 800ae50:	b590      	push	{r4, r7, lr}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
  int16_t gyro_y;
  float omega;

  // H:8bit shift, Link h and l
  gyro_y = (int16_t)((int16_t)(read_byte(GYRO_YOUT_H) << 8) | read_byte(GYRO_YOUT_L));
 800ae56:	2045      	movs	r0, #69	; 0x45
 800ae58:	f7ff fef2 	bl	800ac40 <read_byte>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	021b      	lsls	r3, r3, #8
 800ae60:	b21c      	sxth	r4, r3
 800ae62:	2046      	movs	r0, #70	; 0x46
 800ae64:	f7ff feec 	bl	800ac40 <read_byte>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	b21b      	sxth	r3, r3
 800ae6c:	4323      	orrs	r3, r4
 800ae6e:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_y / GYRO_FACTOR-0.75); // dps to deg/sec
 800ae70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7f5 fb4d 	bl	8000514 <__aeabi_i2d>
 800ae7a:	a310      	add	r3, pc, #64	; (adr r3, 800aebc <gyro_read_y+0x6c>)
 800ae7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae80:	f7f5 fcdc 	bl	800083c <__aeabi_ddiv>
 800ae84:	4603      	mov	r3, r0
 800ae86:	460c      	mov	r4, r1
 800ae88:	4618      	mov	r0, r3
 800ae8a:	4621      	mov	r1, r4
 800ae8c:	f04f 0200 	mov.w	r2, #0
 800ae90:	4b09      	ldr	r3, [pc, #36]	; (800aeb8 <gyro_read_y+0x68>)
 800ae92:	f7f5 f9f1 	bl	8000278 <__aeabi_dsub>
 800ae96:	4603      	mov	r3, r0
 800ae98:	460c      	mov	r4, r1
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	4621      	mov	r1, r4
 800ae9e:	f7f5 fe7b 	bl	8000b98 <__aeabi_d2f>
 800aea2:	4603      	mov	r3, r0
 800aea4:	603b      	str	r3, [r7, #0]
  return omega;
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	ee07 3a90 	vmov	s15, r3
}
 800aeac:	eeb0 0a67 	vmov.f32	s0, s15
 800aeb0:	370c      	adds	r7, #12
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd90      	pop	{r4, r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	3fe80000 	.word	0x3fe80000
 800aebc:	66666666 	.word	0x66666666
 800aec0:	40306666 	.word	0x40306666
 800aec4:	00000000 	.word	0x00000000

0800aec8 <gyro_read_z>:


float gyro_read_z(void){
 800aec8:	b5b0      	push	{r4, r5, r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 800aece:	2047      	movs	r0, #71	; 0x47
 800aed0:	f7ff feb6 	bl	800ac40 <read_byte>
 800aed4:	4603      	mov	r3, r0
 800aed6:	021b      	lsls	r3, r3, #8
 800aed8:	b21c      	sxth	r4, r3
 800aeda:	2048      	movs	r0, #72	; 0x48
 800aedc:	f7ff feb0 	bl	800ac40 <read_byte>
 800aee0:	4603      	mov	r3, r0
 800aee2:	b21b      	sxth	r3, r3
 800aee4:	4323      	orrs	r3, r4
 800aee6:	80fb      	strh	r3, [r7, #6]

//  omega = (float)(gyro_z / GYRO_FACTOR+1.15); // dps to deg/sec
  omega = (float)(gyro_z / GYRO_FACTOR-gyro_drift_value); // dps to deg/sec
 800aee8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7f5 fb11 	bl	8000514 <__aeabi_i2d>
 800aef2:	a314      	add	r3, pc, #80	; (adr r3, 800af44 <gyro_read_z+0x7c>)
 800aef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef8:	f7f5 fca0 	bl	800083c <__aeabi_ddiv>
 800aefc:	4603      	mov	r3, r0
 800aefe:	460c      	mov	r4, r1
 800af00:	4625      	mov	r5, r4
 800af02:	461c      	mov	r4, r3
 800af04:	4b0e      	ldr	r3, [pc, #56]	; (800af40 <gyro_read_z+0x78>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4618      	mov	r0, r3
 800af0a:	f7f5 fb15 	bl	8000538 <__aeabi_f2d>
 800af0e:	4602      	mov	r2, r0
 800af10:	460b      	mov	r3, r1
 800af12:	4620      	mov	r0, r4
 800af14:	4629      	mov	r1, r5
 800af16:	f7f5 f9af 	bl	8000278 <__aeabi_dsub>
 800af1a:	4603      	mov	r3, r0
 800af1c:	460c      	mov	r4, r1
 800af1e:	4618      	mov	r0, r3
 800af20:	4621      	mov	r1, r4
 800af22:	f7f5 fe39 	bl	8000b98 <__aeabi_d2f>
 800af26:	4603      	mov	r3, r0
 800af28:	603b      	str	r3, [r7, #0]
  return omega;
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	ee07 3a90 	vmov	s15, r3
}
 800af30:	eeb0 0a67 	vmov.f32	s0, s15
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bdb0      	pop	{r4, r5, r7, pc}
 800af3a:	bf00      	nop
 800af3c:	f3af 8000 	nop.w
 800af40:	20000c00 	.word	0x20000c00
 800af44:	66666666 	.word	0x66666666
 800af48:	40306666 	.word	0x40306666

0800af4c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int c) {
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2b0a      	cmp	r3, #10
 800af58:	d108      	bne.n	800af6c <__io_putchar+0x20>
    int _c = '\r';
 800af5a:	230d      	movs	r3, #13
 800af5c:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 800af5e:	f107 010c 	add.w	r1, r7, #12
 800af62:	2301      	movs	r3, #1
 800af64:	2201      	movs	r2, #1
 800af66:	4807      	ldr	r0, [pc, #28]	; (800af84 <__io_putchar+0x38>)
 800af68:	f7f9 fb8b 	bl	8004682 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 800af6c:	1d39      	adds	r1, r7, #4
 800af6e:	2301      	movs	r3, #1
 800af70:	2201      	movs	r2, #1
 800af72:	4804      	ldr	r0, [pc, #16]	; (800af84 <__io_putchar+0x38>)
 800af74:	f7f9 fb85 	bl	8004682 <HAL_UART_Transmit>
  return 0;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	20000b6c 	.word	0x20000b6c

0800af88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af88:	b5b0      	push	{r4, r5, r7, lr}
 800af8a:	ed2d 8b02 	vpush	{d8}
 800af8e:	b08c      	sub	sp, #48	; 0x30
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800af94:	2360      	movs	r3, #96	; 0x60
 800af96:	60bb      	str	r3, [r7, #8]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800af98:	2300      	movs	r3, #0
 800af9a:	613b      	str	r3, [r7, #16]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800af9c:	2300      	movs	r3, #0
 800af9e:	61bb      	str	r3, [r7, #24]

	if(htim == &htim6){
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4ab5      	ldr	r2, [pc, #724]	; (800b278 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	f041 8231 	bne.w	800c40c <HAL_TIM_PeriodElapsedCallback+0x1484>
		cnt_l = TIM4 -> CNT;
 800afaa:	4bb4      	ldr	r3, [pc, #720]	; (800b27c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800afac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afae:	ee07 3a90 	vmov	s15, r3
 800afb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afb6:	4bb2      	ldr	r3, [pc, #712]	; (800b280 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800afb8:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 800afbc:	4bb1      	ldr	r3, [pc, #708]	; (800b284 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800afbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc0:	ee07 3a90 	vmov	s15, r3
 800afc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afc8:	4baf      	ldr	r3, [pc, #700]	; (800b288 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800afca:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;		//0=>65505の値飛び検出用
 800afce:	4bac      	ldr	r3, [pc, #688]	; (800b280 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800afd0:	edd3 7a00 	vldr	s15, [r3]
 800afd4:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800b28c <HAL_TIM_PeriodElapsedCallback+0x304>
 800afd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afe0:	dd09      	ble.n	800aff6 <HAL_TIM_PeriodElapsedCallback+0x6e>
 800afe2:	4ba7      	ldr	r3, [pc, #668]	; (800b280 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800afe4:	edd3 7a00 	vldr	s15, [r3]
 800afe8:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800b290 <HAL_TIM_PeriodElapsedCallback+0x308>
 800afec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aff0:	4ba3      	ldr	r3, [pc, #652]	; (800b280 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800aff2:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;		//0=>65505の値飛び検出用
 800aff6:	4ba4      	ldr	r3, [pc, #656]	; (800b288 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800aff8:	edd3 7a00 	vldr	s15, [r3]
 800affc:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800b28c <HAL_TIM_PeriodElapsedCallback+0x304>
 800b000:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b008:	dd09      	ble.n	800b01e <HAL_TIM_PeriodElapsedCallback+0x96>
 800b00a:	4b9f      	ldr	r3, [pc, #636]	; (800b288 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800b00c:	edd3 7a00 	vldr	s15, [r3]
 800b010:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800b290 <HAL_TIM_PeriodElapsedCallback+0x308>
 800b014:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b018:	4b9b      	ldr	r3, [pc, #620]	; (800b288 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800b01a:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;								//a回転方向合わせ
 800b01e:	4b9a      	ldr	r3, [pc, #616]	; (800b288 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800b020:	edd3 7a00 	vldr	s15, [r3]
 800b024:	eef1 7a67 	vneg.f32	s15, s15
 800b028:	4b97      	ldr	r3, [pc, #604]	; (800b288 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800b02a:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800b02e:	4b99      	ldr	r3, [pc, #612]	; (800b294 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4618      	mov	r0, r3
 800b034:	f7f5 fa80 	bl	8000538 <__aeabi_f2d>
 800b038:	4604      	mov	r4, r0
 800b03a:	460d      	mov	r5, r1
 800b03c:	4b90      	ldr	r3, [pc, #576]	; (800b280 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4618      	mov	r0, r3
 800b042:	f7f5 fa79 	bl	8000538 <__aeabi_f2d>
 800b046:	a388      	add	r3, pc, #544	; (adr r3, 800b268 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800b048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04c:	f7f5 facc 	bl	80005e8 <__aeabi_dmul>
 800b050:	4602      	mov	r2, r0
 800b052:	460b      	mov	r3, r1
 800b054:	4620      	mov	r0, r4
 800b056:	4629      	mov	r1, r5
 800b058:	f7f5 f910 	bl	800027c <__adddf3>
 800b05c:	4603      	mov	r3, r0
 800b05e:	460c      	mov	r4, r1
 800b060:	4618      	mov	r0, r3
 800b062:	4621      	mov	r1, r4
 800b064:	f7f5 fd98 	bl	8000b98 <__aeabi_d2f>
 800b068:	4602      	mov	r2, r0
 800b06a:	4b8a      	ldr	r3, [pc, #552]	; (800b294 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800b06c:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800b06e:	4b8a      	ldr	r3, [pc, #552]	; (800b298 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4618      	mov	r0, r3
 800b074:	f7f5 fa60 	bl	8000538 <__aeabi_f2d>
 800b078:	4604      	mov	r4, r0
 800b07a:	460d      	mov	r5, r1
 800b07c:	4b82      	ldr	r3, [pc, #520]	; (800b288 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4618      	mov	r0, r3
 800b082:	f7f5 fa59 	bl	8000538 <__aeabi_f2d>
 800b086:	a378      	add	r3, pc, #480	; (adr r3, 800b268 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800b088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08c:	f7f5 faac 	bl	80005e8 <__aeabi_dmul>
 800b090:	4602      	mov	r2, r0
 800b092:	460b      	mov	r3, r1
 800b094:	4620      	mov	r0, r4
 800b096:	4629      	mov	r1, r5
 800b098:	f7f5 f8f0 	bl	800027c <__adddf3>
 800b09c:	4603      	mov	r3, r0
 800b09e:	460c      	mov	r4, r1
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	4621      	mov	r1, r4
 800b0a4:	f7f5 fd78 	bl	8000b98 <__aeabi_d2f>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	4b7b      	ldr	r3, [pc, #492]	; (800b298 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800b0ac:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800b0ae:	4b74      	ldr	r3, [pc, #464]	; (800b280 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7f5 fa40 	bl	8000538 <__aeabi_f2d>
 800b0b8:	a36b      	add	r3, pc, #428	; (adr r3, 800b268 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800b0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0be:	f7f5 fa93 	bl	80005e8 <__aeabi_dmul>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	a369      	add	r3, pc, #420	; (adr r3, 800b270 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800b0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d0:	f7f5 fbb4 	bl	800083c <__aeabi_ddiv>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	460c      	mov	r4, r1
 800b0d8:	4618      	mov	r0, r3
 800b0da:	4621      	mov	r1, r4
 800b0dc:	f7f5 fd5c 	bl	8000b98 <__aeabi_d2f>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	4b6e      	ldr	r3, [pc, #440]	; (800b29c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800b0e4:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800b0e6:	4b68      	ldr	r3, [pc, #416]	; (800b288 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7f5 fa24 	bl	8000538 <__aeabi_f2d>
 800b0f0:	a35d      	add	r3, pc, #372	; (adr r3, 800b268 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800b0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f6:	f7f5 fa77 	bl	80005e8 <__aeabi_dmul>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	460c      	mov	r4, r1
 800b0fe:	4618      	mov	r0, r3
 800b100:	4621      	mov	r1, r4
 800b102:	a35b      	add	r3, pc, #364	; (adr r3, 800b270 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b108:	f7f5 fb98 	bl	800083c <__aeabi_ddiv>
 800b10c:	4603      	mov	r3, r0
 800b10e:	460c      	mov	r4, r1
 800b110:	4618      	mov	r0, r3
 800b112:	4621      	mov	r1, r4
 800b114:	f7f5 fd40 	bl	8000b98 <__aeabi_d2f>
 800b118:	4602      	mov	r2, r0
 800b11a:	4b61      	ldr	r3, [pc, #388]	; (800b2a0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800b11c:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 800b11e:	4b57      	ldr	r3, [pc, #348]	; (800b27c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800b120:	2200      	movs	r2, #0
 800b122:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 800b124:	4b57      	ldr	r3, [pc, #348]	; (800b284 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800b126:	2200      	movs	r2, #0
 800b128:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.SPD){
 800b12a:	4b5e      	ldr	r3, [pc, #376]	; (800b2a4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800b12c:	881b      	ldrh	r3, [r3, #0]
 800b12e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b132:	b2db      	uxtb	r3, r3
 800b134:	2b00      	cmp	r3, #0
 800b136:	f000 80fe 	beq.w	800b336 <HAL_TIM_PeriodElapsedCallback+0x3ae>
			target_speed_l += accel_l * 0.001;
 800b13a:	4b5b      	ldr	r3, [pc, #364]	; (800b2a8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4618      	mov	r0, r3
 800b140:	f7f5 f9fa 	bl	8000538 <__aeabi_f2d>
 800b144:	a34a      	add	r3, pc, #296	; (adr r3, 800b270 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800b146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14a:	f7f5 fa4d 	bl	80005e8 <__aeabi_dmul>
 800b14e:	4603      	mov	r3, r0
 800b150:	460c      	mov	r4, r1
 800b152:	4625      	mov	r5, r4
 800b154:	461c      	mov	r4, r3
 800b156:	4b55      	ldr	r3, [pc, #340]	; (800b2ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7f5 f9ec 	bl	8000538 <__aeabi_f2d>
 800b160:	4602      	mov	r2, r0
 800b162:	460b      	mov	r3, r1
 800b164:	4620      	mov	r0, r4
 800b166:	4629      	mov	r1, r5
 800b168:	f7f5 f888 	bl	800027c <__adddf3>
 800b16c:	4603      	mov	r3, r0
 800b16e:	460c      	mov	r4, r1
 800b170:	4618      	mov	r0, r3
 800b172:	4621      	mov	r1, r4
 800b174:	f7f5 fd10 	bl	8000b98 <__aeabi_d2f>
 800b178:	4602      	mov	r2, r0
 800b17a:	4b4c      	ldr	r3, [pc, #304]	; (800b2ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800b17c:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 800b17e:	4b4b      	ldr	r3, [pc, #300]	; (800b2ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800b180:	ed93 7a00 	vldr	s14, [r3]
 800b184:	4b4a      	ldr	r3, [pc, #296]	; (800b2b0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800b186:	edd3 7a00 	vldr	s15, [r3]
 800b18a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b192:	dd03      	ble.n	800b19c <HAL_TIM_PeriodElapsedCallback+0x214>
 800b194:	4b46      	ldr	r3, [pc, #280]	; (800b2b0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800b196:	edd3 7a00 	vldr	s15, [r3]
 800b19a:	e002      	b.n	800b1a2 <HAL_TIM_PeriodElapsedCallback+0x21a>
 800b19c:	4b43      	ldr	r3, [pc, #268]	; (800b2ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800b19e:	edd3 7a00 	vldr	s15, [r3]
 800b1a2:	4b44      	ldr	r3, [pc, #272]	; (800b2b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800b1a4:	ed93 7a00 	vldr	s14, [r3]
 800b1a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b0:	dd10      	ble.n	800b1d4 <HAL_TIM_PeriodElapsedCallback+0x24c>
 800b1b2:	4b3e      	ldr	r3, [pc, #248]	; (800b2ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800b1b4:	ed93 7a00 	vldr	s14, [r3]
 800b1b8:	4b3d      	ldr	r3, [pc, #244]	; (800b2b0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800b1ba:	edd3 7a00 	vldr	s15, [r3]
 800b1be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1c6:	dd02      	ble.n	800b1ce <HAL_TIM_PeriodElapsedCallback+0x246>
 800b1c8:	4b39      	ldr	r3, [pc, #228]	; (800b2b0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	e004      	b.n	800b1d8 <HAL_TIM_PeriodElapsedCallback+0x250>
 800b1ce:	4b37      	ldr	r3, [pc, #220]	; (800b2ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	e001      	b.n	800b1d8 <HAL_TIM_PeriodElapsedCallback+0x250>
 800b1d4:	4b37      	ldr	r3, [pc, #220]	; (800b2b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a34      	ldr	r2, [pc, #208]	; (800b2ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800b1da:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 800b1dc:	4b33      	ldr	r3, [pc, #204]	; (800b2ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800b1de:	ed93 7a00 	vldr	s14, [r3]
 800b1e2:	4b2e      	ldr	r3, [pc, #184]	; (800b29c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800b1e4:	edd3 7a00 	vldr	s15, [r3]
 800b1e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1ec:	4b32      	ldr	r3, [pc, #200]	; (800b2b8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800b1ee:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800b1f2:	4b31      	ldr	r3, [pc, #196]	; (800b2b8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800b1f4:	edd3 7a00 	vldr	s15, [r3]
 800b1f8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b1fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b200:	4b2e      	ldr	r3, [pc, #184]	; (800b2bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 800b202:	edc3 7a00 	vstr	s15, [r3]

			target_speed_r += accel_r * 0.001;
 800b206:	4b2e      	ldr	r3, [pc, #184]	; (800b2c0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7f5 f994 	bl	8000538 <__aeabi_f2d>
 800b210:	a317      	add	r3, pc, #92	; (adr r3, 800b270 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800b212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b216:	f7f5 f9e7 	bl	80005e8 <__aeabi_dmul>
 800b21a:	4603      	mov	r3, r0
 800b21c:	460c      	mov	r4, r1
 800b21e:	4625      	mov	r5, r4
 800b220:	461c      	mov	r4, r3
 800b222:	4b28      	ldr	r3, [pc, #160]	; (800b2c4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4618      	mov	r0, r3
 800b228:	f7f5 f986 	bl	8000538 <__aeabi_f2d>
 800b22c:	4602      	mov	r2, r0
 800b22e:	460b      	mov	r3, r1
 800b230:	4620      	mov	r0, r4
 800b232:	4629      	mov	r1, r5
 800b234:	f7f5 f822 	bl	800027c <__adddf3>
 800b238:	4603      	mov	r3, r0
 800b23a:	460c      	mov	r4, r1
 800b23c:	4618      	mov	r0, r3
 800b23e:	4621      	mov	r1, r4
 800b240:	f7f5 fcaa 	bl	8000b98 <__aeabi_d2f>
 800b244:	4602      	mov	r2, r0
 800b246:	4b1f      	ldr	r3, [pc, #124]	; (800b2c4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800b248:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 800b24a:	4b1e      	ldr	r3, [pc, #120]	; (800b2c4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800b24c:	ed93 7a00 	vldr	s14, [r3]
 800b250:	4b1d      	ldr	r3, [pc, #116]	; (800b2c8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800b252:	edd3 7a00 	vldr	s15, [r3]
 800b256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b25e:	dd35      	ble.n	800b2cc <HAL_TIM_PeriodElapsedCallback+0x344>
 800b260:	4b19      	ldr	r3, [pc, #100]	; (800b2c8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800b262:	edd3 7a00 	vldr	s15, [r3]
 800b266:	e034      	b.n	800b2d2 <HAL_TIM_PeriodElapsedCallback+0x34a>
 800b268:	775e3793 	.word	0x775e3793
 800b26c:	3f552a9e 	.word	0x3f552a9e
 800b270:	d2f1a9fc 	.word	0xd2f1a9fc
 800b274:	3f50624d 	.word	0x3f50624d
 800b278:	20000bc0 	.word	0x20000bc0
 800b27c:	40000800 	.word	0x40000800
 800b280:	200002ac 	.word	0x200002ac
 800b284:	40010400 	.word	0x40010400
 800b288:	20000bb4 	.word	0x20000bb4
 800b28c:	471c4000 	.word	0x471c4000
 800b290:	477fff00 	.word	0x477fff00
 800b294:	200015d0 	.word	0x200015d0
 800b298:	20000af4 	.word	0x20000af4
 800b29c:	20000af8 	.word	0x20000af8
 800b2a0:	200002bc 	.word	0x200002bc
 800b2a4:	20000f74 	.word	0x20000f74
 800b2a8:	20000d68 	.word	0x20000d68
 800b2ac:	20000c0c 	.word	0x20000c0c
 800b2b0:	2000077c 	.word	0x2000077c
 800b2b4:	20000b5c 	.word	0x20000b5c
 800b2b8:	20000b68 	.word	0x20000b68
 800b2bc:	20000bb0 	.word	0x20000bb0
 800b2c0:	20000ae8 	.word	0x20000ae8
 800b2c4:	200001a0 	.word	0x200001a0
 800b2c8:	200001a4 	.word	0x200001a4
 800b2cc:	4ba0      	ldr	r3, [pc, #640]	; (800b550 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800b2ce:	edd3 7a00 	vldr	s15, [r3]
 800b2d2:	4ba0      	ldr	r3, [pc, #640]	; (800b554 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800b2d4:	ed93 7a00 	vldr	s14, [r3]
 800b2d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2e0:	dd10      	ble.n	800b304 <HAL_TIM_PeriodElapsedCallback+0x37c>
 800b2e2:	4b9b      	ldr	r3, [pc, #620]	; (800b550 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800b2e4:	ed93 7a00 	vldr	s14, [r3]
 800b2e8:	4b9b      	ldr	r3, [pc, #620]	; (800b558 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800b2ea:	edd3 7a00 	vldr	s15, [r3]
 800b2ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2f6:	dd02      	ble.n	800b2fe <HAL_TIM_PeriodElapsedCallback+0x376>
 800b2f8:	4b97      	ldr	r3, [pc, #604]	; (800b558 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	e004      	b.n	800b308 <HAL_TIM_PeriodElapsedCallback+0x380>
 800b2fe:	4b94      	ldr	r3, [pc, #592]	; (800b550 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	e001      	b.n	800b308 <HAL_TIM_PeriodElapsedCallback+0x380>
 800b304:	4b93      	ldr	r3, [pc, #588]	; (800b554 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a91      	ldr	r2, [pc, #580]	; (800b550 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800b30a:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 800b30c:	4b90      	ldr	r3, [pc, #576]	; (800b550 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800b30e:	ed93 7a00 	vldr	s14, [r3]
 800b312:	4b92      	ldr	r3, [pc, #584]	; (800b55c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800b314:	edd3 7a00 	vldr	s15, [r3]
 800b318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b31c:	4b90      	ldr	r3, [pc, #576]	; (800b560 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800b31e:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800b322:	4b8f      	ldr	r3, [pc, #572]	; (800b560 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800b324:	edd3 7a00 	vldr	s15, [r3]
 800b328:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b32c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b330:	4b8c      	ldr	r3, [pc, #560]	; (800b564 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800b332:	edc3 7a00 	vstr	s15, [r3]
		}

		log_cnt ++;
 800b336:	4b8c      	ldr	r3, [pc, #560]	; (800b568 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	3301      	adds	r3, #1
 800b33c:	4a8a      	ldr	r2, [pc, #552]	; (800b568 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800b33e:	6013      	str	r3, [r2, #0]

		if(log_cnt >= 5 && MF.FLAG.LOG){
 800b340:	4b89      	ldr	r3, [pc, #548]	; (800b568 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b04      	cmp	r3, #4
 800b346:	dd37      	ble.n	800b3b8 <HAL_TIM_PeriodElapsedCallback+0x430>
 800b348:	4b88      	ldr	r3, [pc, #544]	; (800b56c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800b34a:	881b      	ldrh	r3, [r3, #0]
 800b34c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800b350:	b2db      	uxtb	r3, r3
 800b352:	2b00      	cmp	r3, #0
 800b354:	d030      	beq.n	800b3b8 <HAL_TIM_PeriodElapsedCallback+0x430>
			log_cnt = 0;
 800b356:	4b84      	ldr	r3, [pc, #528]	; (800b568 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800b358:	2200      	movs	r2, #0
 800b35a:	601a      	str	r2, [r3, #0]
			if(get_cnt < log_allay){
 800b35c:	4b84      	ldr	r3, [pc, #528]	; (800b570 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2bc7      	cmp	r3, #199	; 0xc7
 800b362:	dc29      	bgt.n	800b3b8 <HAL_TIM_PeriodElapsedCallback+0x430>
				get_speed_l[get_cnt] = speed_l;
 800b364:	4b83      	ldr	r3, [pc, #524]	; (800b574 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800b366:	edd3 7a00 	vldr	s15, [r3]
 800b36a:	4b81      	ldr	r3, [pc, #516]	; (800b570 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b372:	ee17 1a90 	vmov	r1, s15
 800b376:	4a80      	ldr	r2, [pc, #512]	; (800b578 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800b378:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_speed_r[get_cnt] = speed_r;
 800b37c:	4b77      	ldr	r3, [pc, #476]	; (800b55c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800b37e:	edd3 7a00 	vldr	s15, [r3]
 800b382:	4b7b      	ldr	r3, [pc, #492]	; (800b570 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b38a:	ee17 1a90 	vmov	r1, s15
 800b38e:	4a7b      	ldr	r2, [pc, #492]	; (800b57c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800b390:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_omega[get_cnt] = gyro_read_z();
 800b394:	f7ff fd98 	bl	800aec8 <gyro_read_z>
 800b398:	eef0 7a40 	vmov.f32	s15, s0
 800b39c:	4b74      	ldr	r3, [pc, #464]	; (800b570 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3a4:	ee17 1a90 	vmov	r1, s15
 800b3a8:	4a75      	ldr	r2, [pc, #468]	; (800b580 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800b3aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_cnt++;
 800b3ae:	4b70      	ldr	r3, [pc, #448]	; (800b570 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	4a6e      	ldr	r2, [pc, #440]	; (800b570 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800b3b6:	6013      	str	r3, [r2, #0]
//		degree_x += accel_read_x() * 0.001;
//		degree_y += accel_read_y() * 0.001;
//		degree_z += accel_read_z() * 0.001;
//		degree_x += gyro_read_x() * 0.001;
//		degree_y += gyro_read_y() * 0.001;
		degree_z += gyro_read_z() * 0.001;
 800b3b8:	f7ff fd86 	bl	800aec8 <gyro_read_z>
 800b3bc:	ee10 3a10 	vmov	r3, s0
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7f5 f8b9 	bl	8000538 <__aeabi_f2d>
 800b3c6:	a35e      	add	r3, pc, #376	; (adr r3, 800b540 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	f7f5 f90c 	bl	80005e8 <__aeabi_dmul>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	460c      	mov	r4, r1
 800b3d4:	4625      	mov	r5, r4
 800b3d6:	461c      	mov	r4, r3
 800b3d8:	4b6a      	ldr	r3, [pc, #424]	; (800b584 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f7f5 f8ab 	bl	8000538 <__aeabi_f2d>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	f7f4 ff47 	bl	800027c <__adddf3>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	4621      	mov	r1, r4
 800b3f6:	f7f5 fbcf 	bl	8000b98 <__aeabi_d2f>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	4b61      	ldr	r3, [pc, #388]	; (800b584 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800b3fe:	601a      	str	r2, [r3, #0]

		//gyro ドリフト量計算
		if(gyro_drift_flag){
 800b400:	4b61      	ldr	r3, [pc, #388]	; (800b588 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	b2db      	uxtb	r3, r3
 800b406:	2b00      	cmp	r3, #0
 800b408:	d04b      	beq.n	800b4a2 <HAL_TIM_PeriodElapsedCallback+0x51a>
			gyro_cnt ++;
 800b40a:	4b60      	ldr	r3, [pc, #384]	; (800b58c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	3301      	adds	r3, #1
 800b410:	4a5e      	ldr	r2, [pc, #376]	; (800b58c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800b412:	6013      	str	r3, [r2, #0]
			if(gyro_cnt >= 2)dif_omega_z += old_omega_z - gyro_read_z();
 800b414:	4b5d      	ldr	r3, [pc, #372]	; (800b58c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	dd10      	ble.n	800b43e <HAL_TIM_PeriodElapsedCallback+0x4b6>
 800b41c:	4b5c      	ldr	r3, [pc, #368]	; (800b590 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800b41e:	ed93 8a00 	vldr	s16, [r3]
 800b422:	f7ff fd51 	bl	800aec8 <gyro_read_z>
 800b426:	eef0 7a40 	vmov.f32	s15, s0
 800b42a:	ee38 7a67 	vsub.f32	s14, s16, s15
 800b42e:	4b59      	ldr	r3, [pc, #356]	; (800b594 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800b430:	edd3 7a00 	vldr	s15, [r3]
 800b434:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b438:	4b56      	ldr	r3, [pc, #344]	; (800b594 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800b43a:	edc3 7a00 	vstr	s15, [r3]
			old_omega_z = gyro_read_z();
 800b43e:	f7ff fd43 	bl	800aec8 <gyro_read_z>
 800b442:	eef0 7a40 	vmov.f32	s15, s0
 800b446:	4b52      	ldr	r3, [pc, #328]	; (800b590 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800b448:	edc3 7a00 	vstr	s15, [r3]
			full_led_write(YELLOW);
 800b44c:	2006      	movs	r0, #6
 800b44e:	f004 fc07 	bl	800fc60 <full_led_write>
			if(gyro_cnt >= 1001) {
 800b452:	4b4e      	ldr	r3, [pc, #312]	; (800b58c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b45a:	dd1a      	ble.n	800b492 <HAL_TIM_PeriodElapsedCallback+0x50a>
				gyro_drift_flag = 0;
 800b45c:	4b4a      	ldr	r3, [pc, #296]	; (800b588 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800b45e:	2200      	movs	r2, #0
 800b460:	701a      	strb	r2, [r3, #0]
				gyro_drift_value = dif_omega_z / gyro_cnt-1;
 800b462:	4b4c      	ldr	r3, [pc, #304]	; (800b594 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800b464:	edd3 6a00 	vldr	s13, [r3]
 800b468:	4b48      	ldr	r3, [pc, #288]	; (800b58c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	ee07 3a90 	vmov	s15, r3
 800b470:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b478:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b47c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b480:	4b45      	ldr	r3, [pc, #276]	; (800b598 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800b482:	edc3 7a00 	vstr	s15, [r3]
				gyro_cnt = 0;
 800b486:	4b41      	ldr	r3, [pc, #260]	; (800b58c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800b488:	2200      	movs	r2, #0
 800b48a:	601a      	str	r2, [r3, #0]
				full_led_write(BLUEGREEN);
 800b48c:	2004      	movs	r0, #4
 800b48e:	f004 fbe7 	bl	800fc60 <full_led_write>
			}
			degree_z = 0;
 800b492:	4b3c      	ldr	r3, [pc, #240]	; (800b584 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800b494:	f04f 0200 	mov.w	r2, #0
 800b498:	601a      	str	r2, [r3, #0]
			target_degree_z = 0;
 800b49a:	4b40      	ldr	r3, [pc, #256]	; (800b59c <HAL_TIM_PeriodElapsedCallback+0x614>)
 800b49c:	f04f 0200 	mov.w	r2, #0
 800b4a0:	601a      	str	r2, [r3, #0]
		}


		if(enkai_flag){
 800b4a2:	4b3f      	ldr	r3, [pc, #252]	; (800b5a0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f000 80d8 	beq.w	800b65e <HAL_TIM_PeriodElapsedCallback+0x6d6>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 800b4ae:	4b35      	ldr	r3, [pc, #212]	; (800b584 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800b4b0:	ed93 7a00 	vldr	s14, [r3]
 800b4b4:	4b39      	ldr	r3, [pc, #228]	; (800b59c <HAL_TIM_PeriodElapsedCallback+0x614>)
 800b4b6:	edd3 7a00 	vldr	s15, [r3]
 800b4ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4be:	ee17 0a90 	vmov	r0, s15
 800b4c2:	f7f5 f839 	bl	8000538 <__aeabi_f2d>
 800b4c6:	a320      	add	r3, pc, #128	; (adr r3, 800b548 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	f7f5 f88c 	bl	80005e8 <__aeabi_dmul>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	f7f5 fb5e 	bl	8000b98 <__aeabi_d2f>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	4b31      	ldr	r3, [pc, #196]	; (800b5a4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800b4e0:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 800b4e2:	4b30      	ldr	r3, [pc, #192]	; (800b5a4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800b4e4:	edd3 7a00 	vldr	s15, [r3]
 800b4e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f0:	dd5e      	ble.n	800b5b0 <HAL_TIM_PeriodElapsedCallback+0x628>
				target_speed_l = sqrt(2*accel_l*target_dist);
 800b4f2:	4b2d      	ldr	r3, [pc, #180]	; (800b5a8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800b4f4:	edd3 7a00 	vldr	s15, [r3]
 800b4f8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800b4fc:	4b29      	ldr	r3, [pc, #164]	; (800b5a4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800b4fe:	edd3 7a00 	vldr	s15, [r3]
 800b502:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b506:	ee17 0a90 	vmov	r0, s15
 800b50a:	f7f5 f815 	bl	8000538 <__aeabi_f2d>
 800b50e:	4603      	mov	r3, r0
 800b510:	460c      	mov	r4, r1
 800b512:	ec44 3b10 	vmov	d0, r3, r4
 800b516:	f006 f93d 	bl	8011794 <sqrt>
 800b51a:	ec54 3b10 	vmov	r3, r4, d0
 800b51e:	4618      	mov	r0, r3
 800b520:	4621      	mov	r1, r4
 800b522:	f7f5 fb39 	bl	8000b98 <__aeabi_d2f>
 800b526:	4602      	mov	r2, r0
 800b528:	4b20      	ldr	r3, [pc, #128]	; (800b5ac <HAL_TIM_PeriodElapsedCallback+0x624>)
 800b52a:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 800b52c:	4b1f      	ldr	r3, [pc, #124]	; (800b5ac <HAL_TIM_PeriodElapsedCallback+0x624>)
 800b52e:	edd3 7a00 	vldr	s15, [r3]
 800b532:	eef1 7a67 	vneg.f32	s15, s15
 800b536:	4b06      	ldr	r3, [pc, #24]	; (800b550 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800b538:	edc3 7a00 	vstr	s15, [r3]
 800b53c:	e065      	b.n	800b60a <HAL_TIM_PeriodElapsedCallback+0x682>
 800b53e:	bf00      	nop
 800b540:	d2f1a9fc 	.word	0xd2f1a9fc
 800b544:	3f50624d 	.word	0x3f50624d
 800b548:	d7653223 	.word	0xd7653223
 800b54c:	3fe26e40 	.word	0x3fe26e40
 800b550:	200001a0 	.word	0x200001a0
 800b554:	20000f78 	.word	0x20000f78
 800b558:	200001a4 	.word	0x200001a4
 800b55c:	200002bc 	.word	0x200002bc
 800b560:	20000c18 	.word	0x20000c18
 800b564:	20000780 	.word	0x20000780
 800b568:	20000108 	.word	0x20000108
 800b56c:	20000f74 	.word	0x20000f74
 800b570:	20000110 	.word	0x20000110
 800b574:	20000af8 	.word	0x20000af8
 800b578:	20000784 	.word	0x20000784
 800b57c:	2000045c 	.word	0x2000045c
 800b580:	200012b0 	.word	0x200012b0
 800b584:	20000b64 	.word	0x20000b64
 800b588:	20000aa4 	.word	0x20000aa4
 800b58c:	2000010c 	.word	0x2000010c
 800b590:	200015d8 	.word	0x200015d8
 800b594:	20000bac 	.word	0x20000bac
 800b598:	20000c00 	.word	0x20000c00
 800b59c:	20000c08 	.word	0x20000c08
 800b5a0:	20000bbc 	.word	0x20000bbc
 800b5a4:	20000f84 	.word	0x20000f84
 800b5a8:	20000d68 	.word	0x20000d68
 800b5ac:	20000c0c 	.word	0x20000c0c
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 800b5b0:	4bab      	ldr	r3, [pc, #684]	; (800b860 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 800b5b2:	edd3 7a00 	vldr	s15, [r3]
 800b5b6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800b5ba:	4baa      	ldr	r3, [pc, #680]	; (800b864 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800b5bc:	edd3 7a00 	vldr	s15, [r3]
 800b5c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5c4:	eef1 7a67 	vneg.f32	s15, s15
 800b5c8:	ee17 3a90 	vmov	r3, s15
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7f4 ffb3 	bl	8000538 <__aeabi_f2d>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	460c      	mov	r4, r1
 800b5d6:	ec44 3b10 	vmov	d0, r3, r4
 800b5da:	f006 f8db 	bl	8011794 <sqrt>
 800b5de:	ec54 3b10 	vmov	r3, r4, d0
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	4621      	mov	r1, r4
 800b5e6:	f7f5 fad7 	bl	8000b98 <__aeabi_d2f>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	ee07 3a90 	vmov	s15, r3
 800b5f0:	eef1 7a67 	vneg.f32	s15, s15
 800b5f4:	4b9c      	ldr	r3, [pc, #624]	; (800b868 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800b5f6:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 800b5fa:	4b9b      	ldr	r3, [pc, #620]	; (800b868 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800b5fc:	edd3 7a00 	vldr	s15, [r3]
 800b600:	eef1 7a67 	vneg.f32	s15, s15
 800b604:	4b99      	ldr	r3, [pc, #612]	; (800b86c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800b606:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 800b60a:	4b97      	ldr	r3, [pc, #604]	; (800b868 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800b60c:	ed93 7a00 	vldr	s14, [r3]
 800b610:	4b97      	ldr	r3, [pc, #604]	; (800b870 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800b612:	edd3 7a00 	vldr	s15, [r3]
 800b616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b61a:	4b96      	ldr	r3, [pc, #600]	; (800b874 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800b61c:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800b620:	4b94      	ldr	r3, [pc, #592]	; (800b874 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800b622:	edd3 7a00 	vldr	s15, [r3]
 800b626:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b62a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b62e:	4b92      	ldr	r3, [pc, #584]	; (800b878 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800b630:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800b634:	4b8d      	ldr	r3, [pc, #564]	; (800b86c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800b636:	ed93 7a00 	vldr	s14, [r3]
 800b63a:	4b90      	ldr	r3, [pc, #576]	; (800b87c <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800b63c:	edd3 7a00 	vldr	s15, [r3]
 800b640:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b644:	4b8e      	ldr	r3, [pc, #568]	; (800b880 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800b646:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800b64a:	4b8d      	ldr	r3, [pc, #564]	; (800b880 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800b64c:	edd3 7a00 	vldr	s15, [r3]
 800b650:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b654:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b658:	4b8a      	ldr	r3, [pc, #552]	; (800b884 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800b65a:	edc3 7a00 	vstr	s15, [r3]
		}


		if(MF.FLAG.FWALL){
 800b65e:	4b8a      	ldr	r3, [pc, #552]	; (800b888 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800b660:	881b      	ldrh	r3, [r3, #0]
 800b662:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800b666:	b2db      	uxtb	r3, r3
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 8096 	beq.w	800b79a <HAL_TIM_PeriodElapsedCallback+0x812>
			pulse_l = (OFFSET_FWALL_L - ad_fl) * 0.04;
 800b66e:	4b87      	ldr	r3, [pc, #540]	; (800b88c <HAL_TIM_PeriodElapsedCallback+0x904>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 800b676:	4618      	mov	r0, r3
 800b678:	f7f4 ff3c 	bl	80004f4 <__aeabi_ui2d>
 800b67c:	a372      	add	r3, pc, #456	; (adr r3, 800b848 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800b67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b682:	f7f4 ffb1 	bl	80005e8 <__aeabi_dmul>
 800b686:	4603      	mov	r3, r0
 800b688:	460c      	mov	r4, r1
 800b68a:	4618      	mov	r0, r3
 800b68c:	4621      	mov	r1, r4
 800b68e:	f7f5 fa83 	bl	8000b98 <__aeabi_d2f>
 800b692:	4602      	mov	r2, r0
 800b694:	4b78      	ldr	r3, [pc, #480]	; (800b878 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800b696:	601a      	str	r2, [r3, #0]
			pulse_r = (OFFSET_FWALL_R - ad_fr) * 0.08;
 800b698:	4b7d      	ldr	r3, [pc, #500]	; (800b890 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7f4 ff27 	bl	80004f4 <__aeabi_ui2d>
 800b6a6:	a36a      	add	r3, pc, #424	; (adr r3, 800b850 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 800b6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ac:	f7f4 ff9c 	bl	80005e8 <__aeabi_dmul>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	4621      	mov	r1, r4
 800b6b8:	f7f5 fa6e 	bl	8000b98 <__aeabi_d2f>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	4b71      	ldr	r3, [pc, #452]	; (800b884 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800b6c0:	601a      	str	r2, [r3, #0]
			pulse_l = min(max(pulse_l, -100), 100);
 800b6c2:	4b6d      	ldr	r3, [pc, #436]	; (800b878 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800b6c4:	edd3 7a00 	vldr	s15, [r3]
 800b6c8:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800b894 <HAL_TIM_PeriodElapsedCallback+0x90c>
 800b6cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6d4:	bfcc      	ite	gt
 800b6d6:	2301      	movgt	r3, #1
 800b6d8:	2300      	movle	r3, #0
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	f083 0301 	eor.w	r3, r3, #1
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d111      	bne.n	800b70a <HAL_TIM_PeriodElapsedCallback+0x782>
 800b6e6:	4b64      	ldr	r3, [pc, #400]	; (800b878 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800b6e8:	edd3 7a00 	vldr	s15, [r3]
 800b6ec:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800b898 <HAL_TIM_PeriodElapsedCallback+0x910>
 800b6f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6f8:	bfcc      	ite	gt
 800b6fa:	2301      	movgt	r3, #1
 800b6fc:	2300      	movle	r3, #0
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	f083 0301 	eor.w	r3, r3, #1
 800b704:	b2db      	uxtb	r3, r3
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00e      	beq.n	800b728 <HAL_TIM_PeriodElapsedCallback+0x7a0>
 800b70a:	4b5b      	ldr	r3, [pc, #364]	; (800b878 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800b70c:	edd3 7a00 	vldr	s15, [r3]
 800b710:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800b894 <HAL_TIM_PeriodElapsedCallback+0x90c>
 800b714:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b71c:	dd02      	ble.n	800b724 <HAL_TIM_PeriodElapsedCallback+0x79c>
 800b71e:	4b56      	ldr	r3, [pc, #344]	; (800b878 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	e002      	b.n	800b72a <HAL_TIM_PeriodElapsedCallback+0x7a2>
 800b724:	4b5d      	ldr	r3, [pc, #372]	; (800b89c <HAL_TIM_PeriodElapsedCallback+0x914>)
 800b726:	e000      	b.n	800b72a <HAL_TIM_PeriodElapsedCallback+0x7a2>
 800b728:	4b5d      	ldr	r3, [pc, #372]	; (800b8a0 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800b72a:	4a53      	ldr	r2, [pc, #332]	; (800b878 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800b72c:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -100), 100);
 800b72e:	4b55      	ldr	r3, [pc, #340]	; (800b884 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800b730:	edd3 7a00 	vldr	s15, [r3]
 800b734:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800b894 <HAL_TIM_PeriodElapsedCallback+0x90c>
 800b738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b740:	bfcc      	ite	gt
 800b742:	2301      	movgt	r3, #1
 800b744:	2300      	movle	r3, #0
 800b746:	b2db      	uxtb	r3, r3
 800b748:	f083 0301 	eor.w	r3, r3, #1
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d111      	bne.n	800b776 <HAL_TIM_PeriodElapsedCallback+0x7ee>
 800b752:	4b4c      	ldr	r3, [pc, #304]	; (800b884 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800b754:	edd3 7a00 	vldr	s15, [r3]
 800b758:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800b898 <HAL_TIM_PeriodElapsedCallback+0x910>
 800b75c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b764:	bfcc      	ite	gt
 800b766:	2301      	movgt	r3, #1
 800b768:	2300      	movle	r3, #0
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	f083 0301 	eor.w	r3, r3, #1
 800b770:	b2db      	uxtb	r3, r3
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00e      	beq.n	800b794 <HAL_TIM_PeriodElapsedCallback+0x80c>
 800b776:	4b43      	ldr	r3, [pc, #268]	; (800b884 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800b778:	edd3 7a00 	vldr	s15, [r3]
 800b77c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800b894 <HAL_TIM_PeriodElapsedCallback+0x90c>
 800b780:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b788:	dd02      	ble.n	800b790 <HAL_TIM_PeriodElapsedCallback+0x808>
 800b78a:	4b3e      	ldr	r3, [pc, #248]	; (800b884 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	e002      	b.n	800b796 <HAL_TIM_PeriodElapsedCallback+0x80e>
 800b790:	4b42      	ldr	r3, [pc, #264]	; (800b89c <HAL_TIM_PeriodElapsedCallback+0x914>)
 800b792:	e000      	b.n	800b796 <HAL_TIM_PeriodElapsedCallback+0x80e>
 800b794:	4b42      	ldr	r3, [pc, #264]	; (800b8a0 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800b796:	4a3b      	ldr	r2, [pc, #236]	; (800b884 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800b798:	6013      	str	r3, [r2, #0]

		}


		if(MF.FLAG.GYRO){
 800b79a:	4b3b      	ldr	r3, [pc, #236]	; (800b888 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800b79c:	881b      	ldrh	r3, [r3, #0]
 800b79e:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f000 8143 	beq.w	800ba30 <HAL_TIM_PeriodElapsedCallback+0xaa8>
			target_omega_z += target_degaccel_z * 0.001;
 800b7aa:	4b3e      	ldr	r3, [pc, #248]	; (800b8a4 <HAL_TIM_PeriodElapsedCallback+0x91c>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7f4 fec2 	bl	8000538 <__aeabi_f2d>
 800b7b4:	a328      	add	r3, pc, #160	; (adr r3, 800b858 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 800b7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ba:	f7f4 ff15 	bl	80005e8 <__aeabi_dmul>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	460c      	mov	r4, r1
 800b7c2:	4625      	mov	r5, r4
 800b7c4:	461c      	mov	r4, r3
 800b7c6:	4b38      	ldr	r3, [pc, #224]	; (800b8a8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7f4 feb4 	bl	8000538 <__aeabi_f2d>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	f7f4 fd50 	bl	800027c <__adddf3>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	460c      	mov	r4, r1
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	4621      	mov	r1, r4
 800b7e4:	f7f5 f9d8 	bl	8000b98 <__aeabi_d2f>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	4b2f      	ldr	r3, [pc, #188]	; (800b8a8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800b7ec:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 800b7ee:	4b2e      	ldr	r3, [pc, #184]	; (800b8a8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800b7f0:	ed93 7a00 	vldr	s14, [r3]
 800b7f4:	4b2d      	ldr	r3, [pc, #180]	; (800b8ac <HAL_TIM_PeriodElapsedCallback+0x924>)
 800b7f6:	edd3 7a00 	vldr	s15, [r3]
 800b7fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b802:	dd03      	ble.n	800b80c <HAL_TIM_PeriodElapsedCallback+0x884>
 800b804:	4b29      	ldr	r3, [pc, #164]	; (800b8ac <HAL_TIM_PeriodElapsedCallback+0x924>)
 800b806:	edd3 7a00 	vldr	s15, [r3]
 800b80a:	e002      	b.n	800b812 <HAL_TIM_PeriodElapsedCallback+0x88a>
 800b80c:	4b26      	ldr	r3, [pc, #152]	; (800b8a8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800b80e:	edd3 7a00 	vldr	s15, [r3]
 800b812:	4b27      	ldr	r3, [pc, #156]	; (800b8b0 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800b814:	ed93 7a00 	vldr	s14, [r3]
 800b818:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b820:	dd48      	ble.n	800b8b4 <HAL_TIM_PeriodElapsedCallback+0x92c>
 800b822:	4b21      	ldr	r3, [pc, #132]	; (800b8a8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800b824:	ed93 7a00 	vldr	s14, [r3]
 800b828:	4b20      	ldr	r3, [pc, #128]	; (800b8ac <HAL_TIM_PeriodElapsedCallback+0x924>)
 800b82a:	edd3 7a00 	vldr	s15, [r3]
 800b82e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b836:	dd02      	ble.n	800b83e <HAL_TIM_PeriodElapsedCallback+0x8b6>
 800b838:	4b1c      	ldr	r3, [pc, #112]	; (800b8ac <HAL_TIM_PeriodElapsedCallback+0x924>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	e03c      	b.n	800b8b8 <HAL_TIM_PeriodElapsedCallback+0x930>
 800b83e:	4b1a      	ldr	r3, [pc, #104]	; (800b8a8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	e039      	b.n	800b8b8 <HAL_TIM_PeriodElapsedCallback+0x930>
 800b844:	f3af 8000 	nop.w
 800b848:	47ae147b 	.word	0x47ae147b
 800b84c:	3fa47ae1 	.word	0x3fa47ae1
 800b850:	47ae147b 	.word	0x47ae147b
 800b854:	3fb47ae1 	.word	0x3fb47ae1
 800b858:	d2f1a9fc 	.word	0xd2f1a9fc
 800b85c:	3f50624d 	.word	0x3f50624d
 800b860:	20000d68 	.word	0x20000d68
 800b864:	20000f84 	.word	0x20000f84
 800b868:	20000c0c 	.word	0x20000c0c
 800b86c:	200001a0 	.word	0x200001a0
 800b870:	20000af8 	.word	0x20000af8
 800b874:	20000b68 	.word	0x20000b68
 800b878:	20000bb0 	.word	0x20000bb0
 800b87c:	200002bc 	.word	0x200002bc
 800b880:	20000c18 	.word	0x20000c18
 800b884:	20000780 	.word	0x20000780
 800b888:	20000f74 	.word	0x20000f74
 800b88c:	20000d64 	.word	0x20000d64
 800b890:	20000c10 	.word	0x20000c10
 800b894:	c2c80000 	.word	0xc2c80000
 800b898:	42c80000 	.word	0x42c80000
 800b89c:	c2c80000 	.word	0xc2c80000
 800b8a0:	42c80000 	.word	0x42c80000
 800b8a4:	20000b60 	.word	0x20000b60
 800b8a8:	200001a8 	.word	0x200001a8
 800b8ac:	20000aec 	.word	0x20000aec
 800b8b0:	200002b8 	.word	0x200002b8
 800b8b4:	4bac      	ldr	r3, [pc, #688]	; (800bb68 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4aac      	ldr	r2, [pc, #688]	; (800bb6c <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 800b8ba:	6013      	str	r3, [r2, #0]

			epsilon_omega = target_omega_z - gyro_read_z();
 800b8bc:	4bab      	ldr	r3, [pc, #684]	; (800bb6c <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 800b8be:	ed93 8a00 	vldr	s16, [r3]
 800b8c2:	f7ff fb01 	bl	800aec8 <gyro_read_z>
 800b8c6:	eef0 7a40 	vmov.f32	s15, s0
 800b8ca:	ee78 7a67 	vsub.f32	s15, s16, s15
 800b8ce:	4ba8      	ldr	r3, [pc, #672]	; (800bb70 <HAL_TIM_PeriodElapsedCallback+0xbe8>)
 800b8d0:	edc3 7a00 	vstr	s15, [r3]

			target_speed_l = speed_G - (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800b8d4:	4ba7      	ldr	r3, [pc, #668]	; (800bb74 <HAL_TIM_PeriodElapsedCallback+0xbec>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7f4 fe2d 	bl	8000538 <__aeabi_f2d>
 800b8de:	4604      	mov	r4, r0
 800b8e0:	460d      	mov	r5, r1
 800b8e2:	4ba3      	ldr	r3, [pc, #652]	; (800bb70 <HAL_TIM_PeriodElapsedCallback+0xbe8>)
 800b8e4:	edd3 7a00 	vldr	s15, [r3]
 800b8e8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b8ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b8f0:	4b9e      	ldr	r3, [pc, #632]	; (800bb6c <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 800b8f2:	edd3 7a00 	vldr	s15, [r3]
 800b8f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8fa:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800bb78 <HAL_TIM_PeriodElapsedCallback+0xbf0>
 800b8fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b902:	ee16 0a90 	vmov	r0, s13
 800b906:	f7f4 fe17 	bl	8000538 <__aeabi_f2d>
 800b90a:	a395      	add	r3, pc, #596	; (adr r3, 800bb60 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f7f4 fe6a 	bl	80005e8 <__aeabi_dmul>
 800b914:	4602      	mov	r2, r0
 800b916:	460b      	mov	r3, r1
 800b918:	4610      	mov	r0, r2
 800b91a:	4619      	mov	r1, r3
 800b91c:	f04f 0200 	mov.w	r2, #0
 800b920:	4b96      	ldr	r3, [pc, #600]	; (800bb7c <HAL_TIM_PeriodElapsedCallback+0xbf4>)
 800b922:	f7f4 fe61 	bl	80005e8 <__aeabi_dmul>
 800b926:	4602      	mov	r2, r0
 800b928:	460b      	mov	r3, r1
 800b92a:	4610      	mov	r0, r2
 800b92c:	4619      	mov	r1, r3
 800b92e:	f04f 0200 	mov.w	r2, #0
 800b932:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b936:	f7f4 ff81 	bl	800083c <__aeabi_ddiv>
 800b93a:	4602      	mov	r2, r0
 800b93c:	460b      	mov	r3, r1
 800b93e:	4620      	mov	r0, r4
 800b940:	4629      	mov	r1, r5
 800b942:	f7f4 fc99 	bl	8000278 <__aeabi_dsub>
 800b946:	4603      	mov	r3, r0
 800b948:	460c      	mov	r4, r1
 800b94a:	4618      	mov	r0, r3
 800b94c:	4621      	mov	r1, r4
 800b94e:	f7f5 f923 	bl	8000b98 <__aeabi_d2f>
 800b952:	4602      	mov	r2, r0
 800b954:	4b8a      	ldr	r3, [pc, #552]	; (800bb80 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
 800b956:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G + (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800b958:	4b86      	ldr	r3, [pc, #536]	; (800bb74 <HAL_TIM_PeriodElapsedCallback+0xbec>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7f4 fdeb 	bl	8000538 <__aeabi_f2d>
 800b962:	4604      	mov	r4, r0
 800b964:	460d      	mov	r5, r1
 800b966:	4b82      	ldr	r3, [pc, #520]	; (800bb70 <HAL_TIM_PeriodElapsedCallback+0xbe8>)
 800b968:	edd3 7a00 	vldr	s15, [r3]
 800b96c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b970:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b974:	4b7d      	ldr	r3, [pc, #500]	; (800bb6c <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 800b976:	edd3 7a00 	vldr	s15, [r3]
 800b97a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b97e:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800bb78 <HAL_TIM_PeriodElapsedCallback+0xbf0>
 800b982:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b986:	ee16 0a90 	vmov	r0, s13
 800b98a:	f7f4 fdd5 	bl	8000538 <__aeabi_f2d>
 800b98e:	a374      	add	r3, pc, #464	; (adr r3, 800bb60 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 800b990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b994:	f7f4 fe28 	bl	80005e8 <__aeabi_dmul>
 800b998:	4602      	mov	r2, r0
 800b99a:	460b      	mov	r3, r1
 800b99c:	4610      	mov	r0, r2
 800b99e:	4619      	mov	r1, r3
 800b9a0:	f04f 0200 	mov.w	r2, #0
 800b9a4:	4b75      	ldr	r3, [pc, #468]	; (800bb7c <HAL_TIM_PeriodElapsedCallback+0xbf4>)
 800b9a6:	f7f4 fe1f 	bl	80005e8 <__aeabi_dmul>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	f04f 0200 	mov.w	r2, #0
 800b9b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b9ba:	f7f4 ff3f 	bl	800083c <__aeabi_ddiv>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	4629      	mov	r1, r5
 800b9c6:	f7f4 fc59 	bl	800027c <__adddf3>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	4621      	mov	r1, r4
 800b9d2:	f7f5 f8e1 	bl	8000b98 <__aeabi_d2f>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	4b6a      	ldr	r3, [pc, #424]	; (800bb84 <HAL_TIM_PeriodElapsedCallback+0xbfc>)
 800b9da:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 800b9dc:	4b68      	ldr	r3, [pc, #416]	; (800bb80 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
 800b9de:	ed93 7a00 	vldr	s14, [r3]
 800b9e2:	4b69      	ldr	r3, [pc, #420]	; (800bb88 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 800b9e4:	edd3 7a00 	vldr	s15, [r3]
 800b9e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9ec:	4b67      	ldr	r3, [pc, #412]	; (800bb8c <HAL_TIM_PeriodElapsedCallback+0xc04>)
 800b9ee:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800b9f2:	4b66      	ldr	r3, [pc, #408]	; (800bb8c <HAL_TIM_PeriodElapsedCallback+0xc04>)
 800b9f4:	edd3 7a00 	vldr	s15, [r3]
 800b9f8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800b9fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba00:	4b63      	ldr	r3, [pc, #396]	; (800bb90 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800ba02:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800ba06:	4b5f      	ldr	r3, [pc, #380]	; (800bb84 <HAL_TIM_PeriodElapsedCallback+0xbfc>)
 800ba08:	ed93 7a00 	vldr	s14, [r3]
 800ba0c:	4b61      	ldr	r3, [pc, #388]	; (800bb94 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 800ba0e:	edd3 7a00 	vldr	s15, [r3]
 800ba12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba16:	4b60      	ldr	r3, [pc, #384]	; (800bb98 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 800ba18:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800ba1c:	4b5e      	ldr	r3, [pc, #376]	; (800bb98 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 800ba1e:	edd3 7a00 	vldr	s15, [r3]
 800ba22:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800ba26:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba2a:	4b5c      	ldr	r3, [pc, #368]	; (800bb9c <HAL_TIM_PeriodElapsedCallback+0xc14>)
 800ba2c:	edc3 7a00 	vstr	s15, [r3]
		}


		//ADchange interrupt
		uint16_t delay;
		tp = (tp+1)%3;
 800ba30:	4b5b      	ldr	r3, [pc, #364]	; (800bba0 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	1c5a      	adds	r2, r3, #1
 800ba36:	4b5b      	ldr	r3, [pc, #364]	; (800bba4 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 800ba38:	fb83 3102 	smull	r3, r1, r3, r2
 800ba3c:	17d3      	asrs	r3, r2, #31
 800ba3e:	1ac9      	subs	r1, r1, r3
 800ba40:	460b      	mov	r3, r1
 800ba42:	005b      	lsls	r3, r3, #1
 800ba44:	440b      	add	r3, r1
 800ba46:	1ad1      	subs	r1, r2, r3
 800ba48:	b2ca      	uxtb	r2, r1
 800ba4a:	4b55      	ldr	r3, [pc, #340]	; (800bba0 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 800ba4c:	701a      	strb	r2, [r3, #0]

		switch(tp){
 800ba4e:	4b54      	ldr	r3, [pc, #336]	; (800bba0 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d044      	beq.n	800bae0 <HAL_TIM_PeriodElapsedCallback+0xb58>
 800ba56:	2b02      	cmp	r3, #2
 800ba58:	f000 80b4 	beq.w	800bbc4 <HAL_TIM_PeriodElapsedCallback+0xc3c>
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f040 82cd 	bne.w	800bffc <HAL_TIM_PeriodElapsedCallback+0x1074>
		  case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); 	//L
 800ba62:	2201      	movs	r2, #1
 800ba64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ba68:	484f      	ldr	r0, [pc, #316]	; (800bba8 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800ba6a:	f7f6 fc4b 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800ba6e:	2300      	movs	r3, #0
 800ba70:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ba72:	e002      	b.n	800ba7a <HAL_TIM_PeriodElapsedCallback+0xaf2>
 800ba74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba76:	3301      	adds	r3, #1
 800ba78:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ba7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba7c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d9f7      	bls.n	800ba74 <HAL_TIM_PeriodElapsedCallback+0xaec>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_3);			//L
 800ba84:	2103      	movs	r1, #3
 800ba86:	4849      	ldr	r0, [pc, #292]	; (800bbac <HAL_TIM_PeriodElapsedCallback+0xc24>)
 800ba88:	f001 f9f6 	bl	800ce78 <get_adc_value>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	461a      	mov	r2, r3
 800ba90:	4b47      	ldr	r3, [pc, #284]	; (800bbb0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800ba92:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800ba94:	2200      	movs	r2, #0
 800ba96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ba9a:	4843      	ldr	r0, [pc, #268]	; (800bba8 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800ba9c:	f7f6 fc32 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  	//R
 800baa0:	2201      	movs	r2, #1
 800baa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800baa6:	4843      	ldr	r0, [pc, #268]	; (800bbb4 <HAL_TIM_PeriodElapsedCallback+0xc2c>)
 800baa8:	f7f6 fc2c 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800baac:	2300      	movs	r3, #0
 800baae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bab0:	e002      	b.n	800bab8 <HAL_TIM_PeriodElapsedCallback+0xb30>
 800bab2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bab4:	3301      	adds	r3, #1
 800bab6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bab8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800baba:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800babe:	4293      	cmp	r3, r2
 800bac0:	d9f7      	bls.n	800bab2 <HAL_TIM_PeriodElapsedCallback+0xb2a>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_1);			//R
 800bac2:	2101      	movs	r1, #1
 800bac4:	4839      	ldr	r0, [pc, #228]	; (800bbac <HAL_TIM_PeriodElapsedCallback+0xc24>)
 800bac6:	f001 f9d7 	bl	800ce78 <get_adc_value>
 800baca:	4603      	mov	r3, r0
 800bacc:	461a      	mov	r2, r3
 800bace:	4b3a      	ldr	r3, [pc, #232]	; (800bbb8 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800bad0:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800bad2:	2200      	movs	r2, #0
 800bad4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bad8:	4836      	ldr	r0, [pc, #216]	; (800bbb4 <HAL_TIM_PeriodElapsedCallback+0xc2c>)
 800bada:	f7f6 fc13 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800bade:	e28d      	b.n	800bffc <HAL_TIM_PeriodElapsedCallback+0x1074>

		  case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); 	//FL
 800bae0:	2201      	movs	r2, #1
 800bae2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bae6:	4830      	ldr	r0, [pc, #192]	; (800bba8 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800bae8:	f7f6 fc0c 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800baec:	2300      	movs	r3, #0
 800baee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800baf0:	e002      	b.n	800baf8 <HAL_TIM_PeriodElapsedCallback+0xb70>
 800baf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800baf4:	3301      	adds	r3, #1
 800baf6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800baf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bafa:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d9f7      	bls.n	800baf2 <HAL_TIM_PeriodElapsedCallback+0xb6a>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_2);			//FL
 800bb02:	2102      	movs	r1, #2
 800bb04:	4829      	ldr	r0, [pc, #164]	; (800bbac <HAL_TIM_PeriodElapsedCallback+0xc24>)
 800bb06:	f001 f9b7 	bl	800ce78 <get_adc_value>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	4b2b      	ldr	r3, [pc, #172]	; (800bbbc <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800bb10:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800bb12:	2200      	movs	r2, #0
 800bb14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb18:	4823      	ldr	r0, [pc, #140]	; (800bba8 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800bb1a:	f7f6 fbf3 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   	//FR
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bb24:	4820      	ldr	r0, [pc, #128]	; (800bba8 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800bb26:	f7f6 fbed 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bb2e:	e002      	b.n	800bb36 <HAL_TIM_PeriodElapsedCallback+0xbae>
 800bb30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb32:	3301      	adds	r3, #1
 800bb34:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bb36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb38:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d9f7      	bls.n	800bb30 <HAL_TIM_PeriodElapsedCallback+0xba8>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_0);			//FR
 800bb40:	2100      	movs	r1, #0
 800bb42:	481a      	ldr	r0, [pc, #104]	; (800bbac <HAL_TIM_PeriodElapsedCallback+0xc24>)
 800bb44:	f001 f998 	bl	800ce78 <get_adc_value>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	4b1c      	ldr	r3, [pc, #112]	; (800bbc0 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 800bb4e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800bb50:	2200      	movs	r2, #0
 800bb52:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bb56:	4814      	ldr	r0, [pc, #80]	; (800bba8 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800bb58:	f7f6 fbd4 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800bb5c:	e24e      	b.n	800bffc <HAL_TIM_PeriodElapsedCallback+0x1074>
 800bb5e:	bf00      	nop
 800bb60:	54442d18 	.word	0x54442d18
 800bb64:	400921fb 	.word	0x400921fb
 800bb68:	200002b8 	.word	0x200002b8
 800bb6c:	200001a8 	.word	0x200001a8
 800bb70:	20000458 	.word	0x20000458
 800bb74:	20000afc 	.word	0x20000afc
 800bb78:	43340000 	.word	0x43340000
 800bb7c:	40508000 	.word	0x40508000
 800bb80:	20000c0c 	.word	0x20000c0c
 800bb84:	200001a0 	.word	0x200001a0
 800bb88:	20000af8 	.word	0x20000af8
 800bb8c:	20000b68 	.word	0x20000b68
 800bb90:	20000bb0 	.word	0x20000bb0
 800bb94:	200002bc 	.word	0x200002bc
 800bb98:	20000c18 	.word	0x20000c18
 800bb9c:	20000780 	.word	0x20000780
 800bba0:	200012ac 	.word	0x200012ac
 800bba4:	55555556 	.word	0x55555556
 800bba8:	40020800 	.word	0x40020800
 800bbac:	20000b08 	.word	0x20000b08
 800bbb0:	20000b04 	.word	0x20000b04
 800bbb4:	40020000 	.word	0x40020000
 800bbb8:	20000f70 	.word	0x20000f70
 800bbbc:	20000d64 	.word	0x20000d64
 800bbc0:	20000c10 	.word	0x20000c10

		  case 2:
				//
				if(MF.FLAG.WCTRL){
 800bbc4:	4bc2      	ldr	r3, [pc, #776]	; (800bed0 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 800bbc6:	881b      	ldrh	r3, [r3, #0]
 800bbc8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 81c0 	beq.w	800bf54 <HAL_TIM_PeriodElapsedCallback+0xfcc>
					if(!v_flag){
 800bbd4:	4bbf      	ldr	r3, [pc, #764]	; (800bed4 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f040 80b7 	bne.w	800bd4c <HAL_TIM_PeriodElapsedCallback+0xdc4>
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	857b      	strh	r3, [r7, #42]	; 0x2a
						dif_l = (int32_t) ad_l - base_l;
 800bbe6:	4bbc      	ldr	r3, [pc, #752]	; (800bed8 <HAL_TIM_PeriodElapsedCallback+0xf50>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	b29a      	uxth	r2, r3
 800bbec:	4bbb      	ldr	r3, [pc, #748]	; (800bedc <HAL_TIM_PeriodElapsedCallback+0xf54>)
 800bbee:	881b      	ldrh	r3, [r3, #0]
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	b21a      	sxth	r2, r3
 800bbf6:	4bba      	ldr	r3, [pc, #744]	; (800bee0 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800bbf8:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_r - base_r;
 800bbfa:	4bba      	ldr	r3, [pc, #744]	; (800bee4 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	b29a      	uxth	r2, r3
 800bc00:	4bb9      	ldr	r3, [pc, #740]	; (800bee8 <HAL_TIM_PeriodElapsedCallback+0xf60>)
 800bc02:	881b      	ldrh	r3, [r3, #0]
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	b21a      	sxth	r2, r3
 800bc0a:	4bb8      	ldr	r3, [pc, #736]	; (800beec <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800bc0c:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_L || dif_r > CTRL_BASE_R){
 800bc0e:	4bb4      	ldr	r3, [pc, #720]	; (800bee0 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800bc10:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc14:	2b23      	cmp	r3, #35	; 0x23
 800bc16:	dc04      	bgt.n	800bc22 <HAL_TIM_PeriodElapsedCallback+0xc9a>
 800bc18:	4bb4      	ldr	r3, [pc, #720]	; (800beec <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800bc1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc1e:	2b1e      	cmp	r3, #30
 800bc20:	dd6e      	ble.n	800bd00 <HAL_TIM_PeriodElapsedCallback+0xd78>
							if(dif_l > CTRL_BASE_L){
 800bc22:	4baf      	ldr	r3, [pc, #700]	; (800bee0 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800bc24:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc28:	2b23      	cmp	r3, #35	; 0x23
 800bc2a:	dd30      	ble.n	800bc8e <HAL_TIM_PeriodElapsedCallback+0xd06>
								dwl_tmp += CTRL_CONT_W * dif_l;					//a比例制御値を決定
 800bc2c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800bc30:	ee07 3a90 	vmov	s15, r3
 800bc34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bc38:	4ba9      	ldr	r3, [pc, #676]	; (800bee0 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800bc3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc3e:	ee07 3a90 	vmov	s15, r3
 800bc42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc46:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800bc4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc56:	ee17 3a90 	vmov	r3, s15
 800bc5a:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += -1 * CTRL_CONT_W * dif_l;			//a比例制御値を決定
 800bc5c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800bc60:	ee07 3a90 	vmov	s15, r3
 800bc64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bc68:	4b9d      	ldr	r3, [pc, #628]	; (800bee0 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800bc6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc6e:	ee07 3a90 	vmov	s15, r3
 800bc72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc76:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800bc7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc86:	ee17 3a90 	vmov	r3, s15
 800bc8a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800bc8c:	e034      	b.n	800bcf8 <HAL_TIM_PeriodElapsedCallback+0xd70>
							}
							else if(dif_r > CTRL_BASE_R){
 800bc8e:	4b97      	ldr	r3, [pc, #604]	; (800beec <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800bc90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc94:	2b1e      	cmp	r3, #30
 800bc96:	dd2f      	ble.n	800bcf8 <HAL_TIM_PeriodElapsedCallback+0xd70>
								dwl_tmp += -1 * CTRL_CONT_W * dif_r;				//a比例制御値を決定
 800bc98:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800bc9c:	ee07 3a90 	vmov	s15, r3
 800bca0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bca4:	4b91      	ldr	r3, [pc, #580]	; (800beec <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800bca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcaa:	ee07 3a90 	vmov	s15, r3
 800bcae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcb2:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800bcb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bcba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bcc2:	ee17 3a90 	vmov	r3, s15
 800bcc6:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += CTRL_CONT_W * dif_r;						//a比例制御値を決定
 800bcc8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800bccc:	ee07 3a90 	vmov	s15, r3
 800bcd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bcd4:	4b85      	ldr	r3, [pc, #532]	; (800beec <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800bcd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcda:	ee07 3a90 	vmov	s15, r3
 800bcde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bce2:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800bce6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bcea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bcf2:	ee17 3a90 	vmov	r3, s15
 800bcf6:	857b      	strh	r3, [r7, #42]	; 0x2a
							}
							W_G_flag = 1;
 800bcf8:	4b7d      	ldr	r3, [pc, #500]	; (800bef0 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	701a      	strb	r2, [r3, #0]
 800bcfe:	e002      	b.n	800bd06 <HAL_TIM_PeriodElapsedCallback+0xd7e>
						}else{
							W_G_flag = 0;
 800bd00:	4b7b      	ldr	r3, [pc, #492]	; (800bef0 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800bd02:	2200      	movs	r2, #0
 800bd04:	701a      	strb	r2, [r3, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800bd06:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800bd0a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800bd0e:	dd08      	ble.n	800bd22 <HAL_TIM_PeriodElapsedCallback+0xd9a>
 800bd10:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800bd14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd18:	bfa8      	it	ge
 800bd1a:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800bd1e:	b21b      	sxth	r3, r3
 800bd20:	e000      	b.n	800bd24 <HAL_TIM_PeriodElapsedCallback+0xd9c>
 800bd22:	4b74      	ldr	r3, [pc, #464]	; (800bef4 <HAL_TIM_PeriodElapsedCallback+0xf6c>)
 800bd24:	4a74      	ldr	r2, [pc, #464]	; (800bef8 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 800bd26:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800bd28:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800bd2c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800bd30:	dd08      	ble.n	800bd44 <HAL_TIM_PeriodElapsedCallback+0xdbc>
 800bd32:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800bd36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd3a:	bfa8      	it	ge
 800bd3c:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800bd40:	b21b      	sxth	r3, r3
 800bd42:	e000      	b.n	800bd46 <HAL_TIM_PeriodElapsedCallback+0xdbe>
 800bd44:	4b6b      	ldr	r3, [pc, #428]	; (800bef4 <HAL_TIM_PeriodElapsedCallback+0xf6c>)
 800bd46:	4a6d      	ldr	r2, [pc, #436]	; (800befc <HAL_TIM_PeriodElapsedCallback+0xf74>)
 800bd48:	8013      	strh	r3, [r2, #0]
 800bd4a:	e10a      	b.n	800bf62 <HAL_TIM_PeriodElapsedCallback+0xfda>
					}else{
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	853b      	strh	r3, [r7, #40]	; 0x28
 800bd50:	2300      	movs	r3, #0
 800bd52:	84fb      	strh	r3, [r7, #38]	; 0x26
						dif_l = (int32_t) ad_fl - BASE_FL;
 800bd54:	4b6a      	ldr	r3, [pc, #424]	; (800bf00 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	b21a      	sxth	r2, r3
 800bd62:	4b5f      	ldr	r3, [pc, #380]	; (800bee0 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800bd64:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_fr - BASE_FR;
 800bd66:	4b67      	ldr	r3, [pc, #412]	; (800bf04 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	b21a      	sxth	r2, r3
 800bd74:	4b5d      	ldr	r3, [pc, #372]	; (800beec <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800bd76:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_FL || dif_r > CTRL_BASE_FR){
 800bd78:	4b59      	ldr	r3, [pc, #356]	; (800bee0 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800bd7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd7e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800bd82:	dc05      	bgt.n	800bd90 <HAL_TIM_PeriodElapsedCallback+0xe08>
 800bd84:	4b59      	ldr	r3, [pc, #356]	; (800beec <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800bd86:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd8a:	2bc8      	cmp	r3, #200	; 0xc8
 800bd8c:	f340 80bc 	ble.w	800bf08 <HAL_TIM_PeriodElapsedCallback+0xf80>
							if(dif_l > CTRL_BASE_FL){
 800bd90:	4b53      	ldr	r3, [pc, #332]	; (800bee0 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800bd92:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd96:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800bd9a:	dd40      	ble.n	800be1e <HAL_TIM_PeriodElapsedCallback+0xe96>
								dwl_tmp += CTRL_CONT_W * 0.1 * dif_l;				//a比例制御値を決定
 800bd9c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7f4 fbb7 	bl	8000514 <__aeabi_i2d>
 800bda6:	4604      	mov	r4, r0
 800bda8:	460d      	mov	r5, r1
 800bdaa:	4b4d      	ldr	r3, [pc, #308]	; (800bee0 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800bdac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7f4 fbaf 	bl	8000514 <__aeabi_i2d>
 800bdb6:	a33e      	add	r3, pc, #248	; (adr r3, 800beb0 <HAL_TIM_PeriodElapsedCallback+0xf28>)
 800bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbc:	f7f4 fc14 	bl	80005e8 <__aeabi_dmul>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	f7f4 fa58 	bl	800027c <__adddf3>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	460c      	mov	r4, r1
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	4621      	mov	r1, r4
 800bdd4:	f7f4 feb8 	bl	8000b48 <__aeabi_d2iz>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += -1 * CTRL_CONT_W * 0.1 * dif_l;			//a比例制御値を決定
 800bddc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7f4 fb97 	bl	8000514 <__aeabi_i2d>
 800bde6:	4604      	mov	r4, r0
 800bde8:	460d      	mov	r5, r1
 800bdea:	4b3d      	ldr	r3, [pc, #244]	; (800bee0 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800bdec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7f4 fb8f 	bl	8000514 <__aeabi_i2d>
 800bdf6:	a330      	add	r3, pc, #192	; (adr r3, 800beb8 <HAL_TIM_PeriodElapsedCallback+0xf30>)
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	f7f4 fbf4 	bl	80005e8 <__aeabi_dmul>
 800be00:	4602      	mov	r2, r0
 800be02:	460b      	mov	r3, r1
 800be04:	4620      	mov	r0, r4
 800be06:	4629      	mov	r1, r5
 800be08:	f7f4 fa38 	bl	800027c <__adddf3>
 800be0c:	4603      	mov	r3, r0
 800be0e:	460c      	mov	r4, r1
 800be10:	4618      	mov	r0, r3
 800be12:	4621      	mov	r1, r4
 800be14:	f7f4 fe98 	bl	8000b48 <__aeabi_d2iz>
 800be18:	4603      	mov	r3, r0
 800be1a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800be1c:	e044      	b.n	800bea8 <HAL_TIM_PeriodElapsedCallback+0xf20>
							}
							else if(dif_r > CTRL_BASE_FR){
 800be1e:	4b33      	ldr	r3, [pc, #204]	; (800beec <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800be20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be24:	2bc8      	cmp	r3, #200	; 0xc8
 800be26:	dd3f      	ble.n	800bea8 <HAL_TIM_PeriodElapsedCallback+0xf20>
								dwl_tmp += -1 * CTRL_CONT_W * 0.2 * dif_r;			//a比例制御値を決定
 800be28:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7f4 fb71 	bl	8000514 <__aeabi_i2d>
 800be32:	4604      	mov	r4, r0
 800be34:	460d      	mov	r5, r1
 800be36:	4b2d      	ldr	r3, [pc, #180]	; (800beec <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800be38:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7f4 fb69 	bl	8000514 <__aeabi_i2d>
 800be42:	a31f      	add	r3, pc, #124	; (adr r3, 800bec0 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 800be44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be48:	f7f4 fbce 	bl	80005e8 <__aeabi_dmul>
 800be4c:	4602      	mov	r2, r0
 800be4e:	460b      	mov	r3, r1
 800be50:	4620      	mov	r0, r4
 800be52:	4629      	mov	r1, r5
 800be54:	f7f4 fa12 	bl	800027c <__adddf3>
 800be58:	4603      	mov	r3, r0
 800be5a:	460c      	mov	r4, r1
 800be5c:	4618      	mov	r0, r3
 800be5e:	4621      	mov	r1, r4
 800be60:	f7f4 fe72 	bl	8000b48 <__aeabi_d2iz>
 800be64:	4603      	mov	r3, r0
 800be66:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += CTRL_CONT_W * 0.2 * dif_r;				//a比例制御値を決定
 800be68:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7f4 fb51 	bl	8000514 <__aeabi_i2d>
 800be72:	4604      	mov	r4, r0
 800be74:	460d      	mov	r5, r1
 800be76:	4b1d      	ldr	r3, [pc, #116]	; (800beec <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800be78:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7f4 fb49 	bl	8000514 <__aeabi_i2d>
 800be82:	a311      	add	r3, pc, #68	; (adr r3, 800bec8 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 800be84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be88:	f7f4 fbae 	bl	80005e8 <__aeabi_dmul>
 800be8c:	4602      	mov	r2, r0
 800be8e:	460b      	mov	r3, r1
 800be90:	4620      	mov	r0, r4
 800be92:	4629      	mov	r1, r5
 800be94:	f7f4 f9f2 	bl	800027c <__adddf3>
 800be98:	4603      	mov	r3, r0
 800be9a:	460c      	mov	r4, r1
 800be9c:	4618      	mov	r0, r3
 800be9e:	4621      	mov	r1, r4
 800bea0:	f7f4 fe52 	bl	8000b48 <__aeabi_d2iz>
 800bea4:	4603      	mov	r3, r0
 800bea6:	84fb      	strh	r3, [r7, #38]	; 0x26
							}
							W_G_flag = 1;
 800bea8:	4b11      	ldr	r3, [pc, #68]	; (800bef0 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800beaa:	2201      	movs	r2, #1
 800beac:	701a      	strb	r2, [r3, #0]
 800beae:	e02e      	b.n	800bf0e <HAL_TIM_PeriodElapsedCallback+0xf86>
 800beb0:	33333334 	.word	0x33333334
 800beb4:	3fb33333 	.word	0x3fb33333
 800beb8:	33333334 	.word	0x33333334
 800bebc:	bfb33333 	.word	0xbfb33333
 800bec0:	33333334 	.word	0x33333334
 800bec4:	bfc33333 	.word	0xbfc33333
 800bec8:	33333334 	.word	0x33333334
 800becc:	3fc33333 	.word	0x3fc33333
 800bed0:	20000f74 	.word	0x20000f74
 800bed4:	20000af0 	.word	0x20000af0
 800bed8:	20000b04 	.word	0x20000b04
 800bedc:	2000034c 	.word	0x2000034c
 800bee0:	20000b58 	.word	0x20000b58
 800bee4:	20000f70 	.word	0x20000f70
 800bee8:	200002c0 	.word	0x200002c0
 800beec:	20000bba 	.word	0x20000bba
 800bef0:	20000c04 	.word	0x20000c04
 800bef4:	fffffc18 	.word	0xfffffc18
 800bef8:	20000b00 	.word	0x20000b00
 800befc:	20000f80 	.word	0x20000f80
 800bf00:	20000d64 	.word	0x20000d64
 800bf04:	20000c10 	.word	0x20000c10
						}else{
							W_G_flag = 0;
 800bf08:	4ba7      	ldr	r3, [pc, #668]	; (800c1a8 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	701a      	strb	r2, [r3, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800bf0e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800bf12:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800bf16:	dd08      	ble.n	800bf2a <HAL_TIM_PeriodElapsedCallback+0xfa2>
 800bf18:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800bf1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf20:	bfa8      	it	ge
 800bf22:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800bf26:	b21b      	sxth	r3, r3
 800bf28:	e000      	b.n	800bf2c <HAL_TIM_PeriodElapsedCallback+0xfa4>
 800bf2a:	4ba0      	ldr	r3, [pc, #640]	; (800c1ac <HAL_TIM_PeriodElapsedCallback+0x1224>)
 800bf2c:	4aa0      	ldr	r2, [pc, #640]	; (800c1b0 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 800bf2e:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800bf30:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bf34:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800bf38:	dd08      	ble.n	800bf4c <HAL_TIM_PeriodElapsedCallback+0xfc4>
 800bf3a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bf3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf42:	bfa8      	it	ge
 800bf44:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800bf48:	b21b      	sxth	r3, r3
 800bf4a:	e000      	b.n	800bf4e <HAL_TIM_PeriodElapsedCallback+0xfc6>
 800bf4c:	4b97      	ldr	r3, [pc, #604]	; (800c1ac <HAL_TIM_PeriodElapsedCallback+0x1224>)
 800bf4e:	4a99      	ldr	r2, [pc, #612]	; (800c1b4 <HAL_TIM_PeriodElapsedCallback+0x122c>)
 800bf50:	8013      	strh	r3, [r2, #0]
 800bf52:	e006      	b.n	800bf62 <HAL_TIM_PeriodElapsedCallback+0xfda>
					}
				}else{
					//a制御フラグがなければ壁制御値0
					dwl = dwr = 0;
 800bf54:	2100      	movs	r1, #0
 800bf56:	4b97      	ldr	r3, [pc, #604]	; (800c1b4 <HAL_TIM_PeriodElapsedCallback+0x122c>)
 800bf58:	460a      	mov	r2, r1
 800bf5a:	801a      	strh	r2, [r3, #0]
 800bf5c:	4b94      	ldr	r3, [pc, #592]	; (800c1b0 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 800bf5e:	460a      	mov	r2, r1
 800bf60:	801a      	strh	r2, [r3, #0]
				}

				if(MF.FLAG.GCTRL){
 800bf62:	4b95      	ldr	r3, [pc, #596]	; (800c1b8 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 800bf64:	881b      	ldrh	r3, [r3, #0]
 800bf66:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d03d      	beq.n	800bfec <HAL_TIM_PeriodElapsedCallback+0x1064>
				}

					dg = CTRL_CONT_G * gyro_read_z();			//a角速度制御
					dg = CTRL_CONT_G * degree_z;				//a角度制御
*/
					dg = CTRL_CONT_G * (target_degree_z - degree_z);		//a角度制御(目標角度はスタートを0度とし、旋回量と対応付け)
 800bf70:	4b92      	ldr	r3, [pc, #584]	; (800c1bc <HAL_TIM_PeriodElapsedCallback+0x1234>)
 800bf72:	ed93 7a00 	vldr	s14, [r3]
 800bf76:	4b92      	ldr	r3, [pc, #584]	; (800c1c0 <HAL_TIM_PeriodElapsedCallback+0x1238>)
 800bf78:	edd3 7a00 	vldr	s15, [r3]
 800bf7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf80:	ed9f 7a90 	vldr	s14, [pc, #576]	; 800c1c4 <HAL_TIM_PeriodElapsedCallback+0x123c>
 800bf84:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bf88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf8c:	ee17 3a90 	vmov	r3, s15
 800bf90:	b21a      	sxth	r2, r3
 800bf92:	4b8d      	ldr	r3, [pc, #564]	; (800c1c8 <HAL_TIM_PeriodElapsedCallback+0x1240>)
 800bf94:	801a      	strh	r2, [r3, #0]

					dg = max(min(CTRL_MAX_G, dg), -1 * CTRL_MAX_G);
 800bf96:	4b8c      	ldr	r3, [pc, #560]	; (800c1c8 <HAL_TIM_PeriodElapsedCallback+0x1240>)
 800bf98:	881b      	ldrh	r3, [r3, #0]
 800bf9a:	b21b      	sxth	r3, r3
 800bf9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bfa0:	da05      	bge.n	800bfae <HAL_TIM_PeriodElapsedCallback+0x1026>
 800bfa2:	4b89      	ldr	r3, [pc, #548]	; (800c1c8 <HAL_TIM_PeriodElapsedCallback+0x1240>)
 800bfa4:	881b      	ldrh	r3, [r3, #0]
 800bfa6:	b21b      	sxth	r3, r3
 800bfa8:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800bfac:	dd0c      	ble.n	800bfc8 <HAL_TIM_PeriodElapsedCallback+0x1040>
 800bfae:	4b86      	ldr	r3, [pc, #536]	; (800c1c8 <HAL_TIM_PeriodElapsedCallback+0x1240>)
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	b21b      	sxth	r3, r3
 800bfb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bfb8:	da03      	bge.n	800bfc2 <HAL_TIM_PeriodElapsedCallback+0x103a>
 800bfba:	4b83      	ldr	r3, [pc, #524]	; (800c1c8 <HAL_TIM_PeriodElapsedCallback+0x1240>)
 800bfbc:	881b      	ldrh	r3, [r3, #0]
 800bfbe:	b21b      	sxth	r3, r3
 800bfc0:	e003      	b.n	800bfca <HAL_TIM_PeriodElapsedCallback+0x1042>
 800bfc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bfc6:	e000      	b.n	800bfca <HAL_TIM_PeriodElapsedCallback+0x1042>
 800bfc8:	4b78      	ldr	r3, [pc, #480]	; (800c1ac <HAL_TIM_PeriodElapsedCallback+0x1224>)
 800bfca:	4a7f      	ldr	r2, [pc, #508]	; (800c1c8 <HAL_TIM_PeriodElapsedCallback+0x1240>)
 800bfcc:	8013      	strh	r3, [r2, #0]
					dgl = -1*dg;
 800bfce:	4b7e      	ldr	r3, [pc, #504]	; (800c1c8 <HAL_TIM_PeriodElapsedCallback+0x1240>)
 800bfd0:	881b      	ldrh	r3, [r3, #0]
 800bfd2:	b21b      	sxth	r3, r3
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	425b      	negs	r3, r3
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	b21a      	sxth	r2, r3
 800bfdc:	4b7b      	ldr	r3, [pc, #492]	; (800c1cc <HAL_TIM_PeriodElapsedCallback+0x1244>)
 800bfde:	801a      	strh	r2, [r3, #0]
					dgr = dg;
 800bfe0:	4b79      	ldr	r3, [pc, #484]	; (800c1c8 <HAL_TIM_PeriodElapsedCallback+0x1240>)
 800bfe2:	881b      	ldrh	r3, [r3, #0]
 800bfe4:	b21a      	sxth	r2, r3
 800bfe6:	4b7a      	ldr	r3, [pc, #488]	; (800c1d0 <HAL_TIM_PeriodElapsedCallback+0x1248>)
 800bfe8:	801a      	strh	r2, [r3, #0]
				}else{
					//a制御フラグがなければ壁制御値0
					dgl = dgr = 0;
				}
				break;
 800bfea:	e006      	b.n	800bffa <HAL_TIM_PeriodElapsedCallback+0x1072>
					dgl = dgr = 0;
 800bfec:	2100      	movs	r1, #0
 800bfee:	4b78      	ldr	r3, [pc, #480]	; (800c1d0 <HAL_TIM_PeriodElapsedCallback+0x1248>)
 800bff0:	460a      	mov	r2, r1
 800bff2:	801a      	strh	r2, [r3, #0]
 800bff4:	4b75      	ldr	r3, [pc, #468]	; (800c1cc <HAL_TIM_PeriodElapsedCallback+0x1244>)
 800bff6:	460a      	mov	r2, r1
 800bff8:	801a      	strh	r2, [r3, #0]
				break;
 800bffa:	bf00      	nop
		}


		if(MF.FLAG.DRV){
 800bffc:	4b6e      	ldr	r3, [pc, #440]	; (800c1b8 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 800bffe:	881b      	ldrh	r3, [r3, #0]
 800c000:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c004:	b2db      	uxtb	r3, r3
 800c006:	2b00      	cmp	r3, #0
 800c008:	f000 8186 	beq.w	800c318 <HAL_TIM_PeriodElapsedCallback+0x1390>
			if(!W_G_flag){
 800c00c:	4b66      	ldr	r3, [pc, #408]	; (800c1a8 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d11e      	bne.n	800c052 <HAL_TIM_PeriodElapsedCallback+0x10ca>
//				pulse_l = pulse_l + dgl + dwl;
//				pulse_r = pulse_r + dgr + dwr;
				pulse_l = pulse_l + dgl;
 800c014:	4b6d      	ldr	r3, [pc, #436]	; (800c1cc <HAL_TIM_PeriodElapsedCallback+0x1244>)
 800c016:	881b      	ldrh	r3, [r3, #0]
 800c018:	b21b      	sxth	r3, r3
 800c01a:	ee07 3a90 	vmov	s15, r3
 800c01e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c022:	4b6c      	ldr	r3, [pc, #432]	; (800c1d4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800c024:	edd3 7a00 	vldr	s15, [r3]
 800c028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c02c:	4b69      	ldr	r3, [pc, #420]	; (800c1d4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800c02e:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr;
 800c032:	4b67      	ldr	r3, [pc, #412]	; (800c1d0 <HAL_TIM_PeriodElapsedCallback+0x1248>)
 800c034:	881b      	ldrh	r3, [r3, #0]
 800c036:	b21b      	sxth	r3, r3
 800c038:	ee07 3a90 	vmov	s15, r3
 800c03c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c040:	4b65      	ldr	r3, [pc, #404]	; (800c1d8 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 800c042:	edd3 7a00 	vldr	s15, [r3]
 800c046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c04a:	4b63      	ldr	r3, [pc, #396]	; (800c1d8 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 800c04c:	edc3 7a00 	vstr	s15, [r3]
 800c050:	e01d      	b.n	800c08e <HAL_TIM_PeriodElapsedCallback+0x1106>
			}else{
				pulse_l = pulse_l + dwl;
 800c052:	4b57      	ldr	r3, [pc, #348]	; (800c1b0 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 800c054:	881b      	ldrh	r3, [r3, #0]
 800c056:	b21b      	sxth	r3, r3
 800c058:	ee07 3a90 	vmov	s15, r3
 800c05c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c060:	4b5c      	ldr	r3, [pc, #368]	; (800c1d4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800c062:	edd3 7a00 	vldr	s15, [r3]
 800c066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c06a:	4b5a      	ldr	r3, [pc, #360]	; (800c1d4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800c06c:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dwr;
 800c070:	4b50      	ldr	r3, [pc, #320]	; (800c1b4 <HAL_TIM_PeriodElapsedCallback+0x122c>)
 800c072:	881b      	ldrh	r3, [r3, #0]
 800c074:	b21b      	sxth	r3, r3
 800c076:	ee07 3a90 	vmov	s15, r3
 800c07a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c07e:	4b56      	ldr	r3, [pc, #344]	; (800c1d8 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 800c080:	edd3 7a00 	vldr	s15, [r3]
 800c084:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c088:	4b53      	ldr	r3, [pc, #332]	; (800c1d8 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 800c08a:	edc3 7a00 	vstr	s15, [r3]
			}
			pulse_l = min(max(pulse_l, -1000), 1000);
 800c08e:	4b51      	ldr	r3, [pc, #324]	; (800c1d4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800c090:	edd3 7a00 	vldr	s15, [r3]
 800c094:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800c1dc <HAL_TIM_PeriodElapsedCallback+0x1254>
 800c098:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a0:	bfcc      	ite	gt
 800c0a2:	2301      	movgt	r3, #1
 800c0a4:	2300      	movle	r3, #0
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	f083 0301 	eor.w	r3, r3, #1
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d111      	bne.n	800c0d6 <HAL_TIM_PeriodElapsedCallback+0x114e>
 800c0b2:	4b48      	ldr	r3, [pc, #288]	; (800c1d4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800c0b4:	edd3 7a00 	vldr	s15, [r3]
 800c0b8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c1e0 <HAL_TIM_PeriodElapsedCallback+0x1258>
 800c0bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0c4:	bfcc      	ite	gt
 800c0c6:	2301      	movgt	r3, #1
 800c0c8:	2300      	movle	r3, #0
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	f083 0301 	eor.w	r3, r3, #1
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d00e      	beq.n	800c0f4 <HAL_TIM_PeriodElapsedCallback+0x116c>
 800c0d6:	4b3f      	ldr	r3, [pc, #252]	; (800c1d4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800c0d8:	edd3 7a00 	vldr	s15, [r3]
 800c0dc:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800c1dc <HAL_TIM_PeriodElapsedCallback+0x1254>
 800c0e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0e8:	dd02      	ble.n	800c0f0 <HAL_TIM_PeriodElapsedCallback+0x1168>
 800c0ea:	4b3a      	ldr	r3, [pc, #232]	; (800c1d4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	e002      	b.n	800c0f6 <HAL_TIM_PeriodElapsedCallback+0x116e>
 800c0f0:	4b3c      	ldr	r3, [pc, #240]	; (800c1e4 <HAL_TIM_PeriodElapsedCallback+0x125c>)
 800c0f2:	e000      	b.n	800c0f6 <HAL_TIM_PeriodElapsedCallback+0x116e>
 800c0f4:	4b3c      	ldr	r3, [pc, #240]	; (800c1e8 <HAL_TIM_PeriodElapsedCallback+0x1260>)
 800c0f6:	4a37      	ldr	r2, [pc, #220]	; (800c1d4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800c0f8:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -1000), 1000);
 800c0fa:	4b37      	ldr	r3, [pc, #220]	; (800c1d8 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 800c0fc:	edd3 7a00 	vldr	s15, [r3]
 800c100:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c1dc <HAL_TIM_PeriodElapsedCallback+0x1254>
 800c104:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c10c:	bfcc      	ite	gt
 800c10e:	2301      	movgt	r3, #1
 800c110:	2300      	movle	r3, #0
 800c112:	b2db      	uxtb	r3, r3
 800c114:	f083 0301 	eor.w	r3, r3, #1
 800c118:	b2db      	uxtb	r3, r3
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d111      	bne.n	800c142 <HAL_TIM_PeriodElapsedCallback+0x11ba>
 800c11e:	4b2e      	ldr	r3, [pc, #184]	; (800c1d8 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 800c120:	edd3 7a00 	vldr	s15, [r3]
 800c124:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800c1e0 <HAL_TIM_PeriodElapsedCallback+0x1258>
 800c128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c130:	bfcc      	ite	gt
 800c132:	2301      	movgt	r3, #1
 800c134:	2300      	movle	r3, #0
 800c136:	b2db      	uxtb	r3, r3
 800c138:	f083 0301 	eor.w	r3, r3, #1
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00e      	beq.n	800c160 <HAL_TIM_PeriodElapsedCallback+0x11d8>
 800c142:	4b25      	ldr	r3, [pc, #148]	; (800c1d8 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 800c144:	edd3 7a00 	vldr	s15, [r3]
 800c148:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800c1dc <HAL_TIM_PeriodElapsedCallback+0x1254>
 800c14c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c154:	dd02      	ble.n	800c15c <HAL_TIM_PeriodElapsedCallback+0x11d4>
 800c156:	4b20      	ldr	r3, [pc, #128]	; (800c1d8 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	e002      	b.n	800c162 <HAL_TIM_PeriodElapsedCallback+0x11da>
 800c15c:	4b21      	ldr	r3, [pc, #132]	; (800c1e4 <HAL_TIM_PeriodElapsedCallback+0x125c>)
 800c15e:	e000      	b.n	800c162 <HAL_TIM_PeriodElapsedCallback+0x11da>
 800c160:	4b21      	ldr	r3, [pc, #132]	; (800c1e8 <HAL_TIM_PeriodElapsedCallback+0x1260>)
 800c162:	4a1d      	ldr	r2, [pc, #116]	; (800c1d8 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 800c164:	6013      	str	r3, [r2, #0]

			if(pulse_l > 0){
 800c166:	4b1b      	ldr	r3, [pc, #108]	; (800c1d4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800c168:	edd3 7a00 	vldr	s15, [r3]
 800c16c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c174:	dd3c      	ble.n	800c1f0 <HAL_TIM_PeriodElapsedCallback+0x1268>
				drive_dir(0, 0);
 800c176:	2100      	movs	r1, #0
 800c178:	2000      	movs	r0, #0
 800c17a:	f7f8 fe23 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = pulse_l;
 800c17e:	4b15      	ldr	r3, [pc, #84]	; (800c1d4 <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800c180:	edd3 7a00 	vldr	s15, [r3]
 800c184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c188:	ee17 3a90 	vmov	r3, s15
 800c18c:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800c18e:	f107 0308 	add.w	r3, r7, #8
 800c192:	2200      	movs	r2, #0
 800c194:	4619      	mov	r1, r3
 800c196:	4815      	ldr	r0, [pc, #84]	; (800c1ec <HAL_TIM_PeriodElapsedCallback+0x1264>)
 800c198:	f7f7 fd18 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800c19c:	2100      	movs	r1, #0
 800c19e:	4813      	ldr	r0, [pc, #76]	; (800c1ec <HAL_TIM_PeriodElapsedCallback+0x1264>)
 800c1a0:	f7f7 faac 	bl	80036fc <HAL_TIM_PWM_Start>
 800c1a4:	e045      	b.n	800c232 <HAL_TIM_PeriodElapsedCallback+0x12aa>
 800c1a6:	bf00      	nop
 800c1a8:	20000c04 	.word	0x20000c04
 800c1ac:	fffffc18 	.word	0xfffffc18
 800c1b0:	20000b00 	.word	0x20000b00
 800c1b4:	20000f80 	.word	0x20000f80
 800c1b8:	20000f74 	.word	0x20000f74
 800c1bc:	20000c08 	.word	0x20000c08
 800c1c0:	20000b64 	.word	0x20000b64
 800c1c4:	42200000 	.word	0x42200000
 800c1c8:	20000c20 	.word	0x20000c20
 800c1cc:	2000019c 	.word	0x2000019c
 800c1d0:	20000b56 	.word	0x20000b56
 800c1d4:	20000bb0 	.word	0x20000bb0
 800c1d8:	20000780 	.word	0x20000780
 800c1dc:	c47a0000 	.word	0xc47a0000
 800c1e0:	447a0000 	.word	0x447a0000
 800c1e4:	c47a0000 	.word	0xc47a0000
 800c1e8:	447a0000 	.word	0x447a0000
 800c1ec:	20000c24 	.word	0x20000c24
			}
			else if(pulse_l < 0){
 800c1f0:	4b89      	ldr	r3, [pc, #548]	; (800c418 <HAL_TIM_PeriodElapsedCallback+0x1490>)
 800c1f2:	edd3 7a00 	vldr	s15, [r3]
 800c1f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1fe:	d518      	bpl.n	800c232 <HAL_TIM_PeriodElapsedCallback+0x12aa>
				drive_dir(0, 1);
 800c200:	2101      	movs	r1, #1
 800c202:	2000      	movs	r0, #0
 800c204:	f7f8 fdde 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 800c208:	4b83      	ldr	r3, [pc, #524]	; (800c418 <HAL_TIM_PeriodElapsedCallback+0x1490>)
 800c20a:	edd3 7a00 	vldr	s15, [r3]
 800c20e:	eef1 7a67 	vneg.f32	s15, s15
 800c212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c216:	ee17 3a90 	vmov	r3, s15
 800c21a:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800c21c:	f107 0308 	add.w	r3, r7, #8
 800c220:	2200      	movs	r2, #0
 800c222:	4619      	mov	r1, r3
 800c224:	487d      	ldr	r0, [pc, #500]	; (800c41c <HAL_TIM_PeriodElapsedCallback+0x1494>)
 800c226:	f7f7 fcd1 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800c22a:	2100      	movs	r1, #0
 800c22c:	487b      	ldr	r0, [pc, #492]	; (800c41c <HAL_TIM_PeriodElapsedCallback+0x1494>)
 800c22e:	f7f7 fa65 	bl	80036fc <HAL_TIM_PWM_Start>
			}

			if(pulse_r > 0){
 800c232:	4b7b      	ldr	r3, [pc, #492]	; (800c420 <HAL_TIM_PeriodElapsedCallback+0x1498>)
 800c234:	edd3 7a00 	vldr	s15, [r3]
 800c238:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c240:	dd17      	ble.n	800c272 <HAL_TIM_PeriodElapsedCallback+0x12ea>
				drive_dir(1, 0);
 800c242:	2100      	movs	r1, #0
 800c244:	2001      	movs	r0, #1
 800c246:	f7f8 fdbd 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = pulse_r;
 800c24a:	4b75      	ldr	r3, [pc, #468]	; (800c420 <HAL_TIM_PeriodElapsedCallback+0x1498>)
 800c24c:	edd3 7a00 	vldr	s15, [r3]
 800c250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c254:	ee17 3a90 	vmov	r3, s15
 800c258:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800c25a:	f107 0308 	add.w	r3, r7, #8
 800c25e:	220c      	movs	r2, #12
 800c260:	4619      	mov	r1, r3
 800c262:	486e      	ldr	r0, [pc, #440]	; (800c41c <HAL_TIM_PeriodElapsedCallback+0x1494>)
 800c264:	f7f7 fcb2 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800c268:	210c      	movs	r1, #12
 800c26a:	486c      	ldr	r0, [pc, #432]	; (800c41c <HAL_TIM_PeriodElapsedCallback+0x1494>)
 800c26c:	f7f7 fa46 	bl	80036fc <HAL_TIM_PWM_Start>
 800c270:	e020      	b.n	800c2b4 <HAL_TIM_PeriodElapsedCallback+0x132c>
			}
			else if(pulse_r < 0){
 800c272:	4b6b      	ldr	r3, [pc, #428]	; (800c420 <HAL_TIM_PeriodElapsedCallback+0x1498>)
 800c274:	edd3 7a00 	vldr	s15, [r3]
 800c278:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c280:	d518      	bpl.n	800c2b4 <HAL_TIM_PeriodElapsedCallback+0x132c>
				drive_dir(1, 1);
 800c282:	2101      	movs	r1, #1
 800c284:	2001      	movs	r0, #1
 800c286:	f7f8 fd9d 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 800c28a:	4b65      	ldr	r3, [pc, #404]	; (800c420 <HAL_TIM_PeriodElapsedCallback+0x1498>)
 800c28c:	edd3 7a00 	vldr	s15, [r3]
 800c290:	eef1 7a67 	vneg.f32	s15, s15
 800c294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c298:	ee17 3a90 	vmov	r3, s15
 800c29c:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800c29e:	f107 0308 	add.w	r3, r7, #8
 800c2a2:	220c      	movs	r2, #12
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	485d      	ldr	r0, [pc, #372]	; (800c41c <HAL_TIM_PeriodElapsedCallback+0x1494>)
 800c2a8:	f7f7 fc90 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800c2ac:	210c      	movs	r1, #12
 800c2ae:	485b      	ldr	r0, [pc, #364]	; (800c41c <HAL_TIM_PeriodElapsedCallback+0x1494>)
 800c2b0:	f7f7 fa24 	bl	80036fc <HAL_TIM_PWM_Start>
			}
			//wall check
//			if(!MF.FLAG.SCND){
				//----look forward----
				if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 800c2b4:	4b5b      	ldr	r3, [pc, #364]	; (800c424 <HAL_TIM_PeriodElapsedCallback+0x149c>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2b5a      	cmp	r3, #90	; 0x5a
 800c2ba:	d803      	bhi.n	800c2c4 <HAL_TIM_PeriodElapsedCallback+0x133c>
 800c2bc:	4b5a      	ldr	r3, [pc, #360]	; (800c428 <HAL_TIM_PeriodElapsedCallback+0x14a0>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2bc8      	cmp	r3, #200	; 0xc8
 800c2c2:	d905      	bls.n	800c2d0 <HAL_TIM_PeriodElapsedCallback+0x1348>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	2140      	movs	r1, #64	; 0x40
 800c2c8:	4858      	ldr	r0, [pc, #352]	; (800c42c <HAL_TIM_PeriodElapsedCallback+0x14a4>)
 800c2ca:	f7f6 f81b 	bl	8002304 <HAL_GPIO_WritePin>
 800c2ce:	e004      	b.n	800c2da <HAL_TIM_PeriodElapsedCallback+0x1352>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	2140      	movs	r1, #64	; 0x40
 800c2d4:	4855      	ldr	r0, [pc, #340]	; (800c42c <HAL_TIM_PeriodElapsedCallback+0x14a4>)
 800c2d6:	f7f6 f815 	bl	8002304 <HAL_GPIO_WritePin>
				}
				//----look forwardL----
				if(ad_fl > WALL_BASE_FL){
 800c2da:	4b53      	ldr	r3, [pc, #332]	; (800c428 <HAL_TIM_PeriodElapsedCallback+0x14a0>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	2bc8      	cmp	r3, #200	; 0xc8
 800c2e0:	d905      	bls.n	800c2ee <HAL_TIM_PeriodElapsedCallback+0x1366>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	2110      	movs	r1, #16
 800c2e6:	4851      	ldr	r0, [pc, #324]	; (800c42c <HAL_TIM_PeriodElapsedCallback+0x14a4>)
 800c2e8:	f7f6 f80c 	bl	8002304 <HAL_GPIO_WritePin>
 800c2ec:	e004      	b.n	800c2f8 <HAL_TIM_PeriodElapsedCallback+0x1370>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	2110      	movs	r1, #16
 800c2f2:	484e      	ldr	r0, [pc, #312]	; (800c42c <HAL_TIM_PeriodElapsedCallback+0x14a4>)
 800c2f4:	f7f6 f806 	bl	8002304 <HAL_GPIO_WritePin>
				}
				//----look forward-R---
				if(ad_fr > WALL_BASE_FR){
 800c2f8:	4b4a      	ldr	r3, [pc, #296]	; (800c424 <HAL_TIM_PeriodElapsedCallback+0x149c>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2b5a      	cmp	r3, #90	; 0x5a
 800c2fe:	d905      	bls.n	800c30c <HAL_TIM_PeriodElapsedCallback+0x1384>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800c300:	2201      	movs	r2, #1
 800c302:	2180      	movs	r1, #128	; 0x80
 800c304:	4849      	ldr	r0, [pc, #292]	; (800c42c <HAL_TIM_PeriodElapsedCallback+0x14a4>)
 800c306:	f7f5 fffd 	bl	8002304 <HAL_GPIO_WritePin>
 800c30a:	e00d      	b.n	800c328 <HAL_TIM_PeriodElapsedCallback+0x13a0>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800c30c:	2200      	movs	r2, #0
 800c30e:	2180      	movs	r1, #128	; 0x80
 800c310:	4846      	ldr	r0, [pc, #280]	; (800c42c <HAL_TIM_PeriodElapsedCallback+0x14a4>)
 800c312:	f7f5 fff7 	bl	8002304 <HAL_GPIO_WritePin>
 800c316:	e007      	b.n	800c328 <HAL_TIM_PeriodElapsedCallback+0x13a0>
				}
		}else{
			drive_dir(0, 2);
 800c318:	2102      	movs	r1, #2
 800c31a:	2000      	movs	r0, #0
 800c31c:	f7f8 fd52 	bl	8004dc4 <drive_dir>
			drive_dir(1, 2);
 800c320:	2102      	movs	r1, #2
 800c322:	2001      	movs	r0, #1
 800c324:	f7f8 fd4e 	bl	8004dc4 <drive_dir>
		}


		//wall check
		//----look right----
		if(ad_r > WALL_BASE_R){
 800c328:	4b41      	ldr	r3, [pc, #260]	; (800c430 <HAL_TIM_PeriodElapsedCallback+0x14a8>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	2b78      	cmp	r3, #120	; 0x78
 800c32e:	d906      	bls.n	800c33e <HAL_TIM_PeriodElapsedCallback+0x13b6>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800c330:	2201      	movs	r2, #1
 800c332:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c336:	483f      	ldr	r0, [pc, #252]	; (800c434 <HAL_TIM_PeriodElapsedCallback+0x14ac>)
 800c338:	f7f5 ffe4 	bl	8002304 <HAL_GPIO_WritePin>
 800c33c:	e005      	b.n	800c34a <HAL_TIM_PeriodElapsedCallback+0x13c2>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800c33e:	2200      	movs	r2, #0
 800c340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c344:	483b      	ldr	r0, [pc, #236]	; (800c434 <HAL_TIM_PeriodElapsedCallback+0x14ac>)
 800c346:	f7f5 ffdd 	bl	8002304 <HAL_GPIO_WritePin>
		}
		//----look left----
		if(ad_l > WALL_BASE_L){
 800c34a:	4b3b      	ldr	r3, [pc, #236]	; (800c438 <HAL_TIM_PeriodElapsedCallback+0x14b0>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2b8c      	cmp	r3, #140	; 0x8c
 800c350:	d905      	bls.n	800c35e <HAL_TIM_PeriodElapsedCallback+0x13d6>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800c352:	2201      	movs	r2, #1
 800c354:	2104      	movs	r1, #4
 800c356:	4839      	ldr	r0, [pc, #228]	; (800c43c <HAL_TIM_PeriodElapsedCallback+0x14b4>)
 800c358:	f7f5 ffd4 	bl	8002304 <HAL_GPIO_WritePin>
 800c35c:	e004      	b.n	800c368 <HAL_TIM_PeriodElapsedCallback+0x13e0>
		}else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800c35e:	2200      	movs	r2, #0
 800c360:	2104      	movs	r1, #4
 800c362:	4836      	ldr	r0, [pc, #216]	; (800c43c <HAL_TIM_PeriodElapsedCallback+0x14b4>)
 800c364:	f7f5 ffce 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//battery check
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {	//2.1V以下で赤ランプ点灯=>LiPoが約7Vを下回るとランプ点灯
 800c368:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c36c:	4831      	ldr	r0, [pc, #196]	; (800c434 <HAL_TIM_PeriodElapsedCallback+0x14ac>)
 800c36e:	f7f5 ffb1 	bl	80022d4 <HAL_GPIO_ReadPin>
 800c372:	4603      	mov	r3, r0
 800c374:	2b00      	cmp	r3, #0
 800c376:	d105      	bne.n	800c384 <HAL_TIM_PeriodElapsedCallback+0x13fc>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800c378:	2201      	movs	r2, #1
 800c37a:	2108      	movs	r1, #8
 800c37c:	482f      	ldr	r0, [pc, #188]	; (800c43c <HAL_TIM_PeriodElapsedCallback+0x14b4>)
 800c37e:	f7f5 ffc1 	bl	8002304 <HAL_GPIO_WritePin>
 800c382:	e004      	b.n	800c38e <HAL_TIM_PeriodElapsedCallback+0x1406>
		} else {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800c384:	2200      	movs	r2, #0
 800c386:	2108      	movs	r1, #8
 800c388:	482c      	ldr	r0, [pc, #176]	; (800c43c <HAL_TIM_PeriodElapsedCallback+0x14b4>)
 800c38a:	f7f5 ffbb 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//fail safe
		if(degree_z >= target_degree_z+270 || degree_z <= target_degree_z-270 || dist_r > 500 || dist_l > 500){	//270度以上回転発生でFail Safe
 800c38e:	4b2c      	ldr	r3, [pc, #176]	; (800c440 <HAL_TIM_PeriodElapsedCallback+0x14b8>)
 800c390:	edd3 7a00 	vldr	s15, [r3]
 800c394:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800c444 <HAL_TIM_PeriodElapsedCallback+0x14bc>
 800c398:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c39c:	4b2a      	ldr	r3, [pc, #168]	; (800c448 <HAL_TIM_PeriodElapsedCallback+0x14c0>)
 800c39e:	edd3 7a00 	vldr	s15, [r3]
 800c3a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3aa:	d923      	bls.n	800c3f4 <HAL_TIM_PeriodElapsedCallback+0x146c>
 800c3ac:	4b24      	ldr	r3, [pc, #144]	; (800c440 <HAL_TIM_PeriodElapsedCallback+0x14b8>)
 800c3ae:	edd3 7a00 	vldr	s15, [r3]
 800c3b2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800c444 <HAL_TIM_PeriodElapsedCallback+0x14bc>
 800c3b6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c3ba:	4b23      	ldr	r3, [pc, #140]	; (800c448 <HAL_TIM_PeriodElapsedCallback+0x14c0>)
 800c3bc:	edd3 7a00 	vldr	s15, [r3]
 800c3c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3c8:	da14      	bge.n	800c3f4 <HAL_TIM_PeriodElapsedCallback+0x146c>
 800c3ca:	4b20      	ldr	r3, [pc, #128]	; (800c44c <HAL_TIM_PeriodElapsedCallback+0x14c4>)
 800c3cc:	edd3 7a00 	vldr	s15, [r3]
 800c3d0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c450 <HAL_TIM_PeriodElapsedCallback+0x14c8>
 800c3d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3dc:	dc0a      	bgt.n	800c3f4 <HAL_TIM_PeriodElapsedCallback+0x146c>
 800c3de:	4b1d      	ldr	r3, [pc, #116]	; (800c454 <HAL_TIM_PeriodElapsedCallback+0x14cc>)
 800c3e0:	edd3 7a00 	vldr	s15, [r3]
 800c3e4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800c450 <HAL_TIM_PeriodElapsedCallback+0x14c8>
 800c3e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3f0:	dc00      	bgt.n	800c3f4 <HAL_TIM_PeriodElapsedCallback+0x146c>
			   drive_dir(1, 2);
			   full_led_write(RED);
		   }
		}
	}
}
 800c3f2:	e00b      	b.n	800c40c <HAL_TIM_PeriodElapsedCallback+0x1484>
			   drive_dir(0, 2);
 800c3f4:	2102      	movs	r1, #2
 800c3f6:	2000      	movs	r0, #0
 800c3f8:	f7f8 fce4 	bl	8004dc4 <drive_dir>
			   drive_dir(1, 2);
 800c3fc:	2102      	movs	r1, #2
 800c3fe:	2001      	movs	r0, #1
 800c400:	f7f8 fce0 	bl	8004dc4 <drive_dir>
			   full_led_write(RED);
 800c404:	2001      	movs	r0, #1
 800c406:	f003 fc2b 	bl	800fc60 <full_led_write>
			   drive_dir(0, 2);
 800c40a:	e7f3      	b.n	800c3f4 <HAL_TIM_PeriodElapsedCallback+0x146c>
}
 800c40c:	bf00      	nop
 800c40e:	3730      	adds	r7, #48	; 0x30
 800c410:	46bd      	mov	sp, r7
 800c412:	ecbd 8b02 	vpop	{d8}
 800c416:	bdb0      	pop	{r4, r5, r7, pc}
 800c418:	20000bb0 	.word	0x20000bb0
 800c41c:	20000c24 	.word	0x20000c24
 800c420:	20000780 	.word	0x20000780
 800c424:	20000c10 	.word	0x20000c10
 800c428:	20000d64 	.word	0x20000d64
 800c42c:	40020000 	.word	0x40020000
 800c430:	20000f70 	.word	0x20000f70
 800c434:	40020400 	.word	0x40020400
 800c438:	20000b04 	.word	0x20000b04
 800c43c:	40020800 	.word	0x40020800
 800c440:	20000c08 	.word	0x20000c08
 800c444:	43870000 	.word	0x43870000
 800c448:	20000b64 	.word	0x20000b64
 800c44c:	20000af4 	.word	0x20000af4
 800c450:	43fa0000 	.word	0x43fa0000
 800c454:	200015d0 	.word	0x200015d0

0800c458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c45e:	f7f4 fd6b 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c462:	f000 f917 	bl	800c694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c466:	f000 fc09 	bl	800cc7c <MX_GPIO_Init>
  MX_ADC1_Init();
 800c46a:	f000 f97d 	bl	800c768 <MX_ADC1_Init>
  MX_TIM2_Init();
 800c46e:	f000 fa03 	bl	800c878 <MX_TIM2_Init>
  MX_TIM3_Init();
 800c472:	f000 fa81 	bl	800c978 <MX_TIM3_Init>
  MX_TIM4_Init();
 800c476:	f000 faf5 	bl	800ca64 <MX_TIM4_Init>
  MX_TIM6_Init();
 800c47a:	f000 fb47 	bl	800cb0c <MX_TIM6_Init>
  MX_TIM8_Init();
 800c47e:	f000 fb7b 	bl	800cb78 <MX_TIM8_Init>
  MX_SPI3_Init();
 800c482:	f000 f9c3 	bl	800c80c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800c486:	f000 fbcf 	bl	800cc28 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  drive_init();
 800c48a:	f7f8 fbe7 	bl	8004c5c <drive_init>
  gyro_init();
 800c48e:	f7fe fb9f 	bl	800abd0 <gyro_init>
  search_init();
 800c492:	f000 fd21 	bl	800ced8 <search_init>
  sensor_init();
 800c496:	f003 fb23 	bl	800fae0 <sensor_init>

  printf("*** Welcome to WMMC ! ***\n");
 800c49a:	4870      	ldr	r0, [pc, #448]	; (800c65c <main+0x204>)
 800c49c:	f004 f9e8 	bl	8010870 <puts>

  setbuf(stdout, NULL);
 800c4a0:	4b6f      	ldr	r3, [pc, #444]	; (800c660 <main+0x208>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f004 f9e9 	bl	8010880 <setbuf>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800c4ae:	213c      	movs	r1, #60	; 0x3c
 800c4b0:	486c      	ldr	r0, [pc, #432]	; (800c664 <main+0x20c>)
 800c4b2:	f7f7 fa4b 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800c4b6:	213c      	movs	r1, #60	; 0x3c
 800c4b8:	486b      	ldr	r0, [pc, #428]	; (800c668 <main+0x210>)
 800c4ba:	f7f7 fa47 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800c4be:	486b      	ldr	r0, [pc, #428]	; (800c66c <main+0x214>)
 800c4c0:	f7f7 f8c3 	bl	800364a <HAL_TIM_Base_Start_IT>

  int mode = 0;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	607b      	str	r3, [r7, #4]
  printf("Mode : %d\n", mode);
 800c4c8:	6879      	ldr	r1, [r7, #4]
 800c4ca:	4869      	ldr	r0, [pc, #420]	; (800c670 <main+0x218>)
 800c4cc:	f004 f95c 	bl	8010788 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	f003 0301 	and.w	r3, r3, #1
 800c4d8:	b2d8      	uxtb	r0, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	f003 0302 	and.w	r3, r3, #2
 800c4e2:	b2d9      	uxtb	r1, r3
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	f003 0304 	and.w	r3, r3, #4
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	f003 fb7c 	bl	800fbec <led_write>
	  if(dist_r >= 20){
 800c4f4:	4b5f      	ldr	r3, [pc, #380]	; (800c674 <main+0x21c>)
 800c4f6:	edd3 7a00 	vldr	s15, [r3]
 800c4fa:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800c4fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c506:	db0f      	blt.n	800c528 <main+0xd0>
		  mode++;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	3301      	adds	r3, #1
 800c50c:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800c50e:	4b59      	ldr	r3, [pc, #356]	; (800c674 <main+0x21c>)
 800c510:	f04f 0200 	mov.w	r2, #0
 800c514:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2b07      	cmp	r3, #7
 800c51a:	dd01      	ble.n	800c520 <main+0xc8>
			  mode = 0;
 800c51c:	2300      	movs	r3, #0
 800c51e:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800c520:	6879      	ldr	r1, [r7, #4]
 800c522:	4853      	ldr	r0, [pc, #332]	; (800c670 <main+0x218>)
 800c524:	f004 f930 	bl	8010788 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(dist_r <= -20){
 800c528:	4b52      	ldr	r3, [pc, #328]	; (800c674 <main+0x21c>)
 800c52a:	edd3 7a00 	vldr	s15, [r3]
 800c52e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800c532:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c53a:	d80f      	bhi.n	800c55c <main+0x104>
		  mode--;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	3b01      	subs	r3, #1
 800c540:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800c542:	4b4c      	ldr	r3, [pc, #304]	; (800c674 <main+0x21c>)
 800c544:	f04f 0200 	mov.w	r2, #0
 800c548:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	da01      	bge.n	800c554 <main+0xfc>
			  mode = 7;
 800c550:	2307      	movs	r3, #7
 800c552:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800c554:	6879      	ldr	r1, [r7, #4]
 800c556:	4846      	ldr	r0, [pc, #280]	; (800c670 <main+0x218>)
 800c558:	f004 f916 	bl	8010788 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800c55c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c560:	4845      	ldr	r0, [pc, #276]	; (800c678 <main+0x220>)
 800c562:	f7f5 feb7 	bl	80022d4 <HAL_GPIO_ReadPin>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1b1      	bne.n	800c4d0 <main+0x78>
		  HAL_Delay(50);
 800c56c:	2032      	movs	r0, #50	; 0x32
 800c56e:	f7f4 fd55 	bl	800101c <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800c572:	bf00      	nop
 800c574:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c578:	483f      	ldr	r0, [pc, #252]	; (800c678 <main+0x220>)
 800c57a:	f7f5 feab 	bl	80022d4 <HAL_GPIO_ReadPin>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d0f7      	beq.n	800c574 <main+0x11c>
		  switch(mode){
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2b07      	cmp	r3, #7
 800c588:	d8a2      	bhi.n	800c4d0 <main+0x78>
 800c58a:	a201      	add	r2, pc, #4	; (adr r2, 800c590 <main+0x138>)
 800c58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c590:	0800c5b1 	.word	0x0800c5b1
 800c594:	0800c5bb 	.word	0x0800c5bb
 800c598:	0800c5c7 	.word	0x0800c5c7
 800c59c:	0800c5d3 	.word	0x0800c5d3
 800c5a0:	0800c5df 	.word	0x0800c5df
 800c5a4:	0800c5e5 	.word	0x0800c5e5
 800c5a8:	0800c611 	.word	0x0800c611
 800c5ac:	0800c653 	.word	0x0800c653

		  	  case 0:
		  		  HAL_Delay(5000);
 800c5b0:	f241 3088 	movw	r0, #5000	; 0x1388
 800c5b4:	f7f4 fd32 	bl	800101c <HAL_Delay>
		  		  break;
 800c5b8:	e04e      	b.n	800c658 <main+0x200>

		  	  case 1:
		  		  //----a超新地走行----
		  		  printf("Simple Run.\n");
 800c5ba:	4830      	ldr	r0, [pc, #192]	; (800c67c <main+0x224>)
 800c5bc:	f004 f958 	bl	8010870 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  simple_run();
 800c5c0:	f7fc ff96 	bl	80094f0 <simple_run>
		  		  break;
 800c5c4:	e048      	b.n	800c658 <main+0x200>

		  	  case 2:
		  		  //----aスラローム走行----
		  		  printf("slalom Run.\n");
 800c5c6:	482e      	ldr	r0, [pc, #184]	; (800c680 <main+0x228>)
 800c5c8:	f004 f952 	bl	8010870 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  slalom_run();
 800c5cc:	f7fd f89e 	bl	800970c <slalom_run>
		  		  break;
 800c5d0:	e042      	b.n	800c658 <main+0x200>

		  	  case 3:
		  		  //----aスラローム走行&pass圧縮----
				  printf("First Run. (Slalom)\n");
 800c5d2:	482c      	ldr	r0, [pc, #176]	; (800c684 <main+0x22c>)
 800c5d4:	f004 f94c 	bl	8010870 <puts>
		  		  pass_test();
 800c5d8:	f7fc fdaa 	bl	8009130 <pass_test>
		  		  break;
 800c5dc:	e03c      	b.n	800c658 <main+0x200>

		  	  case 4:
		  		  //----aテストモード選択----
		  		  test_select();
 800c5de:	f7fb fe1b 	bl	8008218 <test_select>
		  		  break;
 800c5e2:	e039      	b.n	800c658 <main+0x200>

		  	  case 5:
		  		  //----sensor check----
		  		  printf("Sensor Check.\n");
 800c5e4:	4828      	ldr	r0, [pc, #160]	; (800c688 <main+0x230>)
 800c5e6:	f004 f943 	bl	8010870 <puts>
		  		  sensor_test();
 800c5ea:	f003 fbf5 	bl	800fdd8 <sensor_test>
		  		  break;
 800c5ee:	e033      	b.n	800c658 <main+0x200>

		  	  case 6:
		  		  //----pitagola sound----
				  while(ad_fl <= WALL_BASE_FL){
					  led_write(1, 1, 1);
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	2101      	movs	r1, #1
 800c5f4:	2001      	movs	r0, #1
 800c5f6:	f003 faf9 	bl	800fbec <led_write>
					  HAL_Delay(200);
 800c5fa:	20c8      	movs	r0, #200	; 0xc8
 800c5fc:	f7f4 fd0e 	bl	800101c <HAL_Delay>
					  led_write(0, 0, 0);
 800c600:	2200      	movs	r2, #0
 800c602:	2100      	movs	r1, #0
 800c604:	2000      	movs	r0, #0
 800c606:	f003 faf1 	bl	800fbec <led_write>
					  HAL_Delay(200);
 800c60a:	20c8      	movs	r0, #200	; 0xc8
 800c60c:	f7f4 fd06 	bl	800101c <HAL_Delay>
				  while(ad_fl <= WALL_BASE_FL){
 800c610:	4b1e      	ldr	r3, [pc, #120]	; (800c68c <main+0x234>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2bc8      	cmp	r3, #200	; 0xc8
 800c616:	d9eb      	bls.n	800c5f0 <main+0x198>
				  }
				  HAL_Delay(200);
 800c618:	20c8      	movs	r0, #200	; 0xc8
 800c61a:	f7f4 fcff 	bl	800101c <HAL_Delay>
		  		  }
				  HAL_Delay(2000);
				  for(int i=0; i<m_ok; i++){
		  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
		  		  }
*/				  HAL_Delay(2000);
 800c61e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c622:	f7f4 fcfb 	bl	800101c <HAL_Delay>
				  for(int i=0; i<m_goal; i++){
 800c626:	2300      	movs	r3, #0
 800c628:	603b      	str	r3, [r7, #0]
 800c62a:	e00e      	b.n	800c64a <main+0x1f2>
		  			  buzzer(mario_goal[i][0], mario_goal[i][1]);
 800c62c:	4a18      	ldr	r2, [pc, #96]	; (800c690 <main+0x238>)
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c634:	4a16      	ldr	r2, [pc, #88]	; (800c690 <main+0x238>)
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	00db      	lsls	r3, r3, #3
 800c63a:	4413      	add	r3, r2
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	4619      	mov	r1, r3
 800c640:	f000 fbda 	bl	800cdf8 <buzzer>
				  for(int i=0; i<m_goal; i++){
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	3301      	adds	r3, #1
 800c648:	603b      	str	r3, [r7, #0]
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	2b0e      	cmp	r3, #14
 800c64e:	dded      	ble.n	800c62c <main+0x1d4>
		  		  }
		  		  break;
 800c650:	e002      	b.n	800c658 <main+0x200>
		  		  //MF.FLAG.WEDGE = 1;
/*		  		  for(int i=0; i<m_select; i++){
		  			  buzzer(mario_select[i][0], mario_select[i][1]);
		  		  }
*///		  		  perfect_run();
		  		  perfect_slalom();
 800c652:	f7fd fc0d 	bl	8009e70 <perfect_slalom>
		  		  break;
 800c656:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800c658:	e73a      	b.n	800c4d0 <main+0x78>
 800c65a:	bf00      	nop
 800c65c:	08011e9c 	.word	0x08011e9c
 800c660:	20000084 	.word	0x20000084
 800c664:	2000030c 	.word	0x2000030c
 800c668:	200002cc 	.word	0x200002cc
 800c66c:	20000bc0 	.word	0x20000bc0
 800c670:	08011eb8 	.word	0x08011eb8
 800c674:	20000af4 	.word	0x20000af4
 800c678:	40020000 	.word	0x40020000
 800c67c:	08011ec4 	.word	0x08011ec4
 800c680:	08011ed0 	.word	0x08011ed0
 800c684:	08011edc 	.word	0x08011edc
 800c688:	08011ef0 	.word	0x08011ef0
 800c68c:	20000d64 	.word	0x20000d64
 800c690:	20000008 	.word	0x20000008

0800c694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b094      	sub	sp, #80	; 0x50
 800c698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c69a:	f107 0320 	add.w	r3, r7, #32
 800c69e:	2230      	movs	r2, #48	; 0x30
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f004 f868 	bl	8010778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c6a8:	f107 030c 	add.w	r3, r7, #12
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	601a      	str	r2, [r3, #0]
 800c6b0:	605a      	str	r2, [r3, #4]
 800c6b2:	609a      	str	r2, [r3, #8]
 800c6b4:	60da      	str	r2, [r3, #12]
 800c6b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	60bb      	str	r3, [r7, #8]
 800c6bc:	4b28      	ldr	r3, [pc, #160]	; (800c760 <SystemClock_Config+0xcc>)
 800c6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c0:	4a27      	ldr	r2, [pc, #156]	; (800c760 <SystemClock_Config+0xcc>)
 800c6c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6c6:	6413      	str	r3, [r2, #64]	; 0x40
 800c6c8:	4b25      	ldr	r3, [pc, #148]	; (800c760 <SystemClock_Config+0xcc>)
 800c6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6d0:	60bb      	str	r3, [r7, #8]
 800c6d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	607b      	str	r3, [r7, #4]
 800c6d8:	4b22      	ldr	r3, [pc, #136]	; (800c764 <SystemClock_Config+0xd0>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a21      	ldr	r2, [pc, #132]	; (800c764 <SystemClock_Config+0xd0>)
 800c6de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c6e2:	6013      	str	r3, [r2, #0]
 800c6e4:	4b1f      	ldr	r3, [pc, #124]	; (800c764 <SystemClock_Config+0xd0>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6ec:	607b      	str	r3, [r7, #4]
 800c6ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c6f8:	2310      	movs	r3, #16
 800c6fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c6fc:	2302      	movs	r3, #2
 800c6fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c700:	2300      	movs	r3, #0
 800c702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800c704:	2308      	movs	r3, #8
 800c706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800c708:	23a8      	movs	r3, #168	; 0xa8
 800c70a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c70c:	2302      	movs	r3, #2
 800c70e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c710:	2304      	movs	r3, #4
 800c712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c714:	f107 0320 	add.w	r3, r7, #32
 800c718:	4618      	mov	r0, r3
 800c71a:	f7f5 fe0d 	bl	8002338 <HAL_RCC_OscConfig>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d001      	beq.n	800c728 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800c724:	f000 fbd1 	bl	800ceca <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c728:	230f      	movs	r3, #15
 800c72a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c72c:	2302      	movs	r3, #2
 800c72e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c730:	2300      	movs	r3, #0
 800c732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c734:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c738:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c73a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c73e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c740:	f107 030c 	add.w	r3, r7, #12
 800c744:	2105      	movs	r1, #5
 800c746:	4618      	mov	r0, r3
 800c748:	f7f6 f838 	bl	80027bc <HAL_RCC_ClockConfig>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d001      	beq.n	800c756 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800c752:	f000 fbba 	bl	800ceca <Error_Handler>
  }
}
 800c756:	bf00      	nop
 800c758:	3750      	adds	r7, #80	; 0x50
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	40023800 	.word	0x40023800
 800c764:	40007000 	.word	0x40007000

0800c768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800c76e:	463b      	mov	r3, r7
 800c770:	2200      	movs	r2, #0
 800c772:	601a      	str	r2, [r3, #0]
 800c774:	605a      	str	r2, [r3, #4]
 800c776:	609a      	str	r2, [r3, #8]
 800c778:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800c77a:	4b21      	ldr	r3, [pc, #132]	; (800c800 <MX_ADC1_Init+0x98>)
 800c77c:	4a21      	ldr	r2, [pc, #132]	; (800c804 <MX_ADC1_Init+0x9c>)
 800c77e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c780:	4b1f      	ldr	r3, [pc, #124]	; (800c800 <MX_ADC1_Init+0x98>)
 800c782:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c786:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c788:	4b1d      	ldr	r3, [pc, #116]	; (800c800 <MX_ADC1_Init+0x98>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800c78e:	4b1c      	ldr	r3, [pc, #112]	; (800c800 <MX_ADC1_Init+0x98>)
 800c790:	2200      	movs	r2, #0
 800c792:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800c794:	4b1a      	ldr	r3, [pc, #104]	; (800c800 <MX_ADC1_Init+0x98>)
 800c796:	2200      	movs	r2, #0
 800c798:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c79a:	4b19      	ldr	r3, [pc, #100]	; (800c800 <MX_ADC1_Init+0x98>)
 800c79c:	2200      	movs	r2, #0
 800c79e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c7a2:	4b17      	ldr	r3, [pc, #92]	; (800c800 <MX_ADC1_Init+0x98>)
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c7a8:	4b15      	ldr	r3, [pc, #84]	; (800c800 <MX_ADC1_Init+0x98>)
 800c7aa:	4a17      	ldr	r2, [pc, #92]	; (800c808 <MX_ADC1_Init+0xa0>)
 800c7ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c7ae:	4b14      	ldr	r3, [pc, #80]	; (800c800 <MX_ADC1_Init+0x98>)
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800c7b4:	4b12      	ldr	r3, [pc, #72]	; (800c800 <MX_ADC1_Init+0x98>)
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800c7ba:	4b11      	ldr	r3, [pc, #68]	; (800c800 <MX_ADC1_Init+0x98>)
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c7c2:	4b0f      	ldr	r3, [pc, #60]	; (800c800 <MX_ADC1_Init+0x98>)
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c7c8:	480d      	ldr	r0, [pc, #52]	; (800c800 <MX_ADC1_Init+0x98>)
 800c7ca:	f7f4 fc49 	bl	8001060 <HAL_ADC_Init>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d001      	beq.n	800c7d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800c7d4:	f000 fb79 	bl	800ceca <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800c7dc:	2301      	movs	r3, #1
 800c7de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c7e4:	463b      	mov	r3, r7
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	4805      	ldr	r0, [pc, #20]	; (800c800 <MX_ADC1_Init+0x98>)
 800c7ea:	f7f4 fdd5 	bl	8001398 <HAL_ADC_ConfigChannel>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d001      	beq.n	800c7f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800c7f4:	f000 fb69 	bl	800ceca <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800c7f8:	bf00      	nop
 800c7fa:	3710      	adds	r7, #16
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	20000b08 	.word	0x20000b08
 800c804:	40012000 	.word	0x40012000
 800c808:	0f000001 	.word	0x0f000001

0800c80c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800c810:	4b17      	ldr	r3, [pc, #92]	; (800c870 <MX_SPI3_Init+0x64>)
 800c812:	4a18      	ldr	r2, [pc, #96]	; (800c874 <MX_SPI3_Init+0x68>)
 800c814:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800c816:	4b16      	ldr	r3, [pc, #88]	; (800c870 <MX_SPI3_Init+0x64>)
 800c818:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c81c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800c81e:	4b14      	ldr	r3, [pc, #80]	; (800c870 <MX_SPI3_Init+0x64>)
 800c820:	2200      	movs	r2, #0
 800c822:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800c824:	4b12      	ldr	r3, [pc, #72]	; (800c870 <MX_SPI3_Init+0x64>)
 800c826:	2200      	movs	r2, #0
 800c828:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c82a:	4b11      	ldr	r3, [pc, #68]	; (800c870 <MX_SPI3_Init+0x64>)
 800c82c:	2200      	movs	r2, #0
 800c82e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c830:	4b0f      	ldr	r3, [pc, #60]	; (800c870 <MX_SPI3_Init+0x64>)
 800c832:	2200      	movs	r2, #0
 800c834:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800c836:	4b0e      	ldr	r3, [pc, #56]	; (800c870 <MX_SPI3_Init+0x64>)
 800c838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c83c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800c83e:	4b0c      	ldr	r3, [pc, #48]	; (800c870 <MX_SPI3_Init+0x64>)
 800c840:	2218      	movs	r2, #24
 800c842:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c844:	4b0a      	ldr	r3, [pc, #40]	; (800c870 <MX_SPI3_Init+0x64>)
 800c846:	2200      	movs	r2, #0
 800c848:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800c84a:	4b09      	ldr	r3, [pc, #36]	; (800c870 <MX_SPI3_Init+0x64>)
 800c84c:	2200      	movs	r2, #0
 800c84e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c850:	4b07      	ldr	r3, [pc, #28]	; (800c870 <MX_SPI3_Init+0x64>)
 800c852:	2200      	movs	r2, #0
 800c854:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800c856:	4b06      	ldr	r3, [pc, #24]	; (800c870 <MX_SPI3_Init+0x64>)
 800c858:	220a      	movs	r2, #10
 800c85a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800c85c:	4804      	ldr	r0, [pc, #16]	; (800c870 <MX_SPI3_Init+0x64>)
 800c85e:	f7f6 f975 	bl	8002b4c <HAL_SPI_Init>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d001      	beq.n	800c86c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800c868:	f000 fb2f 	bl	800ceca <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800c86c:	bf00      	nop
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	20000144 	.word	0x20000144
 800c874:	40003c00 	.word	0x40003c00

0800c878 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b08e      	sub	sp, #56	; 0x38
 800c87c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c87e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c882:	2200      	movs	r2, #0
 800c884:	601a      	str	r2, [r3, #0]
 800c886:	605a      	str	r2, [r3, #4]
 800c888:	609a      	str	r2, [r3, #8]
 800c88a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c88c:	f107 0320 	add.w	r3, r7, #32
 800c890:	2200      	movs	r2, #0
 800c892:	601a      	str	r2, [r3, #0]
 800c894:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c896:	1d3b      	adds	r3, r7, #4
 800c898:	2200      	movs	r2, #0
 800c89a:	601a      	str	r2, [r3, #0]
 800c89c:	605a      	str	r2, [r3, #4]
 800c89e:	609a      	str	r2, [r3, #8]
 800c8a0:	60da      	str	r2, [r3, #12]
 800c8a2:	611a      	str	r2, [r3, #16]
 800c8a4:	615a      	str	r2, [r3, #20]
 800c8a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800c8a8:	4b32      	ldr	r3, [pc, #200]	; (800c974 <MX_TIM2_Init+0xfc>)
 800c8aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c8ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800c8b0:	4b30      	ldr	r3, [pc, #192]	; (800c974 <MX_TIM2_Init+0xfc>)
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c8b6:	4b2f      	ldr	r3, [pc, #188]	; (800c974 <MX_TIM2_Init+0xfc>)
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800c8bc:	4b2d      	ldr	r3, [pc, #180]	; (800c974 <MX_TIM2_Init+0xfc>)
 800c8be:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c8c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c8c4:	4b2b      	ldr	r3, [pc, #172]	; (800c974 <MX_TIM2_Init+0xfc>)
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c8ca:	4b2a      	ldr	r3, [pc, #168]	; (800c974 <MX_TIM2_Init+0xfc>)
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c8d0:	4828      	ldr	r0, [pc, #160]	; (800c974 <MX_TIM2_Init+0xfc>)
 800c8d2:	f7f6 fe8f 	bl	80035f4 <HAL_TIM_Base_Init>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d001      	beq.n	800c8e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800c8dc:	f000 faf5 	bl	800ceca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c8e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c8e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c8e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	4821      	ldr	r0, [pc, #132]	; (800c974 <MX_TIM2_Init+0xfc>)
 800c8ee:	f7f7 fa33 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d001      	beq.n	800c8fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800c8f8:	f000 fae7 	bl	800ceca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800c8fc:	481d      	ldr	r0, [pc, #116]	; (800c974 <MX_TIM2_Init+0xfc>)
 800c8fe:	f7f6 fec8 	bl	8003692 <HAL_TIM_PWM_Init>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d001      	beq.n	800c90c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800c908:	f000 fadf 	bl	800ceca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c90c:	2300      	movs	r3, #0
 800c90e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c910:	2300      	movs	r3, #0
 800c912:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c914:	f107 0320 	add.w	r3, r7, #32
 800c918:	4619      	mov	r1, r3
 800c91a:	4816      	ldr	r0, [pc, #88]	; (800c974 <MX_TIM2_Init+0xfc>)
 800c91c:	f7f7 fe0b 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800c920:	4603      	mov	r3, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	d001      	beq.n	800c92a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800c926:	f000 fad0 	bl	800ceca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c92a:	2360      	movs	r3, #96	; 0x60
 800c92c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800c92e:	2300      	movs	r3, #0
 800c930:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c932:	2300      	movs	r3, #0
 800c934:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c936:	2300      	movs	r3, #0
 800c938:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c93a:	1d3b      	adds	r3, r7, #4
 800c93c:	2200      	movs	r2, #0
 800c93e:	4619      	mov	r1, r3
 800c940:	480c      	ldr	r0, [pc, #48]	; (800c974 <MX_TIM2_Init+0xfc>)
 800c942:	f7f7 f943 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800c946:	4603      	mov	r3, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d001      	beq.n	800c950 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800c94c:	f000 fabd 	bl	800ceca <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c950:	1d3b      	adds	r3, r7, #4
 800c952:	220c      	movs	r2, #12
 800c954:	4619      	mov	r1, r3
 800c956:	4807      	ldr	r0, [pc, #28]	; (800c974 <MX_TIM2_Init+0xfc>)
 800c958:	f7f7 f938 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d001      	beq.n	800c966 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800c962:	f000 fab2 	bl	800ceca <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800c966:	4803      	ldr	r0, [pc, #12]	; (800c974 <MX_TIM2_Init+0xfc>)
 800c968:	f003 fce4 	bl	8010334 <HAL_TIM_MspPostInit>

}
 800c96c:	bf00      	nop
 800c96e:	3738      	adds	r7, #56	; 0x38
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	20000c24 	.word	0x20000c24

0800c978 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b08e      	sub	sp, #56	; 0x38
 800c97c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c97e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c982:	2200      	movs	r2, #0
 800c984:	601a      	str	r2, [r3, #0]
 800c986:	605a      	str	r2, [r3, #4]
 800c988:	609a      	str	r2, [r3, #8]
 800c98a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c98c:	f107 0320 	add.w	r3, r7, #32
 800c990:	2200      	movs	r2, #0
 800c992:	601a      	str	r2, [r3, #0]
 800c994:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c996:	1d3b      	adds	r3, r7, #4
 800c998:	2200      	movs	r2, #0
 800c99a:	601a      	str	r2, [r3, #0]
 800c99c:	605a      	str	r2, [r3, #4]
 800c99e:	609a      	str	r2, [r3, #8]
 800c9a0:	60da      	str	r2, [r3, #12]
 800c9a2:	611a      	str	r2, [r3, #16]
 800c9a4:	615a      	str	r2, [r3, #20]
 800c9a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800c9a8:	4b2c      	ldr	r3, [pc, #176]	; (800ca5c <MX_TIM3_Init+0xe4>)
 800c9aa:	4a2d      	ldr	r2, [pc, #180]	; (800ca60 <MX_TIM3_Init+0xe8>)
 800c9ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800c9ae:	4b2b      	ldr	r3, [pc, #172]	; (800ca5c <MX_TIM3_Init+0xe4>)
 800c9b0:	223f      	movs	r2, #63	; 0x3f
 800c9b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c9b4:	4b29      	ldr	r3, [pc, #164]	; (800ca5c <MX_TIM3_Init+0xe4>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800c9ba:	4b28      	ldr	r3, [pc, #160]	; (800ca5c <MX_TIM3_Init+0xe4>)
 800c9bc:	2200      	movs	r2, #0
 800c9be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c9c0:	4b26      	ldr	r3, [pc, #152]	; (800ca5c <MX_TIM3_Init+0xe4>)
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c9c6:	4b25      	ldr	r3, [pc, #148]	; (800ca5c <MX_TIM3_Init+0xe4>)
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800c9cc:	4823      	ldr	r0, [pc, #140]	; (800ca5c <MX_TIM3_Init+0xe4>)
 800c9ce:	f7f6 fe11 	bl	80035f4 <HAL_TIM_Base_Init>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d001      	beq.n	800c9dc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800c9d8:	f000 fa77 	bl	800ceca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c9dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c9e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800c9e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	481c      	ldr	r0, [pc, #112]	; (800ca5c <MX_TIM3_Init+0xe4>)
 800c9ea:	f7f7 f9b5 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d001      	beq.n	800c9f8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800c9f4:	f000 fa69 	bl	800ceca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800c9f8:	4818      	ldr	r0, [pc, #96]	; (800ca5c <MX_TIM3_Init+0xe4>)
 800c9fa:	f7f6 fe4a 	bl	8003692 <HAL_TIM_PWM_Init>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d001      	beq.n	800ca08 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800ca04:	f000 fa61 	bl	800ceca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ca10:	f107 0320 	add.w	r3, r7, #32
 800ca14:	4619      	mov	r1, r3
 800ca16:	4811      	ldr	r0, [pc, #68]	; (800ca5c <MX_TIM3_Init+0xe4>)
 800ca18:	f7f7 fd8d 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d001      	beq.n	800ca26 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800ca22:	f000 fa52 	bl	800ceca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ca26:	2360      	movs	r3, #96	; 0x60
 800ca28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ca32:	2300      	movs	r3, #0
 800ca34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ca36:	1d3b      	adds	r3, r7, #4
 800ca38:	2204      	movs	r2, #4
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	4807      	ldr	r0, [pc, #28]	; (800ca5c <MX_TIM3_Init+0xe4>)
 800ca3e:	f7f7 f8c5 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d001      	beq.n	800ca4c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800ca48:	f000 fa3f 	bl	800ceca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800ca4c:	4803      	ldr	r0, [pc, #12]	; (800ca5c <MX_TIM3_Init+0xe4>)
 800ca4e:	f003 fc71 	bl	8010334 <HAL_TIM_MspPostInit>

}
 800ca52:	bf00      	nop
 800ca54:	3738      	adds	r7, #56	; 0x38
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	20000aa8 	.word	0x20000aa8
 800ca60:	40000400 	.word	0x40000400

0800ca64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b08c      	sub	sp, #48	; 0x30
 800ca68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800ca6a:	f107 030c 	add.w	r3, r7, #12
 800ca6e:	2224      	movs	r2, #36	; 0x24
 800ca70:	2100      	movs	r1, #0
 800ca72:	4618      	mov	r0, r3
 800ca74:	f003 fe80 	bl	8010778 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ca78:	1d3b      	adds	r3, r7, #4
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	601a      	str	r2, [r3, #0]
 800ca7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800ca80:	4b20      	ldr	r3, [pc, #128]	; (800cb04 <MX_TIM4_Init+0xa0>)
 800ca82:	4a21      	ldr	r2, [pc, #132]	; (800cb08 <MX_TIM4_Init+0xa4>)
 800ca84:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800ca86:	4b1f      	ldr	r3, [pc, #124]	; (800cb04 <MX_TIM4_Init+0xa0>)
 800ca88:	2200      	movs	r2, #0
 800ca8a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ca8c:	4b1d      	ldr	r3, [pc, #116]	; (800cb04 <MX_TIM4_Init+0xa0>)
 800ca8e:	2200      	movs	r2, #0
 800ca90:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800ca92:	4b1c      	ldr	r3, [pc, #112]	; (800cb04 <MX_TIM4_Init+0xa0>)
 800ca94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca98:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ca9a:	4b1a      	ldr	r3, [pc, #104]	; (800cb04 <MX_TIM4_Init+0xa0>)
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800caa0:	4b18      	ldr	r3, [pc, #96]	; (800cb04 <MX_TIM4_Init+0xa0>)
 800caa2:	2200      	movs	r2, #0
 800caa4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800caa6:	2303      	movs	r3, #3
 800caa8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800caaa:	2300      	movs	r3, #0
 800caac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800caae:	2301      	movs	r3, #1
 800cab0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800cab2:	2300      	movs	r3, #0
 800cab4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800cab6:	2300      	movs	r3, #0
 800cab8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800caba:	2300      	movs	r3, #0
 800cabc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800cabe:	2301      	movs	r3, #1
 800cac0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800cac2:	2300      	movs	r3, #0
 800cac4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800cac6:	2300      	movs	r3, #0
 800cac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800caca:	f107 030c 	add.w	r3, r7, #12
 800cace:	4619      	mov	r1, r3
 800cad0:	480c      	ldr	r0, [pc, #48]	; (800cb04 <MX_TIM4_Init+0xa0>)
 800cad2:	f7f6 fea9 	bl	8003828 <HAL_TIM_Encoder_Init>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d001      	beq.n	800cae0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800cadc:	f000 f9f5 	bl	800ceca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cae0:	2300      	movs	r3, #0
 800cae2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cae4:	2300      	movs	r3, #0
 800cae6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800cae8:	1d3b      	adds	r3, r7, #4
 800caea:	4619      	mov	r1, r3
 800caec:	4805      	ldr	r0, [pc, #20]	; (800cb04 <MX_TIM4_Init+0xa0>)
 800caee:	f7f7 fd22 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d001      	beq.n	800cafc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800caf8:	f000 f9e7 	bl	800ceca <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800cafc:	bf00      	nop
 800cafe:	3730      	adds	r7, #48	; 0x30
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	2000030c 	.word	0x2000030c
 800cb08:	40000800 	.word	0x40000800

0800cb0c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cb12:	463b      	mov	r3, r7
 800cb14:	2200      	movs	r2, #0
 800cb16:	601a      	str	r2, [r3, #0]
 800cb18:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800cb1a:	4b15      	ldr	r3, [pc, #84]	; (800cb70 <MX_TIM6_Init+0x64>)
 800cb1c:	4a15      	ldr	r2, [pc, #84]	; (800cb74 <MX_TIM6_Init+0x68>)
 800cb1e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800cb20:	4b13      	ldr	r3, [pc, #76]	; (800cb70 <MX_TIM6_Init+0x64>)
 800cb22:	2253      	movs	r2, #83	; 0x53
 800cb24:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cb26:	4b12      	ldr	r3, [pc, #72]	; (800cb70 <MX_TIM6_Init+0x64>)
 800cb28:	2200      	movs	r2, #0
 800cb2a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800cb2c:	4b10      	ldr	r3, [pc, #64]	; (800cb70 <MX_TIM6_Init+0x64>)
 800cb2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800cb32:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cb34:	4b0e      	ldr	r3, [pc, #56]	; (800cb70 <MX_TIM6_Init+0x64>)
 800cb36:	2200      	movs	r2, #0
 800cb38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800cb3a:	480d      	ldr	r0, [pc, #52]	; (800cb70 <MX_TIM6_Init+0x64>)
 800cb3c:	f7f6 fd5a 	bl	80035f4 <HAL_TIM_Base_Init>
 800cb40:	4603      	mov	r3, r0
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d001      	beq.n	800cb4a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800cb46:	f000 f9c0 	bl	800ceca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800cb52:	463b      	mov	r3, r7
 800cb54:	4619      	mov	r1, r3
 800cb56:	4806      	ldr	r0, [pc, #24]	; (800cb70 <MX_TIM6_Init+0x64>)
 800cb58:	f7f7 fced 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d001      	beq.n	800cb66 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800cb62:	f000 f9b2 	bl	800ceca <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800cb66:	bf00      	nop
 800cb68:	3708      	adds	r7, #8
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	20000bc0 	.word	0x20000bc0
 800cb74:	40001000 	.word	0x40001000

0800cb78 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b08c      	sub	sp, #48	; 0x30
 800cb7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800cb7e:	f107 030c 	add.w	r3, r7, #12
 800cb82:	2224      	movs	r2, #36	; 0x24
 800cb84:	2100      	movs	r1, #0
 800cb86:	4618      	mov	r0, r3
 800cb88:	f003 fdf6 	bl	8010778 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cb8c:	1d3b      	adds	r3, r7, #4
 800cb8e:	2200      	movs	r2, #0
 800cb90:	601a      	str	r2, [r3, #0]
 800cb92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800cb94:	4b22      	ldr	r3, [pc, #136]	; (800cc20 <MX_TIM8_Init+0xa8>)
 800cb96:	4a23      	ldr	r2, [pc, #140]	; (800cc24 <MX_TIM8_Init+0xac>)
 800cb98:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800cb9a:	4b21      	ldr	r3, [pc, #132]	; (800cc20 <MX_TIM8_Init+0xa8>)
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cba0:	4b1f      	ldr	r3, [pc, #124]	; (800cc20 <MX_TIM8_Init+0xa8>)
 800cba2:	2200      	movs	r2, #0
 800cba4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800cba6:	4b1e      	ldr	r3, [pc, #120]	; (800cc20 <MX_TIM8_Init+0xa8>)
 800cba8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cbac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cbae:	4b1c      	ldr	r3, [pc, #112]	; (800cc20 <MX_TIM8_Init+0xa8>)
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800cbb4:	4b1a      	ldr	r3, [pc, #104]	; (800cc20 <MX_TIM8_Init+0xa8>)
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cbba:	4b19      	ldr	r3, [pc, #100]	; (800cc20 <MX_TIM8_Init+0xa8>)
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800cbc0:	2303      	movs	r3, #3
 800cbc2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800cbe4:	f107 030c 	add.w	r3, r7, #12
 800cbe8:	4619      	mov	r1, r3
 800cbea:	480d      	ldr	r0, [pc, #52]	; (800cc20 <MX_TIM8_Init+0xa8>)
 800cbec:	f7f6 fe1c 	bl	8003828 <HAL_TIM_Encoder_Init>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d001      	beq.n	800cbfa <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800cbf6:	f000 f968 	bl	800ceca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800cc02:	1d3b      	adds	r3, r7, #4
 800cc04:	4619      	mov	r1, r3
 800cc06:	4806      	ldr	r0, [pc, #24]	; (800cc20 <MX_TIM8_Init+0xa8>)
 800cc08:	f7f7 fc95 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d001      	beq.n	800cc16 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800cc12:	f000 f95a 	bl	800ceca <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800cc16:	bf00      	nop
 800cc18:	3730      	adds	r7, #48	; 0x30
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	200002cc 	.word	0x200002cc
 800cc24:	40010400 	.word	0x40010400

0800cc28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800cc2c:	4b11      	ldr	r3, [pc, #68]	; (800cc74 <MX_USART1_UART_Init+0x4c>)
 800cc2e:	4a12      	ldr	r2, [pc, #72]	; (800cc78 <MX_USART1_UART_Init+0x50>)
 800cc30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800cc32:	4b10      	ldr	r3, [pc, #64]	; (800cc74 <MX_USART1_UART_Init+0x4c>)
 800cc34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800cc38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800cc3a:	4b0e      	ldr	r3, [pc, #56]	; (800cc74 <MX_USART1_UART_Init+0x4c>)
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800cc40:	4b0c      	ldr	r3, [pc, #48]	; (800cc74 <MX_USART1_UART_Init+0x4c>)
 800cc42:	2200      	movs	r2, #0
 800cc44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800cc46:	4b0b      	ldr	r3, [pc, #44]	; (800cc74 <MX_USART1_UART_Init+0x4c>)
 800cc48:	2200      	movs	r2, #0
 800cc4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800cc4c:	4b09      	ldr	r3, [pc, #36]	; (800cc74 <MX_USART1_UART_Init+0x4c>)
 800cc4e:	220c      	movs	r2, #12
 800cc50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cc52:	4b08      	ldr	r3, [pc, #32]	; (800cc74 <MX_USART1_UART_Init+0x4c>)
 800cc54:	2200      	movs	r2, #0
 800cc56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800cc58:	4b06      	ldr	r3, [pc, #24]	; (800cc74 <MX_USART1_UART_Init+0x4c>)
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800cc5e:	4805      	ldr	r0, [pc, #20]	; (800cc74 <MX_USART1_UART_Init+0x4c>)
 800cc60:	f7f7 fcc2 	bl	80045e8 <HAL_UART_Init>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d001      	beq.n	800cc6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800cc6a:	f000 f92e 	bl	800ceca <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800cc6e:	bf00      	nop
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	20000b6c 	.word	0x20000b6c
 800cc78:	40011000 	.word	0x40011000

0800cc7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b08a      	sub	sp, #40	; 0x28
 800cc80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc82:	f107 0314 	add.w	r3, r7, #20
 800cc86:	2200      	movs	r2, #0
 800cc88:	601a      	str	r2, [r3, #0]
 800cc8a:	605a      	str	r2, [r3, #4]
 800cc8c:	609a      	str	r2, [r3, #8]
 800cc8e:	60da      	str	r2, [r3, #12]
 800cc90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cc92:	2300      	movs	r3, #0
 800cc94:	613b      	str	r3, [r7, #16]
 800cc96:	4b53      	ldr	r3, [pc, #332]	; (800cde4 <MX_GPIO_Init+0x168>)
 800cc98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc9a:	4a52      	ldr	r2, [pc, #328]	; (800cde4 <MX_GPIO_Init+0x168>)
 800cc9c:	f043 0304 	orr.w	r3, r3, #4
 800cca0:	6313      	str	r3, [r2, #48]	; 0x30
 800cca2:	4b50      	ldr	r3, [pc, #320]	; (800cde4 <MX_GPIO_Init+0x168>)
 800cca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cca6:	f003 0304 	and.w	r3, r3, #4
 800ccaa:	613b      	str	r3, [r7, #16]
 800ccac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ccae:	2300      	movs	r3, #0
 800ccb0:	60fb      	str	r3, [r7, #12]
 800ccb2:	4b4c      	ldr	r3, [pc, #304]	; (800cde4 <MX_GPIO_Init+0x168>)
 800ccb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccb6:	4a4b      	ldr	r2, [pc, #300]	; (800cde4 <MX_GPIO_Init+0x168>)
 800ccb8:	f043 0301 	orr.w	r3, r3, #1
 800ccbc:	6313      	str	r3, [r2, #48]	; 0x30
 800ccbe:	4b49      	ldr	r3, [pc, #292]	; (800cde4 <MX_GPIO_Init+0x168>)
 800ccc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccc2:	f003 0301 	and.w	r3, r3, #1
 800ccc6:	60fb      	str	r3, [r7, #12]
 800ccc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ccca:	2300      	movs	r3, #0
 800cccc:	60bb      	str	r3, [r7, #8]
 800ccce:	4b45      	ldr	r3, [pc, #276]	; (800cde4 <MX_GPIO_Init+0x168>)
 800ccd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccd2:	4a44      	ldr	r2, [pc, #272]	; (800cde4 <MX_GPIO_Init+0x168>)
 800ccd4:	f043 0302 	orr.w	r3, r3, #2
 800ccd8:	6313      	str	r3, [r2, #48]	; 0x30
 800ccda:	4b42      	ldr	r3, [pc, #264]	; (800cde4 <MX_GPIO_Init+0x168>)
 800ccdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccde:	f003 0302 	and.w	r3, r3, #2
 800cce2:	60bb      	str	r3, [r7, #8]
 800cce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cce6:	2300      	movs	r3, #0
 800cce8:	607b      	str	r3, [r7, #4]
 800ccea:	4b3e      	ldr	r3, [pc, #248]	; (800cde4 <MX_GPIO_Init+0x168>)
 800ccec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccee:	4a3d      	ldr	r2, [pc, #244]	; (800cde4 <MX_GPIO_Init+0x168>)
 800ccf0:	f043 0308 	orr.w	r3, r3, #8
 800ccf4:	6313      	str	r3, [r2, #48]	; 0x30
 800ccf6:	4b3b      	ldr	r3, [pc, #236]	; (800cde4 <MX_GPIO_Init+0x168>)
 800ccf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccfa:	f003 0308 	and.w	r3, r3, #8
 800ccfe:	607b      	str	r3, [r7, #4]
 800cd00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800cd02:	2200      	movs	r2, #0
 800cd04:	f24e 213c 	movw	r1, #57916	; 0xe23c
 800cd08:	4837      	ldr	r0, [pc, #220]	; (800cde8 <MX_GPIO_Init+0x16c>)
 800cd0a:	f7f5 fafb 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800cd14:	4835      	ldr	r0, [pc, #212]	; (800cdec <MX_GPIO_Init+0x170>)
 800cd16:	f7f5 faf5 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f242 7103 	movw	r1, #9987	; 0x2703
 800cd20:	4833      	ldr	r0, [pc, #204]	; (800cdf0 <MX_GPIO_Init+0x174>)
 800cd22:	f7f5 faef 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800cd26:	2200      	movs	r2, #0
 800cd28:	2104      	movs	r1, #4
 800cd2a:	4832      	ldr	r0, [pc, #200]	; (800cdf4 <MX_GPIO_Init+0x178>)
 800cd2c:	f7f5 faea 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800cd30:	f24e 233c 	movw	r3, #57916	; 0xe23c
 800cd34:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cd36:	2301      	movs	r3, #1
 800cd38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cd42:	f107 0314 	add.w	r3, r7, #20
 800cd46:	4619      	mov	r1, r3
 800cd48:	4827      	ldr	r0, [pc, #156]	; (800cde8 <MX_GPIO_Init+0x16c>)
 800cd4a:	f7f5 f929 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800cd4e:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800cd52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cd54:	2301      	movs	r3, #1
 800cd56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd60:	f107 0314 	add.w	r3, r7, #20
 800cd64:	4619      	mov	r1, r3
 800cd66:	4821      	ldr	r0, [pc, #132]	; (800cdec <MX_GPIO_Init+0x170>)
 800cd68:	f7f5 f91a 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800cd6c:	f242 7303 	movw	r3, #9987	; 0x2703
 800cd70:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cd72:	2301      	movs	r3, #1
 800cd74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd76:	2300      	movs	r3, #0
 800cd78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cd7e:	f107 0314 	add.w	r3, r7, #20
 800cd82:	4619      	mov	r1, r3
 800cd84:	481a      	ldr	r0, [pc, #104]	; (800cdf0 <MX_GPIO_Init+0x174>)
 800cd86:	f7f5 f90b 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800cd8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cd90:	2300      	movs	r3, #0
 800cd92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cd94:	2301      	movs	r3, #1
 800cd96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cd98:	f107 0314 	add.w	r3, r7, #20
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	4814      	ldr	r0, [pc, #80]	; (800cdf0 <MX_GPIO_Init+0x174>)
 800cda0:	f7f5 f8fe 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800cda4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cda8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cdb2:	f107 0314 	add.w	r3, r7, #20
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	480c      	ldr	r0, [pc, #48]	; (800cdec <MX_GPIO_Init+0x170>)
 800cdba:	f7f5 f8f1 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800cdbe:	2304      	movs	r3, #4
 800cdc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cdce:	f107 0314 	add.w	r3, r7, #20
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	4807      	ldr	r0, [pc, #28]	; (800cdf4 <MX_GPIO_Init+0x178>)
 800cdd6:	f7f5 f8e3 	bl	8001fa0 <HAL_GPIO_Init>

}
 800cdda:	bf00      	nop
 800cddc:	3728      	adds	r7, #40	; 0x28
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	40023800 	.word	0x40023800
 800cde8:	40020800 	.word	0x40020800
 800cdec:	40020000 	.word	0x40020000
 800cdf0:	40020400 	.word	0x40020400
 800cdf4:	40020c00 	.word	0x40020c00

0800cdf8 <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b08a      	sub	sp, #40	; 0x28
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ce02:	2360      	movs	r3, #96	; 0x60
 800ce04:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ce06:	2300      	movs	r3, #0
 800ce08:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 800ce0e:	4a15      	ldr	r2, [pc, #84]	; (800ce64 <buzzer+0x6c>)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	fb92 f3f3 	sdiv	r3, r2, r3
 800ce16:	4a14      	ldr	r2, [pc, #80]	; (800ce68 <buzzer+0x70>)
 800ce18:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 800ce1a:	4b13      	ldr	r3, [pc, #76]	; (800ce68 <buzzer+0x70>)
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	4b13      	ldr	r3, [pc, #76]	; (800ce6c <buzzer+0x74>)
 800ce20:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 10;
 800ce22:	4b11      	ldr	r3, [pc, #68]	; (800ce68 <buzzer+0x70>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4a12      	ldr	r2, [pc, #72]	; (800ce70 <buzzer+0x78>)
 800ce28:	fb82 1203 	smull	r1, r2, r2, r3
 800ce2c:	1092      	asrs	r2, r2, #2
 800ce2e:	17db      	asrs	r3, r3, #31
 800ce30:	1ad3      	subs	r3, r2, r3
 800ce32:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_2);
 800ce34:	f107 030c 	add.w	r3, r7, #12
 800ce38:	2204      	movs	r2, #4
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	480d      	ldr	r0, [pc, #52]	; (800ce74 <buzzer+0x7c>)
 800ce3e:	f7f6 fec5 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800ce42:	2104      	movs	r1, #4
 800ce44:	480b      	ldr	r0, [pc, #44]	; (800ce74 <buzzer+0x7c>)
 800ce46:	f7f6 fc59 	bl	80036fc <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7f4 f8e5 	bl	800101c <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800ce52:	2104      	movs	r1, #4
 800ce54:	4807      	ldr	r0, [pc, #28]	; (800ce74 <buzzer+0x7c>)
 800ce56:	f7f6 fc8f 	bl	8003778 <HAL_TIM_PWM_Stop>
}
 800ce5a:	bf00      	nop
 800ce5c:	3728      	adds	r7, #40	; 0x28
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	000f4240 	.word	0x000f4240
 800ce68:	200002c4 	.word	0x200002c4
 800ce6c:	40000400 	.word	0x40000400
 800ce70:	66666667 	.word	0x66666667
 800ce74:	20000aa8 	.word	0x20000aa8

0800ce78 <get_adc_value>:


int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b086      	sub	sp, #24
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 800ce82:	f107 0308 	add.w	r3, r7, #8
 800ce86:	2200      	movs	r2, #0
 800ce88:	601a      	str	r2, [r3, #0]
 800ce8a:	605a      	str	r2, [r3, #4]
 800ce8c:	609a      	str	r2, [r3, #8]
 800ce8e:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 800ce94:	2301      	movs	r3, #1
 800ce96:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 800cea0:	f107 0308 	add.w	r3, r7, #8
 800cea4:	4619      	mov	r1, r3
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f7f4 fa76 	bl	8001398 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f7f4 f91b 	bl	80010e8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 800ceb2:	2164      	movs	r1, #100	; 0x64
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f7f4 f9dd 	bl	8001274 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f7f4 fa5e 	bl	800137c <HAL_ADC_GetValue>
 800cec0:	4603      	mov	r3, r0
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3718      	adds	r7, #24
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}

0800ceca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ceca:	b480      	push	{r7}
 800cecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800cece:	bf00      	nop
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <search_init>:

#include "global.h"

void search_init(void){
 800ced8:	b580      	push	{r7, lr}
 800ceda:	af00      	add	r7, sp, #0

	//----a探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 800cedc:	4b09      	ldr	r3, [pc, #36]	; (800cf04 <search_init+0x2c>)
 800cede:	2209      	movs	r2, #9
 800cee0:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 800cee2:	4b09      	ldr	r3, [pc, #36]	; (800cf08 <search_init+0x30>)
 800cee4:	2206      	movs	r2, #6
 800cee6:	701a      	strb	r2, [r3, #0]
	map_Init();						//aマップの初期化
 800cee8:	f000 ff56 	bl	800dd98 <map_Init>
	mouse.x = 0;
 800ceec:	4b07      	ldr	r3, [pc, #28]	; (800cf0c <search_init+0x34>)
 800ceee:	2200      	movs	r2, #0
 800cef0:	701a      	strb	r2, [r3, #0]
	mouse.y = 0;					//a現在地の初期化
 800cef2:	4b06      	ldr	r3, [pc, #24]	; (800cf0c <search_init+0x34>)
 800cef4:	2200      	movs	r2, #0
 800cef6:	705a      	strb	r2, [r3, #1]
	mouse.dir = 0;					//aマウスの向きの初期化
 800cef8:	4b04      	ldr	r3, [pc, #16]	; (800cf0c <search_init+0x34>)
 800cefa:	2200      	movs	r2, #0
 800cefc:	709a      	strb	r2, [r3, #2]
}
 800cefe:	bf00      	nop
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	20000bb9 	.word	0x20000bb9
 800cf08:	20000b54 	.word	0x20000b54
 800cf0c:	20000c1c 	.word	0x20000c1c

0800cf10 <searchA>:
//searchA
//a1区画走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchA(){
 800cf10:	b580      	push	{r7, lr}
 800cf12:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800cf14:	4b37      	ldr	r3, [pc, #220]	; (800cff4 <searchA+0xe4>)
 800cf16:	881b      	ldrh	r3, [r3, #0]
 800cf18:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d001      	beq.n	800cf26 <searchA+0x16>
		load_map_from_eeprom();
 800cf22:	f002 fdb1 	bl	800fa88 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800cf26:	f002 fe27 	bl	800fb78 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800cf2a:	4b33      	ldr	r3, [pc, #204]	; (800cff8 <searchA+0xe8>)
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800cf32:	b2da      	uxtb	r2, r3
 800cf34:	4b30      	ldr	r3, [pc, #192]	; (800cff8 <searchA+0xe8>)
 800cf36:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800cf38:	f000 ff9a 	bl	800de70 <write_map>

	//====a歩数マップ・経路作成====
	r_cnt = 0;												//a経路カウンタの初期化
 800cf3c:	4b2f      	ldr	r3, [pc, #188]	; (800cffc <searchA+0xec>)
 800cf3e:	2200      	movs	r2, #0
 800cf40:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800cf42:	f001 f995 	bl	800e270 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800cf46:	f001 fcd1 	bl	800e8ec <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800cf4a:	4b2c      	ldr	r3, [pc, #176]	; (800cffc <searchA+0xec>)
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	1c5a      	adds	r2, r3, #1
 800cf50:	b2d1      	uxtb	r1, r2
 800cf52:	4a2a      	ldr	r2, [pc, #168]	; (800cffc <searchA+0xec>)
 800cf54:	7011      	strb	r1, [r2, #0]
 800cf56:	461a      	mov	r2, r3
 800cf58:	4b29      	ldr	r3, [pc, #164]	; (800d000 <searchA+0xf0>)
 800cf5a:	5c9b      	ldrb	r3, [r3, r2]
 800cf5c:	2b22      	cmp	r3, #34	; 0x22
 800cf5e:	d00b      	beq.n	800cf78 <searchA+0x68>
 800cf60:	2b22      	cmp	r3, #34	; 0x22
 800cf62:	dc02      	bgt.n	800cf6a <searchA+0x5a>
 800cf64:	2b11      	cmp	r3, #17
 800cf66:	d012      	beq.n	800cf8e <searchA+0x7e>
 800cf68:	e015      	b.n	800cf96 <searchA+0x86>
 800cf6a:	2b44      	cmp	r3, #68	; 0x44
 800cf6c:	d001      	beq.n	800cf72 <searchA+0x62>
 800cf6e:	2b88      	cmp	r3, #136	; 0x88
			//----a前進----
			case 0x88:
				break;
 800cf70:	e011      	b.n	800cf96 <searchA+0x86>
			//----a右折----
			case 0x44:
				rotate_R90();								//a右回転
 800cf72:	f7f8 ffbd 	bl	8005ef0 <rotate_R90>
				break;
 800cf76:	e00e      	b.n	800cf96 <searchA+0x86>
			//----180回転----
			case 0x22:
				rotate_180();								//180度回転
 800cf78:	f7f9 f972 	bl	8006260 <rotate_180>
				if(wall_info & 0x88){
 800cf7c:	4b1e      	ldr	r3, [pc, #120]	; (800cff8 <searchA+0xe8>)
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d005      	beq.n	800cf94 <searchA+0x84>
					set_position();
 800cf88:	f7f8 fc62 	bl	8005850 <set_position>
				}
				break;
 800cf8c:	e002      	b.n	800cf94 <searchA+0x84>
			//----a左折----
			case 0x11:
				rotate_L90();								//a左回転
 800cf8e:	f7f9 f88b 	bl	80060a8 <rotate_L90>
				break;
 800cf92:	e000      	b.n	800cf96 <searchA+0x86>
				break;
 800cf94:	bf00      	nop
		}

		drive_wait();
 800cf96:	2032      	movs	r0, #50	; 0x32
 800cf98:	f7f4 f840 	bl	800101c <HAL_Delay>
		one_section();										//a前進する
 800cf9c:	f7f8 fde8 	bl	8005b70 <one_section>
		drive_wait();
 800cfa0:	2032      	movs	r0, #50	; 0x32
 800cfa2:	f7f4 f83b 	bl	800101c <HAL_Delay>

		adv_pos();											//aマイクロマウス内部位置情報でも前進処理
 800cfa6:	f000 fe9f 	bl	800dce8 <adv_pos>
		conf_route();										//a最短経路で進行可能か判定
 800cfaa:	f000 fed7 	bl	800dd5c <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));		//a現在座標とgoal座標が等しくなるまで実行
 800cfae:	4b15      	ldr	r3, [pc, #84]	; (800d004 <searchA+0xf4>)
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	b2da      	uxtb	r2, r3
 800cfb4:	4b14      	ldr	r3, [pc, #80]	; (800d008 <searchA+0xf8>)
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d1c6      	bne.n	800cf4a <searchA+0x3a>
 800cfbc:	4b11      	ldr	r3, [pc, #68]	; (800d004 <searchA+0xf4>)
 800cfbe:	785b      	ldrb	r3, [r3, #1]
 800cfc0:	b2da      	uxtb	r2, r3
 800cfc2:	4b12      	ldr	r3, [pc, #72]	; (800d00c <searchA+0xfc>)
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d1bf      	bne.n	800cf4a <searchA+0x3a>

	printf("goal\n");
 800cfca:	4811      	ldr	r0, [pc, #68]	; (800d010 <searchA+0x100>)
 800cfcc:	f003 fc50 	bl	8010870 <puts>
	HAL_Delay(500);										//aスタートでは***2秒以上***停止しなくてはならない
 800cfd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800cfd4:	f7f4 f822 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800cfd8:	f7f9 f942 	bl	8006260 <rotate_180>

	if(!MF.FLAG.SCND){
 800cfdc:	4b05      	ldr	r3, [pc, #20]	; (800cff4 <searchA+0xe4>)
 800cfde:	881b      	ldrh	r3, [r3, #0]
 800cfe0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d101      	bne.n	800cfee <searchA+0xde>
		store_map_in_eeprom();
 800cfea:	f002 fd13 	bl	800fa14 <store_map_in_eeprom>
	}
}
 800cfee:	bf00      	nop
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	20000f74 	.word	0x20000f74
 800cff8:	200002c8 	.word	0x200002c8
 800cffc:	200015dc 	.word	0x200015dc
 800d000:	20000c64 	.word	0x20000c64
 800d004:	20000c1c 	.word	0x20000c1c
 800d008:	20000bb9 	.word	0x20000bb9
 800d00c:	20000b54 	.word	0x20000b54
 800d010:	08011f00 	.word	0x08011f00

0800d014 <searchB>:
//searchB
//a連続走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchB(){
 800d014:	b580      	push	{r7, lr}
 800d016:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800d018:	4b3c      	ldr	r3, [pc, #240]	; (800d10c <searchB+0xf8>)
 800d01a:	881b      	ldrh	r3, [r3, #0]
 800d01c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d020:	b2db      	uxtb	r3, r3
 800d022:	2b00      	cmp	r3, #0
 800d024:	d001      	beq.n	800d02a <searchB+0x16>
		load_map_from_eeprom();
 800d026:	f002 fd2f 	bl	800fa88 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800d02a:	f002 fda5 	bl	800fb78 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800d02e:	4b38      	ldr	r3, [pc, #224]	; (800d110 <searchB+0xfc>)
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800d036:	b2da      	uxtb	r2, r3
 800d038:	4b35      	ldr	r3, [pc, #212]	; (800d110 <searchB+0xfc>)
 800d03a:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800d03c:	f000 ff18 	bl	800de70 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800d040:	f7f8 fc1c 	bl	800587c <start_sectionA>
	adv_pos();
 800d044:	f000 fe50 	bl	800dce8 <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 800d048:	f000 ff12 	bl	800de70 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800d04c:	4b31      	ldr	r3, [pc, #196]	; (800d114 <searchB+0x100>)
 800d04e:	2200      	movs	r2, #0
 800d050:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800d052:	f001 f90d 	bl	800e270 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800d056:	f001 fc49 	bl	800e8ec <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800d05a:	4b2e      	ldr	r3, [pc, #184]	; (800d114 <searchB+0x100>)
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	1c5a      	adds	r2, r3, #1
 800d060:	b2d1      	uxtb	r1, r2
 800d062:	4a2c      	ldr	r2, [pc, #176]	; (800d114 <searchB+0x100>)
 800d064:	7011      	strb	r1, [r2, #0]
 800d066:	461a      	mov	r2, r3
 800d068:	4b2b      	ldr	r3, [pc, #172]	; (800d118 <searchB+0x104>)
 800d06a:	5c9b      	ldrb	r3, [r3, r2]
 800d06c:	2b22      	cmp	r3, #34	; 0x22
 800d06e:	d012      	beq.n	800d096 <searchB+0x82>
 800d070:	2b22      	cmp	r3, #34	; 0x22
 800d072:	dc02      	bgt.n	800d07a <searchB+0x66>
 800d074:	2b11      	cmp	r3, #17
 800d076:	d01d      	beq.n	800d0b4 <searchB+0xa0>
 800d078:	e023      	b.n	800d0c2 <searchB+0xae>
 800d07a:	2b44      	cmp	r3, #68	; 0x44
 800d07c:	d004      	beq.n	800d088 <searchB+0x74>
 800d07e:	2b88      	cmp	r3, #136	; 0x88
 800d080:	d11f      	bne.n	800d0c2 <searchB+0xae>
			//----a前進----
			case 0x88:
				one_sectionU();
 800d082:	f7f8 ff1d 	bl	8005ec0 <one_sectionU>
				break;
 800d086:	e01c      	b.n	800d0c2 <searchB+0xae>
			//----a右折----
			case 0x44:
				half_sectionD();
 800d088:	f7f8 fd16 	bl	8005ab8 <half_sectionD>
				rotate_R90();
 800d08c:	f7f8 ff30 	bl	8005ef0 <rotate_R90>
				half_sectionA();
 800d090:	f7f8 fcc8 	bl	8005a24 <half_sectionA>
				break;
 800d094:	e015      	b.n	800d0c2 <searchB+0xae>
			//----180回転----
			case 0x22:
				half_sectionD();
 800d096:	f7f8 fd0f 	bl	8005ab8 <half_sectionD>
				rotate_180();
 800d09a:	f7f9 f8e1 	bl	8006260 <rotate_180>
				if(wall_info & 0x88){
 800d09e:	4b1c      	ldr	r3, [pc, #112]	; (800d110 <searchB+0xfc>)
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d001      	beq.n	800d0ae <searchB+0x9a>
					set_position();
 800d0aa:	f7f8 fbd1 	bl	8005850 <set_position>
				}
				half_sectionA();
 800d0ae:	f7f8 fcb9 	bl	8005a24 <half_sectionA>
				break;
 800d0b2:	e006      	b.n	800d0c2 <searchB+0xae>
			//----a左折----
			case 0x11:
				half_sectionD();
 800d0b4:	f7f8 fd00 	bl	8005ab8 <half_sectionD>
				rotate_L90();
 800d0b8:	f7f8 fff6 	bl	80060a8 <rotate_L90>
				half_sectionA();
 800d0bc:	f7f8 fcb2 	bl	8005a24 <half_sectionA>
				break;
 800d0c0:	bf00      	nop
		}
		adv_pos();
 800d0c2:	f000 fe11 	bl	800dce8 <adv_pos>
		conf_route();
 800d0c6:	f000 fe49 	bl	800dd5c <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800d0ca:	4b14      	ldr	r3, [pc, #80]	; (800d11c <searchB+0x108>)
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	b2da      	uxtb	r2, r3
 800d0d0:	4b13      	ldr	r3, [pc, #76]	; (800d120 <searchB+0x10c>)
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d1c0      	bne.n	800d05a <searchB+0x46>
 800d0d8:	4b10      	ldr	r3, [pc, #64]	; (800d11c <searchB+0x108>)
 800d0da:	785b      	ldrb	r3, [r3, #1]
 800d0dc:	b2da      	uxtb	r2, r3
 800d0de:	4b11      	ldr	r3, [pc, #68]	; (800d124 <searchB+0x110>)
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d1b9      	bne.n	800d05a <searchB+0x46>

	half_sectionD();
 800d0e6:	f7f8 fce7 	bl	8005ab8 <half_sectionD>

	HAL_Delay(500);
 800d0ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d0ee:	f7f3 ff95 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800d0f2:	f7f9 f8b5 	bl	8006260 <rotate_180>

	if(!MF.FLAG.SCND){
 800d0f6:	4b05      	ldr	r3, [pc, #20]	; (800d10c <searchB+0xf8>)
 800d0f8:	881b      	ldrh	r3, [r3, #0]
 800d0fa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	2b00      	cmp	r3, #0
 800d102:	d101      	bne.n	800d108 <searchB+0xf4>
		store_map_in_eeprom();
 800d104:	f002 fc86 	bl	800fa14 <store_map_in_eeprom>
	}
}
 800d108:	bf00      	nop
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	20000f74 	.word	0x20000f74
 800d110:	200002c8 	.word	0x200002c8
 800d114:	200015dc 	.word	0x200015dc
 800d118:	20000c64 	.word	0x20000c64
 800d11c:	20000c1c 	.word	0x20000c1c
 800d120:	20000bb9 	.word	0x20000bb9
 800d124:	20000b54 	.word	0x20000b54

0800d128 <searchC>:
//searchC
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC(){
 800d128:	b590      	push	{r4, r7, lr}
 800d12a:	b083      	sub	sp, #12
 800d12c:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800d12e:	4b82      	ldr	r3, [pc, #520]	; (800d338 <searchC+0x210>)
 800d130:	881b      	ldrh	r3, [r3, #0]
 800d132:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d136:	b2db      	uxtb	r3, r3
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d001      	beq.n	800d140 <searchC+0x18>
		load_map_from_eeprom();
 800d13c:	f002 fca4 	bl	800fa88 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800d140:	4b7d      	ldr	r3, [pc, #500]	; (800d338 <searchC+0x210>)
 800d142:	881b      	ldrh	r3, [r3, #0]
 800d144:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d101      	bne.n	800d152 <searchC+0x2a>
 800d14e:	f002 fd13 	bl	800fb78 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800d152:	4b79      	ldr	r3, [pc, #484]	; (800d338 <searchC+0x210>)
 800d154:	881b      	ldrh	r3, [r3, #0]
 800d156:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d15a:	b2db      	uxtb	r3, r3
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d106      	bne.n	800d16e <searchC+0x46>
 800d160:	4b76      	ldr	r3, [pc, #472]	; (800d33c <searchC+0x214>)
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800d168:	b2da      	uxtb	r2, r3
 800d16a:	4b74      	ldr	r3, [pc, #464]	; (800d33c <searchC+0x214>)
 800d16c:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800d16e:	4b72      	ldr	r3, [pc, #456]	; (800d338 <searchC+0x210>)
 800d170:	881b      	ldrh	r3, [r3, #0]
 800d172:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d176:	b2db      	uxtb	r3, r3
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d101      	bne.n	800d180 <searchC+0x58>
 800d17c:	f000 fe78 	bl	800de70 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800d180:	f7f8 fb7c 	bl	800587c <start_sectionA>
	adv_pos();
 800d184:	f000 fdb0 	bl	800dce8 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800d188:	4b6b      	ldr	r3, [pc, #428]	; (800d338 <searchC+0x210>)
 800d18a:	881b      	ldrh	r3, [r3, #0]
 800d18c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d190:	b2db      	uxtb	r3, r3
 800d192:	2b00      	cmp	r3, #0
 800d194:	d101      	bne.n	800d19a <searchC+0x72>
 800d196:	f000 fe6b 	bl	800de70 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800d19a:	4b69      	ldr	r3, [pc, #420]	; (800d340 <searchC+0x218>)
 800d19c:	2200      	movs	r2, #0
 800d19e:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800d1a0:	f001 f866 	bl	800e270 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800d1a4:	f001 fba2 	bl	800e8ec <make_route>
	uint8_t x, y;											//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800d1a8:	4b65      	ldr	r3, [pc, #404]	; (800d340 <searchC+0x218>)
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	1c5a      	adds	r2, r3, #1
 800d1ae:	b2d1      	uxtb	r1, r2
 800d1b0:	4a63      	ldr	r2, [pc, #396]	; (800d340 <searchC+0x218>)
 800d1b2:	7011      	strb	r1, [r2, #0]
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	4b63      	ldr	r3, [pc, #396]	; (800d344 <searchC+0x21c>)
 800d1b8:	5c9b      	ldrb	r3, [r3, r2]
 800d1ba:	2b22      	cmp	r3, #34	; 0x22
 800d1bc:	d06e      	beq.n	800d29c <searchC+0x174>
 800d1be:	2b22      	cmp	r3, #34	; 0x22
 800d1c0:	dc02      	bgt.n	800d1c8 <searchC+0xa0>
 800d1c2:	2b11      	cmp	r3, #17
 800d1c4:	d07a      	beq.n	800d2bc <searchC+0x194>
 800d1c6:	e07c      	b.n	800d2c2 <searchC+0x19a>
 800d1c8:	2b44      	cmp	r3, #68	; 0x44
 800d1ca:	d064      	beq.n	800d296 <searchC+0x16e>
 800d1cc:	2b88      	cmp	r3, #136	; 0x88
 800d1ce:	d178      	bne.n	800d2c2 <searchC+0x19a>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800d1d0:	4b5b      	ldr	r3, [pc, #364]	; (800d340 <searchC+0x218>)
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	4b5b      	ldr	r3, [pc, #364]	; (800d344 <searchC+0x21c>)
 800d1d8:	5c9b      	ldrb	r3, [r3, r2]
 800d1da:	2b88      	cmp	r3, #136	; 0x88
 800d1dc:	d14e      	bne.n	800d27c <searchC+0x154>
 800d1de:	4b56      	ldr	r3, [pc, #344]	; (800d338 <searchC+0x210>)
 800d1e0:	881b      	ldrh	r3, [r3, #0]
 800d1e2:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d047      	beq.n	800d27c <searchC+0x154>
					x = mouse.x;
 800d1ec:	4b56      	ldr	r3, [pc, #344]	; (800d348 <searchC+0x220>)
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	71fb      	strb	r3, [r7, #7]
					y = mouse.y;
 800d1f2:	4b55      	ldr	r3, [pc, #340]	; (800d348 <searchC+0x220>)
 800d1f4:	785b      	ldrb	r3, [r3, #1]
 800d1f6:	71bb      	strb	r3, [r7, #6]
					adv_pos();
 800d1f8:	f000 fd76 	bl	800dce8 <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800d1fc:	4b52      	ldr	r3, [pc, #328]	; (800d348 <searchC+0x220>)
 800d1fe:	785b      	ldrb	r3, [r3, #1]
 800d200:	b2db      	uxtb	r3, r3
 800d202:	4618      	mov	r0, r3
 800d204:	4b50      	ldr	r3, [pc, #320]	; (800d348 <searchC+0x220>)
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	4619      	mov	r1, r3
 800d20c:	4a4f      	ldr	r2, [pc, #316]	; (800d34c <searchC+0x224>)
 800d20e:	0103      	lsls	r3, r0, #4
 800d210:	4413      	add	r3, r2
 800d212:	440b      	add	r3, r1
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	f003 030f 	and.w	r3, r3, #15
 800d21a:	4a4b      	ldr	r2, [pc, #300]	; (800d348 <searchC+0x220>)
 800d21c:	7852      	ldrb	r2, [r2, #1]
 800d21e:	b2d2      	uxtb	r2, r2
 800d220:	4614      	mov	r4, r2
 800d222:	4a49      	ldr	r2, [pc, #292]	; (800d348 <searchC+0x220>)
 800d224:	7812      	ldrb	r2, [r2, #0]
 800d226:	b2d2      	uxtb	r2, r2
 800d228:	4610      	mov	r0, r2
 800d22a:	4948      	ldr	r1, [pc, #288]	; (800d34c <searchC+0x224>)
 800d22c:	0122      	lsls	r2, r4, #4
 800d22e:	440a      	add	r2, r1
 800d230:	4402      	add	r2, r0
 800d232:	7812      	ldrb	r2, [r2, #0]
 800d234:	0912      	lsrs	r2, r2, #4
 800d236:	b2d2      	uxtb	r2, r2
 800d238:	4293      	cmp	r3, r2
 800d23a:	d10c      	bne.n	800d256 <searchC+0x12e>
						if(!H_accel_flag){
 800d23c:	4b44      	ldr	r3, [pc, #272]	; (800d350 <searchC+0x228>)
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d105      	bne.n	800d250 <searchC+0x128>
							one_sectionA();
 800d244:	f7f8 fc9c 	bl	8005b80 <one_sectionA>
							H_accel_flag = 1;
 800d248:	4b41      	ldr	r3, [pc, #260]	; (800d350 <searchC+0x228>)
 800d24a:	2201      	movs	r2, #1
 800d24c:	701a      	strb	r2, [r3, #0]
 800d24e:	e00e      	b.n	800d26e <searchC+0x146>
						}else{
							one_sectionU();
 800d250:	f7f8 fe36 	bl	8005ec0 <one_sectionU>
 800d254:	e00b      	b.n	800d26e <searchC+0x146>
						}
					}else if(H_accel_flag){
 800d256:	4b3e      	ldr	r3, [pc, #248]	; (800d350 <searchC+0x228>)
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d005      	beq.n	800d26a <searchC+0x142>
						one_sectionD();
 800d25e:	f7f8 fcf5 	bl	8005c4c <one_sectionD>
						H_accel_flag = 0;
 800d262:	4b3b      	ldr	r3, [pc, #236]	; (800d350 <searchC+0x228>)
 800d264:	2200      	movs	r2, #0
 800d266:	701a      	strb	r2, [r3, #0]
 800d268:	e001      	b.n	800d26e <searchC+0x146>
					}else{
						one_sectionU();
 800d26a:	f7f8 fe29 	bl	8005ec0 <one_sectionU>
					}
					mouse.x = x;
 800d26e:	4a36      	ldr	r2, [pc, #216]	; (800d348 <searchC+0x220>)
 800d270:	79fb      	ldrb	r3, [r7, #7]
 800d272:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800d274:	4a34      	ldr	r2, [pc, #208]	; (800d348 <searchC+0x220>)
 800d276:	79bb      	ldrb	r3, [r7, #6]
 800d278:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					H_accel_flag = 0;
				}else{
					one_sectionU();
				}
				break;
 800d27a:	e022      	b.n	800d2c2 <searchC+0x19a>
				}else if(H_accel_flag){
 800d27c:	4b34      	ldr	r3, [pc, #208]	; (800d350 <searchC+0x228>)
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d005      	beq.n	800d290 <searchC+0x168>
					one_sectionD();
 800d284:	f7f8 fce2 	bl	8005c4c <one_sectionD>
					H_accel_flag = 0;
 800d288:	4b31      	ldr	r3, [pc, #196]	; (800d350 <searchC+0x228>)
 800d28a:	2200      	movs	r2, #0
 800d28c:	701a      	strb	r2, [r3, #0]
				break;
 800d28e:	e018      	b.n	800d2c2 <searchC+0x19a>
					one_sectionU();
 800d290:	f7f8 fe16 	bl	8005ec0 <one_sectionU>
				break;
 800d294:	e015      	b.n	800d2c2 <searchC+0x19a>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800d296:	f7f9 f8bb 	bl	8006410 <slalom_R90>
				break;
 800d29a:	e012      	b.n	800d2c2 <searchC+0x19a>
			//----180回転----
			case 0x22:
				half_sectionD();
 800d29c:	f7f8 fc0c 	bl	8005ab8 <half_sectionD>
				rotate_180();
 800d2a0:	f7f8 ffde 	bl	8006260 <rotate_180>
				if(wall_info & 0x88){
 800d2a4:	4b25      	ldr	r3, [pc, #148]	; (800d33c <searchC+0x214>)
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d002      	beq.n	800d2b6 <searchC+0x18e>
					set_position();
 800d2b0:	f7f8 face 	bl	8005850 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800d2b4:	e005      	b.n	800d2c2 <searchC+0x19a>
					half_sectionA();
 800d2b6:	f7f8 fbb5 	bl	8005a24 <half_sectionA>
				break;
 800d2ba:	e002      	b.n	800d2c2 <searchC+0x19a>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800d2bc:	f7f9 f98e 	bl	80065dc <slalom_L90>
				break;
 800d2c0:	bf00      	nop
		}
		adv_pos();
 800d2c2:	f000 fd11 	bl	800dce8 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800d2c6:	4b1c      	ldr	r3, [pc, #112]	; (800d338 <searchC+0x210>)
 800d2c8:	881b      	ldrh	r3, [r3, #0]
 800d2ca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d101      	bne.n	800d2d8 <searchC+0x1b0>
 800d2d4:	f000 fd42 	bl	800dd5c <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800d2d8:	4b1b      	ldr	r3, [pc, #108]	; (800d348 <searchC+0x220>)
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	b2da      	uxtb	r2, r3
 800d2de:	4b1d      	ldr	r3, [pc, #116]	; (800d354 <searchC+0x22c>)
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	f47f af60 	bne.w	800d1a8 <searchC+0x80>
 800d2e8:	4b17      	ldr	r3, [pc, #92]	; (800d348 <searchC+0x220>)
 800d2ea:	785b      	ldrb	r3, [r3, #1]
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	4b1a      	ldr	r3, [pc, #104]	; (800d358 <searchC+0x230>)
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	f47f af58 	bne.w	800d1a8 <searchC+0x80>

	half_sectionD();
 800d2f8:	f7f8 fbde 	bl	8005ab8 <half_sectionD>

	HAL_Delay(500);
 800d2fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d300:	f7f3 fe8c 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800d304:	f7f8 ffac 	bl	8006260 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800d308:	2064      	movs	r0, #100	; 0x64
 800d30a:	f7f8 f853 	bl	80053b4 <driveC2>
	degree_z = target_degree_z;
 800d30e:	4b13      	ldr	r3, [pc, #76]	; (800d35c <searchC+0x234>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4a13      	ldr	r2, [pc, #76]	; (800d360 <searchC+0x238>)
 800d314:	6013      	str	r3, [r2, #0]
	start_flag = 0;
 800d316:	4b13      	ldr	r3, [pc, #76]	; (800d364 <searchC+0x23c>)
 800d318:	2200      	movs	r2, #0
 800d31a:	701a      	strb	r2, [r3, #0]

	if(!MF.FLAG.SCND){
 800d31c:	4b06      	ldr	r3, [pc, #24]	; (800d338 <searchC+0x210>)
 800d31e:	881b      	ldrh	r3, [r3, #0]
 800d320:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d324:	b2db      	uxtb	r3, r3
 800d326:	2b00      	cmp	r3, #0
 800d328:	d101      	bne.n	800d32e <searchC+0x206>
		store_map_in_eeprom();
 800d32a:	f002 fb73 	bl	800fa14 <store_map_in_eeprom>
	}
}
 800d32e:	bf00      	nop
 800d330:	370c      	adds	r7, #12
 800d332:	46bd      	mov	sp, r7
 800d334:	bd90      	pop	{r4, r7, pc}
 800d336:	bf00      	nop
 800d338:	20000f74 	.word	0x20000f74
 800d33c:	200002c8 	.word	0x200002c8
 800d340:	200015dc 	.word	0x200015dc
 800d344:	20000c64 	.word	0x20000c64
 800d348:	20000c1c 	.word	0x20000c1c
 800d34c:	200001ac 	.word	0x200001ac
 800d350:	200002c9 	.word	0x200002c9
 800d354:	20000bb9 	.word	0x20000bb9
 800d358:	20000b54 	.word	0x20000b54
 800d35c:	20000c08 	.word	0x20000c08
 800d360:	20000b64 	.word	0x20000b64
 800d364:	200015d4 	.word	0x200015d4

0800d368 <searchD>:
//searchD
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD(){
 800d368:	b580      	push	{r7, lr}
 800d36a:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800d36c:	4b74      	ldr	r3, [pc, #464]	; (800d540 <searchD+0x1d8>)
 800d36e:	881b      	ldrh	r3, [r3, #0]
 800d370:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d374:	b2db      	uxtb	r3, r3
 800d376:	2b00      	cmp	r3, #0
 800d378:	d001      	beq.n	800d37e <searchD+0x16>
		load_map_from_eeprom();
 800d37a:	f002 fb85 	bl	800fa88 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800d37e:	4b70      	ldr	r3, [pc, #448]	; (800d540 <searchD+0x1d8>)
 800d380:	881b      	ldrh	r3, [r3, #0]
 800d382:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d386:	b2db      	uxtb	r3, r3
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d101      	bne.n	800d390 <searchD+0x28>
 800d38c:	f002 fbf4 	bl	800fb78 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800d390:	4b6b      	ldr	r3, [pc, #428]	; (800d540 <searchD+0x1d8>)
 800d392:	881b      	ldrh	r3, [r3, #0]
 800d394:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d106      	bne.n	800d3ac <searchD+0x44>
 800d39e:	4b69      	ldr	r3, [pc, #420]	; (800d544 <searchD+0x1dc>)
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800d3a6:	b2da      	uxtb	r2, r3
 800d3a8:	4b66      	ldr	r3, [pc, #408]	; (800d544 <searchD+0x1dc>)
 800d3aa:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800d3ac:	4b64      	ldr	r3, [pc, #400]	; (800d540 <searchD+0x1d8>)
 800d3ae:	881b      	ldrh	r3, [r3, #0]
 800d3b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d3b4:	b2db      	uxtb	r3, r3
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d101      	bne.n	800d3be <searchD+0x56>
 800d3ba:	f000 fd59 	bl	800de70 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800d3be:	f7f8 fa5d 	bl	800587c <start_sectionA>
	adv_pos();
 800d3c2:	f000 fc91 	bl	800dce8 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800d3c6:	4b5e      	ldr	r3, [pc, #376]	; (800d540 <searchD+0x1d8>)
 800d3c8:	881b      	ldrh	r3, [r3, #0]
 800d3ca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d101      	bne.n	800d3d8 <searchD+0x70>
 800d3d4:	f000 fd4c 	bl	800de70 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800d3d8:	4b5b      	ldr	r3, [pc, #364]	; (800d548 <searchD+0x1e0>)
 800d3da:	2200      	movs	r2, #0
 800d3dc:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800d3de:	f000 ff47 	bl	800e270 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800d3e2:	f001 fa83 	bl	800e8ec <make_route>

	H_accel_flag = 0;
 800d3e6:	4b59      	ldr	r3, [pc, #356]	; (800d54c <searchD+0x1e4>)
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800d3ec:	4b56      	ldr	r3, [pc, #344]	; (800d548 <searchD+0x1e0>)
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	1c5a      	adds	r2, r3, #1
 800d3f2:	b2d1      	uxtb	r1, r2
 800d3f4:	4a54      	ldr	r2, [pc, #336]	; (800d548 <searchD+0x1e0>)
 800d3f6:	7011      	strb	r1, [r2, #0]
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	4b55      	ldr	r3, [pc, #340]	; (800d550 <searchD+0x1e8>)
 800d3fc:	5c9b      	ldrb	r3, [r3, r2]
 800d3fe:	2b22      	cmp	r3, #34	; 0x22
 800d400:	d053      	beq.n	800d4aa <searchD+0x142>
 800d402:	2b22      	cmp	r3, #34	; 0x22
 800d404:	dc02      	bgt.n	800d40c <searchD+0xa4>
 800d406:	2b11      	cmp	r3, #17
 800d408:	d05f      	beq.n	800d4ca <searchD+0x162>
 800d40a:	e061      	b.n	800d4d0 <searchD+0x168>
 800d40c:	2b44      	cmp	r3, #68	; 0x44
 800d40e:	d049      	beq.n	800d4a4 <searchD+0x13c>
 800d410:	2b88      	cmp	r3, #136	; 0x88
 800d412:	d15d      	bne.n	800d4d0 <searchD+0x168>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND == 1 && MF.FLAG.ACCL2 == 1){
 800d414:	4b4a      	ldr	r3, [pc, #296]	; (800d540 <searchD+0x1d8>)
 800d416:	881b      	ldrh	r3, [r3, #0]
 800d418:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d13c      	bne.n	800d49c <searchD+0x134>
 800d422:	4b47      	ldr	r3, [pc, #284]	; (800d540 <searchD+0x1d8>)
 800d424:	881b      	ldrh	r3, [r3, #0]
 800d426:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d135      	bne.n	800d49c <searchD+0x134>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800d430:	4b45      	ldr	r3, [pc, #276]	; (800d548 <searchD+0x1e0>)
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	3b01      	subs	r3, #1
 800d436:	4a46      	ldr	r2, [pc, #280]	; (800d550 <searchD+0x1e8>)
 800d438:	5cd2      	ldrb	r2, [r2, r3]
 800d43a:	4b43      	ldr	r3, [pc, #268]	; (800d548 <searchD+0x1e0>)
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	4619      	mov	r1, r3
 800d440:	4b43      	ldr	r3, [pc, #268]	; (800d550 <searchD+0x1e8>)
 800d442:	5c5b      	ldrb	r3, [r3, r1]
 800d444:	4013      	ands	r3, r2
 800d446:	b2db      	uxtb	r3, r3
 800d448:	2b88      	cmp	r3, #136	; 0x88
 800d44a:	d110      	bne.n	800d46e <searchD+0x106>
 800d44c:	4b3e      	ldr	r3, [pc, #248]	; (800d548 <searchD+0x1e0>)
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	461a      	mov	r2, r3
 800d452:	4b3f      	ldr	r3, [pc, #252]	; (800d550 <searchD+0x1e8>)
 800d454:	5c9b      	ldrb	r3, [r3, r2]
 800d456:	2bff      	cmp	r3, #255	; 0xff
 800d458:	d009      	beq.n	800d46e <searchD+0x106>
 800d45a:	4b3c      	ldr	r3, [pc, #240]	; (800d54c <searchD+0x1e4>)
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d105      	bne.n	800d46e <searchD+0x106>
						one_sectionA();
 800d462:	f7f8 fb8d 	bl	8005b80 <one_sectionA>
						H_accel_flag = 1;
 800d466:	4b39      	ldr	r3, [pc, #228]	; (800d54c <searchD+0x1e4>)
 800d468:	2201      	movs	r2, #1
 800d46a:	701a      	strb	r2, [r3, #0]
 800d46c:	e015      	b.n	800d49a <searchD+0x132>
					}
					else if((route[r_cnt] & 0x55) && (H_accel_flag == 1)){
 800d46e:	4b36      	ldr	r3, [pc, #216]	; (800d548 <searchD+0x1e0>)
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	461a      	mov	r2, r3
 800d474:	4b36      	ldr	r3, [pc, #216]	; (800d550 <searchD+0x1e8>)
 800d476:	5c9b      	ldrb	r3, [r3, r2]
 800d478:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d009      	beq.n	800d494 <searchD+0x12c>
 800d480:	4b32      	ldr	r3, [pc, #200]	; (800d54c <searchD+0x1e4>)
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	2b01      	cmp	r3, #1
 800d486:	d105      	bne.n	800d494 <searchD+0x12c>
						one_sectionD();
 800d488:	f7f8 fbe0 	bl	8005c4c <one_sectionD>
						H_accel_flag = 0;
 800d48c:	4b2f      	ldr	r3, [pc, #188]	; (800d54c <searchD+0x1e4>)
 800d48e:	2200      	movs	r2, #0
 800d490:	701a      	strb	r2, [r3, #0]
 800d492:	e002      	b.n	800d49a <searchD+0x132>
					}else{
						one_sectionU();
 800d494:	f7f8 fd14 	bl	8005ec0 <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800d498:	e003      	b.n	800d4a2 <searchD+0x13a>
 800d49a:	e002      	b.n	800d4a2 <searchD+0x13a>
					}
				}else{
					one_sectionU();
 800d49c:	f7f8 fd10 	bl	8005ec0 <one_sectionU>
				}
				break;
 800d4a0:	e016      	b.n	800d4d0 <searchD+0x168>
 800d4a2:	e015      	b.n	800d4d0 <searchD+0x168>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800d4a4:	f7f8 ffb4 	bl	8006410 <slalom_R90>
				break;
 800d4a8:	e012      	b.n	800d4d0 <searchD+0x168>
			//----180回転----
			case 0x22:
				half_sectionD();
 800d4aa:	f7f8 fb05 	bl	8005ab8 <half_sectionD>
				rotate_180();
 800d4ae:	f7f8 fed7 	bl	8006260 <rotate_180>
				if(wall_info & 0x88){
 800d4b2:	4b24      	ldr	r3, [pc, #144]	; (800d544 <searchD+0x1dc>)
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d002      	beq.n	800d4c4 <searchD+0x15c>
					set_position();
 800d4be:	f7f8 f9c7 	bl	8005850 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800d4c2:	e005      	b.n	800d4d0 <searchD+0x168>
					half_sectionA();
 800d4c4:	f7f8 faae 	bl	8005a24 <half_sectionA>
				break;
 800d4c8:	e002      	b.n	800d4d0 <searchD+0x168>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800d4ca:	f7f9 f887 	bl	80065dc <slalom_L90>
				break;
 800d4ce:	bf00      	nop
		}
		adv_pos();
 800d4d0:	f000 fc0a 	bl	800dce8 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800d4d4:	4b1a      	ldr	r3, [pc, #104]	; (800d540 <searchD+0x1d8>)
 800d4d6:	881b      	ldrh	r3, [r3, #0]
 800d4d8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d101      	bne.n	800d4e6 <searchD+0x17e>
 800d4e2:	f000 fc3b 	bl	800dd5c <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800d4e6:	4b1b      	ldr	r3, [pc, #108]	; (800d554 <searchD+0x1ec>)
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	b2da      	uxtb	r2, r3
 800d4ec:	4b1a      	ldr	r3, [pc, #104]	; (800d558 <searchD+0x1f0>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	f47f af7b 	bne.w	800d3ec <searchD+0x84>
 800d4f6:	4b17      	ldr	r3, [pc, #92]	; (800d554 <searchD+0x1ec>)
 800d4f8:	785b      	ldrb	r3, [r3, #1]
 800d4fa:	b2da      	uxtb	r2, r3
 800d4fc:	4b17      	ldr	r3, [pc, #92]	; (800d55c <searchD+0x1f4>)
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	429a      	cmp	r2, r3
 800d502:	f47f af73 	bne.w	800d3ec <searchD+0x84>

	half_sectionD();
 800d506:	f7f8 fad7 	bl	8005ab8 <half_sectionD>

	HAL_Delay(500);
 800d50a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d50e:	f7f3 fd85 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800d512:	f7f8 fea5 	bl	8006260 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800d516:	2064      	movs	r0, #100	; 0x64
 800d518:	f7f7 ff4c 	bl	80053b4 <driveC2>
	degree_z = target_degree_z;
 800d51c:	4b10      	ldr	r3, [pc, #64]	; (800d560 <searchD+0x1f8>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a10      	ldr	r2, [pc, #64]	; (800d564 <searchD+0x1fc>)
 800d522:	6013      	str	r3, [r2, #0]
	start_flag = 0;
 800d524:	4b10      	ldr	r3, [pc, #64]	; (800d568 <searchD+0x200>)
 800d526:	2200      	movs	r2, #0
 800d528:	701a      	strb	r2, [r3, #0]

	if(!MF.FLAG.SCND){
 800d52a:	4b05      	ldr	r3, [pc, #20]	; (800d540 <searchD+0x1d8>)
 800d52c:	881b      	ldrh	r3, [r3, #0]
 800d52e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d532:	b2db      	uxtb	r3, r3
 800d534:	2b00      	cmp	r3, #0
 800d536:	d101      	bne.n	800d53c <searchD+0x1d4>
		store_map_in_eeprom();
 800d538:	f002 fa6c 	bl	800fa14 <store_map_in_eeprom>
	}
}
 800d53c:	bf00      	nop
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	20000f74 	.word	0x20000f74
 800d544:	200002c8 	.word	0x200002c8
 800d548:	200015dc 	.word	0x200015dc
 800d54c:	200002c9 	.word	0x200002c9
 800d550:	20000c64 	.word	0x20000c64
 800d554:	20000c1c 	.word	0x20000c1c
 800d558:	20000bb9 	.word	0x20000bb9
 800d55c:	20000b54 	.word	0x20000b54
 800d560:	20000c08 	.word	0x20000c08
 800d564:	20000b64 	.word	0x20000b64
 800d568:	200015d4 	.word	0x200015d4

0800d56c <searchE>:
//searchE
//a未知壁を含むマスを仮goal座標とし、スラローム連続走行で全マスに進む。仮goalを連続的に変化させる。全面探索終了後は半区画減速
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchE(){
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0

	int i = 0;
 800d572:	2300      	movs	r3, #0
 800d574:	607b      	str	r3, [r7, #4]
	int j = 0;
 800d576:	2300      	movs	r3, #0
 800d578:	603b      	str	r3, [r7, #0]
	do {
		if(i == 0){
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d111      	bne.n	800d5a4 <searchE+0x38>
			//====a前に壁が無い想定で問答無用で前進====
			half_sectionA();
 800d580:	f7f8 fa50 	bl	8005a24 <half_sectionA>
			adv_pos();
 800d584:	f000 fbb0 	bl	800dce8 <adv_pos>
			write_map();														//地図の初期化
 800d588:	f000 fc72 	bl	800de70 <write_map>

			//====a歩数等初期化====
			m_step = r_cnt = 0;													//歩数と経路カウンタの初期化
 800d58c:	4b42      	ldr	r3, [pc, #264]	; (800d698 <searchE+0x12c>)
 800d58e:	2200      	movs	r2, #0
 800d590:	701a      	strb	r2, [r3, #0]
 800d592:	4b42      	ldr	r3, [pc, #264]	; (800d69c <searchE+0x130>)
 800d594:	2200      	movs	r2, #0
 800d596:	801a      	strh	r2, [r3, #0]
			find_pregoal();														//仮goalまでの歩数マップの初期化
 800d598:	f001 faf6 	bl	800eb88 <find_pregoal>
			make_smap2();
 800d59c:	f001 fce0 	bl	800ef60 <make_smap2>
			make_route();														//最短経路探索(route配列に動作が格納される)
 800d5a0:	f001 f9a4 	bl	800e8ec <make_route>
		}

		//====a探索走行====
		do {
			//----a進行----
			switch (route[r_cnt++]) {										//route配列によって進行を決定。経路カウンタを進める
 800d5a4:	4b3c      	ldr	r3, [pc, #240]	; (800d698 <searchE+0x12c>)
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	1c5a      	adds	r2, r3, #1
 800d5aa:	b2d1      	uxtb	r1, r2
 800d5ac:	4a3a      	ldr	r2, [pc, #232]	; (800d698 <searchE+0x12c>)
 800d5ae:	7011      	strb	r1, [r2, #0]
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	4b3b      	ldr	r3, [pc, #236]	; (800d6a0 <searchE+0x134>)
 800d5b4:	5c9b      	ldrb	r3, [r3, r2]
 800d5b6:	2b22      	cmp	r3, #34	; 0x22
 800d5b8:	d00e      	beq.n	800d5d8 <searchE+0x6c>
 800d5ba:	2b22      	cmp	r3, #34	; 0x22
 800d5bc:	dc02      	bgt.n	800d5c4 <searchE+0x58>
 800d5be:	2b11      	cmp	r3, #17
 800d5c0:	d01a      	beq.n	800d5f8 <searchE+0x8c>
 800d5c2:	e01c      	b.n	800d5fe <searchE+0x92>
 800d5c4:	2b44      	cmp	r3, #68	; 0x44
 800d5c6:	d004      	beq.n	800d5d2 <searchE+0x66>
 800d5c8:	2b88      	cmp	r3, #136	; 0x88
 800d5ca:	d118      	bne.n	800d5fe <searchE+0x92>
				//----a前進----
			case 0x88:
				one_sectionU();
 800d5cc:	f7f8 fc78 	bl	8005ec0 <one_sectionU>
				break;
 800d5d0:	e015      	b.n	800d5fe <searchE+0x92>
				//----a右折----
			case 0x44:
				slalom_R90();
 800d5d2:	f7f8 ff1d 	bl	8006410 <slalom_R90>
				break;
 800d5d6:	e012      	b.n	800d5fe <searchE+0x92>
				//----180回転----
			case 0x22:
				half_sectionD();
 800d5d8:	f7f8 fa6e 	bl	8005ab8 <half_sectionD>
				rotate_180();
 800d5dc:	f7f8 fe40 	bl	8006260 <rotate_180>
				if(wall_info & 0x88){
 800d5e0:	4b30      	ldr	r3, [pc, #192]	; (800d6a4 <searchE+0x138>)
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d002      	beq.n	800d5f2 <searchE+0x86>
					set_position();
 800d5ec:	f7f8 f930 	bl	8005850 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800d5f0:	e005      	b.n	800d5fe <searchE+0x92>
					half_sectionA();
 800d5f2:	f7f8 fa17 	bl	8005a24 <half_sectionA>
				break;
 800d5f6:	e002      	b.n	800d5fe <searchE+0x92>
				//----a左折----
			case 0x11:
				slalom_L90();
 800d5f8:	f7f8 fff0 	bl	80065dc <slalom_L90>
				break;
 800d5fc:	bf00      	nop
			}
			adv_pos();														//aマイクロマウス内部位置情報でも前進処理
 800d5fe:	f000 fb73 	bl	800dce8 <adv_pos>
			j++;
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	3301      	adds	r3, #1
 800d606:	603b      	str	r3, [r7, #0]
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	2b96      	cmp	r3, #150	; 0x96
 800d60c:	dc0e      	bgt.n	800d62c <searchE+0xc0>

		} while ((mouse.x != pregoal_x) || (mouse.y != pregoal_y));			//a現在座標と仮goal座標が等しくなるまで実行
 800d60e:	4b26      	ldr	r3, [pc, #152]	; (800d6a8 <searchE+0x13c>)
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	b2da      	uxtb	r2, r3
 800d614:	4b25      	ldr	r3, [pc, #148]	; (800d6ac <searchE+0x140>)
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	429a      	cmp	r2, r3
 800d61a:	d1c3      	bne.n	800d5a4 <searchE+0x38>
 800d61c:	4b22      	ldr	r3, [pc, #136]	; (800d6a8 <searchE+0x13c>)
 800d61e:	785b      	ldrb	r3, [r3, #1]
 800d620:	b2da      	uxtb	r2, r3
 800d622:	4b23      	ldr	r3, [pc, #140]	; (800d6b0 <searchE+0x144>)
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	429a      	cmp	r2, r3
 800d628:	d1bc      	bne.n	800d5a4 <searchE+0x38>
 800d62a:	e000      	b.n	800d62e <searchE+0xc2>
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800d62c:	bf00      	nop

		get_wall_info();													//a壁情報の初期化, 後壁はなくなる
 800d62e:	f002 faa3 	bl	800fb78 <get_wall_info>
		write_map();														//a地図の初期化
 800d632:	f000 fc1d 	bl	800de70 <write_map>
		//printf("get pregoal, x = %d, y = %d\n", mouse.x, mouse.y);

		//====a歩数等初期化====
		m_step = r_cnt = 0;													//a歩数と経路カウンタの初期化
 800d636:	4b18      	ldr	r3, [pc, #96]	; (800d698 <searchE+0x12c>)
 800d638:	2200      	movs	r2, #0
 800d63a:	701a      	strb	r2, [r3, #0]
 800d63c:	4b17      	ldr	r3, [pc, #92]	; (800d69c <searchE+0x130>)
 800d63e:	2200      	movs	r2, #0
 800d640:	801a      	strh	r2, [r3, #0]

		find_pregoal();														//a仮goalまでの歩数マップの初期化
 800d642:	f001 faa1 	bl	800eb88 <find_pregoal>
		if (allmap_comp_flag) {
 800d646:	4b1b      	ldr	r3, [pc, #108]	; (800d6b4 <searchE+0x148>)
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d002      	beq.n	800d654 <searchE+0xe8>
			//printf("get allmap_comp_flag\n");
			half_sectionD();
 800d64e:	f7f8 fa33 	bl	8005ab8 <half_sectionD>
			break;
 800d652:	e00e      	b.n	800d672 <searchE+0x106>
		}
		make_smap2();
 800d654:	f001 fc84 	bl	800ef60 <make_smap2>
		make_route();														//a最短経路探索(route配列に動作が格納される)
 800d658:	f001 f948 	bl	800e8ec <make_route>

		if (j > 150) {
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	2b96      	cmp	r3, #150	; 0x96
 800d660:	dc06      	bgt.n	800d670 <searchE+0x104>
			//printf("j = %d\n", j);
			break;															//a移動マス数が250以上になった場合全面探索を中止
		}
		i++;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	3301      	adds	r3, #1
 800d666:	607b      	str	r3, [r7, #4]
		//printf("i = %d\n", i);

	} while (i < 150);														//a仮goalへの到着が130回以上になった場合全面探索を中止
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2b95      	cmp	r3, #149	; 0x95
 800d66c:	dd85      	ble.n	800d57a <searchE+0xe>
 800d66e:	e000      	b.n	800d672 <searchE+0x106>
			break;															//a移動マス数が250以上になった場合全面探索を中止
 800d670:	bf00      	nop
	//printf("i = %d\n", i);
	//printf("fin\n");

	HAL_Delay(500);
 800d672:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d676:	f7f3 fcd1 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800d67a:	f7f8 fdf1 	bl	8006260 <rotate_180>

	if(!MF.FLAG.SCND){
 800d67e:	4b0e      	ldr	r3, [pc, #56]	; (800d6b8 <searchE+0x14c>)
 800d680:	881b      	ldrh	r3, [r3, #0]
 800d682:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d686:	b2db      	uxtb	r3, r3
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d101      	bne.n	800d690 <searchE+0x124>
		store_map_in_eeprom();
 800d68c:	f002 f9c2 	bl	800fa14 <store_map_in_eeprom>
	}
}
 800d690:	bf00      	nop
 800d692:	3708      	adds	r7, #8
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}
 800d698:	200015dc 	.word	0x200015dc
 800d69c:	2000034e 	.word	0x2000034e
 800d6a0:	20000c64 	.word	0x20000c64
 800d6a4:	200002c8 	.word	0x200002c8
 800d6a8:	20000c1c 	.word	0x20000c1c
 800d6ac:	20000d6c 	.word	0x20000d6c
 800d6b0:	200012ad 	.word	0x200012ad
 800d6b4:	20000bb8 	.word	0x20000bb8
 800d6b8:	20000f74 	.word	0x20000f74

0800d6bc <searchF3>:
//searchF3
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベースでgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF3(){
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800d6c2:	4b56      	ldr	r3, [pc, #344]	; (800d81c <searchF3+0x160>)
 800d6c4:	881b      	ldrh	r3, [r3, #0]
 800d6c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d001      	beq.n	800d6d4 <searchF3+0x18>
		load_map_from_eeprom();
 800d6d0:	f002 f9da 	bl	800fa88 <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 800d6d4:	f000 fb08 	bl	800dce8 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 800d6d8:	f000 fdca 	bl	800e270 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800d6dc:	f001 f906 	bl	800e8ec <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800d6e0:	4b4f      	ldr	r3, [pc, #316]	; (800d820 <searchF3+0x164>)
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	701a      	strb	r2, [r3, #0]
	pass_route2();
 800d6e6:	f001 fd5f 	bl	800f1a8 <pass_route2>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800d6ea:	f7f8 f8c7 	bl	800587c <start_sectionA>

	H_accel_flag = 0;
 800d6ee:	4b4d      	ldr	r3, [pc, #308]	; (800d824 <searchF3+0x168>)
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800d6f4:	4b4a      	ldr	r3, [pc, #296]	; (800d820 <searchF3+0x164>)
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	1c5a      	adds	r2, r3, #1
 800d6fa:	b2d1      	uxtb	r1, r2
 800d6fc:	4a48      	ldr	r2, [pc, #288]	; (800d820 <searchF3+0x164>)
 800d6fe:	7011      	strb	r1, [r2, #0]
 800d700:	461a      	mov	r2, r3
 800d702:	4b49      	ldr	r3, [pc, #292]	; (800d828 <searchF3+0x16c>)
 800d704:	569b      	ldrsb	r3, [r3, r2]
 800d706:	f113 0f04 	cmn.w	r3, #4
 800d70a:	d01e      	beq.n	800d74a <searchF3+0x8e>
 800d70c:	f113 0f04 	cmn.w	r3, #4
 800d710:	dc09      	bgt.n	800d726 <searchF3+0x6a>
 800d712:	f113 0f06 	cmn.w	r3, #6
 800d716:	d01e      	beq.n	800d756 <searchF3+0x9a>
 800d718:	f113 0f06 	cmn.w	r3, #6
 800d71c:	dc18      	bgt.n	800d750 <searchF3+0x94>
 800d71e:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800d722:	d01b      	beq.n	800d75c <searchF3+0xa0>
 800d724:	e01f      	b.n	800d766 <searchF3+0xaa>
 800d726:	f113 0f02 	cmn.w	r3, #2
 800d72a:	d008      	beq.n	800d73e <searchF3+0x82>
 800d72c:	f113 0f02 	cmn.w	r3, #2
 800d730:	db08      	blt.n	800d744 <searchF3+0x88>
 800d732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d736:	d116      	bne.n	800d766 <searchF3+0xaa>
			//----a右スラローム----
			case -1:
				slalom_R90();
 800d738:	f7f8 fe6a 	bl	8006410 <slalom_R90>
				break;
 800d73c:	e048      	b.n	800d7d0 <searchF3+0x114>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800d73e:	f7f8 ff4d 	bl	80065dc <slalom_L90>
				break;
 800d742:	e045      	b.n	800d7d0 <searchF3+0x114>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800d744:	f7f9 f824 	bl	8006790 <Lslalom_R90>
				break;
 800d748:	e042      	b.n	800d7d0 <searchF3+0x114>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800d74a:	f7f9 f8f7 	bl	800693c <Lslalom_L90>
				break;
 800d74e:	e03f      	b.n	800d7d0 <searchF3+0x114>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800d750:	f7f9 f9c0 	bl	8006ad4 <Lslalom_R180>
				break;
 800d754:	e03c      	b.n	800d7d0 <searchF3+0x114>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800d756:	f7f9 fa9f 	bl	8006c98 <Lslalom_L180>
				break;
 800d75a:	e039      	b.n	800d7d0 <searchF3+0x114>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800d75c:	f7f8 fd80 	bl	8006260 <rotate_180>
				rotate_180();
 800d760:	f7f8 fd7e 	bl	8006260 <rotate_180>
				while(1);
 800d764:	e7fe      	b.n	800d764 <searchF3+0xa8>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800d766:	4b2e      	ldr	r3, [pc, #184]	; (800d820 <searchF3+0x164>)
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	3b01      	subs	r3, #1
 800d76c:	4a2e      	ldr	r2, [pc, #184]	; (800d828 <searchF3+0x16c>)
 800d76e:	56d3      	ldrsb	r3, [r2, r3]
 800d770:	2b03      	cmp	r3, #3
 800d772:	dc11      	bgt.n	800d798 <searchF3+0xdc>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800d774:	2300      	movs	r3, #0
 800d776:	607b      	str	r3, [r7, #4]
 800d778:	e004      	b.n	800d784 <searchF3+0xc8>
						half_sectionU();
 800d77a:	f7f8 f9e1 	bl	8005b40 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	3301      	adds	r3, #1
 800d782:	607b      	str	r3, [r7, #4]
 800d784:	4b26      	ldr	r3, [pc, #152]	; (800d820 <searchF3+0x164>)
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	3b01      	subs	r3, #1
 800d78a:	4a27      	ldr	r2, [pc, #156]	; (800d828 <searchF3+0x16c>)
 800d78c:	56d3      	ldrsb	r3, [r2, r3]
 800d78e:	461a      	mov	r2, r3
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	4293      	cmp	r3, r2
 800d794:	dbf1      	blt.n	800d77a <searchF3+0xbe>
						half_sectionU();
					}
					one_sectionD();
					H_accel_flag = 0;
				}
				break;
 800d796:	e01a      	b.n	800d7ce <searchF3+0x112>
					one_sectionA();
 800d798:	f7f8 f9f2 	bl	8005b80 <one_sectionA>
					H_accel_flag = 1;
 800d79c:	4b21      	ldr	r3, [pc, #132]	; (800d824 <searchF3+0x168>)
 800d79e:	2201      	movs	r2, #1
 800d7a0:	701a      	strb	r2, [r3, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	603b      	str	r3, [r7, #0]
 800d7a6:	e004      	b.n	800d7b2 <searchF3+0xf6>
						half_sectionU();
 800d7a8:	f7f8 f9ca 	bl	8005b40 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	603b      	str	r3, [r7, #0]
 800d7b2:	4b1b      	ldr	r3, [pc, #108]	; (800d820 <searchF3+0x164>)
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	3b01      	subs	r3, #1
 800d7b8:	4a1b      	ldr	r2, [pc, #108]	; (800d828 <searchF3+0x16c>)
 800d7ba:	56d3      	ldrsb	r3, [r2, r3]
 800d7bc:	3b04      	subs	r3, #4
 800d7be:	683a      	ldr	r2, [r7, #0]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	dbf1      	blt.n	800d7a8 <searchF3+0xec>
					one_sectionD();
 800d7c4:	f7f8 fa42 	bl	8005c4c <one_sectionD>
					H_accel_flag = 0;
 800d7c8:	4b16      	ldr	r3, [pc, #88]	; (800d824 <searchF3+0x168>)
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	701a      	strb	r2, [r3, #0]
				break;
 800d7ce:	bf00      	nop
		}
//		adv_pos2(pass[p_cnt-1]);

	}while(pass[p_cnt] != -114);
 800d7d0:	4b13      	ldr	r3, [pc, #76]	; (800d820 <searchF3+0x164>)
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	4b14      	ldr	r3, [pc, #80]	; (800d828 <searchF3+0x16c>)
 800d7d8:	569b      	ldrsb	r3, [r3, r2]
 800d7da:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800d7de:	d189      	bne.n	800d6f4 <searchF3+0x38>

	mouse.x = goal_x;
 800d7e0:	4b12      	ldr	r3, [pc, #72]	; (800d82c <searchF3+0x170>)
 800d7e2:	781a      	ldrb	r2, [r3, #0]
 800d7e4:	4b12      	ldr	r3, [pc, #72]	; (800d830 <searchF3+0x174>)
 800d7e6:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800d7e8:	4b12      	ldr	r3, [pc, #72]	; (800d834 <searchF3+0x178>)
 800d7ea:	781a      	ldrb	r2, [r3, #0]
 800d7ec:	4b10      	ldr	r3, [pc, #64]	; (800d830 <searchF3+0x174>)
 800d7ee:	705a      	strb	r2, [r3, #1]

	half_sectionD();
 800d7f0:	f7f8 f962 	bl	8005ab8 <half_sectionD>

	HAL_Delay(500);
 800d7f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d7f8:	f7f3 fc10 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800d7fc:	f7f8 fd30 	bl	8006260 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800d800:	2064      	movs	r0, #100	; 0x64
 800d802:	f7f7 fdd7 	bl	80053b4 <driveC2>
	degree_z = target_degree_z;
 800d806:	4b0c      	ldr	r3, [pc, #48]	; (800d838 <searchF3+0x17c>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4a0c      	ldr	r2, [pc, #48]	; (800d83c <searchF3+0x180>)
 800d80c:	6013      	str	r3, [r2, #0]
	start_flag = 0;
 800d80e:	4b0c      	ldr	r3, [pc, #48]	; (800d840 <searchF3+0x184>)
 800d810:	2200      	movs	r2, #0
 800d812:	701a      	strb	r2, [r3, #0]

}
 800d814:	bf00      	nop
 800d816:	3708      	adds	r7, #8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	20000f74 	.word	0x20000f74
 800d820:	200002b0 	.word	0x200002b0
 800d824:	200002c9 	.word	0x200002c9
 800d828:	20000350 	.word	0x20000350
 800d82c:	20000bb9 	.word	0x20000bb9
 800d830:	20000c1c 	.word	0x20000c1c
 800d834:	20000b54 	.word	0x20000b54
 800d838:	20000c08 	.word	0x20000c08
 800d83c:	20000b64 	.word	0x20000b64
 800d840:	200015d4 	.word	0x200015d4

0800d844 <searchF4>:
//searchF4
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベース+斜め走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF4(){
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800d84a:	4bcd      	ldr	r3, [pc, #820]	; (800db80 <searchF4+0x33c>)
 800d84c:	881b      	ldrh	r3, [r3, #0]
 800d84e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d852:	b2db      	uxtb	r3, r3
 800d854:	2b00      	cmp	r3, #0
 800d856:	d001      	beq.n	800d85c <searchF4+0x18>
		load_map_from_eeprom();
 800d858:	f002 f916 	bl	800fa88 <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 800d85c:	f000 fa44 	bl	800dce8 <adv_pos>

	//====a歩数マップ・経路作成====
	full_led_write(RED);
 800d860:	2001      	movs	r0, #1
 800d862:	f002 f9fd 	bl	800fc60 <full_led_write>
	make_smap();											//a歩数マップ作成
 800d866:	f000 fd03 	bl	800e270 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800d86a:	f001 f83f 	bl	800e8ec <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800d86e:	4bc5      	ldr	r3, [pc, #788]	; (800db84 <searchF4+0x340>)
 800d870:	2200      	movs	r2, #0
 800d872:	701a      	strb	r2, [r3, #0]
	pass_route3();
 800d874:	f001 fdac 	bl	800f3d0 <pass_route3>

	if(start_flag == 0 || start_flag == 1){									//a大回りではない場合、先頭の半区画直進をスキップ
 800d878:	4bc3      	ldr	r3, [pc, #780]	; (800db88 <searchF4+0x344>)
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d004      	beq.n	800d88c <searchF4+0x48>
 800d882:	4bc1      	ldr	r3, [pc, #772]	; (800db88 <searchF4+0x344>)
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	b2db      	uxtb	r3, r3
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d109      	bne.n	800d8a0 <searchF4+0x5c>
		pass[p_cnt]--;
 800d88c:	4bbd      	ldr	r3, [pc, #756]	; (800db84 <searchF4+0x340>)
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	4abe      	ldr	r2, [pc, #760]	; (800db8c <searchF4+0x348>)
 800d892:	56d2      	ldrsb	r2, [r2, r3]
 800d894:	b2d2      	uxtb	r2, r2
 800d896:	3a01      	subs	r2, #1
 800d898:	b2d2      	uxtb	r2, r2
 800d89a:	b251      	sxtb	r1, r2
 800d89c:	4abb      	ldr	r2, [pc, #748]	; (800db8c <searchF4+0x348>)
 800d89e:	54d1      	strb	r1, [r2, r3]
	}

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800d8a0:	f7f7 ffec 	bl	800587c <start_sectionA>

	H_accel_flag = 0;
 800d8a4:	4bba      	ldr	r3, [pc, #744]	; (800db90 <searchF4+0x34c>)
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	701a      	strb	r2, [r3, #0]
	MF.FLAG.XDIR = 1;
 800d8aa:	4ab5      	ldr	r2, [pc, #724]	; (800db80 <searchF4+0x33c>)
 800d8ac:	8813      	ldrh	r3, [r2, #0]
 800d8ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d8b2:	8013      	strh	r3, [r2, #0]
	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800d8b4:	4bb3      	ldr	r3, [pc, #716]	; (800db84 <searchF4+0x340>)
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	1c5a      	adds	r2, r3, #1
 800d8ba:	b2d1      	uxtb	r1, r2
 800d8bc:	4ab1      	ldr	r2, [pc, #708]	; (800db84 <searchF4+0x340>)
 800d8be:	7011      	strb	r1, [r2, #0]
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	4bb2      	ldr	r3, [pc, #712]	; (800db8c <searchF4+0x348>)
 800d8c4:	569b      	ldrsb	r3, [r3, r2]
 800d8c6:	3372      	adds	r3, #114	; 0x72
 800d8c8:	2b71      	cmp	r3, #113	; 0x71
 800d8ca:	f200 811c 	bhi.w	800db06 <searchF4+0x2c2>
 800d8ce:	a201      	add	r2, pc, #4	; (adr r2, 800d8d4 <searchF4+0x90>)
 800d8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8d4:	0800dafd 	.word	0x0800dafd
 800d8d8:	0800db07 	.word	0x0800db07
 800d8dc:	0800db07 	.word	0x0800db07
 800d8e0:	0800db07 	.word	0x0800db07
 800d8e4:	0800db07 	.word	0x0800db07
 800d8e8:	0800db07 	.word	0x0800db07
 800d8ec:	0800db07 	.word	0x0800db07
 800d8f0:	0800db07 	.word	0x0800db07
 800d8f4:	0800db07 	.word	0x0800db07
 800d8f8:	0800db07 	.word	0x0800db07
 800d8fc:	0800db07 	.word	0x0800db07
 800d900:	0800db07 	.word	0x0800db07
 800d904:	0800db07 	.word	0x0800db07
 800d908:	0800db07 	.word	0x0800db07
 800d90c:	0800db07 	.word	0x0800db07
 800d910:	0800db07 	.word	0x0800db07
 800d914:	0800db07 	.word	0x0800db07
 800d918:	0800db07 	.word	0x0800db07
 800d91c:	0800db07 	.word	0x0800db07
 800d920:	0800db07 	.word	0x0800db07
 800d924:	0800db07 	.word	0x0800db07
 800d928:	0800db07 	.word	0x0800db07
 800d92c:	0800db07 	.word	0x0800db07
 800d930:	0800db07 	.word	0x0800db07
 800d934:	0800db07 	.word	0x0800db07
 800d938:	0800db07 	.word	0x0800db07
 800d93c:	0800db07 	.word	0x0800db07
 800d940:	0800db07 	.word	0x0800db07
 800d944:	0800db07 	.word	0x0800db07
 800d948:	0800db07 	.word	0x0800db07
 800d94c:	0800db07 	.word	0x0800db07
 800d950:	0800db07 	.word	0x0800db07
 800d954:	0800db07 	.word	0x0800db07
 800d958:	0800db07 	.word	0x0800db07
 800d95c:	0800db07 	.word	0x0800db07
 800d960:	0800db07 	.word	0x0800db07
 800d964:	0800db07 	.word	0x0800db07
 800d968:	0800db07 	.word	0x0800db07
 800d96c:	0800db07 	.word	0x0800db07
 800d970:	0800db07 	.word	0x0800db07
 800d974:	0800db07 	.word	0x0800db07
 800d978:	0800db07 	.word	0x0800db07
 800d97c:	0800db07 	.word	0x0800db07
 800d980:	0800db07 	.word	0x0800db07
 800d984:	0800db07 	.word	0x0800db07
 800d988:	0800db07 	.word	0x0800db07
 800d98c:	0800db07 	.word	0x0800db07
 800d990:	0800db07 	.word	0x0800db07
 800d994:	0800db07 	.word	0x0800db07
 800d998:	0800db07 	.word	0x0800db07
 800d99c:	0800db07 	.word	0x0800db07
 800d9a0:	0800db07 	.word	0x0800db07
 800d9a4:	0800db07 	.word	0x0800db07
 800d9a8:	0800db07 	.word	0x0800db07
 800d9ac:	0800db07 	.word	0x0800db07
 800d9b0:	0800db07 	.word	0x0800db07
 800d9b4:	0800db07 	.word	0x0800db07
 800d9b8:	0800db07 	.word	0x0800db07
 800d9bc:	0800db07 	.word	0x0800db07
 800d9c0:	0800db07 	.word	0x0800db07
 800d9c4:	0800db07 	.word	0x0800db07
 800d9c8:	0800db07 	.word	0x0800db07
 800d9cc:	0800db07 	.word	0x0800db07
 800d9d0:	0800db07 	.word	0x0800db07
 800d9d4:	0800db07 	.word	0x0800db07
 800d9d8:	0800db07 	.word	0x0800db07
 800d9dc:	0800db07 	.word	0x0800db07
 800d9e0:	0800db07 	.word	0x0800db07
 800d9e4:	0800db07 	.word	0x0800db07
 800d9e8:	0800db07 	.word	0x0800db07
 800d9ec:	0800db07 	.word	0x0800db07
 800d9f0:	0800db07 	.word	0x0800db07
 800d9f4:	0800db07 	.word	0x0800db07
 800d9f8:	0800db07 	.word	0x0800db07
 800d9fc:	0800db07 	.word	0x0800db07
 800da00:	0800db07 	.word	0x0800db07
 800da04:	0800db07 	.word	0x0800db07
 800da08:	0800db07 	.word	0x0800db07
 800da0c:	0800db07 	.word	0x0800db07
 800da10:	0800db07 	.word	0x0800db07
 800da14:	0800db07 	.word	0x0800db07
 800da18:	0800db07 	.word	0x0800db07
 800da1c:	0800db07 	.word	0x0800db07
 800da20:	0800db07 	.word	0x0800db07
 800da24:	0800db07 	.word	0x0800db07
 800da28:	0800db07 	.word	0x0800db07
 800da2c:	0800db07 	.word	0x0800db07
 800da30:	0800db07 	.word	0x0800db07
 800da34:	0800db07 	.word	0x0800db07
 800da38:	0800db07 	.word	0x0800db07
 800da3c:	0800db07 	.word	0x0800db07
 800da40:	0800db07 	.word	0x0800db07
 800da44:	0800db07 	.word	0x0800db07
 800da48:	0800db07 	.word	0x0800db07
 800da4c:	0800db07 	.word	0x0800db07
 800da50:	0800db07 	.word	0x0800db07
 800da54:	0800db07 	.word	0x0800db07
 800da58:	0800db07 	.word	0x0800db07
 800da5c:	0800daf7 	.word	0x0800daf7
 800da60:	0800daf1 	.word	0x0800daf1
 800da64:	0800daeb 	.word	0x0800daeb
 800da68:	0800dae5 	.word	0x0800dae5
 800da6c:	0800dadf 	.word	0x0800dadf
 800da70:	0800dad9 	.word	0x0800dad9
 800da74:	0800dad3 	.word	0x0800dad3
 800da78:	0800dacd 	.word	0x0800dacd
 800da7c:	0800dac7 	.word	0x0800dac7
 800da80:	0800dac1 	.word	0x0800dac1
 800da84:	0800dabb 	.word	0x0800dabb
 800da88:	0800dab5 	.word	0x0800dab5
 800da8c:	0800daaf 	.word	0x0800daaf
 800da90:	0800daa9 	.word	0x0800daa9
 800da94:	0800daa3 	.word	0x0800daa3
 800da98:	0800da9d 	.word	0x0800da9d
			//----a右スラローム----
			case -1:
				slalom_R90();
 800da9c:	f7f8 fcb8 	bl	8006410 <slalom_R90>
				break;
 800daa0:	e0bf      	b.n	800dc22 <searchF4+0x3de>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800daa2:	f7f8 fd9b 	bl	80065dc <slalom_L90>
				break;
 800daa6:	e0bc      	b.n	800dc22 <searchF4+0x3de>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800daa8:	f7f8 fe72 	bl	8006790 <Lslalom_R90>
				break;
 800daac:	e0b9      	b.n	800dc22 <searchF4+0x3de>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800daae:	f7f8 ff45 	bl	800693c <Lslalom_L90>
				break;
 800dab2:	e0b6      	b.n	800dc22 <searchF4+0x3de>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800dab4:	f7f9 f80e 	bl	8006ad4 <Lslalom_R180>
				break;
 800dab8:	e0b3      	b.n	800dc22 <searchF4+0x3de>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800daba:	f7f9 f8ed 	bl	8006c98 <Lslalom_L180>
				break;
 800dabe:	e0b0      	b.n	800dc22 <searchF4+0x3de>

			//----a斜め右V45----
			case -7:
				v_R45();
 800dac0:	f7f9 f9c6 	bl	8006e50 <v_R45>
				break;
 800dac4:	e0ad      	b.n	800dc22 <searchF4+0x3de>

			//----a斜め左V45----
			case -8:
				v_L45();
 800dac6:	f7f9 fb0b 	bl	80070e0 <v_L45>
				break;
 800daca:	e0aa      	b.n	800dc22 <searchF4+0x3de>

			//----a斜め右V90----
			case -9:
				v_R90();
 800dacc:	f7f9 fdc2 	bl	8007654 <v_R90>
				break;
 800dad0:	e0a7      	b.n	800dc22 <searchF4+0x3de>

			//----a斜め左V90----
			case -10:
				v_L90();
 800dad2:	f7f9 fe65 	bl	80077a0 <v_L90>
				break;
 800dad6:	e0a4      	b.n	800dc22 <searchF4+0x3de>

			//----a斜め右V135----
			case -11:
				v_R135();
 800dad8:	f7f9 ff04 	bl	80078e4 <v_R135>
				break;
 800dadc:	e0a1      	b.n	800dc22 <searchF4+0x3de>

			//----a斜め左V135----
			case -12:
				v_L135();
 800dade:	f7fa f84d 	bl	8007b7c <v_L135>
				break;
 800dae2:	e09e      	b.n	800dc22 <searchF4+0x3de>

			//----a斜め右V45Goal----
			case -13:
				v_R45D();
 800dae4:	f7f9 fc40 	bl	8007368 <v_R45D>
				break;
 800dae8:	e09b      	b.n	800dc22 <searchF4+0x3de>

			//----a斜め左V45Goal----
			case -14:
				v_L45D();
 800daea:	f7f9 fcfb 	bl	80074e4 <v_L45D>
				break;
 800daee:	e098      	b.n	800dc22 <searchF4+0x3de>

			//----a斜め右V135Goal----
			case -15:
				v_R135D();
 800daf0:	f7fa f988 	bl	8007e04 <v_R135D>
				break;
 800daf4:	e095      	b.n	800dc22 <searchF4+0x3de>

			//----a斜め左V135Goal----
			case -16:
				v_L135D();
 800daf6:	f7fa fa75 	bl	8007fe4 <v_L135D>
				break;
 800dafa:	e092      	b.n	800dc22 <searchF4+0x3de>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800dafc:	f7f8 fbb0 	bl	8006260 <rotate_180>
				rotate_180();
 800db00:	f7f8 fbae 	bl	8006260 <rotate_180>
				while(1);
 800db04:	e7fe      	b.n	800db04 <searchF4+0x2c0>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800db06:	4b1f      	ldr	r3, [pc, #124]	; (800db84 <searchF4+0x340>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	3b01      	subs	r3, #1
 800db0c:	4a1f      	ldr	r2, [pc, #124]	; (800db8c <searchF4+0x348>)
 800db0e:	56d3      	ldrsb	r3, [r2, r3]
 800db10:	2b03      	cmp	r3, #3
 800db12:	dc11      	bgt.n	800db38 <searchF4+0x2f4>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800db14:	2300      	movs	r3, #0
 800db16:	607b      	str	r3, [r7, #4]
 800db18:	e004      	b.n	800db24 <searchF4+0x2e0>
						half_sectionU();
 800db1a:	f7f8 f811 	bl	8005b40 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	3301      	adds	r3, #1
 800db22:	607b      	str	r3, [r7, #4]
 800db24:	4b17      	ldr	r3, [pc, #92]	; (800db84 <searchF4+0x340>)
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	3b01      	subs	r3, #1
 800db2a:	4a18      	ldr	r2, [pc, #96]	; (800db8c <searchF4+0x348>)
 800db2c:	56d3      	ldrsb	r3, [r2, r3]
 800db2e:	461a      	mov	r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	4293      	cmp	r3, r2
 800db34:	dbf1      	blt.n	800db1a <searchF4+0x2d6>
					}else{
						half_sectionV();
					}
//					half_sectionV();
				}
				break;
 800db36:	e073      	b.n	800dc20 <searchF4+0x3dc>
				}else if(pass[p_cnt-1] < 64){
 800db38:	4b12      	ldr	r3, [pc, #72]	; (800db84 <searchF4+0x340>)
 800db3a:	781b      	ldrb	r3, [r3, #0]
 800db3c:	3b01      	subs	r3, #1
 800db3e:	4a13      	ldr	r2, [pc, #76]	; (800db8c <searchF4+0x348>)
 800db40:	56d3      	ldrsb	r3, [r2, r3]
 800db42:	2b3f      	cmp	r3, #63	; 0x3f
 800db44:	dc26      	bgt.n	800db94 <searchF4+0x350>
					one_sectionA();
 800db46:	f7f8 f81b 	bl	8005b80 <one_sectionA>
					H_accel_flag = 1;
 800db4a:	4b11      	ldr	r3, [pc, #68]	; (800db90 <searchF4+0x34c>)
 800db4c:	2201      	movs	r2, #1
 800db4e:	701a      	strb	r2, [r3, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800db50:	2300      	movs	r3, #0
 800db52:	603b      	str	r3, [r7, #0]
 800db54:	e004      	b.n	800db60 <searchF4+0x31c>
						half_sectionU();
 800db56:	f7f7 fff3 	bl	8005b40 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	3301      	adds	r3, #1
 800db5e:	603b      	str	r3, [r7, #0]
 800db60:	4b08      	ldr	r3, [pc, #32]	; (800db84 <searchF4+0x340>)
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	3b01      	subs	r3, #1
 800db66:	4a09      	ldr	r2, [pc, #36]	; (800db8c <searchF4+0x348>)
 800db68:	56d3      	ldrsb	r3, [r2, r3]
 800db6a:	3b04      	subs	r3, #4
 800db6c:	683a      	ldr	r2, [r7, #0]
 800db6e:	429a      	cmp	r2, r3
 800db70:	dbf1      	blt.n	800db56 <searchF4+0x312>
					one_sectionD();
 800db72:	f7f8 f86b 	bl	8005c4c <one_sectionD>
					H_accel_flag = 0;
 800db76:	4b06      	ldr	r3, [pc, #24]	; (800db90 <searchF4+0x34c>)
 800db78:	2200      	movs	r2, #0
 800db7a:	701a      	strb	r2, [r3, #0]
				break;
 800db7c:	e050      	b.n	800dc20 <searchF4+0x3dc>
 800db7e:	bf00      	nop
 800db80:	20000f74 	.word	0x20000f74
 800db84:	200002b0 	.word	0x200002b0
 800db88:	200015d4 	.word	0x200015d4
 800db8c:	20000350 	.word	0x20000350
 800db90:	200002c9 	.word	0x200002c9
					if((pass[p_cnt] == 64) && (pass[p_cnt+1] == 64) && (pass[p_cnt+2] == 64) && (H_accel_flag == 0)){
 800db94:	4b4b      	ldr	r3, [pc, #300]	; (800dcc4 <searchF4+0x480>)
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	461a      	mov	r2, r3
 800db9a:	4b4b      	ldr	r3, [pc, #300]	; (800dcc8 <searchF4+0x484>)
 800db9c:	569b      	ldrsb	r3, [r3, r2]
 800db9e:	2b40      	cmp	r3, #64	; 0x40
 800dba0:	d11d      	bne.n	800dbde <searchF4+0x39a>
 800dba2:	4b48      	ldr	r3, [pc, #288]	; (800dcc4 <searchF4+0x480>)
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	3301      	adds	r3, #1
 800dba8:	4a47      	ldr	r2, [pc, #284]	; (800dcc8 <searchF4+0x484>)
 800dbaa:	56d3      	ldrsb	r3, [r2, r3]
 800dbac:	2b40      	cmp	r3, #64	; 0x40
 800dbae:	d116      	bne.n	800dbde <searchF4+0x39a>
 800dbb0:	4b44      	ldr	r3, [pc, #272]	; (800dcc4 <searchF4+0x480>)
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	3302      	adds	r3, #2
 800dbb6:	4a44      	ldr	r2, [pc, #272]	; (800dcc8 <searchF4+0x484>)
 800dbb8:	56d3      	ldrsb	r3, [r2, r3]
 800dbba:	2b40      	cmp	r3, #64	; 0x40
 800dbbc:	d10f      	bne.n	800dbde <searchF4+0x39a>
 800dbbe:	4b43      	ldr	r3, [pc, #268]	; (800dccc <searchF4+0x488>)
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d10b      	bne.n	800dbde <searchF4+0x39a>
						one_sectionVA();
 800dbc6:	f7f8 f8b3 	bl	8005d30 <one_sectionVA>
						H_accel_flag = 1;
 800dbca:	4b40      	ldr	r3, [pc, #256]	; (800dccc <searchF4+0x488>)
 800dbcc:	2201      	movs	r2, #1
 800dbce:	701a      	strb	r2, [r3, #0]
						p_cnt++;
 800dbd0:	4b3c      	ldr	r3, [pc, #240]	; (800dcc4 <searchF4+0x480>)
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	b2da      	uxtb	r2, r3
 800dbd8:	4b3a      	ldr	r3, [pc, #232]	; (800dcc4 <searchF4+0x480>)
 800dbda:	701a      	strb	r2, [r3, #0]
 800dbdc:	e020      	b.n	800dc20 <searchF4+0x3dc>
					else if((pass[p_cnt] == 64) && (pass[p_cnt+1] != 64) && (H_accel_flag == 1)){
 800dbde:	4b39      	ldr	r3, [pc, #228]	; (800dcc4 <searchF4+0x480>)
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	4b38      	ldr	r3, [pc, #224]	; (800dcc8 <searchF4+0x484>)
 800dbe6:	569b      	ldrsb	r3, [r3, r2]
 800dbe8:	2b40      	cmp	r3, #64	; 0x40
 800dbea:	d116      	bne.n	800dc1a <searchF4+0x3d6>
 800dbec:	4b35      	ldr	r3, [pc, #212]	; (800dcc4 <searchF4+0x480>)
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	4a35      	ldr	r2, [pc, #212]	; (800dcc8 <searchF4+0x484>)
 800dbf4:	56d3      	ldrsb	r3, [r2, r3]
 800dbf6:	2b40      	cmp	r3, #64	; 0x40
 800dbf8:	d00f      	beq.n	800dc1a <searchF4+0x3d6>
 800dbfa:	4b34      	ldr	r3, [pc, #208]	; (800dccc <searchF4+0x488>)
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d10b      	bne.n	800dc1a <searchF4+0x3d6>
						one_sectionVD();
 800dc02:	f7f8 f8f3 	bl	8005dec <one_sectionVD>
						H_accel_flag = 0;
 800dc06:	4b31      	ldr	r3, [pc, #196]	; (800dccc <searchF4+0x488>)
 800dc08:	2200      	movs	r2, #0
 800dc0a:	701a      	strb	r2, [r3, #0]
						p_cnt++;
 800dc0c:	4b2d      	ldr	r3, [pc, #180]	; (800dcc4 <searchF4+0x480>)
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	3301      	adds	r3, #1
 800dc12:	b2da      	uxtb	r2, r3
 800dc14:	4b2b      	ldr	r3, [pc, #172]	; (800dcc4 <searchF4+0x480>)
 800dc16:	701a      	strb	r2, [r3, #0]
 800dc18:	e002      	b.n	800dc20 <searchF4+0x3dc>
						half_sectionV();
 800dc1a:	f7f7 ff9d 	bl	8005b58 <half_sectionV>
				break;
 800dc1e:	e7ff      	b.n	800dc20 <searchF4+0x3dc>
 800dc20:	bf00      	nop
		}

	}while(pass[p_cnt] != -114);
 800dc22:	4b28      	ldr	r3, [pc, #160]	; (800dcc4 <searchF4+0x480>)
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	461a      	mov	r2, r3
 800dc28:	4b27      	ldr	r3, [pc, #156]	; (800dcc8 <searchF4+0x484>)
 800dc2a:	569b      	ldrsb	r3, [r3, r2]
 800dc2c:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800dc30:	f47f ae40 	bne.w	800d8b4 <searchF4+0x70>

	mouse.x = goal_x;
 800dc34:	4b26      	ldr	r3, [pc, #152]	; (800dcd0 <searchF4+0x48c>)
 800dc36:	781a      	ldrb	r2, [r3, #0]
 800dc38:	4b26      	ldr	r3, [pc, #152]	; (800dcd4 <searchF4+0x490>)
 800dc3a:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800dc3c:	4b26      	ldr	r3, [pc, #152]	; (800dcd8 <searchF4+0x494>)
 800dc3e:	781a      	ldrb	r2, [r3, #0]
 800dc40:	4b24      	ldr	r3, [pc, #144]	; (800dcd4 <searchF4+0x490>)
 800dc42:	705a      	strb	r2, [r3, #1]

	if(pass[p_cnt-1] != -13 && pass[p_cnt-1] != -14 && pass[p_cnt-1] != -15 && pass[p_cnt-1] != -16){
 800dc44:	4b1f      	ldr	r3, [pc, #124]	; (800dcc4 <searchF4+0x480>)
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	4a1f      	ldr	r2, [pc, #124]	; (800dcc8 <searchF4+0x484>)
 800dc4c:	56d3      	ldrsb	r3, [r2, r3]
 800dc4e:	f113 0f0d 	cmn.w	r3, #13
 800dc52:	d01c      	beq.n	800dc8e <searchF4+0x44a>
 800dc54:	4b1b      	ldr	r3, [pc, #108]	; (800dcc4 <searchF4+0x480>)
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	3b01      	subs	r3, #1
 800dc5a:	4a1b      	ldr	r2, [pc, #108]	; (800dcc8 <searchF4+0x484>)
 800dc5c:	56d3      	ldrsb	r3, [r2, r3]
 800dc5e:	f113 0f0e 	cmn.w	r3, #14
 800dc62:	d014      	beq.n	800dc8e <searchF4+0x44a>
 800dc64:	4b17      	ldr	r3, [pc, #92]	; (800dcc4 <searchF4+0x480>)
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	4a17      	ldr	r2, [pc, #92]	; (800dcc8 <searchF4+0x484>)
 800dc6c:	56d3      	ldrsb	r3, [r2, r3]
 800dc6e:	f113 0f0f 	cmn.w	r3, #15
 800dc72:	d00c      	beq.n	800dc8e <searchF4+0x44a>
 800dc74:	4b13      	ldr	r3, [pc, #76]	; (800dcc4 <searchF4+0x480>)
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	3b01      	subs	r3, #1
 800dc7a:	4a13      	ldr	r2, [pc, #76]	; (800dcc8 <searchF4+0x484>)
 800dc7c:	56d3      	ldrsb	r3, [r2, r3]
 800dc7e:	f113 0f10 	cmn.w	r3, #16
 800dc82:	d004      	beq.n	800dc8e <searchF4+0x44a>
		half_sectionD();
 800dc84:	f7f7 ff18 	bl	8005ab8 <half_sectionD>
		full_led_write(BLUE);
 800dc88:	2003      	movs	r0, #3
 800dc8a:	f001 ffe9 	bl	800fc60 <full_led_write>
	}

	HAL_Delay(500);
 800dc8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dc92:	f7f3 f9c3 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800dc96:	f7f8 fae3 	bl	8006260 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800dc9a:	2064      	movs	r0, #100	; 0x64
 800dc9c:	f7f7 fb8a 	bl	80053b4 <driveC2>
	degree_z = target_degree_z;
 800dca0:	4b0e      	ldr	r3, [pc, #56]	; (800dcdc <searchF4+0x498>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a0e      	ldr	r2, [pc, #56]	; (800dce0 <searchF4+0x49c>)
 800dca6:	6013      	str	r3, [r2, #0]
	start_flag = 0;
 800dca8:	4b0e      	ldr	r3, [pc, #56]	; (800dce4 <searchF4+0x4a0>)
 800dcaa:	2200      	movs	r2, #0
 800dcac:	701a      	strb	r2, [r3, #0]

	mouse.dir = mouse.dir / 2;
 800dcae:	4b09      	ldr	r3, [pc, #36]	; (800dcd4 <searchF4+0x490>)
 800dcb0:	789b      	ldrb	r3, [r3, #2]
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	085b      	lsrs	r3, r3, #1
 800dcb6:	b2da      	uxtb	r2, r3
 800dcb8:	4b06      	ldr	r3, [pc, #24]	; (800dcd4 <searchF4+0x490>)
 800dcba:	709a      	strb	r2, [r3, #2]

}
 800dcbc:	bf00      	nop
 800dcbe:	3708      	adds	r7, #8
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}
 800dcc4:	200002b0 	.word	0x200002b0
 800dcc8:	20000350 	.word	0x20000350
 800dccc:	200002c9 	.word	0x200002c9
 800dcd0:	20000bb9 	.word	0x20000bb9
 800dcd4:	20000c1c 	.word	0x20000c1c
 800dcd8:	20000b54 	.word	0x20000b54
 800dcdc:	20000c08 	.word	0x20000c08
 800dce0:	20000b64 	.word	0x20000b64
 800dce4:	200015d4 	.word	0x200015d4

0800dce8 <adv_pos>:
//adv_pos
//aマイクロマウス内部位置情報で前進させる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 800dce8:	b480      	push	{r7}
 800dcea:	af00      	add	r7, sp, #0

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 800dcec:	4b1a      	ldr	r3, [pc, #104]	; (800dd58 <adv_pos+0x70>)
 800dcee:	789b      	ldrb	r3, [r3, #2]
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	2b03      	cmp	r3, #3
 800dcf4:	d82a      	bhi.n	800dd4c <adv_pos+0x64>
 800dcf6:	a201      	add	r2, pc, #4	; (adr r2, 800dcfc <adv_pos+0x14>)
 800dcf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfc:	0800dd0d 	.word	0x0800dd0d
 800dd00:	0800dd1d 	.word	0x0800dd1d
 800dd04:	0800dd2d 	.word	0x0800dd2d
 800dd08:	0800dd3d 	.word	0x0800dd3d
	case 0x00:												//a北方向に向いている場合
		mouse.y++;											//Y座標をインクリメント
 800dd0c:	4b12      	ldr	r3, [pc, #72]	; (800dd58 <adv_pos+0x70>)
 800dd0e:	785b      	ldrb	r3, [r3, #1]
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	3301      	adds	r3, #1
 800dd14:	b2da      	uxtb	r2, r3
 800dd16:	4b10      	ldr	r3, [pc, #64]	; (800dd58 <adv_pos+0x70>)
 800dd18:	705a      	strb	r2, [r3, #1]
		break;
 800dd1a:	e017      	b.n	800dd4c <adv_pos+0x64>
	case 0x01:												//a東方向に向いている場合
		mouse.x++;											//X座標をインクリメント
 800dd1c:	4b0e      	ldr	r3, [pc, #56]	; (800dd58 <adv_pos+0x70>)
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	3301      	adds	r3, #1
 800dd24:	b2da      	uxtb	r2, r3
 800dd26:	4b0c      	ldr	r3, [pc, #48]	; (800dd58 <adv_pos+0x70>)
 800dd28:	701a      	strb	r2, [r3, #0]
		break;
 800dd2a:	e00f      	b.n	800dd4c <adv_pos+0x64>
	case 0x02:												//a南方向に向いている場合
		mouse.y--;											//Y座標をデクリメント
 800dd2c:	4b0a      	ldr	r3, [pc, #40]	; (800dd58 <adv_pos+0x70>)
 800dd2e:	785b      	ldrb	r3, [r3, #1]
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	3b01      	subs	r3, #1
 800dd34:	b2da      	uxtb	r2, r3
 800dd36:	4b08      	ldr	r3, [pc, #32]	; (800dd58 <adv_pos+0x70>)
 800dd38:	705a      	strb	r2, [r3, #1]
		break;
 800dd3a:	e007      	b.n	800dd4c <adv_pos+0x64>
	case 0x03:												//a西方向に向いている場合
		mouse.x--;											//X座標をデクリメント
 800dd3c:	4b06      	ldr	r3, [pc, #24]	; (800dd58 <adv_pos+0x70>)
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	b2db      	uxtb	r3, r3
 800dd42:	3b01      	subs	r3, #1
 800dd44:	b2da      	uxtb	r2, r3
 800dd46:	4b04      	ldr	r3, [pc, #16]	; (800dd58 <adv_pos+0x70>)
 800dd48:	701a      	strb	r2, [r3, #0]
		break;
 800dd4a:	bf00      	nop
	}
}
 800dd4c:	bf00      	nop
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr
 800dd56:	bf00      	nop
 800dd58:	20000c1c 	.word	0x20000c1c

0800dd5c <conf_route>:
//conf_route
//a進路を判定する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	af00      	add	r7, sp, #0

	//----a壁情報書き込み----
	write_map();
 800dd60:	f000 f886 	bl	800de70 <write_map>

	//----a最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 800dd64:	4b09      	ldr	r3, [pc, #36]	; (800dd8c <conf_route+0x30>)
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	461a      	mov	r2, r3
 800dd6a:	4b09      	ldr	r3, [pc, #36]	; (800dd90 <conf_route+0x34>)
 800dd6c:	5c9a      	ldrb	r2, [r3, r2]
 800dd6e:	4b09      	ldr	r3, [pc, #36]	; (800dd94 <conf_route+0x38>)
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	4013      	ands	r3, r2
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d006      	beq.n	800dd88 <conf_route+0x2c>
		make_smap();										//a歩数マップを更新
 800dd7a:	f000 fa79 	bl	800e270 <make_smap>
		make_route();										//a最短経路を更新
 800dd7e:	f000 fdb5 	bl	800e8ec <make_route>
		r_cnt = 0;											//a経路カウンタを0に
 800dd82:	4b02      	ldr	r3, [pc, #8]	; (800dd8c <conf_route+0x30>)
 800dd84:	2200      	movs	r2, #0
 800dd86:	701a      	strb	r2, [r3, #0]
	}
}
 800dd88:	bf00      	nop
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	200015dc 	.word	0x200015dc
 800dd90:	20000c64 	.word	0x20000c64
 800dd94:	200002c8 	.word	0x200002c8

0800dd98 <map_Init>:
//map_Init
//aマップ格納配列map[][]の初期化をする
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 800dd98:	b480      	push	{r7}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数

	//====a初期化開始====
	//aマップのクリア
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800dd9e:	2300      	movs	r3, #0
 800dda0:	71bb      	strb	r3, [r7, #6]
 800dda2:	e013      	b.n	800ddcc <map_Init+0x34>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800dda4:	2300      	movs	r3, #0
 800dda6:	71fb      	strb	r3, [r7, #7]
 800dda8:	e00a      	b.n	800ddc0 <map_Init+0x28>
			map[y][x] = 0xf0;								//a上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 800ddaa:	79ba      	ldrb	r2, [r7, #6]
 800ddac:	79fb      	ldrb	r3, [r7, #7]
 800ddae:	492f      	ldr	r1, [pc, #188]	; (800de6c <map_Init+0xd4>)
 800ddb0:	0112      	lsls	r2, r2, #4
 800ddb2:	440a      	add	r2, r1
 800ddb4:	4413      	add	r3, r2
 800ddb6:	22f0      	movs	r2, #240	; 0xf0
 800ddb8:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800ddba:	79fb      	ldrb	r3, [r7, #7]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	71fb      	strb	r3, [r7, #7]
 800ddc0:	79fb      	ldrb	r3, [r7, #7]
 800ddc2:	2b0f      	cmp	r3, #15
 800ddc4:	d9f1      	bls.n	800ddaa <map_Init+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800ddc6:	79bb      	ldrb	r3, [r7, #6]
 800ddc8:	3301      	adds	r3, #1
 800ddca:	71bb      	strb	r3, [r7, #6]
 800ddcc:	79bb      	ldrb	r3, [r7, #6]
 800ddce:	2b0f      	cmp	r3, #15
 800ddd0:	d9e8      	bls.n	800dda4 <map_Init+0xc>
		}
	}

	//a確定壁の配置
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	71bb      	strb	r3, [r7, #6]
 800ddd6:	e020      	b.n	800de1a <map_Init+0x82>
		map[y][0] |= 0xf1;									//a最西に壁を配置
 800ddd8:	79bb      	ldrb	r3, [r7, #6]
 800ddda:	4a24      	ldr	r2, [pc, #144]	; (800de6c <map_Init+0xd4>)
 800dddc:	011b      	lsls	r3, r3, #4
 800ddde:	4413      	add	r3, r2
 800dde0:	781a      	ldrb	r2, [r3, #0]
 800dde2:	79bb      	ldrb	r3, [r7, #6]
 800dde4:	f062 020e 	orn	r2, r2, #14
 800dde8:	b2d1      	uxtb	r1, r2
 800ddea:	4a20      	ldr	r2, [pc, #128]	; (800de6c <map_Init+0xd4>)
 800ddec:	011b      	lsls	r3, r3, #4
 800ddee:	4413      	add	r3, r2
 800ddf0:	460a      	mov	r2, r1
 800ddf2:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//a最東に壁を配置
 800ddf4:	79bb      	ldrb	r3, [r7, #6]
 800ddf6:	4a1d      	ldr	r2, [pc, #116]	; (800de6c <map_Init+0xd4>)
 800ddf8:	011b      	lsls	r3, r3, #4
 800ddfa:	4413      	add	r3, r2
 800ddfc:	330f      	adds	r3, #15
 800ddfe:	781a      	ldrb	r2, [r3, #0]
 800de00:	79bb      	ldrb	r3, [r7, #6]
 800de02:	f062 020b 	orn	r2, r2, #11
 800de06:	b2d1      	uxtb	r1, r2
 800de08:	4a18      	ldr	r2, [pc, #96]	; (800de6c <map_Init+0xd4>)
 800de0a:	011b      	lsls	r3, r3, #4
 800de0c:	4413      	add	r3, r2
 800de0e:	330f      	adds	r3, #15
 800de10:	460a      	mov	r2, r1
 800de12:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800de14:	79bb      	ldrb	r3, [r7, #6]
 800de16:	3301      	adds	r3, #1
 800de18:	71bb      	strb	r3, [r7, #6]
 800de1a:	79bb      	ldrb	r3, [r7, #6]
 800de1c:	2b0f      	cmp	r3, #15
 800de1e:	d9db      	bls.n	800ddd8 <map_Init+0x40>
	}
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800de20:	2300      	movs	r3, #0
 800de22:	71fb      	strb	r3, [r7, #7]
 800de24:	e019      	b.n	800de5a <map_Init+0xc2>
		map[0][x] |= 0xf2;									//a最南に壁を配置
 800de26:	79fb      	ldrb	r3, [r7, #7]
 800de28:	4a10      	ldr	r2, [pc, #64]	; (800de6c <map_Init+0xd4>)
 800de2a:	5cd2      	ldrb	r2, [r2, r3]
 800de2c:	79fb      	ldrb	r3, [r7, #7]
 800de2e:	f062 020d 	orn	r2, r2, #13
 800de32:	b2d1      	uxtb	r1, r2
 800de34:	4a0d      	ldr	r2, [pc, #52]	; (800de6c <map_Init+0xd4>)
 800de36:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//a最北に壁を配置
 800de38:	79fb      	ldrb	r3, [r7, #7]
 800de3a:	4a0c      	ldr	r2, [pc, #48]	; (800de6c <map_Init+0xd4>)
 800de3c:	4413      	add	r3, r2
 800de3e:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 800de42:	79fb      	ldrb	r3, [r7, #7]
 800de44:	f062 0207 	orn	r2, r2, #7
 800de48:	b2d1      	uxtb	r1, r2
 800de4a:	4a08      	ldr	r2, [pc, #32]	; (800de6c <map_Init+0xd4>)
 800de4c:	4413      	add	r3, r2
 800de4e:	460a      	mov	r2, r1
 800de50:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800de54:	79fb      	ldrb	r3, [r7, #7]
 800de56:	3301      	adds	r3, #1
 800de58:	71fb      	strb	r3, [r7, #7]
 800de5a:	79fb      	ldrb	r3, [r7, #7]
 800de5c:	2b0f      	cmp	r3, #15
 800de5e:	d9e2      	bls.n	800de26 <map_Init+0x8e>
	}
}
 800de60:	bf00      	nop
 800de62:	370c      	adds	r7, #12
 800de64:	46bd      	mov	sp, r7
 800de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6a:	4770      	bx	lr
 800de6c:	200001ac 	.word	0x200001ac

0800de70 <write_map>:
//write_map
//aマップデータを書き込む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 800de70:	b490      	push	{r4, r7}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t m_temp;											//a向きを補正した壁情報

	//====a壁情報の補正格納====
	m_temp = (wall_info >> mouse.dir) & 0x0f;				//aセンサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 800de76:	4b8f      	ldr	r3, [pc, #572]	; (800e0b4 <write_map+0x244>)
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	461a      	mov	r2, r3
 800de7c:	4b8e      	ldr	r3, [pc, #568]	; (800e0b8 <write_map+0x248>)
 800de7e:	789b      	ldrb	r3, [r3, #2]
 800de80:	b2db      	uxtb	r3, r3
 800de82:	fa42 f303 	asr.w	r3, r2, r3
 800de86:	b2db      	uxtb	r3, r3
 800de88:	f003 030f 	and.w	r3, r3, #15
 800de8c:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//a上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 800de8e:	79fb      	ldrb	r3, [r7, #7]
 800de90:	011b      	lsls	r3, r3, #4
 800de92:	b25a      	sxtb	r2, r3
 800de94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de98:	4313      	orrs	r3, r2
 800de9a:	b25b      	sxtb	r3, r3
 800de9c:	71fb      	strb	r3, [r7, #7]

	//====aデータの書き込み====
	map[mouse.y][mouse.x] = m_temp; 						//a現在地に壁情報書き込み
 800de9e:	4b86      	ldr	r3, [pc, #536]	; (800e0b8 <write_map+0x248>)
 800dea0:	785b      	ldrb	r3, [r3, #1]
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	4618      	mov	r0, r3
 800dea6:	4b84      	ldr	r3, [pc, #528]	; (800e0b8 <write_map+0x248>)
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	4619      	mov	r1, r3
 800deae:	4a83      	ldr	r2, [pc, #524]	; (800e0bc <write_map+0x24c>)
 800deb0:	0103      	lsls	r3, r0, #4
 800deb2:	4413      	add	r3, r2
 800deb4:	440b      	add	r3, r1
 800deb6:	79fa      	ldrb	r2, [r7, #7]
 800deb8:	701a      	strb	r2, [r3, #0]
	//----a周辺に書き込む----
	//a北側について
	if(mouse.y != 15){										//a現在最北端でないとき
 800deba:	4b7f      	ldr	r3, [pc, #508]	; (800e0b8 <write_map+0x248>)
 800debc:	785b      	ldrb	r3, [r3, #1]
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	2b0f      	cmp	r3, #15
 800dec2:	d039      	beq.n	800df38 <write_map+0xc8>
		if(m_temp & 0x88){									//a北壁がある場合
 800dec4:	79fb      	ldrb	r3, [r7, #7]
 800dec6:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800deca:	2b00      	cmp	r3, #0
 800decc:	d01a      	beq.n	800df04 <write_map+0x94>
			map[mouse.y + 1][mouse.x] |= 0x22;				//a北側の区画から見て南壁ありを書き込む
 800dece:	4b7a      	ldr	r3, [pc, #488]	; (800e0b8 <write_map+0x248>)
 800ded0:	785b      	ldrb	r3, [r3, #1]
 800ded2:	b2d8      	uxtb	r0, r3
 800ded4:	4603      	mov	r3, r0
 800ded6:	3301      	adds	r3, #1
 800ded8:	4a77      	ldr	r2, [pc, #476]	; (800e0b8 <write_map+0x248>)
 800deda:	7812      	ldrb	r2, [r2, #0]
 800dedc:	b2d1      	uxtb	r1, r2
 800dede:	460c      	mov	r4, r1
 800dee0:	4a76      	ldr	r2, [pc, #472]	; (800e0bc <write_map+0x24c>)
 800dee2:	011b      	lsls	r3, r3, #4
 800dee4:	4413      	add	r3, r2
 800dee6:	4423      	add	r3, r4
 800dee8:	781a      	ldrb	r2, [r3, #0]
 800deea:	4603      	mov	r3, r0
 800deec:	3301      	adds	r3, #1
 800deee:	4608      	mov	r0, r1
 800def0:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 800def4:	b2d1      	uxtb	r1, r2
 800def6:	4a71      	ldr	r2, [pc, #452]	; (800e0bc <write_map+0x24c>)
 800def8:	011b      	lsls	r3, r3, #4
 800defa:	4413      	add	r3, r2
 800defc:	4403      	add	r3, r0
 800defe:	460a      	mov	r2, r1
 800df00:	701a      	strb	r2, [r3, #0]
 800df02:	e019      	b.n	800df38 <write_map+0xc8>
		}else{												//a北壁がない場合
			map[mouse.y + 1][mouse.x] &= 0xDD;				//a北側の区画から見て南壁なしを書き込む
 800df04:	4b6c      	ldr	r3, [pc, #432]	; (800e0b8 <write_map+0x248>)
 800df06:	785b      	ldrb	r3, [r3, #1]
 800df08:	b2d8      	uxtb	r0, r3
 800df0a:	4603      	mov	r3, r0
 800df0c:	3301      	adds	r3, #1
 800df0e:	4a6a      	ldr	r2, [pc, #424]	; (800e0b8 <write_map+0x248>)
 800df10:	7812      	ldrb	r2, [r2, #0]
 800df12:	b2d1      	uxtb	r1, r2
 800df14:	460c      	mov	r4, r1
 800df16:	4a69      	ldr	r2, [pc, #420]	; (800e0bc <write_map+0x24c>)
 800df18:	011b      	lsls	r3, r3, #4
 800df1a:	4413      	add	r3, r2
 800df1c:	4423      	add	r3, r4
 800df1e:	781a      	ldrb	r2, [r3, #0]
 800df20:	4603      	mov	r3, r0
 800df22:	3301      	adds	r3, #1
 800df24:	4608      	mov	r0, r1
 800df26:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800df2a:	b2d1      	uxtb	r1, r2
 800df2c:	4a63      	ldr	r2, [pc, #396]	; (800e0bc <write_map+0x24c>)
 800df2e:	011b      	lsls	r3, r3, #4
 800df30:	4413      	add	r3, r2
 800df32:	4403      	add	r3, r0
 800df34:	460a      	mov	r2, r1
 800df36:	701a      	strb	r2, [r3, #0]
		}
	}
	//a東側について
	if(mouse.x != 15){										//a現在最東端でないとき
 800df38:	4b5f      	ldr	r3, [pc, #380]	; (800e0b8 <write_map+0x248>)
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	2b0f      	cmp	r3, #15
 800df40:	d037      	beq.n	800dfb2 <write_map+0x142>
		if(m_temp & 0x44){									//a東壁がある場合
 800df42:	79fb      	ldrb	r3, [r7, #7]
 800df44:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d019      	beq.n	800df80 <write_map+0x110>
			map[mouse.y][mouse.x + 1] |= 0x11;				//a東側の区画から見て西壁ありを書き込む
 800df4c:	4b5a      	ldr	r3, [pc, #360]	; (800e0b8 <write_map+0x248>)
 800df4e:	785b      	ldrb	r3, [r3, #1]
 800df50:	b2dc      	uxtb	r4, r3
 800df52:	4622      	mov	r2, r4
 800df54:	4b58      	ldr	r3, [pc, #352]	; (800e0b8 <write_map+0x248>)
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	b2d8      	uxtb	r0, r3
 800df5a:	4603      	mov	r3, r0
 800df5c:	3301      	adds	r3, #1
 800df5e:	4957      	ldr	r1, [pc, #348]	; (800e0bc <write_map+0x24c>)
 800df60:	0112      	lsls	r2, r2, #4
 800df62:	440a      	add	r2, r1
 800df64:	4413      	add	r3, r2
 800df66:	781a      	ldrb	r2, [r3, #0]
 800df68:	4603      	mov	r3, r0
 800df6a:	3301      	adds	r3, #1
 800df6c:	f042 0211 	orr.w	r2, r2, #17
 800df70:	b2d0      	uxtb	r0, r2
 800df72:	4952      	ldr	r1, [pc, #328]	; (800e0bc <write_map+0x24c>)
 800df74:	0122      	lsls	r2, r4, #4
 800df76:	440a      	add	r2, r1
 800df78:	4413      	add	r3, r2
 800df7a:	4602      	mov	r2, r0
 800df7c:	701a      	strb	r2, [r3, #0]
 800df7e:	e018      	b.n	800dfb2 <write_map+0x142>
		}else{												//a北壁がない場合
			map[mouse.y][mouse.x + 1] &= 0xEE;				//a東側の区画から見て西壁なしを書き込む
 800df80:	4b4d      	ldr	r3, [pc, #308]	; (800e0b8 <write_map+0x248>)
 800df82:	785b      	ldrb	r3, [r3, #1]
 800df84:	b2dc      	uxtb	r4, r3
 800df86:	4622      	mov	r2, r4
 800df88:	4b4b      	ldr	r3, [pc, #300]	; (800e0b8 <write_map+0x248>)
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	b2d8      	uxtb	r0, r3
 800df8e:	4603      	mov	r3, r0
 800df90:	3301      	adds	r3, #1
 800df92:	494a      	ldr	r1, [pc, #296]	; (800e0bc <write_map+0x24c>)
 800df94:	0112      	lsls	r2, r2, #4
 800df96:	440a      	add	r2, r1
 800df98:	4413      	add	r3, r2
 800df9a:	781a      	ldrb	r2, [r3, #0]
 800df9c:	4603      	mov	r3, r0
 800df9e:	3301      	adds	r3, #1
 800dfa0:	f022 0211 	bic.w	r2, r2, #17
 800dfa4:	b2d0      	uxtb	r0, r2
 800dfa6:	4945      	ldr	r1, [pc, #276]	; (800e0bc <write_map+0x24c>)
 800dfa8:	0122      	lsls	r2, r4, #4
 800dfaa:	440a      	add	r2, r1
 800dfac:	4413      	add	r3, r2
 800dfae:	4602      	mov	r2, r0
 800dfb0:	701a      	strb	r2, [r3, #0]
		}
	}
	//a南壁について
	if(mouse.y != 0){										//a現在最南端でないとき
 800dfb2:	4b41      	ldr	r3, [pc, #260]	; (800e0b8 <write_map+0x248>)
 800dfb4:	785b      	ldrb	r3, [r3, #1]
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d039      	beq.n	800e030 <write_map+0x1c0>
		if(m_temp & 0x22){									//a南壁がある場合
 800dfbc:	79fb      	ldrb	r3, [r7, #7]
 800dfbe:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d01a      	beq.n	800dffc <write_map+0x18c>
			map[mouse.y - 1][mouse.x] |= 0x88;				//a南側の区画から見て北壁ありを書き込む
 800dfc6:	4b3c      	ldr	r3, [pc, #240]	; (800e0b8 <write_map+0x248>)
 800dfc8:	785b      	ldrb	r3, [r3, #1]
 800dfca:	b2d8      	uxtb	r0, r3
 800dfcc:	4603      	mov	r3, r0
 800dfce:	3b01      	subs	r3, #1
 800dfd0:	4a39      	ldr	r2, [pc, #228]	; (800e0b8 <write_map+0x248>)
 800dfd2:	7812      	ldrb	r2, [r2, #0]
 800dfd4:	b2d1      	uxtb	r1, r2
 800dfd6:	460c      	mov	r4, r1
 800dfd8:	4a38      	ldr	r2, [pc, #224]	; (800e0bc <write_map+0x24c>)
 800dfda:	011b      	lsls	r3, r3, #4
 800dfdc:	4413      	add	r3, r2
 800dfde:	4423      	add	r3, r4
 800dfe0:	781a      	ldrb	r2, [r3, #0]
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	3b01      	subs	r3, #1
 800dfe6:	4608      	mov	r0, r1
 800dfe8:	f062 0277 	orn	r2, r2, #119	; 0x77
 800dfec:	b2d1      	uxtb	r1, r2
 800dfee:	4a33      	ldr	r2, [pc, #204]	; (800e0bc <write_map+0x24c>)
 800dff0:	011b      	lsls	r3, r3, #4
 800dff2:	4413      	add	r3, r2
 800dff4:	4403      	add	r3, r0
 800dff6:	460a      	mov	r2, r1
 800dff8:	701a      	strb	r2, [r3, #0]
 800dffa:	e019      	b.n	800e030 <write_map+0x1c0>
		}else{												//a南壁がない場合
			map[mouse.y - 1][mouse.x] &= 0x77;				//a南側の区画から見て北壁なしを書き込む
 800dffc:	4b2e      	ldr	r3, [pc, #184]	; (800e0b8 <write_map+0x248>)
 800dffe:	785b      	ldrb	r3, [r3, #1]
 800e000:	b2d8      	uxtb	r0, r3
 800e002:	4603      	mov	r3, r0
 800e004:	3b01      	subs	r3, #1
 800e006:	4a2c      	ldr	r2, [pc, #176]	; (800e0b8 <write_map+0x248>)
 800e008:	7812      	ldrb	r2, [r2, #0]
 800e00a:	b2d1      	uxtb	r1, r2
 800e00c:	460c      	mov	r4, r1
 800e00e:	4a2b      	ldr	r2, [pc, #172]	; (800e0bc <write_map+0x24c>)
 800e010:	011b      	lsls	r3, r3, #4
 800e012:	4413      	add	r3, r2
 800e014:	4423      	add	r3, r4
 800e016:	781a      	ldrb	r2, [r3, #0]
 800e018:	4603      	mov	r3, r0
 800e01a:	3b01      	subs	r3, #1
 800e01c:	4608      	mov	r0, r1
 800e01e:	f002 0277 	and.w	r2, r2, #119	; 0x77
 800e022:	b2d1      	uxtb	r1, r2
 800e024:	4a25      	ldr	r2, [pc, #148]	; (800e0bc <write_map+0x24c>)
 800e026:	011b      	lsls	r3, r3, #4
 800e028:	4413      	add	r3, r2
 800e02a:	4403      	add	r3, r0
 800e02c:	460a      	mov	r2, r1
 800e02e:	701a      	strb	r2, [r3, #0]
		}
	}
	//a西側について
	if(mouse.x != 0){										//a現在最西端でないとき
 800e030:	4b21      	ldr	r3, [pc, #132]	; (800e0b8 <write_map+0x248>)
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	b2db      	uxtb	r3, r3
 800e036:	2b00      	cmp	r3, #0
 800e038:	d037      	beq.n	800e0aa <write_map+0x23a>
		if(m_temp & 0x11){									//a西壁がある場合
 800e03a:	79fb      	ldrb	r3, [r7, #7]
 800e03c:	f003 0311 	and.w	r3, r3, #17
 800e040:	2b00      	cmp	r3, #0
 800e042:	d019      	beq.n	800e078 <write_map+0x208>
			map[mouse.y][mouse.x - 1] |= 0x44;				//a西側の区画から見て東壁ありを書き込む
 800e044:	4b1c      	ldr	r3, [pc, #112]	; (800e0b8 <write_map+0x248>)
 800e046:	785b      	ldrb	r3, [r3, #1]
 800e048:	b2dc      	uxtb	r4, r3
 800e04a:	4622      	mov	r2, r4
 800e04c:	4b1a      	ldr	r3, [pc, #104]	; (800e0b8 <write_map+0x248>)
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	b2d8      	uxtb	r0, r3
 800e052:	4603      	mov	r3, r0
 800e054:	3b01      	subs	r3, #1
 800e056:	4919      	ldr	r1, [pc, #100]	; (800e0bc <write_map+0x24c>)
 800e058:	0112      	lsls	r2, r2, #4
 800e05a:	440a      	add	r2, r1
 800e05c:	4413      	add	r3, r2
 800e05e:	781a      	ldrb	r2, [r3, #0]
 800e060:	4603      	mov	r3, r0
 800e062:	3b01      	subs	r3, #1
 800e064:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 800e068:	b2d0      	uxtb	r0, r2
 800e06a:	4914      	ldr	r1, [pc, #80]	; (800e0bc <write_map+0x24c>)
 800e06c:	0122      	lsls	r2, r4, #4
 800e06e:	440a      	add	r2, r1
 800e070:	4413      	add	r3, r2
 800e072:	4602      	mov	r2, r0
 800e074:	701a      	strb	r2, [r3, #0]
		}else{												//a西壁がない場合
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
		}
	}
}
 800e076:	e018      	b.n	800e0aa <write_map+0x23a>
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
 800e078:	4b0f      	ldr	r3, [pc, #60]	; (800e0b8 <write_map+0x248>)
 800e07a:	785b      	ldrb	r3, [r3, #1]
 800e07c:	b2dc      	uxtb	r4, r3
 800e07e:	4622      	mov	r2, r4
 800e080:	4b0d      	ldr	r3, [pc, #52]	; (800e0b8 <write_map+0x248>)
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	b2d8      	uxtb	r0, r3
 800e086:	4603      	mov	r3, r0
 800e088:	3b01      	subs	r3, #1
 800e08a:	490c      	ldr	r1, [pc, #48]	; (800e0bc <write_map+0x24c>)
 800e08c:	0112      	lsls	r2, r2, #4
 800e08e:	440a      	add	r2, r1
 800e090:	4413      	add	r3, r2
 800e092:	781a      	ldrb	r2, [r3, #0]
 800e094:	4603      	mov	r3, r0
 800e096:	3b01      	subs	r3, #1
 800e098:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 800e09c:	b2d0      	uxtb	r0, r2
 800e09e:	4907      	ldr	r1, [pc, #28]	; (800e0bc <write_map+0x24c>)
 800e0a0:	0122      	lsls	r2, r4, #4
 800e0a2:	440a      	add	r2, r1
 800e0a4:	4413      	add	r3, r2
 800e0a6:	4602      	mov	r2, r0
 800e0a8:	701a      	strb	r2, [r3, #0]
}
 800e0aa:	bf00      	nop
 800e0ac:	3708      	adds	r7, #8
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bc90      	pop	{r4, r7}
 800e0b2:	4770      	bx	lr
 800e0b4:	200002c8 	.word	0x200002c8
 800e0b8:	20000c1c 	.word	0x20000c1c
 800e0bc:	200001ac 	.word	0x200001ac

0800e0c0 <turn_dir>:
//turn_dir
//aマウスの方向を変更する
//a引数1：t_pat …… 回転方向(search.hでマクロ定義)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat, uint8_t t_mode){
 800e0c0:	b590      	push	{r4, r7, lr}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	460a      	mov	r2, r1
 800e0ca:	71fb      	strb	r3, [r7, #7]
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	71bb      	strb	r3, [r7, #6]

	//====a方向を変更====
	if(t_mode < 2){												//4方位モード
 800e0d0:	79bb      	ldrb	r3, [r7, #6]
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d840      	bhi.n	800e158 <turn_dir+0x98>
		mouse.dir = (mouse.dir + t_pat) & 0x03;					//a指定された分mouse.dirを回転させる
 800e0d6:	4b60      	ldr	r3, [pc, #384]	; (800e258 <turn_dir+0x198>)
 800e0d8:	789b      	ldrb	r3, [r3, #2]
 800e0da:	b2da      	uxtb	r2, r3
 800e0dc:	79fb      	ldrb	r3, [r7, #7]
 800e0de:	4413      	add	r3, r2
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	f003 0303 	and.w	r3, r3, #3
 800e0e6:	b2da      	uxtb	r2, r3
 800e0e8:	4b5b      	ldr	r3, [pc, #364]	; (800e258 <turn_dir+0x198>)
 800e0ea:	709a      	strb	r2, [r3, #2]
		if(t_mode == 1){
 800e0ec:	79bb      	ldrb	r3, [r7, #6]
 800e0ee:	2b01      	cmp	r3, #1
 800e0f0:	f040 80a8 	bne.w	800e244 <turn_dir+0x184>
			if(t_pat == 0x01) target_degree_z -= 90.5;			//a目標角度+右90度
 800e0f4:	79fb      	ldrb	r3, [r7, #7]
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d109      	bne.n	800e10e <turn_dir+0x4e>
 800e0fa:	4b58      	ldr	r3, [pc, #352]	; (800e25c <turn_dir+0x19c>)
 800e0fc:	edd3 7a00 	vldr	s15, [r3]
 800e100:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800e260 <turn_dir+0x1a0>
 800e104:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e108:	4b54      	ldr	r3, [pc, #336]	; (800e25c <turn_dir+0x19c>)
 800e10a:	edc3 7a00 	vstr	s15, [r3]
//			if(t_pat == 0xff) target_degree_z += 90.5;			//a目標角度+左90度
			if(t_pat == 0xff) target_degree_z += 90.3;			//a目標角度+左90度
 800e10e:	79fb      	ldrb	r3, [r7, #7]
 800e110:	2bff      	cmp	r3, #255	; 0xff
 800e112:	d112      	bne.n	800e13a <turn_dir+0x7a>
 800e114:	4b51      	ldr	r3, [pc, #324]	; (800e25c <turn_dir+0x19c>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4618      	mov	r0, r3
 800e11a:	f7f2 fa0d 	bl	8000538 <__aeabi_f2d>
 800e11e:	a34c      	add	r3, pc, #304	; (adr r3, 800e250 <turn_dir+0x190>)
 800e120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e124:	f7f2 f8aa 	bl	800027c <__adddf3>
 800e128:	4603      	mov	r3, r0
 800e12a:	460c      	mov	r4, r1
 800e12c:	4618      	mov	r0, r3
 800e12e:	4621      	mov	r1, r4
 800e130:	f7f2 fd32 	bl	8000b98 <__aeabi_d2f>
 800e134:	4602      	mov	r2, r0
 800e136:	4b49      	ldr	r3, [pc, #292]	; (800e25c <turn_dir+0x19c>)
 800e138:	601a      	str	r2, [r3, #0]
			if(t_pat == 0x02) target_degree_z -= 181;			//a目標角度+右180度
 800e13a:	79fb      	ldrb	r3, [r7, #7]
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	f040 8081 	bne.w	800e244 <turn_dir+0x184>
 800e142:	4b46      	ldr	r3, [pc, #280]	; (800e25c <turn_dir+0x19c>)
 800e144:	edd3 7a00 	vldr	s15, [r3]
 800e148:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800e264 <turn_dir+0x1a4>
 800e14c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e150:	4b42      	ldr	r3, [pc, #264]	; (800e25c <turn_dir+0x19c>)
 800e152:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
		}
	}
}
 800e156:	e075      	b.n	800e244 <turn_dir+0x184>
		mouse.dir = (mouse.dir + t_pat) & 0x07;					//a指定された分mouse.dirを回転させる
 800e158:	4b3f      	ldr	r3, [pc, #252]	; (800e258 <turn_dir+0x198>)
 800e15a:	789b      	ldrb	r3, [r3, #2]
 800e15c:	b2da      	uxtb	r2, r3
 800e15e:	79fb      	ldrb	r3, [r7, #7]
 800e160:	4413      	add	r3, r2
 800e162:	b2db      	uxtb	r3, r3
 800e164:	f003 0307 	and.w	r3, r3, #7
 800e168:	b2da      	uxtb	r2, r3
 800e16a:	4b3b      	ldr	r3, [pc, #236]	; (800e258 <turn_dir+0x198>)
 800e16c:	709a      	strb	r2, [r3, #2]
		if(t_mode == 3){
 800e16e:	79bb      	ldrb	r3, [r7, #6]
 800e170:	2b03      	cmp	r3, #3
 800e172:	d167      	bne.n	800e244 <turn_dir+0x184>
			if(t_pat == 0x01) target_degree_z -= 45.25;			//a目標角度+右90度
 800e174:	79fb      	ldrb	r3, [r7, #7]
 800e176:	2b01      	cmp	r3, #1
 800e178:	d109      	bne.n	800e18e <turn_dir+0xce>
 800e17a:	4b38      	ldr	r3, [pc, #224]	; (800e25c <turn_dir+0x19c>)
 800e17c:	edd3 7a00 	vldr	s15, [r3]
 800e180:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800e268 <turn_dir+0x1a8>
 800e184:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e188:	4b34      	ldr	r3, [pc, #208]	; (800e25c <turn_dir+0x19c>)
 800e18a:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 90.5;			//a目標角度+左90度
 800e18e:	79fb      	ldrb	r3, [r7, #7]
 800e190:	2b02      	cmp	r3, #2
 800e192:	d109      	bne.n	800e1a8 <turn_dir+0xe8>
 800e194:	4b31      	ldr	r3, [pc, #196]	; (800e25c <turn_dir+0x19c>)
 800e196:	edd3 7a00 	vldr	s15, [r3]
 800e19a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800e260 <turn_dir+0x1a0>
 800e19e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1a2:	4b2e      	ldr	r3, [pc, #184]	; (800e25c <turn_dir+0x19c>)
 800e1a4:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x03) target_degree_z -= 135.75;		//a目標角度+右180度
 800e1a8:	79fb      	ldrb	r3, [r7, #7]
 800e1aa:	2b03      	cmp	r3, #3
 800e1ac:	d109      	bne.n	800e1c2 <turn_dir+0x102>
 800e1ae:	4b2b      	ldr	r3, [pc, #172]	; (800e25c <turn_dir+0x19c>)
 800e1b0:	edd3 7a00 	vldr	s15, [r3]
 800e1b4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800e26c <turn_dir+0x1ac>
 800e1b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1bc:	4b27      	ldr	r3, [pc, #156]	; (800e25c <turn_dir+0x19c>)
 800e1be:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x04) target_degree_z -= 181;			//a目標角度+右180度
 800e1c2:	79fb      	ldrb	r3, [r7, #7]
 800e1c4:	2b04      	cmp	r3, #4
 800e1c6:	d109      	bne.n	800e1dc <turn_dir+0x11c>
 800e1c8:	4b24      	ldr	r3, [pc, #144]	; (800e25c <turn_dir+0x19c>)
 800e1ca:	edd3 7a00 	vldr	s15, [r3]
 800e1ce:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800e264 <turn_dir+0x1a4>
 800e1d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1d6:	4b21      	ldr	r3, [pc, #132]	; (800e25c <turn_dir+0x19c>)
 800e1d8:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 45.25;			//a目標角度+右90度
 800e1dc:	79fb      	ldrb	r3, [r7, #7]
 800e1de:	2bff      	cmp	r3, #255	; 0xff
 800e1e0:	d109      	bne.n	800e1f6 <turn_dir+0x136>
 800e1e2:	4b1e      	ldr	r3, [pc, #120]	; (800e25c <turn_dir+0x19c>)
 800e1e4:	edd3 7a00 	vldr	s15, [r3]
 800e1e8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800e268 <turn_dir+0x1a8>
 800e1ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1f0:	4b1a      	ldr	r3, [pc, #104]	; (800e25c <turn_dir+0x19c>)
 800e1f2:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
 800e1f6:	79fb      	ldrb	r3, [r7, #7]
 800e1f8:	2bfe      	cmp	r3, #254	; 0xfe
 800e1fa:	d109      	bne.n	800e210 <turn_dir+0x150>
 800e1fc:	4b17      	ldr	r3, [pc, #92]	; (800e25c <turn_dir+0x19c>)
 800e1fe:	edd3 7a00 	vldr	s15, [r3]
 800e202:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800e260 <turn_dir+0x1a0>
 800e206:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e20a:	4b14      	ldr	r3, [pc, #80]	; (800e25c <turn_dir+0x19c>)
 800e20c:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
 800e210:	79fb      	ldrb	r3, [r7, #7]
 800e212:	2bfd      	cmp	r3, #253	; 0xfd
 800e214:	d109      	bne.n	800e22a <turn_dir+0x16a>
 800e216:	4b11      	ldr	r3, [pc, #68]	; (800e25c <turn_dir+0x19c>)
 800e218:	edd3 7a00 	vldr	s15, [r3]
 800e21c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800e26c <turn_dir+0x1ac>
 800e220:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e224:	4b0d      	ldr	r3, [pc, #52]	; (800e25c <turn_dir+0x19c>)
 800e226:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
 800e22a:	79fb      	ldrb	r3, [r7, #7]
 800e22c:	2bfc      	cmp	r3, #252	; 0xfc
 800e22e:	d109      	bne.n	800e244 <turn_dir+0x184>
 800e230:	4b0a      	ldr	r3, [pc, #40]	; (800e25c <turn_dir+0x19c>)
 800e232:	edd3 7a00 	vldr	s15, [r3]
 800e236:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800e264 <turn_dir+0x1a4>
 800e23a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e23e:	4b07      	ldr	r3, [pc, #28]	; (800e25c <turn_dir+0x19c>)
 800e240:	edc3 7a00 	vstr	s15, [r3]
}
 800e244:	bf00      	nop
 800e246:	370c      	adds	r7, #12
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd90      	pop	{r4, r7, pc}
 800e24c:	f3af 8000 	nop.w
 800e250:	33333333 	.word	0x33333333
 800e254:	40569333 	.word	0x40569333
 800e258:	20000c1c 	.word	0x20000c1c
 800e25c:	20000c08 	.word	0x20000c08
 800e260:	42b50000 	.word	0x42b50000
 800e264:	43350000 	.word	0x43350000
 800e268:	42350000 	.word	0x42350000
 800e26c:	4307c000 	.word	0x4307c000

0800e270 <make_smap>:
//make_smap
//a歩数マップを作成する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 800e270:	b490      	push	{r4, r7}
 800e272:	b08c      	sub	sp, #48	; 0x30
 800e274:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数
	uint8_t m_temp_sample[16];

	//====a歩数マップのクリア====
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800e276:	2300      	movs	r3, #0
 800e278:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800e27c:	e01c      	b.n	800e2b8 <make_smap+0x48>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800e27e:	2300      	movs	r3, #0
 800e280:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e284:	e00f      	b.n	800e2a6 <make_smap+0x36>
			smap[y][x] = 0x03e7;							//a未記入部分は歩数最大とする
 800e286:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e28a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e28e:	499c      	ldr	r1, [pc, #624]	; (800e500 <make_smap+0x290>)
 800e290:	0112      	lsls	r2, r2, #4
 800e292:	4413      	add	r3, r2
 800e294:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e298:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800e29c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e2a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2aa:	2b0f      	cmp	r3, #15
 800e2ac:	d9eb      	bls.n	800e286 <make_smap+0x16>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800e2ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800e2b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e2bc:	2b0f      	cmp	r3, #15
 800e2be:	d9de      	bls.n	800e27e <make_smap+0xe>
		}
	}

	//====aゴール座標を0にする====
	m_step = 0;												//a歩数カウンタを0にする
 800e2c0:	4b90      	ldr	r3, [pc, #576]	; (800e504 <make_smap+0x294>)
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	801a      	strh	r2, [r3, #0]
	smap[goal_y][goal_x] = 0;
 800e2c6:	4b90      	ldr	r3, [pc, #576]	; (800e508 <make_smap+0x298>)
 800e2c8:	781b      	ldrb	r3, [r3, #0]
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	4b8f      	ldr	r3, [pc, #572]	; (800e50c <make_smap+0x29c>)
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	4a8b      	ldr	r2, [pc, #556]	; (800e500 <make_smap+0x290>)
 800e2d4:	0103      	lsls	r3, r0, #4
 800e2d6:	440b      	add	r3, r1
 800e2d8:	2100      	movs	r1, #0
 800e2da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====a歩数カウンタの重みづけ====
	int straight = 1;
 800e2de:	2301      	movs	r3, #1
 800e2e0:	61bb      	str	r3, [r7, #24]
	int turn = 10;
 800e2e2:	230a      	movs	r3, #10
 800e2e4:	617b      	str	r3, [r7, #20]

	//====a自分の座標にたどり着くまでループ====
	do{
		//----aマップ全域を捜索----
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800e2ec:	e2d1      	b.n	800e892 <make_smap+0x622>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e2f4:	e2c3      	b.n	800e87e <make_smap+0x60e>
				//----a現在最大の歩数を発見したとき----
				if(smap[y][x] == m_step){					//a歩数カウンタm_stepの値が現在最大の歩数
 800e2f6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e2fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2fe:	4980      	ldr	r1, [pc, #512]	; (800e500 <make_smap+0x290>)
 800e300:	0112      	lsls	r2, r2, #4
 800e302:	4413      	add	r3, r2
 800e304:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800e308:	4b7e      	ldr	r3, [pc, #504]	; (800e504 <make_smap+0x294>)
 800e30a:	881b      	ldrh	r3, [r3, #0]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	f040 82b1 	bne.w	800e874 <make_smap+0x604>
					uint8_t m_temp = map[y][x];				//map配列からマップデータを取り出す
 800e312:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e316:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e31a:	497d      	ldr	r1, [pc, #500]	; (800e510 <make_smap+0x2a0>)
 800e31c:	0112      	lsls	r2, r2, #4
 800e31e:	440a      	add	r2, r1
 800e320:	4413      	add	r3, r2
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(MF.FLAG.SCND){						//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800e328:	4b7a      	ldr	r3, [pc, #488]	; (800e514 <make_smap+0x2a4>)
 800e32a:	881b      	ldrh	r3, [r3, #0]
 800e32c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e330:	b2db      	uxtb	r3, r3
 800e332:	2b00      	cmp	r3, #0
 800e334:	d004      	beq.n	800e340 <make_smap+0xd0>
						m_temp >>= 4;						//a上位4bitを使うので4bit分右にシフトさせる
 800e336:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e33a:	091b      	lsrs	r3, r3, #4
 800e33c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					}
					//----a北壁についての処理----
					if(!(m_temp & 0x08) && y != 15){		//a北壁がなく現在最北端でないとき
 800e340:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e344:	f003 0308 	and.w	r3, r3, #8
 800e348:	2b00      	cmp	r3, #0
 800e34a:	f040 809c 	bne.w	800e486 <make_smap+0x216>
 800e34e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e352:	2b0f      	cmp	r3, #15
 800e354:	f000 8097 	beq.w	800e486 <make_smap+0x216>
						if(smap[y+1][x] == 0x03e7){			//a北側が未記入なら
 800e358:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e35c:	1c5a      	adds	r2, r3, #1
 800e35e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e362:	4967      	ldr	r1, [pc, #412]	; (800e500 <make_smap+0x290>)
 800e364:	0112      	lsls	r2, r2, #4
 800e366:	4413      	add	r3, r2
 800e368:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e36c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e370:	4293      	cmp	r3, r2
 800e372:	f040 8088 	bne.w	800e486 <make_smap+0x216>
							smap[y+1][x] = smap[y][x] + turn;		//a次の歩数を書き込む
 800e376:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e37a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e37e:	4960      	ldr	r1, [pc, #384]	; (800e500 <make_smap+0x290>)
 800e380:	0112      	lsls	r2, r2, #4
 800e382:	4413      	add	r3, r2
 800e384:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	b299      	uxth	r1, r3
 800e38c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e390:	1c5a      	adds	r2, r3, #1
 800e392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e396:	4401      	add	r1, r0
 800e398:	b288      	uxth	r0, r1
 800e39a:	4959      	ldr	r1, [pc, #356]	; (800e500 <make_smap+0x290>)
 800e39c:	0112      	lsls	r2, r2, #4
 800e39e:	4413      	add	r3, r2
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800e3a6:	4b5b      	ldr	r3, [pc, #364]	; (800e514 <make_smap+0x2a4>)
 800e3a8:	881b      	ldrh	r3, [r3, #0]
 800e3aa:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800e3ae:	b2db      	uxtb	r3, r3
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d068      	beq.n	800e486 <make_smap+0x216>
								//----a直線優先処理----
								for (int k = 1; k < 16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3b8:	e05e      	b.n	800e478 <make_smap+0x208>
									m_temp_sample[k] = map[y + k][x];				//map配列からマップデータを取り出す
 800e3ba:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c0:	441a      	add	r2, r3
 800e3c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3c6:	4952      	ldr	r1, [pc, #328]	; (800e510 <make_smap+0x2a0>)
 800e3c8:	0112      	lsls	r2, r2, #4
 800e3ca:	440a      	add	r2, r1
 800e3cc:	4413      	add	r3, r2
 800e3ce:	7819      	ldrb	r1, [r3, #0]
 800e3d0:	1d3a      	adds	r2, r7, #4
 800e3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d4:	4413      	add	r3, r2
 800e3d6:	460a      	mov	r2, r1
 800e3d8:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800e3da:	4b4e      	ldr	r3, [pc, #312]	; (800e514 <make_smap+0x2a4>)
 800e3dc:	881b      	ldrh	r3, [r3, #0]
 800e3de:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d00a      	beq.n	800e3fe <make_smap+0x18e>
 800e3e8:	1d3a      	adds	r2, r7, #4
 800e3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ec:	4413      	add	r3, r2
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	091b      	lsrs	r3, r3, #4
 800e3f2:	b2d9      	uxtb	r1, r3
 800e3f4:	1d3a      	adds	r2, r7, #4
 800e3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f8:	4413      	add	r3, r2
 800e3fa:	460a      	mov	r2, r1
 800e3fc:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x08) && (y + k) != 0x0f) {		//a北壁がなく現在最北端でないとき
 800e3fe:	1d3a      	adds	r2, r7, #4
 800e400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e402:	4413      	add	r3, r2
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	f003 0308 	and.w	r3, r3, #8
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d13b      	bne.n	800e486 <make_smap+0x216>
 800e40e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e414:	4413      	add	r3, r2
 800e416:	2b0f      	cmp	r3, #15
 800e418:	d035      	beq.n	800e486 <make_smap+0x216>
										if (smap[y + k + 1][x] == 0x03e7) {						//a北側が未記入なら
 800e41a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e420:	4413      	add	r3, r2
 800e422:	1c5a      	adds	r2, r3, #1
 800e424:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e428:	4935      	ldr	r1, [pc, #212]	; (800e500 <make_smap+0x290>)
 800e42a:	0112      	lsls	r2, r2, #4
 800e42c:	4413      	add	r3, r2
 800e42e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e432:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e436:	4293      	cmp	r3, r2
 800e438:	d11b      	bne.n	800e472 <make_smap+0x202>
											smap[y + k + 1][x] = smap[y + k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800e43a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e440:	441a      	add	r2, r3
 800e442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e446:	492e      	ldr	r1, [pc, #184]	; (800e500 <make_smap+0x290>)
 800e448:	0112      	lsls	r2, r2, #4
 800e44a:	4413      	add	r3, r2
 800e44c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e450:	69bb      	ldr	r3, [r7, #24]
 800e452:	b299      	uxth	r1, r3
 800e454:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45a:	4413      	add	r3, r2
 800e45c:	1c5a      	adds	r2, r3, #1
 800e45e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e462:	4401      	add	r1, r0
 800e464:	b288      	uxth	r0, r1
 800e466:	4926      	ldr	r1, [pc, #152]	; (800e500 <make_smap+0x290>)
 800e468:	0112      	lsls	r2, r2, #4
 800e46a:	4413      	add	r3, r2
 800e46c:	4602      	mov	r2, r0
 800e46e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < 16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800e472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e474:	3301      	adds	r3, #1
 800e476:	62bb      	str	r3, [r7, #40]	; 0x28
 800e478:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e47c:	f1c3 0310 	rsb	r3, r3, #16
 800e480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e482:	429a      	cmp	r2, r3
 800e484:	db99      	blt.n	800e3ba <make_smap+0x14a>
								}
							}
						}
					}
					//----a東壁についての処理----
					if(!(m_temp & 0x04) && x != 15){		//a東壁がなく現在最東端でないとき
 800e486:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e48a:	f003 0304 	and.w	r3, r3, #4
 800e48e:	2b00      	cmp	r3, #0
 800e490:	f040 80a8 	bne.w	800e5e4 <make_smap+0x374>
 800e494:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e498:	2b0f      	cmp	r3, #15
 800e49a:	f000 80a3 	beq.w	800e5e4 <make_smap+0x374>
						if(smap[y][x+1] == 0x03e7){			//a東側が未記入なら
 800e49e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e4a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	4915      	ldr	r1, [pc, #84]	; (800e500 <make_smap+0x290>)
 800e4aa:	0112      	lsls	r2, r2, #4
 800e4ac:	4413      	add	r3, r2
 800e4ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e4b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	f040 8094 	bne.w	800e5e4 <make_smap+0x374>
							smap[y][x+1] = smap[y][x] + turn;	//a次の歩数を書き込む
 800e4bc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e4c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4c4:	490e      	ldr	r1, [pc, #56]	; (800e500 <make_smap+0x290>)
 800e4c6:	0112      	lsls	r2, r2, #4
 800e4c8:	4413      	add	r3, r2
 800e4ca:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	b299      	uxth	r1, r3
 800e4d2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e4d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4da:	3301      	adds	r3, #1
 800e4dc:	4401      	add	r1, r0
 800e4de:	b288      	uxth	r0, r1
 800e4e0:	4907      	ldr	r1, [pc, #28]	; (800e500 <make_smap+0x290>)
 800e4e2:	0112      	lsls	r2, r2, #4
 800e4e4:	4413      	add	r3, r2
 800e4e6:	4602      	mov	r2, r0
 800e4e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800e4ec:	4b09      	ldr	r3, [pc, #36]	; (800e514 <make_smap+0x2a4>)
 800e4ee:	881b      	ldrh	r3, [r3, #0]
 800e4f0:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800e4f4:	b2db      	uxtb	r3, r3
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d074      	beq.n	800e5e4 <make_smap+0x374>
								//----a直線優先処理----
								for (int k = 1; k < 16 - x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	627b      	str	r3, [r7, #36]	; 0x24
 800e4fe:	e06a      	b.n	800e5d6 <make_smap+0x366>
 800e500:	20000d70 	.word	0x20000d70
 800e504:	2000034e 	.word	0x2000034e
 800e508:	20000b54 	.word	0x20000b54
 800e50c:	20000bb9 	.word	0x20000bb9
 800e510:	200001ac 	.word	0x200001ac
 800e514:	20000f74 	.word	0x20000f74
									m_temp_sample[k] = map[y][x + k];				//map配列からマップデータを取り出す
 800e518:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e51c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800e520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e522:	440b      	add	r3, r1
 800e524:	499e      	ldr	r1, [pc, #632]	; (800e7a0 <make_smap+0x530>)
 800e526:	0112      	lsls	r2, r2, #4
 800e528:	440a      	add	r2, r1
 800e52a:	4413      	add	r3, r2
 800e52c:	7819      	ldrb	r1, [r3, #0]
 800e52e:	1d3a      	adds	r2, r7, #4
 800e530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e532:	4413      	add	r3, r2
 800e534:	460a      	mov	r2, r1
 800e536:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800e538:	4b9a      	ldr	r3, [pc, #616]	; (800e7a4 <make_smap+0x534>)
 800e53a:	881b      	ldrh	r3, [r3, #0]
 800e53c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e540:	b2db      	uxtb	r3, r3
 800e542:	2b00      	cmp	r3, #0
 800e544:	d00a      	beq.n	800e55c <make_smap+0x2ec>
 800e546:	1d3a      	adds	r2, r7, #4
 800e548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54a:	4413      	add	r3, r2
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	091b      	lsrs	r3, r3, #4
 800e550:	b2d9      	uxtb	r1, r3
 800e552:	1d3a      	adds	r2, r7, #4
 800e554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e556:	4413      	add	r3, r2
 800e558:	460a      	mov	r2, r1
 800e55a:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x04) && (x + k) != 0x0f) {		//a東壁がなく現在最東端でないとき
 800e55c:	1d3a      	adds	r2, r7, #4
 800e55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e560:	4413      	add	r3, r2
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	f003 0304 	and.w	r3, r3, #4
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d13b      	bne.n	800e5e4 <make_smap+0x374>
 800e56c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e572:	4413      	add	r3, r2
 800e574:	2b0f      	cmp	r3, #15
 800e576:	d035      	beq.n	800e5e4 <make_smap+0x374>
										if (smap[y][x + k + 1] == 0x03e7) {						//a東側が未記入なら
 800e578:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e57c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800e580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e582:	440b      	add	r3, r1
 800e584:	3301      	adds	r3, #1
 800e586:	4988      	ldr	r1, [pc, #544]	; (800e7a8 <make_smap+0x538>)
 800e588:	0112      	lsls	r2, r2, #4
 800e58a:	4413      	add	r3, r2
 800e58c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e590:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e594:	4293      	cmp	r3, r2
 800e596:	d11b      	bne.n	800e5d0 <make_smap+0x360>
											smap[y][x + k + 1] = smap[y][x + k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800e598:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e59c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a2:	440b      	add	r3, r1
 800e5a4:	4980      	ldr	r1, [pc, #512]	; (800e7a8 <make_smap+0x538>)
 800e5a6:	0112      	lsls	r2, r2, #4
 800e5a8:	4413      	add	r3, r2
 800e5aa:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e5ae:	69bb      	ldr	r3, [r7, #24]
 800e5b0:	b299      	uxth	r1, r3
 800e5b2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e5b6:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5bc:	4423      	add	r3, r4
 800e5be:	3301      	adds	r3, #1
 800e5c0:	4401      	add	r1, r0
 800e5c2:	b288      	uxth	r0, r1
 800e5c4:	4978      	ldr	r1, [pc, #480]	; (800e7a8 <make_smap+0x538>)
 800e5c6:	0112      	lsls	r2, r2, #4
 800e5c8:	4413      	add	r3, r2
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < 16 - x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800e5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	627b      	str	r3, [r7, #36]	; 0x24
 800e5d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5da:	f1c3 0310 	rsb	r3, r3, #16
 800e5de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	db99      	blt.n	800e518 <make_smap+0x2a8>
								}
							}
						}
					}
					//----a南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//a南壁がなく現在最南端でないとき
 800e5e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e5e8:	f003 0302 	and.w	r3, r3, #2
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	f040 809a 	bne.w	800e726 <make_smap+0x4b6>
 800e5f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	f000 8095 	beq.w	800e726 <make_smap+0x4b6>
						if(smap[y-1][x] == 0x03e7){			//a南側が未記入なら
 800e5fc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e600:	1e5a      	subs	r2, r3, #1
 800e602:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e606:	4968      	ldr	r1, [pc, #416]	; (800e7a8 <make_smap+0x538>)
 800e608:	0112      	lsls	r2, r2, #4
 800e60a:	4413      	add	r3, r2
 800e60c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e610:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e614:	4293      	cmp	r3, r2
 800e616:	f040 8086 	bne.w	800e726 <make_smap+0x4b6>
							smap[y-1][x] = smap[y][x] + turn;	//a次の歩数を書き込む
 800e61a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e61e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e622:	4961      	ldr	r1, [pc, #388]	; (800e7a8 <make_smap+0x538>)
 800e624:	0112      	lsls	r2, r2, #4
 800e626:	4413      	add	r3, r2
 800e628:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	b299      	uxth	r1, r3
 800e630:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e634:	1e5a      	subs	r2, r3, #1
 800e636:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e63a:	4401      	add	r1, r0
 800e63c:	b288      	uxth	r0, r1
 800e63e:	495a      	ldr	r1, [pc, #360]	; (800e7a8 <make_smap+0x538>)
 800e640:	0112      	lsls	r2, r2, #4
 800e642:	4413      	add	r3, r2
 800e644:	4602      	mov	r2, r0
 800e646:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800e64a:	4b56      	ldr	r3, [pc, #344]	; (800e7a4 <make_smap+0x534>)
 800e64c:	881b      	ldrh	r3, [r3, #0]
 800e64e:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800e652:	b2db      	uxtb	r3, r3
 800e654:	2b00      	cmp	r3, #0
 800e656:	d066      	beq.n	800e726 <make_smap+0x4b6>
								//----a直線優先処理----
								for (int k = 1; k < y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800e658:	2301      	movs	r3, #1
 800e65a:	623b      	str	r3, [r7, #32]
 800e65c:	e05e      	b.n	800e71c <make_smap+0x4ac>
									m_temp_sample[k] = map[y - k][x];				//map配列からマップデータを取り出す
 800e65e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e662:	6a3b      	ldr	r3, [r7, #32]
 800e664:	1ad2      	subs	r2, r2, r3
 800e666:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e66a:	494d      	ldr	r1, [pc, #308]	; (800e7a0 <make_smap+0x530>)
 800e66c:	0112      	lsls	r2, r2, #4
 800e66e:	440a      	add	r2, r1
 800e670:	4413      	add	r3, r2
 800e672:	7819      	ldrb	r1, [r3, #0]
 800e674:	1d3a      	adds	r2, r7, #4
 800e676:	6a3b      	ldr	r3, [r7, #32]
 800e678:	4413      	add	r3, r2
 800e67a:	460a      	mov	r2, r1
 800e67c:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800e67e:	4b49      	ldr	r3, [pc, #292]	; (800e7a4 <make_smap+0x534>)
 800e680:	881b      	ldrh	r3, [r3, #0]
 800e682:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e686:	b2db      	uxtb	r3, r3
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d00a      	beq.n	800e6a2 <make_smap+0x432>
 800e68c:	1d3a      	adds	r2, r7, #4
 800e68e:	6a3b      	ldr	r3, [r7, #32]
 800e690:	4413      	add	r3, r2
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	091b      	lsrs	r3, r3, #4
 800e696:	b2d9      	uxtb	r1, r3
 800e698:	1d3a      	adds	r2, r7, #4
 800e69a:	6a3b      	ldr	r3, [r7, #32]
 800e69c:	4413      	add	r3, r2
 800e69e:	460a      	mov	r2, r1
 800e6a0:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x02) && (y - k) != 0x0f) {		//a南壁がなく現在最南端でないとき
 800e6a2:	1d3a      	adds	r2, r7, #4
 800e6a4:	6a3b      	ldr	r3, [r7, #32]
 800e6a6:	4413      	add	r3, r2
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	f003 0302 	and.w	r3, r3, #2
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d139      	bne.n	800e726 <make_smap+0x4b6>
 800e6b2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e6b6:	6a3b      	ldr	r3, [r7, #32]
 800e6b8:	1ad3      	subs	r3, r2, r3
 800e6ba:	2b0f      	cmp	r3, #15
 800e6bc:	d033      	beq.n	800e726 <make_smap+0x4b6>
										if (smap[y - k - 1][x] == 0x03e7) {						//a南側が未記入なら
 800e6be:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e6c2:	6a3b      	ldr	r3, [r7, #32]
 800e6c4:	1ad3      	subs	r3, r2, r3
 800e6c6:	1e5a      	subs	r2, r3, #1
 800e6c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e6cc:	4936      	ldr	r1, [pc, #216]	; (800e7a8 <make_smap+0x538>)
 800e6ce:	0112      	lsls	r2, r2, #4
 800e6d0:	4413      	add	r3, r2
 800e6d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e6d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d11b      	bne.n	800e716 <make_smap+0x4a6>
											smap[y - k - 1][x] = smap[y - k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800e6de:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e6e2:	6a3b      	ldr	r3, [r7, #32]
 800e6e4:	1ad2      	subs	r2, r2, r3
 800e6e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e6ea:	492f      	ldr	r1, [pc, #188]	; (800e7a8 <make_smap+0x538>)
 800e6ec:	0112      	lsls	r2, r2, #4
 800e6ee:	4413      	add	r3, r2
 800e6f0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e6f4:	69bb      	ldr	r3, [r7, #24]
 800e6f6:	b299      	uxth	r1, r3
 800e6f8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e6fc:	6a3b      	ldr	r3, [r7, #32]
 800e6fe:	1ad3      	subs	r3, r2, r3
 800e700:	1e5a      	subs	r2, r3, #1
 800e702:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e706:	4401      	add	r1, r0
 800e708:	b288      	uxth	r0, r1
 800e70a:	4927      	ldr	r1, [pc, #156]	; (800e7a8 <make_smap+0x538>)
 800e70c:	0112      	lsls	r2, r2, #4
 800e70e:	4413      	add	r3, r2
 800e710:	4602      	mov	r2, r0
 800e712:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800e716:	6a3b      	ldr	r3, [r7, #32]
 800e718:	3301      	adds	r3, #1
 800e71a:	623b      	str	r3, [r7, #32]
 800e71c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e720:	6a3a      	ldr	r2, [r7, #32]
 800e722:	429a      	cmp	r2, r3
 800e724:	db9b      	blt.n	800e65e <make_smap+0x3ee>
								}
							}
						}
					}
					//----a西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//a西壁がなく現在最西端でないとき
 800e726:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e72a:	f003 0301 	and.w	r3, r3, #1
 800e72e:	2b00      	cmp	r3, #0
 800e730:	f040 80a0 	bne.w	800e874 <make_smap+0x604>
 800e734:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e738:	2b00      	cmp	r3, #0
 800e73a:	f000 809b 	beq.w	800e874 <make_smap+0x604>
						if(smap[y][x-1] == 0x03e7){			//a西側が未記入なら
 800e73e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e746:	3b01      	subs	r3, #1
 800e748:	4917      	ldr	r1, [pc, #92]	; (800e7a8 <make_smap+0x538>)
 800e74a:	0112      	lsls	r2, r2, #4
 800e74c:	4413      	add	r3, r2
 800e74e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e752:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e756:	4293      	cmp	r3, r2
 800e758:	f040 808c 	bne.w	800e874 <make_smap+0x604>
							smap[y][x-1] = smap[y][x] + turn;	//a次の歩数を書き込む
 800e75c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e760:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e764:	4910      	ldr	r1, [pc, #64]	; (800e7a8 <make_smap+0x538>)
 800e766:	0112      	lsls	r2, r2, #4
 800e768:	4413      	add	r3, r2
 800e76a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	b299      	uxth	r1, r3
 800e772:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e77a:	3b01      	subs	r3, #1
 800e77c:	4401      	add	r1, r0
 800e77e:	b288      	uxth	r0, r1
 800e780:	4909      	ldr	r1, [pc, #36]	; (800e7a8 <make_smap+0x538>)
 800e782:	0112      	lsls	r2, r2, #4
 800e784:	4413      	add	r3, r2
 800e786:	4602      	mov	r2, r0
 800e788:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800e78c:	4b05      	ldr	r3, [pc, #20]	; (800e7a4 <make_smap+0x534>)
 800e78e:	881b      	ldrh	r3, [r3, #0]
 800e790:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800e794:	b2db      	uxtb	r3, r3
 800e796:	2b00      	cmp	r3, #0
 800e798:	d06c      	beq.n	800e874 <make_smap+0x604>
								//----a直線優先処理----
								for (int k = 1; k < x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800e79a:	2301      	movs	r3, #1
 800e79c:	61fb      	str	r3, [r7, #28]
 800e79e:	e064      	b.n	800e86a <make_smap+0x5fa>
 800e7a0:	200001ac 	.word	0x200001ac
 800e7a4:	20000f74 	.word	0x20000f74
 800e7a8:	20000d70 	.word	0x20000d70
									m_temp_sample[k] = map[y][x - k];				//map配列からマップデータを取り出す
 800e7ac:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e7b0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800e7b4:	69fb      	ldr	r3, [r7, #28]
 800e7b6:	1acb      	subs	r3, r1, r3
 800e7b8:	4947      	ldr	r1, [pc, #284]	; (800e8d8 <make_smap+0x668>)
 800e7ba:	0112      	lsls	r2, r2, #4
 800e7bc:	440a      	add	r2, r1
 800e7be:	4413      	add	r3, r2
 800e7c0:	7819      	ldrb	r1, [r3, #0]
 800e7c2:	1d3a      	adds	r2, r7, #4
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	4413      	add	r3, r2
 800e7c8:	460a      	mov	r2, r1
 800e7ca:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800e7cc:	4b43      	ldr	r3, [pc, #268]	; (800e8dc <make_smap+0x66c>)
 800e7ce:	881b      	ldrh	r3, [r3, #0]
 800e7d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e7d4:	b2db      	uxtb	r3, r3
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d00a      	beq.n	800e7f0 <make_smap+0x580>
 800e7da:	1d3a      	adds	r2, r7, #4
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	4413      	add	r3, r2
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	091b      	lsrs	r3, r3, #4
 800e7e4:	b2d9      	uxtb	r1, r3
 800e7e6:	1d3a      	adds	r2, r7, #4
 800e7e8:	69fb      	ldr	r3, [r7, #28]
 800e7ea:	4413      	add	r3, r2
 800e7ec:	460a      	mov	r2, r1
 800e7ee:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x01) && (x - k) != 0x0f) {		//a西壁がなく現在最西端でないとき
 800e7f0:	1d3a      	adds	r2, r7, #4
 800e7f2:	69fb      	ldr	r3, [r7, #28]
 800e7f4:	4413      	add	r3, r2
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	f003 0301 	and.w	r3, r3, #1
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d139      	bne.n	800e874 <make_smap+0x604>
 800e800:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e804:	69fb      	ldr	r3, [r7, #28]
 800e806:	1ad3      	subs	r3, r2, r3
 800e808:	2b0f      	cmp	r3, #15
 800e80a:	d033      	beq.n	800e874 <make_smap+0x604>
										if (smap[y][x - k - 1] == 0x03e7) {						//a西側が未記入なら
 800e80c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e810:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	1acb      	subs	r3, r1, r3
 800e818:	3b01      	subs	r3, #1
 800e81a:	4931      	ldr	r1, [pc, #196]	; (800e8e0 <make_smap+0x670>)
 800e81c:	0112      	lsls	r2, r2, #4
 800e81e:	4413      	add	r3, r2
 800e820:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e824:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e828:	4293      	cmp	r3, r2
 800e82a:	d11b      	bne.n	800e864 <make_smap+0x5f4>
											smap[y][x - k - 1] = smap[y][x - k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800e82c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e830:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800e834:	69fb      	ldr	r3, [r7, #28]
 800e836:	1acb      	subs	r3, r1, r3
 800e838:	4929      	ldr	r1, [pc, #164]	; (800e8e0 <make_smap+0x670>)
 800e83a:	0112      	lsls	r2, r2, #4
 800e83c:	4413      	add	r3, r2
 800e83e:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e842:	69bb      	ldr	r3, [r7, #24]
 800e844:	b299      	uxth	r1, r3
 800e846:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e84a:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e84e:	69fb      	ldr	r3, [r7, #28]
 800e850:	1ae3      	subs	r3, r4, r3
 800e852:	3b01      	subs	r3, #1
 800e854:	4401      	add	r1, r0
 800e856:	b288      	uxth	r0, r1
 800e858:	4921      	ldr	r1, [pc, #132]	; (800e8e0 <make_smap+0x670>)
 800e85a:	0112      	lsls	r2, r2, #4
 800e85c:	4413      	add	r3, r2
 800e85e:	4602      	mov	r2, r0
 800e860:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800e864:	69fb      	ldr	r3, [r7, #28]
 800e866:	3301      	adds	r3, #1
 800e868:	61fb      	str	r3, [r7, #28]
 800e86a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e86e:	69fa      	ldr	r2, [r7, #28]
 800e870:	429a      	cmp	r2, r3
 800e872:	db9b      	blt.n	800e7ac <make_smap+0x53c>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800e874:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e878:	3301      	adds	r3, #1
 800e87a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e87e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e882:	2b0f      	cmp	r3, #15
 800e884:	f67f ad37 	bls.w	800e2f6 <make_smap+0x86>
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800e888:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e88c:	3301      	adds	r3, #1
 800e88e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800e892:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e896:	2b0f      	cmp	r3, #15
 800e898:	f67f ad29 	bls.w	800e2ee <make_smap+0x7e>
					}
				}
			}
		}
		//====a歩数カウンタのインクリメント====
		m_step++;
 800e89c:	4b11      	ldr	r3, [pc, #68]	; (800e8e4 <make_smap+0x674>)
 800e89e:	881b      	ldrh	r3, [r3, #0]
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	b29a      	uxth	r2, r3
 800e8a4:	4b0f      	ldr	r3, [pc, #60]	; (800e8e4 <make_smap+0x674>)
 800e8a6:	801a      	strh	r2, [r3, #0]
	}while(smap[mouse.y][mouse.x] == 0x03e7);					//a現在座標が未記入ではなくなるまで実行
 800e8a8:	4b0f      	ldr	r3, [pc, #60]	; (800e8e8 <make_smap+0x678>)
 800e8aa:	785b      	ldrb	r3, [r3, #1]
 800e8ac:	b2db      	uxtb	r3, r3
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	4b0d      	ldr	r3, [pc, #52]	; (800e8e8 <make_smap+0x678>)
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	4a09      	ldr	r2, [pc, #36]	; (800e8e0 <make_smap+0x670>)
 800e8ba:	0103      	lsls	r3, r0, #4
 800e8bc:	440b      	add	r3, r1
 800e8be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	f43f ad0d 	beq.w	800e2e6 <make_smap+0x76>
}
 800e8cc:	bf00      	nop
 800e8ce:	3730      	adds	r7, #48	; 0x30
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bc90      	pop	{r4, r7}
 800e8d4:	4770      	bx	lr
 800e8d6:	bf00      	nop
 800e8d8:	200001ac 	.word	0x200001ac
 800e8dc:	20000f74 	.word	0x20000f74
 800e8e0:	20000d70 	.word	0x20000d70
 800e8e4:	2000034e 	.word	0x2000034e
 800e8e8:	20000c1c 	.word	0x20000c1c

0800e8ec <make_route>:
//make_route
//a最短経路を導出する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t x, y;												//X，Y座標
	uint8_t dir_temp =  mouse.dir;								//aマウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 800e8f2:	4b9f      	ldr	r3, [pc, #636]	; (800eb70 <make_route+0x284>)
 800e8f4:	789b      	ldrb	r3, [r3, #2]
 800e8f6:	703b      	strb	r3, [r7, #0]

	//====a最短経路を初期化====
	uint16_t i;
	for(i = 0; i < 256; i++){
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	80bb      	strh	r3, [r7, #4]
 800e8fc:	e006      	b.n	800e90c <make_route+0x20>
		route[i] = 0xff;										//routeを0xffで初期化
 800e8fe:	88bb      	ldrh	r3, [r7, #4]
 800e900:	4a9c      	ldr	r2, [pc, #624]	; (800eb74 <make_route+0x288>)
 800e902:	21ff      	movs	r1, #255	; 0xff
 800e904:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 256; i++){
 800e906:	88bb      	ldrh	r3, [r7, #4]
 800e908:	3301      	adds	r3, #1
 800e90a:	80bb      	strh	r3, [r7, #4]
 800e90c:	88bb      	ldrh	r3, [r7, #4]
 800e90e:	2bff      	cmp	r3, #255	; 0xff
 800e910:	d9f5      	bls.n	800e8fe <make_route+0x12>
	}


	//====a歩数カウンタをセット====
	uint16_t m_step = smap[mouse.y][mouse.x];					//a現在座標の歩数マップ値を取得
 800e912:	4b97      	ldr	r3, [pc, #604]	; (800eb70 <make_route+0x284>)
 800e914:	785b      	ldrb	r3, [r3, #1]
 800e916:	b2db      	uxtb	r3, r3
 800e918:	4618      	mov	r0, r3
 800e91a:	4b95      	ldr	r3, [pc, #596]	; (800eb70 <make_route+0x284>)
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	b2db      	uxtb	r3, r3
 800e920:	4619      	mov	r1, r3
 800e922:	4a95      	ldr	r2, [pc, #596]	; (800eb78 <make_route+0x28c>)
 800e924:	0103      	lsls	r3, r0, #4
 800e926:	440b      	add	r3, r1
 800e928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e92c:	807b      	strh	r3, [r7, #2]

	//====x, yに現在座標を書き込み====
	x = mouse.x;
 800e92e:	4b90      	ldr	r3, [pc, #576]	; (800eb70 <make_route+0x284>)
 800e930:	781b      	ldrb	r3, [r3, #0]
 800e932:	71fb      	strb	r3, [r7, #7]
	y = mouse.y;
 800e934:	4b8e      	ldr	r3, [pc, #568]	; (800eb70 <make_route+0x284>)
 800e936:	785b      	ldrb	r3, [r3, #1]
 800e938:	71bb      	strb	r3, [r7, #6]

	//====a最短経路を導出====
	if(pass_mode == 4){
 800e93a:	4b90      	ldr	r3, [pc, #576]	; (800eb7c <make_route+0x290>)
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	2b04      	cmp	r3, #4
 800e940:	d105      	bne.n	800e94e <make_route+0x62>
		route[0] = 0x77;
 800e942:	4b8c      	ldr	r3, [pc, #560]	; (800eb74 <make_route+0x288>)
 800e944:	2277      	movs	r2, #119	; 0x77
 800e946:	701a      	strb	r2, [r3, #0]
		i = 1;
 800e948:	2301      	movs	r3, #1
 800e94a:	80bb      	strh	r3, [r7, #4]
 800e94c:	e001      	b.n	800e952 <make_route+0x66>
	}else{
		i = 0;
 800e94e:	2300      	movs	r3, #0
 800e950:	80bb      	strh	r3, [r7, #4]
	}

	do{
		uint8_t m_temp = map[y][x];								//a比較用マップ情報の格納
 800e952:	79ba      	ldrb	r2, [r7, #6]
 800e954:	79fb      	ldrb	r3, [r7, #7]
 800e956:	498a      	ldr	r1, [pc, #552]	; (800eb80 <make_route+0x294>)
 800e958:	0112      	lsls	r2, r2, #4
 800e95a:	440a      	add	r2, r1
 800e95c:	4413      	add	r3, r2
 800e95e:	781b      	ldrb	r3, [r3, #0]
 800e960:	707b      	strb	r3, [r7, #1]
		if(MF.FLAG.SCND){										//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800e962:	4b88      	ldr	r3, [pc, #544]	; (800eb84 <make_route+0x298>)
 800e964:	881b      	ldrh	r3, [r3, #0]
 800e966:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e96a:	b2db      	uxtb	r3, r3
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d002      	beq.n	800e976 <make_route+0x8a>
			m_temp >>= 4;										//a上位4bitを使うので4bit分右にシフトさせる
 800e970:	787b      	ldrb	r3, [r7, #1]
 800e972:	091b      	lsrs	r3, r3, #4
 800e974:	707b      	strb	r3, [r7, #1]
		}
		//----a北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//a北側に壁が無く、現在地より小さい歩数マップ値であれば
 800e976:	787b      	ldrb	r3, [r7, #1]
 800e978:	f003 0308 	and.w	r3, r3, #8
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d122      	bne.n	800e9c6 <make_route+0xda>
 800e980:	79bb      	ldrb	r3, [r7, #6]
 800e982:	1c5a      	adds	r2, r3, #1
 800e984:	79fb      	ldrb	r3, [r7, #7]
 800e986:	497c      	ldr	r1, [pc, #496]	; (800eb78 <make_route+0x28c>)
 800e988:	0112      	lsls	r2, r2, #4
 800e98a:	4413      	add	r3, r2
 800e98c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e990:	887a      	ldrh	r2, [r7, #2]
 800e992:	429a      	cmp	r2, r3
 800e994:	d917      	bls.n	800e9c6 <make_route+0xda>
			route[i] = (0x00 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800e996:	4b76      	ldr	r3, [pc, #472]	; (800eb70 <make_route+0x284>)
 800e998:	789b      	ldrb	r3, [r3, #2]
 800e99a:	b2db      	uxtb	r3, r3
 800e99c:	425b      	negs	r3, r3
 800e99e:	b2da      	uxtb	r2, r3
 800e9a0:	88bb      	ldrh	r3, [r7, #4]
 800e9a2:	f002 0203 	and.w	r2, r2, #3
 800e9a6:	b2d1      	uxtb	r1, r2
 800e9a8:	4a72      	ldr	r2, [pc, #456]	; (800eb74 <make_route+0x288>)
 800e9aa:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//a最大歩数マップ値を更新
 800e9ac:	79bb      	ldrb	r3, [r7, #6]
 800e9ae:	1c5a      	adds	r2, r3, #1
 800e9b0:	79fb      	ldrb	r3, [r7, #7]
 800e9b2:	4971      	ldr	r1, [pc, #452]	; (800eb78 <make_route+0x28c>)
 800e9b4:	0112      	lsls	r2, r2, #4
 800e9b6:	4413      	add	r3, r2
 800e9b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e9bc:	807b      	strh	r3, [r7, #2]
			y++;												//a北に進んだのでY座標をインクリメント
 800e9be:	79bb      	ldrb	r3, [r7, #6]
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	71bb      	strb	r3, [r7, #6]
 800e9c4:	e079      	b.n	800eaba <make_route+0x1ce>
		}
		//----a東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//a東側に壁が無く、現在地より小さい歩数マップ値であれば
 800e9c6:	787b      	ldrb	r3, [r7, #1]
 800e9c8:	f003 0304 	and.w	r3, r3, #4
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d123      	bne.n	800ea18 <make_route+0x12c>
 800e9d0:	79ba      	ldrb	r2, [r7, #6]
 800e9d2:	79fb      	ldrb	r3, [r7, #7]
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	4968      	ldr	r1, [pc, #416]	; (800eb78 <make_route+0x28c>)
 800e9d8:	0112      	lsls	r2, r2, #4
 800e9da:	4413      	add	r3, r2
 800e9dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e9e0:	887a      	ldrh	r2, [r7, #2]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d918      	bls.n	800ea18 <make_route+0x12c>
			route[i] = (0x01 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800e9e6:	4b62      	ldr	r3, [pc, #392]	; (800eb70 <make_route+0x284>)
 800e9e8:	789b      	ldrb	r3, [r3, #2]
 800e9ea:	b2db      	uxtb	r3, r3
 800e9ec:	f1c3 0301 	rsb	r3, r3, #1
 800e9f0:	b2da      	uxtb	r2, r3
 800e9f2:	88bb      	ldrh	r3, [r7, #4]
 800e9f4:	f002 0203 	and.w	r2, r2, #3
 800e9f8:	b2d1      	uxtb	r1, r2
 800e9fa:	4a5e      	ldr	r2, [pc, #376]	; (800eb74 <make_route+0x288>)
 800e9fc:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//a最大歩数マップ値を更新
 800e9fe:	79ba      	ldrb	r2, [r7, #6]
 800ea00:	79fb      	ldrb	r3, [r7, #7]
 800ea02:	3301      	adds	r3, #1
 800ea04:	495c      	ldr	r1, [pc, #368]	; (800eb78 <make_route+0x28c>)
 800ea06:	0112      	lsls	r2, r2, #4
 800ea08:	4413      	add	r3, r2
 800ea0a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ea0e:	807b      	strh	r3, [r7, #2]
			x++;												//a東に進んだのでX座標をインクリメント
 800ea10:	79fb      	ldrb	r3, [r7, #7]
 800ea12:	3301      	adds	r3, #1
 800ea14:	71fb      	strb	r3, [r7, #7]
 800ea16:	e050      	b.n	800eaba <make_route+0x1ce>
		}
		//----a南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//a南側に壁が無く、現在地より小さい歩数マップ値であれば
 800ea18:	787b      	ldrb	r3, [r7, #1]
 800ea1a:	f003 0302 	and.w	r3, r3, #2
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d123      	bne.n	800ea6a <make_route+0x17e>
 800ea22:	79bb      	ldrb	r3, [r7, #6]
 800ea24:	1e5a      	subs	r2, r3, #1
 800ea26:	79fb      	ldrb	r3, [r7, #7]
 800ea28:	4953      	ldr	r1, [pc, #332]	; (800eb78 <make_route+0x28c>)
 800ea2a:	0112      	lsls	r2, r2, #4
 800ea2c:	4413      	add	r3, r2
 800ea2e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ea32:	887a      	ldrh	r2, [r7, #2]
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d918      	bls.n	800ea6a <make_route+0x17e>
			route[i] = (0x02 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800ea38:	4b4d      	ldr	r3, [pc, #308]	; (800eb70 <make_route+0x284>)
 800ea3a:	789b      	ldrb	r3, [r3, #2]
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	f1c3 0302 	rsb	r3, r3, #2
 800ea42:	b2da      	uxtb	r2, r3
 800ea44:	88bb      	ldrh	r3, [r7, #4]
 800ea46:	f002 0203 	and.w	r2, r2, #3
 800ea4a:	b2d1      	uxtb	r1, r2
 800ea4c:	4a49      	ldr	r2, [pc, #292]	; (800eb74 <make_route+0x288>)
 800ea4e:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//a最大歩数マップ値を更新
 800ea50:	79bb      	ldrb	r3, [r7, #6]
 800ea52:	1e5a      	subs	r2, r3, #1
 800ea54:	79fb      	ldrb	r3, [r7, #7]
 800ea56:	4948      	ldr	r1, [pc, #288]	; (800eb78 <make_route+0x28c>)
 800ea58:	0112      	lsls	r2, r2, #4
 800ea5a:	4413      	add	r3, r2
 800ea5c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ea60:	807b      	strh	r3, [r7, #2]
			y--;												//a南に進んだのでY座標をデクリメント
 800ea62:	79bb      	ldrb	r3, [r7, #6]
 800ea64:	3b01      	subs	r3, #1
 800ea66:	71bb      	strb	r3, [r7, #6]
 800ea68:	e027      	b.n	800eaba <make_route+0x1ce>
		}
		//----a西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//a西側に壁が無く、現在地より小さい歩数マップ値であれば
 800ea6a:	787b      	ldrb	r3, [r7, #1]
 800ea6c:	f003 0301 	and.w	r3, r3, #1
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d122      	bne.n	800eaba <make_route+0x1ce>
 800ea74:	79ba      	ldrb	r2, [r7, #6]
 800ea76:	79fb      	ldrb	r3, [r7, #7]
 800ea78:	3b01      	subs	r3, #1
 800ea7a:	493f      	ldr	r1, [pc, #252]	; (800eb78 <make_route+0x28c>)
 800ea7c:	0112      	lsls	r2, r2, #4
 800ea7e:	4413      	add	r3, r2
 800ea80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ea84:	887a      	ldrh	r2, [r7, #2]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d917      	bls.n	800eaba <make_route+0x1ce>
			route[i] = (0x03 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800ea8a:	4b39      	ldr	r3, [pc, #228]	; (800eb70 <make_route+0x284>)
 800ea8c:	789b      	ldrb	r3, [r3, #2]
 800ea8e:	b2db      	uxtb	r3, r3
 800ea90:	f1c3 0303 	rsb	r3, r3, #3
 800ea94:	b2da      	uxtb	r2, r3
 800ea96:	88bb      	ldrh	r3, [r7, #4]
 800ea98:	f002 0203 	and.w	r2, r2, #3
 800ea9c:	b2d1      	uxtb	r1, r2
 800ea9e:	4a35      	ldr	r2, [pc, #212]	; (800eb74 <make_route+0x288>)
 800eaa0:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//a最大歩数マップ値を更新
 800eaa2:	79ba      	ldrb	r2, [r7, #6]
 800eaa4:	79fb      	ldrb	r3, [r7, #7]
 800eaa6:	3b01      	subs	r3, #1
 800eaa8:	4933      	ldr	r1, [pc, #204]	; (800eb78 <make_route+0x28c>)
 800eaaa:	0112      	lsls	r2, r2, #4
 800eaac:	4413      	add	r3, r2
 800eaae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800eab2:	807b      	strh	r3, [r7, #2]
			x--;												//a西に進んだのでX座標をデクリメント
 800eab4:	79fb      	ldrb	r3, [r7, #7]
 800eab6:	3b01      	subs	r3, #1
 800eab8:	71fb      	strb	r3, [r7, #7]
				y--;												//a南に進んだのでY座標をデクリメント
			}*/

		}
		//----a格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 800eaba:	88bb      	ldrh	r3, [r7, #4]
 800eabc:	4a2d      	ldr	r2, [pc, #180]	; (800eb74 <make_route+0x288>)
 800eabe:	5cd3      	ldrb	r3, [r2, r3]
 800eac0:	2b03      	cmp	r3, #3
 800eac2:	d83c      	bhi.n	800eb3e <make_route+0x252>
 800eac4:	a201      	add	r2, pc, #4	; (adr r2, 800eacc <make_route+0x1e0>)
 800eac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaca:	bf00      	nop
 800eacc:	0800eadd 	.word	0x0800eadd
 800ead0:	0800eb09 	.word	0x0800eb09
 800ead4:	0800eb1b 	.word	0x0800eb1b
 800ead8:	0800eb2d 	.word	0x0800eb2d
		case 0x00:												//a前進する場合
			if(pass_mode < 3){
 800eadc:	4b27      	ldr	r3, [pc, #156]	; (800eb7c <make_route+0x290>)
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	2b02      	cmp	r3, #2
 800eae2:	d804      	bhi.n	800eaee <make_route+0x202>
				route[i] = 0x88;									//a格納データ形式を変更
 800eae4:	88bb      	ldrh	r3, [r7, #4]
 800eae6:	4a23      	ldr	r2, [pc, #140]	; (800eb74 <make_route+0x288>)
 800eae8:	2188      	movs	r1, #136	; 0x88
 800eaea:	54d1      	strb	r1, [r2, r3]
			}else{
				route[i] = 0x77;
				route[i+1] = 0x77;
				i++;
			}
			break;
 800eaec:	e02c      	b.n	800eb48 <make_route+0x25c>
				route[i] = 0x77;
 800eaee:	88bb      	ldrh	r3, [r7, #4]
 800eaf0:	4a20      	ldr	r2, [pc, #128]	; (800eb74 <make_route+0x288>)
 800eaf2:	2177      	movs	r1, #119	; 0x77
 800eaf4:	54d1      	strb	r1, [r2, r3]
				route[i+1] = 0x77;
 800eaf6:	88bb      	ldrh	r3, [r7, #4]
 800eaf8:	3301      	adds	r3, #1
 800eafa:	4a1e      	ldr	r2, [pc, #120]	; (800eb74 <make_route+0x288>)
 800eafc:	2177      	movs	r1, #119	; 0x77
 800eafe:	54d1      	strb	r1, [r2, r3]
				i++;
 800eb00:	88bb      	ldrh	r3, [r7, #4]
 800eb02:	3301      	adds	r3, #1
 800eb04:	80bb      	strh	r3, [r7, #4]
			break;
 800eb06:	e01f      	b.n	800eb48 <make_route+0x25c>
		case 0x01:												//a右折する場合
			turn_dir(DIR_TURN_R90, 0);								//a内部情報の方向を90度右回転
 800eb08:	2100      	movs	r1, #0
 800eb0a:	2001      	movs	r0, #1
 800eb0c:	f7ff fad8 	bl	800e0c0 <turn_dir>
			route[i] = 0x44;									//a格納データ形式を変更
 800eb10:	88bb      	ldrh	r3, [r7, #4]
 800eb12:	4a18      	ldr	r2, [pc, #96]	; (800eb74 <make_route+0x288>)
 800eb14:	2144      	movs	r1, #68	; 0x44
 800eb16:	54d1      	strb	r1, [r2, r3]
			break;
 800eb18:	e016      	b.n	800eb48 <make_route+0x25c>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180, 0);								//a内部情報の方向を180度回転
 800eb1a:	2100      	movs	r1, #0
 800eb1c:	2002      	movs	r0, #2
 800eb1e:	f7ff facf 	bl	800e0c0 <turn_dir>
			route[i] = 0x22;									//a格納データ形式を変更
 800eb22:	88bb      	ldrh	r3, [r7, #4]
 800eb24:	4a13      	ldr	r2, [pc, #76]	; (800eb74 <make_route+0x288>)
 800eb26:	2122      	movs	r1, #34	; 0x22
 800eb28:	54d1      	strb	r1, [r2, r3]
			break;
 800eb2a:	e00d      	b.n	800eb48 <make_route+0x25c>
		case 0x03:												//a左折する場合
			turn_dir(DIR_TURN_L90, 0);								//a内部情報の方向を90度左回転
 800eb2c:	2100      	movs	r1, #0
 800eb2e:	20ff      	movs	r0, #255	; 0xff
 800eb30:	f7ff fac6 	bl	800e0c0 <turn_dir>
			route[i] = 0x11;									//a格納データ形式を変更
 800eb34:	88bb      	ldrh	r3, [r7, #4]
 800eb36:	4a0f      	ldr	r2, [pc, #60]	; (800eb74 <make_route+0x288>)
 800eb38:	2111      	movs	r1, #17
 800eb3a:	54d1      	strb	r1, [r2, r3]
			break;
 800eb3c:	e004      	b.n	800eb48 <make_route+0x25c>
		default:												//aそれ以外の場合
			route[i] = 0x00;									//a格納データ形式を変更
 800eb3e:	88bb      	ldrh	r3, [r7, #4]
 800eb40:	4a0c      	ldr	r2, [pc, #48]	; (800eb74 <make_route+0x288>)
 800eb42:	2100      	movs	r1, #0
 800eb44:	54d1      	strb	r1, [r2, r3]
			break;
 800eb46:	bf00      	nop
		}
		i++;													//aカウンタをインクリメント
 800eb48:	88bb      	ldrh	r3, [r7, #4]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	80bb      	strh	r3, [r7, #4]
	}while(smap[y][x] != 0);									//a進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 800eb4e:	79ba      	ldrb	r2, [r7, #6]
 800eb50:	79fb      	ldrb	r3, [r7, #7]
 800eb52:	4909      	ldr	r1, [pc, #36]	; (800eb78 <make_route+0x28c>)
 800eb54:	0112      	lsls	r2, r2, #4
 800eb56:	4413      	add	r3, r2
 800eb58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	f47f aef8 	bne.w	800e952 <make_route+0x66>
	mouse.dir = dir_temp;										//dir_tempに退避させた値をmouse.dirにリストア
 800eb62:	4a03      	ldr	r2, [pc, #12]	; (800eb70 <make_route+0x284>)
 800eb64:	783b      	ldrb	r3, [r7, #0]
 800eb66:	7093      	strb	r3, [r2, #2]
}
 800eb68:	bf00      	nop
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	20000c1c 	.word	0x20000c1c
 800eb74:	20000c64 	.word	0x20000c64
 800eb78:	20000d70 	.word	0x20000d70
 800eb7c:	20000457 	.word	0x20000457
 800eb80:	200001ac 	.word	0x200001ac
 800eb84:	20000f74 	.word	0x20000f74

0800eb88 <find_pregoal>:
//	未探索壁を含む＆現在座標から最も近いマス(=仮goal)を探す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void find_pregoal()
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b085      	sub	sp, #20
 800eb8c:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持
	//uint8_t m_temp_sample[16];
	uint8_t break_flag = 0;													//未知壁マスを見つけた時のループ脱出フラグ
 800eb8e:	2300      	movs	r3, #0
 800eb90:	737b      	strb	r3, [r7, #13]

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800eb92:	2300      	movs	r3, #0
 800eb94:	73bb      	strb	r3, [r7, #14]
 800eb96:	e014      	b.n	800ebc2 <find_pregoal+0x3a>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800eb98:	2300      	movs	r3, #0
 800eb9a:	73fb      	strb	r3, [r7, #15]
 800eb9c:	e00b      	b.n	800ebb6 <find_pregoal+0x2e>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 800eb9e:	7bba      	ldrb	r2, [r7, #14]
 800eba0:	7bfb      	ldrb	r3, [r7, #15]
 800eba2:	499f      	ldr	r1, [pc, #636]	; (800ee20 <find_pregoal+0x298>)
 800eba4:	0112      	lsls	r2, r2, #4
 800eba6:	4413      	add	r3, r2
 800eba8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ebac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800ebb0:	7bfb      	ldrb	r3, [r7, #15]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	73fb      	strb	r3, [r7, #15]
 800ebb6:	7bfb      	ldrb	r3, [r7, #15]
 800ebb8:	2b0f      	cmp	r3, #15
 800ebba:	d9f0      	bls.n	800eb9e <find_pregoal+0x16>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800ebbc:	7bbb      	ldrb	r3, [r7, #14]
 800ebbe:	3301      	adds	r3, #1
 800ebc0:	73bb      	strb	r3, [r7, #14]
 800ebc2:	7bbb      	ldrb	r3, [r7, #14]
 800ebc4:	2b0f      	cmp	r3, #15
 800ebc6:	d9e7      	bls.n	800eb98 <find_pregoal+0x10>
		}
	}

	//====探索完了フラグのクリア====
	allmap_comp_flag = 0;
 800ebc8:	4b96      	ldr	r3, [pc, #600]	; (800ee24 <find_pregoal+0x29c>)
 800ebca:	2200      	movs	r2, #0
 800ebcc:	701a      	strb	r2, [r3, #0]

	//====現在座標を0にする====
	smap[mouse.y][mouse.x] = 0;
 800ebce:	4b96      	ldr	r3, [pc, #600]	; (800ee28 <find_pregoal+0x2a0>)
 800ebd0:	785b      	ldrb	r3, [r3, #1]
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	4b94      	ldr	r3, [pc, #592]	; (800ee28 <find_pregoal+0x2a0>)
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	4619      	mov	r1, r3
 800ebde:	4a90      	ldr	r2, [pc, #576]	; (800ee20 <find_pregoal+0x298>)
 800ebe0:	0103      	lsls	r3, r0, #4
 800ebe2:	440b      	add	r3, r1
 800ebe4:	2100      	movs	r1, #0
 800ebe6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 800ebea:	4b90      	ldr	r3, [pc, #576]	; (800ee2c <find_pregoal+0x2a4>)
 800ebec:	2200      	movs	r2, #0
 800ebee:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 800ebf0:	2303      	movs	r3, #3
 800ebf2:	60bb      	str	r3, [r7, #8]
	int turn = 1;
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	73bb      	strb	r3, [r7, #14]
 800ebfc:	e180      	b.n	800ef00 <find_pregoal+0x378>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800ebfe:	2300      	movs	r3, #0
 800ec00:	73fb      	strb	r3, [r7, #15]
 800ec02:	e173      	b.n	800eeec <find_pregoal+0x364>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 800ec04:	7bba      	ldrb	r2, [r7, #14]
 800ec06:	7bfb      	ldrb	r3, [r7, #15]
 800ec08:	4985      	ldr	r1, [pc, #532]	; (800ee20 <find_pregoal+0x298>)
 800ec0a:	0112      	lsls	r2, r2, #4
 800ec0c:	4413      	add	r3, r2
 800ec0e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800ec12:	4b86      	ldr	r3, [pc, #536]	; (800ee2c <find_pregoal+0x2a4>)
 800ec14:	881b      	ldrh	r3, [r3, #0]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	f040 8165 	bne.w	800eee6 <find_pregoal+0x35e>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 800ec1c:	7bba      	ldrb	r2, [r7, #14]
 800ec1e:	7bfb      	ldrb	r3, [r7, #15]
 800ec20:	4983      	ldr	r1, [pc, #524]	; (800ee30 <find_pregoal+0x2a8>)
 800ec22:	0112      	lsls	r2, r2, #4
 800ec24:	440a      	add	r2, r1
 800ec26:	4413      	add	r3, r2
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 800ec2c:	78fb      	ldrb	r3, [r7, #3]
 800ec2e:	f003 0308 	and.w	r3, r3, #8
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d14d      	bne.n	800ecd2 <find_pregoal+0x14a>
 800ec36:	7bbb      	ldrb	r3, [r7, #14]
 800ec38:	2b0f      	cmp	r3, #15
 800ec3a:	d04a      	beq.n	800ecd2 <find_pregoal+0x14a>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 800ec3c:	7bbb      	ldrb	r3, [r7, #14]
 800ec3e:	1c5a      	adds	r2, r3, #1
 800ec40:	7bfb      	ldrb	r3, [r7, #15]
 800ec42:	4977      	ldr	r1, [pc, #476]	; (800ee20 <find_pregoal+0x298>)
 800ec44:	0112      	lsls	r2, r2, #4
 800ec46:	4413      	add	r3, r2
 800ec48:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ec4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d13e      	bne.n	800ecd2 <find_pregoal+0x14a>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800ec54:	7bba      	ldrb	r2, [r7, #14]
 800ec56:	7bfb      	ldrb	r3, [r7, #15]
 800ec58:	4971      	ldr	r1, [pc, #452]	; (800ee20 <find_pregoal+0x298>)
 800ec5a:	0112      	lsls	r2, r2, #4
 800ec5c:	4413      	add	r3, r2
 800ec5e:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	b299      	uxth	r1, r3
 800ec66:	7bbb      	ldrb	r3, [r7, #14]
 800ec68:	1c5a      	adds	r2, r3, #1
 800ec6a:	7bfb      	ldrb	r3, [r7, #15]
 800ec6c:	4401      	add	r1, r0
 800ec6e:	b288      	uxth	r0, r1
 800ec70:	496b      	ldr	r1, [pc, #428]	; (800ee20 <find_pregoal+0x298>)
 800ec72:	0112      	lsls	r2, r2, #4
 800ec74:	4413      	add	r3, r2
 800ec76:	4602      	mov	r2, r0
 800ec78:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y + 1][x] & 0x0f ) << 4) != (map[y + 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800ec7c:	7bbb      	ldrb	r3, [r7, #14]
 800ec7e:	1c5a      	adds	r2, r3, #1
 800ec80:	7bfb      	ldrb	r3, [r7, #15]
 800ec82:	496b      	ldr	r1, [pc, #428]	; (800ee30 <find_pregoal+0x2a8>)
 800ec84:	0112      	lsls	r2, r2, #4
 800ec86:	440a      	add	r2, r1
 800ec88:	4413      	add	r3, r2
 800ec8a:	781b      	ldrb	r3, [r3, #0]
 800ec8c:	011b      	lsls	r3, r3, #4
 800ec8e:	b2da      	uxtb	r2, r3
 800ec90:	7bbb      	ldrb	r3, [r7, #14]
 800ec92:	1c59      	adds	r1, r3, #1
 800ec94:	7bfb      	ldrb	r3, [r7, #15]
 800ec96:	4866      	ldr	r0, [pc, #408]	; (800ee30 <find_pregoal+0x2a8>)
 800ec98:	0109      	lsls	r1, r1, #4
 800ec9a:	4401      	add	r1, r0
 800ec9c:	440b      	add	r3, r1
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d014      	beq.n	800ecd2 <find_pregoal+0x14a>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800eca8:	2301      	movs	r3, #1
 800ecaa:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y + 1][x];					//仮goalの歩数を記録
 800ecac:	7bbb      	ldrb	r3, [r7, #14]
 800ecae:	1c5a      	adds	r2, r3, #1
 800ecb0:	7bfb      	ldrb	r3, [r7, #15]
 800ecb2:	495b      	ldr	r1, [pc, #364]	; (800ee20 <find_pregoal+0x298>)
 800ecb4:	0112      	lsls	r2, r2, #4
 800ecb6:	4413      	add	r3, r2
 800ecb8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800ecbc:	4b5d      	ldr	r3, [pc, #372]	; (800ee34 <find_pregoal+0x2ac>)
 800ecbe:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 800ecc0:	4a5d      	ldr	r2, [pc, #372]	; (800ee38 <find_pregoal+0x2b0>)
 800ecc2:	7bfb      	ldrb	r3, [r7, #15]
 800ecc4:	7013      	strb	r3, [r2, #0]
								pregoal_y = y + 1;							//仮goalの座標を記録
 800ecc6:	7bbb      	ldrb	r3, [r7, #14]
 800ecc8:	3301      	adds	r3, #1
 800ecca:	b2da      	uxtb	r2, r3
 800eccc:	4b5b      	ldr	r3, [pc, #364]	; (800ee3c <find_pregoal+0x2b4>)
 800ecce:	701a      	strb	r2, [r3, #0]
								break;
 800ecd0:	e110      	b.n	800eef4 <find_pregoal+0x36c>
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 800ecd2:	78fb      	ldrb	r3, [r7, #3]
 800ecd4:	f003 0304 	and.w	r3, r3, #4
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d14d      	bne.n	800ed78 <find_pregoal+0x1f0>
 800ecdc:	7bfb      	ldrb	r3, [r7, #15]
 800ecde:	2b0f      	cmp	r3, #15
 800ece0:	d04a      	beq.n	800ed78 <find_pregoal+0x1f0>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 800ece2:	7bba      	ldrb	r2, [r7, #14]
 800ece4:	7bfb      	ldrb	r3, [r7, #15]
 800ece6:	3301      	adds	r3, #1
 800ece8:	494d      	ldr	r1, [pc, #308]	; (800ee20 <find_pregoal+0x298>)
 800ecea:	0112      	lsls	r2, r2, #4
 800ecec:	4413      	add	r3, r2
 800ecee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ecf2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d13e      	bne.n	800ed78 <find_pregoal+0x1f0>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800ecfa:	7bba      	ldrb	r2, [r7, #14]
 800ecfc:	7bfb      	ldrb	r3, [r7, #15]
 800ecfe:	4948      	ldr	r1, [pc, #288]	; (800ee20 <find_pregoal+0x298>)
 800ed00:	0112      	lsls	r2, r2, #4
 800ed02:	4413      	add	r3, r2
 800ed04:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	b299      	uxth	r1, r3
 800ed0c:	7bba      	ldrb	r2, [r7, #14]
 800ed0e:	7bfb      	ldrb	r3, [r7, #15]
 800ed10:	3301      	adds	r3, #1
 800ed12:	4401      	add	r1, r0
 800ed14:	b288      	uxth	r0, r1
 800ed16:	4942      	ldr	r1, [pc, #264]	; (800ee20 <find_pregoal+0x298>)
 800ed18:	0112      	lsls	r2, r2, #4
 800ed1a:	4413      	add	r3, r2
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x + 1] & 0x0f) << 4) != (map[y][x + 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800ed22:	7bba      	ldrb	r2, [r7, #14]
 800ed24:	7bfb      	ldrb	r3, [r7, #15]
 800ed26:	3301      	adds	r3, #1
 800ed28:	4941      	ldr	r1, [pc, #260]	; (800ee30 <find_pregoal+0x2a8>)
 800ed2a:	0112      	lsls	r2, r2, #4
 800ed2c:	440a      	add	r2, r1
 800ed2e:	4413      	add	r3, r2
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	011b      	lsls	r3, r3, #4
 800ed34:	b2da      	uxtb	r2, r3
 800ed36:	7bb9      	ldrb	r1, [r7, #14]
 800ed38:	7bfb      	ldrb	r3, [r7, #15]
 800ed3a:	3301      	adds	r3, #1
 800ed3c:	483c      	ldr	r0, [pc, #240]	; (800ee30 <find_pregoal+0x2a8>)
 800ed3e:	0109      	lsls	r1, r1, #4
 800ed40:	4401      	add	r1, r0
 800ed42:	440b      	add	r3, r1
 800ed44:	781b      	ldrb	r3, [r3, #0]
 800ed46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d014      	beq.n	800ed78 <find_pregoal+0x1f0>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800ed4e:	2301      	movs	r3, #1
 800ed50:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x + 1];					//仮ゴールの歩数を記録
 800ed52:	7bba      	ldrb	r2, [r7, #14]
 800ed54:	7bfb      	ldrb	r3, [r7, #15]
 800ed56:	3301      	adds	r3, #1
 800ed58:	4931      	ldr	r1, [pc, #196]	; (800ee20 <find_pregoal+0x298>)
 800ed5a:	0112      	lsls	r2, r2, #4
 800ed5c:	4413      	add	r3, r2
 800ed5e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800ed62:	4b34      	ldr	r3, [pc, #208]	; (800ee34 <find_pregoal+0x2ac>)
 800ed64:	801a      	strh	r2, [r3, #0]
								pregoal_x = x + 1;
 800ed66:	7bfb      	ldrb	r3, [r7, #15]
 800ed68:	3301      	adds	r3, #1
 800ed6a:	b2da      	uxtb	r2, r3
 800ed6c:	4b32      	ldr	r3, [pc, #200]	; (800ee38 <find_pregoal+0x2b0>)
 800ed6e:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 800ed70:	4a32      	ldr	r2, [pc, #200]	; (800ee3c <find_pregoal+0x2b4>)
 800ed72:	7bbb      	ldrb	r3, [r7, #14]
 800ed74:	7013      	strb	r3, [r2, #0]
								break;
 800ed76:	e0bd      	b.n	800eef4 <find_pregoal+0x36c>
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 800ed78:	78fb      	ldrb	r3, [r7, #3]
 800ed7a:	f003 0302 	and.w	r3, r3, #2
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d15e      	bne.n	800ee40 <find_pregoal+0x2b8>
 800ed82:	7bbb      	ldrb	r3, [r7, #14]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d05b      	beq.n	800ee40 <find_pregoal+0x2b8>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 800ed88:	7bbb      	ldrb	r3, [r7, #14]
 800ed8a:	1e5a      	subs	r2, r3, #1
 800ed8c:	7bfb      	ldrb	r3, [r7, #15]
 800ed8e:	4924      	ldr	r1, [pc, #144]	; (800ee20 <find_pregoal+0x298>)
 800ed90:	0112      	lsls	r2, r2, #4
 800ed92:	4413      	add	r3, r2
 800ed94:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ed98:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d14f      	bne.n	800ee40 <find_pregoal+0x2b8>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800eda0:	7bba      	ldrb	r2, [r7, #14]
 800eda2:	7bfb      	ldrb	r3, [r7, #15]
 800eda4:	491e      	ldr	r1, [pc, #120]	; (800ee20 <find_pregoal+0x298>)
 800eda6:	0112      	lsls	r2, r2, #4
 800eda8:	4413      	add	r3, r2
 800edaa:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	b299      	uxth	r1, r3
 800edb2:	7bbb      	ldrb	r3, [r7, #14]
 800edb4:	1e5a      	subs	r2, r3, #1
 800edb6:	7bfb      	ldrb	r3, [r7, #15]
 800edb8:	4401      	add	r1, r0
 800edba:	b288      	uxth	r0, r1
 800edbc:	4918      	ldr	r1, [pc, #96]	; (800ee20 <find_pregoal+0x298>)
 800edbe:	0112      	lsls	r2, r2, #4
 800edc0:	4413      	add	r3, r2
 800edc2:	4602      	mov	r2, r0
 800edc4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y - 1][x] & 0x0f) << 4) != (map[y - 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800edc8:	7bbb      	ldrb	r3, [r7, #14]
 800edca:	1e5a      	subs	r2, r3, #1
 800edcc:	7bfb      	ldrb	r3, [r7, #15]
 800edce:	4918      	ldr	r1, [pc, #96]	; (800ee30 <find_pregoal+0x2a8>)
 800edd0:	0112      	lsls	r2, r2, #4
 800edd2:	440a      	add	r2, r1
 800edd4:	4413      	add	r3, r2
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	011b      	lsls	r3, r3, #4
 800edda:	b2da      	uxtb	r2, r3
 800eddc:	7bbb      	ldrb	r3, [r7, #14]
 800edde:	1e59      	subs	r1, r3, #1
 800ede0:	7bfb      	ldrb	r3, [r7, #15]
 800ede2:	4813      	ldr	r0, [pc, #76]	; (800ee30 <find_pregoal+0x2a8>)
 800ede4:	0109      	lsls	r1, r1, #4
 800ede6:	4401      	add	r1, r0
 800ede8:	440b      	add	r3, r1
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d025      	beq.n	800ee40 <find_pregoal+0x2b8>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800edf4:	2301      	movs	r3, #1
 800edf6:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y - 1][x];					//仮ゴールの歩数を記録
 800edf8:	7bbb      	ldrb	r3, [r7, #14]
 800edfa:	1e5a      	subs	r2, r3, #1
 800edfc:	7bfb      	ldrb	r3, [r7, #15]
 800edfe:	4908      	ldr	r1, [pc, #32]	; (800ee20 <find_pregoal+0x298>)
 800ee00:	0112      	lsls	r2, r2, #4
 800ee02:	4413      	add	r3, r2
 800ee04:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800ee08:	4b0a      	ldr	r3, [pc, #40]	; (800ee34 <find_pregoal+0x2ac>)
 800ee0a:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 800ee0c:	4a0a      	ldr	r2, [pc, #40]	; (800ee38 <find_pregoal+0x2b0>)
 800ee0e:	7bfb      	ldrb	r3, [r7, #15]
 800ee10:	7013      	strb	r3, [r2, #0]
								pregoal_y = y - 1;							//仮goalの座標を記録
 800ee12:	7bbb      	ldrb	r3, [r7, #14]
 800ee14:	3b01      	subs	r3, #1
 800ee16:	b2da      	uxtb	r2, r3
 800ee18:	4b08      	ldr	r3, [pc, #32]	; (800ee3c <find_pregoal+0x2b4>)
 800ee1a:	701a      	strb	r2, [r3, #0]
								break;
 800ee1c:	e06a      	b.n	800eef4 <find_pregoal+0x36c>
 800ee1e:	bf00      	nop
 800ee20:	20000d70 	.word	0x20000d70
 800ee24:	20000bb8 	.word	0x20000bb8
 800ee28:	20000c1c 	.word	0x20000c1c
 800ee2c:	2000034e 	.word	0x2000034e
 800ee30:	200001ac 	.word	0x200001ac
 800ee34:	20000c14 	.word	0x20000c14
 800ee38:	20000d6c 	.word	0x20000d6c
 800ee3c:	200012ad 	.word	0x200012ad
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 800ee40:	78fb      	ldrb	r3, [r7, #3]
 800ee42:	f003 0301 	and.w	r3, r3, #1
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d14d      	bne.n	800eee6 <find_pregoal+0x35e>
 800ee4a:	7bfb      	ldrb	r3, [r7, #15]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d04a      	beq.n	800eee6 <find_pregoal+0x35e>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 800ee50:	7bba      	ldrb	r2, [r7, #14]
 800ee52:	7bfb      	ldrb	r3, [r7, #15]
 800ee54:	3b01      	subs	r3, #1
 800ee56:	493b      	ldr	r1, [pc, #236]	; (800ef44 <find_pregoal+0x3bc>)
 800ee58:	0112      	lsls	r2, r2, #4
 800ee5a:	4413      	add	r3, r2
 800ee5c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ee60:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d13e      	bne.n	800eee6 <find_pregoal+0x35e>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 800ee68:	7bba      	ldrb	r2, [r7, #14]
 800ee6a:	7bfb      	ldrb	r3, [r7, #15]
 800ee6c:	4935      	ldr	r1, [pc, #212]	; (800ef44 <find_pregoal+0x3bc>)
 800ee6e:	0112      	lsls	r2, r2, #4
 800ee70:	4413      	add	r3, r2
 800ee72:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	b299      	uxth	r1, r3
 800ee7a:	7bba      	ldrb	r2, [r7, #14]
 800ee7c:	7bfb      	ldrb	r3, [r7, #15]
 800ee7e:	3b01      	subs	r3, #1
 800ee80:	4401      	add	r1, r0
 800ee82:	b288      	uxth	r0, r1
 800ee84:	492f      	ldr	r1, [pc, #188]	; (800ef44 <find_pregoal+0x3bc>)
 800ee86:	0112      	lsls	r2, r2, #4
 800ee88:	4413      	add	r3, r2
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x - 1] & 0x0f) << 4) != (map[y][x - 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800ee90:	7bba      	ldrb	r2, [r7, #14]
 800ee92:	7bfb      	ldrb	r3, [r7, #15]
 800ee94:	3b01      	subs	r3, #1
 800ee96:	492c      	ldr	r1, [pc, #176]	; (800ef48 <find_pregoal+0x3c0>)
 800ee98:	0112      	lsls	r2, r2, #4
 800ee9a:	440a      	add	r2, r1
 800ee9c:	4413      	add	r3, r2
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	011b      	lsls	r3, r3, #4
 800eea2:	b2da      	uxtb	r2, r3
 800eea4:	7bb9      	ldrb	r1, [r7, #14]
 800eea6:	7bfb      	ldrb	r3, [r7, #15]
 800eea8:	3b01      	subs	r3, #1
 800eeaa:	4827      	ldr	r0, [pc, #156]	; (800ef48 <find_pregoal+0x3c0>)
 800eeac:	0109      	lsls	r1, r1, #4
 800eeae:	4401      	add	r1, r0
 800eeb0:	440b      	add	r3, r1
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d014      	beq.n	800eee6 <find_pregoal+0x35e>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800eebc:	2301      	movs	r3, #1
 800eebe:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x - 1];					//仮ゴールの歩数を記録
 800eec0:	7bba      	ldrb	r2, [r7, #14]
 800eec2:	7bfb      	ldrb	r3, [r7, #15]
 800eec4:	3b01      	subs	r3, #1
 800eec6:	491f      	ldr	r1, [pc, #124]	; (800ef44 <find_pregoal+0x3bc>)
 800eec8:	0112      	lsls	r2, r2, #4
 800eeca:	4413      	add	r3, r2
 800eecc:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800eed0:	4b1e      	ldr	r3, [pc, #120]	; (800ef4c <find_pregoal+0x3c4>)
 800eed2:	801a      	strh	r2, [r3, #0]
								pregoal_x = x - 1;
 800eed4:	7bfb      	ldrb	r3, [r7, #15]
 800eed6:	3b01      	subs	r3, #1
 800eed8:	b2da      	uxtb	r2, r3
 800eeda:	4b1d      	ldr	r3, [pc, #116]	; (800ef50 <find_pregoal+0x3c8>)
 800eedc:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 800eede:	4a1d      	ldr	r2, [pc, #116]	; (800ef54 <find_pregoal+0x3cc>)
 800eee0:	7bbb      	ldrb	r3, [r7, #14]
 800eee2:	7013      	strb	r3, [r2, #0]
								break;							}
 800eee4:	e006      	b.n	800eef4 <find_pregoal+0x36c>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800eee6:	7bfb      	ldrb	r3, [r7, #15]
 800eee8:	3301      	adds	r3, #1
 800eeea:	73fb      	strb	r3, [r7, #15]
 800eeec:	7bfb      	ldrb	r3, [r7, #15]
 800eeee:	2b0f      	cmp	r3, #15
 800eef0:	f67f ae88 	bls.w	800ec04 <find_pregoal+0x7c>
						}
					}
				}
			}
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 800eef4:	7b7b      	ldrb	r3, [r7, #13]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d107      	bne.n	800ef0a <find_pregoal+0x382>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800eefa:	7bbb      	ldrb	r3, [r7, #14]
 800eefc:	3301      	adds	r3, #1
 800eefe:	73bb      	strb	r3, [r7, #14]
 800ef00:	7bbb      	ldrb	r3, [r7, #14]
 800ef02:	2b0f      	cmp	r3, #15
 800ef04:	f67f ae7b 	bls.w	800ebfe <find_pregoal+0x76>
 800ef08:	e000      	b.n	800ef0c <find_pregoal+0x384>
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 800ef0a:	bf00      	nop
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 800ef0c:	4b12      	ldr	r3, [pc, #72]	; (800ef58 <find_pregoal+0x3d0>)
 800ef0e:	881b      	ldrh	r3, [r3, #0]
 800ef10:	3301      	adds	r3, #1
 800ef12:	b29a      	uxth	r2, r3
 800ef14:	4b10      	ldr	r3, [pc, #64]	; (800ef58 <find_pregoal+0x3d0>)
 800ef16:	801a      	strh	r2, [r3, #0]
		if (m_step > 500) allmap_comp_flag = 1;
 800ef18:	4b0f      	ldr	r3, [pc, #60]	; (800ef58 <find_pregoal+0x3d0>)
 800ef1a:	881b      	ldrh	r3, [r3, #0]
 800ef1c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ef20:	d902      	bls.n	800ef28 <find_pregoal+0x3a0>
 800ef22:	4b0e      	ldr	r3, [pc, #56]	; (800ef5c <find_pregoal+0x3d4>)
 800ef24:	2201      	movs	r2, #1
 800ef26:	701a      	strb	r2, [r3, #0]
	} while (break_flag == 0 && allmap_comp_flag != 1);		//未探索壁ありマスを見つけるまで実行
 800ef28:	7b7b      	ldrb	r3, [r7, #13]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d104      	bne.n	800ef38 <find_pregoal+0x3b0>
 800ef2e:	4b0b      	ldr	r3, [pc, #44]	; (800ef5c <find_pregoal+0x3d4>)
 800ef30:	781b      	ldrb	r3, [r3, #0]
 800ef32:	2b01      	cmp	r3, #1
 800ef34:	f47f ae60 	bne.w	800ebf8 <find_pregoal+0x70>
}
 800ef38:	bf00      	nop
 800ef3a:	3714      	adds	r7, #20
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr
 800ef44:	20000d70 	.word	0x20000d70
 800ef48:	200001ac 	.word	0x200001ac
 800ef4c:	20000c14 	.word	0x20000c14
 800ef50:	20000d6c 	.word	0x20000d6c
 800ef54:	200012ad 	.word	0x200012ad
 800ef58:	2000034e 	.word	0x2000034e
 800ef5c:	20000bb8 	.word	0x20000bb8

0800ef60 <make_smap2>:
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap2()
{
 800ef60:	b480      	push	{r7}
 800ef62:	b085      	sub	sp, #20
 800ef64:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800ef66:	2300      	movs	r3, #0
 800ef68:	73bb      	strb	r3, [r7, #14]
 800ef6a:	e014      	b.n	800ef96 <make_smap2+0x36>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	73fb      	strb	r3, [r7, #15]
 800ef70:	e00b      	b.n	800ef8a <make_smap2+0x2a>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 800ef72:	7bba      	ldrb	r2, [r7, #14]
 800ef74:	7bfb      	ldrb	r3, [r7, #15]
 800ef76:	4986      	ldr	r1, [pc, #536]	; (800f190 <make_smap2+0x230>)
 800ef78:	0112      	lsls	r2, r2, #4
 800ef7a:	4413      	add	r3, r2
 800ef7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ef80:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800ef84:	7bfb      	ldrb	r3, [r7, #15]
 800ef86:	3301      	adds	r3, #1
 800ef88:	73fb      	strb	r3, [r7, #15]
 800ef8a:	7bfb      	ldrb	r3, [r7, #15]
 800ef8c:	2b0f      	cmp	r3, #15
 800ef8e:	d9f0      	bls.n	800ef72 <make_smap2+0x12>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800ef90:	7bbb      	ldrb	r3, [r7, #14]
 800ef92:	3301      	adds	r3, #1
 800ef94:	73bb      	strb	r3, [r7, #14]
 800ef96:	7bbb      	ldrb	r3, [r7, #14]
 800ef98:	2b0f      	cmp	r3, #15
 800ef9a:	d9e7      	bls.n	800ef6c <make_smap2+0xc>
		}
	}

	//====仮ゴール座標を0にする====
	smap[pregoal_y][pregoal_x] = 0;
 800ef9c:	4b7d      	ldr	r3, [pc, #500]	; (800f194 <make_smap2+0x234>)
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	4618      	mov	r0, r3
 800efa2:	4b7d      	ldr	r3, [pc, #500]	; (800f198 <make_smap2+0x238>)
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	4619      	mov	r1, r3
 800efa8:	4a79      	ldr	r2, [pc, #484]	; (800f190 <make_smap2+0x230>)
 800efaa:	0103      	lsls	r3, r0, #4
 800efac:	440b      	add	r3, r1
 800efae:	2100      	movs	r1, #0
 800efb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 800efb4:	4b79      	ldr	r3, [pc, #484]	; (800f19c <make_smap2+0x23c>)
 800efb6:	2200      	movs	r2, #0
 800efb8:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 800efba:	2303      	movs	r3, #3
 800efbc:	60bb      	str	r3, [r7, #8]
	int turn = 5;
 800efbe:	2305      	movs	r3, #5
 800efc0:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800efc2:	2300      	movs	r3, #0
 800efc4:	73bb      	strb	r3, [r7, #14]
 800efc6:	e0c0      	b.n	800f14a <make_smap2+0x1ea>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800efc8:	2300      	movs	r3, #0
 800efca:	73fb      	strb	r3, [r7, #15]
 800efcc:	e0b6      	b.n	800f13c <make_smap2+0x1dc>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 800efce:	7bba      	ldrb	r2, [r7, #14]
 800efd0:	7bfb      	ldrb	r3, [r7, #15]
 800efd2:	496f      	ldr	r1, [pc, #444]	; (800f190 <make_smap2+0x230>)
 800efd4:	0112      	lsls	r2, r2, #4
 800efd6:	4413      	add	r3, r2
 800efd8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800efdc:	4b6f      	ldr	r3, [pc, #444]	; (800f19c <make_smap2+0x23c>)
 800efde:	881b      	ldrh	r3, [r3, #0]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	f040 80a8 	bne.w	800f136 <make_smap2+0x1d6>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 800efe6:	7bba      	ldrb	r2, [r7, #14]
 800efe8:	7bfb      	ldrb	r3, [r7, #15]
 800efea:	496d      	ldr	r1, [pc, #436]	; (800f1a0 <make_smap2+0x240>)
 800efec:	0112      	lsls	r2, r2, #4
 800efee:	440a      	add	r2, r1
 800eff0:	4413      	add	r3, r2
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 800eff6:	78fb      	ldrb	r3, [r7, #3]
 800eff8:	f003 0308 	and.w	r3, r3, #8
 800effc:	2b00      	cmp	r3, #0
 800effe:	d122      	bne.n	800f046 <make_smap2+0xe6>
 800f000:	7bbb      	ldrb	r3, [r7, #14]
 800f002:	2b0f      	cmp	r3, #15
 800f004:	d01f      	beq.n	800f046 <make_smap2+0xe6>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 800f006:	7bbb      	ldrb	r3, [r7, #14]
 800f008:	1c5a      	adds	r2, r3, #1
 800f00a:	7bfb      	ldrb	r3, [r7, #15]
 800f00c:	4960      	ldr	r1, [pc, #384]	; (800f190 <make_smap2+0x230>)
 800f00e:	0112      	lsls	r2, r2, #4
 800f010:	4413      	add	r3, r2
 800f012:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f016:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d113      	bne.n	800f046 <make_smap2+0xe6>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800f01e:	7bba      	ldrb	r2, [r7, #14]
 800f020:	7bfb      	ldrb	r3, [r7, #15]
 800f022:	495b      	ldr	r1, [pc, #364]	; (800f190 <make_smap2+0x230>)
 800f024:	0112      	lsls	r2, r2, #4
 800f026:	4413      	add	r3, r2
 800f028:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	b299      	uxth	r1, r3
 800f030:	7bbb      	ldrb	r3, [r7, #14]
 800f032:	1c5a      	adds	r2, r3, #1
 800f034:	7bfb      	ldrb	r3, [r7, #15]
 800f036:	4401      	add	r1, r0
 800f038:	b288      	uxth	r0, r1
 800f03a:	4955      	ldr	r1, [pc, #340]	; (800f190 <make_smap2+0x230>)
 800f03c:	0112      	lsls	r2, r2, #4
 800f03e:	4413      	add	r3, r2
 800f040:	4602      	mov	r2, r0
 800f042:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 800f046:	78fb      	ldrb	r3, [r7, #3]
 800f048:	f003 0304 	and.w	r3, r3, #4
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d122      	bne.n	800f096 <make_smap2+0x136>
 800f050:	7bfb      	ldrb	r3, [r7, #15]
 800f052:	2b0f      	cmp	r3, #15
 800f054:	d01f      	beq.n	800f096 <make_smap2+0x136>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 800f056:	7bba      	ldrb	r2, [r7, #14]
 800f058:	7bfb      	ldrb	r3, [r7, #15]
 800f05a:	3301      	adds	r3, #1
 800f05c:	494c      	ldr	r1, [pc, #304]	; (800f190 <make_smap2+0x230>)
 800f05e:	0112      	lsls	r2, r2, #4
 800f060:	4413      	add	r3, r2
 800f062:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f066:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d113      	bne.n	800f096 <make_smap2+0x136>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800f06e:	7bba      	ldrb	r2, [r7, #14]
 800f070:	7bfb      	ldrb	r3, [r7, #15]
 800f072:	4947      	ldr	r1, [pc, #284]	; (800f190 <make_smap2+0x230>)
 800f074:	0112      	lsls	r2, r2, #4
 800f076:	4413      	add	r3, r2
 800f078:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	b299      	uxth	r1, r3
 800f080:	7bba      	ldrb	r2, [r7, #14]
 800f082:	7bfb      	ldrb	r3, [r7, #15]
 800f084:	3301      	adds	r3, #1
 800f086:	4401      	add	r1, r0
 800f088:	b288      	uxth	r0, r1
 800f08a:	4941      	ldr	r1, [pc, #260]	; (800f190 <make_smap2+0x230>)
 800f08c:	0112      	lsls	r2, r2, #4
 800f08e:	4413      	add	r3, r2
 800f090:	4602      	mov	r2, r0
 800f092:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 800f096:	78fb      	ldrb	r3, [r7, #3]
 800f098:	f003 0302 	and.w	r3, r3, #2
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d122      	bne.n	800f0e6 <make_smap2+0x186>
 800f0a0:	7bbb      	ldrb	r3, [r7, #14]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d01f      	beq.n	800f0e6 <make_smap2+0x186>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 800f0a6:	7bbb      	ldrb	r3, [r7, #14]
 800f0a8:	1e5a      	subs	r2, r3, #1
 800f0aa:	7bfb      	ldrb	r3, [r7, #15]
 800f0ac:	4938      	ldr	r1, [pc, #224]	; (800f190 <make_smap2+0x230>)
 800f0ae:	0112      	lsls	r2, r2, #4
 800f0b0:	4413      	add	r3, r2
 800f0b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f0b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d113      	bne.n	800f0e6 <make_smap2+0x186>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800f0be:	7bba      	ldrb	r2, [r7, #14]
 800f0c0:	7bfb      	ldrb	r3, [r7, #15]
 800f0c2:	4933      	ldr	r1, [pc, #204]	; (800f190 <make_smap2+0x230>)
 800f0c4:	0112      	lsls	r2, r2, #4
 800f0c6:	4413      	add	r3, r2
 800f0c8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	b299      	uxth	r1, r3
 800f0d0:	7bbb      	ldrb	r3, [r7, #14]
 800f0d2:	1e5a      	subs	r2, r3, #1
 800f0d4:	7bfb      	ldrb	r3, [r7, #15]
 800f0d6:	4401      	add	r1, r0
 800f0d8:	b288      	uxth	r0, r1
 800f0da:	492d      	ldr	r1, [pc, #180]	; (800f190 <make_smap2+0x230>)
 800f0dc:	0112      	lsls	r2, r2, #4
 800f0de:	4413      	add	r3, r2
 800f0e0:	4602      	mov	r2, r0
 800f0e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 800f0e6:	78fb      	ldrb	r3, [r7, #3]
 800f0e8:	f003 0301 	and.w	r3, r3, #1
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d122      	bne.n	800f136 <make_smap2+0x1d6>
 800f0f0:	7bfb      	ldrb	r3, [r7, #15]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d01f      	beq.n	800f136 <make_smap2+0x1d6>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 800f0f6:	7bba      	ldrb	r2, [r7, #14]
 800f0f8:	7bfb      	ldrb	r3, [r7, #15]
 800f0fa:	3b01      	subs	r3, #1
 800f0fc:	4924      	ldr	r1, [pc, #144]	; (800f190 <make_smap2+0x230>)
 800f0fe:	0112      	lsls	r2, r2, #4
 800f100:	4413      	add	r3, r2
 800f102:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f106:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f10a:	4293      	cmp	r3, r2
 800f10c:	d113      	bne.n	800f136 <make_smap2+0x1d6>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 800f10e:	7bba      	ldrb	r2, [r7, #14]
 800f110:	7bfb      	ldrb	r3, [r7, #15]
 800f112:	491f      	ldr	r1, [pc, #124]	; (800f190 <make_smap2+0x230>)
 800f114:	0112      	lsls	r2, r2, #4
 800f116:	4413      	add	r3, r2
 800f118:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	b299      	uxth	r1, r3
 800f120:	7bba      	ldrb	r2, [r7, #14]
 800f122:	7bfb      	ldrb	r3, [r7, #15]
 800f124:	3b01      	subs	r3, #1
 800f126:	4401      	add	r1, r0
 800f128:	b288      	uxth	r0, r1
 800f12a:	4919      	ldr	r1, [pc, #100]	; (800f190 <make_smap2+0x230>)
 800f12c:	0112      	lsls	r2, r2, #4
 800f12e:	4413      	add	r3, r2
 800f130:	4602      	mov	r2, r0
 800f132:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800f136:	7bfb      	ldrb	r3, [r7, #15]
 800f138:	3301      	adds	r3, #1
 800f13a:	73fb      	strb	r3, [r7, #15]
 800f13c:	7bfb      	ldrb	r3, [r7, #15]
 800f13e:	2b0f      	cmp	r3, #15
 800f140:	f67f af45 	bls.w	800efce <make_smap2+0x6e>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800f144:	7bbb      	ldrb	r3, [r7, #14]
 800f146:	3301      	adds	r3, #1
 800f148:	73bb      	strb	r3, [r7, #14]
 800f14a:	7bbb      	ldrb	r3, [r7, #14]
 800f14c:	2b0f      	cmp	r3, #15
 800f14e:	f67f af3b 	bls.w	800efc8 <make_smap2+0x68>
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 800f152:	4b12      	ldr	r3, [pc, #72]	; (800f19c <make_smap2+0x23c>)
 800f154:	881b      	ldrh	r3, [r3, #0]
 800f156:	3301      	adds	r3, #1
 800f158:	b29a      	uxth	r2, r3
 800f15a:	4b10      	ldr	r3, [pc, #64]	; (800f19c <make_smap2+0x23c>)
 800f15c:	801a      	strh	r2, [r3, #0]
	} while (smap[mouse.y][mouse.x] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
 800f15e:	4b11      	ldr	r3, [pc, #68]	; (800f1a4 <make_smap2+0x244>)
 800f160:	785b      	ldrb	r3, [r3, #1]
 800f162:	b2db      	uxtb	r3, r3
 800f164:	4618      	mov	r0, r3
 800f166:	4b0f      	ldr	r3, [pc, #60]	; (800f1a4 <make_smap2+0x244>)
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	4619      	mov	r1, r3
 800f16e:	4a08      	ldr	r2, [pc, #32]	; (800f190 <make_smap2+0x230>)
 800f170:	0103      	lsls	r3, r0, #4
 800f172:	440b      	add	r3, r1
 800f174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f178:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f17c:	4293      	cmp	r3, r2
 800f17e:	f43f af20 	beq.w	800efc2 <make_smap2+0x62>
}
 800f182:	bf00      	nop
 800f184:	3714      	adds	r7, #20
 800f186:	46bd      	mov	sp, r7
 800f188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18c:	4770      	bx	lr
 800f18e:	bf00      	nop
 800f190:	20000d70 	.word	0x20000d70
 800f194:	200012ad 	.word	0x200012ad
 800f198:	20000d6c 	.word	0x20000d6c
 800f19c:	2000034e 	.word	0x2000034e
 800f1a0:	200001ac 	.word	0x200001ac
 800f1a4:	20000c1c 	.word	0x20000c1c

0800f1a8 <pass_route2>:
//pass_route2
// route配列をpass圧縮する(半区画ベース)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route2(void){
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	70fb      	strb	r3, [r7, #3]
	for(i = 0; i < 256; i++){
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	607b      	str	r3, [r7, #4]
 800f1b6:	e007      	b.n	800f1c8 <pass_route2+0x20>
		pass[i] = 0;								//pass配列の初期化
 800f1b8:	4a83      	ldr	r2, [pc, #524]	; (800f3c8 <pass_route2+0x220>)
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	4413      	add	r3, r2
 800f1be:	2200      	movs	r2, #0
 800f1c0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	607b      	str	r3, [r7, #4]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2bff      	cmp	r3, #255	; 0xff
 800f1cc:	ddf4      	ble.n	800f1b8 <pass_route2+0x10>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	70bb      	strb	r3, [r7, #2]
	i = 0;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 800f1da:	e0e8      	b.n	800f3ae <pass_route2+0x206>
		s = 0;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x44){
 800f1e0:	4a7a      	ldr	r2, [pc, #488]	; (800f3cc <pass_route2+0x224>)
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	4413      	add	r3, r2
 800f1e6:	781b      	ldrb	r3, [r3, #0]
 800f1e8:	2b44      	cmp	r3, #68	; 0x44
 800f1ea:	d107      	bne.n	800f1fc <pass_route2+0x54>
			pass[p] = -1;
 800f1ec:	78bb      	ldrb	r3, [r7, #2]
 800f1ee:	4a76      	ldr	r2, [pc, #472]	; (800f3c8 <pass_route2+0x220>)
 800f1f0:	21ff      	movs	r1, #255	; 0xff
 800f1f2:	54d1      	strb	r1, [r2, r3]
			i++;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	607b      	str	r3, [r7, #4]
 800f1fa:	e0d5      	b.n	800f3a8 <pass_route2+0x200>
		}else if(route[i] == 0x11){
 800f1fc:	4a73      	ldr	r2, [pc, #460]	; (800f3cc <pass_route2+0x224>)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	4413      	add	r3, r2
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	2b11      	cmp	r3, #17
 800f206:	d107      	bne.n	800f218 <pass_route2+0x70>
			pass[p] = -2;
 800f208:	78bb      	ldrb	r3, [r7, #2]
 800f20a:	4a6f      	ldr	r2, [pc, #444]	; (800f3c8 <pass_route2+0x220>)
 800f20c:	21fe      	movs	r1, #254	; 0xfe
 800f20e:	54d1      	strb	r1, [r2, r3]
			i++;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	3301      	adds	r3, #1
 800f214:	607b      	str	r3, [r7, #4]
 800f216:	e0c7      	b.n	800f3a8 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 800f218:	4a6c      	ldr	r2, [pc, #432]	; (800f3cc <pass_route2+0x224>)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	4413      	add	r3, r2
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	2b77      	cmp	r3, #119	; 0x77
 800f222:	d115      	bne.n	800f250 <pass_route2+0xa8>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	3301      	adds	r3, #1
 800f228:	4a68      	ldr	r2, [pc, #416]	; (800f3cc <pass_route2+0x224>)
 800f22a:	5cd3      	ldrb	r3, [r2, r3]
 800f22c:	2b44      	cmp	r3, #68	; 0x44
 800f22e:	d10f      	bne.n	800f250 <pass_route2+0xa8>
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	3302      	adds	r3, #2
 800f234:	4a65      	ldr	r2, [pc, #404]	; (800f3cc <pass_route2+0x224>)
 800f236:	5cd3      	ldrb	r3, [r2, r3]
 800f238:	2b77      	cmp	r3, #119	; 0x77
 800f23a:	d109      	bne.n	800f250 <pass_route2+0xa8>
			s_flag = 0;
 800f23c:	2300      	movs	r3, #0
 800f23e:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;
 800f240:	78bb      	ldrb	r3, [r7, #2]
 800f242:	4a61      	ldr	r2, [pc, #388]	; (800f3c8 <pass_route2+0x220>)
 800f244:	21fd      	movs	r1, #253	; 0xfd
 800f246:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	3303      	adds	r3, #3
 800f24c:	607b      	str	r3, [r7, #4]
 800f24e:	e0ab      	b.n	800f3a8 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 800f250:	4a5e      	ldr	r2, [pc, #376]	; (800f3cc <pass_route2+0x224>)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	4413      	add	r3, r2
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	2b77      	cmp	r3, #119	; 0x77
 800f25a:	d115      	bne.n	800f288 <pass_route2+0xe0>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	3301      	adds	r3, #1
 800f260:	4a5a      	ldr	r2, [pc, #360]	; (800f3cc <pass_route2+0x224>)
 800f262:	5cd3      	ldrb	r3, [r2, r3]
 800f264:	2b11      	cmp	r3, #17
 800f266:	d10f      	bne.n	800f288 <pass_route2+0xe0>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	3302      	adds	r3, #2
 800f26c:	4a57      	ldr	r2, [pc, #348]	; (800f3cc <pass_route2+0x224>)
 800f26e:	5cd3      	ldrb	r3, [r2, r3]
 800f270:	2b77      	cmp	r3, #119	; 0x77
 800f272:	d109      	bne.n	800f288 <pass_route2+0xe0>
			s_flag = 0;
 800f274:	2300      	movs	r3, #0
 800f276:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;
 800f278:	78bb      	ldrb	r3, [r7, #2]
 800f27a:	4a53      	ldr	r2, [pc, #332]	; (800f3c8 <pass_route2+0x220>)
 800f27c:	21fc      	movs	r1, #252	; 0xfc
 800f27e:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	3303      	adds	r3, #3
 800f284:	607b      	str	r3, [r7, #4]
 800f286:	e08f      	b.n	800f3a8 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 800f288:	4a50      	ldr	r2, [pc, #320]	; (800f3cc <pass_route2+0x224>)
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	4413      	add	r3, r2
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	2b77      	cmp	r3, #119	; 0x77
 800f292:	d11b      	bne.n	800f2cc <pass_route2+0x124>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	3301      	adds	r3, #1
 800f298:	4a4c      	ldr	r2, [pc, #304]	; (800f3cc <pass_route2+0x224>)
 800f29a:	5cd3      	ldrb	r3, [r2, r3]
 800f29c:	2b44      	cmp	r3, #68	; 0x44
 800f29e:	d115      	bne.n	800f2cc <pass_route2+0x124>
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	3302      	adds	r3, #2
 800f2a4:	4a49      	ldr	r2, [pc, #292]	; (800f3cc <pass_route2+0x224>)
 800f2a6:	5cd3      	ldrb	r3, [r2, r3]
 800f2a8:	2b44      	cmp	r3, #68	; 0x44
 800f2aa:	d10f      	bne.n	800f2cc <pass_route2+0x124>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	3303      	adds	r3, #3
 800f2b0:	4a46      	ldr	r2, [pc, #280]	; (800f3cc <pass_route2+0x224>)
 800f2b2:	5cd3      	ldrb	r3, [r2, r3]
 800f2b4:	2b77      	cmp	r3, #119	; 0x77
 800f2b6:	d109      	bne.n	800f2cc <pass_route2+0x124>
			s_flag = 0;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;
 800f2bc:	78bb      	ldrb	r3, [r7, #2]
 800f2be:	4a42      	ldr	r2, [pc, #264]	; (800f3c8 <pass_route2+0x220>)
 800f2c0:	21fb      	movs	r1, #251	; 0xfb
 800f2c2:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	3304      	adds	r3, #4
 800f2c8:	607b      	str	r3, [r7, #4]
 800f2ca:	e06d      	b.n	800f3a8 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 800f2cc:	4a3f      	ldr	r2, [pc, #252]	; (800f3cc <pass_route2+0x224>)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	781b      	ldrb	r3, [r3, #0]
 800f2d4:	2b77      	cmp	r3, #119	; 0x77
 800f2d6:	d11b      	bne.n	800f310 <pass_route2+0x168>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	3301      	adds	r3, #1
 800f2dc:	4a3b      	ldr	r2, [pc, #236]	; (800f3cc <pass_route2+0x224>)
 800f2de:	5cd3      	ldrb	r3, [r2, r3]
 800f2e0:	2b11      	cmp	r3, #17
 800f2e2:	d115      	bne.n	800f310 <pass_route2+0x168>
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	3302      	adds	r3, #2
 800f2e8:	4a38      	ldr	r2, [pc, #224]	; (800f3cc <pass_route2+0x224>)
 800f2ea:	5cd3      	ldrb	r3, [r2, r3]
 800f2ec:	2b11      	cmp	r3, #17
 800f2ee:	d10f      	bne.n	800f310 <pass_route2+0x168>
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	3303      	adds	r3, #3
 800f2f4:	4a35      	ldr	r2, [pc, #212]	; (800f3cc <pass_route2+0x224>)
 800f2f6:	5cd3      	ldrb	r3, [r2, r3]
 800f2f8:	2b77      	cmp	r3, #119	; 0x77
 800f2fa:	d109      	bne.n	800f310 <pass_route2+0x168>
			s_flag = 0;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;
 800f300:	78bb      	ldrb	r3, [r7, #2]
 800f302:	4a31      	ldr	r2, [pc, #196]	; (800f3c8 <pass_route2+0x220>)
 800f304:	21fa      	movs	r1, #250	; 0xfa
 800f306:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	3304      	adds	r3, #4
 800f30c:	607b      	str	r3, [r7, #4]
 800f30e:	e04b      	b.n	800f3a8 <pass_route2+0x200>
		}else if(route[i] == 0xff){
 800f310:	4a2e      	ldr	r2, [pc, #184]	; (800f3cc <pass_route2+0x224>)
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	4413      	add	r3, r2
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	2bff      	cmp	r3, #255	; 0xff
 800f31a:	d107      	bne.n	800f32c <pass_route2+0x184>
			pass[p] = -114;
 800f31c:	78bb      	ldrb	r3, [r7, #2]
 800f31e:	4a2a      	ldr	r2, [pc, #168]	; (800f3c8 <pass_route2+0x220>)
 800f320:	218e      	movs	r1, #142	; 0x8e
 800f322:	54d1      	strb	r1, [r2, r3]
			i++;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	3301      	adds	r3, #1
 800f328:	607b      	str	r3, [r7, #4]
 800f32a:	e03d      	b.n	800f3a8 <pass_route2+0x200>
		}else if(route[i] == 0x77){
 800f32c:	4a27      	ldr	r2, [pc, #156]	; (800f3cc <pass_route2+0x224>)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4413      	add	r3, r2
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	2b77      	cmp	r3, #119	; 0x77
 800f336:	d137      	bne.n	800f3a8 <pass_route2+0x200>
			if(s_flag){
 800f338:	78fb      	ldrb	r3, [r7, #3]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d012      	beq.n	800f364 <pass_route2+0x1bc>
				pass[p-1]++;
 800f33e:	78bb      	ldrb	r3, [r7, #2]
 800f340:	3b01      	subs	r3, #1
 800f342:	4a21      	ldr	r2, [pc, #132]	; (800f3c8 <pass_route2+0x220>)
 800f344:	56d2      	ldrsb	r2, [r2, r3]
 800f346:	b2d2      	uxtb	r2, r2
 800f348:	3201      	adds	r2, #1
 800f34a:	b2d2      	uxtb	r2, r2
 800f34c:	b251      	sxtb	r1, r2
 800f34e:	4a1e      	ldr	r2, [pc, #120]	; (800f3c8 <pass_route2+0x220>)
 800f350:	54d1      	strb	r1, [r2, r3]
				p--;
 800f352:	78bb      	ldrb	r3, [r7, #2]
 800f354:	3b01      	subs	r3, #1
 800f356:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 800f358:	2300      	movs	r3, #0
 800f35a:	70fb      	strb	r3, [r7, #3]
				i++;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	3301      	adds	r3, #1
 800f360:	607b      	str	r3, [r7, #4]
 800f362:	e021      	b.n	800f3a8 <pass_route2+0x200>
			}else{
				s++;
 800f364:	787b      	ldrb	r3, [r7, #1]
 800f366:	3301      	adds	r3, #1
 800f368:	707b      	strb	r3, [r7, #1]
				pass[p] = s;
 800f36a:	78bb      	ldrb	r3, [r7, #2]
 800f36c:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800f370:	4a15      	ldr	r2, [pc, #84]	; (800f3c8 <pass_route2+0x220>)
 800f372:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 800f374:	e00c      	b.n	800f390 <pass_route2+0x1e8>
					s_flag = 1;
 800f376:	2301      	movs	r3, #1
 800f378:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;
 800f37a:	78bb      	ldrb	r3, [r7, #2]
 800f37c:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800f380:	4a11      	ldr	r2, [pc, #68]	; (800f3c8 <pass_route2+0x220>)
 800f382:	54d1      	strb	r1, [r2, r3]
					i++;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	3301      	adds	r3, #1
 800f388:	607b      	str	r3, [r7, #4]
					s++;
 800f38a:	787b      	ldrb	r3, [r7, #1]
 800f38c:	3301      	adds	r3, #1
 800f38e:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	3301      	adds	r3, #1
 800f394:	4a0d      	ldr	r2, [pc, #52]	; (800f3cc <pass_route2+0x224>)
 800f396:	5cd3      	ldrb	r3, [r2, r3]
 800f398:	2b77      	cmp	r3, #119	; 0x77
 800f39a:	d0ec      	beq.n	800f376 <pass_route2+0x1ce>
				}
				if(!s_flag){
 800f39c:	78fb      	ldrb	r3, [r7, #3]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d102      	bne.n	800f3a8 <pass_route2+0x200>
					i++;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	3301      	adds	r3, #1
 800f3a6:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 800f3a8:	78bb      	ldrb	r3, [r7, #2]
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	3b01      	subs	r3, #1
 800f3b2:	4a06      	ldr	r2, [pc, #24]	; (800f3cc <pass_route2+0x224>)
 800f3b4:	5cd3      	ldrb	r3, [r2, r3]
 800f3b6:	2bff      	cmp	r3, #255	; 0xff
 800f3b8:	f47f af10 	bne.w	800f1dc <pass_route2+0x34>
	}
}
 800f3bc:	bf00      	nop
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr
 800f3c8:	20000350 	.word	0x20000350
 800f3cc:	20000c64 	.word	0x20000c64

0800f3d0 <pass_route3>:
//pass_route3
// route配列をpass圧縮する(半区画ベース+斜めあり)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route3(void){
 800f3d0:	b480      	push	{r7}
 800f3d2:	b083      	sub	sp, #12
 800f3d4:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	70fb      	strb	r3, [r7, #3]
	v_flag = 0;										//a斜めフラグの初期化
 800f3da:	4b90      	ldr	r3, [pc, #576]	; (800f61c <pass_route3+0x24c>)
 800f3dc:	2200      	movs	r2, #0
 800f3de:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	607b      	str	r3, [r7, #4]
 800f3e4:	e007      	b.n	800f3f6 <pass_route3+0x26>
		pass[i] = 0;								//pass配列の初期化
 800f3e6:	4a8e      	ldr	r2, [pc, #568]	; (800f620 <pass_route3+0x250>)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	4413      	add	r3, r2
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	3301      	adds	r3, #1
 800f3f4:	607b      	str	r3, [r7, #4]
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2bff      	cmp	r3, #255	; 0xff
 800f3fa:	ddf4      	ble.n	800f3e6 <pass_route3+0x16>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	70bb      	strb	r3, [r7, #2]
	i = 0;
 800f400:	2300      	movs	r3, #0
 800f402:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 800f404:	2300      	movs	r3, #0
 800f406:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 800f408:	e2f1      	b.n	800f9ee <pass_route3+0x61e>
		s = 0;
 800f40a:	2300      	movs	r3, #0
 800f40c:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 800f40e:	4a85      	ldr	r2, [pc, #532]	; (800f624 <pass_route3+0x254>)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	4413      	add	r3, r2
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	2b77      	cmp	r3, #119	; 0x77
 800f418:	d11b      	bne.n	800f452 <pass_route3+0x82>
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	3301      	adds	r3, #1
 800f41e:	4a81      	ldr	r2, [pc, #516]	; (800f624 <pass_route3+0x254>)
 800f420:	5cd3      	ldrb	r3, [r2, r3]
 800f422:	2b44      	cmp	r3, #68	; 0x44
 800f424:	d115      	bne.n	800f452 <pass_route3+0x82>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	3302      	adds	r3, #2
 800f42a:	4a7e      	ldr	r2, [pc, #504]	; (800f624 <pass_route3+0x254>)
 800f42c:	5cd3      	ldrb	r3, [r2, r3]
 800f42e:	2b77      	cmp	r3, #119	; 0x77
 800f430:	d10f      	bne.n	800f452 <pass_route3+0x82>
			s_flag = 0;
 800f432:	2300      	movs	r3, #0
 800f434:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右90
 800f436:	78bb      	ldrb	r3, [r7, #2]
 800f438:	4a79      	ldr	r2, [pc, #484]	; (800f620 <pass_route3+0x250>)
 800f43a:	21fd      	movs	r1, #253	; 0xfd
 800f43c:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d102      	bne.n	800f44a <pass_route3+0x7a>
				start_flag = 2;
 800f444:	4b78      	ldr	r3, [pc, #480]	; (800f628 <pass_route3+0x258>)
 800f446:	2202      	movs	r2, #2
 800f448:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	3303      	adds	r3, #3
 800f44e:	607b      	str	r3, [r7, #4]
 800f450:	e2ca      	b.n	800f9e8 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 800f452:	4a74      	ldr	r2, [pc, #464]	; (800f624 <pass_route3+0x254>)
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	4413      	add	r3, r2
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	2b77      	cmp	r3, #119	; 0x77
 800f45c:	d11b      	bne.n	800f496 <pass_route3+0xc6>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	3301      	adds	r3, #1
 800f462:	4a70      	ldr	r2, [pc, #448]	; (800f624 <pass_route3+0x254>)
 800f464:	5cd3      	ldrb	r3, [r2, r3]
 800f466:	2b11      	cmp	r3, #17
 800f468:	d115      	bne.n	800f496 <pass_route3+0xc6>
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	3302      	adds	r3, #2
 800f46e:	4a6d      	ldr	r2, [pc, #436]	; (800f624 <pass_route3+0x254>)
 800f470:	5cd3      	ldrb	r3, [r2, r3]
 800f472:	2b77      	cmp	r3, #119	; 0x77
 800f474:	d10f      	bne.n	800f496 <pass_route3+0xc6>
			s_flag = 0;
 800f476:	2300      	movs	r3, #0
 800f478:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左90
 800f47a:	78bb      	ldrb	r3, [r7, #2]
 800f47c:	4a68      	ldr	r2, [pc, #416]	; (800f620 <pass_route3+0x250>)
 800f47e:	21fc      	movs	r1, #252	; 0xfc
 800f480:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d102      	bne.n	800f48e <pass_route3+0xbe>
				start_flag = 2;
 800f488:	4b67      	ldr	r3, [pc, #412]	; (800f628 <pass_route3+0x258>)
 800f48a:	2202      	movs	r2, #2
 800f48c:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	3303      	adds	r3, #3
 800f492:	607b      	str	r3, [r7, #4]
 800f494:	e2a8      	b.n	800f9e8 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 800f496:	4a63      	ldr	r2, [pc, #396]	; (800f624 <pass_route3+0x254>)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	4413      	add	r3, r2
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	2b77      	cmp	r3, #119	; 0x77
 800f4a0:	d11b      	bne.n	800f4da <pass_route3+0x10a>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	3301      	adds	r3, #1
 800f4a6:	4a5f      	ldr	r2, [pc, #380]	; (800f624 <pass_route3+0x254>)
 800f4a8:	5cd3      	ldrb	r3, [r2, r3]
 800f4aa:	2b44      	cmp	r3, #68	; 0x44
 800f4ac:	d115      	bne.n	800f4da <pass_route3+0x10a>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	3302      	adds	r3, #2
 800f4b2:	4a5c      	ldr	r2, [pc, #368]	; (800f624 <pass_route3+0x254>)
 800f4b4:	5cd3      	ldrb	r3, [r2, r3]
 800f4b6:	2b44      	cmp	r3, #68	; 0x44
 800f4b8:	d10f      	bne.n	800f4da <pass_route3+0x10a>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	3303      	adds	r3, #3
 800f4be:	4a59      	ldr	r2, [pc, #356]	; (800f624 <pass_route3+0x254>)
 800f4c0:	5cd3      	ldrb	r3, [r2, r3]
 800f4c2:	2b77      	cmp	r3, #119	; 0x77
 800f4c4:	d109      	bne.n	800f4da <pass_route3+0x10a>
			s_flag = 0;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180
 800f4ca:	78bb      	ldrb	r3, [r7, #2]
 800f4cc:	4a54      	ldr	r2, [pc, #336]	; (800f620 <pass_route3+0x250>)
 800f4ce:	21fb      	movs	r1, #251	; 0xfb
 800f4d0:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	3304      	adds	r3, #4
 800f4d6:	607b      	str	r3, [r7, #4]
 800f4d8:	e286      	b.n	800f9e8 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 800f4da:	4a52      	ldr	r2, [pc, #328]	; (800f624 <pass_route3+0x254>)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	4413      	add	r3, r2
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	2b77      	cmp	r3, #119	; 0x77
 800f4e4:	d11b      	bne.n	800f51e <pass_route3+0x14e>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	4a4e      	ldr	r2, [pc, #312]	; (800f624 <pass_route3+0x254>)
 800f4ec:	5cd3      	ldrb	r3, [r2, r3]
 800f4ee:	2b11      	cmp	r3, #17
 800f4f0:	d115      	bne.n	800f51e <pass_route3+0x14e>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	3302      	adds	r3, #2
 800f4f6:	4a4b      	ldr	r2, [pc, #300]	; (800f624 <pass_route3+0x254>)
 800f4f8:	5cd3      	ldrb	r3, [r2, r3]
 800f4fa:	2b11      	cmp	r3, #17
 800f4fc:	d10f      	bne.n	800f51e <pass_route3+0x14e>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	3303      	adds	r3, #3
 800f502:	4a48      	ldr	r2, [pc, #288]	; (800f624 <pass_route3+0x254>)
 800f504:	5cd3      	ldrb	r3, [r2, r3]
 800f506:	2b77      	cmp	r3, #119	; 0x77
 800f508:	d109      	bne.n	800f51e <pass_route3+0x14e>
			s_flag = 0;
 800f50a:	2300      	movs	r3, #0
 800f50c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180
 800f50e:	78bb      	ldrb	r3, [r7, #2]
 800f510:	4a43      	ldr	r2, [pc, #268]	; (800f620 <pass_route3+0x250>)
 800f512:	21fa      	movs	r1, #250	; 0xfa
 800f514:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	3304      	adds	r3, #4
 800f51a:	607b      	str	r3, [r7, #4]
 800f51c:	e264      	b.n	800f9e8 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x11){
 800f51e:	4a41      	ldr	r2, [pc, #260]	; (800f624 <pass_route3+0x254>)
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4413      	add	r3, r2
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	2b77      	cmp	r3, #119	; 0x77
 800f528:	d11e      	bne.n	800f568 <pass_route3+0x198>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	3301      	adds	r3, #1
 800f52e:	4a3d      	ldr	r2, [pc, #244]	; (800f624 <pass_route3+0x254>)
 800f530:	5cd3      	ldrb	r3, [r2, r3]
 800f532:	2b44      	cmp	r3, #68	; 0x44
 800f534:	d118      	bne.n	800f568 <pass_route3+0x198>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	3302      	adds	r3, #2
 800f53a:	4a3a      	ldr	r2, [pc, #232]	; (800f624 <pass_route3+0x254>)
 800f53c:	5cd3      	ldrb	r3, [r2, r3]
 800f53e:	2b11      	cmp	r3, #17
 800f540:	d112      	bne.n	800f568 <pass_route3+0x198>
			s_flag = 0;
 800f542:	2300      	movs	r3, #0
 800f544:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45in
 800f546:	78bb      	ldrb	r3, [r7, #2]
 800f548:	4a35      	ldr	r2, [pc, #212]	; (800f620 <pass_route3+0x250>)
 800f54a:	21f9      	movs	r1, #249	; 0xf9
 800f54c:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 800f54e:	4b33      	ldr	r3, [pc, #204]	; (800f61c <pass_route3+0x24c>)
 800f550:	2201      	movs	r2, #1
 800f552:	701a      	strb	r2, [r3, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d102      	bne.n	800f560 <pass_route3+0x190>
				start_flag = 2;
 800f55a:	4b33      	ldr	r3, [pc, #204]	; (800f628 <pass_route3+0x258>)
 800f55c:	2202      	movs	r2, #2
 800f55e:	701a      	strb	r2, [r3, #0]
			}
			i = i + 2;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	3302      	adds	r3, #2
 800f564:	607b      	str	r3, [r7, #4]
 800f566:	e23f      	b.n	800f9e8 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x44 && route[i+1] == 0x77){
 800f568:	4b2c      	ldr	r3, [pc, #176]	; (800f61c <pass_route3+0x24c>)
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	2b01      	cmp	r3, #1
 800f56e:	d118      	bne.n	800f5a2 <pass_route3+0x1d2>
 800f570:	4a2c      	ldr	r2, [pc, #176]	; (800f624 <pass_route3+0x254>)
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	4413      	add	r3, r2
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	2b44      	cmp	r3, #68	; 0x44
 800f57a:	d112      	bne.n	800f5a2 <pass_route3+0x1d2>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	3301      	adds	r3, #1
 800f580:	4a28      	ldr	r2, [pc, #160]	; (800f624 <pass_route3+0x254>)
 800f582:	5cd3      	ldrb	r3, [r2, r3]
 800f584:	2b77      	cmp	r3, #119	; 0x77
 800f586:	d10c      	bne.n	800f5a2 <pass_route3+0x1d2>
			s_flag = 0;
 800f588:	2300      	movs	r3, #0
 800f58a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45out
 800f58c:	78bb      	ldrb	r3, [r7, #2]
 800f58e:	4a24      	ldr	r2, [pc, #144]	; (800f620 <pass_route3+0x250>)
 800f590:	21f9      	movs	r1, #249	; 0xf9
 800f592:	54d1      	strb	r1, [r2, r3]
			v_flag = 0;
 800f594:	4b21      	ldr	r3, [pc, #132]	; (800f61c <pass_route3+0x24c>)
 800f596:	2200      	movs	r2, #0
 800f598:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	3302      	adds	r3, #2
 800f59e:	607b      	str	r3, [r7, #4]
 800f5a0:	e222      	b.n	800f9e8 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x44){
 800f5a2:	4a20      	ldr	r2, [pc, #128]	; (800f624 <pass_route3+0x254>)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	4413      	add	r3, r2
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	2b77      	cmp	r3, #119	; 0x77
 800f5ac:	d118      	bne.n	800f5e0 <pass_route3+0x210>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	4a1c      	ldr	r2, [pc, #112]	; (800f624 <pass_route3+0x254>)
 800f5b4:	5cd3      	ldrb	r3, [r2, r3]
 800f5b6:	2b11      	cmp	r3, #17
 800f5b8:	d112      	bne.n	800f5e0 <pass_route3+0x210>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	3302      	adds	r3, #2
 800f5be:	4a19      	ldr	r2, [pc, #100]	; (800f624 <pass_route3+0x254>)
 800f5c0:	5cd3      	ldrb	r3, [r2, r3]
 800f5c2:	2b44      	cmp	r3, #68	; 0x44
 800f5c4:	d10c      	bne.n	800f5e0 <pass_route3+0x210>
			s_flag = 0;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45in
 800f5ca:	78bb      	ldrb	r3, [r7, #2]
 800f5cc:	4a14      	ldr	r2, [pc, #80]	; (800f620 <pass_route3+0x250>)
 800f5ce:	21f8      	movs	r1, #248	; 0xf8
 800f5d0:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 800f5d2:	4b12      	ldr	r3, [pc, #72]	; (800f61c <pass_route3+0x24c>)
 800f5d4:	2201      	movs	r2, #1
 800f5d6:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	3302      	adds	r3, #2
 800f5dc:	607b      	str	r3, [r7, #4]
 800f5de:	e203      	b.n	800f9e8 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x11 && route[i+1] == 0x77){
 800f5e0:	4b0e      	ldr	r3, [pc, #56]	; (800f61c <pass_route3+0x24c>)
 800f5e2:	781b      	ldrb	r3, [r3, #0]
 800f5e4:	2b01      	cmp	r3, #1
 800f5e6:	d121      	bne.n	800f62c <pass_route3+0x25c>
 800f5e8:	4a0e      	ldr	r2, [pc, #56]	; (800f624 <pass_route3+0x254>)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4413      	add	r3, r2
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	2b11      	cmp	r3, #17
 800f5f2:	d11b      	bne.n	800f62c <pass_route3+0x25c>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	3301      	adds	r3, #1
 800f5f8:	4a0a      	ldr	r2, [pc, #40]	; (800f624 <pass_route3+0x254>)
 800f5fa:	5cd3      	ldrb	r3, [r2, r3]
 800f5fc:	2b77      	cmp	r3, #119	; 0x77
 800f5fe:	d115      	bne.n	800f62c <pass_route3+0x25c>
			s_flag = 0;
 800f600:	2300      	movs	r3, #0
 800f602:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45out
 800f604:	78bb      	ldrb	r3, [r7, #2]
 800f606:	4a06      	ldr	r2, [pc, #24]	; (800f620 <pass_route3+0x250>)
 800f608:	21f8      	movs	r1, #248	; 0xf8
 800f60a:	54d1      	strb	r1, [r2, r3]
			v_flag = 0;
 800f60c:	4b03      	ldr	r3, [pc, #12]	; (800f61c <pass_route3+0x24c>)
 800f60e:	2200      	movs	r2, #0
 800f610:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	3302      	adds	r3, #2
 800f616:	607b      	str	r3, [r7, #4]
 800f618:	e1e6      	b.n	800f9e8 <pass_route3+0x618>
 800f61a:	bf00      	nop
 800f61c:	20000af0 	.word	0x20000af0
 800f620:	20000350 	.word	0x20000350
 800f624:	20000c64 	.word	0x20000c64
 800f628:	200015d4 	.word	0x200015d4
		}else if(v_flag == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x11){
 800f62c:	4ba0      	ldr	r3, [pc, #640]	; (800f8b0 <pass_route3+0x4e0>)
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	2b01      	cmp	r3, #1
 800f632:	d11e      	bne.n	800f672 <pass_route3+0x2a2>
 800f634:	4a9f      	ldr	r2, [pc, #636]	; (800f8b4 <pass_route3+0x4e4>)
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	4413      	add	r3, r2
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	2b44      	cmp	r3, #68	; 0x44
 800f63e:	d118      	bne.n	800f672 <pass_route3+0x2a2>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	3301      	adds	r3, #1
 800f644:	4a9b      	ldr	r2, [pc, #620]	; (800f8b4 <pass_route3+0x4e4>)
 800f646:	5cd3      	ldrb	r3, [r2, r3]
 800f648:	2b44      	cmp	r3, #68	; 0x44
 800f64a:	d112      	bne.n	800f672 <pass_route3+0x2a2>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	3302      	adds	r3, #2
 800f650:	4a98      	ldr	r2, [pc, #608]	; (800f8b4 <pass_route3+0x4e4>)
 800f652:	5cd3      	ldrb	r3, [r2, r3]
 800f654:	2b11      	cmp	r3, #17
 800f656:	d10c      	bne.n	800f672 <pass_route3+0x2a2>
			s_flag = 0;
 800f658:	2300      	movs	r3, #0
 800f65a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -9;							//a斜め右V90
 800f65c:	78bb      	ldrb	r3, [r7, #2]
 800f65e:	4a96      	ldr	r2, [pc, #600]	; (800f8b8 <pass_route3+0x4e8>)
 800f660:	21f7      	movs	r1, #247	; 0xf7
 800f662:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 800f664:	4b92      	ldr	r3, [pc, #584]	; (800f8b0 <pass_route3+0x4e0>)
 800f666:	2201      	movs	r2, #1
 800f668:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	3302      	adds	r3, #2
 800f66e:	607b      	str	r3, [r7, #4]
 800f670:	e1ba      	b.n	800f9e8 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x44){
 800f672:	4b8f      	ldr	r3, [pc, #572]	; (800f8b0 <pass_route3+0x4e0>)
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	2b01      	cmp	r3, #1
 800f678:	d11e      	bne.n	800f6b8 <pass_route3+0x2e8>
 800f67a:	4a8e      	ldr	r2, [pc, #568]	; (800f8b4 <pass_route3+0x4e4>)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	4413      	add	r3, r2
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	2b11      	cmp	r3, #17
 800f684:	d118      	bne.n	800f6b8 <pass_route3+0x2e8>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	3301      	adds	r3, #1
 800f68a:	4a8a      	ldr	r2, [pc, #552]	; (800f8b4 <pass_route3+0x4e4>)
 800f68c:	5cd3      	ldrb	r3, [r2, r3]
 800f68e:	2b11      	cmp	r3, #17
 800f690:	d112      	bne.n	800f6b8 <pass_route3+0x2e8>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	3302      	adds	r3, #2
 800f696:	4a87      	ldr	r2, [pc, #540]	; (800f8b4 <pass_route3+0x4e4>)
 800f698:	5cd3      	ldrb	r3, [r2, r3]
 800f69a:	2b44      	cmp	r3, #68	; 0x44
 800f69c:	d10c      	bne.n	800f6b8 <pass_route3+0x2e8>
			s_flag = 0;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	70fb      	strb	r3, [r7, #3]
			pass[p] = -10;							//a斜め左V90
 800f6a2:	78bb      	ldrb	r3, [r7, #2]
 800f6a4:	4a84      	ldr	r2, [pc, #528]	; (800f8b8 <pass_route3+0x4e8>)
 800f6a6:	21f6      	movs	r1, #246	; 0xf6
 800f6a8:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 800f6aa:	4b81      	ldr	r3, [pc, #516]	; (800f8b0 <pass_route3+0x4e0>)
 800f6ac:	2201      	movs	r2, #1
 800f6ae:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	3302      	adds	r3, #2
 800f6b4:	607b      	str	r3, [r7, #4]
 800f6b6:	e197      	b.n	800f9e8 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x11){
 800f6b8:	4a7e      	ldr	r2, [pc, #504]	; (800f8b4 <pass_route3+0x4e4>)
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	4413      	add	r3, r2
 800f6be:	781b      	ldrb	r3, [r3, #0]
 800f6c0:	2b77      	cmp	r3, #119	; 0x77
 800f6c2:	d124      	bne.n	800f70e <pass_route3+0x33e>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	3301      	adds	r3, #1
 800f6c8:	4a7a      	ldr	r2, [pc, #488]	; (800f8b4 <pass_route3+0x4e4>)
 800f6ca:	5cd3      	ldrb	r3, [r2, r3]
 800f6cc:	2b44      	cmp	r3, #68	; 0x44
 800f6ce:	d11e      	bne.n	800f70e <pass_route3+0x33e>
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	3302      	adds	r3, #2
 800f6d4:	4a77      	ldr	r2, [pc, #476]	; (800f8b4 <pass_route3+0x4e4>)
 800f6d6:	5cd3      	ldrb	r3, [r2, r3]
 800f6d8:	2b44      	cmp	r3, #68	; 0x44
 800f6da:	d118      	bne.n	800f70e <pass_route3+0x33e>
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	3303      	adds	r3, #3
 800f6e0:	4a74      	ldr	r2, [pc, #464]	; (800f8b4 <pass_route3+0x4e4>)
 800f6e2:	5cd3      	ldrb	r3, [r2, r3]
 800f6e4:	2b11      	cmp	r3, #17
 800f6e6:	d112      	bne.n	800f70e <pass_route3+0x33e>
			s_flag = 0;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135in
 800f6ec:	78bb      	ldrb	r3, [r7, #2]
 800f6ee:	4a72      	ldr	r2, [pc, #456]	; (800f8b8 <pass_route3+0x4e8>)
 800f6f0:	21f5      	movs	r1, #245	; 0xf5
 800f6f2:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 800f6f4:	4b6e      	ldr	r3, [pc, #440]	; (800f8b0 <pass_route3+0x4e0>)
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	701a      	strb	r2, [r3, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d102      	bne.n	800f706 <pass_route3+0x336>
				start_flag = 2;
 800f700:	4b6e      	ldr	r3, [pc, #440]	; (800f8bc <pass_route3+0x4ec>)
 800f702:	2202      	movs	r2, #2
 800f704:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	3303      	adds	r3, #3
 800f70a:	607b      	str	r3, [r7, #4]
 800f70c:	e16c      	b.n	800f9e8 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x77){
 800f70e:	4b68      	ldr	r3, [pc, #416]	; (800f8b0 <pass_route3+0x4e0>)
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	2b01      	cmp	r3, #1
 800f714:	d11e      	bne.n	800f754 <pass_route3+0x384>
 800f716:	4a67      	ldr	r2, [pc, #412]	; (800f8b4 <pass_route3+0x4e4>)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	4413      	add	r3, r2
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	2b44      	cmp	r3, #68	; 0x44
 800f720:	d118      	bne.n	800f754 <pass_route3+0x384>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	3301      	adds	r3, #1
 800f726:	4a63      	ldr	r2, [pc, #396]	; (800f8b4 <pass_route3+0x4e4>)
 800f728:	5cd3      	ldrb	r3, [r2, r3]
 800f72a:	2b44      	cmp	r3, #68	; 0x44
 800f72c:	d112      	bne.n	800f754 <pass_route3+0x384>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	3302      	adds	r3, #2
 800f732:	4a60      	ldr	r2, [pc, #384]	; (800f8b4 <pass_route3+0x4e4>)
 800f734:	5cd3      	ldrb	r3, [r2, r3]
 800f736:	2b77      	cmp	r3, #119	; 0x77
 800f738:	d10c      	bne.n	800f754 <pass_route3+0x384>
			s_flag = 0;
 800f73a:	2300      	movs	r3, #0
 800f73c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135out
 800f73e:	78bb      	ldrb	r3, [r7, #2]
 800f740:	4a5d      	ldr	r2, [pc, #372]	; (800f8b8 <pass_route3+0x4e8>)
 800f742:	21f5      	movs	r1, #245	; 0xf5
 800f744:	54d1      	strb	r1, [r2, r3]
			v_flag = 0;
 800f746:	4b5a      	ldr	r3, [pc, #360]	; (800f8b0 <pass_route3+0x4e0>)
 800f748:	2200      	movs	r2, #0
 800f74a:	701a      	strb	r2, [r3, #0]
			i = i + 3;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	3303      	adds	r3, #3
 800f750:	607b      	str	r3, [r7, #4]
 800f752:	e149      	b.n	800f9e8 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x44){
 800f754:	4a57      	ldr	r2, [pc, #348]	; (800f8b4 <pass_route3+0x4e4>)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	4413      	add	r3, r2
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	2b77      	cmp	r3, #119	; 0x77
 800f75e:	d11e      	bne.n	800f79e <pass_route3+0x3ce>
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	3301      	adds	r3, #1
 800f764:	4a53      	ldr	r2, [pc, #332]	; (800f8b4 <pass_route3+0x4e4>)
 800f766:	5cd3      	ldrb	r3, [r2, r3]
 800f768:	2b11      	cmp	r3, #17
 800f76a:	d118      	bne.n	800f79e <pass_route3+0x3ce>
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	3302      	adds	r3, #2
 800f770:	4a50      	ldr	r2, [pc, #320]	; (800f8b4 <pass_route3+0x4e4>)
 800f772:	5cd3      	ldrb	r3, [r2, r3]
 800f774:	2b11      	cmp	r3, #17
 800f776:	d112      	bne.n	800f79e <pass_route3+0x3ce>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	3303      	adds	r3, #3
 800f77c:	4a4d      	ldr	r2, [pc, #308]	; (800f8b4 <pass_route3+0x4e4>)
 800f77e:	5cd3      	ldrb	r3, [r2, r3]
 800f780:	2b44      	cmp	r3, #68	; 0x44
 800f782:	d10c      	bne.n	800f79e <pass_route3+0x3ce>
			s_flag = 0;
 800f784:	2300      	movs	r3, #0
 800f786:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135in
 800f788:	78bb      	ldrb	r3, [r7, #2]
 800f78a:	4a4b      	ldr	r2, [pc, #300]	; (800f8b8 <pass_route3+0x4e8>)
 800f78c:	21f4      	movs	r1, #244	; 0xf4
 800f78e:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 800f790:	4b47      	ldr	r3, [pc, #284]	; (800f8b0 <pass_route3+0x4e0>)
 800f792:	2201      	movs	r2, #1
 800f794:	701a      	strb	r2, [r3, #0]
			i = i + 3;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	3303      	adds	r3, #3
 800f79a:	607b      	str	r3, [r7, #4]
 800f79c:	e124      	b.n	800f9e8 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x77){
 800f79e:	4b44      	ldr	r3, [pc, #272]	; (800f8b0 <pass_route3+0x4e0>)
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d11e      	bne.n	800f7e4 <pass_route3+0x414>
 800f7a6:	4a43      	ldr	r2, [pc, #268]	; (800f8b4 <pass_route3+0x4e4>)
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	4413      	add	r3, r2
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	2b11      	cmp	r3, #17
 800f7b0:	d118      	bne.n	800f7e4 <pass_route3+0x414>
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	3301      	adds	r3, #1
 800f7b6:	4a3f      	ldr	r2, [pc, #252]	; (800f8b4 <pass_route3+0x4e4>)
 800f7b8:	5cd3      	ldrb	r3, [r2, r3]
 800f7ba:	2b11      	cmp	r3, #17
 800f7bc:	d112      	bne.n	800f7e4 <pass_route3+0x414>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	3302      	adds	r3, #2
 800f7c2:	4a3c      	ldr	r2, [pc, #240]	; (800f8b4 <pass_route3+0x4e4>)
 800f7c4:	5cd3      	ldrb	r3, [r2, r3]
 800f7c6:	2b77      	cmp	r3, #119	; 0x77
 800f7c8:	d10c      	bne.n	800f7e4 <pass_route3+0x414>
			s_flag = 0;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135out
 800f7ce:	78bb      	ldrb	r3, [r7, #2]
 800f7d0:	4a39      	ldr	r2, [pc, #228]	; (800f8b8 <pass_route3+0x4e8>)
 800f7d2:	21f4      	movs	r1, #244	; 0xf4
 800f7d4:	54d1      	strb	r1, [r2, r3]
			v_flag = 0;
 800f7d6:	4b36      	ldr	r3, [pc, #216]	; (800f8b0 <pass_route3+0x4e0>)
 800f7d8:	2200      	movs	r2, #0
 800f7da:	701a      	strb	r2, [r3, #0]
			i = i + 3;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	3303      	adds	r3, #3
 800f7e0:	607b      	str	r3, [r7, #4]
 800f7e2:	e101      	b.n	800f9e8 <pass_route3+0x618>
		}else if(route[i] == 0xff){
 800f7e4:	4a33      	ldr	r2, [pc, #204]	; (800f8b4 <pass_route3+0x4e4>)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	4413      	add	r3, r2
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	2bff      	cmp	r3, #255	; 0xff
 800f7ee:	d167      	bne.n	800f8c0 <pass_route3+0x4f0>
			if(v_flag == 1){
 800f7f0:	4b2f      	ldr	r3, [pc, #188]	; (800f8b0 <pass_route3+0x4e0>)
 800f7f2:	781b      	ldrb	r3, [r3, #0]
 800f7f4:	2b01      	cmp	r3, #1
 800f7f6:	d152      	bne.n	800f89e <pass_route3+0x4ce>
				if(pass[p-1] == -1 && pass[p-2] == -1){
 800f7f8:	78bb      	ldrb	r3, [r7, #2]
 800f7fa:	3b01      	subs	r3, #1
 800f7fc:	4a2e      	ldr	r2, [pc, #184]	; (800f8b8 <pass_route3+0x4e8>)
 800f7fe:	56d3      	ldrsb	r3, [r2, r3]
 800f800:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f804:	d111      	bne.n	800f82a <pass_route3+0x45a>
 800f806:	78bb      	ldrb	r3, [r7, #2]
 800f808:	3b02      	subs	r3, #2
 800f80a:	4a2b      	ldr	r2, [pc, #172]	; (800f8b8 <pass_route3+0x4e8>)
 800f80c:	56d3      	ldrsb	r3, [r2, r3]
 800f80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f812:	d10a      	bne.n	800f82a <pass_route3+0x45a>
					pass[p-2] = -15;
 800f814:	78bb      	ldrb	r3, [r7, #2]
 800f816:	3b02      	subs	r3, #2
 800f818:	4a27      	ldr	r2, [pc, #156]	; (800f8b8 <pass_route3+0x4e8>)
 800f81a:	21f1      	movs	r1, #241	; 0xf1
 800f81c:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 800f81e:	78bb      	ldrb	r3, [r7, #2]
 800f820:	3b01      	subs	r3, #1
 800f822:	4a25      	ldr	r2, [pc, #148]	; (800f8b8 <pass_route3+0x4e8>)
 800f824:	218e      	movs	r1, #142	; 0x8e
 800f826:	54d1      	strb	r1, [r2, r3]
 800f828:	e039      	b.n	800f89e <pass_route3+0x4ce>
				}else if(pass[p-1] == -2 && pass[p-2] == -2){
 800f82a:	78bb      	ldrb	r3, [r7, #2]
 800f82c:	3b01      	subs	r3, #1
 800f82e:	4a22      	ldr	r2, [pc, #136]	; (800f8b8 <pass_route3+0x4e8>)
 800f830:	56d3      	ldrsb	r3, [r2, r3]
 800f832:	f113 0f02 	cmn.w	r3, #2
 800f836:	d111      	bne.n	800f85c <pass_route3+0x48c>
 800f838:	78bb      	ldrb	r3, [r7, #2]
 800f83a:	3b02      	subs	r3, #2
 800f83c:	4a1e      	ldr	r2, [pc, #120]	; (800f8b8 <pass_route3+0x4e8>)
 800f83e:	56d3      	ldrsb	r3, [r2, r3]
 800f840:	f113 0f02 	cmn.w	r3, #2
 800f844:	d10a      	bne.n	800f85c <pass_route3+0x48c>
					pass[p-2] = -16;
 800f846:	78bb      	ldrb	r3, [r7, #2]
 800f848:	3b02      	subs	r3, #2
 800f84a:	4a1b      	ldr	r2, [pc, #108]	; (800f8b8 <pass_route3+0x4e8>)
 800f84c:	21f0      	movs	r1, #240	; 0xf0
 800f84e:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 800f850:	78bb      	ldrb	r3, [r7, #2]
 800f852:	3b01      	subs	r3, #1
 800f854:	4a18      	ldr	r2, [pc, #96]	; (800f8b8 <pass_route3+0x4e8>)
 800f856:	218e      	movs	r1, #142	; 0x8e
 800f858:	54d1      	strb	r1, [r2, r3]
 800f85a:	e020      	b.n	800f89e <pass_route3+0x4ce>
				}else if(pass[p-1] == -1){
 800f85c:	78bb      	ldrb	r3, [r7, #2]
 800f85e:	3b01      	subs	r3, #1
 800f860:	4a15      	ldr	r2, [pc, #84]	; (800f8b8 <pass_route3+0x4e8>)
 800f862:	56d3      	ldrsb	r3, [r2, r3]
 800f864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f868:	d109      	bne.n	800f87e <pass_route3+0x4ae>
					pass[p-1] = -13;
 800f86a:	78bb      	ldrb	r3, [r7, #2]
 800f86c:	3b01      	subs	r3, #1
 800f86e:	4a12      	ldr	r2, [pc, #72]	; (800f8b8 <pass_route3+0x4e8>)
 800f870:	21f3      	movs	r1, #243	; 0xf3
 800f872:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 800f874:	78bb      	ldrb	r3, [r7, #2]
 800f876:	4a10      	ldr	r2, [pc, #64]	; (800f8b8 <pass_route3+0x4e8>)
 800f878:	218e      	movs	r1, #142	; 0x8e
 800f87a:	54d1      	strb	r1, [r2, r3]
 800f87c:	e00f      	b.n	800f89e <pass_route3+0x4ce>
				}else if(pass[p-1] == -2){
 800f87e:	78bb      	ldrb	r3, [r7, #2]
 800f880:	3b01      	subs	r3, #1
 800f882:	4a0d      	ldr	r2, [pc, #52]	; (800f8b8 <pass_route3+0x4e8>)
 800f884:	56d3      	ldrsb	r3, [r2, r3]
 800f886:	f113 0f02 	cmn.w	r3, #2
 800f88a:	d108      	bne.n	800f89e <pass_route3+0x4ce>
					pass[p-1] = -14;
 800f88c:	78bb      	ldrb	r3, [r7, #2]
 800f88e:	3b01      	subs	r3, #1
 800f890:	4a09      	ldr	r2, [pc, #36]	; (800f8b8 <pass_route3+0x4e8>)
 800f892:	21f2      	movs	r1, #242	; 0xf2
 800f894:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 800f896:	78bb      	ldrb	r3, [r7, #2]
 800f898:	4a07      	ldr	r2, [pc, #28]	; (800f8b8 <pass_route3+0x4e8>)
 800f89a:	218e      	movs	r1, #142	; 0x8e
 800f89c:	54d1      	strb	r1, [r2, r3]
				}
			}
			pass[p] = -114;							//a終了用配列
 800f89e:	78bb      	ldrb	r3, [r7, #2]
 800f8a0:	4a05      	ldr	r2, [pc, #20]	; (800f8b8 <pass_route3+0x4e8>)
 800f8a2:	218e      	movs	r1, #142	; 0x8e
 800f8a4:	54d1      	strb	r1, [r2, r3]
			i++;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	607b      	str	r3, [r7, #4]
 800f8ac:	e09c      	b.n	800f9e8 <pass_route3+0x618>
 800f8ae:	bf00      	nop
 800f8b0:	20000af0 	.word	0x20000af0
 800f8b4:	20000c64 	.word	0x20000c64
 800f8b8:	20000350 	.word	0x20000350
 800f8bc:	200015d4 	.word	0x200015d4
		}else if(v_flag == 1 && route[i] == 0x44 && route[i+1] == 0x11){
 800f8c0:	4b51      	ldr	r3, [pc, #324]	; (800fa08 <pass_route3+0x638>)
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	2b01      	cmp	r3, #1
 800f8c6:	d118      	bne.n	800f8fa <pass_route3+0x52a>
 800f8c8:	4a50      	ldr	r2, [pc, #320]	; (800fa0c <pass_route3+0x63c>)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	4413      	add	r3, r2
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	2b44      	cmp	r3, #68	; 0x44
 800f8d2:	d112      	bne.n	800f8fa <pass_route3+0x52a>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	3301      	adds	r3, #1
 800f8d8:	4a4c      	ldr	r2, [pc, #304]	; (800fa0c <pass_route3+0x63c>)
 800f8da:	5cd3      	ldrb	r3, [r2, r3]
 800f8dc:	2b11      	cmp	r3, #17
 800f8de:	d10c      	bne.n	800f8fa <pass_route3+0x52a>
			s_flag = 0;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 800f8e4:	78bb      	ldrb	r3, [r7, #2]
 800f8e6:	4a4a      	ldr	r2, [pc, #296]	; (800fa10 <pass_route3+0x640>)
 800f8e8:	2140      	movs	r1, #64	; 0x40
 800f8ea:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 800f8ec:	4b46      	ldr	r3, [pc, #280]	; (800fa08 <pass_route3+0x638>)
 800f8ee:	2201      	movs	r2, #1
 800f8f0:	701a      	strb	r2, [r3, #0]
			i++;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	3301      	adds	r3, #1
 800f8f6:	607b      	str	r3, [r7, #4]
 800f8f8:	e076      	b.n	800f9e8 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x11 && route[i+1] == 0x44){
 800f8fa:	4b43      	ldr	r3, [pc, #268]	; (800fa08 <pass_route3+0x638>)
 800f8fc:	781b      	ldrb	r3, [r3, #0]
 800f8fe:	2b01      	cmp	r3, #1
 800f900:	d118      	bne.n	800f934 <pass_route3+0x564>
 800f902:	4a42      	ldr	r2, [pc, #264]	; (800fa0c <pass_route3+0x63c>)
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	4413      	add	r3, r2
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	2b11      	cmp	r3, #17
 800f90c:	d112      	bne.n	800f934 <pass_route3+0x564>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	3301      	adds	r3, #1
 800f912:	4a3e      	ldr	r2, [pc, #248]	; (800fa0c <pass_route3+0x63c>)
 800f914:	5cd3      	ldrb	r3, [r2, r3]
 800f916:	2b44      	cmp	r3, #68	; 0x44
 800f918:	d10c      	bne.n	800f934 <pass_route3+0x564>
			s_flag = 0;
 800f91a:	2300      	movs	r3, #0
 800f91c:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 800f91e:	78bb      	ldrb	r3, [r7, #2]
 800f920:	4a3b      	ldr	r2, [pc, #236]	; (800fa10 <pass_route3+0x640>)
 800f922:	2140      	movs	r1, #64	; 0x40
 800f924:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 800f926:	4b38      	ldr	r3, [pc, #224]	; (800fa08 <pass_route3+0x638>)
 800f928:	2201      	movs	r2, #1
 800f92a:	701a      	strb	r2, [r3, #0]
			i++;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	3301      	adds	r3, #1
 800f930:	607b      	str	r3, [r7, #4]
 800f932:	e059      	b.n	800f9e8 <pass_route3+0x618>
		}else if(route[i] == 0x44){
 800f934:	4a35      	ldr	r2, [pc, #212]	; (800fa0c <pass_route3+0x63c>)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4413      	add	r3, r2
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	2b44      	cmp	r3, #68	; 0x44
 800f93e:	d107      	bne.n	800f950 <pass_route3+0x580>
			pass[p] = -1;							//a右スラローム
 800f940:	78bb      	ldrb	r3, [r7, #2]
 800f942:	4a33      	ldr	r2, [pc, #204]	; (800fa10 <pass_route3+0x640>)
 800f944:	21ff      	movs	r1, #255	; 0xff
 800f946:	54d1      	strb	r1, [r2, r3]
			i++;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	3301      	adds	r3, #1
 800f94c:	607b      	str	r3, [r7, #4]
 800f94e:	e04b      	b.n	800f9e8 <pass_route3+0x618>
		}else if(route[i] == 0x11){
 800f950:	4a2e      	ldr	r2, [pc, #184]	; (800fa0c <pass_route3+0x63c>)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	4413      	add	r3, r2
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	2b11      	cmp	r3, #17
 800f95a:	d107      	bne.n	800f96c <pass_route3+0x59c>
			pass[p] = -2;							//a左スラローム
 800f95c:	78bb      	ldrb	r3, [r7, #2]
 800f95e:	4a2c      	ldr	r2, [pc, #176]	; (800fa10 <pass_route3+0x640>)
 800f960:	21fe      	movs	r1, #254	; 0xfe
 800f962:	54d1      	strb	r1, [r2, r3]
			i++;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	3301      	adds	r3, #1
 800f968:	607b      	str	r3, [r7, #4]
 800f96a:	e03d      	b.n	800f9e8 <pass_route3+0x618>
		}else if(route[i] == 0x77){
 800f96c:	4a27      	ldr	r2, [pc, #156]	; (800fa0c <pass_route3+0x63c>)
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	4413      	add	r3, r2
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	2b77      	cmp	r3, #119	; 0x77
 800f976:	d137      	bne.n	800f9e8 <pass_route3+0x618>
			if(s_flag){
 800f978:	78fb      	ldrb	r3, [r7, #3]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d012      	beq.n	800f9a4 <pass_route3+0x5d4>
				pass[p-1]++;						//aスラローム前半直線追加
 800f97e:	78bb      	ldrb	r3, [r7, #2]
 800f980:	3b01      	subs	r3, #1
 800f982:	4a23      	ldr	r2, [pc, #140]	; (800fa10 <pass_route3+0x640>)
 800f984:	56d2      	ldrsb	r2, [r2, r3]
 800f986:	b2d2      	uxtb	r2, r2
 800f988:	3201      	adds	r2, #1
 800f98a:	b2d2      	uxtb	r2, r2
 800f98c:	b251      	sxtb	r1, r2
 800f98e:	4a20      	ldr	r2, [pc, #128]	; (800fa10 <pass_route3+0x640>)
 800f990:	54d1      	strb	r1, [r2, r3]
				p--;
 800f992:	78bb      	ldrb	r3, [r7, #2]
 800f994:	3b01      	subs	r3, #1
 800f996:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 800f998:	2300      	movs	r3, #0
 800f99a:	70fb      	strb	r3, [r7, #3]
				i++;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	3301      	adds	r3, #1
 800f9a0:	607b      	str	r3, [r7, #4]
 800f9a2:	e021      	b.n	800f9e8 <pass_route3+0x618>
			}else{
				s++;
 800f9a4:	787b      	ldrb	r3, [r7, #1]
 800f9a6:	3301      	adds	r3, #1
 800f9a8:	707b      	strb	r3, [r7, #1]
				pass[p] = s;						//aもし半直線1つだけの場合whileには入らない
 800f9aa:	78bb      	ldrb	r3, [r7, #2]
 800f9ac:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800f9b0:	4a17      	ldr	r2, [pc, #92]	; (800fa10 <pass_route3+0x640>)
 800f9b2:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 800f9b4:	e00c      	b.n	800f9d0 <pass_route3+0x600>
					s_flag = 1;
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;					//a半直線2つ以上続く場合、最後半直線は大回り用に残す
 800f9ba:	78bb      	ldrb	r3, [r7, #2]
 800f9bc:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800f9c0:	4a13      	ldr	r2, [pc, #76]	; (800fa10 <pass_route3+0x640>)
 800f9c2:	54d1      	strb	r1, [r2, r3]
					i++;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	607b      	str	r3, [r7, #4]
					s++;
 800f9ca:	787b      	ldrb	r3, [r7, #1]
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	4a0d      	ldr	r2, [pc, #52]	; (800fa0c <pass_route3+0x63c>)
 800f9d6:	5cd3      	ldrb	r3, [r2, r3]
 800f9d8:	2b77      	cmp	r3, #119	; 0x77
 800f9da:	d0ec      	beq.n	800f9b6 <pass_route3+0x5e6>
				}
				if(!s_flag){
 800f9dc:	78fb      	ldrb	r3, [r7, #3]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d102      	bne.n	800f9e8 <pass_route3+0x618>
					i++;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 800f9e8:	78bb      	ldrb	r3, [r7, #2]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	3b01      	subs	r3, #1
 800f9f2:	4a06      	ldr	r2, [pc, #24]	; (800fa0c <pass_route3+0x63c>)
 800f9f4:	5cd3      	ldrb	r3, [r2, r3]
 800f9f6:	2bff      	cmp	r3, #255	; 0xff
 800f9f8:	f47f ad07 	bne.w	800f40a <pass_route3+0x3a>
	}
}
 800f9fc:	bf00      	nop
 800f9fe:	370c      	adds	r7, #12
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr
 800fa08:	20000af0 	.word	0x20000af0
 800fa0c:	20000c64 	.word	0x20000c64
 800fa10:	20000350 	.word	0x20000350

0800fa14 <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b082      	sub	sp, #8
 800fa18:	af00      	add	r7, sp, #0
	printf("eprom func start \n");
 800fa1a:	4818      	ldr	r0, [pc, #96]	; (800fa7c <store_map_in_eeprom+0x68>)
 800fa1c:	f000 ff28 	bl	8010870 <puts>
	eeprom_enable_write();
 800fa20:	f7fb f876 	bl	800ab10 <eeprom_enable_write>
	printf("eprom enable_write fin \n");
 800fa24:	4816      	ldr	r0, [pc, #88]	; (800fa80 <store_map_in_eeprom+0x6c>)
 800fa26:	f000 ff23 	bl	8010870 <puts>
	int i;
	for(i = 0; i < 16; i++){
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	607b      	str	r3, [r7, #4]
 800fa2e:	e01b      	b.n	800fa68 <store_map_in_eeprom+0x54>
		int j;
		for(j = 0; j < 16; j++){
 800fa30:	2300      	movs	r3, #0
 800fa32:	603b      	str	r3, [r7, #0]
 800fa34:	e012      	b.n	800fa5c <store_map_in_eeprom+0x48>
			eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	011a      	lsls	r2, r3, #4
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	4413      	add	r3, r2
 800fa3e:	4618      	mov	r0, r3
 800fa40:	4a10      	ldr	r2, [pc, #64]	; (800fa84 <store_map_in_eeprom+0x70>)
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	011b      	lsls	r3, r3, #4
 800fa46:	441a      	add	r2, r3
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	4413      	add	r3, r2
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	4619      	mov	r1, r3
 800fa52:	f7fb f888 	bl	800ab66 <eeprom_write_halfword>
		for(j = 0; j < 16; j++){
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	3301      	adds	r3, #1
 800fa5a:	603b      	str	r3, [r7, #0]
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	2b0f      	cmp	r3, #15
 800fa60:	dde9      	ble.n	800fa36 <store_map_in_eeprom+0x22>
	for(i = 0; i < 16; i++){
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	3301      	adds	r3, #1
 800fa66:	607b      	str	r3, [r7, #4]
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2b0f      	cmp	r3, #15
 800fa6c:	dde0      	ble.n	800fa30 <store_map_in_eeprom+0x1c>
		}
	}
	eeprom_disable_write();
 800fa6e:	f7fb f873 	bl	800ab58 <eeprom_disable_write>
}
 800fa72:	bf00      	nop
 800fa74:	3708      	adds	r7, #8
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	08011f08 	.word	0x08011f08
 800fa80:	08011f1c 	.word	0x08011f1c
 800fa84:	200001ac 	.word	0x200001ac

0800fa88 <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 16; i++){
 800fa8e:	2300      	movs	r3, #0
 800fa90:	607b      	str	r3, [r7, #4]
 800fa92:	e01c      	b.n	800face <load_map_from_eeprom+0x46>
		int j;
		for(j = 0; j < 16; j++){
 800fa94:	2300      	movs	r3, #0
 800fa96:	603b      	str	r3, [r7, #0]
 800fa98:	e013      	b.n	800fac2 <load_map_from_eeprom+0x3a>
			map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	011a      	lsls	r2, r3, #4
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	4413      	add	r3, r2
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7fb f87c 	bl	800aba0 <eeprom_read_halfword>
 800faa8:	4603      	mov	r3, r0
 800faaa:	b2d9      	uxtb	r1, r3
 800faac:	4a0b      	ldr	r2, [pc, #44]	; (800fadc <load_map_from_eeprom+0x54>)
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	011b      	lsls	r3, r3, #4
 800fab2:	441a      	add	r2, r3
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	4413      	add	r3, r2
 800fab8:	460a      	mov	r2, r1
 800faba:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 16; j++){
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	3301      	adds	r3, #1
 800fac0:	603b      	str	r3, [r7, #0]
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	2b0f      	cmp	r3, #15
 800fac6:	dde8      	ble.n	800fa9a <load_map_from_eeprom+0x12>
	for(i = 0; i < 16; i++){
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	3301      	adds	r3, #1
 800facc:	607b      	str	r3, [r7, #4]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2b0f      	cmp	r3, #15
 800fad2:	dddf      	ble.n	800fa94 <load_map_from_eeprom+0xc>
		}
	}
}
 800fad4:	bf00      	nop
 800fad6:	3708      	adds	r7, #8
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}
 800fadc:	200001ac 	.word	0x200001ac

0800fae0 <sensor_init>:

#include "global.h"


void sensor_init(void){
 800fae0:	b480      	push	{r7}
 800fae2:	af00      	add	r7, sp, #0
	tp = 0;
 800fae4:	4b0e      	ldr	r3, [pc, #56]	; (800fb20 <sensor_init+0x40>)
 800fae6:	2200      	movs	r2, #0
 800fae8:	701a      	strb	r2, [r3, #0]
	ad_l = ad_r = ad_fr = ad_fl = 0;
 800faea:	4b0e      	ldr	r3, [pc, #56]	; (800fb24 <sensor_init+0x44>)
 800faec:	2200      	movs	r2, #0
 800faee:	601a      	str	r2, [r3, #0]
 800faf0:	4b0c      	ldr	r3, [pc, #48]	; (800fb24 <sensor_init+0x44>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	4a0c      	ldr	r2, [pc, #48]	; (800fb28 <sensor_init+0x48>)
 800faf6:	6013      	str	r3, [r2, #0]
 800faf8:	4b0b      	ldr	r3, [pc, #44]	; (800fb28 <sensor_init+0x48>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	4a0b      	ldr	r2, [pc, #44]	; (800fb2c <sensor_init+0x4c>)
 800fafe:	6013      	str	r3, [r2, #0]
 800fb00:	4b0a      	ldr	r3, [pc, #40]	; (800fb2c <sensor_init+0x4c>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4a0a      	ldr	r2, [pc, #40]	; (800fb30 <sensor_init+0x50>)
 800fb06:	6013      	str	r3, [r2, #0]
	base_l = base_r = 0;
 800fb08:	4b0a      	ldr	r3, [pc, #40]	; (800fb34 <sensor_init+0x54>)
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	801a      	strh	r2, [r3, #0]
 800fb0e:	4b09      	ldr	r3, [pc, #36]	; (800fb34 <sensor_init+0x54>)
 800fb10:	881a      	ldrh	r2, [r3, #0]
 800fb12:	4b09      	ldr	r3, [pc, #36]	; (800fb38 <sensor_init+0x58>)
 800fb14:	801a      	strh	r2, [r3, #0]
}
 800fb16:	bf00      	nop
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr
 800fb20:	200012ac 	.word	0x200012ac
 800fb24:	20000d64 	.word	0x20000d64
 800fb28:	20000c10 	.word	0x20000c10
 800fb2c:	20000f70 	.word	0x20000f70
 800fb30:	20000b04 	.word	0x20000b04
 800fb34:	200002c0 	.word	0x200002c0
 800fb38:	2000034c 	.word	0x2000034c

0800fb3c <get_base>:


uint8_t get_base(){
 800fb3c:	b480      	push	{r7}
 800fb3e:	b083      	sub	sp, #12
 800fb40:	af00      	add	r7, sp, #0
	uint8_t res = 1;									//for return
 800fb42:	2301      	movs	r3, #1
 800fb44:	71fb      	strb	r3, [r7, #7]

	base_l = ad_l;										//sensor value base L
 800fb46:	4b08      	ldr	r3, [pc, #32]	; (800fb68 <get_base+0x2c>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	b29a      	uxth	r2, r3
 800fb4c:	4b07      	ldr	r3, [pc, #28]	; (800fb6c <get_base+0x30>)
 800fb4e:	801a      	strh	r2, [r3, #0]
	base_r = ad_r;										//sensor value base R
 800fb50:	4b07      	ldr	r3, [pc, #28]	; (800fb70 <get_base+0x34>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	b29a      	uxth	r2, r3
 800fb56:	4b07      	ldr	r3, [pc, #28]	; (800fb74 <get_base+0x38>)
 800fb58:	801a      	strh	r2, [r3, #0]

	return res;											//
 800fb5a:	79fb      	ldrb	r3, [r7, #7]
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	370c      	adds	r7, #12
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr
 800fb68:	20000b04 	.word	0x20000b04
 800fb6c:	2000034c 	.word	0x2000034c
 800fb70:	20000f70 	.word	0x20000f70
 800fb74:	200002c0 	.word	0x200002c0

0800fb78 <get_wall_info>:


void get_wall_info(){
 800fb78:	b480      	push	{r7}
 800fb7a:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 800fb7c:	4b16      	ldr	r3, [pc, #88]	; (800fbd8 <get_wall_info+0x60>)
 800fb7e:	2200      	movs	r2, #0
 800fb80:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 800fb82:	4b16      	ldr	r3, [pc, #88]	; (800fbdc <get_wall_info+0x64>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	2b5a      	cmp	r3, #90	; 0x5a
 800fb88:	d803      	bhi.n	800fb92 <get_wall_info+0x1a>
 800fb8a:	4b15      	ldr	r3, [pc, #84]	; (800fbe0 <get_wall_info+0x68>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	2bc8      	cmp	r3, #200	; 0xc8
 800fb90:	d906      	bls.n	800fba0 <get_wall_info+0x28>
		wall_info |= 0x88;								//forward check
 800fb92:	4b11      	ldr	r3, [pc, #68]	; (800fbd8 <get_wall_info+0x60>)
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	f063 0377 	orn	r3, r3, #119	; 0x77
 800fb9a:	b2da      	uxtb	r2, r3
 800fb9c:	4b0e      	ldr	r3, [pc, #56]	; (800fbd8 <get_wall_info+0x60>)
 800fb9e:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 800fba0:	4b10      	ldr	r3, [pc, #64]	; (800fbe4 <get_wall_info+0x6c>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	2b78      	cmp	r3, #120	; 0x78
 800fba6:	d906      	bls.n	800fbb6 <get_wall_info+0x3e>
		wall_info |= 0x44;								//right check
 800fba8:	4b0b      	ldr	r3, [pc, #44]	; (800fbd8 <get_wall_info+0x60>)
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800fbb0:	b2da      	uxtb	r2, r3
 800fbb2:	4b09      	ldr	r3, [pc, #36]	; (800fbd8 <get_wall_info+0x60>)
 800fbb4:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 800fbb6:	4b0c      	ldr	r3, [pc, #48]	; (800fbe8 <get_wall_info+0x70>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	2b8c      	cmp	r3, #140	; 0x8c
 800fbbc:	d906      	bls.n	800fbcc <get_wall_info+0x54>
		wall_info |= 0x11;								//light check
 800fbbe:	4b06      	ldr	r3, [pc, #24]	; (800fbd8 <get_wall_info+0x60>)
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	f043 0311 	orr.w	r3, r3, #17
 800fbc6:	b2da      	uxtb	r2, r3
 800fbc8:	4b03      	ldr	r3, [pc, #12]	; (800fbd8 <get_wall_info+0x60>)
 800fbca:	701a      	strb	r2, [r3, #0]
	}
}
 800fbcc:	bf00      	nop
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd4:	4770      	bx	lr
 800fbd6:	bf00      	nop
 800fbd8:	200002c8 	.word	0x200002c8
 800fbdc:	20000c10 	.word	0x20000c10
 800fbe0:	20000d64 	.word	0x20000d64
 800fbe4:	20000f70 	.word	0x20000f70
 800fbe8:	20000b04 	.word	0x20000b04

0800fbec <led_write>:
//led_write
//aモード選択用LEDのON-OFF
//a引数：led1(0=>OFF, 1=>ON), led2(0=>OFF, 1=>ON), led3(0=>OFF, 1=>ON)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write(uint8_t led1, uint8_t led2, uint8_t led3){
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	71fb      	strb	r3, [r7, #7]
 800fbf6:	460b      	mov	r3, r1
 800fbf8:	71bb      	strb	r3, [r7, #6]
 800fbfa:	4613      	mov	r3, r2
 800fbfc:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800fbfe:	79fb      	ldrb	r3, [r7, #7]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d005      	beq.n	800fc10 <led_write+0x24>
 800fc04:	2201      	movs	r2, #1
 800fc06:	2110      	movs	r1, #16
 800fc08:	4814      	ldr	r0, [pc, #80]	; (800fc5c <led_write+0x70>)
 800fc0a:	f7f2 fb7b 	bl	8002304 <HAL_GPIO_WritePin>
 800fc0e:	e004      	b.n	800fc1a <led_write+0x2e>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800fc10:	2200      	movs	r2, #0
 800fc12:	2110      	movs	r1, #16
 800fc14:	4811      	ldr	r0, [pc, #68]	; (800fc5c <led_write+0x70>)
 800fc16:	f7f2 fb75 	bl	8002304 <HAL_GPIO_WritePin>

	if(led2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800fc1a:	79bb      	ldrb	r3, [r7, #6]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d005      	beq.n	800fc2c <led_write+0x40>
 800fc20:	2201      	movs	r2, #1
 800fc22:	2140      	movs	r1, #64	; 0x40
 800fc24:	480d      	ldr	r0, [pc, #52]	; (800fc5c <led_write+0x70>)
 800fc26:	f7f2 fb6d 	bl	8002304 <HAL_GPIO_WritePin>
 800fc2a:	e004      	b.n	800fc36 <led_write+0x4a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	2140      	movs	r1, #64	; 0x40
 800fc30:	480a      	ldr	r0, [pc, #40]	; (800fc5c <led_write+0x70>)
 800fc32:	f7f2 fb67 	bl	8002304 <HAL_GPIO_WritePin>

	if(led3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800fc36:	797b      	ldrb	r3, [r7, #5]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d005      	beq.n	800fc48 <led_write+0x5c>
 800fc3c:	2201      	movs	r2, #1
 800fc3e:	2180      	movs	r1, #128	; 0x80
 800fc40:	4806      	ldr	r0, [pc, #24]	; (800fc5c <led_write+0x70>)
 800fc42:	f7f2 fb5f 	bl	8002304 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 800fc46:	e004      	b.n	800fc52 <led_write+0x66>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800fc48:	2200      	movs	r2, #0
 800fc4a:	2180      	movs	r1, #128	; 0x80
 800fc4c:	4803      	ldr	r0, [pc, #12]	; (800fc5c <led_write+0x70>)
 800fc4e:	f7f2 fb59 	bl	8002304 <HAL_GPIO_WritePin>
}
 800fc52:	bf00      	nop
 800fc54:	3708      	adds	r7, #8
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	40020000 	.word	0x40020000

0800fc60 <full_led_write>:
//full_led_write
//aフルカラーLEDの色選択
//a引数：fulled(0=>OFF, 1=>a赤, 2=>緑, 3=>青, 4=>青緑, 5=>紫, 6=>黄, 7=>白)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void full_led_write(uint8_t fulled){
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b082      	sub	sp, #8
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	4603      	mov	r3, r0
 800fc68:	71fb      	strb	r3, [r7, #7]
	if(fulled == 0){
 800fc6a:	79fb      	ldrb	r3, [r7, #7]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d112      	bne.n	800fc96 <full_led_write+0x36>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800fc70:	2201      	movs	r2, #1
 800fc72:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fc76:	4856      	ldr	r0, [pc, #344]	; (800fdd0 <full_led_write+0x170>)
 800fc78:	f7f2 fb44 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800fc7c:	2201      	movs	r2, #1
 800fc7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fc82:	4853      	ldr	r0, [pc, #332]	; (800fdd0 <full_led_write+0x170>)
 800fc84:	f7f2 fb3e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800fc88:	2201      	movs	r2, #1
 800fc8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fc8e:	4851      	ldr	r0, [pc, #324]	; (800fdd4 <full_led_write+0x174>)
 800fc90:	f7f2 fb38 	bl	8002304 <HAL_GPIO_WritePin>
	else if(fulled == 7){
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 800fc94:	e098      	b.n	800fdc8 <full_led_write+0x168>
	else if(fulled == 1){
 800fc96:	79fb      	ldrb	r3, [r7, #7]
 800fc98:	2b01      	cmp	r3, #1
 800fc9a:	d112      	bne.n	800fcc2 <full_led_write+0x62>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800fc9c:	2201      	movs	r2, #1
 800fc9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fca2:	484b      	ldr	r0, [pc, #300]	; (800fdd0 <full_led_write+0x170>)
 800fca4:	f7f2 fb2e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800fca8:	2201      	movs	r2, #1
 800fcaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fcae:	4848      	ldr	r0, [pc, #288]	; (800fdd0 <full_led_write+0x170>)
 800fcb0:	f7f2 fb28 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fcba:	4846      	ldr	r0, [pc, #280]	; (800fdd4 <full_led_write+0x174>)
 800fcbc:	f7f2 fb22 	bl	8002304 <HAL_GPIO_WritePin>
}
 800fcc0:	e082      	b.n	800fdc8 <full_led_write+0x168>
	else if(fulled == 2){
 800fcc2:	79fb      	ldrb	r3, [r7, #7]
 800fcc4:	2b02      	cmp	r3, #2
 800fcc6:	d112      	bne.n	800fcee <full_led_write+0x8e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800fcc8:	2201      	movs	r2, #1
 800fcca:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fcce:	4840      	ldr	r0, [pc, #256]	; (800fdd0 <full_led_write+0x170>)
 800fcd0:	f7f2 fb18 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fcda:	483d      	ldr	r0, [pc, #244]	; (800fdd0 <full_led_write+0x170>)
 800fcdc:	f7f2 fb12 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800fce0:	2201      	movs	r2, #1
 800fce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fce6:	483b      	ldr	r0, [pc, #236]	; (800fdd4 <full_led_write+0x174>)
 800fce8:	f7f2 fb0c 	bl	8002304 <HAL_GPIO_WritePin>
}
 800fcec:	e06c      	b.n	800fdc8 <full_led_write+0x168>
	else if(fulled == 3){
 800fcee:	79fb      	ldrb	r3, [r7, #7]
 800fcf0:	2b03      	cmp	r3, #3
 800fcf2:	d112      	bne.n	800fd1a <full_led_write+0xba>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fcfa:	4835      	ldr	r0, [pc, #212]	; (800fdd0 <full_led_write+0x170>)
 800fcfc:	f7f2 fb02 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800fd00:	2201      	movs	r2, #1
 800fd02:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fd06:	4832      	ldr	r0, [pc, #200]	; (800fdd0 <full_led_write+0x170>)
 800fd08:	f7f2 fafc 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800fd0c:	2201      	movs	r2, #1
 800fd0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fd12:	4830      	ldr	r0, [pc, #192]	; (800fdd4 <full_led_write+0x174>)
 800fd14:	f7f2 faf6 	bl	8002304 <HAL_GPIO_WritePin>
}
 800fd18:	e056      	b.n	800fdc8 <full_led_write+0x168>
	else if(fulled == 4){
 800fd1a:	79fb      	ldrb	r3, [r7, #7]
 800fd1c:	2b04      	cmp	r3, #4
 800fd1e:	d112      	bne.n	800fd46 <full_led_write+0xe6>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800fd20:	2200      	movs	r2, #0
 800fd22:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fd26:	482a      	ldr	r0, [pc, #168]	; (800fdd0 <full_led_write+0x170>)
 800fd28:	f7f2 faec 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fd32:	4827      	ldr	r0, [pc, #156]	; (800fdd0 <full_led_write+0x170>)
 800fd34:	f7f2 fae6 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800fd38:	2201      	movs	r2, #1
 800fd3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fd3e:	4825      	ldr	r0, [pc, #148]	; (800fdd4 <full_led_write+0x174>)
 800fd40:	f7f2 fae0 	bl	8002304 <HAL_GPIO_WritePin>
}
 800fd44:	e040      	b.n	800fdc8 <full_led_write+0x168>
	else if(fulled == 5){
 800fd46:	79fb      	ldrb	r3, [r7, #7]
 800fd48:	2b05      	cmp	r3, #5
 800fd4a:	d112      	bne.n	800fd72 <full_led_write+0x112>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fd52:	481f      	ldr	r0, [pc, #124]	; (800fdd0 <full_led_write+0x170>)
 800fd54:	f7f2 fad6 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800fd58:	2201      	movs	r2, #1
 800fd5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fd5e:	481c      	ldr	r0, [pc, #112]	; (800fdd0 <full_led_write+0x170>)
 800fd60:	f7f2 fad0 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800fd64:	2200      	movs	r2, #0
 800fd66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fd6a:	481a      	ldr	r0, [pc, #104]	; (800fdd4 <full_led_write+0x174>)
 800fd6c:	f7f2 faca 	bl	8002304 <HAL_GPIO_WritePin>
}
 800fd70:	e02a      	b.n	800fdc8 <full_led_write+0x168>
	else if(fulled == 6){
 800fd72:	79fb      	ldrb	r3, [r7, #7]
 800fd74:	2b06      	cmp	r3, #6
 800fd76:	d112      	bne.n	800fd9e <full_led_write+0x13e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800fd78:	2201      	movs	r2, #1
 800fd7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fd7e:	4814      	ldr	r0, [pc, #80]	; (800fdd0 <full_led_write+0x170>)
 800fd80:	f7f2 fac0 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800fd84:	2200      	movs	r2, #0
 800fd86:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fd8a:	4811      	ldr	r0, [pc, #68]	; (800fdd0 <full_led_write+0x170>)
 800fd8c:	f7f2 faba 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800fd90:	2200      	movs	r2, #0
 800fd92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fd96:	480f      	ldr	r0, [pc, #60]	; (800fdd4 <full_led_write+0x174>)
 800fd98:	f7f2 fab4 	bl	8002304 <HAL_GPIO_WritePin>
}
 800fd9c:	e014      	b.n	800fdc8 <full_led_write+0x168>
	else if(fulled == 7){
 800fd9e:	79fb      	ldrb	r3, [r7, #7]
 800fda0:	2b07      	cmp	r3, #7
 800fda2:	d111      	bne.n	800fdc8 <full_led_write+0x168>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800fda4:	2200      	movs	r2, #0
 800fda6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fdaa:	4809      	ldr	r0, [pc, #36]	; (800fdd0 <full_led_write+0x170>)
 800fdac:	f7f2 faaa 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fdb6:	4806      	ldr	r0, [pc, #24]	; (800fdd0 <full_led_write+0x170>)
 800fdb8:	f7f2 faa4 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fdc2:	4804      	ldr	r0, [pc, #16]	; (800fdd4 <full_led_write+0x174>)
 800fdc4:	f7f2 fa9e 	bl	8002304 <HAL_GPIO_WritePin>
}
 800fdc8:	bf00      	nop
 800fdca:	3708      	adds	r7, #8
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}
 800fdd0:	40020400 	.word	0x40020400
 800fdd4:	40020800 	.word	0x40020800

0800fdd8 <sensor_test>:
//sensor_test
//a壁センサーとジャイロセンサーの値確認
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_test(){
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b08c      	sub	sp, #48	; 0x30
 800fddc:	af02      	add	r7, sp, #8

	int mode = 0;
 800fdde:	2300      	movs	r3, #0
 800fde0:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Mode : %d\n", mode);
 800fde2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fde4:	4881      	ldr	r0, [pc, #516]	; (800ffec <sensor_test+0x214>)
 800fde6:	f000 fccf 	bl	8010788 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800fdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdec:	b2db      	uxtb	r3, r3
 800fdee:	f003 0301 	and.w	r3, r3, #1
 800fdf2:	b2d8      	uxtb	r0, r3
 800fdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf6:	b2db      	uxtb	r3, r3
 800fdf8:	f003 0302 	and.w	r3, r3, #2
 800fdfc:	b2d9      	uxtb	r1, r3
 800fdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe00:	b2db      	uxtb	r3, r3
 800fe02:	f003 0304 	and.w	r3, r3, #4
 800fe06:	b2db      	uxtb	r3, r3
 800fe08:	461a      	mov	r2, r3
 800fe0a:	f7ff feef 	bl	800fbec <led_write>
		  if(dist_r >= 20){
 800fe0e:	4b78      	ldr	r3, [pc, #480]	; (800fff0 <sensor_test+0x218>)
 800fe10:	edd3 7a00 	vldr	s15, [r3]
 800fe14:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800fe18:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fe1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe20:	db0f      	blt.n	800fe42 <sensor_test+0x6a>
			  mode++;
 800fe22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe24:	3301      	adds	r3, #1
 800fe26:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 800fe28:	4b71      	ldr	r3, [pc, #452]	; (800fff0 <sensor_test+0x218>)
 800fe2a:	f04f 0200 	mov.w	r2, #0
 800fe2e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800fe30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe32:	2b07      	cmp	r3, #7
 800fe34:	dd01      	ble.n	800fe3a <sensor_test+0x62>
				  mode = 0;
 800fe36:	2300      	movs	r3, #0
 800fe38:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 800fe3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe3c:	486b      	ldr	r0, [pc, #428]	; (800ffec <sensor_test+0x214>)
 800fe3e:	f000 fca3 	bl	8010788 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800fe42:	4b6b      	ldr	r3, [pc, #428]	; (800fff0 <sensor_test+0x218>)
 800fe44:	edd3 7a00 	vldr	s15, [r3]
 800fe48:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800fe4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fe50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe54:	d80f      	bhi.n	800fe76 <sensor_test+0x9e>
			  mode--;
 800fe56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe58:	3b01      	subs	r3, #1
 800fe5a:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 800fe5c:	4b64      	ldr	r3, [pc, #400]	; (800fff0 <sensor_test+0x218>)
 800fe5e:	f04f 0200 	mov.w	r2, #0
 800fe62:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800fe64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	da01      	bge.n	800fe6e <sensor_test+0x96>
				  mode = 7;
 800fe6a:	2307      	movs	r3, #7
 800fe6c:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 800fe6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe70:	485e      	ldr	r0, [pc, #376]	; (800ffec <sensor_test+0x214>)
 800fe72:	f000 fc89 	bl	8010788 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800fe76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fe7a:	485e      	ldr	r0, [pc, #376]	; (800fff4 <sensor_test+0x21c>)
 800fe7c:	f7f2 fa2a 	bl	80022d4 <HAL_GPIO_ReadPin>
 800fe80:	4603      	mov	r3, r0
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d1b1      	bne.n	800fdea <sensor_test+0x12>
			  HAL_Delay(50);
 800fe86:	2032      	movs	r0, #50	; 0x32
 800fe88:	f7f1 f8c8 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800fe8c:	bf00      	nop
 800fe8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fe92:	4858      	ldr	r0, [pc, #352]	; (800fff4 <sensor_test+0x21c>)
 800fe94:	f7f2 fa1e 	bl	80022d4 <HAL_GPIO_ReadPin>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d0f7      	beq.n	800fe8e <sensor_test+0xb6>

			  drive_ready();
 800fe9e:	f7f4 fee9 	bl	8004c74 <drive_ready>

			  switch(mode){
 800fea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea4:	2b07      	cmp	r3, #7
 800fea6:	d8a0      	bhi.n	800fdea <sensor_test+0x12>
 800fea8:	a201      	add	r2, pc, #4	; (adr r2, 800feb0 <sensor_test+0xd8>)
 800feaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feae:	bf00      	nop
 800feb0:	0800fed1 	.word	0x0800fed1
 800feb4:	0800fed7 	.word	0x0800fed7
 800feb8:	0800ff29 	.word	0x0800ff29
 800febc:	0800fdeb 	.word	0x0800fdeb
 800fec0:	0800fdeb 	.word	0x0800fdeb
 800fec4:	0800fdeb 	.word	0x0800fdeb
 800fec8:	0800fdeb 	.word	0x0800fdeb
 800fecc:	0800fdeb 	.word	0x0800fdeb
				case 0:
					get_base();
 800fed0:	f7ff fe34 	bl	800fb3c <get_base>
					break;
 800fed4:	e089      	b.n	800ffea <sensor_test+0x212>
				case 1:
			  		  //----Wall sensor check----
			  		  printf("Wall Sensor Check.\n");
 800fed6:	4848      	ldr	r0, [pc, #288]	; (800fff8 <sensor_test+0x220>)
 800fed8:	f000 fcca 	bl	8010870 <puts>
			  		  while(1){
			  			  get_wall_info();
 800fedc:	f7ff fe4c 	bl	800fb78 <get_wall_info>
			  			  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 800fee0:	4b46      	ldr	r3, [pc, #280]	; (800fffc <sensor_test+0x224>)
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	f003 0311 	and.w	r3, r3, #17
 800fee8:	b2d8      	uxtb	r0, r3
 800feea:	4b44      	ldr	r3, [pc, #272]	; (800fffc <sensor_test+0x224>)
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800fef2:	b2d9      	uxtb	r1, r3
 800fef4:	4b41      	ldr	r3, [pc, #260]	; (800fffc <sensor_test+0x224>)
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800fefc:	b2db      	uxtb	r3, r3
 800fefe:	461a      	mov	r2, r3
 800ff00:	f7ff fe74 	bl	800fbec <led_write>
			  			  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 800ff04:	4b3e      	ldr	r3, [pc, #248]	; (8010000 <sensor_test+0x228>)
 800ff06:	6819      	ldr	r1, [r3, #0]
 800ff08:	4b3e      	ldr	r3, [pc, #248]	; (8010004 <sensor_test+0x22c>)
 800ff0a:	681a      	ldr	r2, [r3, #0]
 800ff0c:	4b3e      	ldr	r3, [pc, #248]	; (8010008 <sensor_test+0x230>)
 800ff0e:	6818      	ldr	r0, [r3, #0]
 800ff10:	4b3e      	ldr	r3, [pc, #248]	; (801000c <sensor_test+0x234>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	9300      	str	r3, [sp, #0]
 800ff16:	4603      	mov	r3, r0
 800ff18:	483d      	ldr	r0, [pc, #244]	; (8010010 <sensor_test+0x238>)
 800ff1a:	f000 fc35 	bl	8010788 <iprintf>
			  			  HAL_Delay(333);
 800ff1e:	f240 104d 	movw	r0, #333	; 0x14d
 800ff22:	f7f1 f87b 	bl	800101c <HAL_Delay>
			  			  get_wall_info();
 800ff26:	e7d9      	b.n	800fedc <sensor_test+0x104>
						}
					break;
				case 2:
					//----Gyro sensor check----
					printf("Gyro Sensor Check.\n");
 800ff28:	483a      	ldr	r0, [pc, #232]	; (8010014 <sensor_test+0x23c>)
 800ff2a:	f000 fca1 	bl	8010870 <puts>
					int accel_x, accel_y, accel_z;
					int gyro_x, gyro_y, gyro_z;
					int deg_x, deg_y, deg_z;
			  		  while(1){
			  			  accel_x = accel_read_x();
 800ff2e:	f7fa fedf 	bl	800acf0 <accel_read_x>
 800ff32:	eef0 7a40 	vmov.f32	s15, s0
 800ff36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff3a:	ee17 3a90 	vmov	r3, s15
 800ff3e:	623b      	str	r3, [r7, #32]
			  			  accel_y = accel_read_y();
 800ff40:	f7fa fefc 	bl	800ad3c <accel_read_y>
 800ff44:	eef0 7a40 	vmov.f32	s15, s0
 800ff48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff4c:	ee17 3a90 	vmov	r3, s15
 800ff50:	61fb      	str	r3, [r7, #28]
			  			  accel_z = accel_read_z();
 800ff52:	f7fa ff19 	bl	800ad88 <accel_read_z>
 800ff56:	eef0 7a40 	vmov.f32	s15, s0
 800ff5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff5e:	ee17 3a90 	vmov	r3, s15
 800ff62:	61bb      	str	r3, [r7, #24]
			  			  gyro_x = gyro_read_x();
 800ff64:	f7fa ff38 	bl	800add8 <gyro_read_x>
 800ff68:	eef0 7a40 	vmov.f32	s15, s0
 800ff6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff70:	ee17 3a90 	vmov	r3, s15
 800ff74:	617b      	str	r3, [r7, #20]
			  			  gyro_y = gyro_read_y();
 800ff76:	f7fa ff6b 	bl	800ae50 <gyro_read_y>
 800ff7a:	eef0 7a40 	vmov.f32	s15, s0
 800ff7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff82:	ee17 3a90 	vmov	r3, s15
 800ff86:	613b      	str	r3, [r7, #16]
			  			  gyro_z = gyro_read_z();
 800ff88:	f7fa ff9e 	bl	800aec8 <gyro_read_z>
 800ff8c:	eef0 7a40 	vmov.f32	s15, s0
 800ff90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff94:	ee17 3a90 	vmov	r3, s15
 800ff98:	60fb      	str	r3, [r7, #12]
			  			  deg_x = degree_x;
 800ff9a:	4b1f      	ldr	r3, [pc, #124]	; (8010018 <sensor_test+0x240>)
 800ff9c:	edd3 7a00 	vldr	s15, [r3]
 800ffa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ffa4:	ee17 3a90 	vmov	r3, s15
 800ffa8:	60bb      	str	r3, [r7, #8]
			  			  deg_y = degree_y;
 800ffaa:	4b1c      	ldr	r3, [pc, #112]	; (801001c <sensor_test+0x244>)
 800ffac:	edd3 7a00 	vldr	s15, [r3]
 800ffb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ffb4:	ee17 3a90 	vmov	r3, s15
 800ffb8:	607b      	str	r3, [r7, #4]
			  			  deg_z = degree_z;
 800ffba:	4b19      	ldr	r3, [pc, #100]	; (8010020 <sensor_test+0x248>)
 800ffbc:	edd3 7a00 	vldr	s15, [r3]
 800ffc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ffc4:	ee17 3a90 	vmov	r3, s15
 800ffc8:	603b      	str	r3, [r7, #0]

			  			  //printf("Accel x: %3d, y: %3d, z: %3d\n", accel_x, accel_y, accel_z);
			  			  printf("Gyro  x: %3d, y: %3d, z: %3d\n", gyro_x, gyro_y, gyro_z);
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	693a      	ldr	r2, [r7, #16]
 800ffce:	6979      	ldr	r1, [r7, #20]
 800ffd0:	4814      	ldr	r0, [pc, #80]	; (8010024 <sensor_test+0x24c>)
 800ffd2:	f000 fbd9 	bl	8010788 <iprintf>
			  			  printf("Deg   x: %3d, y: %3d, z: %3d\n", deg_x, deg_y, deg_z);
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	687a      	ldr	r2, [r7, #4]
 800ffda:	68b9      	ldr	r1, [r7, #8]
 800ffdc:	4812      	ldr	r0, [pc, #72]	; (8010028 <sensor_test+0x250>)
 800ffde:	f000 fbd3 	bl	8010788 <iprintf>
			  			  HAL_Delay(111);
 800ffe2:	206f      	movs	r0, #111	; 0x6f
 800ffe4:	f7f1 f81a 	bl	800101c <HAL_Delay>
			  			  accel_x = accel_read_x();
 800ffe8:	e7a1      	b.n	800ff2e <sensor_test+0x156>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800ffea:	e6fe      	b.n	800fdea <sensor_test+0x12>
 800ffec:	08011f34 	.word	0x08011f34
 800fff0:	20000af4 	.word	0x20000af4
 800fff4:	40020000 	.word	0x40020000
 800fff8:	08011f40 	.word	0x08011f40
 800fffc:	200002c8 	.word	0x200002c8
 8010000:	20000b04 	.word	0x20000b04
 8010004:	20000d64 	.word	0x20000d64
 8010008:	20000c10 	.word	0x20000c10
 801000c:	20000f70 	.word	0x20000f70
 8010010:	08011f54 	.word	0x08011f54
 8010014:	08011f84 	.word	0x08011f84
 8010018:	20000450 	.word	0x20000450
 801001c:	20000f7c 	.word	0x20000f7c
 8010020:	20000b64 	.word	0x20000b64
 8010024:	08011f98 	.word	0x08011f98
 8010028:	08011fb8 	.word	0x08011fb8

0801002c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801002c:	b480      	push	{r7}
 801002e:	b083      	sub	sp, #12
 8010030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010032:	2300      	movs	r3, #0
 8010034:	607b      	str	r3, [r7, #4]
 8010036:	4b10      	ldr	r3, [pc, #64]	; (8010078 <HAL_MspInit+0x4c>)
 8010038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801003a:	4a0f      	ldr	r2, [pc, #60]	; (8010078 <HAL_MspInit+0x4c>)
 801003c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010040:	6453      	str	r3, [r2, #68]	; 0x44
 8010042:	4b0d      	ldr	r3, [pc, #52]	; (8010078 <HAL_MspInit+0x4c>)
 8010044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801004a:	607b      	str	r3, [r7, #4]
 801004c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801004e:	2300      	movs	r3, #0
 8010050:	603b      	str	r3, [r7, #0]
 8010052:	4b09      	ldr	r3, [pc, #36]	; (8010078 <HAL_MspInit+0x4c>)
 8010054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010056:	4a08      	ldr	r2, [pc, #32]	; (8010078 <HAL_MspInit+0x4c>)
 8010058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801005c:	6413      	str	r3, [r2, #64]	; 0x40
 801005e:	4b06      	ldr	r3, [pc, #24]	; (8010078 <HAL_MspInit+0x4c>)
 8010060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010066:	603b      	str	r3, [r7, #0]
 8010068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801006a:	bf00      	nop
 801006c:	370c      	adds	r7, #12
 801006e:	46bd      	mov	sp, r7
 8010070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010074:	4770      	bx	lr
 8010076:	bf00      	nop
 8010078:	40023800 	.word	0x40023800

0801007c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b08a      	sub	sp, #40	; 0x28
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010084:	f107 0314 	add.w	r3, r7, #20
 8010088:	2200      	movs	r2, #0
 801008a:	601a      	str	r2, [r3, #0]
 801008c:	605a      	str	r2, [r3, #4]
 801008e:	609a      	str	r2, [r3, #8]
 8010090:	60da      	str	r2, [r3, #12]
 8010092:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	4a17      	ldr	r2, [pc, #92]	; (80100f8 <HAL_ADC_MspInit+0x7c>)
 801009a:	4293      	cmp	r3, r2
 801009c:	d127      	bne.n	80100ee <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 801009e:	2300      	movs	r3, #0
 80100a0:	613b      	str	r3, [r7, #16]
 80100a2:	4b16      	ldr	r3, [pc, #88]	; (80100fc <HAL_ADC_MspInit+0x80>)
 80100a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100a6:	4a15      	ldr	r2, [pc, #84]	; (80100fc <HAL_ADC_MspInit+0x80>)
 80100a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80100ac:	6453      	str	r3, [r2, #68]	; 0x44
 80100ae:	4b13      	ldr	r3, [pc, #76]	; (80100fc <HAL_ADC_MspInit+0x80>)
 80100b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80100b6:	613b      	str	r3, [r7, #16]
 80100b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80100ba:	2300      	movs	r3, #0
 80100bc:	60fb      	str	r3, [r7, #12]
 80100be:	4b0f      	ldr	r3, [pc, #60]	; (80100fc <HAL_ADC_MspInit+0x80>)
 80100c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100c2:	4a0e      	ldr	r2, [pc, #56]	; (80100fc <HAL_ADC_MspInit+0x80>)
 80100c4:	f043 0301 	orr.w	r3, r3, #1
 80100c8:	6313      	str	r3, [r2, #48]	; 0x30
 80100ca:	4b0c      	ldr	r3, [pc, #48]	; (80100fc <HAL_ADC_MspInit+0x80>)
 80100cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ce:	f003 0301 	and.w	r3, r3, #1
 80100d2:	60fb      	str	r3, [r7, #12]
 80100d4:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80100d6:	230f      	movs	r3, #15
 80100d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80100da:	2303      	movs	r3, #3
 80100dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100de:	2300      	movs	r3, #0
 80100e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80100e2:	f107 0314 	add.w	r3, r7, #20
 80100e6:	4619      	mov	r1, r3
 80100e8:	4805      	ldr	r0, [pc, #20]	; (8010100 <HAL_ADC_MspInit+0x84>)
 80100ea:	f7f1 ff59 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80100ee:	bf00      	nop
 80100f0:	3728      	adds	r7, #40	; 0x28
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	40012000 	.word	0x40012000
 80100fc:	40023800 	.word	0x40023800
 8010100:	40020000 	.word	0x40020000

08010104 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b08a      	sub	sp, #40	; 0x28
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801010c:	f107 0314 	add.w	r3, r7, #20
 8010110:	2200      	movs	r2, #0
 8010112:	601a      	str	r2, [r3, #0]
 8010114:	605a      	str	r2, [r3, #4]
 8010116:	609a      	str	r2, [r3, #8]
 8010118:	60da      	str	r2, [r3, #12]
 801011a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	4a19      	ldr	r2, [pc, #100]	; (8010188 <HAL_SPI_MspInit+0x84>)
 8010122:	4293      	cmp	r3, r2
 8010124:	d12c      	bne.n	8010180 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8010126:	2300      	movs	r3, #0
 8010128:	613b      	str	r3, [r7, #16]
 801012a:	4b18      	ldr	r3, [pc, #96]	; (801018c <HAL_SPI_MspInit+0x88>)
 801012c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801012e:	4a17      	ldr	r2, [pc, #92]	; (801018c <HAL_SPI_MspInit+0x88>)
 8010130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010134:	6413      	str	r3, [r2, #64]	; 0x40
 8010136:	4b15      	ldr	r3, [pc, #84]	; (801018c <HAL_SPI_MspInit+0x88>)
 8010138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801013a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801013e:	613b      	str	r3, [r7, #16]
 8010140:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010142:	2300      	movs	r3, #0
 8010144:	60fb      	str	r3, [r7, #12]
 8010146:	4b11      	ldr	r3, [pc, #68]	; (801018c <HAL_SPI_MspInit+0x88>)
 8010148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801014a:	4a10      	ldr	r2, [pc, #64]	; (801018c <HAL_SPI_MspInit+0x88>)
 801014c:	f043 0304 	orr.w	r3, r3, #4
 8010150:	6313      	str	r3, [r2, #48]	; 0x30
 8010152:	4b0e      	ldr	r3, [pc, #56]	; (801018c <HAL_SPI_MspInit+0x88>)
 8010154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010156:	f003 0304 	and.w	r3, r3, #4
 801015a:	60fb      	str	r3, [r7, #12]
 801015c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 801015e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010164:	2302      	movs	r3, #2
 8010166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010168:	2300      	movs	r3, #0
 801016a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801016c:	2303      	movs	r3, #3
 801016e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010170:	2306      	movs	r3, #6
 8010172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010174:	f107 0314 	add.w	r3, r7, #20
 8010178:	4619      	mov	r1, r3
 801017a:	4805      	ldr	r0, [pc, #20]	; (8010190 <HAL_SPI_MspInit+0x8c>)
 801017c:	f7f1 ff10 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8010180:	bf00      	nop
 8010182:	3728      	adds	r7, #40	; 0x28
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}
 8010188:	40003c00 	.word	0x40003c00
 801018c:	40023800 	.word	0x40023800
 8010190:	40020800 	.word	0x40020800

08010194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b086      	sub	sp, #24
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101a4:	d10e      	bne.n	80101c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80101a6:	2300      	movs	r3, #0
 80101a8:	617b      	str	r3, [r7, #20]
 80101aa:	4b20      	ldr	r3, [pc, #128]	; (801022c <HAL_TIM_Base_MspInit+0x98>)
 80101ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101ae:	4a1f      	ldr	r2, [pc, #124]	; (801022c <HAL_TIM_Base_MspInit+0x98>)
 80101b0:	f043 0301 	orr.w	r3, r3, #1
 80101b4:	6413      	str	r3, [r2, #64]	; 0x40
 80101b6:	4b1d      	ldr	r3, [pc, #116]	; (801022c <HAL_TIM_Base_MspInit+0x98>)
 80101b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101ba:	f003 0301 	and.w	r3, r3, #1
 80101be:	617b      	str	r3, [r7, #20]
 80101c0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80101c2:	e02e      	b.n	8010222 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	4a19      	ldr	r2, [pc, #100]	; (8010230 <HAL_TIM_Base_MspInit+0x9c>)
 80101ca:	4293      	cmp	r3, r2
 80101cc:	d10e      	bne.n	80101ec <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80101ce:	2300      	movs	r3, #0
 80101d0:	613b      	str	r3, [r7, #16]
 80101d2:	4b16      	ldr	r3, [pc, #88]	; (801022c <HAL_TIM_Base_MspInit+0x98>)
 80101d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101d6:	4a15      	ldr	r2, [pc, #84]	; (801022c <HAL_TIM_Base_MspInit+0x98>)
 80101d8:	f043 0302 	orr.w	r3, r3, #2
 80101dc:	6413      	str	r3, [r2, #64]	; 0x40
 80101de:	4b13      	ldr	r3, [pc, #76]	; (801022c <HAL_TIM_Base_MspInit+0x98>)
 80101e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101e2:	f003 0302 	and.w	r3, r3, #2
 80101e6:	613b      	str	r3, [r7, #16]
 80101e8:	693b      	ldr	r3, [r7, #16]
}
 80101ea:	e01a      	b.n	8010222 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	4a10      	ldr	r2, [pc, #64]	; (8010234 <HAL_TIM_Base_MspInit+0xa0>)
 80101f2:	4293      	cmp	r3, r2
 80101f4:	d115      	bne.n	8010222 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80101f6:	2300      	movs	r3, #0
 80101f8:	60fb      	str	r3, [r7, #12]
 80101fa:	4b0c      	ldr	r3, [pc, #48]	; (801022c <HAL_TIM_Base_MspInit+0x98>)
 80101fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101fe:	4a0b      	ldr	r2, [pc, #44]	; (801022c <HAL_TIM_Base_MspInit+0x98>)
 8010200:	f043 0310 	orr.w	r3, r3, #16
 8010204:	6413      	str	r3, [r2, #64]	; 0x40
 8010206:	4b09      	ldr	r3, [pc, #36]	; (801022c <HAL_TIM_Base_MspInit+0x98>)
 8010208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801020a:	f003 0310 	and.w	r3, r3, #16
 801020e:	60fb      	str	r3, [r7, #12]
 8010210:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8010212:	2200      	movs	r2, #0
 8010214:	2100      	movs	r1, #0
 8010216:	2036      	movs	r0, #54	; 0x36
 8010218:	f7f1 fbb7 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801021c:	2036      	movs	r0, #54	; 0x36
 801021e:	f7f1 fbd0 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 8010222:	bf00      	nop
 8010224:	3718      	adds	r7, #24
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}
 801022a:	bf00      	nop
 801022c:	40023800 	.word	0x40023800
 8010230:	40000400 	.word	0x40000400
 8010234:	40001000 	.word	0x40001000

08010238 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b08c      	sub	sp, #48	; 0x30
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010240:	f107 031c 	add.w	r3, r7, #28
 8010244:	2200      	movs	r2, #0
 8010246:	601a      	str	r2, [r3, #0]
 8010248:	605a      	str	r2, [r3, #4]
 801024a:	609a      	str	r2, [r3, #8]
 801024c:	60da      	str	r2, [r3, #12]
 801024e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	4a32      	ldr	r2, [pc, #200]	; (8010320 <HAL_TIM_Encoder_MspInit+0xe8>)
 8010256:	4293      	cmp	r3, r2
 8010258:	d12c      	bne.n	80102b4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 801025a:	2300      	movs	r3, #0
 801025c:	61bb      	str	r3, [r7, #24]
 801025e:	4b31      	ldr	r3, [pc, #196]	; (8010324 <HAL_TIM_Encoder_MspInit+0xec>)
 8010260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010262:	4a30      	ldr	r2, [pc, #192]	; (8010324 <HAL_TIM_Encoder_MspInit+0xec>)
 8010264:	f043 0304 	orr.w	r3, r3, #4
 8010268:	6413      	str	r3, [r2, #64]	; 0x40
 801026a:	4b2e      	ldr	r3, [pc, #184]	; (8010324 <HAL_TIM_Encoder_MspInit+0xec>)
 801026c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801026e:	f003 0304 	and.w	r3, r3, #4
 8010272:	61bb      	str	r3, [r7, #24]
 8010274:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010276:	2300      	movs	r3, #0
 8010278:	617b      	str	r3, [r7, #20]
 801027a:	4b2a      	ldr	r3, [pc, #168]	; (8010324 <HAL_TIM_Encoder_MspInit+0xec>)
 801027c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801027e:	4a29      	ldr	r2, [pc, #164]	; (8010324 <HAL_TIM_Encoder_MspInit+0xec>)
 8010280:	f043 0302 	orr.w	r3, r3, #2
 8010284:	6313      	str	r3, [r2, #48]	; 0x30
 8010286:	4b27      	ldr	r3, [pc, #156]	; (8010324 <HAL_TIM_Encoder_MspInit+0xec>)
 8010288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801028a:	f003 0302 	and.w	r3, r3, #2
 801028e:	617b      	str	r3, [r7, #20]
 8010290:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010292:	23c0      	movs	r3, #192	; 0xc0
 8010294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010296:	2302      	movs	r3, #2
 8010298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801029a:	2300      	movs	r3, #0
 801029c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801029e:	2300      	movs	r3, #0
 80102a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80102a2:	2302      	movs	r3, #2
 80102a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80102a6:	f107 031c 	add.w	r3, r7, #28
 80102aa:	4619      	mov	r1, r3
 80102ac:	481e      	ldr	r0, [pc, #120]	; (8010328 <HAL_TIM_Encoder_MspInit+0xf0>)
 80102ae:	f7f1 fe77 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80102b2:	e030      	b.n	8010316 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	4a1c      	ldr	r2, [pc, #112]	; (801032c <HAL_TIM_Encoder_MspInit+0xf4>)
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d12b      	bne.n	8010316 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80102be:	2300      	movs	r3, #0
 80102c0:	613b      	str	r3, [r7, #16]
 80102c2:	4b18      	ldr	r3, [pc, #96]	; (8010324 <HAL_TIM_Encoder_MspInit+0xec>)
 80102c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102c6:	4a17      	ldr	r2, [pc, #92]	; (8010324 <HAL_TIM_Encoder_MspInit+0xec>)
 80102c8:	f043 0302 	orr.w	r3, r3, #2
 80102cc:	6453      	str	r3, [r2, #68]	; 0x44
 80102ce:	4b15      	ldr	r3, [pc, #84]	; (8010324 <HAL_TIM_Encoder_MspInit+0xec>)
 80102d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102d2:	f003 0302 	and.w	r3, r3, #2
 80102d6:	613b      	str	r3, [r7, #16]
 80102d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80102da:	2300      	movs	r3, #0
 80102dc:	60fb      	str	r3, [r7, #12]
 80102de:	4b11      	ldr	r3, [pc, #68]	; (8010324 <HAL_TIM_Encoder_MspInit+0xec>)
 80102e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102e2:	4a10      	ldr	r2, [pc, #64]	; (8010324 <HAL_TIM_Encoder_MspInit+0xec>)
 80102e4:	f043 0304 	orr.w	r3, r3, #4
 80102e8:	6313      	str	r3, [r2, #48]	; 0x30
 80102ea:	4b0e      	ldr	r3, [pc, #56]	; (8010324 <HAL_TIM_Encoder_MspInit+0xec>)
 80102ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102ee:	f003 0304 	and.w	r3, r3, #4
 80102f2:	60fb      	str	r3, [r7, #12]
 80102f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80102f6:	23c0      	movs	r3, #192	; 0xc0
 80102f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80102fa:	2302      	movs	r3, #2
 80102fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102fe:	2300      	movs	r3, #0
 8010300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010302:	2300      	movs	r3, #0
 8010304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010306:	2303      	movs	r3, #3
 8010308:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801030a:	f107 031c 	add.w	r3, r7, #28
 801030e:	4619      	mov	r1, r3
 8010310:	4807      	ldr	r0, [pc, #28]	; (8010330 <HAL_TIM_Encoder_MspInit+0xf8>)
 8010312:	f7f1 fe45 	bl	8001fa0 <HAL_GPIO_Init>
}
 8010316:	bf00      	nop
 8010318:	3730      	adds	r7, #48	; 0x30
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
 801031e:	bf00      	nop
 8010320:	40000800 	.word	0x40000800
 8010324:	40023800 	.word	0x40023800
 8010328:	40020400 	.word	0x40020400
 801032c:	40010400 	.word	0x40010400
 8010330:	40020800 	.word	0x40020800

08010334 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b08a      	sub	sp, #40	; 0x28
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801033c:	f107 0314 	add.w	r3, r7, #20
 8010340:	2200      	movs	r2, #0
 8010342:	601a      	str	r2, [r3, #0]
 8010344:	605a      	str	r2, [r3, #4]
 8010346:	609a      	str	r2, [r3, #8]
 8010348:	60da      	str	r2, [r3, #12]
 801034a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010354:	d13d      	bne.n	80103d2 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010356:	2300      	movs	r3, #0
 8010358:	613b      	str	r3, [r7, #16]
 801035a:	4b31      	ldr	r3, [pc, #196]	; (8010420 <HAL_TIM_MspPostInit+0xec>)
 801035c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801035e:	4a30      	ldr	r2, [pc, #192]	; (8010420 <HAL_TIM_MspPostInit+0xec>)
 8010360:	f043 0301 	orr.w	r3, r3, #1
 8010364:	6313      	str	r3, [r2, #48]	; 0x30
 8010366:	4b2e      	ldr	r3, [pc, #184]	; (8010420 <HAL_TIM_MspPostInit+0xec>)
 8010368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801036a:	f003 0301 	and.w	r3, r3, #1
 801036e:	613b      	str	r3, [r7, #16]
 8010370:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010372:	2300      	movs	r3, #0
 8010374:	60fb      	str	r3, [r7, #12]
 8010376:	4b2a      	ldr	r3, [pc, #168]	; (8010420 <HAL_TIM_MspPostInit+0xec>)
 8010378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801037a:	4a29      	ldr	r2, [pc, #164]	; (8010420 <HAL_TIM_MspPostInit+0xec>)
 801037c:	f043 0302 	orr.w	r3, r3, #2
 8010380:	6313      	str	r3, [r2, #48]	; 0x30
 8010382:	4b27      	ldr	r3, [pc, #156]	; (8010420 <HAL_TIM_MspPostInit+0xec>)
 8010384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010386:	f003 0302 	and.w	r3, r3, #2
 801038a:	60fb      	str	r3, [r7, #12]
 801038c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801038e:	2320      	movs	r3, #32
 8010390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010392:	2302      	movs	r3, #2
 8010394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010396:	2300      	movs	r3, #0
 8010398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801039a:	2300      	movs	r3, #0
 801039c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801039e:	2301      	movs	r3, #1
 80103a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80103a2:	f107 0314 	add.w	r3, r7, #20
 80103a6:	4619      	mov	r1, r3
 80103a8:	481e      	ldr	r0, [pc, #120]	; (8010424 <HAL_TIM_MspPostInit+0xf0>)
 80103aa:	f7f1 fdf9 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80103ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80103b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103b4:	2302      	movs	r3, #2
 80103b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103b8:	2300      	movs	r3, #0
 80103ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103bc:	2300      	movs	r3, #0
 80103be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80103c0:	2301      	movs	r3, #1
 80103c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80103c4:	f107 0314 	add.w	r3, r7, #20
 80103c8:	4619      	mov	r1, r3
 80103ca:	4817      	ldr	r0, [pc, #92]	; (8010428 <HAL_TIM_MspPostInit+0xf4>)
 80103cc:	f7f1 fde8 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80103d0:	e022      	b.n	8010418 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	4a15      	ldr	r2, [pc, #84]	; (801042c <HAL_TIM_MspPostInit+0xf8>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d11d      	bne.n	8010418 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80103dc:	2300      	movs	r3, #0
 80103de:	60bb      	str	r3, [r7, #8]
 80103e0:	4b0f      	ldr	r3, [pc, #60]	; (8010420 <HAL_TIM_MspPostInit+0xec>)
 80103e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103e4:	4a0e      	ldr	r2, [pc, #56]	; (8010420 <HAL_TIM_MspPostInit+0xec>)
 80103e6:	f043 0302 	orr.w	r3, r3, #2
 80103ea:	6313      	str	r3, [r2, #48]	; 0x30
 80103ec:	4b0c      	ldr	r3, [pc, #48]	; (8010420 <HAL_TIM_MspPostInit+0xec>)
 80103ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103f0:	f003 0302 	and.w	r3, r3, #2
 80103f4:	60bb      	str	r3, [r7, #8]
 80103f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80103f8:	2320      	movs	r3, #32
 80103fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103fc:	2302      	movs	r3, #2
 80103fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010400:	2300      	movs	r3, #0
 8010402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010404:	2300      	movs	r3, #0
 8010406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8010408:	2302      	movs	r3, #2
 801040a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801040c:	f107 0314 	add.w	r3, r7, #20
 8010410:	4619      	mov	r1, r3
 8010412:	4805      	ldr	r0, [pc, #20]	; (8010428 <HAL_TIM_MspPostInit+0xf4>)
 8010414:	f7f1 fdc4 	bl	8001fa0 <HAL_GPIO_Init>
}
 8010418:	bf00      	nop
 801041a:	3728      	adds	r7, #40	; 0x28
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}
 8010420:	40023800 	.word	0x40023800
 8010424:	40020000 	.word	0x40020000
 8010428:	40020400 	.word	0x40020400
 801042c:	40000400 	.word	0x40000400

08010430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b08a      	sub	sp, #40	; 0x28
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010438:	f107 0314 	add.w	r3, r7, #20
 801043c:	2200      	movs	r2, #0
 801043e:	601a      	str	r2, [r3, #0]
 8010440:	605a      	str	r2, [r3, #4]
 8010442:	609a      	str	r2, [r3, #8]
 8010444:	60da      	str	r2, [r3, #12]
 8010446:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4a19      	ldr	r2, [pc, #100]	; (80104b4 <HAL_UART_MspInit+0x84>)
 801044e:	4293      	cmp	r3, r2
 8010450:	d12c      	bne.n	80104ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8010452:	2300      	movs	r3, #0
 8010454:	613b      	str	r3, [r7, #16]
 8010456:	4b18      	ldr	r3, [pc, #96]	; (80104b8 <HAL_UART_MspInit+0x88>)
 8010458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801045a:	4a17      	ldr	r2, [pc, #92]	; (80104b8 <HAL_UART_MspInit+0x88>)
 801045c:	f043 0310 	orr.w	r3, r3, #16
 8010460:	6453      	str	r3, [r2, #68]	; 0x44
 8010462:	4b15      	ldr	r3, [pc, #84]	; (80104b8 <HAL_UART_MspInit+0x88>)
 8010464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010466:	f003 0310 	and.w	r3, r3, #16
 801046a:	613b      	str	r3, [r7, #16]
 801046c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801046e:	2300      	movs	r3, #0
 8010470:	60fb      	str	r3, [r7, #12]
 8010472:	4b11      	ldr	r3, [pc, #68]	; (80104b8 <HAL_UART_MspInit+0x88>)
 8010474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010476:	4a10      	ldr	r2, [pc, #64]	; (80104b8 <HAL_UART_MspInit+0x88>)
 8010478:	f043 0301 	orr.w	r3, r3, #1
 801047c:	6313      	str	r3, [r2, #48]	; 0x30
 801047e:	4b0e      	ldr	r3, [pc, #56]	; (80104b8 <HAL_UART_MspInit+0x88>)
 8010480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010482:	f003 0301 	and.w	r3, r3, #1
 8010486:	60fb      	str	r3, [r7, #12]
 8010488:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801048a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801048e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010490:	2302      	movs	r3, #2
 8010492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010494:	2301      	movs	r3, #1
 8010496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010498:	2303      	movs	r3, #3
 801049a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801049c:	2307      	movs	r3, #7
 801049e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80104a0:	f107 0314 	add.w	r3, r7, #20
 80104a4:	4619      	mov	r1, r3
 80104a6:	4805      	ldr	r0, [pc, #20]	; (80104bc <HAL_UART_MspInit+0x8c>)
 80104a8:	f7f1 fd7a 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80104ac:	bf00      	nop
 80104ae:	3728      	adds	r7, #40	; 0x28
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}
 80104b4:	40011000 	.word	0x40011000
 80104b8:	40023800 	.word	0x40023800
 80104bc:	40020000 	.word	0x40020000

080104c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80104c0:	b480      	push	{r7}
 80104c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80104c4:	bf00      	nop
 80104c6:	46bd      	mov	sp, r7
 80104c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104cc:	4770      	bx	lr

080104ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80104ce:	b480      	push	{r7}
 80104d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80104d2:	e7fe      	b.n	80104d2 <HardFault_Handler+0x4>

080104d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80104d4:	b480      	push	{r7}
 80104d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80104d8:	e7fe      	b.n	80104d8 <MemManage_Handler+0x4>

080104da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80104da:	b480      	push	{r7}
 80104dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80104de:	e7fe      	b.n	80104de <BusFault_Handler+0x4>

080104e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80104e0:	b480      	push	{r7}
 80104e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80104e4:	e7fe      	b.n	80104e4 <UsageFault_Handler+0x4>

080104e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80104e6:	b480      	push	{r7}
 80104e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80104ea:	bf00      	nop
 80104ec:	46bd      	mov	sp, r7
 80104ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f2:	4770      	bx	lr

080104f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80104f4:	b480      	push	{r7}
 80104f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80104f8:	bf00      	nop
 80104fa:	46bd      	mov	sp, r7
 80104fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010500:	4770      	bx	lr

08010502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010502:	b480      	push	{r7}
 8010504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010506:	bf00      	nop
 8010508:	46bd      	mov	sp, r7
 801050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050e:	4770      	bx	lr

08010510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010514:	f7f0 fd62 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010518:	bf00      	nop
 801051a:	bd80      	pop	{r7, pc}

0801051c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8010520:	4802      	ldr	r0, [pc, #8]	; (801052c <TIM6_DAC_IRQHandler+0x10>)
 8010522:	f7f3 fa4a 	bl	80039ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8010526:	bf00      	nop
 8010528:	bd80      	pop	{r7, pc}
 801052a:	bf00      	nop
 801052c:	20000bc0 	.word	0x20000bc0

08010530 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b086      	sub	sp, #24
 8010534:	af00      	add	r7, sp, #0
 8010536:	60f8      	str	r0, [r7, #12]
 8010538:	60b9      	str	r1, [r7, #8]
 801053a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801053c:	2300      	movs	r3, #0
 801053e:	617b      	str	r3, [r7, #20]
 8010540:	e00a      	b.n	8010558 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8010542:	f3af 8000 	nop.w
 8010546:	4601      	mov	r1, r0
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	1c5a      	adds	r2, r3, #1
 801054c:	60ba      	str	r2, [r7, #8]
 801054e:	b2ca      	uxtb	r2, r1
 8010550:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	3301      	adds	r3, #1
 8010556:	617b      	str	r3, [r7, #20]
 8010558:	697a      	ldr	r2, [r7, #20]
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	429a      	cmp	r2, r3
 801055e:	dbf0      	blt.n	8010542 <_read+0x12>
	}

return len;
 8010560:	687b      	ldr	r3, [r7, #4]
}
 8010562:	4618      	mov	r0, r3
 8010564:	3718      	adds	r7, #24
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}

0801056a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801056a:	b580      	push	{r7, lr}
 801056c:	b086      	sub	sp, #24
 801056e:	af00      	add	r7, sp, #0
 8010570:	60f8      	str	r0, [r7, #12]
 8010572:	60b9      	str	r1, [r7, #8]
 8010574:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010576:	2300      	movs	r3, #0
 8010578:	617b      	str	r3, [r7, #20]
 801057a:	e009      	b.n	8010590 <_write+0x26>
	{
		__io_putchar(*ptr++);
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	1c5a      	adds	r2, r3, #1
 8010580:	60ba      	str	r2, [r7, #8]
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	4618      	mov	r0, r3
 8010586:	f7fa fce1 	bl	800af4c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	3301      	adds	r3, #1
 801058e:	617b      	str	r3, [r7, #20]
 8010590:	697a      	ldr	r2, [r7, #20]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	429a      	cmp	r2, r3
 8010596:	dbf1      	blt.n	801057c <_write+0x12>
	}
	return len;
 8010598:	687b      	ldr	r3, [r7, #4]
}
 801059a:	4618      	mov	r0, r3
 801059c:	3718      	adds	r7, #24
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <_close>:

int _close(int file)
{
 80105a2:	b480      	push	{r7}
 80105a4:	b083      	sub	sp, #12
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	6078      	str	r0, [r7, #4]
	return -1;
 80105aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	370c      	adds	r7, #12
 80105b2:	46bd      	mov	sp, r7
 80105b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b8:	4770      	bx	lr

080105ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80105ba:	b480      	push	{r7}
 80105bc:	b083      	sub	sp, #12
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
 80105c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80105ca:	605a      	str	r2, [r3, #4]
	return 0;
 80105cc:	2300      	movs	r3, #0
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	370c      	adds	r7, #12
 80105d2:	46bd      	mov	sp, r7
 80105d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d8:	4770      	bx	lr

080105da <_isatty>:

int _isatty(int file)
{
 80105da:	b480      	push	{r7}
 80105dc:	b083      	sub	sp, #12
 80105de:	af00      	add	r7, sp, #0
 80105e0:	6078      	str	r0, [r7, #4]
	return 1;
 80105e2:	2301      	movs	r3, #1
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	370c      	adds	r7, #12
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr

080105f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80105f0:	b480      	push	{r7}
 80105f2:	b085      	sub	sp, #20
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	60f8      	str	r0, [r7, #12]
 80105f8:	60b9      	str	r1, [r7, #8]
 80105fa:	607a      	str	r2, [r7, #4]
	return 0;
 80105fc:	2300      	movs	r3, #0
}
 80105fe:	4618      	mov	r0, r3
 8010600:	3714      	adds	r7, #20
 8010602:	46bd      	mov	sp, r7
 8010604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010608:	4770      	bx	lr
	...

0801060c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b084      	sub	sp, #16
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8010614:	4b11      	ldr	r3, [pc, #68]	; (801065c <_sbrk+0x50>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d102      	bne.n	8010622 <_sbrk+0x16>
		heap_end = &end;
 801061c:	4b0f      	ldr	r3, [pc, #60]	; (801065c <_sbrk+0x50>)
 801061e:	4a10      	ldr	r2, [pc, #64]	; (8010660 <_sbrk+0x54>)
 8010620:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8010622:	4b0e      	ldr	r3, [pc, #56]	; (801065c <_sbrk+0x50>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8010628:	4b0c      	ldr	r3, [pc, #48]	; (801065c <_sbrk+0x50>)
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	4413      	add	r3, r2
 8010630:	466a      	mov	r2, sp
 8010632:	4293      	cmp	r3, r2
 8010634:	d907      	bls.n	8010646 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8010636:	f000 f875 	bl	8010724 <__errno>
 801063a:	4602      	mov	r2, r0
 801063c:	230c      	movs	r3, #12
 801063e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8010640:	f04f 33ff 	mov.w	r3, #4294967295
 8010644:	e006      	b.n	8010654 <_sbrk+0x48>
	}

	heap_end += incr;
 8010646:	4b05      	ldr	r3, [pc, #20]	; (801065c <_sbrk+0x50>)
 8010648:	681a      	ldr	r2, [r3, #0]
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	4413      	add	r3, r2
 801064e:	4a03      	ldr	r2, [pc, #12]	; (801065c <_sbrk+0x50>)
 8010650:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8010652:	68fb      	ldr	r3, [r7, #12]
}
 8010654:	4618      	mov	r0, r3
 8010656:	3710      	adds	r7, #16
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}
 801065c:	20000114 	.word	0x20000114
 8010660:	200015e8 	.word	0x200015e8

08010664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010664:	b480      	push	{r7}
 8010666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010668:	4b16      	ldr	r3, [pc, #88]	; (80106c4 <SystemInit+0x60>)
 801066a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801066e:	4a15      	ldr	r2, [pc, #84]	; (80106c4 <SystemInit+0x60>)
 8010670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8010678:	4b13      	ldr	r3, [pc, #76]	; (80106c8 <SystemInit+0x64>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	4a12      	ldr	r2, [pc, #72]	; (80106c8 <SystemInit+0x64>)
 801067e:	f043 0301 	orr.w	r3, r3, #1
 8010682:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010684:	4b10      	ldr	r3, [pc, #64]	; (80106c8 <SystemInit+0x64>)
 8010686:	2200      	movs	r2, #0
 8010688:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801068a:	4b0f      	ldr	r3, [pc, #60]	; (80106c8 <SystemInit+0x64>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	4a0e      	ldr	r2, [pc, #56]	; (80106c8 <SystemInit+0x64>)
 8010690:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8010694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010698:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801069a:	4b0b      	ldr	r3, [pc, #44]	; (80106c8 <SystemInit+0x64>)
 801069c:	4a0b      	ldr	r2, [pc, #44]	; (80106cc <SystemInit+0x68>)
 801069e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80106a0:	4b09      	ldr	r3, [pc, #36]	; (80106c8 <SystemInit+0x64>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	4a08      	ldr	r2, [pc, #32]	; (80106c8 <SystemInit+0x64>)
 80106a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80106aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80106ac:	4b06      	ldr	r3, [pc, #24]	; (80106c8 <SystemInit+0x64>)
 80106ae:	2200      	movs	r2, #0
 80106b0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80106b2:	4b04      	ldr	r3, [pc, #16]	; (80106c4 <SystemInit+0x60>)
 80106b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80106b8:	609a      	str	r2, [r3, #8]
#endif
}
 80106ba:	bf00      	nop
 80106bc:	46bd      	mov	sp, r7
 80106be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c2:	4770      	bx	lr
 80106c4:	e000ed00 	.word	0xe000ed00
 80106c8:	40023800 	.word	0x40023800
 80106cc:	24003010 	.word	0x24003010

080106d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80106d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010708 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80106d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80106d6:	e003      	b.n	80106e0 <LoopCopyDataInit>

080106d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80106d8:	4b0c      	ldr	r3, [pc, #48]	; (801070c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80106da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80106dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80106de:	3104      	adds	r1, #4

080106e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80106e0:	480b      	ldr	r0, [pc, #44]	; (8010710 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80106e2:	4b0c      	ldr	r3, [pc, #48]	; (8010714 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80106e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80106e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80106e8:	d3f6      	bcc.n	80106d8 <CopyDataInit>
  ldr  r2, =_sbss
 80106ea:	4a0b      	ldr	r2, [pc, #44]	; (8010718 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80106ec:	e002      	b.n	80106f4 <LoopFillZerobss>

080106ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80106ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80106f0:	f842 3b04 	str.w	r3, [r2], #4

080106f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80106f4:	4b09      	ldr	r3, [pc, #36]	; (801071c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80106f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80106f8:	d3f9      	bcc.n	80106ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80106fa:	f7ff ffb3 	bl	8010664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80106fe:	f000 f817 	bl	8010730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010702:	f7fb fea9 	bl	800c458 <main>
  bx  lr    
 8010706:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010708:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 801070c:	0801209c 	.word	0x0801209c
  ldr  r0, =_sdata
 8010710:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010714:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 8010718:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 801071c:	200015e8 	.word	0x200015e8

08010720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010720:	e7fe      	b.n	8010720 <ADC_IRQHandler>
	...

08010724 <__errno>:
 8010724:	4b01      	ldr	r3, [pc, #4]	; (801072c <__errno+0x8>)
 8010726:	6818      	ldr	r0, [r3, #0]
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop
 801072c:	20000084 	.word	0x20000084

08010730 <__libc_init_array>:
 8010730:	b570      	push	{r4, r5, r6, lr}
 8010732:	4e0d      	ldr	r6, [pc, #52]	; (8010768 <__libc_init_array+0x38>)
 8010734:	4c0d      	ldr	r4, [pc, #52]	; (801076c <__libc_init_array+0x3c>)
 8010736:	1ba4      	subs	r4, r4, r6
 8010738:	10a4      	asrs	r4, r4, #2
 801073a:	2500      	movs	r5, #0
 801073c:	42a5      	cmp	r5, r4
 801073e:	d109      	bne.n	8010754 <__libc_init_array+0x24>
 8010740:	4e0b      	ldr	r6, [pc, #44]	; (8010770 <__libc_init_array+0x40>)
 8010742:	4c0c      	ldr	r4, [pc, #48]	; (8010774 <__libc_init_array+0x44>)
 8010744:	f001 f932 	bl	80119ac <_init>
 8010748:	1ba4      	subs	r4, r4, r6
 801074a:	10a4      	asrs	r4, r4, #2
 801074c:	2500      	movs	r5, #0
 801074e:	42a5      	cmp	r5, r4
 8010750:	d105      	bne.n	801075e <__libc_init_array+0x2e>
 8010752:	bd70      	pop	{r4, r5, r6, pc}
 8010754:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010758:	4798      	blx	r3
 801075a:	3501      	adds	r5, #1
 801075c:	e7ee      	b.n	801073c <__libc_init_array+0xc>
 801075e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010762:	4798      	blx	r3
 8010764:	3501      	adds	r5, #1
 8010766:	e7f2      	b.n	801074e <__libc_init_array+0x1e>
 8010768:	08012094 	.word	0x08012094
 801076c:	08012094 	.word	0x08012094
 8010770:	08012094 	.word	0x08012094
 8010774:	08012098 	.word	0x08012098

08010778 <memset>:
 8010778:	4402      	add	r2, r0
 801077a:	4603      	mov	r3, r0
 801077c:	4293      	cmp	r3, r2
 801077e:	d100      	bne.n	8010782 <memset+0xa>
 8010780:	4770      	bx	lr
 8010782:	f803 1b01 	strb.w	r1, [r3], #1
 8010786:	e7f9      	b.n	801077c <memset+0x4>

08010788 <iprintf>:
 8010788:	b40f      	push	{r0, r1, r2, r3}
 801078a:	4b0a      	ldr	r3, [pc, #40]	; (80107b4 <iprintf+0x2c>)
 801078c:	b513      	push	{r0, r1, r4, lr}
 801078e:	681c      	ldr	r4, [r3, #0]
 8010790:	b124      	cbz	r4, 801079c <iprintf+0x14>
 8010792:	69a3      	ldr	r3, [r4, #24]
 8010794:	b913      	cbnz	r3, 801079c <iprintf+0x14>
 8010796:	4620      	mov	r0, r4
 8010798:	f000 fad8 	bl	8010d4c <__sinit>
 801079c:	ab05      	add	r3, sp, #20
 801079e:	9a04      	ldr	r2, [sp, #16]
 80107a0:	68a1      	ldr	r1, [r4, #8]
 80107a2:	9301      	str	r3, [sp, #4]
 80107a4:	4620      	mov	r0, r4
 80107a6:	f000 fc99 	bl	80110dc <_vfiprintf_r>
 80107aa:	b002      	add	sp, #8
 80107ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107b0:	b004      	add	sp, #16
 80107b2:	4770      	bx	lr
 80107b4:	20000084 	.word	0x20000084

080107b8 <_puts_r>:
 80107b8:	b570      	push	{r4, r5, r6, lr}
 80107ba:	460e      	mov	r6, r1
 80107bc:	4605      	mov	r5, r0
 80107be:	b118      	cbz	r0, 80107c8 <_puts_r+0x10>
 80107c0:	6983      	ldr	r3, [r0, #24]
 80107c2:	b90b      	cbnz	r3, 80107c8 <_puts_r+0x10>
 80107c4:	f000 fac2 	bl	8010d4c <__sinit>
 80107c8:	69ab      	ldr	r3, [r5, #24]
 80107ca:	68ac      	ldr	r4, [r5, #8]
 80107cc:	b913      	cbnz	r3, 80107d4 <_puts_r+0x1c>
 80107ce:	4628      	mov	r0, r5
 80107d0:	f000 fabc 	bl	8010d4c <__sinit>
 80107d4:	4b23      	ldr	r3, [pc, #140]	; (8010864 <_puts_r+0xac>)
 80107d6:	429c      	cmp	r4, r3
 80107d8:	d117      	bne.n	801080a <_puts_r+0x52>
 80107da:	686c      	ldr	r4, [r5, #4]
 80107dc:	89a3      	ldrh	r3, [r4, #12]
 80107de:	071b      	lsls	r3, r3, #28
 80107e0:	d51d      	bpl.n	801081e <_puts_r+0x66>
 80107e2:	6923      	ldr	r3, [r4, #16]
 80107e4:	b1db      	cbz	r3, 801081e <_puts_r+0x66>
 80107e6:	3e01      	subs	r6, #1
 80107e8:	68a3      	ldr	r3, [r4, #8]
 80107ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80107ee:	3b01      	subs	r3, #1
 80107f0:	60a3      	str	r3, [r4, #8]
 80107f2:	b9e9      	cbnz	r1, 8010830 <_puts_r+0x78>
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	da2e      	bge.n	8010856 <_puts_r+0x9e>
 80107f8:	4622      	mov	r2, r4
 80107fa:	210a      	movs	r1, #10
 80107fc:	4628      	mov	r0, r5
 80107fe:	f000 f8f5 	bl	80109ec <__swbuf_r>
 8010802:	3001      	adds	r0, #1
 8010804:	d011      	beq.n	801082a <_puts_r+0x72>
 8010806:	200a      	movs	r0, #10
 8010808:	e011      	b.n	801082e <_puts_r+0x76>
 801080a:	4b17      	ldr	r3, [pc, #92]	; (8010868 <_puts_r+0xb0>)
 801080c:	429c      	cmp	r4, r3
 801080e:	d101      	bne.n	8010814 <_puts_r+0x5c>
 8010810:	68ac      	ldr	r4, [r5, #8]
 8010812:	e7e3      	b.n	80107dc <_puts_r+0x24>
 8010814:	4b15      	ldr	r3, [pc, #84]	; (801086c <_puts_r+0xb4>)
 8010816:	429c      	cmp	r4, r3
 8010818:	bf08      	it	eq
 801081a:	68ec      	ldreq	r4, [r5, #12]
 801081c:	e7de      	b.n	80107dc <_puts_r+0x24>
 801081e:	4621      	mov	r1, r4
 8010820:	4628      	mov	r0, r5
 8010822:	f000 f935 	bl	8010a90 <__swsetup_r>
 8010826:	2800      	cmp	r0, #0
 8010828:	d0dd      	beq.n	80107e6 <_puts_r+0x2e>
 801082a:	f04f 30ff 	mov.w	r0, #4294967295
 801082e:	bd70      	pop	{r4, r5, r6, pc}
 8010830:	2b00      	cmp	r3, #0
 8010832:	da04      	bge.n	801083e <_puts_r+0x86>
 8010834:	69a2      	ldr	r2, [r4, #24]
 8010836:	429a      	cmp	r2, r3
 8010838:	dc06      	bgt.n	8010848 <_puts_r+0x90>
 801083a:	290a      	cmp	r1, #10
 801083c:	d004      	beq.n	8010848 <_puts_r+0x90>
 801083e:	6823      	ldr	r3, [r4, #0]
 8010840:	1c5a      	adds	r2, r3, #1
 8010842:	6022      	str	r2, [r4, #0]
 8010844:	7019      	strb	r1, [r3, #0]
 8010846:	e7cf      	b.n	80107e8 <_puts_r+0x30>
 8010848:	4622      	mov	r2, r4
 801084a:	4628      	mov	r0, r5
 801084c:	f000 f8ce 	bl	80109ec <__swbuf_r>
 8010850:	3001      	adds	r0, #1
 8010852:	d1c9      	bne.n	80107e8 <_puts_r+0x30>
 8010854:	e7e9      	b.n	801082a <_puts_r+0x72>
 8010856:	6823      	ldr	r3, [r4, #0]
 8010858:	200a      	movs	r0, #10
 801085a:	1c5a      	adds	r2, r3, #1
 801085c:	6022      	str	r2, [r4, #0]
 801085e:	7018      	strb	r0, [r3, #0]
 8010860:	e7e5      	b.n	801082e <_puts_r+0x76>
 8010862:	bf00      	nop
 8010864:	08012014 	.word	0x08012014
 8010868:	08012034 	.word	0x08012034
 801086c:	08011ff4 	.word	0x08011ff4

08010870 <puts>:
 8010870:	4b02      	ldr	r3, [pc, #8]	; (801087c <puts+0xc>)
 8010872:	4601      	mov	r1, r0
 8010874:	6818      	ldr	r0, [r3, #0]
 8010876:	f7ff bf9f 	b.w	80107b8 <_puts_r>
 801087a:	bf00      	nop
 801087c:	20000084 	.word	0x20000084

08010880 <setbuf>:
 8010880:	2900      	cmp	r1, #0
 8010882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010886:	bf0c      	ite	eq
 8010888:	2202      	moveq	r2, #2
 801088a:	2200      	movne	r2, #0
 801088c:	f000 b800 	b.w	8010890 <setvbuf>

08010890 <setvbuf>:
 8010890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010894:	461d      	mov	r5, r3
 8010896:	4b51      	ldr	r3, [pc, #324]	; (80109dc <setvbuf+0x14c>)
 8010898:	681e      	ldr	r6, [r3, #0]
 801089a:	4604      	mov	r4, r0
 801089c:	460f      	mov	r7, r1
 801089e:	4690      	mov	r8, r2
 80108a0:	b126      	cbz	r6, 80108ac <setvbuf+0x1c>
 80108a2:	69b3      	ldr	r3, [r6, #24]
 80108a4:	b913      	cbnz	r3, 80108ac <setvbuf+0x1c>
 80108a6:	4630      	mov	r0, r6
 80108a8:	f000 fa50 	bl	8010d4c <__sinit>
 80108ac:	4b4c      	ldr	r3, [pc, #304]	; (80109e0 <setvbuf+0x150>)
 80108ae:	429c      	cmp	r4, r3
 80108b0:	d152      	bne.n	8010958 <setvbuf+0xc8>
 80108b2:	6874      	ldr	r4, [r6, #4]
 80108b4:	f1b8 0f02 	cmp.w	r8, #2
 80108b8:	d006      	beq.n	80108c8 <setvbuf+0x38>
 80108ba:	f1b8 0f01 	cmp.w	r8, #1
 80108be:	f200 8089 	bhi.w	80109d4 <setvbuf+0x144>
 80108c2:	2d00      	cmp	r5, #0
 80108c4:	f2c0 8086 	blt.w	80109d4 <setvbuf+0x144>
 80108c8:	4621      	mov	r1, r4
 80108ca:	4630      	mov	r0, r6
 80108cc:	f000 f9d4 	bl	8010c78 <_fflush_r>
 80108d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108d2:	b141      	cbz	r1, 80108e6 <setvbuf+0x56>
 80108d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80108d8:	4299      	cmp	r1, r3
 80108da:	d002      	beq.n	80108e2 <setvbuf+0x52>
 80108dc:	4630      	mov	r0, r6
 80108de:	f000 fb2b 	bl	8010f38 <_free_r>
 80108e2:	2300      	movs	r3, #0
 80108e4:	6363      	str	r3, [r4, #52]	; 0x34
 80108e6:	2300      	movs	r3, #0
 80108e8:	61a3      	str	r3, [r4, #24]
 80108ea:	6063      	str	r3, [r4, #4]
 80108ec:	89a3      	ldrh	r3, [r4, #12]
 80108ee:	061b      	lsls	r3, r3, #24
 80108f0:	d503      	bpl.n	80108fa <setvbuf+0x6a>
 80108f2:	6921      	ldr	r1, [r4, #16]
 80108f4:	4630      	mov	r0, r6
 80108f6:	f000 fb1f 	bl	8010f38 <_free_r>
 80108fa:	89a3      	ldrh	r3, [r4, #12]
 80108fc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8010900:	f023 0303 	bic.w	r3, r3, #3
 8010904:	f1b8 0f02 	cmp.w	r8, #2
 8010908:	81a3      	strh	r3, [r4, #12]
 801090a:	d05d      	beq.n	80109c8 <setvbuf+0x138>
 801090c:	ab01      	add	r3, sp, #4
 801090e:	466a      	mov	r2, sp
 8010910:	4621      	mov	r1, r4
 8010912:	4630      	mov	r0, r6
 8010914:	f000 faa4 	bl	8010e60 <__swhatbuf_r>
 8010918:	89a3      	ldrh	r3, [r4, #12]
 801091a:	4318      	orrs	r0, r3
 801091c:	81a0      	strh	r0, [r4, #12]
 801091e:	bb2d      	cbnz	r5, 801096c <setvbuf+0xdc>
 8010920:	9d00      	ldr	r5, [sp, #0]
 8010922:	4628      	mov	r0, r5
 8010924:	f000 fb00 	bl	8010f28 <malloc>
 8010928:	4607      	mov	r7, r0
 801092a:	2800      	cmp	r0, #0
 801092c:	d14e      	bne.n	80109cc <setvbuf+0x13c>
 801092e:	f8dd 9000 	ldr.w	r9, [sp]
 8010932:	45a9      	cmp	r9, r5
 8010934:	d13c      	bne.n	80109b0 <setvbuf+0x120>
 8010936:	f04f 30ff 	mov.w	r0, #4294967295
 801093a:	89a3      	ldrh	r3, [r4, #12]
 801093c:	f043 0302 	orr.w	r3, r3, #2
 8010940:	81a3      	strh	r3, [r4, #12]
 8010942:	2300      	movs	r3, #0
 8010944:	60a3      	str	r3, [r4, #8]
 8010946:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801094a:	6023      	str	r3, [r4, #0]
 801094c:	6123      	str	r3, [r4, #16]
 801094e:	2301      	movs	r3, #1
 8010950:	6163      	str	r3, [r4, #20]
 8010952:	b003      	add	sp, #12
 8010954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010958:	4b22      	ldr	r3, [pc, #136]	; (80109e4 <setvbuf+0x154>)
 801095a:	429c      	cmp	r4, r3
 801095c:	d101      	bne.n	8010962 <setvbuf+0xd2>
 801095e:	68b4      	ldr	r4, [r6, #8]
 8010960:	e7a8      	b.n	80108b4 <setvbuf+0x24>
 8010962:	4b21      	ldr	r3, [pc, #132]	; (80109e8 <setvbuf+0x158>)
 8010964:	429c      	cmp	r4, r3
 8010966:	bf08      	it	eq
 8010968:	68f4      	ldreq	r4, [r6, #12]
 801096a:	e7a3      	b.n	80108b4 <setvbuf+0x24>
 801096c:	2f00      	cmp	r7, #0
 801096e:	d0d8      	beq.n	8010922 <setvbuf+0x92>
 8010970:	69b3      	ldr	r3, [r6, #24]
 8010972:	b913      	cbnz	r3, 801097a <setvbuf+0xea>
 8010974:	4630      	mov	r0, r6
 8010976:	f000 f9e9 	bl	8010d4c <__sinit>
 801097a:	f1b8 0f01 	cmp.w	r8, #1
 801097e:	bf08      	it	eq
 8010980:	89a3      	ldrheq	r3, [r4, #12]
 8010982:	6027      	str	r7, [r4, #0]
 8010984:	bf04      	itt	eq
 8010986:	f043 0301 	orreq.w	r3, r3, #1
 801098a:	81a3      	strheq	r3, [r4, #12]
 801098c:	89a3      	ldrh	r3, [r4, #12]
 801098e:	f013 0008 	ands.w	r0, r3, #8
 8010992:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8010996:	d01b      	beq.n	80109d0 <setvbuf+0x140>
 8010998:	f013 0001 	ands.w	r0, r3, #1
 801099c:	bf18      	it	ne
 801099e:	426d      	negne	r5, r5
 80109a0:	f04f 0300 	mov.w	r3, #0
 80109a4:	bf1d      	ittte	ne
 80109a6:	60a3      	strne	r3, [r4, #8]
 80109a8:	61a5      	strne	r5, [r4, #24]
 80109aa:	4618      	movne	r0, r3
 80109ac:	60a5      	streq	r5, [r4, #8]
 80109ae:	e7d0      	b.n	8010952 <setvbuf+0xc2>
 80109b0:	4648      	mov	r0, r9
 80109b2:	f000 fab9 	bl	8010f28 <malloc>
 80109b6:	4607      	mov	r7, r0
 80109b8:	2800      	cmp	r0, #0
 80109ba:	d0bc      	beq.n	8010936 <setvbuf+0xa6>
 80109bc:	89a3      	ldrh	r3, [r4, #12]
 80109be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109c2:	81a3      	strh	r3, [r4, #12]
 80109c4:	464d      	mov	r5, r9
 80109c6:	e7d3      	b.n	8010970 <setvbuf+0xe0>
 80109c8:	2000      	movs	r0, #0
 80109ca:	e7b6      	b.n	801093a <setvbuf+0xaa>
 80109cc:	46a9      	mov	r9, r5
 80109ce:	e7f5      	b.n	80109bc <setvbuf+0x12c>
 80109d0:	60a0      	str	r0, [r4, #8]
 80109d2:	e7be      	b.n	8010952 <setvbuf+0xc2>
 80109d4:	f04f 30ff 	mov.w	r0, #4294967295
 80109d8:	e7bb      	b.n	8010952 <setvbuf+0xc2>
 80109da:	bf00      	nop
 80109dc:	20000084 	.word	0x20000084
 80109e0:	08012014 	.word	0x08012014
 80109e4:	08012034 	.word	0x08012034
 80109e8:	08011ff4 	.word	0x08011ff4

080109ec <__swbuf_r>:
 80109ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ee:	460e      	mov	r6, r1
 80109f0:	4614      	mov	r4, r2
 80109f2:	4605      	mov	r5, r0
 80109f4:	b118      	cbz	r0, 80109fe <__swbuf_r+0x12>
 80109f6:	6983      	ldr	r3, [r0, #24]
 80109f8:	b90b      	cbnz	r3, 80109fe <__swbuf_r+0x12>
 80109fa:	f000 f9a7 	bl	8010d4c <__sinit>
 80109fe:	4b21      	ldr	r3, [pc, #132]	; (8010a84 <__swbuf_r+0x98>)
 8010a00:	429c      	cmp	r4, r3
 8010a02:	d12a      	bne.n	8010a5a <__swbuf_r+0x6e>
 8010a04:	686c      	ldr	r4, [r5, #4]
 8010a06:	69a3      	ldr	r3, [r4, #24]
 8010a08:	60a3      	str	r3, [r4, #8]
 8010a0a:	89a3      	ldrh	r3, [r4, #12]
 8010a0c:	071a      	lsls	r2, r3, #28
 8010a0e:	d52e      	bpl.n	8010a6e <__swbuf_r+0x82>
 8010a10:	6923      	ldr	r3, [r4, #16]
 8010a12:	b363      	cbz	r3, 8010a6e <__swbuf_r+0x82>
 8010a14:	6923      	ldr	r3, [r4, #16]
 8010a16:	6820      	ldr	r0, [r4, #0]
 8010a18:	1ac0      	subs	r0, r0, r3
 8010a1a:	6963      	ldr	r3, [r4, #20]
 8010a1c:	b2f6      	uxtb	r6, r6
 8010a1e:	4283      	cmp	r3, r0
 8010a20:	4637      	mov	r7, r6
 8010a22:	dc04      	bgt.n	8010a2e <__swbuf_r+0x42>
 8010a24:	4621      	mov	r1, r4
 8010a26:	4628      	mov	r0, r5
 8010a28:	f000 f926 	bl	8010c78 <_fflush_r>
 8010a2c:	bb28      	cbnz	r0, 8010a7a <__swbuf_r+0x8e>
 8010a2e:	68a3      	ldr	r3, [r4, #8]
 8010a30:	3b01      	subs	r3, #1
 8010a32:	60a3      	str	r3, [r4, #8]
 8010a34:	6823      	ldr	r3, [r4, #0]
 8010a36:	1c5a      	adds	r2, r3, #1
 8010a38:	6022      	str	r2, [r4, #0]
 8010a3a:	701e      	strb	r6, [r3, #0]
 8010a3c:	6963      	ldr	r3, [r4, #20]
 8010a3e:	3001      	adds	r0, #1
 8010a40:	4283      	cmp	r3, r0
 8010a42:	d004      	beq.n	8010a4e <__swbuf_r+0x62>
 8010a44:	89a3      	ldrh	r3, [r4, #12]
 8010a46:	07db      	lsls	r3, r3, #31
 8010a48:	d519      	bpl.n	8010a7e <__swbuf_r+0x92>
 8010a4a:	2e0a      	cmp	r6, #10
 8010a4c:	d117      	bne.n	8010a7e <__swbuf_r+0x92>
 8010a4e:	4621      	mov	r1, r4
 8010a50:	4628      	mov	r0, r5
 8010a52:	f000 f911 	bl	8010c78 <_fflush_r>
 8010a56:	b190      	cbz	r0, 8010a7e <__swbuf_r+0x92>
 8010a58:	e00f      	b.n	8010a7a <__swbuf_r+0x8e>
 8010a5a:	4b0b      	ldr	r3, [pc, #44]	; (8010a88 <__swbuf_r+0x9c>)
 8010a5c:	429c      	cmp	r4, r3
 8010a5e:	d101      	bne.n	8010a64 <__swbuf_r+0x78>
 8010a60:	68ac      	ldr	r4, [r5, #8]
 8010a62:	e7d0      	b.n	8010a06 <__swbuf_r+0x1a>
 8010a64:	4b09      	ldr	r3, [pc, #36]	; (8010a8c <__swbuf_r+0xa0>)
 8010a66:	429c      	cmp	r4, r3
 8010a68:	bf08      	it	eq
 8010a6a:	68ec      	ldreq	r4, [r5, #12]
 8010a6c:	e7cb      	b.n	8010a06 <__swbuf_r+0x1a>
 8010a6e:	4621      	mov	r1, r4
 8010a70:	4628      	mov	r0, r5
 8010a72:	f000 f80d 	bl	8010a90 <__swsetup_r>
 8010a76:	2800      	cmp	r0, #0
 8010a78:	d0cc      	beq.n	8010a14 <__swbuf_r+0x28>
 8010a7a:	f04f 37ff 	mov.w	r7, #4294967295
 8010a7e:	4638      	mov	r0, r7
 8010a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a82:	bf00      	nop
 8010a84:	08012014 	.word	0x08012014
 8010a88:	08012034 	.word	0x08012034
 8010a8c:	08011ff4 	.word	0x08011ff4

08010a90 <__swsetup_r>:
 8010a90:	4b32      	ldr	r3, [pc, #200]	; (8010b5c <__swsetup_r+0xcc>)
 8010a92:	b570      	push	{r4, r5, r6, lr}
 8010a94:	681d      	ldr	r5, [r3, #0]
 8010a96:	4606      	mov	r6, r0
 8010a98:	460c      	mov	r4, r1
 8010a9a:	b125      	cbz	r5, 8010aa6 <__swsetup_r+0x16>
 8010a9c:	69ab      	ldr	r3, [r5, #24]
 8010a9e:	b913      	cbnz	r3, 8010aa6 <__swsetup_r+0x16>
 8010aa0:	4628      	mov	r0, r5
 8010aa2:	f000 f953 	bl	8010d4c <__sinit>
 8010aa6:	4b2e      	ldr	r3, [pc, #184]	; (8010b60 <__swsetup_r+0xd0>)
 8010aa8:	429c      	cmp	r4, r3
 8010aaa:	d10f      	bne.n	8010acc <__swsetup_r+0x3c>
 8010aac:	686c      	ldr	r4, [r5, #4]
 8010aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ab2:	b29a      	uxth	r2, r3
 8010ab4:	0715      	lsls	r5, r2, #28
 8010ab6:	d42c      	bmi.n	8010b12 <__swsetup_r+0x82>
 8010ab8:	06d0      	lsls	r0, r2, #27
 8010aba:	d411      	bmi.n	8010ae0 <__swsetup_r+0x50>
 8010abc:	2209      	movs	r2, #9
 8010abe:	6032      	str	r2, [r6, #0]
 8010ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ac4:	81a3      	strh	r3, [r4, #12]
 8010ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8010aca:	e03e      	b.n	8010b4a <__swsetup_r+0xba>
 8010acc:	4b25      	ldr	r3, [pc, #148]	; (8010b64 <__swsetup_r+0xd4>)
 8010ace:	429c      	cmp	r4, r3
 8010ad0:	d101      	bne.n	8010ad6 <__swsetup_r+0x46>
 8010ad2:	68ac      	ldr	r4, [r5, #8]
 8010ad4:	e7eb      	b.n	8010aae <__swsetup_r+0x1e>
 8010ad6:	4b24      	ldr	r3, [pc, #144]	; (8010b68 <__swsetup_r+0xd8>)
 8010ad8:	429c      	cmp	r4, r3
 8010ada:	bf08      	it	eq
 8010adc:	68ec      	ldreq	r4, [r5, #12]
 8010ade:	e7e6      	b.n	8010aae <__swsetup_r+0x1e>
 8010ae0:	0751      	lsls	r1, r2, #29
 8010ae2:	d512      	bpl.n	8010b0a <__swsetup_r+0x7a>
 8010ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ae6:	b141      	cbz	r1, 8010afa <__swsetup_r+0x6a>
 8010ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010aec:	4299      	cmp	r1, r3
 8010aee:	d002      	beq.n	8010af6 <__swsetup_r+0x66>
 8010af0:	4630      	mov	r0, r6
 8010af2:	f000 fa21 	bl	8010f38 <_free_r>
 8010af6:	2300      	movs	r3, #0
 8010af8:	6363      	str	r3, [r4, #52]	; 0x34
 8010afa:	89a3      	ldrh	r3, [r4, #12]
 8010afc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010b00:	81a3      	strh	r3, [r4, #12]
 8010b02:	2300      	movs	r3, #0
 8010b04:	6063      	str	r3, [r4, #4]
 8010b06:	6923      	ldr	r3, [r4, #16]
 8010b08:	6023      	str	r3, [r4, #0]
 8010b0a:	89a3      	ldrh	r3, [r4, #12]
 8010b0c:	f043 0308 	orr.w	r3, r3, #8
 8010b10:	81a3      	strh	r3, [r4, #12]
 8010b12:	6923      	ldr	r3, [r4, #16]
 8010b14:	b94b      	cbnz	r3, 8010b2a <__swsetup_r+0x9a>
 8010b16:	89a3      	ldrh	r3, [r4, #12]
 8010b18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b20:	d003      	beq.n	8010b2a <__swsetup_r+0x9a>
 8010b22:	4621      	mov	r1, r4
 8010b24:	4630      	mov	r0, r6
 8010b26:	f000 f9bf 	bl	8010ea8 <__smakebuf_r>
 8010b2a:	89a2      	ldrh	r2, [r4, #12]
 8010b2c:	f012 0301 	ands.w	r3, r2, #1
 8010b30:	d00c      	beq.n	8010b4c <__swsetup_r+0xbc>
 8010b32:	2300      	movs	r3, #0
 8010b34:	60a3      	str	r3, [r4, #8]
 8010b36:	6963      	ldr	r3, [r4, #20]
 8010b38:	425b      	negs	r3, r3
 8010b3a:	61a3      	str	r3, [r4, #24]
 8010b3c:	6923      	ldr	r3, [r4, #16]
 8010b3e:	b953      	cbnz	r3, 8010b56 <__swsetup_r+0xc6>
 8010b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b44:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010b48:	d1ba      	bne.n	8010ac0 <__swsetup_r+0x30>
 8010b4a:	bd70      	pop	{r4, r5, r6, pc}
 8010b4c:	0792      	lsls	r2, r2, #30
 8010b4e:	bf58      	it	pl
 8010b50:	6963      	ldrpl	r3, [r4, #20]
 8010b52:	60a3      	str	r3, [r4, #8]
 8010b54:	e7f2      	b.n	8010b3c <__swsetup_r+0xac>
 8010b56:	2000      	movs	r0, #0
 8010b58:	e7f7      	b.n	8010b4a <__swsetup_r+0xba>
 8010b5a:	bf00      	nop
 8010b5c:	20000084 	.word	0x20000084
 8010b60:	08012014 	.word	0x08012014
 8010b64:	08012034 	.word	0x08012034
 8010b68:	08011ff4 	.word	0x08011ff4

08010b6c <__sflush_r>:
 8010b6c:	898a      	ldrh	r2, [r1, #12]
 8010b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b72:	4605      	mov	r5, r0
 8010b74:	0710      	lsls	r0, r2, #28
 8010b76:	460c      	mov	r4, r1
 8010b78:	d458      	bmi.n	8010c2c <__sflush_r+0xc0>
 8010b7a:	684b      	ldr	r3, [r1, #4]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	dc05      	bgt.n	8010b8c <__sflush_r+0x20>
 8010b80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	dc02      	bgt.n	8010b8c <__sflush_r+0x20>
 8010b86:	2000      	movs	r0, #0
 8010b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b8e:	2e00      	cmp	r6, #0
 8010b90:	d0f9      	beq.n	8010b86 <__sflush_r+0x1a>
 8010b92:	2300      	movs	r3, #0
 8010b94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010b98:	682f      	ldr	r7, [r5, #0]
 8010b9a:	6a21      	ldr	r1, [r4, #32]
 8010b9c:	602b      	str	r3, [r5, #0]
 8010b9e:	d032      	beq.n	8010c06 <__sflush_r+0x9a>
 8010ba0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ba2:	89a3      	ldrh	r3, [r4, #12]
 8010ba4:	075a      	lsls	r2, r3, #29
 8010ba6:	d505      	bpl.n	8010bb4 <__sflush_r+0x48>
 8010ba8:	6863      	ldr	r3, [r4, #4]
 8010baa:	1ac0      	subs	r0, r0, r3
 8010bac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010bae:	b10b      	cbz	r3, 8010bb4 <__sflush_r+0x48>
 8010bb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010bb2:	1ac0      	subs	r0, r0, r3
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	4602      	mov	r2, r0
 8010bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010bba:	6a21      	ldr	r1, [r4, #32]
 8010bbc:	4628      	mov	r0, r5
 8010bbe:	47b0      	blx	r6
 8010bc0:	1c43      	adds	r3, r0, #1
 8010bc2:	89a3      	ldrh	r3, [r4, #12]
 8010bc4:	d106      	bne.n	8010bd4 <__sflush_r+0x68>
 8010bc6:	6829      	ldr	r1, [r5, #0]
 8010bc8:	291d      	cmp	r1, #29
 8010bca:	d848      	bhi.n	8010c5e <__sflush_r+0xf2>
 8010bcc:	4a29      	ldr	r2, [pc, #164]	; (8010c74 <__sflush_r+0x108>)
 8010bce:	40ca      	lsrs	r2, r1
 8010bd0:	07d6      	lsls	r6, r2, #31
 8010bd2:	d544      	bpl.n	8010c5e <__sflush_r+0xf2>
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	6062      	str	r2, [r4, #4]
 8010bd8:	04d9      	lsls	r1, r3, #19
 8010bda:	6922      	ldr	r2, [r4, #16]
 8010bdc:	6022      	str	r2, [r4, #0]
 8010bde:	d504      	bpl.n	8010bea <__sflush_r+0x7e>
 8010be0:	1c42      	adds	r2, r0, #1
 8010be2:	d101      	bne.n	8010be8 <__sflush_r+0x7c>
 8010be4:	682b      	ldr	r3, [r5, #0]
 8010be6:	b903      	cbnz	r3, 8010bea <__sflush_r+0x7e>
 8010be8:	6560      	str	r0, [r4, #84]	; 0x54
 8010bea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010bec:	602f      	str	r7, [r5, #0]
 8010bee:	2900      	cmp	r1, #0
 8010bf0:	d0c9      	beq.n	8010b86 <__sflush_r+0x1a>
 8010bf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010bf6:	4299      	cmp	r1, r3
 8010bf8:	d002      	beq.n	8010c00 <__sflush_r+0x94>
 8010bfa:	4628      	mov	r0, r5
 8010bfc:	f000 f99c 	bl	8010f38 <_free_r>
 8010c00:	2000      	movs	r0, #0
 8010c02:	6360      	str	r0, [r4, #52]	; 0x34
 8010c04:	e7c0      	b.n	8010b88 <__sflush_r+0x1c>
 8010c06:	2301      	movs	r3, #1
 8010c08:	4628      	mov	r0, r5
 8010c0a:	47b0      	blx	r6
 8010c0c:	1c41      	adds	r1, r0, #1
 8010c0e:	d1c8      	bne.n	8010ba2 <__sflush_r+0x36>
 8010c10:	682b      	ldr	r3, [r5, #0]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d0c5      	beq.n	8010ba2 <__sflush_r+0x36>
 8010c16:	2b1d      	cmp	r3, #29
 8010c18:	d001      	beq.n	8010c1e <__sflush_r+0xb2>
 8010c1a:	2b16      	cmp	r3, #22
 8010c1c:	d101      	bne.n	8010c22 <__sflush_r+0xb6>
 8010c1e:	602f      	str	r7, [r5, #0]
 8010c20:	e7b1      	b.n	8010b86 <__sflush_r+0x1a>
 8010c22:	89a3      	ldrh	r3, [r4, #12]
 8010c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c28:	81a3      	strh	r3, [r4, #12]
 8010c2a:	e7ad      	b.n	8010b88 <__sflush_r+0x1c>
 8010c2c:	690f      	ldr	r7, [r1, #16]
 8010c2e:	2f00      	cmp	r7, #0
 8010c30:	d0a9      	beq.n	8010b86 <__sflush_r+0x1a>
 8010c32:	0793      	lsls	r3, r2, #30
 8010c34:	680e      	ldr	r6, [r1, #0]
 8010c36:	bf08      	it	eq
 8010c38:	694b      	ldreq	r3, [r1, #20]
 8010c3a:	600f      	str	r7, [r1, #0]
 8010c3c:	bf18      	it	ne
 8010c3e:	2300      	movne	r3, #0
 8010c40:	eba6 0807 	sub.w	r8, r6, r7
 8010c44:	608b      	str	r3, [r1, #8]
 8010c46:	f1b8 0f00 	cmp.w	r8, #0
 8010c4a:	dd9c      	ble.n	8010b86 <__sflush_r+0x1a>
 8010c4c:	4643      	mov	r3, r8
 8010c4e:	463a      	mov	r2, r7
 8010c50:	6a21      	ldr	r1, [r4, #32]
 8010c52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010c54:	4628      	mov	r0, r5
 8010c56:	47b0      	blx	r6
 8010c58:	2800      	cmp	r0, #0
 8010c5a:	dc06      	bgt.n	8010c6a <__sflush_r+0xfe>
 8010c5c:	89a3      	ldrh	r3, [r4, #12]
 8010c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c62:	81a3      	strh	r3, [r4, #12]
 8010c64:	f04f 30ff 	mov.w	r0, #4294967295
 8010c68:	e78e      	b.n	8010b88 <__sflush_r+0x1c>
 8010c6a:	4407      	add	r7, r0
 8010c6c:	eba8 0800 	sub.w	r8, r8, r0
 8010c70:	e7e9      	b.n	8010c46 <__sflush_r+0xda>
 8010c72:	bf00      	nop
 8010c74:	20400001 	.word	0x20400001

08010c78 <_fflush_r>:
 8010c78:	b538      	push	{r3, r4, r5, lr}
 8010c7a:	690b      	ldr	r3, [r1, #16]
 8010c7c:	4605      	mov	r5, r0
 8010c7e:	460c      	mov	r4, r1
 8010c80:	b1db      	cbz	r3, 8010cba <_fflush_r+0x42>
 8010c82:	b118      	cbz	r0, 8010c8c <_fflush_r+0x14>
 8010c84:	6983      	ldr	r3, [r0, #24]
 8010c86:	b90b      	cbnz	r3, 8010c8c <_fflush_r+0x14>
 8010c88:	f000 f860 	bl	8010d4c <__sinit>
 8010c8c:	4b0c      	ldr	r3, [pc, #48]	; (8010cc0 <_fflush_r+0x48>)
 8010c8e:	429c      	cmp	r4, r3
 8010c90:	d109      	bne.n	8010ca6 <_fflush_r+0x2e>
 8010c92:	686c      	ldr	r4, [r5, #4]
 8010c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c98:	b17b      	cbz	r3, 8010cba <_fflush_r+0x42>
 8010c9a:	4621      	mov	r1, r4
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ca2:	f7ff bf63 	b.w	8010b6c <__sflush_r>
 8010ca6:	4b07      	ldr	r3, [pc, #28]	; (8010cc4 <_fflush_r+0x4c>)
 8010ca8:	429c      	cmp	r4, r3
 8010caa:	d101      	bne.n	8010cb0 <_fflush_r+0x38>
 8010cac:	68ac      	ldr	r4, [r5, #8]
 8010cae:	e7f1      	b.n	8010c94 <_fflush_r+0x1c>
 8010cb0:	4b05      	ldr	r3, [pc, #20]	; (8010cc8 <_fflush_r+0x50>)
 8010cb2:	429c      	cmp	r4, r3
 8010cb4:	bf08      	it	eq
 8010cb6:	68ec      	ldreq	r4, [r5, #12]
 8010cb8:	e7ec      	b.n	8010c94 <_fflush_r+0x1c>
 8010cba:	2000      	movs	r0, #0
 8010cbc:	bd38      	pop	{r3, r4, r5, pc}
 8010cbe:	bf00      	nop
 8010cc0:	08012014 	.word	0x08012014
 8010cc4:	08012034 	.word	0x08012034
 8010cc8:	08011ff4 	.word	0x08011ff4

08010ccc <std>:
 8010ccc:	2300      	movs	r3, #0
 8010cce:	b510      	push	{r4, lr}
 8010cd0:	4604      	mov	r4, r0
 8010cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8010cd6:	6083      	str	r3, [r0, #8]
 8010cd8:	8181      	strh	r1, [r0, #12]
 8010cda:	6643      	str	r3, [r0, #100]	; 0x64
 8010cdc:	81c2      	strh	r2, [r0, #14]
 8010cde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010ce2:	6183      	str	r3, [r0, #24]
 8010ce4:	4619      	mov	r1, r3
 8010ce6:	2208      	movs	r2, #8
 8010ce8:	305c      	adds	r0, #92	; 0x5c
 8010cea:	f7ff fd45 	bl	8010778 <memset>
 8010cee:	4b05      	ldr	r3, [pc, #20]	; (8010d04 <std+0x38>)
 8010cf0:	6263      	str	r3, [r4, #36]	; 0x24
 8010cf2:	4b05      	ldr	r3, [pc, #20]	; (8010d08 <std+0x3c>)
 8010cf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8010cf6:	4b05      	ldr	r3, [pc, #20]	; (8010d0c <std+0x40>)
 8010cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010cfa:	4b05      	ldr	r3, [pc, #20]	; (8010d10 <std+0x44>)
 8010cfc:	6224      	str	r4, [r4, #32]
 8010cfe:	6323      	str	r3, [r4, #48]	; 0x30
 8010d00:	bd10      	pop	{r4, pc}
 8010d02:	bf00      	nop
 8010d04:	08011639 	.word	0x08011639
 8010d08:	0801165b 	.word	0x0801165b
 8010d0c:	08011693 	.word	0x08011693
 8010d10:	080116b7 	.word	0x080116b7

08010d14 <_cleanup_r>:
 8010d14:	4901      	ldr	r1, [pc, #4]	; (8010d1c <_cleanup_r+0x8>)
 8010d16:	f000 b885 	b.w	8010e24 <_fwalk_reent>
 8010d1a:	bf00      	nop
 8010d1c:	08010c79 	.word	0x08010c79

08010d20 <__sfmoreglue>:
 8010d20:	b570      	push	{r4, r5, r6, lr}
 8010d22:	1e4a      	subs	r2, r1, #1
 8010d24:	2568      	movs	r5, #104	; 0x68
 8010d26:	4355      	muls	r5, r2
 8010d28:	460e      	mov	r6, r1
 8010d2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010d2e:	f000 f951 	bl	8010fd4 <_malloc_r>
 8010d32:	4604      	mov	r4, r0
 8010d34:	b140      	cbz	r0, 8010d48 <__sfmoreglue+0x28>
 8010d36:	2100      	movs	r1, #0
 8010d38:	e9c0 1600 	strd	r1, r6, [r0]
 8010d3c:	300c      	adds	r0, #12
 8010d3e:	60a0      	str	r0, [r4, #8]
 8010d40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010d44:	f7ff fd18 	bl	8010778 <memset>
 8010d48:	4620      	mov	r0, r4
 8010d4a:	bd70      	pop	{r4, r5, r6, pc}

08010d4c <__sinit>:
 8010d4c:	6983      	ldr	r3, [r0, #24]
 8010d4e:	b510      	push	{r4, lr}
 8010d50:	4604      	mov	r4, r0
 8010d52:	bb33      	cbnz	r3, 8010da2 <__sinit+0x56>
 8010d54:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010d58:	6503      	str	r3, [r0, #80]	; 0x50
 8010d5a:	4b12      	ldr	r3, [pc, #72]	; (8010da4 <__sinit+0x58>)
 8010d5c:	4a12      	ldr	r2, [pc, #72]	; (8010da8 <__sinit+0x5c>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	6282      	str	r2, [r0, #40]	; 0x28
 8010d62:	4298      	cmp	r0, r3
 8010d64:	bf04      	itt	eq
 8010d66:	2301      	moveq	r3, #1
 8010d68:	6183      	streq	r3, [r0, #24]
 8010d6a:	f000 f81f 	bl	8010dac <__sfp>
 8010d6e:	6060      	str	r0, [r4, #4]
 8010d70:	4620      	mov	r0, r4
 8010d72:	f000 f81b 	bl	8010dac <__sfp>
 8010d76:	60a0      	str	r0, [r4, #8]
 8010d78:	4620      	mov	r0, r4
 8010d7a:	f000 f817 	bl	8010dac <__sfp>
 8010d7e:	2200      	movs	r2, #0
 8010d80:	60e0      	str	r0, [r4, #12]
 8010d82:	2104      	movs	r1, #4
 8010d84:	6860      	ldr	r0, [r4, #4]
 8010d86:	f7ff ffa1 	bl	8010ccc <std>
 8010d8a:	2201      	movs	r2, #1
 8010d8c:	2109      	movs	r1, #9
 8010d8e:	68a0      	ldr	r0, [r4, #8]
 8010d90:	f7ff ff9c 	bl	8010ccc <std>
 8010d94:	2202      	movs	r2, #2
 8010d96:	2112      	movs	r1, #18
 8010d98:	68e0      	ldr	r0, [r4, #12]
 8010d9a:	f7ff ff97 	bl	8010ccc <std>
 8010d9e:	2301      	movs	r3, #1
 8010da0:	61a3      	str	r3, [r4, #24]
 8010da2:	bd10      	pop	{r4, pc}
 8010da4:	08011ff0 	.word	0x08011ff0
 8010da8:	08010d15 	.word	0x08010d15

08010dac <__sfp>:
 8010dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dae:	4b1b      	ldr	r3, [pc, #108]	; (8010e1c <__sfp+0x70>)
 8010db0:	681e      	ldr	r6, [r3, #0]
 8010db2:	69b3      	ldr	r3, [r6, #24]
 8010db4:	4607      	mov	r7, r0
 8010db6:	b913      	cbnz	r3, 8010dbe <__sfp+0x12>
 8010db8:	4630      	mov	r0, r6
 8010dba:	f7ff ffc7 	bl	8010d4c <__sinit>
 8010dbe:	3648      	adds	r6, #72	; 0x48
 8010dc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010dc4:	3b01      	subs	r3, #1
 8010dc6:	d503      	bpl.n	8010dd0 <__sfp+0x24>
 8010dc8:	6833      	ldr	r3, [r6, #0]
 8010dca:	b133      	cbz	r3, 8010dda <__sfp+0x2e>
 8010dcc:	6836      	ldr	r6, [r6, #0]
 8010dce:	e7f7      	b.n	8010dc0 <__sfp+0x14>
 8010dd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010dd4:	b16d      	cbz	r5, 8010df2 <__sfp+0x46>
 8010dd6:	3468      	adds	r4, #104	; 0x68
 8010dd8:	e7f4      	b.n	8010dc4 <__sfp+0x18>
 8010dda:	2104      	movs	r1, #4
 8010ddc:	4638      	mov	r0, r7
 8010dde:	f7ff ff9f 	bl	8010d20 <__sfmoreglue>
 8010de2:	6030      	str	r0, [r6, #0]
 8010de4:	2800      	cmp	r0, #0
 8010de6:	d1f1      	bne.n	8010dcc <__sfp+0x20>
 8010de8:	230c      	movs	r3, #12
 8010dea:	603b      	str	r3, [r7, #0]
 8010dec:	4604      	mov	r4, r0
 8010dee:	4620      	mov	r0, r4
 8010df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010df2:	4b0b      	ldr	r3, [pc, #44]	; (8010e20 <__sfp+0x74>)
 8010df4:	6665      	str	r5, [r4, #100]	; 0x64
 8010df6:	e9c4 5500 	strd	r5, r5, [r4]
 8010dfa:	60a5      	str	r5, [r4, #8]
 8010dfc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010e00:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010e04:	2208      	movs	r2, #8
 8010e06:	4629      	mov	r1, r5
 8010e08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010e0c:	f7ff fcb4 	bl	8010778 <memset>
 8010e10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010e14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010e18:	e7e9      	b.n	8010dee <__sfp+0x42>
 8010e1a:	bf00      	nop
 8010e1c:	08011ff0 	.word	0x08011ff0
 8010e20:	ffff0001 	.word	0xffff0001

08010e24 <_fwalk_reent>:
 8010e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e28:	4680      	mov	r8, r0
 8010e2a:	4689      	mov	r9, r1
 8010e2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010e30:	2600      	movs	r6, #0
 8010e32:	b914      	cbnz	r4, 8010e3a <_fwalk_reent+0x16>
 8010e34:	4630      	mov	r0, r6
 8010e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e3a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010e3e:	3f01      	subs	r7, #1
 8010e40:	d501      	bpl.n	8010e46 <_fwalk_reent+0x22>
 8010e42:	6824      	ldr	r4, [r4, #0]
 8010e44:	e7f5      	b.n	8010e32 <_fwalk_reent+0xe>
 8010e46:	89ab      	ldrh	r3, [r5, #12]
 8010e48:	2b01      	cmp	r3, #1
 8010e4a:	d907      	bls.n	8010e5c <_fwalk_reent+0x38>
 8010e4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010e50:	3301      	adds	r3, #1
 8010e52:	d003      	beq.n	8010e5c <_fwalk_reent+0x38>
 8010e54:	4629      	mov	r1, r5
 8010e56:	4640      	mov	r0, r8
 8010e58:	47c8      	blx	r9
 8010e5a:	4306      	orrs	r6, r0
 8010e5c:	3568      	adds	r5, #104	; 0x68
 8010e5e:	e7ee      	b.n	8010e3e <_fwalk_reent+0x1a>

08010e60 <__swhatbuf_r>:
 8010e60:	b570      	push	{r4, r5, r6, lr}
 8010e62:	460e      	mov	r6, r1
 8010e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e68:	2900      	cmp	r1, #0
 8010e6a:	b096      	sub	sp, #88	; 0x58
 8010e6c:	4614      	mov	r4, r2
 8010e6e:	461d      	mov	r5, r3
 8010e70:	da07      	bge.n	8010e82 <__swhatbuf_r+0x22>
 8010e72:	2300      	movs	r3, #0
 8010e74:	602b      	str	r3, [r5, #0]
 8010e76:	89b3      	ldrh	r3, [r6, #12]
 8010e78:	061a      	lsls	r2, r3, #24
 8010e7a:	d410      	bmi.n	8010e9e <__swhatbuf_r+0x3e>
 8010e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e80:	e00e      	b.n	8010ea0 <__swhatbuf_r+0x40>
 8010e82:	466a      	mov	r2, sp
 8010e84:	f000 fc3e 	bl	8011704 <_fstat_r>
 8010e88:	2800      	cmp	r0, #0
 8010e8a:	dbf2      	blt.n	8010e72 <__swhatbuf_r+0x12>
 8010e8c:	9a01      	ldr	r2, [sp, #4]
 8010e8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010e92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010e96:	425a      	negs	r2, r3
 8010e98:	415a      	adcs	r2, r3
 8010e9a:	602a      	str	r2, [r5, #0]
 8010e9c:	e7ee      	b.n	8010e7c <__swhatbuf_r+0x1c>
 8010e9e:	2340      	movs	r3, #64	; 0x40
 8010ea0:	2000      	movs	r0, #0
 8010ea2:	6023      	str	r3, [r4, #0]
 8010ea4:	b016      	add	sp, #88	; 0x58
 8010ea6:	bd70      	pop	{r4, r5, r6, pc}

08010ea8 <__smakebuf_r>:
 8010ea8:	898b      	ldrh	r3, [r1, #12]
 8010eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010eac:	079d      	lsls	r5, r3, #30
 8010eae:	4606      	mov	r6, r0
 8010eb0:	460c      	mov	r4, r1
 8010eb2:	d507      	bpl.n	8010ec4 <__smakebuf_r+0x1c>
 8010eb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010eb8:	6023      	str	r3, [r4, #0]
 8010eba:	6123      	str	r3, [r4, #16]
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	6163      	str	r3, [r4, #20]
 8010ec0:	b002      	add	sp, #8
 8010ec2:	bd70      	pop	{r4, r5, r6, pc}
 8010ec4:	ab01      	add	r3, sp, #4
 8010ec6:	466a      	mov	r2, sp
 8010ec8:	f7ff ffca 	bl	8010e60 <__swhatbuf_r>
 8010ecc:	9900      	ldr	r1, [sp, #0]
 8010ece:	4605      	mov	r5, r0
 8010ed0:	4630      	mov	r0, r6
 8010ed2:	f000 f87f 	bl	8010fd4 <_malloc_r>
 8010ed6:	b948      	cbnz	r0, 8010eec <__smakebuf_r+0x44>
 8010ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010edc:	059a      	lsls	r2, r3, #22
 8010ede:	d4ef      	bmi.n	8010ec0 <__smakebuf_r+0x18>
 8010ee0:	f023 0303 	bic.w	r3, r3, #3
 8010ee4:	f043 0302 	orr.w	r3, r3, #2
 8010ee8:	81a3      	strh	r3, [r4, #12]
 8010eea:	e7e3      	b.n	8010eb4 <__smakebuf_r+0xc>
 8010eec:	4b0d      	ldr	r3, [pc, #52]	; (8010f24 <__smakebuf_r+0x7c>)
 8010eee:	62b3      	str	r3, [r6, #40]	; 0x28
 8010ef0:	89a3      	ldrh	r3, [r4, #12]
 8010ef2:	6020      	str	r0, [r4, #0]
 8010ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ef8:	81a3      	strh	r3, [r4, #12]
 8010efa:	9b00      	ldr	r3, [sp, #0]
 8010efc:	6163      	str	r3, [r4, #20]
 8010efe:	9b01      	ldr	r3, [sp, #4]
 8010f00:	6120      	str	r0, [r4, #16]
 8010f02:	b15b      	cbz	r3, 8010f1c <__smakebuf_r+0x74>
 8010f04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f08:	4630      	mov	r0, r6
 8010f0a:	f000 fc0d 	bl	8011728 <_isatty_r>
 8010f0e:	b128      	cbz	r0, 8010f1c <__smakebuf_r+0x74>
 8010f10:	89a3      	ldrh	r3, [r4, #12]
 8010f12:	f023 0303 	bic.w	r3, r3, #3
 8010f16:	f043 0301 	orr.w	r3, r3, #1
 8010f1a:	81a3      	strh	r3, [r4, #12]
 8010f1c:	89a3      	ldrh	r3, [r4, #12]
 8010f1e:	431d      	orrs	r5, r3
 8010f20:	81a5      	strh	r5, [r4, #12]
 8010f22:	e7cd      	b.n	8010ec0 <__smakebuf_r+0x18>
 8010f24:	08010d15 	.word	0x08010d15

08010f28 <malloc>:
 8010f28:	4b02      	ldr	r3, [pc, #8]	; (8010f34 <malloc+0xc>)
 8010f2a:	4601      	mov	r1, r0
 8010f2c:	6818      	ldr	r0, [r3, #0]
 8010f2e:	f000 b851 	b.w	8010fd4 <_malloc_r>
 8010f32:	bf00      	nop
 8010f34:	20000084 	.word	0x20000084

08010f38 <_free_r>:
 8010f38:	b538      	push	{r3, r4, r5, lr}
 8010f3a:	4605      	mov	r5, r0
 8010f3c:	2900      	cmp	r1, #0
 8010f3e:	d045      	beq.n	8010fcc <_free_r+0x94>
 8010f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f44:	1f0c      	subs	r4, r1, #4
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	bfb8      	it	lt
 8010f4a:	18e4      	addlt	r4, r4, r3
 8010f4c:	f000 fc0e 	bl	801176c <__malloc_lock>
 8010f50:	4a1f      	ldr	r2, [pc, #124]	; (8010fd0 <_free_r+0x98>)
 8010f52:	6813      	ldr	r3, [r2, #0]
 8010f54:	4610      	mov	r0, r2
 8010f56:	b933      	cbnz	r3, 8010f66 <_free_r+0x2e>
 8010f58:	6063      	str	r3, [r4, #4]
 8010f5a:	6014      	str	r4, [r2, #0]
 8010f5c:	4628      	mov	r0, r5
 8010f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f62:	f000 bc04 	b.w	801176e <__malloc_unlock>
 8010f66:	42a3      	cmp	r3, r4
 8010f68:	d90c      	bls.n	8010f84 <_free_r+0x4c>
 8010f6a:	6821      	ldr	r1, [r4, #0]
 8010f6c:	1862      	adds	r2, r4, r1
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	bf04      	itt	eq
 8010f72:	681a      	ldreq	r2, [r3, #0]
 8010f74:	685b      	ldreq	r3, [r3, #4]
 8010f76:	6063      	str	r3, [r4, #4]
 8010f78:	bf04      	itt	eq
 8010f7a:	1852      	addeq	r2, r2, r1
 8010f7c:	6022      	streq	r2, [r4, #0]
 8010f7e:	6004      	str	r4, [r0, #0]
 8010f80:	e7ec      	b.n	8010f5c <_free_r+0x24>
 8010f82:	4613      	mov	r3, r2
 8010f84:	685a      	ldr	r2, [r3, #4]
 8010f86:	b10a      	cbz	r2, 8010f8c <_free_r+0x54>
 8010f88:	42a2      	cmp	r2, r4
 8010f8a:	d9fa      	bls.n	8010f82 <_free_r+0x4a>
 8010f8c:	6819      	ldr	r1, [r3, #0]
 8010f8e:	1858      	adds	r0, r3, r1
 8010f90:	42a0      	cmp	r0, r4
 8010f92:	d10b      	bne.n	8010fac <_free_r+0x74>
 8010f94:	6820      	ldr	r0, [r4, #0]
 8010f96:	4401      	add	r1, r0
 8010f98:	1858      	adds	r0, r3, r1
 8010f9a:	4282      	cmp	r2, r0
 8010f9c:	6019      	str	r1, [r3, #0]
 8010f9e:	d1dd      	bne.n	8010f5c <_free_r+0x24>
 8010fa0:	6810      	ldr	r0, [r2, #0]
 8010fa2:	6852      	ldr	r2, [r2, #4]
 8010fa4:	605a      	str	r2, [r3, #4]
 8010fa6:	4401      	add	r1, r0
 8010fa8:	6019      	str	r1, [r3, #0]
 8010faa:	e7d7      	b.n	8010f5c <_free_r+0x24>
 8010fac:	d902      	bls.n	8010fb4 <_free_r+0x7c>
 8010fae:	230c      	movs	r3, #12
 8010fb0:	602b      	str	r3, [r5, #0]
 8010fb2:	e7d3      	b.n	8010f5c <_free_r+0x24>
 8010fb4:	6820      	ldr	r0, [r4, #0]
 8010fb6:	1821      	adds	r1, r4, r0
 8010fb8:	428a      	cmp	r2, r1
 8010fba:	bf04      	itt	eq
 8010fbc:	6811      	ldreq	r1, [r2, #0]
 8010fbe:	6852      	ldreq	r2, [r2, #4]
 8010fc0:	6062      	str	r2, [r4, #4]
 8010fc2:	bf04      	itt	eq
 8010fc4:	1809      	addeq	r1, r1, r0
 8010fc6:	6021      	streq	r1, [r4, #0]
 8010fc8:	605c      	str	r4, [r3, #4]
 8010fca:	e7c7      	b.n	8010f5c <_free_r+0x24>
 8010fcc:	bd38      	pop	{r3, r4, r5, pc}
 8010fce:	bf00      	nop
 8010fd0:	20000118 	.word	0x20000118

08010fd4 <_malloc_r>:
 8010fd4:	b570      	push	{r4, r5, r6, lr}
 8010fd6:	1ccd      	adds	r5, r1, #3
 8010fd8:	f025 0503 	bic.w	r5, r5, #3
 8010fdc:	3508      	adds	r5, #8
 8010fde:	2d0c      	cmp	r5, #12
 8010fe0:	bf38      	it	cc
 8010fe2:	250c      	movcc	r5, #12
 8010fe4:	2d00      	cmp	r5, #0
 8010fe6:	4606      	mov	r6, r0
 8010fe8:	db01      	blt.n	8010fee <_malloc_r+0x1a>
 8010fea:	42a9      	cmp	r1, r5
 8010fec:	d903      	bls.n	8010ff6 <_malloc_r+0x22>
 8010fee:	230c      	movs	r3, #12
 8010ff0:	6033      	str	r3, [r6, #0]
 8010ff2:	2000      	movs	r0, #0
 8010ff4:	bd70      	pop	{r4, r5, r6, pc}
 8010ff6:	f000 fbb9 	bl	801176c <__malloc_lock>
 8010ffa:	4a21      	ldr	r2, [pc, #132]	; (8011080 <_malloc_r+0xac>)
 8010ffc:	6814      	ldr	r4, [r2, #0]
 8010ffe:	4621      	mov	r1, r4
 8011000:	b991      	cbnz	r1, 8011028 <_malloc_r+0x54>
 8011002:	4c20      	ldr	r4, [pc, #128]	; (8011084 <_malloc_r+0xb0>)
 8011004:	6823      	ldr	r3, [r4, #0]
 8011006:	b91b      	cbnz	r3, 8011010 <_malloc_r+0x3c>
 8011008:	4630      	mov	r0, r6
 801100a:	f000 fb05 	bl	8011618 <_sbrk_r>
 801100e:	6020      	str	r0, [r4, #0]
 8011010:	4629      	mov	r1, r5
 8011012:	4630      	mov	r0, r6
 8011014:	f000 fb00 	bl	8011618 <_sbrk_r>
 8011018:	1c43      	adds	r3, r0, #1
 801101a:	d124      	bne.n	8011066 <_malloc_r+0x92>
 801101c:	230c      	movs	r3, #12
 801101e:	6033      	str	r3, [r6, #0]
 8011020:	4630      	mov	r0, r6
 8011022:	f000 fba4 	bl	801176e <__malloc_unlock>
 8011026:	e7e4      	b.n	8010ff2 <_malloc_r+0x1e>
 8011028:	680b      	ldr	r3, [r1, #0]
 801102a:	1b5b      	subs	r3, r3, r5
 801102c:	d418      	bmi.n	8011060 <_malloc_r+0x8c>
 801102e:	2b0b      	cmp	r3, #11
 8011030:	d90f      	bls.n	8011052 <_malloc_r+0x7e>
 8011032:	600b      	str	r3, [r1, #0]
 8011034:	50cd      	str	r5, [r1, r3]
 8011036:	18cc      	adds	r4, r1, r3
 8011038:	4630      	mov	r0, r6
 801103a:	f000 fb98 	bl	801176e <__malloc_unlock>
 801103e:	f104 000b 	add.w	r0, r4, #11
 8011042:	1d23      	adds	r3, r4, #4
 8011044:	f020 0007 	bic.w	r0, r0, #7
 8011048:	1ac3      	subs	r3, r0, r3
 801104a:	d0d3      	beq.n	8010ff4 <_malloc_r+0x20>
 801104c:	425a      	negs	r2, r3
 801104e:	50e2      	str	r2, [r4, r3]
 8011050:	e7d0      	b.n	8010ff4 <_malloc_r+0x20>
 8011052:	428c      	cmp	r4, r1
 8011054:	684b      	ldr	r3, [r1, #4]
 8011056:	bf16      	itet	ne
 8011058:	6063      	strne	r3, [r4, #4]
 801105a:	6013      	streq	r3, [r2, #0]
 801105c:	460c      	movne	r4, r1
 801105e:	e7eb      	b.n	8011038 <_malloc_r+0x64>
 8011060:	460c      	mov	r4, r1
 8011062:	6849      	ldr	r1, [r1, #4]
 8011064:	e7cc      	b.n	8011000 <_malloc_r+0x2c>
 8011066:	1cc4      	adds	r4, r0, #3
 8011068:	f024 0403 	bic.w	r4, r4, #3
 801106c:	42a0      	cmp	r0, r4
 801106e:	d005      	beq.n	801107c <_malloc_r+0xa8>
 8011070:	1a21      	subs	r1, r4, r0
 8011072:	4630      	mov	r0, r6
 8011074:	f000 fad0 	bl	8011618 <_sbrk_r>
 8011078:	3001      	adds	r0, #1
 801107a:	d0cf      	beq.n	801101c <_malloc_r+0x48>
 801107c:	6025      	str	r5, [r4, #0]
 801107e:	e7db      	b.n	8011038 <_malloc_r+0x64>
 8011080:	20000118 	.word	0x20000118
 8011084:	2000011c 	.word	0x2000011c

08011088 <__sfputc_r>:
 8011088:	6893      	ldr	r3, [r2, #8]
 801108a:	3b01      	subs	r3, #1
 801108c:	2b00      	cmp	r3, #0
 801108e:	b410      	push	{r4}
 8011090:	6093      	str	r3, [r2, #8]
 8011092:	da08      	bge.n	80110a6 <__sfputc_r+0x1e>
 8011094:	6994      	ldr	r4, [r2, #24]
 8011096:	42a3      	cmp	r3, r4
 8011098:	db01      	blt.n	801109e <__sfputc_r+0x16>
 801109a:	290a      	cmp	r1, #10
 801109c:	d103      	bne.n	80110a6 <__sfputc_r+0x1e>
 801109e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110a2:	f7ff bca3 	b.w	80109ec <__swbuf_r>
 80110a6:	6813      	ldr	r3, [r2, #0]
 80110a8:	1c58      	adds	r0, r3, #1
 80110aa:	6010      	str	r0, [r2, #0]
 80110ac:	7019      	strb	r1, [r3, #0]
 80110ae:	4608      	mov	r0, r1
 80110b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110b4:	4770      	bx	lr

080110b6 <__sfputs_r>:
 80110b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110b8:	4606      	mov	r6, r0
 80110ba:	460f      	mov	r7, r1
 80110bc:	4614      	mov	r4, r2
 80110be:	18d5      	adds	r5, r2, r3
 80110c0:	42ac      	cmp	r4, r5
 80110c2:	d101      	bne.n	80110c8 <__sfputs_r+0x12>
 80110c4:	2000      	movs	r0, #0
 80110c6:	e007      	b.n	80110d8 <__sfputs_r+0x22>
 80110c8:	463a      	mov	r2, r7
 80110ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110ce:	4630      	mov	r0, r6
 80110d0:	f7ff ffda 	bl	8011088 <__sfputc_r>
 80110d4:	1c43      	adds	r3, r0, #1
 80110d6:	d1f3      	bne.n	80110c0 <__sfputs_r+0xa>
 80110d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080110dc <_vfiprintf_r>:
 80110dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110e0:	460c      	mov	r4, r1
 80110e2:	b09d      	sub	sp, #116	; 0x74
 80110e4:	4617      	mov	r7, r2
 80110e6:	461d      	mov	r5, r3
 80110e8:	4606      	mov	r6, r0
 80110ea:	b118      	cbz	r0, 80110f4 <_vfiprintf_r+0x18>
 80110ec:	6983      	ldr	r3, [r0, #24]
 80110ee:	b90b      	cbnz	r3, 80110f4 <_vfiprintf_r+0x18>
 80110f0:	f7ff fe2c 	bl	8010d4c <__sinit>
 80110f4:	4b7c      	ldr	r3, [pc, #496]	; (80112e8 <_vfiprintf_r+0x20c>)
 80110f6:	429c      	cmp	r4, r3
 80110f8:	d158      	bne.n	80111ac <_vfiprintf_r+0xd0>
 80110fa:	6874      	ldr	r4, [r6, #4]
 80110fc:	89a3      	ldrh	r3, [r4, #12]
 80110fe:	0718      	lsls	r0, r3, #28
 8011100:	d55e      	bpl.n	80111c0 <_vfiprintf_r+0xe4>
 8011102:	6923      	ldr	r3, [r4, #16]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d05b      	beq.n	80111c0 <_vfiprintf_r+0xe4>
 8011108:	2300      	movs	r3, #0
 801110a:	9309      	str	r3, [sp, #36]	; 0x24
 801110c:	2320      	movs	r3, #32
 801110e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011112:	2330      	movs	r3, #48	; 0x30
 8011114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011118:	9503      	str	r5, [sp, #12]
 801111a:	f04f 0b01 	mov.w	fp, #1
 801111e:	46b8      	mov	r8, r7
 8011120:	4645      	mov	r5, r8
 8011122:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011126:	b10b      	cbz	r3, 801112c <_vfiprintf_r+0x50>
 8011128:	2b25      	cmp	r3, #37	; 0x25
 801112a:	d154      	bne.n	80111d6 <_vfiprintf_r+0xfa>
 801112c:	ebb8 0a07 	subs.w	sl, r8, r7
 8011130:	d00b      	beq.n	801114a <_vfiprintf_r+0x6e>
 8011132:	4653      	mov	r3, sl
 8011134:	463a      	mov	r2, r7
 8011136:	4621      	mov	r1, r4
 8011138:	4630      	mov	r0, r6
 801113a:	f7ff ffbc 	bl	80110b6 <__sfputs_r>
 801113e:	3001      	adds	r0, #1
 8011140:	f000 80c2 	beq.w	80112c8 <_vfiprintf_r+0x1ec>
 8011144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011146:	4453      	add	r3, sl
 8011148:	9309      	str	r3, [sp, #36]	; 0x24
 801114a:	f898 3000 	ldrb.w	r3, [r8]
 801114e:	2b00      	cmp	r3, #0
 8011150:	f000 80ba 	beq.w	80112c8 <_vfiprintf_r+0x1ec>
 8011154:	2300      	movs	r3, #0
 8011156:	f04f 32ff 	mov.w	r2, #4294967295
 801115a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801115e:	9304      	str	r3, [sp, #16]
 8011160:	9307      	str	r3, [sp, #28]
 8011162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011166:	931a      	str	r3, [sp, #104]	; 0x68
 8011168:	46a8      	mov	r8, r5
 801116a:	2205      	movs	r2, #5
 801116c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011170:	485e      	ldr	r0, [pc, #376]	; (80112ec <_vfiprintf_r+0x210>)
 8011172:	f7ef f82d 	bl	80001d0 <memchr>
 8011176:	9b04      	ldr	r3, [sp, #16]
 8011178:	bb78      	cbnz	r0, 80111da <_vfiprintf_r+0xfe>
 801117a:	06d9      	lsls	r1, r3, #27
 801117c:	bf44      	itt	mi
 801117e:	2220      	movmi	r2, #32
 8011180:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011184:	071a      	lsls	r2, r3, #28
 8011186:	bf44      	itt	mi
 8011188:	222b      	movmi	r2, #43	; 0x2b
 801118a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801118e:	782a      	ldrb	r2, [r5, #0]
 8011190:	2a2a      	cmp	r2, #42	; 0x2a
 8011192:	d02a      	beq.n	80111ea <_vfiprintf_r+0x10e>
 8011194:	9a07      	ldr	r2, [sp, #28]
 8011196:	46a8      	mov	r8, r5
 8011198:	2000      	movs	r0, #0
 801119a:	250a      	movs	r5, #10
 801119c:	4641      	mov	r1, r8
 801119e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111a2:	3b30      	subs	r3, #48	; 0x30
 80111a4:	2b09      	cmp	r3, #9
 80111a6:	d969      	bls.n	801127c <_vfiprintf_r+0x1a0>
 80111a8:	b360      	cbz	r0, 8011204 <_vfiprintf_r+0x128>
 80111aa:	e024      	b.n	80111f6 <_vfiprintf_r+0x11a>
 80111ac:	4b50      	ldr	r3, [pc, #320]	; (80112f0 <_vfiprintf_r+0x214>)
 80111ae:	429c      	cmp	r4, r3
 80111b0:	d101      	bne.n	80111b6 <_vfiprintf_r+0xda>
 80111b2:	68b4      	ldr	r4, [r6, #8]
 80111b4:	e7a2      	b.n	80110fc <_vfiprintf_r+0x20>
 80111b6:	4b4f      	ldr	r3, [pc, #316]	; (80112f4 <_vfiprintf_r+0x218>)
 80111b8:	429c      	cmp	r4, r3
 80111ba:	bf08      	it	eq
 80111bc:	68f4      	ldreq	r4, [r6, #12]
 80111be:	e79d      	b.n	80110fc <_vfiprintf_r+0x20>
 80111c0:	4621      	mov	r1, r4
 80111c2:	4630      	mov	r0, r6
 80111c4:	f7ff fc64 	bl	8010a90 <__swsetup_r>
 80111c8:	2800      	cmp	r0, #0
 80111ca:	d09d      	beq.n	8011108 <_vfiprintf_r+0x2c>
 80111cc:	f04f 30ff 	mov.w	r0, #4294967295
 80111d0:	b01d      	add	sp, #116	; 0x74
 80111d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111d6:	46a8      	mov	r8, r5
 80111d8:	e7a2      	b.n	8011120 <_vfiprintf_r+0x44>
 80111da:	4a44      	ldr	r2, [pc, #272]	; (80112ec <_vfiprintf_r+0x210>)
 80111dc:	1a80      	subs	r0, r0, r2
 80111de:	fa0b f000 	lsl.w	r0, fp, r0
 80111e2:	4318      	orrs	r0, r3
 80111e4:	9004      	str	r0, [sp, #16]
 80111e6:	4645      	mov	r5, r8
 80111e8:	e7be      	b.n	8011168 <_vfiprintf_r+0x8c>
 80111ea:	9a03      	ldr	r2, [sp, #12]
 80111ec:	1d11      	adds	r1, r2, #4
 80111ee:	6812      	ldr	r2, [r2, #0]
 80111f0:	9103      	str	r1, [sp, #12]
 80111f2:	2a00      	cmp	r2, #0
 80111f4:	db01      	blt.n	80111fa <_vfiprintf_r+0x11e>
 80111f6:	9207      	str	r2, [sp, #28]
 80111f8:	e004      	b.n	8011204 <_vfiprintf_r+0x128>
 80111fa:	4252      	negs	r2, r2
 80111fc:	f043 0302 	orr.w	r3, r3, #2
 8011200:	9207      	str	r2, [sp, #28]
 8011202:	9304      	str	r3, [sp, #16]
 8011204:	f898 3000 	ldrb.w	r3, [r8]
 8011208:	2b2e      	cmp	r3, #46	; 0x2e
 801120a:	d10e      	bne.n	801122a <_vfiprintf_r+0x14e>
 801120c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011210:	2b2a      	cmp	r3, #42	; 0x2a
 8011212:	d138      	bne.n	8011286 <_vfiprintf_r+0x1aa>
 8011214:	9b03      	ldr	r3, [sp, #12]
 8011216:	1d1a      	adds	r2, r3, #4
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	9203      	str	r2, [sp, #12]
 801121c:	2b00      	cmp	r3, #0
 801121e:	bfb8      	it	lt
 8011220:	f04f 33ff 	movlt.w	r3, #4294967295
 8011224:	f108 0802 	add.w	r8, r8, #2
 8011228:	9305      	str	r3, [sp, #20]
 801122a:	4d33      	ldr	r5, [pc, #204]	; (80112f8 <_vfiprintf_r+0x21c>)
 801122c:	f898 1000 	ldrb.w	r1, [r8]
 8011230:	2203      	movs	r2, #3
 8011232:	4628      	mov	r0, r5
 8011234:	f7ee ffcc 	bl	80001d0 <memchr>
 8011238:	b140      	cbz	r0, 801124c <_vfiprintf_r+0x170>
 801123a:	2340      	movs	r3, #64	; 0x40
 801123c:	1b40      	subs	r0, r0, r5
 801123e:	fa03 f000 	lsl.w	r0, r3, r0
 8011242:	9b04      	ldr	r3, [sp, #16]
 8011244:	4303      	orrs	r3, r0
 8011246:	f108 0801 	add.w	r8, r8, #1
 801124a:	9304      	str	r3, [sp, #16]
 801124c:	f898 1000 	ldrb.w	r1, [r8]
 8011250:	482a      	ldr	r0, [pc, #168]	; (80112fc <_vfiprintf_r+0x220>)
 8011252:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011256:	2206      	movs	r2, #6
 8011258:	f108 0701 	add.w	r7, r8, #1
 801125c:	f7ee ffb8 	bl	80001d0 <memchr>
 8011260:	2800      	cmp	r0, #0
 8011262:	d037      	beq.n	80112d4 <_vfiprintf_r+0x1f8>
 8011264:	4b26      	ldr	r3, [pc, #152]	; (8011300 <_vfiprintf_r+0x224>)
 8011266:	bb1b      	cbnz	r3, 80112b0 <_vfiprintf_r+0x1d4>
 8011268:	9b03      	ldr	r3, [sp, #12]
 801126a:	3307      	adds	r3, #7
 801126c:	f023 0307 	bic.w	r3, r3, #7
 8011270:	3308      	adds	r3, #8
 8011272:	9303      	str	r3, [sp, #12]
 8011274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011276:	444b      	add	r3, r9
 8011278:	9309      	str	r3, [sp, #36]	; 0x24
 801127a:	e750      	b.n	801111e <_vfiprintf_r+0x42>
 801127c:	fb05 3202 	mla	r2, r5, r2, r3
 8011280:	2001      	movs	r0, #1
 8011282:	4688      	mov	r8, r1
 8011284:	e78a      	b.n	801119c <_vfiprintf_r+0xc0>
 8011286:	2300      	movs	r3, #0
 8011288:	f108 0801 	add.w	r8, r8, #1
 801128c:	9305      	str	r3, [sp, #20]
 801128e:	4619      	mov	r1, r3
 8011290:	250a      	movs	r5, #10
 8011292:	4640      	mov	r0, r8
 8011294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011298:	3a30      	subs	r2, #48	; 0x30
 801129a:	2a09      	cmp	r2, #9
 801129c:	d903      	bls.n	80112a6 <_vfiprintf_r+0x1ca>
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d0c3      	beq.n	801122a <_vfiprintf_r+0x14e>
 80112a2:	9105      	str	r1, [sp, #20]
 80112a4:	e7c1      	b.n	801122a <_vfiprintf_r+0x14e>
 80112a6:	fb05 2101 	mla	r1, r5, r1, r2
 80112aa:	2301      	movs	r3, #1
 80112ac:	4680      	mov	r8, r0
 80112ae:	e7f0      	b.n	8011292 <_vfiprintf_r+0x1b6>
 80112b0:	ab03      	add	r3, sp, #12
 80112b2:	9300      	str	r3, [sp, #0]
 80112b4:	4622      	mov	r2, r4
 80112b6:	4b13      	ldr	r3, [pc, #76]	; (8011304 <_vfiprintf_r+0x228>)
 80112b8:	a904      	add	r1, sp, #16
 80112ba:	4630      	mov	r0, r6
 80112bc:	f3af 8000 	nop.w
 80112c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80112c4:	4681      	mov	r9, r0
 80112c6:	d1d5      	bne.n	8011274 <_vfiprintf_r+0x198>
 80112c8:	89a3      	ldrh	r3, [r4, #12]
 80112ca:	065b      	lsls	r3, r3, #25
 80112cc:	f53f af7e 	bmi.w	80111cc <_vfiprintf_r+0xf0>
 80112d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112d2:	e77d      	b.n	80111d0 <_vfiprintf_r+0xf4>
 80112d4:	ab03      	add	r3, sp, #12
 80112d6:	9300      	str	r3, [sp, #0]
 80112d8:	4622      	mov	r2, r4
 80112da:	4b0a      	ldr	r3, [pc, #40]	; (8011304 <_vfiprintf_r+0x228>)
 80112dc:	a904      	add	r1, sp, #16
 80112de:	4630      	mov	r0, r6
 80112e0:	f000 f888 	bl	80113f4 <_printf_i>
 80112e4:	e7ec      	b.n	80112c0 <_vfiprintf_r+0x1e4>
 80112e6:	bf00      	nop
 80112e8:	08012014 	.word	0x08012014
 80112ec:	08012054 	.word	0x08012054
 80112f0:	08012034 	.word	0x08012034
 80112f4:	08011ff4 	.word	0x08011ff4
 80112f8:	0801205a 	.word	0x0801205a
 80112fc:	0801205e 	.word	0x0801205e
 8011300:	00000000 	.word	0x00000000
 8011304:	080110b7 	.word	0x080110b7

08011308 <_printf_common>:
 8011308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801130c:	4691      	mov	r9, r2
 801130e:	461f      	mov	r7, r3
 8011310:	688a      	ldr	r2, [r1, #8]
 8011312:	690b      	ldr	r3, [r1, #16]
 8011314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011318:	4293      	cmp	r3, r2
 801131a:	bfb8      	it	lt
 801131c:	4613      	movlt	r3, r2
 801131e:	f8c9 3000 	str.w	r3, [r9]
 8011322:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011326:	4606      	mov	r6, r0
 8011328:	460c      	mov	r4, r1
 801132a:	b112      	cbz	r2, 8011332 <_printf_common+0x2a>
 801132c:	3301      	adds	r3, #1
 801132e:	f8c9 3000 	str.w	r3, [r9]
 8011332:	6823      	ldr	r3, [r4, #0]
 8011334:	0699      	lsls	r1, r3, #26
 8011336:	bf42      	ittt	mi
 8011338:	f8d9 3000 	ldrmi.w	r3, [r9]
 801133c:	3302      	addmi	r3, #2
 801133e:	f8c9 3000 	strmi.w	r3, [r9]
 8011342:	6825      	ldr	r5, [r4, #0]
 8011344:	f015 0506 	ands.w	r5, r5, #6
 8011348:	d107      	bne.n	801135a <_printf_common+0x52>
 801134a:	f104 0a19 	add.w	sl, r4, #25
 801134e:	68e3      	ldr	r3, [r4, #12]
 8011350:	f8d9 2000 	ldr.w	r2, [r9]
 8011354:	1a9b      	subs	r3, r3, r2
 8011356:	42ab      	cmp	r3, r5
 8011358:	dc28      	bgt.n	80113ac <_printf_common+0xa4>
 801135a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801135e:	6822      	ldr	r2, [r4, #0]
 8011360:	3300      	adds	r3, #0
 8011362:	bf18      	it	ne
 8011364:	2301      	movne	r3, #1
 8011366:	0692      	lsls	r2, r2, #26
 8011368:	d42d      	bmi.n	80113c6 <_printf_common+0xbe>
 801136a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801136e:	4639      	mov	r1, r7
 8011370:	4630      	mov	r0, r6
 8011372:	47c0      	blx	r8
 8011374:	3001      	adds	r0, #1
 8011376:	d020      	beq.n	80113ba <_printf_common+0xb2>
 8011378:	6823      	ldr	r3, [r4, #0]
 801137a:	68e5      	ldr	r5, [r4, #12]
 801137c:	f8d9 2000 	ldr.w	r2, [r9]
 8011380:	f003 0306 	and.w	r3, r3, #6
 8011384:	2b04      	cmp	r3, #4
 8011386:	bf08      	it	eq
 8011388:	1aad      	subeq	r5, r5, r2
 801138a:	68a3      	ldr	r3, [r4, #8]
 801138c:	6922      	ldr	r2, [r4, #16]
 801138e:	bf0c      	ite	eq
 8011390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011394:	2500      	movne	r5, #0
 8011396:	4293      	cmp	r3, r2
 8011398:	bfc4      	itt	gt
 801139a:	1a9b      	subgt	r3, r3, r2
 801139c:	18ed      	addgt	r5, r5, r3
 801139e:	f04f 0900 	mov.w	r9, #0
 80113a2:	341a      	adds	r4, #26
 80113a4:	454d      	cmp	r5, r9
 80113a6:	d11a      	bne.n	80113de <_printf_common+0xd6>
 80113a8:	2000      	movs	r0, #0
 80113aa:	e008      	b.n	80113be <_printf_common+0xb6>
 80113ac:	2301      	movs	r3, #1
 80113ae:	4652      	mov	r2, sl
 80113b0:	4639      	mov	r1, r7
 80113b2:	4630      	mov	r0, r6
 80113b4:	47c0      	blx	r8
 80113b6:	3001      	adds	r0, #1
 80113b8:	d103      	bne.n	80113c2 <_printf_common+0xba>
 80113ba:	f04f 30ff 	mov.w	r0, #4294967295
 80113be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113c2:	3501      	adds	r5, #1
 80113c4:	e7c3      	b.n	801134e <_printf_common+0x46>
 80113c6:	18e1      	adds	r1, r4, r3
 80113c8:	1c5a      	adds	r2, r3, #1
 80113ca:	2030      	movs	r0, #48	; 0x30
 80113cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80113d0:	4422      	add	r2, r4
 80113d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80113d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80113da:	3302      	adds	r3, #2
 80113dc:	e7c5      	b.n	801136a <_printf_common+0x62>
 80113de:	2301      	movs	r3, #1
 80113e0:	4622      	mov	r2, r4
 80113e2:	4639      	mov	r1, r7
 80113e4:	4630      	mov	r0, r6
 80113e6:	47c0      	blx	r8
 80113e8:	3001      	adds	r0, #1
 80113ea:	d0e6      	beq.n	80113ba <_printf_common+0xb2>
 80113ec:	f109 0901 	add.w	r9, r9, #1
 80113f0:	e7d8      	b.n	80113a4 <_printf_common+0x9c>
	...

080113f4 <_printf_i>:
 80113f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80113fc:	460c      	mov	r4, r1
 80113fe:	7e09      	ldrb	r1, [r1, #24]
 8011400:	b085      	sub	sp, #20
 8011402:	296e      	cmp	r1, #110	; 0x6e
 8011404:	4617      	mov	r7, r2
 8011406:	4606      	mov	r6, r0
 8011408:	4698      	mov	r8, r3
 801140a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801140c:	f000 80b3 	beq.w	8011576 <_printf_i+0x182>
 8011410:	d822      	bhi.n	8011458 <_printf_i+0x64>
 8011412:	2963      	cmp	r1, #99	; 0x63
 8011414:	d036      	beq.n	8011484 <_printf_i+0x90>
 8011416:	d80a      	bhi.n	801142e <_printf_i+0x3a>
 8011418:	2900      	cmp	r1, #0
 801141a:	f000 80b9 	beq.w	8011590 <_printf_i+0x19c>
 801141e:	2958      	cmp	r1, #88	; 0x58
 8011420:	f000 8083 	beq.w	801152a <_printf_i+0x136>
 8011424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011428:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801142c:	e032      	b.n	8011494 <_printf_i+0xa0>
 801142e:	2964      	cmp	r1, #100	; 0x64
 8011430:	d001      	beq.n	8011436 <_printf_i+0x42>
 8011432:	2969      	cmp	r1, #105	; 0x69
 8011434:	d1f6      	bne.n	8011424 <_printf_i+0x30>
 8011436:	6820      	ldr	r0, [r4, #0]
 8011438:	6813      	ldr	r3, [r2, #0]
 801143a:	0605      	lsls	r5, r0, #24
 801143c:	f103 0104 	add.w	r1, r3, #4
 8011440:	d52a      	bpl.n	8011498 <_printf_i+0xa4>
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	6011      	str	r1, [r2, #0]
 8011446:	2b00      	cmp	r3, #0
 8011448:	da03      	bge.n	8011452 <_printf_i+0x5e>
 801144a:	222d      	movs	r2, #45	; 0x2d
 801144c:	425b      	negs	r3, r3
 801144e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011452:	486f      	ldr	r0, [pc, #444]	; (8011610 <_printf_i+0x21c>)
 8011454:	220a      	movs	r2, #10
 8011456:	e039      	b.n	80114cc <_printf_i+0xd8>
 8011458:	2973      	cmp	r1, #115	; 0x73
 801145a:	f000 809d 	beq.w	8011598 <_printf_i+0x1a4>
 801145e:	d808      	bhi.n	8011472 <_printf_i+0x7e>
 8011460:	296f      	cmp	r1, #111	; 0x6f
 8011462:	d020      	beq.n	80114a6 <_printf_i+0xb2>
 8011464:	2970      	cmp	r1, #112	; 0x70
 8011466:	d1dd      	bne.n	8011424 <_printf_i+0x30>
 8011468:	6823      	ldr	r3, [r4, #0]
 801146a:	f043 0320 	orr.w	r3, r3, #32
 801146e:	6023      	str	r3, [r4, #0]
 8011470:	e003      	b.n	801147a <_printf_i+0x86>
 8011472:	2975      	cmp	r1, #117	; 0x75
 8011474:	d017      	beq.n	80114a6 <_printf_i+0xb2>
 8011476:	2978      	cmp	r1, #120	; 0x78
 8011478:	d1d4      	bne.n	8011424 <_printf_i+0x30>
 801147a:	2378      	movs	r3, #120	; 0x78
 801147c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011480:	4864      	ldr	r0, [pc, #400]	; (8011614 <_printf_i+0x220>)
 8011482:	e055      	b.n	8011530 <_printf_i+0x13c>
 8011484:	6813      	ldr	r3, [r2, #0]
 8011486:	1d19      	adds	r1, r3, #4
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	6011      	str	r1, [r2, #0]
 801148c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011494:	2301      	movs	r3, #1
 8011496:	e08c      	b.n	80115b2 <_printf_i+0x1be>
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	6011      	str	r1, [r2, #0]
 801149c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80114a0:	bf18      	it	ne
 80114a2:	b21b      	sxthne	r3, r3
 80114a4:	e7cf      	b.n	8011446 <_printf_i+0x52>
 80114a6:	6813      	ldr	r3, [r2, #0]
 80114a8:	6825      	ldr	r5, [r4, #0]
 80114aa:	1d18      	adds	r0, r3, #4
 80114ac:	6010      	str	r0, [r2, #0]
 80114ae:	0628      	lsls	r0, r5, #24
 80114b0:	d501      	bpl.n	80114b6 <_printf_i+0xc2>
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	e002      	b.n	80114bc <_printf_i+0xc8>
 80114b6:	0668      	lsls	r0, r5, #25
 80114b8:	d5fb      	bpl.n	80114b2 <_printf_i+0xbe>
 80114ba:	881b      	ldrh	r3, [r3, #0]
 80114bc:	4854      	ldr	r0, [pc, #336]	; (8011610 <_printf_i+0x21c>)
 80114be:	296f      	cmp	r1, #111	; 0x6f
 80114c0:	bf14      	ite	ne
 80114c2:	220a      	movne	r2, #10
 80114c4:	2208      	moveq	r2, #8
 80114c6:	2100      	movs	r1, #0
 80114c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80114cc:	6865      	ldr	r5, [r4, #4]
 80114ce:	60a5      	str	r5, [r4, #8]
 80114d0:	2d00      	cmp	r5, #0
 80114d2:	f2c0 8095 	blt.w	8011600 <_printf_i+0x20c>
 80114d6:	6821      	ldr	r1, [r4, #0]
 80114d8:	f021 0104 	bic.w	r1, r1, #4
 80114dc:	6021      	str	r1, [r4, #0]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d13d      	bne.n	801155e <_printf_i+0x16a>
 80114e2:	2d00      	cmp	r5, #0
 80114e4:	f040 808e 	bne.w	8011604 <_printf_i+0x210>
 80114e8:	4665      	mov	r5, ip
 80114ea:	2a08      	cmp	r2, #8
 80114ec:	d10b      	bne.n	8011506 <_printf_i+0x112>
 80114ee:	6823      	ldr	r3, [r4, #0]
 80114f0:	07db      	lsls	r3, r3, #31
 80114f2:	d508      	bpl.n	8011506 <_printf_i+0x112>
 80114f4:	6923      	ldr	r3, [r4, #16]
 80114f6:	6862      	ldr	r2, [r4, #4]
 80114f8:	429a      	cmp	r2, r3
 80114fa:	bfde      	ittt	le
 80114fc:	2330      	movle	r3, #48	; 0x30
 80114fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011502:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011506:	ebac 0305 	sub.w	r3, ip, r5
 801150a:	6123      	str	r3, [r4, #16]
 801150c:	f8cd 8000 	str.w	r8, [sp]
 8011510:	463b      	mov	r3, r7
 8011512:	aa03      	add	r2, sp, #12
 8011514:	4621      	mov	r1, r4
 8011516:	4630      	mov	r0, r6
 8011518:	f7ff fef6 	bl	8011308 <_printf_common>
 801151c:	3001      	adds	r0, #1
 801151e:	d14d      	bne.n	80115bc <_printf_i+0x1c8>
 8011520:	f04f 30ff 	mov.w	r0, #4294967295
 8011524:	b005      	add	sp, #20
 8011526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801152a:	4839      	ldr	r0, [pc, #228]	; (8011610 <_printf_i+0x21c>)
 801152c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011530:	6813      	ldr	r3, [r2, #0]
 8011532:	6821      	ldr	r1, [r4, #0]
 8011534:	1d1d      	adds	r5, r3, #4
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	6015      	str	r5, [r2, #0]
 801153a:	060a      	lsls	r2, r1, #24
 801153c:	d50b      	bpl.n	8011556 <_printf_i+0x162>
 801153e:	07ca      	lsls	r2, r1, #31
 8011540:	bf44      	itt	mi
 8011542:	f041 0120 	orrmi.w	r1, r1, #32
 8011546:	6021      	strmi	r1, [r4, #0]
 8011548:	b91b      	cbnz	r3, 8011552 <_printf_i+0x15e>
 801154a:	6822      	ldr	r2, [r4, #0]
 801154c:	f022 0220 	bic.w	r2, r2, #32
 8011550:	6022      	str	r2, [r4, #0]
 8011552:	2210      	movs	r2, #16
 8011554:	e7b7      	b.n	80114c6 <_printf_i+0xd2>
 8011556:	064d      	lsls	r5, r1, #25
 8011558:	bf48      	it	mi
 801155a:	b29b      	uxthmi	r3, r3
 801155c:	e7ef      	b.n	801153e <_printf_i+0x14a>
 801155e:	4665      	mov	r5, ip
 8011560:	fbb3 f1f2 	udiv	r1, r3, r2
 8011564:	fb02 3311 	mls	r3, r2, r1, r3
 8011568:	5cc3      	ldrb	r3, [r0, r3]
 801156a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801156e:	460b      	mov	r3, r1
 8011570:	2900      	cmp	r1, #0
 8011572:	d1f5      	bne.n	8011560 <_printf_i+0x16c>
 8011574:	e7b9      	b.n	80114ea <_printf_i+0xf6>
 8011576:	6813      	ldr	r3, [r2, #0]
 8011578:	6825      	ldr	r5, [r4, #0]
 801157a:	6961      	ldr	r1, [r4, #20]
 801157c:	1d18      	adds	r0, r3, #4
 801157e:	6010      	str	r0, [r2, #0]
 8011580:	0628      	lsls	r0, r5, #24
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	d501      	bpl.n	801158a <_printf_i+0x196>
 8011586:	6019      	str	r1, [r3, #0]
 8011588:	e002      	b.n	8011590 <_printf_i+0x19c>
 801158a:	066a      	lsls	r2, r5, #25
 801158c:	d5fb      	bpl.n	8011586 <_printf_i+0x192>
 801158e:	8019      	strh	r1, [r3, #0]
 8011590:	2300      	movs	r3, #0
 8011592:	6123      	str	r3, [r4, #16]
 8011594:	4665      	mov	r5, ip
 8011596:	e7b9      	b.n	801150c <_printf_i+0x118>
 8011598:	6813      	ldr	r3, [r2, #0]
 801159a:	1d19      	adds	r1, r3, #4
 801159c:	6011      	str	r1, [r2, #0]
 801159e:	681d      	ldr	r5, [r3, #0]
 80115a0:	6862      	ldr	r2, [r4, #4]
 80115a2:	2100      	movs	r1, #0
 80115a4:	4628      	mov	r0, r5
 80115a6:	f7ee fe13 	bl	80001d0 <memchr>
 80115aa:	b108      	cbz	r0, 80115b0 <_printf_i+0x1bc>
 80115ac:	1b40      	subs	r0, r0, r5
 80115ae:	6060      	str	r0, [r4, #4]
 80115b0:	6863      	ldr	r3, [r4, #4]
 80115b2:	6123      	str	r3, [r4, #16]
 80115b4:	2300      	movs	r3, #0
 80115b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80115ba:	e7a7      	b.n	801150c <_printf_i+0x118>
 80115bc:	6923      	ldr	r3, [r4, #16]
 80115be:	462a      	mov	r2, r5
 80115c0:	4639      	mov	r1, r7
 80115c2:	4630      	mov	r0, r6
 80115c4:	47c0      	blx	r8
 80115c6:	3001      	adds	r0, #1
 80115c8:	d0aa      	beq.n	8011520 <_printf_i+0x12c>
 80115ca:	6823      	ldr	r3, [r4, #0]
 80115cc:	079b      	lsls	r3, r3, #30
 80115ce:	d413      	bmi.n	80115f8 <_printf_i+0x204>
 80115d0:	68e0      	ldr	r0, [r4, #12]
 80115d2:	9b03      	ldr	r3, [sp, #12]
 80115d4:	4298      	cmp	r0, r3
 80115d6:	bfb8      	it	lt
 80115d8:	4618      	movlt	r0, r3
 80115da:	e7a3      	b.n	8011524 <_printf_i+0x130>
 80115dc:	2301      	movs	r3, #1
 80115de:	464a      	mov	r2, r9
 80115e0:	4639      	mov	r1, r7
 80115e2:	4630      	mov	r0, r6
 80115e4:	47c0      	blx	r8
 80115e6:	3001      	adds	r0, #1
 80115e8:	d09a      	beq.n	8011520 <_printf_i+0x12c>
 80115ea:	3501      	adds	r5, #1
 80115ec:	68e3      	ldr	r3, [r4, #12]
 80115ee:	9a03      	ldr	r2, [sp, #12]
 80115f0:	1a9b      	subs	r3, r3, r2
 80115f2:	42ab      	cmp	r3, r5
 80115f4:	dcf2      	bgt.n	80115dc <_printf_i+0x1e8>
 80115f6:	e7eb      	b.n	80115d0 <_printf_i+0x1dc>
 80115f8:	2500      	movs	r5, #0
 80115fa:	f104 0919 	add.w	r9, r4, #25
 80115fe:	e7f5      	b.n	80115ec <_printf_i+0x1f8>
 8011600:	2b00      	cmp	r3, #0
 8011602:	d1ac      	bne.n	801155e <_printf_i+0x16a>
 8011604:	7803      	ldrb	r3, [r0, #0]
 8011606:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801160a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801160e:	e76c      	b.n	80114ea <_printf_i+0xf6>
 8011610:	08012065 	.word	0x08012065
 8011614:	08012076 	.word	0x08012076

08011618 <_sbrk_r>:
 8011618:	b538      	push	{r3, r4, r5, lr}
 801161a:	4c06      	ldr	r4, [pc, #24]	; (8011634 <_sbrk_r+0x1c>)
 801161c:	2300      	movs	r3, #0
 801161e:	4605      	mov	r5, r0
 8011620:	4608      	mov	r0, r1
 8011622:	6023      	str	r3, [r4, #0]
 8011624:	f7fe fff2 	bl	801060c <_sbrk>
 8011628:	1c43      	adds	r3, r0, #1
 801162a:	d102      	bne.n	8011632 <_sbrk_r+0x1a>
 801162c:	6823      	ldr	r3, [r4, #0]
 801162e:	b103      	cbz	r3, 8011632 <_sbrk_r+0x1a>
 8011630:	602b      	str	r3, [r5, #0]
 8011632:	bd38      	pop	{r3, r4, r5, pc}
 8011634:	200015e4 	.word	0x200015e4

08011638 <__sread>:
 8011638:	b510      	push	{r4, lr}
 801163a:	460c      	mov	r4, r1
 801163c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011640:	f000 f896 	bl	8011770 <_read_r>
 8011644:	2800      	cmp	r0, #0
 8011646:	bfab      	itete	ge
 8011648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801164a:	89a3      	ldrhlt	r3, [r4, #12]
 801164c:	181b      	addge	r3, r3, r0
 801164e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011652:	bfac      	ite	ge
 8011654:	6563      	strge	r3, [r4, #84]	; 0x54
 8011656:	81a3      	strhlt	r3, [r4, #12]
 8011658:	bd10      	pop	{r4, pc}

0801165a <__swrite>:
 801165a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801165e:	461f      	mov	r7, r3
 8011660:	898b      	ldrh	r3, [r1, #12]
 8011662:	05db      	lsls	r3, r3, #23
 8011664:	4605      	mov	r5, r0
 8011666:	460c      	mov	r4, r1
 8011668:	4616      	mov	r6, r2
 801166a:	d505      	bpl.n	8011678 <__swrite+0x1e>
 801166c:	2302      	movs	r3, #2
 801166e:	2200      	movs	r2, #0
 8011670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011674:	f000 f868 	bl	8011748 <_lseek_r>
 8011678:	89a3      	ldrh	r3, [r4, #12]
 801167a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801167e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011682:	81a3      	strh	r3, [r4, #12]
 8011684:	4632      	mov	r2, r6
 8011686:	463b      	mov	r3, r7
 8011688:	4628      	mov	r0, r5
 801168a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801168e:	f000 b817 	b.w	80116c0 <_write_r>

08011692 <__sseek>:
 8011692:	b510      	push	{r4, lr}
 8011694:	460c      	mov	r4, r1
 8011696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801169a:	f000 f855 	bl	8011748 <_lseek_r>
 801169e:	1c43      	adds	r3, r0, #1
 80116a0:	89a3      	ldrh	r3, [r4, #12]
 80116a2:	bf15      	itete	ne
 80116a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80116a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80116aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80116ae:	81a3      	strheq	r3, [r4, #12]
 80116b0:	bf18      	it	ne
 80116b2:	81a3      	strhne	r3, [r4, #12]
 80116b4:	bd10      	pop	{r4, pc}

080116b6 <__sclose>:
 80116b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116ba:	f000 b813 	b.w	80116e4 <_close_r>
	...

080116c0 <_write_r>:
 80116c0:	b538      	push	{r3, r4, r5, lr}
 80116c2:	4c07      	ldr	r4, [pc, #28]	; (80116e0 <_write_r+0x20>)
 80116c4:	4605      	mov	r5, r0
 80116c6:	4608      	mov	r0, r1
 80116c8:	4611      	mov	r1, r2
 80116ca:	2200      	movs	r2, #0
 80116cc:	6022      	str	r2, [r4, #0]
 80116ce:	461a      	mov	r2, r3
 80116d0:	f7fe ff4b 	bl	801056a <_write>
 80116d4:	1c43      	adds	r3, r0, #1
 80116d6:	d102      	bne.n	80116de <_write_r+0x1e>
 80116d8:	6823      	ldr	r3, [r4, #0]
 80116da:	b103      	cbz	r3, 80116de <_write_r+0x1e>
 80116dc:	602b      	str	r3, [r5, #0]
 80116de:	bd38      	pop	{r3, r4, r5, pc}
 80116e0:	200015e4 	.word	0x200015e4

080116e4 <_close_r>:
 80116e4:	b538      	push	{r3, r4, r5, lr}
 80116e6:	4c06      	ldr	r4, [pc, #24]	; (8011700 <_close_r+0x1c>)
 80116e8:	2300      	movs	r3, #0
 80116ea:	4605      	mov	r5, r0
 80116ec:	4608      	mov	r0, r1
 80116ee:	6023      	str	r3, [r4, #0]
 80116f0:	f7fe ff57 	bl	80105a2 <_close>
 80116f4:	1c43      	adds	r3, r0, #1
 80116f6:	d102      	bne.n	80116fe <_close_r+0x1a>
 80116f8:	6823      	ldr	r3, [r4, #0]
 80116fa:	b103      	cbz	r3, 80116fe <_close_r+0x1a>
 80116fc:	602b      	str	r3, [r5, #0]
 80116fe:	bd38      	pop	{r3, r4, r5, pc}
 8011700:	200015e4 	.word	0x200015e4

08011704 <_fstat_r>:
 8011704:	b538      	push	{r3, r4, r5, lr}
 8011706:	4c07      	ldr	r4, [pc, #28]	; (8011724 <_fstat_r+0x20>)
 8011708:	2300      	movs	r3, #0
 801170a:	4605      	mov	r5, r0
 801170c:	4608      	mov	r0, r1
 801170e:	4611      	mov	r1, r2
 8011710:	6023      	str	r3, [r4, #0]
 8011712:	f7fe ff52 	bl	80105ba <_fstat>
 8011716:	1c43      	adds	r3, r0, #1
 8011718:	d102      	bne.n	8011720 <_fstat_r+0x1c>
 801171a:	6823      	ldr	r3, [r4, #0]
 801171c:	b103      	cbz	r3, 8011720 <_fstat_r+0x1c>
 801171e:	602b      	str	r3, [r5, #0]
 8011720:	bd38      	pop	{r3, r4, r5, pc}
 8011722:	bf00      	nop
 8011724:	200015e4 	.word	0x200015e4

08011728 <_isatty_r>:
 8011728:	b538      	push	{r3, r4, r5, lr}
 801172a:	4c06      	ldr	r4, [pc, #24]	; (8011744 <_isatty_r+0x1c>)
 801172c:	2300      	movs	r3, #0
 801172e:	4605      	mov	r5, r0
 8011730:	4608      	mov	r0, r1
 8011732:	6023      	str	r3, [r4, #0]
 8011734:	f7fe ff51 	bl	80105da <_isatty>
 8011738:	1c43      	adds	r3, r0, #1
 801173a:	d102      	bne.n	8011742 <_isatty_r+0x1a>
 801173c:	6823      	ldr	r3, [r4, #0]
 801173e:	b103      	cbz	r3, 8011742 <_isatty_r+0x1a>
 8011740:	602b      	str	r3, [r5, #0]
 8011742:	bd38      	pop	{r3, r4, r5, pc}
 8011744:	200015e4 	.word	0x200015e4

08011748 <_lseek_r>:
 8011748:	b538      	push	{r3, r4, r5, lr}
 801174a:	4c07      	ldr	r4, [pc, #28]	; (8011768 <_lseek_r+0x20>)
 801174c:	4605      	mov	r5, r0
 801174e:	4608      	mov	r0, r1
 8011750:	4611      	mov	r1, r2
 8011752:	2200      	movs	r2, #0
 8011754:	6022      	str	r2, [r4, #0]
 8011756:	461a      	mov	r2, r3
 8011758:	f7fe ff4a 	bl	80105f0 <_lseek>
 801175c:	1c43      	adds	r3, r0, #1
 801175e:	d102      	bne.n	8011766 <_lseek_r+0x1e>
 8011760:	6823      	ldr	r3, [r4, #0]
 8011762:	b103      	cbz	r3, 8011766 <_lseek_r+0x1e>
 8011764:	602b      	str	r3, [r5, #0]
 8011766:	bd38      	pop	{r3, r4, r5, pc}
 8011768:	200015e4 	.word	0x200015e4

0801176c <__malloc_lock>:
 801176c:	4770      	bx	lr

0801176e <__malloc_unlock>:
 801176e:	4770      	bx	lr

08011770 <_read_r>:
 8011770:	b538      	push	{r3, r4, r5, lr}
 8011772:	4c07      	ldr	r4, [pc, #28]	; (8011790 <_read_r+0x20>)
 8011774:	4605      	mov	r5, r0
 8011776:	4608      	mov	r0, r1
 8011778:	4611      	mov	r1, r2
 801177a:	2200      	movs	r2, #0
 801177c:	6022      	str	r2, [r4, #0]
 801177e:	461a      	mov	r2, r3
 8011780:	f7fe fed6 	bl	8010530 <_read>
 8011784:	1c43      	adds	r3, r0, #1
 8011786:	d102      	bne.n	801178e <_read_r+0x1e>
 8011788:	6823      	ldr	r3, [r4, #0]
 801178a:	b103      	cbz	r3, 801178e <_read_r+0x1e>
 801178c:	602b      	str	r3, [r5, #0]
 801178e:	bd38      	pop	{r3, r4, r5, pc}
 8011790:	200015e4 	.word	0x200015e4

08011794 <sqrt>:
 8011794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011798:	ed2d 8b02 	vpush	{d8}
 801179c:	b08b      	sub	sp, #44	; 0x2c
 801179e:	ec55 4b10 	vmov	r4, r5, d0
 80117a2:	f000 f851 	bl	8011848 <__ieee754_sqrt>
 80117a6:	4b26      	ldr	r3, [pc, #152]	; (8011840 <sqrt+0xac>)
 80117a8:	eeb0 8a40 	vmov.f32	s16, s0
 80117ac:	eef0 8a60 	vmov.f32	s17, s1
 80117b0:	f993 6000 	ldrsb.w	r6, [r3]
 80117b4:	1c73      	adds	r3, r6, #1
 80117b6:	d02a      	beq.n	801180e <sqrt+0x7a>
 80117b8:	4622      	mov	r2, r4
 80117ba:	462b      	mov	r3, r5
 80117bc:	4620      	mov	r0, r4
 80117be:	4629      	mov	r1, r5
 80117c0:	f7ef f9ac 	bl	8000b1c <__aeabi_dcmpun>
 80117c4:	4607      	mov	r7, r0
 80117c6:	bb10      	cbnz	r0, 801180e <sqrt+0x7a>
 80117c8:	f04f 0800 	mov.w	r8, #0
 80117cc:	f04f 0900 	mov.w	r9, #0
 80117d0:	4642      	mov	r2, r8
 80117d2:	464b      	mov	r3, r9
 80117d4:	4620      	mov	r0, r4
 80117d6:	4629      	mov	r1, r5
 80117d8:	f7ef f978 	bl	8000acc <__aeabi_dcmplt>
 80117dc:	b1b8      	cbz	r0, 801180e <sqrt+0x7a>
 80117de:	2301      	movs	r3, #1
 80117e0:	9300      	str	r3, [sp, #0]
 80117e2:	4b18      	ldr	r3, [pc, #96]	; (8011844 <sqrt+0xb0>)
 80117e4:	9301      	str	r3, [sp, #4]
 80117e6:	9708      	str	r7, [sp, #32]
 80117e8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80117ec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80117f0:	b9b6      	cbnz	r6, 8011820 <sqrt+0x8c>
 80117f2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80117f6:	4668      	mov	r0, sp
 80117f8:	f000 f8d6 	bl	80119a8 <matherr>
 80117fc:	b1d0      	cbz	r0, 8011834 <sqrt+0xa0>
 80117fe:	9b08      	ldr	r3, [sp, #32]
 8011800:	b11b      	cbz	r3, 801180a <sqrt+0x76>
 8011802:	f7fe ff8f 	bl	8010724 <__errno>
 8011806:	9b08      	ldr	r3, [sp, #32]
 8011808:	6003      	str	r3, [r0, #0]
 801180a:	ed9d 8b06 	vldr	d8, [sp, #24]
 801180e:	eeb0 0a48 	vmov.f32	s0, s16
 8011812:	eef0 0a68 	vmov.f32	s1, s17
 8011816:	b00b      	add	sp, #44	; 0x2c
 8011818:	ecbd 8b02 	vpop	{d8}
 801181c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011820:	4642      	mov	r2, r8
 8011822:	464b      	mov	r3, r9
 8011824:	4640      	mov	r0, r8
 8011826:	4649      	mov	r1, r9
 8011828:	f7ef f808 	bl	800083c <__aeabi_ddiv>
 801182c:	2e02      	cmp	r6, #2
 801182e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011832:	d1e0      	bne.n	80117f6 <sqrt+0x62>
 8011834:	f7fe ff76 	bl	8010724 <__errno>
 8011838:	2321      	movs	r3, #33	; 0x21
 801183a:	6003      	str	r3, [r0, #0]
 801183c:	e7df      	b.n	80117fe <sqrt+0x6a>
 801183e:	bf00      	nop
 8011840:	200000e8 	.word	0x200000e8
 8011844:	08012087 	.word	0x08012087

08011848 <__ieee754_sqrt>:
 8011848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801184c:	4955      	ldr	r1, [pc, #340]	; (80119a4 <__ieee754_sqrt+0x15c>)
 801184e:	ec55 4b10 	vmov	r4, r5, d0
 8011852:	43a9      	bics	r1, r5
 8011854:	462b      	mov	r3, r5
 8011856:	462a      	mov	r2, r5
 8011858:	d112      	bne.n	8011880 <__ieee754_sqrt+0x38>
 801185a:	ee10 2a10 	vmov	r2, s0
 801185e:	ee10 0a10 	vmov	r0, s0
 8011862:	4629      	mov	r1, r5
 8011864:	f7ee fec0 	bl	80005e8 <__aeabi_dmul>
 8011868:	4602      	mov	r2, r0
 801186a:	460b      	mov	r3, r1
 801186c:	4620      	mov	r0, r4
 801186e:	4629      	mov	r1, r5
 8011870:	f7ee fd04 	bl	800027c <__adddf3>
 8011874:	4604      	mov	r4, r0
 8011876:	460d      	mov	r5, r1
 8011878:	ec45 4b10 	vmov	d0, r4, r5
 801187c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011880:	2d00      	cmp	r5, #0
 8011882:	ee10 0a10 	vmov	r0, s0
 8011886:	4621      	mov	r1, r4
 8011888:	dc0f      	bgt.n	80118aa <__ieee754_sqrt+0x62>
 801188a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801188e:	4330      	orrs	r0, r6
 8011890:	d0f2      	beq.n	8011878 <__ieee754_sqrt+0x30>
 8011892:	b155      	cbz	r5, 80118aa <__ieee754_sqrt+0x62>
 8011894:	ee10 2a10 	vmov	r2, s0
 8011898:	4620      	mov	r0, r4
 801189a:	4629      	mov	r1, r5
 801189c:	f7ee fcec 	bl	8000278 <__aeabi_dsub>
 80118a0:	4602      	mov	r2, r0
 80118a2:	460b      	mov	r3, r1
 80118a4:	f7ee ffca 	bl	800083c <__aeabi_ddiv>
 80118a8:	e7e4      	b.n	8011874 <__ieee754_sqrt+0x2c>
 80118aa:	151b      	asrs	r3, r3, #20
 80118ac:	d073      	beq.n	8011996 <__ieee754_sqrt+0x14e>
 80118ae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80118b2:	07dd      	lsls	r5, r3, #31
 80118b4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80118b8:	bf48      	it	mi
 80118ba:	0fc8      	lsrmi	r0, r1, #31
 80118bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80118c0:	bf44      	itt	mi
 80118c2:	0049      	lslmi	r1, r1, #1
 80118c4:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80118c8:	2500      	movs	r5, #0
 80118ca:	1058      	asrs	r0, r3, #1
 80118cc:	0fcb      	lsrs	r3, r1, #31
 80118ce:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80118d2:	0049      	lsls	r1, r1, #1
 80118d4:	2316      	movs	r3, #22
 80118d6:	462c      	mov	r4, r5
 80118d8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80118dc:	19a7      	adds	r7, r4, r6
 80118de:	4297      	cmp	r7, r2
 80118e0:	bfde      	ittt	le
 80118e2:	19bc      	addle	r4, r7, r6
 80118e4:	1bd2      	suble	r2, r2, r7
 80118e6:	19ad      	addle	r5, r5, r6
 80118e8:	0fcf      	lsrs	r7, r1, #31
 80118ea:	3b01      	subs	r3, #1
 80118ec:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80118f0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80118f4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80118f8:	d1f0      	bne.n	80118dc <__ieee754_sqrt+0x94>
 80118fa:	f04f 0c20 	mov.w	ip, #32
 80118fe:	469e      	mov	lr, r3
 8011900:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011904:	42a2      	cmp	r2, r4
 8011906:	eb06 070e 	add.w	r7, r6, lr
 801190a:	dc02      	bgt.n	8011912 <__ieee754_sqrt+0xca>
 801190c:	d112      	bne.n	8011934 <__ieee754_sqrt+0xec>
 801190e:	428f      	cmp	r7, r1
 8011910:	d810      	bhi.n	8011934 <__ieee754_sqrt+0xec>
 8011912:	2f00      	cmp	r7, #0
 8011914:	eb07 0e06 	add.w	lr, r7, r6
 8011918:	da42      	bge.n	80119a0 <__ieee754_sqrt+0x158>
 801191a:	f1be 0f00 	cmp.w	lr, #0
 801191e:	db3f      	blt.n	80119a0 <__ieee754_sqrt+0x158>
 8011920:	f104 0801 	add.w	r8, r4, #1
 8011924:	1b12      	subs	r2, r2, r4
 8011926:	428f      	cmp	r7, r1
 8011928:	bf88      	it	hi
 801192a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801192e:	1bc9      	subs	r1, r1, r7
 8011930:	4433      	add	r3, r6
 8011932:	4644      	mov	r4, r8
 8011934:	0052      	lsls	r2, r2, #1
 8011936:	f1bc 0c01 	subs.w	ip, ip, #1
 801193a:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801193e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011942:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011946:	d1dd      	bne.n	8011904 <__ieee754_sqrt+0xbc>
 8011948:	430a      	orrs	r2, r1
 801194a:	d006      	beq.n	801195a <__ieee754_sqrt+0x112>
 801194c:	1c5c      	adds	r4, r3, #1
 801194e:	bf13      	iteet	ne
 8011950:	3301      	addne	r3, #1
 8011952:	3501      	addeq	r5, #1
 8011954:	4663      	moveq	r3, ip
 8011956:	f023 0301 	bicne.w	r3, r3, #1
 801195a:	106a      	asrs	r2, r5, #1
 801195c:	085b      	lsrs	r3, r3, #1
 801195e:	07e9      	lsls	r1, r5, #31
 8011960:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011964:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011968:	bf48      	it	mi
 801196a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801196e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8011972:	461c      	mov	r4, r3
 8011974:	e780      	b.n	8011878 <__ieee754_sqrt+0x30>
 8011976:	0aca      	lsrs	r2, r1, #11
 8011978:	3815      	subs	r0, #21
 801197a:	0549      	lsls	r1, r1, #21
 801197c:	2a00      	cmp	r2, #0
 801197e:	d0fa      	beq.n	8011976 <__ieee754_sqrt+0x12e>
 8011980:	02d6      	lsls	r6, r2, #11
 8011982:	d50a      	bpl.n	801199a <__ieee754_sqrt+0x152>
 8011984:	f1c3 0420 	rsb	r4, r3, #32
 8011988:	fa21 f404 	lsr.w	r4, r1, r4
 801198c:	1e5d      	subs	r5, r3, #1
 801198e:	4099      	lsls	r1, r3
 8011990:	4322      	orrs	r2, r4
 8011992:	1b43      	subs	r3, r0, r5
 8011994:	e78b      	b.n	80118ae <__ieee754_sqrt+0x66>
 8011996:	4618      	mov	r0, r3
 8011998:	e7f0      	b.n	801197c <__ieee754_sqrt+0x134>
 801199a:	0052      	lsls	r2, r2, #1
 801199c:	3301      	adds	r3, #1
 801199e:	e7ef      	b.n	8011980 <__ieee754_sqrt+0x138>
 80119a0:	46a0      	mov	r8, r4
 80119a2:	e7bf      	b.n	8011924 <__ieee754_sqrt+0xdc>
 80119a4:	7ff00000 	.word	0x7ff00000

080119a8 <matherr>:
 80119a8:	2000      	movs	r0, #0
 80119aa:	4770      	bx	lr

080119ac <_init>:
 80119ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ae:	bf00      	nop
 80119b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119b2:	bc08      	pop	{r3}
 80119b4:	469e      	mov	lr, r3
 80119b6:	4770      	bx	lr

080119b8 <_fini>:
 80119b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ba:	bf00      	nop
 80119bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119be:	bc08      	pop	{r3}
 80119c0:	469e      	mov	lr, r3
 80119c2:	4770      	bx	lr
