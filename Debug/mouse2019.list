
mouse2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000137ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  0801397c  0801397c  0002397c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f4c  08013f4c  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08013f4c  08013f4c  00023f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f54  08013f54  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f54  08013f54  00023f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013f58  08013f58  00023f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08013f5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014f0  200000ec  08014048  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015dc  08014048  000315dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e74  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030ac  00000000  00000000  00046f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001400  00000000  00000000  0004a040  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b0  00000000  00000000  0004b440  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022bf9  00000000  00000000  0004c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010d99  00000000  00000000  0006f2e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8997  00000000  00000000  00080082  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00148a19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d74  00000000  00000000  00148a94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ec 	.word	0x200000ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013964 	.word	0x08013964

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	08013964 	.word	0x08013964

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_Init+0x40>)
 8000f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_Init+0x40>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x40>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 fd07 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f011 f83a 	bl	8011fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fd1f 	bl	80019de <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 fce7 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000080 	.word	0x20000080
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004
 8001000:	20000120 	.word	0x20000120

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000120 	.word	0x20000120

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_Delay+0x40>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e033      	b.n	80010de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f010 ffd8 	bl	8012034 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d118      	bne.n	80010d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a6:	f023 0302 	bic.w	r3, r3, #2
 80010aa:	f043 0202 	orr.w	r2, r3, #2
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fa92 	bl	80015dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
 80010ce:	e001      	b.n	80010d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Start+0x1a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e0a5      	b.n	800124e <HAL_ADC_Start+0x166>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d018      	beq.n	800114a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001128:	4b4c      	ldr	r3, [pc, #304]	; (800125c <HAL_ADC_Start+0x174>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_ADC_Start+0x178>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9a      	lsrs	r2, r3, #18
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800113c:	e002      	b.n	8001144 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3b01      	subs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d179      	bne.n	800124c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001182:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001196:	d106      	bne.n	80011a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f023 0206 	bic.w	r2, r3, #6
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d12a      	bne.n	8001224 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_ADC_Start+0x180>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d015      	beq.n	8001204 <HAL_ADC_Start+0x11c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_ADC_Start+0x184>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d105      	bne.n	80011ee <HAL_ADC_Start+0x106>
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00a      	beq.n	8001204 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_ADC_Start+0x188>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d129      	bne.n	800124c <HAL_ADC_Start+0x164>
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d823      	bhi.n	800124c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11c      	bne.n	800124c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	e013      	b.n	800124c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_ADC_Start+0x180>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_ADC_Start+0x164>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800124a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000080 	.word	0x20000080
 8001260:	431bde83 	.word	0x431bde83
 8001264:	40012300 	.word	0x40012300
 8001268:	40012000 	.word	0x40012000
 800126c:	40012100 	.word	0x40012100
 8001270:	40012200 	.word	0x40012200

08001274 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001290:	d113      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a0:	d10b      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0220 	orr.w	r2, r3, #32
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e05c      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012ba:	f7ff fea3 	bl	8001004 <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012c0:	e01a      	b.n	80012f8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d016      	beq.n	80012f8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <HAL_ADC_PollForConversion+0x6c>
 80012d0:	f7ff fe98 	bl	8001004 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d20b      	bcs.n	80012f8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f043 0204 	orr.w	r2, r3, #4
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e03d      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b02      	cmp	r3, #2
 8001304:	d1dd      	bne.n	80012c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0212 	mvn.w	r2, #18
 800130e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d123      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800132e:	2b00      	cmp	r3, #0
 8001330:	d11f      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134a:	2b00      	cmp	r3, #0
 800134c:	d111      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e105      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x228>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d925      	bls.n	8001410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3b1e      	subs	r3, #30
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43da      	mvns	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	400a      	ands	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	3b1e      	subs	r3, #30
 8001404:	409a      	lsls	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e022      	b.n	8001456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	2207      	movs	r2, #7
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6919      	ldr	r1, [r3, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4403      	add	r3, r0
 800144c:	409a      	lsls	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b06      	cmp	r3, #6
 800145c:	d824      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b05      	subs	r3, #5
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b05      	subs	r3, #5
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
 80014a6:	e04c      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d824      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b23      	subs	r3, #35	; 0x23
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43da      	mvns	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b23      	subs	r3, #35	; 0x23
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e023      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b41      	subs	r3, #65	; 0x41
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_ADC_ConfigChannel+0x234>)
 8001544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d109      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d105      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d123      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d003      	beq.n	800157e <HAL_ADC_ConfigChannel+0x1e6>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b11      	cmp	r3, #17
 800157c:	d11b      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_ADC_ConfigChannel+0x240>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9a      	lsrs	r2, r3, #18
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	40012000 	.word	0x40012000
 80015d4:	20000080 	.word	0x20000080
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <ADC_Init+0x1f0>)
 80015e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <ADC_Init+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e00f      	b.n	80016da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0202 	bic.w	r2, r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
 80016f4:	005a      	lsls	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001716:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	035a      	lsls	r2, r3, #13
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e007      	b.n	8001750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	3b01      	subs	r3, #1
 800176c:	051a      	lsls	r2, r3, #20
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001792:	025a      	lsls	r2, r3, #9
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	029a      	lsls	r2, r3, #10
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a0c:	7e1b      	ldrb	r3, [r3, #24]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_FLASH_Program+0x1e>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e03b      	b.n	8001a8e <HAL_FLASH_Program+0x96>
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a20:	f000 f870 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d12b      	bne.n	8001a86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a34:	783b      	ldrb	r3, [r7, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	68b8      	ldr	r0, [r7, #8]
 8001a3a:	f000 f917 	bl	8001c6c <FLASH_Program_Byte>
 8001a3e:	e016      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	68b8      	ldr	r0, [r7, #8]
 8001a4c:	f000 f8ea 	bl	8001c24 <FLASH_Program_HalfWord>
 8001a50:	e00d      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d105      	bne.n	8001a64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68b8      	ldr	r0, [r7, #8]
 8001a5e:	f000 f8bf 	bl	8001be0 <FLASH_Program_Word>
 8001a62:	e004      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f000 f88b 	bl	8001b84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a72:	f000 f847 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a76:	4603      	mov	r3, r0
 8001a78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000124 	.word	0x20000124
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da0b      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_FLASH_Unlock+0x3c>)
 8001ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_FLASH_Unlock+0x40>)
 8001abc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da01      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	45670123 	.word	0x45670123
 8001ae0:	cdef89ab 	.word	0xcdef89ab

08001ae4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001af2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <FLASH_WaitForLastOperation+0x78>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b16:	f7ff fa75 	bl	8001004 <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b1c:	e010      	b.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d00c      	beq.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <FLASH_WaitForLastOperation+0x38>
 8001b2c:	f7ff fa6a 	bl	8001004 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d201      	bcs.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e019      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e8      	bne.n	8001b1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b6a:	f000 f8a1 	bl	8001cb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
  
}  
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000124 	.word	0x20000124
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b84:	b490      	push	{r4, r7}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001ba2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	f04f 0400 	mov.w	r4, #0
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	2400      	movs	r4, #0
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	3204      	adds	r2, #4
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc90      	pop	{r4, r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	801a      	strh	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cce:	2210      	movs	r2, #16
 8001cd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cec:	2220      	movs	r2, #32
 8001cee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	f043 0320 	orr.w	r3, r3, #32
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	60da      	str	r2, [r3, #12]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023c00 	.word	0x40023c00
 8001d58:	20000124 	.word	0x20000124

08001d5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d70:	7e1b      	ldrb	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_FLASHEx_Erase+0x1e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e058      	b.n	8001e2c <HAL_FLASHEx_Erase+0xd0>
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d84:	f7ff febe 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d148      	bne.n	8001e24 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d115      	bne.n	8001dce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f844 	bl	8001e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db8:	f7ff fea4 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6113      	str	r3, [r2, #16]
 8001dcc:	e028      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	e01c      	b.n	8001e10 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68b8      	ldr	r0, [r7, #8]
 8001de0:	f000 f850 	bl	8001e84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de8:	f7ff fe8c 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dfa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	601a      	str	r2, [r3, #0]
          break;
 8001e08:	e00a      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3da      	bcc.n	8001dd6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001e20:	f000 f878 	bl	8001f14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	761a      	strb	r2, [r3, #24]

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000124 	.word	0x20000124
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6113      	str	r3, [r2, #16]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e010      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e009      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d103      	bne.n	8001ebc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e002      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	490f      	ldr	r1, [pc, #60]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ee4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6113      	str	r3, [r2, #16]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
  }
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e16b      	b.n	8002294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 815a 	bne.w	800228e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x4a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d123      	bne.n	8002032 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0203 	and.w	r2, r3, #3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00b      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207a:	2b11      	cmp	r3, #17
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b12      	cmp	r3, #18
 8002084:	d130      	bne.n	80020e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 0201 	and.w	r2, r3, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80b4 	beq.w	800228e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x308>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_GPIO_Init+0x30c>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02b      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d025      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d019      	beq.n	80021ba <HAL_GPIO_Init+0x21a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x216>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00d      	beq.n	80021b2 <HAL_GPIO_Init+0x212>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_GPIO_Init+0x328>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x32c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_GPIO_Init+0x20a>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e00e      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00c      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ae:	2306      	movs	r3, #6
 80021b0:	e00a      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c6:	2300      	movs	r3, #0
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d8:	4934      	ldr	r1, [pc, #208]	; (80022ac <HAL_GPIO_Init+0x30c>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_GPIO_Init+0x330>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220a:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f67f ae90 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3724      	adds	r7, #36	; 0x24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e22d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b9d      	ldr	r3, [pc, #628]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e208      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe08 	bl	8001004 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fe04 	bl	8001004 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1cd      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fdf4 	bl	8001004 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fdf0 	bl	8001004 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1b9      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e18d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fda9 	bl	8001004 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fda5 	bl	8001004 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e16e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd88 	bl	8001004 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fd84 	bl	8001004 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e14d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fd68 	bl	8001004 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fd64 	bl	8001004 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e12d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fd51 	bl	8001004 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fd4d 	bl	8001004 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e116      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a0 	beq.w	80026d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fd13 	bl	8001004 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e011      	b.n	8002606 <HAL_RCC_OscConfig+0x2ce>
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
 80025f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fd06 	bl	8001004 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0cf      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2f0>
 800261a:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 8002630:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a5c      	ldr	r2, [pc, #368]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fccb 	bl	8001004 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fcc7 	bl	8001004 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e08e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x33a>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fcb5 	bl	8001004 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fcb1 	bl	8001004 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e078      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d064      	beq.n	80027a4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d05c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d141      	bne.n	8002772 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc86 	bl	8001004 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fc82 	bl	8001004 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04b      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	3b01      	subs	r3, #1
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	491d      	ldr	r1, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fc5b 	bl	8001004 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fc57 	bl	8001004 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e020      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x41a>
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fc44 	bl	8001004 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fc40 	bl	8001004 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x448>
 800279e:	e001      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000
 80027b4:	40023800 	.word	0x40023800
 80027b8:	42470060 	.word	0x42470060

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0ca      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d90c      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b6      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002810:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002828:	4b52      	ldr	r3, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	494c      	ldr	r1, [pc, #304]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d119      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d003      	beq.n	800287a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e065      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4933      	ldr	r1, [pc, #204]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fbaa 	bl	8001004 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fba6 	bl	8001004 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20c      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e030      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4915      	ldr	r1, [pc, #84]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	490d      	ldr	r1, [pc, #52]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002942:	f000 f81d 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002946:	4601      	mov	r1, r0
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	fa21 f303 	lsr.w	r3, r1, r3
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe fb0c 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	08013e98 	.word	0x08013e98
 800297c:	20000080 	.word	0x20000080

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d007      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x32>
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d008      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x38>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 808d 	bne.w	8002ac6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 80029ae:	60bb      	str	r3, [r7, #8]
       break;
 80029b0:	e08c      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029b4:	60bb      	str	r3, [r7, #8]
      break;
 80029b6:	e089      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b8:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d023      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	f04f 0400 	mov.w	r4, #0
 80029d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	ea03 0501 	and.w	r5, r3, r1
 80029e4:	ea04 0602 	and.w	r6, r4, r2
 80029e8:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ea:	fb02 f106 	mul.w	r1, r2, r6
 80029ee:	2200      	movs	r2, #0
 80029f0:	fb02 f205 	mul.w	r2, r2, r5
 80029f4:	440a      	add	r2, r1
 80029f6:	493a      	ldr	r1, [pc, #232]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f8:	fba5 0101 	umull	r0, r1, r5, r1
 80029fc:	1853      	adds	r3, r2, r1
 80029fe:	4619      	mov	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4623      	mov	r3, r4
 8002a0a:	f7fe f915 	bl	8000c38 <__aeabi_uldivmod>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e049      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	099b      	lsrs	r3, r3, #6
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	ea03 0501 	and.w	r5, r3, r1
 8002a2c:	ea04 0602 	and.w	r6, r4, r2
 8002a30:	4629      	mov	r1, r5
 8002a32:	4632      	mov	r2, r6
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	0154      	lsls	r4, r2, #5
 8002a3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a42:	014b      	lsls	r3, r1, #5
 8002a44:	4619      	mov	r1, r3
 8002a46:	4622      	mov	r2, r4
 8002a48:	1b49      	subs	r1, r1, r5
 8002a4a:	eb62 0206 	sbc.w	r2, r2, r6
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	f04f 0400 	mov.w	r4, #0
 8002a56:	0194      	lsls	r4, r2, #6
 8002a58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a5c:	018b      	lsls	r3, r1, #6
 8002a5e:	1a5b      	subs	r3, r3, r1
 8002a60:	eb64 0402 	sbc.w	r4, r4, r2
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	00e2      	lsls	r2, r4, #3
 8002a6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a72:	00d9      	lsls	r1, r3, #3
 8002a74:	460b      	mov	r3, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	195b      	adds	r3, r3, r5
 8002a7a:	eb44 0406 	adc.w	r4, r4, r6
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	02a2      	lsls	r2, r4, #10
 8002a88:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a8c:	0299      	lsls	r1, r3, #10
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4614      	mov	r4, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	4621      	mov	r1, r4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f04f 0400 	mov.w	r4, #0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	f7fe f8ca 	bl	8000c38 <__aeabi_uldivmod>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	60bb      	str	r3, [r7, #8]
      break;
 8002ac4:	e002      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ac8:	60bb      	str	r3, [r7, #8]
      break;
 8002aca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002acc:	68bb      	ldr	r3, [r7, #8]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	017d7840 	.word	0x017d7840

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000080 	.word	0x20000080

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b04:	4601      	mov	r1, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	08013ea8 	.word	0x08013ea8

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffdc 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0b5b      	lsrs	r3, r3, #13
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	08013ea8 	.word	0x08013ea8

08002b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e056      	b.n	8002c0c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f00f fa9f 	bl	80120bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	f003 0104 	and.w	r1, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_SPI_Transmit+0x22>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e11e      	b.n	8002e74 <HAL_SPI_Transmit+0x260>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c3e:	f7fe f9e1 	bl	8001004 <HAL_GetTick>
 8002c42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
 8002c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c58:	e103      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_SPI_Transmit+0x52>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c6a:	e0fa      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb2:	d107      	bne.n	8002cc4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d007      	beq.n	8002ce2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cea:	d14b      	bne.n	8002d84 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Transmit+0xe6>
 8002cf4:	8afb      	ldrh	r3, [r7, #22]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d13e      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d1e:	e02b      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d112      	bne.n	8002d54 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	1c9a      	adds	r2, r3, #2
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d52:	e011      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d54:	f7fe f956 	bl	8001004 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d803      	bhi.n	8002d6c <HAL_SPI_Transmit+0x158>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d102      	bne.n	8002d72 <HAL_SPI_Transmit+0x15e>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d76:	e074      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ce      	bne.n	8002d20 <HAL_SPI_Transmit+0x10c>
 8002d82:	e04c      	b.n	8002e1e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Transmit+0x17e>
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d140      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002db8:	e02c      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d113      	bne.n	8002df0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dee:	e011      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df0:	f7fe f908 	bl	8001004 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d803      	bhi.n	8002e08 <HAL_SPI_Transmit+0x1f4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_Transmit+0x1fa>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e12:	e026      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1cd      	bne.n	8002dba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fba4 	bl	8003570 <SPI_EndRxTxTransaction>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e000      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e98:	d112      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8e9 	bl	800308e <HAL_SPI_TransmitReceive>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	e0e2      	b.n	8003086 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Receive+0x52>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0db      	b.n	8003086 <HAL_SPI_Receive+0x20a>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed6:	f7fe f895 	bl	8001004 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eec:	e0c2      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_SPI_Receive+0x7e>
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002efe:	e0b9      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2204      	movs	r2, #4
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f46:	d107      	bne.n	8002f58 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d007      	beq.n	8002f76 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d162      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f7e:	e02e      	b.n	8002fde <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d115      	bne.n	8002fba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f103 020c 	add.w	r2, r3, #12
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fb8:	e011      	b.n	8002fde <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fba:	f7fe f823 	bl	8001004 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d803      	bhi.n	8002fd2 <HAL_SPI_Receive+0x156>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d102      	bne.n	8002fd8 <HAL_SPI_Receive+0x15c>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fdc:	e04a      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1cb      	bne.n	8002f80 <HAL_SPI_Receive+0x104>
 8002fe8:	e031      	b.n	800304e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d113      	bne.n	8003020 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	b292      	uxth	r2, r2
 8003004:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800301e:	e011      	b.n	8003044 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003020:	f7fd fff0 	bl	8001004 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d803      	bhi.n	8003038 <HAL_SPI_Receive+0x1bc>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d102      	bne.n	800303e <HAL_SPI_Receive+0x1c2>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003042:	e017      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1cd      	bne.n	8002fea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa27 	bl	80034a6 <SPI_EndRxTransaction>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
 8003070:	e000      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003072:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b08c      	sub	sp, #48	; 0x30
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800309c:	2301      	movs	r3, #1
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x26>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e18a      	b.n	80033ca <HAL_SPI_TransmitReceive+0x33c>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030bc:	f7fd ffa2 	bl	8001004 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d00f      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e4:	d107      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
 80030ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d003      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030fc:	e15b      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003116:	e14e      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b04      	cmp	r3, #4
 8003122:	d003      	beq.n	800312c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2205      	movs	r2, #5
 8003128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	887a      	ldrh	r2, [r7, #2]
 8003142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d007      	beq.n	8003180 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003188:	d178      	bne.n	800327c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x10a>
 8003192:	8b7b      	ldrh	r3, [r7, #26]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d166      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	e053      	b.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11b      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d113      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d119      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d014      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	b292      	uxth	r2, r2
 8003228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003242:	2301      	movs	r3, #1
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003246:	f7fd fedd 	bl	8001004 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003252:	429a      	cmp	r2, r3
 8003254:	d807      	bhi.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d003      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003264:	e0a7      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1a6      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1a1      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 800327a:	e07c      	b.n	8003376 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_TransmitReceive+0x1fc>
 8003284:	8b7b      	ldrh	r3, [r7, #26]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d16b      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b0:	e057      	b.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d11c      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d114      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d119      	bne.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d014      	beq.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003338:	2301      	movs	r3, #1
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800333c:	f7fd fe62 	bl	8001004 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003348:	429a      	cmp	r2, r3
 800334a:	d803      	bhi.n	8003354 <HAL_SPI_TransmitReceive+0x2c6>
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d102      	bne.n	800335a <HAL_SPI_TransmitReceive+0x2cc>
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003360:	e029      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1a2      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d19d      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8f8 	bl	8003570 <SPI_EndRxTxTransaction>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003392:	e010      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	e000      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033e2:	e04c      	b.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d048      	beq.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033ec:	f7fd fe0a 	bl	8001004 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d902      	bls.n	8003402 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d13d      	bne.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003410:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341a:	d111      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d004      	beq.n	8003430 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d107      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d10f      	bne.n	800346a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d1a3      	bne.n	80033e4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d111      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	d004      	beq.n	80034d0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d107      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e8:	d12a      	bne.n	8003540 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f2:	d012      	beq.n	800351a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff67 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02d      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e026      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	2101      	movs	r1, #1
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff54 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e013      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	2101      	movs	r1, #1
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff41 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e000      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <SPI_EndRxTxTransaction+0x7c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <SPI_EndRxTxTransaction+0x80>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0d5b      	lsrs	r3, r3, #21
 8003588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359a:	d112      	bne.n	80035c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2180      	movs	r1, #128	; 0x80
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff13 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e00f      	b.n	80035e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d0f2      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x52>
 80035dc:	e000      	b.n	80035e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80035de:	bf00      	nop
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000080 	.word	0x20000080
 80035f0:	165e9f81 	.word	0x165e9f81

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e01d      	b.n	8003642 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f00e fd96 	bl	801214c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 fc70 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d007      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e01d      	b.n	80036e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f815 	bl	80036e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f000 fc21 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 feec 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <HAL_TIM_PWM_Start+0x74>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_TIM_PWM_Start+0x2c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_TIM_PWM_Start+0x78>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d101      	bne.n	800372c <HAL_TIM_PWM_Start+0x30>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_TIM_PWM_Start+0x32>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b06      	cmp	r3, #6
 8003752:	d007      	beq.n	8003764 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000
 8003774:	40010400 	.word	0x40010400

08003778 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 feae 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_TIM_PWM_Stop+0xa8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_PWM_Stop+0x2c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_TIM_PWM_Stop+0xac>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_PWM_Stop+0x30>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_TIM_PWM_Stop+0x32>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d017      	beq.n	80037de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	f240 4344 	movw	r3, #1092	; 0x444
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	f240 4344 	movw	r3, #1092	; 0x444
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40010000 	.word	0x40010000
 8003824:	40010400 	.word	0x40010400

08003828 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e083      	b.n	8003944 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f00e fccd 	bl	80121f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386c:	f023 0307 	bic.w	r3, r3, #7
 8003870:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f000 fb4b 	bl	8003f18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	4313      	orrs	r3, r2
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038c8:	f023 030c 	bic.w	r3, r3, #12
 80038cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	4313      	orrs	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	011a      	lsls	r2, r3, #4
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	4313      	orrs	r3, r2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003906:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4313      	orrs	r3, r2
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_TIM_Encoder_Start+0x16>
 800395c:	2b04      	cmp	r3, #4
 800395e:	d008      	beq.n	8003972 <HAL_TIM_Encoder_Start+0x26>
 8003960:	e00f      	b.n	8003982 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fdbe 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003970:	e016      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	2104      	movs	r1, #4
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fdb6 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003980:	e00e      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fdae 	bl	80044ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2201      	movs	r2, #1
 8003996:	2104      	movs	r1, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fda7 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 800399e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d122      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d11b      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f06f 0202 	mvn.w	r2, #2
 80039e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fa6c 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a02:	e005      	b.n	8003a10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa5e 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fa6f 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d122      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d11b      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0204 	mvn.w	r2, #4
 8003a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fa42 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a56:	e005      	b.n	8003a64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa34 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa45 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d122      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d11b      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0208 	mvn.w	r2, #8
 8003a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2204      	movs	r2, #4
 8003a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa18 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003aaa:	e005      	b.n	8003ab8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa0a 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa1b 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d122      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d11b      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f06f 0210 	mvn.w	r2, #16
 8003ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f9ee 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003afe:	e005      	b.n	8003b0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f9e0 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9f1 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10e      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0201 	mvn.w	r2, #1
 8003b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f008 ffa5 	bl	800ca88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d10e      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	d107      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fd35 	bl	80045d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d10e      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9b6 	bl	8003f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d107      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f06f 0220 	mvn.w	r2, #32
 8003bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fcff 	bl	80045c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e0b4      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b0c      	cmp	r3, #12
 8003bfa:	f200 809f 	bhi.w	8003d3c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c39 	.word	0x08003c39
 8003c08:	08003d3d 	.word	0x08003d3d
 8003c0c:	08003d3d 	.word	0x08003d3d
 8003c10:	08003d3d 	.word	0x08003d3d
 8003c14:	08003c79 	.word	0x08003c79
 8003c18:	08003d3d 	.word	0x08003d3d
 8003c1c:	08003d3d 	.word	0x08003d3d
 8003c20:	08003d3d 	.word	0x08003d3d
 8003c24:	08003cbb 	.word	0x08003cbb
 8003c28:	08003d3d 	.word	0x08003d3d
 8003c2c:	08003d3d 	.word	0x08003d3d
 8003c30:	08003d3d 	.word	0x08003d3d
 8003c34:	08003cfb 	.word	0x08003cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fa0a 	bl	8004058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0208 	orr.w	r2, r2, #8
 8003c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0204 	bic.w	r2, r2, #4
 8003c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6999      	ldr	r1, [r3, #24]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	619a      	str	r2, [r3, #24]
      break;
 8003c76:	e062      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fa5a 	bl	8004138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	021a      	lsls	r2, r3, #8
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	619a      	str	r2, [r3, #24]
      break;
 8003cb8:	e041      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 faaf 	bl	8004224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0208 	orr.w	r2, r2, #8
 8003cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0204 	bic.w	r2, r2, #4
 8003ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69d9      	ldr	r1, [r3, #28]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	61da      	str	r2, [r3, #28]
      break;
 8003cf8:	e021      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fb03 	bl	800430c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	021a      	lsls	r2, r3, #8
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	61da      	str	r2, [r3, #28]
      break;
 8003d3a:	e000      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIM_ConfigClockSource+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e0a6      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x166>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d067      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0x120>
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d80b      	bhi.n	8003dc4 <HAL_TIM_ConfigClockSource+0x6c>
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d073      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d802      	bhi.n	8003dba <HAL_TIM_ConfigClockSource+0x62>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d06f      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003db8:	e078      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d06c      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003dbe:	2b30      	cmp	r3, #48	; 0x30
 8003dc0:	d06a      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dc2:	e073      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dc4:	2b70      	cmp	r3, #112	; 0x70
 8003dc6:	d00d      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x8c>
 8003dc8:	2b70      	cmp	r3, #112	; 0x70
 8003dca:	d804      	bhi.n	8003dd6 <HAL_TIM_ConfigClockSource+0x7e>
 8003dcc:	2b50      	cmp	r3, #80	; 0x50
 8003dce:	d033      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0xe0>
 8003dd0:	2b60      	cmp	r3, #96	; 0x60
 8003dd2:	d041      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dd4:	e06a      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d066      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x152>
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d017      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003de2:	e063      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6899      	ldr	r1, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f000 fb5a 	bl	80044ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	609a      	str	r2, [r3, #8]
      break;
 8003e10:	e04c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6899      	ldr	r1, [r3, #8]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f000 fb43 	bl	80044ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e34:	609a      	str	r2, [r3, #8]
      break;
 8003e36:	e039      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f000 fab7 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2150      	movs	r1, #80	; 0x50
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fb10 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e56:	e029      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f000 fad6 	bl	8004416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2160      	movs	r1, #96	; 0x60
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fb00 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e76:	e019      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f000 fa97 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2140      	movs	r1, #64	; 0x40
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 faf0 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e96:	e009      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fae7 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e000      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a40      	ldr	r2, [pc, #256]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d027      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d023      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d017      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a28      	ldr	r2, [pc, #160]	; (8004040 <TIM_Base_SetConfig+0x128>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a27      	ldr	r2, [pc, #156]	; (8004044 <TIM_Base_SetConfig+0x12c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a26      	ldr	r2, [pc, #152]	; (8004048 <TIM_Base_SetConfig+0x130>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_Base_SetConfig+0x134>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <TIM_Base_SetConfig+0x138>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <TIM_Base_SetConfig+0x13c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0xf8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d103      	bne.n	8004018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	615a      	str	r2, [r3, #20]
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800
 800404c:	40001800 	.word	0x40001800
 8004050:	40001c00 	.word	0x40001c00
 8004054:	40002000 	.word	0x40002000

08004058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f023 0302 	bic.w	r3, r3, #2
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a20      	ldr	r2, [pc, #128]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC1_SetConfig+0x64>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10c      	bne.n	80040d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0308 	bic.w	r3, r3, #8
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a15      	ldr	r2, [pc, #84]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_OC1_SetConfig+0x8e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d111      	bne.n	800410a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40010000 	.word	0x40010000
 8004134:	40010400 	.word	0x40010400

08004138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0210 	bic.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0320 	bic.w	r3, r3, #32
 8004182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a22      	ldr	r2, [pc, #136]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC2_SetConfig+0x68>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10d      	bne.n	80041bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC2_SetConfig+0x94>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d113      	bne.n	80041f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40010400 	.word	0x40010400

08004224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800426c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_OC3_SetConfig+0x66>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10d      	bne.n	80042a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a16      	ldr	r2, [pc, #88]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_OC3_SetConfig+0x92>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d113      	bne.n	80042de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40010000 	.word	0x40010000
 8004308:	40010400 	.word	0x40010400

0800430c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	031b      	lsls	r3, r3, #12
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <TIM_OC4_SetConfig+0xa4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_OC4_SetConfig+0x68>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <TIM_OC4_SetConfig+0xa8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d109      	bne.n	8004388 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40010400 	.word	0x40010400

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	f043 0307 	orr.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2201      	movs	r2, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1a      	ldr	r2, [r3, #32]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800454a:	2302      	movs	r3, #2
 800454c:	e032      	b.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004586:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e03f      	b.n	800467a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f00d feea 	bl	80123e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2224      	movs	r2, #36	; 0x24
 8004618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f90b 	bl	8004848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af02      	add	r7, sp, #8
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b20      	cmp	r3, #32
 80046a0:	f040 8083 	bne.w	80047aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Transmit+0x2e>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e07b      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_UART_Transmit+0x40>
 80046be:	2302      	movs	r3, #2
 80046c0:	e074      	b.n	80047ac <HAL_UART_Transmit+0x12a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2221      	movs	r2, #33	; 0x21
 80046d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046d8:	f7fc fc94 	bl	8001004 <HAL_GetTick>
 80046dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ea:	e042      	b.n	8004772 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	d122      	bne.n	800474a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f850 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e046      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004730:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3302      	adds	r3, #2
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	e017      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3301      	adds	r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	e013      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f82d 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e023      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	60ba      	str	r2, [r7, #8]
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1b7      	bne.n	80046ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2200      	movs	r2, #0
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f814 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e00a      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c4:	e02c      	b.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d028      	beq.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d4:	f7fc fc16 	bl	8001004 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d21d      	bcs.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e00f      	b.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	d0c3      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004848:	b5b0      	push	{r4, r5, r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004888:	f023 030c 	bic.w	r3, r3, #12
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	430b      	orrs	r3, r1
 8004894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b4:	f040 80e4 	bne.w	8004a80 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4aab      	ldr	r2, [pc, #684]	; (8004b6c <UART_SetConfig+0x324>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <UART_SetConfig+0x84>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4aaa      	ldr	r2, [pc, #680]	; (8004b70 <UART_SetConfig+0x328>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d16c      	bne.n	80049a6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80048cc:	f7fe f92a 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009a      	lsls	r2, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	4aa3      	ldr	r2, [pc, #652]	; (8004b74 <UART_SetConfig+0x32c>)
 80048e8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	011c      	lsls	r4, r3, #4
 80048f0:	f7fe f918 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009a      	lsls	r2, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fbb2 f5f3 	udiv	r5, r2, r3
 800490a:	f7fe f90b 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800490e:	4602      	mov	r2, r0
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009a      	lsls	r2, r3, #2
 8004918:	441a      	add	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	4a93      	ldr	r2, [pc, #588]	; (8004b74 <UART_SetConfig+0x32c>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	2264      	movs	r2, #100	; 0x64
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	1aeb      	subs	r3, r5, r3
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	3332      	adds	r3, #50	; 0x32
 8004938:	4a8e      	ldr	r2, [pc, #568]	; (8004b74 <UART_SetConfig+0x32c>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004946:	441c      	add	r4, r3
 8004948:	f7fe f8ec 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800494c:	4602      	mov	r2, r0
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009a      	lsls	r2, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004962:	f7fe f8df 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004966:	4602      	mov	r2, r0
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	009a      	lsls	r2, r3, #2
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	4a7d      	ldr	r2, [pc, #500]	; (8004b74 <UART_SetConfig+0x32c>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2264      	movs	r2, #100	; 0x64
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	1aeb      	subs	r3, r5, r3
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	3332      	adds	r3, #50	; 0x32
 8004990:	4a78      	ldr	r2, [pc, #480]	; (8004b74 <UART_SetConfig+0x32c>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	f003 0207 	and.w	r2, r3, #7
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4422      	add	r2, r4
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	e154      	b.n	8004c50 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80049a6:	f7fe f8a9 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009a      	lsls	r2, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	4a6c      	ldr	r2, [pc, #432]	; (8004b74 <UART_SetConfig+0x32c>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	011c      	lsls	r4, r3, #4
 80049ca:	f7fe f897 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	009a      	lsls	r2, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80049e4:	f7fe f88a 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	009a      	lsls	r2, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	4a5d      	ldr	r2, [pc, #372]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	2264      	movs	r2, #100	; 0x64
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	1aeb      	subs	r3, r5, r3
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	3332      	adds	r3, #50	; 0x32
 8004a12:	4a58      	ldr	r2, [pc, #352]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a20:	441c      	add	r4, r3
 8004a22:	f7fe f86b 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009a      	lsls	r2, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a3c:	f7fe f85e 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009a      	lsls	r2, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	4a47      	ldr	r2, [pc, #284]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2264      	movs	r2, #100	; 0x64
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	1aeb      	subs	r3, r5, r3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	4a42      	ldr	r2, [pc, #264]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 0207 	and.w	r2, r3, #7
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4422      	add	r2, r4
 8004a7c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004a7e:	e0e7      	b.n	8004c50 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a39      	ldr	r2, [pc, #228]	; (8004b6c <UART_SetConfig+0x324>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <UART_SetConfig+0x24c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a38      	ldr	r2, [pc, #224]	; (8004b70 <UART_SetConfig+0x328>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d171      	bne.n	8004b78 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a94:	f7fe f846 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009a      	lsls	r2, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <UART_SetConfig+0x32c>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	011c      	lsls	r4, r3, #4
 8004ab8:	f7fe f834 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009a      	lsls	r2, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ad2:	f7fe f827 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <UART_SetConfig+0x32c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2264      	movs	r2, #100	; 0x64
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	1aeb      	subs	r3, r5, r3
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	3332      	adds	r3, #50	; 0x32
 8004b00:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0c:	441c      	add	r4, r3
 8004b0e:	f7fe f809 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b28:	f7fd fffc 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	009a      	lsls	r2, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	2264      	movs	r2, #100	; 0x64
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	1aeb      	subs	r3, r5, r3
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	3332      	adds	r3, #50	; 0x32
 8004b56:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4422      	add	r2, r4
 8004b68:	609a      	str	r2, [r3, #8]
 8004b6a:	e071      	b.n	8004c50 <UART_SetConfig+0x408>
 8004b6c:	40011000 	.word	0x40011000
 8004b70:	40011400 	.word	0x40011400
 8004b74:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b78:	f7fd ffc0 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009a      	lsls	r2, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	4a31      	ldr	r2, [pc, #196]	; (8004c58 <UART_SetConfig+0x410>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	011c      	lsls	r4, r3, #4
 8004b9c:	f7fd ffae 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009a      	lsls	r2, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bb6:	f7fd ffa1 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009a      	lsls	r2, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <UART_SetConfig+0x410>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2264      	movs	r2, #100	; 0x64
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	1aeb      	subs	r3, r5, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <UART_SetConfig+0x410>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	441c      	add	r4, r3
 8004bf2:	f7fd ff83 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009a      	lsls	r2, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c0c:	f7fd ff76 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009a      	lsls	r2, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <UART_SetConfig+0x410>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	2264      	movs	r2, #100	; 0x64
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
 8004c34:	1aeb      	subs	r3, r5, r3
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	3332      	adds	r3, #50	; 0x32
 8004c3a:	4a07      	ldr	r2, [pc, #28]	; (8004c58 <UART_SetConfig+0x410>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	f003 020f 	and.w	r2, r3, #15
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4422      	add	r2, r4
 8004c4c:	609a      	str	r2, [r3, #8]
}
 8004c4e:	e7ff      	b.n	8004c50 <UART_SetConfig+0x408>
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bdb0      	pop	{r4, r5, r7, pc}
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <drive_init>:
//drive_init
// 走行系の変数の初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
	MF.FLAGS = 0;
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <drive_init+0x1c>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	801a      	strh	r2, [r3, #0]
	MF2.FLAGS2 = 0;
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <drive_init+0x20>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	801a      	strh	r2, [r3, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000f68 	.word	0x20000f68
 8004c7c:	20000f64 	.word	0x20000f64

08004c80 <drive_ready>:
//drive_ready
// 走行前のLED点滅&ジャイロのドリフト計算
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_ready(void){
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
	  while(ad_fl <= WALL_BASE_FL){
 8004c84:	e00f      	b.n	8004ca6 <drive_ready+0x26>
		  led_write(1, 1, 1);
 8004c86:	2201      	movs	r2, #1
 8004c88:	2101      	movs	r1, #1
 8004c8a:	2001      	movs	r0, #1
 8004c8c:	f00c ff8a 	bl	8011ba4 <led_write>
		  HAL_Delay(200);
 8004c90:	20c8      	movs	r0, #200	; 0xc8
 8004c92:	f7fc f9c3 	bl	800101c <HAL_Delay>
		  led_write(0, 0, 0);
 8004c96:	2200      	movs	r2, #0
 8004c98:	2100      	movs	r1, #0
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f00c ff82 	bl	8011ba4 <led_write>
		  HAL_Delay(200);
 8004ca0:	20c8      	movs	r0, #200	; 0xc8
 8004ca2:	f7fc f9bb 	bl	800101c <HAL_Delay>
	  while(ad_fl <= WALL_BASE_FL){
 8004ca6:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <drive_ready+0x4c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2bc8      	cmp	r3, #200	; 0xc8
 8004cac:	d9eb      	bls.n	8004c86 <drive_ready+0x6>
	  }
	  MF2.FLAG.GDRIFT = 1;
 8004cae:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <drive_ready+0x50>)
 8004cb0:	8813      	ldrh	r3, [r2, #0]
 8004cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb6:	8013      	strh	r3, [r2, #0]
	  HAL_Delay(2000);
 8004cb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004cbc:	f7fc f9ae 	bl	800101c <HAL_Delay>
	  degree_z = 0;
 8004cc0:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <drive_ready+0x54>)
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20000d54 	.word	0x20000d54
 8004cd0:	20000f64 	.word	0x20000f64
 8004cd4:	20000b5c 	.word	0x20000b5c

08004cd8 <drive_start>:
//drive_start
// 走行開始前に走行距離と機体角度を初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//走行距離の初期化
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <drive_start+0x48>)
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	4a0f      	ldr	r2, [pc, #60]	; (8004d24 <drive_start+0x4c>)
 8004ce6:	6013      	str	r3, [r2, #0]
	if(!MF2.FLAG.HACCEL) target_speed_l = target_speed_r = 0;		//モータ出力の初期化
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <drive_start+0x50>)
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d105      	bne.n	8004d02 <drive_start+0x2a>
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	4a0c      	ldr	r2, [pc, #48]	; (8004d2c <drive_start+0x54>)
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	4a0c      	ldr	r2, [pc, #48]	; (8004d30 <drive_start+0x58>)
 8004d00:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8004d02:	4a0c      	ldr	r2, [pc, #48]	; (8004d34 <drive_start+0x5c>)
 8004d04:	8813      	ldrh	r3, [r2, #0]
 8004d06:	f043 0302 	orr.w	r3, r3, #2
 8004d0a:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8004d0c:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <drive_start+0x5c>)
 8004d0e:	8813      	ldrh	r3, [r2, #0]
 8004d10:	f043 0304 	orr.w	r3, r3, #4
 8004d14:	8013      	strh	r3, [r2, #0]
}
 8004d16:	bf00      	nop
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	20000aec 	.word	0x20000aec
 8004d24:	200015c4 	.word	0x200015c4
 8004d28:	20000f64 	.word	0x20000f64
 8004d2c:	200001a0 	.word	0x200001a0
 8004d30:	20000bfc 	.word	0x20000bfc
 8004d34:	20000f68 	.word	0x20000f68

08004d38 <drive_stop>:
//drive_stop
// 走行を終了する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	4a0c      	ldr	r2, [pc, #48]	; (8004d74 <drive_stop+0x3c>)
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	4a0c      	ldr	r2, [pc, #48]	; (8004d78 <drive_stop+0x40>)
 8004d46:	6013      	str	r3, [r2, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	4a0b      	ldr	r2, [pc, #44]	; (8004d7c <drive_stop+0x44>)
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	4a0b      	ldr	r2, [pc, #44]	; (8004d80 <drive_stop+0x48>)
 8004d52:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 0;
 8004d54:	4a0b      	ldr	r2, [pc, #44]	; (8004d84 <drive_stop+0x4c>)
 8004d56:	8813      	ldrh	r3, [r2, #0]
 8004d58:	f36f 0341 	bfc	r3, #1, #1
 8004d5c:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 0;
 8004d5e:	4a09      	ldr	r2, [pc, #36]	; (8004d84 <drive_stop+0x4c>)
 8004d60:	8813      	ldrh	r3, [r2, #0]
 8004d62:	f36f 0382 	bfc	r3, #2, #1
 8004d66:	8013      	strh	r3, [r2, #0]
}
 8004d68:	bf00      	nop
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	20000aec 	.word	0x20000aec
 8004d78:	200015c4 	.word	0x200015c4
 8004d7c:	20000780 	.word	0x20000780
 8004d80:	20000ba8 	.word	0x20000ba8
 8004d84:	20000f68 	.word	0x20000f68

08004d88 <control_start>:
//control_start
// wallとgyroの姿勢制御を開始する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_start(){
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004d8c:	4a0f      	ldr	r2, [pc, #60]	; (8004dcc <control_start+0x44>)
 8004d8e:	8813      	ldrh	r3, [r2, #0]
 8004d90:	f043 0308 	orr.w	r3, r3, #8
 8004d94:	8013      	strh	r3, [r2, #0]
	if(run_mode == 5 && MF2.FLAG.TEMP)MF.FLAG.WCTRL = 0;
 8004d96:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <control_start+0x48>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b05      	cmp	r3, #5
 8004d9e:	d10b      	bne.n	8004db8 <control_start+0x30>
 8004da0:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <control_start+0x4c>)
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d004      	beq.n	8004db8 <control_start+0x30>
 8004dae:	4a07      	ldr	r2, [pc, #28]	; (8004dcc <control_start+0x44>)
 8004db0:	8813      	ldrh	r3, [r2, #0]
 8004db2:	f36f 03c3 	bfc	r3, #3, #1
 8004db6:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004db8:	4a04      	ldr	r2, [pc, #16]	; (8004dcc <control_start+0x44>)
 8004dba:	8813      	ldrh	r3, [r2, #0]
 8004dbc:	f043 0310 	orr.w	r3, r3, #16
 8004dc0:	8013      	strh	r3, [r2, #0]
}
 8004dc2:	bf00      	nop
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	20000f68 	.word	0x20000f68
 8004dd0:	20000456 	.word	0x20000456
 8004dd4:	20000f64 	.word	0x20000f64

08004dd8 <control_stop>:
//control_stop
// wallとgyroの姿勢制御を停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_stop(){
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 0;										//wall制御を無効にする
 8004ddc:	4a07      	ldr	r2, [pc, #28]	; (8004dfc <control_stop+0x24>)
 8004dde:	8813      	ldrh	r3, [r2, #0]
 8004de0:	f36f 03c3 	bfc	r3, #3, #1
 8004de4:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 0;										//gyro制御を無効にする
 8004de6:	4a05      	ldr	r2, [pc, #20]	; (8004dfc <control_stop+0x24>)
 8004de8:	8813      	ldrh	r3, [r2, #0]
 8004dea:	f36f 1304 	bfc	r3, #4, #1
 8004dee:	8013      	strh	r3, [r2, #0]
}
 8004df0:	bf00      	nop
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000f68 	.word	0x20000f68

08004e00 <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
// 引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
// 戻り値: なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	460a      	mov	r2, r1
 8004e0a:	71fb      	strb	r3, [r7, #7]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d13e      	bne.n	8004e94 <drive_dir+0x94>
		if(dir == 0){
 8004e16:	79bb      	ldrb	r3, [r7, #6]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10f      	bne.n	8004e3c <drive_dir+0x3c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	2120      	movs	r1, #32
 8004e20:	483f      	ldr	r0, [pc, #252]	; (8004f20 <drive_dir+0x120>)
 8004e22:	f7fd fa6f 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 8004e26:	2200      	movs	r2, #0
 8004e28:	2110      	movs	r1, #16
 8004e2a:	483d      	ldr	r0, [pc, #244]	; (8004f20 <drive_dir+0x120>)
 8004e2c:	f7fd fa6a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e30:	2201      	movs	r2, #1
 8004e32:	2101      	movs	r1, #1
 8004e34:	483b      	ldr	r0, [pc, #236]	; (8004f24 <drive_dir+0x124>)
 8004e36:	f7fd fa65 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
		}
	}
}
 8004e3a:	e06c      	b.n	8004f16 <drive_dir+0x116>
		}else if(dir == 1){
 8004e3c:	79bb      	ldrb	r3, [r7, #6]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d10f      	bne.n	8004e62 <drive_dir+0x62>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	//L_CW
 8004e42:	2200      	movs	r2, #0
 8004e44:	2120      	movs	r1, #32
 8004e46:	4836      	ldr	r0, [pc, #216]	; (8004f20 <drive_dir+0x120>)
 8004e48:	f7fd fa5c 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	2110      	movs	r1, #16
 8004e50:	4833      	ldr	r0, [pc, #204]	; (8004f20 <drive_dir+0x120>)
 8004e52:	f7fd fa57 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e56:	2201      	movs	r2, #1
 8004e58:	2101      	movs	r1, #1
 8004e5a:	4832      	ldr	r0, [pc, #200]	; (8004f24 <drive_dir+0x124>)
 8004e5c:	f7fd fa52 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e60:	e059      	b.n	8004f16 <drive_dir+0x116>
		}else if(dir == 2){
 8004e62:	79bb      	ldrb	r3, [r7, #6]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d10f      	bne.n	8004e88 <drive_dir+0x88>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004e68:	2201      	movs	r2, #1
 8004e6a:	2120      	movs	r1, #32
 8004e6c:	482c      	ldr	r0, [pc, #176]	; (8004f20 <drive_dir+0x120>)
 8004e6e:	f7fd fa49 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e72:	2201      	movs	r2, #1
 8004e74:	2110      	movs	r1, #16
 8004e76:	482a      	ldr	r0, [pc, #168]	; (8004f20 <drive_dir+0x120>)
 8004e78:	f7fd fa44 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	2101      	movs	r1, #1
 8004e80:	4828      	ldr	r0, [pc, #160]	; (8004f24 <drive_dir+0x124>)
 8004e82:	f7fd fa3f 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e86:	e046      	b.n	8004f16 <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	4825      	ldr	r0, [pc, #148]	; (8004f24 <drive_dir+0x124>)
 8004e8e:	f7fd fa39 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e92:	e040      	b.n	8004f16 <drive_dir+0x116>
		if(dir == 0){
 8004e94:	79bb      	ldrb	r3, [r7, #6]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d110      	bne.n	8004ebc <drive_dir+0xbc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	2102      	movs	r1, #2
 8004e9e:	4821      	ldr	r0, [pc, #132]	; (8004f24 <drive_dir+0x124>)
 8004ea0:	f7fd fa30 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004eaa:	481e      	ldr	r0, [pc, #120]	; (8004f24 <drive_dir+0x124>)
 8004eac:	f7fd fa2a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	481b      	ldr	r0, [pc, #108]	; (8004f24 <drive_dir+0x124>)
 8004eb6:	f7fd fa25 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004eba:	e02c      	b.n	8004f16 <drive_dir+0x116>
		}else if(dir == 1){
 8004ebc:	79bb      	ldrb	r3, [r7, #6]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d110      	bne.n	8004ee4 <drive_dir+0xe4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	//R_CW
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	4817      	ldr	r0, [pc, #92]	; (8004f24 <drive_dir+0x124>)
 8004ec8:	f7fd fa1c 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ed2:	4814      	ldr	r0, [pc, #80]	; (8004f24 <drive_dir+0x124>)
 8004ed4:	f7fd fa16 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004ed8:	2201      	movs	r2, #1
 8004eda:	2101      	movs	r1, #1
 8004edc:	4811      	ldr	r0, [pc, #68]	; (8004f24 <drive_dir+0x124>)
 8004ede:	f7fd fa11 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ee2:	e018      	b.n	8004f16 <drive_dir+0x116>
		}else if(dir == 2){
 8004ee4:	79bb      	ldrb	r3, [r7, #6]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d110      	bne.n	8004f0c <drive_dir+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004eea:	2201      	movs	r2, #1
 8004eec:	2102      	movs	r1, #2
 8004eee:	480d      	ldr	r0, [pc, #52]	; (8004f24 <drive_dir+0x124>)
 8004ef0:	f7fd fa08 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004efa:	480a      	ldr	r0, [pc, #40]	; (8004f24 <drive_dir+0x124>)
 8004efc:	f7fd fa02 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004f00:	2201      	movs	r2, #1
 8004f02:	2101      	movs	r1, #1
 8004f04:	4807      	ldr	r0, [pc, #28]	; (8004f24 <drive_dir+0x124>)
 8004f06:	f7fd f9fd 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004f0a:	e004      	b.n	8004f16 <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2101      	movs	r1, #1
 8004f10:	4804      	ldr	r0, [pc, #16]	; (8004f24 <drive_dir+0x124>)
 8004f12:	f7fd f9f7 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40020800 	.word	0x40020800
 8004f24:	40020400 	.word	0x40020400

08004f28 <run_select>:
//run_select
// a走行速度を選択する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void run_select(){
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
	full_led_write(YELLOW);
 8004f2e:	2006      	movs	r0, #6
 8004f30:	f00c fe72 	bl	8011c18 <full_led_write>
	int mode = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	607b      	str	r3, [r7, #4]

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	b2d8      	uxtb	r0, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	b2d9      	uxtb	r1, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	f00c fe24 	bl	8011ba4 <led_write>
		if(dist_r >= 20){
 8004f5c:	4b21      	ldr	r3, [pc, #132]	; (8004fe4 <run_select+0xbc>)
 8004f5e:	edd3 7a00 	vldr	s15, [r3]
 8004f62:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6e:	db0f      	blt.n	8004f90 <run_select+0x68>
			  mode++;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3301      	adds	r3, #1
 8004f74:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8004f76:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <run_select+0xbc>)
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b07      	cmp	r3, #7
 8004f82:	dd01      	ble.n	8004f88 <run_select+0x60>
				  mode = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	4817      	ldr	r0, [pc, #92]	; (8004fe8 <run_select+0xc0>)
 8004f8c:	f00d fbd8 	bl	8012740 <iprintf>
		}
		if(dist_r <= -20){
 8004f90:	4b14      	ldr	r3, [pc, #80]	; (8004fe4 <run_select+0xbc>)
 8004f92:	edd3 7a00 	vldr	s15, [r3]
 8004f96:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8004f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa2:	d80f      	bhi.n	8004fc4 <run_select+0x9c>
			  mode--;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8004faa:	4b0e      	ldr	r3, [pc, #56]	; (8004fe4 <run_select+0xbc>)
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	da01      	bge.n	8004fbc <run_select+0x94>
				  mode = 7;
 8004fb8:	2307      	movs	r3, #7
 8004fba:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	480a      	ldr	r0, [pc, #40]	; (8004fe8 <run_select+0xc0>)
 8004fc0:	f00d fbbe 	bl	8012740 <iprintf>
		}
		if(ad_fl >= WALL_BASE_FL){
 8004fc4:	4b09      	ldr	r3, [pc, #36]	; (8004fec <run_select+0xc4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2bc7      	cmp	r3, #199	; 0xc7
 8004fca:	d9b5      	bls.n	8004f38 <run_select+0x10>
			  run_mode = mode;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <run_select+0xc8>)
 8004fd2:	701a      	strb	r2, [r3, #0]
			  full_led_write(BLUEGREEN);
 8004fd4:	2004      	movs	r0, #4
 8004fd6:	f00c fe1f 	bl	8011c18 <full_led_write>
			  break;
 8004fda:	bf00      	nop
		}
	}
}
 8004fdc:	bf00      	nop
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	20000aec 	.word	0x20000aec
 8004fe8:	0801397c 	.word	0x0801397c
 8004fec:	20000d54 	.word	0x20000d54
 8004ff0:	20000456 	.word	0x20000456

08004ff4 <driveA>:
//driveA
// 指定距離、指定加速度で加速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004ff4:	b590      	push	{r4, r7, lr}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	4611      	mov	r1, r2
 8005000:	461a      	mov	r2, r3
 8005002:	4623      	mov	r3, r4
 8005004:	80fb      	strh	r3, [r7, #6]
 8005006:	4603      	mov	r3, r0
 8005008:	80bb      	strh	r3, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	807b      	strh	r3, [r7, #2]
 800500e:	4613      	mov	r3, r2
 8005010:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 8005012:	88bb      	ldrh	r3, [r7, #4]
 8005014:	ee07 3a90 	vmov	s15, r3
 8005018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501c:	4b27      	ldr	r3, [pc, #156]	; (80050bc <driveA+0xc8>)
 800501e:	edc3 7a00 	vstr	s15, [r3]
 8005022:	4b27      	ldr	r3, [pc, #156]	; (80050c0 <driveA+0xcc>)
 8005024:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8005028:	887b      	ldrh	r3, [r7, #2]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	4b24      	ldr	r3, [pc, #144]	; (80050c4 <driveA+0xd0>)
 8005034:	edc3 7a00 	vstr	s15, [r3]
 8005038:	4b23      	ldr	r3, [pc, #140]	; (80050c8 <driveA+0xd4>)
 800503a:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005048:	4b20      	ldr	r3, [pc, #128]	; (80050cc <driveA+0xd8>)
 800504a:	edc3 7a00 	vstr	s15, [r3]
 800504e:	4b20      	ldr	r3, [pc, #128]	; (80050d0 <driveA+0xdc>)
 8005050:	edc3 7a00 	vstr	s15, [r3]
	if(MF2.FLAG.HACCEL)target_speed_l = target_speed_r = speed_min_p;
 8005054:	4b1f      	ldr	r3, [pc, #124]	; (80050d4 <driveA+0xe0>)
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <driveA+0x84>
 8005062:	88bb      	ldrh	r3, [r7, #4]
 8005064:	ee07 3a90 	vmov	s15, r3
 8005068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506c:	4b1a      	ldr	r3, [pc, #104]	; (80050d8 <driveA+0xe4>)
 800506e:	edc3 7a00 	vstr	s15, [r3]
 8005072:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <driveA+0xe8>)
 8005074:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//走行開始
 8005078:	f7ff fe2e 	bl	8004cd8 <drive_start>

	//----走行----
	while((dist_l < dist) || (dist_r < dist));				//左右のモータが指定距離以上進むまで待機
 800507c:	bf00      	nop
 800507e:	883b      	ldrh	r3, [r7, #0]
 8005080:	ee07 3a90 	vmov	s15, r3
 8005084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005088:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <driveA+0xec>)
 800508a:	edd3 7a00 	vldr	s15, [r3]
 800508e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005096:	dcf2      	bgt.n	800507e <driveA+0x8a>
 8005098:	883b      	ldrh	r3, [r7, #0]
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050a2:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <driveA+0xf0>)
 80050a4:	edd3 7a00 	vldr	s15, [r3]
 80050a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b0:	dce5      	bgt.n	800507e <driveA+0x8a>
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd90      	pop	{r4, r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20000f6c 	.word	0x20000f6c
 80050c0:	20000b54 	.word	0x20000b54
 80050c4:	200001a4 	.word	0x200001a4
 80050c8:	2000077c 	.word	0x2000077c
 80050cc:	20000ae4 	.word	0x20000ae4
 80050d0:	20000d58 	.word	0x20000d58
 80050d4:	20000f64 	.word	0x20000f64
 80050d8:	200001a0 	.word	0x200001a0
 80050dc:	20000bfc 	.word	0x20000bfc
 80050e0:	200015c4 	.word	0x200015c4
 80050e4:	20000aec 	.word	0x20000aec

080050e8 <driveD>:
//driveD
// 指定距離、指定減速度で減速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 80050e8:	b590      	push	{r4, r7, lr}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4604      	mov	r4, r0
 80050f0:	4608      	mov	r0, r1
 80050f2:	4611      	mov	r1, r2
 80050f4:	461a      	mov	r2, r3
 80050f6:	4623      	mov	r3, r4
 80050f8:	80fb      	strh	r3, [r7, #6]
 80050fa:	4603      	mov	r3, r0
 80050fc:	80bb      	strh	r3, [r7, #4]
 80050fe:	460b      	mov	r3, r1
 8005100:	807b      	strh	r3, [r7, #2]
 8005102:	4613      	mov	r3, r2
 8005104:	803b      	strh	r3, [r7, #0]

	float speed_0 = (target_speed_l + target_speed_r) / 2;					//等速走行距離を計算するためにmain.cより参照
 8005106:	4b5a      	ldr	r3, [pc, #360]	; (8005270 <driveD+0x188>)
 8005108:	ed93 7a00 	vldr	s14, [r3]
 800510c:	4b59      	ldr	r3, [pc, #356]	; (8005274 <driveD+0x18c>)
 800510e:	edd3 7a00 	vldr	s15, [r3]
 8005112:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005116:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800511a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800511e:	edc7 7a03 	vstr	s15, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 8005122:	88bb      	ldrh	r3, [r7, #4]
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512c:	4b52      	ldr	r3, [pc, #328]	; (8005278 <driveD+0x190>)
 800512e:	edc3 7a00 	vstr	s15, [r3]
 8005132:	4b52      	ldr	r3, [pc, #328]	; (800527c <driveD+0x194>)
 8005134:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8005138:	887b      	ldrh	r3, [r7, #2]
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005142:	4b4f      	ldr	r3, [pc, #316]	; (8005280 <driveD+0x198>)
 8005144:	edc3 7a00 	vstr	s15, [r3]
 8005148:	4b4e      	ldr	r3, [pc, #312]	; (8005284 <driveD+0x19c>)
 800514a:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 800514e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800515a:	4b4b      	ldr	r3, [pc, #300]	; (8005288 <driveD+0x1a0>)
 800515c:	edc3 7a00 	vstr	s15, [r3]
 8005160:	4b4a      	ldr	r3, [pc, #296]	; (800528c <driveD+0x1a4>)
 8005162:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//等速走行距離 = 総距離 - 減速に必要な距離
 8005166:	883b      	ldrh	r3, [r7, #0]
 8005168:	ee07 3a90 	vmov	s15, r3
 800516c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005170:	4b42      	ldr	r3, [pc, #264]	; (800527c <driveD+0x194>)
 8005172:	edd3 6a00 	vldr	s13, [r3]
 8005176:	4b41      	ldr	r3, [pc, #260]	; (800527c <driveD+0x194>)
 8005178:	edd3 7a00 	vldr	s15, [r3]
 800517c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005180:	ed97 6a03 	vldr	s12, [r7, #12]
 8005184:	edd7 7a03 	vldr	s15, [r7, #12]
 8005188:	ee66 7a27 	vmul.f32	s15, s12, s15
 800518c:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005190:	4b3e      	ldr	r3, [pc, #248]	; (800528c <driveD+0x1a4>)
 8005192:	edd3 7a00 	vldr	s15, [r3]
 8005196:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800519a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800519e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051a6:	ee17 3a90 	vmov	r3, s15
 80051aa:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	4a35      	ldr	r2, [pc, #212]	; (8005288 <driveD+0x1a0>)
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	4a35      	ldr	r2, [pc, #212]	; (800528c <driveD+0x1a4>)
 80051b6:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	4a34      	ldr	r2, [pc, #208]	; (8005290 <driveD+0x1a8>)
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	4a34      	ldr	r2, [pc, #208]	; (8005294 <driveD+0x1ac>)
 80051c2:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 80051c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	dd1c      	ble.n	8005206 <driveD+0x11e>
		//----等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));	//a左右のモータが等速分の距離以上進むまで待機
 80051cc:	bf00      	nop
 80051ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051da:	4b2e      	ldr	r3, [pc, #184]	; (8005294 <driveD+0x1ac>)
 80051dc:	edd3 7a00 	vldr	s15, [r3]
 80051e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e8:	dcf1      	bgt.n	80051ce <driveD+0xe6>
 80051ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051f6:	4b26      	ldr	r3, [pc, #152]	; (8005290 <driveD+0x1a8>)
 80051f8:	edd3 7a00 	vldr	s15, [r3]
 80051fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005204:	dce3      	bgt.n	80051ce <driveD+0xe6>
	}
	accel_l = accel_r = accel_p;
 8005206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005212:	4b1d      	ldr	r3, [pc, #116]	; (8005288 <driveD+0x1a0>)
 8005214:	edc3 7a00 	vstr	s15, [r3]
 8005218:	4b1c      	ldr	r3, [pc, #112]	; (800528c <driveD+0x1a4>)
 800521a:	edc3 7a00 	vstr	s15, [r3]
	//----減速走行----
	while((dist_l < dist) && (dist_r < dist));			//a左右のモータが減速分の距離以上進むまで待機
 800521e:	bf00      	nop
 8005220:	883b      	ldrh	r3, [r7, #0]
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800522a:	4b1a      	ldr	r3, [pc, #104]	; (8005294 <driveD+0x1ac>)
 800522c:	edd3 7a00 	vldr	s15, [r3]
 8005230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005238:	dd0c      	ble.n	8005254 <driveD+0x16c>
 800523a:	883b      	ldrh	r3, [r7, #0]
 800523c:	ee07 3a90 	vmov	s15, r3
 8005240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005244:	4b12      	ldr	r3, [pc, #72]	; (8005290 <driveD+0x1a8>)
 8005246:	edd3 7a00 	vldr	s15, [r3]
 800524a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800524e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005252:	dce5      	bgt.n	8005220 <driveD+0x138>

	if(!MF2.FLAG.HACCEL)drive_stop();											//走行停止
 8005254:	4b10      	ldr	r3, [pc, #64]	; (8005298 <driveD+0x1b0>)
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <driveD+0x17e>
 8005262:	f7ff fd69 	bl	8004d38 <drive_stop>
}
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	bd90      	pop	{r4, r7, pc}
 800526e:	bf00      	nop
 8005270:	20000bfc 	.word	0x20000bfc
 8005274:	200001a0 	.word	0x200001a0
 8005278:	20000f6c 	.word	0x20000f6c
 800527c:	20000b54 	.word	0x20000b54
 8005280:	200001a4 	.word	0x200001a4
 8005284:	2000077c 	.word	0x2000077c
 8005288:	20000ae4 	.word	0x20000ae4
 800528c:	20000d58 	.word	0x20000d58
 8005290:	20000aec 	.word	0x20000aec
 8005294:	200015c4 	.word	0x200015c4
 8005298:	20000f64 	.word	0x20000f64

0800529c <driveU>:
//driveU
// 指定距離分等速走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	4603      	mov	r3, r0
 80052a4:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;									//等速走行のため加速度は0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	4a28      	ldr	r2, [pc, #160]	; (800534c <driveU+0xb0>)
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	4a28      	ldr	r2, [pc, #160]	; (8005350 <driveU+0xb4>)
 80052b0:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	4a27      	ldr	r2, [pc, #156]	; (8005354 <driveU+0xb8>)
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	4a27      	ldr	r2, [pc, #156]	; (8005358 <driveU+0xbc>)
 80052bc:	6013      	str	r3, [r2, #0]

	//----走行----
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 80052be:	e024      	b.n	800530a <driveU+0x6e>
		if(MF.FLAG.WEDGE){
 80052c0:	4b26      	ldr	r3, [pc, #152]	; (800535c <driveU+0xc0>)
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d01d      	beq.n	800530a <driveU+0x6e>
			if(ad_l < WALL_BASE_L-40 || ad_r < WALL_BASE_R-40){
 80052ce:	4b24      	ldr	r3, [pc, #144]	; (8005360 <driveU+0xc4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b63      	cmp	r3, #99	; 0x63
 80052d4:	d903      	bls.n	80052de <driveU+0x42>
 80052d6:	4b23      	ldr	r3, [pc, #140]	; (8005364 <driveU+0xc8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b4f      	cmp	r3, #79	; 0x4f
 80052dc:	d815      	bhi.n	800530a <driveU+0x6e>
				while((dist_l < W_DIST) || (dist_r < W_DIST));	//左右のモータが壁切れ用指定距離以上進むまで待機
 80052de:	bf00      	nop
 80052e0:	4b1d      	ldr	r3, [pc, #116]	; (8005358 <driveU+0xbc>)
 80052e2:	edd3 7a00 	vldr	s15, [r3]
 80052e6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005368 <driveU+0xcc>
 80052ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f2:	d4f5      	bmi.n	80052e0 <driveU+0x44>
 80052f4:	4b17      	ldr	r3, [pc, #92]	; (8005354 <driveU+0xb8>)
 80052f6:	edd3 7a00 	vldr	s15, [r3]
 80052fa:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005368 <driveU+0xcc>
 80052fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005306:	d4eb      	bmi.n	80052e0 <driveU+0x44>
			break;
 8005308:	e019      	b.n	800533e <driveU+0xa2>
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 800530a:	88fb      	ldrh	r3, [r7, #6]
 800530c:	ee07 3a90 	vmov	s15, r3
 8005310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005314:	4b10      	ldr	r3, [pc, #64]	; (8005358 <driveU+0xbc>)
 8005316:	edd3 7a00 	vldr	s15, [r3]
 800531a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800531e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005322:	dccd      	bgt.n	80052c0 <driveU+0x24>
 8005324:	88fb      	ldrh	r3, [r7, #6]
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800532e:	4b09      	ldr	r3, [pc, #36]	; (8005354 <driveU+0xb8>)
 8005330:	edd3 7a00 	vldr	s15, [r3]
 8005334:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533c:	dcc0      	bgt.n	80052c0 <driveU+0x24>
			}
		}
	}
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000ae4 	.word	0x20000ae4
 8005350:	20000d58 	.word	0x20000d58
 8005354:	20000aec 	.word	0x20000aec
 8005358:	200015c4 	.word	0x200015c4
 800535c:	20000f68 	.word	0x20000f68
 8005360:	20000afc 	.word	0x20000afc
 8005364:	20000f60 	.word	0x20000f60
 8005368:	428c0000 	.word	0x428c0000

0800536c <driveC>:
//driveC
// 指定距離分デフォルト速度で走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 8005376:	4b19      	ldr	r3, [pc, #100]	; (80053dc <driveC+0x70>)
 8005378:	4a19      	ldr	r2, [pc, #100]	; (80053e0 <driveC+0x74>)
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <driveC+0x78>)
 800537e:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 150;
 8005380:	4b16      	ldr	r3, [pc, #88]	; (80053dc <driveC+0x70>)
 8005382:	4a19      	ldr	r2, [pc, #100]	; (80053e8 <driveC+0x7c>)
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	4a19      	ldr	r2, [pc, #100]	; (80053ec <driveC+0x80>)
 8005388:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;												//等速走行のため加速度は0
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	4a18      	ldr	r2, [pc, #96]	; (80053f0 <driveC+0x84>)
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	4a18      	ldr	r2, [pc, #96]	; (80053f4 <driveC+0x88>)
 8005394:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 8005396:	f7ff fc9f 	bl	8004cd8 <drive_start>
	//====回転====
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが定速分の距離以上進むまで待機
 800539a:	bf00      	nop
 800539c:	88fb      	ldrh	r3, [r7, #6]
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053a6:	4b14      	ldr	r3, [pc, #80]	; (80053f8 <driveC+0x8c>)
 80053a8:	edd3 7a00 	vldr	s15, [r3]
 80053ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b4:	dcf2      	bgt.n	800539c <driveC+0x30>
 80053b6:	88fb      	ldrh	r3, [r7, #6]
 80053b8:	ee07 3a90 	vmov	s15, r3
 80053bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053c0:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <driveC+0x90>)
 80053c2:	edd3 7a00 	vldr	s15, [r3]
 80053c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ce:	dce5      	bgt.n	800539c <driveC+0x30>

	drive_stop();											//走行停止
 80053d0:	f7ff fcb2 	bl	8004d38 <drive_stop>
}
 80053d4:	bf00      	nop
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	43160000 	.word	0x43160000
 80053e0:	20000f6c 	.word	0x20000f6c
 80053e4:	20000b54 	.word	0x20000b54
 80053e8:	200001a4 	.word	0x200001a4
 80053ec:	2000077c 	.word	0x2000077c
 80053f0:	20000ae4 	.word	0x20000ae4
 80053f4:	20000d58 	.word	0x20000d58
 80053f8:	200015c4 	.word	0x200015c4
 80053fc:	20000aec 	.word	0x20000aec

08005400 <driveC2>:
//driveC2
//a指定距離分デフォルト逆回転速度で走行して停止する
//a引数1：dist …… 走行距離
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC2(uint16_t dist){
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = -250;
 800540a:	4b1a      	ldr	r3, [pc, #104]	; (8005474 <driveC2+0x74>)
 800540c:	4a1a      	ldr	r2, [pc, #104]	; (8005478 <driveC2+0x78>)
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	4a1a      	ldr	r2, [pc, #104]	; (800547c <driveC2+0x7c>)
 8005412:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = -250;
 8005414:	4b17      	ldr	r3, [pc, #92]	; (8005474 <driveC2+0x74>)
 8005416:	4a1a      	ldr	r2, [pc, #104]	; (8005480 <driveC2+0x80>)
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	4a1a      	ldr	r2, [pc, #104]	; (8005484 <driveC2+0x84>)
 800541c:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;									//a等速走行のため加速度は0
 800541e:	f04f 0300 	mov.w	r3, #0
 8005422:	4a19      	ldr	r2, [pc, #100]	; (8005488 <driveC2+0x88>)
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	4a19      	ldr	r2, [pc, #100]	; (800548c <driveC2+0x8c>)
 8005428:	6013      	str	r3, [r2, #0]

	drive_start();											//a走行開始
 800542a:	f7ff fc55 	bl	8004cd8 <drive_start>
	//====a回転====
	while((dist_l > (-1*dist)) || (dist_r > (-1*dist)));	//a左右のモータが定速分の逆走距離以上進むまで待機
 800542e:	bf00      	nop
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	425b      	negs	r3, r3
 8005434:	ee07 3a90 	vmov	s15, r3
 8005438:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800543c:	4b14      	ldr	r3, [pc, #80]	; (8005490 <driveC2+0x90>)
 800543e:	edd3 7a00 	vldr	s15, [r3]
 8005442:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544a:	d4f1      	bmi.n	8005430 <driveC2+0x30>
 800544c:	88fb      	ldrh	r3, [r7, #6]
 800544e:	425b      	negs	r3, r3
 8005450:	ee07 3a90 	vmov	s15, r3
 8005454:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005458:	4b0e      	ldr	r3, [pc, #56]	; (8005494 <driveC2+0x94>)
 800545a:	edd3 7a00 	vldr	s15, [r3]
 800545e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005466:	d4e3      	bmi.n	8005430 <driveC2+0x30>

	drive_stop();											//a走行停止
 8005468:	f7ff fc66 	bl	8004d38 <drive_stop>
}
 800546c:	bf00      	nop
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	c37a0000 	.word	0xc37a0000
 8005478:	20000f6c 	.word	0x20000f6c
 800547c:	20000b54 	.word	0x20000b54
 8005480:	200001a4 	.word	0x200001a4
 8005484:	2000077c 	.word	0x2000077c
 8005488:	20000ae4 	.word	0x20000ae4
 800548c:	20000d58 	.word	0x20000d58
 8005490:	200015c4 	.word	0x200015c4
 8005494:	20000aec 	.word	0x20000aec

08005498 <slalomF>:
//slalomF
//aスラロームの前オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomF(int16_t accel_p, int16_t speed_p, uint8_t dist_p, uint16_t wall_fl, uint16_t wall_fr){
 8005498:	b590      	push	{r4, r7, lr}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	4604      	mov	r4, r0
 80054a0:	4608      	mov	r0, r1
 80054a2:	4611      	mov	r1, r2
 80054a4:	461a      	mov	r2, r3
 80054a6:	4623      	mov	r3, r4
 80054a8:	80fb      	strh	r3, [r7, #6]
 80054aa:	4603      	mov	r3, r0
 80054ac:	80bb      	strh	r3, [r7, #4]
 80054ae:	460b      	mov	r3, r1
 80054b0:	70fb      	strb	r3, [r7, #3]
 80054b2:	4613      	mov	r3, r2
 80054b4:	803b      	strh	r3, [r7, #0]
	MF.FLAG.GYRO = 0;
 80054b6:	4a48      	ldr	r2, [pc, #288]	; (80055d8 <slalomF+0x140>)
 80054b8:	8813      	ldrh	r3, [r2, #0]
 80054ba:	f36f 2308 	bfc	r3, #8, #1
 80054be:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80054c0:	4a45      	ldr	r2, [pc, #276]	; (80055d8 <slalomF+0x140>)
 80054c2:	8813      	ldrh	r3, [r2, #0]
 80054c4:	f043 0304 	orr.w	r3, r3, #4
 80054c8:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 80054ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054d6:	4b41      	ldr	r3, [pc, #260]	; (80055dc <slalomF+0x144>)
 80054d8:	edc3 7a00 	vstr	s15, [r3]
 80054dc:	4b40      	ldr	r3, [pc, #256]	; (80055e0 <slalomF+0x148>)
 80054de:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 80054e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054ee:	4b3d      	ldr	r3, [pc, #244]	; (80055e4 <slalomF+0x14c>)
 80054f0:	edc3 7a00 	vstr	s15, [r3]
 80054f4:	4b3c      	ldr	r3, [pc, #240]	; (80055e8 <slalomF+0x150>)
 80054f6:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 80054fa:	f7ff fc45 	bl	8004d88 <control_start>
	dist_l = dist_r = 0;
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	4a3a      	ldr	r2, [pc, #232]	; (80055ec <slalomF+0x154>)
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	4a3a      	ldr	r2, [pc, #232]	; (80055f0 <slalomF+0x158>)
 8005508:	6013      	str	r3, [r2, #0]
	if(run_mode == 5 && MF2.FLAG.TEMP){
 800550a:	4b3a      	ldr	r3, [pc, #232]	; (80055f4 <slalomF+0x15c>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b05      	cmp	r3, #5
 8005512:	d13f      	bne.n	8005594 <slalomF+0xfc>
 8005514:	4b38      	ldr	r3, [pc, #224]	; (80055f8 <slalomF+0x160>)
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d038      	beq.n	8005594 <slalomF+0xfc>
		while(dist_l < dist_p || dist_r < dist_p){
 8005522:	e00e      	b.n	8005542 <slalomF+0xaa>
			if(ad_fl > wall_fl || ad_fr > wall_fr){
 8005524:	883a      	ldrh	r2, [r7, #0]
 8005526:	4b35      	ldr	r3, [pc, #212]	; (80055fc <slalomF+0x164>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d304      	bcc.n	8005538 <slalomF+0xa0>
 800552e:	8b3a      	ldrh	r2, [r7, #24]
 8005530:	4b33      	ldr	r3, [pc, #204]	; (8005600 <slalomF+0x168>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	429a      	cmp	r2, r3
 8005536:	d204      	bcs.n	8005542 <slalomF+0xaa>
				full_led_write(RED);
 8005538:	2001      	movs	r0, #1
 800553a:	f00c fb6d 	bl	8011c18 <full_led_write>
				break;
 800553e:	bf00      	nop
	if(run_mode == 5 && MF2.FLAG.TEMP){
 8005540:	e042      	b.n	80055c8 <slalomF+0x130>
		while(dist_l < dist_p || dist_r < dist_p){
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	ee07 3a90 	vmov	s15, r3
 8005548:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800554c:	4b28      	ldr	r3, [pc, #160]	; (80055f0 <slalomF+0x158>)
 800554e:	edd3 7a00 	vldr	s15, [r3]
 8005552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555a:	dce3      	bgt.n	8005524 <slalomF+0x8c>
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005566:	4b21      	ldr	r3, [pc, #132]	; (80055ec <slalomF+0x154>)
 8005568:	edd3 7a00 	vldr	s15, [r3]
 800556c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005574:	dcd6      	bgt.n	8005524 <slalomF+0x8c>
	if(run_mode == 5 && MF2.FLAG.TEMP){
 8005576:	e027      	b.n	80055c8 <slalomF+0x130>
			}
		}
	}else{
		while(dist_l < dist_p && dist_r < dist_p){
			if(ad_fl > wall_fl || ad_fr > wall_fr){
 8005578:	883a      	ldrh	r2, [r7, #0]
 800557a:	4b20      	ldr	r3, [pc, #128]	; (80055fc <slalomF+0x164>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d304      	bcc.n	800558c <slalomF+0xf4>
 8005582:	8b3a      	ldrh	r2, [r7, #24]
 8005584:	4b1e      	ldr	r3, [pc, #120]	; (8005600 <slalomF+0x168>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d203      	bcs.n	8005594 <slalomF+0xfc>
				full_led_write(RED);
 800558c:	2001      	movs	r0, #1
 800558e:	f00c fb43 	bl	8011c18 <full_led_write>
				break;
 8005592:	e019      	b.n	80055c8 <slalomF+0x130>
		while(dist_l < dist_p && dist_r < dist_p){
 8005594:	78fb      	ldrb	r3, [r7, #3]
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800559e:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <slalomF+0x158>)
 80055a0:	edd3 7a00 	vldr	s15, [r3]
 80055a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ac:	dd0c      	ble.n	80055c8 <slalomF+0x130>
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	ee07 3a90 	vmov	s15, r3
 80055b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <slalomF+0x154>)
 80055ba:	edd3 7a00 	vldr	s15, [r3]
 80055be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c6:	dcd7      	bgt.n	8005578 <slalomF+0xe0>
			}
		}
	}
	drive_stop();
 80055c8:	f7ff fbb6 	bl	8004d38 <drive_stop>
	control_stop();
 80055cc:	f7ff fc04 	bl	8004dd8 <control_stop>
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd90      	pop	{r4, r7, pc}
 80055d8:	20000f68 	.word	0x20000f68
 80055dc:	20000ae4 	.word	0x20000ae4
 80055e0:	20000d58 	.word	0x20000d58
 80055e4:	200001a4 	.word	0x200001a4
 80055e8:	2000077c 	.word	0x2000077c
 80055ec:	20000aec 	.word	0x20000aec
 80055f0:	200015c4 	.word	0x200015c4
 80055f4:	20000456 	.word	0x20000456
 80055f8:	20000f64 	.word	0x20000f64
 80055fc:	20000d54 	.word	0x20000d54
 8005600:	20000c00 	.word	0x20000c00

08005604 <slalomR>:
//slalomR
//aスラロームの旋回部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomR(int32_t degaccel_p, int16_t omega_p, int16_t degree_p, int16_t speed_p){
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	4608      	mov	r0, r1
 800560e:	4611      	mov	r1, r2
 8005610:	461a      	mov	r2, r3
 8005612:	4603      	mov	r3, r0
 8005614:	817b      	strh	r3, [r7, #10]
 8005616:	460b      	mov	r3, r1
 8005618:	813b      	strh	r3, [r7, #8]
 800561a:	4613      	mov	r3, r2
 800561c:	80fb      	strh	r3, [r7, #6]
	MF.FLAG.GYRO = 1;
 800561e:	4a82      	ldr	r2, [pc, #520]	; (8005828 <slalomR+0x224>)
 8005620:	8813      	ldrh	r3, [r2, #0]
 8005622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005626:	8013      	strh	r3, [r2, #0]
//	full_led_write(WHITE);
	target_degaccel_z = degaccel_p;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005632:	4b7e      	ldr	r3, [pc, #504]	; (800582c <slalomR+0x228>)
 8005634:	edc3 7a00 	vstr	s15, [r3]
	target_omega_z = 0;
 8005638:	4b7d      	ldr	r3, [pc, #500]	; (8005830 <slalomR+0x22c>)
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
	speed_G = speed_p;
 8005640:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005644:	ee07 3a90 	vmov	s15, r3
 8005648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800564c:	4b79      	ldr	r3, [pc, #484]	; (8005834 <slalomR+0x230>)
 800564e:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_degree;

	if(omega_p < 0){
 8005652:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005656:	2b00      	cmp	r3, #0
 8005658:	da1f      	bge.n	800569a <slalomR+0x96>
		omega_min = omega_p;
 800565a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005666:	4b74      	ldr	r3, [pc, #464]	; (8005838 <slalomR+0x234>)
 8005668:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_min * omega_min / target_degaccel_z / 2;
 800566c:	4b72      	ldr	r3, [pc, #456]	; (8005838 <slalomR+0x234>)
 800566e:	ed93 7a00 	vldr	s14, [r3]
 8005672:	4b71      	ldr	r3, [pc, #452]	; (8005838 <slalomR+0x234>)
 8005674:	edd3 7a00 	vldr	s15, [r3]
 8005678:	ee67 6a27 	vmul.f32	s13, s14, s15
 800567c:	4b6b      	ldr	r3, [pc, #428]	; (800582c <slalomR+0x228>)
 800567e:	edd3 7a00 	vldr	s15, [r3]
 8005682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005686:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800568a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800568e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005692:	ee17 3a90 	vmov	r3, s15
 8005696:	82fb      	strh	r3, [r7, #22]
 8005698:	e01e      	b.n	80056d8 <slalomR+0xd4>
	}else{
		omega_max = omega_p;
 800569a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056a6:	4b65      	ldr	r3, [pc, #404]	; (800583c <slalomR+0x238>)
 80056a8:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_max * omega_max / target_degaccel_z / 2;
 80056ac:	4b63      	ldr	r3, [pc, #396]	; (800583c <slalomR+0x238>)
 80056ae:	ed93 7a00 	vldr	s14, [r3]
 80056b2:	4b62      	ldr	r3, [pc, #392]	; (800583c <slalomR+0x238>)
 80056b4:	edd3 7a00 	vldr	s15, [r3]
 80056b8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80056bc:	4b5b      	ldr	r3, [pc, #364]	; (800582c <slalomR+0x228>)
 80056be:	edd3 7a00 	vldr	s15, [r3]
 80056c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056c6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80056ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056d2:	ee17 3a90 	vmov	r3, s15
 80056d6:	82fb      	strh	r3, [r7, #22]
	}

	MF.FLAG.DRV = 1;
 80056d8:	4a53      	ldr	r2, [pc, #332]	; (8005828 <slalomR+0x224>)
 80056da:	8813      	ldrh	r3, [r2, #0]
 80056dc:	f043 0302 	orr.w	r3, r3, #2
 80056e0:	8013      	strh	r3, [r2, #0]
	if(omega_p < 0){
 80056e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	da14      	bge.n	8005714 <slalomR+0x110>
		while(degree_z > target_degree_z+c_degree);
 80056ea:	bf00      	nop
 80056ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80056f0:	ee07 3a90 	vmov	s15, r3
 80056f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056f8:	4b51      	ldr	r3, [pc, #324]	; (8005840 <slalomR+0x23c>)
 80056fa:	edd3 7a00 	vldr	s15, [r3]
 80056fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005702:	4b50      	ldr	r3, [pc, #320]	; (8005844 <slalomR+0x240>)
 8005704:	edd3 7a00 	vldr	s15, [r3]
 8005708:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800570c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005710:	d4ec      	bmi.n	80056ec <slalomR+0xe8>
 8005712:	e013      	b.n	800573c <slalomR+0x138>
	}else{
		while(degree_z < target_degree_z+c_degree);
 8005714:	bf00      	nop
 8005716:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800571a:	ee07 3a90 	vmov	s15, r3
 800571e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005722:	4b47      	ldr	r3, [pc, #284]	; (8005840 <slalomR+0x23c>)
 8005724:	edd3 7a00 	vldr	s15, [r3]
 8005728:	ee37 7a27 	vadd.f32	s14, s14, s15
 800572c:	4b45      	ldr	r3, [pc, #276]	; (8005844 <slalomR+0x240>)
 800572e:	edd3 7a00 	vldr	s15, [r3]
 8005732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573a:	dcec      	bgt.n	8005716 <slalomR+0x112>
	}

	target_degaccel_z = 0;
 800573c:	4b3b      	ldr	r3, [pc, #236]	; (800582c <slalomR+0x228>)
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	601a      	str	r2, [r3, #0]

	if(omega_p < 0){
 8005744:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005748:	2b00      	cmp	r3, #0
 800574a:	da18      	bge.n	800577e <slalomR+0x17a>
		while(degree_z > target_degree_z+(degree_p-c_degree-4));
 800574c:	bf00      	nop
 800574e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005752:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	3b04      	subs	r3, #4
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005762:	4b37      	ldr	r3, [pc, #220]	; (8005840 <slalomR+0x23c>)
 8005764:	edd3 7a00 	vldr	s15, [r3]
 8005768:	ee37 7a27 	vadd.f32	s14, s14, s15
 800576c:	4b35      	ldr	r3, [pc, #212]	; (8005844 <slalomR+0x240>)
 800576e:	edd3 7a00 	vldr	s15, [r3]
 8005772:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577a:	d4e8      	bmi.n	800574e <slalomR+0x14a>
 800577c:	e017      	b.n	80057ae <slalomR+0x1aa>
	}else{
		while(degree_z < target_degree_z+(degree_p-c_degree+4));
 800577e:	bf00      	nop
 8005780:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005784:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	3304      	adds	r3, #4
 800578c:	ee07 3a90 	vmov	s15, r3
 8005790:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005794:	4b2a      	ldr	r3, [pc, #168]	; (8005840 <slalomR+0x23c>)
 8005796:	edd3 7a00 	vldr	s15, [r3]
 800579a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800579e:	4b29      	ldr	r3, [pc, #164]	; (8005844 <slalomR+0x240>)
 80057a0:	edd3 7a00 	vldr	s15, [r3]
 80057a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ac:	dce8      	bgt.n	8005780 <slalomR+0x17c>
	}

	target_degaccel_z = -degaccel_p;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	425b      	negs	r3, r3
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057ba:	4b1c      	ldr	r3, [pc, #112]	; (800582c <slalomR+0x228>)
 80057bc:	edc3 7a00 	vstr	s15, [r3]

	if(omega_p < 0){
 80057c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	da14      	bge.n	80057f2 <slalomR+0x1ee>
		while(degree_z > target_degree_z+degree_p);
 80057c8:	bf00      	nop
 80057ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057d6:	4b1a      	ldr	r3, [pc, #104]	; (8005840 <slalomR+0x23c>)
 80057d8:	edd3 7a00 	vldr	s15, [r3]
 80057dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057e0:	4b18      	ldr	r3, [pc, #96]	; (8005844 <slalomR+0x240>)
 80057e2:	edd3 7a00 	vldr	s15, [r3]
 80057e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ee:	d4ec      	bmi.n	80057ca <slalomR+0x1c6>
	}else{
		while(degree_z < target_degree_z+degree_p);
	}
}
 80057f0:	e013      	b.n	800581a <slalomR+0x216>
		while(degree_z < target_degree_z+degree_p);
 80057f2:	bf00      	nop
 80057f4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80057f8:	ee07 3a90 	vmov	s15, r3
 80057fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005800:	4b0f      	ldr	r3, [pc, #60]	; (8005840 <slalomR+0x23c>)
 8005802:	edd3 7a00 	vldr	s15, [r3]
 8005806:	ee37 7a27 	vadd.f32	s14, s14, s15
 800580a:	4b0e      	ldr	r3, [pc, #56]	; (8005844 <slalomR+0x240>)
 800580c:	edd3 7a00 	vldr	s15, [r3]
 8005810:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005818:	dcec      	bgt.n	80057f4 <slalomR+0x1f0>
}
 800581a:	bf00      	nop
 800581c:	371c      	adds	r7, #28
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	20000f68 	.word	0x20000f68
 800582c:	20000b58 	.word	0x20000b58
 8005830:	200001a8 	.word	0x200001a8
 8005834:	20000af4 	.word	0x20000af4
 8005838:	200002b8 	.word	0x200002b8
 800583c:	20000ae8 	.word	0x20000ae8
 8005840:	20000bf8 	.word	0x20000bf8
 8005844:	20000b5c 	.word	0x20000b5c

08005848 <slalomB>:
//slalomB
//aスラロームの後オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomB(int16_t accel_p, int16_t speed_p, uint8_t dist_p){
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	80fb      	strh	r3, [r7, #6]
 8005852:	460b      	mov	r3, r1
 8005854:	80bb      	strh	r3, [r7, #4]
 8005856:	4613      	mov	r3, r2
 8005858:	70fb      	strb	r3, [r7, #3]
	MF.FLAG.GYRO = 0;
 800585a:	4a25      	ldr	r2, [pc, #148]	; (80058f0 <slalomB+0xa8>)
 800585c:	8813      	ldrh	r3, [r2, #0]
 800585e:	f36f 2308 	bfc	r3, #8, #1
 8005862:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005864:	4a22      	ldr	r2, [pc, #136]	; (80058f0 <slalomB+0xa8>)
 8005866:	8813      	ldrh	r3, [r2, #0]
 8005868:	f043 0304 	orr.w	r3, r3, #4
 800586c:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 800586e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800587a:	4b1e      	ldr	r3, [pc, #120]	; (80058f4 <slalomB+0xac>)
 800587c:	edc3 7a00 	vstr	s15, [r3]
 8005880:	4b1d      	ldr	r3, [pc, #116]	; (80058f8 <slalomB+0xb0>)
 8005882:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 8005886:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005892:	4b1a      	ldr	r3, [pc, #104]	; (80058fc <slalomB+0xb4>)
 8005894:	edc3 7a00 	vstr	s15, [r3]
 8005898:	4b19      	ldr	r3, [pc, #100]	; (8005900 <slalomB+0xb8>)
 800589a:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 800589e:	f7ff fa73 	bl	8004d88 <control_start>
	dist_l = dist_r = 0;
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	4a17      	ldr	r2, [pc, #92]	; (8005904 <slalomB+0xbc>)
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	4a17      	ldr	r2, [pc, #92]	; (8005908 <slalomB+0xc0>)
 80058ac:	6013      	str	r3, [r2, #0]
	while(dist_l < dist_p && dist_r < dist_p);
 80058ae:	bf00      	nop
 80058b0:	78fb      	ldrb	r3, [r7, #3]
 80058b2:	ee07 3a90 	vmov	s15, r3
 80058b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058ba:	4b13      	ldr	r3, [pc, #76]	; (8005908 <slalomB+0xc0>)
 80058bc:	edd3 7a00 	vldr	s15, [r3]
 80058c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c8:	dc00      	bgt.n	80058cc <slalomB+0x84>
}
 80058ca:	e00c      	b.n	80058e6 <slalomB+0x9e>
	while(dist_l < dist_p && dist_r < dist_p);
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058d6:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <slalomB+0xbc>)
 80058d8:	edd3 7a00 	vldr	s15, [r3]
 80058dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e4:	dce4      	bgt.n	80058b0 <slalomB+0x68>
}
 80058e6:	bf00      	nop
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000f68 	.word	0x20000f68
 80058f4:	20000ae4 	.word	0x20000ae4
 80058f8:	20000d58 	.word	0x20000d58
 80058fc:	200001a4 	.word	0x200001a4
 8005900:	2000077c 	.word	0x2000077c
 8005904:	20000aec 	.word	0x20000aec
 8005908:	200015c4 	.word	0x200015c4

0800590c <set_position>:
//set_position
//a機体の尻を壁に当てて場所を区画中央に合わせる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(){
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0

  driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8005910:	2064      	movs	r0, #100	; 0x64
 8005912:	f7ff fd75 	bl	8005400 <driveC2>
  degree_z = target_degree_z;
 8005916:	4b05      	ldr	r3, [pc, #20]	; (800592c <set_position+0x20>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a05      	ldr	r2, [pc, #20]	; (8005930 <set_position+0x24>)
 800591c:	6013      	str	r3, [r2, #0]
  start_mode = 0;
 800591e:	4b05      	ldr	r3, [pc, #20]	; (8005934 <set_position+0x28>)
 8005920:	2200      	movs	r2, #0
 8005922:	701a      	strb	r2, [r3, #0]
  start_sectionA();
 8005924:	f000 f826 	bl	8005974 <start_sectionA>
}
 8005928:	bf00      	nop
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20000bf8 	.word	0x20000bf8
 8005930:	20000b5c 	.word	0x20000b5c
 8005934:	200015c8 	.word	0x200015c8

08005938 <set_positionF>:
//set_positionF
//a前壁との距離を測定し、場所を区画中央に合わせる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_positionF(){
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0

	full_led_write(RED);
 800593c:	2001      	movs	r0, #1
 800593e:	f00c f96b 	bl	8011c18 <full_led_write>
	HAL_Delay(100);
 8005942:	2064      	movs	r0, #100	; 0x64
 8005944:	f7fb fb6a 	bl	800101c <HAL_Delay>

	MF.FLAG.DRV = 1;
 8005948:	4a09      	ldr	r2, [pc, #36]	; (8005970 <set_positionF+0x38>)
 800594a:	8813      	ldrh	r3, [r2, #0]
 800594c:	f043 0302 	orr.w	r3, r3, #2
 8005950:	8013      	strh	r3, [r2, #0]
//	MF.FLAG.FWALL = 1;
	MF.FLAG.GCTRL = 1;
 8005952:	4a07      	ldr	r2, [pc, #28]	; (8005970 <set_positionF+0x38>)
 8005954:	8813      	ldrh	r3, [r2, #0]
 8005956:	f043 0310 	orr.w	r3, r3, #16
 800595a:	8013      	strh	r3, [r2, #0]
//	while(MF.FLAG.FWALL);

	MF.FLAG.GCTRL = 0;
 800595c:	4a04      	ldr	r2, [pc, #16]	; (8005970 <set_positionF+0x38>)
 800595e:	8813      	ldrh	r3, [r2, #0]
 8005960:	f36f 1304 	bfc	r3, #4, #1
 8005964:	8013      	strh	r3, [r2, #0]
	drive_stop();
 8005966:	f7ff f9e7 	bl	8004d38 <drive_stop>
}
 800596a:	bf00      	nop
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000f68 	.word	0x20000f68

08005974 <start_sectionA>:
//start_sectionA
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA(void){
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0

	control_start();
 8005978:	f7ff fa06 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 800597c:	4b94      	ldr	r3, [pc, #592]	; (8005bd0 <start_sectionA+0x25c>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d12a      	bne.n	80059dc <start_sectionA+0x68>
		if(start_mode == 0){
 8005986:	4b93      	ldr	r3, [pc, #588]	; (8005bd4 <start_sectionA+0x260>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d108      	bne.n	80059a2 <start_sectionA+0x2e>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005990:	2388      	movs	r3, #136	; 0x88
 8005992:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005996:	211e      	movs	r1, #30
 8005998:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800599c:	f7ff fb2a 	bl	8004ff4 <driveA>
 80059a0:	e108      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 1){
 80059a2:	4b8c      	ldr	r3, [pc, #560]	; (8005bd4 <start_sectionA+0x260>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d108      	bne.n	80059be <start_sectionA+0x4a>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 80059ac:	235b      	movs	r3, #91	; 0x5b
 80059ae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80059b2:	211e      	movs	r1, #30
 80059b4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80059b8:	f7ff fb1c 	bl	8004ff4 <driveA>
 80059bc:	e0fa      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 2){
 80059be:	4b85      	ldr	r3, [pc, #532]	; (8005bd4 <start_sectionA+0x260>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	f040 80f5 	bne.w	8005bb4 <start_sectionA+0x240>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_START_HALF);				//aスタート半区画分加速しながら走行。走行後は停止しない
 80059ca:	232d      	movs	r3, #45	; 0x2d
 80059cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80059d0:	211e      	movs	r1, #30
 80059d2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80059d6:	f7ff fb0d 	bl	8004ff4 <driveA>
 80059da:	e0eb      	b.n	8005bb4 <start_sectionA+0x240>
		}
	}else if(run_mode == MIDDLE){
 80059dc:	4b7c      	ldr	r3, [pc, #496]	; (8005bd0 <start_sectionA+0x25c>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d12a      	bne.n	8005a3c <start_sectionA+0xc8>
		if(start_mode == 0){
 80059e6:	4b7b      	ldr	r3, [pc, #492]	; (8005bd4 <start_sectionA+0x260>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d108      	bne.n	8005a02 <start_sectionA+0x8e>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_START);				//aスタート区画分加速しながら走行。走行後は停止しない
 80059f0:	2388      	movs	r3, #136	; 0x88
 80059f2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80059f6:	211e      	movs	r1, #30
 80059f8:	f241 7070 	movw	r0, #6000	; 0x1770
 80059fc:	f7ff fafa 	bl	8004ff4 <driveA>
 8005a00:	e0d8      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 1){
 8005a02:	4b74      	ldr	r3, [pc, #464]	; (8005bd4 <start_sectionA+0x260>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d108      	bne.n	8005a1e <start_sectionA+0xaa>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);				//a半区画分加速しながら走行。走行後は停止しない
 8005a0c:	235b      	movs	r3, #91	; 0x5b
 8005a0e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005a12:	211e      	movs	r1, #30
 8005a14:	f241 7070 	movw	r0, #6000	; 0x1770
 8005a18:	f7ff faec 	bl	8004ff4 <driveA>
 8005a1c:	e0ca      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 2){
 8005a1e:	4b6d      	ldr	r3, [pc, #436]	; (8005bd4 <start_sectionA+0x260>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	f040 80c5 	bne.w	8005bb4 <start_sectionA+0x240>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005a2a:	232d      	movs	r3, #45	; 0x2d
 8005a2c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005a30:	211e      	movs	r1, #30
 8005a32:	f241 7070 	movw	r0, #6000	; 0x1770
 8005a36:	f7ff fadd 	bl	8004ff4 <driveA>
 8005a3a:	e0bb      	b.n	8005bb4 <start_sectionA+0x240>
		}
	}else if(run_mode == HIGH){
 8005a3c:	4b64      	ldr	r3, [pc, #400]	; (8005bd0 <start_sectionA+0x25c>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d12a      	bne.n	8005a9c <start_sectionA+0x128>
		if(start_mode == 0){
 8005a46:	4b63      	ldr	r3, [pc, #396]	; (8005bd4 <start_sectionA+0x260>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d108      	bne.n	8005a62 <start_sectionA+0xee>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005a50:	2388      	movs	r3, #136	; 0x88
 8005a52:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005a56:	211e      	movs	r1, #30
 8005a58:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005a5c:	f7ff faca 	bl	8004ff4 <driveA>
 8005a60:	e0a8      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 1){
 8005a62:	4b5c      	ldr	r3, [pc, #368]	; (8005bd4 <start_sectionA+0x260>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d108      	bne.n	8005a7e <start_sectionA+0x10a>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005a6c:	235b      	movs	r3, #91	; 0x5b
 8005a6e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005a72:	211e      	movs	r1, #30
 8005a74:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005a78:	f7ff fabc 	bl	8004ff4 <driveA>
 8005a7c:	e09a      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 2){
 8005a7e:	4b55      	ldr	r3, [pc, #340]	; (8005bd4 <start_sectionA+0x260>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	f040 8095 	bne.w	8005bb4 <start_sectionA+0x240>
			driveA(10000, SPEED_MIN, SPEED_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005a8a:	232d      	movs	r3, #45	; 0x2d
 8005a8c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005a90:	211e      	movs	r1, #30
 8005a92:	f242 7010 	movw	r0, #10000	; 0x2710
 8005a96:	f7ff faad 	bl	8004ff4 <driveA>
 8005a9a:	e08b      	b.n	8005bb4 <start_sectionA+0x240>
		}
	}else if(run_mode == HIGH_HIGH){
 8005a9c:	4b4c      	ldr	r3, [pc, #304]	; (8005bd0 <start_sectionA+0x25c>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d129      	bne.n	8005afa <start_sectionA+0x186>
		if(start_mode == 0){
 8005aa6:	4b4b      	ldr	r3, [pc, #300]	; (8005bd4 <start_sectionA+0x260>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d108      	bne.n	8005ac2 <start_sectionA+0x14e>
			driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005ab0:	2388      	movs	r3, #136	; 0x88
 8005ab2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ab6:	211e      	movs	r1, #30
 8005ab8:	f242 7010 	movw	r0, #10000	; 0x2710
 8005abc:	f7ff fa9a 	bl	8004ff4 <driveA>
 8005ac0:	e078      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 1){
 8005ac2:	4b44      	ldr	r3, [pc, #272]	; (8005bd4 <start_sectionA+0x260>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d108      	bne.n	8005ade <start_sectionA+0x16a>
			driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005acc:	235b      	movs	r3, #91	; 0x5b
 8005ace:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ad2:	211e      	movs	r1, #30
 8005ad4:	f242 7010 	movw	r0, #10000	; 0x2710
 8005ad8:	f7ff fa8c 	bl	8004ff4 <driveA>
 8005adc:	e06a      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 2){
 8005ade:	4b3d      	ldr	r3, [pc, #244]	; (8005bd4 <start_sectionA+0x260>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d165      	bne.n	8005bb4 <start_sectionA+0x240>
			driveA(15000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005ae8:	232d      	movs	r3, #45	; 0x2d
 8005aea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005aee:	211e      	movs	r1, #30
 8005af0:	f643 2098 	movw	r0, #15000	; 0x3a98
 8005af4:	f7ff fa7e 	bl	8004ff4 <driveA>
 8005af8:	e05c      	b.n	8005bb4 <start_sectionA+0x240>
		}
	}else if(run_mode == 5){
 8005afa:	4b35      	ldr	r3, [pc, #212]	; (8005bd0 <start_sectionA+0x25c>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b05      	cmp	r3, #5
 8005b02:	d129      	bne.n	8005b58 <start_sectionA+0x1e4>
		if(start_mode == 0){
 8005b04:	4b33      	ldr	r3, [pc, #204]	; (8005bd4 <start_sectionA+0x260>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d108      	bne.n	8005b20 <start_sectionA+0x1ac>
			driveA(10000, SPEED_MIN, SPEED_5, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005b0e:	2388      	movs	r3, #136	; 0x88
 8005b10:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005b14:	211e      	movs	r1, #30
 8005b16:	f242 7010 	movw	r0, #10000	; 0x2710
 8005b1a:	f7ff fa6b 	bl	8004ff4 <driveA>
 8005b1e:	e049      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 1){
 8005b20:	4b2c      	ldr	r3, [pc, #176]	; (8005bd4 <start_sectionA+0x260>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d108      	bne.n	8005b3c <start_sectionA+0x1c8>
			driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005b2a:	235b      	movs	r3, #91	; 0x5b
 8005b2c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005b30:	211e      	movs	r1, #30
 8005b32:	f242 7010 	movw	r0, #10000	; 0x2710
 8005b36:	f7ff fa5d 	bl	8004ff4 <driveA>
 8005b3a:	e03b      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 2){
 8005b3c:	4b25      	ldr	r3, [pc, #148]	; (8005bd4 <start_sectionA+0x260>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d136      	bne.n	8005bb4 <start_sectionA+0x240>
			driveA(20000, SPEED_MIN, SPEED_5, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005b46:	232d      	movs	r3, #45	; 0x2d
 8005b48:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005b4c:	211e      	movs	r1, #30
 8005b4e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8005b52:	f7ff fa4f 	bl	8004ff4 <driveA>
 8005b56:	e02d      	b.n	8005bb4 <start_sectionA+0x240>
		}
	}else if(run_mode == 6){
 8005b58:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <start_sectionA+0x25c>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b06      	cmp	r3, #6
 8005b60:	d128      	bne.n	8005bb4 <start_sectionA+0x240>
		if(start_mode == 0){
 8005b62:	4b1c      	ldr	r3, [pc, #112]	; (8005bd4 <start_sectionA+0x260>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d108      	bne.n	8005b7e <start_sectionA+0x20a>
			driveA(25000, SPEED_MIN, SPEED_5, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005b6c:	2388      	movs	r3, #136	; 0x88
 8005b6e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005b72:	211e      	movs	r1, #30
 8005b74:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8005b78:	f7ff fa3c 	bl	8004ff4 <driveA>
 8005b7c:	e01a      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 1){
 8005b7e:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <start_sectionA+0x260>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d108      	bne.n	8005b9a <start_sectionA+0x226>
			driveA(25000, SPEED_MIN, SPEED_5, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005b88:	235b      	movs	r3, #91	; 0x5b
 8005b8a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005b8e:	211e      	movs	r1, #30
 8005b90:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8005b94:	f7ff fa2e 	bl	8004ff4 <driveA>
 8005b98:	e00c      	b.n	8005bb4 <start_sectionA+0x240>
		}else if(start_mode == 2){
 8005b9a:	4b0e      	ldr	r3, [pc, #56]	; (8005bd4 <start_sectionA+0x260>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d107      	bne.n	8005bb4 <start_sectionA+0x240>
			driveA(45000, SPEED_MIN, SPEED_5, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005ba4:	232d      	movs	r3, #45	; 0x2d
 8005ba6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005baa:	211e      	movs	r1, #30
 8005bac:	f64a 70c8 	movw	r0, #45000	; 0xafc8
 8005bb0:	f7ff fa20 	bl	8004ff4 <driveA>
		}
	}
	start_mode = 1;
 8005bb4:	4b07      	ldr	r3, [pc, #28]	; (8005bd4 <start_sectionA+0x260>)
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005bba:	4b07      	ldr	r3, [pc, #28]	; (8005bd8 <start_sectionA+0x264>)
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <start_sectionA+0x258>
 8005bc8:	f00b ffb2 	bl	8011b30 <get_wall_info>
}
 8005bcc:	bf00      	nop
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20000456 	.word	0x20000456
 8005bd4:	200015c8 	.word	0x200015c8
 8005bd8:	20000f68 	.word	0x20000f68

08005bdc <half_sectionA>:
//half_sectionA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0

	control_start();
 8005be0:	f7ff f8d2 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005be4:	4b2e      	ldr	r3, [pc, #184]	; (8005ca0 <half_sectionA+0xc4>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d108      	bne.n	8005c00 <half_sectionA+0x24>
		driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005bee:	235b      	movs	r3, #91	; 0x5b
 8005bf0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005bf4:	211e      	movs	r1, #30
 8005bf6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005bfa:	f7ff f9fb 	bl	8004ff4 <driveA>
 8005bfe:	e044      	b.n	8005c8a <half_sectionA+0xae>
	}else if(run_mode == MIDDLE){
 8005c00:	4b27      	ldr	r3, [pc, #156]	; (8005ca0 <half_sectionA+0xc4>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d108      	bne.n	8005c1c <half_sectionA+0x40>
		driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分加速しながら走行。走行後は停止しない
 8005c0a:	235b      	movs	r3, #91	; 0x5b
 8005c0c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005c10:	211e      	movs	r1, #30
 8005c12:	f241 7070 	movw	r0, #6000	; 0x1770
 8005c16:	f7ff f9ed 	bl	8004ff4 <driveA>
 8005c1a:	e036      	b.n	8005c8a <half_sectionA+0xae>
	}else if(run_mode == HIGH){
 8005c1c:	4b20      	ldr	r3, [pc, #128]	; (8005ca0 <half_sectionA+0xc4>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b03      	cmp	r3, #3
 8005c24:	d108      	bne.n	8005c38 <half_sectionA+0x5c>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005c26:	235b      	movs	r3, #91	; 0x5b
 8005c28:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005c2c:	211e      	movs	r1, #30
 8005c2e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005c32:	f7ff f9df 	bl	8004ff4 <driveA>
 8005c36:	e028      	b.n	8005c8a <half_sectionA+0xae>
	}else if(run_mode == HIGH_HIGH){
 8005c38:	4b19      	ldr	r3, [pc, #100]	; (8005ca0 <half_sectionA+0xc4>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d108      	bne.n	8005c54 <half_sectionA+0x78>
		driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005c42:	235b      	movs	r3, #91	; 0x5b
 8005c44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c48:	211e      	movs	r1, #30
 8005c4a:	f242 7010 	movw	r0, #10000	; 0x2710
 8005c4e:	f7ff f9d1 	bl	8004ff4 <driveA>
 8005c52:	e01a      	b.n	8005c8a <half_sectionA+0xae>
	}else if(run_mode == 5){
 8005c54:	4b12      	ldr	r3, [pc, #72]	; (8005ca0 <half_sectionA+0xc4>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b05      	cmp	r3, #5
 8005c5c:	d108      	bne.n	8005c70 <half_sectionA+0x94>
		driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005c5e:	235b      	movs	r3, #91	; 0x5b
 8005c60:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005c64:	211e      	movs	r1, #30
 8005c66:	f242 7010 	movw	r0, #10000	; 0x2710
 8005c6a:	f7ff f9c3 	bl	8004ff4 <driveA>
 8005c6e:	e00c      	b.n	8005c8a <half_sectionA+0xae>
	}else if(run_mode == 6){
 8005c70:	4b0b      	ldr	r3, [pc, #44]	; (8005ca0 <half_sectionA+0xc4>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b06      	cmp	r3, #6
 8005c78:	d107      	bne.n	8005c8a <half_sectionA+0xae>
		driveA(25000, SPEED_MIN, SPEED_6, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005c7a:	235b      	movs	r3, #91	; 0x5b
 8005c7c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005c80:	211e      	movs	r1, #30
 8005c82:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8005c86:	f7ff f9b5 	bl	8004ff4 <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8005c8a:	4b06      	ldr	r3, [pc, #24]	; (8005ca4 <half_sectionA+0xc8>)
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <half_sectionA+0xc0>
 8005c98:	f00b ff4a 	bl	8011b30 <get_wall_info>
}
 8005c9c:	bf00      	nop
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20000456 	.word	0x20000456
 8005ca4:	20000f68 	.word	0x20000f68

08005ca8 <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005cac:	2003      	movs	r0, #3
 8005cae:	f00b ffb3 	bl	8011c18 <full_led_write>

	control_start();
 8005cb2:	f7ff f869 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005cb6:	4b27      	ldr	r3, [pc, #156]	; (8005d54 <half_sectionD+0xac>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d107      	bne.n	8005cd0 <half_sectionD+0x28>
		driveD(-4000, SPEED_MIN, SPEED_LOW, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005cc0:	235b      	movs	r3, #91	; 0x5b
 8005cc2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005cc6:	211e      	movs	r1, #30
 8005cc8:	4823      	ldr	r0, [pc, #140]	; (8005d58 <half_sectionD+0xb0>)
 8005cca:	f7ff fa0d 	bl	80050e8 <driveD>
	}else if(run_mode == 5){
		driveD(-8000, SPEED_MIN, SPEED_5, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == 6){
		driveD(-25000, SPEED_MIN, SPEED_6, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005cce:	e03f      	b.n	8005d50 <half_sectionD+0xa8>
	}else if(run_mode == MIDDLE){
 8005cd0:	4b20      	ldr	r3, [pc, #128]	; (8005d54 <half_sectionD+0xac>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d107      	bne.n	8005cea <half_sectionD+0x42>
		driveD(-4000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分指定減速度で減速走行。走行後は停止する
 8005cda:	235b      	movs	r3, #91	; 0x5b
 8005cdc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005ce0:	211e      	movs	r1, #30
 8005ce2:	481d      	ldr	r0, [pc, #116]	; (8005d58 <half_sectionD+0xb0>)
 8005ce4:	f7ff fa00 	bl	80050e8 <driveD>
}
 8005ce8:	e032      	b.n	8005d50 <half_sectionD+0xa8>
	}else if(run_mode == HIGH){
 8005cea:	4b1a      	ldr	r3, [pc, #104]	; (8005d54 <half_sectionD+0xac>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d107      	bne.n	8005d04 <half_sectionD+0x5c>
		driveD(-4000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005cf4:	235b      	movs	r3, #91	; 0x5b
 8005cf6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005cfa:	211e      	movs	r1, #30
 8005cfc:	4816      	ldr	r0, [pc, #88]	; (8005d58 <half_sectionD+0xb0>)
 8005cfe:	f7ff f9f3 	bl	80050e8 <driveD>
}
 8005d02:	e025      	b.n	8005d50 <half_sectionD+0xa8>
	}else if(run_mode == HIGH_HIGH){
 8005d04:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <half_sectionD+0xac>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d107      	bne.n	8005d1e <half_sectionD+0x76>
		driveD(-6000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
 8005d0e:	235b      	movs	r3, #91	; 0x5b
 8005d10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d14:	211e      	movs	r1, #30
 8005d16:	4811      	ldr	r0, [pc, #68]	; (8005d5c <half_sectionD+0xb4>)
 8005d18:	f7ff f9e6 	bl	80050e8 <driveD>
}
 8005d1c:	e018      	b.n	8005d50 <half_sectionD+0xa8>
	}else if(run_mode == 5){
 8005d1e:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <half_sectionD+0xac>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b05      	cmp	r3, #5
 8005d26:	d107      	bne.n	8005d38 <half_sectionD+0x90>
		driveD(-8000, SPEED_MIN, SPEED_5, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
 8005d28:	235b      	movs	r3, #91	; 0x5b
 8005d2a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005d2e:	211e      	movs	r1, #30
 8005d30:	480b      	ldr	r0, [pc, #44]	; (8005d60 <half_sectionD+0xb8>)
 8005d32:	f7ff f9d9 	bl	80050e8 <driveD>
}
 8005d36:	e00b      	b.n	8005d50 <half_sectionD+0xa8>
	}else if(run_mode == 6){
 8005d38:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <half_sectionD+0xac>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b06      	cmp	r3, #6
 8005d40:	d106      	bne.n	8005d50 <half_sectionD+0xa8>
		driveD(-25000, SPEED_MIN, SPEED_6, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
 8005d42:	235b      	movs	r3, #91	; 0x5b
 8005d44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005d48:	211e      	movs	r1, #30
 8005d4a:	4806      	ldr	r0, [pc, #24]	; (8005d64 <half_sectionD+0xbc>)
 8005d4c:	f7ff f9cc 	bl	80050e8 <driveD>
}
 8005d50:	bf00      	nop
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	20000456 	.word	0x20000456
 8005d58:	fffff060 	.word	0xfffff060
 8005d5c:	ffffe890 	.word	0xffffe890
 8005d60:	ffffe0c0 	.word	0xffffe0c0
 8005d64:	ffff9e58 	.word	0xffff9e58

08005d68 <half_sectionVA>:
//half_sectionVA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionVA(void){
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0

	control_start();
 8005d6c:	f7ff f80c 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005d70:	4b2a      	ldr	r3, [pc, #168]	; (8005e1c <half_sectionVA+0xb4>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d108      	bne.n	8005d8c <half_sectionVA+0x24>
		driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005d7a:	2382      	movs	r3, #130	; 0x82
 8005d7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005d80:	211e      	movs	r1, #30
 8005d82:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005d86:	f7ff f935 	bl	8004ff4 <driveA>
	}else if(run_mode == 5){
		driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
	}else if(run_mode == 6){
		driveA(25000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
	}
}
 8005d8a:	e044      	b.n	8005e16 <half_sectionVA+0xae>
	}else if(run_mode == MIDDLE){
 8005d8c:	4b23      	ldr	r3, [pc, #140]	; (8005e1c <half_sectionVA+0xb4>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d108      	bne.n	8005da8 <half_sectionVA+0x40>
		driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF_V);					//半区画分加速しながら走行。走行後は停止しない
 8005d96:	2382      	movs	r3, #130	; 0x82
 8005d98:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005d9c:	211e      	movs	r1, #30
 8005d9e:	f241 7070 	movw	r0, #6000	; 0x1770
 8005da2:	f7ff f927 	bl	8004ff4 <driveA>
}
 8005da6:	e036      	b.n	8005e16 <half_sectionVA+0xae>
	}else if(run_mode == HIGH){
 8005da8:	4b1c      	ldr	r3, [pc, #112]	; (8005e1c <half_sectionVA+0xb4>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	d108      	bne.n	8005dc4 <half_sectionVA+0x5c>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005db2:	2382      	movs	r3, #130	; 0x82
 8005db4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005db8:	211e      	movs	r1, #30
 8005dba:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005dbe:	f7ff f919 	bl	8004ff4 <driveA>
}
 8005dc2:	e028      	b.n	8005e16 <half_sectionVA+0xae>
	}else if(run_mode == HIGH_HIGH){
 8005dc4:	4b15      	ldr	r3, [pc, #84]	; (8005e1c <half_sectionVA+0xb4>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d108      	bne.n	8005de0 <half_sectionVA+0x78>
		driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005dce:	2382      	movs	r3, #130	; 0x82
 8005dd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dd4:	211e      	movs	r1, #30
 8005dd6:	f242 7010 	movw	r0, #10000	; 0x2710
 8005dda:	f7ff f90b 	bl	8004ff4 <driveA>
}
 8005dde:	e01a      	b.n	8005e16 <half_sectionVA+0xae>
	}else if(run_mode == 5){
 8005de0:	4b0e      	ldr	r3, [pc, #56]	; (8005e1c <half_sectionVA+0xb4>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b05      	cmp	r3, #5
 8005de8:	d108      	bne.n	8005dfc <half_sectionVA+0x94>
		driveA(10000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005dea:	2382      	movs	r3, #130	; 0x82
 8005dec:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005df0:	211e      	movs	r1, #30
 8005df2:	f242 7010 	movw	r0, #10000	; 0x2710
 8005df6:	f7ff f8fd 	bl	8004ff4 <driveA>
}
 8005dfa:	e00c      	b.n	8005e16 <half_sectionVA+0xae>
	}else if(run_mode == 6){
 8005dfc:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <half_sectionVA+0xb4>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b06      	cmp	r3, #6
 8005e04:	d107      	bne.n	8005e16 <half_sectionVA+0xae>
		driveA(25000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005e06:	2382      	movs	r3, #130	; 0x82
 8005e08:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005e0c:	211e      	movs	r1, #30
 8005e0e:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8005e12:	f7ff f8ef 	bl	8004ff4 <driveA>
}
 8005e16:	bf00      	nop
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000456 	.word	0x20000456

08005e20 <half_sectionVD>:
//half_sectionVD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionVD(void){
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005e24:	2003      	movs	r0, #3
 8005e26:	f00b fef7 	bl	8011c18 <full_led_write>

	control_start();
 8005e2a:	f7fe ffad 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005e2e:	4b27      	ldr	r3, [pc, #156]	; (8005ecc <half_sectionVD+0xac>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d107      	bne.n	8005e48 <half_sectionVD+0x28>
		driveD(-4000, SPEED_MIN, SPEED_LOW, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005e38:	2382      	movs	r3, #130	; 0x82
 8005e3a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005e3e:	211e      	movs	r1, #30
 8005e40:	4823      	ldr	r0, [pc, #140]	; (8005ed0 <half_sectionVD+0xb0>)
 8005e42:	f7ff f951 	bl	80050e8 <driveD>
	}else if(run_mode == 5){
		driveD(-8000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == 6){
		driveD(-25000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005e46:	e03f      	b.n	8005ec8 <half_sectionVD+0xa8>
	}else if(run_mode == MIDDLE){
 8005e48:	4b20      	ldr	r3, [pc, #128]	; (8005ecc <half_sectionVD+0xac>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d107      	bne.n	8005e62 <half_sectionVD+0x42>
		driveD(-4000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF_V);					//半区画分指定減速度で減速走行。走行後は停止する
 8005e52:	2382      	movs	r3, #130	; 0x82
 8005e54:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005e58:	211e      	movs	r1, #30
 8005e5a:	481d      	ldr	r0, [pc, #116]	; (8005ed0 <half_sectionVD+0xb0>)
 8005e5c:	f7ff f944 	bl	80050e8 <driveD>
}
 8005e60:	e032      	b.n	8005ec8 <half_sectionVD+0xa8>
	}else if(run_mode == HIGH){
 8005e62:	4b1a      	ldr	r3, [pc, #104]	; (8005ecc <half_sectionVD+0xac>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d107      	bne.n	8005e7c <half_sectionVD+0x5c>
		driveD(-4000, SPEED_MIN, SPEED_HIGH, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005e6c:	2382      	movs	r3, #130	; 0x82
 8005e6e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005e72:	211e      	movs	r1, #30
 8005e74:	4816      	ldr	r0, [pc, #88]	; (8005ed0 <half_sectionVD+0xb0>)
 8005e76:	f7ff f937 	bl	80050e8 <driveD>
}
 8005e7a:	e025      	b.n	8005ec8 <half_sectionVD+0xa8>
	}else if(run_mode == HIGH_HIGH){
 8005e7c:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <half_sectionVD+0xac>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d107      	bne.n	8005e96 <half_sectionVD+0x76>
		driveD(-6000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005e86:	2382      	movs	r3, #130	; 0x82
 8005e88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e8c:	211e      	movs	r1, #30
 8005e8e:	4811      	ldr	r0, [pc, #68]	; (8005ed4 <half_sectionVD+0xb4>)
 8005e90:	f7ff f92a 	bl	80050e8 <driveD>
}
 8005e94:	e018      	b.n	8005ec8 <half_sectionVD+0xa8>
	}else if(run_mode == 5){
 8005e96:	4b0d      	ldr	r3, [pc, #52]	; (8005ecc <half_sectionVD+0xac>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b05      	cmp	r3, #5
 8005e9e:	d107      	bne.n	8005eb0 <half_sectionVD+0x90>
		driveD(-8000, SPEED_MIN, SPEED_5, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005ea0:	2382      	movs	r3, #130	; 0x82
 8005ea2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005ea6:	211e      	movs	r1, #30
 8005ea8:	480b      	ldr	r0, [pc, #44]	; (8005ed8 <half_sectionVD+0xb8>)
 8005eaa:	f7ff f91d 	bl	80050e8 <driveD>
}
 8005eae:	e00b      	b.n	8005ec8 <half_sectionVD+0xa8>
	}else if(run_mode == 6){
 8005eb0:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <half_sectionVD+0xac>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b06      	cmp	r3, #6
 8005eb8:	d106      	bne.n	8005ec8 <half_sectionVD+0xa8>
		driveD(-25000, SPEED_MIN, SPEED_6, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005eba:	2382      	movs	r3, #130	; 0x82
 8005ebc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005ec0:	211e      	movs	r1, #30
 8005ec2:	4806      	ldr	r0, [pc, #24]	; (8005edc <half_sectionVD+0xbc>)
 8005ec4:	f7ff f910 	bl	80050e8 <driveD>
}
 8005ec8:	bf00      	nop
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20000456 	.word	0x20000456
 8005ed0:	fffff060 	.word	0xfffff060
 8005ed4:	ffffe890 	.word	0xffffe890
 8005ed8:	ffffe0c0 	.word	0xffffe0c0
 8005edc:	ffff9e58 	.word	0xffff9e58

08005ee0 <half_sectionU>:
//half_sectionU
// 等速で半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionU(void){
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005ee4:	2007      	movs	r0, #7
 8005ee6:	f00b fe97 	bl	8011c18 <full_led_write>
	control_start();
 8005eea:	f7fe ff4d 	bl	8004d88 <control_start>
	driveU(SEC_HALF);													//半区画分等速走行。走行後は停止しない
 8005eee:	205b      	movs	r0, #91	; 0x5b
 8005ef0:	f7ff f9d4 	bl	800529c <driveU>
}
 8005ef4:	bf00      	nop
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <half_sectionV>:
//half_sectionV
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionV(void){
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005efc:	2007      	movs	r0, #7
 8005efe:	f00b fe8b 	bl	8011c18 <full_led_write>
	control_start();
 8005f02:	f7fe ff41 	bl	8004d88 <control_start>
	driveU(SEC_HALF_V);													//半区画分等速走行。走行後は停止しない
 8005f06:	2082      	movs	r0, #130	; 0x82
 8005f08:	f7ff f9c8 	bl	800529c <driveU>
}
 8005f0c:	bf00      	nop
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <one_section>:
//one_section
// 1区画分進んで停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_section(void){
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0

	half_sectionA();													//半区画分加速走行
 8005f14:	f7ff fe62 	bl	8005bdc <half_sectionA>
	half_sectionD();													//半区画分減速走行のち停止
 8005f18:	f7ff fec6 	bl	8005ca8 <half_sectionD>
}
 8005f1c:	bf00      	nop
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <one_sectionA>:
//one_sectionA
// 1区画分加速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA(void){
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8005f24:	2004      	movs	r0, #4
 8005f26:	f00b fe77 	bl	8011c18 <full_led_write>
	control_start();
 8005f2a:	f7fe ff2d 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005f2e:	4b3e      	ldr	r3, [pc, #248]	; (8006028 <one_sectionA+0x108>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d10d      	bne.n	8005f54 <one_sectionA+0x34>
		driveA(accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005f38:	4b3c      	ldr	r3, [pc, #240]	; (800602c <one_sectionA+0x10c>)
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	b21b      	sxth	r3, r3
 8005f3e:	b298      	uxth	r0, r3
 8005f40:	4b3b      	ldr	r3, [pc, #236]	; (8006030 <one_sectionA+0x110>)
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b21b      	sxth	r3, r3
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	23b6      	movs	r3, #182	; 0xb6
 8005f4a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005f4e:	f7ff f851 	bl	8004ff4 <driveA>
 8005f52:	e05d      	b.n	8006010 <one_sectionA+0xf0>
	}else if(run_mode == MIDDLE){
 8005f54:	4b34      	ldr	r3, [pc, #208]	; (8006028 <one_sectionA+0x108>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d10d      	bne.n	8005f7a <one_sectionA+0x5a>
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分加速走行。走行後は停止しない
 8005f5e:	4b33      	ldr	r3, [pc, #204]	; (800602c <one_sectionA+0x10c>)
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b21b      	sxth	r3, r3
 8005f64:	b298      	uxth	r0, r3
 8005f66:	4b32      	ldr	r3, [pc, #200]	; (8006030 <one_sectionA+0x110>)
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b21b      	sxth	r3, r3
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	23b6      	movs	r3, #182	; 0xb6
 8005f70:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005f74:	f7ff f83e 	bl	8004ff4 <driveA>
 8005f78:	e04a      	b.n	8006010 <one_sectionA+0xf0>
	}else if(run_mode == HIGH){
 8005f7a:	4b2b      	ldr	r3, [pc, #172]	; (8006028 <one_sectionA+0x108>)
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d10d      	bne.n	8005fa0 <one_sectionA+0x80>
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005f84:	4b29      	ldr	r3, [pc, #164]	; (800602c <one_sectionA+0x10c>)
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	b21b      	sxth	r3, r3
 8005f8a:	b298      	uxth	r0, r3
 8005f8c:	4b28      	ldr	r3, [pc, #160]	; (8006030 <one_sectionA+0x110>)
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	b21b      	sxth	r3, r3
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	23b6      	movs	r3, #182	; 0xb6
 8005f96:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005f9a:	f7ff f82b 	bl	8004ff4 <driveA>
 8005f9e:	e037      	b.n	8006010 <one_sectionA+0xf0>
	}else if(run_mode == HIGH_HIGH){
 8005fa0:	4b21      	ldr	r3, [pc, #132]	; (8006028 <one_sectionA+0x108>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d10d      	bne.n	8005fc6 <one_sectionA+0xa6>
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005faa:	4b20      	ldr	r3, [pc, #128]	; (800602c <one_sectionA+0x10c>)
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b21b      	sxth	r3, r3
 8005fb0:	b298      	uxth	r0, r3
 8005fb2:	4b1f      	ldr	r3, [pc, #124]	; (8006030 <one_sectionA+0x110>)
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b21b      	sxth	r3, r3
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	23b6      	movs	r3, #182	; 0xb6
 8005fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005fc0:	f7ff f818 	bl	8004ff4 <driveA>
 8005fc4:	e024      	b.n	8006010 <one_sectionA+0xf0>
	}else if(run_mode == 5){
 8005fc6:	4b18      	ldr	r3, [pc, #96]	; (8006028 <one_sectionA+0x108>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b05      	cmp	r3, #5
 8005fce:	d10d      	bne.n	8005fec <one_sectionA+0xcc>
		driveA(accel_hs, SPEED_5, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005fd0:	4b16      	ldr	r3, [pc, #88]	; (800602c <one_sectionA+0x10c>)
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b21b      	sxth	r3, r3
 8005fd6:	b298      	uxth	r0, r3
 8005fd8:	4b15      	ldr	r3, [pc, #84]	; (8006030 <one_sectionA+0x110>)
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b21b      	sxth	r3, r3
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	23b6      	movs	r3, #182	; 0xb6
 8005fe2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8005fe6:	f7ff f805 	bl	8004ff4 <driveA>
 8005fea:	e011      	b.n	8006010 <one_sectionA+0xf0>
	}else if(run_mode == 6){
 8005fec:	4b0e      	ldr	r3, [pc, #56]	; (8006028 <one_sectionA+0x108>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b06      	cmp	r3, #6
 8005ff4:	d10c      	bne.n	8006010 <one_sectionA+0xf0>
		driveA(accel_hs, SPEED_6, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	; (800602c <one_sectionA+0x10c>)
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	b21b      	sxth	r3, r3
 8005ffc:	b298      	uxth	r0, r3
 8005ffe:	4b0c      	ldr	r3, [pc, #48]	; (8006030 <one_sectionA+0x110>)
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b21b      	sxth	r3, r3
 8006004:	b29a      	uxth	r2, r3
 8006006:	23b6      	movs	r3, #182	; 0xb6
 8006008:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800600c:	f7fe fff2 	bl	8004ff4 <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8006010:	4b08      	ldr	r3, [pc, #32]	; (8006034 <one_sectionA+0x114>)
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <one_sectionA+0x102>
 800601e:	f00b fd87 	bl	8011b30 <get_wall_info>
}
 8006022:	bf00      	nop
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20000456 	.word	0x20000456
 800602c:	20000454 	.word	0x20000454
 8006030:	20000f7c 	.word	0x20000f7c
 8006034:	20000f68 	.word	0x20000f68

08006038 <one_sectionD>:
//one_sectionD
// 1区画分減速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD(void){
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 800603c:	2003      	movs	r0, #3
 800603e:	f00b fdeb 	bl	8011c18 <full_led_write>
	control_start();
 8006042:	f7fe fea1 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8006046:	4b47      	ldr	r3, [pc, #284]	; (8006164 <one_sectionD+0x12c>)
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	d110      	bne.n	8006072 <one_sectionD+0x3a>
		driveD(-accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF*2);				//1区画分減速走行。走行後は停止しない
 8006050:	4b45      	ldr	r3, [pc, #276]	; (8006168 <one_sectionD+0x130>)
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	b21b      	sxth	r3, r3
 8006056:	b29b      	uxth	r3, r3
 8006058:	425b      	negs	r3, r3
 800605a:	b29b      	uxth	r3, r3
 800605c:	b218      	sxth	r0, r3
 800605e:	4b43      	ldr	r3, [pc, #268]	; (800616c <one_sectionD+0x134>)
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	b21b      	sxth	r3, r3
 8006064:	b29a      	uxth	r2, r3
 8006066:	23b6      	movs	r3, #182	; 0xb6
 8006068:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800606c:	f7ff f83c 	bl	80050e8 <driveD>
 8006070:	e06c      	b.n	800614c <one_sectionD+0x114>
	}else if(run_mode == MIDDLE){
 8006072:	4b3c      	ldr	r3, [pc, #240]	; (8006164 <one_sectionD+0x12c>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d110      	bne.n	800609e <one_sectionD+0x66>
		driveD(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 800607c:	4b3a      	ldr	r3, [pc, #232]	; (8006168 <one_sectionD+0x130>)
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	b21b      	sxth	r3, r3
 8006082:	b29b      	uxth	r3, r3
 8006084:	425b      	negs	r3, r3
 8006086:	b29b      	uxth	r3, r3
 8006088:	b218      	sxth	r0, r3
 800608a:	4b38      	ldr	r3, [pc, #224]	; (800616c <one_sectionD+0x134>)
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	b21b      	sxth	r3, r3
 8006090:	b29a      	uxth	r2, r3
 8006092:	23b6      	movs	r3, #182	; 0xb6
 8006094:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006098:	f7ff f826 	bl	80050e8 <driveD>
 800609c:	e056      	b.n	800614c <one_sectionD+0x114>
	}else if(run_mode == HIGH){
 800609e:	4b31      	ldr	r3, [pc, #196]	; (8006164 <one_sectionD+0x12c>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d110      	bne.n	80060ca <one_sectionD+0x92>
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 80060a8:	4b2f      	ldr	r3, [pc, #188]	; (8006168 <one_sectionD+0x130>)
 80060aa:	881b      	ldrh	r3, [r3, #0]
 80060ac:	b21b      	sxth	r3, r3
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	425b      	negs	r3, r3
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	b218      	sxth	r0, r3
 80060b6:	4b2d      	ldr	r3, [pc, #180]	; (800616c <one_sectionD+0x134>)
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b21b      	sxth	r3, r3
 80060bc:	b29a      	uxth	r2, r3
 80060be:	23b6      	movs	r3, #182	; 0xb6
 80060c0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80060c4:	f7ff f810 	bl	80050e8 <driveD>
 80060c8:	e040      	b.n	800614c <one_sectionD+0x114>
	}else if(run_mode == HIGH_HIGH){
 80060ca:	4b26      	ldr	r3, [pc, #152]	; (8006164 <one_sectionD+0x12c>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d110      	bne.n	80060f6 <one_sectionD+0xbe>
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 80060d4:	4b24      	ldr	r3, [pc, #144]	; (8006168 <one_sectionD+0x130>)
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	b21b      	sxth	r3, r3
 80060da:	b29b      	uxth	r3, r3
 80060dc:	425b      	negs	r3, r3
 80060de:	b29b      	uxth	r3, r3
 80060e0:	b218      	sxth	r0, r3
 80060e2:	4b22      	ldr	r3, [pc, #136]	; (800616c <one_sectionD+0x134>)
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b21b      	sxth	r3, r3
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	23b6      	movs	r3, #182	; 0xb6
 80060ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80060f0:	f7fe fffa 	bl	80050e8 <driveD>
 80060f4:	e02a      	b.n	800614c <one_sectionD+0x114>
	}else if(run_mode == 5){
 80060f6:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <one_sectionD+0x12c>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b05      	cmp	r3, #5
 80060fe:	d110      	bne.n	8006122 <one_sectionD+0xea>
		driveD(-accel_hs, SPEED_5, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8006100:	4b19      	ldr	r3, [pc, #100]	; (8006168 <one_sectionD+0x130>)
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b21b      	sxth	r3, r3
 8006106:	b29b      	uxth	r3, r3
 8006108:	425b      	negs	r3, r3
 800610a:	b29b      	uxth	r3, r3
 800610c:	b218      	sxth	r0, r3
 800610e:	4b17      	ldr	r3, [pc, #92]	; (800616c <one_sectionD+0x134>)
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b21b      	sxth	r3, r3
 8006114:	b29a      	uxth	r2, r3
 8006116:	23b6      	movs	r3, #182	; 0xb6
 8006118:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800611c:	f7fe ffe4 	bl	80050e8 <driveD>
 8006120:	e014      	b.n	800614c <one_sectionD+0x114>
	}else if(run_mode == 6){
 8006122:	4b10      	ldr	r3, [pc, #64]	; (8006164 <one_sectionD+0x12c>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b06      	cmp	r3, #6
 800612a:	d10f      	bne.n	800614c <one_sectionD+0x114>
		driveD(-accel_hs, SPEED_6, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 800612c:	4b0e      	ldr	r3, [pc, #56]	; (8006168 <one_sectionD+0x130>)
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	b21b      	sxth	r3, r3
 8006132:	b29b      	uxth	r3, r3
 8006134:	425b      	negs	r3, r3
 8006136:	b29b      	uxth	r3, r3
 8006138:	b218      	sxth	r0, r3
 800613a:	4b0c      	ldr	r3, [pc, #48]	; (800616c <one_sectionD+0x134>)
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	b21b      	sxth	r3, r3
 8006140:	b29a      	uxth	r2, r3
 8006142:	23b6      	movs	r3, #182	; 0xb6
 8006144:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006148:	f7fe ffce 	bl	80050e8 <driveD>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 800614c:	4b08      	ldr	r3, [pc, #32]	; (8006170 <one_sectionD+0x138>)
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <one_sectionD+0x126>
 800615a:	f00b fce9 	bl	8011b30 <get_wall_info>
}
 800615e:	bf00      	nop
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20000456 	.word	0x20000456
 8006168:	20000454 	.word	0x20000454
 800616c:	20000f7c 	.word	0x20000f7c
 8006170:	20000f68 	.word	0x20000f68

08006174 <one_sectionVA>:
//one_sectionVA
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVA(void){
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8006178:	2004      	movs	r0, #4
 800617a:	f00b fd4d 	bl	8011c18 <full_led_write>
	control_start();
 800617e:	f7fe fe03 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8006182:	4b3c      	ldr	r3, [pc, #240]	; (8006274 <one_sectionVA+0x100>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b01      	cmp	r3, #1
 800618a:	d10e      	bne.n	80061aa <one_sectionVA+0x36>
		driveA(accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 800618c:	4b3a      	ldr	r3, [pc, #232]	; (8006278 <one_sectionVA+0x104>)
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b21b      	sxth	r3, r3
 8006192:	b298      	uxth	r0, r3
 8006194:	4b39      	ldr	r3, [pc, #228]	; (800627c <one_sectionVA+0x108>)
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	b21b      	sxth	r3, r3
 800619a:	b29a      	uxth	r2, r3
 800619c:	f44f 7382 	mov.w	r3, #260	; 0x104
 80061a0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80061a4:	f7fe ff26 	bl	8004ff4 <driveA>
	}else if(run_mode == 5){
		driveA(accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}else if(run_mode == 6){
		driveA(accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}
}
 80061a8:	e062      	b.n	8006270 <one_sectionVA+0xfc>
	}else if(run_mode == MIDDLE){
 80061aa:	4b32      	ldr	r3, [pc, #200]	; (8006274 <one_sectionVA+0x100>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d10e      	bne.n	80061d2 <one_sectionVA+0x5e>
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 80061b4:	4b30      	ldr	r3, [pc, #192]	; (8006278 <one_sectionVA+0x104>)
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	b21b      	sxth	r3, r3
 80061ba:	b298      	uxth	r0, r3
 80061bc:	4b2f      	ldr	r3, [pc, #188]	; (800627c <one_sectionVA+0x108>)
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b21b      	sxth	r3, r3
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80061c8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80061cc:	f7fe ff12 	bl	8004ff4 <driveA>
}
 80061d0:	e04e      	b.n	8006270 <one_sectionVA+0xfc>
	}else if(run_mode == HIGH){
 80061d2:	4b28      	ldr	r3, [pc, #160]	; (8006274 <one_sectionVA+0x100>)
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d10e      	bne.n	80061fa <one_sectionVA+0x86>
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 80061dc:	4b26      	ldr	r3, [pc, #152]	; (8006278 <one_sectionVA+0x104>)
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	b21b      	sxth	r3, r3
 80061e2:	b298      	uxth	r0, r3
 80061e4:	4b25      	ldr	r3, [pc, #148]	; (800627c <one_sectionVA+0x108>)
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	b21b      	sxth	r3, r3
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	f44f 7382 	mov.w	r3, #260	; 0x104
 80061f0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80061f4:	f7fe fefe 	bl	8004ff4 <driveA>
}
 80061f8:	e03a      	b.n	8006270 <one_sectionVA+0xfc>
	}else if(run_mode == HIGH_HIGH){
 80061fa:	4b1e      	ldr	r3, [pc, #120]	; (8006274 <one_sectionVA+0x100>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b04      	cmp	r3, #4
 8006202:	d10e      	bne.n	8006222 <one_sectionVA+0xae>
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8006204:	4b1c      	ldr	r3, [pc, #112]	; (8006278 <one_sectionVA+0x104>)
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	b21b      	sxth	r3, r3
 800620a:	b298      	uxth	r0, r3
 800620c:	4b1b      	ldr	r3, [pc, #108]	; (800627c <one_sectionVA+0x108>)
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b21b      	sxth	r3, r3
 8006212:	b29a      	uxth	r2, r3
 8006214:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006218:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800621c:	f7fe feea 	bl	8004ff4 <driveA>
}
 8006220:	e026      	b.n	8006270 <one_sectionVA+0xfc>
	}else if(run_mode == 5){
 8006222:	4b14      	ldr	r3, [pc, #80]	; (8006274 <one_sectionVA+0x100>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b05      	cmp	r3, #5
 800622a:	d10e      	bne.n	800624a <one_sectionVA+0xd6>
		driveA(accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 800622c:	4b12      	ldr	r3, [pc, #72]	; (8006278 <one_sectionVA+0x104>)
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	b21b      	sxth	r3, r3
 8006232:	b298      	uxth	r0, r3
 8006234:	4b11      	ldr	r3, [pc, #68]	; (800627c <one_sectionVA+0x108>)
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	b21b      	sxth	r3, r3
 800623a:	b29a      	uxth	r2, r3
 800623c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006240:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006244:	f7fe fed6 	bl	8004ff4 <driveA>
}
 8006248:	e012      	b.n	8006270 <one_sectionVA+0xfc>
	}else if(run_mode == 6){
 800624a:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <one_sectionVA+0x100>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b06      	cmp	r3, #6
 8006252:	d10d      	bne.n	8006270 <one_sectionVA+0xfc>
		driveA(accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8006254:	4b08      	ldr	r3, [pc, #32]	; (8006278 <one_sectionVA+0x104>)
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	b21b      	sxth	r3, r3
 800625a:	b298      	uxth	r0, r3
 800625c:	4b07      	ldr	r3, [pc, #28]	; (800627c <one_sectionVA+0x108>)
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b21b      	sxth	r3, r3
 8006262:	b29a      	uxth	r2, r3
 8006264:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006268:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800626c:	f7fe fec2 	bl	8004ff4 <driveA>
}
 8006270:	bf00      	nop
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20000456 	.word	0x20000456
 8006278:	20000454 	.word	0x20000454
 800627c:	20000f7c 	.word	0x20000f7c

08006280 <one_sectionVD>:
//one_sectionVD
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVD(void){
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8006284:	2003      	movs	r0, #3
 8006286:	f00b fcc7 	bl	8011c18 <full_led_write>
	control_start();
 800628a:	f7fe fd7d 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 800628e:	4b45      	ldr	r3, [pc, #276]	; (80063a4 <one_sectionVD+0x124>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b01      	cmp	r3, #1
 8006296:	d111      	bne.n	80062bc <one_sectionVD+0x3c>
		driveD(-accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8006298:	4b43      	ldr	r3, [pc, #268]	; (80063a8 <one_sectionVD+0x128>)
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	b21b      	sxth	r3, r3
 800629e:	b29b      	uxth	r3, r3
 80062a0:	425b      	negs	r3, r3
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	b218      	sxth	r0, r3
 80062a6:	4b41      	ldr	r3, [pc, #260]	; (80063ac <one_sectionVD+0x12c>)
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	b21b      	sxth	r3, r3
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	f44f 7382 	mov.w	r3, #260	; 0x104
 80062b2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80062b6:	f7fe ff17 	bl	80050e8 <driveD>
	}else if(run_mode == 5){
		driveD(-accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}else if(run_mode == 6){
		driveD(-accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}
}
 80062ba:	e071      	b.n	80063a0 <one_sectionVD+0x120>
	}else if(run_mode == MIDDLE){
 80062bc:	4b39      	ldr	r3, [pc, #228]	; (80063a4 <one_sectionVD+0x124>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d111      	bne.n	80062ea <one_sectionVD+0x6a>
		driveD(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);			//1区画分減速走行。走行後は停止しない
 80062c6:	4b38      	ldr	r3, [pc, #224]	; (80063a8 <one_sectionVD+0x128>)
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b21b      	sxth	r3, r3
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	425b      	negs	r3, r3
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	b218      	sxth	r0, r3
 80062d4:	4b35      	ldr	r3, [pc, #212]	; (80063ac <one_sectionVD+0x12c>)
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	b21b      	sxth	r3, r3
 80062da:	b29a      	uxth	r2, r3
 80062dc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80062e0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80062e4:	f7fe ff00 	bl	80050e8 <driveD>
}
 80062e8:	e05a      	b.n	80063a0 <one_sectionVD+0x120>
	}else if(run_mode == HIGH){
 80062ea:	4b2e      	ldr	r3, [pc, #184]	; (80063a4 <one_sectionVD+0x124>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d111      	bne.n	8006318 <one_sectionVD+0x98>
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 80062f4:	4b2c      	ldr	r3, [pc, #176]	; (80063a8 <one_sectionVD+0x128>)
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b21b      	sxth	r3, r3
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	425b      	negs	r3, r3
 80062fe:	b29b      	uxth	r3, r3
 8006300:	b218      	sxth	r0, r3
 8006302:	4b2a      	ldr	r3, [pc, #168]	; (80063ac <one_sectionVD+0x12c>)
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b21b      	sxth	r3, r3
 8006308:	b29a      	uxth	r2, r3
 800630a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800630e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006312:	f7fe fee9 	bl	80050e8 <driveD>
}
 8006316:	e043      	b.n	80063a0 <one_sectionVD+0x120>
	}else if(run_mode == HIGH_HIGH){
 8006318:	4b22      	ldr	r3, [pc, #136]	; (80063a4 <one_sectionVD+0x124>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b04      	cmp	r3, #4
 8006320:	d111      	bne.n	8006346 <one_sectionVD+0xc6>
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8006322:	4b21      	ldr	r3, [pc, #132]	; (80063a8 <one_sectionVD+0x128>)
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b21b      	sxth	r3, r3
 8006328:	b29b      	uxth	r3, r3
 800632a:	425b      	negs	r3, r3
 800632c:	b29b      	uxth	r3, r3
 800632e:	b218      	sxth	r0, r3
 8006330:	4b1e      	ldr	r3, [pc, #120]	; (80063ac <one_sectionVD+0x12c>)
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	b21b      	sxth	r3, r3
 8006336:	b29a      	uxth	r2, r3
 8006338:	f44f 7382 	mov.w	r3, #260	; 0x104
 800633c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006340:	f7fe fed2 	bl	80050e8 <driveD>
}
 8006344:	e02c      	b.n	80063a0 <one_sectionVD+0x120>
	}else if(run_mode == 5){
 8006346:	4b17      	ldr	r3, [pc, #92]	; (80063a4 <one_sectionVD+0x124>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b05      	cmp	r3, #5
 800634e:	d111      	bne.n	8006374 <one_sectionVD+0xf4>
		driveD(-accel_hs, SPEED_5, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8006350:	4b15      	ldr	r3, [pc, #84]	; (80063a8 <one_sectionVD+0x128>)
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	b21b      	sxth	r3, r3
 8006356:	b29b      	uxth	r3, r3
 8006358:	425b      	negs	r3, r3
 800635a:	b29b      	uxth	r3, r3
 800635c:	b218      	sxth	r0, r3
 800635e:	4b13      	ldr	r3, [pc, #76]	; (80063ac <one_sectionVD+0x12c>)
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	b21b      	sxth	r3, r3
 8006364:	b29a      	uxth	r2, r3
 8006366:	f44f 7382 	mov.w	r3, #260	; 0x104
 800636a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800636e:	f7fe febb 	bl	80050e8 <driveD>
}
 8006372:	e015      	b.n	80063a0 <one_sectionVD+0x120>
	}else if(run_mode == 6){
 8006374:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <one_sectionVD+0x124>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b06      	cmp	r3, #6
 800637c:	d110      	bne.n	80063a0 <one_sectionVD+0x120>
		driveD(-accel_hs, SPEED_6, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 800637e:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <one_sectionVD+0x128>)
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b21b      	sxth	r3, r3
 8006384:	b29b      	uxth	r3, r3
 8006386:	425b      	negs	r3, r3
 8006388:	b29b      	uxth	r3, r3
 800638a:	b218      	sxth	r0, r3
 800638c:	4b07      	ldr	r3, [pc, #28]	; (80063ac <one_sectionVD+0x12c>)
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	b21b      	sxth	r3, r3
 8006392:	b29a      	uxth	r2, r3
 8006394:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006398:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800639c:	f7fe fea4 	bl	80050e8 <driveD>
}
 80063a0:	bf00      	nop
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	20000456 	.word	0x20000456
 80063a8:	20000454 	.word	0x20000454
 80063ac:	20000f7c 	.word	0x20000f7c

080063b0 <one_sectionU>:
//one_sectionU
// 等速で1区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 80063b4:	2007      	movs	r0, #7
 80063b6:	f00b fc2f 	bl	8011c18 <full_led_write>
	control_start();
 80063ba:	f7fe fce5 	bl	8004d88 <control_start>
	driveU(SEC_HALF*2);													//1区画分等速走行。走行後は停止しない
 80063be:	20b6      	movs	r0, #182	; 0xb6
 80063c0:	f7fe ff6c 	bl	800529c <driveU>
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得
 80063c4:	4b05      	ldr	r3, [pc, #20]	; (80063dc <one_sectionU+0x2c>)
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <one_sectionU+0x26>
 80063d2:	f00b fbad 	bl	8011b30 <get_wall_info>
}
 80063d6:	bf00      	nop
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20000f68 	.word	0x20000f68

080063e0 <rotate_R90>:
//rotate_R90
// 右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 80063e0:	b598      	push	{r3, r4, r7, lr}
 80063e2:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 80063e4:	4b56      	ldr	r3, [pc, #344]	; (8006540 <rotate_R90+0x160>)
 80063e6:	4a57      	ldr	r2, [pc, #348]	; (8006544 <rotate_R90+0x164>)
 80063e8:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 80063ea:	4b57      	ldr	r3, [pc, #348]	; (8006548 <rotate_R90+0x168>)
 80063ec:	4a57      	ldr	r2, [pc, #348]	; (800654c <rotate_R90+0x16c>)
 80063ee:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 80063f0:	4b57      	ldr	r3, [pc, #348]	; (8006550 <rotate_R90+0x170>)
 80063f2:	4a58      	ldr	r2, [pc, #352]	; (8006554 <rotate_R90+0x174>)
 80063f4:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 80063f6:	4b52      	ldr	r3, [pc, #328]	; (8006540 <rotate_R90+0x160>)
 80063f8:	edd3 7a00 	vldr	s15, [r3]
 80063fc:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8006558 <rotate_R90+0x178>
 8006400:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006404:	ee16 0a90 	vmov	r0, s13
 8006408:	f7fa f896 	bl	8000538 <__aeabi_f2d>
 800640c:	a34a      	add	r3, pc, #296	; (adr r3, 8006538 <rotate_R90+0x158>)
 800640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006412:	f7fa f8e9 	bl	80005e8 <__aeabi_dmul>
 8006416:	4603      	mov	r3, r0
 8006418:	460c      	mov	r4, r1
 800641a:	4618      	mov	r0, r3
 800641c:	4621      	mov	r1, r4
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	4b4e      	ldr	r3, [pc, #312]	; (800655c <rotate_R90+0x17c>)
 8006424:	f7fa f8e0 	bl	80005e8 <__aeabi_dmul>
 8006428:	4603      	mov	r3, r0
 800642a:	460c      	mov	r4, r1
 800642c:	4618      	mov	r0, r3
 800642e:	4621      	mov	r1, r4
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006438:	f7fa fa00 	bl	800083c <__aeabi_ddiv>
 800643c:	4603      	mov	r3, r0
 800643e:	460c      	mov	r4, r1
 8006440:	4618      	mov	r0, r3
 8006442:	4621      	mov	r1, r4
 8006444:	f7fa fba8 	bl	8000b98 <__aeabi_d2f>
 8006448:	4602      	mov	r2, r0
 800644a:	4b45      	ldr	r3, [pc, #276]	; (8006560 <rotate_R90+0x180>)
 800644c:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 800644e:	4b3c      	ldr	r3, [pc, #240]	; (8006540 <rotate_R90+0x160>)
 8006450:	edd3 7a00 	vldr	s15, [r3]
 8006454:	eef1 7a67 	vneg.f32	s15, s15
 8006458:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006558 <rotate_R90+0x178>
 800645c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006460:	ee16 0a90 	vmov	r0, s13
 8006464:	f7fa f868 	bl	8000538 <__aeabi_f2d>
 8006468:	a333      	add	r3, pc, #204	; (adr r3, 8006538 <rotate_R90+0x158>)
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f7fa f8bb 	bl	80005e8 <__aeabi_dmul>
 8006472:	4603      	mov	r3, r0
 8006474:	460c      	mov	r4, r1
 8006476:	4618      	mov	r0, r3
 8006478:	4621      	mov	r1, r4
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	4b37      	ldr	r3, [pc, #220]	; (800655c <rotate_R90+0x17c>)
 8006480:	f7fa f8b2 	bl	80005e8 <__aeabi_dmul>
 8006484:	4603      	mov	r3, r0
 8006486:	460c      	mov	r4, r1
 8006488:	4618      	mov	r0, r3
 800648a:	4621      	mov	r1, r4
 800648c:	f04f 0200 	mov.w	r2, #0
 8006490:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006494:	f7fa f9d2 	bl	800083c <__aeabi_ddiv>
 8006498:	4603      	mov	r3, r0
 800649a:	460c      	mov	r4, r1
 800649c:	4618      	mov	r0, r3
 800649e:	4621      	mov	r1, r4
 80064a0:	f7fa fb7a 	bl	8000b98 <__aeabi_d2f>
 80064a4:	4602      	mov	r2, r0
 80064a6:	4b2f      	ldr	r3, [pc, #188]	; (8006564 <rotate_R90+0x184>)
 80064a8:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80064aa:	f7fe fc15 	bl	8004cd8 <drive_start>
	control_stop();
 80064ae:	f7fe fc93 	bl	8004dd8 <control_stop>
	while(degree_z > target_degree_z-80);
 80064b2:	bf00      	nop
 80064b4:	4b2c      	ldr	r3, [pc, #176]	; (8006568 <rotate_R90+0x188>)
 80064b6:	edd3 7a00 	vldr	s15, [r3]
 80064ba:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800656c <rotate_R90+0x18c>
 80064be:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80064c2:	4b2b      	ldr	r3, [pc, #172]	; (8006570 <rotate_R90+0x190>)
 80064c4:	edd3 7a00 	vldr	s15, [r3]
 80064c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064d0:	d4f0      	bmi.n	80064b4 <rotate_R90+0xd4>

	accel_l = -10000;
 80064d2:	4b1d      	ldr	r3, [pc, #116]	; (8006548 <rotate_R90+0x168>)
 80064d4:	4a27      	ldr	r2, [pc, #156]	; (8006574 <rotate_R90+0x194>)
 80064d6:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80064d8:	4b1d      	ldr	r3, [pc, #116]	; (8006550 <rotate_R90+0x170>)
 80064da:	4a27      	ldr	r2, [pc, #156]	; (8006578 <rotate_R90+0x198>)
 80064dc:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 80064de:	4b27      	ldr	r3, [pc, #156]	; (800657c <rotate_R90+0x19c>)
 80064e0:	4a27      	ldr	r2, [pc, #156]	; (8006580 <rotate_R90+0x1a0>)
 80064e2:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 80064e4:	4b27      	ldr	r3, [pc, #156]	; (8006584 <rotate_R90+0x1a4>)
 80064e6:	4a28      	ldr	r2, [pc, #160]	; (8006588 <rotate_R90+0x1a8>)
 80064e8:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 80064ea:	bf00      	nop
 80064ec:	4b1e      	ldr	r3, [pc, #120]	; (8006568 <rotate_R90+0x188>)
 80064ee:	edd3 7a00 	vldr	s15, [r3]
 80064f2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800658c <rotate_R90+0x1ac>
 80064f6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80064fa:	4b1d      	ldr	r3, [pc, #116]	; (8006570 <rotate_R90+0x190>)
 80064fc:	edd3 7a00 	vldr	s15, [r3]
 8006500:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006508:	d4f0      	bmi.n	80064ec <rotate_R90+0x10c>

	if(!MF.FLAG.XDIR){
 800650a:	4b21      	ldr	r3, [pc, #132]	; (8006590 <rotate_R90+0x1b0>)
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d104      	bne.n	8006522 <rotate_R90+0x142>
		turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006518:	2101      	movs	r1, #1
 800651a:	2001      	movs	r0, #1
 800651c:	f009 fce8 	bl	800fef0 <turn_dir>
 8006520:	e003      	b.n	800652a <rotate_R90+0x14a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006522:	2103      	movs	r1, #3
 8006524:	2002      	movs	r0, #2
 8006526:	f009 fce3 	bl	800fef0 <turn_dir>
	}
	drive_stop();
 800652a:	f7fe fc05 	bl	8004d38 <drive_stop>
}
 800652e:	bf00      	nop
 8006530:	bd98      	pop	{r3, r4, r7, pc}
 8006532:	bf00      	nop
 8006534:	f3af 8000 	nop.w
 8006538:	54442d18 	.word	0x54442d18
 800653c:	400921fb 	.word	0x400921fb
 8006540:	200001a8 	.word	0x200001a8
 8006544:	44480000 	.word	0x44480000
 8006548:	20000d58 	.word	0x20000d58
 800654c:	453b8000 	.word	0x453b8000
 8006550:	20000ae4 	.word	0x20000ae4
 8006554:	c53b8000 	.word	0xc53b8000
 8006558:	43340000 	.word	0x43340000
 800655c:	40508000 	.word	0x40508000
 8006560:	2000077c 	.word	0x2000077c
 8006564:	20000f6c 	.word	0x20000f6c
 8006568:	20000bf8 	.word	0x20000bf8
 800656c:	42a00000 	.word	0x42a00000
 8006570:	20000b5c 	.word	0x20000b5c
 8006574:	c61c4000 	.word	0xc61c4000
 8006578:	461c4000 	.word	0x461c4000
 800657c:	20000b54 	.word	0x20000b54
 8006580:	42c80000 	.word	0x42c80000
 8006584:	200001a4 	.word	0x200001a4
 8006588:	c2c80000 	.word	0xc2c80000
 800658c:	42b40000 	.word	0x42b40000
 8006590:	20000f68 	.word	0x20000f68
 8006594:	00000000 	.word	0x00000000

08006598 <rotate_L90>:
//rotate_L90
// 左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 8006598:	b598      	push	{r3, r4, r7, lr}
 800659a:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 800659c:	4b56      	ldr	r3, [pc, #344]	; (80066f8 <rotate_L90+0x160>)
 800659e:	4a57      	ldr	r2, [pc, #348]	; (80066fc <rotate_L90+0x164>)
 80065a0:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 80065a2:	4b57      	ldr	r3, [pc, #348]	; (8006700 <rotate_L90+0x168>)
 80065a4:	4a57      	ldr	r2, [pc, #348]	; (8006704 <rotate_L90+0x16c>)
 80065a6:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 80065a8:	4b57      	ldr	r3, [pc, #348]	; (8006708 <rotate_L90+0x170>)
 80065aa:	4a58      	ldr	r2, [pc, #352]	; (800670c <rotate_L90+0x174>)
 80065ac:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 80065ae:	4b52      	ldr	r3, [pc, #328]	; (80066f8 <rotate_L90+0x160>)
 80065b0:	edd3 7a00 	vldr	s15, [r3]
 80065b4:	eef1 7a67 	vneg.f32	s15, s15
 80065b8:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006710 <rotate_L90+0x178>
 80065bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80065c0:	ee16 0a90 	vmov	r0, s13
 80065c4:	f7f9 ffb8 	bl	8000538 <__aeabi_f2d>
 80065c8:	a349      	add	r3, pc, #292	; (adr r3, 80066f0 <rotate_L90+0x158>)
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f7fa f80b 	bl	80005e8 <__aeabi_dmul>
 80065d2:	4603      	mov	r3, r0
 80065d4:	460c      	mov	r4, r1
 80065d6:	4618      	mov	r0, r3
 80065d8:	4621      	mov	r1, r4
 80065da:	f04f 0200 	mov.w	r2, #0
 80065de:	4b4d      	ldr	r3, [pc, #308]	; (8006714 <rotate_L90+0x17c>)
 80065e0:	f7fa f802 	bl	80005e8 <__aeabi_dmul>
 80065e4:	4603      	mov	r3, r0
 80065e6:	460c      	mov	r4, r1
 80065e8:	4618      	mov	r0, r3
 80065ea:	4621      	mov	r1, r4
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065f4:	f7fa f922 	bl	800083c <__aeabi_ddiv>
 80065f8:	4603      	mov	r3, r0
 80065fa:	460c      	mov	r4, r1
 80065fc:	4618      	mov	r0, r3
 80065fe:	4621      	mov	r1, r4
 8006600:	f7fa faca 	bl	8000b98 <__aeabi_d2f>
 8006604:	4602      	mov	r2, r0
 8006606:	4b44      	ldr	r3, [pc, #272]	; (8006718 <rotate_L90+0x180>)
 8006608:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 800660a:	4b3b      	ldr	r3, [pc, #236]	; (80066f8 <rotate_L90+0x160>)
 800660c:	edd3 7a00 	vldr	s15, [r3]
 8006610:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006710 <rotate_L90+0x178>
 8006614:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006618:	ee16 0a90 	vmov	r0, s13
 800661c:	f7f9 ff8c 	bl	8000538 <__aeabi_f2d>
 8006620:	a333      	add	r3, pc, #204	; (adr r3, 80066f0 <rotate_L90+0x158>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f7f9 ffdf 	bl	80005e8 <__aeabi_dmul>
 800662a:	4603      	mov	r3, r0
 800662c:	460c      	mov	r4, r1
 800662e:	4618      	mov	r0, r3
 8006630:	4621      	mov	r1, r4
 8006632:	f04f 0200 	mov.w	r2, #0
 8006636:	4b37      	ldr	r3, [pc, #220]	; (8006714 <rotate_L90+0x17c>)
 8006638:	f7f9 ffd6 	bl	80005e8 <__aeabi_dmul>
 800663c:	4603      	mov	r3, r0
 800663e:	460c      	mov	r4, r1
 8006640:	4618      	mov	r0, r3
 8006642:	4621      	mov	r1, r4
 8006644:	f04f 0200 	mov.w	r2, #0
 8006648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800664c:	f7fa f8f6 	bl	800083c <__aeabi_ddiv>
 8006650:	4603      	mov	r3, r0
 8006652:	460c      	mov	r4, r1
 8006654:	4618      	mov	r0, r3
 8006656:	4621      	mov	r1, r4
 8006658:	f7fa fa9e 	bl	8000b98 <__aeabi_d2f>
 800665c:	4602      	mov	r2, r0
 800665e:	4b2f      	ldr	r3, [pc, #188]	; (800671c <rotate_L90+0x184>)
 8006660:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8006662:	f7fe fb39 	bl	8004cd8 <drive_start>
	control_stop();
 8006666:	f7fe fbb7 	bl	8004dd8 <control_stop>
	while(degree_z < target_degree_z+80);
 800666a:	bf00      	nop
 800666c:	4b2c      	ldr	r3, [pc, #176]	; (8006720 <rotate_L90+0x188>)
 800666e:	edd3 7a00 	vldr	s15, [r3]
 8006672:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006724 <rotate_L90+0x18c>
 8006676:	ee37 7a87 	vadd.f32	s14, s15, s14
 800667a:	4b2b      	ldr	r3, [pc, #172]	; (8006728 <rotate_L90+0x190>)
 800667c:	edd3 7a00 	vldr	s15, [r3]
 8006680:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006688:	dcf0      	bgt.n	800666c <rotate_L90+0xd4>

	accel_l = 10000;
 800668a:	4b1d      	ldr	r3, [pc, #116]	; (8006700 <rotate_L90+0x168>)
 800668c:	4a27      	ldr	r2, [pc, #156]	; (800672c <rotate_L90+0x194>)
 800668e:	601a      	str	r2, [r3, #0]
	accel_r = -10000;
 8006690:	4b1d      	ldr	r3, [pc, #116]	; (8006708 <rotate_L90+0x170>)
 8006692:	4a27      	ldr	r2, [pc, #156]	; (8006730 <rotate_L90+0x198>)
 8006694:	601a      	str	r2, [r3, #0]
	speed_max_l = -100;
 8006696:	4b27      	ldr	r3, [pc, #156]	; (8006734 <rotate_L90+0x19c>)
 8006698:	4a27      	ldr	r2, [pc, #156]	; (8006738 <rotate_L90+0x1a0>)
 800669a:	601a      	str	r2, [r3, #0]
	speed_min_r = 100;
 800669c:	4b27      	ldr	r3, [pc, #156]	; (800673c <rotate_L90+0x1a4>)
 800669e:	4a28      	ldr	r2, [pc, #160]	; (8006740 <rotate_L90+0x1a8>)
 80066a0:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 80066a2:	bf00      	nop
 80066a4:	4b1e      	ldr	r3, [pc, #120]	; (8006720 <rotate_L90+0x188>)
 80066a6:	edd3 7a00 	vldr	s15, [r3]
 80066aa:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006744 <rotate_L90+0x1ac>
 80066ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066b2:	4b1d      	ldr	r3, [pc, #116]	; (8006728 <rotate_L90+0x190>)
 80066b4:	edd3 7a00 	vldr	s15, [r3]
 80066b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c0:	dcf0      	bgt.n	80066a4 <rotate_L90+0x10c>

	if(!MF.FLAG.XDIR){
 80066c2:	4b21      	ldr	r3, [pc, #132]	; (8006748 <rotate_L90+0x1b0>)
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d104      	bne.n	80066da <rotate_L90+0x142>
		turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 80066d0:	2101      	movs	r1, #1
 80066d2:	20ff      	movs	r0, #255	; 0xff
 80066d4:	f009 fc0c 	bl	800fef0 <turn_dir>
 80066d8:	e003      	b.n	80066e2 <rotate_L90+0x14a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 80066da:	2103      	movs	r1, #3
 80066dc:	20fe      	movs	r0, #254	; 0xfe
 80066de:	f009 fc07 	bl	800fef0 <turn_dir>
	}
	drive_stop();
 80066e2:	f7fe fb29 	bl	8004d38 <drive_stop>
}
 80066e6:	bf00      	nop
 80066e8:	bd98      	pop	{r3, r4, r7, pc}
 80066ea:	bf00      	nop
 80066ec:	f3af 8000 	nop.w
 80066f0:	54442d18 	.word	0x54442d18
 80066f4:	400921fb 	.word	0x400921fb
 80066f8:	200001a8 	.word	0x200001a8
 80066fc:	44480000 	.word	0x44480000
 8006700:	20000d58 	.word	0x20000d58
 8006704:	c53b8000 	.word	0xc53b8000
 8006708:	20000ae4 	.word	0x20000ae4
 800670c:	453b8000 	.word	0x453b8000
 8006710:	43340000 	.word	0x43340000
 8006714:	40508000 	.word	0x40508000
 8006718:	20000b54 	.word	0x20000b54
 800671c:	200001a4 	.word	0x200001a4
 8006720:	20000bf8 	.word	0x20000bf8
 8006724:	42a00000 	.word	0x42a00000
 8006728:	20000b5c 	.word	0x20000b5c
 800672c:	461c4000 	.word	0x461c4000
 8006730:	c61c4000 	.word	0xc61c4000
 8006734:	2000077c 	.word	0x2000077c
 8006738:	c2c80000 	.word	0xc2c80000
 800673c:	20000f6c 	.word	0x20000f6c
 8006740:	42c80000 	.word	0x42c80000
 8006744:	42b40000 	.word	0x42b40000
 8006748:	20000f68 	.word	0x20000f68
 800674c:	00000000 	.word	0x00000000

08006750 <rotate_180>:
//rotate_180
// 180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 8006750:	b598      	push	{r3, r4, r7, lr}
 8006752:	af00      	add	r7, sp, #0

	full_led_write(GREEN);
 8006754:	2002      	movs	r0, #2
 8006756:	f00b fa5f 	bl	8011c18 <full_led_write>
	target_omega_z = 800;
 800675a:	4b55      	ldr	r3, [pc, #340]	; (80068b0 <rotate_180+0x160>)
 800675c:	4a55      	ldr	r2, [pc, #340]	; (80068b4 <rotate_180+0x164>)
 800675e:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 8006760:	4b55      	ldr	r3, [pc, #340]	; (80068b8 <rotate_180+0x168>)
 8006762:	4a56      	ldr	r2, [pc, #344]	; (80068bc <rotate_180+0x16c>)
 8006764:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8006766:	4b56      	ldr	r3, [pc, #344]	; (80068c0 <rotate_180+0x170>)
 8006768:	4a56      	ldr	r2, [pc, #344]	; (80068c4 <rotate_180+0x174>)
 800676a:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 800676c:	4b50      	ldr	r3, [pc, #320]	; (80068b0 <rotate_180+0x160>)
 800676e:	edd3 7a00 	vldr	s15, [r3]
 8006772:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80068c8 <rotate_180+0x178>
 8006776:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800677a:	ee16 0a90 	vmov	r0, s13
 800677e:	f7f9 fedb 	bl	8000538 <__aeabi_f2d>
 8006782:	a349      	add	r3, pc, #292	; (adr r3, 80068a8 <rotate_180+0x158>)
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	f7f9 ff2e 	bl	80005e8 <__aeabi_dmul>
 800678c:	4603      	mov	r3, r0
 800678e:	460c      	mov	r4, r1
 8006790:	4618      	mov	r0, r3
 8006792:	4621      	mov	r1, r4
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	4b4c      	ldr	r3, [pc, #304]	; (80068cc <rotate_180+0x17c>)
 800679a:	f7f9 ff25 	bl	80005e8 <__aeabi_dmul>
 800679e:	4603      	mov	r3, r0
 80067a0:	460c      	mov	r4, r1
 80067a2:	4618      	mov	r0, r3
 80067a4:	4621      	mov	r1, r4
 80067a6:	f04f 0200 	mov.w	r2, #0
 80067aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067ae:	f7fa f845 	bl	800083c <__aeabi_ddiv>
 80067b2:	4603      	mov	r3, r0
 80067b4:	460c      	mov	r4, r1
 80067b6:	4618      	mov	r0, r3
 80067b8:	4621      	mov	r1, r4
 80067ba:	f7fa f9ed 	bl	8000b98 <__aeabi_d2f>
 80067be:	4602      	mov	r2, r0
 80067c0:	4b43      	ldr	r3, [pc, #268]	; (80068d0 <rotate_180+0x180>)
 80067c2:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 80067c4:	4b3a      	ldr	r3, [pc, #232]	; (80068b0 <rotate_180+0x160>)
 80067c6:	edd3 7a00 	vldr	s15, [r3]
 80067ca:	eef1 7a67 	vneg.f32	s15, s15
 80067ce:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80068c8 <rotate_180+0x178>
 80067d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80067d6:	ee16 0a90 	vmov	r0, s13
 80067da:	f7f9 fead 	bl	8000538 <__aeabi_f2d>
 80067de:	a332      	add	r3, pc, #200	; (adr r3, 80068a8 <rotate_180+0x158>)
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	f7f9 ff00 	bl	80005e8 <__aeabi_dmul>
 80067e8:	4603      	mov	r3, r0
 80067ea:	460c      	mov	r4, r1
 80067ec:	4618      	mov	r0, r3
 80067ee:	4621      	mov	r1, r4
 80067f0:	f04f 0200 	mov.w	r2, #0
 80067f4:	4b35      	ldr	r3, [pc, #212]	; (80068cc <rotate_180+0x17c>)
 80067f6:	f7f9 fef7 	bl	80005e8 <__aeabi_dmul>
 80067fa:	4603      	mov	r3, r0
 80067fc:	460c      	mov	r4, r1
 80067fe:	4618      	mov	r0, r3
 8006800:	4621      	mov	r1, r4
 8006802:	f04f 0200 	mov.w	r2, #0
 8006806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800680a:	f7fa f817 	bl	800083c <__aeabi_ddiv>
 800680e:	4603      	mov	r3, r0
 8006810:	460c      	mov	r4, r1
 8006812:	4618      	mov	r0, r3
 8006814:	4621      	mov	r1, r4
 8006816:	f7fa f9bf 	bl	8000b98 <__aeabi_d2f>
 800681a:	4602      	mov	r2, r0
 800681c:	4b2d      	ldr	r3, [pc, #180]	; (80068d4 <rotate_180+0x184>)
 800681e:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8006820:	f7fe fa5a 	bl	8004cd8 <drive_start>
	control_stop();
 8006824:	f7fe fad8 	bl	8004dd8 <control_stop>
	while(degree_z > target_degree_z-160);
 8006828:	bf00      	nop
 800682a:	4b2b      	ldr	r3, [pc, #172]	; (80068d8 <rotate_180+0x188>)
 800682c:	edd3 7a00 	vldr	s15, [r3]
 8006830:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80068dc <rotate_180+0x18c>
 8006834:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006838:	4b29      	ldr	r3, [pc, #164]	; (80068e0 <rotate_180+0x190>)
 800683a:	edd3 7a00 	vldr	s15, [r3]
 800683e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006846:	d4f0      	bmi.n	800682a <rotate_180+0xda>

	accel_l = -10000;
 8006848:	4b1b      	ldr	r3, [pc, #108]	; (80068b8 <rotate_180+0x168>)
 800684a:	4a26      	ldr	r2, [pc, #152]	; (80068e4 <rotate_180+0x194>)
 800684c:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800684e:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <rotate_180+0x170>)
 8006850:	4a25      	ldr	r2, [pc, #148]	; (80068e8 <rotate_180+0x198>)
 8006852:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 8006854:	4b25      	ldr	r3, [pc, #148]	; (80068ec <rotate_180+0x19c>)
 8006856:	4a26      	ldr	r2, [pc, #152]	; (80068f0 <rotate_180+0x1a0>)
 8006858:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 800685a:	4b26      	ldr	r3, [pc, #152]	; (80068f4 <rotate_180+0x1a4>)
 800685c:	4a26      	ldr	r2, [pc, #152]	; (80068f8 <rotate_180+0x1a8>)
 800685e:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 8006860:	bf00      	nop
 8006862:	4b1d      	ldr	r3, [pc, #116]	; (80068d8 <rotate_180+0x188>)
 8006864:	edd3 7a00 	vldr	s15, [r3]
 8006868:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80068c8 <rotate_180+0x178>
 800686c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006870:	4b1b      	ldr	r3, [pc, #108]	; (80068e0 <rotate_180+0x190>)
 8006872:	edd3 7a00 	vldr	s15, [r3]
 8006876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800687a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800687e:	d4f0      	bmi.n	8006862 <rotate_180+0x112>

	if(!MF.FLAG.XDIR){
 8006880:	4b1e      	ldr	r3, [pc, #120]	; (80068fc <rotate_180+0x1ac>)
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d104      	bne.n	8006898 <rotate_180+0x148>
		turn_dir(DIR_TURN_180, 1);										//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 800688e:	2101      	movs	r1, #1
 8006890:	2002      	movs	r0, #2
 8006892:	f009 fb2d 	bl	800fef0 <turn_dir>
 8006896:	e003      	b.n	80068a0 <rotate_180+0x150>
	}else{
		turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 8006898:	2103      	movs	r1, #3
 800689a:	2004      	movs	r0, #4
 800689c:	f009 fb28 	bl	800fef0 <turn_dir>
	}
	drive_stop();
 80068a0:	f7fe fa4a 	bl	8004d38 <drive_stop>

}
 80068a4:	bf00      	nop
 80068a6:	bd98      	pop	{r3, r4, r7, pc}
 80068a8:	54442d18 	.word	0x54442d18
 80068ac:	400921fb 	.word	0x400921fb
 80068b0:	200001a8 	.word	0x200001a8
 80068b4:	44480000 	.word	0x44480000
 80068b8:	20000d58 	.word	0x20000d58
 80068bc:	453b8000 	.word	0x453b8000
 80068c0:	20000ae4 	.word	0x20000ae4
 80068c4:	c53b8000 	.word	0xc53b8000
 80068c8:	43340000 	.word	0x43340000
 80068cc:	40508000 	.word	0x40508000
 80068d0:	2000077c 	.word	0x2000077c
 80068d4:	20000f6c 	.word	0x20000f6c
 80068d8:	20000bf8 	.word	0x20000bf8
 80068dc:	43200000 	.word	0x43200000
 80068e0:	20000b5c 	.word	0x20000b5c
 80068e4:	c61c4000 	.word	0xc61c4000
 80068e8:	461c4000 	.word	0x461c4000
 80068ec:	20000b54 	.word	0x20000b54
 80068f0:	42c80000 	.word	0x42c80000
 80068f4:	200001a4 	.word	0x200001a4
 80068f8:	c2c80000 	.word	0xc2c80000
 80068fc:	20000f68 	.word	0x20000f68

08006900 <slalom_R90>:
//slalom_R90
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8006906:	2005      	movs	r0, #5
 8006908:	f00b f986 	bl	8011c18 <full_led_write>
	if(run_mode == LOW){
 800690c:	4b87      	ldr	r3, [pc, #540]	; (8006b2c <slalom_R90+0x22c>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b01      	cmp	r3, #1
 8006914:	d12a      	bne.n	800696c <slalom_R90+0x6c>
		slalomF(10000, SPEED_LOW, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 8006916:	23fa      	movs	r3, #250	; 0xfa
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800691e:	2212      	movs	r2, #18
 8006920:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006924:	f242 7010 	movw	r0, #10000	; 0x2710
 8006928:	f7fe fdb6 	bl	8005498 <slalomF>
		slalomR(-SLALOM_DEGACCEL, -SLALOM_OMEGA, -90, SPEED_LOW);
 800692c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006930:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006934:	497e      	ldr	r1, [pc, #504]	; (8006b30 <slalom_R90+0x230>)
 8006936:	487f      	ldr	r0, [pc, #508]	; (8006b34 <slalom_R90+0x234>)
 8006938:	f7fe fe64 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 800693c:	4b7e      	ldr	r3, [pc, #504]	; (8006b38 <slalom_R90+0x238>)
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d104      	bne.n	8006954 <slalom_R90+0x54>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800694a:	2101      	movs	r1, #1
 800694c:	2001      	movs	r0, #1
 800694e:	f009 facf 	bl	800fef0 <turn_dir>
 8006952:	e003      	b.n	800695c <slalom_R90+0x5c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006954:	2103      	movs	r1, #3
 8006956:	2002      	movs	r0, #2
 8006958:	f009 faca 	bl	800fef0 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, SLALOM_OFFSET_B);
 800695c:	2219      	movs	r2, #25
 800695e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006962:	f242 7010 	movw	r0, #10000	; 0x2710
 8006966:	f7fe ff6f 	bl	8005848 <slalomB>
 800696a:	e0d2      	b.n	8006b12 <slalom_R90+0x212>
	}else if(run_mode == MIDDLE){
 800696c:	4b6f      	ldr	r3, [pc, #444]	; (8006b2c <slalom_R90+0x22c>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b02      	cmp	r3, #2
 8006974:	d12a      	bne.n	80069cc <slalom_R90+0xcc>
		slalomF(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_F, SLALOM_2_WALL_FL, SLALOM_2_WALL_FR);
 8006976:	23f0      	movs	r3, #240	; 0xf0
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800697e:	2219      	movs	r2, #25
 8006980:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006984:	f242 7010 	movw	r0, #10000	; 0x2710
 8006988:	f7fe fd86 	bl	8005498 <slalomF>
		slalomR(-SLALOM_2_DEGACCEL, -SLALOM_2_OMEGA, -85, SPEED_MIDDLE);
 800698c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006990:	f06f 0254 	mvn.w	r2, #84	; 0x54
 8006994:	4969      	ldr	r1, [pc, #420]	; (8006b3c <slalom_R90+0x23c>)
 8006996:	486a      	ldr	r0, [pc, #424]	; (8006b40 <slalom_R90+0x240>)
 8006998:	f7fe fe34 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 800699c:	4b66      	ldr	r3, [pc, #408]	; (8006b38 <slalom_R90+0x238>)
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d104      	bne.n	80069b4 <slalom_R90+0xb4>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80069aa:	2101      	movs	r1, #1
 80069ac:	2001      	movs	r0, #1
 80069ae:	f009 fa9f 	bl	800fef0 <turn_dir>
 80069b2:	e003      	b.n	80069bc <slalom_R90+0xbc>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80069b4:	2103      	movs	r1, #3
 80069b6:	2002      	movs	r0, #2
 80069b8:	f009 fa9a 	bl	800fef0 <turn_dir>
		}
		slalomB(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_B);
 80069bc:	223c      	movs	r2, #60	; 0x3c
 80069be:	f44f 7116 	mov.w	r1, #600	; 0x258
 80069c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80069c6:	f7fe ff3f 	bl	8005848 <slalomB>
 80069ca:	e0a2      	b.n	8006b12 <slalom_R90+0x212>
	}else if(run_mode == HIGH){
 80069cc:	4b57      	ldr	r3, [pc, #348]	; (8006b2c <slalom_R90+0x22c>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d12a      	bne.n	8006a2c <slalom_R90+0x12c>
		slalomF(10000, SPEED_HIGH, SLALOM_3_OFFSET_F, SLALOM_3_WALL_FL, SLALOM_3_WALL_FR);
 80069d6:	23be      	movs	r3, #190	; 0xbe
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	f44f 73be 	mov.w	r3, #380	; 0x17c
 80069de:	2219      	movs	r2, #25
 80069e0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80069e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80069e8:	f7fe fd56 	bl	8005498 <slalomF>
		slalomR(-SLALOM_3_DEGACCEL, -SLALOM_3_OMEGA, -70, SPEED_HIGH);
 80069ec:	f44f 7348 	mov.w	r3, #800	; 0x320
 80069f0:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80069f4:	4953      	ldr	r1, [pc, #332]	; (8006b44 <slalom_R90+0x244>)
 80069f6:	4854      	ldr	r0, [pc, #336]	; (8006b48 <slalom_R90+0x248>)
 80069f8:	f7fe fe04 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 80069fc:	4b4e      	ldr	r3, [pc, #312]	; (8006b38 <slalom_R90+0x238>)
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d104      	bne.n	8006a14 <slalom_R90+0x114>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	f009 fa6f 	bl	800fef0 <turn_dir>
 8006a12:	e003      	b.n	8006a1c <slalom_R90+0x11c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a14:	2103      	movs	r1, #3
 8006a16:	2002      	movs	r0, #2
 8006a18:	f009 fa6a 	bl	800fef0 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH, SLALOM_3_OFFSET_B);
 8006a1c:	225a      	movs	r2, #90	; 0x5a
 8006a1e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006a22:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a26:	f7fe ff0f 	bl	8005848 <slalomB>
 8006a2a:	e072      	b.n	8006b12 <slalom_R90+0x212>
	}else if(run_mode == HIGH_HIGH){
 8006a2c:	4b3f      	ldr	r3, [pc, #252]	; (8006b2c <slalom_R90+0x22c>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d12a      	bne.n	8006a8c <slalom_R90+0x18c>
		slalomF(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_F, SLALOM_4_WALL_FL, SLALOM_4_WALL_FR);
 8006a36:	23a0      	movs	r3, #160	; 0xa0
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006a3e:	220a      	movs	r2, #10
 8006a40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a44:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a48:	f7fe fd26 	bl	8005498 <slalomF>
		slalomR(-SLALOM_4_DEGACCEL, -SLALOM_4_OMEGA, -50, SPEED_HIGH_HIGH);
 8006a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a50:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8006a54:	493b      	ldr	r1, [pc, #236]	; (8006b44 <slalom_R90+0x244>)
 8006a56:	483d      	ldr	r0, [pc, #244]	; (8006b4c <slalom_R90+0x24c>)
 8006a58:	f7fe fdd4 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 8006a5c:	4b36      	ldr	r3, [pc, #216]	; (8006b38 <slalom_R90+0x238>)
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d104      	bne.n	8006a74 <slalom_R90+0x174>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	2001      	movs	r0, #1
 8006a6e:	f009 fa3f 	bl	800fef0 <turn_dir>
 8006a72:	e003      	b.n	8006a7c <slalom_R90+0x17c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006a74:	2103      	movs	r1, #3
 8006a76:	2002      	movs	r0, #2
 8006a78:	f009 fa3a 	bl	800fef0 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_B);
 8006a7c:	2273      	movs	r2, #115	; 0x73
 8006a7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a82:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a86:	f7fe fedf 	bl	8005848 <slalomB>
 8006a8a:	e042      	b.n	8006b12 <slalom_R90+0x212>
	}else if(run_mode == 5){
 8006a8c:	4b27      	ldr	r3, [pc, #156]	; (8006b2c <slalom_R90+0x22c>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b05      	cmp	r3, #5
 8006a94:	d13d      	bne.n	8006b12 <slalom_R90+0x212>
		MF2.FLAG.TEMP = 1;
 8006a96:	4a2e      	ldr	r2, [pc, #184]	; (8006b50 <slalom_R90+0x250>)
 8006a98:	8813      	ldrh	r3, [r2, #0]
 8006a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a9e:	8013      	strh	r3, [r2, #0]
		slalomF(10000, SPEED_5, SLALOM_5_OFFSET_F, SLALOM_5_WALL_FL, SLALOM_5_WALL_FR);
 8006aa0:	2382      	movs	r3, #130	; 0x82
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006aae:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ab2:	f7fe fcf1 	bl	8005498 <slalomF>
		MF2.FLAG.TEMP = 0;
 8006ab6:	4a26      	ldr	r2, [pc, #152]	; (8006b50 <slalom_R90+0x250>)
 8006ab8:	8813      	ldrh	r3, [r2, #0]
 8006aba:	f36f 2349 	bfc	r3, #9, #1
 8006abe:	8013      	strh	r3, [r2, #0]
		slalomR(-SLALOM_5_DEGACCEL, -SLALOM_5_OMEGA, -20, SPEED_5);
 8006ac0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006ac4:	f06f 0213 	mvn.w	r2, #19
 8006ac8:	4922      	ldr	r1, [pc, #136]	; (8006b54 <slalom_R90+0x254>)
 8006aca:	4823      	ldr	r0, [pc, #140]	; (8006b58 <slalom_R90+0x258>)
 8006acc:	f7fe fd9a 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 8006ad0:	4b19      	ldr	r3, [pc, #100]	; (8006b38 <slalom_R90+0x238>)
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d104      	bne.n	8006ae8 <slalom_R90+0x1e8>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006ade:	2101      	movs	r1, #1
 8006ae0:	2001      	movs	r0, #1
 8006ae2:	f009 fa05 	bl	800fef0 <turn_dir>
 8006ae6:	e003      	b.n	8006af0 <slalom_R90+0x1f0>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006ae8:	2103      	movs	r1, #3
 8006aea:	2002      	movs	r0, #2
 8006aec:	f009 fa00 	bl	800fef0 <turn_dir>
		}
		MF2.FLAG.TEMP = 1;
 8006af0:	4a17      	ldr	r2, [pc, #92]	; (8006b50 <slalom_R90+0x250>)
 8006af2:	8813      	ldrh	r3, [r2, #0]
 8006af4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006af8:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, SLALOM_5_OFFSET_B);
 8006afa:	22a8      	movs	r2, #168	; 0xa8
 8006afc:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006b00:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b04:	f7fe fea0 	bl	8005848 <slalomB>
		MF2.FLAG.TEMP = 0;
 8006b08:	4a11      	ldr	r2, [pc, #68]	; (8006b50 <slalom_R90+0x250>)
 8006b0a:	8813      	ldrh	r3, [r2, #0]
 8006b0c:	f36f 2349 	bfc	r3, #9, #1
 8006b10:	8013      	strh	r3, [r2, #0]
	}
	if(!MF.FLAG.SCND)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006b12:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <slalom_R90+0x238>)
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <slalom_R90+0x224>
 8006b20:	f00b f806 	bl	8011b30 <get_wall_info>
}
 8006b24:	bf00      	nop
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000456 	.word	0x20000456
 8006b30:	fffffdda 	.word	0xfffffdda
 8006b34:	fffff060 	.word	0xfffff060
 8006b38:	20000f68 	.word	0x20000f68
 8006b3c:	fffffc7c 	.word	0xfffffc7c
 8006b40:	ffffd120 	.word	0xffffd120
 8006b44:	fffffb50 	.word	0xfffffb50
 8006b48:	ffffa240 	.word	0xffffa240
 8006b4c:	ffff8300 	.word	0xffff8300
 8006b50:	20000f64 	.word	0x20000f64
 8006b54:	fffffaec 	.word	0xfffffaec
 8006b58:	ffff3cb0 	.word	0xffff3cb0

08006b5c <slalom_L90>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8006b62:	2006      	movs	r0, #6
 8006b64:	f00b f858 	bl	8011c18 <full_led_write>
	if(run_mode == LOW){
 8006b68:	4b89      	ldr	r3, [pc, #548]	; (8006d90 <slalom_L90+0x234>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d12b      	bne.n	8006bca <slalom_L90+0x6e>
		slalomF(10000, SPEED_LOW, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 8006b72:	23fa      	movs	r3, #250	; 0xfa
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006b7a:	2212      	movs	r2, #18
 8006b7c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006b80:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b84:	f7fe fc88 	bl	8005498 <slalomF>
		slalomR(SLALOM_DEGACCEL, SLALOM_OMEGA, 90, SPEED_LOW);
 8006b88:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006b8c:	225a      	movs	r2, #90	; 0x5a
 8006b8e:	f240 2126 	movw	r1, #550	; 0x226
 8006b92:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006b96:	f7fe fd35 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 8006b9a:	4b7e      	ldr	r3, [pc, #504]	; (8006d94 <slalom_L90+0x238>)
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d104      	bne.n	8006bb2 <slalom_L90+0x56>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ba8:	2101      	movs	r1, #1
 8006baa:	20ff      	movs	r0, #255	; 0xff
 8006bac:	f009 f9a0 	bl	800fef0 <turn_dir>
 8006bb0:	e003      	b.n	8006bba <slalom_L90+0x5e>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006bb2:	2103      	movs	r1, #3
 8006bb4:	20fe      	movs	r0, #254	; 0xfe
 8006bb6:	f009 f99b 	bl	800fef0 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, SLALOM_OFFSET_B);
 8006bba:	2219      	movs	r2, #25
 8006bbc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006bc0:	f242 7010 	movw	r0, #10000	; 0x2710
 8006bc4:	f7fe fe40 	bl	8005848 <slalomB>
 8006bc8:	e0d6      	b.n	8006d78 <slalom_L90+0x21c>
	}else if(run_mode == MIDDLE){
 8006bca:	4b71      	ldr	r3, [pc, #452]	; (8006d90 <slalom_L90+0x234>)
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d12b      	bne.n	8006c2c <slalom_L90+0xd0>
		slalomF(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_F, SLALOM_2_WALL_FL, SLALOM_2_WALL_FR);
 8006bd4:	23f0      	movs	r3, #240	; 0xf0
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006bdc:	2219      	movs	r2, #25
 8006bde:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006be2:	f242 7010 	movw	r0, #10000	; 0x2710
 8006be6:	f7fe fc57 	bl	8005498 <slalomF>
		slalomR(SLALOM_2_DEGACCEL, SLALOM_2_OMEGA, 85, SPEED_MIDDLE);
 8006bea:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006bee:	2255      	movs	r2, #85	; 0x55
 8006bf0:	f44f 7161 	mov.w	r1, #900	; 0x384
 8006bf4:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8006bf8:	f7fe fd04 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 8006bfc:	4b65      	ldr	r3, [pc, #404]	; (8006d94 <slalom_L90+0x238>)
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d104      	bne.n	8006c14 <slalom_L90+0xb8>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	20ff      	movs	r0, #255	; 0xff
 8006c0e:	f009 f96f 	bl	800fef0 <turn_dir>
 8006c12:	e003      	b.n	8006c1c <slalom_L90+0xc0>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006c14:	2103      	movs	r1, #3
 8006c16:	20fe      	movs	r0, #254	; 0xfe
 8006c18:	f009 f96a 	bl	800fef0 <turn_dir>
		}
		slalomB(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_B);
 8006c1c:	223c      	movs	r2, #60	; 0x3c
 8006c1e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006c22:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c26:	f7fe fe0f 	bl	8005848 <slalomB>
 8006c2a:	e0a5      	b.n	8006d78 <slalom_L90+0x21c>
	}else if(run_mode == HIGH){
 8006c2c:	4b58      	ldr	r3, [pc, #352]	; (8006d90 <slalom_L90+0x234>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d12b      	bne.n	8006c8e <slalom_L90+0x132>
		slalomF(10000, SPEED_HIGH, SLALOM_3_OFFSET_F, SLALOM_3_WALL_FL, SLALOM_3_WALL_FR);
 8006c36:	23be      	movs	r3, #190	; 0xbe
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8006c3e:	2219      	movs	r2, #25
 8006c40:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006c44:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c48:	f7fe fc26 	bl	8005498 <slalomF>
		slalomR(SLALOM_3_DEGACCEL, SLALOM_3_OMEGA, 70, SPEED_HIGH);
 8006c4c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006c50:	2246      	movs	r2, #70	; 0x46
 8006c52:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006c56:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 8006c5a:	f7fe fcd3 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 8006c5e:	4b4d      	ldr	r3, [pc, #308]	; (8006d94 <slalom_L90+0x238>)
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d104      	bne.n	8006c76 <slalom_L90+0x11a>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	20ff      	movs	r0, #255	; 0xff
 8006c70:	f009 f93e 	bl	800fef0 <turn_dir>
 8006c74:	e003      	b.n	8006c7e <slalom_L90+0x122>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c76:	2103      	movs	r1, #3
 8006c78:	20fe      	movs	r0, #254	; 0xfe
 8006c7a:	f009 f939 	bl	800fef0 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH, SLALOM_3_OFFSET_B);
 8006c7e:	225a      	movs	r2, #90	; 0x5a
 8006c80:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006c84:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c88:	f7fe fdde 	bl	8005848 <slalomB>
 8006c8c:	e074      	b.n	8006d78 <slalom_L90+0x21c>
	}else if(run_mode == HIGH_HIGH){
 8006c8e:	4b40      	ldr	r3, [pc, #256]	; (8006d90 <slalom_L90+0x234>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d12b      	bne.n	8006cf0 <slalom_L90+0x194>
		slalomF(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_F, SLALOM_4_WALL_FL, SLALOM_4_WALL_FR);
 8006c98:	23a0      	movs	r3, #160	; 0xa0
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006ca0:	220a      	movs	r2, #10
 8006ca2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ca6:	f242 7010 	movw	r0, #10000	; 0x2710
 8006caa:	f7fe fbf5 	bl	8005498 <slalomF>
		slalomR(SLALOM_4_DEGACCEL, SLALOM_4_OMEGA, 50, SPEED_HIGH_HIGH);
 8006cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cb2:	2232      	movs	r2, #50	; 0x32
 8006cb4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006cb8:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8006cbc:	f7fe fca2 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 8006cc0:	4b34      	ldr	r3, [pc, #208]	; (8006d94 <slalom_L90+0x238>)
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d104      	bne.n	8006cd8 <slalom_L90+0x17c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006cce:	2101      	movs	r1, #1
 8006cd0:	20ff      	movs	r0, #255	; 0xff
 8006cd2:	f009 f90d 	bl	800fef0 <turn_dir>
 8006cd6:	e003      	b.n	8006ce0 <slalom_L90+0x184>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006cd8:	2103      	movs	r1, #3
 8006cda:	20fe      	movs	r0, #254	; 0xfe
 8006cdc:	f009 f908 	bl	800fef0 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_B);
 8006ce0:	2273      	movs	r2, #115	; 0x73
 8006ce2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ce6:	f242 7010 	movw	r0, #10000	; 0x2710
 8006cea:	f7fe fdad 	bl	8005848 <slalomB>
 8006cee:	e043      	b.n	8006d78 <slalom_L90+0x21c>
	}else if(run_mode == 5){
 8006cf0:	4b27      	ldr	r3, [pc, #156]	; (8006d90 <slalom_L90+0x234>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b05      	cmp	r3, #5
 8006cf8:	d13e      	bne.n	8006d78 <slalom_L90+0x21c>
		MF2.FLAG.TEMP = 1;
 8006cfa:	4a27      	ldr	r2, [pc, #156]	; (8006d98 <slalom_L90+0x23c>)
 8006cfc:	8813      	ldrh	r3, [r2, #0]
 8006cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d02:	8013      	strh	r3, [r2, #0]
		slalomF(10000, SPEED_5, SLALOM_5_OFFSET_F, SLALOM_5_WALL_FL, SLALOM_5_WALL_FR);
 8006d04:	2382      	movs	r3, #130	; 0x82
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006d12:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d16:	f7fe fbbf 	bl	8005498 <slalomF>
		MF2.FLAG.TEMP = 0;
 8006d1a:	4a1f      	ldr	r2, [pc, #124]	; (8006d98 <slalom_L90+0x23c>)
 8006d1c:	8813      	ldrh	r3, [r2, #0]
 8006d1e:	f36f 2349 	bfc	r3, #9, #1
 8006d22:	8013      	strh	r3, [r2, #0]
		slalomR(SLALOM_5_DEGACCEL, SLALOM_5_OMEGA, 20, SPEED_5);
 8006d24:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006d28:	2214      	movs	r2, #20
 8006d2a:	f240 5114 	movw	r1, #1300	; 0x514
 8006d2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006d32:	f7fe fc67 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 8006d36:	4b17      	ldr	r3, [pc, #92]	; (8006d94 <slalom_L90+0x238>)
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d104      	bne.n	8006d4e <slalom_L90+0x1f2>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d44:	2101      	movs	r1, #1
 8006d46:	20ff      	movs	r0, #255	; 0xff
 8006d48:	f009 f8d2 	bl	800fef0 <turn_dir>
 8006d4c:	e003      	b.n	8006d56 <slalom_L90+0x1fa>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d4e:	2103      	movs	r1, #3
 8006d50:	20fe      	movs	r0, #254	; 0xfe
 8006d52:	f009 f8cd 	bl	800fef0 <turn_dir>
		}
		MF2.FLAG.TEMP = 1;
 8006d56:	4a10      	ldr	r2, [pc, #64]	; (8006d98 <slalom_L90+0x23c>)
 8006d58:	8813      	ldrh	r3, [r2, #0]
 8006d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d5e:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, SLALOM_5_OFFSET_B);
 8006d60:	22a8      	movs	r2, #168	; 0xa8
 8006d62:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006d66:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d6a:	f7fe fd6d 	bl	8005848 <slalomB>
		MF2.FLAG.TEMP = 0;
 8006d6e:	4a0a      	ldr	r2, [pc, #40]	; (8006d98 <slalom_L90+0x23c>)
 8006d70:	8813      	ldrh	r3, [r2, #0]
 8006d72:	f36f 2349 	bfc	r3, #9, #1
 8006d76:	8013      	strh	r3, [r2, #0]
	}
	if(!MF.FLAG.SCND)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006d78:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <slalom_L90+0x238>)
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <slalom_L90+0x22e>
 8006d86:	f00a fed3 	bl	8011b30 <get_wall_info>
}
 8006d8a:	bf00      	nop
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	20000456 	.word	0x20000456
 8006d94:	20000f68 	.word	0x20000f68
 8006d98:	20000f64 	.word	0x20000f64

08006d9c <Lslalom_R90>:
//Lslalom_R90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R90(void){
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8006da2:	2005      	movs	r0, #5
 8006da4:	f00a ff38 	bl	8011c18 <full_led_write>
	if(run_mode == LOW){
 8006da8:	4b8f      	ldr	r3, [pc, #572]	; (8006fe8 <Lslalom_R90+0x24c>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d12a      	bne.n	8006e08 <Lslalom_R90+0x6c>
		slalomF(10000, SPEED_LOW, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 8006db2:	2364      	movs	r3, #100	; 0x64
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	23c8      	movs	r3, #200	; 0xc8
 8006db8:	222d      	movs	r2, #45	; 0x2d
 8006dba:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006dbe:	f242 7010 	movw	r0, #10000	; 0x2710
 8006dc2:	f7fe fb69 	bl	8005498 <slalomF>
		slalomR(-LSLALOM_DEGACCEL, -LSLALOM_OMEGA, -90, SPEED_LOW);
 8006dc6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006dca:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006dce:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8006dd2:	4886      	ldr	r0, [pc, #536]	; (8006fec <Lslalom_R90+0x250>)
 8006dd4:	f7fe fc16 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 8006dd8:	4b85      	ldr	r3, [pc, #532]	; (8006ff0 <Lslalom_R90+0x254>)
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d104      	bne.n	8006df0 <Lslalom_R90+0x54>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006de6:	2101      	movs	r1, #1
 8006de8:	2001      	movs	r0, #1
 8006dea:	f009 f881 	bl	800fef0 <turn_dir>
 8006dee:	e003      	b.n	8006df8 <Lslalom_R90+0x5c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006df0:	2103      	movs	r1, #3
 8006df2:	2002      	movs	r0, #2
 8006df4:	f009 f87c 	bl	800fef0 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LSLALOM_OFFSET_B);
 8006df8:	2235      	movs	r2, #53	; 0x35
 8006dfa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006dfe:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e02:	f7fe fd21 	bl	8005848 <slalomB>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
	}
}
 8006e06:	e0eb      	b.n	8006fe0 <Lslalom_R90+0x244>
	}else if(run_mode == MIDDLE){
 8006e08:	4b77      	ldr	r3, [pc, #476]	; (8006fe8 <Lslalom_R90+0x24c>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d129      	bne.n	8006e66 <Lslalom_R90+0xca>
		slalomF(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_F, LSLALOM_2_WALL_FL, LSLALOM_2_WALL_FR);
 8006e12:	2378      	movs	r3, #120	; 0x78
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	23f0      	movs	r3, #240	; 0xf0
 8006e18:	223c      	movs	r2, #60	; 0x3c
 8006e1a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006e1e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e22:	f7fe fb39 	bl	8005498 <slalomF>
		slalomR(-LSLALOM_2_DEGACCEL, -LSLALOM_2_OMEGA, -90, SPEED_MIDDLE);
 8006e26:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006e2a:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006e2e:	4971      	ldr	r1, [pc, #452]	; (8006ff4 <Lslalom_R90+0x258>)
 8006e30:	4871      	ldr	r0, [pc, #452]	; (8006ff8 <Lslalom_R90+0x25c>)
 8006e32:	f7fe fbe7 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8006e36:	4b6e      	ldr	r3, [pc, #440]	; (8006ff0 <Lslalom_R90+0x254>)
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d104      	bne.n	8006e4e <Lslalom_R90+0xb2>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e44:	2101      	movs	r1, #1
 8006e46:	2001      	movs	r0, #1
 8006e48:	f009 f852 	bl	800fef0 <turn_dir>
 8006e4c:	e003      	b.n	8006e56 <Lslalom_R90+0xba>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e4e:	2103      	movs	r1, #3
 8006e50:	2002      	movs	r0, #2
 8006e52:	f009 f84d 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_B);
 8006e56:	2258      	movs	r2, #88	; 0x58
 8006e58:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006e5c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e60:	f7fe fcf2 	bl	8005848 <slalomB>
}
 8006e64:	e0bc      	b.n	8006fe0 <Lslalom_R90+0x244>
	}else if(run_mode == HIGH){
 8006e66:	4b60      	ldr	r3, [pc, #384]	; (8006fe8 <Lslalom_R90+0x24c>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d12a      	bne.n	8006ec6 <Lslalom_R90+0x12a>
		slalomF(10000, SPEED_HIGH, LSLALOM_3_OFFSET_F, LSLALOM_3_WALL_FL, LSLALOM_3_WALL_FR);
 8006e70:	2382      	movs	r3, #130	; 0x82
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006e78:	222b      	movs	r2, #43	; 0x2b
 8006e7a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006e7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e82:	f7fe fb09 	bl	8005498 <slalomF>
		slalomR(-LSLALOM_3_DEGACCEL, -LSLALOM_3_OMEGA, -90, SPEED_HIGH);
 8006e86:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006e8a:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006e8e:	495b      	ldr	r1, [pc, #364]	; (8006ffc <Lslalom_R90+0x260>)
 8006e90:	485b      	ldr	r0, [pc, #364]	; (8007000 <Lslalom_R90+0x264>)
 8006e92:	f7fe fbb7 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8006e96:	4b56      	ldr	r3, [pc, #344]	; (8006ff0 <Lslalom_R90+0x254>)
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <Lslalom_R90+0x112>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	2001      	movs	r0, #1
 8006ea8:	f009 f822 	bl	800fef0 <turn_dir>
 8006eac:	e003      	b.n	8006eb6 <Lslalom_R90+0x11a>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006eae:	2103      	movs	r1, #3
 8006eb0:	2002      	movs	r0, #2
 8006eb2:	f009 f81d 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_HIGH, LSLALOM_3_OFFSET_B);
 8006eb6:	225a      	movs	r2, #90	; 0x5a
 8006eb8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006ebc:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ec0:	f7fe fcc2 	bl	8005848 <slalomB>
}
 8006ec4:	e08c      	b.n	8006fe0 <Lslalom_R90+0x244>
	}else if(run_mode == HIGH_HIGH){
 8006ec6:	4b48      	ldr	r3, [pc, #288]	; (8006fe8 <Lslalom_R90+0x24c>)
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b04      	cmp	r3, #4
 8006ece:	d12a      	bne.n	8006f26 <Lslalom_R90+0x18a>
		slalomF(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_F, LSLALOM_4_WALL_FL, LSLALOM_4_WALL_FR);
 8006ed0:	2396      	movs	r3, #150	; 0x96
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006ed8:	2232      	movs	r2, #50	; 0x32
 8006eda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ede:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ee2:	f7fe fad9 	bl	8005498 <slalomF>
		slalomR(-LSLALOM_4_DEGACCEL, -LSLALOM_4_OMEGA, -85, SPEED_HIGH_HIGH);
 8006ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006eea:	f06f 0254 	mvn.w	r2, #84	; 0x54
 8006eee:	4945      	ldr	r1, [pc, #276]	; (8007004 <Lslalom_R90+0x268>)
 8006ef0:	4845      	ldr	r0, [pc, #276]	; (8007008 <Lslalom_R90+0x26c>)
 8006ef2:	f7fe fb87 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8006ef6:	4b3e      	ldr	r3, [pc, #248]	; (8006ff0 <Lslalom_R90+0x254>)
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d104      	bne.n	8006f0e <Lslalom_R90+0x172>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f04:	2101      	movs	r1, #1
 8006f06:	2001      	movs	r0, #1
 8006f08:	f008 fff2 	bl	800fef0 <turn_dir>
 8006f0c:	e003      	b.n	8006f16 <Lslalom_R90+0x17a>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f0e:	2103      	movs	r1, #3
 8006f10:	2002      	movs	r0, #2
 8006f12:	f008 ffed 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_B);
 8006f16:	226e      	movs	r2, #110	; 0x6e
 8006f18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006f1c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f20:	f7fe fc92 	bl	8005848 <slalomB>
}
 8006f24:	e05c      	b.n	8006fe0 <Lslalom_R90+0x244>
	}else if(run_mode == 5){
 8006f26:	4b30      	ldr	r3, [pc, #192]	; (8006fe8 <Lslalom_R90+0x24c>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b05      	cmp	r3, #5
 8006f2e:	d129      	bne.n	8006f84 <Lslalom_R90+0x1e8>
		slalomF(10000, SPEED_5, LSLALOM_5_OFFSET_F, LSLALOM_5_WALL_FL, LSLALOM_5_WALL_FR);
 8006f30:	2382      	movs	r3, #130	; 0x82
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	23fa      	movs	r3, #250	; 0xfa
 8006f36:	2211      	movs	r2, #17
 8006f38:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006f3c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f40:	f7fe faaa 	bl	8005498 <slalomF>
		slalomR(-LSLALOM_5_DEGACCEL, -LSLALOM_5_OMEGA, -80, SPEED_5);
 8006f44:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006f48:	f06f 024f 	mvn.w	r2, #79	; 0x4f
 8006f4c:	492d      	ldr	r1, [pc, #180]	; (8007004 <Lslalom_R90+0x268>)
 8006f4e:	482e      	ldr	r0, [pc, #184]	; (8007008 <Lslalom_R90+0x26c>)
 8006f50:	f7fe fb58 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8006f54:	4b26      	ldr	r3, [pc, #152]	; (8006ff0 <Lslalom_R90+0x254>)
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d104      	bne.n	8006f6c <Lslalom_R90+0x1d0>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f62:	2101      	movs	r1, #1
 8006f64:	2001      	movs	r0, #1
 8006f66:	f008 ffc3 	bl	800fef0 <turn_dir>
 8006f6a:	e003      	b.n	8006f74 <Lslalom_R90+0x1d8>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f6c:	2103      	movs	r1, #3
 8006f6e:	2002      	movs	r0, #2
 8006f70:	f008 ffbe 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_5, LSLALOM_5_OFFSET_B);
 8006f74:	2278      	movs	r2, #120	; 0x78
 8006f76:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006f7a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f7e:	f7fe fc63 	bl	8005848 <slalomB>
}
 8006f82:	e02d      	b.n	8006fe0 <Lslalom_R90+0x244>
	}else if(run_mode == 6){
 8006f84:	4b18      	ldr	r3, [pc, #96]	; (8006fe8 <Lslalom_R90+0x24c>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b06      	cmp	r3, #6
 8006f8c:	d128      	bne.n	8006fe0 <Lslalom_R90+0x244>
		slalomF(10000, SPEED_6, LSLALOM_6_OFFSET_F, LSLALOM_6_WALL_FL, LSLALOM_6_WALL_FR);
 8006f8e:	2378      	movs	r3, #120	; 0x78
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	23f0      	movs	r3, #240	; 0xf0
 8006f94:	2200      	movs	r2, #0
 8006f96:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006f9a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f9e:	f7fe fa7b 	bl	8005498 <slalomF>
		slalomR(-LSLALOM_6_DEGACCEL, -LSLALOM_6_OMEGA, -70, SPEED_6);
 8006fa2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006fa6:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8006faa:	4916      	ldr	r1, [pc, #88]	; (8007004 <Lslalom_R90+0x268>)
 8006fac:	4817      	ldr	r0, [pc, #92]	; (800700c <Lslalom_R90+0x270>)
 8006fae:	f7fe fb29 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8006fb2:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <Lslalom_R90+0x254>)
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d104      	bne.n	8006fca <Lslalom_R90+0x22e>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	2001      	movs	r0, #1
 8006fc4:	f008 ff94 	bl	800fef0 <turn_dir>
 8006fc8:	e003      	b.n	8006fd2 <Lslalom_R90+0x236>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006fca:	2103      	movs	r1, #3
 8006fcc:	2002      	movs	r0, #2
 8006fce:	f008 ff8f 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
 8006fd2:	2278      	movs	r2, #120	; 0x78
 8006fd4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006fd8:	f242 7010 	movw	r0, #10000	; 0x2710
 8006fdc:	f7fe fc34 	bl	8005848 <slalomB>
}
 8006fe0:	bf00      	nop
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20000456 	.word	0x20000456
 8006fec:	fffff830 	.word	0xfffff830
 8006ff0:	20000f68 	.word	0x20000f68
 8006ff4:	fffffe70 	.word	0xfffffe70
 8006ff8:	fffff060 	.word	0xfffff060
 8006ffc:	fffffda8 	.word	0xfffffda8
 8007000:	ffffee6c 	.word	0xffffee6c
 8007004:	fffffce0 	.word	0xfffffce0
 8007008:	ffffe0c0 	.word	0xffffe0c0
 800700c:	ffff8300 	.word	0xffff8300

08007010 <Lslalom_L90>:
//Lslalom_L90
// 大回りスラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L90(void){
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8007016:	2006      	movs	r0, #6
 8007018:	f00a fdfe 	bl	8011c18 <full_led_write>
	if(run_mode == LOW){
 800701c:	4b91      	ldr	r3, [pc, #580]	; (8007264 <Lslalom_L90+0x254>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b01      	cmp	r3, #1
 8007024:	d129      	bne.n	800707a <Lslalom_L90+0x6a>
		slalomF(10000, SPEED_LOW, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 8007026:	2364      	movs	r3, #100	; 0x64
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	23c8      	movs	r3, #200	; 0xc8
 800702c:	222d      	movs	r2, #45	; 0x2d
 800702e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007032:	f242 7010 	movw	r0, #10000	; 0x2710
 8007036:	f7fe fa2f 	bl	8005498 <slalomF>
		slalomR(LSLALOM_DEGACCEL, LSLALOM_OMEGA, 90, SPEED_LOW);
 800703a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800703e:	225a      	movs	r2, #90	; 0x5a
 8007040:	21c8      	movs	r1, #200	; 0xc8
 8007042:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007046:	f7fe fadd 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 800704a:	4b87      	ldr	r3, [pc, #540]	; (8007268 <Lslalom_L90+0x258>)
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d104      	bne.n	8007062 <Lslalom_L90+0x52>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007058:	2101      	movs	r1, #1
 800705a:	20ff      	movs	r0, #255	; 0xff
 800705c:	f008 ff48 	bl	800fef0 <turn_dir>
 8007060:	e003      	b.n	800706a <Lslalom_L90+0x5a>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007062:	2103      	movs	r1, #3
 8007064:	20fe      	movs	r0, #254	; 0xfe
 8007066:	f008 ff43 	bl	800fef0 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LSLALOM_OFFSET_B);
 800706a:	2235      	movs	r2, #53	; 0x35
 800706c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007070:	f242 7010 	movw	r0, #10000	; 0x2710
 8007074:	f7fe fbe8 	bl	8005848 <slalomB>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
	}
}
 8007078:	e0f0      	b.n	800725c <Lslalom_L90+0x24c>
	}else if(run_mode == MIDDLE){
 800707a:	4b7a      	ldr	r3, [pc, #488]	; (8007264 <Lslalom_L90+0x254>)
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b02      	cmp	r3, #2
 8007082:	d12a      	bne.n	80070da <Lslalom_L90+0xca>
		slalomF(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_F, LSLALOM_2_WALL_FL, LSLALOM_2_WALL_FR);
 8007084:	2378      	movs	r3, #120	; 0x78
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	23f0      	movs	r3, #240	; 0xf0
 800708a:	223c      	movs	r2, #60	; 0x3c
 800708c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007090:	f242 7010 	movw	r0, #10000	; 0x2710
 8007094:	f7fe fa00 	bl	8005498 <slalomF>
		slalomR(LSLALOM_2_DEGACCEL, LSLALOM_2_OMEGA, 90, SPEED_MIDDLE);
 8007098:	f44f 7316 	mov.w	r3, #600	; 0x258
 800709c:	225a      	movs	r2, #90	; 0x5a
 800709e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80070a2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80070a6:	f7fe faad 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 80070aa:	4b6f      	ldr	r3, [pc, #444]	; (8007268 <Lslalom_L90+0x258>)
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d104      	bne.n	80070c2 <Lslalom_L90+0xb2>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80070b8:	2101      	movs	r1, #1
 80070ba:	20ff      	movs	r0, #255	; 0xff
 80070bc:	f008 ff18 	bl	800fef0 <turn_dir>
 80070c0:	e003      	b.n	80070ca <Lslalom_L90+0xba>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80070c2:	2103      	movs	r1, #3
 80070c4:	20fe      	movs	r0, #254	; 0xfe
 80070c6:	f008 ff13 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_B);
 80070ca:	2258      	movs	r2, #88	; 0x58
 80070cc:	f44f 7116 	mov.w	r1, #600	; 0x258
 80070d0:	f242 7010 	movw	r0, #10000	; 0x2710
 80070d4:	f7fe fbb8 	bl	8005848 <slalomB>
}
 80070d8:	e0c0      	b.n	800725c <Lslalom_L90+0x24c>
	}else if(run_mode == HIGH){
 80070da:	4b62      	ldr	r3, [pc, #392]	; (8007264 <Lslalom_L90+0x254>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d12b      	bne.n	800713c <Lslalom_L90+0x12c>
		slalomF(10000, SPEED_HIGH, LSLALOM_3_OFFSET_F, LSLALOM_3_WALL_FL, LSLALOM_3_WALL_FR);
 80070e4:	2382      	movs	r3, #130	; 0x82
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80070ec:	222b      	movs	r2, #43	; 0x2b
 80070ee:	f44f 7148 	mov.w	r1, #800	; 0x320
 80070f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80070f6:	f7fe f9cf 	bl	8005498 <slalomF>
		slalomR(LSLALOM_3_DEGACCEL, LSLALOM_3_OMEGA, 90, SPEED_HIGH);
 80070fa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80070fe:	225a      	movs	r2, #90	; 0x5a
 8007100:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007104:	f241 1094 	movw	r0, #4500	; 0x1194
 8007108:	f7fe fa7c 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 800710c:	4b56      	ldr	r3, [pc, #344]	; (8007268 <Lslalom_L90+0x258>)
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d104      	bne.n	8007124 <Lslalom_L90+0x114>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800711a:	2101      	movs	r1, #1
 800711c:	20ff      	movs	r0, #255	; 0xff
 800711e:	f008 fee7 	bl	800fef0 <turn_dir>
 8007122:	e003      	b.n	800712c <Lslalom_L90+0x11c>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007124:	2103      	movs	r1, #3
 8007126:	20fe      	movs	r0, #254	; 0xfe
 8007128:	f008 fee2 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_HIGH, LSLALOM_3_OFFSET_B);
 800712c:	225a      	movs	r2, #90	; 0x5a
 800712e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007132:	f242 7010 	movw	r0, #10000	; 0x2710
 8007136:	f7fe fb87 	bl	8005848 <slalomB>
}
 800713a:	e08f      	b.n	800725c <Lslalom_L90+0x24c>
	}else if(run_mode == HIGH_HIGH){
 800713c:	4b49      	ldr	r3, [pc, #292]	; (8007264 <Lslalom_L90+0x254>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b04      	cmp	r3, #4
 8007144:	d12b      	bne.n	800719e <Lslalom_L90+0x18e>
		slalomF(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_F, LSLALOM_4_WALL_FL, LSLALOM_4_WALL_FR);
 8007146:	2396      	movs	r3, #150	; 0x96
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800714e:	2232      	movs	r2, #50	; 0x32
 8007150:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007154:	f242 7010 	movw	r0, #10000	; 0x2710
 8007158:	f7fe f99e 	bl	8005498 <slalomF>
		slalomR(LSLALOM_4_DEGACCEL, LSLALOM_4_OMEGA, 85, SPEED_HIGH_HIGH);
 800715c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007160:	2255      	movs	r2, #85	; 0x55
 8007162:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007166:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800716a:	f7fe fa4b 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 800716e:	4b3e      	ldr	r3, [pc, #248]	; (8007268 <Lslalom_L90+0x258>)
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	d104      	bne.n	8007186 <Lslalom_L90+0x176>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800717c:	2101      	movs	r1, #1
 800717e:	20ff      	movs	r0, #255	; 0xff
 8007180:	f008 feb6 	bl	800fef0 <turn_dir>
 8007184:	e003      	b.n	800718e <Lslalom_L90+0x17e>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007186:	2103      	movs	r1, #3
 8007188:	20fe      	movs	r0, #254	; 0xfe
 800718a:	f008 feb1 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_B);
 800718e:	226e      	movs	r2, #110	; 0x6e
 8007190:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007194:	f242 7010 	movw	r0, #10000	; 0x2710
 8007198:	f7fe fb56 	bl	8005848 <slalomB>
}
 800719c:	e05e      	b.n	800725c <Lslalom_L90+0x24c>
	}else if(run_mode == 5){
 800719e:	4b31      	ldr	r3, [pc, #196]	; (8007264 <Lslalom_L90+0x254>)
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b05      	cmp	r3, #5
 80071a6:	d12a      	bne.n	80071fe <Lslalom_L90+0x1ee>
		slalomF(10000, SPEED_5, LSLALOM_5_OFFSET_F, LSLALOM_5_WALL_FL, LSLALOM_5_WALL_FR);
 80071a8:	2382      	movs	r3, #130	; 0x82
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	23fa      	movs	r3, #250	; 0xfa
 80071ae:	2211      	movs	r2, #17
 80071b0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80071b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80071b8:	f7fe f96e 	bl	8005498 <slalomF>
		slalomR(LSLALOM_5_DEGACCEL, LSLALOM_5_OMEGA, 80, SPEED_5);
 80071bc:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80071c0:	2250      	movs	r2, #80	; 0x50
 80071c2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80071c6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80071ca:	f7fe fa1b 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 80071ce:	4b26      	ldr	r3, [pc, #152]	; (8007268 <Lslalom_L90+0x258>)
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d104      	bne.n	80071e6 <Lslalom_L90+0x1d6>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80071dc:	2101      	movs	r1, #1
 80071de:	20ff      	movs	r0, #255	; 0xff
 80071e0:	f008 fe86 	bl	800fef0 <turn_dir>
 80071e4:	e003      	b.n	80071ee <Lslalom_L90+0x1de>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80071e6:	2103      	movs	r1, #3
 80071e8:	20fe      	movs	r0, #254	; 0xfe
 80071ea:	f008 fe81 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_5, LSLALOM_5_OFFSET_B);
 80071ee:	2278      	movs	r2, #120	; 0x78
 80071f0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80071f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80071f8:	f7fe fb26 	bl	8005848 <slalomB>
}
 80071fc:	e02e      	b.n	800725c <Lslalom_L90+0x24c>
	}else if(run_mode == 6){
 80071fe:	4b19      	ldr	r3, [pc, #100]	; (8007264 <Lslalom_L90+0x254>)
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b06      	cmp	r3, #6
 8007206:	d129      	bne.n	800725c <Lslalom_L90+0x24c>
		slalomF(10000, SPEED_6, LSLALOM_6_OFFSET_F, LSLALOM_6_WALL_FL, LSLALOM_6_WALL_FR);
 8007208:	2378      	movs	r3, #120	; 0x78
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	23f0      	movs	r3, #240	; 0xf0
 800720e:	2200      	movs	r2, #0
 8007210:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007214:	f242 7010 	movw	r0, #10000	; 0x2710
 8007218:	f7fe f93e 	bl	8005498 <slalomF>
		slalomR(LSLALOM_6_DEGACCEL, LSLALOM_6_OMEGA, 70, SPEED_6);
 800721c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007220:	2246      	movs	r2, #70	; 0x46
 8007222:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007226:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 800722a:	f7fe f9eb 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 800722e:	4b0e      	ldr	r3, [pc, #56]	; (8007268 <Lslalom_L90+0x258>)
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b00      	cmp	r3, #0
 800723a:	d104      	bne.n	8007246 <Lslalom_L90+0x236>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800723c:	2101      	movs	r1, #1
 800723e:	20ff      	movs	r0, #255	; 0xff
 8007240:	f008 fe56 	bl	800fef0 <turn_dir>
 8007244:	e003      	b.n	800724e <Lslalom_L90+0x23e>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007246:	2103      	movs	r1, #3
 8007248:	20fe      	movs	r0, #254	; 0xfe
 800724a:	f008 fe51 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_6, LSLALOM_6_OFFSET_B);
 800724e:	2278      	movs	r2, #120	; 0x78
 8007250:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007254:	f242 7010 	movw	r0, #10000	; 0x2710
 8007258:	f7fe faf6 	bl	8005848 <slalomB>
}
 800725c:	bf00      	nop
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	20000456 	.word	0x20000456
 8007268:	20000f68 	.word	0x20000f68

0800726c <Lslalom_R180>:
//Lslalom_R180
// スラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R180(void){
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af02      	add	r7, sp, #8
	full_led_write(GREEN);
 8007272:	2002      	movs	r0, #2
 8007274:	f00a fcd0 	bl	8011c18 <full_led_write>
	if(run_mode == LOW){
 8007278:	4b99      	ldr	r3, [pc, #612]	; (80074e0 <Lslalom_R180+0x274>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b01      	cmp	r3, #1
 8007280:	d12d      	bne.n	80072de <Lslalom_R180+0x72>
		slalomF(10000, SPEED_LOW, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 8007282:	2364      	movs	r3, #100	; 0x64
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	23c8      	movs	r3, #200	; 0xc8
 8007288:	223c      	movs	r2, #60	; 0x3c
 800728a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800728e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007292:	f7fe f901 	bl	8005498 <slalomF>
		slalomR(-LROTATE_DEGACCEL, -LROTATE_OMEGA, -180, SPEED_LOW);
 8007296:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800729a:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 800729e:	4991      	ldr	r1, [pc, #580]	; (80074e4 <Lslalom_R180+0x278>)
 80072a0:	4891      	ldr	r0, [pc, #580]	; (80074e8 <Lslalom_R180+0x27c>)
 80072a2:	f7fe f9af 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 80072a6:	4b91      	ldr	r3, [pc, #580]	; (80074ec <Lslalom_R180+0x280>)
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d108      	bne.n	80072c6 <Lslalom_R180+0x5a>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80072b4:	2101      	movs	r1, #1
 80072b6:	2001      	movs	r0, #1
 80072b8:	f008 fe1a 	bl	800fef0 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80072bc:	2101      	movs	r1, #1
 80072be:	2001      	movs	r0, #1
 80072c0:	f008 fe16 	bl	800fef0 <turn_dir>
 80072c4:	e003      	b.n	80072ce <Lslalom_R180+0x62>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80072c6:	2103      	movs	r1, #3
 80072c8:	2004      	movs	r0, #4
 80072ca:	f008 fe11 	bl	800fef0 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LROTATE_OFFSET_B);
 80072ce:	2250      	movs	r2, #80	; 0x50
 80072d0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80072d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80072d8:	f7fe fab6 	bl	8005848 <slalomB>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
	}
}
 80072dc:	e0fd      	b.n	80074da <Lslalom_R180+0x26e>
	}else if(run_mode == MIDDLE){
 80072de:	4b80      	ldr	r3, [pc, #512]	; (80074e0 <Lslalom_R180+0x274>)
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d12d      	bne.n	8007344 <Lslalom_R180+0xd8>
		slalomF(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_F, LROTATE_2_WALL_FL, LROTATE_2_WALL_FR);
 80072e8:	2364      	movs	r3, #100	; 0x64
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	23c8      	movs	r3, #200	; 0xc8
 80072ee:	2232      	movs	r2, #50	; 0x32
 80072f0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80072f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80072f8:	f7fe f8ce 	bl	8005498 <slalomF>
		slalomR(-LROTATE_2_DEGACCEL, -LROTATE_2_OMEGA, -180, SPEED_MIDDLE);
 80072fc:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007300:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8007304:	497a      	ldr	r1, [pc, #488]	; (80074f0 <Lslalom_R180+0x284>)
 8007306:	487b      	ldr	r0, [pc, #492]	; (80074f4 <Lslalom_R180+0x288>)
 8007308:	f7fe f97c 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 800730c:	4b77      	ldr	r3, [pc, #476]	; (80074ec <Lslalom_R180+0x280>)
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d108      	bne.n	800732c <Lslalom_R180+0xc0>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800731a:	2101      	movs	r1, #1
 800731c:	2001      	movs	r0, #1
 800731e:	f008 fde7 	bl	800fef0 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007322:	2101      	movs	r1, #1
 8007324:	2001      	movs	r0, #1
 8007326:	f008 fde3 	bl	800fef0 <turn_dir>
 800732a:	e003      	b.n	8007334 <Lslalom_R180+0xc8>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800732c:	2103      	movs	r1, #3
 800732e:	2004      	movs	r0, #4
 8007330:	f008 fdde 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_B);
 8007334:	224e      	movs	r2, #78	; 0x4e
 8007336:	f44f 7116 	mov.w	r1, #600	; 0x258
 800733a:	f242 7010 	movw	r0, #10000	; 0x2710
 800733e:	f7fe fa83 	bl	8005848 <slalomB>
}
 8007342:	e0ca      	b.n	80074da <Lslalom_R180+0x26e>
	}else if(run_mode == HIGH){
 8007344:	4b66      	ldr	r3, [pc, #408]	; (80074e0 <Lslalom_R180+0x274>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b03      	cmp	r3, #3
 800734c:	d12d      	bne.n	80073aa <Lslalom_R180+0x13e>
		slalomF(10000, SPEED_HIGH, LROTATE_3_OFFSET_F, LROTATE_3_WALL_FL, LROTATE_3_WALL_FR);
 800734e:	2364      	movs	r3, #100	; 0x64
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	23c8      	movs	r3, #200	; 0xc8
 8007354:	221c      	movs	r2, #28
 8007356:	f44f 7148 	mov.w	r1, #800	; 0x320
 800735a:	f242 7010 	movw	r0, #10000	; 0x2710
 800735e:	f7fe f89b 	bl	8005498 <slalomF>
		slalomR(-LROTATE_3_DEGACCEL, -LROTATE_3_OMEGA, -170, SPEED_HIGH);
 8007362:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007366:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 800736a:	4963      	ldr	r1, [pc, #396]	; (80074f8 <Lslalom_R180+0x28c>)
 800736c:	4861      	ldr	r0, [pc, #388]	; (80074f4 <Lslalom_R180+0x288>)
 800736e:	f7fe f949 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8007372:	4b5e      	ldr	r3, [pc, #376]	; (80074ec <Lslalom_R180+0x280>)
 8007374:	881b      	ldrh	r3, [r3, #0]
 8007376:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d108      	bne.n	8007392 <Lslalom_R180+0x126>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007380:	2101      	movs	r1, #1
 8007382:	2001      	movs	r0, #1
 8007384:	f008 fdb4 	bl	800fef0 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007388:	2101      	movs	r1, #1
 800738a:	2001      	movs	r0, #1
 800738c:	f008 fdb0 	bl	800fef0 <turn_dir>
 8007390:	e003      	b.n	800739a <Lslalom_R180+0x12e>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007392:	2103      	movs	r1, #3
 8007394:	2004      	movs	r0, #4
 8007396:	f008 fdab 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_HIGH, LROTATE_3_OFFSET_B);
 800739a:	225f      	movs	r2, #95	; 0x5f
 800739c:	f44f 7148 	mov.w	r1, #800	; 0x320
 80073a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80073a4:	f7fe fa50 	bl	8005848 <slalomB>
}
 80073a8:	e097      	b.n	80074da <Lslalom_R180+0x26e>
	}else if(run_mode == HIGH_HIGH){
 80073aa:	4b4d      	ldr	r3, [pc, #308]	; (80074e0 <Lslalom_R180+0x274>)
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	d12d      	bne.n	8007410 <Lslalom_R180+0x1a4>
		slalomF(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_F, LROTATE_4_WALL_FL, LROTATE_4_WALL_FR);
 80073b4:	236e      	movs	r3, #110	; 0x6e
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	23dc      	movs	r3, #220	; 0xdc
 80073ba:	2232      	movs	r2, #50	; 0x32
 80073bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80073c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80073c4:	f7fe f868 	bl	8005498 <slalomF>
		slalomR(-LROTATE_4_DEGACCEL, -LROTATE_4_OMEGA, -170, SPEED_HIGH_HIGH);
 80073c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80073cc:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 80073d0:	494a      	ldr	r1, [pc, #296]	; (80074fc <Lslalom_R180+0x290>)
 80073d2:	484b      	ldr	r0, [pc, #300]	; (8007500 <Lslalom_R180+0x294>)
 80073d4:	f7fe f916 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 80073d8:	4b44      	ldr	r3, [pc, #272]	; (80074ec <Lslalom_R180+0x280>)
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d108      	bne.n	80073f8 <Lslalom_R180+0x18c>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80073e6:	2101      	movs	r1, #1
 80073e8:	2001      	movs	r0, #1
 80073ea:	f008 fd81 	bl	800fef0 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80073ee:	2101      	movs	r1, #1
 80073f0:	2001      	movs	r0, #1
 80073f2:	f008 fd7d 	bl	800fef0 <turn_dir>
 80073f6:	e003      	b.n	8007400 <Lslalom_R180+0x194>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80073f8:	2103      	movs	r1, #3
 80073fa:	2004      	movs	r0, #4
 80073fc:	f008 fd78 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_B);
 8007400:	2282      	movs	r2, #130	; 0x82
 8007402:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007406:	f242 7010 	movw	r0, #10000	; 0x2710
 800740a:	f7fe fa1d 	bl	8005848 <slalomB>
}
 800740e:	e064      	b.n	80074da <Lslalom_R180+0x26e>
	}else if(run_mode == 5){
 8007410:	4b33      	ldr	r3, [pc, #204]	; (80074e0 <Lslalom_R180+0x274>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b05      	cmp	r3, #5
 8007418:	d12d      	bne.n	8007476 <Lslalom_R180+0x20a>
		slalomF(10000, SPEED_5, LROTATE_5_OFFSET_F, LROTATE_5_WALL_FL, LROTATE_5_WALL_FR);
 800741a:	236e      	movs	r3, #110	; 0x6e
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	23dc      	movs	r3, #220	; 0xdc
 8007420:	221e      	movs	r2, #30
 8007422:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007426:	f242 7010 	movw	r0, #10000	; 0x2710
 800742a:	f7fe f835 	bl	8005498 <slalomF>
		slalomR(-LROTATE_5_DEGACCEL, -LROTATE_5_OMEGA, -170, SPEED_5);
 800742e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007432:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 8007436:	4933      	ldr	r1, [pc, #204]	; (8007504 <Lslalom_R180+0x298>)
 8007438:	4831      	ldr	r0, [pc, #196]	; (8007500 <Lslalom_R180+0x294>)
 800743a:	f7fe f8e3 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 800743e:	4b2b      	ldr	r3, [pc, #172]	; (80074ec <Lslalom_R180+0x280>)
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	d108      	bne.n	800745e <Lslalom_R180+0x1f2>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800744c:	2101      	movs	r1, #1
 800744e:	2001      	movs	r0, #1
 8007450:	f008 fd4e 	bl	800fef0 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007454:	2101      	movs	r1, #1
 8007456:	2001      	movs	r0, #1
 8007458:	f008 fd4a 	bl	800fef0 <turn_dir>
 800745c:	e003      	b.n	8007466 <Lslalom_R180+0x1fa>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800745e:	2103      	movs	r1, #3
 8007460:	2004      	movs	r0, #4
 8007462:	f008 fd45 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_5, LROTATE_5_OFFSET_B);
 8007466:	229b      	movs	r2, #155	; 0x9b
 8007468:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800746c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007470:	f7fe f9ea 	bl	8005848 <slalomB>
}
 8007474:	e031      	b.n	80074da <Lslalom_R180+0x26e>
	}else if(run_mode == 6){
 8007476:	4b1a      	ldr	r3, [pc, #104]	; (80074e0 <Lslalom_R180+0x274>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b06      	cmp	r3, #6
 800747e:	d12c      	bne.n	80074da <Lslalom_R180+0x26e>
		slalomF(10000, SPEED_6, LROTATE_6_OFFSET_F, LROTATE_6_WALL_FL, LROTATE_6_WALL_FR);
 8007480:	235a      	movs	r3, #90	; 0x5a
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	23b4      	movs	r3, #180	; 0xb4
 8007486:	221e      	movs	r2, #30
 8007488:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800748c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007490:	f7fe f802 	bl	8005498 <slalomF>
		slalomR(-LROTATE_6_DEGACCEL, -LROTATE_6_OMEGA, -160, SPEED_6);
 8007494:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007498:	f06f 029f 	mvn.w	r2, #159	; 0x9f
 800749c:	491a      	ldr	r1, [pc, #104]	; (8007508 <Lslalom_R180+0x29c>)
 800749e:	481b      	ldr	r0, [pc, #108]	; (800750c <Lslalom_R180+0x2a0>)
 80074a0:	f7fe f8b0 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 80074a4:	4b11      	ldr	r3, [pc, #68]	; (80074ec <Lslalom_R180+0x280>)
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d108      	bne.n	80074c4 <Lslalom_R180+0x258>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80074b2:	2101      	movs	r1, #1
 80074b4:	2001      	movs	r0, #1
 80074b6:	f008 fd1b 	bl	800fef0 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80074ba:	2101      	movs	r1, #1
 80074bc:	2001      	movs	r0, #1
 80074be:	f008 fd17 	bl	800fef0 <turn_dir>
 80074c2:	e003      	b.n	80074cc <Lslalom_R180+0x260>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80074c4:	2103      	movs	r1, #3
 80074c6:	2004      	movs	r0, #4
 80074c8:	f008 fd12 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
 80074cc:	229b      	movs	r2, #155	; 0x9b
 80074ce:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80074d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80074d6:	f7fe f9b7 	bl	8005848 <slalomB>
}
 80074da:	bf00      	nop
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20000456 	.word	0x20000456
 80074e4:	fffffefc 	.word	0xfffffefc
 80074e8:	fffff830 	.word	0xfffff830
 80074ec:	20000f68 	.word	0x20000f68
 80074f0:	fffffe74 	.word	0xfffffe74
 80074f4:	fffff448 	.word	0xfffff448
 80074f8:	fffffdc6 	.word	0xfffffdc6
 80074fc:	fffffd94 	.word	0xfffffd94
 8007500:	ffffe0c0 	.word	0xffffe0c0
 8007504:	fffffd08 	.word	0xfffffd08
 8007508:	fffffb50 	.word	0xfffffb50
 800750c:	ffff8ad0 	.word	0xffff8ad0

08007510 <Lslalom_L180>:
//Lslalom_L180
// 大回りスラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L180(void){
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af02      	add	r7, sp, #8
	full_led_write(GREEN);
 8007516:	2002      	movs	r0, #2
 8007518:	f00a fb7e 	bl	8011c18 <full_led_write>
	if(run_mode == LOW){
 800751c:	4b9c      	ldr	r3, [pc, #624]	; (8007790 <Lslalom_L180+0x280>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b01      	cmp	r3, #1
 8007524:	d12e      	bne.n	8007584 <Lslalom_L180+0x74>
		slalomF(10000, SPEED_LOW, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 8007526:	2364      	movs	r3, #100	; 0x64
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	23c8      	movs	r3, #200	; 0xc8
 800752c:	223c      	movs	r2, #60	; 0x3c
 800752e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007532:	f242 7010 	movw	r0, #10000	; 0x2710
 8007536:	f7fd ffaf 	bl	8005498 <slalomF>
		slalomR(LROTATE_DEGACCEL, LROTATE_OMEGA, 180, SPEED_LOW);
 800753a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800753e:	22b4      	movs	r2, #180	; 0xb4
 8007540:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007544:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007548:	f7fe f85c 	bl	8005604 <slalomR>

		if(!MF.FLAG.XDIR){
 800754c:	4b91      	ldr	r3, [pc, #580]	; (8007794 <Lslalom_L180+0x284>)
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d108      	bne.n	800756c <Lslalom_L180+0x5c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800755a:	2101      	movs	r1, #1
 800755c:	20ff      	movs	r0, #255	; 0xff
 800755e:	f008 fcc7 	bl	800fef0 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007562:	2101      	movs	r1, #1
 8007564:	20ff      	movs	r0, #255	; 0xff
 8007566:	f008 fcc3 	bl	800fef0 <turn_dir>
 800756a:	e003      	b.n	8007574 <Lslalom_L180+0x64>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800756c:	2103      	movs	r1, #3
 800756e:	20fc      	movs	r0, #252	; 0xfc
 8007570:	f008 fcbe 	bl	800fef0 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LROTATE_OFFSET_B);
 8007574:	2250      	movs	r2, #80	; 0x50
 8007576:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800757a:	f242 7010 	movw	r0, #10000	; 0x2710
 800757e:	f7fe f963 	bl	8005848 <slalomB>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
	}
}
 8007582:	e102      	b.n	800778a <Lslalom_L180+0x27a>
	}else if(run_mode == MIDDLE){
 8007584:	4b82      	ldr	r3, [pc, #520]	; (8007790 <Lslalom_L180+0x280>)
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d12e      	bne.n	80075ec <Lslalom_L180+0xdc>
		slalomF(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_F, LROTATE_2_WALL_FL, LROTATE_2_WALL_FR);
 800758e:	2364      	movs	r3, #100	; 0x64
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	23c8      	movs	r3, #200	; 0xc8
 8007594:	2232      	movs	r2, #50	; 0x32
 8007596:	f44f 7116 	mov.w	r1, #600	; 0x258
 800759a:	f242 7010 	movw	r0, #10000	; 0x2710
 800759e:	f7fd ff7b 	bl	8005498 <slalomF>
		slalomR(LROTATE_2_DEGACCEL, LROTATE_2_OMEGA, 180, SPEED_MIDDLE);
 80075a2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80075a6:	22b4      	movs	r2, #180	; 0xb4
 80075a8:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80075ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80075b0:	f7fe f828 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 80075b4:	4b77      	ldr	r3, [pc, #476]	; (8007794 <Lslalom_L180+0x284>)
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d108      	bne.n	80075d4 <Lslalom_L180+0xc4>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80075c2:	2101      	movs	r1, #1
 80075c4:	20ff      	movs	r0, #255	; 0xff
 80075c6:	f008 fc93 	bl	800fef0 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80075ca:	2101      	movs	r1, #1
 80075cc:	20ff      	movs	r0, #255	; 0xff
 80075ce:	f008 fc8f 	bl	800fef0 <turn_dir>
 80075d2:	e003      	b.n	80075dc <Lslalom_L180+0xcc>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80075d4:	2103      	movs	r1, #3
 80075d6:	20fc      	movs	r0, #252	; 0xfc
 80075d8:	f008 fc8a 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_B);
 80075dc:	224e      	movs	r2, #78	; 0x4e
 80075de:	f44f 7116 	mov.w	r1, #600	; 0x258
 80075e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80075e6:	f7fe f92f 	bl	8005848 <slalomB>
}
 80075ea:	e0ce      	b.n	800778a <Lslalom_L180+0x27a>
	}else if(run_mode == HIGH){
 80075ec:	4b68      	ldr	r3, [pc, #416]	; (8007790 <Lslalom_L180+0x280>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	d12e      	bne.n	8007654 <Lslalom_L180+0x144>
		slalomF(10000, SPEED_HIGH, LROTATE_3_OFFSET_F, LROTATE_3_WALL_FL, LROTATE_3_WALL_FR);
 80075f6:	2364      	movs	r3, #100	; 0x64
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	23c8      	movs	r3, #200	; 0xc8
 80075fc:	221c      	movs	r2, #28
 80075fe:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007602:	f242 7010 	movw	r0, #10000	; 0x2710
 8007606:	f7fd ff47 	bl	8005498 <slalomF>
		slalomR(LROTATE_3_DEGACCEL, LROTATE_3_OMEGA, 170, SPEED_HIGH);
 800760a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800760e:	22aa      	movs	r2, #170	; 0xaa
 8007610:	f240 213a 	movw	r1, #570	; 0x23a
 8007614:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007618:	f7fd fff4 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 800761c:	4b5d      	ldr	r3, [pc, #372]	; (8007794 <Lslalom_L180+0x284>)
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d108      	bne.n	800763c <Lslalom_L180+0x12c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800762a:	2101      	movs	r1, #1
 800762c:	20ff      	movs	r0, #255	; 0xff
 800762e:	f008 fc5f 	bl	800fef0 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007632:	2101      	movs	r1, #1
 8007634:	20ff      	movs	r0, #255	; 0xff
 8007636:	f008 fc5b 	bl	800fef0 <turn_dir>
 800763a:	e003      	b.n	8007644 <Lslalom_L180+0x134>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800763c:	2103      	movs	r1, #3
 800763e:	20fc      	movs	r0, #252	; 0xfc
 8007640:	f008 fc56 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_HIGH, LROTATE_3_OFFSET_B);
 8007644:	225f      	movs	r2, #95	; 0x5f
 8007646:	f44f 7148 	mov.w	r1, #800	; 0x320
 800764a:	f242 7010 	movw	r0, #10000	; 0x2710
 800764e:	f7fe f8fb 	bl	8005848 <slalomB>
}
 8007652:	e09a      	b.n	800778a <Lslalom_L180+0x27a>
	}else if(run_mode == HIGH_HIGH){
 8007654:	4b4e      	ldr	r3, [pc, #312]	; (8007790 <Lslalom_L180+0x280>)
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b04      	cmp	r3, #4
 800765c:	d12e      	bne.n	80076bc <Lslalom_L180+0x1ac>
		slalomF(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_F, LROTATE_4_WALL_FL, LROTATE_4_WALL_FR);
 800765e:	236e      	movs	r3, #110	; 0x6e
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	23dc      	movs	r3, #220	; 0xdc
 8007664:	2232      	movs	r2, #50	; 0x32
 8007666:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800766a:	f242 7010 	movw	r0, #10000	; 0x2710
 800766e:	f7fd ff13 	bl	8005498 <slalomF>
		slalomR(LROTATE_4_DEGACCEL, LROTATE_4_OMEGA, 170, SPEED_HIGH_HIGH);
 8007672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007676:	22aa      	movs	r2, #170	; 0xaa
 8007678:	f44f 711b 	mov.w	r1, #620	; 0x26c
 800767c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007680:	f7fd ffc0 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8007684:	4b43      	ldr	r3, [pc, #268]	; (8007794 <Lslalom_L180+0x284>)
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d108      	bne.n	80076a4 <Lslalom_L180+0x194>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007692:	2101      	movs	r1, #1
 8007694:	20ff      	movs	r0, #255	; 0xff
 8007696:	f008 fc2b 	bl	800fef0 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800769a:	2101      	movs	r1, #1
 800769c:	20ff      	movs	r0, #255	; 0xff
 800769e:	f008 fc27 	bl	800fef0 <turn_dir>
 80076a2:	e003      	b.n	80076ac <Lslalom_L180+0x19c>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80076a4:	2103      	movs	r1, #3
 80076a6:	20fc      	movs	r0, #252	; 0xfc
 80076a8:	f008 fc22 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_B);
 80076ac:	2282      	movs	r2, #130	; 0x82
 80076ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80076b2:	f242 7010 	movw	r0, #10000	; 0x2710
 80076b6:	f7fe f8c7 	bl	8005848 <slalomB>
}
 80076ba:	e066      	b.n	800778a <Lslalom_L180+0x27a>
	}else if(run_mode == 5){
 80076bc:	4b34      	ldr	r3, [pc, #208]	; (8007790 <Lslalom_L180+0x280>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b05      	cmp	r3, #5
 80076c4:	d12e      	bne.n	8007724 <Lslalom_L180+0x214>
		slalomF(10000, SPEED_5, LROTATE_5_OFFSET_F, LROTATE_5_WALL_FL, LROTATE_5_WALL_FR);
 80076c6:	236e      	movs	r3, #110	; 0x6e
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	23dc      	movs	r3, #220	; 0xdc
 80076cc:	221e      	movs	r2, #30
 80076ce:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80076d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80076d6:	f7fd fedf 	bl	8005498 <slalomF>
		slalomR(LROTATE_5_DEGACCEL, LROTATE_5_OMEGA, 170, SPEED_5);
 80076da:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80076de:	22aa      	movs	r2, #170	; 0xaa
 80076e0:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 80076e4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80076e8:	f7fd ff8c 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 80076ec:	4b29      	ldr	r3, [pc, #164]	; (8007794 <Lslalom_L180+0x284>)
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d108      	bne.n	800770c <Lslalom_L180+0x1fc>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80076fa:	2101      	movs	r1, #1
 80076fc:	20ff      	movs	r0, #255	; 0xff
 80076fe:	f008 fbf7 	bl	800fef0 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007702:	2101      	movs	r1, #1
 8007704:	20ff      	movs	r0, #255	; 0xff
 8007706:	f008 fbf3 	bl	800fef0 <turn_dir>
 800770a:	e003      	b.n	8007714 <Lslalom_L180+0x204>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800770c:	2103      	movs	r1, #3
 800770e:	20fc      	movs	r0, #252	; 0xfc
 8007710:	f008 fbee 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_5, LROTATE_5_OFFSET_B);
 8007714:	229b      	movs	r2, #155	; 0x9b
 8007716:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800771a:	f242 7010 	movw	r0, #10000	; 0x2710
 800771e:	f7fe f893 	bl	8005848 <slalomB>
}
 8007722:	e032      	b.n	800778a <Lslalom_L180+0x27a>
	}else if(run_mode == 6){
 8007724:	4b1a      	ldr	r3, [pc, #104]	; (8007790 <Lslalom_L180+0x280>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b06      	cmp	r3, #6
 800772c:	d12d      	bne.n	800778a <Lslalom_L180+0x27a>
		slalomF(10000, SPEED_6, LROTATE_6_OFFSET_F, LROTATE_6_WALL_FL, LROTATE_6_WALL_FR);
 800772e:	235a      	movs	r3, #90	; 0x5a
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	23b4      	movs	r3, #180	; 0xb4
 8007734:	221e      	movs	r2, #30
 8007736:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800773a:	f242 7010 	movw	r0, #10000	; 0x2710
 800773e:	f7fd feab 	bl	8005498 <slalomF>
		slalomR(LROTATE_6_DEGACCEL, LROTATE_6_OMEGA, 160, SPEED_6);
 8007742:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007746:	22a0      	movs	r2, #160	; 0xa0
 8007748:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800774c:	f247 5030 	movw	r0, #30000	; 0x7530
 8007750:	f7fd ff58 	bl	8005604 <slalomR>
		if(!MF.FLAG.XDIR){
 8007754:	4b0f      	ldr	r3, [pc, #60]	; (8007794 <Lslalom_L180+0x284>)
 8007756:	881b      	ldrh	r3, [r3, #0]
 8007758:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d108      	bne.n	8007774 <Lslalom_L180+0x264>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007762:	2101      	movs	r1, #1
 8007764:	20ff      	movs	r0, #255	; 0xff
 8007766:	f008 fbc3 	bl	800fef0 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800776a:	2101      	movs	r1, #1
 800776c:	20ff      	movs	r0, #255	; 0xff
 800776e:	f008 fbbf 	bl	800fef0 <turn_dir>
 8007772:	e003      	b.n	800777c <Lslalom_L180+0x26c>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007774:	2103      	movs	r1, #3
 8007776:	20fc      	movs	r0, #252	; 0xfc
 8007778:	f008 fbba 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_6, LROTATE_6_OFFSET_B);
 800777c:	229b      	movs	r2, #155	; 0x9b
 800777e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007782:	f242 7010 	movw	r0, #10000	; 0x2710
 8007786:	f7fe f85f 	bl	8005848 <slalomB>
}
 800778a:	bf00      	nop
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	20000456 	.word	0x20000456
 8007794:	20000f68 	.word	0x20000f68

08007798 <v_R45>:
//v_R45
// 区画中心から右に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45(void){
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 800779e:	2005      	movs	r0, #5
 80077a0:	f00a fa3a 	bl	8011c18 <full_led_write>
	if(run_mode == LOW){
 80077a4:	4bc2      	ldr	r3, [pc, #776]	; (8007ab0 <v_R45+0x318>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d155      	bne.n	800785a <v_R45+0xc2>
		if(!MF2.FLAG.V){
 80077ae:	4bc1      	ldr	r3, [pc, #772]	; (8007ab4 <v_R45+0x31c>)
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10c      	bne.n	80077d6 <v_R45+0x3e>
			slalomF(10000, SPEED_LOW, V45_OFFSET_F, NO_WALL, NO_WALL);
 80077bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80077c6:	2228      	movs	r2, #40	; 0x28
 80077c8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80077cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80077d0:	f7fd fe62 	bl	8005498 <slalomF>
 80077d4:	e00b      	b.n	80077ee <v_R45+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 80077d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80077e0:	2255      	movs	r2, #85	; 0x55
 80077e2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80077e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80077ea:	f7fd fe55 	bl	8005498 <slalomF>
		}
		slalomR(-V45_DEGACCEL, -V45_OMEGA, -45, SPEED_LOW);
 80077ee:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80077f2:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80077f6:	49b0      	ldr	r1, [pc, #704]	; (8007ab8 <v_R45+0x320>)
 80077f8:	48b0      	ldr	r0, [pc, #704]	; (8007abc <v_R45+0x324>)
 80077fa:	f7fd ff03 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80077fe:	2103      	movs	r1, #3
 8007800:	2001      	movs	r0, #1
 8007802:	f008 fb75 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007806:	4bab      	ldr	r3, [pc, #684]	; (8007ab4 <v_R45+0x31c>)
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800780e:	b2db      	uxtb	r3, r3
 8007810:	3301      	adds	r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	bfb8      	it	lt
 800781a:	425b      	neglt	r3, r3
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	b2d9      	uxtb	r1, r3
 8007822:	4aa4      	ldr	r2, [pc, #656]	; (8007ab4 <v_R45+0x31c>)
 8007824:	8813      	ldrh	r3, [r2, #0]
 8007826:	f361 03c3 	bfi	r3, r1, #3, #1
 800782a:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 800782c:	4ba1      	ldr	r3, [pc, #644]	; (8007ab4 <v_R45+0x31c>)
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d107      	bne.n	800784a <v_R45+0xb2>
			slalomB(10000, SPEED_LOW, V45_OFFSET_VB);
 800783a:	2228      	movs	r2, #40	; 0x28
 800783c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007840:	f242 7010 	movw	r0, #10000	; 0x2710
 8007844:	f7fe f800 	bl	8005848 <slalomB>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
		}
	}
}
 8007848:	e183      	b.n	8007b52 <v_R45+0x3ba>
			slalomB(10000, SPEED_LOW, V45_OFFSET_B);
 800784a:	2255      	movs	r2, #85	; 0x55
 800784c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007850:	f242 7010 	movw	r0, #10000	; 0x2710
 8007854:	f7fd fff8 	bl	8005848 <slalomB>
}
 8007858:	e17b      	b.n	8007b52 <v_R45+0x3ba>
	}else if(run_mode == MIDDLE){
 800785a:	4b95      	ldr	r3, [pc, #596]	; (8007ab0 <v_R45+0x318>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b02      	cmp	r3, #2
 8007862:	d155      	bne.n	8007910 <v_R45+0x178>
		if(!MF2.FLAG.V){
 8007864:	4b93      	ldr	r3, [pc, #588]	; (8007ab4 <v_R45+0x31c>)
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10c      	bne.n	800788c <v_R45+0xf4>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_F, NO_WALL, NO_WALL);
 8007872:	f241 3388 	movw	r3, #5000	; 0x1388
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	f241 3388 	movw	r3, #5000	; 0x1388
 800787c:	2228      	movs	r2, #40	; 0x28
 800787e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007882:	f242 7010 	movw	r0, #10000	; 0x2710
 8007886:	f7fd fe07 	bl	8005498 <slalomF>
 800788a:	e00b      	b.n	80078a4 <v_R45+0x10c>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 800788c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	f241 3388 	movw	r3, #5000	; 0x1388
 8007896:	2249      	movs	r2, #73	; 0x49
 8007898:	f44f 7116 	mov.w	r1, #600	; 0x258
 800789c:	f242 7010 	movw	r0, #10000	; 0x2710
 80078a0:	f7fd fdfa 	bl	8005498 <slalomF>
		slalomR(-V45_2_DEGACCEL, -V45_2_OMEGA, -45, SPEED_MIDDLE);
 80078a4:	f44f 7316 	mov.w	r3, #600	; 0x258
 80078a8:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80078ac:	4984      	ldr	r1, [pc, #528]	; (8007ac0 <v_R45+0x328>)
 80078ae:	4885      	ldr	r0, [pc, #532]	; (8007ac4 <v_R45+0x32c>)
 80078b0:	f7fd fea8 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80078b4:	2103      	movs	r1, #3
 80078b6:	2001      	movs	r0, #1
 80078b8:	f008 fb1a 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80078bc:	4b7d      	ldr	r3, [pc, #500]	; (8007ab4 <v_R45+0x31c>)
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	3301      	adds	r3, #1
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	bfb8      	it	lt
 80078d0:	425b      	neglt	r3, r3
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	b2d9      	uxtb	r1, r3
 80078d8:	4a76      	ldr	r2, [pc, #472]	; (8007ab4 <v_R45+0x31c>)
 80078da:	8813      	ldrh	r3, [r2, #0]
 80078dc:	f361 03c3 	bfi	r3, r1, #3, #1
 80078e0:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80078e2:	4b74      	ldr	r3, [pc, #464]	; (8007ab4 <v_R45+0x31c>)
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d107      	bne.n	8007900 <v_R45+0x168>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB);
 80078f0:	2237      	movs	r2, #55	; 0x37
 80078f2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80078f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80078fa:	f7fd ffa5 	bl	8005848 <slalomB>
}
 80078fe:	e128      	b.n	8007b52 <v_R45+0x3ba>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_B);
 8007900:	225d      	movs	r2, #93	; 0x5d
 8007902:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007906:	f242 7010 	movw	r0, #10000	; 0x2710
 800790a:	f7fd ff9d 	bl	8005848 <slalomB>
}
 800790e:	e120      	b.n	8007b52 <v_R45+0x3ba>
	}else if(run_mode == HIGH){
 8007910:	4b67      	ldr	r3, [pc, #412]	; (8007ab0 <v_R45+0x318>)
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b03      	cmp	r3, #3
 8007918:	d155      	bne.n	80079c6 <v_R45+0x22e>
		if(!MF2.FLAG.V){
 800791a:	4b66      	ldr	r3, [pc, #408]	; (8007ab4 <v_R45+0x31c>)
 800791c:	881b      	ldrh	r3, [r3, #0]
 800791e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10c      	bne.n	8007942 <v_R45+0x1aa>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_F, NO_WALL, NO_WALL);
 8007928:	f241 3388 	movw	r3, #5000	; 0x1388
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007932:	2217      	movs	r2, #23
 8007934:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007938:	f242 7010 	movw	r0, #10000	; 0x2710
 800793c:	f7fd fdac 	bl	8005498 <slalomF>
 8007940:	e00b      	b.n	800795a <v_R45+0x1c2>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 8007942:	f241 3388 	movw	r3, #5000	; 0x1388
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	f241 3388 	movw	r3, #5000	; 0x1388
 800794c:	2237      	movs	r2, #55	; 0x37
 800794e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007952:	f242 7010 	movw	r0, #10000	; 0x2710
 8007956:	f7fd fd9f 	bl	8005498 <slalomF>
		slalomR(-V45_3_DEGACCEL, -V45_3_OMEGA, -45, SPEED_HIGH);
 800795a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800795e:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007962:	4957      	ldr	r1, [pc, #348]	; (8007ac0 <v_R45+0x328>)
 8007964:	4857      	ldr	r0, [pc, #348]	; (8007ac4 <v_R45+0x32c>)
 8007966:	f7fd fe4d 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800796a:	2103      	movs	r1, #3
 800796c:	2001      	movs	r0, #1
 800796e:	f008 fabf 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007972:	4b50      	ldr	r3, [pc, #320]	; (8007ab4 <v_R45+0x31c>)
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800797a:	b2db      	uxtb	r3, r3
 800797c:	3301      	adds	r3, #1
 800797e:	2b00      	cmp	r3, #0
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	bfb8      	it	lt
 8007986:	425b      	neglt	r3, r3
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	b2d9      	uxtb	r1, r3
 800798e:	4a49      	ldr	r2, [pc, #292]	; (8007ab4 <v_R45+0x31c>)
 8007990:	8813      	ldrh	r3, [r2, #0]
 8007992:	f361 03c3 	bfi	r3, r1, #3, #1
 8007996:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007998:	4b46      	ldr	r3, [pc, #280]	; (8007ab4 <v_R45+0x31c>)
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d107      	bne.n	80079b6 <v_R45+0x21e>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB);
 80079a6:	2233      	movs	r2, #51	; 0x33
 80079a8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80079ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80079b0:	f7fd ff4a 	bl	8005848 <slalomB>
}
 80079b4:	e0cd      	b.n	8007b52 <v_R45+0x3ba>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_B);
 80079b6:	224b      	movs	r2, #75	; 0x4b
 80079b8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80079bc:	f242 7010 	movw	r0, #10000	; 0x2710
 80079c0:	f7fd ff42 	bl	8005848 <slalomB>
}
 80079c4:	e0c5      	b.n	8007b52 <v_R45+0x3ba>
	}else if(run_mode == HIGH_HIGH){
 80079c6:	4b3a      	ldr	r3, [pc, #232]	; (8007ab0 <v_R45+0x318>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	d155      	bne.n	8007a7c <v_R45+0x2e4>
		if(!MF2.FLAG.V){
 80079d0:	4b38      	ldr	r3, [pc, #224]	; (8007ab4 <v_R45+0x31c>)
 80079d2:	881b      	ldrh	r3, [r3, #0]
 80079d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10c      	bne.n	80079f8 <v_R45+0x260>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_F, NO_WALL, NO_WALL);
 80079de:	f241 3388 	movw	r3, #5000	; 0x1388
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80079e8:	2214      	movs	r2, #20
 80079ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80079ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80079f2:	f7fd fd51 	bl	8005498 <slalomF>
 80079f6:	e00b      	b.n	8007a10 <v_R45+0x278>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 80079f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a02:	2214      	movs	r2, #20
 8007a04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007a08:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a0c:	f7fd fd44 	bl	8005498 <slalomF>
		slalomR(-V45_4_DEGACCEL, -V45_4_OMEGA, -45, SPEED_HIGH_HIGH);
 8007a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a14:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007a18:	492b      	ldr	r1, [pc, #172]	; (8007ac8 <v_R45+0x330>)
 8007a1a:	482c      	ldr	r0, [pc, #176]	; (8007acc <v_R45+0x334>)
 8007a1c:	f7fd fdf2 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007a20:	2103      	movs	r1, #3
 8007a22:	2001      	movs	r0, #1
 8007a24:	f008 fa64 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007a28:	4b22      	ldr	r3, [pc, #136]	; (8007ab4 <v_R45+0x31c>)
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	3301      	adds	r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	bfb8      	it	lt
 8007a3c:	425b      	neglt	r3, r3
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	b2d9      	uxtb	r1, r3
 8007a44:	4a1b      	ldr	r2, [pc, #108]	; (8007ab4 <v_R45+0x31c>)
 8007a46:	8813      	ldrh	r3, [r2, #0]
 8007a48:	f361 03c3 	bfi	r3, r1, #3, #1
 8007a4c:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007a4e:	4b19      	ldr	r3, [pc, #100]	; (8007ab4 <v_R45+0x31c>)
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d107      	bne.n	8007a6c <v_R45+0x2d4>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB);
 8007a5c:	223a      	movs	r2, #58	; 0x3a
 8007a5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007a62:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a66:	f7fd feef 	bl	8005848 <slalomB>
}
 8007a6a:	e072      	b.n	8007b52 <v_R45+0x3ba>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_B);
 8007a6c:	223a      	movs	r2, #58	; 0x3a
 8007a6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007a72:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a76:	f7fd fee7 	bl	8005848 <slalomB>
}
 8007a7a:	e06a      	b.n	8007b52 <v_R45+0x3ba>
	}else if(run_mode == 5){
 8007a7c:	4b0c      	ldr	r3, [pc, #48]	; (8007ab0 <v_R45+0x318>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b05      	cmp	r3, #5
 8007a84:	d165      	bne.n	8007b52 <v_R45+0x3ba>
		if(!MF2.FLAG.V){
 8007a86:	4b0b      	ldr	r3, [pc, #44]	; (8007ab4 <v_R45+0x31c>)
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d11d      	bne.n	8007ad0 <v_R45+0x338>
			slalomF(10000, SPEED_5, V45_5_OFFSET_F, NO_WALL, NO_WALL);
 8007a94:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a9e:	2218      	movs	r2, #24
 8007aa0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007aa4:	f242 7010 	movw	r0, #10000	; 0x2710
 8007aa8:	f7fd fcf6 	bl	8005498 <slalomF>
 8007aac:	e01c      	b.n	8007ae8 <v_R45+0x350>
 8007aae:	bf00      	nop
 8007ab0:	20000456 	.word	0x20000456
 8007ab4:	20000f64 	.word	0x20000f64
 8007ab8:	fffffed4 	.word	0xfffffed4
 8007abc:	fffff448 	.word	0xfffff448
 8007ac0:	fffffe70 	.word	0xfffffe70
 8007ac4:	ffffe0c0 	.word	0xffffe0c0
 8007ac8:	fffffda8 	.word	0xfffffda8
 8007acc:	ffffd8f0 	.word	0xffffd8f0
			slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8007ad0:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ada:	2214      	movs	r2, #20
 8007adc:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007ae0:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ae4:	f7fd fcd8 	bl	8005498 <slalomF>
		slalomR(-V45_5_DEGACCEL, -V45_5_OMEGA, -45, SPEED_5);
 8007ae8:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007aec:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007af0:	4919      	ldr	r1, [pc, #100]	; (8007b58 <v_R45+0x3c0>)
 8007af2:	481a      	ldr	r0, [pc, #104]	; (8007b5c <v_R45+0x3c4>)
 8007af4:	f7fd fd86 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007af8:	2103      	movs	r1, #3
 8007afa:	2001      	movs	r0, #1
 8007afc:	f008 f9f8 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007b00:	4b17      	ldr	r3, [pc, #92]	; (8007b60 <v_R45+0x3c8>)
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	bfb8      	it	lt
 8007b14:	425b      	neglt	r3, r3
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	b2d9      	uxtb	r1, r3
 8007b1c:	4a10      	ldr	r2, [pc, #64]	; (8007b60 <v_R45+0x3c8>)
 8007b1e:	8813      	ldrh	r3, [r2, #0]
 8007b20:	f361 03c3 	bfi	r3, r1, #3, #1
 8007b24:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007b26:	4b0e      	ldr	r3, [pc, #56]	; (8007b60 <v_R45+0x3c8>)
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d107      	bne.n	8007b44 <v_R45+0x3ac>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
 8007b34:	223a      	movs	r2, #58	; 0x3a
 8007b36:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007b3a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b3e:	f7fd fe83 	bl	8005848 <slalomB>
}
 8007b42:	e006      	b.n	8007b52 <v_R45+0x3ba>
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
 8007b44:	223d      	movs	r2, #61	; 0x3d
 8007b46:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007b4a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b4e:	f7fd fe7b 	bl	8005848 <slalomB>
}
 8007b52:	bf00      	nop
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	fffffce0 	.word	0xfffffce0
 8007b5c:	ffffc180 	.word	0xffffc180
 8007b60:	20000f64 	.word	0x20000f64

08007b64 <v_L45>:
//v_L45
// 区画中心から左に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45(void){
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8007b6a:	2006      	movs	r0, #6
 8007b6c:	f00a f854 	bl	8011c18 <full_led_write>
	if(run_mode == LOW){
 8007b70:	4bc4      	ldr	r3, [pc, #784]	; (8007e84 <v_L45+0x320>)
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d156      	bne.n	8007c28 <v_L45+0xc4>
		if(!MF2.FLAG.V){
 8007b7a:	4bc3      	ldr	r3, [pc, #780]	; (8007e88 <v_L45+0x324>)
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10c      	bne.n	8007ba2 <v_L45+0x3e>
			slalomF(10000, SPEED_LOW, V45_OFFSET_F, NO_WALL, NO_WALL);
 8007b88:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b92:	2228      	movs	r2, #40	; 0x28
 8007b94:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007b98:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b9c:	f7fd fc7c 	bl	8005498 <slalomF>
 8007ba0:	e00b      	b.n	8007bba <v_L45+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 8007ba2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bac:	2255      	movs	r2, #85	; 0x55
 8007bae:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007bb2:	f242 7010 	movw	r0, #10000	; 0x2710
 8007bb6:	f7fd fc6f 	bl	8005498 <slalomF>
		}
		slalomR(V45_DEGACCEL, V45_OMEGA, 45, SPEED_LOW);
 8007bba:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007bbe:	222d      	movs	r2, #45	; 0x2d
 8007bc0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007bc4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007bc8:	f7fd fd1c 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007bcc:	2103      	movs	r1, #3
 8007bce:	20ff      	movs	r0, #255	; 0xff
 8007bd0:	f008 f98e 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007bd4:	4bac      	ldr	r3, [pc, #688]	; (8007e88 <v_L45+0x324>)
 8007bd6:	881b      	ldrh	r3, [r3, #0]
 8007bd8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	3301      	adds	r3, #1
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	bfb8      	it	lt
 8007be8:	425b      	neglt	r3, r3
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	b2d9      	uxtb	r1, r3
 8007bf0:	4aa5      	ldr	r2, [pc, #660]	; (8007e88 <v_L45+0x324>)
 8007bf2:	8813      	ldrh	r3, [r2, #0]
 8007bf4:	f361 03c3 	bfi	r3, r1, #3, #1
 8007bf8:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8007bfa:	4ba3      	ldr	r3, [pc, #652]	; (8007e88 <v_L45+0x324>)
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d107      	bne.n	8007c18 <v_L45+0xb4>
			slalomB(10000, SPEED_LOW, V45_OFFSET_VB);
 8007c08:	2228      	movs	r2, #40	; 0x28
 8007c0a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007c0e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c12:	f7fd fe19 	bl	8005848 <slalomB>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
		}
	}
}
 8007c16:	e17b      	b.n	8007f10 <v_L45+0x3ac>
			slalomB(10000, SPEED_LOW, V45_OFFSET_B);
 8007c18:	2255      	movs	r2, #85	; 0x55
 8007c1a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007c1e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c22:	f7fd fe11 	bl	8005848 <slalomB>
}
 8007c26:	e173      	b.n	8007f10 <v_L45+0x3ac>
	}else if(run_mode == MIDDLE){
 8007c28:	4b96      	ldr	r3, [pc, #600]	; (8007e84 <v_L45+0x320>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d156      	bne.n	8007ce0 <v_L45+0x17c>
		if(!MF2.FLAG.V){
 8007c32:	4b95      	ldr	r3, [pc, #596]	; (8007e88 <v_L45+0x324>)
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10c      	bne.n	8007c5a <v_L45+0xf6>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_F, NO_WALL, NO_WALL);
 8007c40:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c4a:	2228      	movs	r2, #40	; 0x28
 8007c4c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007c50:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c54:	f7fd fc20 	bl	8005498 <slalomF>
 8007c58:	e00b      	b.n	8007c72 <v_L45+0x10e>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 8007c5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c64:	2249      	movs	r2, #73	; 0x49
 8007c66:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007c6a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c6e:	f7fd fc13 	bl	8005498 <slalomF>
		slalomR(V45_2_DEGACCEL, V45_2_OMEGA, 45, SPEED_MIDDLE);
 8007c72:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007c76:	222d      	movs	r2, #45	; 0x2d
 8007c78:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007c7c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007c80:	f7fd fcc0 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007c84:	2103      	movs	r1, #3
 8007c86:	20ff      	movs	r0, #255	; 0xff
 8007c88:	f008 f932 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007c8c:	4b7e      	ldr	r3, [pc, #504]	; (8007e88 <v_L45+0x324>)
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	3301      	adds	r3, #1
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	bfb8      	it	lt
 8007ca0:	425b      	neglt	r3, r3
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	b2d9      	uxtb	r1, r3
 8007ca8:	4a77      	ldr	r2, [pc, #476]	; (8007e88 <v_L45+0x324>)
 8007caa:	8813      	ldrh	r3, [r2, #0]
 8007cac:	f361 03c3 	bfi	r3, r1, #3, #1
 8007cb0:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007cb2:	4b75      	ldr	r3, [pc, #468]	; (8007e88 <v_L45+0x324>)
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d107      	bne.n	8007cd0 <v_L45+0x16c>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB);
 8007cc0:	2237      	movs	r2, #55	; 0x37
 8007cc2:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007cc6:	f242 7010 	movw	r0, #10000	; 0x2710
 8007cca:	f7fd fdbd 	bl	8005848 <slalomB>
}
 8007cce:	e11f      	b.n	8007f10 <v_L45+0x3ac>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_B);
 8007cd0:	225d      	movs	r2, #93	; 0x5d
 8007cd2:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007cd6:	f242 7010 	movw	r0, #10000	; 0x2710
 8007cda:	f7fd fdb5 	bl	8005848 <slalomB>
}
 8007cde:	e117      	b.n	8007f10 <v_L45+0x3ac>
	}else if(run_mode == HIGH){
 8007ce0:	4b68      	ldr	r3, [pc, #416]	; (8007e84 <v_L45+0x320>)
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	d156      	bne.n	8007d98 <v_L45+0x234>
		if(!MF2.FLAG.V){
 8007cea:	4b67      	ldr	r3, [pc, #412]	; (8007e88 <v_L45+0x324>)
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10c      	bne.n	8007d12 <v_L45+0x1ae>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_F+5, NO_WALL, NO_WALL);
 8007cf8:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d02:	221c      	movs	r2, #28
 8007d04:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007d08:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d0c:	f7fd fbc4 	bl	8005498 <slalomF>
 8007d10:	e00b      	b.n	8007d2a <v_L45+0x1c6>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 8007d12:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d1c:	2237      	movs	r2, #55	; 0x37
 8007d1e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007d22:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d26:	f7fd fbb7 	bl	8005498 <slalomF>
		slalomR(V45_3_DEGACCEL, V45_3_OMEGA, 45, SPEED_HIGH);
 8007d2a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007d2e:	222d      	movs	r2, #45	; 0x2d
 8007d30:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007d34:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007d38:	f7fd fc64 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007d3c:	2103      	movs	r1, #3
 8007d3e:	20ff      	movs	r0, #255	; 0xff
 8007d40:	f008 f8d6 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007d44:	4b50      	ldr	r3, [pc, #320]	; (8007e88 <v_L45+0x324>)
 8007d46:	881b      	ldrh	r3, [r3, #0]
 8007d48:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	3301      	adds	r3, #1
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	bfb8      	it	lt
 8007d58:	425b      	neglt	r3, r3
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	b2d9      	uxtb	r1, r3
 8007d60:	4a49      	ldr	r2, [pc, #292]	; (8007e88 <v_L45+0x324>)
 8007d62:	8813      	ldrh	r3, [r2, #0]
 8007d64:	f361 03c3 	bfi	r3, r1, #3, #1
 8007d68:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007d6a:	4b47      	ldr	r3, [pc, #284]	; (8007e88 <v_L45+0x324>)
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d107      	bne.n	8007d88 <v_L45+0x224>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB);
 8007d78:	2233      	movs	r2, #51	; 0x33
 8007d7a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007d7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d82:	f7fd fd61 	bl	8005848 <slalomB>
}
 8007d86:	e0c3      	b.n	8007f10 <v_L45+0x3ac>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_B);
 8007d88:	224b      	movs	r2, #75	; 0x4b
 8007d8a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007d8e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d92:	f7fd fd59 	bl	8005848 <slalomB>
}
 8007d96:	e0bb      	b.n	8007f10 <v_L45+0x3ac>
	}else if(run_mode == HIGH_HIGH){
 8007d98:	4b3a      	ldr	r3, [pc, #232]	; (8007e84 <v_L45+0x320>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	d156      	bne.n	8007e50 <v_L45+0x2ec>
		if(!MF2.FLAG.V){
 8007da2:	4b39      	ldr	r3, [pc, #228]	; (8007e88 <v_L45+0x324>)
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10c      	bne.n	8007dca <v_L45+0x266>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_F, NO_WALL, NO_WALL);
 8007db0:	f241 3388 	movw	r3, #5000	; 0x1388
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007dba:	2214      	movs	r2, #20
 8007dbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007dc0:	f242 7010 	movw	r0, #10000	; 0x2710
 8007dc4:	f7fd fb68 	bl	8005498 <slalomF>
 8007dc8:	e00b      	b.n	8007de2 <v_L45+0x27e>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 8007dca:	f241 3388 	movw	r3, #5000	; 0x1388
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8007dd4:	2214      	movs	r2, #20
 8007dd6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007dda:	f242 7010 	movw	r0, #10000	; 0x2710
 8007dde:	f7fd fb5b 	bl	8005498 <slalomF>
		slalomR(V45_4_DEGACCEL, V45_4_OMEGA, 45, SPEED_HIGH_HIGH);
 8007de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007de6:	222d      	movs	r2, #45	; 0x2d
 8007de8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007dec:	f242 7010 	movw	r0, #10000	; 0x2710
 8007df0:	f7fd fc08 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007df4:	2103      	movs	r1, #3
 8007df6:	20ff      	movs	r0, #255	; 0xff
 8007df8:	f008 f87a 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007dfc:	4b22      	ldr	r3, [pc, #136]	; (8007e88 <v_L45+0x324>)
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	3301      	adds	r3, #1
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	bfb8      	it	lt
 8007e10:	425b      	neglt	r3, r3
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	b2d9      	uxtb	r1, r3
 8007e18:	4a1b      	ldr	r2, [pc, #108]	; (8007e88 <v_L45+0x324>)
 8007e1a:	8813      	ldrh	r3, [r2, #0]
 8007e1c:	f361 03c3 	bfi	r3, r1, #3, #1
 8007e20:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007e22:	4b19      	ldr	r3, [pc, #100]	; (8007e88 <v_L45+0x324>)
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d107      	bne.n	8007e40 <v_L45+0x2dc>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB);
 8007e30:	223a      	movs	r2, #58	; 0x3a
 8007e32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007e36:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e3a:	f7fd fd05 	bl	8005848 <slalomB>
}
 8007e3e:	e067      	b.n	8007f10 <v_L45+0x3ac>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_B);
 8007e40:	223a      	movs	r2, #58	; 0x3a
 8007e42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007e46:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e4a:	f7fd fcfd 	bl	8005848 <slalomB>
}
 8007e4e:	e05f      	b.n	8007f10 <v_L45+0x3ac>
	}else if(run_mode == 5){
 8007e50:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <v_L45+0x320>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b05      	cmp	r3, #5
 8007e58:	d15a      	bne.n	8007f10 <v_L45+0x3ac>
		if(!MF2.FLAG.V){
 8007e5a:	4b0b      	ldr	r3, [pc, #44]	; (8007e88 <v_L45+0x324>)
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d111      	bne.n	8007e8c <v_L45+0x328>
			slalomF(10000, SPEED_5, V45_5_OFFSET_F, NO_WALL, NO_WALL);
 8007e68:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e72:	2218      	movs	r2, #24
 8007e74:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007e78:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e7c:	f7fd fb0c 	bl	8005498 <slalomF>
 8007e80:	e010      	b.n	8007ea4 <v_L45+0x340>
 8007e82:	bf00      	nop
 8007e84:	20000456 	.word	0x20000456
 8007e88:	20000f64 	.word	0x20000f64
			slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8007e8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e96:	2214      	movs	r2, #20
 8007e98:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007e9c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ea0:	f7fd fafa 	bl	8005498 <slalomF>
		slalomR(V45_5_DEGACCEL, V45_5_OMEGA, 45, SPEED_5);
 8007ea4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007ea8:	222d      	movs	r2, #45	; 0x2d
 8007eaa:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007eae:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8007eb2:	f7fd fba7 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007eb6:	2103      	movs	r1, #3
 8007eb8:	20ff      	movs	r0, #255	; 0xff
 8007eba:	f008 f819 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007ebe:	4b16      	ldr	r3, [pc, #88]	; (8007f18 <v_L45+0x3b4>)
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	3301      	adds	r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	bfb8      	it	lt
 8007ed2:	425b      	neglt	r3, r3
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	b2d9      	uxtb	r1, r3
 8007eda:	4a0f      	ldr	r2, [pc, #60]	; (8007f18 <v_L45+0x3b4>)
 8007edc:	8813      	ldrh	r3, [r2, #0]
 8007ede:	f361 03c3 	bfi	r3, r1, #3, #1
 8007ee2:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007ee4:	4b0c      	ldr	r3, [pc, #48]	; (8007f18 <v_L45+0x3b4>)
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d107      	bne.n	8007f02 <v_L45+0x39e>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
 8007ef2:	223a      	movs	r2, #58	; 0x3a
 8007ef4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007ef8:	f242 7010 	movw	r0, #10000	; 0x2710
 8007efc:	f7fd fca4 	bl	8005848 <slalomB>
}
 8007f00:	e006      	b.n	8007f10 <v_L45+0x3ac>
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
 8007f02:	223d      	movs	r2, #61	; 0x3d
 8007f04:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007f08:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f0c:	f7fd fc9c 	bl	8005848 <slalomB>
}
 8007f10:	bf00      	nop
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	20000f64 	.word	0x20000f64

08007f1c <v_R45D>:
//v_R45D
//a区画中心から右に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45D(void){
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8007f22:	2005      	movs	r0, #5
 8007f24:	f009 fe78 	bl	8011c18 <full_led_write>
	if(run_mode == LOW){
 8007f28:	4b9e      	ldr	r3, [pc, #632]	; (80081a4 <v_R45D+0x288>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d139      	bne.n	8007fa6 <v_R45D+0x8a>
		slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 8007f32:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f3c:	2255      	movs	r2, #85	; 0x55
 8007f3e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007f42:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f46:	f7fd faa7 	bl	8005498 <slalomF>
		slalomR(-V45_DEGACCEL, -V45_OMEGA, -45, SPEED_LOW);
 8007f4a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007f4e:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007f52:	4995      	ldr	r1, [pc, #596]	; (80081a8 <v_R45D+0x28c>)
 8007f54:	4895      	ldr	r0, [pc, #596]	; (80081ac <v_R45D+0x290>)
 8007f56:	f7fd fb55 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007f5a:	2103      	movs	r1, #3
 8007f5c:	2001      	movs	r0, #1
 8007f5e:	f007 ffc7 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007f62:	4b93      	ldr	r3, [pc, #588]	; (80081b0 <v_R45D+0x294>)
 8007f64:	881b      	ldrh	r3, [r3, #0]
 8007f66:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	bfb8      	it	lt
 8007f76:	425b      	neglt	r3, r3
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	b2d9      	uxtb	r1, r3
 8007f7e:	4a8c      	ldr	r2, [pc, #560]	; (80081b0 <v_R45D+0x294>)
 8007f80:	8813      	ldrh	r3, [r2, #0]
 8007f82:	f361 03c3 	bfi	r3, r1, #3, #1
 8007f86:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V45_OFFSET_VB-30);
 8007f88:	220a      	movs	r2, #10
 8007f8a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007f8e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f92:	f7fd fc59 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 8007f96:	231e      	movs	r3, #30
 8007f98:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007f9c:	211e      	movs	r1, #30
 8007f9e:	4885      	ldr	r0, [pc, #532]	; (80081b4 <v_R45D+0x298>)
 8007fa0:	f7fd f8a2 	bl	80050e8 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8007fa4:	e0fa      	b.n	800819c <v_R45D+0x280>
	}else if(run_mode == MIDDLE){
 8007fa6:	4b7f      	ldr	r3, [pc, #508]	; (80081a4 <v_R45D+0x288>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d139      	bne.n	8008024 <v_R45D+0x108>
		slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 8007fb0:	f241 3388 	movw	r3, #5000	; 0x1388
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007fba:	2249      	movs	r2, #73	; 0x49
 8007fbc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007fc0:	f242 7010 	movw	r0, #10000	; 0x2710
 8007fc4:	f7fd fa68 	bl	8005498 <slalomF>
		slalomR(-V45_2_DEGACCEL, -V45_2_OMEGA, -45, SPEED_MIDDLE);
 8007fc8:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007fcc:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007fd0:	4979      	ldr	r1, [pc, #484]	; (80081b8 <v_R45D+0x29c>)
 8007fd2:	487a      	ldr	r0, [pc, #488]	; (80081bc <v_R45D+0x2a0>)
 8007fd4:	f7fd fb16 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007fd8:	2103      	movs	r1, #3
 8007fda:	2001      	movs	r0, #1
 8007fdc:	f007 ff88 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007fe0:	4b73      	ldr	r3, [pc, #460]	; (80081b0 <v_R45D+0x294>)
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	3301      	adds	r3, #1
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	bfb8      	it	lt
 8007ff4:	425b      	neglt	r3, r3
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	b2d9      	uxtb	r1, r3
 8007ffc:	4a6c      	ldr	r2, [pc, #432]	; (80081b0 <v_R45D+0x294>)
 8007ffe:	8813      	ldrh	r3, [r2, #0]
 8008000:	f361 03c3 	bfi	r3, r1, #3, #1
 8008004:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB-30);
 8008006:	2219      	movs	r2, #25
 8008008:	f44f 7116 	mov.w	r1, #600	; 0x258
 800800c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008010:	f7fd fc1a 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 8008014:	231e      	movs	r3, #30
 8008016:	f44f 7216 	mov.w	r2, #600	; 0x258
 800801a:	211e      	movs	r1, #30
 800801c:	4865      	ldr	r0, [pc, #404]	; (80081b4 <v_R45D+0x298>)
 800801e:	f7fd f863 	bl	80050e8 <driveD>
}
 8008022:	e0bb      	b.n	800819c <v_R45D+0x280>
	}else if(run_mode == HIGH){
 8008024:	4b5f      	ldr	r3, [pc, #380]	; (80081a4 <v_R45D+0x288>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b03      	cmp	r3, #3
 800802c:	d139      	bne.n	80080a2 <v_R45D+0x186>
		slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 800802e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008032:	9300      	str	r3, [sp, #0]
 8008034:	f241 3388 	movw	r3, #5000	; 0x1388
 8008038:	2237      	movs	r2, #55	; 0x37
 800803a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800803e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008042:	f7fd fa29 	bl	8005498 <slalomF>
		slalomR(-V45_3_DEGACCEL, -V45_3_OMEGA, -45, SPEED_HIGH);
 8008046:	f44f 7348 	mov.w	r3, #800	; 0x320
 800804a:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 800804e:	495a      	ldr	r1, [pc, #360]	; (80081b8 <v_R45D+0x29c>)
 8008050:	485a      	ldr	r0, [pc, #360]	; (80081bc <v_R45D+0x2a0>)
 8008052:	f7fd fad7 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008056:	2103      	movs	r1, #3
 8008058:	2001      	movs	r0, #1
 800805a:	f007 ff49 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800805e:	4b54      	ldr	r3, [pc, #336]	; (80081b0 <v_R45D+0x294>)
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008066:	b2db      	uxtb	r3, r3
 8008068:	3301      	adds	r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	f003 0301 	and.w	r3, r3, #1
 8008070:	bfb8      	it	lt
 8008072:	425b      	neglt	r3, r3
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	b2d9      	uxtb	r1, r3
 800807a:	4a4d      	ldr	r2, [pc, #308]	; (80081b0 <v_R45D+0x294>)
 800807c:	8813      	ldrh	r3, [r2, #0]
 800807e:	f361 03c3 	bfi	r3, r1, #3, #1
 8008082:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB-30);
 8008084:	2215      	movs	r2, #21
 8008086:	f44f 7148 	mov.w	r1, #800	; 0x320
 800808a:	f242 7010 	movw	r0, #10000	; 0x2710
 800808e:	f7fd fbdb 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8008092:	231e      	movs	r3, #30
 8008094:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008098:	211e      	movs	r1, #30
 800809a:	4846      	ldr	r0, [pc, #280]	; (80081b4 <v_R45D+0x298>)
 800809c:	f7fd f824 	bl	80050e8 <driveD>
}
 80080a0:	e07c      	b.n	800819c <v_R45D+0x280>
	}else if(run_mode == HIGH_HIGH){
 80080a2:	4b40      	ldr	r3, [pc, #256]	; (80081a4 <v_R45D+0x288>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	d139      	bne.n	8008120 <v_R45D+0x204>
		slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 80080ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80080b6:	2214      	movs	r2, #20
 80080b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80080bc:	f242 7010 	movw	r0, #10000	; 0x2710
 80080c0:	f7fd f9ea 	bl	8005498 <slalomF>
		slalomR(-V45_4_DEGACCEL, -V45_4_OMEGA, -45, SPEED_HIGH_HIGH);
 80080c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80080c8:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80080cc:	493c      	ldr	r1, [pc, #240]	; (80081c0 <v_R45D+0x2a4>)
 80080ce:	483d      	ldr	r0, [pc, #244]	; (80081c4 <v_R45D+0x2a8>)
 80080d0:	f7fd fa98 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80080d4:	2103      	movs	r1, #3
 80080d6:	2001      	movs	r0, #1
 80080d8:	f007 ff0a 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80080dc:	4b34      	ldr	r3, [pc, #208]	; (80081b0 <v_R45D+0x294>)
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	3301      	adds	r3, #1
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	bfb8      	it	lt
 80080f0:	425b      	neglt	r3, r3
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	b2d9      	uxtb	r1, r3
 80080f8:	4a2d      	ldr	r2, [pc, #180]	; (80081b0 <v_R45D+0x294>)
 80080fa:	8813      	ldrh	r3, [r2, #0]
 80080fc:	f361 03c3 	bfi	r3, r1, #3, #1
 8008100:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB-30);
 8008102:	221c      	movs	r2, #28
 8008104:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008108:	f242 7010 	movw	r0, #10000	; 0x2710
 800810c:	f7fd fb9c 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH_HIGH, 30);
 8008110:	231e      	movs	r3, #30
 8008112:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008116:	211e      	movs	r1, #30
 8008118:	4826      	ldr	r0, [pc, #152]	; (80081b4 <v_R45D+0x298>)
 800811a:	f7fc ffe5 	bl	80050e8 <driveD>
}
 800811e:	e03d      	b.n	800819c <v_R45D+0x280>
	}else if(run_mode == 5){
 8008120:	4b20      	ldr	r3, [pc, #128]	; (80081a4 <v_R45D+0x288>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b05      	cmp	r3, #5
 8008128:	d138      	bne.n	800819c <v_R45D+0x280>
		slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 800812a:	f241 3388 	movw	r3, #5000	; 0x1388
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	f241 3388 	movw	r3, #5000	; 0x1388
 8008134:	2214      	movs	r2, #20
 8008136:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800813a:	f242 7010 	movw	r0, #10000	; 0x2710
 800813e:	f7fd f9ab 	bl	8005498 <slalomF>
		slalomR(-V45_5_DEGACCEL, -V45_5_OMEGA, -45, SPEED_5);
 8008142:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008146:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 800814a:	491f      	ldr	r1, [pc, #124]	; (80081c8 <v_R45D+0x2ac>)
 800814c:	481f      	ldr	r0, [pc, #124]	; (80081cc <v_R45D+0x2b0>)
 800814e:	f7fd fa59 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008152:	2103      	movs	r1, #3
 8008154:	2001      	movs	r0, #1
 8008156:	f007 fecb 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800815a:	4b15      	ldr	r3, [pc, #84]	; (80081b0 <v_R45D+0x294>)
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008162:	b2db      	uxtb	r3, r3
 8008164:	3301      	adds	r3, #1
 8008166:	2b00      	cmp	r3, #0
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	bfb8      	it	lt
 800816e:	425b      	neglt	r3, r3
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	b2d9      	uxtb	r1, r3
 8008176:	4a0e      	ldr	r2, [pc, #56]	; (80081b0 <v_R45D+0x294>)
 8008178:	8813      	ldrh	r3, [r2, #0]
 800817a:	f361 03c3 	bfi	r3, r1, #3, #1
 800817e:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
 8008180:	221c      	movs	r2, #28
 8008182:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008186:	f242 7010 	movw	r0, #10000	; 0x2710
 800818a:	f7fd fb5d 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 800818e:	231e      	movs	r3, #30
 8008190:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8008194:	211e      	movs	r1, #30
 8008196:	4807      	ldr	r0, [pc, #28]	; (80081b4 <v_R45D+0x298>)
 8008198:	f7fc ffa6 	bl	80050e8 <driveD>
}
 800819c:	bf00      	nop
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20000456 	.word	0x20000456
 80081a8:	fffffed4 	.word	0xfffffed4
 80081ac:	fffff448 	.word	0xfffff448
 80081b0:	20000f64 	.word	0x20000f64
 80081b4:	ffff8ad0 	.word	0xffff8ad0
 80081b8:	fffffe70 	.word	0xfffffe70
 80081bc:	ffffe0c0 	.word	0xffffe0c0
 80081c0:	fffffda8 	.word	0xfffffda8
 80081c4:	ffffd8f0 	.word	0xffffd8f0
 80081c8:	fffffce0 	.word	0xfffffce0
 80081cc:	ffffc180 	.word	0xffffc180

080081d0 <v_L45D>:
//v_L45D
//a区画中心から左に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45D(void){
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80081d6:	2006      	movs	r0, #6
 80081d8:	f009 fd1e 	bl	8011c18 <full_led_write>
	if(run_mode == LOW){
 80081dc:	4ba0      	ldr	r3, [pc, #640]	; (8008460 <v_L45D+0x290>)
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d13a      	bne.n	800825c <v_L45D+0x8c>
		slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 80081e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80081ea:	9300      	str	r3, [sp, #0]
 80081ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80081f0:	2255      	movs	r2, #85	; 0x55
 80081f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80081f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80081fa:	f7fd f94d 	bl	8005498 <slalomF>
		slalomR(V45_DEGACCEL, V45_OMEGA, 55, SPEED_LOW);
 80081fe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008202:	2237      	movs	r2, #55	; 0x37
 8008204:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008208:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800820c:	f7fd f9fa 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008210:	2103      	movs	r1, #3
 8008212:	20ff      	movs	r0, #255	; 0xff
 8008214:	f007 fe6c 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008218:	4b92      	ldr	r3, [pc, #584]	; (8008464 <v_L45D+0x294>)
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008220:	b2db      	uxtb	r3, r3
 8008222:	3301      	adds	r3, #1
 8008224:	2b00      	cmp	r3, #0
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	bfb8      	it	lt
 800822c:	425b      	neglt	r3, r3
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	b2d9      	uxtb	r1, r3
 8008234:	4a8b      	ldr	r2, [pc, #556]	; (8008464 <v_L45D+0x294>)
 8008236:	8813      	ldrh	r3, [r2, #0]
 8008238:	f361 03c3 	bfi	r3, r1, #3, #1
 800823c:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V45_OFFSET_VB-30);
 800823e:	220a      	movs	r2, #10
 8008240:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008244:	f242 7010 	movw	r0, #10000	; 0x2710
 8008248:	f7fd fafe 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 800824c:	231e      	movs	r3, #30
 800824e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008252:	211e      	movs	r1, #30
 8008254:	4884      	ldr	r0, [pc, #528]	; (8008468 <v_L45D+0x298>)
 8008256:	f7fc ff47 	bl	80050e8 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 800825a:	e0fe      	b.n	800845a <v_L45D+0x28a>
	}else if(run_mode == MIDDLE){
 800825c:	4b80      	ldr	r3, [pc, #512]	; (8008460 <v_L45D+0x290>)
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b02      	cmp	r3, #2
 8008264:	d13a      	bne.n	80082dc <v_L45D+0x10c>
		slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008266:	f241 3388 	movw	r3, #5000	; 0x1388
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008270:	2249      	movs	r2, #73	; 0x49
 8008272:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008276:	f242 7010 	movw	r0, #10000	; 0x2710
 800827a:	f7fd f90d 	bl	8005498 <slalomF>
		slalomR(V45_2_DEGACCEL, V45_2_OMEGA, 45, SPEED_MIDDLE);
 800827e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008282:	222d      	movs	r2, #45	; 0x2d
 8008284:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008288:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800828c:	f7fd f9ba 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008290:	2103      	movs	r1, #3
 8008292:	20ff      	movs	r0, #255	; 0xff
 8008294:	f007 fe2c 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008298:	4b72      	ldr	r3, [pc, #456]	; (8008464 <v_L45D+0x294>)
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	3301      	adds	r3, #1
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	bfb8      	it	lt
 80082ac:	425b      	neglt	r3, r3
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	b2d9      	uxtb	r1, r3
 80082b4:	4a6b      	ldr	r2, [pc, #428]	; (8008464 <v_L45D+0x294>)
 80082b6:	8813      	ldrh	r3, [r2, #0]
 80082b8:	f361 03c3 	bfi	r3, r1, #3, #1
 80082bc:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB-30);
 80082be:	2219      	movs	r2, #25
 80082c0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80082c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80082c8:	f7fd fabe 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 80082cc:	231e      	movs	r3, #30
 80082ce:	f44f 7216 	mov.w	r2, #600	; 0x258
 80082d2:	211e      	movs	r1, #30
 80082d4:	4864      	ldr	r0, [pc, #400]	; (8008468 <v_L45D+0x298>)
 80082d6:	f7fc ff07 	bl	80050e8 <driveD>
}
 80082da:	e0be      	b.n	800845a <v_L45D+0x28a>
	}else if(run_mode == HIGH){
 80082dc:	4b60      	ldr	r3, [pc, #384]	; (8008460 <v_L45D+0x290>)
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d13a      	bne.n	800835c <v_L45D+0x18c>
		slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 80082e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80082f0:	2237      	movs	r2, #55	; 0x37
 80082f2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80082f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80082fa:	f7fd f8cd 	bl	8005498 <slalomF>
		slalomR(V45_3_DEGACCEL, V45_3_OMEGA, 45, SPEED_HIGH);
 80082fe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008302:	222d      	movs	r2, #45	; 0x2d
 8008304:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008308:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800830c:	f7fd f97a 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008310:	2103      	movs	r1, #3
 8008312:	20ff      	movs	r0, #255	; 0xff
 8008314:	f007 fdec 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008318:	4b52      	ldr	r3, [pc, #328]	; (8008464 <v_L45D+0x294>)
 800831a:	881b      	ldrh	r3, [r3, #0]
 800831c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008320:	b2db      	uxtb	r3, r3
 8008322:	3301      	adds	r3, #1
 8008324:	2b00      	cmp	r3, #0
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	bfb8      	it	lt
 800832c:	425b      	neglt	r3, r3
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	b2d9      	uxtb	r1, r3
 8008334:	4a4b      	ldr	r2, [pc, #300]	; (8008464 <v_L45D+0x294>)
 8008336:	8813      	ldrh	r3, [r2, #0]
 8008338:	f361 03c3 	bfi	r3, r1, #3, #1
 800833c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB-30);
 800833e:	2215      	movs	r2, #21
 8008340:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008344:	f242 7010 	movw	r0, #10000	; 0x2710
 8008348:	f7fd fa7e 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 800834c:	231e      	movs	r3, #30
 800834e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008352:	211e      	movs	r1, #30
 8008354:	4844      	ldr	r0, [pc, #272]	; (8008468 <v_L45D+0x298>)
 8008356:	f7fc fec7 	bl	80050e8 <driveD>
}
 800835a:	e07e      	b.n	800845a <v_L45D+0x28a>
	}else if(run_mode == HIGH_HIGH){
 800835c:	4b40      	ldr	r3, [pc, #256]	; (8008460 <v_L45D+0x290>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b04      	cmp	r3, #4
 8008364:	d13a      	bne.n	80083dc <v_L45D+0x20c>
		slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 8008366:	f241 3388 	movw	r3, #5000	; 0x1388
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008370:	2214      	movs	r2, #20
 8008372:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008376:	f242 7010 	movw	r0, #10000	; 0x2710
 800837a:	f7fd f88d 	bl	8005498 <slalomF>
		slalomR(V45_4_DEGACCEL, V45_4_OMEGA, 45, SPEED_HIGH_HIGH);
 800837e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008382:	222d      	movs	r2, #45	; 0x2d
 8008384:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008388:	f242 7010 	movw	r0, #10000	; 0x2710
 800838c:	f7fd f93a 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008390:	2103      	movs	r1, #3
 8008392:	20ff      	movs	r0, #255	; 0xff
 8008394:	f007 fdac 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008398:	4b32      	ldr	r3, [pc, #200]	; (8008464 <v_L45D+0x294>)
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	3301      	adds	r3, #1
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	bfb8      	it	lt
 80083ac:	425b      	neglt	r3, r3
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	b2d9      	uxtb	r1, r3
 80083b4:	4a2b      	ldr	r2, [pc, #172]	; (8008464 <v_L45D+0x294>)
 80083b6:	8813      	ldrh	r3, [r2, #0]
 80083b8:	f361 03c3 	bfi	r3, r1, #3, #1
 80083bc:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB-30);
 80083be:	221c      	movs	r2, #28
 80083c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80083c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80083c8:	f7fd fa3e 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH_HIGH, 30);
 80083cc:	231e      	movs	r3, #30
 80083ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80083d2:	211e      	movs	r1, #30
 80083d4:	4824      	ldr	r0, [pc, #144]	; (8008468 <v_L45D+0x298>)
 80083d6:	f7fc fe87 	bl	80050e8 <driveD>
}
 80083da:	e03e      	b.n	800845a <v_L45D+0x28a>
	}else if(run_mode == 5){
 80083dc:	4b20      	ldr	r3, [pc, #128]	; (8008460 <v_L45D+0x290>)
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b05      	cmp	r3, #5
 80083e4:	d139      	bne.n	800845a <v_L45D+0x28a>
		slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 80083e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80083f0:	2214      	movs	r2, #20
 80083f2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80083f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80083fa:	f7fd f84d 	bl	8005498 <slalomF>
		slalomR(V45_5_DEGACCEL, V45_5_OMEGA, 45, SPEED_5);
 80083fe:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008402:	222d      	movs	r2, #45	; 0x2d
 8008404:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008408:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800840c:	f7fd f8fa 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008410:	2103      	movs	r1, #3
 8008412:	20ff      	movs	r0, #255	; 0xff
 8008414:	f007 fd6c 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008418:	4b12      	ldr	r3, [pc, #72]	; (8008464 <v_L45D+0x294>)
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008420:	b2db      	uxtb	r3, r3
 8008422:	3301      	adds	r3, #1
 8008424:	2b00      	cmp	r3, #0
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	bfb8      	it	lt
 800842c:	425b      	neglt	r3, r3
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	b2d9      	uxtb	r1, r3
 8008434:	4a0b      	ldr	r2, [pc, #44]	; (8008464 <v_L45D+0x294>)
 8008436:	8813      	ldrh	r3, [r2, #0]
 8008438:	f361 03c3 	bfi	r3, r1, #3, #1
 800843c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
 800843e:	221c      	movs	r2, #28
 8008440:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008444:	f242 7010 	movw	r0, #10000	; 0x2710
 8008448:	f7fd f9fe 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 800844c:	231e      	movs	r3, #30
 800844e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8008452:	211e      	movs	r1, #30
 8008454:	4804      	ldr	r0, [pc, #16]	; (8008468 <v_L45D+0x298>)
 8008456:	f7fc fe47 	bl	80050e8 <driveD>
}
 800845a:	bf00      	nop
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	20000456 	.word	0x20000456
 8008464:	20000f64 	.word	0x20000f64
 8008468:	ffff8ad0 	.word	0xffff8ad0

0800846c <v_R90>:
//v_R90
// 柱中心から右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R90(void){
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8008472:	2006      	movs	r0, #6
 8008474:	f009 fbd0 	bl	8011c18 <full_led_write>
	if(run_mode == LOW){
 8008478:	4b5d      	ldr	r3, [pc, #372]	; (80085f0 <v_R90+0x184>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	b2db      	uxtb	r3, r3
 800847e:	2b01      	cmp	r3, #1
 8008480:	d11f      	bne.n	80084c2 <v_R90+0x56>
		slalomF(10000, SPEED_LOW, V90_OFFSET_F, NO_WALL, NO_WALL);
 8008482:	f241 3388 	movw	r3, #5000	; 0x1388
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	f241 3388 	movw	r3, #5000	; 0x1388
 800848c:	222d      	movs	r2, #45	; 0x2d
 800848e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008492:	f242 7010 	movw	r0, #10000	; 0x2710
 8008496:	f7fc ffff 	bl	8005498 <slalomF>
		slalomR(-V90_DEGACCEL, -V90_OMEGA, -90, SPEED_LOW);
 800849a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800849e:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80084a2:	4954      	ldr	r1, [pc, #336]	; (80085f4 <v_R90+0x188>)
 80084a4:	4854      	ldr	r0, [pc, #336]	; (80085f8 <v_R90+0x18c>)
 80084a6:	f7fd f8ad 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80084aa:	2103      	movs	r1, #3
 80084ac:	2002      	movs	r0, #2
 80084ae:	f007 fd1f 	bl	800fef0 <turn_dir>

		slalomB(10000, SPEED_LOW, V90_OFFSET_B);
 80084b2:	222d      	movs	r2, #45	; 0x2d
 80084b4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80084b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80084bc:	f7fd f9c4 	bl	8005848 <slalomB>

		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
	}
}
 80084c0:	e092      	b.n	80085e8 <v_R90+0x17c>
	}else if(run_mode == MIDDLE){
 80084c2:	4b4b      	ldr	r3, [pc, #300]	; (80085f0 <v_R90+0x184>)
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d11f      	bne.n	800850c <v_R90+0xa0>
		slalomF(10000, SPEED_MIDDLE, V90_2_OFFSET_F, NO_WALL, NO_WALL);
 80084cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80084d6:	223a      	movs	r2, #58	; 0x3a
 80084d8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80084dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80084e0:	f7fc ffda 	bl	8005498 <slalomF>
		slalomR(-V90_2_DEGACCEL, -V90_2_OMEGA, -90, SPEED_MIDDLE);
 80084e4:	f44f 7316 	mov.w	r3, #600	; 0x258
 80084e8:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80084ec:	4943      	ldr	r1, [pc, #268]	; (80085fc <v_R90+0x190>)
 80084ee:	4844      	ldr	r0, [pc, #272]	; (8008600 <v_R90+0x194>)
 80084f0:	f7fd f888 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 80084f4:	2103      	movs	r1, #3
 80084f6:	2002      	movs	r0, #2
 80084f8:	f007 fcfa 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, V90_2_OFFSET_B);
 80084fc:	2252      	movs	r2, #82	; 0x52
 80084fe:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008502:	f242 7010 	movw	r0, #10000	; 0x2710
 8008506:	f7fd f99f 	bl	8005848 <slalomB>
}
 800850a:	e06d      	b.n	80085e8 <v_R90+0x17c>
	}else if(run_mode == HIGH){
 800850c:	4b38      	ldr	r3, [pc, #224]	; (80085f0 <v_R90+0x184>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b03      	cmp	r3, #3
 8008514:	d11f      	bne.n	8008556 <v_R90+0xea>
		slalomF(10000, SPEED_HIGH, V90_3_OFFSET_F, NO_WALL, NO_WALL);
 8008516:	f241 3388 	movw	r3, #5000	; 0x1388
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008520:	2223      	movs	r2, #35	; 0x23
 8008522:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008526:	f242 7010 	movw	r0, #10000	; 0x2710
 800852a:	f7fc ffb5 	bl	8005498 <slalomF>
		slalomR(-V90_3_DEGACCEL, -V90_3_OMEGA, -90, SPEED_HIGH);
 800852e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008532:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8008536:	4931      	ldr	r1, [pc, #196]	; (80085fc <v_R90+0x190>)
 8008538:	4831      	ldr	r0, [pc, #196]	; (8008600 <v_R90+0x194>)
 800853a:	f7fd f863 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 800853e:	2103      	movs	r1, #3
 8008540:	2002      	movs	r0, #2
 8008542:	f007 fcd5 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_HIGH, V90_3_OFFSET_B);
 8008546:	2241      	movs	r2, #65	; 0x41
 8008548:	f44f 7148 	mov.w	r1, #800	; 0x320
 800854c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008550:	f7fd f97a 	bl	8005848 <slalomB>
}
 8008554:	e048      	b.n	80085e8 <v_R90+0x17c>
	}else if(run_mode == HIGH_HIGH){
 8008556:	4b26      	ldr	r3, [pc, #152]	; (80085f0 <v_R90+0x184>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2b04      	cmp	r3, #4
 800855e:	d11f      	bne.n	80085a0 <v_R90+0x134>
		slalomF(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_F, NO_WALL, NO_WALL);
 8008560:	f241 3388 	movw	r3, #5000	; 0x1388
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	f241 3388 	movw	r3, #5000	; 0x1388
 800856a:	221e      	movs	r2, #30
 800856c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008570:	f242 7010 	movw	r0, #10000	; 0x2710
 8008574:	f7fc ff90 	bl	8005498 <slalomF>
		slalomR(-V90_4_DEGACCEL, -V90_4_OMEGA, -90, SPEED_HIGH_HIGH);
 8008578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800857c:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8008580:	491e      	ldr	r1, [pc, #120]	; (80085fc <v_R90+0x190>)
 8008582:	4820      	ldr	r0, [pc, #128]	; (8008604 <v_R90+0x198>)
 8008584:	f7fd f83e 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 8008588:	2103      	movs	r1, #3
 800858a:	2002      	movs	r0, #2
 800858c:	f007 fcb0 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_B);
 8008590:	221e      	movs	r2, #30
 8008592:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008596:	f242 7010 	movw	r0, #10000	; 0x2710
 800859a:	f7fd f955 	bl	8005848 <slalomB>
}
 800859e:	e023      	b.n	80085e8 <v_R90+0x17c>
	}else if(run_mode == 5){
 80085a0:	4b13      	ldr	r3, [pc, #76]	; (80085f0 <v_R90+0x184>)
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b05      	cmp	r3, #5
 80085a8:	d11e      	bne.n	80085e8 <v_R90+0x17c>
		slalomF(10000, SPEED_5, V90_5_OFFSET_F, NO_WALL, NO_WALL);
 80085aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80085b4:	2214      	movs	r2, #20
 80085b6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80085ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80085be:	f7fc ff6b 	bl	8005498 <slalomF>
		slalomR(-V90_5_DEGACCEL, -V90_5_OMEGA, -90, SPEED_5);
 80085c2:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80085c6:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80085ca:	490f      	ldr	r1, [pc, #60]	; (8008608 <v_R90+0x19c>)
 80085cc:	480d      	ldr	r0, [pc, #52]	; (8008604 <v_R90+0x198>)
 80085ce:	f7fd f819 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 80085d2:	2103      	movs	r1, #3
 80085d4:	2002      	movs	r0, #2
 80085d6:	f007 fc8b 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
 80085da:	2214      	movs	r2, #20
 80085dc:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80085e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80085e4:	f7fd f930 	bl	8005848 <slalomB>
}
 80085e8:	bf00      	nop
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	20000456 	.word	0x20000456
 80085f4:	fffffea2 	.word	0xfffffea2
 80085f8:	fffff254 	.word	0xfffff254
 80085fc:	fffffce0 	.word	0xfffffce0
 8008600:	ffffd8f0 	.word	0xffffd8f0
 8008604:	ffffc180 	.word	0xffffc180
 8008608:	fffffc18 	.word	0xfffffc18

0800860c <v_L90>:
//v_L90
// 柱中心から左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L90(void){
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8008612:	2005      	movs	r0, #5
 8008614:	f009 fb00 	bl	8011c18 <full_led_write>
	if(run_mode == LOW){
 8008618:	4b5f      	ldr	r3, [pc, #380]	; (8008798 <v_L90+0x18c>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b01      	cmp	r3, #1
 8008620:	d120      	bne.n	8008664 <v_L90+0x58>
		slalomF(10000, SPEED_LOW, V90_OFFSET_F, NO_WALL, NO_WALL);
 8008622:	f241 3388 	movw	r3, #5000	; 0x1388
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	f241 3388 	movw	r3, #5000	; 0x1388
 800862c:	222d      	movs	r2, #45	; 0x2d
 800862e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008632:	f242 7010 	movw	r0, #10000	; 0x2710
 8008636:	f7fc ff2f 	bl	8005498 <slalomF>
		slalomR(V90_DEGACCEL, V90_OMEGA, 90, SPEED_LOW);
 800863a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800863e:	225a      	movs	r2, #90	; 0x5a
 8008640:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008644:	f640 50ac 	movw	r0, #3500	; 0xdac
 8008648:	f7fc ffdc 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800864c:	2103      	movs	r1, #3
 800864e:	20fe      	movs	r0, #254	; 0xfe
 8008650:	f007 fc4e 	bl	800fef0 <turn_dir>

		slalomB(10000, SPEED_LOW, V90_OFFSET_B);
 8008654:	222d      	movs	r2, #45	; 0x2d
 8008656:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800865a:	f242 7010 	movw	r0, #10000	; 0x2710
 800865e:	f7fd f8f3 	bl	8005848 <slalomB>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
	}
}
 8008662:	e096      	b.n	8008792 <v_L90+0x186>
	}else if(run_mode == MIDDLE){
 8008664:	4b4c      	ldr	r3, [pc, #304]	; (8008798 <v_L90+0x18c>)
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b02      	cmp	r3, #2
 800866c:	d120      	bne.n	80086b0 <v_L90+0xa4>
		slalomF(10000, SPEED_MIDDLE, V90_2_OFFSET_F, NO_WALL, NO_WALL);
 800866e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	f241 3388 	movw	r3, #5000	; 0x1388
 8008678:	223a      	movs	r2, #58	; 0x3a
 800867a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800867e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008682:	f7fc ff09 	bl	8005498 <slalomF>
		slalomR(V90_2_DEGACCEL, V90_2_OMEGA, 90, SPEED_MIDDLE);
 8008686:	f44f 7316 	mov.w	r3, #600	; 0x258
 800868a:	225a      	movs	r2, #90	; 0x5a
 800868c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008690:	f242 7010 	movw	r0, #10000	; 0x2710
 8008694:	f7fc ffb6 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008698:	2103      	movs	r1, #3
 800869a:	20fe      	movs	r0, #254	; 0xfe
 800869c:	f007 fc28 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, V90_2_OFFSET_B);
 80086a0:	2252      	movs	r2, #82	; 0x52
 80086a2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80086a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80086aa:	f7fd f8cd 	bl	8005848 <slalomB>
}
 80086ae:	e070      	b.n	8008792 <v_L90+0x186>
	}else if(run_mode == HIGH){
 80086b0:	4b39      	ldr	r3, [pc, #228]	; (8008798 <v_L90+0x18c>)
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d120      	bne.n	80086fc <v_L90+0xf0>
		slalomF(10000, SPEED_HIGH, V90_3_OFFSET_F, NO_WALL, NO_WALL);
 80086ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80086c4:	2223      	movs	r2, #35	; 0x23
 80086c6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80086ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80086ce:	f7fc fee3 	bl	8005498 <slalomF>
		slalomR(V90_3_DEGACCEL, V90_3_OMEGA, 90, SPEED_HIGH);
 80086d2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80086d6:	225a      	movs	r2, #90	; 0x5a
 80086d8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80086dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80086e0:	f7fc ff90 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80086e4:	2103      	movs	r1, #3
 80086e6:	20fe      	movs	r0, #254	; 0xfe
 80086e8:	f007 fc02 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_HIGH, V90_3_OFFSET_B);
 80086ec:	2241      	movs	r2, #65	; 0x41
 80086ee:	f44f 7148 	mov.w	r1, #800	; 0x320
 80086f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80086f6:	f7fd f8a7 	bl	8005848 <slalomB>
}
 80086fa:	e04a      	b.n	8008792 <v_L90+0x186>
	}else if(run_mode == HIGH_HIGH){
 80086fc:	4b26      	ldr	r3, [pc, #152]	; (8008798 <v_L90+0x18c>)
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b04      	cmp	r3, #4
 8008704:	d120      	bne.n	8008748 <v_L90+0x13c>
		slalomF(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_F, NO_WALL, NO_WALL);
 8008706:	f241 3388 	movw	r3, #5000	; 0x1388
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008710:	221e      	movs	r2, #30
 8008712:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008716:	f242 7010 	movw	r0, #10000	; 0x2710
 800871a:	f7fc febd 	bl	8005498 <slalomF>
		slalomR(V90_4_DEGACCEL, V90_4_OMEGA, 90, SPEED_HIGH_HIGH);
 800871e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008722:	225a      	movs	r2, #90	; 0x5a
 8008724:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008728:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800872c:	f7fc ff6a 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008730:	2103      	movs	r1, #3
 8008732:	20fe      	movs	r0, #254	; 0xfe
 8008734:	f007 fbdc 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_B);
 8008738:	221e      	movs	r2, #30
 800873a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800873e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008742:	f7fd f881 	bl	8005848 <slalomB>
}
 8008746:	e024      	b.n	8008792 <v_L90+0x186>
	}else if(run_mode == 5){
 8008748:	4b13      	ldr	r3, [pc, #76]	; (8008798 <v_L90+0x18c>)
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b05      	cmp	r3, #5
 8008750:	d11f      	bne.n	8008792 <v_L90+0x186>
		slalomF(10000, SPEED_5, V90_5_OFFSET_F, NO_WALL, NO_WALL);
 8008752:	f241 3388 	movw	r3, #5000	; 0x1388
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	f241 3388 	movw	r3, #5000	; 0x1388
 800875c:	2214      	movs	r2, #20
 800875e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008762:	f242 7010 	movw	r0, #10000	; 0x2710
 8008766:	f7fc fe97 	bl	8005498 <slalomF>
		slalomR(V90_5_DEGACCEL, V90_5_OMEGA, 90, SPEED_5);
 800876a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800876e:	225a      	movs	r2, #90	; 0x5a
 8008770:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008774:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8008778:	f7fc ff44 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800877c:	2103      	movs	r1, #3
 800877e:	20fe      	movs	r0, #254	; 0xfe
 8008780:	f007 fbb6 	bl	800fef0 <turn_dir>
		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
 8008784:	2214      	movs	r2, #20
 8008786:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800878a:	f242 7010 	movw	r0, #10000	; 0x2710
 800878e:	f7fd f85b 	bl	8005848 <slalomB>
}
 8008792:	bf00      	nop
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	20000456 	.word	0x20000456

0800879c <v_R135>:
//v_R135
// 区画中心から右に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135(void){
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80087a2:	2006      	movs	r0, #6
 80087a4:	f009 fa38 	bl	8011c18 <full_led_write>
	if(run_mode == LOW){
 80087a8:	4bc2      	ldr	r3, [pc, #776]	; (8008ab4 <v_R135+0x318>)
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d155      	bne.n	800885e <v_R135+0xc2>
		if(!MF2.FLAG.V){
 80087b2:	4bc1      	ldr	r3, [pc, #772]	; (8008ab8 <v_R135+0x31c>)
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10c      	bne.n	80087da <v_R135+0x3e>
			slalomF(10000, SPEED_LOW, V135_OFFSET_F, NO_WALL, NO_WALL);
 80087c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80087ca:	2244      	movs	r2, #68	; 0x44
 80087cc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80087d0:	f242 7010 	movw	r0, #10000	; 0x2710
 80087d4:	f7fc fe60 	bl	8005498 <slalomF>
 80087d8:	e00b      	b.n	80087f2 <v_R135+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 80087da:	f241 3388 	movw	r3, #5000	; 0x1388
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80087e4:	223a      	movs	r2, #58	; 0x3a
 80087e6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80087ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80087ee:	f7fc fe53 	bl	8005498 <slalomF>
		}
		slalomR(-V135_DEGACCEL, -V135_OMEGA, -135, SPEED_LOW);
 80087f2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80087f6:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80087fa:	49b0      	ldr	r1, [pc, #704]	; (8008abc <v_R135+0x320>)
 80087fc:	48b0      	ldr	r0, [pc, #704]	; (8008ac0 <v_R135+0x324>)
 80087fe:	f7fc ff01 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008802:	2103      	movs	r1, #3
 8008804:	2003      	movs	r0, #3
 8008806:	f007 fb73 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800880a:	4bab      	ldr	r3, [pc, #684]	; (8008ab8 <v_R135+0x31c>)
 800880c:	881b      	ldrh	r3, [r3, #0]
 800880e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008812:	b2db      	uxtb	r3, r3
 8008814:	3301      	adds	r3, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	bfb8      	it	lt
 800881e:	425b      	neglt	r3, r3
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	b2d9      	uxtb	r1, r3
 8008826:	4aa4      	ldr	r2, [pc, #656]	; (8008ab8 <v_R135+0x31c>)
 8008828:	8813      	ldrh	r3, [r2, #0]
 800882a:	f361 03c3 	bfi	r3, r1, #3, #1
 800882e:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8008830:	4ba1      	ldr	r3, [pc, #644]	; (8008ab8 <v_R135+0x31c>)
 8008832:	881b      	ldrh	r3, [r3, #0]
 8008834:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d107      	bne.n	800884e <v_R135+0xb2>
			slalomB(10000, SPEED_LOW, V135_OFFSET_VB);
 800883e:	2244      	movs	r2, #68	; 0x44
 8008840:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008844:	f242 7010 	movw	r0, #10000	; 0x2710
 8008848:	f7fc fffe 	bl	8005848 <slalomB>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
		}
	}
}
 800884c:	e187      	b.n	8008b5e <v_R135+0x3c2>
			slalomB(10000, SPEED_LOW, V135_OFFSET_B);
 800884e:	223a      	movs	r2, #58	; 0x3a
 8008850:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008854:	f242 7010 	movw	r0, #10000	; 0x2710
 8008858:	f7fc fff6 	bl	8005848 <slalomB>
}
 800885c:	e17f      	b.n	8008b5e <v_R135+0x3c2>
	}else if(run_mode == MIDDLE){
 800885e:	4b95      	ldr	r3, [pc, #596]	; (8008ab4 <v_R135+0x318>)
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	b2db      	uxtb	r3, r3
 8008864:	2b02      	cmp	r3, #2
 8008866:	d155      	bne.n	8008914 <v_R135+0x178>
		if(!MF2.FLAG.V){
 8008868:	4b93      	ldr	r3, [pc, #588]	; (8008ab8 <v_R135+0x31c>)
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d10c      	bne.n	8008890 <v_R135+0xf4>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_F, NO_WALL, NO_WALL);
 8008876:	f241 3388 	movw	r3, #5000	; 0x1388
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008880:	2246      	movs	r2, #70	; 0x46
 8008882:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008886:	f242 7010 	movw	r0, #10000	; 0x2710
 800888a:	f7fc fe05 	bl	8005498 <slalomF>
 800888e:	e00b      	b.n	80088a8 <v_R135+0x10c>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008890:	f241 3388 	movw	r3, #5000	; 0x1388
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	f241 3388 	movw	r3, #5000	; 0x1388
 800889a:	2237      	movs	r2, #55	; 0x37
 800889c:	f44f 7116 	mov.w	r1, #600	; 0x258
 80088a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80088a4:	f7fc fdf8 	bl	8005498 <slalomF>
		slalomR(-V135_2_DEGACCEL, -V135_2_OMEGA, -135, SPEED_MIDDLE);
 80088a8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80088ac:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80088b0:	4984      	ldr	r1, [pc, #528]	; (8008ac4 <v_R135+0x328>)
 80088b2:	4885      	ldr	r0, [pc, #532]	; (8008ac8 <v_R135+0x32c>)
 80088b4:	f7fc fea6 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80088b8:	2103      	movs	r1, #3
 80088ba:	2003      	movs	r0, #3
 80088bc:	f007 fb18 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80088c0:	4b7d      	ldr	r3, [pc, #500]	; (8008ab8 <v_R135+0x31c>)
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	3301      	adds	r3, #1
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	bfb8      	it	lt
 80088d4:	425b      	neglt	r3, r3
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	b2d9      	uxtb	r1, r3
 80088dc:	4a76      	ldr	r2, [pc, #472]	; (8008ab8 <v_R135+0x31c>)
 80088de:	8813      	ldrh	r3, [r2, #0]
 80088e0:	f361 03c3 	bfi	r3, r1, #3, #1
 80088e4:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80088e6:	4b74      	ldr	r3, [pc, #464]	; (8008ab8 <v_R135+0x31c>)
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d107      	bne.n	8008904 <v_R135+0x168>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB);
 80088f4:	225f      	movs	r2, #95	; 0x5f
 80088f6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80088fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80088fe:	f7fc ffa3 	bl	8005848 <slalomB>
}
 8008902:	e12c      	b.n	8008b5e <v_R135+0x3c2>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_B);
 8008904:	2250      	movs	r2, #80	; 0x50
 8008906:	f44f 7116 	mov.w	r1, #600	; 0x258
 800890a:	f242 7010 	movw	r0, #10000	; 0x2710
 800890e:	f7fc ff9b 	bl	8005848 <slalomB>
}
 8008912:	e124      	b.n	8008b5e <v_R135+0x3c2>
	}else if(run_mode == HIGH){
 8008914:	4b67      	ldr	r3, [pc, #412]	; (8008ab4 <v_R135+0x318>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b03      	cmp	r3, #3
 800891c:	d155      	bne.n	80089ca <v_R135+0x22e>
		if(!MF2.FLAG.V){
 800891e:	4b66      	ldr	r3, [pc, #408]	; (8008ab8 <v_R135+0x31c>)
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008926:	b2db      	uxtb	r3, r3
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10c      	bne.n	8008946 <v_R135+0x1aa>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_F, NO_WALL, NO_WALL);
 800892c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	f241 3388 	movw	r3, #5000	; 0x1388
 8008936:	2255      	movs	r2, #85	; 0x55
 8008938:	f44f 7148 	mov.w	r1, #800	; 0x320
 800893c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008940:	f7fc fdaa 	bl	8005498 <slalomF>
 8008944:	e00b      	b.n	800895e <v_R135+0x1c2>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 8008946:	f241 3388 	movw	r3, #5000	; 0x1388
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008950:	224b      	movs	r2, #75	; 0x4b
 8008952:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008956:	f242 7010 	movw	r0, #10000	; 0x2710
 800895a:	f7fc fd9d 	bl	8005498 <slalomF>
		slalomR(-V135_3_DEGACCEL, -V135_3_OMEGA, -135, SPEED_HIGH);
 800895e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008962:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008966:	4959      	ldr	r1, [pc, #356]	; (8008acc <v_R135+0x330>)
 8008968:	4859      	ldr	r0, [pc, #356]	; (8008ad0 <v_R135+0x334>)
 800896a:	f7fc fe4b 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800896e:	2103      	movs	r1, #3
 8008970:	2003      	movs	r0, #3
 8008972:	f007 fabd 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008976:	4b50      	ldr	r3, [pc, #320]	; (8008ab8 <v_R135+0x31c>)
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800897e:	b2db      	uxtb	r3, r3
 8008980:	3301      	adds	r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	bfb8      	it	lt
 800898a:	425b      	neglt	r3, r3
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	b2d9      	uxtb	r1, r3
 8008992:	4a49      	ldr	r2, [pc, #292]	; (8008ab8 <v_R135+0x31c>)
 8008994:	8813      	ldrh	r3, [r2, #0]
 8008996:	f361 03c3 	bfi	r3, r1, #3, #1
 800899a:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 800899c:	4b46      	ldr	r3, [pc, #280]	; (8008ab8 <v_R135+0x31c>)
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d107      	bne.n	80089ba <v_R135+0x21e>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB);
 80089aa:	2282      	movs	r2, #130	; 0x82
 80089ac:	f44f 7148 	mov.w	r1, #800	; 0x320
 80089b0:	f242 7010 	movw	r0, #10000	; 0x2710
 80089b4:	f7fc ff48 	bl	8005848 <slalomB>
}
 80089b8:	e0d1      	b.n	8008b5e <v_R135+0x3c2>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_B);
 80089ba:	2269      	movs	r2, #105	; 0x69
 80089bc:	f44f 7148 	mov.w	r1, #800	; 0x320
 80089c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80089c4:	f7fc ff40 	bl	8005848 <slalomB>
}
 80089c8:	e0c9      	b.n	8008b5e <v_R135+0x3c2>
	}else if(run_mode == HIGH_HIGH){
 80089ca:	4b3a      	ldr	r3, [pc, #232]	; (8008ab4 <v_R135+0x318>)
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b04      	cmp	r3, #4
 80089d2:	d155      	bne.n	8008a80 <v_R135+0x2e4>
		if(!MF2.FLAG.V){
 80089d4:	4b38      	ldr	r3, [pc, #224]	; (8008ab8 <v_R135+0x31c>)
 80089d6:	881b      	ldrh	r3, [r3, #0]
 80089d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10c      	bne.n	80089fc <v_R135+0x260>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_F, NO_WALL, NO_WALL);
 80089e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80089ec:	2243      	movs	r2, #67	; 0x43
 80089ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80089f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80089f6:	f7fc fd4f 	bl	8005498 <slalomF>
 80089fa:	e00b      	b.n	8008a14 <v_R135+0x278>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 80089fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a06:	2243      	movs	r2, #67	; 0x43
 8008a08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008a0c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a10:	f7fc fd42 	bl	8005498 <slalomF>
		slalomR(-V135_4_DEGACCEL, -V135_4_OMEGA, -135, SPEED_HIGH_HIGH);
 8008a14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a18:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008a1c:	492d      	ldr	r1, [pc, #180]	; (8008ad4 <v_R135+0x338>)
 8008a1e:	482e      	ldr	r0, [pc, #184]	; (8008ad8 <v_R135+0x33c>)
 8008a20:	f7fc fdf0 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008a24:	2103      	movs	r1, #3
 8008a26:	2003      	movs	r0, #3
 8008a28:	f007 fa62 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008a2c:	4b22      	ldr	r3, [pc, #136]	; (8008ab8 <v_R135+0x31c>)
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	3301      	adds	r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	bfb8      	it	lt
 8008a40:	425b      	neglt	r3, r3
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	b2d9      	uxtb	r1, r3
 8008a48:	4a1b      	ldr	r2, [pc, #108]	; (8008ab8 <v_R135+0x31c>)
 8008a4a:	8813      	ldrh	r3, [r2, #0]
 8008a4c:	f361 03c3 	bfi	r3, r1, #3, #1
 8008a50:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008a52:	4b19      	ldr	r3, [pc, #100]	; (8008ab8 <v_R135+0x31c>)
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d107      	bne.n	8008a70 <v_R135+0x2d4>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB);
 8008a60:	2232      	movs	r2, #50	; 0x32
 8008a62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008a66:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a6a:	f7fc feed 	bl	8005848 <slalomB>
}
 8008a6e:	e076      	b.n	8008b5e <v_R135+0x3c2>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_B);
 8008a70:	2232      	movs	r2, #50	; 0x32
 8008a72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008a76:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a7a:	f7fc fee5 	bl	8005848 <slalomB>
}
 8008a7e:	e06e      	b.n	8008b5e <v_R135+0x3c2>
	}else if(run_mode == 5){
 8008a80:	4b0c      	ldr	r3, [pc, #48]	; (8008ab4 <v_R135+0x318>)
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b05      	cmp	r3, #5
 8008a88:	d169      	bne.n	8008b5e <v_R135+0x3c2>
		if(!MF2.FLAG.V){
 8008a8a:	4b0b      	ldr	r3, [pc, #44]	; (8008ab8 <v_R135+0x31c>)
 8008a8c:	881b      	ldrh	r3, [r3, #0]
 8008a8e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d121      	bne.n	8008adc <v_R135+0x340>
			slalomF(10000, SPEED_5, V135_5_OFFSET_F, NO_WALL, NO_WALL);
 8008a98:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008aa2:	2228      	movs	r2, #40	; 0x28
 8008aa4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008aa8:	f242 7010 	movw	r0, #10000	; 0x2710
 8008aac:	f7fc fcf4 	bl	8005498 <slalomF>
 8008ab0:	e020      	b.n	8008af4 <v_R135+0x358>
 8008ab2:	bf00      	nop
 8008ab4:	20000456 	.word	0x20000456
 8008ab8:	20000f64 	.word	0x20000f64
 8008abc:	fffffed4 	.word	0xfffffed4
 8008ac0:	fffff448 	.word	0xfffff448
 8008ac4:	fffffe0c 	.word	0xfffffe0c
 8008ac8:	ffffec78 	.word	0xffffec78
 8008acc:	fffffce0 	.word	0xfffffce0
 8008ad0:	ffffe0c0 	.word	0xffffe0c0
 8008ad4:	fffffc18 	.word	0xfffffc18
 8008ad8:	ffffd8f0 	.word	0xffffd8f0
			slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008adc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ae6:	2243      	movs	r2, #67	; 0x43
 8008ae8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008aec:	f242 7010 	movw	r0, #10000	; 0x2710
 8008af0:	f7fc fcd2 	bl	8005498 <slalomF>
		slalomR(-V135_5_DEGACCEL, -V135_5_OMEGA, -135, SPEED_5);
 8008af4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008af8:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008afc:	4919      	ldr	r1, [pc, #100]	; (8008b64 <v_R135+0x3c8>)
 8008afe:	481a      	ldr	r0, [pc, #104]	; (8008b68 <v_R135+0x3cc>)
 8008b00:	f7fc fd80 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008b04:	2103      	movs	r1, #3
 8008b06:	2003      	movs	r0, #3
 8008b08:	f007 f9f2 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008b0c:	4b17      	ldr	r3, [pc, #92]	; (8008b6c <v_R135+0x3d0>)
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	3301      	adds	r3, #1
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f003 0301 	and.w	r3, r3, #1
 8008b1e:	bfb8      	it	lt
 8008b20:	425b      	neglt	r3, r3
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	b2d9      	uxtb	r1, r3
 8008b28:	4a10      	ldr	r2, [pc, #64]	; (8008b6c <v_R135+0x3d0>)
 8008b2a:	8813      	ldrh	r3, [r2, #0]
 8008b2c:	f361 03c3 	bfi	r3, r1, #3, #1
 8008b30:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008b32:	4b0e      	ldr	r3, [pc, #56]	; (8008b6c <v_R135+0x3d0>)
 8008b34:	881b      	ldrh	r3, [r3, #0]
 8008b36:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d107      	bne.n	8008b50 <v_R135+0x3b4>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
 8008b40:	2232      	movs	r2, #50	; 0x32
 8008b42:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008b46:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b4a:	f7fc fe7d 	bl	8005848 <slalomB>
}
 8008b4e:	e006      	b.n	8008b5e <v_R135+0x3c2>
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
 8008b50:	2219      	movs	r2, #25
 8008b52:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008b56:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b5a:	f7fc fe75 	bl	8005848 <slalomB>
}
 8008b5e:	bf00      	nop
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	fffffc18 	.word	0xfffffc18
 8008b68:	ffffd120 	.word	0xffffd120
 8008b6c:	20000f64 	.word	0x20000f64

08008b70 <v_L135>:
//v_L135
// 区画中心から左に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135(void){
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8008b76:	2005      	movs	r0, #5
 8008b78:	f009 f84e 	bl	8011c18 <full_led_write>
	if(run_mode == LOW){
 8008b7c:	4bc4      	ldr	r3, [pc, #784]	; (8008e90 <v_L135+0x320>)
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d156      	bne.n	8008c34 <v_L135+0xc4>
		if(!MF2.FLAG.V){
 8008b86:	4bc3      	ldr	r3, [pc, #780]	; (8008e94 <v_L135+0x324>)
 8008b88:	881b      	ldrh	r3, [r3, #0]
 8008b8a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10c      	bne.n	8008bae <v_L135+0x3e>
			slalomF(10000, SPEED_LOW, V135_OFFSET_F, NO_WALL, NO_WALL);
 8008b94:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b98:	9300      	str	r3, [sp, #0]
 8008b9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b9e:	2244      	movs	r2, #68	; 0x44
 8008ba0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008ba4:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ba8:	f7fc fc76 	bl	8005498 <slalomF>
 8008bac:	e00b      	b.n	8008bc6 <v_L135+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 8008bae:	f241 3388 	movw	r3, #5000	; 0x1388
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8008bb8:	223a      	movs	r2, #58	; 0x3a
 8008bba:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008bbe:	f242 7010 	movw	r0, #10000	; 0x2710
 8008bc2:	f7fc fc69 	bl	8005498 <slalomF>
		}
		slalomR(V135_DEGACCEL, V135_OMEGA, 135, SPEED_LOW);
 8008bc6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008bca:	2287      	movs	r2, #135	; 0x87
 8008bcc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008bd0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008bd4:	f7fc fd16 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008bd8:	2103      	movs	r1, #3
 8008bda:	20fd      	movs	r0, #253	; 0xfd
 8008bdc:	f007 f988 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008be0:	4bac      	ldr	r3, [pc, #688]	; (8008e94 <v_L135+0x324>)
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	3301      	adds	r3, #1
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	bfb8      	it	lt
 8008bf4:	425b      	neglt	r3, r3
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	b2d9      	uxtb	r1, r3
 8008bfc:	4aa5      	ldr	r2, [pc, #660]	; (8008e94 <v_L135+0x324>)
 8008bfe:	8813      	ldrh	r3, [r2, #0]
 8008c00:	f361 03c3 	bfi	r3, r1, #3, #1
 8008c04:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8008c06:	4ba3      	ldr	r3, [pc, #652]	; (8008e94 <v_L135+0x324>)
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d107      	bne.n	8008c24 <v_L135+0xb4>
			slalomB(10000, SPEED_LOW, V135_OFFSET_VB);
 8008c14:	2244      	movs	r2, #68	; 0x44
 8008c16:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008c1a:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c1e:	f7fc fe13 	bl	8005848 <slalomB>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
		}
	}
}
 8008c22:	e17b      	b.n	8008f1c <v_L135+0x3ac>
			slalomB(10000, SPEED_LOW, V135_OFFSET_B);
 8008c24:	223a      	movs	r2, #58	; 0x3a
 8008c26:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008c2a:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c2e:	f7fc fe0b 	bl	8005848 <slalomB>
}
 8008c32:	e173      	b.n	8008f1c <v_L135+0x3ac>
	}else if(run_mode == MIDDLE){
 8008c34:	4b96      	ldr	r3, [pc, #600]	; (8008e90 <v_L135+0x320>)
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d156      	bne.n	8008cec <v_L135+0x17c>
		if(!MF2.FLAG.V){
 8008c3e:	4b95      	ldr	r3, [pc, #596]	; (8008e94 <v_L135+0x324>)
 8008c40:	881b      	ldrh	r3, [r3, #0]
 8008c42:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10c      	bne.n	8008c66 <v_L135+0xf6>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_F, NO_WALL, NO_WALL);
 8008c4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c56:	2246      	movs	r2, #70	; 0x46
 8008c58:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008c5c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c60:	f7fc fc1a 	bl	8005498 <slalomF>
 8008c64:	e00b      	b.n	8008c7e <v_L135+0x10e>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008c66:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c70:	2237      	movs	r2, #55	; 0x37
 8008c72:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008c76:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c7a:	f7fc fc0d 	bl	8005498 <slalomF>
		slalomR(V135_2_DEGACCEL, V135_2_OMEGA, 135, SPEED_MIDDLE);
 8008c7e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008c82:	2287      	movs	r2, #135	; 0x87
 8008c84:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008c88:	f241 3088 	movw	r0, #5000	; 0x1388
 8008c8c:	f7fc fcba 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008c90:	2103      	movs	r1, #3
 8008c92:	20fd      	movs	r0, #253	; 0xfd
 8008c94:	f007 f92c 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008c98:	4b7e      	ldr	r3, [pc, #504]	; (8008e94 <v_L135+0x324>)
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	bfb8      	it	lt
 8008cac:	425b      	neglt	r3, r3
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	b2d9      	uxtb	r1, r3
 8008cb4:	4a77      	ldr	r2, [pc, #476]	; (8008e94 <v_L135+0x324>)
 8008cb6:	8813      	ldrh	r3, [r2, #0]
 8008cb8:	f361 03c3 	bfi	r3, r1, #3, #1
 8008cbc:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008cbe:	4b75      	ldr	r3, [pc, #468]	; (8008e94 <v_L135+0x324>)
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d107      	bne.n	8008cdc <v_L135+0x16c>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB);
 8008ccc:	225f      	movs	r2, #95	; 0x5f
 8008cce:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008cd2:	f242 7010 	movw	r0, #10000	; 0x2710
 8008cd6:	f7fc fdb7 	bl	8005848 <slalomB>
}
 8008cda:	e11f      	b.n	8008f1c <v_L135+0x3ac>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_B);
 8008cdc:	2250      	movs	r2, #80	; 0x50
 8008cde:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008ce2:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ce6:	f7fc fdaf 	bl	8005848 <slalomB>
}
 8008cea:	e117      	b.n	8008f1c <v_L135+0x3ac>
	}else if(run_mode == HIGH){
 8008cec:	4b68      	ldr	r3, [pc, #416]	; (8008e90 <v_L135+0x320>)
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b03      	cmp	r3, #3
 8008cf4:	d156      	bne.n	8008da4 <v_L135+0x234>
		if(!MF2.FLAG.V){
 8008cf6:	4b67      	ldr	r3, [pc, #412]	; (8008e94 <v_L135+0x324>)
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10c      	bne.n	8008d1e <v_L135+0x1ae>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_F, NO_WALL, NO_WALL);
 8008d04:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d0e:	2255      	movs	r2, #85	; 0x55
 8008d10:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008d14:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d18:	f7fc fbbe 	bl	8005498 <slalomF>
 8008d1c:	e00b      	b.n	8008d36 <v_L135+0x1c6>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 8008d1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d28:	224b      	movs	r2, #75	; 0x4b
 8008d2a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008d2e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d32:	f7fc fbb1 	bl	8005498 <slalomF>
		slalomR(V135_3_DEGACCEL, V135_3_OMEGA, 135, SPEED_HIGH);
 8008d36:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008d3a:	2287      	movs	r2, #135	; 0x87
 8008d3c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008d40:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8008d44:	f7fc fc5e 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008d48:	2103      	movs	r1, #3
 8008d4a:	20fd      	movs	r0, #253	; 0xfd
 8008d4c:	f007 f8d0 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008d50:	4b50      	ldr	r3, [pc, #320]	; (8008e94 <v_L135+0x324>)
 8008d52:	881b      	ldrh	r3, [r3, #0]
 8008d54:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f003 0301 	and.w	r3, r3, #1
 8008d62:	bfb8      	it	lt
 8008d64:	425b      	neglt	r3, r3
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	b2d9      	uxtb	r1, r3
 8008d6c:	4a49      	ldr	r2, [pc, #292]	; (8008e94 <v_L135+0x324>)
 8008d6e:	8813      	ldrh	r3, [r2, #0]
 8008d70:	f361 03c3 	bfi	r3, r1, #3, #1
 8008d74:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008d76:	4b47      	ldr	r3, [pc, #284]	; (8008e94 <v_L135+0x324>)
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d107      	bne.n	8008d94 <v_L135+0x224>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB);
 8008d84:	2282      	movs	r2, #130	; 0x82
 8008d86:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008d8a:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d8e:	f7fc fd5b 	bl	8005848 <slalomB>
}
 8008d92:	e0c3      	b.n	8008f1c <v_L135+0x3ac>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_B);
 8008d94:	2269      	movs	r2, #105	; 0x69
 8008d96:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008d9a:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d9e:	f7fc fd53 	bl	8005848 <slalomB>
}
 8008da2:	e0bb      	b.n	8008f1c <v_L135+0x3ac>
	}else if(run_mode == HIGH_HIGH){
 8008da4:	4b3a      	ldr	r3, [pc, #232]	; (8008e90 <v_L135+0x320>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b04      	cmp	r3, #4
 8008dac:	d156      	bne.n	8008e5c <v_L135+0x2ec>
		if(!MF2.FLAG.V){
 8008dae:	4b39      	ldr	r3, [pc, #228]	; (8008e94 <v_L135+0x324>)
 8008db0:	881b      	ldrh	r3, [r3, #0]
 8008db2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10c      	bne.n	8008dd6 <v_L135+0x266>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_F, NO_WALL, NO_WALL);
 8008dbc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	f241 3388 	movw	r3, #5000	; 0x1388
 8008dc6:	2243      	movs	r2, #67	; 0x43
 8008dc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008dcc:	f242 7010 	movw	r0, #10000	; 0x2710
 8008dd0:	f7fc fb62 	bl	8005498 <slalomF>
 8008dd4:	e00b      	b.n	8008dee <v_L135+0x27e>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 8008dd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008de0:	2243      	movs	r2, #67	; 0x43
 8008de2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008de6:	f242 7010 	movw	r0, #10000	; 0x2710
 8008dea:	f7fc fb55 	bl	8005498 <slalomF>
		slalomR(V135_4_DEGACCEL, V135_4_OMEGA, 135, SPEED_HIGH_HIGH);
 8008dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008df2:	2287      	movs	r2, #135	; 0x87
 8008df4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008df8:	f242 7010 	movw	r0, #10000	; 0x2710
 8008dfc:	f7fc fc02 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008e00:	2103      	movs	r1, #3
 8008e02:	20fd      	movs	r0, #253	; 0xfd
 8008e04:	f007 f874 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008e08:	4b22      	ldr	r3, [pc, #136]	; (8008e94 <v_L135+0x324>)
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	3301      	adds	r3, #1
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	bfb8      	it	lt
 8008e1c:	425b      	neglt	r3, r3
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	b2d9      	uxtb	r1, r3
 8008e24:	4a1b      	ldr	r2, [pc, #108]	; (8008e94 <v_L135+0x324>)
 8008e26:	8813      	ldrh	r3, [r2, #0]
 8008e28:	f361 03c3 	bfi	r3, r1, #3, #1
 8008e2c:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008e2e:	4b19      	ldr	r3, [pc, #100]	; (8008e94 <v_L135+0x324>)
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d107      	bne.n	8008e4c <v_L135+0x2dc>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB);
 8008e3c:	2232      	movs	r2, #50	; 0x32
 8008e3e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008e42:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e46:	f7fc fcff 	bl	8005848 <slalomB>
}
 8008e4a:	e067      	b.n	8008f1c <v_L135+0x3ac>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_B);
 8008e4c:	2232      	movs	r2, #50	; 0x32
 8008e4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008e52:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e56:	f7fc fcf7 	bl	8005848 <slalomB>
}
 8008e5a:	e05f      	b.n	8008f1c <v_L135+0x3ac>
	}else if(run_mode == 5){
 8008e5c:	4b0c      	ldr	r3, [pc, #48]	; (8008e90 <v_L135+0x320>)
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b05      	cmp	r3, #5
 8008e64:	d15a      	bne.n	8008f1c <v_L135+0x3ac>
		if(!MF2.FLAG.V){
 8008e66:	4b0b      	ldr	r3, [pc, #44]	; (8008e94 <v_L135+0x324>)
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d111      	bne.n	8008e98 <v_L135+0x328>
			slalomF(10000, SPEED_5, V135_5_OFFSET_F, NO_WALL, NO_WALL);
 8008e74:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e7e:	2228      	movs	r2, #40	; 0x28
 8008e80:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008e84:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e88:	f7fc fb06 	bl	8005498 <slalomF>
 8008e8c:	e010      	b.n	8008eb0 <v_L135+0x340>
 8008e8e:	bf00      	nop
 8008e90:	20000456 	.word	0x20000456
 8008e94:	20000f64 	.word	0x20000f64
			slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008e98:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ea2:	2243      	movs	r2, #67	; 0x43
 8008ea4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008ea8:	f242 7010 	movw	r0, #10000	; 0x2710
 8008eac:	f7fc faf4 	bl	8005498 <slalomF>
		slalomR(V135_5_DEGACCEL, V135_5_OMEGA, 135, SPEED_5);
 8008eb0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008eb4:	2287      	movs	r2, #135	; 0x87
 8008eb6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008eba:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8008ebe:	f7fc fba1 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008ec2:	2103      	movs	r1, #3
 8008ec4:	20fd      	movs	r0, #253	; 0xfd
 8008ec6:	f007 f813 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008eca:	4b16      	ldr	r3, [pc, #88]	; (8008f24 <v_L135+0x3b4>)
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f003 0301 	and.w	r3, r3, #1
 8008edc:	bfb8      	it	lt
 8008ede:	425b      	neglt	r3, r3
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	b2d9      	uxtb	r1, r3
 8008ee6:	4a0f      	ldr	r2, [pc, #60]	; (8008f24 <v_L135+0x3b4>)
 8008ee8:	8813      	ldrh	r3, [r2, #0]
 8008eea:	f361 03c3 	bfi	r3, r1, #3, #1
 8008eee:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008ef0:	4b0c      	ldr	r3, [pc, #48]	; (8008f24 <v_L135+0x3b4>)
 8008ef2:	881b      	ldrh	r3, [r3, #0]
 8008ef4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d107      	bne.n	8008f0e <v_L135+0x39e>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
 8008efe:	2232      	movs	r2, #50	; 0x32
 8008f00:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008f04:	f242 7010 	movw	r0, #10000	; 0x2710
 8008f08:	f7fc fc9e 	bl	8005848 <slalomB>
}
 8008f0c:	e006      	b.n	8008f1c <v_L135+0x3ac>
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
 8008f0e:	2219      	movs	r2, #25
 8008f10:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008f14:	f242 7010 	movw	r0, #10000	; 0x2710
 8008f18:	f7fc fc96 	bl	8005848 <slalomB>
}
 8008f1c:	bf00      	nop
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	20000f64 	.word	0x20000f64

08008f28 <v_R135D>:
//v_R135D
// 区画中心から右に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135D(void){
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8008f2e:	2006      	movs	r0, #6
 8008f30:	f008 fe72 	bl	8011c18 <full_led_write>
	if(run_mode == LOW){
 8008f34:	4b9e      	ldr	r3, [pc, #632]	; (80091b0 <v_R135D+0x288>)
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d139      	bne.n	8008fb2 <v_R135D+0x8a>
		slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 8008f3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f48:	223a      	movs	r2, #58	; 0x3a
 8008f4a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008f4e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008f52:	f7fc faa1 	bl	8005498 <slalomF>
		slalomR(-V135_DEGACCEL, -V135_OMEGA, -135, SPEED_LOW);
 8008f56:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008f5a:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008f5e:	4995      	ldr	r1, [pc, #596]	; (80091b4 <v_R135D+0x28c>)
 8008f60:	4895      	ldr	r0, [pc, #596]	; (80091b8 <v_R135D+0x290>)
 8008f62:	f7fc fb4f 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008f66:	2103      	movs	r1, #3
 8008f68:	2003      	movs	r0, #3
 8008f6a:	f006 ffc1 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008f6e:	4b93      	ldr	r3, [pc, #588]	; (80091bc <v_R135D+0x294>)
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	3301      	adds	r3, #1
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f003 0301 	and.w	r3, r3, #1
 8008f80:	bfb8      	it	lt
 8008f82:	425b      	neglt	r3, r3
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	b2d9      	uxtb	r1, r3
 8008f8a:	4a8c      	ldr	r2, [pc, #560]	; (80091bc <v_R135D+0x294>)
 8008f8c:	8813      	ldrh	r3, [r2, #0]
 8008f8e:	f361 03c3 	bfi	r3, r1, #3, #1
 8008f92:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V135_OFFSET_VB-30);
 8008f94:	2226      	movs	r2, #38	; 0x26
 8008f96:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008f9a:	f242 7010 	movw	r0, #10000	; 0x2710
 8008f9e:	f7fc fc53 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 8008fa2:	231e      	movs	r3, #30
 8008fa4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008fa8:	211e      	movs	r1, #30
 8008faa:	4885      	ldr	r0, [pc, #532]	; (80091c0 <v_R135D+0x298>)
 8008fac:	f7fc f89c 	bl	80050e8 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8008fb0:	e0fa      	b.n	80091a8 <v_R135D+0x280>
	}else if(run_mode == MIDDLE){
 8008fb2:	4b7f      	ldr	r3, [pc, #508]	; (80091b0 <v_R135D+0x288>)
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d139      	bne.n	8009030 <v_R135D+0x108>
		slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008fbc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	f241 3388 	movw	r3, #5000	; 0x1388
 8008fc6:	2237      	movs	r2, #55	; 0x37
 8008fc8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008fcc:	f242 7010 	movw	r0, #10000	; 0x2710
 8008fd0:	f7fc fa62 	bl	8005498 <slalomF>
		slalomR(-V135_2_DEGACCEL, -V135_2_OMEGA, -135, SPEED_MIDDLE);
 8008fd4:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008fd8:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008fdc:	4979      	ldr	r1, [pc, #484]	; (80091c4 <v_R135D+0x29c>)
 8008fde:	487a      	ldr	r0, [pc, #488]	; (80091c8 <v_R135D+0x2a0>)
 8008fe0:	f7fc fb10 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008fe4:	2103      	movs	r1, #3
 8008fe6:	2003      	movs	r0, #3
 8008fe8:	f006 ff82 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008fec:	4b73      	ldr	r3, [pc, #460]	; (80091bc <v_R135D+0x294>)
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	bfb8      	it	lt
 8009000:	425b      	neglt	r3, r3
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	b2d9      	uxtb	r1, r3
 8009008:	4a6c      	ldr	r2, [pc, #432]	; (80091bc <v_R135D+0x294>)
 800900a:	8813      	ldrh	r3, [r2, #0]
 800900c:	f361 03c3 	bfi	r3, r1, #3, #1
 8009010:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB-30);
 8009012:	2241      	movs	r2, #65	; 0x41
 8009014:	f44f 7116 	mov.w	r1, #600	; 0x258
 8009018:	f242 7010 	movw	r0, #10000	; 0x2710
 800901c:	f7fc fc14 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 8009020:	231e      	movs	r3, #30
 8009022:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009026:	211e      	movs	r1, #30
 8009028:	4865      	ldr	r0, [pc, #404]	; (80091c0 <v_R135D+0x298>)
 800902a:	f7fc f85d 	bl	80050e8 <driveD>
}
 800902e:	e0bb      	b.n	80091a8 <v_R135D+0x280>
	}else if(run_mode == HIGH){
 8009030:	4b5f      	ldr	r3, [pc, #380]	; (80091b0 <v_R135D+0x288>)
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b03      	cmp	r3, #3
 8009038:	d139      	bne.n	80090ae <v_R135D+0x186>
		slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 800903a:	f241 3388 	movw	r3, #5000	; 0x1388
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	f241 3388 	movw	r3, #5000	; 0x1388
 8009044:	224b      	movs	r2, #75	; 0x4b
 8009046:	f44f 7148 	mov.w	r1, #800	; 0x320
 800904a:	f242 7010 	movw	r0, #10000	; 0x2710
 800904e:	f7fc fa23 	bl	8005498 <slalomF>
		slalomR(-V135_3_DEGACCEL, -V135_3_OMEGA, -135, SPEED_HIGH);
 8009052:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009056:	f06f 0286 	mvn.w	r2, #134	; 0x86
 800905a:	495c      	ldr	r1, [pc, #368]	; (80091cc <v_R135D+0x2a4>)
 800905c:	485c      	ldr	r0, [pc, #368]	; (80091d0 <v_R135D+0x2a8>)
 800905e:	f7fc fad1 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009062:	2103      	movs	r1, #3
 8009064:	2003      	movs	r0, #3
 8009066:	f006 ff43 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800906a:	4b54      	ldr	r3, [pc, #336]	; (80091bc <v_R135D+0x294>)
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009072:	b2db      	uxtb	r3, r3
 8009074:	3301      	adds	r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	bfb8      	it	lt
 800907e:	425b      	neglt	r3, r3
 8009080:	f003 0301 	and.w	r3, r3, #1
 8009084:	b2d9      	uxtb	r1, r3
 8009086:	4a4d      	ldr	r2, [pc, #308]	; (80091bc <v_R135D+0x294>)
 8009088:	8813      	ldrh	r3, [r2, #0]
 800908a:	f361 03c3 	bfi	r3, r1, #3, #1
 800908e:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB-30);
 8009090:	2264      	movs	r2, #100	; 0x64
 8009092:	f44f 7148 	mov.w	r1, #800	; 0x320
 8009096:	f242 7010 	movw	r0, #10000	; 0x2710
 800909a:	f7fc fbd5 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 800909e:	231e      	movs	r3, #30
 80090a0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80090a4:	211e      	movs	r1, #30
 80090a6:	4846      	ldr	r0, [pc, #280]	; (80091c0 <v_R135D+0x298>)
 80090a8:	f7fc f81e 	bl	80050e8 <driveD>
}
 80090ac:	e07c      	b.n	80091a8 <v_R135D+0x280>
	}else if(run_mode == HIGH_HIGH){
 80090ae:	4b40      	ldr	r3, [pc, #256]	; (80091b0 <v_R135D+0x288>)
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	2b04      	cmp	r3, #4
 80090b6:	d139      	bne.n	800912c <v_R135D+0x204>
		slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 80090b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	f241 3388 	movw	r3, #5000	; 0x1388
 80090c2:	2243      	movs	r2, #67	; 0x43
 80090c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80090c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80090cc:	f7fc f9e4 	bl	8005498 <slalomF>
		slalomR(-V135_4_DEGACCEL, -V135_4_OMEGA, -135, SPEED_HIGH);
 80090d0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80090d4:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80090d8:	493e      	ldr	r1, [pc, #248]	; (80091d4 <v_R135D+0x2ac>)
 80090da:	483f      	ldr	r0, [pc, #252]	; (80091d8 <v_R135D+0x2b0>)
 80090dc:	f7fc fa92 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80090e0:	2103      	movs	r1, #3
 80090e2:	2003      	movs	r0, #3
 80090e4:	f006 ff04 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80090e8:	4b34      	ldr	r3, [pc, #208]	; (80091bc <v_R135D+0x294>)
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	3301      	adds	r3, #1
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	bfb8      	it	lt
 80090fc:	425b      	neglt	r3, r3
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	b2d9      	uxtb	r1, r3
 8009104:	4a2d      	ldr	r2, [pc, #180]	; (80091bc <v_R135D+0x294>)
 8009106:	8813      	ldrh	r3, [r2, #0]
 8009108:	f361 03c3 	bfi	r3, r1, #3, #1
 800910c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB-30);
 800910e:	2214      	movs	r2, #20
 8009110:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009114:	f242 7010 	movw	r0, #10000	; 0x2710
 8009118:	f7fc fb96 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH_HIGH, 30);
 800911c:	231e      	movs	r3, #30
 800911e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009122:	211e      	movs	r1, #30
 8009124:	4826      	ldr	r0, [pc, #152]	; (80091c0 <v_R135D+0x298>)
 8009126:	f7fb ffdf 	bl	80050e8 <driveD>
}
 800912a:	e03d      	b.n	80091a8 <v_R135D+0x280>
	}else if(run_mode == 5){
 800912c:	4b20      	ldr	r3, [pc, #128]	; (80091b0 <v_R135D+0x288>)
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b05      	cmp	r3, #5
 8009134:	d138      	bne.n	80091a8 <v_R135D+0x280>
		slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8009136:	f241 3388 	movw	r3, #5000	; 0x1388
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009140:	2243      	movs	r2, #67	; 0x43
 8009142:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8009146:	f242 7010 	movw	r0, #10000	; 0x2710
 800914a:	f7fc f9a5 	bl	8005498 <slalomF>
		slalomR(-V135_5_DEGACCEL, -V135_5_OMEGA, -135, SPEED_5);
 800914e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8009152:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8009156:	491f      	ldr	r1, [pc, #124]	; (80091d4 <v_R135D+0x2ac>)
 8009158:	4820      	ldr	r0, [pc, #128]	; (80091dc <v_R135D+0x2b4>)
 800915a:	f7fc fa53 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800915e:	2103      	movs	r1, #3
 8009160:	2003      	movs	r0, #3
 8009162:	f006 fec5 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009166:	4b15      	ldr	r3, [pc, #84]	; (80091bc <v_R135D+0x294>)
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800916e:	b2db      	uxtb	r3, r3
 8009170:	3301      	adds	r3, #1
 8009172:	2b00      	cmp	r3, #0
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	bfb8      	it	lt
 800917a:	425b      	neglt	r3, r3
 800917c:	f003 0301 	and.w	r3, r3, #1
 8009180:	b2d9      	uxtb	r1, r3
 8009182:	4a0e      	ldr	r2, [pc, #56]	; (80091bc <v_R135D+0x294>)
 8009184:	8813      	ldrh	r3, [r2, #0]
 8009186:	f361 03c3 	bfi	r3, r1, #3, #1
 800918a:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
 800918c:	2214      	movs	r2, #20
 800918e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8009192:	f242 7010 	movw	r0, #10000	; 0x2710
 8009196:	f7fc fb57 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 800919a:	231e      	movs	r3, #30
 800919c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80091a0:	211e      	movs	r1, #30
 80091a2:	4807      	ldr	r0, [pc, #28]	; (80091c0 <v_R135D+0x298>)
 80091a4:	f7fb ffa0 	bl	80050e8 <driveD>
}
 80091a8:	bf00      	nop
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20000456 	.word	0x20000456
 80091b4:	fffffed4 	.word	0xfffffed4
 80091b8:	fffff448 	.word	0xfffff448
 80091bc:	20000f64 	.word	0x20000f64
 80091c0:	ffff8ad0 	.word	0xffff8ad0
 80091c4:	fffffe0c 	.word	0xfffffe0c
 80091c8:	ffffec78 	.word	0xffffec78
 80091cc:	fffffce0 	.word	0xfffffce0
 80091d0:	ffffe0c0 	.word	0xffffe0c0
 80091d4:	fffffc18 	.word	0xfffffc18
 80091d8:	ffffd8f0 	.word	0xffffd8f0
 80091dc:	ffffd120 	.word	0xffffd120

080091e0 <v_L135D>:
//v_L135D
// 区画中心から左に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135D(void){
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 80091e6:	2005      	movs	r0, #5
 80091e8:	f008 fd16 	bl	8011c18 <full_led_write>
	if(run_mode == LOW){
 80091ec:	4ba0      	ldr	r3, [pc, #640]	; (8009470 <v_L135D+0x290>)
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d13a      	bne.n	800926c <v_L135D+0x8c>
		slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 80091f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8009200:	223a      	movs	r2, #58	; 0x3a
 8009202:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009206:	f242 7010 	movw	r0, #10000	; 0x2710
 800920a:	f7fc f945 	bl	8005498 <slalomF>
		slalomR(V135_DEGACCEL, V135_OMEGA, 135, SPEED_LOW);
 800920e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009212:	2287      	movs	r2, #135	; 0x87
 8009214:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8009218:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800921c:	f7fc f9f2 	bl	8005604 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009220:	2103      	movs	r1, #3
 8009222:	20fd      	movs	r0, #253	; 0xfd
 8009224:	f006 fe64 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009228:	4b92      	ldr	r3, [pc, #584]	; (8009474 <v_L135D+0x294>)
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009230:	b2db      	uxtb	r3, r3
 8009232:	3301      	adds	r3, #1
 8009234:	2b00      	cmp	r3, #0
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	bfb8      	it	lt
 800923c:	425b      	neglt	r3, r3
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	b2d9      	uxtb	r1, r3
 8009244:	4a8b      	ldr	r2, [pc, #556]	; (8009474 <v_L135D+0x294>)
 8009246:	8813      	ldrh	r3, [r2, #0]
 8009248:	f361 03c3 	bfi	r3, r1, #3, #1
 800924c:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V135_OFFSET_VB-30);
 800924e:	2226      	movs	r2, #38	; 0x26
 8009250:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009254:	f242 7010 	movw	r0, #10000	; 0x2710
 8009258:	f7fc faf6 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 800925c:	231e      	movs	r3, #30
 800925e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009262:	211e      	movs	r1, #30
 8009264:	4884      	ldr	r0, [pc, #528]	; (8009478 <v_L135D+0x298>)
 8009266:	f7fb ff3f 	bl	80050e8 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 800926a:	e0fe      	b.n	800946a <v_L135D+0x28a>
	}else if(run_mode == MIDDLE){
 800926c:	4b80      	ldr	r3, [pc, #512]	; (8009470 <v_L135D+0x290>)
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b02      	cmp	r3, #2
 8009274:	d13a      	bne.n	80092ec <v_L135D+0x10c>
		slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8009276:	f241 3388 	movw	r3, #5000	; 0x1388
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009280:	2237      	movs	r2, #55	; 0x37
 8009282:	f44f 7116 	mov.w	r1, #600	; 0x258
 8009286:	f242 7010 	movw	r0, #10000	; 0x2710
 800928a:	f7fc f905 	bl	8005498 <slalomF>
		slalomR(V135_2_DEGACCEL, V135_2_OMEGA, 135, SPEED_MIDDLE);
 800928e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009292:	2287      	movs	r2, #135	; 0x87
 8009294:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009298:	f241 3088 	movw	r0, #5000	; 0x1388
 800929c:	f7fc f9b2 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80092a0:	2103      	movs	r1, #3
 80092a2:	20fd      	movs	r0, #253	; 0xfd
 80092a4:	f006 fe24 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80092a8:	4b72      	ldr	r3, [pc, #456]	; (8009474 <v_L135D+0x294>)
 80092aa:	881b      	ldrh	r3, [r3, #0]
 80092ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	3301      	adds	r3, #1
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f003 0301 	and.w	r3, r3, #1
 80092ba:	bfb8      	it	lt
 80092bc:	425b      	neglt	r3, r3
 80092be:	f003 0301 	and.w	r3, r3, #1
 80092c2:	b2d9      	uxtb	r1, r3
 80092c4:	4a6b      	ldr	r2, [pc, #428]	; (8009474 <v_L135D+0x294>)
 80092c6:	8813      	ldrh	r3, [r2, #0]
 80092c8:	f361 03c3 	bfi	r3, r1, #3, #1
 80092cc:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB-30);
 80092ce:	2241      	movs	r2, #65	; 0x41
 80092d0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80092d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80092d8:	f7fc fab6 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 80092dc:	231e      	movs	r3, #30
 80092de:	f44f 7216 	mov.w	r2, #600	; 0x258
 80092e2:	211e      	movs	r1, #30
 80092e4:	4864      	ldr	r0, [pc, #400]	; (8009478 <v_L135D+0x298>)
 80092e6:	f7fb feff 	bl	80050e8 <driveD>
}
 80092ea:	e0be      	b.n	800946a <v_L135D+0x28a>
	}else if(run_mode == HIGH){
 80092ec:	4b60      	ldr	r3, [pc, #384]	; (8009470 <v_L135D+0x290>)
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b03      	cmp	r3, #3
 80092f4:	d13a      	bne.n	800936c <v_L135D+0x18c>
		slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 80092f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8009300:	224b      	movs	r2, #75	; 0x4b
 8009302:	f44f 7148 	mov.w	r1, #800	; 0x320
 8009306:	f242 7010 	movw	r0, #10000	; 0x2710
 800930a:	f7fc f8c5 	bl	8005498 <slalomF>
		slalomR(V135_3_DEGACCEL, V135_3_OMEGA, 135, SPEED_HIGH);
 800930e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009312:	2287      	movs	r2, #135	; 0x87
 8009314:	f44f 7148 	mov.w	r1, #800	; 0x320
 8009318:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800931c:	f7fc f972 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009320:	2103      	movs	r1, #3
 8009322:	20fd      	movs	r0, #253	; 0xfd
 8009324:	f006 fde4 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009328:	4b52      	ldr	r3, [pc, #328]	; (8009474 <v_L135D+0x294>)
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009330:	b2db      	uxtb	r3, r3
 8009332:	3301      	adds	r3, #1
 8009334:	2b00      	cmp	r3, #0
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	bfb8      	it	lt
 800933c:	425b      	neglt	r3, r3
 800933e:	f003 0301 	and.w	r3, r3, #1
 8009342:	b2d9      	uxtb	r1, r3
 8009344:	4a4b      	ldr	r2, [pc, #300]	; (8009474 <v_L135D+0x294>)
 8009346:	8813      	ldrh	r3, [r2, #0]
 8009348:	f361 03c3 	bfi	r3, r1, #3, #1
 800934c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB-30);
 800934e:	2264      	movs	r2, #100	; 0x64
 8009350:	f44f 7148 	mov.w	r1, #800	; 0x320
 8009354:	f242 7010 	movw	r0, #10000	; 0x2710
 8009358:	f7fc fa76 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 800935c:	231e      	movs	r3, #30
 800935e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009362:	211e      	movs	r1, #30
 8009364:	4844      	ldr	r0, [pc, #272]	; (8009478 <v_L135D+0x298>)
 8009366:	f7fb febf 	bl	80050e8 <driveD>
}
 800936a:	e07e      	b.n	800946a <v_L135D+0x28a>
	}else if(run_mode == HIGH_HIGH){
 800936c:	4b40      	ldr	r3, [pc, #256]	; (8009470 <v_L135D+0x290>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b04      	cmp	r3, #4
 8009374:	d13a      	bne.n	80093ec <v_L135D+0x20c>
		slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 8009376:	f241 3388 	movw	r3, #5000	; 0x1388
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009380:	2243      	movs	r2, #67	; 0x43
 8009382:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009386:	f242 7010 	movw	r0, #10000	; 0x2710
 800938a:	f7fc f885 	bl	8005498 <slalomF>
		slalomR(V135_4_DEGACCEL, V135_4_OMEGA, 135, SPEED_HIGH_HIGH);
 800938e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009392:	2287      	movs	r2, #135	; 0x87
 8009394:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009398:	f242 7010 	movw	r0, #10000	; 0x2710
 800939c:	f7fc f932 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80093a0:	2103      	movs	r1, #3
 80093a2:	20fd      	movs	r0, #253	; 0xfd
 80093a4:	f006 fda4 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80093a8:	4b32      	ldr	r3, [pc, #200]	; (8009474 <v_L135D+0x294>)
 80093aa:	881b      	ldrh	r3, [r3, #0]
 80093ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	3301      	adds	r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	bfb8      	it	lt
 80093bc:	425b      	neglt	r3, r3
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	b2d9      	uxtb	r1, r3
 80093c4:	4a2b      	ldr	r2, [pc, #172]	; (8009474 <v_L135D+0x294>)
 80093c6:	8813      	ldrh	r3, [r2, #0]
 80093c8:	f361 03c3 	bfi	r3, r1, #3, #1
 80093cc:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB-30);
 80093ce:	2214      	movs	r2, #20
 80093d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80093d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80093d8:	f7fc fa36 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 80093dc:	231e      	movs	r3, #30
 80093de:	f44f 7248 	mov.w	r2, #800	; 0x320
 80093e2:	211e      	movs	r1, #30
 80093e4:	4824      	ldr	r0, [pc, #144]	; (8009478 <v_L135D+0x298>)
 80093e6:	f7fb fe7f 	bl	80050e8 <driveD>
}
 80093ea:	e03e      	b.n	800946a <v_L135D+0x28a>
	}else if(run_mode == 5){
 80093ec:	4b20      	ldr	r3, [pc, #128]	; (8009470 <v_L135D+0x290>)
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b05      	cmp	r3, #5
 80093f4:	d139      	bne.n	800946a <v_L135D+0x28a>
		slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 80093f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8009400:	2243      	movs	r2, #67	; 0x43
 8009402:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8009406:	f242 7010 	movw	r0, #10000	; 0x2710
 800940a:	f7fc f845 	bl	8005498 <slalomF>
		slalomR(V135_5_DEGACCEL, V135_5_OMEGA, 135, SPEED_5);
 800940e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8009412:	2287      	movs	r2, #135	; 0x87
 8009414:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009418:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 800941c:	f7fc f8f2 	bl	8005604 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009420:	2103      	movs	r1, #3
 8009422:	20fd      	movs	r0, #253	; 0xfd
 8009424:	f006 fd64 	bl	800fef0 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8009428:	4b12      	ldr	r3, [pc, #72]	; (8009474 <v_L135D+0x294>)
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009430:	b2db      	uxtb	r3, r3
 8009432:	3301      	adds	r3, #1
 8009434:	2b00      	cmp	r3, #0
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	bfb8      	it	lt
 800943c:	425b      	neglt	r3, r3
 800943e:	f003 0301 	and.w	r3, r3, #1
 8009442:	b2d9      	uxtb	r1, r3
 8009444:	4a0b      	ldr	r2, [pc, #44]	; (8009474 <v_L135D+0x294>)
 8009446:	8813      	ldrh	r3, [r2, #0]
 8009448:	f361 03c3 	bfi	r3, r1, #3, #1
 800944c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
 800944e:	2214      	movs	r2, #20
 8009450:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8009454:	f242 7010 	movw	r0, #10000	; 0x2710
 8009458:	f7fc f9f6 	bl	8005848 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 800945c:	231e      	movs	r3, #30
 800945e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009462:	211e      	movs	r1, #30
 8009464:	4804      	ldr	r0, [pc, #16]	; (8009478 <v_L135D+0x298>)
 8009466:	f7fb fe3f 	bl	80050e8 <driveD>
}
 800946a:	bf00      	nop
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	20000456 	.word	0x20000456
 8009474:	20000f64 	.word	0x20000f64
 8009478:	ffff8ad0 	.word	0xffff8ad0

0800947c <test_select>:
//test_select
// 走行系テスト選択
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void test_select(void){
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
	int mode = 0;
 8009482:	2300      	movs	r3, #0
 8009484:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 8009486:	6879      	ldr	r1, [r7, #4]
 8009488:	483f      	ldr	r0, [pc, #252]	; (8009588 <test_select+0x10c>)
 800948a:	f009 f959 	bl	8012740 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	b2db      	uxtb	r3, r3
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	b2d8      	uxtb	r0, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	b2db      	uxtb	r3, r3
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	b2d9      	uxtb	r1, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	f003 0304 	and.w	r3, r3, #4
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	461a      	mov	r2, r3
 80094ae:	f008 fb79 	bl	8011ba4 <led_write>
		  if(dist_r >= 20){
 80094b2:	4b36      	ldr	r3, [pc, #216]	; (800958c <test_select+0x110>)
 80094b4:	edd3 7a00 	vldr	s15, [r3]
 80094b8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80094bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c4:	db0f      	blt.n	80094e6 <test_select+0x6a>
			  mode++;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	3301      	adds	r3, #1
 80094ca:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80094cc:	4b2f      	ldr	r3, [pc, #188]	; (800958c <test_select+0x110>)
 80094ce:	f04f 0200 	mov.w	r2, #0
 80094d2:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b07      	cmp	r3, #7
 80094d8:	dd01      	ble.n	80094de <test_select+0x62>
				  mode = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	482b      	ldr	r0, [pc, #172]	; (8009590 <test_select+0x114>)
 80094e2:	f009 f92d 	bl	8012740 <iprintf>
		  }
		  if(dist_r <= -20){
 80094e6:	4b29      	ldr	r3, [pc, #164]	; (800958c <test_select+0x110>)
 80094e8:	edd3 7a00 	vldr	s15, [r3]
 80094ec:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80094f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f8:	d80f      	bhi.n	800951a <test_select+0x9e>
			  mode--;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009500:	4b22      	ldr	r3, [pc, #136]	; (800958c <test_select+0x110>)
 8009502:	f04f 0200 	mov.w	r2, #0
 8009506:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	da01      	bge.n	8009512 <test_select+0x96>
				  mode = 7;
 800950e:	2307      	movs	r3, #7
 8009510:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009512:	6879      	ldr	r1, [r7, #4]
 8009514:	481e      	ldr	r0, [pc, #120]	; (8009590 <test_select+0x114>)
 8009516:	f009 f913 	bl	8012740 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800951a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800951e:	481d      	ldr	r0, [pc, #116]	; (8009594 <test_select+0x118>)
 8009520:	f7f8 fed8 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1b1      	bne.n	800948e <test_select+0x12>
			  HAL_Delay(50);
 800952a:	2032      	movs	r0, #50	; 0x32
 800952c:	f7f7 fd76 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009530:	bf00      	nop
 8009532:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009536:	4817      	ldr	r0, [pc, #92]	; (8009594 <test_select+0x118>)
 8009538:	f7f8 fecc 	bl	80022d4 <HAL_GPIO_ReadPin>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d0f7      	beq.n	8009532 <test_select+0xb6>
			  switch(mode){
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	3b01      	subs	r3, #1
 8009546:	2b05      	cmp	r3, #5
 8009548:	d8a1      	bhi.n	800948e <test_select+0x12>
 800954a:	a201      	add	r2, pc, #4	; (adr r2, 8009550 <test_select+0xd4>)
 800954c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009550:	08009569 	.word	0x08009569
 8009554:	0800956f 	.word	0x0800956f
 8009558:	08009575 	.word	0x08009575
 800955c:	0800957b 	.word	0x0800957b
 8009560:	0800957f 	.word	0x0800957f
 8009564:	08009583 	.word	0x08009583
				case 1:
					init_test();
 8009568:	f000 f816 	bl	8009598 <init_test>
					break;
 800956c:	e00b      	b.n	8009586 <test_select+0x10a>

				case 2:
					slalom_test();
 800956e:	f000 f91d 	bl	80097ac <slalom_test>
					break;
 8009572:	e008      	b.n	8009586 <test_select+0x10a>

				case 3:
					v_test();
 8009574:	f000 fae2 	bl	8009b3c <v_test>
					break;
 8009578:	e005      	b.n	8009586 <test_select+0x10a>

				case 4:
					pass_test();
 800957a:	f000 fd13 	bl	8009fa4 <pass_test>

				case 5:
					goal_test();
 800957e:	f000 ffa7 	bl	800a4d0 <goal_test>

				case 6:
					sample_course_run();
 8009582:	f001 fa87 	bl	800aa94 <sample_course_run>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009586:	e782      	b.n	800948e <test_select+0x12>
 8009588:	08013988 	.word	0x08013988
 800958c:	20000aec 	.word	0x20000aec
 8009590:	0801397c 	.word	0x0801397c
 8009594:	40020000 	.word	0x40020000

08009598 <init_test>:
//init_test
// 初期基幹関数走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af00      	add	r7, sp, #0

	int mode = 0;
 800959e:	2300      	movs	r3, #0
 80095a0:	617b      	str	r3, [r7, #20]
	printf("Test Init Run, Mode : %d\n", mode);
 80095a2:	6979      	ldr	r1, [r7, #20]
 80095a4:	4872      	ldr	r0, [pc, #456]	; (8009770 <init_test+0x1d8>)
 80095a6:	f009 f8cb 	bl	8012740 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	b2d8      	uxtb	r0, r3
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	f003 0302 	and.w	r3, r3, #2
 80095bc:	b2d9      	uxtb	r1, r3
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	f003 0304 	and.w	r3, r3, #4
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	461a      	mov	r2, r3
 80095ca:	f008 faeb 	bl	8011ba4 <led_write>
		  if(dist_r >= 20){
 80095ce:	4b69      	ldr	r3, [pc, #420]	; (8009774 <init_test+0x1dc>)
 80095d0:	edd3 7a00 	vldr	s15, [r3]
 80095d4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80095d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095e0:	db0f      	blt.n	8009602 <init_test+0x6a>
			  mode++;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	3301      	adds	r3, #1
 80095e6:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 80095e8:	4b62      	ldr	r3, [pc, #392]	; (8009774 <init_test+0x1dc>)
 80095ea:	f04f 0200 	mov.w	r2, #0
 80095ee:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	2b07      	cmp	r3, #7
 80095f4:	dd01      	ble.n	80095fa <init_test+0x62>
				  mode = 0;
 80095f6:	2300      	movs	r3, #0
 80095f8:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 80095fa:	6979      	ldr	r1, [r7, #20]
 80095fc:	485e      	ldr	r0, [pc, #376]	; (8009778 <init_test+0x1e0>)
 80095fe:	f009 f89f 	bl	8012740 <iprintf>
		  }
		  if(dist_r <= -20){
 8009602:	4b5c      	ldr	r3, [pc, #368]	; (8009774 <init_test+0x1dc>)
 8009604:	edd3 7a00 	vldr	s15, [r3]
 8009608:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800960c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009614:	d80f      	bhi.n	8009636 <init_test+0x9e>
			  mode--;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	3b01      	subs	r3, #1
 800961a:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 800961c:	4b55      	ldr	r3, [pc, #340]	; (8009774 <init_test+0x1dc>)
 800961e:	f04f 0200 	mov.w	r2, #0
 8009622:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	2b00      	cmp	r3, #0
 8009628:	da01      	bge.n	800962e <init_test+0x96>
				  mode = 7;
 800962a:	2307      	movs	r3, #7
 800962c:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 800962e:	6979      	ldr	r1, [r7, #20]
 8009630:	4851      	ldr	r0, [pc, #324]	; (8009778 <init_test+0x1e0>)
 8009632:	f009 f885 	bl	8012740 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800963a:	4850      	ldr	r0, [pc, #320]	; (800977c <init_test+0x1e4>)
 800963c:	f7f8 fe4a 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1b1      	bne.n	80095aa <init_test+0x12>
			  HAL_Delay(50);
 8009646:	2032      	movs	r0, #50	; 0x32
 8009648:	f7f7 fce8 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800964c:	bf00      	nop
 800964e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009652:	484a      	ldr	r0, [pc, #296]	; (800977c <init_test+0x1e4>)
 8009654:	f7f8 fe3e 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d0f7      	beq.n	800964e <init_test+0xb6>
			  drive_ready();
 800965e:	f7fb fb0f 	bl	8004c80 <drive_ready>
			  get_base();
 8009662:	f008 fa47 	bl	8011af4 <get_base>

			  switch(mode){
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	2b07      	cmp	r3, #7
 800966a:	d89e      	bhi.n	80095aa <init_test+0x12>
 800966c:	a201      	add	r2, pc, #4	; (adr r2, 8009674 <init_test+0xdc>)
 800966e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009672:	bf00      	nop
 8009674:	08009695 	.word	0x08009695
 8009678:	0800969b 	.word	0x0800969b
 800967c:	080096bb 	.word	0x080096bb
 8009680:	080096d9 	.word	0x080096d9
 8009684:	080096f7 	.word	0x080096f7
 8009688:	08009715 	.word	0x08009715
 800968c:	0800973f 	.word	0x0800973f
 8009690:	08009759 	.word	0x08009759
				case 0:
					get_base();
 8009694:	f008 fa2e 	bl	8011af4 <get_base>
					break;
 8009698:	e069      	b.n	800976e <init_test+0x1d6>
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 800969a:	4839      	ldr	r0, [pc, #228]	; (8009780 <init_test+0x1e8>)
 800969c:	f009 f8c4 	bl	8012828 <puts>
					for(int i = 0; i < 1; i++){
 80096a0:	2300      	movs	r3, #0
 80096a2:	613b      	str	r3, [r7, #16]
 80096a4:	e005      	b.n	80096b2 <init_test+0x11a>
						driveC(SEC_HALF*2);	//一区画のパルス分デフォルトインターバルで走行
 80096a6:	20b6      	movs	r0, #182	; 0xb6
 80096a8:	f7fb fe60 	bl	800536c <driveC>
					for(int i = 0; i < 1; i++){
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	3301      	adds	r3, #1
 80096b0:	613b      	str	r3, [r7, #16]
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	ddf6      	ble.n	80096a6 <init_test+0x10e>
					}
					break;
 80096b8:	e059      	b.n	800976e <init_test+0x1d6>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 80096ba:	4832      	ldr	r0, [pc, #200]	; (8009784 <init_test+0x1ec>)
 80096bc:	f009 f8b4 	bl	8012828 <puts>
					for(int i = 0; i < 32; i++){
 80096c0:	2300      	movs	r3, #0
 80096c2:	60fb      	str	r3, [r7, #12]
 80096c4:	e004      	b.n	80096d0 <init_test+0x138>
						rotate_R90();				//16回右90度回転、つまり4周回転
 80096c6:	f7fc fe8b 	bl	80063e0 <rotate_R90>
					for(int i = 0; i < 32; i++){
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	3301      	adds	r3, #1
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2b1f      	cmp	r3, #31
 80096d4:	ddf7      	ble.n	80096c6 <init_test+0x12e>
					}
					break;
 80096d6:	e04a      	b.n	800976e <init_test+0x1d6>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 80096d8:	482b      	ldr	r0, [pc, #172]	; (8009788 <init_test+0x1f0>)
 80096da:	f009 f8a5 	bl	8012828 <puts>
					for(int i = 0; i < 32; i++){
 80096de:	2300      	movs	r3, #0
 80096e0:	60bb      	str	r3, [r7, #8]
 80096e2:	e004      	b.n	80096ee <init_test+0x156>
						rotate_L90();				//16回左90度回転、つまり4周回転
 80096e4:	f7fc ff58 	bl	8006598 <rotate_L90>
					for(int i = 0; i < 32; i++){
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	3301      	adds	r3, #1
 80096ec:	60bb      	str	r3, [r7, #8]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	2b1f      	cmp	r3, #31
 80096f2:	ddf7      	ble.n	80096e4 <init_test+0x14c>
					}
					break;
 80096f4:	e03b      	b.n	800976e <init_test+0x1d6>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 80096f6:	4825      	ldr	r0, [pc, #148]	; (800978c <init_test+0x1f4>)
 80096f8:	f009 f896 	bl	8012828 <puts>
					for(int i = 0; i < 16; i++){
 80096fc:	2300      	movs	r3, #0
 80096fe:	607b      	str	r3, [r7, #4]
 8009700:	e004      	b.n	800970c <init_test+0x174>
						rotate_180();				//8回右180度回転、つまり4周回転
 8009702:	f7fd f825 	bl	8006750 <rotate_180>
					for(int i = 0; i < 16; i++){
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3301      	adds	r3, #1
 800970a:	607b      	str	r3, [r7, #4]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b0f      	cmp	r3, #15
 8009710:	ddf7      	ble.n	8009702 <init_test+0x16a>
					}
					break;
 8009712:	e02c      	b.n	800976e <init_test+0x1d6>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 8009714:	481e      	ldr	r0, [pc, #120]	; (8009790 <init_test+0x1f8>)
 8009716:	f009 f887 	bl	8012828 <puts>
					get_base();
 800971a:	f008 f9eb 	bl	8011af4 <get_base>
					half_sectionA();				//半区画のパルス分加速しながら走行
 800971e:	f7fc fa5d 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 6-1; i++){
 8009722:	2300      	movs	r3, #0
 8009724:	603b      	str	r3, [r7, #0]
 8009726:	e004      	b.n	8009732 <init_test+0x19a>
						one_sectionU();			//一区画のパルス分等速走行
 8009728:	f7fc fe42 	bl	80063b0 <one_sectionU>
					for(int i = 0; i < 6-1; i++){
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	3301      	adds	r3, #1
 8009730:	603b      	str	r3, [r7, #0]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	2b04      	cmp	r3, #4
 8009736:	ddf7      	ble.n	8009728 <init_test+0x190>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 8009738:	f7fc fab6 	bl	8005ca8 <half_sectionD>
					break;
 800973c:	e017      	b.n	800976e <init_test+0x1d6>
				case 6:
					//----a宴会芸モード----
					target_degree_z = degree_z;
 800973e:	4b15      	ldr	r3, [pc, #84]	; (8009794 <init_test+0x1fc>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a15      	ldr	r2, [pc, #84]	; (8009798 <init_test+0x200>)
 8009744:	6013      	str	r3, [r2, #0]
					accel_l = 5000;
 8009746:	4b15      	ldr	r3, [pc, #84]	; (800979c <init_test+0x204>)
 8009748:	4a15      	ldr	r2, [pc, #84]	; (80097a0 <init_test+0x208>)
 800974a:	601a      	str	r2, [r3, #0]

					MF2.FLAG.ENKAI = 1;
 800974c:	4a15      	ldr	r2, [pc, #84]	; (80097a4 <init_test+0x20c>)
 800974e:	8813      	ldrh	r3, [r2, #0]
 8009750:	f043 0320 	orr.w	r3, r3, #32
 8009754:	8013      	strh	r3, [r2, #0]

					while(1);
 8009756:	e7fe      	b.n	8009756 <init_test+0x1be>
					break;
				case 7:
					//----a停止時前壁補正モード----
					MF.FLAG.FWALL = 1;
 8009758:	4a13      	ldr	r2, [pc, #76]	; (80097a8 <init_test+0x210>)
 800975a:	8813      	ldrh	r3, [r2, #0]
 800975c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009760:	8013      	strh	r3, [r2, #0]
					MF.FLAG.DRV = 1;
 8009762:	4a11      	ldr	r2, [pc, #68]	; (80097a8 <init_test+0x210>)
 8009764:	8813      	ldrh	r3, [r2, #0]
 8009766:	f043 0302 	orr.w	r3, r3, #2
 800976a:	8013      	strh	r3, [r2, #0]
					while(1);
 800976c:	e7fe      	b.n	800976c <init_test+0x1d4>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800976e:	e71c      	b.n	80095aa <init_test+0x12>
 8009770:	080139a0 	.word	0x080139a0
 8009774:	20000aec 	.word	0x20000aec
 8009778:	0801397c 	.word	0x0801397c
 800977c:	40020000 	.word	0x40020000
 8009780:	080139bc 	.word	0x080139bc
 8009784:	080139e0 	.word	0x080139e0
 8009788:	080139ec 	.word	0x080139ec
 800978c:	080139f8 	.word	0x080139f8
 8009790:	08013a04 	.word	0x08013a04
 8009794:	20000b5c 	.word	0x20000b5c
 8009798:	20000bf8 	.word	0x20000bf8
 800979c:	20000d58 	.word	0x20000d58
 80097a0:	459c4000 	.word	0x459c4000
 80097a4:	20000f64 	.word	0x20000f64
 80097a8:	20000f68 	.word	0x20000f68

080097ac <slalom_test>:
//slalom_test
// スラローム走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08e      	sub	sp, #56	; 0x38
 80097b0:	af00      	add	r7, sp, #0

	int mode = 0;
 80097b2:	2300      	movs	r3, #0
 80097b4:	637b      	str	r3, [r7, #52]	; 0x34
	printf("Test Slalom Run, Mode : %d\n", mode);
 80097b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80097b8:	48b8      	ldr	r0, [pc, #736]	; (8009a9c <slalom_test+0x2f0>)
 80097ba:	f008 ffc1 	bl	8012740 <iprintf>

	run_select();
 80097be:	f7fb fbb3 	bl	8004f28 <run_select>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80097c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	b2d8      	uxtb	r0, r3
 80097cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	f003 0302 	and.w	r3, r3, #2
 80097d4:	b2d9      	uxtb	r1, r3
 80097d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	f003 0304 	and.w	r3, r3, #4
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	461a      	mov	r2, r3
 80097e2:	f008 f9df 	bl	8011ba4 <led_write>
		  if(dist_r >= 20){
 80097e6:	4bae      	ldr	r3, [pc, #696]	; (8009aa0 <slalom_test+0x2f4>)
 80097e8:	edd3 7a00 	vldr	s15, [r3]
 80097ec:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80097f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097f8:	db20      	blt.n	800983c <slalom_test+0x90>
			  mode++;
 80097fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097fc:	3301      	adds	r3, #1
 80097fe:	637b      	str	r3, [r7, #52]	; 0x34
			  dist_r = 0;
 8009800:	4ba7      	ldr	r3, [pc, #668]	; (8009aa0 <slalom_test+0x2f4>)
 8009802:	f04f 0200 	mov.w	r2, #0
 8009806:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 8009808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980a:	2b07      	cmp	r3, #7
 800980c:	dc03      	bgt.n	8009816 <slalom_test+0x6a>
				  full_led_write(WHITE);
 800980e:	2007      	movs	r0, #7
 8009810:	f008 fa02 	bl	8011c18 <full_led_write>
 8009814:	e009      	b.n	800982a <slalom_test+0x7e>
			  }else if(mode < 16){
 8009816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009818:	2b0f      	cmp	r3, #15
 800981a:	dc03      	bgt.n	8009824 <slalom_test+0x78>
				  full_led_write(BLUEGREEN);
 800981c:	2004      	movs	r0, #4
 800981e:	f008 f9fb 	bl	8011c18 <full_led_write>
 8009822:	e002      	b.n	800982a <slalom_test+0x7e>
			  }else{
				  full_led_write(PURPLE);
 8009824:	2005      	movs	r0, #5
 8009826:	f008 f9f7 	bl	8011c18 <full_led_write>
			  }
			  if(mode > 23){
 800982a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800982c:	2b17      	cmp	r3, #23
 800982e:	dd01      	ble.n	8009834 <slalom_test+0x88>
				  mode = 0;
 8009830:	2300      	movs	r3, #0
 8009832:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  printf("Mode : %d\n", mode);
 8009834:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009836:	489b      	ldr	r0, [pc, #620]	; (8009aa4 <slalom_test+0x2f8>)
 8009838:	f008 ff82 	bl	8012740 <iprintf>
		  }
		  if(dist_r <= -20){
 800983c:	4b98      	ldr	r3, [pc, #608]	; (8009aa0 <slalom_test+0x2f4>)
 800983e:	edd3 7a00 	vldr	s15, [r3]
 8009842:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800984a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800984e:	d820      	bhi.n	8009892 <slalom_test+0xe6>
			  mode--;
 8009850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009852:	3b01      	subs	r3, #1
 8009854:	637b      	str	r3, [r7, #52]	; 0x34
			  dist_r = 0;
 8009856:	4b92      	ldr	r3, [pc, #584]	; (8009aa0 <slalom_test+0x2f4>)
 8009858:	f04f 0200 	mov.w	r2, #0
 800985c:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 800985e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009860:	2b07      	cmp	r3, #7
 8009862:	dc03      	bgt.n	800986c <slalom_test+0xc0>
				  full_led_write(WHITE);
 8009864:	2007      	movs	r0, #7
 8009866:	f008 f9d7 	bl	8011c18 <full_led_write>
 800986a:	e009      	b.n	8009880 <slalom_test+0xd4>
			  }else if(mode < 16){
 800986c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800986e:	2b0f      	cmp	r3, #15
 8009870:	dc03      	bgt.n	800987a <slalom_test+0xce>
				  full_led_write(BLUEGREEN);
 8009872:	2004      	movs	r0, #4
 8009874:	f008 f9d0 	bl	8011c18 <full_led_write>
 8009878:	e002      	b.n	8009880 <slalom_test+0xd4>
			  }else{
				  full_led_write(PURPLE);
 800987a:	2005      	movs	r0, #5
 800987c:	f008 f9cc 	bl	8011c18 <full_led_write>
			  }
			  if(mode < 0){
 8009880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009882:	2b00      	cmp	r3, #0
 8009884:	da01      	bge.n	800988a <slalom_test+0xde>
				  mode = 23;
 8009886:	2317      	movs	r3, #23
 8009888:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  printf("Mode : %d\n", mode);
 800988a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800988c:	4885      	ldr	r0, [pc, #532]	; (8009aa4 <slalom_test+0x2f8>)
 800988e:	f008 ff57 	bl	8012740 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009892:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009896:	4884      	ldr	r0, [pc, #528]	; (8009aa8 <slalom_test+0x2fc>)
 8009898:	f7f8 fd1c 	bl	80022d4 <HAL_GPIO_ReadPin>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d18f      	bne.n	80097c2 <slalom_test+0x16>
			  HAL_Delay(50);
 80098a2:	2032      	movs	r0, #50	; 0x32
 80098a4:	f7f7 fbba 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80098a8:	bf00      	nop
 80098aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80098ae:	487e      	ldr	r0, [pc, #504]	; (8009aa8 <slalom_test+0x2fc>)
 80098b0:	f7f8 fd10 	bl	80022d4 <HAL_GPIO_ReadPin>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0f7      	beq.n	80098aa <slalom_test+0xfe>
			  drive_ready();
 80098ba:	f7fb f9e1 	bl	8004c80 <drive_ready>
			  get_base();
 80098be:	f008 f919 	bl	8011af4 <get_base>

			  switch(mode){
 80098c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c4:	2b10      	cmp	r3, #16
 80098c6:	f200 8130 	bhi.w	8009b2a <slalom_test+0x37e>
 80098ca:	a201      	add	r2, pc, #4	; (adr r2, 80098d0 <slalom_test+0x124>)
 80098cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d0:	08009915 	.word	0x08009915
 80098d4:	0800991b 	.word	0x0800991b
 80098d8:	08009941 	.word	0x08009941
 80098dc:	08009967 	.word	0x08009967
 80098e0:	0800998d 	.word	0x0800998d
 80098e4:	080099b3 	.word	0x080099b3
 80098e8:	080099d9 	.word	0x080099d9
 80098ec:	08009b2b 	.word	0x08009b2b
 80098f0:	08009b2b 	.word	0x08009b2b
 80098f4:	080099ff 	.word	0x080099ff
 80098f8:	08009a29 	.word	0x08009a29
 80098fc:	08009a67 	.word	0x08009a67
 8009900:	08009a8d 	.word	0x08009a8d
 8009904:	08009adf 	.word	0x08009adf
 8009908:	08009b05 	.word	0x08009b05
 800990c:	08009b2b 	.word	0x08009b2b
 8009910:	08009b2b 	.word	0x08009b2b
				case 0:
					get_base();
 8009914:	f008 f8ee 	bl	8011af4 <get_base>
					break;
 8009918:	e107      	b.n	8009b2a <slalom_test+0x37e>
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 800991a:	4864      	ldr	r0, [pc, #400]	; (8009aac <slalom_test+0x300>)
 800991c:	f008 ff84 	bl	8012828 <puts>
					half_sectionA();
 8009920:	f7fc f95c 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009924:	2300      	movs	r3, #0
 8009926:	633b      	str	r3, [r7, #48]	; 0x30
 8009928:	e004      	b.n	8009934 <slalom_test+0x188>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 800992a:	f7fc ffe9 	bl	8006900 <slalom_R90>
					for(int i = 0; i < 1; i++){
 800992e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009930:	3301      	adds	r3, #1
 8009932:	633b      	str	r3, [r7, #48]	; 0x30
 8009934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009936:	2b00      	cmp	r3, #0
 8009938:	ddf7      	ble.n	800992a <slalom_test+0x17e>
					}
					half_sectionD();
 800993a:	f7fc f9b5 	bl	8005ca8 <half_sectionD>
					break;
 800993e:	e0f4      	b.n	8009b2a <slalom_test+0x37e>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 8009940:	485b      	ldr	r0, [pc, #364]	; (8009ab0 <slalom_test+0x304>)
 8009942:	f008 ff71 	bl	8012828 <puts>
					half_sectionA();
 8009946:	f7fc f949 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 800994a:	2300      	movs	r3, #0
 800994c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800994e:	e004      	b.n	800995a <slalom_test+0x1ae>
						slalom_L90();				//16回右90度回転、つまり4周回転
 8009950:	f7fd f904 	bl	8006b5c <slalom_L90>
					for(int i = 0; i < 1; i++){
 8009954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009956:	3301      	adds	r3, #1
 8009958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800995a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995c:	2b00      	cmp	r3, #0
 800995e:	ddf7      	ble.n	8009950 <slalom_test+0x1a4>
					}
					half_sectionD();
 8009960:	f7fc f9a2 	bl	8005ca8 <half_sectionD>
					break;
 8009964:	e0e1      	b.n	8009b2a <slalom_test+0x37e>
				case 3:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 8009966:	4853      	ldr	r0, [pc, #332]	; (8009ab4 <slalom_test+0x308>)
 8009968:	f008 ff5e 	bl	8012828 <puts>
					half_sectionA();
 800996c:	f7fc f936 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009970:	2300      	movs	r3, #0
 8009972:	62bb      	str	r3, [r7, #40]	; 0x28
 8009974:	e004      	b.n	8009980 <slalom_test+0x1d4>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 8009976:	f7fd fa11 	bl	8006d9c <Lslalom_R90>
					for(int i = 0; i < 1; i++){
 800997a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997c:	3301      	adds	r3, #1
 800997e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	2b00      	cmp	r3, #0
 8009984:	ddf7      	ble.n	8009976 <slalom_test+0x1ca>
					}
					half_sectionD();
 8009986:	f7fc f98f 	bl	8005ca8 <half_sectionD>
					break;
 800998a:	e0ce      	b.n	8009b2a <slalom_test+0x37e>
				case 4:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 800998c:	484a      	ldr	r0, [pc, #296]	; (8009ab8 <slalom_test+0x30c>)
 800998e:	f008 ff4b 	bl	8012828 <puts>
					half_sectionA();
 8009992:	f7fc f923 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009996:	2300      	movs	r3, #0
 8009998:	627b      	str	r3, [r7, #36]	; 0x24
 800999a:	e004      	b.n	80099a6 <slalom_test+0x1fa>
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 800999c:	f7fd fb38 	bl	8007010 <Lslalom_L90>
					for(int i = 0; i < 1; i++){
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	3301      	adds	r3, #1
 80099a4:	627b      	str	r3, [r7, #36]	; 0x24
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	ddf7      	ble.n	800999c <slalom_test+0x1f0>
					}
					half_sectionD();
 80099ac:	f7fc f97c 	bl	8005ca8 <half_sectionD>
					break;
 80099b0:	e0bb      	b.n	8009b2a <slalom_test+0x37e>
				case 5:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 80099b2:	4842      	ldr	r0, [pc, #264]	; (8009abc <slalom_test+0x310>)
 80099b4:	f008 ff38 	bl	8012828 <puts>
					half_sectionA();
 80099b8:	f7fc f910 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 80099bc:	2300      	movs	r3, #0
 80099be:	623b      	str	r3, [r7, #32]
 80099c0:	e004      	b.n	80099cc <slalom_test+0x220>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 80099c2:	f7fd fc53 	bl	800726c <Lslalom_R180>
					for(int i = 0; i < 1; i++){
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	3301      	adds	r3, #1
 80099ca:	623b      	str	r3, [r7, #32]
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	ddf7      	ble.n	80099c2 <slalom_test+0x216>
					}
					half_sectionD();
 80099d2:	f7fc f969 	bl	8005ca8 <half_sectionD>
					break;
 80099d6:	e0a8      	b.n	8009b2a <slalom_test+0x37e>
				case 6:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 80099d8:	4839      	ldr	r0, [pc, #228]	; (8009ac0 <slalom_test+0x314>)
 80099da:	f008 ff25 	bl	8012828 <puts>
					half_sectionA();
 80099de:	f7fc f8fd 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 80099e2:	2300      	movs	r3, #0
 80099e4:	61fb      	str	r3, [r7, #28]
 80099e6:	e004      	b.n	80099f2 <slalom_test+0x246>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 80099e8:	f7fd fd92 	bl	8007510 <Lslalom_L180>
					for(int i = 0; i < 1; i++){
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	3301      	adds	r3, #1
 80099f0:	61fb      	str	r3, [r7, #28]
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	ddf7      	ble.n	80099e8 <slalom_test+0x23c>
					}
					half_sectionD();
 80099f8:	f7fc f956 	bl	8005ca8 <half_sectionD>
					break;
 80099fc:	e095      	b.n	8009b2a <slalom_test+0x37e>
					break;
				case 8:
					break;
				case 9:
					//----slalom右折----
					printf("slalom turn right .\n");
 80099fe:	482b      	ldr	r0, [pc, #172]	; (8009aac <slalom_test+0x300>)
 8009a00:	f008 ff12 	bl	8012828 <puts>
					half_sectionA();
 8009a04:	f7fc f8ea 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009a08:	2300      	movs	r3, #0
 8009a0a:	61bb      	str	r3, [r7, #24]
 8009a0c:	e006      	b.n	8009a1c <slalom_test+0x270>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 8009a0e:	f7fc ff77 	bl	8006900 <slalom_R90>
						one_sectionU();
 8009a12:	f7fc fccd 	bl	80063b0 <one_sectionU>
					for(int i = 0; i < 8; i++){
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	61bb      	str	r3, [r7, #24]
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	2b07      	cmp	r3, #7
 8009a20:	ddf5      	ble.n	8009a0e <slalom_test+0x262>
					}
					half_sectionD();
 8009a22:	f7fc f941 	bl	8005ca8 <half_sectionD>
					break;
 8009a26:	e080      	b.n	8009b2a <slalom_test+0x37e>
				case 10:
					//----slalom左折----
					printf("slalom turn left .\n");
 8009a28:	4821      	ldr	r0, [pc, #132]	; (8009ab0 <slalom_test+0x304>)
 8009a2a:	f008 fefd 	bl	8012828 <puts>
					half_sectionA();
 8009a2e:	f7fc f8d5 	bl	8005bdc <half_sectionA>
					MF2.FLAG.LOG = 1;
 8009a32:	4a24      	ldr	r2, [pc, #144]	; (8009ac4 <slalom_test+0x318>)
 8009a34:	8813      	ldrh	r3, [r2, #0]
 8009a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a3a:	8013      	strh	r3, [r2, #0]
					for(int i = 0; i < 8; i++){
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	617b      	str	r3, [r7, #20]
 8009a40:	e006      	b.n	8009a50 <slalom_test+0x2a4>
						slalom_L90();				//16回右90度回転、つまり4周回転
 8009a42:	f7fd f88b 	bl	8006b5c <slalom_L90>
						one_sectionU();
 8009a46:	f7fc fcb3 	bl	80063b0 <one_sectionU>
					for(int i = 0; i < 8; i++){
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	617b      	str	r3, [r7, #20]
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	2b07      	cmp	r3, #7
 8009a54:	ddf5      	ble.n	8009a42 <slalom_test+0x296>
					}
					MF2.FLAG.LOG = 0;
 8009a56:	4a1b      	ldr	r2, [pc, #108]	; (8009ac4 <slalom_test+0x318>)
 8009a58:	8813      	ldrh	r3, [r2, #0]
 8009a5a:	f36f 1386 	bfc	r3, #6, #1
 8009a5e:	8013      	strh	r3, [r2, #0]
					half_sectionD();
 8009a60:	f7fc f922 	bl	8005ca8 <half_sectionD>
					printf("r start\n");
					for(int j = 0; j < log_allay; j++){
						printf("%d\n", get_speed_r[j]);
					}
					printf("r end\n");
*/					break;
 8009a64:	e061      	b.n	8009b2a <slalom_test+0x37e>
				case 11:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 8009a66:	4813      	ldr	r0, [pc, #76]	; (8009ab4 <slalom_test+0x308>)
 8009a68:	f008 fede 	bl	8012828 <puts>
					half_sectionA();
 8009a6c:	f7fc f8b6 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009a70:	2300      	movs	r3, #0
 8009a72:	613b      	str	r3, [r7, #16]
 8009a74:	e004      	b.n	8009a80 <slalom_test+0x2d4>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 8009a76:	f7fd f991 	bl	8006d9c <Lslalom_R90>
					for(int i = 0; i < 8; i++){
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	613b      	str	r3, [r7, #16]
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	2b07      	cmp	r3, #7
 8009a84:	ddf7      	ble.n	8009a76 <slalom_test+0x2ca>
					}
					half_sectionD();
 8009a86:	f7fc f90f 	bl	8005ca8 <half_sectionD>
					break;
 8009a8a:	e04e      	b.n	8009b2a <slalom_test+0x37e>
				case 12:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 8009a8c:	480a      	ldr	r0, [pc, #40]	; (8009ab8 <slalom_test+0x30c>)
 8009a8e:	f008 fecb 	bl	8012828 <puts>
					half_sectionA();
 8009a92:	f7fc f8a3 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009a96:	2300      	movs	r3, #0
 8009a98:	60fb      	str	r3, [r7, #12]
 8009a9a:	e01a      	b.n	8009ad2 <slalom_test+0x326>
 8009a9c:	08013a24 	.word	0x08013a24
 8009aa0:	20000aec 	.word	0x20000aec
 8009aa4:	0801397c 	.word	0x0801397c
 8009aa8:	40020000 	.word	0x40020000
 8009aac:	08013a40 	.word	0x08013a40
 8009ab0:	08013a54 	.word	0x08013a54
 8009ab4:	08013a68 	.word	0x08013a68
 8009ab8:	08013a80 	.word	0x08013a80
 8009abc:	08013a94 	.word	0x08013a94
 8009ac0:	08013ab4 	.word	0x08013ab4
 8009ac4:	20000f64 	.word	0x20000f64
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 8009ac8:	f7fd faa2 	bl	8007010 <Lslalom_L90>
					for(int i = 0; i < 8; i++){
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	60fb      	str	r3, [r7, #12]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2b07      	cmp	r3, #7
 8009ad6:	ddf7      	ble.n	8009ac8 <slalom_test+0x31c>
					}
					half_sectionD();
 8009ad8:	f7fc f8e6 	bl	8005ca8 <half_sectionD>
					break;
 8009adc:	e025      	b.n	8009b2a <slalom_test+0x37e>
				case 13:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 8009ade:	4815      	ldr	r0, [pc, #84]	; (8009b34 <slalom_test+0x388>)
 8009ae0:	f008 fea2 	bl	8012828 <puts>
					half_sectionA();
 8009ae4:	f7fc f87a 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009ae8:	2300      	movs	r3, #0
 8009aea:	60bb      	str	r3, [r7, #8]
 8009aec:	e004      	b.n	8009af8 <slalom_test+0x34c>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 8009aee:	f7fd fbbd 	bl	800726c <Lslalom_R180>
					for(int i = 0; i < 8; i++){
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	3301      	adds	r3, #1
 8009af6:	60bb      	str	r3, [r7, #8]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2b07      	cmp	r3, #7
 8009afc:	ddf7      	ble.n	8009aee <slalom_test+0x342>
					}
					half_sectionD();
 8009afe:	f7fc f8d3 	bl	8005ca8 <half_sectionD>
					break;
 8009b02:	e012      	b.n	8009b2a <slalom_test+0x37e>
				case 14:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 8009b04:	480c      	ldr	r0, [pc, #48]	; (8009b38 <slalom_test+0x38c>)
 8009b06:	f008 fe8f 	bl	8012828 <puts>
					half_sectionA();
 8009b0a:	f7fc f867 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009b0e:	2300      	movs	r3, #0
 8009b10:	607b      	str	r3, [r7, #4]
 8009b12:	e004      	b.n	8009b1e <slalom_test+0x372>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 8009b14:	f7fd fcfc 	bl	8007510 <Lslalom_L180>
					for(int i = 0; i < 8; i++){
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	607b      	str	r3, [r7, #4]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2b07      	cmp	r3, #7
 8009b22:	ddf7      	ble.n	8009b14 <slalom_test+0x368>
					}
					half_sectionD();
 8009b24:	f7fc f8c0 	bl	8005ca8 <half_sectionD>
					break;
 8009b28:	bf00      	nop
					break;
				case 16:
					break;

			  }
			  full_led_write(RED);
 8009b2a:	2001      	movs	r0, #1
 8009b2c:	f008 f874 	bl	8011c18 <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009b30:	e647      	b.n	80097c2 <slalom_test+0x16>
 8009b32:	bf00      	nop
 8009b34:	08013a94 	.word	0x08013a94
 8009b38:	08013ab4 	.word	0x08013ab4

08009b3c <v_test>:
//v_test
// 斜め走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_test(void){
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b092      	sub	sp, #72	; 0x48
 8009b40:	af00      	add	r7, sp, #0

	int mode = 0;
 8009b42:	2300      	movs	r3, #0
 8009b44:	647b      	str	r3, [r7, #68]	; 0x44
	printf("Test V Run, Mode : %d\n", mode);
 8009b46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b48:	48ba      	ldr	r0, [pc, #744]	; (8009e34 <v_test+0x2f8>)
 8009b4a:	f008 fdf9 	bl	8012740 <iprintf>

	run_select();
 8009b4e:	f7fb f9eb 	bl	8004f28 <run_select>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	f003 0301 	and.w	r3, r3, #1
 8009b5a:	b2d8      	uxtb	r0, r3
 8009b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	f003 0302 	and.w	r3, r3, #2
 8009b64:	b2d9      	uxtb	r1, r3
 8009b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	f003 0304 	and.w	r3, r3, #4
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	461a      	mov	r2, r3
 8009b72:	f008 f817 	bl	8011ba4 <led_write>
		  if(dist_r >= 20){
 8009b76:	4bb0      	ldr	r3, [pc, #704]	; (8009e38 <v_test+0x2fc>)
 8009b78:	edd3 7a00 	vldr	s15, [r3]
 8009b7c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009b80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b88:	db20      	blt.n	8009bcc <v_test+0x90>
			  mode++;
 8009b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 8009b90:	4ba9      	ldr	r3, [pc, #676]	; (8009e38 <v_test+0x2fc>)
 8009b92:	f04f 0200 	mov.w	r2, #0
 8009b96:	601a      	str	r2, [r3, #0]
			  if(mode > 23){
 8009b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b9a:	2b17      	cmp	r3, #23
 8009b9c:	dd01      	ble.n	8009ba2 <v_test+0x66>
				  mode = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  if(mode < 8){
 8009ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ba4:	2b07      	cmp	r3, #7
 8009ba6:	dc03      	bgt.n	8009bb0 <v_test+0x74>
				  full_led_write(WHITE);
 8009ba8:	2007      	movs	r0, #7
 8009baa:	f008 f835 	bl	8011c18 <full_led_write>
 8009bae:	e009      	b.n	8009bc4 <v_test+0x88>
			  }else if(mode < 16){
 8009bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bb2:	2b0f      	cmp	r3, #15
 8009bb4:	dc03      	bgt.n	8009bbe <v_test+0x82>
				  full_led_write(BLUEGREEN);
 8009bb6:	2004      	movs	r0, #4
 8009bb8:	f008 f82e 	bl	8011c18 <full_led_write>
 8009bbc:	e002      	b.n	8009bc4 <v_test+0x88>
			  }else{
				  full_led_write(PURPLE);
 8009bbe:	2005      	movs	r0, #5
 8009bc0:	f008 f82a 	bl	8011c18 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 8009bc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009bc6:	489d      	ldr	r0, [pc, #628]	; (8009e3c <v_test+0x300>)
 8009bc8:	f008 fdba 	bl	8012740 <iprintf>
		  }
		  if(dist_r <= -20){
 8009bcc:	4b9a      	ldr	r3, [pc, #616]	; (8009e38 <v_test+0x2fc>)
 8009bce:	edd3 7a00 	vldr	s15, [r3]
 8009bd2:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bde:	d820      	bhi.n	8009c22 <v_test+0xe6>
			  mode--;
 8009be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009be2:	3b01      	subs	r3, #1
 8009be4:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 8009be6:	4b94      	ldr	r3, [pc, #592]	; (8009e38 <v_test+0x2fc>)
 8009be8:	f04f 0200 	mov.w	r2, #0
 8009bec:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	da01      	bge.n	8009bf8 <v_test+0xbc>
				  mode = 23;
 8009bf4:	2317      	movs	r3, #23
 8009bf6:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  if(mode < 8){
 8009bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bfa:	2b07      	cmp	r3, #7
 8009bfc:	dc03      	bgt.n	8009c06 <v_test+0xca>
				  full_led_write(WHITE);
 8009bfe:	2007      	movs	r0, #7
 8009c00:	f008 f80a 	bl	8011c18 <full_led_write>
 8009c04:	e009      	b.n	8009c1a <v_test+0xde>
			  }else if(mode < 16){
 8009c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c08:	2b0f      	cmp	r3, #15
 8009c0a:	dc03      	bgt.n	8009c14 <v_test+0xd8>
				  full_led_write(BLUEGREEN);
 8009c0c:	2004      	movs	r0, #4
 8009c0e:	f008 f803 	bl	8011c18 <full_led_write>
 8009c12:	e002      	b.n	8009c1a <v_test+0xde>
			  }else{
				  full_led_write(PURPLE);
 8009c14:	2005      	movs	r0, #5
 8009c16:	f007 ffff 	bl	8011c18 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 8009c1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c1c:	4887      	ldr	r0, [pc, #540]	; (8009e3c <v_test+0x300>)
 8009c1e:	f008 fd8f 	bl	8012740 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009c22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009c26:	4886      	ldr	r0, [pc, #536]	; (8009e40 <v_test+0x304>)
 8009c28:	f7f8 fb54 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d18f      	bne.n	8009b52 <v_test+0x16>
			  HAL_Delay(50);
 8009c32:	2032      	movs	r0, #50	; 0x32
 8009c34:	f7f7 f9f2 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009c38:	bf00      	nop
 8009c3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009c3e:	4880      	ldr	r0, [pc, #512]	; (8009e40 <v_test+0x304>)
 8009c40:	f7f8 fb48 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d0f7      	beq.n	8009c3a <v_test+0xfe>
			  drive_ready();
 8009c4a:	f7fb f819 	bl	8004c80 <drive_ready>

			  MF.FLAG.XDIR = 1;
 8009c4e:	4a7d      	ldr	r2, [pc, #500]	; (8009e44 <v_test+0x308>)
 8009c50:	8813      	ldrh	r3, [r2, #0]
 8009c52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c56:	8013      	strh	r3, [r2, #0]
			  MF2.FLAG.V = 0;
 8009c58:	4a7b      	ldr	r2, [pc, #492]	; (8009e48 <v_test+0x30c>)
 8009c5a:	8813      	ldrh	r3, [r2, #0]
 8009c5c:	f36f 03c3 	bfc	r3, #3, #1
 8009c60:	8013      	strh	r3, [r2, #0]
			  get_base();
 8009c62:	f007 ff47 	bl	8011af4 <get_base>

			  switch(mode){
 8009c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c68:	2b14      	cmp	r3, #20
 8009c6a:	f200 818c 	bhi.w	8009f86 <v_test+0x44a>
 8009c6e:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <v_test+0x138>)
 8009c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c74:	08009cc9 	.word	0x08009cc9
 8009c78:	08009ccf 	.word	0x08009ccf
 8009c7c:	08009cf5 	.word	0x08009cf5
 8009c80:	08009d1b 	.word	0x08009d1b
 8009c84:	08009d41 	.word	0x08009d41
 8009c88:	08009d67 	.word	0x08009d67
 8009c8c:	08009d8d 	.word	0x08009d8d
 8009c90:	08009f87 	.word	0x08009f87
 8009c94:	08009f87 	.word	0x08009f87
 8009c98:	08009db3 	.word	0x08009db3
 8009c9c:	08009dd9 	.word	0x08009dd9
 8009ca0:	08009dff 	.word	0x08009dff
 8009ca4:	08009e25 	.word	0x08009e25
 8009ca8:	08009e7b 	.word	0x08009e7b
 8009cac:	08009ea1 	.word	0x08009ea1
 8009cb0:	08009f87 	.word	0x08009f87
 8009cb4:	08009f87 	.word	0x08009f87
 8009cb8:	08009ec7 	.word	0x08009ec7
 8009cbc:	08009ef7 	.word	0x08009ef7
 8009cc0:	08009f27 	.word	0x08009f27
 8009cc4:	08009f57 	.word	0x08009f57
				case 0:
					get_base();
 8009cc8:	f007 ff14 	bl	8011af4 <get_base>
					break;
 8009ccc:	e15b      	b.n	8009f86 <v_test+0x44a>
				case 1:
					//----V右45----
					printf("V 45 right .\n");
 8009cce:	485f      	ldr	r0, [pc, #380]	; (8009e4c <v_test+0x310>)
 8009cd0:	f008 fdaa 	bl	8012828 <puts>
					half_sectionA();
 8009cd4:	f7fb ff82 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009cd8:	2300      	movs	r3, #0
 8009cda:	643b      	str	r3, [r7, #64]	; 0x40
 8009cdc:	e004      	b.n	8009ce8 <v_test+0x1ac>
						v_R45();
 8009cde:	f7fd fd5b 	bl	8007798 <v_R45>
					for(int i = 0; i < 1; i++){
 8009ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	643b      	str	r3, [r7, #64]	; 0x40
 8009ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	ddf7      	ble.n	8009cde <v_test+0x1a2>
					}
					half_sectionVD();
 8009cee:	f7fc f897 	bl	8005e20 <half_sectionVD>
					break;
 8009cf2:	e148      	b.n	8009f86 <v_test+0x44a>
				case 2:
					//----V左45----
					printf("V 45 left .\n");
 8009cf4:	4856      	ldr	r0, [pc, #344]	; (8009e50 <v_test+0x314>)
 8009cf6:	f008 fd97 	bl	8012828 <puts>
					half_sectionA();
 8009cfa:	f7fb ff6f 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009cfe:	2300      	movs	r3, #0
 8009d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d02:	e004      	b.n	8009d0e <v_test+0x1d2>
						v_L45();
 8009d04:	f7fd ff2e 	bl	8007b64 <v_L45>
					for(int i = 0; i < 1; i++){
 8009d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	ddf7      	ble.n	8009d04 <v_test+0x1c8>
					}
					half_sectionVD();
 8009d14:	f7fc f884 	bl	8005e20 <half_sectionVD>
					break;
 8009d18:	e135      	b.n	8009f86 <v_test+0x44a>
				case 3:
					//----V右90----
					printf("V 90 right .\n");
 8009d1a:	484e      	ldr	r0, [pc, #312]	; (8009e54 <v_test+0x318>)
 8009d1c:	f008 fd84 	bl	8012828 <puts>
					half_sectionVA();
 8009d20:	f7fc f822 	bl	8005d68 <half_sectionVA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 8009d24:	2300      	movs	r3, #0
 8009d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d28:	e004      	b.n	8009d34 <v_test+0x1f8>
						v_R90();
 8009d2a:	f7fe fb9f 	bl	800846c <v_R90>
					for(int i = 0; i < 1; i++){
 8009d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d30:	3301      	adds	r3, #1
 8009d32:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	ddf7      	ble.n	8009d2a <v_test+0x1ee>
					}
//					v_R45();
					half_sectionVD();
 8009d3a:	f7fc f871 	bl	8005e20 <half_sectionVD>
					break;
 8009d3e:	e122      	b.n	8009f86 <v_test+0x44a>
				case 4:
					//----V左90----
					printf("V 90 left .\n");
 8009d40:	4845      	ldr	r0, [pc, #276]	; (8009e58 <v_test+0x31c>)
 8009d42:	f008 fd71 	bl	8012828 <puts>
					half_sectionVA();
 8009d46:	f7fc f80f 	bl	8005d68 <half_sectionVA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d4e:	e004      	b.n	8009d5a <v_test+0x21e>
						v_L90();
 8009d50:	f7fe fc5c 	bl	800860c <v_L90>
					for(int i = 0; i < 1; i++){
 8009d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d56:	3301      	adds	r3, #1
 8009d58:	637b      	str	r3, [r7, #52]	; 0x34
 8009d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	ddf7      	ble.n	8009d50 <v_test+0x214>
					}
//					v_L45();
					half_sectionVD();
 8009d60:	f7fc f85e 	bl	8005e20 <half_sectionVD>
					break;
 8009d64:	e10f      	b.n	8009f86 <v_test+0x44a>
				case 5:
					//----V右135----
					printf("V 135 right .\n");
 8009d66:	483d      	ldr	r0, [pc, #244]	; (8009e5c <v_test+0x320>)
 8009d68:	f008 fd5e 	bl	8012828 <puts>
					half_sectionA();
 8009d6c:	f7fb ff36 	bl	8005bdc <half_sectionA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 8009d70:	2300      	movs	r3, #0
 8009d72:	633b      	str	r3, [r7, #48]	; 0x30
 8009d74:	e004      	b.n	8009d80 <v_test+0x244>
						v_R135();
 8009d76:	f7fe fd11 	bl	800879c <v_R135>
					for(int i = 0; i < 1; i++){
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8009d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	ddf7      	ble.n	8009d76 <v_test+0x23a>
					}
//					v_R45();
					half_sectionVD();
 8009d86:	f7fc f84b 	bl	8005e20 <half_sectionVD>
					break;
 8009d8a:	e0fc      	b.n	8009f86 <v_test+0x44a>
				case 6:
					//----V左135----
					printf("V 135 left .\n");
 8009d8c:	4834      	ldr	r0, [pc, #208]	; (8009e60 <v_test+0x324>)
 8009d8e:	f008 fd4b 	bl	8012828 <puts>
					half_sectionA();
 8009d92:	f7fb ff23 	bl	8005bdc <half_sectionA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 8009d96:	2300      	movs	r3, #0
 8009d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d9a:	e004      	b.n	8009da6 <v_test+0x26a>
						v_L135();
 8009d9c:	f7fe fee8 	bl	8008b70 <v_L135>
					for(int i = 0; i < 1; i++){
 8009da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da2:	3301      	adds	r3, #1
 8009da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	ddf7      	ble.n	8009d9c <v_test+0x260>
					}
//					v_L45();
					half_sectionVD();
 8009dac:	f7fc f838 	bl	8005e20 <half_sectionVD>
					break;
 8009db0:	e0e9      	b.n	8009f86 <v_test+0x44a>
					break;
				case 8:
					break;
				case 9:
					//----V右45----
					printf("V 45 right .\n");
 8009db2:	4826      	ldr	r0, [pc, #152]	; (8009e4c <v_test+0x310>)
 8009db4:	f008 fd38 	bl	8012828 <puts>
					half_sectionA();
 8009db8:	f7fb ff10 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dc0:	e004      	b.n	8009dcc <v_test+0x290>
						v_R45();
 8009dc2:	f7fd fce9 	bl	8007798 <v_R45>
					for(int i = 0; i < 8; i++){
 8009dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc8:	3301      	adds	r3, #1
 8009dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dce:	2b07      	cmp	r3, #7
 8009dd0:	ddf7      	ble.n	8009dc2 <v_test+0x286>
					}
					half_sectionD();
 8009dd2:	f7fb ff69 	bl	8005ca8 <half_sectionD>
					break;
 8009dd6:	e0d6      	b.n	8009f86 <v_test+0x44a>
				case 10:
					//----V左45----
					printf("V 45 left .\n");
 8009dd8:	481d      	ldr	r0, [pc, #116]	; (8009e50 <v_test+0x314>)
 8009dda:	f008 fd25 	bl	8012828 <puts>
					half_sectionA();
 8009dde:	f7fb fefd 	bl	8005bdc <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009de2:	2300      	movs	r3, #0
 8009de4:	627b      	str	r3, [r7, #36]	; 0x24
 8009de6:	e004      	b.n	8009df2 <v_test+0x2b6>
						v_L45();
 8009de8:	f7fd febc 	bl	8007b64 <v_L45>
					for(int i = 0; i < 8; i++){
 8009dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dee:	3301      	adds	r3, #1
 8009df0:	627b      	str	r3, [r7, #36]	; 0x24
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	2b07      	cmp	r3, #7
 8009df6:	ddf7      	ble.n	8009de8 <v_test+0x2ac>
					}
					half_sectionD();
 8009df8:	f7fb ff56 	bl	8005ca8 <half_sectionD>
					break;
 8009dfc:	e0c3      	b.n	8009f86 <v_test+0x44a>
				case 11:
					//----V右90----
					printf("V 90 right .\n");
 8009dfe:	4815      	ldr	r0, [pc, #84]	; (8009e54 <v_test+0x318>)
 8009e00:	f008 fd12 	bl	8012828 <puts>
					half_sectionVA();
 8009e04:	f7fb ffb0 	bl	8005d68 <half_sectionVA>
//					v_R45();
					for(int i = 0; i < 8; i++){
 8009e08:	2300      	movs	r3, #0
 8009e0a:	623b      	str	r3, [r7, #32]
 8009e0c:	e004      	b.n	8009e18 <v_test+0x2dc>
						v_R90();
 8009e0e:	f7fe fb2d 	bl	800846c <v_R90>
					for(int i = 0; i < 8; i++){
 8009e12:	6a3b      	ldr	r3, [r7, #32]
 8009e14:	3301      	adds	r3, #1
 8009e16:	623b      	str	r3, [r7, #32]
 8009e18:	6a3b      	ldr	r3, [r7, #32]
 8009e1a:	2b07      	cmp	r3, #7
 8009e1c:	ddf7      	ble.n	8009e0e <v_test+0x2d2>
					}
//					v_R45();
					half_sectionVD();
 8009e1e:	f7fb ffff 	bl	8005e20 <half_sectionVD>
					break;
 8009e22:	e0b0      	b.n	8009f86 <v_test+0x44a>
				case 12:
					//----V左90----
					printf("V 90 left .\n");
 8009e24:	480c      	ldr	r0, [pc, #48]	; (8009e58 <v_test+0x31c>)
 8009e26:	f008 fcff 	bl	8012828 <puts>
					half_sectionVA();
 8009e2a:	f7fb ff9d 	bl	8005d68 <half_sectionVA>
//					v_L45();
					for(int i = 0; i < 8; i++){
 8009e2e:	2300      	movs	r3, #0
 8009e30:	61fb      	str	r3, [r7, #28]
 8009e32:	e01c      	b.n	8009e6e <v_test+0x332>
 8009e34:	08013ad0 	.word	0x08013ad0
 8009e38:	20000aec 	.word	0x20000aec
 8009e3c:	0801397c 	.word	0x0801397c
 8009e40:	40020000 	.word	0x40020000
 8009e44:	20000f68 	.word	0x20000f68
 8009e48:	20000f64 	.word	0x20000f64
 8009e4c:	08013ae8 	.word	0x08013ae8
 8009e50:	08013af8 	.word	0x08013af8
 8009e54:	08013b04 	.word	0x08013b04
 8009e58:	08013b14 	.word	0x08013b14
 8009e5c:	08013b20 	.word	0x08013b20
 8009e60:	08013b30 	.word	0x08013b30
						v_L90();
 8009e64:	f7fe fbd2 	bl	800860c <v_L90>
					for(int i = 0; i < 8; i++){
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	61fb      	str	r3, [r7, #28]
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	2b07      	cmp	r3, #7
 8009e72:	ddf7      	ble.n	8009e64 <v_test+0x328>
					}
//					v_L45();
					half_sectionVD();
 8009e74:	f7fb ffd4 	bl	8005e20 <half_sectionVD>
					break;
 8009e78:	e085      	b.n	8009f86 <v_test+0x44a>
				case 13:
					//----V右135----
					printf("V 135 right .\n");
 8009e7a:	4845      	ldr	r0, [pc, #276]	; (8009f90 <v_test+0x454>)
 8009e7c:	f008 fcd4 	bl	8012828 <puts>
					half_sectionA();
 8009e80:	f7fb feac 	bl	8005bdc <half_sectionA>
//					v_R45();
					for(int i = 0; i < 4; i++){
 8009e84:	2300      	movs	r3, #0
 8009e86:	61bb      	str	r3, [r7, #24]
 8009e88:	e004      	b.n	8009e94 <v_test+0x358>
						v_R135();
 8009e8a:	f7fe fc87 	bl	800879c <v_R135>
					for(int i = 0; i < 4; i++){
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	3301      	adds	r3, #1
 8009e92:	61bb      	str	r3, [r7, #24]
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	2b03      	cmp	r3, #3
 8009e98:	ddf7      	ble.n	8009e8a <v_test+0x34e>
					}
//					v_R45();
					half_sectionD();
 8009e9a:	f7fb ff05 	bl	8005ca8 <half_sectionD>
					break;
 8009e9e:	e072      	b.n	8009f86 <v_test+0x44a>
				case 14:
					//----V左135----
					printf("V 135 left .\n");
 8009ea0:	483c      	ldr	r0, [pc, #240]	; (8009f94 <v_test+0x458>)
 8009ea2:	f008 fcc1 	bl	8012828 <puts>
					half_sectionA();
 8009ea6:	f7fb fe99 	bl	8005bdc <half_sectionA>
//					v_L45();
					for(int i = 0; i < 4; i++){
 8009eaa:	2300      	movs	r3, #0
 8009eac:	617b      	str	r3, [r7, #20]
 8009eae:	e004      	b.n	8009eba <v_test+0x37e>
						v_L135();
 8009eb0:	f7fe fe5e 	bl	8008b70 <v_L135>
					for(int i = 0; i < 4; i++){
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	617b      	str	r3, [r7, #20]
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	2b03      	cmp	r3, #3
 8009ebe:	ddf7      	ble.n	8009eb0 <v_test+0x374>
					}
//					v_L45();
					half_sectionD();
 8009ec0:	f7fb fef2 	bl	8005ca8 <half_sectionD>
					break;
 8009ec4:	e05f      	b.n	8009f86 <v_test+0x44a>
					break;
				case 16:
					break;
				case 17:
					//----V右45D----
					printf("V 45 right .\n");
 8009ec6:	4834      	ldr	r0, [pc, #208]	; (8009f98 <v_test+0x45c>)
 8009ec8:	f008 fcae 	bl	8012828 <puts>
					MF2.FLAG.V = 1;
 8009ecc:	4a33      	ldr	r2, [pc, #204]	; (8009f9c <v_test+0x460>)
 8009ece:	8813      	ldrh	r3, [r2, #0]
 8009ed0:	f043 0308 	orr.w	r3, r3, #8
 8009ed4:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 8009ed6:	f7fb ff47 	bl	8005d68 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 8009eda:	2300      	movs	r3, #0
 8009edc:	613b      	str	r3, [r7, #16]
 8009ede:	e004      	b.n	8009eea <v_test+0x3ae>
//						v_R45D();
						v_R45();
 8009ee0:	f7fd fc5a 	bl	8007798 <v_R45>
					for(int i = 0; i < 1; i++){
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	613b      	str	r3, [r7, #16]
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	ddf7      	ble.n	8009ee0 <v_test+0x3a4>
					}
					half_sectionD();
 8009ef0:	f7fb feda 	bl	8005ca8 <half_sectionD>
					break;
 8009ef4:	e047      	b.n	8009f86 <v_test+0x44a>
				case 18:
					//----V左45D----
					printf("V 45 left .\n");
 8009ef6:	482a      	ldr	r0, [pc, #168]	; (8009fa0 <v_test+0x464>)
 8009ef8:	f008 fc96 	bl	8012828 <puts>
					MF2.FLAG.V = 1;
 8009efc:	4a27      	ldr	r2, [pc, #156]	; (8009f9c <v_test+0x460>)
 8009efe:	8813      	ldrh	r3, [r2, #0]
 8009f00:	f043 0308 	orr.w	r3, r3, #8
 8009f04:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 8009f06:	f7fb ff2f 	bl	8005d68 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	60fb      	str	r3, [r7, #12]
 8009f0e:	e004      	b.n	8009f1a <v_test+0x3de>
//						v_L45D();
						v_L45();
 8009f10:	f7fd fe28 	bl	8007b64 <v_L45>
					for(int i = 0; i < 1; i++){
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	3301      	adds	r3, #1
 8009f18:	60fb      	str	r3, [r7, #12]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	ddf7      	ble.n	8009f10 <v_test+0x3d4>
					}
					half_sectionD();
 8009f20:	f7fb fec2 	bl	8005ca8 <half_sectionD>
					break;
 8009f24:	e02f      	b.n	8009f86 <v_test+0x44a>
				case 19:
					//----V右135D----
					printf("V 135 right .\n");
 8009f26:	481a      	ldr	r0, [pc, #104]	; (8009f90 <v_test+0x454>)
 8009f28:	f008 fc7e 	bl	8012828 <puts>
					MF2.FLAG.V = 1;
 8009f2c:	4a1b      	ldr	r2, [pc, #108]	; (8009f9c <v_test+0x460>)
 8009f2e:	8813      	ldrh	r3, [r2, #0]
 8009f30:	f043 0308 	orr.w	r3, r3, #8
 8009f34:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 8009f36:	f7fb ff17 	bl	8005d68 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	60bb      	str	r3, [r7, #8]
 8009f3e:	e004      	b.n	8009f4a <v_test+0x40e>
//						v_R135D();
						v_R135();
 8009f40:	f7fe fc2c 	bl	800879c <v_R135>
					for(int i = 0; i < 1; i++){
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	3301      	adds	r3, #1
 8009f48:	60bb      	str	r3, [r7, #8]
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	ddf7      	ble.n	8009f40 <v_test+0x404>
					}
					half_sectionD();
 8009f50:	f7fb feaa 	bl	8005ca8 <half_sectionD>
					break;
 8009f54:	e017      	b.n	8009f86 <v_test+0x44a>
				case 20:
					//----V左135D----
					printf("V 135 left .\n");
 8009f56:	480f      	ldr	r0, [pc, #60]	; (8009f94 <v_test+0x458>)
 8009f58:	f008 fc66 	bl	8012828 <puts>
					MF2.FLAG.V = 1;
 8009f5c:	4a0f      	ldr	r2, [pc, #60]	; (8009f9c <v_test+0x460>)
 8009f5e:	8813      	ldrh	r3, [r2, #0]
 8009f60:	f043 0308 	orr.w	r3, r3, #8
 8009f64:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 8009f66:	f7fb feff 	bl	8005d68 <half_sectionVA>
					for(int i = 0; i < 1; i++){
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	607b      	str	r3, [r7, #4]
 8009f6e:	e004      	b.n	8009f7a <v_test+0x43e>
//						v_L135D();
						v_L135();
 8009f70:	f7fe fdfe 	bl	8008b70 <v_L135>
					for(int i = 0; i < 1; i++){
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	3301      	adds	r3, #1
 8009f78:	607b      	str	r3, [r7, #4]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	ddf7      	ble.n	8009f70 <v_test+0x434>
					}
					half_sectionD();
 8009f80:	f7fb fe92 	bl	8005ca8 <half_sectionD>
					break;
 8009f84:	bf00      	nop
			}
		full_led_write(RED);
 8009f86:	2001      	movs	r0, #1
 8009f88:	f007 fe46 	bl	8011c18 <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009f8c:	e5e1      	b.n	8009b52 <v_test+0x16>
 8009f8e:	bf00      	nop
 8009f90:	08013b20 	.word	0x08013b20
 8009f94:	08013b30 	.word	0x08013b30
 8009f98:	08013ae8 	.word	0x08013ae8
 8009f9c:	20000f64 	.word	0x20000f64
 8009fa0:	08013af8 	.word	0x08013af8

08009fa4 <pass_test>:
//pass_test
// pass圧縮走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_test(void){
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0

	int mode = 0;
 8009faa:	2300      	movs	r3, #0
 8009fac:	607b      	str	r3, [r7, #4]
	printf("Test pass Run, Mode : %d\n", mode);
 8009fae:	6879      	ldr	r1, [r7, #4]
 8009fb0:	48a2      	ldr	r0, [pc, #648]	; (800a23c <pass_test+0x298>)
 8009fb2:	f008 fbc5 	bl	8012740 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	b2d8      	uxtb	r0, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	f003 0302 	and.w	r3, r3, #2
 8009fc8:	b2d9      	uxtb	r1, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	f003 0304 	and.w	r3, r3, #4
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	f007 fde5 	bl	8011ba4 <led_write>
		  if(dist_r >= 20){
 8009fda:	4b99      	ldr	r3, [pc, #612]	; (800a240 <pass_test+0x29c>)
 8009fdc:	edd3 7a00 	vldr	s15, [r3]
 8009fe0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fec:	db0f      	blt.n	800a00e <pass_test+0x6a>
			  mode++;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009ff4:	4b92      	ldr	r3, [pc, #584]	; (800a240 <pass_test+0x29c>)
 8009ff6:	f04f 0200 	mov.w	r2, #0
 8009ffa:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b07      	cmp	r3, #7
 800a000:	dd01      	ble.n	800a006 <pass_test+0x62>
				  mode = 0;
 800a002:	2300      	movs	r3, #0
 800a004:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a006:	6879      	ldr	r1, [r7, #4]
 800a008:	488e      	ldr	r0, [pc, #568]	; (800a244 <pass_test+0x2a0>)
 800a00a:	f008 fb99 	bl	8012740 <iprintf>
		  }
		  if(dist_r <= -20){
 800a00e:	4b8c      	ldr	r3, [pc, #560]	; (800a240 <pass_test+0x29c>)
 800a010:	edd3 7a00 	vldr	s15, [r3]
 800a014:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a020:	d80f      	bhi.n	800a042 <pass_test+0x9e>
			  mode--;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	3b01      	subs	r3, #1
 800a026:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a028:	4b85      	ldr	r3, [pc, #532]	; (800a240 <pass_test+0x29c>)
 800a02a:	f04f 0200 	mov.w	r2, #0
 800a02e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	da01      	bge.n	800a03a <pass_test+0x96>
				  mode = 7;
 800a036:	2307      	movs	r3, #7
 800a038:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	4881      	ldr	r0, [pc, #516]	; (800a244 <pass_test+0x2a0>)
 800a03e:	f008 fb7f 	bl	8012740 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a042:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a046:	4880      	ldr	r0, [pc, #512]	; (800a248 <pass_test+0x2a4>)
 800a048:	f7f8 f944 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1b1      	bne.n	8009fb6 <pass_test+0x12>
			  HAL_Delay(50);
 800a052:	2032      	movs	r0, #50	; 0x32
 800a054:	f7f6 ffe2 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a058:	bf00      	nop
 800a05a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a05e:	487a      	ldr	r0, [pc, #488]	; (800a248 <pass_test+0x2a4>)
 800a060:	f7f8 f938 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d0f7      	beq.n	800a05a <pass_test+0xb6>
			  drive_ready();
 800a06a:	f7fa fe09 	bl	8004c80 <drive_ready>
			  MF2.FLAG.V = 0;
 800a06e:	4a77      	ldr	r2, [pc, #476]	; (800a24c <pass_test+0x2a8>)
 800a070:	8813      	ldrh	r3, [r2, #0]
 800a072:	f36f 03c3 	bfc	r3, #3, #1
 800a076:	8013      	strh	r3, [r2, #0]

			  switch(mode){
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2b07      	cmp	r3, #7
 800a07c:	d89b      	bhi.n	8009fb6 <pass_test+0x12>
 800a07e:	a201      	add	r2, pc, #4	; (adr r2, 800a084 <pass_test+0xe0>)
 800a080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a084:	0800a0a5 	.word	0x0800a0a5
 800a088:	0800a12d 	.word	0x0800a12d
 800a08c:	0800a1b5 	.word	0x0800a1b5
 800a090:	0800a27d 	.word	0x0800a27d
 800a094:	0800a305 	.word	0x0800a305
 800a098:	0800a38d 	.word	0x0800a38d
 800a09c:	08009fb7 	.word	0x08009fb7
 800a0a0:	0800a415 	.word	0x0800a415
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800a0a4:	486a      	ldr	r0, [pc, #424]	; (800a250 <pass_test+0x2ac>)
 800a0a6:	f008 fbbf 	bl	8012828 <puts>

					MF.FLAG.SCND = 0;
 800a0aa:	4a6a      	ldr	r2, [pc, #424]	; (800a254 <pass_test+0x2b0>)
 800a0ac:	8813      	ldrh	r3, [r2, #0]
 800a0ae:	f36f 1345 	bfc	r3, #5, #1
 800a0b2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a0b4:	4a67      	ldr	r2, [pc, #412]	; (800a254 <pass_test+0x2b0>)
 800a0b6:	8813      	ldrh	r3, [r2, #0]
 800a0b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a0bc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a0be:	4a65      	ldr	r2, [pc, #404]	; (800a254 <pass_test+0x2b0>)
 800a0c0:	8813      	ldrh	r3, [r2, #0]
 800a0c2:	f36f 238a 	bfc	r3, #10, #1
 800a0c6:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a0c8:	4b63      	ldr	r3, [pc, #396]	; (800a258 <pass_test+0x2b4>)
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a0ce:	4b63      	ldr	r3, [pc, #396]	; (800a25c <pass_test+0x2b8>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a0d4:	4b62      	ldr	r3, [pc, #392]	; (800a260 <pass_test+0x2bc>)
 800a0d6:	2202      	movs	r2, #2
 800a0d8:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800a0da:	4b62      	ldr	r3, [pc, #392]	; (800a264 <pass_test+0x2c0>)
 800a0dc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800a0e0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800a0e2:	4b61      	ldr	r3, [pc, #388]	; (800a268 <pass_test+0x2c4>)
 800a0e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a0e8:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a0ea:	4b5c      	ldr	r3, [pc, #368]	; (800a25c <pass_test+0x2b8>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a0f0:	4b5e      	ldr	r3, [pc, #376]	; (800a26c <pass_test+0x2c8>)
 800a0f2:	2207      	movs	r2, #7
 800a0f4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a0f6:	4b5e      	ldr	r3, [pc, #376]	; (800a270 <pass_test+0x2cc>)
 800a0f8:	2207      	movs	r2, #7
 800a0fa:	701a      	strb	r2, [r3, #0]

					get_base();
 800a0fc:	f007 fcfa 	bl	8011af4 <get_base>

					searchC();
 800a100:	f004 fd22 	bl	800eb48 <searchC>
					HAL_Delay(2000);
 800a104:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a108:	f7f6 ff88 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a10c:	4b58      	ldr	r3, [pc, #352]	; (800a270 <pass_test+0x2cc>)
 800a10e:	2200      	movs	r2, #0
 800a110:	701a      	strb	r2, [r3, #0]
 800a112:	4b57      	ldr	r3, [pc, #348]	; (800a270 <pass_test+0x2cc>)
 800a114:	781a      	ldrb	r2, [r3, #0]
 800a116:	4b55      	ldr	r3, [pc, #340]	; (800a26c <pass_test+0x2c8>)
 800a118:	701a      	strb	r2, [r3, #0]
					searchC();
 800a11a:	f004 fd15 	bl	800eb48 <searchC>

					goal_x = GOAL_X;
 800a11e:	4b53      	ldr	r3, [pc, #332]	; (800a26c <pass_test+0x2c8>)
 800a120:	2207      	movs	r2, #7
 800a122:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a124:	4b52      	ldr	r3, [pc, #328]	; (800a270 <pass_test+0x2cc>)
 800a126:	2207      	movs	r2, #7
 800a128:	701a      	strb	r2, [r3, #0]
					break;
 800a12a:	e1b7      	b.n	800a49c <pass_test+0x4f8>
				case 1:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed----
					printf("pass press 3-2.\n");
 800a12c:	4851      	ldr	r0, [pc, #324]	; (800a274 <pass_test+0x2d0>)
 800a12e:	f008 fb7b 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800a132:	4a48      	ldr	r2, [pc, #288]	; (800a254 <pass_test+0x2b0>)
 800a134:	8813      	ldrh	r3, [r2, #0]
 800a136:	f043 0320 	orr.w	r3, r3, #32
 800a13a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a13c:	4a45      	ldr	r2, [pc, #276]	; (800a254 <pass_test+0x2b0>)
 800a13e:	8813      	ldrh	r3, [r2, #0]
 800a140:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a144:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a146:	4a43      	ldr	r2, [pc, #268]	; (800a254 <pass_test+0x2b0>)
 800a148:	8813      	ldrh	r3, [r2, #0]
 800a14a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a14e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a150:	4b41      	ldr	r3, [pc, #260]	; (800a258 <pass_test+0x2b4>)
 800a152:	2202      	movs	r2, #2
 800a154:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a156:	4b41      	ldr	r3, [pc, #260]	; (800a25c <pass_test+0x2b8>)
 800a158:	2200      	movs	r2, #0
 800a15a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a15c:	4b40      	ldr	r3, [pc, #256]	; (800a260 <pass_test+0x2bc>)
 800a15e:	2202      	movs	r2, #2
 800a160:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a162:	4b40      	ldr	r3, [pc, #256]	; (800a264 <pass_test+0x2c0>)
 800a164:	f241 3288 	movw	r2, #5000	; 0x1388
 800a168:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a16a:	4b3f      	ldr	r3, [pc, #252]	; (800a268 <pass_test+0x2c4>)
 800a16c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a170:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a172:	4b41      	ldr	r3, [pc, #260]	; (800a278 <pass_test+0x2d4>)
 800a174:	2203      	movs	r2, #3
 800a176:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a178:	4b3c      	ldr	r3, [pc, #240]	; (800a26c <pass_test+0x2c8>)
 800a17a:	2207      	movs	r2, #7
 800a17c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a17e:	4b3c      	ldr	r3, [pc, #240]	; (800a270 <pass_test+0x2cc>)
 800a180:	2207      	movs	r2, #7
 800a182:	701a      	strb	r2, [r3, #0]

					get_base();
 800a184:	f007 fcb6 	bl	8011af4 <get_base>

					searchF3();
 800a188:	f005 f958 	bl	800f43c <searchF3>
					HAL_Delay(2000);
 800a18c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a190:	f7f6 ff44 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a194:	4b36      	ldr	r3, [pc, #216]	; (800a270 <pass_test+0x2cc>)
 800a196:	2200      	movs	r2, #0
 800a198:	701a      	strb	r2, [r3, #0]
 800a19a:	4b35      	ldr	r3, [pc, #212]	; (800a270 <pass_test+0x2cc>)
 800a19c:	781a      	ldrb	r2, [r3, #0]
 800a19e:	4b33      	ldr	r3, [pc, #204]	; (800a26c <pass_test+0x2c8>)
 800a1a0:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a1a2:	f005 f94b 	bl	800f43c <searchF3>

					goal_x = GOAL_X;
 800a1a6:	4b31      	ldr	r3, [pc, #196]	; (800a26c <pass_test+0x2c8>)
 800a1a8:	2207      	movs	r2, #7
 800a1aa:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a1ac:	4b30      	ldr	r3, [pc, #192]	; (800a270 <pass_test+0x2cc>)
 800a1ae:	2207      	movs	r2, #7
 800a1b0:	701a      	strb	r2, [r3, #0]
					break;
 800a1b2:	e173      	b.n	800a49c <pass_test+0x4f8>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 800a1b4:	482f      	ldr	r0, [pc, #188]	; (800a274 <pass_test+0x2d0>)
 800a1b6:	f008 fb37 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800a1ba:	4a26      	ldr	r2, [pc, #152]	; (800a254 <pass_test+0x2b0>)
 800a1bc:	8813      	ldrh	r3, [r2, #0]
 800a1be:	f043 0320 	orr.w	r3, r3, #32
 800a1c2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a1c4:	4a23      	ldr	r2, [pc, #140]	; (800a254 <pass_test+0x2b0>)
 800a1c6:	8813      	ldrh	r3, [r2, #0]
 800a1c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1cc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a1ce:	4a21      	ldr	r2, [pc, #132]	; (800a254 <pass_test+0x2b0>)
 800a1d0:	8813      	ldrh	r3, [r2, #0]
 800a1d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a1d6:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a1d8:	4b1f      	ldr	r3, [pc, #124]	; (800a258 <pass_test+0x2b4>)
 800a1da:	2203      	movs	r2, #3
 800a1dc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a1de:	4b1f      	ldr	r3, [pc, #124]	; (800a25c <pass_test+0x2b8>)
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a1e4:	4b1e      	ldr	r3, [pc, #120]	; (800a260 <pass_test+0x2bc>)
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a1ea:	4b1e      	ldr	r3, [pc, #120]	; (800a264 <pass_test+0x2c0>)
 800a1ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1f0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800a1f2:	4b1d      	ldr	r3, [pc, #116]	; (800a268 <pass_test+0x2c4>)
 800a1f4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a1f8:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a1fa:	4b1f      	ldr	r3, [pc, #124]	; (800a278 <pass_test+0x2d4>)
 800a1fc:	2203      	movs	r2, #3
 800a1fe:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a200:	4b1a      	ldr	r3, [pc, #104]	; (800a26c <pass_test+0x2c8>)
 800a202:	2207      	movs	r2, #7
 800a204:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a206:	4b1a      	ldr	r3, [pc, #104]	; (800a270 <pass_test+0x2cc>)
 800a208:	2207      	movs	r2, #7
 800a20a:	701a      	strb	r2, [r3, #0]

					get_base();
 800a20c:	f007 fc72 	bl	8011af4 <get_base>

					searchF3();
 800a210:	f005 f914 	bl	800f43c <searchF3>
					HAL_Delay(2000);
 800a214:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a218:	f7f6 ff00 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a21c:	4b14      	ldr	r3, [pc, #80]	; (800a270 <pass_test+0x2cc>)
 800a21e:	2200      	movs	r2, #0
 800a220:	701a      	strb	r2, [r3, #0]
 800a222:	4b13      	ldr	r3, [pc, #76]	; (800a270 <pass_test+0x2cc>)
 800a224:	781a      	ldrb	r2, [r3, #0]
 800a226:	4b11      	ldr	r3, [pc, #68]	; (800a26c <pass_test+0x2c8>)
 800a228:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a22a:	f005 f907 	bl	800f43c <searchF3>

					goal_x = GOAL_X;
 800a22e:	4b0f      	ldr	r3, [pc, #60]	; (800a26c <pass_test+0x2c8>)
 800a230:	2207      	movs	r2, #7
 800a232:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a234:	4b0e      	ldr	r3, [pc, #56]	; (800a270 <pass_test+0x2cc>)
 800a236:	2207      	movs	r2, #7
 800a238:	701a      	strb	r2, [r3, #0]
					break;
 800a23a:	e12f      	b.n	800a49c <pass_test+0x4f8>
 800a23c:	08013b40 	.word	0x08013b40
 800a240:	20000aec 	.word	0x20000aec
 800a244:	0801397c 	.word	0x0801397c
 800a248:	40020000 	.word	0x40020000
 800a24c:	20000f64 	.word	0x20000f64
 800a250:	08013b5c 	.word	0x08013b5c
 800a254:	20000f68 	.word	0x20000f68
 800a258:	20000456 	.word	0x20000456
 800a25c:	200015c8 	.word	0x200015c8
 800a260:	20000bb1 	.word	0x20000bb1
 800a264:	20000454 	.word	0x20000454
 800a268:	20000f7c 	.word	0x20000f7c
 800a26c:	20000bb0 	.word	0x20000bb0
 800a270:	20000b4c 	.word	0x20000b4c
 800a274:	08013b70 	.word	0x08013b70
 800a278:	20000457 	.word	0x20000457
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High High Speed----
					printf("pass press 3-2.\n");
 800a27c:	4888      	ldr	r0, [pc, #544]	; (800a4a0 <pass_test+0x4fc>)
 800a27e:	f008 fad3 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800a282:	4a88      	ldr	r2, [pc, #544]	; (800a4a4 <pass_test+0x500>)
 800a284:	8813      	ldrh	r3, [r2, #0]
 800a286:	f043 0320 	orr.w	r3, r3, #32
 800a28a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a28c:	4a85      	ldr	r2, [pc, #532]	; (800a4a4 <pass_test+0x500>)
 800a28e:	8813      	ldrh	r3, [r2, #0]
 800a290:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a294:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a296:	4a83      	ldr	r2, [pc, #524]	; (800a4a4 <pass_test+0x500>)
 800a298:	8813      	ldrh	r3, [r2, #0]
 800a29a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a29e:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH_HIGH;
 800a2a0:	4b81      	ldr	r3, [pc, #516]	; (800a4a8 <pass_test+0x504>)
 800a2a2:	2204      	movs	r2, #4
 800a2a4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a2a6:	4b81      	ldr	r3, [pc, #516]	; (800a4ac <pass_test+0x508>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a2ac:	4b80      	ldr	r3, [pc, #512]	; (800a4b0 <pass_test+0x50c>)
 800a2ae:	2202      	movs	r2, #2
 800a2b0:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800a2b2:	4b80      	ldr	r3, [pc, #512]	; (800a4b4 <pass_test+0x510>)
 800a2b4:	f242 7210 	movw	r2, #10000	; 0x2710
 800a2b8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800a2ba:	4b7f      	ldr	r3, [pc, #508]	; (800a4b8 <pass_test+0x514>)
 800a2bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a2c0:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a2c2:	4b7e      	ldr	r3, [pc, #504]	; (800a4bc <pass_test+0x518>)
 800a2c4:	2203      	movs	r2, #3
 800a2c6:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a2c8:	4b7d      	ldr	r3, [pc, #500]	; (800a4c0 <pass_test+0x51c>)
 800a2ca:	2207      	movs	r2, #7
 800a2cc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a2ce:	4b7d      	ldr	r3, [pc, #500]	; (800a4c4 <pass_test+0x520>)
 800a2d0:	2207      	movs	r2, #7
 800a2d2:	701a      	strb	r2, [r3, #0]

					get_base();
 800a2d4:	f007 fc0e 	bl	8011af4 <get_base>

					searchF3();
 800a2d8:	f005 f8b0 	bl	800f43c <searchF3>
					HAL_Delay(2000);
 800a2dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a2e0:	f7f6 fe9c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a2e4:	4b77      	ldr	r3, [pc, #476]	; (800a4c4 <pass_test+0x520>)
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	701a      	strb	r2, [r3, #0]
 800a2ea:	4b76      	ldr	r3, [pc, #472]	; (800a4c4 <pass_test+0x520>)
 800a2ec:	781a      	ldrb	r2, [r3, #0]
 800a2ee:	4b74      	ldr	r3, [pc, #464]	; (800a4c0 <pass_test+0x51c>)
 800a2f0:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a2f2:	f005 f8a3 	bl	800f43c <searchF3>

					goal_x = GOAL_X;
 800a2f6:	4b72      	ldr	r3, [pc, #456]	; (800a4c0 <pass_test+0x51c>)
 800a2f8:	2207      	movs	r2, #7
 800a2fa:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a2fc:	4b71      	ldr	r3, [pc, #452]	; (800a4c4 <pass_test+0x520>)
 800a2fe:	2207      	movs	r2, #7
 800a300:	701a      	strb	r2, [r3, #0]
					break;
 800a302:	e0cb      	b.n	800a49c <pass_test+0x4f8>
				case 4:
					//----a直線と大回り圧縮と斜め Middle Speedｰｰｰｰ
					printf("pass press 4.\n");
 800a304:	4870      	ldr	r0, [pc, #448]	; (800a4c8 <pass_test+0x524>)
 800a306:	f008 fa8f 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800a30a:	4a66      	ldr	r2, [pc, #408]	; (800a4a4 <pass_test+0x500>)
 800a30c:	8813      	ldrh	r3, [r2, #0]
 800a30e:	f043 0320 	orr.w	r3, r3, #32
 800a312:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a314:	4a63      	ldr	r2, [pc, #396]	; (800a4a4 <pass_test+0x500>)
 800a316:	8813      	ldrh	r3, [r2, #0]
 800a318:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a31c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a31e:	4a61      	ldr	r2, [pc, #388]	; (800a4a4 <pass_test+0x500>)
 800a320:	8813      	ldrh	r3, [r2, #0]
 800a322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a326:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a328:	4b5f      	ldr	r3, [pc, #380]	; (800a4a8 <pass_test+0x504>)
 800a32a:	2202      	movs	r2, #2
 800a32c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a32e:	4b5f      	ldr	r3, [pc, #380]	; (800a4ac <pass_test+0x508>)
 800a330:	2200      	movs	r2, #0
 800a332:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a334:	4b5e      	ldr	r3, [pc, #376]	; (800a4b0 <pass_test+0x50c>)
 800a336:	2202      	movs	r2, #2
 800a338:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a33a:	4b5e      	ldr	r3, [pc, #376]	; (800a4b4 <pass_test+0x510>)
 800a33c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a340:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a342:	4b5d      	ldr	r3, [pc, #372]	; (800a4b8 <pass_test+0x514>)
 800a344:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a348:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800a34a:	4b5c      	ldr	r3, [pc, #368]	; (800a4bc <pass_test+0x518>)
 800a34c:	2204      	movs	r2, #4
 800a34e:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a350:	4b5b      	ldr	r3, [pc, #364]	; (800a4c0 <pass_test+0x51c>)
 800a352:	2207      	movs	r2, #7
 800a354:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a356:	4b5b      	ldr	r3, [pc, #364]	; (800a4c4 <pass_test+0x520>)
 800a358:	2207      	movs	r2, #7
 800a35a:	701a      	strb	r2, [r3, #0]

					get_base();
 800a35c:	f007 fbca 	bl	8011af4 <get_base>

					searchF4();
 800a360:	f005 f948 	bl	800f5f4 <searchF4>
					HAL_Delay(2000);
 800a364:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a368:	f7f6 fe58 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a36c:	4b55      	ldr	r3, [pc, #340]	; (800a4c4 <pass_test+0x520>)
 800a36e:	2200      	movs	r2, #0
 800a370:	701a      	strb	r2, [r3, #0]
 800a372:	4b54      	ldr	r3, [pc, #336]	; (800a4c4 <pass_test+0x520>)
 800a374:	781a      	ldrb	r2, [r3, #0]
 800a376:	4b52      	ldr	r3, [pc, #328]	; (800a4c0 <pass_test+0x51c>)
 800a378:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a37a:	f005 f93b 	bl	800f5f4 <searchF4>

					goal_x = GOAL_X;
 800a37e:	4b50      	ldr	r3, [pc, #320]	; (800a4c0 <pass_test+0x51c>)
 800a380:	2207      	movs	r2, #7
 800a382:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a384:	4b4f      	ldr	r3, [pc, #316]	; (800a4c4 <pass_test+0x520>)
 800a386:	2207      	movs	r2, #7
 800a388:	701a      	strb	r2, [r3, #0]
					break;
 800a38a:	e087      	b.n	800a49c <pass_test+0x4f8>
				case 5:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 800a38c:	484e      	ldr	r0, [pc, #312]	; (800a4c8 <pass_test+0x524>)
 800a38e:	f008 fa4b 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800a392:	4a44      	ldr	r2, [pc, #272]	; (800a4a4 <pass_test+0x500>)
 800a394:	8813      	ldrh	r3, [r2, #0]
 800a396:	f043 0320 	orr.w	r3, r3, #32
 800a39a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a39c:	4a41      	ldr	r2, [pc, #260]	; (800a4a4 <pass_test+0x500>)
 800a39e:	8813      	ldrh	r3, [r2, #0]
 800a3a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3a4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a3a6:	4a3f      	ldr	r2, [pc, #252]	; (800a4a4 <pass_test+0x500>)
 800a3a8:	8813      	ldrh	r3, [r2, #0]
 800a3aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a3ae:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800a3b0:	4b3d      	ldr	r3, [pc, #244]	; (800a4a8 <pass_test+0x504>)
 800a3b2:	2203      	movs	r2, #3
 800a3b4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a3b6:	4b3d      	ldr	r3, [pc, #244]	; (800a4ac <pass_test+0x508>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a3bc:	4b3c      	ldr	r3, [pc, #240]	; (800a4b0 <pass_test+0x50c>)
 800a3be:	2202      	movs	r2, #2
 800a3c0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a3c2:	4b3c      	ldr	r3, [pc, #240]	; (800a4b4 <pass_test+0x510>)
 800a3c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3c8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800a3ca:	4b3b      	ldr	r3, [pc, #236]	; (800a4b8 <pass_test+0x514>)
 800a3cc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a3d0:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800a3d2:	4b3a      	ldr	r3, [pc, #232]	; (800a4bc <pass_test+0x518>)
 800a3d4:	2204      	movs	r2, #4
 800a3d6:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a3d8:	4b39      	ldr	r3, [pc, #228]	; (800a4c0 <pass_test+0x51c>)
 800a3da:	2207      	movs	r2, #7
 800a3dc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a3de:	4b39      	ldr	r3, [pc, #228]	; (800a4c4 <pass_test+0x520>)
 800a3e0:	2207      	movs	r2, #7
 800a3e2:	701a      	strb	r2, [r3, #0]

					get_base();
 800a3e4:	f007 fb86 	bl	8011af4 <get_base>

					searchF4();
 800a3e8:	f005 f904 	bl	800f5f4 <searchF4>
					HAL_Delay(2000);
 800a3ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a3f0:	f7f6 fe14 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a3f4:	4b33      	ldr	r3, [pc, #204]	; (800a4c4 <pass_test+0x520>)
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	701a      	strb	r2, [r3, #0]
 800a3fa:	4b32      	ldr	r3, [pc, #200]	; (800a4c4 <pass_test+0x520>)
 800a3fc:	781a      	ldrb	r2, [r3, #0]
 800a3fe:	4b30      	ldr	r3, [pc, #192]	; (800a4c0 <pass_test+0x51c>)
 800a400:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a402:	f005 f8f7 	bl	800f5f4 <searchF4>

					goal_x = GOAL_X;
 800a406:	4b2e      	ldr	r3, [pc, #184]	; (800a4c0 <pass_test+0x51c>)
 800a408:	2207      	movs	r2, #7
 800a40a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a40c:	4b2d      	ldr	r3, [pc, #180]	; (800a4c4 <pass_test+0x520>)
 800a40e:	2207      	movs	r2, #7
 800a410:	701a      	strb	r2, [r3, #0]
					break;
 800a412:	e043      	b.n	800a49c <pass_test+0x4f8>
				case 7:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 800a414:	482d      	ldr	r0, [pc, #180]	; (800a4cc <pass_test+0x528>)
 800a416:	f008 fa07 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800a41a:	4a22      	ldr	r2, [pc, #136]	; (800a4a4 <pass_test+0x500>)
 800a41c:	8813      	ldrh	r3, [r2, #0]
 800a41e:	f043 0320 	orr.w	r3, r3, #32
 800a422:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a424:	4a1f      	ldr	r2, [pc, #124]	; (800a4a4 <pass_test+0x500>)
 800a426:	8813      	ldrh	r3, [r2, #0]
 800a428:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a42c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a42e:	4a1d      	ldr	r2, [pc, #116]	; (800a4a4 <pass_test+0x500>)
 800a430:	8813      	ldrh	r3, [r2, #0]
 800a432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a436:	8013      	strh	r3, [r2, #0]
					run_mode = 5;
 800a438:	4b1b      	ldr	r3, [pc, #108]	; (800a4a8 <pass_test+0x504>)
 800a43a:	2205      	movs	r2, #5
 800a43c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a43e:	4b1b      	ldr	r3, [pc, #108]	; (800a4ac <pass_test+0x508>)
 800a440:	2200      	movs	r2, #0
 800a442:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a444:	4b1a      	ldr	r3, [pc, #104]	; (800a4b0 <pass_test+0x50c>)
 800a446:	2202      	movs	r2, #2
 800a448:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800a44a:	4b1a      	ldr	r3, [pc, #104]	; (800a4b4 <pass_test+0x510>)
 800a44c:	f242 7210 	movw	r2, #10000	; 0x2710
 800a450:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800a452:	4b19      	ldr	r3, [pc, #100]	; (800a4b8 <pass_test+0x514>)
 800a454:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a458:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a45a:	4b18      	ldr	r3, [pc, #96]	; (800a4bc <pass_test+0x518>)
 800a45c:	2203      	movs	r2, #3
 800a45e:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a460:	4b17      	ldr	r3, [pc, #92]	; (800a4c0 <pass_test+0x51c>)
 800a462:	2207      	movs	r2, #7
 800a464:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a466:	4b17      	ldr	r3, [pc, #92]	; (800a4c4 <pass_test+0x520>)
 800a468:	2207      	movs	r2, #7
 800a46a:	701a      	strb	r2, [r3, #0]

					get_base();
 800a46c:	f007 fb42 	bl	8011af4 <get_base>

					searchF3();
 800a470:	f004 ffe4 	bl	800f43c <searchF3>
					HAL_Delay(2000);
 800a474:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a478:	f7f6 fdd0 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a47c:	4b11      	ldr	r3, [pc, #68]	; (800a4c4 <pass_test+0x520>)
 800a47e:	2200      	movs	r2, #0
 800a480:	701a      	strb	r2, [r3, #0]
 800a482:	4b10      	ldr	r3, [pc, #64]	; (800a4c4 <pass_test+0x520>)
 800a484:	781a      	ldrb	r2, [r3, #0]
 800a486:	4b0e      	ldr	r3, [pc, #56]	; (800a4c0 <pass_test+0x51c>)
 800a488:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a48a:	f004 ffd7 	bl	800f43c <searchF3>

					goal_x = GOAL_X;
 800a48e:	4b0c      	ldr	r3, [pc, #48]	; (800a4c0 <pass_test+0x51c>)
 800a490:	2207      	movs	r2, #7
 800a492:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a494:	4b0b      	ldr	r3, [pc, #44]	; (800a4c4 <pass_test+0x520>)
 800a496:	2207      	movs	r2, #7
 800a498:	701a      	strb	r2, [r3, #0]
					break;
 800a49a:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a49c:	e58b      	b.n	8009fb6 <pass_test+0x12>
 800a49e:	bf00      	nop
 800a4a0:	08013b70 	.word	0x08013b70
 800a4a4:	20000f68 	.word	0x20000f68
 800a4a8:	20000456 	.word	0x20000456
 800a4ac:	200015c8 	.word	0x200015c8
 800a4b0:	20000bb1 	.word	0x20000bb1
 800a4b4:	20000454 	.word	0x20000454
 800a4b8:	20000f7c 	.word	0x20000f7c
 800a4bc:	20000457 	.word	0x20000457
 800a4c0:	20000bb0 	.word	0x20000bb0
 800a4c4:	20000b4c 	.word	0x20000b4c
 800a4c8:	08013b80 	.word	0x08013b80
 800a4cc:	08013b90 	.word	0x08013b90

0800a4d0 <goal_test>:
//goal_test
// a複数マスgoal走行テスト
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void goal_test(void){
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0

	int mode = 0;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	607b      	str	r3, [r7, #4]
	printf("Test goal Run, Mode : %d\n", mode);
 800a4da:	6879      	ldr	r1, [r7, #4]
 800a4dc:	48aa      	ldr	r0, [pc, #680]	; (800a788 <goal_test+0x2b8>)
 800a4de:	f008 f92f 	bl	8012740 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	f003 0301 	and.w	r3, r3, #1
 800a4ea:	b2d8      	uxtb	r0, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	f003 0302 	and.w	r3, r3, #2
 800a4f4:	b2d9      	uxtb	r1, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	f003 0304 	and.w	r3, r3, #4
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	461a      	mov	r2, r3
 800a502:	f007 fb4f 	bl	8011ba4 <led_write>
		  if(dist_r >= 20){
 800a506:	4ba1      	ldr	r3, [pc, #644]	; (800a78c <goal_test+0x2bc>)
 800a508:	edd3 7a00 	vldr	s15, [r3]
 800a50c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a510:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a518:	db0f      	blt.n	800a53a <goal_test+0x6a>
			  mode++;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	3301      	adds	r3, #1
 800a51e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a520:	4b9a      	ldr	r3, [pc, #616]	; (800a78c <goal_test+0x2bc>)
 800a522:	f04f 0200 	mov.w	r2, #0
 800a526:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2b07      	cmp	r3, #7
 800a52c:	dd01      	ble.n	800a532 <goal_test+0x62>
				  mode = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a532:	6879      	ldr	r1, [r7, #4]
 800a534:	4896      	ldr	r0, [pc, #600]	; (800a790 <goal_test+0x2c0>)
 800a536:	f008 f903 	bl	8012740 <iprintf>
		  }
		  if(dist_r <= -20){
 800a53a:	4b94      	ldr	r3, [pc, #592]	; (800a78c <goal_test+0x2bc>)
 800a53c:	edd3 7a00 	vldr	s15, [r3]
 800a540:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a544:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a54c:	d80f      	bhi.n	800a56e <goal_test+0x9e>
			  mode--;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	3b01      	subs	r3, #1
 800a552:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a554:	4b8d      	ldr	r3, [pc, #564]	; (800a78c <goal_test+0x2bc>)
 800a556:	f04f 0200 	mov.w	r2, #0
 800a55a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	da01      	bge.n	800a566 <goal_test+0x96>
				  mode = 7;
 800a562:	2307      	movs	r3, #7
 800a564:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a566:	6879      	ldr	r1, [r7, #4]
 800a568:	4889      	ldr	r0, [pc, #548]	; (800a790 <goal_test+0x2c0>)
 800a56a:	f008 f8e9 	bl	8012740 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a56e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a572:	4888      	ldr	r0, [pc, #544]	; (800a794 <goal_test+0x2c4>)
 800a574:	f7f7 feae 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1b1      	bne.n	800a4e2 <goal_test+0x12>
			  HAL_Delay(50);
 800a57e:	2032      	movs	r0, #50	; 0x32
 800a580:	f7f6 fd4c 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a584:	bf00      	nop
 800a586:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a58a:	4882      	ldr	r0, [pc, #520]	; (800a794 <goal_test+0x2c4>)
 800a58c:	f7f7 fea2 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d0f7      	beq.n	800a586 <goal_test+0xb6>
			  drive_ready();
 800a596:	f7fa fb73 	bl	8004c80 <drive_ready>
			  MF2.FLAG.V = 0;
 800a59a:	4a7f      	ldr	r2, [pc, #508]	; (800a798 <goal_test+0x2c8>)
 800a59c:	8813      	ldrh	r3, [r2, #0]
 800a59e:	f36f 03c3 	bfc	r3, #3, #1
 800a5a2:	8013      	strh	r3, [r2, #0]

			  switch(mode){
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b07      	cmp	r3, #7
 800a5a8:	d89b      	bhi.n	800a4e2 <goal_test+0x12>
 800a5aa:	a201      	add	r2, pc, #4	; (adr r2, 800a5b0 <goal_test+0xe0>)
 800a5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b0:	0800a5d1 	.word	0x0800a5d1
 800a5b4:	0800a659 	.word	0x0800a659
 800a5b8:	0800a707 	.word	0x0800a707
 800a5bc:	0800a7d5 	.word	0x0800a7d5
 800a5c0:	0800a857 	.word	0x0800a857
 800a5c4:	0800a8cd 	.word	0x0800a8cd
 800a5c8:	0800a94f 	.word	0x0800a94f
 800a5cc:	0800a9db 	.word	0x0800a9db
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800a5d0:	4872      	ldr	r0, [pc, #456]	; (800a79c <goal_test+0x2cc>)
 800a5d2:	f008 f929 	bl	8012828 <puts>

					MF.FLAG.SCND = 0;
 800a5d6:	4a72      	ldr	r2, [pc, #456]	; (800a7a0 <goal_test+0x2d0>)
 800a5d8:	8813      	ldrh	r3, [r2, #0]
 800a5da:	f36f 1345 	bfc	r3, #5, #1
 800a5de:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a5e0:	4a6f      	ldr	r2, [pc, #444]	; (800a7a0 <goal_test+0x2d0>)
 800a5e2:	8813      	ldrh	r3, [r2, #0]
 800a5e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a5e8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a5ea:	4a6d      	ldr	r2, [pc, #436]	; (800a7a0 <goal_test+0x2d0>)
 800a5ec:	8813      	ldrh	r3, [r2, #0]
 800a5ee:	f36f 238a 	bfc	r3, #10, #1
 800a5f2:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a5f4:	4b6b      	ldr	r3, [pc, #428]	; (800a7a4 <goal_test+0x2d4>)
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a5fa:	4b6b      	ldr	r3, [pc, #428]	; (800a7a8 <goal_test+0x2d8>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a600:	4b6a      	ldr	r3, [pc, #424]	; (800a7ac <goal_test+0x2dc>)
 800a602:	2201      	movs	r2, #1
 800a604:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a606:	4b6a      	ldr	r3, [pc, #424]	; (800a7b0 <goal_test+0x2e0>)
 800a608:	f241 3288 	movw	r2, #5000	; 0x1388
 800a60c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a60e:	4b69      	ldr	r3, [pc, #420]	; (800a7b4 <goal_test+0x2e4>)
 800a610:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a614:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a616:	4b64      	ldr	r3, [pc, #400]	; (800a7a8 <goal_test+0x2d8>)
 800a618:	2200      	movs	r2, #0
 800a61a:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a61c:	4b66      	ldr	r3, [pc, #408]	; (800a7b8 <goal_test+0x2e8>)
 800a61e:	2207      	movs	r2, #7
 800a620:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a622:	4b66      	ldr	r3, [pc, #408]	; (800a7bc <goal_test+0x2ec>)
 800a624:	2207      	movs	r2, #7
 800a626:	701a      	strb	r2, [r3, #0]

					get_base();
 800a628:	f007 fa64 	bl	8011af4 <get_base>

					searchC();
 800a62c:	f004 fa8c 	bl	800eb48 <searchC>
					HAL_Delay(2000);
 800a630:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a634:	f7f6 fcf2 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a638:	4b60      	ldr	r3, [pc, #384]	; (800a7bc <goal_test+0x2ec>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	701a      	strb	r2, [r3, #0]
 800a63e:	4b5f      	ldr	r3, [pc, #380]	; (800a7bc <goal_test+0x2ec>)
 800a640:	781a      	ldrb	r2, [r3, #0]
 800a642:	4b5d      	ldr	r3, [pc, #372]	; (800a7b8 <goal_test+0x2e8>)
 800a644:	701a      	strb	r2, [r3, #0]
					searchC();
 800a646:	f004 fa7f 	bl	800eb48 <searchC>

					goal_x = GOAL_X;
 800a64a:	4b5b      	ldr	r3, [pc, #364]	; (800a7b8 <goal_test+0x2e8>)
 800a64c:	2207      	movs	r2, #7
 800a64e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a650:	4b5a      	ldr	r3, [pc, #360]	; (800a7bc <goal_test+0x2ec>)
 800a652:	2207      	movs	r2, #7
 800a654:	701a      	strb	r2, [r3, #0]
					break;
 800a656:	e206      	b.n	800aa66 <goal_test+0x596>
				case 1:
					//----a一次探索スラローム走行 4マスgoal----
					printf("First Run. (4 goal)\n");
 800a658:	4859      	ldr	r0, [pc, #356]	; (800a7c0 <goal_test+0x2f0>)
 800a65a:	f008 f8e5 	bl	8012828 <puts>

					MF.FLAG.SCND = 0;
 800a65e:	4a50      	ldr	r2, [pc, #320]	; (800a7a0 <goal_test+0x2d0>)
 800a660:	8813      	ldrh	r3, [r2, #0]
 800a662:	f36f 1345 	bfc	r3, #5, #1
 800a666:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a668:	4a4d      	ldr	r2, [pc, #308]	; (800a7a0 <goal_test+0x2d0>)
 800a66a:	8813      	ldrh	r3, [r2, #0]
 800a66c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a670:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a672:	4a4b      	ldr	r2, [pc, #300]	; (800a7a0 <goal_test+0x2d0>)
 800a674:	8813      	ldrh	r3, [r2, #0]
 800a676:	f36f 238a 	bfc	r3, #10, #1
 800a67a:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a67c:	4b49      	ldr	r3, [pc, #292]	; (800a7a4 <goal_test+0x2d4>)
 800a67e:	2202      	movs	r2, #2
 800a680:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a682:	4b49      	ldr	r3, [pc, #292]	; (800a7a8 <goal_test+0x2d8>)
 800a684:	2200      	movs	r2, #0
 800a686:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a688:	4b48      	ldr	r3, [pc, #288]	; (800a7ac <goal_test+0x2dc>)
 800a68a:	2202      	movs	r2, #2
 800a68c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a68e:	4b48      	ldr	r3, [pc, #288]	; (800a7b0 <goal_test+0x2e0>)
 800a690:	f241 3288 	movw	r2, #5000	; 0x1388
 800a694:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a696:	4b47      	ldr	r3, [pc, #284]	; (800a7b4 <goal_test+0x2e4>)
 800a698:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a69c:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a69e:	4b42      	ldr	r3, [pc, #264]	; (800a7a8 <goal_test+0x2d8>)
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a6a4:	4b44      	ldr	r3, [pc, #272]	; (800a7b8 <goal_test+0x2e8>)
 800a6a6:	2207      	movs	r2, #7
 800a6a8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a6aa:	4b44      	ldr	r3, [pc, #272]	; (800a7bc <goal_test+0x2ec>)
 800a6ac:	2207      	movs	r2, #7
 800a6ae:	701a      	strb	r2, [r3, #0]

					get_base();
 800a6b0:	f007 fa20 	bl	8011af4 <get_base>

					searchC();
 800a6b4:	f004 fa48 	bl	800eb48 <searchC>
					HAL_Delay(2000);
 800a6b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a6bc:	f7f6 fcae 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a6c0:	4b3e      	ldr	r3, [pc, #248]	; (800a7bc <goal_test+0x2ec>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	701a      	strb	r2, [r3, #0]
 800a6c6:	4b3d      	ldr	r3, [pc, #244]	; (800a7bc <goal_test+0x2ec>)
 800a6c8:	781a      	ldrb	r2, [r3, #0]
 800a6ca:	4b3b      	ldr	r3, [pc, #236]	; (800a7b8 <goal_test+0x2e8>)
 800a6cc:	701a      	strb	r2, [r3, #0]
					searchC();
 800a6ce:	f004 fa3b 	bl	800eb48 <searchC>
					while(dist_l < 30);
 800a6d2:	bf00      	nop
 800a6d4:	4b3b      	ldr	r3, [pc, #236]	; (800a7c4 <goal_test+0x2f4>)
 800a6d6:	edd3 7a00 	vldr	s15, [r3]
 800a6da:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800a6de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e6:	d4f5      	bmi.n	800a6d4 <goal_test+0x204>
					printf("x: %d, y:%d, dir:%d\n", mouse.x, mouse.y, mouse.dir);
 800a6e8:	4b37      	ldr	r3, [pc, #220]	; (800a7c8 <goal_test+0x2f8>)
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	4b35      	ldr	r3, [pc, #212]	; (800a7c8 <goal_test+0x2f8>)
 800a6f2:	785b      	ldrb	r3, [r3, #1]
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	4b33      	ldr	r3, [pc, #204]	; (800a7c8 <goal_test+0x2f8>)
 800a6fa:	789b      	ldrb	r3, [r3, #2]
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	4833      	ldr	r0, [pc, #204]	; (800a7cc <goal_test+0x2fc>)
 800a700:	f008 f81e 	bl	8012740 <iprintf>

					break;
 800a704:	e1af      	b.n	800aa66 <goal_test+0x596>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed----
					printf("pass press 3-2.\n");
 800a706:	4832      	ldr	r0, [pc, #200]	; (800a7d0 <goal_test+0x300>)
 800a708:	f008 f88e 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800a70c:	4a24      	ldr	r2, [pc, #144]	; (800a7a0 <goal_test+0x2d0>)
 800a70e:	8813      	ldrh	r3, [r2, #0]
 800a710:	f043 0320 	orr.w	r3, r3, #32
 800a714:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a716:	4a22      	ldr	r2, [pc, #136]	; (800a7a0 <goal_test+0x2d0>)
 800a718:	8813      	ldrh	r3, [r2, #0]
 800a71a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a71e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a720:	4a1f      	ldr	r2, [pc, #124]	; (800a7a0 <goal_test+0x2d0>)
 800a722:	8813      	ldrh	r3, [r2, #0]
 800a724:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a728:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a72a:	4b1e      	ldr	r3, [pc, #120]	; (800a7a4 <goal_test+0x2d4>)
 800a72c:	2202      	movs	r2, #2
 800a72e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a730:	4b1d      	ldr	r3, [pc, #116]	; (800a7a8 <goal_test+0x2d8>)
 800a732:	2200      	movs	r2, #0
 800a734:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a736:	4b1d      	ldr	r3, [pc, #116]	; (800a7ac <goal_test+0x2dc>)
 800a738:	2201      	movs	r2, #1
 800a73a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a73c:	4b1c      	ldr	r3, [pc, #112]	; (800a7b0 <goal_test+0x2e0>)
 800a73e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a742:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a744:	4b1b      	ldr	r3, [pc, #108]	; (800a7b4 <goal_test+0x2e4>)
 800a746:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a74a:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800a74c:	4b1a      	ldr	r3, [pc, #104]	; (800a7b8 <goal_test+0x2e8>)
 800a74e:	2207      	movs	r2, #7
 800a750:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a752:	4b1a      	ldr	r3, [pc, #104]	; (800a7bc <goal_test+0x2ec>)
 800a754:	2207      	movs	r2, #7
 800a756:	701a      	strb	r2, [r3, #0]

					get_base();
 800a758:	f007 f9cc 	bl	8011af4 <get_base>

					searchF3();
 800a75c:	f004 fe6e 	bl	800f43c <searchF3>
					HAL_Delay(2000);
 800a760:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a764:	f7f6 fc5a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a768:	4b14      	ldr	r3, [pc, #80]	; (800a7bc <goal_test+0x2ec>)
 800a76a:	2200      	movs	r2, #0
 800a76c:	701a      	strb	r2, [r3, #0]
 800a76e:	4b13      	ldr	r3, [pc, #76]	; (800a7bc <goal_test+0x2ec>)
 800a770:	781a      	ldrb	r2, [r3, #0]
 800a772:	4b11      	ldr	r3, [pc, #68]	; (800a7b8 <goal_test+0x2e8>)
 800a774:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a776:	f004 fe61 	bl	800f43c <searchF3>

					goal_x = GOAL_X;
 800a77a:	4b0f      	ldr	r3, [pc, #60]	; (800a7b8 <goal_test+0x2e8>)
 800a77c:	2207      	movs	r2, #7
 800a77e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a780:	4b0e      	ldr	r3, [pc, #56]	; (800a7bc <goal_test+0x2ec>)
 800a782:	2207      	movs	r2, #7
 800a784:	701a      	strb	r2, [r3, #0]
					break;
 800a786:	e16e      	b.n	800aa66 <goal_test+0x596>
 800a788:	08013ba0 	.word	0x08013ba0
 800a78c:	20000aec 	.word	0x20000aec
 800a790:	0801397c 	.word	0x0801397c
 800a794:	40020000 	.word	0x40020000
 800a798:	20000f64 	.word	0x20000f64
 800a79c:	08013b5c 	.word	0x08013b5c
 800a7a0:	20000f68 	.word	0x20000f68
 800a7a4:	20000456 	.word	0x20000456
 800a7a8:	200015c8 	.word	0x200015c8
 800a7ac:	20000bb1 	.word	0x20000bb1
 800a7b0:	20000454 	.word	0x20000454
 800a7b4:	20000f7c 	.word	0x20000f7c
 800a7b8:	20000bb0 	.word	0x20000bb0
 800a7bc:	20000b4c 	.word	0x20000b4c
 800a7c0:	08013bbc 	.word	0x08013bbc
 800a7c4:	200015c4 	.word	0x200015c4
 800a7c8:	20000c0c 	.word	0x20000c0c
 800a7cc:	08013bd0 	.word	0x08013bd0
 800a7d0:	08013b70 	.word	0x08013b70
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed 4マスgoal----
					printf("pass press 3-2.\n");
 800a7d4:	48a4      	ldr	r0, [pc, #656]	; (800aa68 <goal_test+0x598>)
 800a7d6:	f008 f827 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800a7da:	4aa4      	ldr	r2, [pc, #656]	; (800aa6c <goal_test+0x59c>)
 800a7dc:	8813      	ldrh	r3, [r2, #0]
 800a7de:	f043 0320 	orr.w	r3, r3, #32
 800a7e2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a7e4:	4aa1      	ldr	r2, [pc, #644]	; (800aa6c <goal_test+0x59c>)
 800a7e6:	8813      	ldrh	r3, [r2, #0]
 800a7e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a7ec:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a7ee:	4a9f      	ldr	r2, [pc, #636]	; (800aa6c <goal_test+0x59c>)
 800a7f0:	8813      	ldrh	r3, [r2, #0]
 800a7f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a7f6:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a7f8:	4b9d      	ldr	r3, [pc, #628]	; (800aa70 <goal_test+0x5a0>)
 800a7fa:	2202      	movs	r2, #2
 800a7fc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a7fe:	4b9d      	ldr	r3, [pc, #628]	; (800aa74 <goal_test+0x5a4>)
 800a800:	2200      	movs	r2, #0
 800a802:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a804:	4b9c      	ldr	r3, [pc, #624]	; (800aa78 <goal_test+0x5a8>)
 800a806:	2202      	movs	r2, #2
 800a808:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a80a:	4b9c      	ldr	r3, [pc, #624]	; (800aa7c <goal_test+0x5ac>)
 800a80c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a810:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a812:	4b9b      	ldr	r3, [pc, #620]	; (800aa80 <goal_test+0x5b0>)
 800a814:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a818:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800a81a:	4b9a      	ldr	r3, [pc, #616]	; (800aa84 <goal_test+0x5b4>)
 800a81c:	2207      	movs	r2, #7
 800a81e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a820:	4b99      	ldr	r3, [pc, #612]	; (800aa88 <goal_test+0x5b8>)
 800a822:	2207      	movs	r2, #7
 800a824:	701a      	strb	r2, [r3, #0]

					get_base();
 800a826:	f007 f965 	bl	8011af4 <get_base>

					searchF3();
 800a82a:	f004 fe07 	bl	800f43c <searchF3>
					HAL_Delay(2000);
 800a82e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a832:	f7f6 fbf3 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a836:	4b94      	ldr	r3, [pc, #592]	; (800aa88 <goal_test+0x5b8>)
 800a838:	2200      	movs	r2, #0
 800a83a:	701a      	strb	r2, [r3, #0]
 800a83c:	4b92      	ldr	r3, [pc, #584]	; (800aa88 <goal_test+0x5b8>)
 800a83e:	781a      	ldrb	r2, [r3, #0]
 800a840:	4b90      	ldr	r3, [pc, #576]	; (800aa84 <goal_test+0x5b4>)
 800a842:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a844:	f004 fdfa 	bl	800f43c <searchF3>

					goal_x = GOAL_X;
 800a848:	4b8e      	ldr	r3, [pc, #568]	; (800aa84 <goal_test+0x5b4>)
 800a84a:	2207      	movs	r2, #7
 800a84c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a84e:	4b8e      	ldr	r3, [pc, #568]	; (800aa88 <goal_test+0x5b8>)
 800a850:	2207      	movs	r2, #7
 800a852:	701a      	strb	r2, [r3, #0]
					break;
 800a854:	e107      	b.n	800aa66 <goal_test+0x596>
				case 4:
					//----a直線と大回り圧縮と斜め Middle Speedｰｰｰｰ
					printf("pass press 4.\n");
 800a856:	488d      	ldr	r0, [pc, #564]	; (800aa8c <goal_test+0x5bc>)
 800a858:	f007 ffe6 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800a85c:	4a83      	ldr	r2, [pc, #524]	; (800aa6c <goal_test+0x59c>)
 800a85e:	8813      	ldrh	r3, [r2, #0]
 800a860:	f043 0320 	orr.w	r3, r3, #32
 800a864:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a866:	4a81      	ldr	r2, [pc, #516]	; (800aa6c <goal_test+0x59c>)
 800a868:	8813      	ldrh	r3, [r2, #0]
 800a86a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a86e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a870:	4a7e      	ldr	r2, [pc, #504]	; (800aa6c <goal_test+0x59c>)
 800a872:	8813      	ldrh	r3, [r2, #0]
 800a874:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a878:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a87a:	4b7d      	ldr	r3, [pc, #500]	; (800aa70 <goal_test+0x5a0>)
 800a87c:	2202      	movs	r2, #2
 800a87e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a880:	4b7c      	ldr	r3, [pc, #496]	; (800aa74 <goal_test+0x5a4>)
 800a882:	2200      	movs	r2, #0
 800a884:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a886:	4b7c      	ldr	r3, [pc, #496]	; (800aa78 <goal_test+0x5a8>)
 800a888:	2201      	movs	r2, #1
 800a88a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a88c:	4b7b      	ldr	r3, [pc, #492]	; (800aa7c <goal_test+0x5ac>)
 800a88e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a892:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a894:	4b7a      	ldr	r3, [pc, #488]	; (800aa80 <goal_test+0x5b0>)
 800a896:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a89a:	801a      	strh	r2, [r3, #0]

//					pass_mode = 4;

					goal_x = GOAL_X;
 800a89c:	4b79      	ldr	r3, [pc, #484]	; (800aa84 <goal_test+0x5b4>)
 800a89e:	2207      	movs	r2, #7
 800a8a0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a8a2:	4b79      	ldr	r3, [pc, #484]	; (800aa88 <goal_test+0x5b8>)
 800a8a4:	2207      	movs	r2, #7
 800a8a6:	701a      	strb	r2, [r3, #0]

					get_base();
 800a8a8:	f007 f924 	bl	8011af4 <get_base>

					searchF4();
 800a8ac:	f004 fea2 	bl	800f5f4 <searchF4>
					HAL_Delay(2000);
 800a8b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a8b4:	f7f6 fbb2 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a8b8:	4b73      	ldr	r3, [pc, #460]	; (800aa88 <goal_test+0x5b8>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	701a      	strb	r2, [r3, #0]
 800a8be:	4b72      	ldr	r3, [pc, #456]	; (800aa88 <goal_test+0x5b8>)
 800a8c0:	781a      	ldrb	r2, [r3, #0]
 800a8c2:	4b70      	ldr	r3, [pc, #448]	; (800aa84 <goal_test+0x5b4>)
 800a8c4:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a8c6:	f004 fe95 	bl	800f5f4 <searchF4>
					break;
 800a8ca:	e0cc      	b.n	800aa66 <goal_test+0x596>
				case 5:
					//----a直線と大回り圧縮と斜め Middle Speed 4マスgoalｰｰｰｰ
					printf("pass press 4.\n");
 800a8cc:	486f      	ldr	r0, [pc, #444]	; (800aa8c <goal_test+0x5bc>)
 800a8ce:	f007 ffab 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800a8d2:	4a66      	ldr	r2, [pc, #408]	; (800aa6c <goal_test+0x59c>)
 800a8d4:	8813      	ldrh	r3, [r2, #0]
 800a8d6:	f043 0320 	orr.w	r3, r3, #32
 800a8da:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a8dc:	4a63      	ldr	r2, [pc, #396]	; (800aa6c <goal_test+0x59c>)
 800a8de:	8813      	ldrh	r3, [r2, #0]
 800a8e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8e4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a8e6:	4a61      	ldr	r2, [pc, #388]	; (800aa6c <goal_test+0x59c>)
 800a8e8:	8813      	ldrh	r3, [r2, #0]
 800a8ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a8ee:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a8f0:	4b5f      	ldr	r3, [pc, #380]	; (800aa70 <goal_test+0x5a0>)
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a8f6:	4b5f      	ldr	r3, [pc, #380]	; (800aa74 <goal_test+0x5a4>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a8fc:	4b5e      	ldr	r3, [pc, #376]	; (800aa78 <goal_test+0x5a8>)
 800a8fe:	2202      	movs	r2, #2
 800a900:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a902:	4b5e      	ldr	r3, [pc, #376]	; (800aa7c <goal_test+0x5ac>)
 800a904:	f241 3288 	movw	r2, #5000	; 0x1388
 800a908:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a90a:	4b5d      	ldr	r3, [pc, #372]	; (800aa80 <goal_test+0x5b0>)
 800a90c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a910:	801a      	strh	r2, [r3, #0]

//					pass_mode = 4;

					goal_x = GOAL_X;
 800a912:	4b5c      	ldr	r3, [pc, #368]	; (800aa84 <goal_test+0x5b4>)
 800a914:	2207      	movs	r2, #7
 800a916:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a918:	4b5b      	ldr	r3, [pc, #364]	; (800aa88 <goal_test+0x5b8>)
 800a91a:	2207      	movs	r2, #7
 800a91c:	701a      	strb	r2, [r3, #0]

					get_base();
 800a91e:	f007 f8e9 	bl	8011af4 <get_base>

					searchF4();
 800a922:	f004 fe67 	bl	800f5f4 <searchF4>
					HAL_Delay(2000);
 800a926:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a92a:	f7f6 fb77 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a92e:	4b56      	ldr	r3, [pc, #344]	; (800aa88 <goal_test+0x5b8>)
 800a930:	2200      	movs	r2, #0
 800a932:	701a      	strb	r2, [r3, #0]
 800a934:	4b54      	ldr	r3, [pc, #336]	; (800aa88 <goal_test+0x5b8>)
 800a936:	781a      	ldrb	r2, [r3, #0]
 800a938:	4b52      	ldr	r3, [pc, #328]	; (800aa84 <goal_test+0x5b4>)
 800a93a:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a93c:	f004 fe5a 	bl	800f5f4 <searchF4>

					goal_x = GOAL_X;
 800a940:	4b50      	ldr	r3, [pc, #320]	; (800aa84 <goal_test+0x5b4>)
 800a942:	2207      	movs	r2, #7
 800a944:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a946:	4b50      	ldr	r3, [pc, #320]	; (800aa88 <goal_test+0x5b8>)
 800a948:	2207      	movs	r2, #7
 800a94a:	701a      	strb	r2, [r3, #0]
					break;
 800a94c:	e08b      	b.n	800aa66 <goal_test+0x596>
				case 6:
					//----a一次探索スラローム走行　重ね探索----
					printf("First Run. (Slalom)\n");
 800a94e:	4850      	ldr	r0, [pc, #320]	; (800aa90 <goal_test+0x5c0>)
 800a950:	f007 ff6a 	bl	8012828 <puts>

					MF.FLAG.SCND = 0;
 800a954:	4a45      	ldr	r2, [pc, #276]	; (800aa6c <goal_test+0x59c>)
 800a956:	8813      	ldrh	r3, [r2, #0]
 800a958:	f36f 1345 	bfc	r3, #5, #1
 800a95c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.SRC2 = 1;
 800a95e:	4a43      	ldr	r2, [pc, #268]	; (800aa6c <goal_test+0x59c>)
 800a960:	8813      	ldrh	r3, [r2, #0]
 800a962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a966:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a968:	4a40      	ldr	r2, [pc, #256]	; (800aa6c <goal_test+0x59c>)
 800a96a:	8813      	ldrh	r3, [r2, #0]
 800a96c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a970:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a972:	4a3e      	ldr	r2, [pc, #248]	; (800aa6c <goal_test+0x59c>)
 800a974:	8813      	ldrh	r3, [r2, #0]
 800a976:	f36f 238a 	bfc	r3, #10, #1
 800a97a:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a97c:	4b3c      	ldr	r3, [pc, #240]	; (800aa70 <goal_test+0x5a0>)
 800a97e:	2202      	movs	r2, #2
 800a980:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a982:	4b3c      	ldr	r3, [pc, #240]	; (800aa74 <goal_test+0x5a4>)
 800a984:	2200      	movs	r2, #0
 800a986:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a988:	4b3b      	ldr	r3, [pc, #236]	; (800aa78 <goal_test+0x5a8>)
 800a98a:	2201      	movs	r2, #1
 800a98c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a98e:	4b3b      	ldr	r3, [pc, #236]	; (800aa7c <goal_test+0x5ac>)
 800a990:	f241 3288 	movw	r2, #5000	; 0x1388
 800a994:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a996:	4b3a      	ldr	r3, [pc, #232]	; (800aa80 <goal_test+0x5b0>)
 800a998:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a99c:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800a99e:	4b39      	ldr	r3, [pc, #228]	; (800aa84 <goal_test+0x5b4>)
 800a9a0:	2207      	movs	r2, #7
 800a9a2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a9a4:	4b38      	ldr	r3, [pc, #224]	; (800aa88 <goal_test+0x5b8>)
 800a9a6:	2207      	movs	r2, #7
 800a9a8:	701a      	strb	r2, [r3, #0]

					get_base();
 800a9aa:	f007 f8a3 	bl	8011af4 <get_base>

					searchC2();
 800a9ae:	f004 fa3d 	bl	800ee2c <searchC2>
					HAL_Delay(2000);
 800a9b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a9b6:	f7f6 fb31 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a9ba:	4b33      	ldr	r3, [pc, #204]	; (800aa88 <goal_test+0x5b8>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	701a      	strb	r2, [r3, #0]
 800a9c0:	4b31      	ldr	r3, [pc, #196]	; (800aa88 <goal_test+0x5b8>)
 800a9c2:	781a      	ldrb	r2, [r3, #0]
 800a9c4:	4b2f      	ldr	r3, [pc, #188]	; (800aa84 <goal_test+0x5b4>)
 800a9c6:	701a      	strb	r2, [r3, #0]
					searchC();
 800a9c8:	f004 f8be 	bl	800eb48 <searchC>

					goal_x = GOAL_X;
 800a9cc:	4b2d      	ldr	r3, [pc, #180]	; (800aa84 <goal_test+0x5b4>)
 800a9ce:	2207      	movs	r2, #7
 800a9d0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a9d2:	4b2d      	ldr	r3, [pc, #180]	; (800aa88 <goal_test+0x5b8>)
 800a9d4:	2207      	movs	r2, #7
 800a9d6:	701a      	strb	r2, [r3, #0]
					break;
 800a9d8:	e045      	b.n	800aa66 <goal_test+0x596>
				case 7:
					//----a一次探索スラローム走行　重ね探索 4マスgoal----
					printf("First Run. (Slalom)\n");
 800a9da:	482d      	ldr	r0, [pc, #180]	; (800aa90 <goal_test+0x5c0>)
 800a9dc:	f007 ff24 	bl	8012828 <puts>

					MF.FLAG.SCND = 0;
 800a9e0:	4a22      	ldr	r2, [pc, #136]	; (800aa6c <goal_test+0x59c>)
 800a9e2:	8813      	ldrh	r3, [r2, #0]
 800a9e4:	f36f 1345 	bfc	r3, #5, #1
 800a9e8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.SRC2 = 1;
 800a9ea:	4a20      	ldr	r2, [pc, #128]	; (800aa6c <goal_test+0x59c>)
 800a9ec:	8813      	ldrh	r3, [r2, #0]
 800a9ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9f2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a9f4:	4a1d      	ldr	r2, [pc, #116]	; (800aa6c <goal_test+0x59c>)
 800a9f6:	8813      	ldrh	r3, [r2, #0]
 800a9f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a9fc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a9fe:	4a1b      	ldr	r2, [pc, #108]	; (800aa6c <goal_test+0x59c>)
 800aa00:	8813      	ldrh	r3, [r2, #0]
 800aa02:	f36f 238a 	bfc	r3, #10, #1
 800aa06:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800aa08:	4b19      	ldr	r3, [pc, #100]	; (800aa70 <goal_test+0x5a0>)
 800aa0a:	2202      	movs	r2, #2
 800aa0c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800aa0e:	4b19      	ldr	r3, [pc, #100]	; (800aa74 <goal_test+0x5a4>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800aa14:	4b18      	ldr	r3, [pc, #96]	; (800aa78 <goal_test+0x5a8>)
 800aa16:	2202      	movs	r2, #2
 800aa18:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800aa1a:	4b18      	ldr	r3, [pc, #96]	; (800aa7c <goal_test+0x5ac>)
 800aa1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa20:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800aa22:	4b17      	ldr	r3, [pc, #92]	; (800aa80 <goal_test+0x5b0>)
 800aa24:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800aa28:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800aa2a:	4b16      	ldr	r3, [pc, #88]	; (800aa84 <goal_test+0x5b4>)
 800aa2c:	2207      	movs	r2, #7
 800aa2e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aa30:	4b15      	ldr	r3, [pc, #84]	; (800aa88 <goal_test+0x5b8>)
 800aa32:	2207      	movs	r2, #7
 800aa34:	701a      	strb	r2, [r3, #0]

					get_base();
 800aa36:	f007 f85d 	bl	8011af4 <get_base>

					searchC2();
 800aa3a:	f004 f9f7 	bl	800ee2c <searchC2>
					HAL_Delay(2000);
 800aa3e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aa42:	f7f6 faeb 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800aa46:	4b10      	ldr	r3, [pc, #64]	; (800aa88 <goal_test+0x5b8>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	701a      	strb	r2, [r3, #0]
 800aa4c:	4b0e      	ldr	r3, [pc, #56]	; (800aa88 <goal_test+0x5b8>)
 800aa4e:	781a      	ldrb	r2, [r3, #0]
 800aa50:	4b0c      	ldr	r3, [pc, #48]	; (800aa84 <goal_test+0x5b4>)
 800aa52:	701a      	strb	r2, [r3, #0]
					searchC();
 800aa54:	f004 f878 	bl	800eb48 <searchC>

					goal_x = GOAL_X;
 800aa58:	4b0a      	ldr	r3, [pc, #40]	; (800aa84 <goal_test+0x5b4>)
 800aa5a:	2207      	movs	r2, #7
 800aa5c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aa5e:	4b0a      	ldr	r3, [pc, #40]	; (800aa88 <goal_test+0x5b8>)
 800aa60:	2207      	movs	r2, #7
 800aa62:	701a      	strb	r2, [r3, #0]
					break;
 800aa64:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800aa66:	e53c      	b.n	800a4e2 <goal_test+0x12>
 800aa68:	08013b70 	.word	0x08013b70
 800aa6c:	20000f68 	.word	0x20000f68
 800aa70:	20000456 	.word	0x20000456
 800aa74:	200015c8 	.word	0x200015c8
 800aa78:	20000bb1 	.word	0x20000bb1
 800aa7c:	20000454 	.word	0x20000454
 800aa80:	20000f7c 	.word	0x20000f7c
 800aa84:	20000bb0 	.word	0x20000bb0
 800aa88:	20000b4c 	.word	0x20000b4c
 800aa8c:	08013b80 	.word	0x08013b80
 800aa90:	08013b5c 	.word	0x08013b5c

0800aa94 <sample_course_run>:
//sample_course_run
//a試験走行モード
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sample_course_run(void){
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0

	int mode = 0;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	607b      	str	r3, [r7, #4]
	printf("Sample Course Run, Mode : %d\n", mode);
 800aa9e:	6879      	ldr	r1, [r7, #4]
 800aaa0:	489a      	ldr	r0, [pc, #616]	; (800ad0c <sample_course_run+0x278>)
 800aaa2:	f007 fe4d 	bl	8012740 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	f003 0301 	and.w	r3, r3, #1
 800aaae:	b2d8      	uxtb	r0, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	f003 0302 	and.w	r3, r3, #2
 800aab8:	b2d9      	uxtb	r1, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	f003 0304 	and.w	r3, r3, #4
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	461a      	mov	r2, r3
 800aac6:	f007 f86d 	bl	8011ba4 <led_write>
		  if(dist_r >= 20){
 800aaca:	4b91      	ldr	r3, [pc, #580]	; (800ad10 <sample_course_run+0x27c>)
 800aacc:	edd3 7a00 	vldr	s15, [r3]
 800aad0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800aad4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aadc:	db0f      	blt.n	800aafe <sample_course_run+0x6a>
			  mode++;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	3301      	adds	r3, #1
 800aae2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800aae4:	4b8a      	ldr	r3, [pc, #552]	; (800ad10 <sample_course_run+0x27c>)
 800aae6:	f04f 0200 	mov.w	r2, #0
 800aaea:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2b07      	cmp	r3, #7
 800aaf0:	dd01      	ble.n	800aaf6 <sample_course_run+0x62>
				  mode = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800aaf6:	6879      	ldr	r1, [r7, #4]
 800aaf8:	4886      	ldr	r0, [pc, #536]	; (800ad14 <sample_course_run+0x280>)
 800aafa:	f007 fe21 	bl	8012740 <iprintf>
		  }
		  if(dist_r <= -20){
 800aafe:	4b84      	ldr	r3, [pc, #528]	; (800ad10 <sample_course_run+0x27c>)
 800ab00:	edd3 7a00 	vldr	s15, [r3]
 800ab04:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800ab08:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab10:	d80f      	bhi.n	800ab32 <sample_course_run+0x9e>
			  mode--;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	3b01      	subs	r3, #1
 800ab16:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800ab18:	4b7d      	ldr	r3, [pc, #500]	; (800ad10 <sample_course_run+0x27c>)
 800ab1a:	f04f 0200 	mov.w	r2, #0
 800ab1e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	da01      	bge.n	800ab2a <sample_course_run+0x96>
				  mode = 7;
 800ab26:	2307      	movs	r3, #7
 800ab28:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800ab2a:	6879      	ldr	r1, [r7, #4]
 800ab2c:	4879      	ldr	r0, [pc, #484]	; (800ad14 <sample_course_run+0x280>)
 800ab2e:	f007 fe07 	bl	8012740 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800ab32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ab36:	4878      	ldr	r0, [pc, #480]	; (800ad18 <sample_course_run+0x284>)
 800ab38:	f7f7 fbcc 	bl	80022d4 <HAL_GPIO_ReadPin>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1b1      	bne.n	800aaa6 <sample_course_run+0x12>
			  HAL_Delay(50);
 800ab42:	2032      	movs	r0, #50	; 0x32
 800ab44:	f7f6 fa6a 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800ab48:	bf00      	nop
 800ab4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ab4e:	4872      	ldr	r0, [pc, #456]	; (800ad18 <sample_course_run+0x284>)
 800ab50:	f7f7 fbc0 	bl	80022d4 <HAL_GPIO_ReadPin>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d0f7      	beq.n	800ab4a <sample_course_run+0xb6>
			  drive_ready();
 800ab5a:	f7fa f891 	bl	8004c80 <drive_ready>

			  switch(mode){
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2b07      	cmp	r3, #7
 800ab62:	d8a0      	bhi.n	800aaa6 <sample_course_run+0x12>
 800ab64:	a201      	add	r2, pc, #4	; (adr r2, 800ab6c <sample_course_run+0xd8>)
 800ab66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6a:	bf00      	nop
 800ab6c:	0800ab8d 	.word	0x0800ab8d
 800ab70:	0800ab93 	.word	0x0800ab93
 800ab74:	0800abe1 	.word	0x0800abe1
 800ab78:	0800ac05 	.word	0x0800ac05
 800ab7c:	0800aaa7 	.word	0x0800aaa7
 800ab80:	0800ac17 	.word	0x0800ac17
 800ab84:	0800ac91 	.word	0x0800ac91
 800ab88:	0800aaa7 	.word	0x0800aaa7
				case 0:
					get_base();
 800ab8c:	f006 ffb2 	bl	8011af4 <get_base>
					break;
 800ab90:	e0bb      	b.n	800ad0a <sample_course_run+0x276>

				case 1:
					//----サンプルコース1　爆速ターン連続----
					run_mode = 5;
 800ab92:	4b62      	ldr	r3, [pc, #392]	; (800ad1c <sample_course_run+0x288>)
 800ab94:	2205      	movs	r2, #5
 800ab96:	701a      	strb	r2, [r3, #0]

					half_sectionA();
 800ab98:	f7fb f820 	bl	8005bdc <half_sectionA>
					slalom_R90();
 800ab9c:	f7fb feb0 	bl	8006900 <slalom_R90>
					slalom_L90();
 800aba0:	f7fb ffdc 	bl	8006b5c <slalom_L90>
					slalom_L90();
 800aba4:	f7fb ffda 	bl	8006b5c <slalom_L90>
					slalom_R90();
 800aba8:	f7fb feaa 	bl	8006900 <slalom_R90>
					slalom_R90();
 800abac:	f7fb fea8 	bl	8006900 <slalom_R90>
					for(int k=0; k<5; k++){
 800abb0:	2300      	movs	r3, #0
 800abb2:	603b      	str	r3, [r7, #0]
 800abb4:	e00e      	b.n	800abd4 <sample_course_run+0x140>
						slalom_R90();
 800abb6:	f7fb fea3 	bl	8006900 <slalom_R90>
						slalom_R90();
 800abba:	f7fb fea1 	bl	8006900 <slalom_R90>
						slalom_L90();
 800abbe:	f7fb ffcd 	bl	8006b5c <slalom_L90>
						slalom_L90();
 800abc2:	f7fb ffcb 	bl	8006b5c <slalom_L90>
						slalom_R90();
 800abc6:	f7fb fe9b 	bl	8006900 <slalom_R90>
						slalom_R90();
 800abca:	f7fb fe99 	bl	8006900 <slalom_R90>
					for(int k=0; k<5; k++){
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	3301      	adds	r3, #1
 800abd2:	603b      	str	r3, [r7, #0]
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	2b04      	cmp	r3, #4
 800abd8:	dded      	ble.n	800abb6 <sample_course_run+0x122>
					}
					half_sectionD();
 800abda:	f7fb f865 	bl	8005ca8 <half_sectionD>
					break;
 800abde:	e094      	b.n	800ad0a <sample_course_run+0x276>

				case 2:
					//----サンプルコース1　超信地----
					run_mode = 5;
 800abe0:	4b4e      	ldr	r3, [pc, #312]	; (800ad1c <sample_course_run+0x288>)
 800abe2:	2205      	movs	r2, #5
 800abe4:	701a      	strb	r2, [r3, #0]

					half_sectionA();
 800abe6:	f7fa fff9 	bl	8005bdc <half_sectionA>
					slalom_R90();
 800abea:	f7fb fe89 	bl	8006900 <slalom_R90>
					slalom_L90();
 800abee:	f7fb ffb5 	bl	8006b5c <slalom_L90>
					slalom_R90();
 800abf2:	f7fb fe85 	bl	8006900 <slalom_R90>
					slalom_L90();
 800abf6:	f7fb ffb1 	bl	8006b5c <slalom_L90>
					slalom_R90();
 800abfa:	f7fb fe81 	bl	8006900 <slalom_R90>
					half_sectionD();
 800abfe:	f7fb f853 	bl	8005ca8 <half_sectionD>
					break;
 800ac02:	e082      	b.n	800ad0a <sample_course_run+0x276>

				case 3:
					//---サンプルコース2　スラローム----
					half_sectionA();
 800ac04:	f7fa ffea 	bl	8005bdc <half_sectionA>
					slalom_R90();
 800ac08:	f7fb fe7a 	bl	8006900 <slalom_R90>
					slalom_R90();
 800ac0c:	f7fb fe78 	bl	8006900 <slalom_R90>
					half_sectionD();
 800ac10:	f7fb f84a 	bl	8005ca8 <half_sectionD>
					break;
 800ac14:	e079      	b.n	800ad0a <sample_course_run+0x276>
				case 4:
					break;

				case 5:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800ac16:	4842      	ldr	r0, [pc, #264]	; (800ad20 <sample_course_run+0x28c>)
 800ac18:	f007 fe06 	bl	8012828 <puts>

					MF.FLAG.SCND = 0;
 800ac1c:	4a41      	ldr	r2, [pc, #260]	; (800ad24 <sample_course_run+0x290>)
 800ac1e:	8813      	ldrh	r3, [r2, #0]
 800ac20:	f36f 1345 	bfc	r3, #5, #1
 800ac24:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ac26:	4a3f      	ldr	r2, [pc, #252]	; (800ad24 <sample_course_run+0x290>)
 800ac28:	8813      	ldrh	r3, [r2, #0]
 800ac2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac2e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ac30:	4a3c      	ldr	r2, [pc, #240]	; (800ad24 <sample_course_run+0x290>)
 800ac32:	8813      	ldrh	r3, [r2, #0]
 800ac34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ac38:	8013      	strh	r3, [r2, #0]
					start_mode = 0;
 800ac3a:	4b3b      	ldr	r3, [pc, #236]	; (800ad28 <sample_course_run+0x294>)
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ac40:	4b3a      	ldr	r3, [pc, #232]	; (800ad2c <sample_course_run+0x298>)
 800ac42:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac46:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800ac48:	4b39      	ldr	r3, [pc, #228]	; (800ad30 <sample_course_run+0x29c>)
 800ac4a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ac4e:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800ac50:	4b38      	ldr	r3, [pc, #224]	; (800ad34 <sample_course_run+0x2a0>)
 800ac52:	2207      	movs	r2, #7
 800ac54:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ac56:	4b38      	ldr	r3, [pc, #224]	; (800ad38 <sample_course_run+0x2a4>)
 800ac58:	2207      	movs	r2, #7
 800ac5a:	701a      	strb	r2, [r3, #0]

					get_base();
 800ac5c:	f006 ff4a 	bl	8011af4 <get_base>

					searchC();
 800ac60:	f003 ff72 	bl	800eb48 <searchC>
					HAL_Delay(2000);
 800ac64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ac68:	f7f6 f9d8 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ac6c:	4b32      	ldr	r3, [pc, #200]	; (800ad38 <sample_course_run+0x2a4>)
 800ac6e:	2200      	movs	r2, #0
 800ac70:	701a      	strb	r2, [r3, #0]
 800ac72:	4b31      	ldr	r3, [pc, #196]	; (800ad38 <sample_course_run+0x2a4>)
 800ac74:	781a      	ldrb	r2, [r3, #0]
 800ac76:	4b2f      	ldr	r3, [pc, #188]	; (800ad34 <sample_course_run+0x2a0>)
 800ac78:	701a      	strb	r2, [r3, #0]
					searchE();
 800ac7a:	f004 fb33 	bl	800f2e4 <searchE>

					searchC();
 800ac7e:	f003 ff63 	bl	800eb48 <searchC>
					goal_x = GOAL_X;
 800ac82:	4b2c      	ldr	r3, [pc, #176]	; (800ad34 <sample_course_run+0x2a0>)
 800ac84:	2207      	movs	r2, #7
 800ac86:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ac88:	4b2b      	ldr	r3, [pc, #172]	; (800ad38 <sample_course_run+0x2a4>)
 800ac8a:	2207      	movs	r2, #7
 800ac8c:	701a      	strb	r2, [r3, #0]

					break;
 800ac8e:	e03c      	b.n	800ad0a <sample_course_run+0x276>

				case 6:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800ac90:	4823      	ldr	r0, [pc, #140]	; (800ad20 <sample_course_run+0x28c>)
 800ac92:	f007 fdc9 	bl	8012828 <puts>

					MF.FLAG.SCND = 0;
 800ac96:	4a23      	ldr	r2, [pc, #140]	; (800ad24 <sample_course_run+0x290>)
 800ac98:	8813      	ldrh	r3, [r2, #0]
 800ac9a:	f36f 1345 	bfc	r3, #5, #1
 800ac9e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800aca0:	4a20      	ldr	r2, [pc, #128]	; (800ad24 <sample_course_run+0x290>)
 800aca2:	8813      	ldrh	r3, [r2, #0]
 800aca4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aca8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800acaa:	4a1e      	ldr	r2, [pc, #120]	; (800ad24 <sample_course_run+0x290>)
 800acac:	8813      	ldrh	r3, [r2, #0]
 800acae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800acb2:	8013      	strh	r3, [r2, #0]
					start_mode = 0;
 800acb4:	4b1c      	ldr	r3, [pc, #112]	; (800ad28 <sample_course_run+0x294>)
 800acb6:	2200      	movs	r2, #0
 800acb8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800acba:	4b1c      	ldr	r3, [pc, #112]	; (800ad2c <sample_course_run+0x298>)
 800acbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800acc0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800acc2:	4b1b      	ldr	r3, [pc, #108]	; (800ad30 <sample_course_run+0x29c>)
 800acc4:	f44f 7248 	mov.w	r2, #800	; 0x320
 800acc8:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800acca:	4b1a      	ldr	r3, [pc, #104]	; (800ad34 <sample_course_run+0x2a0>)
 800accc:	2207      	movs	r2, #7
 800acce:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800acd0:	4b19      	ldr	r3, [pc, #100]	; (800ad38 <sample_course_run+0x2a4>)
 800acd2:	2207      	movs	r2, #7
 800acd4:	701a      	strb	r2, [r3, #0]

					get_base();
 800acd6:	f006 ff0d 	bl	8011af4 <get_base>

					searchC();
 800acda:	f003 ff35 	bl	800eb48 <searchC>
					HAL_Delay(2000);
 800acde:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ace2:	f7f6 f99b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ace6:	4b14      	ldr	r3, [pc, #80]	; (800ad38 <sample_course_run+0x2a4>)
 800ace8:	2200      	movs	r2, #0
 800acea:	701a      	strb	r2, [r3, #0]
 800acec:	4b12      	ldr	r3, [pc, #72]	; (800ad38 <sample_course_run+0x2a4>)
 800acee:	781a      	ldrb	r2, [r3, #0]
 800acf0:	4b10      	ldr	r3, [pc, #64]	; (800ad34 <sample_course_run+0x2a0>)
 800acf2:	701a      	strb	r2, [r3, #0]
					searchE();
 800acf4:	f004 faf6 	bl	800f2e4 <searchE>

					searchC();
 800acf8:	f003 ff26 	bl	800eb48 <searchC>
					goal_x = 7;
 800acfc:	4b0d      	ldr	r3, [pc, #52]	; (800ad34 <sample_course_run+0x2a0>)
 800acfe:	2207      	movs	r2, #7
 800ad00:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ad02:	4b0d      	ldr	r3, [pc, #52]	; (800ad38 <sample_course_run+0x2a4>)
 800ad04:	2207      	movs	r2, #7
 800ad06:	701a      	strb	r2, [r3, #0]

					break;
 800ad08:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800ad0a:	e6cc      	b.n	800aaa6 <sample_course_run+0x12>
 800ad0c:	08013be8 	.word	0x08013be8
 800ad10:	20000aec 	.word	0x20000aec
 800ad14:	0801397c 	.word	0x0801397c
 800ad18:	40020000 	.word	0x40020000
 800ad1c:	20000456 	.word	0x20000456
 800ad20:	08013c08 	.word	0x08013c08
 800ad24:	20000f68 	.word	0x20000f68
 800ad28:	200015c8 	.word	0x200015c8
 800ad2c:	20000454 	.word	0x20000454
 800ad30:	20000f7c 	.word	0x20000f7c
 800ad34:	20000bb0 	.word	0x20000bb0
 800ad38:	20000b4c 	.word	0x20000b4c

0800ad3c <slalom_run>:
//slalom_run
// スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_run(void){
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0

	int mode = 0;
 800ad42:	2300      	movs	r3, #0
 800ad44:	607b      	str	r3, [r7, #4]
	printf("Slalom Run, Mode : %d\n", mode);
 800ad46:	6879      	ldr	r1, [r7, #4]
 800ad48:	48a6      	ldr	r0, [pc, #664]	; (800afe4 <slalom_run+0x2a8>)
 800ad4a:	f007 fcf9 	bl	8012740 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	f003 0301 	and.w	r3, r3, #1
 800ad56:	b2d8      	uxtb	r0, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	f003 0302 	and.w	r3, r3, #2
 800ad60:	b2d9      	uxtb	r1, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	f003 0304 	and.w	r3, r3, #4
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	f006 ff19 	bl	8011ba4 <led_write>
		  if(dist_r >= 20){
 800ad72:	4b9d      	ldr	r3, [pc, #628]	; (800afe8 <slalom_run+0x2ac>)
 800ad74:	edd3 7a00 	vldr	s15, [r3]
 800ad78:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800ad7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad84:	db0f      	blt.n	800ada6 <slalom_run+0x6a>
			  mode++;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800ad8c:	4b96      	ldr	r3, [pc, #600]	; (800afe8 <slalom_run+0x2ac>)
 800ad8e:	f04f 0200 	mov.w	r2, #0
 800ad92:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b07      	cmp	r3, #7
 800ad98:	dd01      	ble.n	800ad9e <slalom_run+0x62>
				  mode = 0;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800ad9e:	6879      	ldr	r1, [r7, #4]
 800ada0:	4892      	ldr	r0, [pc, #584]	; (800afec <slalom_run+0x2b0>)
 800ada2:	f007 fccd 	bl	8012740 <iprintf>
		  }
		  if(dist_r <= -20){
 800ada6:	4b90      	ldr	r3, [pc, #576]	; (800afe8 <slalom_run+0x2ac>)
 800ada8:	edd3 7a00 	vldr	s15, [r3]
 800adac:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800adb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adb8:	d80f      	bhi.n	800adda <slalom_run+0x9e>
			  mode--;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	3b01      	subs	r3, #1
 800adbe:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800adc0:	4b89      	ldr	r3, [pc, #548]	; (800afe8 <slalom_run+0x2ac>)
 800adc2:	f04f 0200 	mov.w	r2, #0
 800adc6:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	da01      	bge.n	800add2 <slalom_run+0x96>
				  mode = 7;
 800adce:	2307      	movs	r3, #7
 800add0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800add2:	6879      	ldr	r1, [r7, #4]
 800add4:	4885      	ldr	r0, [pc, #532]	; (800afec <slalom_run+0x2b0>)
 800add6:	f007 fcb3 	bl	8012740 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800adda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800adde:	4884      	ldr	r0, [pc, #528]	; (800aff0 <slalom_run+0x2b4>)
 800ade0:	f7f7 fa78 	bl	80022d4 <HAL_GPIO_ReadPin>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1b1      	bne.n	800ad4e <slalom_run+0x12>
			  HAL_Delay(50);
 800adea:	2032      	movs	r0, #50	; 0x32
 800adec:	f7f6 f916 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800adf0:	bf00      	nop
 800adf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800adf6:	487e      	ldr	r0, [pc, #504]	; (800aff0 <slalom_run+0x2b4>)
 800adf8:	f7f7 fa6c 	bl	80022d4 <HAL_GPIO_ReadPin>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d0f7      	beq.n	800adf2 <slalom_run+0xb6>
			  drive_ready();
 800ae02:	f7f9 ff3d 	bl	8004c80 <drive_ready>

			  switch(mode){
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2b07      	cmp	r3, #7
 800ae0a:	d8a0      	bhi.n	800ad4e <slalom_run+0x12>
 800ae0c:	a201      	add	r2, pc, #4	; (adr r2, 800ae14 <slalom_run+0xd8>)
 800ae0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae12:	bf00      	nop
 800ae14:	0800ae35 	.word	0x0800ae35
 800ae18:	0800aea7 	.word	0x0800aea7
 800ae1c:	0800aeff 	.word	0x0800aeff
 800ae20:	0800af71 	.word	0x0800af71
 800ae24:	0800b01d 	.word	0x0800b01d
 800ae28:	0800b08f 	.word	0x0800b08f
 800ae2c:	0800b0f9 	.word	0x0800b0f9
 800ae30:	0800b17d 	.word	0x0800b17d

			  case 0:
					//----一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800ae34:	486f      	ldr	r0, [pc, #444]	; (800aff4 <slalom_run+0x2b8>)
 800ae36:	f007 fcf7 	bl	8012828 <puts>

					MF.FLAG.SCND = 0;
 800ae3a:	4a6f      	ldr	r2, [pc, #444]	; (800aff8 <slalom_run+0x2bc>)
 800ae3c:	8813      	ldrh	r3, [r2, #0]
 800ae3e:	f36f 1345 	bfc	r3, #5, #1
 800ae42:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800ae44:	4a6c      	ldr	r2, [pc, #432]	; (800aff8 <slalom_run+0x2bc>)
 800ae46:	8813      	ldrh	r3, [r2, #0]
 800ae48:	f36f 2349 	bfc	r3, #9, #1
 800ae4c:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800ae4e:	4b6b      	ldr	r3, [pc, #428]	; (800affc <slalom_run+0x2c0>)
 800ae50:	2201      	movs	r2, #1
 800ae52:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ae54:	4b6a      	ldr	r3, [pc, #424]	; (800b000 <slalom_run+0x2c4>)
 800ae56:	2200      	movs	r2, #0
 800ae58:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ae5a:	4b6a      	ldr	r3, [pc, #424]	; (800b004 <slalom_run+0x2c8>)
 800ae5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae60:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800ae62:	4b69      	ldr	r3, [pc, #420]	; (800b008 <slalom_run+0x2cc>)
 800ae64:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ae68:	801a      	strh	r2, [r3, #0]


					goal_x = GOAL_X;
 800ae6a:	4b68      	ldr	r3, [pc, #416]	; (800b00c <slalom_run+0x2d0>)
 800ae6c:	2207      	movs	r2, #7
 800ae6e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ae70:	4b67      	ldr	r3, [pc, #412]	; (800b010 <slalom_run+0x2d4>)
 800ae72:	2207      	movs	r2, #7
 800ae74:	701a      	strb	r2, [r3, #0]

					get_base();
 800ae76:	f006 fe3d 	bl	8011af4 <get_base>

					searchC();
 800ae7a:	f003 fe65 	bl	800eb48 <searchC>
					HAL_Delay(2000);
 800ae7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ae82:	f7f6 f8cb 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ae86:	4b62      	ldr	r3, [pc, #392]	; (800b010 <slalom_run+0x2d4>)
 800ae88:	2200      	movs	r2, #0
 800ae8a:	701a      	strb	r2, [r3, #0]
 800ae8c:	4b60      	ldr	r3, [pc, #384]	; (800b010 <slalom_run+0x2d4>)
 800ae8e:	781a      	ldrb	r2, [r3, #0]
 800ae90:	4b5e      	ldr	r3, [pc, #376]	; (800b00c <slalom_run+0x2d0>)
 800ae92:	701a      	strb	r2, [r3, #0]
					searchC();
 800ae94:	f003 fe58 	bl	800eb48 <searchC>

					goal_x = GOAL_X;
 800ae98:	4b5c      	ldr	r3, [pc, #368]	; (800b00c <slalom_run+0x2d0>)
 800ae9a:	2207      	movs	r2, #7
 800ae9c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ae9e:	4b5c      	ldr	r3, [pc, #368]	; (800b010 <slalom_run+0x2d4>)
 800aea0:	2207      	movs	r2, #7
 800aea2:	701a      	strb	r2, [r3, #0]
					break;
 800aea4:	e1ac      	b.n	800b200 <slalom_run+0x4c4>

				case 1:
					//----二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 800aea6:	485b      	ldr	r0, [pc, #364]	; (800b014 <slalom_run+0x2d8>)
 800aea8:	f007 fcbe 	bl	8012828 <puts>

					MF.FLAG.SCND = 1;
 800aeac:	4a52      	ldr	r2, [pc, #328]	; (800aff8 <slalom_run+0x2bc>)
 800aeae:	8813      	ldrh	r3, [r2, #0]
 800aeb0:	f043 0320 	orr.w	r3, r3, #32
 800aeb4:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800aeb6:	4b51      	ldr	r3, [pc, #324]	; (800affc <slalom_run+0x2c0>)
 800aeb8:	2201      	movs	r2, #1
 800aeba:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800aebc:	4b50      	ldr	r3, [pc, #320]	; (800b000 <slalom_run+0x2c4>)
 800aebe:	2200      	movs	r2, #0
 800aec0:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800aec2:	4b52      	ldr	r3, [pc, #328]	; (800b00c <slalom_run+0x2d0>)
 800aec4:	2207      	movs	r2, #7
 800aec6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aec8:	4b51      	ldr	r3, [pc, #324]	; (800b010 <slalom_run+0x2d4>)
 800aeca:	2207      	movs	r2, #7
 800aecc:	701a      	strb	r2, [r3, #0]

					get_base();
 800aece:	f006 fe11 	bl	8011af4 <get_base>

					searchC();
 800aed2:	f003 fe39 	bl	800eb48 <searchC>
					HAL_Delay(2000);
 800aed6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aeda:	f7f6 f89f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800aede:	4b4c      	ldr	r3, [pc, #304]	; (800b010 <slalom_run+0x2d4>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	701a      	strb	r2, [r3, #0]
 800aee4:	4b4a      	ldr	r3, [pc, #296]	; (800b010 <slalom_run+0x2d4>)
 800aee6:	781a      	ldrb	r2, [r3, #0]
 800aee8:	4b48      	ldr	r3, [pc, #288]	; (800b00c <slalom_run+0x2d0>)
 800aeea:	701a      	strb	r2, [r3, #0]
					searchC();
 800aeec:	f003 fe2c 	bl	800eb48 <searchC>

					goal_x = GOAL_X;
 800aef0:	4b46      	ldr	r3, [pc, #280]	; (800b00c <slalom_run+0x2d0>)
 800aef2:	2207      	movs	r2, #7
 800aef4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aef6:	4b46      	ldr	r3, [pc, #280]	; (800b010 <slalom_run+0x2d4>)
 800aef8:	2207      	movs	r2, #7
 800aefa:	701a      	strb	r2, [r3, #0]
					break;
 800aefc:	e180      	b.n	800b200 <slalom_run+0x4c4>

				case 2:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800aefe:	4846      	ldr	r0, [pc, #280]	; (800b018 <slalom_run+0x2dc>)
 800af00:	f007 fc92 	bl	8012828 <puts>

					MF.FLAG.SCND = 1;
 800af04:	4a3c      	ldr	r2, [pc, #240]	; (800aff8 <slalom_run+0x2bc>)
 800af06:	8813      	ldrh	r3, [r2, #0]
 800af08:	f043 0320 	orr.w	r3, r3, #32
 800af0c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800af0e:	4a3a      	ldr	r2, [pc, #232]	; (800aff8 <slalom_run+0x2bc>)
 800af10:	8813      	ldrh	r3, [r2, #0]
 800af12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af16:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800af18:	4b38      	ldr	r3, [pc, #224]	; (800affc <slalom_run+0x2c0>)
 800af1a:	2201      	movs	r2, #1
 800af1c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800af1e:	4b38      	ldr	r3, [pc, #224]	; (800b000 <slalom_run+0x2c4>)
 800af20:	2200      	movs	r2, #0
 800af22:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800af24:	4b37      	ldr	r3, [pc, #220]	; (800b004 <slalom_run+0x2c8>)
 800af26:	f241 3288 	movw	r2, #5000	; 0x1388
 800af2a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 800af2c:	4b36      	ldr	r3, [pc, #216]	; (800b008 <slalom_run+0x2cc>)
 800af2e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800af32:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800af34:	4b35      	ldr	r3, [pc, #212]	; (800b00c <slalom_run+0x2d0>)
 800af36:	2207      	movs	r2, #7
 800af38:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800af3a:	4b35      	ldr	r3, [pc, #212]	; (800b010 <slalom_run+0x2d4>)
 800af3c:	2207      	movs	r2, #7
 800af3e:	701a      	strb	r2, [r3, #0]

					get_base();
 800af40:	f006 fdd8 	bl	8011af4 <get_base>

					searchD();
 800af44:	f004 f8e4 	bl	800f110 <searchD>
					HAL_Delay(2000);
 800af48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800af4c:	f7f6 f866 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800af50:	4b2f      	ldr	r3, [pc, #188]	; (800b010 <slalom_run+0x2d4>)
 800af52:	2200      	movs	r2, #0
 800af54:	701a      	strb	r2, [r3, #0]
 800af56:	4b2e      	ldr	r3, [pc, #184]	; (800b010 <slalom_run+0x2d4>)
 800af58:	781a      	ldrb	r2, [r3, #0]
 800af5a:	4b2c      	ldr	r3, [pc, #176]	; (800b00c <slalom_run+0x2d0>)
 800af5c:	701a      	strb	r2, [r3, #0]
					searchD();
 800af5e:	f004 f8d7 	bl	800f110 <searchD>

					goal_x = GOAL_X;
 800af62:	4b2a      	ldr	r3, [pc, #168]	; (800b00c <slalom_run+0x2d0>)
 800af64:	2207      	movs	r2, #7
 800af66:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800af68:	4b29      	ldr	r3, [pc, #164]	; (800b010 <slalom_run+0x2d4>)
 800af6a:	2207      	movs	r2, #7
 800af6c:	701a      	strb	r2, [r3, #0]
					break;
 800af6e:	e147      	b.n	800b200 <slalom_run+0x4c4>

				case 3:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800af70:	4829      	ldr	r0, [pc, #164]	; (800b018 <slalom_run+0x2dc>)
 800af72:	f007 fc59 	bl	8012828 <puts>

					MF.FLAG.SCND = 1;
 800af76:	4a20      	ldr	r2, [pc, #128]	; (800aff8 <slalom_run+0x2bc>)
 800af78:	8813      	ldrh	r3, [r2, #0]
 800af7a:	f043 0320 	orr.w	r3, r3, #32
 800af7e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800af80:	4a1d      	ldr	r2, [pc, #116]	; (800aff8 <slalom_run+0x2bc>)
 800af82:	8813      	ldrh	r3, [r2, #0]
 800af84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af88:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800af8a:	4b1c      	ldr	r3, [pc, #112]	; (800affc <slalom_run+0x2c0>)
 800af8c:	2201      	movs	r2, #1
 800af8e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800af90:	4b1b      	ldr	r3, [pc, #108]	; (800b000 <slalom_run+0x2c4>)
 800af92:	2200      	movs	r2, #0
 800af94:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800af96:	4b1b      	ldr	r3, [pc, #108]	; (800b004 <slalom_run+0x2c8>)
 800af98:	f241 3288 	movw	r2, #5000	; 0x1388
 800af9c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800af9e:	4b1a      	ldr	r3, [pc, #104]	; (800b008 <slalom_run+0x2cc>)
 800afa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800afa4:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800afa6:	4b19      	ldr	r3, [pc, #100]	; (800b00c <slalom_run+0x2d0>)
 800afa8:	2207      	movs	r2, #7
 800afaa:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800afac:	4b18      	ldr	r3, [pc, #96]	; (800b010 <slalom_run+0x2d4>)
 800afae:	2207      	movs	r2, #7
 800afb0:	701a      	strb	r2, [r3, #0]

					get_base();
 800afb2:	f006 fd9f 	bl	8011af4 <get_base>

					searchD();
 800afb6:	f004 f8ab 	bl	800f110 <searchD>
					HAL_Delay(2000);
 800afba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800afbe:	f7f6 f82d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800afc2:	4b13      	ldr	r3, [pc, #76]	; (800b010 <slalom_run+0x2d4>)
 800afc4:	2200      	movs	r2, #0
 800afc6:	701a      	strb	r2, [r3, #0]
 800afc8:	4b11      	ldr	r3, [pc, #68]	; (800b010 <slalom_run+0x2d4>)
 800afca:	781a      	ldrb	r2, [r3, #0]
 800afcc:	4b0f      	ldr	r3, [pc, #60]	; (800b00c <slalom_run+0x2d0>)
 800afce:	701a      	strb	r2, [r3, #0]
					searchD();
 800afd0:	f004 f89e 	bl	800f110 <searchD>

					goal_x = GOAL_X;
 800afd4:	4b0d      	ldr	r3, [pc, #52]	; (800b00c <slalom_run+0x2d0>)
 800afd6:	2207      	movs	r2, #7
 800afd8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800afda:	4b0d      	ldr	r3, [pc, #52]	; (800b010 <slalom_run+0x2d4>)
 800afdc:	2207      	movs	r2, #7
 800afde:	701a      	strb	r2, [r3, #0]
					break;
 800afe0:	e10e      	b.n	800b200 <slalom_run+0x4c4>
 800afe2:	bf00      	nop
 800afe4:	08013c7c 	.word	0x08013c7c
 800afe8:	20000aec 	.word	0x20000aec
 800afec:	0801397c 	.word	0x0801397c
 800aff0:	40020000 	.word	0x40020000
 800aff4:	08013b5c 	.word	0x08013b5c
 800aff8:	20000f68 	.word	0x20000f68
 800affc:	20000456 	.word	0x20000456
 800b000:	200015c8 	.word	0x200015c8
 800b004:	20000454 	.word	0x20000454
 800b008:	20000f7c 	.word	0x20000f7c
 800b00c:	20000bb0 	.word	0x20000bb0
 800b010:	20000b4c 	.word	0x20000b4c
 800b014:	08013c94 	.word	0x08013c94
 800b018:	08013cac 	.word	0x08013cac

				case 4:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800b01c:	4879      	ldr	r0, [pc, #484]	; (800b204 <slalom_run+0x4c8>)
 800b01e:	f007 fc03 	bl	8012828 <puts>

					MF.FLAG.SCND = 1;
 800b022:	4a79      	ldr	r2, [pc, #484]	; (800b208 <slalom_run+0x4cc>)
 800b024:	8813      	ldrh	r3, [r2, #0]
 800b026:	f043 0320 	orr.w	r3, r3, #32
 800b02a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b02c:	4a76      	ldr	r2, [pc, #472]	; (800b208 <slalom_run+0x4cc>)
 800b02e:	8813      	ldrh	r3, [r2, #0]
 800b030:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b034:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800b036:	4b75      	ldr	r3, [pc, #468]	; (800b20c <slalom_run+0x4d0>)
 800b038:	2201      	movs	r2, #1
 800b03a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b03c:	4b74      	ldr	r3, [pc, #464]	; (800b210 <slalom_run+0x4d4>)
 800b03e:	2200      	movs	r2, #0
 800b040:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b042:	4b74      	ldr	r3, [pc, #464]	; (800b214 <slalom_run+0x4d8>)
 800b044:	f241 3288 	movw	r2, #5000	; 0x1388
 800b048:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1500;
 800b04a:	4b73      	ldr	r3, [pc, #460]	; (800b218 <slalom_run+0x4dc>)
 800b04c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b050:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b052:	4b72      	ldr	r3, [pc, #456]	; (800b21c <slalom_run+0x4e0>)
 800b054:	2207      	movs	r2, #7
 800b056:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b058:	4b71      	ldr	r3, [pc, #452]	; (800b220 <slalom_run+0x4e4>)
 800b05a:	2207      	movs	r2, #7
 800b05c:	701a      	strb	r2, [r3, #0]

					get_base();
 800b05e:	f006 fd49 	bl	8011af4 <get_base>

					searchD();
 800b062:	f004 f855 	bl	800f110 <searchD>
					HAL_Delay(2000);
 800b066:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b06a:	f7f5 ffd7 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b06e:	4b6c      	ldr	r3, [pc, #432]	; (800b220 <slalom_run+0x4e4>)
 800b070:	2200      	movs	r2, #0
 800b072:	701a      	strb	r2, [r3, #0]
 800b074:	4b6a      	ldr	r3, [pc, #424]	; (800b220 <slalom_run+0x4e4>)
 800b076:	781a      	ldrb	r2, [r3, #0]
 800b078:	4b68      	ldr	r3, [pc, #416]	; (800b21c <slalom_run+0x4e0>)
 800b07a:	701a      	strb	r2, [r3, #0]
					searchD();
 800b07c:	f004 f848 	bl	800f110 <searchD>

					goal_x = GOAL_X;
 800b080:	4b66      	ldr	r3, [pc, #408]	; (800b21c <slalom_run+0x4e0>)
 800b082:	2207      	movs	r2, #7
 800b084:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b086:	4b66      	ldr	r3, [pc, #408]	; (800b220 <slalom_run+0x4e4>)
 800b088:	2207      	movs	r2, #7
 800b08a:	701a      	strb	r2, [r3, #0]
					break;
 800b08c:	e0b8      	b.n	800b200 <slalom_run+0x4c4>

				case 5:
					//----二次走行スラローム+直線優先----
					printf("High Speed Run. (Slalom)\n");
 800b08e:	4865      	ldr	r0, [pc, #404]	; (800b224 <slalom_run+0x4e8>)
 800b090:	f007 fbca 	bl	8012828 <puts>

					MF.FLAG.SCND = 1;
 800b094:	4a5c      	ldr	r2, [pc, #368]	; (800b208 <slalom_run+0x4cc>)
 800b096:	8813      	ldrh	r3, [r2, #0]
 800b098:	f043 0320 	orr.w	r3, r3, #32
 800b09c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b09e:	4a5a      	ldr	r2, [pc, #360]	; (800b208 <slalom_run+0x4cc>)
 800b0a0:	8813      	ldrh	r3, [r2, #0]
 800b0a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b0a6:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800b0a8:	4b58      	ldr	r3, [pc, #352]	; (800b20c <slalom_run+0x4d0>)
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b0ae:	4b58      	ldr	r3, [pc, #352]	; (800b210 <slalom_run+0x4d4>)
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800b0b4:	4b59      	ldr	r3, [pc, #356]	; (800b21c <slalom_run+0x4e0>)
 800b0b6:	2207      	movs	r2, #7
 800b0b8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b0ba:	4b59      	ldr	r3, [pc, #356]	; (800b220 <slalom_run+0x4e4>)
 800b0bc:	2207      	movs	r2, #7
 800b0be:	701a      	strb	r2, [r3, #0]

					get_base();
 800b0c0:	f006 fd18 	bl	8011af4 <get_base>

					HAL_Delay(5000);
 800b0c4:	f241 3088 	movw	r0, #5000	; 0x1388
 800b0c8:	f7f5 ffa8 	bl	800101c <HAL_Delay>
					searchC();
 800b0cc:	f003 fd3c 	bl	800eb48 <searchC>
					HAL_Delay(2000);
 800b0d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b0d4:	f7f5 ffa2 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b0d8:	4b51      	ldr	r3, [pc, #324]	; (800b220 <slalom_run+0x4e4>)
 800b0da:	2200      	movs	r2, #0
 800b0dc:	701a      	strb	r2, [r3, #0]
 800b0de:	4b50      	ldr	r3, [pc, #320]	; (800b220 <slalom_run+0x4e4>)
 800b0e0:	781a      	ldrb	r2, [r3, #0]
 800b0e2:	4b4e      	ldr	r3, [pc, #312]	; (800b21c <slalom_run+0x4e0>)
 800b0e4:	701a      	strb	r2, [r3, #0]
					searchC();
 800b0e6:	f003 fd2f 	bl	800eb48 <searchC>

					goal_x = GOAL_X;
 800b0ea:	4b4c      	ldr	r3, [pc, #304]	; (800b21c <slalom_run+0x4e0>)
 800b0ec:	2207      	movs	r2, #7
 800b0ee:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b0f0:	4b4b      	ldr	r3, [pc, #300]	; (800b220 <slalom_run+0x4e4>)
 800b0f2:	2207      	movs	r2, #7
 800b0f4:	701a      	strb	r2, [r3, #0]
					break;
 800b0f6:	e083      	b.n	800b200 <slalom_run+0x4c4>

				case 6:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800b0f8:	484a      	ldr	r0, [pc, #296]	; (800b224 <slalom_run+0x4e8>)
 800b0fa:	f007 fb95 	bl	8012828 <puts>

					MF.FLAG.SCND = 1;
 800b0fe:	4a42      	ldr	r2, [pc, #264]	; (800b208 <slalom_run+0x4cc>)
 800b100:	8813      	ldrh	r3, [r2, #0]
 800b102:	f043 0320 	orr.w	r3, r3, #32
 800b106:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b108:	4a3f      	ldr	r2, [pc, #252]	; (800b208 <slalom_run+0x4cc>)
 800b10a:	8813      	ldrh	r3, [r2, #0]
 800b10c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b110:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b112:	4a3d      	ldr	r2, [pc, #244]	; (800b208 <slalom_run+0x4cc>)
 800b114:	8813      	ldrh	r3, [r2, #0]
 800b116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b11a:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b11c:	4b3b      	ldr	r3, [pc, #236]	; (800b20c <slalom_run+0x4d0>)
 800b11e:	2203      	movs	r2, #3
 800b120:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b122:	4b3b      	ldr	r3, [pc, #236]	; (800b210 <slalom_run+0x4d4>)
 800b124:	2200      	movs	r2, #0
 800b126:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b128:	4b3a      	ldr	r3, [pc, #232]	; (800b214 <slalom_run+0x4d8>)
 800b12a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b12e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b130:	4b39      	ldr	r3, [pc, #228]	; (800b218 <slalom_run+0x4dc>)
 800b132:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b136:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b138:	4b38      	ldr	r3, [pc, #224]	; (800b21c <slalom_run+0x4e0>)
 800b13a:	2207      	movs	r2, #7
 800b13c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b13e:	4b38      	ldr	r3, [pc, #224]	; (800b220 <slalom_run+0x4e4>)
 800b140:	2207      	movs	r2, #7
 800b142:	701a      	strb	r2, [r3, #0]

					get_base();
 800b144:	f006 fcd6 	bl	8011af4 <get_base>

					HAL_Delay(5000);
 800b148:	f241 3088 	movw	r0, #5000	; 0x1388
 800b14c:	f7f5 ff66 	bl	800101c <HAL_Delay>
					searchD();
 800b150:	f003 ffde 	bl	800f110 <searchD>
					HAL_Delay(2000);
 800b154:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b158:	f7f5 ff60 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b15c:	4b30      	ldr	r3, [pc, #192]	; (800b220 <slalom_run+0x4e4>)
 800b15e:	2200      	movs	r2, #0
 800b160:	701a      	strb	r2, [r3, #0]
 800b162:	4b2f      	ldr	r3, [pc, #188]	; (800b220 <slalom_run+0x4e4>)
 800b164:	781a      	ldrb	r2, [r3, #0]
 800b166:	4b2d      	ldr	r3, [pc, #180]	; (800b21c <slalom_run+0x4e0>)
 800b168:	701a      	strb	r2, [r3, #0]
					searchD();
 800b16a:	f003 ffd1 	bl	800f110 <searchD>

					goal_x = GOAL_X;
 800b16e:	4b2b      	ldr	r3, [pc, #172]	; (800b21c <slalom_run+0x4e0>)
 800b170:	2207      	movs	r2, #7
 800b172:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b174:	4b2a      	ldr	r3, [pc, #168]	; (800b220 <slalom_run+0x4e4>)
 800b176:	2207      	movs	r2, #7
 800b178:	701a      	strb	r2, [r3, #0]
					break;
 800b17a:	e041      	b.n	800b200 <slalom_run+0x4c4>

				case 7:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800b17c:	4829      	ldr	r0, [pc, #164]	; (800b224 <slalom_run+0x4e8>)
 800b17e:	f007 fb53 	bl	8012828 <puts>

					MF.FLAG.SCND = 1;
 800b182:	4a21      	ldr	r2, [pc, #132]	; (800b208 <slalom_run+0x4cc>)
 800b184:	8813      	ldrh	r3, [r2, #0]
 800b186:	f043 0320 	orr.w	r3, r3, #32
 800b18a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b18c:	4a1e      	ldr	r2, [pc, #120]	; (800b208 <slalom_run+0x4cc>)
 800b18e:	8813      	ldrh	r3, [r2, #0]
 800b190:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b194:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b196:	4a1c      	ldr	r2, [pc, #112]	; (800b208 <slalom_run+0x4cc>)
 800b198:	8813      	ldrh	r3, [r2, #0]
 800b19a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b19e:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b1a0:	4b1a      	ldr	r3, [pc, #104]	; (800b20c <slalom_run+0x4d0>)
 800b1a2:	2203      	movs	r2, #3
 800b1a4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b1a6:	4b1a      	ldr	r3, [pc, #104]	; (800b210 <slalom_run+0x4d4>)
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b1ac:	4b19      	ldr	r3, [pc, #100]	; (800b214 <slalom_run+0x4d8>)
 800b1ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1b2:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800b1b4:	4b18      	ldr	r3, [pc, #96]	; (800b218 <slalom_run+0x4dc>)
 800b1b6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b1ba:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b1bc:	4b17      	ldr	r3, [pc, #92]	; (800b21c <slalom_run+0x4e0>)
 800b1be:	2207      	movs	r2, #7
 800b1c0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b1c2:	4b17      	ldr	r3, [pc, #92]	; (800b220 <slalom_run+0x4e4>)
 800b1c4:	2207      	movs	r2, #7
 800b1c6:	701a      	strb	r2, [r3, #0]

					get_base();
 800b1c8:	f006 fc94 	bl	8011af4 <get_base>

					HAL_Delay(5000);
 800b1cc:	f241 3088 	movw	r0, #5000	; 0x1388
 800b1d0:	f7f5 ff24 	bl	800101c <HAL_Delay>
					searchD();
 800b1d4:	f003 ff9c 	bl	800f110 <searchD>
					HAL_Delay(2000);
 800b1d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b1dc:	f7f5 ff1e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b1e0:	4b0f      	ldr	r3, [pc, #60]	; (800b220 <slalom_run+0x4e4>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	701a      	strb	r2, [r3, #0]
 800b1e6:	4b0e      	ldr	r3, [pc, #56]	; (800b220 <slalom_run+0x4e4>)
 800b1e8:	781a      	ldrb	r2, [r3, #0]
 800b1ea:	4b0c      	ldr	r3, [pc, #48]	; (800b21c <slalom_run+0x4e0>)
 800b1ec:	701a      	strb	r2, [r3, #0]
					searchD();
 800b1ee:	f003 ff8f 	bl	800f110 <searchD>

					goal_x = GOAL_X;
 800b1f2:	4b0a      	ldr	r3, [pc, #40]	; (800b21c <slalom_run+0x4e0>)
 800b1f4:	2207      	movs	r2, #7
 800b1f6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b1f8:	4b09      	ldr	r3, [pc, #36]	; (800b220 <slalom_run+0x4e4>)
 800b1fa:	2207      	movs	r2, #7
 800b1fc:	701a      	strb	r2, [r3, #0]
					break;
 800b1fe:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b200:	e5a5      	b.n	800ad4e <slalom_run+0x12>
 800b202:	bf00      	nop
 800b204:	08013cac 	.word	0x08013cac
 800b208:	20000f68 	.word	0x20000f68
 800b20c:	20000456 	.word	0x20000456
 800b210:	200015c8 	.word	0x200015c8
 800b214:	20000454 	.word	0x20000454
 800b218:	20000f7c 	.word	0x20000f7c
 800b21c:	20000bb0 	.word	0x20000bb0
 800b220:	20000b4c 	.word	0x20000b4c
 800b224:	08013cc8 	.word	0x08013cc8

0800b228 <perfect_run>:
//perfect_run
// 本番用走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_run(void){
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0

	int mode = 0;
 800b22e:	2300      	movs	r3, #0
 800b230:	607b      	str	r3, [r7, #4]
	printf("Perfect Run, Mode : %d\n", mode);
 800b232:	6879      	ldr	r1, [r7, #4]
 800b234:	48a9      	ldr	r0, [pc, #676]	; (800b4dc <perfect_run+0x2b4>)
 800b236:	f007 fa83 	bl	8012740 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	f003 0301 	and.w	r3, r3, #1
 800b242:	b2d8      	uxtb	r0, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	b2db      	uxtb	r3, r3
 800b248:	f003 0302 	and.w	r3, r3, #2
 800b24c:	b2d9      	uxtb	r1, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	b2db      	uxtb	r3, r3
 800b252:	f003 0304 	and.w	r3, r3, #4
 800b256:	b2db      	uxtb	r3, r3
 800b258:	461a      	mov	r2, r3
 800b25a:	f006 fca3 	bl	8011ba4 <led_write>
		  if(dist_r >= 20){
 800b25e:	4ba0      	ldr	r3, [pc, #640]	; (800b4e0 <perfect_run+0x2b8>)
 800b260:	edd3 7a00 	vldr	s15, [r3]
 800b264:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b270:	db0f      	blt.n	800b292 <perfect_run+0x6a>
			  mode++;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	3301      	adds	r3, #1
 800b276:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b278:	4b99      	ldr	r3, [pc, #612]	; (800b4e0 <perfect_run+0x2b8>)
 800b27a:	f04f 0200 	mov.w	r2, #0
 800b27e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2b07      	cmp	r3, #7
 800b284:	dd01      	ble.n	800b28a <perfect_run+0x62>
				  mode = 0;
 800b286:	2300      	movs	r3, #0
 800b288:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b28a:	6879      	ldr	r1, [r7, #4]
 800b28c:	4895      	ldr	r0, [pc, #596]	; (800b4e4 <perfect_run+0x2bc>)
 800b28e:	f007 fa57 	bl	8012740 <iprintf>
		  }
		  if(dist_r <= -20){
 800b292:	4b93      	ldr	r3, [pc, #588]	; (800b4e0 <perfect_run+0x2b8>)
 800b294:	edd3 7a00 	vldr	s15, [r3]
 800b298:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b29c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2a4:	d80f      	bhi.n	800b2c6 <perfect_run+0x9e>
			  mode--;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b2ac:	4b8c      	ldr	r3, [pc, #560]	; (800b4e0 <perfect_run+0x2b8>)
 800b2ae:	f04f 0200 	mov.w	r2, #0
 800b2b2:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	da01      	bge.n	800b2be <perfect_run+0x96>
				  mode = 7;
 800b2ba:	2307      	movs	r3, #7
 800b2bc:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b2be:	6879      	ldr	r1, [r7, #4]
 800b2c0:	4888      	ldr	r0, [pc, #544]	; (800b4e4 <perfect_run+0x2bc>)
 800b2c2:	f007 fa3d 	bl	8012740 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800b2c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b2ca:	4887      	ldr	r0, [pc, #540]	; (800b4e8 <perfect_run+0x2c0>)
 800b2cc:	f7f7 f802 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1b1      	bne.n	800b23a <perfect_run+0x12>
			  HAL_Delay(50);
 800b2d6:	2032      	movs	r0, #50	; 0x32
 800b2d8:	f7f5 fea0 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800b2dc:	bf00      	nop
 800b2de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b2e2:	4881      	ldr	r0, [pc, #516]	; (800b4e8 <perfect_run+0x2c0>)
 800b2e4:	f7f6 fff6 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d0f7      	beq.n	800b2de <perfect_run+0xb6>
			  drive_ready();
 800b2ee:	f7f9 fcc7 	bl	8004c80 <drive_ready>
			  switch(mode){
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2b07      	cmp	r3, #7
 800b2f6:	d8a0      	bhi.n	800b23a <perfect_run+0x12>
 800b2f8:	a201      	add	r2, pc, #4	; (adr r2, 800b300 <perfect_run+0xd8>)
 800b2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fe:	bf00      	nop
 800b300:	0800b321 	.word	0x0800b321
 800b304:	0800b3a3 	.word	0x0800b3a3
 800b308:	0800b459 	.word	0x0800b459
 800b30c:	0800b515 	.word	0x0800b515
 800b310:	0800b597 	.word	0x0800b597
 800b314:	0800b619 	.word	0x0800b619
 800b318:	0800b69b 	.word	0x0800b69b
 800b31c:	0800b71d 	.word	0x0800b71d

				case 0:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800b320:	4872      	ldr	r0, [pc, #456]	; (800b4ec <perfect_run+0x2c4>)
 800b322:	f007 fa81 	bl	8012828 <puts>
					MF.FLAG.SCND = 0;
 800b326:	4a72      	ldr	r2, [pc, #456]	; (800b4f0 <perfect_run+0x2c8>)
 800b328:	8813      	ldrh	r3, [r2, #0]
 800b32a:	f36f 1345 	bfc	r3, #5, #1
 800b32e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b330:	4a6f      	ldr	r2, [pc, #444]	; (800b4f0 <perfect_run+0x2c8>)
 800b332:	8813      	ldrh	r3, [r2, #0]
 800b334:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b338:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b33a:	4a6d      	ldr	r2, [pc, #436]	; (800b4f0 <perfect_run+0x2c8>)
 800b33c:	8813      	ldrh	r3, [r2, #0]
 800b33e:	f36f 238a 	bfc	r3, #10, #1
 800b342:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b344:	4b6b      	ldr	r3, [pc, #428]	; (800b4f4 <perfect_run+0x2cc>)
 800b346:	2202      	movs	r2, #2
 800b348:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b34a:	4b6b      	ldr	r3, [pc, #428]	; (800b4f8 <perfect_run+0x2d0>)
 800b34c:	2200      	movs	r2, #0
 800b34e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b350:	4b6a      	ldr	r3, [pc, #424]	; (800b4fc <perfect_run+0x2d4>)
 800b352:	2202      	movs	r2, #2
 800b354:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800b356:	4b6a      	ldr	r3, [pc, #424]	; (800b500 <perfect_run+0x2d8>)
 800b358:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b35c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b35e:	4b69      	ldr	r3, [pc, #420]	; (800b504 <perfect_run+0x2dc>)
 800b360:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b364:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800b366:	4b68      	ldr	r3, [pc, #416]	; (800b508 <perfect_run+0x2e0>)
 800b368:	2207      	movs	r2, #7
 800b36a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b36c:	4b67      	ldr	r3, [pc, #412]	; (800b50c <perfect_run+0x2e4>)
 800b36e:	2207      	movs	r2, #7
 800b370:	701a      	strb	r2, [r3, #0]

					get_base();
 800b372:	f006 fbbf 	bl	8011af4 <get_base>

					searchC();
 800b376:	f003 fbe7 	bl	800eb48 <searchC>
					HAL_Delay(2000);
 800b37a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b37e:	f7f5 fe4d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b382:	4b62      	ldr	r3, [pc, #392]	; (800b50c <perfect_run+0x2e4>)
 800b384:	2200      	movs	r2, #0
 800b386:	701a      	strb	r2, [r3, #0]
 800b388:	4b60      	ldr	r3, [pc, #384]	; (800b50c <perfect_run+0x2e4>)
 800b38a:	781a      	ldrb	r2, [r3, #0]
 800b38c:	4b5e      	ldr	r3, [pc, #376]	; (800b508 <perfect_run+0x2e0>)
 800b38e:	701a      	strb	r2, [r3, #0]
					searchC();
 800b390:	f003 fbda 	bl	800eb48 <searchC>

					goal_x = GOAL_X;
 800b394:	4b5c      	ldr	r3, [pc, #368]	; (800b508 <perfect_run+0x2e0>)
 800b396:	2207      	movs	r2, #7
 800b398:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b39a:	4b5c      	ldr	r3, [pc, #368]	; (800b50c <perfect_run+0x2e4>)
 800b39c:	2207      	movs	r2, #7
 800b39e:	701a      	strb	r2, [r3, #0]
					break;
 800b3a0:	e1fd      	b.n	800b79e <perfect_run+0x576>

				case 1:
					//----a一次重ね探索スラローム走行----
					printf("First Run.\n");
 800b3a2:	4852      	ldr	r0, [pc, #328]	; (800b4ec <perfect_run+0x2c4>)
 800b3a4:	f007 fa40 	bl	8012828 <puts>
					MF.FLAG.SCND = 0;
 800b3a8:	4a51      	ldr	r2, [pc, #324]	; (800b4f0 <perfect_run+0x2c8>)
 800b3aa:	8813      	ldrh	r3, [r2, #0]
 800b3ac:	f36f 1345 	bfc	r3, #5, #1
 800b3b0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b3b2:	4a4f      	ldr	r2, [pc, #316]	; (800b4f0 <perfect_run+0x2c8>)
 800b3b4:	8813      	ldrh	r3, [r2, #0]
 800b3b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b3ba:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b3bc:	4a4c      	ldr	r2, [pc, #304]	; (800b4f0 <perfect_run+0x2c8>)
 800b3be:	8813      	ldrh	r3, [r2, #0]
 800b3c0:	f36f 238a 	bfc	r3, #10, #1
 800b3c4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.SRC2 = 1;
 800b3c6:	4a4a      	ldr	r2, [pc, #296]	; (800b4f0 <perfect_run+0x2c8>)
 800b3c8:	8813      	ldrh	r3, [r2, #0]
 800b3ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ce:	8013      	strh	r3, [r2, #0]

					run_mode = MIDDLE;
 800b3d0:	4b48      	ldr	r3, [pc, #288]	; (800b4f4 <perfect_run+0x2cc>)
 800b3d2:	2202      	movs	r2, #2
 800b3d4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b3d6:	4b48      	ldr	r3, [pc, #288]	; (800b4f8 <perfect_run+0x2d0>)
 800b3d8:	2200      	movs	r2, #0
 800b3da:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b3dc:	4b47      	ldr	r3, [pc, #284]	; (800b4fc <perfect_run+0x2d4>)
 800b3de:	2202      	movs	r2, #2
 800b3e0:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800b3e2:	4b47      	ldr	r3, [pc, #284]	; (800b500 <perfect_run+0x2d8>)
 800b3e4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b3e8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b3ea:	4b46      	ldr	r3, [pc, #280]	; (800b504 <perfect_run+0x2dc>)
 800b3ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b3f0:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800b3f2:	4b45      	ldr	r3, [pc, #276]	; (800b508 <perfect_run+0x2e0>)
 800b3f4:	2207      	movs	r2, #7
 800b3f6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b3f8:	4b44      	ldr	r3, [pc, #272]	; (800b50c <perfect_run+0x2e4>)
 800b3fa:	2207      	movs	r2, #7
 800b3fc:	701a      	strb	r2, [r3, #0]

					get_base();
 800b3fe:	f006 fb79 	bl	8011af4 <get_base>

					searchC2();
 800b402:	f003 fd13 	bl	800ee2c <searchC2>
					start_mode = 1;
 800b406:	4b3c      	ldr	r3, [pc, #240]	; (800b4f8 <perfect_run+0x2d0>)
 800b408:	2201      	movs	r2, #1
 800b40a:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800b40c:	4b3b      	ldr	r3, [pc, #236]	; (800b4fc <perfect_run+0x2d4>)
 800b40e:	2201      	movs	r2, #1
 800b410:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800b412:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b416:	f7f5 fe01 	bl	800101c <HAL_Delay>

					rotate_180();											//180度回転
 800b41a:	f7fb f999 	bl	8006750 <rotate_180>
					MF.FLAG.SCND = 1;
 800b41e:	4a34      	ldr	r2, [pc, #208]	; (800b4f0 <perfect_run+0x2c8>)
 800b420:	8813      	ldrh	r3, [r2, #0]
 800b422:	f043 0320 	orr.w	r3, r3, #32
 800b426:	8013      	strh	r3, [r2, #0]
					MF.FLAG.SRC2 = 0;
 800b428:	4a31      	ldr	r2, [pc, #196]	; (800b4f0 <perfect_run+0x2c8>)
 800b42a:	8813      	ldrh	r3, [r2, #0]
 800b42c:	f36f 1386 	bfc	r3, #6, #1
 800b430:	8013      	strh	r3, [r2, #0]
					goal_x = goal_y = 0;
 800b432:	4b36      	ldr	r3, [pc, #216]	; (800b50c <perfect_run+0x2e4>)
 800b434:	2200      	movs	r2, #0
 800b436:	701a      	strb	r2, [r3, #0]
 800b438:	4b34      	ldr	r3, [pc, #208]	; (800b50c <perfect_run+0x2e4>)
 800b43a:	781a      	ldrb	r2, [r3, #0]
 800b43c:	4b32      	ldr	r3, [pc, #200]	; (800b508 <perfect_run+0x2e0>)
 800b43e:	701a      	strb	r2, [r3, #0]
					run_mode = HIGH;
 800b440:	4b2c      	ldr	r3, [pc, #176]	; (800b4f4 <perfect_run+0x2cc>)
 800b442:	2203      	movs	r2, #3
 800b444:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b446:	f003 fff9 	bl	800f43c <searchF3>

					goal_x = GOAL_X;
 800b44a:	4b2f      	ldr	r3, [pc, #188]	; (800b508 <perfect_run+0x2e0>)
 800b44c:	2207      	movs	r2, #7
 800b44e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b450:	4b2e      	ldr	r3, [pc, #184]	; (800b50c <perfect_run+0x2e4>)
 800b452:	2207      	movs	r2, #7
 800b454:	701a      	strb	r2, [r3, #0]
					break;
 800b456:	e1a2      	b.n	800b79e <perfect_run+0x576>

				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 800b458:	482d      	ldr	r0, [pc, #180]	; (800b510 <perfect_run+0x2e8>)
 800b45a:	f007 f9e5 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800b45e:	4a24      	ldr	r2, [pc, #144]	; (800b4f0 <perfect_run+0x2c8>)
 800b460:	8813      	ldrh	r3, [r2, #0]
 800b462:	f043 0320 	orr.w	r3, r3, #32
 800b466:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b468:	4a21      	ldr	r2, [pc, #132]	; (800b4f0 <perfect_run+0x2c8>)
 800b46a:	8813      	ldrh	r3, [r2, #0]
 800b46c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b470:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b472:	4a1f      	ldr	r2, [pc, #124]	; (800b4f0 <perfect_run+0x2c8>)
 800b474:	8813      	ldrh	r3, [r2, #0]
 800b476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b47a:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b47c:	4b1d      	ldr	r3, [pc, #116]	; (800b4f4 <perfect_run+0x2cc>)
 800b47e:	2203      	movs	r2, #3
 800b480:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b482:	4b1d      	ldr	r3, [pc, #116]	; (800b4f8 <perfect_run+0x2d0>)
 800b484:	2200      	movs	r2, #0
 800b486:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b488:	4b1c      	ldr	r3, [pc, #112]	; (800b4fc <perfect_run+0x2d4>)
 800b48a:	2202      	movs	r2, #2
 800b48c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b48e:	4b1c      	ldr	r3, [pc, #112]	; (800b500 <perfect_run+0x2d8>)
 800b490:	f241 3288 	movw	r2, #5000	; 0x1388
 800b494:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800b496:	4b1b      	ldr	r3, [pc, #108]	; (800b504 <perfect_run+0x2dc>)
 800b498:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b49c:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800b49e:	4b1a      	ldr	r3, [pc, #104]	; (800b508 <perfect_run+0x2e0>)
 800b4a0:	2207      	movs	r2, #7
 800b4a2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b4a4:	4b19      	ldr	r3, [pc, #100]	; (800b50c <perfect_run+0x2e4>)
 800b4a6:	2207      	movs	r2, #7
 800b4a8:	701a      	strb	r2, [r3, #0]

					get_base();
 800b4aa:	f006 fb23 	bl	8011af4 <get_base>

					searchF3();
 800b4ae:	f003 ffc5 	bl	800f43c <searchF3>
					HAL_Delay(2000);
 800b4b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b4b6:	f7f5 fdb1 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b4ba:	4b14      	ldr	r3, [pc, #80]	; (800b50c <perfect_run+0x2e4>)
 800b4bc:	2200      	movs	r2, #0
 800b4be:	701a      	strb	r2, [r3, #0]
 800b4c0:	4b12      	ldr	r3, [pc, #72]	; (800b50c <perfect_run+0x2e4>)
 800b4c2:	781a      	ldrb	r2, [r3, #0]
 800b4c4:	4b10      	ldr	r3, [pc, #64]	; (800b508 <perfect_run+0x2e0>)
 800b4c6:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b4c8:	f003 ffb8 	bl	800f43c <searchF3>

					goal_x = GOAL_X;
 800b4cc:	4b0e      	ldr	r3, [pc, #56]	; (800b508 <perfect_run+0x2e0>)
 800b4ce:	2207      	movs	r2, #7
 800b4d0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b4d2:	4b0e      	ldr	r3, [pc, #56]	; (800b50c <perfect_run+0x2e4>)
 800b4d4:	2207      	movs	r2, #7
 800b4d6:	701a      	strb	r2, [r3, #0]
					break;
 800b4d8:	e161      	b.n	800b79e <perfect_run+0x576>
 800b4da:	bf00      	nop
 800b4dc:	08013ce4 	.word	0x08013ce4
 800b4e0:	20000aec 	.word	0x20000aec
 800b4e4:	0801397c 	.word	0x0801397c
 800b4e8:	40020000 	.word	0x40020000
 800b4ec:	08013c3c 	.word	0x08013c3c
 800b4f0:	20000f68 	.word	0x20000f68
 800b4f4:	20000456 	.word	0x20000456
 800b4f8:	200015c8 	.word	0x200015c8
 800b4fc:	20000bb1 	.word	0x20000bb1
 800b500:	20000454 	.word	0x20000454
 800b504:	20000f7c 	.word	0x20000f7c
 800b508:	20000bb0 	.word	0x20000bb0
 800b50c:	20000b4c 	.word	0x20000b4c
 800b510:	08013b70 	.word	0x08013b70

				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High High Speed----
					printf("pass press 3-2.\n");
 800b514:	48a2      	ldr	r0, [pc, #648]	; (800b7a0 <perfect_run+0x578>)
 800b516:	f007 f987 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800b51a:	4aa2      	ldr	r2, [pc, #648]	; (800b7a4 <perfect_run+0x57c>)
 800b51c:	8813      	ldrh	r3, [r2, #0]
 800b51e:	f043 0320 	orr.w	r3, r3, #32
 800b522:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b524:	4a9f      	ldr	r2, [pc, #636]	; (800b7a4 <perfect_run+0x57c>)
 800b526:	8813      	ldrh	r3, [r2, #0]
 800b528:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b52c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b52e:	4a9d      	ldr	r2, [pc, #628]	; (800b7a4 <perfect_run+0x57c>)
 800b530:	8813      	ldrh	r3, [r2, #0]
 800b532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b536:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH_HIGH;
 800b538:	4b9b      	ldr	r3, [pc, #620]	; (800b7a8 <perfect_run+0x580>)
 800b53a:	2204      	movs	r2, #4
 800b53c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b53e:	4b9b      	ldr	r3, [pc, #620]	; (800b7ac <perfect_run+0x584>)
 800b540:	2200      	movs	r2, #0
 800b542:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b544:	4b9a      	ldr	r3, [pc, #616]	; (800b7b0 <perfect_run+0x588>)
 800b546:	2202      	movs	r2, #2
 800b548:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800b54a:	4b9a      	ldr	r3, [pc, #616]	; (800b7b4 <perfect_run+0x58c>)
 800b54c:	f242 7210 	movw	r2, #10000	; 0x2710
 800b550:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800b552:	4b99      	ldr	r3, [pc, #612]	; (800b7b8 <perfect_run+0x590>)
 800b554:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b558:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800b55a:	4b98      	ldr	r3, [pc, #608]	; (800b7bc <perfect_run+0x594>)
 800b55c:	2207      	movs	r2, #7
 800b55e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b560:	4b97      	ldr	r3, [pc, #604]	; (800b7c0 <perfect_run+0x598>)
 800b562:	2207      	movs	r2, #7
 800b564:	701a      	strb	r2, [r3, #0]

					get_base();
 800b566:	f006 fac5 	bl	8011af4 <get_base>

					searchF3();
 800b56a:	f003 ff67 	bl	800f43c <searchF3>
					HAL_Delay(2000);
 800b56e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b572:	f7f5 fd53 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b576:	4b92      	ldr	r3, [pc, #584]	; (800b7c0 <perfect_run+0x598>)
 800b578:	2200      	movs	r2, #0
 800b57a:	701a      	strb	r2, [r3, #0]
 800b57c:	4b90      	ldr	r3, [pc, #576]	; (800b7c0 <perfect_run+0x598>)
 800b57e:	781a      	ldrb	r2, [r3, #0]
 800b580:	4b8e      	ldr	r3, [pc, #568]	; (800b7bc <perfect_run+0x594>)
 800b582:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b584:	f003 ff5a 	bl	800f43c <searchF3>

					goal_x = GOAL_X;
 800b588:	4b8c      	ldr	r3, [pc, #560]	; (800b7bc <perfect_run+0x594>)
 800b58a:	2207      	movs	r2, #7
 800b58c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b58e:	4b8c      	ldr	r3, [pc, #560]	; (800b7c0 <perfect_run+0x598>)
 800b590:	2207      	movs	r2, #7
 800b592:	701a      	strb	r2, [r3, #0]
					break;
 800b594:	e103      	b.n	800b79e <perfect_run+0x576>

				case 4:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High High Speed----
					printf("pass press 3-2.\n");
 800b596:	4882      	ldr	r0, [pc, #520]	; (800b7a0 <perfect_run+0x578>)
 800b598:	f007 f946 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800b59c:	4a81      	ldr	r2, [pc, #516]	; (800b7a4 <perfect_run+0x57c>)
 800b59e:	8813      	ldrh	r3, [r2, #0]
 800b5a0:	f043 0320 	orr.w	r3, r3, #32
 800b5a4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b5a6:	4a7f      	ldr	r2, [pc, #508]	; (800b7a4 <perfect_run+0x57c>)
 800b5a8:	8813      	ldrh	r3, [r2, #0]
 800b5aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b5ae:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b5b0:	4a7c      	ldr	r2, [pc, #496]	; (800b7a4 <perfect_run+0x57c>)
 800b5b2:	8813      	ldrh	r3, [r2, #0]
 800b5b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b5b8:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH_HIGH;
 800b5ba:	4b7b      	ldr	r3, [pc, #492]	; (800b7a8 <perfect_run+0x580>)
 800b5bc:	2204      	movs	r2, #4
 800b5be:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b5c0:	4b7a      	ldr	r3, [pc, #488]	; (800b7ac <perfect_run+0x584>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b5c6:	4b7a      	ldr	r3, [pc, #488]	; (800b7b0 <perfect_run+0x588>)
 800b5c8:	2202      	movs	r2, #2
 800b5ca:	701a      	strb	r2, [r3, #0]
					accel_hs = 15000;
 800b5cc:	4b79      	ldr	r3, [pc, #484]	; (800b7b4 <perfect_run+0x58c>)
 800b5ce:	f643 2298 	movw	r2, #15000	; 0x3a98
 800b5d2:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2500;
 800b5d4:	4b78      	ldr	r3, [pc, #480]	; (800b7b8 <perfect_run+0x590>)
 800b5d6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b5da:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800b5dc:	4b77      	ldr	r3, [pc, #476]	; (800b7bc <perfect_run+0x594>)
 800b5de:	2207      	movs	r2, #7
 800b5e0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b5e2:	4b77      	ldr	r3, [pc, #476]	; (800b7c0 <perfect_run+0x598>)
 800b5e4:	2207      	movs	r2, #7
 800b5e6:	701a      	strb	r2, [r3, #0]

					get_base();
 800b5e8:	f006 fa84 	bl	8011af4 <get_base>

					searchF3();
 800b5ec:	f003 ff26 	bl	800f43c <searchF3>
					HAL_Delay(2000);
 800b5f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b5f4:	f7f5 fd12 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b5f8:	4b71      	ldr	r3, [pc, #452]	; (800b7c0 <perfect_run+0x598>)
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	701a      	strb	r2, [r3, #0]
 800b5fe:	4b70      	ldr	r3, [pc, #448]	; (800b7c0 <perfect_run+0x598>)
 800b600:	781a      	ldrb	r2, [r3, #0]
 800b602:	4b6e      	ldr	r3, [pc, #440]	; (800b7bc <perfect_run+0x594>)
 800b604:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b606:	f003 ff19 	bl	800f43c <searchF3>

					goal_x = GOAL_X;
 800b60a:	4b6c      	ldr	r3, [pc, #432]	; (800b7bc <perfect_run+0x594>)
 800b60c:	2207      	movs	r2, #7
 800b60e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b610:	4b6b      	ldr	r3, [pc, #428]	; (800b7c0 <perfect_run+0x598>)
 800b612:	2207      	movs	r2, #7
 800b614:	701a      	strb	r2, [r3, #0]
					break;
 800b616:	e0c2      	b.n	800b79e <perfect_run+0x576>

				case 5:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 800b618:	486a      	ldr	r0, [pc, #424]	; (800b7c4 <perfect_run+0x59c>)
 800b61a:	f007 f905 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800b61e:	4a61      	ldr	r2, [pc, #388]	; (800b7a4 <perfect_run+0x57c>)
 800b620:	8813      	ldrh	r3, [r2, #0]
 800b622:	f043 0320 	orr.w	r3, r3, #32
 800b626:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b628:	4a5e      	ldr	r2, [pc, #376]	; (800b7a4 <perfect_run+0x57c>)
 800b62a:	8813      	ldrh	r3, [r2, #0]
 800b62c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b630:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b632:	4a5c      	ldr	r2, [pc, #368]	; (800b7a4 <perfect_run+0x57c>)
 800b634:	8813      	ldrh	r3, [r2, #0]
 800b636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b63a:	8013      	strh	r3, [r2, #0]
					run_mode = 5;
 800b63c:	4b5a      	ldr	r3, [pc, #360]	; (800b7a8 <perfect_run+0x580>)
 800b63e:	2205      	movs	r2, #5
 800b640:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b642:	4b5a      	ldr	r3, [pc, #360]	; (800b7ac <perfect_run+0x584>)
 800b644:	2200      	movs	r2, #0
 800b646:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b648:	4b59      	ldr	r3, [pc, #356]	; (800b7b0 <perfect_run+0x588>)
 800b64a:	2202      	movs	r2, #2
 800b64c:	701a      	strb	r2, [r3, #0]
					accel_hs = 25000;
 800b64e:	4b59      	ldr	r3, [pc, #356]	; (800b7b4 <perfect_run+0x58c>)
 800b650:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800b654:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 3000;
 800b656:	4b58      	ldr	r3, [pc, #352]	; (800b7b8 <perfect_run+0x590>)
 800b658:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800b65c:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800b65e:	4b57      	ldr	r3, [pc, #348]	; (800b7bc <perfect_run+0x594>)
 800b660:	2207      	movs	r2, #7
 800b662:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b664:	4b56      	ldr	r3, [pc, #344]	; (800b7c0 <perfect_run+0x598>)
 800b666:	2207      	movs	r2, #7
 800b668:	701a      	strb	r2, [r3, #0]

					get_base();
 800b66a:	f006 fa43 	bl	8011af4 <get_base>

					searchF3();
 800b66e:	f003 fee5 	bl	800f43c <searchF3>
					HAL_Delay(2000);
 800b672:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b676:	f7f5 fcd1 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b67a:	4b51      	ldr	r3, [pc, #324]	; (800b7c0 <perfect_run+0x598>)
 800b67c:	2200      	movs	r2, #0
 800b67e:	701a      	strb	r2, [r3, #0]
 800b680:	4b4f      	ldr	r3, [pc, #316]	; (800b7c0 <perfect_run+0x598>)
 800b682:	781a      	ldrb	r2, [r3, #0]
 800b684:	4b4d      	ldr	r3, [pc, #308]	; (800b7bc <perfect_run+0x594>)
 800b686:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b688:	f003 fed8 	bl	800f43c <searchF3>

					goal_x = GOAL_X;
 800b68c:	4b4b      	ldr	r3, [pc, #300]	; (800b7bc <perfect_run+0x594>)
 800b68e:	2207      	movs	r2, #7
 800b690:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b692:	4b4b      	ldr	r3, [pc, #300]	; (800b7c0 <perfect_run+0x598>)
 800b694:	2207      	movs	r2, #7
 800b696:	701a      	strb	r2, [r3, #0]
					break;
 800b698:	e081      	b.n	800b79e <perfect_run+0x576>

				case 6:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 800b69a:	484a      	ldr	r0, [pc, #296]	; (800b7c4 <perfect_run+0x59c>)
 800b69c:	f007 f8c4 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800b6a0:	4a40      	ldr	r2, [pc, #256]	; (800b7a4 <perfect_run+0x57c>)
 800b6a2:	8813      	ldrh	r3, [r2, #0]
 800b6a4:	f043 0320 	orr.w	r3, r3, #32
 800b6a8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b6aa:	4a3e      	ldr	r2, [pc, #248]	; (800b7a4 <perfect_run+0x57c>)
 800b6ac:	8813      	ldrh	r3, [r2, #0]
 800b6ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b6b2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b6b4:	4a3b      	ldr	r2, [pc, #236]	; (800b7a4 <perfect_run+0x57c>)
 800b6b6:	8813      	ldrh	r3, [r2, #0]
 800b6b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b6bc:	8013      	strh	r3, [r2, #0]
					run_mode = 5;
 800b6be:	4b3a      	ldr	r3, [pc, #232]	; (800b7a8 <perfect_run+0x580>)
 800b6c0:	2205      	movs	r2, #5
 800b6c2:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b6c4:	4b39      	ldr	r3, [pc, #228]	; (800b7ac <perfect_run+0x584>)
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b6ca:	4b39      	ldr	r3, [pc, #228]	; (800b7b0 <perfect_run+0x588>)
 800b6cc:	2202      	movs	r2, #2
 800b6ce:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800b6d0:	4b38      	ldr	r3, [pc, #224]	; (800b7b4 <perfect_run+0x58c>)
 800b6d2:	f242 7210 	movw	r2, #10000	; 0x2710
 800b6d6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800b6d8:	4b37      	ldr	r3, [pc, #220]	; (800b7b8 <perfect_run+0x590>)
 800b6da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b6de:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800b6e0:	4b36      	ldr	r3, [pc, #216]	; (800b7bc <perfect_run+0x594>)
 800b6e2:	2207      	movs	r2, #7
 800b6e4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b6e6:	4b36      	ldr	r3, [pc, #216]	; (800b7c0 <perfect_run+0x598>)
 800b6e8:	2207      	movs	r2, #7
 800b6ea:	701a      	strb	r2, [r3, #0]

					get_base();
 800b6ec:	f006 fa02 	bl	8011af4 <get_base>

					searchF3();
 800b6f0:	f003 fea4 	bl	800f43c <searchF3>
					HAL_Delay(2000);
 800b6f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b6f8:	f7f5 fc90 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b6fc:	4b30      	ldr	r3, [pc, #192]	; (800b7c0 <perfect_run+0x598>)
 800b6fe:	2200      	movs	r2, #0
 800b700:	701a      	strb	r2, [r3, #0]
 800b702:	4b2f      	ldr	r3, [pc, #188]	; (800b7c0 <perfect_run+0x598>)
 800b704:	781a      	ldrb	r2, [r3, #0]
 800b706:	4b2d      	ldr	r3, [pc, #180]	; (800b7bc <perfect_run+0x594>)
 800b708:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b70a:	f003 fe97 	bl	800f43c <searchF3>

					goal_x = GOAL_X;
 800b70e:	4b2b      	ldr	r3, [pc, #172]	; (800b7bc <perfect_run+0x594>)
 800b710:	2207      	movs	r2, #7
 800b712:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b714:	4b2a      	ldr	r3, [pc, #168]	; (800b7c0 <perfect_run+0x598>)
 800b716:	2207      	movs	r2, #7
 800b718:	701a      	strb	r2, [r3, #0]
					break;
 800b71a:	e040      	b.n	800b79e <perfect_run+0x576>
				case 7:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 800b71c:	4829      	ldr	r0, [pc, #164]	; (800b7c4 <perfect_run+0x59c>)
 800b71e:	f007 f883 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800b722:	4a20      	ldr	r2, [pc, #128]	; (800b7a4 <perfect_run+0x57c>)
 800b724:	8813      	ldrh	r3, [r2, #0]
 800b726:	f043 0320 	orr.w	r3, r3, #32
 800b72a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b72c:	4a1d      	ldr	r2, [pc, #116]	; (800b7a4 <perfect_run+0x57c>)
 800b72e:	8813      	ldrh	r3, [r2, #0]
 800b730:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b734:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b736:	4a1b      	ldr	r2, [pc, #108]	; (800b7a4 <perfect_run+0x57c>)
 800b738:	8813      	ldrh	r3, [r2, #0]
 800b73a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b73e:	8013      	strh	r3, [r2, #0]
					run_mode = 5;
 800b740:	4b19      	ldr	r3, [pc, #100]	; (800b7a8 <perfect_run+0x580>)
 800b742:	2205      	movs	r2, #5
 800b744:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b746:	4b19      	ldr	r3, [pc, #100]	; (800b7ac <perfect_run+0x584>)
 800b748:	2200      	movs	r2, #0
 800b74a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b74c:	4b18      	ldr	r3, [pc, #96]	; (800b7b0 <perfect_run+0x588>)
 800b74e:	2202      	movs	r2, #2
 800b750:	701a      	strb	r2, [r3, #0]
					accel_hs = 22000;
 800b752:	4b18      	ldr	r3, [pc, #96]	; (800b7b4 <perfect_run+0x58c>)
 800b754:	f245 52f0 	movw	r2, #22000	; 0x55f0
 800b758:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 3000;
 800b75a:	4b17      	ldr	r3, [pc, #92]	; (800b7b8 <perfect_run+0x590>)
 800b75c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800b760:	801a      	strh	r2, [r3, #0]

//					pass_mode = 3;						//a半区画ベースでroute配列生成

					goal_x = GOAL_X;
 800b762:	4b16      	ldr	r3, [pc, #88]	; (800b7bc <perfect_run+0x594>)
 800b764:	2207      	movs	r2, #7
 800b766:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b768:	4b15      	ldr	r3, [pc, #84]	; (800b7c0 <perfect_run+0x598>)
 800b76a:	2207      	movs	r2, #7
 800b76c:	701a      	strb	r2, [r3, #0]

					get_base();
 800b76e:	f006 f9c1 	bl	8011af4 <get_base>

					searchF3();
 800b772:	f003 fe63 	bl	800f43c <searchF3>
					HAL_Delay(2000);
 800b776:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b77a:	f7f5 fc4f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b77e:	4b10      	ldr	r3, [pc, #64]	; (800b7c0 <perfect_run+0x598>)
 800b780:	2200      	movs	r2, #0
 800b782:	701a      	strb	r2, [r3, #0]
 800b784:	4b0e      	ldr	r3, [pc, #56]	; (800b7c0 <perfect_run+0x598>)
 800b786:	781a      	ldrb	r2, [r3, #0]
 800b788:	4b0c      	ldr	r3, [pc, #48]	; (800b7bc <perfect_run+0x594>)
 800b78a:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b78c:	f003 fe56 	bl	800f43c <searchF3>

					goal_x = GOAL_X;
 800b790:	4b0a      	ldr	r3, [pc, #40]	; (800b7bc <perfect_run+0x594>)
 800b792:	2207      	movs	r2, #7
 800b794:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b796:	4b0a      	ldr	r3, [pc, #40]	; (800b7c0 <perfect_run+0x598>)
 800b798:	2207      	movs	r2, #7
 800b79a:	701a      	strb	r2, [r3, #0]
					break;
 800b79c:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b79e:	e54c      	b.n	800b23a <perfect_run+0x12>
 800b7a0:	08013b70 	.word	0x08013b70
 800b7a4:	20000f68 	.word	0x20000f68
 800b7a8:	20000456 	.word	0x20000456
 800b7ac:	200015c8 	.word	0x200015c8
 800b7b0:	20000bb1 	.word	0x20000bb1
 800b7b4:	20000454 	.word	0x20000454
 800b7b8:	20000f7c 	.word	0x20000f7c
 800b7bc:	20000bb0 	.word	0x20000bb0
 800b7c0:	20000b4c 	.word	0x20000b4c
 800b7c4:	08013b90 	.word	0x08013b90

0800b7c8 <perfect_slalom>:
//perfect_slalom
// 本番用スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_slalom(void){
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0

	int mode = 0;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	607b      	str	r3, [r7, #4]
	printf("Perfect Slalom, Mode : %d\n", mode);
 800b7d2:	6879      	ldr	r1, [r7, #4]
 800b7d4:	4898      	ldr	r0, [pc, #608]	; (800ba38 <perfect_slalom+0x270>)
 800b7d6:	f006 ffb3 	bl	8012740 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	f003 0301 	and.w	r3, r3, #1
 800b7e2:	b2d8      	uxtb	r0, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	f003 0302 	and.w	r3, r3, #2
 800b7ec:	b2d9      	uxtb	r1, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	f003 0304 	and.w	r3, r3, #4
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	f006 f9d3 	bl	8011ba4 <led_write>
		  if(dist_r >= 20){
 800b7fe:	4b8f      	ldr	r3, [pc, #572]	; (800ba3c <perfect_slalom+0x274>)
 800b800:	edd3 7a00 	vldr	s15, [r3]
 800b804:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b810:	db0f      	blt.n	800b832 <perfect_slalom+0x6a>
			  mode++;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	3301      	adds	r3, #1
 800b816:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b818:	4b88      	ldr	r3, [pc, #544]	; (800ba3c <perfect_slalom+0x274>)
 800b81a:	f04f 0200 	mov.w	r2, #0
 800b81e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b07      	cmp	r3, #7
 800b824:	dd01      	ble.n	800b82a <perfect_slalom+0x62>
				  mode = 0;
 800b826:	2300      	movs	r3, #0
 800b828:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b82a:	6879      	ldr	r1, [r7, #4]
 800b82c:	4884      	ldr	r0, [pc, #528]	; (800ba40 <perfect_slalom+0x278>)
 800b82e:	f006 ff87 	bl	8012740 <iprintf>
		  }
		  if(dist_r <= -20){
 800b832:	4b82      	ldr	r3, [pc, #520]	; (800ba3c <perfect_slalom+0x274>)
 800b834:	edd3 7a00 	vldr	s15, [r3]
 800b838:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b83c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b844:	d80f      	bhi.n	800b866 <perfect_slalom+0x9e>
			  mode--;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	3b01      	subs	r3, #1
 800b84a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b84c:	4b7b      	ldr	r3, [pc, #492]	; (800ba3c <perfect_slalom+0x274>)
 800b84e:	f04f 0200 	mov.w	r2, #0
 800b852:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	da01      	bge.n	800b85e <perfect_slalom+0x96>
				  mode = 7;
 800b85a:	2307      	movs	r3, #7
 800b85c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b85e:	6879      	ldr	r1, [r7, #4]
 800b860:	4877      	ldr	r0, [pc, #476]	; (800ba40 <perfect_slalom+0x278>)
 800b862:	f006 ff6d 	bl	8012740 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800b866:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b86a:	4876      	ldr	r0, [pc, #472]	; (800ba44 <perfect_slalom+0x27c>)
 800b86c:	f7f6 fd32 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b870:	4603      	mov	r3, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1b1      	bne.n	800b7da <perfect_slalom+0x12>
			  HAL_Delay(50);
 800b876:	2032      	movs	r0, #50	; 0x32
 800b878:	f7f5 fbd0 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800b87c:	bf00      	nop
 800b87e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b882:	4870      	ldr	r0, [pc, #448]	; (800ba44 <perfect_slalom+0x27c>)
 800b884:	f7f6 fd26 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d0f7      	beq.n	800b87e <perfect_slalom+0xb6>
			  drive_ready();
 800b88e:	f7f9 f9f7 	bl	8004c80 <drive_ready>

			  switch(mode){
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2b07      	cmp	r3, #7
 800b896:	d8a0      	bhi.n	800b7da <perfect_slalom+0x12>
 800b898:	a201      	add	r2, pc, #4	; (adr r2, 800b8a0 <perfect_slalom+0xd8>)
 800b89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b89e:	bf00      	nop
 800b8a0:	0800b7db 	.word	0x0800b7db
 800b8a4:	0800b8c1 	.word	0x0800b8c1
 800b8a8:	0800b943 	.word	0x0800b943
 800b8ac:	0800b9c5 	.word	0x0800b9c5
 800b8b0:	0800ba75 	.word	0x0800ba75
 800b8b4:	0800baf7 	.word	0x0800baf7
 800b8b8:	0800bb79 	.word	0x0800bb79
 800b8bc:	0800bbfb 	.word	0x0800bbfb
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800b8c0:	4861      	ldr	r0, [pc, #388]	; (800ba48 <perfect_slalom+0x280>)
 800b8c2:	f006 ffb1 	bl	8012828 <puts>
					MF.FLAG.SCND = 0;
 800b8c6:	4a61      	ldr	r2, [pc, #388]	; (800ba4c <perfect_slalom+0x284>)
 800b8c8:	8813      	ldrh	r3, [r2, #0]
 800b8ca:	f36f 1345 	bfc	r3, #5, #1
 800b8ce:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b8d0:	4a5e      	ldr	r2, [pc, #376]	; (800ba4c <perfect_slalom+0x284>)
 800b8d2:	8813      	ldrh	r3, [r2, #0]
 800b8d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b8d8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b8da:	4a5c      	ldr	r2, [pc, #368]	; (800ba4c <perfect_slalom+0x284>)
 800b8dc:	8813      	ldrh	r3, [r2, #0]
 800b8de:	f36f 238a 	bfc	r3, #10, #1
 800b8e2:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b8e4:	4b5a      	ldr	r3, [pc, #360]	; (800ba50 <perfect_slalom+0x288>)
 800b8e6:	2202      	movs	r2, #2
 800b8e8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b8ea:	4b5a      	ldr	r3, [pc, #360]	; (800ba54 <perfect_slalom+0x28c>)
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b8f0:	4b59      	ldr	r3, [pc, #356]	; (800ba58 <perfect_slalom+0x290>)
 800b8f2:	2202      	movs	r2, #2
 800b8f4:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b8f6:	4b59      	ldr	r3, [pc, #356]	; (800ba5c <perfect_slalom+0x294>)
 800b8f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8fc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b8fe:	4b58      	ldr	r3, [pc, #352]	; (800ba60 <perfect_slalom+0x298>)
 800b900:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b904:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800b906:	4b57      	ldr	r3, [pc, #348]	; (800ba64 <perfect_slalom+0x29c>)
 800b908:	2207      	movs	r2, #7
 800b90a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b90c:	4b56      	ldr	r3, [pc, #344]	; (800ba68 <perfect_slalom+0x2a0>)
 800b90e:	2207      	movs	r2, #7
 800b910:	701a      	strb	r2, [r3, #0]

					get_base();
 800b912:	f006 f8ef 	bl	8011af4 <get_base>

					searchC();
 800b916:	f003 f917 	bl	800eb48 <searchC>
					HAL_Delay(2000);
 800b91a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b91e:	f7f5 fb7d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b922:	4b51      	ldr	r3, [pc, #324]	; (800ba68 <perfect_slalom+0x2a0>)
 800b924:	2200      	movs	r2, #0
 800b926:	701a      	strb	r2, [r3, #0]
 800b928:	4b4f      	ldr	r3, [pc, #316]	; (800ba68 <perfect_slalom+0x2a0>)
 800b92a:	781a      	ldrb	r2, [r3, #0]
 800b92c:	4b4d      	ldr	r3, [pc, #308]	; (800ba64 <perfect_slalom+0x29c>)
 800b92e:	701a      	strb	r2, [r3, #0]
					searchC();
 800b930:	f003 f90a 	bl	800eb48 <searchC>

					goal_x = 7;
 800b934:	4b4b      	ldr	r3, [pc, #300]	; (800ba64 <perfect_slalom+0x29c>)
 800b936:	2207      	movs	r2, #7
 800b938:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b93a:	4b4b      	ldr	r3, [pc, #300]	; (800ba68 <perfect_slalom+0x2a0>)
 800b93c:	2207      	movs	r2, #7
 800b93e:	701a      	strb	r2, [r3, #0]
					break;
 800b940:	e15e      	b.n	800bc00 <perfect_slalom+0x438>

				case 2:
					//----a二次走行スラローム+既知区間加速走行 speed1----
					printf("First Run. (Continuous)\n");
 800b942:	484a      	ldr	r0, [pc, #296]	; (800ba6c <perfect_slalom+0x2a4>)
 800b944:	f006 ff70 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800b948:	4a40      	ldr	r2, [pc, #256]	; (800ba4c <perfect_slalom+0x284>)
 800b94a:	8813      	ldrh	r3, [r2, #0]
 800b94c:	f043 0320 	orr.w	r3, r3, #32
 800b950:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b952:	4a3e      	ldr	r2, [pc, #248]	; (800ba4c <perfect_slalom+0x284>)
 800b954:	8813      	ldrh	r3, [r2, #0]
 800b956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b95a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b95c:	4a3b      	ldr	r2, [pc, #236]	; (800ba4c <perfect_slalom+0x284>)
 800b95e:	8813      	ldrh	r3, [r2, #0]
 800b960:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b964:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b966:	4b3a      	ldr	r3, [pc, #232]	; (800ba50 <perfect_slalom+0x288>)
 800b968:	2202      	movs	r2, #2
 800b96a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b96c:	4b39      	ldr	r3, [pc, #228]	; (800ba54 <perfect_slalom+0x28c>)
 800b96e:	2200      	movs	r2, #0
 800b970:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b972:	4b39      	ldr	r3, [pc, #228]	; (800ba58 <perfect_slalom+0x290>)
 800b974:	2202      	movs	r2, #2
 800b976:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b978:	4b38      	ldr	r3, [pc, #224]	; (800ba5c <perfect_slalom+0x294>)
 800b97a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b97e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b980:	4b37      	ldr	r3, [pc, #220]	; (800ba60 <perfect_slalom+0x298>)
 800b982:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b986:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b988:	4b36      	ldr	r3, [pc, #216]	; (800ba64 <perfect_slalom+0x29c>)
 800b98a:	2207      	movs	r2, #7
 800b98c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b98e:	4b36      	ldr	r3, [pc, #216]	; (800ba68 <perfect_slalom+0x2a0>)
 800b990:	2207      	movs	r2, #7
 800b992:	701a      	strb	r2, [r3, #0]

					get_base();
 800b994:	f006 f8ae 	bl	8011af4 <get_base>

					searchD();
 800b998:	f003 fbba 	bl	800f110 <searchD>
					HAL_Delay(2000);
 800b99c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b9a0:	f7f5 fb3c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b9a4:	4b30      	ldr	r3, [pc, #192]	; (800ba68 <perfect_slalom+0x2a0>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	701a      	strb	r2, [r3, #0]
 800b9aa:	4b2f      	ldr	r3, [pc, #188]	; (800ba68 <perfect_slalom+0x2a0>)
 800b9ac:	781a      	ldrb	r2, [r3, #0]
 800b9ae:	4b2d      	ldr	r3, [pc, #180]	; (800ba64 <perfect_slalom+0x29c>)
 800b9b0:	701a      	strb	r2, [r3, #0]
					searchD();
 800b9b2:	f003 fbad 	bl	800f110 <searchD>

					goal_x = 7;
 800b9b6:	4b2b      	ldr	r3, [pc, #172]	; (800ba64 <perfect_slalom+0x29c>)
 800b9b8:	2207      	movs	r2, #7
 800b9ba:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b9bc:	4b2a      	ldr	r3, [pc, #168]	; (800ba68 <perfect_slalom+0x2a0>)
 800b9be:	2207      	movs	r2, #7
 800b9c0:	701a      	strb	r2, [r3, #0]
					break;
 800b9c2:	e11d      	b.n	800bc00 <perfect_slalom+0x438>

				case 3:
					//----a二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 800b9c4:	482a      	ldr	r0, [pc, #168]	; (800ba70 <perfect_slalom+0x2a8>)
 800b9c6:	f006 ff2f 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800b9ca:	4a20      	ldr	r2, [pc, #128]	; (800ba4c <perfect_slalom+0x284>)
 800b9cc:	8813      	ldrh	r3, [r2, #0]
 800b9ce:	f043 0320 	orr.w	r3, r3, #32
 800b9d2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800b9d4:	4a1d      	ldr	r2, [pc, #116]	; (800ba4c <perfect_slalom+0x284>)
 800b9d6:	8813      	ldrh	r3, [r2, #0]
 800b9d8:	f36f 2349 	bfc	r3, #9, #1
 800b9dc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b9de:	4a1b      	ldr	r2, [pc, #108]	; (800ba4c <perfect_slalom+0x284>)
 800b9e0:	8813      	ldrh	r3, [r2, #0]
 800b9e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b9e6:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b9e8:	4b19      	ldr	r3, [pc, #100]	; (800ba50 <perfect_slalom+0x288>)
 800b9ea:	2203      	movs	r2, #3
 800b9ec:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b9ee:	4b19      	ldr	r3, [pc, #100]	; (800ba54 <perfect_slalom+0x28c>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b9f4:	4b18      	ldr	r3, [pc, #96]	; (800ba58 <perfect_slalom+0x290>)
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	701a      	strb	r2, [r3, #0]
					goal_x = 7;
 800b9fa:	4b1a      	ldr	r3, [pc, #104]	; (800ba64 <perfect_slalom+0x29c>)
 800b9fc:	2207      	movs	r2, #7
 800b9fe:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ba00:	4b19      	ldr	r3, [pc, #100]	; (800ba68 <perfect_slalom+0x2a0>)
 800ba02:	2207      	movs	r2, #7
 800ba04:	701a      	strb	r2, [r3, #0]

					get_base();
 800ba06:	f006 f875 	bl	8011af4 <get_base>

					searchC();
 800ba0a:	f003 f89d 	bl	800eb48 <searchC>
					HAL_Delay(2000);
 800ba0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ba12:	f7f5 fb03 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ba16:	4b14      	ldr	r3, [pc, #80]	; (800ba68 <perfect_slalom+0x2a0>)
 800ba18:	2200      	movs	r2, #0
 800ba1a:	701a      	strb	r2, [r3, #0]
 800ba1c:	4b12      	ldr	r3, [pc, #72]	; (800ba68 <perfect_slalom+0x2a0>)
 800ba1e:	781a      	ldrb	r2, [r3, #0]
 800ba20:	4b10      	ldr	r3, [pc, #64]	; (800ba64 <perfect_slalom+0x29c>)
 800ba22:	701a      	strb	r2, [r3, #0]
					searchC();
 800ba24:	f003 f890 	bl	800eb48 <searchC>
					goal_x = 7;
 800ba28:	4b0e      	ldr	r3, [pc, #56]	; (800ba64 <perfect_slalom+0x29c>)
 800ba2a:	2207      	movs	r2, #7
 800ba2c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ba2e:	4b0e      	ldr	r3, [pc, #56]	; (800ba68 <perfect_slalom+0x2a0>)
 800ba30:	2207      	movs	r2, #7
 800ba32:	701a      	strb	r2, [r3, #0]
					break;
 800ba34:	e0e4      	b.n	800bc00 <perfect_slalom+0x438>
 800ba36:	bf00      	nop
 800ba38:	08013cfc 	.word	0x08013cfc
 800ba3c:	20000aec 	.word	0x20000aec
 800ba40:	0801397c 	.word	0x0801397c
 800ba44:	40020000 	.word	0x40020000
 800ba48:	08013c3c 	.word	0x08013c3c
 800ba4c:	20000f68 	.word	0x20000f68
 800ba50:	20000456 	.word	0x20000456
 800ba54:	200015c8 	.word	0x200015c8
 800ba58:	20000bb1 	.word	0x20000bb1
 800ba5c:	20000454 	.word	0x20000454
 800ba60:	20000f7c 	.word	0x20000f7c
 800ba64:	20000bb0 	.word	0x20000bb0
 800ba68:	20000b4c 	.word	0x20000b4c
 800ba6c:	08013c48 	.word	0x08013c48
 800ba70:	08013c94 	.word	0x08013c94

				case 4:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800ba74:	4863      	ldr	r0, [pc, #396]	; (800bc04 <perfect_slalom+0x43c>)
 800ba76:	f006 fed7 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800ba7a:	4a63      	ldr	r2, [pc, #396]	; (800bc08 <perfect_slalom+0x440>)
 800ba7c:	8813      	ldrh	r3, [r2, #0]
 800ba7e:	f043 0320 	orr.w	r3, r3, #32
 800ba82:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ba84:	4a60      	ldr	r2, [pc, #384]	; (800bc08 <perfect_slalom+0x440>)
 800ba86:	8813      	ldrh	r3, [r2, #0]
 800ba88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ba8c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ba8e:	4a5e      	ldr	r2, [pc, #376]	; (800bc08 <perfect_slalom+0x440>)
 800ba90:	8813      	ldrh	r3, [r2, #0]
 800ba92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ba96:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800ba98:	4b5c      	ldr	r3, [pc, #368]	; (800bc0c <perfect_slalom+0x444>)
 800ba9a:	2203      	movs	r2, #3
 800ba9c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ba9e:	4b5c      	ldr	r3, [pc, #368]	; (800bc10 <perfect_slalom+0x448>)
 800baa0:	2200      	movs	r2, #0
 800baa2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800baa4:	4b5b      	ldr	r3, [pc, #364]	; (800bc14 <perfect_slalom+0x44c>)
 800baa6:	2202      	movs	r2, #2
 800baa8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800baaa:	4b5b      	ldr	r3, [pc, #364]	; (800bc18 <perfect_slalom+0x450>)
 800baac:	f241 3288 	movw	r2, #5000	; 0x1388
 800bab0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bab2:	4b5a      	ldr	r3, [pc, #360]	; (800bc1c <perfect_slalom+0x454>)
 800bab4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bab8:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800baba:	4b59      	ldr	r3, [pc, #356]	; (800bc20 <perfect_slalom+0x458>)
 800babc:	2207      	movs	r2, #7
 800babe:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bac0:	4b58      	ldr	r3, [pc, #352]	; (800bc24 <perfect_slalom+0x45c>)
 800bac2:	2207      	movs	r2, #7
 800bac4:	701a      	strb	r2, [r3, #0]

					get_base();
 800bac6:	f006 f815 	bl	8011af4 <get_base>

					searchD();
 800baca:	f003 fb21 	bl	800f110 <searchD>
					HAL_Delay(2000);
 800bace:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bad2:	f7f5 faa3 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bad6:	4b53      	ldr	r3, [pc, #332]	; (800bc24 <perfect_slalom+0x45c>)
 800bad8:	2200      	movs	r2, #0
 800bada:	701a      	strb	r2, [r3, #0]
 800badc:	4b51      	ldr	r3, [pc, #324]	; (800bc24 <perfect_slalom+0x45c>)
 800bade:	781a      	ldrb	r2, [r3, #0]
 800bae0:	4b4f      	ldr	r3, [pc, #316]	; (800bc20 <perfect_slalom+0x458>)
 800bae2:	701a      	strb	r2, [r3, #0]
					searchD();
 800bae4:	f003 fb14 	bl	800f110 <searchD>

					goal_x = 7;
 800bae8:	4b4d      	ldr	r3, [pc, #308]	; (800bc20 <perfect_slalom+0x458>)
 800baea:	2207      	movs	r2, #7
 800baec:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800baee:	4b4d      	ldr	r3, [pc, #308]	; (800bc24 <perfect_slalom+0x45c>)
 800baf0:	2207      	movs	r2, #7
 800baf2:	701a      	strb	r2, [r3, #0]
					break;
 800baf4:	e084      	b.n	800bc00 <perfect_slalom+0x438>

				case 5:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800baf6:	4843      	ldr	r0, [pc, #268]	; (800bc04 <perfect_slalom+0x43c>)
 800baf8:	f006 fe96 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800bafc:	4a42      	ldr	r2, [pc, #264]	; (800bc08 <perfect_slalom+0x440>)
 800bafe:	8813      	ldrh	r3, [r2, #0]
 800bb00:	f043 0320 	orr.w	r3, r3, #32
 800bb04:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bb06:	4a40      	ldr	r2, [pc, #256]	; (800bc08 <perfect_slalom+0x440>)
 800bb08:	8813      	ldrh	r3, [r2, #0]
 800bb0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb0e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bb10:	4a3d      	ldr	r2, [pc, #244]	; (800bc08 <perfect_slalom+0x440>)
 800bb12:	8813      	ldrh	r3, [r2, #0]
 800bb14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb18:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800bb1a:	4b3c      	ldr	r3, [pc, #240]	; (800bc0c <perfect_slalom+0x444>)
 800bb1c:	2203      	movs	r2, #3
 800bb1e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bb20:	4b3b      	ldr	r3, [pc, #236]	; (800bc10 <perfect_slalom+0x448>)
 800bb22:	2200      	movs	r2, #0
 800bb24:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bb26:	4b3b      	ldr	r3, [pc, #236]	; (800bc14 <perfect_slalom+0x44c>)
 800bb28:	2202      	movs	r2, #2
 800bb2a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bb2c:	4b3a      	ldr	r3, [pc, #232]	; (800bc18 <perfect_slalom+0x450>)
 800bb2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb32:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800bb34:	4b39      	ldr	r3, [pc, #228]	; (800bc1c <perfect_slalom+0x454>)
 800bb36:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bb3a:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800bb3c:	4b38      	ldr	r3, [pc, #224]	; (800bc20 <perfect_slalom+0x458>)
 800bb3e:	2207      	movs	r2, #7
 800bb40:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bb42:	4b38      	ldr	r3, [pc, #224]	; (800bc24 <perfect_slalom+0x45c>)
 800bb44:	2207      	movs	r2, #7
 800bb46:	701a      	strb	r2, [r3, #0]

					get_base();
 800bb48:	f005 ffd4 	bl	8011af4 <get_base>

					searchD();
 800bb4c:	f003 fae0 	bl	800f110 <searchD>
					HAL_Delay(2000);
 800bb50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bb54:	f7f5 fa62 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bb58:	4b32      	ldr	r3, [pc, #200]	; (800bc24 <perfect_slalom+0x45c>)
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	701a      	strb	r2, [r3, #0]
 800bb5e:	4b31      	ldr	r3, [pc, #196]	; (800bc24 <perfect_slalom+0x45c>)
 800bb60:	781a      	ldrb	r2, [r3, #0]
 800bb62:	4b2f      	ldr	r3, [pc, #188]	; (800bc20 <perfect_slalom+0x458>)
 800bb64:	701a      	strb	r2, [r3, #0]
					searchD();
 800bb66:	f003 fad3 	bl	800f110 <searchD>

					goal_x = 7;
 800bb6a:	4b2d      	ldr	r3, [pc, #180]	; (800bc20 <perfect_slalom+0x458>)
 800bb6c:	2207      	movs	r2, #7
 800bb6e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bb70:	4b2c      	ldr	r3, [pc, #176]	; (800bc24 <perfect_slalom+0x45c>)
 800bb72:	2207      	movs	r2, #7
 800bb74:	701a      	strb	r2, [r3, #0]
					break;
 800bb76:	e043      	b.n	800bc00 <perfect_slalom+0x438>

				case 6:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800bb78:	4822      	ldr	r0, [pc, #136]	; (800bc04 <perfect_slalom+0x43c>)
 800bb7a:	f006 fe55 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800bb7e:	4a22      	ldr	r2, [pc, #136]	; (800bc08 <perfect_slalom+0x440>)
 800bb80:	8813      	ldrh	r3, [r2, #0]
 800bb82:	f043 0320 	orr.w	r3, r3, #32
 800bb86:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bb88:	4a1f      	ldr	r2, [pc, #124]	; (800bc08 <perfect_slalom+0x440>)
 800bb8a:	8813      	ldrh	r3, [r2, #0]
 800bb8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb90:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bb92:	4a1d      	ldr	r2, [pc, #116]	; (800bc08 <perfect_slalom+0x440>)
 800bb94:	8813      	ldrh	r3, [r2, #0]
 800bb96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb9a:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800bb9c:	4b1b      	ldr	r3, [pc, #108]	; (800bc0c <perfect_slalom+0x444>)
 800bb9e:	2203      	movs	r2, #3
 800bba0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bba2:	4b1b      	ldr	r3, [pc, #108]	; (800bc10 <perfect_slalom+0x448>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bba8:	4b1a      	ldr	r3, [pc, #104]	; (800bc14 <perfect_slalom+0x44c>)
 800bbaa:	2202      	movs	r2, #2
 800bbac:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800bbae:	4b1a      	ldr	r3, [pc, #104]	; (800bc18 <perfect_slalom+0x450>)
 800bbb0:	f242 7210 	movw	r2, #10000	; 0x2710
 800bbb4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800bbb6:	4b19      	ldr	r3, [pc, #100]	; (800bc1c <perfect_slalom+0x454>)
 800bbb8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800bbbc:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800bbbe:	4b18      	ldr	r3, [pc, #96]	; (800bc20 <perfect_slalom+0x458>)
 800bbc0:	2207      	movs	r2, #7
 800bbc2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bbc4:	4b17      	ldr	r3, [pc, #92]	; (800bc24 <perfect_slalom+0x45c>)
 800bbc6:	2207      	movs	r2, #7
 800bbc8:	701a      	strb	r2, [r3, #0]

					get_base();
 800bbca:	f005 ff93 	bl	8011af4 <get_base>

					searchD();
 800bbce:	f003 fa9f 	bl	800f110 <searchD>
					HAL_Delay(2000);
 800bbd2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bbd6:	f7f5 fa21 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bbda:	4b12      	ldr	r3, [pc, #72]	; (800bc24 <perfect_slalom+0x45c>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	701a      	strb	r2, [r3, #0]
 800bbe0:	4b10      	ldr	r3, [pc, #64]	; (800bc24 <perfect_slalom+0x45c>)
 800bbe2:	781a      	ldrb	r2, [r3, #0]
 800bbe4:	4b0e      	ldr	r3, [pc, #56]	; (800bc20 <perfect_slalom+0x458>)
 800bbe6:	701a      	strb	r2, [r3, #0]
					searchD();
 800bbe8:	f003 fa92 	bl	800f110 <searchD>

					goal_x = 7;
 800bbec:	4b0c      	ldr	r3, [pc, #48]	; (800bc20 <perfect_slalom+0x458>)
 800bbee:	2207      	movs	r2, #7
 800bbf0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bbf2:	4b0c      	ldr	r3, [pc, #48]	; (800bc24 <perfect_slalom+0x45c>)
 800bbf4:	2207      	movs	r2, #7
 800bbf6:	701a      	strb	r2, [r3, #0]
					break;
 800bbf8:	e002      	b.n	800bc00 <perfect_slalom+0x438>

				case 7:
					perfect_pass();
 800bbfa:	f000 f815 	bl	800bc28 <perfect_pass>
					break;
 800bbfe:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800bc00:	e5eb      	b.n	800b7da <perfect_slalom+0x12>
 800bc02:	bf00      	nop
 800bc04:	08013c94 	.word	0x08013c94
 800bc08:	20000f68 	.word	0x20000f68
 800bc0c:	20000456 	.word	0x20000456
 800bc10:	200015c8 	.word	0x200015c8
 800bc14:	20000bb1 	.word	0x20000bb1
 800bc18:	20000454 	.word	0x20000454
 800bc1c:	20000f7c 	.word	0x20000f7c
 800bc20:	20000bb0 	.word	0x20000bb0
 800bc24:	20000b4c 	.word	0x20000b4c

0800bc28 <perfect_pass>:
//perfect_pass
// a本番用pass圧縮走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_pass(void){
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0

	int mode = 0;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	607b      	str	r3, [r7, #4]
	printf("Perfect Pass Press, Mode : %d\n", mode);
 800bc32:	6879      	ldr	r1, [r7, #4]
 800bc34:	489f      	ldr	r0, [pc, #636]	; (800beb4 <perfect_pass+0x28c>)
 800bc36:	f006 fd83 	bl	8012740 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	b2d8      	uxtb	r0, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	f003 0302 	and.w	r3, r3, #2
 800bc4c:	b2d9      	uxtb	r1, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	f003 0304 	and.w	r3, r3, #4
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	461a      	mov	r2, r3
 800bc5a:	f005 ffa3 	bl	8011ba4 <led_write>
		  if(dist_r >= 20){
 800bc5e:	4b96      	ldr	r3, [pc, #600]	; (800beb8 <perfect_pass+0x290>)
 800bc60:	edd3 7a00 	vldr	s15, [r3]
 800bc64:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800bc68:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc70:	db0f      	blt.n	800bc92 <perfect_pass+0x6a>
			  mode++;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	3301      	adds	r3, #1
 800bc76:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800bc78:	4b8f      	ldr	r3, [pc, #572]	; (800beb8 <perfect_pass+0x290>)
 800bc7a:	f04f 0200 	mov.w	r2, #0
 800bc7e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2b07      	cmp	r3, #7
 800bc84:	dd01      	ble.n	800bc8a <perfect_pass+0x62>
				  mode = 0;
 800bc86:	2300      	movs	r3, #0
 800bc88:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800bc8a:	6879      	ldr	r1, [r7, #4]
 800bc8c:	488b      	ldr	r0, [pc, #556]	; (800bebc <perfect_pass+0x294>)
 800bc8e:	f006 fd57 	bl	8012740 <iprintf>
		  }
		  if(dist_r <= -20){
 800bc92:	4b89      	ldr	r3, [pc, #548]	; (800beb8 <perfect_pass+0x290>)
 800bc94:	edd3 7a00 	vldr	s15, [r3]
 800bc98:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800bc9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bca4:	d80f      	bhi.n	800bcc6 <perfect_pass+0x9e>
			  mode--;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	3b01      	subs	r3, #1
 800bcaa:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800bcac:	4b82      	ldr	r3, [pc, #520]	; (800beb8 <perfect_pass+0x290>)
 800bcae:	f04f 0200 	mov.w	r2, #0
 800bcb2:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	da01      	bge.n	800bcbe <perfect_pass+0x96>
				  mode = 7;
 800bcba:	2307      	movs	r3, #7
 800bcbc:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800bcbe:	6879      	ldr	r1, [r7, #4]
 800bcc0:	487e      	ldr	r0, [pc, #504]	; (800bebc <perfect_pass+0x294>)
 800bcc2:	f006 fd3d 	bl	8012740 <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800bcc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bcca:	487d      	ldr	r0, [pc, #500]	; (800bec0 <perfect_pass+0x298>)
 800bccc:	f7f6 fb02 	bl	80022d4 <HAL_GPIO_ReadPin>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d1b1      	bne.n	800bc3a <perfect_pass+0x12>
			  HAL_Delay(50);
 800bcd6:	2032      	movs	r0, #50	; 0x32
 800bcd8:	f7f5 f9a0 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800bcdc:	bf00      	nop
 800bcde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bce2:	4877      	ldr	r0, [pc, #476]	; (800bec0 <perfect_pass+0x298>)
 800bce4:	f7f6 faf6 	bl	80022d4 <HAL_GPIO_ReadPin>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d0f7      	beq.n	800bcde <perfect_pass+0xb6>
			  drive_ready();
 800bcee:	f7f8 ffc7 	bl	8004c80 <drive_ready>

			  switch(mode){
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2b07      	cmp	r3, #7
 800bcf6:	d8a0      	bhi.n	800bc3a <perfect_pass+0x12>
 800bcf8:	a201      	add	r2, pc, #4	; (adr r2, 800bd00 <perfect_pass+0xd8>)
 800bcfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcfe:	bf00      	nop
 800bd00:	0800bc3b 	.word	0x0800bc3b
 800bd04:	0800bd21 	.word	0x0800bd21
 800bd08:	0800bda5 	.word	0x0800bda5
 800bd0c:	0800be2d 	.word	0x0800be2d
 800bd10:	0800bef5 	.word	0x0800bef5
 800bd14:	0800bf7d 	.word	0x0800bf7d
 800bd18:	0800c031 	.word	0x0800c031
 800bd1c:	0800c31d 	.word	0x0800c31d
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800bd20:	4868      	ldr	r0, [pc, #416]	; (800bec4 <perfect_pass+0x29c>)
 800bd22:	f006 fd81 	bl	8012828 <puts>
					MF.FLAG.SCND = 0;
 800bd26:	4a68      	ldr	r2, [pc, #416]	; (800bec8 <perfect_pass+0x2a0>)
 800bd28:	8813      	ldrh	r3, [r2, #0]
 800bd2a:	f36f 1345 	bfc	r3, #5, #1
 800bd2e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bd30:	4a65      	ldr	r2, [pc, #404]	; (800bec8 <perfect_pass+0x2a0>)
 800bd32:	8813      	ldrh	r3, [r2, #0]
 800bd34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bd38:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800bd3a:	4a63      	ldr	r2, [pc, #396]	; (800bec8 <perfect_pass+0x2a0>)
 800bd3c:	8813      	ldrh	r3, [r2, #0]
 800bd3e:	f36f 238a 	bfc	r3, #10, #1
 800bd42:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800bd44:	4b61      	ldr	r3, [pc, #388]	; (800becc <perfect_pass+0x2a4>)
 800bd46:	2202      	movs	r2, #2
 800bd48:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bd4a:	4b61      	ldr	r3, [pc, #388]	; (800bed0 <perfect_pass+0x2a8>)
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bd50:	4b60      	ldr	r3, [pc, #384]	; (800bed4 <perfect_pass+0x2ac>)
 800bd52:	2202      	movs	r2, #2
 800bd54:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800bd56:	4b60      	ldr	r3, [pc, #384]	; (800bed8 <perfect_pass+0x2b0>)
 800bd58:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800bd5c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800bd5e:	4b5f      	ldr	r3, [pc, #380]	; (800bedc <perfect_pass+0x2b4>)
 800bd60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bd64:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800bd66:	4b5e      	ldr	r3, [pc, #376]	; (800bee0 <perfect_pass+0x2b8>)
 800bd68:	2207      	movs	r2, #7
 800bd6a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bd6c:	4b5d      	ldr	r3, [pc, #372]	; (800bee4 <perfect_pass+0x2bc>)
 800bd6e:	2207      	movs	r2, #7
 800bd70:	701a      	strb	r2, [r3, #0]

					get_base();
 800bd72:	f005 febf 	bl	8011af4 <get_base>

					searchC();
 800bd76:	f002 fee7 	bl	800eb48 <searchC>
					HAL_Delay(2000);
 800bd7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bd7e:	f7f5 f94d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bd82:	4b58      	ldr	r3, [pc, #352]	; (800bee4 <perfect_pass+0x2bc>)
 800bd84:	2200      	movs	r2, #0
 800bd86:	701a      	strb	r2, [r3, #0]
 800bd88:	4b56      	ldr	r3, [pc, #344]	; (800bee4 <perfect_pass+0x2bc>)
 800bd8a:	781a      	ldrb	r2, [r3, #0]
 800bd8c:	4b54      	ldr	r3, [pc, #336]	; (800bee0 <perfect_pass+0x2b8>)
 800bd8e:	701a      	strb	r2, [r3, #0]
					searchC();
 800bd90:	f002 feda 	bl	800eb48 <searchC>

					goal_x = 7;
 800bd94:	4b52      	ldr	r3, [pc, #328]	; (800bee0 <perfect_pass+0x2b8>)
 800bd96:	2207      	movs	r2, #7
 800bd98:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bd9a:	4b52      	ldr	r3, [pc, #328]	; (800bee4 <perfect_pass+0x2bc>)
 800bd9c:	2207      	movs	r2, #7
 800bd9e:	701a      	strb	r2, [r3, #0]
					break;
 800bda0:	f000 bc15 	b.w	800c5ce <perfect_pass+0x9a6>

				case 2:
					//----a直線と大回り圧縮----
					printf("pass press 3.\n");
 800bda4:	4850      	ldr	r0, [pc, #320]	; (800bee8 <perfect_pass+0x2c0>)
 800bda6:	f006 fd3f 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800bdaa:	4a47      	ldr	r2, [pc, #284]	; (800bec8 <perfect_pass+0x2a0>)
 800bdac:	8813      	ldrh	r3, [r2, #0]
 800bdae:	f043 0320 	orr.w	r3, r3, #32
 800bdb2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bdb4:	4a44      	ldr	r2, [pc, #272]	; (800bec8 <perfect_pass+0x2a0>)
 800bdb6:	8813      	ldrh	r3, [r2, #0]
 800bdb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bdbc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bdbe:	4a42      	ldr	r2, [pc, #264]	; (800bec8 <perfect_pass+0x2a0>)
 800bdc0:	8813      	ldrh	r3, [r2, #0]
 800bdc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bdc6:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800bdc8:	4b40      	ldr	r3, [pc, #256]	; (800becc <perfect_pass+0x2a4>)
 800bdca:	2202      	movs	r2, #2
 800bdcc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bdce:	4b40      	ldr	r3, [pc, #256]	; (800bed0 <perfect_pass+0x2a8>)
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bdd4:	4b3f      	ldr	r3, [pc, #252]	; (800bed4 <perfect_pass+0x2ac>)
 800bdd6:	2202      	movs	r2, #2
 800bdd8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bdda:	4b3f      	ldr	r3, [pc, #252]	; (800bed8 <perfect_pass+0x2b0>)
 800bddc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bde0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800bde2:	4b3e      	ldr	r3, [pc, #248]	; (800bedc <perfect_pass+0x2b4>)
 800bde4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bde8:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800bdea:	4b40      	ldr	r3, [pc, #256]	; (800beec <perfect_pass+0x2c4>)
 800bdec:	2203      	movs	r2, #3
 800bdee:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800bdf0:	4b3b      	ldr	r3, [pc, #236]	; (800bee0 <perfect_pass+0x2b8>)
 800bdf2:	2207      	movs	r2, #7
 800bdf4:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bdf6:	4b3b      	ldr	r3, [pc, #236]	; (800bee4 <perfect_pass+0x2bc>)
 800bdf8:	2207      	movs	r2, #7
 800bdfa:	701a      	strb	r2, [r3, #0]

					get_base();
 800bdfc:	f005 fe7a 	bl	8011af4 <get_base>

					searchF3();
 800be00:	f003 fb1c 	bl	800f43c <searchF3>
					HAL_Delay(2000);
 800be04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800be08:	f7f5 f908 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800be0c:	4b35      	ldr	r3, [pc, #212]	; (800bee4 <perfect_pass+0x2bc>)
 800be0e:	2200      	movs	r2, #0
 800be10:	701a      	strb	r2, [r3, #0]
 800be12:	4b34      	ldr	r3, [pc, #208]	; (800bee4 <perfect_pass+0x2bc>)
 800be14:	781a      	ldrb	r2, [r3, #0]
 800be16:	4b32      	ldr	r3, [pc, #200]	; (800bee0 <perfect_pass+0x2b8>)
 800be18:	701a      	strb	r2, [r3, #0]
					searchF3();
 800be1a:	f003 fb0f 	bl	800f43c <searchF3>

					goal_x = 7;
 800be1e:	4b30      	ldr	r3, [pc, #192]	; (800bee0 <perfect_pass+0x2b8>)
 800be20:	2207      	movs	r2, #7
 800be22:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800be24:	4b2f      	ldr	r3, [pc, #188]	; (800bee4 <perfect_pass+0x2bc>)
 800be26:	2207      	movs	r2, #7
 800be28:	701a      	strb	r2, [r3, #0]
					break;
 800be2a:	e3d0      	b.n	800c5ce <perfect_pass+0x9a6>

				case 3:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800be2c:	4830      	ldr	r0, [pc, #192]	; (800bef0 <perfect_pass+0x2c8>)
 800be2e:	f006 fcfb 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800be32:	4a25      	ldr	r2, [pc, #148]	; (800bec8 <perfect_pass+0x2a0>)
 800be34:	8813      	ldrh	r3, [r2, #0]
 800be36:	f043 0320 	orr.w	r3, r3, #32
 800be3a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800be3c:	4a22      	ldr	r2, [pc, #136]	; (800bec8 <perfect_pass+0x2a0>)
 800be3e:	8813      	ldrh	r3, [r2, #0]
 800be40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800be44:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800be46:	4a20      	ldr	r2, [pc, #128]	; (800bec8 <perfect_pass+0x2a0>)
 800be48:	8813      	ldrh	r3, [r2, #0]
 800be4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800be4e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800be50:	4b1e      	ldr	r3, [pc, #120]	; (800becc <perfect_pass+0x2a4>)
 800be52:	2202      	movs	r2, #2
 800be54:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800be56:	4b1e      	ldr	r3, [pc, #120]	; (800bed0 <perfect_pass+0x2a8>)
 800be58:	2200      	movs	r2, #0
 800be5a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800be5c:	4b1d      	ldr	r3, [pc, #116]	; (800bed4 <perfect_pass+0x2ac>)
 800be5e:	2202      	movs	r2, #2
 800be60:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800be62:	4b1d      	ldr	r3, [pc, #116]	; (800bed8 <perfect_pass+0x2b0>)
 800be64:	f241 3288 	movw	r2, #5000	; 0x1388
 800be68:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800be6a:	4b1c      	ldr	r3, [pc, #112]	; (800bedc <perfect_pass+0x2b4>)
 800be6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be70:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800be72:	4b1e      	ldr	r3, [pc, #120]	; (800beec <perfect_pass+0x2c4>)
 800be74:	2204      	movs	r2, #4
 800be76:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800be78:	4b19      	ldr	r3, [pc, #100]	; (800bee0 <perfect_pass+0x2b8>)
 800be7a:	2207      	movs	r2, #7
 800be7c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800be7e:	4b19      	ldr	r3, [pc, #100]	; (800bee4 <perfect_pass+0x2bc>)
 800be80:	2207      	movs	r2, #7
 800be82:	701a      	strb	r2, [r3, #0]

					get_base();
 800be84:	f005 fe36 	bl	8011af4 <get_base>

					searchF4();
 800be88:	f003 fbb4 	bl	800f5f4 <searchF4>
					HAL_Delay(2000);
 800be8c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800be90:	f7f5 f8c4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800be94:	4b13      	ldr	r3, [pc, #76]	; (800bee4 <perfect_pass+0x2bc>)
 800be96:	2200      	movs	r2, #0
 800be98:	701a      	strb	r2, [r3, #0]
 800be9a:	4b12      	ldr	r3, [pc, #72]	; (800bee4 <perfect_pass+0x2bc>)
 800be9c:	781a      	ldrb	r2, [r3, #0]
 800be9e:	4b10      	ldr	r3, [pc, #64]	; (800bee0 <perfect_pass+0x2b8>)
 800bea0:	701a      	strb	r2, [r3, #0]
					searchF4();
 800bea2:	f003 fba7 	bl	800f5f4 <searchF4>

					goal_x = 7;
 800bea6:	4b0e      	ldr	r3, [pc, #56]	; (800bee0 <perfect_pass+0x2b8>)
 800bea8:	2207      	movs	r2, #7
 800beaa:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800beac:	4b0d      	ldr	r3, [pc, #52]	; (800bee4 <perfect_pass+0x2bc>)
 800beae:	2207      	movs	r2, #7
 800beb0:	701a      	strb	r2, [r3, #0]
					break;
 800beb2:	e38c      	b.n	800c5ce <perfect_pass+0x9a6>
 800beb4:	08013d18 	.word	0x08013d18
 800beb8:	20000aec 	.word	0x20000aec
 800bebc:	0801397c 	.word	0x0801397c
 800bec0:	40020000 	.word	0x40020000
 800bec4:	08013c3c 	.word	0x08013c3c
 800bec8:	20000f68 	.word	0x20000f68
 800becc:	20000456 	.word	0x20000456
 800bed0:	200015c8 	.word	0x200015c8
 800bed4:	20000bb1 	.word	0x20000bb1
 800bed8:	20000454 	.word	0x20000454
 800bedc:	20000f7c 	.word	0x20000f7c
 800bee0:	20000bb0 	.word	0x20000bb0
 800bee4:	20000b4c 	.word	0x20000b4c
 800bee8:	08013d38 	.word	0x08013d38
 800beec:	20000457 	.word	0x20000457
 800bef0:	08013b80 	.word	0x08013b80

				case 4:
					//----a直線と大回り圧縮 High Speed----
					printf("pass press 3-2.\n");
 800bef4:	4843      	ldr	r0, [pc, #268]	; (800c004 <perfect_pass+0x3dc>)
 800bef6:	f006 fc97 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800befa:	4a43      	ldr	r2, [pc, #268]	; (800c008 <perfect_pass+0x3e0>)
 800befc:	8813      	ldrh	r3, [r2, #0]
 800befe:	f043 0320 	orr.w	r3, r3, #32
 800bf02:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bf04:	4a40      	ldr	r2, [pc, #256]	; (800c008 <perfect_pass+0x3e0>)
 800bf06:	8813      	ldrh	r3, [r2, #0]
 800bf08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bf0c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bf0e:	4a3e      	ldr	r2, [pc, #248]	; (800c008 <perfect_pass+0x3e0>)
 800bf10:	8813      	ldrh	r3, [r2, #0]
 800bf12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bf16:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800bf18:	4b3c      	ldr	r3, [pc, #240]	; (800c00c <perfect_pass+0x3e4>)
 800bf1a:	2203      	movs	r2, #3
 800bf1c:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bf1e:	4b3c      	ldr	r3, [pc, #240]	; (800c010 <perfect_pass+0x3e8>)
 800bf20:	2202      	movs	r2, #2
 800bf22:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bf24:	4b3b      	ldr	r3, [pc, #236]	; (800c014 <perfect_pass+0x3ec>)
 800bf26:	2200      	movs	r2, #0
 800bf28:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bf2a:	4b3b      	ldr	r3, [pc, #236]	; (800c018 <perfect_pass+0x3f0>)
 800bf2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf30:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bf32:	4b3a      	ldr	r3, [pc, #232]	; (800c01c <perfect_pass+0x3f4>)
 800bf34:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bf38:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800bf3a:	4b39      	ldr	r3, [pc, #228]	; (800c020 <perfect_pass+0x3f8>)
 800bf3c:	2203      	movs	r2, #3
 800bf3e:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800bf40:	4b38      	ldr	r3, [pc, #224]	; (800c024 <perfect_pass+0x3fc>)
 800bf42:	2207      	movs	r2, #7
 800bf44:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bf46:	4b38      	ldr	r3, [pc, #224]	; (800c028 <perfect_pass+0x400>)
 800bf48:	2207      	movs	r2, #7
 800bf4a:	701a      	strb	r2, [r3, #0]

					get_base();
 800bf4c:	f005 fdd2 	bl	8011af4 <get_base>

					searchF3();
 800bf50:	f003 fa74 	bl	800f43c <searchF3>
					HAL_Delay(2000);
 800bf54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bf58:	f7f5 f860 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bf5c:	4b32      	ldr	r3, [pc, #200]	; (800c028 <perfect_pass+0x400>)
 800bf5e:	2200      	movs	r2, #0
 800bf60:	701a      	strb	r2, [r3, #0]
 800bf62:	4b31      	ldr	r3, [pc, #196]	; (800c028 <perfect_pass+0x400>)
 800bf64:	781a      	ldrb	r2, [r3, #0]
 800bf66:	4b2f      	ldr	r3, [pc, #188]	; (800c024 <perfect_pass+0x3fc>)
 800bf68:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bf6a:	f003 fa67 	bl	800f43c <searchF3>

					goal_x = 7;
 800bf6e:	4b2d      	ldr	r3, [pc, #180]	; (800c024 <perfect_pass+0x3fc>)
 800bf70:	2207      	movs	r2, #7
 800bf72:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bf74:	4b2c      	ldr	r3, [pc, #176]	; (800c028 <perfect_pass+0x400>)
 800bf76:	2207      	movs	r2, #7
 800bf78:	701a      	strb	r2, [r3, #0]
					break;
 800bf7a:	e328      	b.n	800c5ce <perfect_pass+0x9a6>

				case 5:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 800bf7c:	482b      	ldr	r0, [pc, #172]	; (800c02c <perfect_pass+0x404>)
 800bf7e:	f006 fc53 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800bf82:	4a21      	ldr	r2, [pc, #132]	; (800c008 <perfect_pass+0x3e0>)
 800bf84:	8813      	ldrh	r3, [r2, #0]
 800bf86:	f043 0320 	orr.w	r3, r3, #32
 800bf8a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bf8c:	4a1e      	ldr	r2, [pc, #120]	; (800c008 <perfect_pass+0x3e0>)
 800bf8e:	8813      	ldrh	r3, [r2, #0]
 800bf90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bf94:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bf96:	4a1c      	ldr	r2, [pc, #112]	; (800c008 <perfect_pass+0x3e0>)
 800bf98:	8813      	ldrh	r3, [r2, #0]
 800bf9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bf9e:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800bfa0:	4b1a      	ldr	r3, [pc, #104]	; (800c00c <perfect_pass+0x3e4>)
 800bfa2:	2203      	movs	r2, #3
 800bfa4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bfa6:	4b1b      	ldr	r3, [pc, #108]	; (800c014 <perfect_pass+0x3ec>)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800bfac:	4b18      	ldr	r3, [pc, #96]	; (800c010 <perfect_pass+0x3e8>)
 800bfae:	2202      	movs	r2, #2
 800bfb0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bfb2:	4b19      	ldr	r3, [pc, #100]	; (800c018 <perfect_pass+0x3f0>)
 800bfb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfb8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bfba:	4b18      	ldr	r3, [pc, #96]	; (800c01c <perfect_pass+0x3f4>)
 800bfbc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bfc0:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800bfc2:	4b17      	ldr	r3, [pc, #92]	; (800c020 <perfect_pass+0x3f8>)
 800bfc4:	2204      	movs	r2, #4
 800bfc6:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800bfc8:	4b16      	ldr	r3, [pc, #88]	; (800c024 <perfect_pass+0x3fc>)
 800bfca:	2207      	movs	r2, #7
 800bfcc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bfce:	4b16      	ldr	r3, [pc, #88]	; (800c028 <perfect_pass+0x400>)
 800bfd0:	2207      	movs	r2, #7
 800bfd2:	701a      	strb	r2, [r3, #0]

					get_base();
 800bfd4:	f005 fd8e 	bl	8011af4 <get_base>

					searchF4();
 800bfd8:	f003 fb0c 	bl	800f5f4 <searchF4>
					HAL_Delay(2000);
 800bfdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bfe0:	f7f5 f81c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bfe4:	4b10      	ldr	r3, [pc, #64]	; (800c028 <perfect_pass+0x400>)
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	701a      	strb	r2, [r3, #0]
 800bfea:	4b0f      	ldr	r3, [pc, #60]	; (800c028 <perfect_pass+0x400>)
 800bfec:	781a      	ldrb	r2, [r3, #0]
 800bfee:	4b0d      	ldr	r3, [pc, #52]	; (800c024 <perfect_pass+0x3fc>)
 800bff0:	701a      	strb	r2, [r3, #0]
					searchF4();
 800bff2:	f003 faff 	bl	800f5f4 <searchF4>

					goal_x = 7;
 800bff6:	4b0b      	ldr	r3, [pc, #44]	; (800c024 <perfect_pass+0x3fc>)
 800bff8:	2207      	movs	r2, #7
 800bffa:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bffc:	4b0a      	ldr	r3, [pc, #40]	; (800c028 <perfect_pass+0x400>)
 800bffe:	2207      	movs	r2, #7
 800c000:	701a      	strb	r2, [r3, #0]
					break;
 800c002:	e2e4      	b.n	800c5ce <perfect_pass+0x9a6>
 800c004:	08013b70 	.word	0x08013b70
 800c008:	20000f68 	.word	0x20000f68
 800c00c:	20000456 	.word	0x20000456
 800c010:	20000bb1 	.word	0x20000bb1
 800c014:	200015c8 	.word	0x200015c8
 800c018:	20000454 	.word	0x20000454
 800c01c:	20000f7c 	.word	0x20000f7c
 800c020:	20000457 	.word	0x20000457
 800c024:	20000bb0 	.word	0x20000bb0
 800c028:	20000b4c 	.word	0x20000b4c
 800c02c:	08013b80 	.word	0x08013b80

				case 6:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800c030:	48ac      	ldr	r0, [pc, #688]	; (800c2e4 <perfect_pass+0x6bc>)
 800c032:	f006 fbf9 	bl	8012828 <puts>
					MF.FLAG.SCND = 0;
 800c036:	4aac      	ldr	r2, [pc, #688]	; (800c2e8 <perfect_pass+0x6c0>)
 800c038:	8813      	ldrh	r3, [r2, #0]
 800c03a:	f36f 1345 	bfc	r3, #5, #1
 800c03e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c040:	4aa9      	ldr	r2, [pc, #676]	; (800c2e8 <perfect_pass+0x6c0>)
 800c042:	8813      	ldrh	r3, [r2, #0]
 800c044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c048:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800c04a:	4aa7      	ldr	r2, [pc, #668]	; (800c2e8 <perfect_pass+0x6c0>)
 800c04c:	8813      	ldrh	r3, [r2, #0]
 800c04e:	f36f 238a 	bfc	r3, #10, #1
 800c052:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800c054:	4ba5      	ldr	r3, [pc, #660]	; (800c2ec <perfect_pass+0x6c4>)
 800c056:	2202      	movs	r2, #2
 800c058:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c05a:	4ba5      	ldr	r3, [pc, #660]	; (800c2f0 <perfect_pass+0x6c8>)
 800c05c:	2200      	movs	r2, #0
 800c05e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c060:	4ba4      	ldr	r3, [pc, #656]	; (800c2f4 <perfect_pass+0x6cc>)
 800c062:	2202      	movs	r2, #2
 800c064:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800c066:	4ba4      	ldr	r3, [pc, #656]	; (800c2f8 <perfect_pass+0x6d0>)
 800c068:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800c06c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800c06e:	4ba3      	ldr	r3, [pc, #652]	; (800c2fc <perfect_pass+0x6d4>)
 800c070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c074:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800c076:	4ba2      	ldr	r3, [pc, #648]	; (800c300 <perfect_pass+0x6d8>)
 800c078:	2207      	movs	r2, #7
 800c07a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c07c:	4ba1      	ldr	r3, [pc, #644]	; (800c304 <perfect_pass+0x6dc>)
 800c07e:	2207      	movs	r2, #7
 800c080:	701a      	strb	r2, [r3, #0]

					get_base();
 800c082:	f005 fd37 	bl	8011af4 <get_base>

					searchC();
 800c086:	f002 fd5f 	bl	800eb48 <searchC>
					HAL_Delay(2000);
 800c08a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c08e:	f7f4 ffc5 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c092:	4b9c      	ldr	r3, [pc, #624]	; (800c304 <perfect_pass+0x6dc>)
 800c094:	2200      	movs	r2, #0
 800c096:	701a      	strb	r2, [r3, #0]
 800c098:	4b9a      	ldr	r3, [pc, #616]	; (800c304 <perfect_pass+0x6dc>)
 800c09a:	781a      	ldrb	r2, [r3, #0]
 800c09c:	4b98      	ldr	r3, [pc, #608]	; (800c300 <perfect_pass+0x6d8>)
 800c09e:	701a      	strb	r2, [r3, #0]
					searchC();
 800c0a0:	f002 fd52 	bl	800eb48 <searchC>

					degree_z = target_degree_z;
 800c0a4:	4b98      	ldr	r3, [pc, #608]	; (800c308 <perfect_pass+0x6e0>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4a98      	ldr	r2, [pc, #608]	; (800c30c <perfect_pass+0x6e4>)
 800c0aa:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800c0ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c0b0:	f7f4 ffb4 	bl	800101c <HAL_Delay>
					degree_z = target_degree_z;
					HAL_Delay(2000);
*/

					//----a直線と大回り圧縮----
					printf("pass press 3.\n");
 800c0b4:	4896      	ldr	r0, [pc, #600]	; (800c310 <perfect_pass+0x6e8>)
 800c0b6:	f006 fbb7 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800c0ba:	4a8b      	ldr	r2, [pc, #556]	; (800c2e8 <perfect_pass+0x6c0>)
 800c0bc:	8813      	ldrh	r3, [r2, #0]
 800c0be:	f043 0320 	orr.w	r3, r3, #32
 800c0c2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c0c4:	4a88      	ldr	r2, [pc, #544]	; (800c2e8 <perfect_pass+0x6c0>)
 800c0c6:	8813      	ldrh	r3, [r2, #0]
 800c0c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c0cc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c0ce:	4a86      	ldr	r2, [pc, #536]	; (800c2e8 <perfect_pass+0x6c0>)
 800c0d0:	8813      	ldrh	r3, [r2, #0]
 800c0d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c0d6:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800c0d8:	4b84      	ldr	r3, [pc, #528]	; (800c2ec <perfect_pass+0x6c4>)
 800c0da:	2202      	movs	r2, #2
 800c0dc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c0de:	4b84      	ldr	r3, [pc, #528]	; (800c2f0 <perfect_pass+0x6c8>)
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c0e4:	4b83      	ldr	r3, [pc, #524]	; (800c2f4 <perfect_pass+0x6cc>)
 800c0e6:	2202      	movs	r2, #2
 800c0e8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c0ea:	4b83      	ldr	r3, [pc, #524]	; (800c2f8 <perfect_pass+0x6d0>)
 800c0ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0f0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c0f2:	4b82      	ldr	r3, [pc, #520]	; (800c2fc <perfect_pass+0x6d4>)
 800c0f4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c0f8:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c0fa:	4b86      	ldr	r3, [pc, #536]	; (800c314 <perfect_pass+0x6ec>)
 800c0fc:	2203      	movs	r2, #3
 800c0fe:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800c100:	4b7f      	ldr	r3, [pc, #508]	; (800c300 <perfect_pass+0x6d8>)
 800c102:	2207      	movs	r2, #7
 800c104:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c106:	4b7f      	ldr	r3, [pc, #508]	; (800c304 <perfect_pass+0x6dc>)
 800c108:	2207      	movs	r2, #7
 800c10a:	701a      	strb	r2, [r3, #0]

					searchF3();
 800c10c:	f003 f996 	bl	800f43c <searchF3>
					HAL_Delay(2000);
 800c110:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c114:	f7f4 ff82 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c118:	4b7a      	ldr	r3, [pc, #488]	; (800c304 <perfect_pass+0x6dc>)
 800c11a:	2200      	movs	r2, #0
 800c11c:	701a      	strb	r2, [r3, #0]
 800c11e:	4b79      	ldr	r3, [pc, #484]	; (800c304 <perfect_pass+0x6dc>)
 800c120:	781a      	ldrb	r2, [r3, #0]
 800c122:	4b77      	ldr	r3, [pc, #476]	; (800c300 <perfect_pass+0x6d8>)
 800c124:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c126:	f003 f989 	bl	800f43c <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c12a:	2064      	movs	r0, #100	; 0x64
 800c12c:	f7f9 f968 	bl	8005400 <driveC2>
					degree_z = target_degree_z;
 800c130:	4b75      	ldr	r3, [pc, #468]	; (800c308 <perfect_pass+0x6e0>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a75      	ldr	r2, [pc, #468]	; (800c30c <perfect_pass+0x6e4>)
 800c136:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c138:	4b6d      	ldr	r3, [pc, #436]	; (800c2f0 <perfect_pass+0x6c8>)
 800c13a:	2200      	movs	r2, #0
 800c13c:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800c13e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c142:	f7f4 ff6b 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜め----
					printf("pass press 3.\n");
 800c146:	4872      	ldr	r0, [pc, #456]	; (800c310 <perfect_pass+0x6e8>)
 800c148:	f006 fb6e 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800c14c:	4a66      	ldr	r2, [pc, #408]	; (800c2e8 <perfect_pass+0x6c0>)
 800c14e:	8813      	ldrh	r3, [r2, #0]
 800c150:	f043 0320 	orr.w	r3, r3, #32
 800c154:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c156:	4a64      	ldr	r2, [pc, #400]	; (800c2e8 <perfect_pass+0x6c0>)
 800c158:	8813      	ldrh	r3, [r2, #0]
 800c15a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c15e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c160:	4a61      	ldr	r2, [pc, #388]	; (800c2e8 <perfect_pass+0x6c0>)
 800c162:	8813      	ldrh	r3, [r2, #0]
 800c164:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c168:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800c16a:	4b60      	ldr	r3, [pc, #384]	; (800c2ec <perfect_pass+0x6c4>)
 800c16c:	2202      	movs	r2, #2
 800c16e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c170:	4b5f      	ldr	r3, [pc, #380]	; (800c2f0 <perfect_pass+0x6c8>)
 800c172:	2200      	movs	r2, #0
 800c174:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c176:	4b5f      	ldr	r3, [pc, #380]	; (800c2f4 <perfect_pass+0x6cc>)
 800c178:	2202      	movs	r2, #2
 800c17a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c17c:	4b5e      	ldr	r3, [pc, #376]	; (800c2f8 <perfect_pass+0x6d0>)
 800c17e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c182:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c184:	4b5d      	ldr	r3, [pc, #372]	; (800c2fc <perfect_pass+0x6d4>)
 800c186:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c18a:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;						//a半区画ベースでroute配列生成
 800c18c:	4b61      	ldr	r3, [pc, #388]	; (800c314 <perfect_pass+0x6ec>)
 800c18e:	2204      	movs	r2, #4
 800c190:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800c192:	4b5b      	ldr	r3, [pc, #364]	; (800c300 <perfect_pass+0x6d8>)
 800c194:	2207      	movs	r2, #7
 800c196:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c198:	4b5a      	ldr	r3, [pc, #360]	; (800c304 <perfect_pass+0x6dc>)
 800c19a:	2207      	movs	r2, #7
 800c19c:	701a      	strb	r2, [r3, #0]

					searchF4();
 800c19e:	f003 fa29 	bl	800f5f4 <searchF4>
					HAL_Delay(2000);
 800c1a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c1a6:	f7f4 ff39 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c1aa:	4b56      	ldr	r3, [pc, #344]	; (800c304 <perfect_pass+0x6dc>)
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	701a      	strb	r2, [r3, #0]
 800c1b0:	4b54      	ldr	r3, [pc, #336]	; (800c304 <perfect_pass+0x6dc>)
 800c1b2:	781a      	ldrb	r2, [r3, #0]
 800c1b4:	4b52      	ldr	r3, [pc, #328]	; (800c300 <perfect_pass+0x6d8>)
 800c1b6:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c1b8:	f003 fa1c 	bl	800f5f4 <searchF4>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c1bc:	2064      	movs	r0, #100	; 0x64
 800c1be:	f7f9 f91f 	bl	8005400 <driveC2>
					degree_z = target_degree_z;
 800c1c2:	4b51      	ldr	r3, [pc, #324]	; (800c308 <perfect_pass+0x6e0>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a51      	ldr	r2, [pc, #324]	; (800c30c <perfect_pass+0x6e4>)
 800c1c8:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c1ca:	4b49      	ldr	r3, [pc, #292]	; (800c2f0 <perfect_pass+0x6c8>)
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800c1d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c1d4:	f7f4 ff22 	bl	800101c <HAL_Delay>
					goal_x = goal_y = 0;
					searchD();
*/

					//----a直線と大回り圧縮 High Speed----
					printf("pass press 3.\n");
 800c1d8:	484d      	ldr	r0, [pc, #308]	; (800c310 <perfect_pass+0x6e8>)
 800c1da:	f006 fb25 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800c1de:	4a42      	ldr	r2, [pc, #264]	; (800c2e8 <perfect_pass+0x6c0>)
 800c1e0:	8813      	ldrh	r3, [r2, #0]
 800c1e2:	f043 0320 	orr.w	r3, r3, #32
 800c1e6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c1e8:	4a3f      	ldr	r2, [pc, #252]	; (800c2e8 <perfect_pass+0x6c0>)
 800c1ea:	8813      	ldrh	r3, [r2, #0]
 800c1ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c1f0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c1f2:	4a3d      	ldr	r2, [pc, #244]	; (800c2e8 <perfect_pass+0x6c0>)
 800c1f4:	8813      	ldrh	r3, [r2, #0]
 800c1f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c1fa:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800c1fc:	4b3b      	ldr	r3, [pc, #236]	; (800c2ec <perfect_pass+0x6c4>)
 800c1fe:	2203      	movs	r2, #3
 800c200:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c202:	4b3b      	ldr	r3, [pc, #236]	; (800c2f0 <perfect_pass+0x6c8>)
 800c204:	2200      	movs	r2, #0
 800c206:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c208:	4b3a      	ldr	r3, [pc, #232]	; (800c2f4 <perfect_pass+0x6cc>)
 800c20a:	2202      	movs	r2, #2
 800c20c:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800c20e:	4b3a      	ldr	r3, [pc, #232]	; (800c2f8 <perfect_pass+0x6d0>)
 800c210:	f241 7270 	movw	r2, #6000	; 0x1770
 800c214:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800c216:	4b39      	ldr	r3, [pc, #228]	; (800c2fc <perfect_pass+0x6d4>)
 800c218:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c21c:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c21e:	4b3d      	ldr	r3, [pc, #244]	; (800c314 <perfect_pass+0x6ec>)
 800c220:	2203      	movs	r2, #3
 800c222:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800c224:	4b36      	ldr	r3, [pc, #216]	; (800c300 <perfect_pass+0x6d8>)
 800c226:	2207      	movs	r2, #7
 800c228:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c22a:	4b36      	ldr	r3, [pc, #216]	; (800c304 <perfect_pass+0x6dc>)
 800c22c:	2207      	movs	r2, #7
 800c22e:	701a      	strb	r2, [r3, #0]

					searchF3();
 800c230:	f003 f904 	bl	800f43c <searchF3>
					HAL_Delay(2000);
 800c234:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c238:	f7f4 fef0 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c23c:	4b31      	ldr	r3, [pc, #196]	; (800c304 <perfect_pass+0x6dc>)
 800c23e:	2200      	movs	r2, #0
 800c240:	701a      	strb	r2, [r3, #0]
 800c242:	4b30      	ldr	r3, [pc, #192]	; (800c304 <perfect_pass+0x6dc>)
 800c244:	781a      	ldrb	r2, [r3, #0]
 800c246:	4b2e      	ldr	r3, [pc, #184]	; (800c300 <perfect_pass+0x6d8>)
 800c248:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c24a:	f003 f8f7 	bl	800f43c <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c24e:	2064      	movs	r0, #100	; 0x64
 800c250:	f7f9 f8d6 	bl	8005400 <driveC2>
					degree_z = target_degree_z;
 800c254:	4b2c      	ldr	r3, [pc, #176]	; (800c308 <perfect_pass+0x6e0>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a2c      	ldr	r2, [pc, #176]	; (800c30c <perfect_pass+0x6e4>)
 800c25a:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c25c:	4b24      	ldr	r3, [pc, #144]	; (800c2f0 <perfect_pass+0x6c8>)
 800c25e:	2200      	movs	r2, #0
 800c260:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800c262:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c266:	f7f4 fed9 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800c26a:	482b      	ldr	r0, [pc, #172]	; (800c318 <perfect_pass+0x6f0>)
 800c26c:	f006 fadc 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800c270:	4a1d      	ldr	r2, [pc, #116]	; (800c2e8 <perfect_pass+0x6c0>)
 800c272:	8813      	ldrh	r3, [r2, #0]
 800c274:	f043 0320 	orr.w	r3, r3, #32
 800c278:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c27a:	4a1b      	ldr	r2, [pc, #108]	; (800c2e8 <perfect_pass+0x6c0>)
 800c27c:	8813      	ldrh	r3, [r2, #0]
 800c27e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c282:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c284:	4a18      	ldr	r2, [pc, #96]	; (800c2e8 <perfect_pass+0x6c0>)
 800c286:	8813      	ldrh	r3, [r2, #0]
 800c288:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c28c:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800c28e:	4b17      	ldr	r3, [pc, #92]	; (800c2ec <perfect_pass+0x6c4>)
 800c290:	2203      	movs	r2, #3
 800c292:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c294:	4b16      	ldr	r3, [pc, #88]	; (800c2f0 <perfect_pass+0x6c8>)
 800c296:	2200      	movs	r2, #0
 800c298:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c29a:	4b16      	ldr	r3, [pc, #88]	; (800c2f4 <perfect_pass+0x6cc>)
 800c29c:	2202      	movs	r2, #2
 800c29e:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800c2a0:	4b15      	ldr	r3, [pc, #84]	; (800c2f8 <perfect_pass+0x6d0>)
 800c2a2:	f241 7270 	movw	r2, #6000	; 0x1770
 800c2a6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800c2a8:	4b14      	ldr	r3, [pc, #80]	; (800c2fc <perfect_pass+0x6d4>)
 800c2aa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c2ae:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800c2b0:	4b18      	ldr	r3, [pc, #96]	; (800c314 <perfect_pass+0x6ec>)
 800c2b2:	2204      	movs	r2, #4
 800c2b4:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800c2b6:	4b12      	ldr	r3, [pc, #72]	; (800c300 <perfect_pass+0x6d8>)
 800c2b8:	2207      	movs	r2, #7
 800c2ba:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c2bc:	4b11      	ldr	r3, [pc, #68]	; (800c304 <perfect_pass+0x6dc>)
 800c2be:	2207      	movs	r2, #7
 800c2c0:	701a      	strb	r2, [r3, #0]

					searchF4();
 800c2c2:	f003 f997 	bl	800f5f4 <searchF4>
					HAL_Delay(2000);
 800c2c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c2ca:	f7f4 fea7 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c2ce:	4b0d      	ldr	r3, [pc, #52]	; (800c304 <perfect_pass+0x6dc>)
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	701a      	strb	r2, [r3, #0]
 800c2d4:	4b0b      	ldr	r3, [pc, #44]	; (800c304 <perfect_pass+0x6dc>)
 800c2d6:	781a      	ldrb	r2, [r3, #0]
 800c2d8:	4b09      	ldr	r3, [pc, #36]	; (800c300 <perfect_pass+0x6d8>)
 800c2da:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c2dc:	f003 f98a 	bl	800f5f4 <searchF4>

					break;
 800c2e0:	e175      	b.n	800c5ce <perfect_pass+0x9a6>
 800c2e2:	bf00      	nop
 800c2e4:	08013c3c 	.word	0x08013c3c
 800c2e8:	20000f68 	.word	0x20000f68
 800c2ec:	20000456 	.word	0x20000456
 800c2f0:	200015c8 	.word	0x200015c8
 800c2f4:	20000bb1 	.word	0x20000bb1
 800c2f8:	20000454 	.word	0x20000454
 800c2fc:	20000f7c 	.word	0x20000f7c
 800c300:	20000bb0 	.word	0x20000bb0
 800c304:	20000b4c 	.word	0x20000b4c
 800c308:	20000bf8 	.word	0x20000bf8
 800c30c:	20000b5c 	.word	0x20000b5c
 800c310:	08013d38 	.word	0x08013d38
 800c314:	20000457 	.word	0x20000457
 800c318:	08013b80 	.word	0x08013b80

				case 7:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800c31c:	48ad      	ldr	r0, [pc, #692]	; (800c5d4 <perfect_pass+0x9ac>)
 800c31e:	f006 fa83 	bl	8012828 <puts>
					MF.FLAG.SCND = 0;
 800c322:	4aad      	ldr	r2, [pc, #692]	; (800c5d8 <perfect_pass+0x9b0>)
 800c324:	8813      	ldrh	r3, [r2, #0]
 800c326:	f36f 1345 	bfc	r3, #5, #1
 800c32a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c32c:	4aaa      	ldr	r2, [pc, #680]	; (800c5d8 <perfect_pass+0x9b0>)
 800c32e:	8813      	ldrh	r3, [r2, #0]
 800c330:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c334:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800c336:	4aa8      	ldr	r2, [pc, #672]	; (800c5d8 <perfect_pass+0x9b0>)
 800c338:	8813      	ldrh	r3, [r2, #0]
 800c33a:	f36f 238a 	bfc	r3, #10, #1
 800c33e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800c340:	4ba6      	ldr	r3, [pc, #664]	; (800c5dc <perfect_pass+0x9b4>)
 800c342:	2202      	movs	r2, #2
 800c344:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c346:	4ba6      	ldr	r3, [pc, #664]	; (800c5e0 <perfect_pass+0x9b8>)
 800c348:	2200      	movs	r2, #0
 800c34a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c34c:	4ba5      	ldr	r3, [pc, #660]	; (800c5e4 <perfect_pass+0x9bc>)
 800c34e:	2202      	movs	r2, #2
 800c350:	701a      	strb	r2, [r3, #0]
					accel_hs = 4000;
 800c352:	4ba5      	ldr	r3, [pc, #660]	; (800c5e8 <perfect_pass+0x9c0>)
 800c354:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800c358:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800c35a:	4ba4      	ldr	r3, [pc, #656]	; (800c5ec <perfect_pass+0x9c4>)
 800c35c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c360:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800c362:	4ba3      	ldr	r3, [pc, #652]	; (800c5f0 <perfect_pass+0x9c8>)
 800c364:	2207      	movs	r2, #7
 800c366:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c368:	4ba2      	ldr	r3, [pc, #648]	; (800c5f4 <perfect_pass+0x9cc>)
 800c36a:	2207      	movs	r2, #7
 800c36c:	701a      	strb	r2, [r3, #0]

					get_base();
 800c36e:	f005 fbc1 	bl	8011af4 <get_base>

					searchC();
 800c372:	f002 fbe9 	bl	800eb48 <searchC>
					HAL_Delay(2000);
 800c376:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c37a:	f7f4 fe4f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c37e:	4b9d      	ldr	r3, [pc, #628]	; (800c5f4 <perfect_pass+0x9cc>)
 800c380:	2200      	movs	r2, #0
 800c382:	701a      	strb	r2, [r3, #0]
 800c384:	4b9b      	ldr	r3, [pc, #620]	; (800c5f4 <perfect_pass+0x9cc>)
 800c386:	781a      	ldrb	r2, [r3, #0]
 800c388:	4b99      	ldr	r3, [pc, #612]	; (800c5f0 <perfect_pass+0x9c8>)
 800c38a:	701a      	strb	r2, [r3, #0]
					searchC();
 800c38c:	f002 fbdc 	bl	800eb48 <searchC>

					degree_z = target_degree_z;
 800c390:	4b99      	ldr	r3, [pc, #612]	; (800c5f8 <perfect_pass+0x9d0>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a99      	ldr	r2, [pc, #612]	; (800c5fc <perfect_pass+0x9d4>)
 800c396:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800c398:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c39c:	f7f4 fe3e 	bl	800101c <HAL_Delay>
					degree_z = target_degree_z;
					HAL_Delay(2000);
*/

					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 800c3a0:	4897      	ldr	r0, [pc, #604]	; (800c600 <perfect_pass+0x9d8>)
 800c3a2:	f006 fa41 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800c3a6:	4a8c      	ldr	r2, [pc, #560]	; (800c5d8 <perfect_pass+0x9b0>)
 800c3a8:	8813      	ldrh	r3, [r2, #0]
 800c3aa:	f043 0320 	orr.w	r3, r3, #32
 800c3ae:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c3b0:	4a89      	ldr	r2, [pc, #548]	; (800c5d8 <perfect_pass+0x9b0>)
 800c3b2:	8813      	ldrh	r3, [r2, #0]
 800c3b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c3b8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c3ba:	4a87      	ldr	r2, [pc, #540]	; (800c5d8 <perfect_pass+0x9b0>)
 800c3bc:	8813      	ldrh	r3, [r2, #0]
 800c3be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c3c2:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800c3c4:	4b85      	ldr	r3, [pc, #532]	; (800c5dc <perfect_pass+0x9b4>)
 800c3c6:	2202      	movs	r2, #2
 800c3c8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c3ca:	4b85      	ldr	r3, [pc, #532]	; (800c5e0 <perfect_pass+0x9b8>)
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c3d0:	4b84      	ldr	r3, [pc, #528]	; (800c5e4 <perfect_pass+0x9bc>)
 800c3d2:	2202      	movs	r2, #2
 800c3d4:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c3d6:	4b84      	ldr	r3, [pc, #528]	; (800c5e8 <perfect_pass+0x9c0>)
 800c3d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3dc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c3de:	4b83      	ldr	r3, [pc, #524]	; (800c5ec <perfect_pass+0x9c4>)
 800c3e0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c3e4:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c3e6:	4b87      	ldr	r3, [pc, #540]	; (800c604 <perfect_pass+0x9dc>)
 800c3e8:	2203      	movs	r2, #3
 800c3ea:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c3ec:	4b80      	ldr	r3, [pc, #512]	; (800c5f0 <perfect_pass+0x9c8>)
 800c3ee:	2207      	movs	r2, #7
 800c3f0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c3f2:	4b80      	ldr	r3, [pc, #512]	; (800c5f4 <perfect_pass+0x9cc>)
 800c3f4:	2207      	movs	r2, #7
 800c3f6:	701a      	strb	r2, [r3, #0]

					searchF3();
 800c3f8:	f003 f820 	bl	800f43c <searchF3>
					HAL_Delay(2000);
 800c3fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c400:	f7f4 fe0c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c404:	4b7b      	ldr	r3, [pc, #492]	; (800c5f4 <perfect_pass+0x9cc>)
 800c406:	2200      	movs	r2, #0
 800c408:	701a      	strb	r2, [r3, #0]
 800c40a:	4b7a      	ldr	r3, [pc, #488]	; (800c5f4 <perfect_pass+0x9cc>)
 800c40c:	781a      	ldrb	r2, [r3, #0]
 800c40e:	4b78      	ldr	r3, [pc, #480]	; (800c5f0 <perfect_pass+0x9c8>)
 800c410:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c412:	f003 f813 	bl	800f43c <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c416:	2064      	movs	r0, #100	; 0x64
 800c418:	f7f8 fff2 	bl	8005400 <driveC2>
					degree_z = target_degree_z;
 800c41c:	4b76      	ldr	r3, [pc, #472]	; (800c5f8 <perfect_pass+0x9d0>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a76      	ldr	r2, [pc, #472]	; (800c5fc <perfect_pass+0x9d4>)
 800c422:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c424:	4b6e      	ldr	r3, [pc, #440]	; (800c5e0 <perfect_pass+0x9b8>)
 800c426:	2200      	movs	r2, #0
 800c428:	701a      	strb	r2, [r3, #0]
					HAL_Delay(2000);
 800c42a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c42e:	f7f4 fdf5 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800c432:	4875      	ldr	r0, [pc, #468]	; (800c608 <perfect_pass+0x9e0>)
 800c434:	f006 f9f8 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800c438:	4a67      	ldr	r2, [pc, #412]	; (800c5d8 <perfect_pass+0x9b0>)
 800c43a:	8813      	ldrh	r3, [r2, #0]
 800c43c:	f043 0320 	orr.w	r3, r3, #32
 800c440:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c442:	4a65      	ldr	r2, [pc, #404]	; (800c5d8 <perfect_pass+0x9b0>)
 800c444:	8813      	ldrh	r3, [r2, #0]
 800c446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c44a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c44c:	4a62      	ldr	r2, [pc, #392]	; (800c5d8 <perfect_pass+0x9b0>)
 800c44e:	8813      	ldrh	r3, [r2, #0]
 800c450:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c454:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800c456:	4b61      	ldr	r3, [pc, #388]	; (800c5dc <perfect_pass+0x9b4>)
 800c458:	2202      	movs	r2, #2
 800c45a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c45c:	4b60      	ldr	r3, [pc, #384]	; (800c5e0 <perfect_pass+0x9b8>)
 800c45e:	2200      	movs	r2, #0
 800c460:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c462:	4b60      	ldr	r3, [pc, #384]	; (800c5e4 <perfect_pass+0x9bc>)
 800c464:	2202      	movs	r2, #2
 800c466:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c468:	4b5f      	ldr	r3, [pc, #380]	; (800c5e8 <perfect_pass+0x9c0>)
 800c46a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c46e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c470:	4b5e      	ldr	r3, [pc, #376]	; (800c5ec <perfect_pass+0x9c4>)
 800c472:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c476:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800c478:	4b62      	ldr	r3, [pc, #392]	; (800c604 <perfect_pass+0x9dc>)
 800c47a:	2204      	movs	r2, #4
 800c47c:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c47e:	4b5c      	ldr	r3, [pc, #368]	; (800c5f0 <perfect_pass+0x9c8>)
 800c480:	2207      	movs	r2, #7
 800c482:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c484:	4b5b      	ldr	r3, [pc, #364]	; (800c5f4 <perfect_pass+0x9cc>)
 800c486:	2207      	movs	r2, #7
 800c488:	701a      	strb	r2, [r3, #0]

					searchF4();
 800c48a:	f003 f8b3 	bl	800f5f4 <searchF4>
					HAL_Delay(2000);
 800c48e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c492:	f7f4 fdc3 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c496:	4b57      	ldr	r3, [pc, #348]	; (800c5f4 <perfect_pass+0x9cc>)
 800c498:	2200      	movs	r2, #0
 800c49a:	701a      	strb	r2, [r3, #0]
 800c49c:	4b55      	ldr	r3, [pc, #340]	; (800c5f4 <perfect_pass+0x9cc>)
 800c49e:	781a      	ldrb	r2, [r3, #0]
 800c4a0:	4b53      	ldr	r3, [pc, #332]	; (800c5f0 <perfect_pass+0x9c8>)
 800c4a2:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c4a4:	f003 f8a6 	bl	800f5f4 <searchF4>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c4a8:	2064      	movs	r0, #100	; 0x64
 800c4aa:	f7f8 ffa9 	bl	8005400 <driveC2>
					degree_z = target_degree_z;
 800c4ae:	4b52      	ldr	r3, [pc, #328]	; (800c5f8 <perfect_pass+0x9d0>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a52      	ldr	r2, [pc, #328]	; (800c5fc <perfect_pass+0x9d4>)
 800c4b4:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c4b6:	4b4a      	ldr	r3, [pc, #296]	; (800c5e0 <perfect_pass+0x9b8>)
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800c4bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c4c0:	f7f4 fdac 	bl	800101c <HAL_Delay>
					goal_x = goal_y = 0;
					searchD();
*/

					//----a直線と大回り圧縮 High Speed----
					printf("pass press 3.\n");
 800c4c4:	484e      	ldr	r0, [pc, #312]	; (800c600 <perfect_pass+0x9d8>)
 800c4c6:	f006 f9af 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800c4ca:	4a43      	ldr	r2, [pc, #268]	; (800c5d8 <perfect_pass+0x9b0>)
 800c4cc:	8813      	ldrh	r3, [r2, #0]
 800c4ce:	f043 0320 	orr.w	r3, r3, #32
 800c4d2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c4d4:	4a40      	ldr	r2, [pc, #256]	; (800c5d8 <perfect_pass+0x9b0>)
 800c4d6:	8813      	ldrh	r3, [r2, #0]
 800c4d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c4dc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c4de:	4a3e      	ldr	r2, [pc, #248]	; (800c5d8 <perfect_pass+0x9b0>)
 800c4e0:	8813      	ldrh	r3, [r2, #0]
 800c4e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c4e6:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800c4e8:	4b3c      	ldr	r3, [pc, #240]	; (800c5dc <perfect_pass+0x9b4>)
 800c4ea:	2203      	movs	r2, #3
 800c4ec:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c4ee:	4b3c      	ldr	r3, [pc, #240]	; (800c5e0 <perfect_pass+0x9b8>)
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c4f4:	4b3b      	ldr	r3, [pc, #236]	; (800c5e4 <perfect_pass+0x9bc>)
 800c4f6:	2202      	movs	r2, #2
 800c4f8:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800c4fa:	4b3b      	ldr	r3, [pc, #236]	; (800c5e8 <perfect_pass+0x9c0>)
 800c4fc:	f241 7270 	movw	r2, #6000	; 0x1770
 800c500:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800c502:	4b3a      	ldr	r3, [pc, #232]	; (800c5ec <perfect_pass+0x9c4>)
 800c504:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c508:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c50a:	4b3e      	ldr	r3, [pc, #248]	; (800c604 <perfect_pass+0x9dc>)
 800c50c:	2203      	movs	r2, #3
 800c50e:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c510:	4b37      	ldr	r3, [pc, #220]	; (800c5f0 <perfect_pass+0x9c8>)
 800c512:	2207      	movs	r2, #7
 800c514:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c516:	4b37      	ldr	r3, [pc, #220]	; (800c5f4 <perfect_pass+0x9cc>)
 800c518:	2207      	movs	r2, #7
 800c51a:	701a      	strb	r2, [r3, #0]

					searchF3();
 800c51c:	f002 ff8e 	bl	800f43c <searchF3>
					HAL_Delay(2000);
 800c520:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c524:	f7f4 fd7a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c528:	4b32      	ldr	r3, [pc, #200]	; (800c5f4 <perfect_pass+0x9cc>)
 800c52a:	2200      	movs	r2, #0
 800c52c:	701a      	strb	r2, [r3, #0]
 800c52e:	4b31      	ldr	r3, [pc, #196]	; (800c5f4 <perfect_pass+0x9cc>)
 800c530:	781a      	ldrb	r2, [r3, #0]
 800c532:	4b2f      	ldr	r3, [pc, #188]	; (800c5f0 <perfect_pass+0x9c8>)
 800c534:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c536:	f002 ff81 	bl	800f43c <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c53a:	2064      	movs	r0, #100	; 0x64
 800c53c:	f7f8 ff60 	bl	8005400 <driveC2>
					degree_z = target_degree_z;
 800c540:	4b2d      	ldr	r3, [pc, #180]	; (800c5f8 <perfect_pass+0x9d0>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a2d      	ldr	r2, [pc, #180]	; (800c5fc <perfect_pass+0x9d4>)
 800c546:	6013      	str	r3, [r2, #0]
					start_mode = 0;
 800c548:	4b25      	ldr	r3, [pc, #148]	; (800c5e0 <perfect_pass+0x9b8>)
 800c54a:	2200      	movs	r2, #0
 800c54c:	701a      	strb	r2, [r3, #0]

					HAL_Delay(2000);
 800c54e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c552:	f7f4 fd63 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 800c556:	482c      	ldr	r0, [pc, #176]	; (800c608 <perfect_pass+0x9e0>)
 800c558:	f006 f966 	bl	8012828 <puts>
					MF.FLAG.SCND = 1;
 800c55c:	4a1e      	ldr	r2, [pc, #120]	; (800c5d8 <perfect_pass+0x9b0>)
 800c55e:	8813      	ldrh	r3, [r2, #0]
 800c560:	f043 0320 	orr.w	r3, r3, #32
 800c564:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c566:	4a1c      	ldr	r2, [pc, #112]	; (800c5d8 <perfect_pass+0x9b0>)
 800c568:	8813      	ldrh	r3, [r2, #0]
 800c56a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c56e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c570:	4a19      	ldr	r2, [pc, #100]	; (800c5d8 <perfect_pass+0x9b0>)
 800c572:	8813      	ldrh	r3, [r2, #0]
 800c574:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c578:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800c57a:	4b18      	ldr	r3, [pc, #96]	; (800c5dc <perfect_pass+0x9b4>)
 800c57c:	2203      	movs	r2, #3
 800c57e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800c580:	4b17      	ldr	r3, [pc, #92]	; (800c5e0 <perfect_pass+0x9b8>)
 800c582:	2200      	movs	r2, #0
 800c584:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800c586:	4b17      	ldr	r3, [pc, #92]	; (800c5e4 <perfect_pass+0x9bc>)
 800c588:	2202      	movs	r2, #2
 800c58a:	701a      	strb	r2, [r3, #0]
					accel_hs = 6000;
 800c58c:	4b16      	ldr	r3, [pc, #88]	; (800c5e8 <perfect_pass+0x9c0>)
 800c58e:	f241 7270 	movw	r2, #6000	; 0x1770
 800c592:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800c594:	4b15      	ldr	r3, [pc, #84]	; (800c5ec <perfect_pass+0x9c4>)
 800c596:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c59a:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800c59c:	4b19      	ldr	r3, [pc, #100]	; (800c604 <perfect_pass+0x9dc>)
 800c59e:	2204      	movs	r2, #4
 800c5a0:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c5a2:	4b13      	ldr	r3, [pc, #76]	; (800c5f0 <perfect_pass+0x9c8>)
 800c5a4:	2207      	movs	r2, #7
 800c5a6:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c5a8:	4b12      	ldr	r3, [pc, #72]	; (800c5f4 <perfect_pass+0x9cc>)
 800c5aa:	2207      	movs	r2, #7
 800c5ac:	701a      	strb	r2, [r3, #0]

					searchF4();
 800c5ae:	f003 f821 	bl	800f5f4 <searchF4>
					HAL_Delay(2000);
 800c5b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c5b6:	f7f4 fd31 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c5ba:	4b0e      	ldr	r3, [pc, #56]	; (800c5f4 <perfect_pass+0x9cc>)
 800c5bc:	2200      	movs	r2, #0
 800c5be:	701a      	strb	r2, [r3, #0]
 800c5c0:	4b0c      	ldr	r3, [pc, #48]	; (800c5f4 <perfect_pass+0x9cc>)
 800c5c2:	781a      	ldrb	r2, [r3, #0]
 800c5c4:	4b0a      	ldr	r3, [pc, #40]	; (800c5f0 <perfect_pass+0x9c8>)
 800c5c6:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c5c8:	f003 f814 	bl	800f5f4 <searchF4>

					break;
 800c5cc:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800c5ce:	f7ff bb34 	b.w	800bc3a <perfect_pass+0x12>
 800c5d2:	bf00      	nop
 800c5d4:	08013c3c 	.word	0x08013c3c
 800c5d8:	20000f68 	.word	0x20000f68
 800c5dc:	20000456 	.word	0x20000456
 800c5e0:	200015c8 	.word	0x200015c8
 800c5e4:	20000bb1 	.word	0x20000bb1
 800c5e8:	20000454 	.word	0x20000454
 800c5ec:	20000f7c 	.word	0x20000f7c
 800c5f0:	20000bb0 	.word	0x20000bb0
 800c5f4:	20000b4c 	.word	0x20000b4c
 800c5f8:	20000bf8 	.word	0x20000bf8
 800c5fc:	20000b5c 	.word	0x20000b5c
 800c600:	08013d38 	.word	0x08013d38
 800c604:	20000457 	.word	0x20000457
 800c608:	08013b80 	.word	0x08013b80

0800c60c <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b088      	sub	sp, #32
 800c610:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 800c612:	2300      	movs	r3, #0
 800c614:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800c616:	2300      	movs	r3, #0
 800c618:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 800c61a:	230b      	movs	r3, #11
 800c61c:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 800c61e:	2301      	movs	r3, #1
 800c620:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800c622:	2302      	movs	r3, #2
 800c624:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 800c626:	f7f5 fa3b 	bl	8001aa0 <HAL_FLASH_Unlock>
 800c62a:	4603      	mov	r3, r0
 800c62c:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 800c62e:	7ffb      	ldrb	r3, [r7, #31]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d001      	beq.n	800c638 <eeprom_enable_write+0x2c>
 800c634:	7ffb      	ldrb	r3, [r7, #31]
 800c636:	e009      	b.n	800c64c <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800c638:	1d3a      	adds	r2, r7, #4
 800c63a:	f107 0308 	add.w	r3, r7, #8
 800c63e:	4611      	mov	r1, r2
 800c640:	4618      	mov	r0, r3
 800c642:	f7f5 fb8b 	bl	8001d5c <HAL_FLASHEx_Erase>
 800c646:	4603      	mov	r3, r0
 800c648:	77fb      	strb	r3, [r7, #31]
  return status;
 800c64a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3720      	adds	r7, #32
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 800c654:	b580      	push	{r7, lr}
 800c656:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 800c658:	f7f5 fa44 	bl	8001ae4 <HAL_FLASH_Lock>
 800c65c:	4603      	mov	r3, r0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	bd80      	pop	{r7, pc}

0800c662 <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 800c662:	b590      	push	{r4, r7, lr}
 800c664:	b085      	sub	sp, #20
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
 800c66a:	460b      	mov	r3, r1
 800c66c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + EEPROM_START_ADDRESS;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800c674:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800c678:	005b      	lsls	r3, r3, #1
 800c67a:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 800c67c:	887b      	ldrh	r3, [r7, #2]
 800c67e:	f04f 0400 	mov.w	r4, #0
 800c682:	461a      	mov	r2, r3
 800c684:	4623      	mov	r3, r4
 800c686:	6879      	ldr	r1, [r7, #4]
 800c688:	2001      	movs	r0, #1
 800c68a:	f7f5 f9b5 	bl	80019f8 <HAL_FLASH_Program>
 800c68e:	4603      	mov	r3, r0
 800c690:	73fb      	strb	r3, [r7, #15]
  return status;
 800c692:	7bfb      	ldrb	r3, [r7, #15]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3714      	adds	r7, #20
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd90      	pop	{r4, r7, pc}

0800c69c <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	81fb      	strh	r3, [r7, #14]
  address = address*2 + EEPROM_START_ADDRESS;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800c6ae:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	881b      	ldrh	r3, [r3, #0]
 800c6ba:	81fb      	strh	r3, [r7, #14]
  return val;
 800c6bc:	89fb      	ldrh	r3, [r7, #14]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3714      	adds	r7, #20
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr
	...

0800c6cc <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); 					// wait start up
 800c6d2:	2064      	movs	r0, #100	; 0x64
 800c6d4:	f7f4 fca2 	bl	800101c <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); 	// 1. read who am i
 800c6d8:	2075      	movs	r0, #117	; 0x75
 800c6da:	f000 f82f 	bl	800c73c <read_byte>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); 		// 2. check who am i value
 800c6e2:	79fb      	ldrb	r3, [r7, #7]
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	4813      	ldr	r0, [pc, #76]	; (800c734 <gyro_init+0x68>)
 800c6e8:	f006 f82a 	bl	8012740 <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 800c6ec:	79fb      	ldrb	r3, [r7, #7]
 800c6ee:	2b98      	cmp	r3, #152	; 0x98
 800c6f0:	d003      	beq.n	800c6fa <gyro_init+0x2e>
    while(1){
      printf("gyro_error\r");
 800c6f2:	4811      	ldr	r0, [pc, #68]	; (800c738 <gyro_init+0x6c>)
 800c6f4:	f006 f824 	bl	8012740 <iprintf>
 800c6f8:	e7fb      	b.n	800c6f2 <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 800c6fa:	2032      	movs	r0, #50	; 0x32
 800c6fc:	f7f4 fc8e 	bl	800101c <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); 	// 3. set pwr_might
 800c700:	2100      	movs	r1, #0
 800c702:	206b      	movs	r0, #107	; 0x6b
 800c704:	f000 f846 	bl	800c794 <write_byte>

  HAL_Delay(50);
 800c708:	2032      	movs	r0, #50	; 0x32
 800c70a:	f7f4 fc87 	bl	800101c <HAL_Delay>
  write_byte(CONFIG, 0x00); 		// 4. set config
 800c70e:	2100      	movs	r1, #0
 800c710:	201a      	movs	r0, #26
 800c712:	f000 f83f 	bl	800c794 <write_byte>

  HAL_Delay(50);
 800c716:	2032      	movs	r0, #50	; 0x32
 800c718:	f7f4 fc80 	bl	800101c <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); 	// 5. set gyro config
 800c71c:	2118      	movs	r1, #24
 800c71e:	201b      	movs	r0, #27
 800c720:	f000 f838 	bl	800c794 <write_byte>

  HAL_Delay(50);
 800c724:	2032      	movs	r0, #50	; 0x32
 800c726:	f7f4 fc79 	bl	800101c <HAL_Delay>
}
 800c72a:	bf00      	nop
 800c72c:	3708      	adds	r7, #8
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	08013d48 	.word	0x08013d48
 800c738:	08013d50 	.word	0x08013d50

0800c73c <read_byte>:


uint8_t read_byte(uint8_t reg){
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	4603      	mov	r3, r0
 800c744:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET ); 	//cs = Low;
 800c746:	2200      	movs	r2, #0
 800c748:	2104      	movs	r1, #4
 800c74a:	4810      	ldr	r0, [pc, #64]	; (800c78c <read_byte+0x50>)
 800c74c:	f7f5 fdda 	bl	8002304 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 800c750:	79fb      	ldrb	r3, [r7, #7]
 800c752:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c756:	b2db      	uxtb	r3, r3
 800c758:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800c75a:	f107 010f 	add.w	r1, r7, #15
 800c75e:	2364      	movs	r3, #100	; 0x64
 800c760:	2201      	movs	r2, #1
 800c762:	480b      	ldr	r0, [pc, #44]	; (800c790 <read_byte+0x54>)
 800c764:	f7f6 fa56 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); 						// read 1byte(read data)
 800c768:	f107 010e 	add.w	r1, r7, #14
 800c76c:	2364      	movs	r3, #100	; 0x64
 800c76e:	2201      	movs	r2, #1
 800c770:	4807      	ldr	r0, [pc, #28]	; (800c790 <read_byte+0x54>)
 800c772:	f7f6 fb83 	bl	8002e7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET );  	//cs = High;
 800c776:	2201      	movs	r2, #1
 800c778:	2104      	movs	r1, #4
 800c77a:	4804      	ldr	r0, [pc, #16]	; (800c78c <read_byte+0x50>)
 800c77c:	f7f5 fdc2 	bl	8002304 <HAL_GPIO_WritePin>
  return val;
 800c780:	7bbb      	ldrb	r3, [r7, #14]
}
 800c782:	4618      	mov	r0, r3
 800c784:	3710      	adds	r7, #16
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	40020c00 	.word	0x40020c00
 800c790:	20000144 	.word	0x20000144

0800c794 <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	4603      	mov	r3, r0
 800c79c:	460a      	mov	r2, r1
 800c79e:	71fb      	strb	r3, [r7, #7]
 800c7a0:	4613      	mov	r3, r2
 800c7a2:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 800c7a4:	79fb      	ldrb	r3, [r7, #7]
 800c7a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); 	// cs = Low;
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	2104      	movs	r1, #4
 800c7b2:	480c      	ldr	r0, [pc, #48]	; (800c7e4 <write_byte+0x50>)
 800c7b4:	f7f5 fda6 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800c7b8:	f107 010f 	add.w	r1, r7, #15
 800c7bc:	2364      	movs	r3, #100	; 0x64
 800c7be:	2201      	movs	r2, #1
 800c7c0:	4809      	ldr	r0, [pc, #36]	; (800c7e8 <write_byte+0x54>)
 800c7c2:	f7f6 fa27 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); 					// read 1byte(write data)
 800c7c6:	1db9      	adds	r1, r7, #6
 800c7c8:	2364      	movs	r3, #100	; 0x64
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	4806      	ldr	r0, [pc, #24]	; (800c7e8 <write_byte+0x54>)
 800c7ce:	f7f6 fa21 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); 		// cs = High;
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	2104      	movs	r1, #4
 800c7d6:	4803      	ldr	r0, [pc, #12]	; (800c7e4 <write_byte+0x50>)
 800c7d8:	f7f5 fd94 	bl	8002304 <HAL_GPIO_WritePin>
}
 800c7dc:	bf00      	nop
 800c7de:	3710      	adds	r7, #16
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	40020c00 	.word	0x40020c00
 800c7e8:	20000144 	.word	0x20000144

0800c7ec <accel_read_x>:


float accel_read_x(void){
 800c7ec:	b590      	push	{r4, r7, lr}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
  int16_t accel_x;
  float accel;

  // H:8bit shift, Link h and l
  accel_x = (int16_t)((int16_t)(read_byte(ACCEL_XOUT_H) << 8) | read_byte(ACCEL_XOUT_L));
 800c7f2:	203b      	movs	r0, #59	; 0x3b
 800c7f4:	f7ff ffa2 	bl	800c73c <read_byte>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	021b      	lsls	r3, r3, #8
 800c7fc:	b21c      	sxth	r4, r3
 800c7fe:	203c      	movs	r0, #60	; 0x3c
 800c800:	f7ff ff9c 	bl	800c73c <read_byte>
 800c804:	4603      	mov	r3, r0
 800c806:	b21b      	sxth	r3, r3
 800c808:	4323      	orrs	r3, r4
 800c80a:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_x / ACCEL_FACTOR); // dps to accel
 800c80c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c810:	2b00      	cmp	r3, #0
 800c812:	da01      	bge.n	800c818 <accel_read_x+0x2c>
 800c814:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c818:	12db      	asrs	r3, r3, #11
 800c81a:	b21b      	sxth	r3, r3
 800c81c:	ee07 3a90 	vmov	s15, r3
 800c820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c824:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	ee07 3a90 	vmov	s15, r3
}
 800c82e:	eeb0 0a67 	vmov.f32	s0, s15
 800c832:	370c      	adds	r7, #12
 800c834:	46bd      	mov	sp, r7
 800c836:	bd90      	pop	{r4, r7, pc}

0800c838 <accel_read_y>:


float accel_read_y(void){
 800c838:	b590      	push	{r4, r7, lr}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
  int16_t accel_y;
  float accel;

  // H:8bit shift, Link h and l
  accel_y = (int16_t)((int16_t)(read_byte(ACCEL_YOUT_H) << 8) | read_byte(ACCEL_YOUT_L));
 800c83e:	203d      	movs	r0, #61	; 0x3d
 800c840:	f7ff ff7c 	bl	800c73c <read_byte>
 800c844:	4603      	mov	r3, r0
 800c846:	021b      	lsls	r3, r3, #8
 800c848:	b21c      	sxth	r4, r3
 800c84a:	203e      	movs	r0, #62	; 0x3e
 800c84c:	f7ff ff76 	bl	800c73c <read_byte>
 800c850:	4603      	mov	r3, r0
 800c852:	b21b      	sxth	r3, r3
 800c854:	4323      	orrs	r3, r4
 800c856:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_y / ACCEL_FACTOR); // dps to accel
 800c858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	da01      	bge.n	800c864 <accel_read_y+0x2c>
 800c860:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c864:	12db      	asrs	r3, r3, #11
 800c866:	b21b      	sxth	r3, r3
 800c868:	ee07 3a90 	vmov	s15, r3
 800c86c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c870:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	ee07 3a90 	vmov	s15, r3
}
 800c87a:	eeb0 0a67 	vmov.f32	s0, s15
 800c87e:	370c      	adds	r7, #12
 800c880:	46bd      	mov	sp, r7
 800c882:	bd90      	pop	{r4, r7, pc}

0800c884 <accel_read_z>:


float accel_read_z(void){
 800c884:	b590      	push	{r4, r7, lr}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
  int16_t accel_z;
  float accel;

  // H:8bit shift, Link h and l
  accel_z = (int16_t)((int16_t)(read_byte(ACCEL_ZOUT_H) << 8) | read_byte(ACCEL_ZOUT_L));
 800c88a:	203f      	movs	r0, #63	; 0x3f
 800c88c:	f7ff ff56 	bl	800c73c <read_byte>
 800c890:	4603      	mov	r3, r0
 800c892:	021b      	lsls	r3, r3, #8
 800c894:	b21c      	sxth	r4, r3
 800c896:	2040      	movs	r0, #64	; 0x40
 800c898:	f7ff ff50 	bl	800c73c <read_byte>
 800c89c:	4603      	mov	r3, r0
 800c89e:	b21b      	sxth	r3, r3
 800c8a0:	4323      	orrs	r3, r4
 800c8a2:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_z / ACCEL_FACTOR-7); // dps to accel
 800c8a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	da01      	bge.n	800c8b0 <accel_read_z+0x2c>
 800c8ac:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c8b0:	12db      	asrs	r3, r3, #11
 800c8b2:	b21b      	sxth	r3, r3
 800c8b4:	3b07      	subs	r3, #7
 800c8b6:	ee07 3a90 	vmov	s15, r3
 800c8ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8be:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	ee07 3a90 	vmov	s15, r3
}
 800c8c8:	eeb0 0a67 	vmov.f32	s0, s15
 800c8cc:	370c      	adds	r7, #12
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd90      	pop	{r4, r7, pc}
 800c8d2:	0000      	movs	r0, r0
 800c8d4:	0000      	movs	r0, r0
	...

0800c8d8 <gyro_read_x>:


float gyro_read_x(void){
 800c8d8:	b590      	push	{r4, r7, lr}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
  int16_t gyro_x;
  float omega;

  // H:8bit shift, Link h and l
  gyro_x = (int16_t)((int16_t)(read_byte(GYRO_XOUT_H) << 8) | read_byte(GYRO_XOUT_L));
 800c8de:	2043      	movs	r0, #67	; 0x43
 800c8e0:	f7ff ff2c 	bl	800c73c <read_byte>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	021b      	lsls	r3, r3, #8
 800c8e8:	b21c      	sxth	r4, r3
 800c8ea:	2044      	movs	r0, #68	; 0x44
 800c8ec:	f7ff ff26 	bl	800c73c <read_byte>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	b21b      	sxth	r3, r3
 800c8f4:	4323      	orrs	r3, r4
 800c8f6:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_x / GYRO_FACTOR+1.4); // dps to deg/sec
 800c8f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7f3 fe09 	bl	8000514 <__aeabi_i2d>
 800c902:	a30f      	add	r3, pc, #60	; (adr r3, 800c940 <gyro_read_x+0x68>)
 800c904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c908:	f7f3 ff98 	bl	800083c <__aeabi_ddiv>
 800c90c:	4603      	mov	r3, r0
 800c90e:	460c      	mov	r4, r1
 800c910:	4618      	mov	r0, r3
 800c912:	4621      	mov	r1, r4
 800c914:	a30c      	add	r3, pc, #48	; (adr r3, 800c948 <gyro_read_x+0x70>)
 800c916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91a:	f7f3 fcaf 	bl	800027c <__adddf3>
 800c91e:	4603      	mov	r3, r0
 800c920:	460c      	mov	r4, r1
 800c922:	4618      	mov	r0, r3
 800c924:	4621      	mov	r1, r4
 800c926:	f7f4 f937 	bl	8000b98 <__aeabi_d2f>
 800c92a:	4603      	mov	r3, r0
 800c92c:	603b      	str	r3, [r7, #0]
  return omega;
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	ee07 3a90 	vmov	s15, r3
}
 800c934:	eeb0 0a67 	vmov.f32	s0, s15
 800c938:	370c      	adds	r7, #12
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd90      	pop	{r4, r7, pc}
 800c93e:	bf00      	nop
 800c940:	66666666 	.word	0x66666666
 800c944:	40306666 	.word	0x40306666
 800c948:	66666666 	.word	0x66666666
 800c94c:	3ff66666 	.word	0x3ff66666

0800c950 <gyro_read_y>:


float gyro_read_y(void){
 800c950:	b590      	push	{r4, r7, lr}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
  int16_t gyro_y;
  float omega;

  // H:8bit shift, Link h and l
  gyro_y = (int16_t)((int16_t)(read_byte(GYRO_YOUT_H) << 8) | read_byte(GYRO_YOUT_L));
 800c956:	2045      	movs	r0, #69	; 0x45
 800c958:	f7ff fef0 	bl	800c73c <read_byte>
 800c95c:	4603      	mov	r3, r0
 800c95e:	021b      	lsls	r3, r3, #8
 800c960:	b21c      	sxth	r4, r3
 800c962:	2046      	movs	r0, #70	; 0x46
 800c964:	f7ff feea 	bl	800c73c <read_byte>
 800c968:	4603      	mov	r3, r0
 800c96a:	b21b      	sxth	r3, r3
 800c96c:	4323      	orrs	r3, r4
 800c96e:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_y / GYRO_FACTOR-0.75); // dps to deg/sec
 800c970:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c974:	4618      	mov	r0, r3
 800c976:	f7f3 fdcd 	bl	8000514 <__aeabi_i2d>
 800c97a:	a310      	add	r3, pc, #64	; (adr r3, 800c9bc <gyro_read_y+0x6c>)
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	f7f3 ff5c 	bl	800083c <__aeabi_ddiv>
 800c984:	4603      	mov	r3, r0
 800c986:	460c      	mov	r4, r1
 800c988:	4618      	mov	r0, r3
 800c98a:	4621      	mov	r1, r4
 800c98c:	f04f 0200 	mov.w	r2, #0
 800c990:	4b09      	ldr	r3, [pc, #36]	; (800c9b8 <gyro_read_y+0x68>)
 800c992:	f7f3 fc71 	bl	8000278 <__aeabi_dsub>
 800c996:	4603      	mov	r3, r0
 800c998:	460c      	mov	r4, r1
 800c99a:	4618      	mov	r0, r3
 800c99c:	4621      	mov	r1, r4
 800c99e:	f7f4 f8fb 	bl	8000b98 <__aeabi_d2f>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	603b      	str	r3, [r7, #0]
  return omega;
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	ee07 3a90 	vmov	s15, r3
}
 800c9ac:	eeb0 0a67 	vmov.f32	s0, s15
 800c9b0:	370c      	adds	r7, #12
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd90      	pop	{r4, r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	3fe80000 	.word	0x3fe80000
 800c9bc:	66666666 	.word	0x66666666
 800c9c0:	40306666 	.word	0x40306666
 800c9c4:	00000000 	.word	0x00000000

0800c9c8 <gyro_read_z>:


float gyro_read_z(void){
 800c9c8:	b5b0      	push	{r4, r5, r7, lr}
 800c9ca:	b082      	sub	sp, #8
 800c9cc:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 800c9ce:	2047      	movs	r0, #71	; 0x47
 800c9d0:	f7ff feb4 	bl	800c73c <read_byte>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	021b      	lsls	r3, r3, #8
 800c9d8:	b21c      	sxth	r4, r3
 800c9da:	2048      	movs	r0, #72	; 0x48
 800c9dc:	f7ff feae 	bl	800c73c <read_byte>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	b21b      	sxth	r3, r3
 800c9e4:	4323      	orrs	r3, r4
 800c9e6:	80fb      	strh	r3, [r7, #6]

//  omega = (float)(gyro_z / GYRO_FACTOR+1.15); // dps to deg/sec
  omega = (float)(gyro_z / GYRO_FACTOR-gyro_drift_value); // dps to deg/sec
 800c9e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7f3 fd91 	bl	8000514 <__aeabi_i2d>
 800c9f2:	a314      	add	r3, pc, #80	; (adr r3, 800ca44 <gyro_read_z+0x7c>)
 800c9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f8:	f7f3 ff20 	bl	800083c <__aeabi_ddiv>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	460c      	mov	r4, r1
 800ca00:	4625      	mov	r5, r4
 800ca02:	461c      	mov	r4, r3
 800ca04:	4b0e      	ldr	r3, [pc, #56]	; (800ca40 <gyro_read_z+0x78>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f7f3 fd95 	bl	8000538 <__aeabi_f2d>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	460b      	mov	r3, r1
 800ca12:	4620      	mov	r0, r4
 800ca14:	4629      	mov	r1, r5
 800ca16:	f7f3 fc2f 	bl	8000278 <__aeabi_dsub>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	460c      	mov	r4, r1
 800ca1e:	4618      	mov	r0, r3
 800ca20:	4621      	mov	r1, r4
 800ca22:	f7f4 f8b9 	bl	8000b98 <__aeabi_d2f>
 800ca26:	4603      	mov	r3, r0
 800ca28:	603b      	str	r3, [r7, #0]
  return omega;
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	ee07 3a90 	vmov	s15, r3
}
 800ca30:	eeb0 0a67 	vmov.f32	s0, s15
 800ca34:	3708      	adds	r7, #8
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bdb0      	pop	{r4, r5, r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	f3af 8000 	nop.w
 800ca40:	20000bf4 	.word	0x20000bf4
 800ca44:	66666666 	.word	0x66666666
 800ca48:	40306666 	.word	0x40306666

0800ca4c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int c) {
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b0a      	cmp	r3, #10
 800ca58:	d108      	bne.n	800ca6c <__io_putchar+0x20>
    int _c = '\r';
 800ca5a:	230d      	movs	r3, #13
 800ca5c:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 800ca5e:	f107 010c 	add.w	r1, r7, #12
 800ca62:	2301      	movs	r3, #1
 800ca64:	2201      	movs	r2, #1
 800ca66:	4807      	ldr	r0, [pc, #28]	; (800ca84 <__io_putchar+0x38>)
 800ca68:	f7f7 fe0b 	bl	8004682 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 800ca6c:	1d39      	adds	r1, r7, #4
 800ca6e:	2301      	movs	r3, #1
 800ca70:	2201      	movs	r2, #1
 800ca72:	4804      	ldr	r0, [pc, #16]	; (800ca84 <__io_putchar+0x38>)
 800ca74:	f7f7 fe05 	bl	8004682 <HAL_UART_Transmit>
  return 0;
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3710      	adds	r7, #16
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	20000b64 	.word	0x20000b64

0800ca88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca88:	b5b0      	push	{r4, r5, r7, lr}
 800ca8a:	ed2d 8b02 	vpush	{d8}
 800ca8e:	b08c      	sub	sp, #48	; 0x30
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ca94:	2360      	movs	r3, #96	; 0x60
 800ca96:	60bb      	str	r3, [r7, #8]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	613b      	str	r3, [r7, #16]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	61bb      	str	r3, [r7, #24]

	if(htim == &htim6){
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	4ab5      	ldr	r2, [pc, #724]	; (800cd78 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	f041 82c4 	bne.w	800e032 <HAL_TIM_PeriodElapsedCallback+0x15aa>
		cnt_l = TIM4 -> CNT;
 800caaa:	4bb4      	ldr	r3, [pc, #720]	; (800cd7c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800caac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caae:	ee07 3a90 	vmov	s15, r3
 800cab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cab6:	4bb2      	ldr	r3, [pc, #712]	; (800cd80 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800cab8:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 800cabc:	4bb1      	ldr	r3, [pc, #708]	; (800cd84 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800cabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac0:	ee07 3a90 	vmov	s15, r3
 800cac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cac8:	4baf      	ldr	r3, [pc, #700]	; (800cd88 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800caca:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;		//0=>65505の値飛び検出用
 800cace:	4bac      	ldr	r3, [pc, #688]	; (800cd80 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800cad0:	edd3 7a00 	vldr	s15, [r3]
 800cad4:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800cd8c <HAL_TIM_PeriodElapsedCallback+0x304>
 800cad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cae0:	dd09      	ble.n	800caf6 <HAL_TIM_PeriodElapsedCallback+0x6e>
 800cae2:	4ba7      	ldr	r3, [pc, #668]	; (800cd80 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800cae4:	edd3 7a00 	vldr	s15, [r3]
 800cae8:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800cd90 <HAL_TIM_PeriodElapsedCallback+0x308>
 800caec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800caf0:	4ba3      	ldr	r3, [pc, #652]	; (800cd80 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800caf2:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;		//0=>65505の値飛び検出用
 800caf6:	4ba4      	ldr	r3, [pc, #656]	; (800cd88 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800caf8:	edd3 7a00 	vldr	s15, [r3]
 800cafc:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800cd8c <HAL_TIM_PeriodElapsedCallback+0x304>
 800cb00:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb08:	dd09      	ble.n	800cb1e <HAL_TIM_PeriodElapsedCallback+0x96>
 800cb0a:	4b9f      	ldr	r3, [pc, #636]	; (800cd88 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cb0c:	edd3 7a00 	vldr	s15, [r3]
 800cb10:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800cd90 <HAL_TIM_PeriodElapsedCallback+0x308>
 800cb14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb18:	4b9b      	ldr	r3, [pc, #620]	; (800cd88 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cb1a:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;								//a回転方向合わせ
 800cb1e:	4b9a      	ldr	r3, [pc, #616]	; (800cd88 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cb20:	edd3 7a00 	vldr	s15, [r3]
 800cb24:	eef1 7a67 	vneg.f32	s15, s15
 800cb28:	4b97      	ldr	r3, [pc, #604]	; (800cd88 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cb2a:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800cb2e:	4b99      	ldr	r3, [pc, #612]	; (800cd94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7f3 fd00 	bl	8000538 <__aeabi_f2d>
 800cb38:	4604      	mov	r4, r0
 800cb3a:	460d      	mov	r5, r1
 800cb3c:	4b90      	ldr	r3, [pc, #576]	; (800cd80 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7f3 fcf9 	bl	8000538 <__aeabi_f2d>
 800cb46:	a388      	add	r3, pc, #544	; (adr r3, 800cd68 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800cb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4c:	f7f3 fd4c 	bl	80005e8 <__aeabi_dmul>
 800cb50:	4602      	mov	r2, r0
 800cb52:	460b      	mov	r3, r1
 800cb54:	4620      	mov	r0, r4
 800cb56:	4629      	mov	r1, r5
 800cb58:	f7f3 fb90 	bl	800027c <__adddf3>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	460c      	mov	r4, r1
 800cb60:	4618      	mov	r0, r3
 800cb62:	4621      	mov	r1, r4
 800cb64:	f7f4 f818 	bl	8000b98 <__aeabi_d2f>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	4b8a      	ldr	r3, [pc, #552]	; (800cd94 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800cb6c:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800cb6e:	4b8a      	ldr	r3, [pc, #552]	; (800cd98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7f3 fce0 	bl	8000538 <__aeabi_f2d>
 800cb78:	4604      	mov	r4, r0
 800cb7a:	460d      	mov	r5, r1
 800cb7c:	4b82      	ldr	r3, [pc, #520]	; (800cd88 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7f3 fcd9 	bl	8000538 <__aeabi_f2d>
 800cb86:	a378      	add	r3, pc, #480	; (adr r3, 800cd68 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800cb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8c:	f7f3 fd2c 	bl	80005e8 <__aeabi_dmul>
 800cb90:	4602      	mov	r2, r0
 800cb92:	460b      	mov	r3, r1
 800cb94:	4620      	mov	r0, r4
 800cb96:	4629      	mov	r1, r5
 800cb98:	f7f3 fb70 	bl	800027c <__adddf3>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	460c      	mov	r4, r1
 800cba0:	4618      	mov	r0, r3
 800cba2:	4621      	mov	r1, r4
 800cba4:	f7f3 fff8 	bl	8000b98 <__aeabi_d2f>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	4b7b      	ldr	r3, [pc, #492]	; (800cd98 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800cbac:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800cbae:	4b74      	ldr	r3, [pc, #464]	; (800cd80 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7f3 fcc0 	bl	8000538 <__aeabi_f2d>
 800cbb8:	a36b      	add	r3, pc, #428	; (adr r3, 800cd68 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800cbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbe:	f7f3 fd13 	bl	80005e8 <__aeabi_dmul>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	460c      	mov	r4, r1
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	4621      	mov	r1, r4
 800cbca:	a369      	add	r3, pc, #420	; (adr r3, 800cd70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800cbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd0:	f7f3 fe34 	bl	800083c <__aeabi_ddiv>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	460c      	mov	r4, r1
 800cbd8:	4618      	mov	r0, r3
 800cbda:	4621      	mov	r1, r4
 800cbdc:	f7f3 ffdc 	bl	8000b98 <__aeabi_d2f>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	4b6e      	ldr	r3, [pc, #440]	; (800cd9c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800cbe4:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800cbe6:	4b68      	ldr	r3, [pc, #416]	; (800cd88 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7f3 fca4 	bl	8000538 <__aeabi_f2d>
 800cbf0:	a35d      	add	r3, pc, #372	; (adr r3, 800cd68 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800cbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf6:	f7f3 fcf7 	bl	80005e8 <__aeabi_dmul>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	460c      	mov	r4, r1
 800cbfe:	4618      	mov	r0, r3
 800cc00:	4621      	mov	r1, r4
 800cc02:	a35b      	add	r3, pc, #364	; (adr r3, 800cd70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800cc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc08:	f7f3 fe18 	bl	800083c <__aeabi_ddiv>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	460c      	mov	r4, r1
 800cc10:	4618      	mov	r0, r3
 800cc12:	4621      	mov	r1, r4
 800cc14:	f7f3 ffc0 	bl	8000b98 <__aeabi_d2f>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	4b61      	ldr	r3, [pc, #388]	; (800cda0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800cc1c:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 800cc1e:	4b57      	ldr	r3, [pc, #348]	; (800cd7c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800cc20:	2200      	movs	r2, #0
 800cc22:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 800cc24:	4b57      	ldr	r3, [pc, #348]	; (800cd84 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800cc26:	2200      	movs	r2, #0
 800cc28:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.SPD){
 800cc2a:	4b5e      	ldr	r3, [pc, #376]	; (800cda4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800cc2c:	881b      	ldrh	r3, [r3, #0]
 800cc2e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	f000 80fe 	beq.w	800ce36 <HAL_TIM_PeriodElapsedCallback+0x3ae>
			target_speed_l += accel_l * 0.001;
 800cc3a:	4b5b      	ldr	r3, [pc, #364]	; (800cda8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7f3 fc7a 	bl	8000538 <__aeabi_f2d>
 800cc44:	a34a      	add	r3, pc, #296	; (adr r3, 800cd70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800cc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4a:	f7f3 fccd 	bl	80005e8 <__aeabi_dmul>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	460c      	mov	r4, r1
 800cc52:	4625      	mov	r5, r4
 800cc54:	461c      	mov	r4, r3
 800cc56:	4b55      	ldr	r3, [pc, #340]	; (800cdac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7f3 fc6c 	bl	8000538 <__aeabi_f2d>
 800cc60:	4602      	mov	r2, r0
 800cc62:	460b      	mov	r3, r1
 800cc64:	4620      	mov	r0, r4
 800cc66:	4629      	mov	r1, r5
 800cc68:	f7f3 fb08 	bl	800027c <__adddf3>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	460c      	mov	r4, r1
 800cc70:	4618      	mov	r0, r3
 800cc72:	4621      	mov	r1, r4
 800cc74:	f7f3 ff90 	bl	8000b98 <__aeabi_d2f>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	4b4c      	ldr	r3, [pc, #304]	; (800cdac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800cc7c:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 800cc7e:	4b4b      	ldr	r3, [pc, #300]	; (800cdac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800cc80:	ed93 7a00 	vldr	s14, [r3]
 800cc84:	4b4a      	ldr	r3, [pc, #296]	; (800cdb0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800cc86:	edd3 7a00 	vldr	s15, [r3]
 800cc8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc92:	dd03      	ble.n	800cc9c <HAL_TIM_PeriodElapsedCallback+0x214>
 800cc94:	4b46      	ldr	r3, [pc, #280]	; (800cdb0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800cc96:	edd3 7a00 	vldr	s15, [r3]
 800cc9a:	e002      	b.n	800cca2 <HAL_TIM_PeriodElapsedCallback+0x21a>
 800cc9c:	4b43      	ldr	r3, [pc, #268]	; (800cdac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800cc9e:	edd3 7a00 	vldr	s15, [r3]
 800cca2:	4b44      	ldr	r3, [pc, #272]	; (800cdb4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800cca4:	ed93 7a00 	vldr	s14, [r3]
 800cca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ccac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccb0:	dd10      	ble.n	800ccd4 <HAL_TIM_PeriodElapsedCallback+0x24c>
 800ccb2:	4b3e      	ldr	r3, [pc, #248]	; (800cdac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ccb4:	ed93 7a00 	vldr	s14, [r3]
 800ccb8:	4b3d      	ldr	r3, [pc, #244]	; (800cdb0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800ccba:	edd3 7a00 	vldr	s15, [r3]
 800ccbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ccc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccc6:	dd02      	ble.n	800ccce <HAL_TIM_PeriodElapsedCallback+0x246>
 800ccc8:	4b39      	ldr	r3, [pc, #228]	; (800cdb0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	e004      	b.n	800ccd8 <HAL_TIM_PeriodElapsedCallback+0x250>
 800ccce:	4b37      	ldr	r3, [pc, #220]	; (800cdac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	e001      	b.n	800ccd8 <HAL_TIM_PeriodElapsedCallback+0x250>
 800ccd4:	4b37      	ldr	r3, [pc, #220]	; (800cdb4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a34      	ldr	r2, [pc, #208]	; (800cdac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ccda:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 800ccdc:	4b33      	ldr	r3, [pc, #204]	; (800cdac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800ccde:	ed93 7a00 	vldr	s14, [r3]
 800cce2:	4b2e      	ldr	r3, [pc, #184]	; (800cd9c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800cce4:	edd3 7a00 	vldr	s15, [r3]
 800cce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccec:	4b32      	ldr	r3, [pc, #200]	; (800cdb8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800ccee:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800ccf2:	4b31      	ldr	r3, [pc, #196]	; (800cdb8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800ccf4:	edd3 7a00 	vldr	s15, [r3]
 800ccf8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800ccfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd00:	4b2e      	ldr	r3, [pc, #184]	; (800cdbc <HAL_TIM_PeriodElapsedCallback+0x334>)
 800cd02:	edc3 7a00 	vstr	s15, [r3]

			target_speed_r += accel_r * 0.001;
 800cd06:	4b2e      	ldr	r3, [pc, #184]	; (800cdc0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7f3 fc14 	bl	8000538 <__aeabi_f2d>
 800cd10:	a317      	add	r3, pc, #92	; (adr r3, 800cd70 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800cd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd16:	f7f3 fc67 	bl	80005e8 <__aeabi_dmul>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	460c      	mov	r4, r1
 800cd1e:	4625      	mov	r5, r4
 800cd20:	461c      	mov	r4, r3
 800cd22:	4b28      	ldr	r3, [pc, #160]	; (800cdc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7f3 fc06 	bl	8000538 <__aeabi_f2d>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	460b      	mov	r3, r1
 800cd30:	4620      	mov	r0, r4
 800cd32:	4629      	mov	r1, r5
 800cd34:	f7f3 faa2 	bl	800027c <__adddf3>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	460c      	mov	r4, r1
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	4621      	mov	r1, r4
 800cd40:	f7f3 ff2a 	bl	8000b98 <__aeabi_d2f>
 800cd44:	4602      	mov	r2, r0
 800cd46:	4b1f      	ldr	r3, [pc, #124]	; (800cdc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800cd48:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 800cd4a:	4b1e      	ldr	r3, [pc, #120]	; (800cdc4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800cd4c:	ed93 7a00 	vldr	s14, [r3]
 800cd50:	4b1d      	ldr	r3, [pc, #116]	; (800cdc8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800cd52:	edd3 7a00 	vldr	s15, [r3]
 800cd56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd5e:	dd35      	ble.n	800cdcc <HAL_TIM_PeriodElapsedCallback+0x344>
 800cd60:	4b19      	ldr	r3, [pc, #100]	; (800cdc8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800cd62:	edd3 7a00 	vldr	s15, [r3]
 800cd66:	e034      	b.n	800cdd2 <HAL_TIM_PeriodElapsedCallback+0x34a>
 800cd68:	775e3793 	.word	0x775e3793
 800cd6c:	3f552a9e 	.word	0x3f552a9e
 800cd70:	d2f1a9fc 	.word	0xd2f1a9fc
 800cd74:	3f50624d 	.word	0x3f50624d
 800cd78:	20000bb4 	.word	0x20000bb4
 800cd7c:	40000800 	.word	0x40000800
 800cd80:	200002ac 	.word	0x200002ac
 800cd84:	40010400 	.word	0x40010400
 800cd88:	20000bac 	.word	0x20000bac
 800cd8c:	471c4000 	.word	0x471c4000
 800cd90:	477fff00 	.word	0x477fff00
 800cd94:	200015c4 	.word	0x200015c4
 800cd98:	20000aec 	.word	0x20000aec
 800cd9c:	20000af0 	.word	0x20000af0
 800cda0:	200002bc 	.word	0x200002bc
 800cda4:	20000f68 	.word	0x20000f68
 800cda8:	20000d58 	.word	0x20000d58
 800cdac:	20000bfc 	.word	0x20000bfc
 800cdb0:	2000077c 	.word	0x2000077c
 800cdb4:	20000b54 	.word	0x20000b54
 800cdb8:	20000b60 	.word	0x20000b60
 800cdbc:	20000ba8 	.word	0x20000ba8
 800cdc0:	20000ae4 	.word	0x20000ae4
 800cdc4:	200001a0 	.word	0x200001a0
 800cdc8:	200001a4 	.word	0x200001a4
 800cdcc:	4ba4      	ldr	r3, [pc, #656]	; (800d060 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800cdce:	edd3 7a00 	vldr	s15, [r3]
 800cdd2:	4ba4      	ldr	r3, [pc, #656]	; (800d064 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800cdd4:	ed93 7a00 	vldr	s14, [r3]
 800cdd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cde0:	dd10      	ble.n	800ce04 <HAL_TIM_PeriodElapsedCallback+0x37c>
 800cde2:	4b9f      	ldr	r3, [pc, #636]	; (800d060 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800cde4:	ed93 7a00 	vldr	s14, [r3]
 800cde8:	4b9f      	ldr	r3, [pc, #636]	; (800d068 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800cdea:	edd3 7a00 	vldr	s15, [r3]
 800cdee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cdf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf6:	dd02      	ble.n	800cdfe <HAL_TIM_PeriodElapsedCallback+0x376>
 800cdf8:	4b9b      	ldr	r3, [pc, #620]	; (800d068 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	e004      	b.n	800ce08 <HAL_TIM_PeriodElapsedCallback+0x380>
 800cdfe:	4b98      	ldr	r3, [pc, #608]	; (800d060 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	e001      	b.n	800ce08 <HAL_TIM_PeriodElapsedCallback+0x380>
 800ce04:	4b97      	ldr	r3, [pc, #604]	; (800d064 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4a95      	ldr	r2, [pc, #596]	; (800d060 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800ce0a:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 800ce0c:	4b94      	ldr	r3, [pc, #592]	; (800d060 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800ce0e:	ed93 7a00 	vldr	s14, [r3]
 800ce12:	4b96      	ldr	r3, [pc, #600]	; (800d06c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800ce14:	edd3 7a00 	vldr	s15, [r3]
 800ce18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce1c:	4b94      	ldr	r3, [pc, #592]	; (800d070 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800ce1e:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800ce22:	4b93      	ldr	r3, [pc, #588]	; (800d070 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800ce24:	edd3 7a00 	vldr	s15, [r3]
 800ce28:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800ce2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce30:	4b90      	ldr	r3, [pc, #576]	; (800d074 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800ce32:	edc3 7a00 	vstr	s15, [r3]
		}

		log_cnt ++;
 800ce36:	4b90      	ldr	r3, [pc, #576]	; (800d078 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	4a8e      	ldr	r2, [pc, #568]	; (800d078 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800ce3e:	6013      	str	r3, [r2, #0]

		if(log_cnt >= 5 && MF2.FLAG.LOG){
 800ce40:	4b8d      	ldr	r3, [pc, #564]	; (800d078 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	2b04      	cmp	r3, #4
 800ce46:	dd37      	ble.n	800ceb8 <HAL_TIM_PeriodElapsedCallback+0x430>
 800ce48:	4b8c      	ldr	r3, [pc, #560]	; (800d07c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800ce4a:	881b      	ldrh	r3, [r3, #0]
 800ce4c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d030      	beq.n	800ceb8 <HAL_TIM_PeriodElapsedCallback+0x430>
			log_cnt = 0;
 800ce56:	4b88      	ldr	r3, [pc, #544]	; (800d078 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800ce58:	2200      	movs	r2, #0
 800ce5a:	601a      	str	r2, [r3, #0]
			if(get_cnt < log_allay){
 800ce5c:	4b88      	ldr	r3, [pc, #544]	; (800d080 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2bc7      	cmp	r3, #199	; 0xc7
 800ce62:	dc29      	bgt.n	800ceb8 <HAL_TIM_PeriodElapsedCallback+0x430>
				get_speed_l[get_cnt] = speed_l;
 800ce64:	4b87      	ldr	r3, [pc, #540]	; (800d084 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800ce66:	edd3 7a00 	vldr	s15, [r3]
 800ce6a:	4b85      	ldr	r3, [pc, #532]	; (800d080 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce72:	ee17 1a90 	vmov	r1, s15
 800ce76:	4a84      	ldr	r2, [pc, #528]	; (800d088 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800ce78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_speed_r[get_cnt] = speed_r;
 800ce7c:	4b7b      	ldr	r3, [pc, #492]	; (800d06c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800ce7e:	edd3 7a00 	vldr	s15, [r3]
 800ce82:	4b7f      	ldr	r3, [pc, #508]	; (800d080 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce8a:	ee17 1a90 	vmov	r1, s15
 800ce8e:	4a7f      	ldr	r2, [pc, #508]	; (800d08c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800ce90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_omega[get_cnt] = gyro_read_z();
 800ce94:	f7ff fd98 	bl	800c9c8 <gyro_read_z>
 800ce98:	eef0 7a40 	vmov.f32	s15, s0
 800ce9c:	4b78      	ldr	r3, [pc, #480]	; (800d080 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cea4:	ee17 1a90 	vmov	r1, s15
 800cea8:	4a79      	ldr	r2, [pc, #484]	; (800d090 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800ceaa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_cnt++;
 800ceae:	4b74      	ldr	r3, [pc, #464]	; (800d080 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	4a72      	ldr	r2, [pc, #456]	; (800d080 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800ceb6:	6013      	str	r3, [r2, #0]
//		degree_x += accel_read_x() * 0.001;
//		degree_y += accel_read_y() * 0.001;
//		degree_z += accel_read_z() * 0.001;
//		degree_x += gyro_read_x() * 0.001;
//		degree_y += gyro_read_y() * 0.001;
		degree_z += gyro_read_z() * 0.001;
 800ceb8:	f7ff fd86 	bl	800c9c8 <gyro_read_z>
 800cebc:	ee10 3a10 	vmov	r3, s0
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7f3 fb39 	bl	8000538 <__aeabi_f2d>
 800cec6:	a362      	add	r3, pc, #392	; (adr r3, 800d050 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800cec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cecc:	f7f3 fb8c 	bl	80005e8 <__aeabi_dmul>
 800ced0:	4603      	mov	r3, r0
 800ced2:	460c      	mov	r4, r1
 800ced4:	4625      	mov	r5, r4
 800ced6:	461c      	mov	r4, r3
 800ced8:	4b6e      	ldr	r3, [pc, #440]	; (800d094 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	4618      	mov	r0, r3
 800cede:	f7f3 fb2b 	bl	8000538 <__aeabi_f2d>
 800cee2:	4602      	mov	r2, r0
 800cee4:	460b      	mov	r3, r1
 800cee6:	4620      	mov	r0, r4
 800cee8:	4629      	mov	r1, r5
 800ceea:	f7f3 f9c7 	bl	800027c <__adddf3>
 800ceee:	4603      	mov	r3, r0
 800cef0:	460c      	mov	r4, r1
 800cef2:	4618      	mov	r0, r3
 800cef4:	4621      	mov	r1, r4
 800cef6:	f7f3 fe4f 	bl	8000b98 <__aeabi_d2f>
 800cefa:	4602      	mov	r2, r0
 800cefc:	4b65      	ldr	r3, [pc, #404]	; (800d094 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800cefe:	601a      	str	r2, [r3, #0]

		//gyro ドリフト量計算
		if(MF2.FLAG.GDRIFT){
 800cf00:	4b5e      	ldr	r3, [pc, #376]	; (800d07c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800cf02:	881b      	ldrh	r3, [r3, #0]
 800cf04:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d04d      	beq.n	800cfaa <HAL_TIM_PeriodElapsedCallback+0x522>
			gyro_cnt ++;
 800cf0e:	4b62      	ldr	r3, [pc, #392]	; (800d098 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	3301      	adds	r3, #1
 800cf14:	4a60      	ldr	r2, [pc, #384]	; (800d098 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800cf16:	6013      	str	r3, [r2, #0]
			if(gyro_cnt >= 2)dif_omega_z += old_omega_z - gyro_read_z();
 800cf18:	4b5f      	ldr	r3, [pc, #380]	; (800d098 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	dd10      	ble.n	800cf42 <HAL_TIM_PeriodElapsedCallback+0x4ba>
 800cf20:	4b5e      	ldr	r3, [pc, #376]	; (800d09c <HAL_TIM_PeriodElapsedCallback+0x614>)
 800cf22:	ed93 8a00 	vldr	s16, [r3]
 800cf26:	f7ff fd4f 	bl	800c9c8 <gyro_read_z>
 800cf2a:	eef0 7a40 	vmov.f32	s15, s0
 800cf2e:	ee38 7a67 	vsub.f32	s14, s16, s15
 800cf32:	4b5b      	ldr	r3, [pc, #364]	; (800d0a0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800cf34:	edd3 7a00 	vldr	s15, [r3]
 800cf38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf3c:	4b58      	ldr	r3, [pc, #352]	; (800d0a0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800cf3e:	edc3 7a00 	vstr	s15, [r3]
			old_omega_z = gyro_read_z();
 800cf42:	f7ff fd41 	bl	800c9c8 <gyro_read_z>
 800cf46:	eef0 7a40 	vmov.f32	s15, s0
 800cf4a:	4b54      	ldr	r3, [pc, #336]	; (800d09c <HAL_TIM_PeriodElapsedCallback+0x614>)
 800cf4c:	edc3 7a00 	vstr	s15, [r3]
			full_led_write(YELLOW);
 800cf50:	2006      	movs	r0, #6
 800cf52:	f004 fe61 	bl	8011c18 <full_led_write>
			if(gyro_cnt >= 1001) {
 800cf56:	4b50      	ldr	r3, [pc, #320]	; (800d098 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf5e:	dd1c      	ble.n	800cf9a <HAL_TIM_PeriodElapsedCallback+0x512>
				MF2.FLAG.GDRIFT = 0;
 800cf60:	4a46      	ldr	r2, [pc, #280]	; (800d07c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800cf62:	8813      	ldrh	r3, [r2, #0]
 800cf64:	f36f 13c7 	bfc	r3, #7, #1
 800cf68:	8013      	strh	r3, [r2, #0]
				gyro_drift_value = dif_omega_z / gyro_cnt-1;
 800cf6a:	4b4d      	ldr	r3, [pc, #308]	; (800d0a0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800cf6c:	edd3 6a00 	vldr	s13, [r3]
 800cf70:	4b49      	ldr	r3, [pc, #292]	; (800d098 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	ee07 3a90 	vmov	s15, r3
 800cf78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cf7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf88:	4b46      	ldr	r3, [pc, #280]	; (800d0a4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800cf8a:	edc3 7a00 	vstr	s15, [r3]
				gyro_cnt = 0;
 800cf8e:	4b42      	ldr	r3, [pc, #264]	; (800d098 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800cf90:	2200      	movs	r2, #0
 800cf92:	601a      	str	r2, [r3, #0]
				full_led_write(BLUEGREEN);
 800cf94:	2004      	movs	r0, #4
 800cf96:	f004 fe3f 	bl	8011c18 <full_led_write>
			}
			degree_z = 0;
 800cf9a:	4b3e      	ldr	r3, [pc, #248]	; (800d094 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800cf9c:	f04f 0200 	mov.w	r2, #0
 800cfa0:	601a      	str	r2, [r3, #0]
			target_degree_z = 0;
 800cfa2:	4b41      	ldr	r3, [pc, #260]	; (800d0a8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800cfa4:	f04f 0200 	mov.w	r2, #0
 800cfa8:	601a      	str	r2, [r3, #0]
		}


		if(MF2.FLAG.ENKAI){
 800cfaa:	4b34      	ldr	r3, [pc, #208]	; (800d07c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800cfac:	881b      	ldrh	r3, [r3, #0]
 800cfae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f000 80d6 	beq.w	800d166 <HAL_TIM_PeriodElapsedCallback+0x6de>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 800cfba:	4b36      	ldr	r3, [pc, #216]	; (800d094 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800cfbc:	ed93 7a00 	vldr	s14, [r3]
 800cfc0:	4b39      	ldr	r3, [pc, #228]	; (800d0a8 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800cfc2:	edd3 7a00 	vldr	s15, [r3]
 800cfc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfca:	ee17 0a90 	vmov	r0, s15
 800cfce:	f7f3 fab3 	bl	8000538 <__aeabi_f2d>
 800cfd2:	a321      	add	r3, pc, #132	; (adr r3, 800d058 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800cfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd8:	f7f3 fb06 	bl	80005e8 <__aeabi_dmul>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	460c      	mov	r4, r1
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	4621      	mov	r1, r4
 800cfe4:	f7f3 fdd8 	bl	8000b98 <__aeabi_d2f>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	4b30      	ldr	r3, [pc, #192]	; (800d0ac <HAL_TIM_PeriodElapsedCallback+0x624>)
 800cfec:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 800cfee:	4b2f      	ldr	r3, [pc, #188]	; (800d0ac <HAL_TIM_PeriodElapsedCallback+0x624>)
 800cff0:	edd3 7a00 	vldr	s15, [r3]
 800cff4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cffc:	dd5c      	ble.n	800d0b8 <HAL_TIM_PeriodElapsedCallback+0x630>
				target_speed_l = sqrt(2*accel_l*target_dist);
 800cffe:	4b2c      	ldr	r3, [pc, #176]	; (800d0b0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800d000:	edd3 7a00 	vldr	s15, [r3]
 800d004:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d008:	4b28      	ldr	r3, [pc, #160]	; (800d0ac <HAL_TIM_PeriodElapsedCallback+0x624>)
 800d00a:	edd3 7a00 	vldr	s15, [r3]
 800d00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d012:	ee17 0a90 	vmov	r0, s15
 800d016:	f7f3 fa8f 	bl	8000538 <__aeabi_f2d>
 800d01a:	4603      	mov	r3, r0
 800d01c:	460c      	mov	r4, r1
 800d01e:	ec44 3b10 	vmov	d0, r3, r4
 800d022:	f006 fb93 	bl	801374c <sqrt>
 800d026:	ec54 3b10 	vmov	r3, r4, d0
 800d02a:	4618      	mov	r0, r3
 800d02c:	4621      	mov	r1, r4
 800d02e:	f7f3 fdb3 	bl	8000b98 <__aeabi_d2f>
 800d032:	4602      	mov	r2, r0
 800d034:	4b1f      	ldr	r3, [pc, #124]	; (800d0b4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800d036:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 800d038:	4b1e      	ldr	r3, [pc, #120]	; (800d0b4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800d03a:	edd3 7a00 	vldr	s15, [r3]
 800d03e:	eef1 7a67 	vneg.f32	s15, s15
 800d042:	4b07      	ldr	r3, [pc, #28]	; (800d060 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800d044:	edc3 7a00 	vstr	s15, [r3]
 800d048:	e063      	b.n	800d112 <HAL_TIM_PeriodElapsedCallback+0x68a>
 800d04a:	bf00      	nop
 800d04c:	f3af 8000 	nop.w
 800d050:	d2f1a9fc 	.word	0xd2f1a9fc
 800d054:	3f50624d 	.word	0x3f50624d
 800d058:	d7653223 	.word	0xd7653223
 800d05c:	3fe26e40 	.word	0x3fe26e40
 800d060:	200001a0 	.word	0x200001a0
 800d064:	20000f6c 	.word	0x20000f6c
 800d068:	200001a4 	.word	0x200001a4
 800d06c:	200002bc 	.word	0x200002bc
 800d070:	20000c08 	.word	0x20000c08
 800d074:	20000780 	.word	0x20000780
 800d078:	20000108 	.word	0x20000108
 800d07c:	20000f64 	.word	0x20000f64
 800d080:	20000110 	.word	0x20000110
 800d084:	20000af0 	.word	0x20000af0
 800d088:	20000784 	.word	0x20000784
 800d08c:	2000045c 	.word	0x2000045c
 800d090:	200012a4 	.word	0x200012a4
 800d094:	20000b5c 	.word	0x20000b5c
 800d098:	2000010c 	.word	0x2000010c
 800d09c:	200015cc 	.word	0x200015cc
 800d0a0:	20000ba4 	.word	0x20000ba4
 800d0a4:	20000bf4 	.word	0x20000bf4
 800d0a8:	20000bf8 	.word	0x20000bf8
 800d0ac:	20000f78 	.word	0x20000f78
 800d0b0:	20000d58 	.word	0x20000d58
 800d0b4:	20000bfc 	.word	0x20000bfc
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 800d0b8:	4bac      	ldr	r3, [pc, #688]	; (800d36c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800d0ba:	edd3 7a00 	vldr	s15, [r3]
 800d0be:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d0c2:	4bab      	ldr	r3, [pc, #684]	; (800d370 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800d0c4:	edd3 7a00 	vldr	s15, [r3]
 800d0c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0cc:	eef1 7a67 	vneg.f32	s15, s15
 800d0d0:	ee17 3a90 	vmov	r3, s15
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7f3 fa2f 	bl	8000538 <__aeabi_f2d>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	460c      	mov	r4, r1
 800d0de:	ec44 3b10 	vmov	d0, r3, r4
 800d0e2:	f006 fb33 	bl	801374c <sqrt>
 800d0e6:	ec54 3b10 	vmov	r3, r4, d0
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	4621      	mov	r1, r4
 800d0ee:	f7f3 fd53 	bl	8000b98 <__aeabi_d2f>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	ee07 3a90 	vmov	s15, r3
 800d0f8:	eef1 7a67 	vneg.f32	s15, s15
 800d0fc:	4b9d      	ldr	r3, [pc, #628]	; (800d374 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d0fe:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 800d102:	4b9c      	ldr	r3, [pc, #624]	; (800d374 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d104:	edd3 7a00 	vldr	s15, [r3]
 800d108:	eef1 7a67 	vneg.f32	s15, s15
 800d10c:	4b9a      	ldr	r3, [pc, #616]	; (800d378 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d10e:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 800d112:	4b98      	ldr	r3, [pc, #608]	; (800d374 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d114:	ed93 7a00 	vldr	s14, [r3]
 800d118:	4b98      	ldr	r3, [pc, #608]	; (800d37c <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800d11a:	edd3 7a00 	vldr	s15, [r3]
 800d11e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d122:	4b97      	ldr	r3, [pc, #604]	; (800d380 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800d124:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800d128:	4b95      	ldr	r3, [pc, #596]	; (800d380 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800d12a:	edd3 7a00 	vldr	s15, [r3]
 800d12e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d132:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d136:	4b93      	ldr	r3, [pc, #588]	; (800d384 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800d138:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800d13c:	4b8e      	ldr	r3, [pc, #568]	; (800d378 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d13e:	ed93 7a00 	vldr	s14, [r3]
 800d142:	4b91      	ldr	r3, [pc, #580]	; (800d388 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800d144:	edd3 7a00 	vldr	s15, [r3]
 800d148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d14c:	4b8f      	ldr	r3, [pc, #572]	; (800d38c <HAL_TIM_PeriodElapsedCallback+0x904>)
 800d14e:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800d152:	4b8e      	ldr	r3, [pc, #568]	; (800d38c <HAL_TIM_PeriodElapsedCallback+0x904>)
 800d154:	edd3 7a00 	vldr	s15, [r3]
 800d158:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d15c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d160:	4b8b      	ldr	r3, [pc, #556]	; (800d390 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800d162:	edc3 7a00 	vstr	s15, [r3]
		}


		if(MF.FLAG.FWALL){
 800d166:	4b8b      	ldr	r3, [pc, #556]	; (800d394 <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800d168:	881b      	ldrh	r3, [r3, #0]
 800d16a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	2b00      	cmp	r3, #0
 800d172:	f000 8124 	beq.w	800d3be <HAL_TIM_PeriodElapsedCallback+0x936>
			target_speed_l = (int16_t)(OFFSET_FWALL_L - ad_fl)*0.5;//0.75;
 800d176:	4b88      	ldr	r3, [pc, #544]	; (800d398 <HAL_TIM_PeriodElapsedCallback+0x910>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800d180:	3304      	adds	r3, #4
 800d182:	b29b      	uxth	r3, r3
 800d184:	b21b      	sxth	r3, r3
 800d186:	4618      	mov	r0, r3
 800d188:	f7f3 f9c4 	bl	8000514 <__aeabi_i2d>
 800d18c:	f04f 0200 	mov.w	r2, #0
 800d190:	4b82      	ldr	r3, [pc, #520]	; (800d39c <HAL_TIM_PeriodElapsedCallback+0x914>)
 800d192:	f7f3 fa29 	bl	80005e8 <__aeabi_dmul>
 800d196:	4603      	mov	r3, r0
 800d198:	460c      	mov	r4, r1
 800d19a:	4618      	mov	r0, r3
 800d19c:	4621      	mov	r1, r4
 800d19e:	f7f3 fcfb 	bl	8000b98 <__aeabi_d2f>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	4b73      	ldr	r3, [pc, #460]	; (800d374 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d1a6:	601a      	str	r2, [r3, #0]
			target_speed_r = (int16_t)(OFFSET_FWALL_R - ad_fr);//*1.5;
 800d1a8:	4b7d      	ldr	r3, [pc, #500]	; (800d3a0 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	f5c3 7361 	rsb	r3, r3, #900	; 0x384
 800d1b2:	b29b      	uxth	r3, r3
 800d1b4:	b21b      	sxth	r3, r3
 800d1b6:	ee07 3a90 	vmov	s15, r3
 800d1ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d1be:	4b6e      	ldr	r3, [pc, #440]	; (800d378 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d1c0:	edc3 7a00 	vstr	s15, [r3]

			if(target_speed_l*target_speed_l < 2500)target_speed_l = 0;
 800d1c4:	4b6b      	ldr	r3, [pc, #428]	; (800d374 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d1c6:	ed93 7a00 	vldr	s14, [r3]
 800d1ca:	4b6a      	ldr	r3, [pc, #424]	; (800d374 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d1cc:	edd3 7a00 	vldr	s15, [r3]
 800d1d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1d4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800d3a4 <HAL_TIM_PeriodElapsedCallback+0x91c>
 800d1d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e0:	d503      	bpl.n	800d1ea <HAL_TIM_PeriodElapsedCallback+0x762>
 800d1e2:	4b64      	ldr	r3, [pc, #400]	; (800d374 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d1e4:	f04f 0200 	mov.w	r2, #0
 800d1e8:	601a      	str	r2, [r3, #0]
			if(target_speed_r*target_speed_r < 2500)target_speed_r = 0;
 800d1ea:	4b63      	ldr	r3, [pc, #396]	; (800d378 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d1ec:	ed93 7a00 	vldr	s14, [r3]
 800d1f0:	4b61      	ldr	r3, [pc, #388]	; (800d378 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d1f2:	edd3 7a00 	vldr	s15, [r3]
 800d1f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1fa:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d3a4 <HAL_TIM_PeriodElapsedCallback+0x91c>
 800d1fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d206:	d503      	bpl.n	800d210 <HAL_TIM_PeriodElapsedCallback+0x788>
 800d208:	4b5b      	ldr	r3, [pc, #364]	; (800d378 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d20a:	f04f 0200 	mov.w	r2, #0
 800d20e:	601a      	str	r2, [r3, #0]
			if(target_speed_l == 0 && target_speed_r == 0){
 800d210:	4b58      	ldr	r3, [pc, #352]	; (800d374 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d212:	edd3 7a00 	vldr	s15, [r3]
 800d216:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d21e:	d111      	bne.n	800d244 <HAL_TIM_PeriodElapsedCallback+0x7bc>
 800d220:	4b55      	ldr	r3, [pc, #340]	; (800d378 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d222:	edd3 7a00 	vldr	s15, [r3]
 800d226:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d22e:	d109      	bne.n	800d244 <HAL_TIM_PeriodElapsedCallback+0x7bc>
				MF.FLAG.FWALL = 0;
 800d230:	4a58      	ldr	r2, [pc, #352]	; (800d394 <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800d232:	8813      	ldrh	r3, [r2, #0]
 800d234:	f36f 13c7 	bfc	r3, #7, #1
 800d238:	8013      	strh	r3, [r2, #0]
				MF.FLAG.DRV = 0;
 800d23a:	4a56      	ldr	r2, [pc, #344]	; (800d394 <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800d23c:	8813      	ldrh	r3, [r2, #0]
 800d23e:	f36f 0341 	bfc	r3, #1, #1
 800d242:	8013      	strh	r3, [r2, #0]
			}

			epsilon_l = target_speed_l - speed_l;
 800d244:	4b4b      	ldr	r3, [pc, #300]	; (800d374 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d246:	ed93 7a00 	vldr	s14, [r3]
 800d24a:	4b4c      	ldr	r3, [pc, #304]	; (800d37c <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800d24c:	edd3 7a00 	vldr	s15, [r3]
 800d250:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d254:	4b4a      	ldr	r3, [pc, #296]	; (800d380 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800d256:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800d25a:	4b49      	ldr	r3, [pc, #292]	; (800d380 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800d25c:	edd3 7a00 	vldr	s15, [r3]
 800d260:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d264:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d268:	4b46      	ldr	r3, [pc, #280]	; (800d384 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800d26a:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800d26e:	4b42      	ldr	r3, [pc, #264]	; (800d378 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d270:	ed93 7a00 	vldr	s14, [r3]
 800d274:	4b44      	ldr	r3, [pc, #272]	; (800d388 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800d276:	edd3 7a00 	vldr	s15, [r3]
 800d27a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d27e:	4b43      	ldr	r3, [pc, #268]	; (800d38c <HAL_TIM_PeriodElapsedCallback+0x904>)
 800d280:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800d284:	4b41      	ldr	r3, [pc, #260]	; (800d38c <HAL_TIM_PeriodElapsedCallback+0x904>)
 800d286:	edd3 7a00 	vldr	s15, [r3]
 800d28a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d28e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d292:	4b3f      	ldr	r3, [pc, #252]	; (800d390 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800d294:	edc3 7a00 	vstr	s15, [r3]

			pulse_l = min(max(pulse_l, -100), 100);
 800d298:	4b3a      	ldr	r3, [pc, #232]	; (800d384 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800d29a:	edd3 7a00 	vldr	s15, [r3]
 800d29e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800d3a8 <HAL_TIM_PeriodElapsedCallback+0x920>
 800d2a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2aa:	bfcc      	ite	gt
 800d2ac:	2301      	movgt	r3, #1
 800d2ae:	2300      	movle	r3, #0
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	f083 0301 	eor.w	r3, r3, #1
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d111      	bne.n	800d2e0 <HAL_TIM_PeriodElapsedCallback+0x858>
 800d2bc:	4b31      	ldr	r3, [pc, #196]	; (800d384 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800d2be:	edd3 7a00 	vldr	s15, [r3]
 800d2c2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800d3ac <HAL_TIM_PeriodElapsedCallback+0x924>
 800d2c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ce:	bfcc      	ite	gt
 800d2d0:	2301      	movgt	r3, #1
 800d2d2:	2300      	movle	r3, #0
 800d2d4:	b2db      	uxtb	r3, r3
 800d2d6:	f083 0301 	eor.w	r3, r3, #1
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00e      	beq.n	800d2fe <HAL_TIM_PeriodElapsedCallback+0x876>
 800d2e0:	4b28      	ldr	r3, [pc, #160]	; (800d384 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800d2e2:	edd3 7a00 	vldr	s15, [r3]
 800d2e6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800d3a8 <HAL_TIM_PeriodElapsedCallback+0x920>
 800d2ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2f2:	dd02      	ble.n	800d2fa <HAL_TIM_PeriodElapsedCallback+0x872>
 800d2f4:	4b23      	ldr	r3, [pc, #140]	; (800d384 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	e002      	b.n	800d300 <HAL_TIM_PeriodElapsedCallback+0x878>
 800d2fa:	4b2d      	ldr	r3, [pc, #180]	; (800d3b0 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800d2fc:	e000      	b.n	800d300 <HAL_TIM_PeriodElapsedCallback+0x878>
 800d2fe:	4b2d      	ldr	r3, [pc, #180]	; (800d3b4 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800d300:	4a20      	ldr	r2, [pc, #128]	; (800d384 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800d302:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -100), 100);
 800d304:	4b22      	ldr	r3, [pc, #136]	; (800d390 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800d306:	edd3 7a00 	vldr	s15, [r3]
 800d30a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800d3a8 <HAL_TIM_PeriodElapsedCallback+0x920>
 800d30e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d316:	bfcc      	ite	gt
 800d318:	2301      	movgt	r3, #1
 800d31a:	2300      	movle	r3, #0
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	f083 0301 	eor.w	r3, r3, #1
 800d322:	b2db      	uxtb	r3, r3
 800d324:	2b00      	cmp	r3, #0
 800d326:	d111      	bne.n	800d34c <HAL_TIM_PeriodElapsedCallback+0x8c4>
 800d328:	4b19      	ldr	r3, [pc, #100]	; (800d390 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800d32a:	edd3 7a00 	vldr	s15, [r3]
 800d32e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d3ac <HAL_TIM_PeriodElapsedCallback+0x924>
 800d332:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d33a:	bfcc      	ite	gt
 800d33c:	2301      	movgt	r3, #1
 800d33e:	2300      	movle	r3, #0
 800d340:	b2db      	uxtb	r3, r3
 800d342:	f083 0301 	eor.w	r3, r3, #1
 800d346:	b2db      	uxtb	r3, r3
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d035      	beq.n	800d3b8 <HAL_TIM_PeriodElapsedCallback+0x930>
 800d34c:	4b10      	ldr	r3, [pc, #64]	; (800d390 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800d34e:	edd3 7a00 	vldr	s15, [r3]
 800d352:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800d3a8 <HAL_TIM_PeriodElapsedCallback+0x920>
 800d356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d35e:	dd02      	ble.n	800d366 <HAL_TIM_PeriodElapsedCallback+0x8de>
 800d360:	4b0b      	ldr	r3, [pc, #44]	; (800d390 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	e029      	b.n	800d3ba <HAL_TIM_PeriodElapsedCallback+0x932>
 800d366:	4b12      	ldr	r3, [pc, #72]	; (800d3b0 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800d368:	e027      	b.n	800d3ba <HAL_TIM_PeriodElapsedCallback+0x932>
 800d36a:	bf00      	nop
 800d36c:	20000d58 	.word	0x20000d58
 800d370:	20000f78 	.word	0x20000f78
 800d374:	20000bfc 	.word	0x20000bfc
 800d378:	200001a0 	.word	0x200001a0
 800d37c:	20000af0 	.word	0x20000af0
 800d380:	20000b60 	.word	0x20000b60
 800d384:	20000ba8 	.word	0x20000ba8
 800d388:	200002bc 	.word	0x200002bc
 800d38c:	20000c08 	.word	0x20000c08
 800d390:	20000780 	.word	0x20000780
 800d394:	20000f68 	.word	0x20000f68
 800d398:	20000d54 	.word	0x20000d54
 800d39c:	3fe00000 	.word	0x3fe00000
 800d3a0:	20000c00 	.word	0x20000c00
 800d3a4:	451c4000 	.word	0x451c4000
 800d3a8:	c2c80000 	.word	0xc2c80000
 800d3ac:	42c80000 	.word	0x42c80000
 800d3b0:	c2c80000 	.word	0xc2c80000
 800d3b4:	42c80000 	.word	0x42c80000
 800d3b8:	4bbf      	ldr	r3, [pc, #764]	; (800d6b8 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800d3ba:	4ac0      	ldr	r2, [pc, #768]	; (800d6bc <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800d3bc:	6013      	str	r3, [r2, #0]
		}


		if(MF.FLAG.GYRO){
 800d3be:	4bc0      	ldr	r3, [pc, #768]	; (800d6c0 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 800d3c0:	881b      	ldrh	r3, [r3, #0]
 800d3c2:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	f000 810b 	beq.w	800d5e4 <HAL_TIM_PeriodElapsedCallback+0xb5c>
			target_omega_z += target_degaccel_z * 0.001;
 800d3ce:	4bbd      	ldr	r3, [pc, #756]	; (800d6c4 <HAL_TIM_PeriodElapsedCallback+0xc3c>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7f3 f8b0 	bl	8000538 <__aeabi_f2d>
 800d3d8:	a3b3      	add	r3, pc, #716	; (adr r3, 800d6a8 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800d3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3de:	f7f3 f903 	bl	80005e8 <__aeabi_dmul>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	460c      	mov	r4, r1
 800d3e6:	4625      	mov	r5, r4
 800d3e8:	461c      	mov	r4, r3
 800d3ea:	4bb7      	ldr	r3, [pc, #732]	; (800d6c8 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7f3 f8a2 	bl	8000538 <__aeabi_f2d>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	4629      	mov	r1, r5
 800d3fc:	f7f2 ff3e 	bl	800027c <__adddf3>
 800d400:	4603      	mov	r3, r0
 800d402:	460c      	mov	r4, r1
 800d404:	4618      	mov	r0, r3
 800d406:	4621      	mov	r1, r4
 800d408:	f7f3 fbc6 	bl	8000b98 <__aeabi_d2f>
 800d40c:	4602      	mov	r2, r0
 800d40e:	4bae      	ldr	r3, [pc, #696]	; (800d6c8 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d410:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 800d412:	4bad      	ldr	r3, [pc, #692]	; (800d6c8 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d414:	ed93 7a00 	vldr	s14, [r3]
 800d418:	4bac      	ldr	r3, [pc, #688]	; (800d6cc <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800d41a:	edd3 7a00 	vldr	s15, [r3]
 800d41e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d426:	dd03      	ble.n	800d430 <HAL_TIM_PeriodElapsedCallback+0x9a8>
 800d428:	4ba8      	ldr	r3, [pc, #672]	; (800d6cc <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800d42a:	edd3 7a00 	vldr	s15, [r3]
 800d42e:	e002      	b.n	800d436 <HAL_TIM_PeriodElapsedCallback+0x9ae>
 800d430:	4ba5      	ldr	r3, [pc, #660]	; (800d6c8 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d432:	edd3 7a00 	vldr	s15, [r3]
 800d436:	4ba6      	ldr	r3, [pc, #664]	; (800d6d0 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800d438:	ed93 7a00 	vldr	s14, [r3]
 800d43c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d444:	dd10      	ble.n	800d468 <HAL_TIM_PeriodElapsedCallback+0x9e0>
 800d446:	4ba0      	ldr	r3, [pc, #640]	; (800d6c8 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d448:	ed93 7a00 	vldr	s14, [r3]
 800d44c:	4b9f      	ldr	r3, [pc, #636]	; (800d6cc <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800d44e:	edd3 7a00 	vldr	s15, [r3]
 800d452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d45a:	dd02      	ble.n	800d462 <HAL_TIM_PeriodElapsedCallback+0x9da>
 800d45c:	4b9b      	ldr	r3, [pc, #620]	; (800d6cc <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	e004      	b.n	800d46c <HAL_TIM_PeriodElapsedCallback+0x9e4>
 800d462:	4b99      	ldr	r3, [pc, #612]	; (800d6c8 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	e001      	b.n	800d46c <HAL_TIM_PeriodElapsedCallback+0x9e4>
 800d468:	4b99      	ldr	r3, [pc, #612]	; (800d6d0 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a96      	ldr	r2, [pc, #600]	; (800d6c8 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d46e:	6013      	str	r3, [r2, #0]

			epsilon_omega = target_omega_z - gyro_read_z();
 800d470:	4b95      	ldr	r3, [pc, #596]	; (800d6c8 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d472:	ed93 8a00 	vldr	s16, [r3]
 800d476:	f7ff faa7 	bl	800c9c8 <gyro_read_z>
 800d47a:	eef0 7a40 	vmov.f32	s15, s0
 800d47e:	ee78 7a67 	vsub.f32	s15, s16, s15
 800d482:	4b94      	ldr	r3, [pc, #592]	; (800d6d4 <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800d484:	edc3 7a00 	vstr	s15, [r3]

			target_speed_l = speed_G - (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800d488:	4b93      	ldr	r3, [pc, #588]	; (800d6d8 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7f3 f853 	bl	8000538 <__aeabi_f2d>
 800d492:	4604      	mov	r4, r0
 800d494:	460d      	mov	r5, r1
 800d496:	4b8f      	ldr	r3, [pc, #572]	; (800d6d4 <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800d498:	edd3 7a00 	vldr	s15, [r3]
 800d49c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d4a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d4a4:	4b88      	ldr	r3, [pc, #544]	; (800d6c8 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d4a6:	edd3 7a00 	vldr	s15, [r3]
 800d4aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4ae:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800d6dc <HAL_TIM_PeriodElapsedCallback+0xc54>
 800d4b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d4b6:	ee16 0a90 	vmov	r0, s13
 800d4ba:	f7f3 f83d 	bl	8000538 <__aeabi_f2d>
 800d4be:	a37c      	add	r3, pc, #496	; (adr r3, 800d6b0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800d4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c4:	f7f3 f890 	bl	80005e8 <__aeabi_dmul>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	4610      	mov	r0, r2
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	f04f 0200 	mov.w	r2, #0
 800d4d4:	4b82      	ldr	r3, [pc, #520]	; (800d6e0 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 800d4d6:	f7f3 f887 	bl	80005e8 <__aeabi_dmul>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	460b      	mov	r3, r1
 800d4de:	4610      	mov	r0, r2
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	f04f 0200 	mov.w	r2, #0
 800d4e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d4ea:	f7f3 f9a7 	bl	800083c <__aeabi_ddiv>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	4629      	mov	r1, r5
 800d4f6:	f7f2 febf 	bl	8000278 <__aeabi_dsub>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	460c      	mov	r4, r1
 800d4fe:	4618      	mov	r0, r3
 800d500:	4621      	mov	r1, r4
 800d502:	f7f3 fb49 	bl	8000b98 <__aeabi_d2f>
 800d506:	4602      	mov	r2, r0
 800d508:	4b76      	ldr	r3, [pc, #472]	; (800d6e4 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800d50a:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G + (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800d50c:	4b72      	ldr	r3, [pc, #456]	; (800d6d8 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4618      	mov	r0, r3
 800d512:	f7f3 f811 	bl	8000538 <__aeabi_f2d>
 800d516:	4604      	mov	r4, r0
 800d518:	460d      	mov	r5, r1
 800d51a:	4b6e      	ldr	r3, [pc, #440]	; (800d6d4 <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800d51c:	edd3 7a00 	vldr	s15, [r3]
 800d520:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d524:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d528:	4b67      	ldr	r3, [pc, #412]	; (800d6c8 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800d52a:	edd3 7a00 	vldr	s15, [r3]
 800d52e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d532:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d6dc <HAL_TIM_PeriodElapsedCallback+0xc54>
 800d536:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d53a:	ee16 0a90 	vmov	r0, s13
 800d53e:	f7f2 fffb 	bl	8000538 <__aeabi_f2d>
 800d542:	a35b      	add	r3, pc, #364	; (adr r3, 800d6b0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800d544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d548:	f7f3 f84e 	bl	80005e8 <__aeabi_dmul>
 800d54c:	4602      	mov	r2, r0
 800d54e:	460b      	mov	r3, r1
 800d550:	4610      	mov	r0, r2
 800d552:	4619      	mov	r1, r3
 800d554:	f04f 0200 	mov.w	r2, #0
 800d558:	4b61      	ldr	r3, [pc, #388]	; (800d6e0 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 800d55a:	f7f3 f845 	bl	80005e8 <__aeabi_dmul>
 800d55e:	4602      	mov	r2, r0
 800d560:	460b      	mov	r3, r1
 800d562:	4610      	mov	r0, r2
 800d564:	4619      	mov	r1, r3
 800d566:	f04f 0200 	mov.w	r2, #0
 800d56a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d56e:	f7f3 f965 	bl	800083c <__aeabi_ddiv>
 800d572:	4602      	mov	r2, r0
 800d574:	460b      	mov	r3, r1
 800d576:	4620      	mov	r0, r4
 800d578:	4629      	mov	r1, r5
 800d57a:	f7f2 fe7f 	bl	800027c <__adddf3>
 800d57e:	4603      	mov	r3, r0
 800d580:	460c      	mov	r4, r1
 800d582:	4618      	mov	r0, r3
 800d584:	4621      	mov	r1, r4
 800d586:	f7f3 fb07 	bl	8000b98 <__aeabi_d2f>
 800d58a:	4602      	mov	r2, r0
 800d58c:	4b56      	ldr	r3, [pc, #344]	; (800d6e8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800d58e:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 800d590:	4b54      	ldr	r3, [pc, #336]	; (800d6e4 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800d592:	ed93 7a00 	vldr	s14, [r3]
 800d596:	4b55      	ldr	r3, [pc, #340]	; (800d6ec <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800d598:	edd3 7a00 	vldr	s15, [r3]
 800d59c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5a0:	4b53      	ldr	r3, [pc, #332]	; (800d6f0 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800d5a2:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800d5a6:	4b52      	ldr	r3, [pc, #328]	; (800d6f0 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800d5a8:	edd3 7a00 	vldr	s15, [r3]
 800d5ac:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d5b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d5b4:	4b4f      	ldr	r3, [pc, #316]	; (800d6f4 <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 800d5b6:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800d5ba:	4b4b      	ldr	r3, [pc, #300]	; (800d6e8 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800d5bc:	ed93 7a00 	vldr	s14, [r3]
 800d5c0:	4b4d      	ldr	r3, [pc, #308]	; (800d6f8 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 800d5c2:	edd3 7a00 	vldr	s15, [r3]
 800d5c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5ca:	4b4c      	ldr	r3, [pc, #304]	; (800d6fc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800d5cc:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800d5d0:	4b4a      	ldr	r3, [pc, #296]	; (800d6fc <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800d5d2:	edd3 7a00 	vldr	s15, [r3]
 800d5d6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d5da:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d5de:	4b37      	ldr	r3, [pc, #220]	; (800d6bc <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800d5e0:	edc3 7a00 	vstr	s15, [r3]
		}


		//ADchange interrupt
		uint16_t delay;
		tp = (tp+1)%3;
 800d5e4:	4b46      	ldr	r3, [pc, #280]	; (800d700 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	1c5a      	adds	r2, r3, #1
 800d5ea:	4b46      	ldr	r3, [pc, #280]	; (800d704 <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 800d5ec:	fb83 3102 	smull	r3, r1, r3, r2
 800d5f0:	17d3      	asrs	r3, r2, #31
 800d5f2:	1ac9      	subs	r1, r1, r3
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	005b      	lsls	r3, r3, #1
 800d5f8:	440b      	add	r3, r1
 800d5fa:	1ad1      	subs	r1, r2, r3
 800d5fc:	b2ca      	uxtb	r2, r1
 800d5fe:	4b40      	ldr	r3, [pc, #256]	; (800d700 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800d600:	701a      	strb	r2, [r3, #0]

		switch(tp){
 800d602:	4b3f      	ldr	r3, [pc, #252]	; (800d700 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	2b01      	cmp	r3, #1
 800d608:	d044      	beq.n	800d694 <HAL_TIM_PeriodElapsedCallback+0xc0c>
 800d60a:	2b02      	cmp	r3, #2
 800d60c:	f000 80bc 	beq.w	800d788 <HAL_TIM_PeriodElapsedCallback+0xd00>
 800d610:	2b00      	cmp	r3, #0
 800d612:	f040 82da 	bne.w	800dbca <HAL_TIM_PeriodElapsedCallback+0x1142>
		  case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); 	//L
 800d616:	2201      	movs	r2, #1
 800d618:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d61c:	483a      	ldr	r0, [pc, #232]	; (800d708 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800d61e:	f7f4 fe71 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800d622:	2300      	movs	r3, #0
 800d624:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d626:	e002      	b.n	800d62e <HAL_TIM_PeriodElapsedCallback+0xba6>
 800d628:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d62a:	3301      	adds	r3, #1
 800d62c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d62e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d630:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800d634:	4293      	cmp	r3, r2
 800d636:	d9f7      	bls.n	800d628 <HAL_TIM_PeriodElapsedCallback+0xba0>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_3);			//L
 800d638:	2103      	movs	r1, #3
 800d63a:	4834      	ldr	r0, [pc, #208]	; (800d70c <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800d63c:	f001 fa38 	bl	800eab0 <get_adc_value>
 800d640:	4603      	mov	r3, r0
 800d642:	461a      	mov	r2, r3
 800d644:	4b32      	ldr	r3, [pc, #200]	; (800d710 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800d646:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800d648:	2200      	movs	r2, #0
 800d64a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d64e:	482e      	ldr	r0, [pc, #184]	; (800d708 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800d650:	f7f4 fe58 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  	//R
 800d654:	2201      	movs	r2, #1
 800d656:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d65a:	482e      	ldr	r0, [pc, #184]	; (800d714 <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800d65c:	f7f4 fe52 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800d660:	2300      	movs	r3, #0
 800d662:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d664:	e002      	b.n	800d66c <HAL_TIM_PeriodElapsedCallback+0xbe4>
 800d666:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d668:	3301      	adds	r3, #1
 800d66a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d66c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d66e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800d672:	4293      	cmp	r3, r2
 800d674:	d9f7      	bls.n	800d666 <HAL_TIM_PeriodElapsedCallback+0xbde>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_1);			//R
 800d676:	2101      	movs	r1, #1
 800d678:	4824      	ldr	r0, [pc, #144]	; (800d70c <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800d67a:	f001 fa19 	bl	800eab0 <get_adc_value>
 800d67e:	4603      	mov	r3, r0
 800d680:	461a      	mov	r2, r3
 800d682:	4b25      	ldr	r3, [pc, #148]	; (800d718 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 800d684:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800d686:	2200      	movs	r2, #0
 800d688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d68c:	4821      	ldr	r0, [pc, #132]	; (800d714 <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800d68e:	f7f4 fe39 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800d692:	e29a      	b.n	800dbca <HAL_TIM_PeriodElapsedCallback+0x1142>

		  case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); 	//FL
 800d694:	2201      	movs	r2, #1
 800d696:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d69a:	481b      	ldr	r0, [pc, #108]	; (800d708 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800d69c:	f7f4 fe32 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d6a4:	e03d      	b.n	800d722 <HAL_TIM_PeriodElapsedCallback+0xc9a>
 800d6a6:	bf00      	nop
 800d6a8:	d2f1a9fc 	.word	0xd2f1a9fc
 800d6ac:	3f50624d 	.word	0x3f50624d
 800d6b0:	54442d18 	.word	0x54442d18
 800d6b4:	400921fb 	.word	0x400921fb
 800d6b8:	42c80000 	.word	0x42c80000
 800d6bc:	20000780 	.word	0x20000780
 800d6c0:	20000f68 	.word	0x20000f68
 800d6c4:	20000b58 	.word	0x20000b58
 800d6c8:	200001a8 	.word	0x200001a8
 800d6cc:	20000ae8 	.word	0x20000ae8
 800d6d0:	200002b8 	.word	0x200002b8
 800d6d4:	20000458 	.word	0x20000458
 800d6d8:	20000af4 	.word	0x20000af4
 800d6dc:	43340000 	.word	0x43340000
 800d6e0:	40508000 	.word	0x40508000
 800d6e4:	20000bfc 	.word	0x20000bfc
 800d6e8:	200001a0 	.word	0x200001a0
 800d6ec:	20000af0 	.word	0x20000af0
 800d6f0:	20000b60 	.word	0x20000b60
 800d6f4:	20000ba8 	.word	0x20000ba8
 800d6f8:	200002bc 	.word	0x200002bc
 800d6fc:	20000c08 	.word	0x20000c08
 800d700:	200012a0 	.word	0x200012a0
 800d704:	55555556 	.word	0x55555556
 800d708:	40020800 	.word	0x40020800
 800d70c:	20000b00 	.word	0x20000b00
 800d710:	20000afc 	.word	0x20000afc
 800d714:	40020000 	.word	0x40020000
 800d718:	20000f60 	.word	0x20000f60
 800d71c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d71e:	3301      	adds	r3, #1
 800d720:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d722:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d724:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800d728:	4293      	cmp	r3, r2
 800d72a:	d9f7      	bls.n	800d71c <HAL_TIM_PeriodElapsedCallback+0xc94>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_2);			//FL
 800d72c:	2102      	movs	r1, #2
 800d72e:	48b4      	ldr	r0, [pc, #720]	; (800da00 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800d730:	f001 f9be 	bl	800eab0 <get_adc_value>
 800d734:	4603      	mov	r3, r0
 800d736:	461a      	mov	r2, r3
 800d738:	4bb2      	ldr	r3, [pc, #712]	; (800da04 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800d73a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800d73c:	2200      	movs	r2, #0
 800d73e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d742:	48b1      	ldr	r0, [pc, #708]	; (800da08 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800d744:	f7f4 fdde 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   	//FR
 800d748:	2201      	movs	r2, #1
 800d74a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d74e:	48ae      	ldr	r0, [pc, #696]	; (800da08 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800d750:	f7f4 fdd8 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800d754:	2300      	movs	r3, #0
 800d756:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d758:	e002      	b.n	800d760 <HAL_TIM_PeriodElapsedCallback+0xcd8>
 800d75a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d75c:	3301      	adds	r3, #1
 800d75e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d760:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d762:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800d766:	4293      	cmp	r3, r2
 800d768:	d9f7      	bls.n	800d75a <HAL_TIM_PeriodElapsedCallback+0xcd2>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_0);			//FR
 800d76a:	2100      	movs	r1, #0
 800d76c:	48a4      	ldr	r0, [pc, #656]	; (800da00 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800d76e:	f001 f99f 	bl	800eab0 <get_adc_value>
 800d772:	4603      	mov	r3, r0
 800d774:	461a      	mov	r2, r3
 800d776:	4ba5      	ldr	r3, [pc, #660]	; (800da0c <HAL_TIM_PeriodElapsedCallback+0xf84>)
 800d778:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800d77a:	2200      	movs	r2, #0
 800d77c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d780:	48a1      	ldr	r0, [pc, #644]	; (800da08 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800d782:	f7f4 fdbf 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800d786:	e220      	b.n	800dbca <HAL_TIM_PeriodElapsedCallback+0x1142>

		  case 2:
				//
				if(MF.FLAG.WCTRL){
 800d788:	4ba1      	ldr	r3, [pc, #644]	; (800da10 <HAL_TIM_PeriodElapsedCallback+0xf88>)
 800d78a:	881b      	ldrh	r3, [r3, #0]
 800d78c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d790:	b2db      	uxtb	r3, r3
 800d792:	2b00      	cmp	r3, #0
 800d794:	f000 81c5 	beq.w	800db22 <HAL_TIM_PeriodElapsedCallback+0x109a>
					if(!MF2.FLAG.V){
 800d798:	4b9e      	ldr	r3, [pc, #632]	; (800da14 <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800d79a:	881b      	ldrh	r3, [r3, #0]
 800d79c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	f040 80bb 	bne.w	800d91e <HAL_TIM_PeriodElapsedCallback+0xe96>
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	857b      	strh	r3, [r7, #42]	; 0x2a
						dif_l = (int32_t) ad_l - base_l;
 800d7b0:	4b99      	ldr	r3, [pc, #612]	; (800da18 <HAL_TIM_PeriodElapsedCallback+0xf90>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	b29a      	uxth	r2, r3
 800d7b6:	4b99      	ldr	r3, [pc, #612]	; (800da1c <HAL_TIM_PeriodElapsedCallback+0xf94>)
 800d7b8:	881b      	ldrh	r3, [r3, #0]
 800d7ba:	1ad3      	subs	r3, r2, r3
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	b21a      	sxth	r2, r3
 800d7c0:	4b97      	ldr	r3, [pc, #604]	; (800da20 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d7c2:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_r - base_r;
 800d7c4:	4b97      	ldr	r3, [pc, #604]	; (800da24 <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	b29a      	uxth	r2, r3
 800d7ca:	4b97      	ldr	r3, [pc, #604]	; (800da28 <HAL_TIM_PeriodElapsedCallback+0xfa0>)
 800d7cc:	881b      	ldrh	r3, [r3, #0]
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	b21a      	sxth	r2, r3
 800d7d4:	4b95      	ldr	r3, [pc, #596]	; (800da2c <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d7d6:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_L || dif_r > CTRL_BASE_R){
 800d7d8:	4b91      	ldr	r3, [pc, #580]	; (800da20 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d7da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7de:	2b23      	cmp	r3, #35	; 0x23
 800d7e0:	dc04      	bgt.n	800d7ec <HAL_TIM_PeriodElapsedCallback+0xd64>
 800d7e2:	4b92      	ldr	r3, [pc, #584]	; (800da2c <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d7e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7e8:	2b1e      	cmp	r3, #30
 800d7ea:	dd70      	ble.n	800d8ce <HAL_TIM_PeriodElapsedCallback+0xe46>
							if(dif_l > CTRL_BASE_L){
 800d7ec:	4b8c      	ldr	r3, [pc, #560]	; (800da20 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d7ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7f2:	2b23      	cmp	r3, #35	; 0x23
 800d7f4:	dd30      	ble.n	800d858 <HAL_TIM_PeriodElapsedCallback+0xdd0>
								dwl_tmp += CTRL_CONT_W * dif_l;					//a比例制御値を決定
 800d7f6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d7fa:	ee07 3a90 	vmov	s15, r3
 800d7fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d802:	4b87      	ldr	r3, [pc, #540]	; (800da20 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d804:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d808:	ee07 3a90 	vmov	s15, r3
 800d80c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d810:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800d814:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d81c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d820:	ee17 3a90 	vmov	r3, s15
 800d824:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += -1 * CTRL_CONT_W * dif_l;			//a比例制御値を決定
 800d826:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d82a:	ee07 3a90 	vmov	s15, r3
 800d82e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d832:	4b7b      	ldr	r3, [pc, #492]	; (800da20 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d834:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d838:	ee07 3a90 	vmov	s15, r3
 800d83c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d840:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800d844:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d84c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d850:	ee17 3a90 	vmov	r3, s15
 800d854:	857b      	strh	r3, [r7, #42]	; 0x2a
 800d856:	e034      	b.n	800d8c2 <HAL_TIM_PeriodElapsedCallback+0xe3a>
							}
							else if(dif_r > CTRL_BASE_R){
 800d858:	4b74      	ldr	r3, [pc, #464]	; (800da2c <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d85a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d85e:	2b1e      	cmp	r3, #30
 800d860:	dd2f      	ble.n	800d8c2 <HAL_TIM_PeriodElapsedCallback+0xe3a>
								dwl_tmp += -1 * CTRL_CONT_W * dif_r;			//a比例制御値を決定
 800d862:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d866:	ee07 3a90 	vmov	s15, r3
 800d86a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d86e:	4b6f      	ldr	r3, [pc, #444]	; (800da2c <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d870:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d874:	ee07 3a90 	vmov	s15, r3
 800d878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d87c:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800d880:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d884:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d888:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d88c:	ee17 3a90 	vmov	r3, s15
 800d890:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += CTRL_CONT_W * dif_r;					//a比例制御値を決定
 800d892:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d896:	ee07 3a90 	vmov	s15, r3
 800d89a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d89e:	4b63      	ldr	r3, [pc, #396]	; (800da2c <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d8a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d8a4:	ee07 3a90 	vmov	s15, r3
 800d8a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8ac:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800d8b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d8b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8bc:	ee17 3a90 	vmov	r3, s15
 800d8c0:	857b      	strh	r3, [r7, #42]	; 0x2a
							}
							MF2.FLAG.WG = 1;
 800d8c2:	4a54      	ldr	r2, [pc, #336]	; (800da14 <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800d8c4:	8813      	ldrh	r3, [r2, #0]
 800d8c6:	f043 0310 	orr.w	r3, r3, #16
 800d8ca:	8013      	strh	r3, [r2, #0]
 800d8cc:	e004      	b.n	800d8d8 <HAL_TIM_PeriodElapsedCallback+0xe50>
						}else{
							MF2.FLAG.WG = 0;
 800d8ce:	4a51      	ldr	r2, [pc, #324]	; (800da14 <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800d8d0:	8813      	ldrh	r3, [r2, #0]
 800d8d2:	f36f 1304 	bfc	r3, #4, #1
 800d8d6:	8013      	strh	r3, [r2, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800d8d8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d8dc:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d8e0:	dd08      	ble.n	800d8f4 <HAL_TIM_PeriodElapsedCallback+0xe6c>
 800d8e2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d8e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d8ea:	bfa8      	it	ge
 800d8ec:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800d8f0:	b21b      	sxth	r3, r3
 800d8f2:	e000      	b.n	800d8f6 <HAL_TIM_PeriodElapsedCallback+0xe6e>
 800d8f4:	4b4e      	ldr	r3, [pc, #312]	; (800da30 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 800d8f6:	4a4f      	ldr	r2, [pc, #316]	; (800da34 <HAL_TIM_PeriodElapsedCallback+0xfac>)
 800d8f8:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800d8fa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d8fe:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d902:	dd08      	ble.n	800d916 <HAL_TIM_PeriodElapsedCallback+0xe8e>
 800d904:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d908:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d90c:	bfa8      	it	ge
 800d90e:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800d912:	b21b      	sxth	r3, r3
 800d914:	e000      	b.n	800d918 <HAL_TIM_PeriodElapsedCallback+0xe90>
 800d916:	4b46      	ldr	r3, [pc, #280]	; (800da30 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 800d918:	4a47      	ldr	r2, [pc, #284]	; (800da38 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 800d91a:	8013      	strh	r3, [r2, #0]
 800d91c:	e108      	b.n	800db30 <HAL_TIM_PeriodElapsedCallback+0x10a8>
					}else{
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800d91e:	2300      	movs	r3, #0
 800d920:	853b      	strh	r3, [r7, #40]	; 0x28
 800d922:	2300      	movs	r3, #0
 800d924:	84fb      	strh	r3, [r7, #38]	; 0x26
						dif_l = (int32_t) ad_fl - BASE_FL;
 800d926:	4b37      	ldr	r3, [pc, #220]	; (800da04 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800d930:	b29b      	uxth	r3, r3
 800d932:	b21a      	sxth	r2, r3
 800d934:	4b3a      	ldr	r3, [pc, #232]	; (800da20 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d936:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_fr - BASE_FR;
 800d938:	4b34      	ldr	r3, [pc, #208]	; (800da0c <HAL_TIM_PeriodElapsedCallback+0xf84>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d942:	b29b      	uxth	r3, r3
 800d944:	b21a      	sxth	r2, r3
 800d946:	4b39      	ldr	r3, [pc, #228]	; (800da2c <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d948:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_FL || dif_r > CTRL_BASE_FR){
 800d94a:	4b35      	ldr	r3, [pc, #212]	; (800da20 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d94c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d950:	2bc8      	cmp	r3, #200	; 0xc8
 800d952:	dc05      	bgt.n	800d960 <HAL_TIM_PeriodElapsedCallback+0xed8>
 800d954:	4b35      	ldr	r3, [pc, #212]	; (800da2c <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d95a:	2b64      	cmp	r3, #100	; 0x64
 800d95c:	f340 80b9 	ble.w	800dad2 <HAL_TIM_PeriodElapsedCallback+0x104a>
							if(dif_l > CTRL_BASE_FL){
 800d960:	4b2f      	ldr	r3, [pc, #188]	; (800da20 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d962:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d966:	2bc8      	cmp	r3, #200	; 0xc8
 800d968:	dd68      	ble.n	800da3c <HAL_TIM_PeriodElapsedCallback+0xfb4>
								dwl_tmp += CTRL_CONT_W * 0.1 * dif_l;				//a比例制御値を決定
 800d96a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d96e:	4618      	mov	r0, r3
 800d970:	f7f2 fdd0 	bl	8000514 <__aeabi_i2d>
 800d974:	4604      	mov	r4, r0
 800d976:	460d      	mov	r5, r1
 800d978:	4b29      	ldr	r3, [pc, #164]	; (800da20 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d97a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d97e:	4618      	mov	r0, r3
 800d980:	f7f2 fdc8 	bl	8000514 <__aeabi_i2d>
 800d984:	a31a      	add	r3, pc, #104	; (adr r3, 800d9f0 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800d986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98a:	f7f2 fe2d 	bl	80005e8 <__aeabi_dmul>
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	4620      	mov	r0, r4
 800d994:	4629      	mov	r1, r5
 800d996:	f7f2 fc71 	bl	800027c <__adddf3>
 800d99a:	4603      	mov	r3, r0
 800d99c:	460c      	mov	r4, r1
 800d99e:	4618      	mov	r0, r3
 800d9a0:	4621      	mov	r1, r4
 800d9a2:	f7f3 f8d1 	bl	8000b48 <__aeabi_d2iz>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += -1 * CTRL_CONT_W * 0.1 * dif_l;			//a比例制御値を決定
 800d9aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7f2 fdb0 	bl	8000514 <__aeabi_i2d>
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	460d      	mov	r5, r1
 800d9b8:	4b19      	ldr	r3, [pc, #100]	; (800da20 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d9ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7f2 fda8 	bl	8000514 <__aeabi_i2d>
 800d9c4:	a30c      	add	r3, pc, #48	; (adr r3, 800d9f8 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 800d9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ca:	f7f2 fe0d 	bl	80005e8 <__aeabi_dmul>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	4629      	mov	r1, r5
 800d9d6:	f7f2 fc51 	bl	800027c <__adddf3>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	460c      	mov	r4, r1
 800d9de:	4618      	mov	r0, r3
 800d9e0:	4621      	mov	r1, r4
 800d9e2:	f7f3 f8b1 	bl	8000b48 <__aeabi_d2iz>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d9ea:	e06c      	b.n	800dac6 <HAL_TIM_PeriodElapsedCallback+0x103e>
 800d9ec:	f3af 8000 	nop.w
 800d9f0:	33333334 	.word	0x33333334
 800d9f4:	3fb33333 	.word	0x3fb33333
 800d9f8:	33333334 	.word	0x33333334
 800d9fc:	bfb33333 	.word	0xbfb33333
 800da00:	20000b00 	.word	0x20000b00
 800da04:	20000d54 	.word	0x20000d54
 800da08:	40020800 	.word	0x40020800
 800da0c:	20000c00 	.word	0x20000c00
 800da10:	20000f68 	.word	0x20000f68
 800da14:	20000f64 	.word	0x20000f64
 800da18:	20000afc 	.word	0x20000afc
 800da1c:	2000034c 	.word	0x2000034c
 800da20:	20000b50 	.word	0x20000b50
 800da24:	20000f60 	.word	0x20000f60
 800da28:	200002c0 	.word	0x200002c0
 800da2c:	20000bb2 	.word	0x20000bb2
 800da30:	fffffc18 	.word	0xfffffc18
 800da34:	20000af8 	.word	0x20000af8
 800da38:	20000f74 	.word	0x20000f74
							}
							else if(dif_r > CTRL_BASE_FR){
 800da3c:	4bb8      	ldr	r3, [pc, #736]	; (800dd20 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800da3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da42:	2b64      	cmp	r3, #100	; 0x64
 800da44:	dd3f      	ble.n	800dac6 <HAL_TIM_PeriodElapsedCallback+0x103e>
								dwl_tmp += -1 * CTRL_CONT_W * 0.2 * dif_r;			//a比例制御値を決定
 800da46:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7f2 fd62 	bl	8000514 <__aeabi_i2d>
 800da50:	4604      	mov	r4, r0
 800da52:	460d      	mov	r5, r1
 800da54:	4bb2      	ldr	r3, [pc, #712]	; (800dd20 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800da56:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7f2 fd5a 	bl	8000514 <__aeabi_i2d>
 800da60:	a3ab      	add	r3, pc, #684	; (adr r3, 800dd10 <HAL_TIM_PeriodElapsedCallback+0x1288>)
 800da62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da66:	f7f2 fdbf 	bl	80005e8 <__aeabi_dmul>
 800da6a:	4602      	mov	r2, r0
 800da6c:	460b      	mov	r3, r1
 800da6e:	4620      	mov	r0, r4
 800da70:	4629      	mov	r1, r5
 800da72:	f7f2 fc03 	bl	800027c <__adddf3>
 800da76:	4603      	mov	r3, r0
 800da78:	460c      	mov	r4, r1
 800da7a:	4618      	mov	r0, r3
 800da7c:	4621      	mov	r1, r4
 800da7e:	f7f3 f863 	bl	8000b48 <__aeabi_d2iz>
 800da82:	4603      	mov	r3, r0
 800da84:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += CTRL_CONT_W * 0.2 * dif_r;				//a比例制御値を決定
 800da86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7f2 fd42 	bl	8000514 <__aeabi_i2d>
 800da90:	4604      	mov	r4, r0
 800da92:	460d      	mov	r5, r1
 800da94:	4ba2      	ldr	r3, [pc, #648]	; (800dd20 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800da96:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da9a:	4618      	mov	r0, r3
 800da9c:	f7f2 fd3a 	bl	8000514 <__aeabi_i2d>
 800daa0:	a39d      	add	r3, pc, #628	; (adr r3, 800dd18 <HAL_TIM_PeriodElapsedCallback+0x1290>)
 800daa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa6:	f7f2 fd9f 	bl	80005e8 <__aeabi_dmul>
 800daaa:	4602      	mov	r2, r0
 800daac:	460b      	mov	r3, r1
 800daae:	4620      	mov	r0, r4
 800dab0:	4629      	mov	r1, r5
 800dab2:	f7f2 fbe3 	bl	800027c <__adddf3>
 800dab6:	4603      	mov	r3, r0
 800dab8:	460c      	mov	r4, r1
 800daba:	4618      	mov	r0, r3
 800dabc:	4621      	mov	r1, r4
 800dabe:	f7f3 f843 	bl	8000b48 <__aeabi_d2iz>
 800dac2:	4603      	mov	r3, r0
 800dac4:	84fb      	strh	r3, [r7, #38]	; 0x26
							}
							MF2.FLAG.WG = 1;
 800dac6:	4a97      	ldr	r2, [pc, #604]	; (800dd24 <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800dac8:	8813      	ldrh	r3, [r2, #0]
 800daca:	f043 0310 	orr.w	r3, r3, #16
 800dace:	8013      	strh	r3, [r2, #0]
 800dad0:	e004      	b.n	800dadc <HAL_TIM_PeriodElapsedCallback+0x1054>
						}else{
							MF2.FLAG.WG = 0;
 800dad2:	4a94      	ldr	r2, [pc, #592]	; (800dd24 <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800dad4:	8813      	ldrh	r3, [r2, #0]
 800dad6:	f36f 1304 	bfc	r3, #4, #1
 800dada:	8013      	strh	r3, [r2, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800dadc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800dae0:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800dae4:	dd08      	ble.n	800daf8 <HAL_TIM_PeriodElapsedCallback+0x1070>
 800dae6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800daea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800daee:	bfa8      	it	ge
 800daf0:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800daf4:	b21b      	sxth	r3, r3
 800daf6:	e000      	b.n	800dafa <HAL_TIM_PeriodElapsedCallback+0x1072>
 800daf8:	4b8b      	ldr	r3, [pc, #556]	; (800dd28 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800dafa:	4a8c      	ldr	r2, [pc, #560]	; (800dd2c <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800dafc:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800dafe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800db02:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800db06:	dd08      	ble.n	800db1a <HAL_TIM_PeriodElapsedCallback+0x1092>
 800db08:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800db0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db10:	bfa8      	it	ge
 800db12:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800db16:	b21b      	sxth	r3, r3
 800db18:	e000      	b.n	800db1c <HAL_TIM_PeriodElapsedCallback+0x1094>
 800db1a:	4b83      	ldr	r3, [pc, #524]	; (800dd28 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800db1c:	4a84      	ldr	r2, [pc, #528]	; (800dd30 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800db1e:	8013      	strh	r3, [r2, #0]
 800db20:	e006      	b.n	800db30 <HAL_TIM_PeriodElapsedCallback+0x10a8>
					}
				}else{
					//a制御フラグがなければ壁制御値0
					dwl = dwr = 0;
 800db22:	2100      	movs	r1, #0
 800db24:	4b82      	ldr	r3, [pc, #520]	; (800dd30 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800db26:	460a      	mov	r2, r1
 800db28:	801a      	strh	r2, [r3, #0]
 800db2a:	4b80      	ldr	r3, [pc, #512]	; (800dd2c <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800db2c:	460a      	mov	r2, r1
 800db2e:	801a      	strh	r2, [r3, #0]
				}

				if(MF.FLAG.GCTRL){
 800db30:	4b80      	ldr	r3, [pc, #512]	; (800dd34 <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800db32:	881b      	ldrh	r3, [r3, #0]
 800db34:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800db38:	b2db      	uxtb	r3, r3
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d03d      	beq.n	800dbba <HAL_TIM_PeriodElapsedCallback+0x1132>
				}

					dg = CTRL_CONT_G * gyro_read_z();			//a角速度制御
					dg = CTRL_CONT_G * degree_z;				//a角度制御
*/
					dg = CTRL_CONT_G * (target_degree_z - degree_z);		//a角度制御(目標角度はスタートを0度とし、旋回量と対応付け)
 800db3e:	4b7e      	ldr	r3, [pc, #504]	; (800dd38 <HAL_TIM_PeriodElapsedCallback+0x12b0>)
 800db40:	ed93 7a00 	vldr	s14, [r3]
 800db44:	4b7d      	ldr	r3, [pc, #500]	; (800dd3c <HAL_TIM_PeriodElapsedCallback+0x12b4>)
 800db46:	edd3 7a00 	vldr	s15, [r3]
 800db4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db4e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800dd40 <HAL_TIM_PeriodElapsedCallback+0x12b8>
 800db52:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db5a:	ee17 3a90 	vmov	r3, s15
 800db5e:	b21a      	sxth	r2, r3
 800db60:	4b78      	ldr	r3, [pc, #480]	; (800dd44 <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800db62:	801a      	strh	r2, [r3, #0]

					dg = max(min(CTRL_MAX_G, dg), -1 * CTRL_MAX_G);
 800db64:	4b77      	ldr	r3, [pc, #476]	; (800dd44 <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800db66:	881b      	ldrh	r3, [r3, #0]
 800db68:	b21b      	sxth	r3, r3
 800db6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db6e:	da05      	bge.n	800db7c <HAL_TIM_PeriodElapsedCallback+0x10f4>
 800db70:	4b74      	ldr	r3, [pc, #464]	; (800dd44 <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800db72:	881b      	ldrh	r3, [r3, #0]
 800db74:	b21b      	sxth	r3, r3
 800db76:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800db7a:	dd0c      	ble.n	800db96 <HAL_TIM_PeriodElapsedCallback+0x110e>
 800db7c:	4b71      	ldr	r3, [pc, #452]	; (800dd44 <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800db7e:	881b      	ldrh	r3, [r3, #0]
 800db80:	b21b      	sxth	r3, r3
 800db82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db86:	da03      	bge.n	800db90 <HAL_TIM_PeriodElapsedCallback+0x1108>
 800db88:	4b6e      	ldr	r3, [pc, #440]	; (800dd44 <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800db8a:	881b      	ldrh	r3, [r3, #0]
 800db8c:	b21b      	sxth	r3, r3
 800db8e:	e003      	b.n	800db98 <HAL_TIM_PeriodElapsedCallback+0x1110>
 800db90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800db94:	e000      	b.n	800db98 <HAL_TIM_PeriodElapsedCallback+0x1110>
 800db96:	4b64      	ldr	r3, [pc, #400]	; (800dd28 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800db98:	4a6a      	ldr	r2, [pc, #424]	; (800dd44 <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800db9a:	8013      	strh	r3, [r2, #0]
					dgl = -1*dg;
 800db9c:	4b69      	ldr	r3, [pc, #420]	; (800dd44 <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800db9e:	881b      	ldrh	r3, [r3, #0]
 800dba0:	b21b      	sxth	r3, r3
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	425b      	negs	r3, r3
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	b21a      	sxth	r2, r3
 800dbaa:	4b67      	ldr	r3, [pc, #412]	; (800dd48 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800dbac:	801a      	strh	r2, [r3, #0]
					dgr = dg;
 800dbae:	4b65      	ldr	r3, [pc, #404]	; (800dd44 <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800dbb0:	881b      	ldrh	r3, [r3, #0]
 800dbb2:	b21a      	sxth	r2, r3
 800dbb4:	4b65      	ldr	r3, [pc, #404]	; (800dd4c <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800dbb6:	801a      	strh	r2, [r3, #0]
				}else{
					//a制御フラグがなければ壁制御値0
					dgl = dgr = 0;
				}
				break;
 800dbb8:	e006      	b.n	800dbc8 <HAL_TIM_PeriodElapsedCallback+0x1140>
					dgl = dgr = 0;
 800dbba:	2100      	movs	r1, #0
 800dbbc:	4b63      	ldr	r3, [pc, #396]	; (800dd4c <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800dbbe:	460a      	mov	r2, r1
 800dbc0:	801a      	strh	r2, [r3, #0]
 800dbc2:	4b61      	ldr	r3, [pc, #388]	; (800dd48 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800dbc4:	460a      	mov	r2, r1
 800dbc6:	801a      	strh	r2, [r3, #0]
				break;
 800dbc8:	bf00      	nop
		}


		if(MF.FLAG.DRV){
 800dbca:	4b5a      	ldr	r3, [pc, #360]	; (800dd34 <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800dbcc:	881b      	ldrh	r3, [r3, #0]
 800dbce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	f000 81b2 	beq.w	800df3e <HAL_TIM_PeriodElapsedCallback+0x14b6>
			if(!MF2.FLAG.WG){
 800dbda:	4b52      	ldr	r3, [pc, #328]	; (800dd24 <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800dbdc:	881b      	ldrh	r3, [r3, #0]
 800dbde:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d130      	bne.n	800dc4a <HAL_TIM_PeriodElapsedCallback+0x11c2>
				pulse_l = pulse_l + dgl + dwl;
 800dbe8:	4b57      	ldr	r3, [pc, #348]	; (800dd48 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800dbea:	881b      	ldrh	r3, [r3, #0]
 800dbec:	b21b      	sxth	r3, r3
 800dbee:	ee07 3a90 	vmov	s15, r3
 800dbf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dbf6:	4b56      	ldr	r3, [pc, #344]	; (800dd50 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800dbf8:	edd3 7a00 	vldr	s15, [r3]
 800dbfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc00:	4b4a      	ldr	r3, [pc, #296]	; (800dd2c <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800dc02:	881b      	ldrh	r3, [r3, #0]
 800dc04:	b21b      	sxth	r3, r3
 800dc06:	ee07 3a90 	vmov	s15, r3
 800dc0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc12:	4b4f      	ldr	r3, [pc, #316]	; (800dd50 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800dc14:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800dc18:	4b4c      	ldr	r3, [pc, #304]	; (800dd4c <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800dc1a:	881b      	ldrh	r3, [r3, #0]
 800dc1c:	b21b      	sxth	r3, r3
 800dc1e:	ee07 3a90 	vmov	s15, r3
 800dc22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dc26:	4b4b      	ldr	r3, [pc, #300]	; (800dd54 <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800dc28:	edd3 7a00 	vldr	s15, [r3]
 800dc2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc30:	4b3f      	ldr	r3, [pc, #252]	; (800dd30 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800dc32:	881b      	ldrh	r3, [r3, #0]
 800dc34:	b21b      	sxth	r3, r3
 800dc36:	ee07 3a90 	vmov	s15, r3
 800dc3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc42:	4b44      	ldr	r3, [pc, #272]	; (800dd54 <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800dc44:	edc3 7a00 	vstr	s15, [r3]
 800dc48:	e02f      	b.n	800dcaa <HAL_TIM_PeriodElapsedCallback+0x1222>
//				pulse_l = pulse_l + dgl;
//				pulse_r = pulse_r + dgr;
			}else{
				pulse_l = pulse_l + dgl + dwl;
 800dc4a:	4b3f      	ldr	r3, [pc, #252]	; (800dd48 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800dc4c:	881b      	ldrh	r3, [r3, #0]
 800dc4e:	b21b      	sxth	r3, r3
 800dc50:	ee07 3a90 	vmov	s15, r3
 800dc54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dc58:	4b3d      	ldr	r3, [pc, #244]	; (800dd50 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800dc5a:	edd3 7a00 	vldr	s15, [r3]
 800dc5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc62:	4b32      	ldr	r3, [pc, #200]	; (800dd2c <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800dc64:	881b      	ldrh	r3, [r3, #0]
 800dc66:	b21b      	sxth	r3, r3
 800dc68:	ee07 3a90 	vmov	s15, r3
 800dc6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc74:	4b36      	ldr	r3, [pc, #216]	; (800dd50 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800dc76:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800dc7a:	4b34      	ldr	r3, [pc, #208]	; (800dd4c <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800dc7c:	881b      	ldrh	r3, [r3, #0]
 800dc7e:	b21b      	sxth	r3, r3
 800dc80:	ee07 3a90 	vmov	s15, r3
 800dc84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dc88:	4b32      	ldr	r3, [pc, #200]	; (800dd54 <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800dc8a:	edd3 7a00 	vldr	s15, [r3]
 800dc8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc92:	4b27      	ldr	r3, [pc, #156]	; (800dd30 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800dc94:	881b      	ldrh	r3, [r3, #0]
 800dc96:	b21b      	sxth	r3, r3
 800dc98:	ee07 3a90 	vmov	s15, r3
 800dc9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dca4:	4b2b      	ldr	r3, [pc, #172]	; (800dd54 <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800dca6:	edc3 7a00 	vstr	s15, [r3]
//				pulse_l = pulse_l + dwl;
//				pulse_r = pulse_r + dwr;
			}
			pulse_l = min(max(pulse_l, -1000), 1000);
 800dcaa:	4b29      	ldr	r3, [pc, #164]	; (800dd50 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800dcac:	edd3 7a00 	vldr	s15, [r3]
 800dcb0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800dd58 <HAL_TIM_PeriodElapsedCallback+0x12d0>
 800dcb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dcb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcbc:	bfcc      	ite	gt
 800dcbe:	2301      	movgt	r3, #1
 800dcc0:	2300      	movle	r3, #0
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	f083 0301 	eor.w	r3, r3, #1
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d111      	bne.n	800dcf2 <HAL_TIM_PeriodElapsedCallback+0x126a>
 800dcce:	4b20      	ldr	r3, [pc, #128]	; (800dd50 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800dcd0:	edd3 7a00 	vldr	s15, [r3]
 800dcd4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800dd5c <HAL_TIM_PeriodElapsedCallback+0x12d4>
 800dcd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dcdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dce0:	bfcc      	ite	gt
 800dce2:	2301      	movgt	r3, #1
 800dce4:	2300      	movle	r3, #0
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	f083 0301 	eor.w	r3, r3, #1
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d038      	beq.n	800dd64 <HAL_TIM_PeriodElapsedCallback+0x12dc>
 800dcf2:	4b17      	ldr	r3, [pc, #92]	; (800dd50 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800dcf4:	edd3 7a00 	vldr	s15, [r3]
 800dcf8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800dd58 <HAL_TIM_PeriodElapsedCallback+0x12d0>
 800dcfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd04:	dd2c      	ble.n	800dd60 <HAL_TIM_PeriodElapsedCallback+0x12d8>
 800dd06:	4b12      	ldr	r3, [pc, #72]	; (800dd50 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	e02c      	b.n	800dd66 <HAL_TIM_PeriodElapsedCallback+0x12de>
 800dd0c:	f3af 8000 	nop.w
 800dd10:	33333334 	.word	0x33333334
 800dd14:	bfc33333 	.word	0xbfc33333
 800dd18:	33333334 	.word	0x33333334
 800dd1c:	3fc33333 	.word	0x3fc33333
 800dd20:	20000bb2 	.word	0x20000bb2
 800dd24:	20000f64 	.word	0x20000f64
 800dd28:	fffffc18 	.word	0xfffffc18
 800dd2c:	20000af8 	.word	0x20000af8
 800dd30:	20000f74 	.word	0x20000f74
 800dd34:	20000f68 	.word	0x20000f68
 800dd38:	20000bf8 	.word	0x20000bf8
 800dd3c:	20000b5c 	.word	0x20000b5c
 800dd40:	43480000 	.word	0x43480000
 800dd44:	20000c10 	.word	0x20000c10
 800dd48:	2000019c 	.word	0x2000019c
 800dd4c:	20000b4e 	.word	0x20000b4e
 800dd50:	20000ba8 	.word	0x20000ba8
 800dd54:	20000780 	.word	0x20000780
 800dd58:	c47a0000 	.word	0xc47a0000
 800dd5c:	447a0000 	.word	0x447a0000
 800dd60:	4bb7      	ldr	r3, [pc, #732]	; (800e040 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 800dd62:	e000      	b.n	800dd66 <HAL_TIM_PeriodElapsedCallback+0x12de>
 800dd64:	4bb7      	ldr	r3, [pc, #732]	; (800e044 <HAL_TIM_PeriodElapsedCallback+0x15bc>)
 800dd66:	4ab8      	ldr	r2, [pc, #736]	; (800e048 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800dd68:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -1000), 1000);
 800dd6a:	4bb8      	ldr	r3, [pc, #736]	; (800e04c <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800dd6c:	edd3 7a00 	vldr	s15, [r3]
 800dd70:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800e050 <HAL_TIM_PeriodElapsedCallback+0x15c8>
 800dd74:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dd78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd7c:	bfcc      	ite	gt
 800dd7e:	2301      	movgt	r3, #1
 800dd80:	2300      	movle	r3, #0
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	f083 0301 	eor.w	r3, r3, #1
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d111      	bne.n	800ddb2 <HAL_TIM_PeriodElapsedCallback+0x132a>
 800dd8e:	4baf      	ldr	r3, [pc, #700]	; (800e04c <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800dd90:	edd3 7a00 	vldr	s15, [r3]
 800dd94:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800e054 <HAL_TIM_PeriodElapsedCallback+0x15cc>
 800dd98:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dd9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dda0:	bfcc      	ite	gt
 800dda2:	2301      	movgt	r3, #1
 800dda4:	2300      	movle	r3, #0
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	f083 0301 	eor.w	r3, r3, #1
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d00e      	beq.n	800ddd0 <HAL_TIM_PeriodElapsedCallback+0x1348>
 800ddb2:	4ba6      	ldr	r3, [pc, #664]	; (800e04c <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800ddb4:	edd3 7a00 	vldr	s15, [r3]
 800ddb8:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800e050 <HAL_TIM_PeriodElapsedCallback+0x15c8>
 800ddbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ddc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddc4:	dd02      	ble.n	800ddcc <HAL_TIM_PeriodElapsedCallback+0x1344>
 800ddc6:	4ba1      	ldr	r3, [pc, #644]	; (800e04c <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	e002      	b.n	800ddd2 <HAL_TIM_PeriodElapsedCallback+0x134a>
 800ddcc:	4b9c      	ldr	r3, [pc, #624]	; (800e040 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 800ddce:	e000      	b.n	800ddd2 <HAL_TIM_PeriodElapsedCallback+0x134a>
 800ddd0:	4b9c      	ldr	r3, [pc, #624]	; (800e044 <HAL_TIM_PeriodElapsedCallback+0x15bc>)
 800ddd2:	4a9e      	ldr	r2, [pc, #632]	; (800e04c <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800ddd4:	6013      	str	r3, [r2, #0]

			if(pulse_l > 0){
 800ddd6:	4b9c      	ldr	r3, [pc, #624]	; (800e048 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800ddd8:	edd3 7a00 	vldr	s15, [r3]
 800dddc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dde4:	dd17      	ble.n	800de16 <HAL_TIM_PeriodElapsedCallback+0x138e>
				drive_dir(0, 0);
 800dde6:	2100      	movs	r1, #0
 800dde8:	2000      	movs	r0, #0
 800ddea:	f7f7 f809 	bl	8004e00 <drive_dir>
				ConfigOC.Pulse = pulse_l;
 800ddee:	4b96      	ldr	r3, [pc, #600]	; (800e048 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800ddf0:	edd3 7a00 	vldr	s15, [r3]
 800ddf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddf8:	ee17 3a90 	vmov	r3, s15
 800ddfc:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800ddfe:	f107 0308 	add.w	r3, r7, #8
 800de02:	2200      	movs	r2, #0
 800de04:	4619      	mov	r1, r3
 800de06:	4894      	ldr	r0, [pc, #592]	; (800e058 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800de08:	f7f5 fee0 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800de0c:	2100      	movs	r1, #0
 800de0e:	4892      	ldr	r0, [pc, #584]	; (800e058 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800de10:	f7f5 fc74 	bl	80036fc <HAL_TIM_PWM_Start>
 800de14:	e020      	b.n	800de58 <HAL_TIM_PeriodElapsedCallback+0x13d0>
			}
			else if(pulse_l < 0){
 800de16:	4b8c      	ldr	r3, [pc, #560]	; (800e048 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800de18:	edd3 7a00 	vldr	s15, [r3]
 800de1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de24:	d518      	bpl.n	800de58 <HAL_TIM_PeriodElapsedCallback+0x13d0>
				drive_dir(0, 1);
 800de26:	2101      	movs	r1, #1
 800de28:	2000      	movs	r0, #0
 800de2a:	f7f6 ffe9 	bl	8004e00 <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 800de2e:	4b86      	ldr	r3, [pc, #536]	; (800e048 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800de30:	edd3 7a00 	vldr	s15, [r3]
 800de34:	eef1 7a67 	vneg.f32	s15, s15
 800de38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de3c:	ee17 3a90 	vmov	r3, s15
 800de40:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800de42:	f107 0308 	add.w	r3, r7, #8
 800de46:	2200      	movs	r2, #0
 800de48:	4619      	mov	r1, r3
 800de4a:	4883      	ldr	r0, [pc, #524]	; (800e058 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800de4c:	f7f5 febe 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800de50:	2100      	movs	r1, #0
 800de52:	4881      	ldr	r0, [pc, #516]	; (800e058 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800de54:	f7f5 fc52 	bl	80036fc <HAL_TIM_PWM_Start>
			}

			if(pulse_r > 0){
 800de58:	4b7c      	ldr	r3, [pc, #496]	; (800e04c <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800de5a:	edd3 7a00 	vldr	s15, [r3]
 800de5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de66:	dd17      	ble.n	800de98 <HAL_TIM_PeriodElapsedCallback+0x1410>
				drive_dir(1, 0);
 800de68:	2100      	movs	r1, #0
 800de6a:	2001      	movs	r0, #1
 800de6c:	f7f6 ffc8 	bl	8004e00 <drive_dir>
				ConfigOC.Pulse = pulse_r;
 800de70:	4b76      	ldr	r3, [pc, #472]	; (800e04c <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800de72:	edd3 7a00 	vldr	s15, [r3]
 800de76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de7a:	ee17 3a90 	vmov	r3, s15
 800de7e:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800de80:	f107 0308 	add.w	r3, r7, #8
 800de84:	220c      	movs	r2, #12
 800de86:	4619      	mov	r1, r3
 800de88:	4873      	ldr	r0, [pc, #460]	; (800e058 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800de8a:	f7f5 fe9f 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800de8e:	210c      	movs	r1, #12
 800de90:	4871      	ldr	r0, [pc, #452]	; (800e058 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800de92:	f7f5 fc33 	bl	80036fc <HAL_TIM_PWM_Start>
 800de96:	e020      	b.n	800deda <HAL_TIM_PeriodElapsedCallback+0x1452>
			}
			else if(pulse_r < 0){
 800de98:	4b6c      	ldr	r3, [pc, #432]	; (800e04c <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800de9a:	edd3 7a00 	vldr	s15, [r3]
 800de9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dea6:	d518      	bpl.n	800deda <HAL_TIM_PeriodElapsedCallback+0x1452>
				drive_dir(1, 1);
 800dea8:	2101      	movs	r1, #1
 800deaa:	2001      	movs	r0, #1
 800deac:	f7f6 ffa8 	bl	8004e00 <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 800deb0:	4b66      	ldr	r3, [pc, #408]	; (800e04c <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800deb2:	edd3 7a00 	vldr	s15, [r3]
 800deb6:	eef1 7a67 	vneg.f32	s15, s15
 800deba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800debe:	ee17 3a90 	vmov	r3, s15
 800dec2:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800dec4:	f107 0308 	add.w	r3, r7, #8
 800dec8:	220c      	movs	r2, #12
 800deca:	4619      	mov	r1, r3
 800decc:	4862      	ldr	r0, [pc, #392]	; (800e058 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800dece:	f7f5 fe7d 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800ded2:	210c      	movs	r1, #12
 800ded4:	4860      	ldr	r0, [pc, #384]	; (800e058 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800ded6:	f7f5 fc11 	bl	80036fc <HAL_TIM_PWM_Start>
			}
			//wall check
//			if(!MF.FLAG.SCND){
				//----look forward----
				if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 800deda:	4b60      	ldr	r3, [pc, #384]	; (800e05c <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	2b78      	cmp	r3, #120	; 0x78
 800dee0:	d803      	bhi.n	800deea <HAL_TIM_PeriodElapsedCallback+0x1462>
 800dee2:	4b5f      	ldr	r3, [pc, #380]	; (800e060 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2bc8      	cmp	r3, #200	; 0xc8
 800dee8:	d905      	bls.n	800def6 <HAL_TIM_PeriodElapsedCallback+0x146e>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800deea:	2201      	movs	r2, #1
 800deec:	2140      	movs	r1, #64	; 0x40
 800deee:	485d      	ldr	r0, [pc, #372]	; (800e064 <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800def0:	f7f4 fa08 	bl	8002304 <HAL_GPIO_WritePin>
 800def4:	e004      	b.n	800df00 <HAL_TIM_PeriodElapsedCallback+0x1478>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800def6:	2200      	movs	r2, #0
 800def8:	2140      	movs	r1, #64	; 0x40
 800defa:	485a      	ldr	r0, [pc, #360]	; (800e064 <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800defc:	f7f4 fa02 	bl	8002304 <HAL_GPIO_WritePin>
				}
				//----look forwardL----
				if(ad_fl > WALL_BASE_FL){
 800df00:	4b57      	ldr	r3, [pc, #348]	; (800e060 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2bc8      	cmp	r3, #200	; 0xc8
 800df06:	d905      	bls.n	800df14 <HAL_TIM_PeriodElapsedCallback+0x148c>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800df08:	2201      	movs	r2, #1
 800df0a:	2110      	movs	r1, #16
 800df0c:	4855      	ldr	r0, [pc, #340]	; (800e064 <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800df0e:	f7f4 f9f9 	bl	8002304 <HAL_GPIO_WritePin>
 800df12:	e004      	b.n	800df1e <HAL_TIM_PeriodElapsedCallback+0x1496>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800df14:	2200      	movs	r2, #0
 800df16:	2110      	movs	r1, #16
 800df18:	4852      	ldr	r0, [pc, #328]	; (800e064 <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800df1a:	f7f4 f9f3 	bl	8002304 <HAL_GPIO_WritePin>
				}
				//----look forward-R---
				if(ad_fr > WALL_BASE_FR){
 800df1e:	4b4f      	ldr	r3, [pc, #316]	; (800e05c <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2b78      	cmp	r3, #120	; 0x78
 800df24:	d905      	bls.n	800df32 <HAL_TIM_PeriodElapsedCallback+0x14aa>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800df26:	2201      	movs	r2, #1
 800df28:	2180      	movs	r1, #128	; 0x80
 800df2a:	484e      	ldr	r0, [pc, #312]	; (800e064 <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800df2c:	f7f4 f9ea 	bl	8002304 <HAL_GPIO_WritePin>
 800df30:	e00d      	b.n	800df4e <HAL_TIM_PeriodElapsedCallback+0x14c6>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800df32:	2200      	movs	r2, #0
 800df34:	2180      	movs	r1, #128	; 0x80
 800df36:	484b      	ldr	r0, [pc, #300]	; (800e064 <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800df38:	f7f4 f9e4 	bl	8002304 <HAL_GPIO_WritePin>
 800df3c:	e007      	b.n	800df4e <HAL_TIM_PeriodElapsedCallback+0x14c6>
				}
		}else{
			drive_dir(0, 2);
 800df3e:	2102      	movs	r1, #2
 800df40:	2000      	movs	r0, #0
 800df42:	f7f6 ff5d 	bl	8004e00 <drive_dir>
			drive_dir(1, 2);
 800df46:	2102      	movs	r1, #2
 800df48:	2001      	movs	r0, #1
 800df4a:	f7f6 ff59 	bl	8004e00 <drive_dir>
		}


		//wall check
		//----look right----
		if(ad_r > WALL_BASE_R){
 800df4e:	4b46      	ldr	r3, [pc, #280]	; (800e068 <HAL_TIM_PeriodElapsedCallback+0x15e0>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2b78      	cmp	r3, #120	; 0x78
 800df54:	d906      	bls.n	800df64 <HAL_TIM_PeriodElapsedCallback+0x14dc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800df56:	2201      	movs	r2, #1
 800df58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800df5c:	4843      	ldr	r0, [pc, #268]	; (800e06c <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800df5e:	f7f4 f9d1 	bl	8002304 <HAL_GPIO_WritePin>
 800df62:	e005      	b.n	800df70 <HAL_TIM_PeriodElapsedCallback+0x14e8>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800df64:	2200      	movs	r2, #0
 800df66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800df6a:	4840      	ldr	r0, [pc, #256]	; (800e06c <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800df6c:	f7f4 f9ca 	bl	8002304 <HAL_GPIO_WritePin>
		}
		//----look left----
		if(ad_l > WALL_BASE_L){
 800df70:	4b3f      	ldr	r3, [pc, #252]	; (800e070 <HAL_TIM_PeriodElapsedCallback+0x15e8>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b8c      	cmp	r3, #140	; 0x8c
 800df76:	d905      	bls.n	800df84 <HAL_TIM_PeriodElapsedCallback+0x14fc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800df78:	2201      	movs	r2, #1
 800df7a:	2104      	movs	r1, #4
 800df7c:	483d      	ldr	r0, [pc, #244]	; (800e074 <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800df7e:	f7f4 f9c1 	bl	8002304 <HAL_GPIO_WritePin>
 800df82:	e004      	b.n	800df8e <HAL_TIM_PeriodElapsedCallback+0x1506>
		}else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800df84:	2200      	movs	r2, #0
 800df86:	2104      	movs	r1, #4
 800df88:	483a      	ldr	r0, [pc, #232]	; (800e074 <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800df8a:	f7f4 f9bb 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//battery check
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {	//2.1V以下で赤ランプ点灯=>LiPoが約7Vを下回るとランプ点灯
 800df8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800df92:	4836      	ldr	r0, [pc, #216]	; (800e06c <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800df94:	f7f4 f99e 	bl	80022d4 <HAL_GPIO_ReadPin>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d105      	bne.n	800dfaa <HAL_TIM_PeriodElapsedCallback+0x1522>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800df9e:	2201      	movs	r2, #1
 800dfa0:	2108      	movs	r1, #8
 800dfa2:	4834      	ldr	r0, [pc, #208]	; (800e074 <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800dfa4:	f7f4 f9ae 	bl	8002304 <HAL_GPIO_WritePin>
 800dfa8:	e004      	b.n	800dfb4 <HAL_TIM_PeriodElapsedCallback+0x152c>
		} else {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800dfaa:	2200      	movs	r2, #0
 800dfac:	2108      	movs	r1, #8
 800dfae:	4831      	ldr	r0, [pc, #196]	; (800e074 <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800dfb0:	f7f4 f9a8 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//fail safe
		if(degree_z >= target_degree_z+270 || degree_z <= target_degree_z-270 || dist_r > 500 || dist_l > 500){	//270度以上回転発生でFail Safe
 800dfb4:	4b30      	ldr	r3, [pc, #192]	; (800e078 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 800dfb6:	edd3 7a00 	vldr	s15, [r3]
 800dfba:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800e07c <HAL_TIM_PeriodElapsedCallback+0x15f4>
 800dfbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dfc2:	4b2f      	ldr	r3, [pc, #188]	; (800e080 <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 800dfc4:	edd3 7a00 	vldr	s15, [r3]
 800dfc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dfcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfd0:	d923      	bls.n	800e01a <HAL_TIM_PeriodElapsedCallback+0x1592>
 800dfd2:	4b29      	ldr	r3, [pc, #164]	; (800e078 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 800dfd4:	edd3 7a00 	vldr	s15, [r3]
 800dfd8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800e07c <HAL_TIM_PeriodElapsedCallback+0x15f4>
 800dfdc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800dfe0:	4b27      	ldr	r3, [pc, #156]	; (800e080 <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 800dfe2:	edd3 7a00 	vldr	s15, [r3]
 800dfe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dfea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfee:	da14      	bge.n	800e01a <HAL_TIM_PeriodElapsedCallback+0x1592>
 800dff0:	4b24      	ldr	r3, [pc, #144]	; (800e084 <HAL_TIM_PeriodElapsedCallback+0x15fc>)
 800dff2:	edd3 7a00 	vldr	s15, [r3]
 800dff6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800e088 <HAL_TIM_PeriodElapsedCallback+0x1600>
 800dffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e002:	dc0a      	bgt.n	800e01a <HAL_TIM_PeriodElapsedCallback+0x1592>
 800e004:	4b21      	ldr	r3, [pc, #132]	; (800e08c <HAL_TIM_PeriodElapsedCallback+0x1604>)
 800e006:	edd3 7a00 	vldr	s15, [r3]
 800e00a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800e088 <HAL_TIM_PeriodElapsedCallback+0x1600>
 800e00e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e016:	dc00      	bgt.n	800e01a <HAL_TIM_PeriodElapsedCallback+0x1592>
			   drive_dir(1, 2);
			   full_led_write(RED);
		   }
		}
	}
}
 800e018:	e00b      	b.n	800e032 <HAL_TIM_PeriodElapsedCallback+0x15aa>
			   drive_dir(0, 2);
 800e01a:	2102      	movs	r1, #2
 800e01c:	2000      	movs	r0, #0
 800e01e:	f7f6 feef 	bl	8004e00 <drive_dir>
			   drive_dir(1, 2);
 800e022:	2102      	movs	r1, #2
 800e024:	2001      	movs	r0, #1
 800e026:	f7f6 feeb 	bl	8004e00 <drive_dir>
			   full_led_write(RED);
 800e02a:	2001      	movs	r0, #1
 800e02c:	f003 fdf4 	bl	8011c18 <full_led_write>
			   drive_dir(0, 2);
 800e030:	e7f3      	b.n	800e01a <HAL_TIM_PeriodElapsedCallback+0x1592>
}
 800e032:	bf00      	nop
 800e034:	3730      	adds	r7, #48	; 0x30
 800e036:	46bd      	mov	sp, r7
 800e038:	ecbd 8b02 	vpop	{d8}
 800e03c:	bdb0      	pop	{r4, r5, r7, pc}
 800e03e:	bf00      	nop
 800e040:	c47a0000 	.word	0xc47a0000
 800e044:	447a0000 	.word	0x447a0000
 800e048:	20000ba8 	.word	0x20000ba8
 800e04c:	20000780 	.word	0x20000780
 800e050:	c47a0000 	.word	0xc47a0000
 800e054:	447a0000 	.word	0x447a0000
 800e058:	20000c14 	.word	0x20000c14
 800e05c:	20000c00 	.word	0x20000c00
 800e060:	20000d54 	.word	0x20000d54
 800e064:	40020000 	.word	0x40020000
 800e068:	20000f60 	.word	0x20000f60
 800e06c:	40020400 	.word	0x40020400
 800e070:	20000afc 	.word	0x20000afc
 800e074:	40020800 	.word	0x40020800
 800e078:	20000bf8 	.word	0x20000bf8
 800e07c:	43870000 	.word	0x43870000
 800e080:	20000b5c 	.word	0x20000b5c
 800e084:	20000aec 	.word	0x20000aec
 800e088:	43fa0000 	.word	0x43fa0000
 800e08c:	200015c4 	.word	0x200015c4

0800e090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e096:	f7f2 ff4f 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e09a:	f000 f917 	bl	800e2cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e09e:	f000 fc09 	bl	800e8b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800e0a2:	f000 f97d 	bl	800e3a0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800e0a6:	f000 fa03 	bl	800e4b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800e0aa:	f000 fa81 	bl	800e5b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800e0ae:	f000 faf5 	bl	800e69c <MX_TIM4_Init>
  MX_TIM6_Init();
 800e0b2:	f000 fb47 	bl	800e744 <MX_TIM6_Init>
  MX_TIM8_Init();
 800e0b6:	f000 fb7b 	bl	800e7b0 <MX_TIM8_Init>
  MX_SPI3_Init();
 800e0ba:	f000 f9c3 	bl	800e444 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800e0be:	f000 fbcf 	bl	800e860 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  drive_init();
 800e0c2:	f7f6 fdcb 	bl	8004c5c <drive_init>
  gyro_init();
 800e0c6:	f7fe fb01 	bl	800c6cc <gyro_init>
  search_init();
 800e0ca:	f000 fd21 	bl	800eb10 <search_init>
  sensor_init();
 800e0ce:	f003 fce3 	bl	8011a98 <sensor_init>

  printf("*** Welcome to WMMC ! ***\n");
 800e0d2:	4870      	ldr	r0, [pc, #448]	; (800e294 <main+0x204>)
 800e0d4:	f004 fba8 	bl	8012828 <puts>

  setbuf(stdout, NULL);
 800e0d8:	4b6f      	ldr	r3, [pc, #444]	; (800e298 <main+0x208>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	689b      	ldr	r3, [r3, #8]
 800e0de:	2100      	movs	r1, #0
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f004 fba9 	bl	8012838 <setbuf>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800e0e6:	213c      	movs	r1, #60	; 0x3c
 800e0e8:	486c      	ldr	r0, [pc, #432]	; (800e29c <main+0x20c>)
 800e0ea:	f7f5 fc2f 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800e0ee:	213c      	movs	r1, #60	; 0x3c
 800e0f0:	486b      	ldr	r0, [pc, #428]	; (800e2a0 <main+0x210>)
 800e0f2:	f7f5 fc2b 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800e0f6:	486b      	ldr	r0, [pc, #428]	; (800e2a4 <main+0x214>)
 800e0f8:	f7f5 faa7 	bl	800364a <HAL_TIM_Base_Start_IT>

  int mode = 0;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	607b      	str	r3, [r7, #4]
  printf("Mode : %d\n", mode);
 800e100:	6879      	ldr	r1, [r7, #4]
 800e102:	4869      	ldr	r0, [pc, #420]	; (800e2a8 <main+0x218>)
 800e104:	f004 fb1c 	bl	8012740 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	b2db      	uxtb	r3, r3
 800e10c:	f003 0301 	and.w	r3, r3, #1
 800e110:	b2d8      	uxtb	r0, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	b2db      	uxtb	r3, r3
 800e116:	f003 0302 	and.w	r3, r3, #2
 800e11a:	b2d9      	uxtb	r1, r3
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	f003 0304 	and.w	r3, r3, #4
 800e124:	b2db      	uxtb	r3, r3
 800e126:	461a      	mov	r2, r3
 800e128:	f003 fd3c 	bl	8011ba4 <led_write>
	  if(dist_r >= 20){
 800e12c:	4b5f      	ldr	r3, [pc, #380]	; (800e2ac <main+0x21c>)
 800e12e:	edd3 7a00 	vldr	s15, [r3]
 800e132:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800e136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e13e:	db0f      	blt.n	800e160 <main+0xd0>
		  mode++;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	3301      	adds	r3, #1
 800e144:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800e146:	4b59      	ldr	r3, [pc, #356]	; (800e2ac <main+0x21c>)
 800e148:	f04f 0200 	mov.w	r2, #0
 800e14c:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2b07      	cmp	r3, #7
 800e152:	dd01      	ble.n	800e158 <main+0xc8>
			  mode = 0;
 800e154:	2300      	movs	r3, #0
 800e156:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800e158:	6879      	ldr	r1, [r7, #4]
 800e15a:	4853      	ldr	r0, [pc, #332]	; (800e2a8 <main+0x218>)
 800e15c:	f004 faf0 	bl	8012740 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(dist_r <= -20){
 800e160:	4b52      	ldr	r3, [pc, #328]	; (800e2ac <main+0x21c>)
 800e162:	edd3 7a00 	vldr	s15, [r3]
 800e166:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800e16a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e172:	d80f      	bhi.n	800e194 <main+0x104>
		  mode--;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	3b01      	subs	r3, #1
 800e178:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800e17a:	4b4c      	ldr	r3, [pc, #304]	; (800e2ac <main+0x21c>)
 800e17c:	f04f 0200 	mov.w	r2, #0
 800e180:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2b00      	cmp	r3, #0
 800e186:	da01      	bge.n	800e18c <main+0xfc>
			  mode = 7;
 800e188:	2307      	movs	r3, #7
 800e18a:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800e18c:	6879      	ldr	r1, [r7, #4]
 800e18e:	4846      	ldr	r0, [pc, #280]	; (800e2a8 <main+0x218>)
 800e190:	f004 fad6 	bl	8012740 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800e194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e198:	4845      	ldr	r0, [pc, #276]	; (800e2b0 <main+0x220>)
 800e19a:	f7f4 f89b 	bl	80022d4 <HAL_GPIO_ReadPin>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d1b1      	bne.n	800e108 <main+0x78>
		  HAL_Delay(50);
 800e1a4:	2032      	movs	r0, #50	; 0x32
 800e1a6:	f7f2 ff39 	bl	800101c <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800e1aa:	bf00      	nop
 800e1ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e1b0:	483f      	ldr	r0, [pc, #252]	; (800e2b0 <main+0x220>)
 800e1b2:	f7f4 f88f 	bl	80022d4 <HAL_GPIO_ReadPin>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d0f7      	beq.n	800e1ac <main+0x11c>
		  switch(mode){
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2b07      	cmp	r3, #7
 800e1c0:	d8a2      	bhi.n	800e108 <main+0x78>
 800e1c2:	a201      	add	r2, pc, #4	; (adr r2, 800e1c8 <main+0x138>)
 800e1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1c8:	0800e1e9 	.word	0x0800e1e9
 800e1cc:	0800e1f3 	.word	0x0800e1f3
 800e1d0:	0800e1ff 	.word	0x0800e1ff
 800e1d4:	0800e20b 	.word	0x0800e20b
 800e1d8:	0800e217 	.word	0x0800e217
 800e1dc:	0800e21d 	.word	0x0800e21d
 800e1e0:	0800e249 	.word	0x0800e249
 800e1e4:	0800e28b 	.word	0x0800e28b

		  	  case 0:
		  		  HAL_Delay(5000);
 800e1e8:	f241 3088 	movw	r0, #5000	; 0x1388
 800e1ec:	f7f2 ff16 	bl	800101c <HAL_Delay>
		  		  break;
 800e1f0:	e04e      	b.n	800e290 <main+0x200>

		  	  case 1:
		  		  //----a超新地走行----
		  		  printf("Simple Run.\n");
 800e1f2:	4830      	ldr	r0, [pc, #192]	; (800e2b4 <main+0x224>)
 800e1f4:	f004 fb18 	bl	8012828 <puts>
		  		  //MF.FLAG.WEDGE = 1;
//		  		  simple_run();
		  		  perfect_run();
 800e1f8:	f7fd f816 	bl	800b228 <perfect_run>
		  		  break;
 800e1fc:	e048      	b.n	800e290 <main+0x200>

		  	  case 2:
		  		  //----aスラローム走行----
		  		  printf("slalom Run.\n");
 800e1fe:	482e      	ldr	r0, [pc, #184]	; (800e2b8 <main+0x228>)
 800e200:	f004 fb12 	bl	8012828 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  slalom_run();
 800e204:	f7fc fd9a 	bl	800ad3c <slalom_run>
		  		  break;
 800e208:	e042      	b.n	800e290 <main+0x200>

		  	  case 3:
		  		  //----aスラローム走行&pass圧縮----
				  printf("First Run. (Slalom)\n");
 800e20a:	482c      	ldr	r0, [pc, #176]	; (800e2bc <main+0x22c>)
 800e20c:	f004 fb0c 	bl	8012828 <puts>
		  		  pass_test();
 800e210:	f7fb fec8 	bl	8009fa4 <pass_test>
		  		  break;
 800e214:	e03c      	b.n	800e290 <main+0x200>

		  	  case 4:
		  		  //----aテストモード選択----
		  		  test_select();
 800e216:	f7fb f931 	bl	800947c <test_select>
		  		  break;
 800e21a:	e039      	b.n	800e290 <main+0x200>

		  	  case 5:
		  		  //----sensor check----
		  		  printf("Sensor Check.\n");
 800e21c:	4828      	ldr	r0, [pc, #160]	; (800e2c0 <main+0x230>)
 800e21e:	f004 fb03 	bl	8012828 <puts>
		  		  sensor_test();
 800e222:	f003 fdb5 	bl	8011d90 <sensor_test>
		  		  break;
 800e226:	e033      	b.n	800e290 <main+0x200>

		  	  case 6:
		  		  //----pitagola sound----
				  while(ad_fl <= WALL_BASE_FL){
					  led_write(1, 1, 1);
 800e228:	2201      	movs	r2, #1
 800e22a:	2101      	movs	r1, #1
 800e22c:	2001      	movs	r0, #1
 800e22e:	f003 fcb9 	bl	8011ba4 <led_write>
					  HAL_Delay(200);
 800e232:	20c8      	movs	r0, #200	; 0xc8
 800e234:	f7f2 fef2 	bl	800101c <HAL_Delay>
					  led_write(0, 0, 0);
 800e238:	2200      	movs	r2, #0
 800e23a:	2100      	movs	r1, #0
 800e23c:	2000      	movs	r0, #0
 800e23e:	f003 fcb1 	bl	8011ba4 <led_write>
					  HAL_Delay(200);
 800e242:	20c8      	movs	r0, #200	; 0xc8
 800e244:	f7f2 feea 	bl	800101c <HAL_Delay>
				  while(ad_fl <= WALL_BASE_FL){
 800e248:	4b1e      	ldr	r3, [pc, #120]	; (800e2c4 <main+0x234>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2bc8      	cmp	r3, #200	; 0xc8
 800e24e:	d9eb      	bls.n	800e228 <main+0x198>
				  }
				  HAL_Delay(200);
 800e250:	20c8      	movs	r0, #200	; 0xc8
 800e252:	f7f2 fee3 	bl	800101c <HAL_Delay>
		  		  }
				  HAL_Delay(2000);
				  for(int i=0; i<m_ok; i++){
		  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
		  		  }
*/				  HAL_Delay(2000);
 800e256:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e25a:	f7f2 fedf 	bl	800101c <HAL_Delay>
				  for(int i=0; i<m_goal; i++){
 800e25e:	2300      	movs	r3, #0
 800e260:	603b      	str	r3, [r7, #0]
 800e262:	e00e      	b.n	800e282 <main+0x1f2>
		  			  buzzer(mario_goal[i][0], mario_goal[i][1]);
 800e264:	4a18      	ldr	r2, [pc, #96]	; (800e2c8 <main+0x238>)
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e26c:	4a16      	ldr	r2, [pc, #88]	; (800e2c8 <main+0x238>)
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	00db      	lsls	r3, r3, #3
 800e272:	4413      	add	r3, r2
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	4619      	mov	r1, r3
 800e278:	f000 fbda 	bl	800ea30 <buzzer>
				  for(int i=0; i<m_goal; i++){
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	3301      	adds	r3, #1
 800e280:	603b      	str	r3, [r7, #0]
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	2b0e      	cmp	r3, #14
 800e286:	dded      	ble.n	800e264 <main+0x1d4>
		  		  }
		  		  break;
 800e288:	e002      	b.n	800e290 <main+0x200>
		  		  //MF.FLAG.WEDGE = 1;
/*		  		  for(int i=0; i<m_select; i++){
		  			  buzzer(mario_select[i][0], mario_select[i][1]);
		  		  }
*///		  		  perfect_run();
		  		  perfect_slalom();
 800e28a:	f7fd fa9d 	bl	800b7c8 <perfect_slalom>
		  		  break;
 800e28e:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800e290:	e73a      	b.n	800e108 <main+0x78>
 800e292:	bf00      	nop
 800e294:	08013d5c 	.word	0x08013d5c
 800e298:	20000084 	.word	0x20000084
 800e29c:	2000030c 	.word	0x2000030c
 800e2a0:	200002cc 	.word	0x200002cc
 800e2a4:	20000bb4 	.word	0x20000bb4
 800e2a8:	08013d78 	.word	0x08013d78
 800e2ac:	20000aec 	.word	0x20000aec
 800e2b0:	40020000 	.word	0x40020000
 800e2b4:	08013d84 	.word	0x08013d84
 800e2b8:	08013d90 	.word	0x08013d90
 800e2bc:	08013d9c 	.word	0x08013d9c
 800e2c0:	08013db0 	.word	0x08013db0
 800e2c4:	20000d54 	.word	0x20000d54
 800e2c8:	20000008 	.word	0x20000008

0800e2cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b094      	sub	sp, #80	; 0x50
 800e2d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e2d2:	f107 0320 	add.w	r3, r7, #32
 800e2d6:	2230      	movs	r2, #48	; 0x30
 800e2d8:	2100      	movs	r1, #0
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f004 fa28 	bl	8012730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e2e0:	f107 030c 	add.w	r3, r7, #12
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	601a      	str	r2, [r3, #0]
 800e2e8:	605a      	str	r2, [r3, #4]
 800e2ea:	609a      	str	r2, [r3, #8]
 800e2ec:	60da      	str	r2, [r3, #12]
 800e2ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	60bb      	str	r3, [r7, #8]
 800e2f4:	4b28      	ldr	r3, [pc, #160]	; (800e398 <SystemClock_Config+0xcc>)
 800e2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2f8:	4a27      	ldr	r2, [pc, #156]	; (800e398 <SystemClock_Config+0xcc>)
 800e2fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2fe:	6413      	str	r3, [r2, #64]	; 0x40
 800e300:	4b25      	ldr	r3, [pc, #148]	; (800e398 <SystemClock_Config+0xcc>)
 800e302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e308:	60bb      	str	r3, [r7, #8]
 800e30a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e30c:	2300      	movs	r3, #0
 800e30e:	607b      	str	r3, [r7, #4]
 800e310:	4b22      	ldr	r3, [pc, #136]	; (800e39c <SystemClock_Config+0xd0>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4a21      	ldr	r2, [pc, #132]	; (800e39c <SystemClock_Config+0xd0>)
 800e316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e31a:	6013      	str	r3, [r2, #0]
 800e31c:	4b1f      	ldr	r3, [pc, #124]	; (800e39c <SystemClock_Config+0xd0>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e324:	607b      	str	r3, [r7, #4]
 800e326:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800e328:	2302      	movs	r3, #2
 800e32a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800e32c:	2301      	movs	r3, #1
 800e32e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800e330:	2310      	movs	r3, #16
 800e332:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e334:	2302      	movs	r3, #2
 800e336:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800e338:	2300      	movs	r3, #0
 800e33a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800e33c:	2308      	movs	r3, #8
 800e33e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800e340:	23a8      	movs	r3, #168	; 0xa8
 800e342:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e344:	2302      	movs	r3, #2
 800e346:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800e348:	2304      	movs	r3, #4
 800e34a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e34c:	f107 0320 	add.w	r3, r7, #32
 800e350:	4618      	mov	r0, r3
 800e352:	f7f3 fff1 	bl	8002338 <HAL_RCC_OscConfig>
 800e356:	4603      	mov	r3, r0
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d001      	beq.n	800e360 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800e35c:	f000 fbd1 	bl	800eb02 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e360:	230f      	movs	r3, #15
 800e362:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e364:	2302      	movs	r3, #2
 800e366:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e368:	2300      	movs	r3, #0
 800e36a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e36c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e370:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e376:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800e378:	f107 030c 	add.w	r3, r7, #12
 800e37c:	2105      	movs	r1, #5
 800e37e:	4618      	mov	r0, r3
 800e380:	f7f4 fa1c 	bl	80027bc <HAL_RCC_ClockConfig>
 800e384:	4603      	mov	r3, r0
 800e386:	2b00      	cmp	r3, #0
 800e388:	d001      	beq.n	800e38e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800e38a:	f000 fbba 	bl	800eb02 <Error_Handler>
  }
}
 800e38e:	bf00      	nop
 800e390:	3750      	adds	r7, #80	; 0x50
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}
 800e396:	bf00      	nop
 800e398:	40023800 	.word	0x40023800
 800e39c:	40007000 	.word	0x40007000

0800e3a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800e3a6:	463b      	mov	r3, r7
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	601a      	str	r2, [r3, #0]
 800e3ac:	605a      	str	r2, [r3, #4]
 800e3ae:	609a      	str	r2, [r3, #8]
 800e3b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800e3b2:	4b21      	ldr	r3, [pc, #132]	; (800e438 <MX_ADC1_Init+0x98>)
 800e3b4:	4a21      	ldr	r2, [pc, #132]	; (800e43c <MX_ADC1_Init+0x9c>)
 800e3b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800e3b8:	4b1f      	ldr	r3, [pc, #124]	; (800e438 <MX_ADC1_Init+0x98>)
 800e3ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e3be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800e3c0:	4b1d      	ldr	r3, [pc, #116]	; (800e438 <MX_ADC1_Init+0x98>)
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800e3c6:	4b1c      	ldr	r3, [pc, #112]	; (800e438 <MX_ADC1_Init+0x98>)
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800e3cc:	4b1a      	ldr	r3, [pc, #104]	; (800e438 <MX_ADC1_Init+0x98>)
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e3d2:	4b19      	ldr	r3, [pc, #100]	; (800e438 <MX_ADC1_Init+0x98>)
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e3da:	4b17      	ldr	r3, [pc, #92]	; (800e438 <MX_ADC1_Init+0x98>)
 800e3dc:	2200      	movs	r2, #0
 800e3de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e3e0:	4b15      	ldr	r3, [pc, #84]	; (800e438 <MX_ADC1_Init+0x98>)
 800e3e2:	4a17      	ldr	r2, [pc, #92]	; (800e440 <MX_ADC1_Init+0xa0>)
 800e3e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e3e6:	4b14      	ldr	r3, [pc, #80]	; (800e438 <MX_ADC1_Init+0x98>)
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800e3ec:	4b12      	ldr	r3, [pc, #72]	; (800e438 <MX_ADC1_Init+0x98>)
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800e3f2:	4b11      	ldr	r3, [pc, #68]	; (800e438 <MX_ADC1_Init+0x98>)
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e3fa:	4b0f      	ldr	r3, [pc, #60]	; (800e438 <MX_ADC1_Init+0x98>)
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e400:	480d      	ldr	r0, [pc, #52]	; (800e438 <MX_ADC1_Init+0x98>)
 800e402:	f7f2 fe2d 	bl	8001060 <HAL_ADC_Init>
 800e406:	4603      	mov	r3, r0
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d001      	beq.n	800e410 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800e40c:	f000 fb79 	bl	800eb02 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800e410:	2300      	movs	r3, #0
 800e412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800e414:	2301      	movs	r3, #1
 800e416:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800e418:	2300      	movs	r3, #0
 800e41a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e41c:	463b      	mov	r3, r7
 800e41e:	4619      	mov	r1, r3
 800e420:	4805      	ldr	r0, [pc, #20]	; (800e438 <MX_ADC1_Init+0x98>)
 800e422:	f7f2 ffb9 	bl	8001398 <HAL_ADC_ConfigChannel>
 800e426:	4603      	mov	r3, r0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d001      	beq.n	800e430 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800e42c:	f000 fb69 	bl	800eb02 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800e430:	bf00      	nop
 800e432:	3710      	adds	r7, #16
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}
 800e438:	20000b00 	.word	0x20000b00
 800e43c:	40012000 	.word	0x40012000
 800e440:	0f000001 	.word	0x0f000001

0800e444 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800e448:	4b17      	ldr	r3, [pc, #92]	; (800e4a8 <MX_SPI3_Init+0x64>)
 800e44a:	4a18      	ldr	r2, [pc, #96]	; (800e4ac <MX_SPI3_Init+0x68>)
 800e44c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800e44e:	4b16      	ldr	r3, [pc, #88]	; (800e4a8 <MX_SPI3_Init+0x64>)
 800e450:	f44f 7282 	mov.w	r2, #260	; 0x104
 800e454:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800e456:	4b14      	ldr	r3, [pc, #80]	; (800e4a8 <MX_SPI3_Init+0x64>)
 800e458:	2200      	movs	r2, #0
 800e45a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800e45c:	4b12      	ldr	r3, [pc, #72]	; (800e4a8 <MX_SPI3_Init+0x64>)
 800e45e:	2200      	movs	r2, #0
 800e460:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e462:	4b11      	ldr	r3, [pc, #68]	; (800e4a8 <MX_SPI3_Init+0x64>)
 800e464:	2200      	movs	r2, #0
 800e466:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e468:	4b0f      	ldr	r3, [pc, #60]	; (800e4a8 <MX_SPI3_Init+0x64>)
 800e46a:	2200      	movs	r2, #0
 800e46c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800e46e:	4b0e      	ldr	r3, [pc, #56]	; (800e4a8 <MX_SPI3_Init+0x64>)
 800e470:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e474:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800e476:	4b0c      	ldr	r3, [pc, #48]	; (800e4a8 <MX_SPI3_Init+0x64>)
 800e478:	2218      	movs	r2, #24
 800e47a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e47c:	4b0a      	ldr	r3, [pc, #40]	; (800e4a8 <MX_SPI3_Init+0x64>)
 800e47e:	2200      	movs	r2, #0
 800e480:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800e482:	4b09      	ldr	r3, [pc, #36]	; (800e4a8 <MX_SPI3_Init+0x64>)
 800e484:	2200      	movs	r2, #0
 800e486:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e488:	4b07      	ldr	r3, [pc, #28]	; (800e4a8 <MX_SPI3_Init+0x64>)
 800e48a:	2200      	movs	r2, #0
 800e48c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800e48e:	4b06      	ldr	r3, [pc, #24]	; (800e4a8 <MX_SPI3_Init+0x64>)
 800e490:	220a      	movs	r2, #10
 800e492:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800e494:	4804      	ldr	r0, [pc, #16]	; (800e4a8 <MX_SPI3_Init+0x64>)
 800e496:	f7f4 fb59 	bl	8002b4c <HAL_SPI_Init>
 800e49a:	4603      	mov	r3, r0
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d001      	beq.n	800e4a4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800e4a0:	f000 fb2f 	bl	800eb02 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800e4a4:	bf00      	nop
 800e4a6:	bd80      	pop	{r7, pc}
 800e4a8:	20000144 	.word	0x20000144
 800e4ac:	40003c00 	.word	0x40003c00

0800e4b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b08e      	sub	sp, #56	; 0x38
 800e4b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e4b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	601a      	str	r2, [r3, #0]
 800e4be:	605a      	str	r2, [r3, #4]
 800e4c0:	609a      	str	r2, [r3, #8]
 800e4c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e4c4:	f107 0320 	add.w	r3, r7, #32
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	601a      	str	r2, [r3, #0]
 800e4cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e4ce:	1d3b      	adds	r3, r7, #4
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	601a      	str	r2, [r3, #0]
 800e4d4:	605a      	str	r2, [r3, #4]
 800e4d6:	609a      	str	r2, [r3, #8]
 800e4d8:	60da      	str	r2, [r3, #12]
 800e4da:	611a      	str	r2, [r3, #16]
 800e4dc:	615a      	str	r2, [r3, #20]
 800e4de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800e4e0:	4b32      	ldr	r3, [pc, #200]	; (800e5ac <MX_TIM2_Init+0xfc>)
 800e4e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e4e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800e4e8:	4b30      	ldr	r3, [pc, #192]	; (800e5ac <MX_TIM2_Init+0xfc>)
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e4ee:	4b2f      	ldr	r3, [pc, #188]	; (800e5ac <MX_TIM2_Init+0xfc>)
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800e4f4:	4b2d      	ldr	r3, [pc, #180]	; (800e5ac <MX_TIM2_Init+0xfc>)
 800e4f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e4fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e4fc:	4b2b      	ldr	r3, [pc, #172]	; (800e5ac <MX_TIM2_Init+0xfc>)
 800e4fe:	2200      	movs	r2, #0
 800e500:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e502:	4b2a      	ldr	r3, [pc, #168]	; (800e5ac <MX_TIM2_Init+0xfc>)
 800e504:	2200      	movs	r2, #0
 800e506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800e508:	4828      	ldr	r0, [pc, #160]	; (800e5ac <MX_TIM2_Init+0xfc>)
 800e50a:	f7f5 f873 	bl	80035f4 <HAL_TIM_Base_Init>
 800e50e:	4603      	mov	r3, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d001      	beq.n	800e518 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800e514:	f000 faf5 	bl	800eb02 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e51c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800e51e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e522:	4619      	mov	r1, r3
 800e524:	4821      	ldr	r0, [pc, #132]	; (800e5ac <MX_TIM2_Init+0xfc>)
 800e526:	f7f5 fc17 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d001      	beq.n	800e534 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800e530:	f000 fae7 	bl	800eb02 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800e534:	481d      	ldr	r0, [pc, #116]	; (800e5ac <MX_TIM2_Init+0xfc>)
 800e536:	f7f5 f8ac 	bl	8003692 <HAL_TIM_PWM_Init>
 800e53a:	4603      	mov	r3, r0
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d001      	beq.n	800e544 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800e540:	f000 fadf 	bl	800eb02 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e544:	2300      	movs	r3, #0
 800e546:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e548:	2300      	movs	r3, #0
 800e54a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800e54c:	f107 0320 	add.w	r3, r7, #32
 800e550:	4619      	mov	r1, r3
 800e552:	4816      	ldr	r0, [pc, #88]	; (800e5ac <MX_TIM2_Init+0xfc>)
 800e554:	f7f5 ffef 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800e558:	4603      	mov	r3, r0
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d001      	beq.n	800e562 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800e55e:	f000 fad0 	bl	800eb02 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e562:	2360      	movs	r3, #96	; 0x60
 800e564:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e566:	2300      	movs	r3, #0
 800e568:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e56a:	2300      	movs	r3, #0
 800e56c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e56e:	2300      	movs	r3, #0
 800e570:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e572:	1d3b      	adds	r3, r7, #4
 800e574:	2200      	movs	r2, #0
 800e576:	4619      	mov	r1, r3
 800e578:	480c      	ldr	r0, [pc, #48]	; (800e5ac <MX_TIM2_Init+0xfc>)
 800e57a:	f7f5 fb27 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	d001      	beq.n	800e588 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800e584:	f000 fabd 	bl	800eb02 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e588:	1d3b      	adds	r3, r7, #4
 800e58a:	220c      	movs	r2, #12
 800e58c:	4619      	mov	r1, r3
 800e58e:	4807      	ldr	r0, [pc, #28]	; (800e5ac <MX_TIM2_Init+0xfc>)
 800e590:	f7f5 fb1c 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800e594:	4603      	mov	r3, r0
 800e596:	2b00      	cmp	r3, #0
 800e598:	d001      	beq.n	800e59e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800e59a:	f000 fab2 	bl	800eb02 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800e59e:	4803      	ldr	r0, [pc, #12]	; (800e5ac <MX_TIM2_Init+0xfc>)
 800e5a0:	f003 fea4 	bl	80122ec <HAL_TIM_MspPostInit>

}
 800e5a4:	bf00      	nop
 800e5a6:	3738      	adds	r7, #56	; 0x38
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	20000c14 	.word	0x20000c14

0800e5b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b08e      	sub	sp, #56	; 0x38
 800e5b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e5b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	601a      	str	r2, [r3, #0]
 800e5be:	605a      	str	r2, [r3, #4]
 800e5c0:	609a      	str	r2, [r3, #8]
 800e5c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e5c4:	f107 0320 	add.w	r3, r7, #32
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	601a      	str	r2, [r3, #0]
 800e5cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e5ce:	1d3b      	adds	r3, r7, #4
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	601a      	str	r2, [r3, #0]
 800e5d4:	605a      	str	r2, [r3, #4]
 800e5d6:	609a      	str	r2, [r3, #8]
 800e5d8:	60da      	str	r2, [r3, #12]
 800e5da:	611a      	str	r2, [r3, #16]
 800e5dc:	615a      	str	r2, [r3, #20]
 800e5de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800e5e0:	4b2c      	ldr	r3, [pc, #176]	; (800e694 <MX_TIM3_Init+0xe4>)
 800e5e2:	4a2d      	ldr	r2, [pc, #180]	; (800e698 <MX_TIM3_Init+0xe8>)
 800e5e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800e5e6:	4b2b      	ldr	r3, [pc, #172]	; (800e694 <MX_TIM3_Init+0xe4>)
 800e5e8:	223f      	movs	r2, #63	; 0x3f
 800e5ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e5ec:	4b29      	ldr	r3, [pc, #164]	; (800e694 <MX_TIM3_Init+0xe4>)
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800e5f2:	4b28      	ldr	r3, [pc, #160]	; (800e694 <MX_TIM3_Init+0xe4>)
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e5f8:	4b26      	ldr	r3, [pc, #152]	; (800e694 <MX_TIM3_Init+0xe4>)
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e5fe:	4b25      	ldr	r3, [pc, #148]	; (800e694 <MX_TIM3_Init+0xe4>)
 800e600:	2200      	movs	r2, #0
 800e602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800e604:	4823      	ldr	r0, [pc, #140]	; (800e694 <MX_TIM3_Init+0xe4>)
 800e606:	f7f4 fff5 	bl	80035f4 <HAL_TIM_Base_Init>
 800e60a:	4603      	mov	r3, r0
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d001      	beq.n	800e614 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800e610:	f000 fa77 	bl	800eb02 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e618:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800e61a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e61e:	4619      	mov	r1, r3
 800e620:	481c      	ldr	r0, [pc, #112]	; (800e694 <MX_TIM3_Init+0xe4>)
 800e622:	f7f5 fb99 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800e626:	4603      	mov	r3, r0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d001      	beq.n	800e630 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800e62c:	f000 fa69 	bl	800eb02 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800e630:	4818      	ldr	r0, [pc, #96]	; (800e694 <MX_TIM3_Init+0xe4>)
 800e632:	f7f5 f82e 	bl	8003692 <HAL_TIM_PWM_Init>
 800e636:	4603      	mov	r3, r0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d001      	beq.n	800e640 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800e63c:	f000 fa61 	bl	800eb02 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e640:	2300      	movs	r3, #0
 800e642:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e644:	2300      	movs	r3, #0
 800e646:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e648:	f107 0320 	add.w	r3, r7, #32
 800e64c:	4619      	mov	r1, r3
 800e64e:	4811      	ldr	r0, [pc, #68]	; (800e694 <MX_TIM3_Init+0xe4>)
 800e650:	f7f5 ff71 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800e654:	4603      	mov	r3, r0
 800e656:	2b00      	cmp	r3, #0
 800e658:	d001      	beq.n	800e65e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800e65a:	f000 fa52 	bl	800eb02 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e65e:	2360      	movs	r3, #96	; 0x60
 800e660:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e662:	2300      	movs	r3, #0
 800e664:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e666:	2300      	movs	r3, #0
 800e668:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e66a:	2300      	movs	r3, #0
 800e66c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e66e:	1d3b      	adds	r3, r7, #4
 800e670:	2204      	movs	r2, #4
 800e672:	4619      	mov	r1, r3
 800e674:	4807      	ldr	r0, [pc, #28]	; (800e694 <MX_TIM3_Init+0xe4>)
 800e676:	f7f5 faa9 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800e67a:	4603      	mov	r3, r0
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d001      	beq.n	800e684 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800e680:	f000 fa3f 	bl	800eb02 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800e684:	4803      	ldr	r0, [pc, #12]	; (800e694 <MX_TIM3_Init+0xe4>)
 800e686:	f003 fe31 	bl	80122ec <HAL_TIM_MspPostInit>

}
 800e68a:	bf00      	nop
 800e68c:	3738      	adds	r7, #56	; 0x38
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
 800e692:	bf00      	nop
 800e694:	20000aa4 	.word	0x20000aa4
 800e698:	40000400 	.word	0x40000400

0800e69c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b08c      	sub	sp, #48	; 0x30
 800e6a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800e6a2:	f107 030c 	add.w	r3, r7, #12
 800e6a6:	2224      	movs	r2, #36	; 0x24
 800e6a8:	2100      	movs	r1, #0
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f004 f840 	bl	8012730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e6b0:	1d3b      	adds	r3, r7, #4
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	601a      	str	r2, [r3, #0]
 800e6b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800e6b8:	4b20      	ldr	r3, [pc, #128]	; (800e73c <MX_TIM4_Init+0xa0>)
 800e6ba:	4a21      	ldr	r2, [pc, #132]	; (800e740 <MX_TIM4_Init+0xa4>)
 800e6bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800e6be:	4b1f      	ldr	r3, [pc, #124]	; (800e73c <MX_TIM4_Init+0xa0>)
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e6c4:	4b1d      	ldr	r3, [pc, #116]	; (800e73c <MX_TIM4_Init+0xa0>)
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800e6ca:	4b1c      	ldr	r3, [pc, #112]	; (800e73c <MX_TIM4_Init+0xa0>)
 800e6cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e6d2:	4b1a      	ldr	r3, [pc, #104]	; (800e73c <MX_TIM4_Init+0xa0>)
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e6d8:	4b18      	ldr	r3, [pc, #96]	; (800e73c <MX_TIM4_Init+0xa0>)
 800e6da:	2200      	movs	r2, #0
 800e6dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800e6de:	2303      	movs	r3, #3
 800e6e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800e6fe:	2300      	movs	r3, #0
 800e700:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800e702:	f107 030c 	add.w	r3, r7, #12
 800e706:	4619      	mov	r1, r3
 800e708:	480c      	ldr	r0, [pc, #48]	; (800e73c <MX_TIM4_Init+0xa0>)
 800e70a:	f7f5 f88d 	bl	8003828 <HAL_TIM_Encoder_Init>
 800e70e:	4603      	mov	r3, r0
 800e710:	2b00      	cmp	r3, #0
 800e712:	d001      	beq.n	800e718 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800e714:	f000 f9f5 	bl	800eb02 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e718:	2300      	movs	r3, #0
 800e71a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e71c:	2300      	movs	r3, #0
 800e71e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800e720:	1d3b      	adds	r3, r7, #4
 800e722:	4619      	mov	r1, r3
 800e724:	4805      	ldr	r0, [pc, #20]	; (800e73c <MX_TIM4_Init+0xa0>)
 800e726:	f7f5 ff06 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800e72a:	4603      	mov	r3, r0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d001      	beq.n	800e734 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800e730:	f000 f9e7 	bl	800eb02 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800e734:	bf00      	nop
 800e736:	3730      	adds	r7, #48	; 0x30
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	2000030c 	.word	0x2000030c
 800e740:	40000800 	.word	0x40000800

0800e744 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b082      	sub	sp, #8
 800e748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e74a:	463b      	mov	r3, r7
 800e74c:	2200      	movs	r2, #0
 800e74e:	601a      	str	r2, [r3, #0]
 800e750:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800e752:	4b15      	ldr	r3, [pc, #84]	; (800e7a8 <MX_TIM6_Init+0x64>)
 800e754:	4a15      	ldr	r2, [pc, #84]	; (800e7ac <MX_TIM6_Init+0x68>)
 800e756:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800e758:	4b13      	ldr	r3, [pc, #76]	; (800e7a8 <MX_TIM6_Init+0x64>)
 800e75a:	2253      	movs	r2, #83	; 0x53
 800e75c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e75e:	4b12      	ldr	r3, [pc, #72]	; (800e7a8 <MX_TIM6_Init+0x64>)
 800e760:	2200      	movs	r2, #0
 800e762:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800e764:	4b10      	ldr	r3, [pc, #64]	; (800e7a8 <MX_TIM6_Init+0x64>)
 800e766:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e76a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e76c:	4b0e      	ldr	r3, [pc, #56]	; (800e7a8 <MX_TIM6_Init+0x64>)
 800e76e:	2200      	movs	r2, #0
 800e770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800e772:	480d      	ldr	r0, [pc, #52]	; (800e7a8 <MX_TIM6_Init+0x64>)
 800e774:	f7f4 ff3e 	bl	80035f4 <HAL_TIM_Base_Init>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d001      	beq.n	800e782 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800e77e:	f000 f9c0 	bl	800eb02 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e782:	2300      	movs	r3, #0
 800e784:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e786:	2300      	movs	r3, #0
 800e788:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800e78a:	463b      	mov	r3, r7
 800e78c:	4619      	mov	r1, r3
 800e78e:	4806      	ldr	r0, [pc, #24]	; (800e7a8 <MX_TIM6_Init+0x64>)
 800e790:	f7f5 fed1 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800e794:	4603      	mov	r3, r0
 800e796:	2b00      	cmp	r3, #0
 800e798:	d001      	beq.n	800e79e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800e79a:	f000 f9b2 	bl	800eb02 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800e79e:	bf00      	nop
 800e7a0:	3708      	adds	r7, #8
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	20000bb4 	.word	0x20000bb4
 800e7ac:	40001000 	.word	0x40001000

0800e7b0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b08c      	sub	sp, #48	; 0x30
 800e7b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800e7b6:	f107 030c 	add.w	r3, r7, #12
 800e7ba:	2224      	movs	r2, #36	; 0x24
 800e7bc:	2100      	movs	r1, #0
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f003 ffb6 	bl	8012730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e7c4:	1d3b      	adds	r3, r7, #4
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	601a      	str	r2, [r3, #0]
 800e7ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800e7cc:	4b22      	ldr	r3, [pc, #136]	; (800e858 <MX_TIM8_Init+0xa8>)
 800e7ce:	4a23      	ldr	r2, [pc, #140]	; (800e85c <MX_TIM8_Init+0xac>)
 800e7d0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800e7d2:	4b21      	ldr	r3, [pc, #132]	; (800e858 <MX_TIM8_Init+0xa8>)
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e7d8:	4b1f      	ldr	r3, [pc, #124]	; (800e858 <MX_TIM8_Init+0xa8>)
 800e7da:	2200      	movs	r2, #0
 800e7dc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800e7de:	4b1e      	ldr	r3, [pc, #120]	; (800e858 <MX_TIM8_Init+0xa8>)
 800e7e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7e4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e7e6:	4b1c      	ldr	r3, [pc, #112]	; (800e858 <MX_TIM8_Init+0xa8>)
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800e7ec:	4b1a      	ldr	r3, [pc, #104]	; (800e858 <MX_TIM8_Init+0xa8>)
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e7f2:	4b19      	ldr	r3, [pc, #100]	; (800e858 <MX_TIM8_Init+0xa8>)
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800e7f8:	2303      	movs	r3, #3
 800e7fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800e800:	2301      	movs	r3, #1
 800e802:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800e804:	2300      	movs	r3, #0
 800e806:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800e808:	2300      	movs	r3, #0
 800e80a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800e80c:	2300      	movs	r3, #0
 800e80e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800e810:	2301      	movs	r3, #1
 800e812:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800e814:	2300      	movs	r3, #0
 800e816:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800e818:	2300      	movs	r3, #0
 800e81a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800e81c:	f107 030c 	add.w	r3, r7, #12
 800e820:	4619      	mov	r1, r3
 800e822:	480d      	ldr	r0, [pc, #52]	; (800e858 <MX_TIM8_Init+0xa8>)
 800e824:	f7f5 f800 	bl	8003828 <HAL_TIM_Encoder_Init>
 800e828:	4603      	mov	r3, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d001      	beq.n	800e832 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800e82e:	f000 f968 	bl	800eb02 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e832:	2300      	movs	r3, #0
 800e834:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e836:	2300      	movs	r3, #0
 800e838:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800e83a:	1d3b      	adds	r3, r7, #4
 800e83c:	4619      	mov	r1, r3
 800e83e:	4806      	ldr	r0, [pc, #24]	; (800e858 <MX_TIM8_Init+0xa8>)
 800e840:	f7f5 fe79 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800e844:	4603      	mov	r3, r0
 800e846:	2b00      	cmp	r3, #0
 800e848:	d001      	beq.n	800e84e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800e84a:	f000 f95a 	bl	800eb02 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800e84e:	bf00      	nop
 800e850:	3730      	adds	r7, #48	; 0x30
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	200002cc 	.word	0x200002cc
 800e85c:	40010400 	.word	0x40010400

0800e860 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e864:	4b11      	ldr	r3, [pc, #68]	; (800e8ac <MX_USART1_UART_Init+0x4c>)
 800e866:	4a12      	ldr	r2, [pc, #72]	; (800e8b0 <MX_USART1_UART_Init+0x50>)
 800e868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800e86a:	4b10      	ldr	r3, [pc, #64]	; (800e8ac <MX_USART1_UART_Init+0x4c>)
 800e86c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800e870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e872:	4b0e      	ldr	r3, [pc, #56]	; (800e8ac <MX_USART1_UART_Init+0x4c>)
 800e874:	2200      	movs	r2, #0
 800e876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e878:	4b0c      	ldr	r3, [pc, #48]	; (800e8ac <MX_USART1_UART_Init+0x4c>)
 800e87a:	2200      	movs	r2, #0
 800e87c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e87e:	4b0b      	ldr	r3, [pc, #44]	; (800e8ac <MX_USART1_UART_Init+0x4c>)
 800e880:	2200      	movs	r2, #0
 800e882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e884:	4b09      	ldr	r3, [pc, #36]	; (800e8ac <MX_USART1_UART_Init+0x4c>)
 800e886:	220c      	movs	r2, #12
 800e888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e88a:	4b08      	ldr	r3, [pc, #32]	; (800e8ac <MX_USART1_UART_Init+0x4c>)
 800e88c:	2200      	movs	r2, #0
 800e88e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e890:	4b06      	ldr	r3, [pc, #24]	; (800e8ac <MX_USART1_UART_Init+0x4c>)
 800e892:	2200      	movs	r2, #0
 800e894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e896:	4805      	ldr	r0, [pc, #20]	; (800e8ac <MX_USART1_UART_Init+0x4c>)
 800e898:	f7f5 fea6 	bl	80045e8 <HAL_UART_Init>
 800e89c:	4603      	mov	r3, r0
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d001      	beq.n	800e8a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800e8a2:	f000 f92e 	bl	800eb02 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e8a6:	bf00      	nop
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	20000b64 	.word	0x20000b64
 800e8b0:	40011000 	.word	0x40011000

0800e8b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b08a      	sub	sp, #40	; 0x28
 800e8b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8ba:	f107 0314 	add.w	r3, r7, #20
 800e8be:	2200      	movs	r2, #0
 800e8c0:	601a      	str	r2, [r3, #0]
 800e8c2:	605a      	str	r2, [r3, #4]
 800e8c4:	609a      	str	r2, [r3, #8]
 800e8c6:	60da      	str	r2, [r3, #12]
 800e8c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	613b      	str	r3, [r7, #16]
 800e8ce:	4b53      	ldr	r3, [pc, #332]	; (800ea1c <MX_GPIO_Init+0x168>)
 800e8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8d2:	4a52      	ldr	r2, [pc, #328]	; (800ea1c <MX_GPIO_Init+0x168>)
 800e8d4:	f043 0304 	orr.w	r3, r3, #4
 800e8d8:	6313      	str	r3, [r2, #48]	; 0x30
 800e8da:	4b50      	ldr	r3, [pc, #320]	; (800ea1c <MX_GPIO_Init+0x168>)
 800e8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8de:	f003 0304 	and.w	r3, r3, #4
 800e8e2:	613b      	str	r3, [r7, #16]
 800e8e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	60fb      	str	r3, [r7, #12]
 800e8ea:	4b4c      	ldr	r3, [pc, #304]	; (800ea1c <MX_GPIO_Init+0x168>)
 800e8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ee:	4a4b      	ldr	r2, [pc, #300]	; (800ea1c <MX_GPIO_Init+0x168>)
 800e8f0:	f043 0301 	orr.w	r3, r3, #1
 800e8f4:	6313      	str	r3, [r2, #48]	; 0x30
 800e8f6:	4b49      	ldr	r3, [pc, #292]	; (800ea1c <MX_GPIO_Init+0x168>)
 800e8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8fa:	f003 0301 	and.w	r3, r3, #1
 800e8fe:	60fb      	str	r3, [r7, #12]
 800e900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e902:	2300      	movs	r3, #0
 800e904:	60bb      	str	r3, [r7, #8]
 800e906:	4b45      	ldr	r3, [pc, #276]	; (800ea1c <MX_GPIO_Init+0x168>)
 800e908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e90a:	4a44      	ldr	r2, [pc, #272]	; (800ea1c <MX_GPIO_Init+0x168>)
 800e90c:	f043 0302 	orr.w	r3, r3, #2
 800e910:	6313      	str	r3, [r2, #48]	; 0x30
 800e912:	4b42      	ldr	r3, [pc, #264]	; (800ea1c <MX_GPIO_Init+0x168>)
 800e914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e916:	f003 0302 	and.w	r3, r3, #2
 800e91a:	60bb      	str	r3, [r7, #8]
 800e91c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e91e:	2300      	movs	r3, #0
 800e920:	607b      	str	r3, [r7, #4]
 800e922:	4b3e      	ldr	r3, [pc, #248]	; (800ea1c <MX_GPIO_Init+0x168>)
 800e924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e926:	4a3d      	ldr	r2, [pc, #244]	; (800ea1c <MX_GPIO_Init+0x168>)
 800e928:	f043 0308 	orr.w	r3, r3, #8
 800e92c:	6313      	str	r3, [r2, #48]	; 0x30
 800e92e:	4b3b      	ldr	r3, [pc, #236]	; (800ea1c <MX_GPIO_Init+0x168>)
 800e930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e932:	f003 0308 	and.w	r3, r3, #8
 800e936:	607b      	str	r3, [r7, #4]
 800e938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800e93a:	2200      	movs	r2, #0
 800e93c:	f24e 213c 	movw	r1, #57916	; 0xe23c
 800e940:	4837      	ldr	r0, [pc, #220]	; (800ea20 <MX_GPIO_Init+0x16c>)
 800e942:	f7f3 fcdf 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800e946:	2200      	movs	r2, #0
 800e948:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800e94c:	4835      	ldr	r0, [pc, #212]	; (800ea24 <MX_GPIO_Init+0x170>)
 800e94e:	f7f3 fcd9 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800e952:	2200      	movs	r2, #0
 800e954:	f242 7103 	movw	r1, #9987	; 0x2703
 800e958:	4833      	ldr	r0, [pc, #204]	; (800ea28 <MX_GPIO_Init+0x174>)
 800e95a:	f7f3 fcd3 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800e95e:	2200      	movs	r2, #0
 800e960:	2104      	movs	r1, #4
 800e962:	4832      	ldr	r0, [pc, #200]	; (800ea2c <MX_GPIO_Init+0x178>)
 800e964:	f7f3 fcce 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800e968:	f24e 233c 	movw	r3, #57916	; 0xe23c
 800e96c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e96e:	2301      	movs	r3, #1
 800e970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e972:	2300      	movs	r3, #0
 800e974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e976:	2300      	movs	r3, #0
 800e978:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e97a:	f107 0314 	add.w	r3, r7, #20
 800e97e:	4619      	mov	r1, r3
 800e980:	4827      	ldr	r0, [pc, #156]	; (800ea20 <MX_GPIO_Init+0x16c>)
 800e982:	f7f3 fb0d 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800e986:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800e98a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e98c:	2301      	movs	r3, #1
 800e98e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e990:	2300      	movs	r3, #0
 800e992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e994:	2300      	movs	r3, #0
 800e996:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e998:	f107 0314 	add.w	r3, r7, #20
 800e99c:	4619      	mov	r1, r3
 800e99e:	4821      	ldr	r0, [pc, #132]	; (800ea24 <MX_GPIO_Init+0x170>)
 800e9a0:	f7f3 fafe 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800e9a4:	f242 7303 	movw	r3, #9987	; 0x2703
 800e9a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e9b6:	f107 0314 	add.w	r3, r7, #20
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	481a      	ldr	r0, [pc, #104]	; (800ea28 <MX_GPIO_Init+0x174>)
 800e9be:	f7f3 faef 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800e9c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e9c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e9d0:	f107 0314 	add.w	r3, r7, #20
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	4814      	ldr	r0, [pc, #80]	; (800ea28 <MX_GPIO_Init+0x174>)
 800e9d8:	f7f3 fae2 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800e9dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e9e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e9ea:	f107 0314 	add.w	r3, r7, #20
 800e9ee:	4619      	mov	r1, r3
 800e9f0:	480c      	ldr	r0, [pc, #48]	; (800ea24 <MX_GPIO_Init+0x170>)
 800e9f2:	f7f3 fad5 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e9f6:	2304      	movs	r3, #4
 800e9f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea02:	2300      	movs	r3, #0
 800ea04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ea06:	f107 0314 	add.w	r3, r7, #20
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	4807      	ldr	r0, [pc, #28]	; (800ea2c <MX_GPIO_Init+0x178>)
 800ea0e:	f7f3 fac7 	bl	8001fa0 <HAL_GPIO_Init>

}
 800ea12:	bf00      	nop
 800ea14:	3728      	adds	r7, #40	; 0x28
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	40023800 	.word	0x40023800
 800ea20:	40020800 	.word	0x40020800
 800ea24:	40020000 	.word	0x40020000
 800ea28:	40020400 	.word	0x40020400
 800ea2c:	40020c00 	.word	0x40020c00

0800ea30 <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b08a      	sub	sp, #40	; 0x28
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ea3a:	2360      	movs	r3, #96	; 0x60
 800ea3c:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ea42:	2300      	movs	r3, #0
 800ea44:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 800ea46:	4a15      	ldr	r2, [pc, #84]	; (800ea9c <buzzer+0x6c>)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	fb92 f3f3 	sdiv	r3, r2, r3
 800ea4e:	4a14      	ldr	r2, [pc, #80]	; (800eaa0 <buzzer+0x70>)
 800ea50:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 800ea52:	4b13      	ldr	r3, [pc, #76]	; (800eaa0 <buzzer+0x70>)
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	4b13      	ldr	r3, [pc, #76]	; (800eaa4 <buzzer+0x74>)
 800ea58:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 10;
 800ea5a:	4b11      	ldr	r3, [pc, #68]	; (800eaa0 <buzzer+0x70>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	4a12      	ldr	r2, [pc, #72]	; (800eaa8 <buzzer+0x78>)
 800ea60:	fb82 1203 	smull	r1, r2, r2, r3
 800ea64:	1092      	asrs	r2, r2, #2
 800ea66:	17db      	asrs	r3, r3, #31
 800ea68:	1ad3      	subs	r3, r2, r3
 800ea6a:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_2);
 800ea6c:	f107 030c 	add.w	r3, r7, #12
 800ea70:	2204      	movs	r2, #4
 800ea72:	4619      	mov	r1, r3
 800ea74:	480d      	ldr	r0, [pc, #52]	; (800eaac <buzzer+0x7c>)
 800ea76:	f7f5 f8a9 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800ea7a:	2104      	movs	r1, #4
 800ea7c:	480b      	ldr	r0, [pc, #44]	; (800eaac <buzzer+0x7c>)
 800ea7e:	f7f4 fe3d 	bl	80036fc <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7f2 fac9 	bl	800101c <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800ea8a:	2104      	movs	r1, #4
 800ea8c:	4807      	ldr	r0, [pc, #28]	; (800eaac <buzzer+0x7c>)
 800ea8e:	f7f4 fe73 	bl	8003778 <HAL_TIM_PWM_Stop>
}
 800ea92:	bf00      	nop
 800ea94:	3728      	adds	r7, #40	; 0x28
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	000f4240 	.word	0x000f4240
 800eaa0:	200002c4 	.word	0x200002c4
 800eaa4:	40000400 	.word	0x40000400
 800eaa8:	66666667 	.word	0x66666667
 800eaac:	20000aa4 	.word	0x20000aa4

0800eab0 <get_adc_value>:


int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b086      	sub	sp, #24
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 800eaba:	f107 0308 	add.w	r3, r7, #8
 800eabe:	2200      	movs	r2, #0
 800eac0:	601a      	str	r2, [r3, #0]
 800eac2:	605a      	str	r2, [r3, #4]
 800eac4:	609a      	str	r2, [r3, #8]
 800eac6:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 800eacc:	2301      	movs	r3, #1
 800eace:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800ead0:	2300      	movs	r3, #0
 800ead2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800ead4:	2300      	movs	r3, #0
 800ead6:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 800ead8:	f107 0308 	add.w	r3, r7, #8
 800eadc:	4619      	mov	r1, r3
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f7f2 fc5a 	bl	8001398 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f7f2 faff 	bl	80010e8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 800eaea:	2164      	movs	r1, #100	; 0x64
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f7f2 fbc1 	bl	8001274 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f7f2 fc42 	bl	800137c <HAL_ADC_GetValue>
 800eaf8:	4603      	mov	r3, r0
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3718      	adds	r7, #24
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}

0800eb02 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800eb02:	b480      	push	{r7}
 800eb04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800eb06:	bf00      	nop
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr

0800eb10 <search_init>:

#include "global.h"

void search_init(void){
 800eb10:	b580      	push	{r7, lr}
 800eb12:	af00      	add	r7, sp, #0

	//----a探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 800eb14:	4b09      	ldr	r3, [pc, #36]	; (800eb3c <search_init+0x2c>)
 800eb16:	2207      	movs	r2, #7
 800eb18:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 800eb1a:	4b09      	ldr	r3, [pc, #36]	; (800eb40 <search_init+0x30>)
 800eb1c:	2207      	movs	r2, #7
 800eb1e:	701a      	strb	r2, [r3, #0]
	map_Init();						//aマップの初期化
 800eb20:	f001 f852 	bl	800fbc8 <map_Init>
	mouse.x = 0;
 800eb24:	4b07      	ldr	r3, [pc, #28]	; (800eb44 <search_init+0x34>)
 800eb26:	2200      	movs	r2, #0
 800eb28:	701a      	strb	r2, [r3, #0]
	mouse.y = 0;					//a現在地の初期化
 800eb2a:	4b06      	ldr	r3, [pc, #24]	; (800eb44 <search_init+0x34>)
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	705a      	strb	r2, [r3, #1]
	mouse.dir = 0;					//aマウスの向きの初期化
 800eb30:	4b04      	ldr	r3, [pc, #16]	; (800eb44 <search_init+0x34>)
 800eb32:	2200      	movs	r2, #0
 800eb34:	709a      	strb	r2, [r3, #2]
}
 800eb36:	bf00      	nop
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	20000bb0 	.word	0x20000bb0
 800eb40:	20000b4c 	.word	0x20000b4c
 800eb44:	20000c0c 	.word	0x20000c0c

0800eb48 <searchC>:
//searchC
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC(){
 800eb48:	b590      	push	{r4, r7, lr}
 800eb4a:	b083      	sub	sp, #12
 800eb4c:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800eb4e:	4bab      	ldr	r3, [pc, #684]	; (800edfc <searchC+0x2b4>)
 800eb50:	881b      	ldrh	r3, [r3, #0]
 800eb52:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d001      	beq.n	800eb60 <searchC+0x18>
		load_map_from_eeprom();
 800eb5c:	f002 ff70 	bl	8011a40 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800eb60:	4ba6      	ldr	r3, [pc, #664]	; (800edfc <searchC+0x2b4>)
 800eb62:	881b      	ldrh	r3, [r3, #0]
 800eb64:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eb68:	b2db      	uxtb	r3, r3
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d101      	bne.n	800eb72 <searchC+0x2a>
 800eb6e:	f002 ffdf 	bl	8011b30 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
 800eb72:	4ba2      	ldr	r3, [pc, #648]	; (800edfc <searchC+0x2b4>)
 800eb74:	881b      	ldrh	r3, [r3, #0]
 800eb76:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d106      	bne.n	800eb8e <searchC+0x46>
 800eb80:	4b9f      	ldr	r3, [pc, #636]	; (800ee00 <searchC+0x2b8>)
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800eb88:	b2da      	uxtb	r2, r3
 800eb8a:	4b9d      	ldr	r3, [pc, #628]	; (800ee00 <searchC+0x2b8>)
 800eb8c:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800eb8e:	4b9b      	ldr	r3, [pc, #620]	; (800edfc <searchC+0x2b4>)
 800eb90:	881b      	ldrh	r3, [r3, #0]
 800eb92:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eb96:	b2db      	uxtb	r3, r3
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d101      	bne.n	800eba0 <searchC+0x58>
 800eb9c:	f001 f880 	bl	800fca0 <write_map>

	if(MF2.FLAG.GOAL){
 800eba0:	4b98      	ldr	r3, [pc, #608]	; (800ee04 <searchC+0x2bc>)
 800eba2:	881b      	ldrh	r3, [r3, #0]
 800eba4:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800eba8:	b2db      	uxtb	r3, r3
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d00b      	beq.n	800ebc6 <searchC+0x7e>
//		HAL_Delay(500);
		rotate_180();											//180度回転
 800ebae:	f7f7 fdcf 	bl	8006750 <rotate_180>
//		driveC2(SETPOS_BACK);         							//a尻を当てる程度に後退。回転後に停止する
//		degree_z = target_degree_z;
//		start_mode = 0;
		start_mode = 1;
 800ebb2:	4b95      	ldr	r3, [pc, #596]	; (800ee08 <searchC+0x2c0>)
 800ebb4:	2201      	movs	r2, #1
 800ebb6:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800ebb8:	4b94      	ldr	r3, [pc, #592]	; (800ee0c <searchC+0x2c4>)
 800ebba:	2201      	movs	r2, #1
 800ebbc:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 800ebbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ebc2:	f7f2 fa2b 	bl	800101c <HAL_Delay>
	if(!MF.FLAG.SCND || !MF2.FLAG.GOAL)wall_info &= ~0x88;					//a前壁は存在するはずがないので削除する
	if(!MF.FLAG.SCND || !MF2.FLAG.GOAL)write_map();							//a壁情報を地図に記入
*/

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800ebc6:	f7f6 fed5 	bl	8005974 <start_sectionA>
	adv_pos();
 800ebca:	f000 ffa5 	bl	800fb18 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800ebce:	4b8b      	ldr	r3, [pc, #556]	; (800edfc <searchC+0x2b4>)
 800ebd0:	881b      	ldrh	r3, [r3, #0]
 800ebd2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d101      	bne.n	800ebe0 <searchC+0x98>
 800ebdc:	f001 f860 	bl	800fca0 <write_map>
	r_cnt = 0;																//a経路カウンタの初期化
 800ebe0:	4b8b      	ldr	r3, [pc, #556]	; (800ee10 <searchC+0x2c8>)
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	701a      	strb	r2, [r3, #0]
	make_smap();															//a歩数マップ作成
 800ebe6:	f001 fa4f 	bl	8010088 <make_smap>
	make_route();															//a最短経路探索（route配列に動作が格納される）
 800ebea:	f001 fe0b 	bl	8010804 <make_route>
	uint8_t x, y;															//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){												//route配列によって進行を決定。経路カウンタを進める
 800ebee:	4b88      	ldr	r3, [pc, #544]	; (800ee10 <searchC+0x2c8>)
 800ebf0:	781b      	ldrb	r3, [r3, #0]
 800ebf2:	1c5a      	adds	r2, r3, #1
 800ebf4:	b2d1      	uxtb	r1, r2
 800ebf6:	4a86      	ldr	r2, [pc, #536]	; (800ee10 <searchC+0x2c8>)
 800ebf8:	7011      	strb	r1, [r2, #0]
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	4b85      	ldr	r3, [pc, #532]	; (800ee14 <searchC+0x2cc>)
 800ebfe:	5c9b      	ldrb	r3, [r3, r2]
 800ec00:	2b22      	cmp	r3, #34	; 0x22
 800ec02:	d07f      	beq.n	800ed04 <searchC+0x1bc>
 800ec04:	2b22      	cmp	r3, #34	; 0x22
 800ec06:	dc03      	bgt.n	800ec10 <searchC+0xc8>
 800ec08:	2b11      	cmp	r3, #17
 800ec0a:	f000 808b 	beq.w	800ed24 <searchC+0x1dc>
 800ec0e:	e08c      	b.n	800ed2a <searchC+0x1e2>
 800ec10:	2b44      	cmp	r3, #68	; 0x44
 800ec12:	d074      	beq.n	800ecfe <searchC+0x1b6>
 800ec14:	2b88      	cmp	r3, #136	; 0x88
 800ec16:	f040 8088 	bne.w	800ed2a <searchC+0x1e2>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800ec1a:	4b7d      	ldr	r3, [pc, #500]	; (800ee10 <searchC+0x2c8>)
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	461a      	mov	r2, r3
 800ec20:	4b7c      	ldr	r3, [pc, #496]	; (800ee14 <searchC+0x2cc>)
 800ec22:	5c9b      	ldrb	r3, [r3, r2]
 800ec24:	2b88      	cmp	r3, #136	; 0x88
 800ec26:	d158      	bne.n	800ecda <searchC+0x192>
 800ec28:	4b74      	ldr	r3, [pc, #464]	; (800edfc <searchC+0x2b4>)
 800ec2a:	881b      	ldrh	r3, [r3, #0]
 800ec2c:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d051      	beq.n	800ecda <searchC+0x192>
					x = mouse.x;
 800ec36:	4b78      	ldr	r3, [pc, #480]	; (800ee18 <searchC+0x2d0>)
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	70fb      	strb	r3, [r7, #3]
					y = mouse.y;
 800ec3c:	4b76      	ldr	r3, [pc, #472]	; (800ee18 <searchC+0x2d0>)
 800ec3e:	785b      	ldrb	r3, [r3, #1]
 800ec40:	70bb      	strb	r3, [r7, #2]
					adv_pos();
 800ec42:	f000 ff69 	bl	800fb18 <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800ec46:	4b74      	ldr	r3, [pc, #464]	; (800ee18 <searchC+0x2d0>)
 800ec48:	785b      	ldrb	r3, [r3, #1]
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	4b72      	ldr	r3, [pc, #456]	; (800ee18 <searchC+0x2d0>)
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	b2db      	uxtb	r3, r3
 800ec54:	4619      	mov	r1, r3
 800ec56:	4a71      	ldr	r2, [pc, #452]	; (800ee1c <searchC+0x2d4>)
 800ec58:	0103      	lsls	r3, r0, #4
 800ec5a:	4413      	add	r3, r2
 800ec5c:	440b      	add	r3, r1
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	f003 030f 	and.w	r3, r3, #15
 800ec64:	4a6c      	ldr	r2, [pc, #432]	; (800ee18 <searchC+0x2d0>)
 800ec66:	7852      	ldrb	r2, [r2, #1]
 800ec68:	b2d2      	uxtb	r2, r2
 800ec6a:	4614      	mov	r4, r2
 800ec6c:	4a6a      	ldr	r2, [pc, #424]	; (800ee18 <searchC+0x2d0>)
 800ec6e:	7812      	ldrb	r2, [r2, #0]
 800ec70:	b2d2      	uxtb	r2, r2
 800ec72:	4610      	mov	r0, r2
 800ec74:	4969      	ldr	r1, [pc, #420]	; (800ee1c <searchC+0x2d4>)
 800ec76:	0122      	lsls	r2, r4, #4
 800ec78:	440a      	add	r2, r1
 800ec7a:	4402      	add	r2, r0
 800ec7c:	7812      	ldrb	r2, [r2, #0]
 800ec7e:	0912      	lsrs	r2, r2, #4
 800ec80:	b2d2      	uxtb	r2, r2
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d111      	bne.n	800ecaa <searchC+0x162>
						if(!MF2.FLAG.HACCEL){
 800ec86:	4b5f      	ldr	r3, [pc, #380]	; (800ee04 <searchC+0x2bc>)
 800ec88:	881b      	ldrh	r3, [r3, #0]
 800ec8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ec8e:	b2db      	uxtb	r3, r3
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d107      	bne.n	800eca4 <searchC+0x15c>
							one_sectionA();
 800ec94:	f7f7 f944 	bl	8005f20 <one_sectionA>
							MF2.FLAG.HACCEL = 1;
 800ec98:	4a5a      	ldr	r2, [pc, #360]	; (800ee04 <searchC+0x2bc>)
 800ec9a:	8813      	ldrh	r3, [r2, #0]
 800ec9c:	f043 0302 	orr.w	r3, r3, #2
 800eca0:	8013      	strh	r3, [r2, #0]
 800eca2:	e013      	b.n	800eccc <searchC+0x184>
						}else{
							one_sectionU();
 800eca4:	f7f7 fb84 	bl	80063b0 <one_sectionU>
 800eca8:	e010      	b.n	800eccc <searchC+0x184>
						}
					}else if(MF2.FLAG.HACCEL){
 800ecaa:	4b56      	ldr	r3, [pc, #344]	; (800ee04 <searchC+0x2bc>)
 800ecac:	881b      	ldrh	r3, [r3, #0]
 800ecae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d007      	beq.n	800ecc8 <searchC+0x180>
						one_sectionD();
 800ecb8:	f7f7 f9be 	bl	8006038 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800ecbc:	4a51      	ldr	r2, [pc, #324]	; (800ee04 <searchC+0x2bc>)
 800ecbe:	8813      	ldrh	r3, [r2, #0]
 800ecc0:	f36f 0341 	bfc	r3, #1, #1
 800ecc4:	8013      	strh	r3, [r2, #0]
 800ecc6:	e001      	b.n	800eccc <searchC+0x184>
					}else{
						one_sectionU();
 800ecc8:	f7f7 fb72 	bl	80063b0 <one_sectionU>
					}
					mouse.x = x;
 800eccc:	4a52      	ldr	r2, [pc, #328]	; (800ee18 <searchC+0x2d0>)
 800ecce:	78fb      	ldrb	r3, [r7, #3]
 800ecd0:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800ecd2:	4a51      	ldr	r2, [pc, #324]	; (800ee18 <searchC+0x2d0>)
 800ecd4:	78bb      	ldrb	r3, [r7, #2]
 800ecd6:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}else{
					one_sectionU();
				}
				break;
 800ecd8:	e027      	b.n	800ed2a <searchC+0x1e2>
				}else if(MF2.FLAG.HACCEL){
 800ecda:	4b4a      	ldr	r3, [pc, #296]	; (800ee04 <searchC+0x2bc>)
 800ecdc:	881b      	ldrh	r3, [r3, #0]
 800ecde:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ece2:	b2db      	uxtb	r3, r3
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d007      	beq.n	800ecf8 <searchC+0x1b0>
					one_sectionD();
 800ece8:	f7f7 f9a6 	bl	8006038 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800ecec:	4a45      	ldr	r2, [pc, #276]	; (800ee04 <searchC+0x2bc>)
 800ecee:	8813      	ldrh	r3, [r2, #0]
 800ecf0:	f36f 0341 	bfc	r3, #1, #1
 800ecf4:	8013      	strh	r3, [r2, #0]
				break;
 800ecf6:	e018      	b.n	800ed2a <searchC+0x1e2>
					one_sectionU();
 800ecf8:	f7f7 fb5a 	bl	80063b0 <one_sectionU>
				break;
 800ecfc:	e015      	b.n	800ed2a <searchC+0x1e2>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800ecfe:	f7f7 fdff 	bl	8006900 <slalom_R90>
				break;
 800ed02:	e012      	b.n	800ed2a <searchC+0x1e2>
			//----180回転----
			case 0x22:
				half_sectionD();
 800ed04:	f7f6 ffd0 	bl	8005ca8 <half_sectionD>
				rotate_180();
 800ed08:	f7f7 fd22 	bl	8006750 <rotate_180>
				if(wall_info & 0x88){
 800ed0c:	4b3c      	ldr	r3, [pc, #240]	; (800ee00 <searchC+0x2b8>)
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d002      	beq.n	800ed1e <searchC+0x1d6>
					set_position();
 800ed18:	f7f6 fdf8 	bl	800590c <set_position>
				}else{
					half_sectionA();
				}
				break;
 800ed1c:	e005      	b.n	800ed2a <searchC+0x1e2>
					half_sectionA();
 800ed1e:	f7f6 ff5d 	bl	8005bdc <half_sectionA>
				break;
 800ed22:	e002      	b.n	800ed2a <searchC+0x1e2>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800ed24:	f7f7 ff1a 	bl	8006b5c <slalom_L90>
				break;
 800ed28:	bf00      	nop
		}
		adv_pos();
 800ed2a:	f000 fef5 	bl	800fb18 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800ed2e:	4b33      	ldr	r3, [pc, #204]	; (800edfc <searchC+0x2b4>)
 800ed30:	881b      	ldrh	r3, [r3, #0]
 800ed32:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ed36:	b2db      	uxtb	r3, r3
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d101      	bne.n	800ed40 <searchC+0x1f8>
 800ed3c:	f000 ff26 	bl	800fb8c <conf_route>

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800ed40:	4b35      	ldr	r3, [pc, #212]	; (800ee18 <searchC+0x2d0>)
 800ed42:	785b      	ldrb	r3, [r3, #1]
 800ed44:	b2db      	uxtb	r3, r3
 800ed46:	4618      	mov	r0, r3
 800ed48:	4b33      	ldr	r3, [pc, #204]	; (800ee18 <searchC+0x2d0>)
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	4619      	mov	r1, r3
 800ed50:	4a33      	ldr	r2, [pc, #204]	; (800ee20 <searchC+0x2d8>)
 800ed52:	0103      	lsls	r3, r0, #4
 800ed54:	440b      	add	r3, r1
 800ed56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	f47f af47 	bne.w	800ebee <searchC+0xa6>

	for(int j=0; j<goal_mode-1; j++){
 800ed60:	2300      	movs	r3, #0
 800ed62:	607b      	str	r3, [r7, #4]
 800ed64:	e006      	b.n	800ed74 <searchC+0x22c>
		one_sectionU();
 800ed66:	f7f7 fb23 	bl	80063b0 <one_sectionU>
		adv_pos();
 800ed6a:	f000 fed5 	bl	800fb18 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	3301      	adds	r3, #1
 800ed72:	607b      	str	r3, [r7, #4]
 800ed74:	4b25      	ldr	r3, [pc, #148]	; (800ee0c <searchC+0x2c4>)
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	3b01      	subs	r3, #1
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	dbf2      	blt.n	800ed66 <searchC+0x21e>
	}
	half_sectionD();
 800ed80:	f7f6 ff92 	bl	8005ca8 <half_sectionD>

	set_positionF();
 800ed84:	f7f6 fdd8 	bl	8005938 <set_positionF>

	MF2.FLAG.GOAL = (MF2.FLAG.GOAL+1)%2;
 800ed88:	4b1e      	ldr	r3, [pc, #120]	; (800ee04 <searchC+0x2bc>)
 800ed8a:	881b      	ldrh	r3, [r3, #0]
 800ed8c:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800ed90:	b2db      	uxtb	r3, r3
 800ed92:	3301      	adds	r3, #1
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	f003 0301 	and.w	r3, r3, #1
 800ed9a:	bfb8      	it	lt
 800ed9c:	425b      	neglt	r3, r3
 800ed9e:	f003 0301 	and.w	r3, r3, #1
 800eda2:	b2d9      	uxtb	r1, r3
 800eda4:	4a17      	ldr	r2, [pc, #92]	; (800ee04 <searchC+0x2bc>)
 800eda6:	8813      	ldrh	r3, [r2, #0]
 800eda8:	f361 2308 	bfi	r3, r1, #8, #1
 800edac:	8013      	strh	r3, [r2, #0]
	if(!MF2.FLAG.GOAL){
 800edae:	4b15      	ldr	r3, [pc, #84]	; (800ee04 <searchC+0x2bc>)
 800edb0:	881b      	ldrh	r3, [r3, #0]
 800edb2:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800edb6:	b2db      	uxtb	r3, r3
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d112      	bne.n	800ede2 <searchC+0x29a>
		HAL_Delay(500);
 800edbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800edc0:	f7f2 f92c 	bl	800101c <HAL_Delay>
		rotate_180();										//180度回転
 800edc4:	f7f7 fcc4 	bl	8006750 <rotate_180>
		driveC2(SETPOS_BACK);         						//a尻を当てる程度に後退。回転後に停止する
 800edc8:	2064      	movs	r0, #100	; 0x64
 800edca:	f7f6 fb19 	bl	8005400 <driveC2>
		degree_z = target_degree_z;
 800edce:	4b15      	ldr	r3, [pc, #84]	; (800ee24 <searchC+0x2dc>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	4a15      	ldr	r2, [pc, #84]	; (800ee28 <searchC+0x2e0>)
 800edd4:	6013      	str	r3, [r2, #0]
		start_mode = 0;
 800edd6:	4b0c      	ldr	r3, [pc, #48]	; (800ee08 <searchC+0x2c0>)
 800edd8:	2200      	movs	r2, #0
 800edda:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800eddc:	4b0b      	ldr	r3, [pc, #44]	; (800ee0c <searchC+0x2c4>)
 800edde:	2201      	movs	r2, #1
 800ede0:	701a      	strb	r2, [r3, #0]
	}

	if(!MF.FLAG.SCND){
 800ede2:	4b06      	ldr	r3, [pc, #24]	; (800edfc <searchC+0x2b4>)
 800ede4:	881b      	ldrh	r3, [r3, #0]
 800ede6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800edea:	b2db      	uxtb	r3, r3
 800edec:	2b00      	cmp	r3, #0
 800edee:	d101      	bne.n	800edf4 <searchC+0x2ac>
		store_map_in_eeprom();
 800edf0:	f002 fdec 	bl	80119cc <store_map_in_eeprom>
	}
}
 800edf4:	bf00      	nop
 800edf6:	370c      	adds	r7, #12
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd90      	pop	{r4, r7, pc}
 800edfc:	20000f68 	.word	0x20000f68
 800ee00:	200002c8 	.word	0x200002c8
 800ee04:	20000f64 	.word	0x20000f64
 800ee08:	200015c8 	.word	0x200015c8
 800ee0c:	20000bb1 	.word	0x20000bb1
 800ee10:	200015d0 	.word	0x200015d0
 800ee14:	20000c54 	.word	0x20000c54
 800ee18:	20000c0c 	.word	0x20000c0c
 800ee1c:	200001ac 	.word	0x200001ac
 800ee20:	20000d60 	.word	0x20000d60
 800ee24:	20000bf8 	.word	0x20000bf8
 800ee28:	20000b5c 	.word	0x20000b5c

0800ee2c <searchC2>:
//searchC2
//aスラローム走行でgoal座標に進む　重ね探索用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC2(){
 800ee2c:	b590      	push	{r4, r7, lr}
 800ee2e:	b083      	sub	sp, #12
 800ee30:	af00      	add	r7, sp, #0

	if(MF.FLAG.SRC2){
 800ee32:	4bab      	ldr	r3, [pc, #684]	; (800f0e0 <searchC2+0x2b4>)
 800ee34:	881b      	ldrh	r3, [r3, #0]
 800ee36:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d001      	beq.n	800ee44 <searchC2+0x18>
		load_map_from_eeprom();
 800ee40:	f002 fdfe 	bl	8011a40 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800ee44:	4ba6      	ldr	r3, [pc, #664]	; (800f0e0 <searchC2+0x2b4>)
 800ee46:	881b      	ldrh	r3, [r3, #0]
 800ee48:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ee4c:	b2db      	uxtb	r3, r3
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d101      	bne.n	800ee56 <searchC2+0x2a>
 800ee52:	f002 fe6d 	bl	8011b30 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
 800ee56:	4ba2      	ldr	r3, [pc, #648]	; (800f0e0 <searchC2+0x2b4>)
 800ee58:	881b      	ldrh	r3, [r3, #0]
 800ee5a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ee5e:	b2db      	uxtb	r3, r3
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d106      	bne.n	800ee72 <searchC2+0x46>
 800ee64:	4b9f      	ldr	r3, [pc, #636]	; (800f0e4 <searchC2+0x2b8>)
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800ee6c:	b2da      	uxtb	r2, r3
 800ee6e:	4b9d      	ldr	r3, [pc, #628]	; (800f0e4 <searchC2+0x2b8>)
 800ee70:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800ee72:	4b9b      	ldr	r3, [pc, #620]	; (800f0e0 <searchC2+0x2b4>)
 800ee74:	881b      	ldrh	r3, [r3, #0]
 800ee76:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ee7a:	b2db      	uxtb	r3, r3
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d101      	bne.n	800ee84 <searchC2+0x58>
 800ee80:	f000 ff0e 	bl	800fca0 <write_map>

	if(MF2.FLAG.GOAL){
 800ee84:	4b98      	ldr	r3, [pc, #608]	; (800f0e8 <searchC2+0x2bc>)
 800ee86:	881b      	ldrh	r3, [r3, #0]
 800ee88:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d00b      	beq.n	800eeaa <searchC2+0x7e>
		HAL_Delay(500);
 800ee92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ee96:	f7f2 f8c1 	bl	800101c <HAL_Delay>
		rotate_180();											//180度回転
 800ee9a:	f7f7 fc59 	bl	8006750 <rotate_180>
//		driveC2(SETPOS_BACK);         							//a尻を当てる程度に後退。回転後に停止する
//		degree_z = target_degree_z;
//		start_mode = 0;
		start_mode = 1;
 800ee9e:	4b93      	ldr	r3, [pc, #588]	; (800f0ec <searchC2+0x2c0>)
 800eea0:	2201      	movs	r2, #1
 800eea2:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800eea4:	4b92      	ldr	r3, [pc, #584]	; (800f0f0 <searchC2+0x2c4>)
 800eea6:	2201      	movs	r2, #1
 800eea8:	701a      	strb	r2, [r3, #0]
	}

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800eeaa:	f7f6 fd63 	bl	8005974 <start_sectionA>
	adv_pos();
 800eeae:	f000 fe33 	bl	800fb18 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800eeb2:	4b8b      	ldr	r3, [pc, #556]	; (800f0e0 <searchC2+0x2b4>)
 800eeb4:	881b      	ldrh	r3, [r3, #0]
 800eeb6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eeba:	b2db      	uxtb	r3, r3
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d101      	bne.n	800eec4 <searchC2+0x98>
 800eec0:	f000 feee 	bl	800fca0 <write_map>
	r_cnt = 0;																//a経路カウンタの初期化
 800eec4:	4b8b      	ldr	r3, [pc, #556]	; (800f0f4 <searchC2+0x2c8>)
 800eec6:	2200      	movs	r2, #0
 800eec8:	701a      	strb	r2, [r3, #0]
	make_smap();															//a歩数マップ作成
 800eeca:	f001 f8dd 	bl	8010088 <make_smap>
	make_route();															//a最短経路探索（route配列に動作が格納される）
 800eece:	f001 fc99 	bl	8010804 <make_route>
	uint8_t x, y;															//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){												//route配列によって進行を決定。経路カウンタを進める
 800eed2:	4b88      	ldr	r3, [pc, #544]	; (800f0f4 <searchC2+0x2c8>)
 800eed4:	781b      	ldrb	r3, [r3, #0]
 800eed6:	1c5a      	adds	r2, r3, #1
 800eed8:	b2d1      	uxtb	r1, r2
 800eeda:	4a86      	ldr	r2, [pc, #536]	; (800f0f4 <searchC2+0x2c8>)
 800eedc:	7011      	strb	r1, [r2, #0]
 800eede:	461a      	mov	r2, r3
 800eee0:	4b85      	ldr	r3, [pc, #532]	; (800f0f8 <searchC2+0x2cc>)
 800eee2:	5c9b      	ldrb	r3, [r3, r2]
 800eee4:	2b22      	cmp	r3, #34	; 0x22
 800eee6:	d07f      	beq.n	800efe8 <searchC2+0x1bc>
 800eee8:	2b22      	cmp	r3, #34	; 0x22
 800eeea:	dc03      	bgt.n	800eef4 <searchC2+0xc8>
 800eeec:	2b11      	cmp	r3, #17
 800eeee:	f000 808b 	beq.w	800f008 <searchC2+0x1dc>
 800eef2:	e08c      	b.n	800f00e <searchC2+0x1e2>
 800eef4:	2b44      	cmp	r3, #68	; 0x44
 800eef6:	d074      	beq.n	800efe2 <searchC2+0x1b6>
 800eef8:	2b88      	cmp	r3, #136	; 0x88
 800eefa:	f040 8088 	bne.w	800f00e <searchC2+0x1e2>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800eefe:	4b7d      	ldr	r3, [pc, #500]	; (800f0f4 <searchC2+0x2c8>)
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	461a      	mov	r2, r3
 800ef04:	4b7c      	ldr	r3, [pc, #496]	; (800f0f8 <searchC2+0x2cc>)
 800ef06:	5c9b      	ldrb	r3, [r3, r2]
 800ef08:	2b88      	cmp	r3, #136	; 0x88
 800ef0a:	d158      	bne.n	800efbe <searchC2+0x192>
 800ef0c:	4b74      	ldr	r3, [pc, #464]	; (800f0e0 <searchC2+0x2b4>)
 800ef0e:	881b      	ldrh	r3, [r3, #0]
 800ef10:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800ef14:	b2db      	uxtb	r3, r3
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d051      	beq.n	800efbe <searchC2+0x192>
					x = mouse.x;
 800ef1a:	4b78      	ldr	r3, [pc, #480]	; (800f0fc <searchC2+0x2d0>)
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	70fb      	strb	r3, [r7, #3]
					y = mouse.y;
 800ef20:	4b76      	ldr	r3, [pc, #472]	; (800f0fc <searchC2+0x2d0>)
 800ef22:	785b      	ldrb	r3, [r3, #1]
 800ef24:	70bb      	strb	r3, [r7, #2]
					adv_pos();
 800ef26:	f000 fdf7 	bl	800fb18 <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800ef2a:	4b74      	ldr	r3, [pc, #464]	; (800f0fc <searchC2+0x2d0>)
 800ef2c:	785b      	ldrb	r3, [r3, #1]
 800ef2e:	b2db      	uxtb	r3, r3
 800ef30:	4618      	mov	r0, r3
 800ef32:	4b72      	ldr	r3, [pc, #456]	; (800f0fc <searchC2+0x2d0>)
 800ef34:	781b      	ldrb	r3, [r3, #0]
 800ef36:	b2db      	uxtb	r3, r3
 800ef38:	4619      	mov	r1, r3
 800ef3a:	4a71      	ldr	r2, [pc, #452]	; (800f100 <searchC2+0x2d4>)
 800ef3c:	0103      	lsls	r3, r0, #4
 800ef3e:	4413      	add	r3, r2
 800ef40:	440b      	add	r3, r1
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	f003 030f 	and.w	r3, r3, #15
 800ef48:	4a6c      	ldr	r2, [pc, #432]	; (800f0fc <searchC2+0x2d0>)
 800ef4a:	7852      	ldrb	r2, [r2, #1]
 800ef4c:	b2d2      	uxtb	r2, r2
 800ef4e:	4614      	mov	r4, r2
 800ef50:	4a6a      	ldr	r2, [pc, #424]	; (800f0fc <searchC2+0x2d0>)
 800ef52:	7812      	ldrb	r2, [r2, #0]
 800ef54:	b2d2      	uxtb	r2, r2
 800ef56:	4610      	mov	r0, r2
 800ef58:	4969      	ldr	r1, [pc, #420]	; (800f100 <searchC2+0x2d4>)
 800ef5a:	0122      	lsls	r2, r4, #4
 800ef5c:	440a      	add	r2, r1
 800ef5e:	4402      	add	r2, r0
 800ef60:	7812      	ldrb	r2, [r2, #0]
 800ef62:	0912      	lsrs	r2, r2, #4
 800ef64:	b2d2      	uxtb	r2, r2
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d111      	bne.n	800ef8e <searchC2+0x162>
						if(!MF2.FLAG.HACCEL){
 800ef6a:	4b5f      	ldr	r3, [pc, #380]	; (800f0e8 <searchC2+0x2bc>)
 800ef6c:	881b      	ldrh	r3, [r3, #0]
 800ef6e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d107      	bne.n	800ef88 <searchC2+0x15c>
							one_sectionA();
 800ef78:	f7f6 ffd2 	bl	8005f20 <one_sectionA>
							MF2.FLAG.HACCEL = 1;
 800ef7c:	4a5a      	ldr	r2, [pc, #360]	; (800f0e8 <searchC2+0x2bc>)
 800ef7e:	8813      	ldrh	r3, [r2, #0]
 800ef80:	f043 0302 	orr.w	r3, r3, #2
 800ef84:	8013      	strh	r3, [r2, #0]
 800ef86:	e013      	b.n	800efb0 <searchC2+0x184>
						}else{
							one_sectionU();
 800ef88:	f7f7 fa12 	bl	80063b0 <one_sectionU>
 800ef8c:	e010      	b.n	800efb0 <searchC2+0x184>
						}
					}else if(MF2.FLAG.HACCEL){
 800ef8e:	4b56      	ldr	r3, [pc, #344]	; (800f0e8 <searchC2+0x2bc>)
 800ef90:	881b      	ldrh	r3, [r3, #0]
 800ef92:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ef96:	b2db      	uxtb	r3, r3
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d007      	beq.n	800efac <searchC2+0x180>
						one_sectionD();
 800ef9c:	f7f7 f84c 	bl	8006038 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800efa0:	4a51      	ldr	r2, [pc, #324]	; (800f0e8 <searchC2+0x2bc>)
 800efa2:	8813      	ldrh	r3, [r2, #0]
 800efa4:	f36f 0341 	bfc	r3, #1, #1
 800efa8:	8013      	strh	r3, [r2, #0]
 800efaa:	e001      	b.n	800efb0 <searchC2+0x184>
					}else{
						one_sectionU();
 800efac:	f7f7 fa00 	bl	80063b0 <one_sectionU>
					}
					mouse.x = x;
 800efb0:	4a52      	ldr	r2, [pc, #328]	; (800f0fc <searchC2+0x2d0>)
 800efb2:	78fb      	ldrb	r3, [r7, #3]
 800efb4:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800efb6:	4a51      	ldr	r2, [pc, #324]	; (800f0fc <searchC2+0x2d0>)
 800efb8:	78bb      	ldrb	r3, [r7, #2]
 800efba:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}else{
					one_sectionU();
				}
				break;
 800efbc:	e027      	b.n	800f00e <searchC2+0x1e2>
				}else if(MF2.FLAG.HACCEL){
 800efbe:	4b4a      	ldr	r3, [pc, #296]	; (800f0e8 <searchC2+0x2bc>)
 800efc0:	881b      	ldrh	r3, [r3, #0]
 800efc2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d007      	beq.n	800efdc <searchC2+0x1b0>
					one_sectionD();
 800efcc:	f7f7 f834 	bl	8006038 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800efd0:	4a45      	ldr	r2, [pc, #276]	; (800f0e8 <searchC2+0x2bc>)
 800efd2:	8813      	ldrh	r3, [r2, #0]
 800efd4:	f36f 0341 	bfc	r3, #1, #1
 800efd8:	8013      	strh	r3, [r2, #0]
				break;
 800efda:	e018      	b.n	800f00e <searchC2+0x1e2>
					one_sectionU();
 800efdc:	f7f7 f9e8 	bl	80063b0 <one_sectionU>
				break;
 800efe0:	e015      	b.n	800f00e <searchC2+0x1e2>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800efe2:	f7f7 fc8d 	bl	8006900 <slalom_R90>
				break;
 800efe6:	e012      	b.n	800f00e <searchC2+0x1e2>
			//----180回転----
			case 0x22:
				half_sectionD();
 800efe8:	f7f6 fe5e 	bl	8005ca8 <half_sectionD>
				rotate_180();
 800efec:	f7f7 fbb0 	bl	8006750 <rotate_180>
				if(wall_info & 0x88){
 800eff0:	4b3c      	ldr	r3, [pc, #240]	; (800f0e4 <searchC2+0x2b8>)
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d002      	beq.n	800f002 <searchC2+0x1d6>
					set_position();
 800effc:	f7f6 fc86 	bl	800590c <set_position>
				}else{
					half_sectionA();
				}
				break;
 800f000:	e005      	b.n	800f00e <searchC2+0x1e2>
					half_sectionA();
 800f002:	f7f6 fdeb 	bl	8005bdc <half_sectionA>
				break;
 800f006:	e002      	b.n	800f00e <searchC2+0x1e2>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800f008:	f7f7 fda8 	bl	8006b5c <slalom_L90>
				break;
 800f00c:	bf00      	nop
		}
		adv_pos();
 800f00e:	f000 fd83 	bl	800fb18 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800f012:	4b33      	ldr	r3, [pc, #204]	; (800f0e0 <searchC2+0x2b4>)
 800f014:	881b      	ldrh	r3, [r3, #0]
 800f016:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f01a:	b2db      	uxtb	r3, r3
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d101      	bne.n	800f024 <searchC2+0x1f8>
 800f020:	f000 fdb4 	bl	800fb8c <conf_route>

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800f024:	4b35      	ldr	r3, [pc, #212]	; (800f0fc <searchC2+0x2d0>)
 800f026:	785b      	ldrb	r3, [r3, #1]
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	4618      	mov	r0, r3
 800f02c:	4b33      	ldr	r3, [pc, #204]	; (800f0fc <searchC2+0x2d0>)
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	b2db      	uxtb	r3, r3
 800f032:	4619      	mov	r1, r3
 800f034:	4a33      	ldr	r2, [pc, #204]	; (800f104 <searchC2+0x2d8>)
 800f036:	0103      	lsls	r3, r0, #4
 800f038:	440b      	add	r3, r1
 800f03a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	f47f af47 	bne.w	800eed2 <searchC2+0xa6>

	for(int j=0; j<goal_mode-1; j++){
 800f044:	2300      	movs	r3, #0
 800f046:	607b      	str	r3, [r7, #4]
 800f048:	e006      	b.n	800f058 <searchC2+0x22c>
		one_sectionU();
 800f04a:	f7f7 f9b1 	bl	80063b0 <one_sectionU>
		adv_pos();
 800f04e:	f000 fd63 	bl	800fb18 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	3301      	adds	r3, #1
 800f056:	607b      	str	r3, [r7, #4]
 800f058:	4b25      	ldr	r3, [pc, #148]	; (800f0f0 <searchC2+0x2c4>)
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	3b01      	subs	r3, #1
 800f05e:	687a      	ldr	r2, [r7, #4]
 800f060:	429a      	cmp	r2, r3
 800f062:	dbf2      	blt.n	800f04a <searchC2+0x21e>
	}
	half_sectionD();
 800f064:	f7f6 fe20 	bl	8005ca8 <half_sectionD>

	set_positionF();
 800f068:	f7f6 fc66 	bl	8005938 <set_positionF>

	MF2.FLAG.GOAL = (MF2.FLAG.GOAL+1)%2;
 800f06c:	4b1e      	ldr	r3, [pc, #120]	; (800f0e8 <searchC2+0x2bc>)
 800f06e:	881b      	ldrh	r3, [r3, #0]
 800f070:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800f074:	b2db      	uxtb	r3, r3
 800f076:	3301      	adds	r3, #1
 800f078:	2b00      	cmp	r3, #0
 800f07a:	f003 0301 	and.w	r3, r3, #1
 800f07e:	bfb8      	it	lt
 800f080:	425b      	neglt	r3, r3
 800f082:	f003 0301 	and.w	r3, r3, #1
 800f086:	b2d9      	uxtb	r1, r3
 800f088:	4a17      	ldr	r2, [pc, #92]	; (800f0e8 <searchC2+0x2bc>)
 800f08a:	8813      	ldrh	r3, [r2, #0]
 800f08c:	f361 2308 	bfi	r3, r1, #8, #1
 800f090:	8013      	strh	r3, [r2, #0]
	if(!MF2.FLAG.GOAL){
 800f092:	4b15      	ldr	r3, [pc, #84]	; (800f0e8 <searchC2+0x2bc>)
 800f094:	881b      	ldrh	r3, [r3, #0]
 800f096:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800f09a:	b2db      	uxtb	r3, r3
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d112      	bne.n	800f0c6 <searchC2+0x29a>
		HAL_Delay(500);
 800f0a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f0a4:	f7f1 ffba 	bl	800101c <HAL_Delay>
		rotate_180();										//180度回転
 800f0a8:	f7f7 fb52 	bl	8006750 <rotate_180>
		driveC2(SETPOS_BACK);         						//a尻を当てる程度に後退。回転後に停止する
 800f0ac:	2064      	movs	r0, #100	; 0x64
 800f0ae:	f7f6 f9a7 	bl	8005400 <driveC2>
		degree_z = target_degree_z;
 800f0b2:	4b15      	ldr	r3, [pc, #84]	; (800f108 <searchC2+0x2dc>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	4a15      	ldr	r2, [pc, #84]	; (800f10c <searchC2+0x2e0>)
 800f0b8:	6013      	str	r3, [r2, #0]
		start_mode = 0;
 800f0ba:	4b0c      	ldr	r3, [pc, #48]	; (800f0ec <searchC2+0x2c0>)
 800f0bc:	2200      	movs	r2, #0
 800f0be:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800f0c0:	4b0b      	ldr	r3, [pc, #44]	; (800f0f0 <searchC2+0x2c4>)
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	701a      	strb	r2, [r3, #0]
	}

	if(!MF.FLAG.SCND){
 800f0c6:	4b06      	ldr	r3, [pc, #24]	; (800f0e0 <searchC2+0x2b4>)
 800f0c8:	881b      	ldrh	r3, [r3, #0]
 800f0ca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f0ce:	b2db      	uxtb	r3, r3
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d101      	bne.n	800f0d8 <searchC2+0x2ac>
		store_map_in_eeprom();
 800f0d4:	f002 fc7a 	bl	80119cc <store_map_in_eeprom>
	}
}
 800f0d8:	bf00      	nop
 800f0da:	370c      	adds	r7, #12
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd90      	pop	{r4, r7, pc}
 800f0e0:	20000f68 	.word	0x20000f68
 800f0e4:	200002c8 	.word	0x200002c8
 800f0e8:	20000f64 	.word	0x20000f64
 800f0ec:	200015c8 	.word	0x200015c8
 800f0f0:	20000bb1 	.word	0x20000bb1
 800f0f4:	200015d0 	.word	0x200015d0
 800f0f8:	20000c54 	.word	0x20000c54
 800f0fc:	20000c0c 	.word	0x20000c0c
 800f100:	200001ac 	.word	0x200001ac
 800f104:	20000d60 	.word	0x20000d60
 800f108:	20000bf8 	.word	0x20000bf8
 800f10c:	20000b5c 	.word	0x20000b5c

0800f110 <searchD>:
//searchD
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD(){
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800f116:	4b6a      	ldr	r3, [pc, #424]	; (800f2c0 <searchD+0x1b0>)
 800f118:	881b      	ldrh	r3, [r3, #0]
 800f11a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f11e:	b2db      	uxtb	r3, r3
 800f120:	2b00      	cmp	r3, #0
 800f122:	d001      	beq.n	800f128 <searchD+0x18>
		load_map_from_eeprom();
 800f124:	f002 fc8c 	bl	8011a40 <load_map_from_eeprom>
//	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
//	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
//	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800f128:	f7f6 fc24 	bl	8005974 <start_sectionA>
	adv_pos();
 800f12c:	f000 fcf4 	bl	800fb18 <adv_pos>

	//====a歩数マップ・経路作成====
//	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
	r_cnt = 0;												//a経路カウンタの初期化
 800f130:	4b64      	ldr	r3, [pc, #400]	; (800f2c4 <searchD+0x1b4>)
 800f132:	2200      	movs	r2, #0
 800f134:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800f136:	f000 ffa7 	bl	8010088 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800f13a:	f001 fb63 	bl	8010804 <make_route>

	MF2.FLAG.HACCEL = 0;
 800f13e:	4a62      	ldr	r2, [pc, #392]	; (800f2c8 <searchD+0x1b8>)
 800f140:	8813      	ldrh	r3, [r2, #0]
 800f142:	f36f 0341 	bfc	r3, #1, #1
 800f146:	8013      	strh	r3, [r2, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800f148:	4b5e      	ldr	r3, [pc, #376]	; (800f2c4 <searchD+0x1b4>)
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	1c5a      	adds	r2, r3, #1
 800f14e:	b2d1      	uxtb	r1, r2
 800f150:	4a5c      	ldr	r2, [pc, #368]	; (800f2c4 <searchD+0x1b4>)
 800f152:	7011      	strb	r1, [r2, #0]
 800f154:	461a      	mov	r2, r3
 800f156:	4b5d      	ldr	r3, [pc, #372]	; (800f2cc <searchD+0x1bc>)
 800f158:	5c9b      	ldrb	r3, [r3, r2]
 800f15a:	2b22      	cmp	r3, #34	; 0x22
 800f15c:	d05d      	beq.n	800f21a <searchD+0x10a>
 800f15e:	2b22      	cmp	r3, #34	; 0x22
 800f160:	dc02      	bgt.n	800f168 <searchD+0x58>
 800f162:	2b11      	cmp	r3, #17
 800f164:	d069      	beq.n	800f23a <searchD+0x12a>
 800f166:	e06b      	b.n	800f240 <searchD+0x130>
 800f168:	2b44      	cmp	r3, #68	; 0x44
 800f16a:	d053      	beq.n	800f214 <searchD+0x104>
 800f16c:	2b88      	cmp	r3, #136	; 0x88
 800f16e:	d167      	bne.n	800f240 <searchD+0x130>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND && MF.FLAG.ACCL2){
 800f170:	4b53      	ldr	r3, [pc, #332]	; (800f2c0 <searchD+0x1b0>)
 800f172:	881b      	ldrh	r3, [r3, #0]
 800f174:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d046      	beq.n	800f20c <searchD+0xfc>
 800f17e:	4b50      	ldr	r3, [pc, #320]	; (800f2c0 <searchD+0x1b0>)
 800f180:	881b      	ldrh	r3, [r3, #0]
 800f182:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800f186:	b2db      	uxtb	r3, r3
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d03f      	beq.n	800f20c <searchD+0xfc>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (MF2.FLAG.HACCEL == 0)){
 800f18c:	4b4d      	ldr	r3, [pc, #308]	; (800f2c4 <searchD+0x1b4>)
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	3b01      	subs	r3, #1
 800f192:	4a4e      	ldr	r2, [pc, #312]	; (800f2cc <searchD+0x1bc>)
 800f194:	5cd2      	ldrb	r2, [r2, r3]
 800f196:	4b4b      	ldr	r3, [pc, #300]	; (800f2c4 <searchD+0x1b4>)
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	4619      	mov	r1, r3
 800f19c:	4b4b      	ldr	r3, [pc, #300]	; (800f2cc <searchD+0x1bc>)
 800f19e:	5c5b      	ldrb	r3, [r3, r1]
 800f1a0:	4013      	ands	r3, r2
 800f1a2:	b2db      	uxtb	r3, r3
 800f1a4:	2b88      	cmp	r3, #136	; 0x88
 800f1a6:	d115      	bne.n	800f1d4 <searchD+0xc4>
 800f1a8:	4b46      	ldr	r3, [pc, #280]	; (800f2c4 <searchD+0x1b4>)
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	461a      	mov	r2, r3
 800f1ae:	4b47      	ldr	r3, [pc, #284]	; (800f2cc <searchD+0x1bc>)
 800f1b0:	5c9b      	ldrb	r3, [r3, r2]
 800f1b2:	2bff      	cmp	r3, #255	; 0xff
 800f1b4:	d00e      	beq.n	800f1d4 <searchD+0xc4>
 800f1b6:	4b44      	ldr	r3, [pc, #272]	; (800f2c8 <searchD+0x1b8>)
 800f1b8:	881b      	ldrh	r3, [r3, #0]
 800f1ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f1be:	b2db      	uxtb	r3, r3
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d107      	bne.n	800f1d4 <searchD+0xc4>
						one_sectionA();
 800f1c4:	f7f6 feac 	bl	8005f20 <one_sectionA>
						MF2.FLAG.HACCEL = 1;
 800f1c8:	4a3f      	ldr	r2, [pc, #252]	; (800f2c8 <searchD+0x1b8>)
 800f1ca:	8813      	ldrh	r3, [r2, #0]
 800f1cc:	f043 0302 	orr.w	r3, r3, #2
 800f1d0:	8013      	strh	r3, [r2, #0]
 800f1d2:	e01a      	b.n	800f20a <searchD+0xfa>
					}
					else if((route[r_cnt] & 0x55) && (MF2.FLAG.HACCEL)){
 800f1d4:	4b3b      	ldr	r3, [pc, #236]	; (800f2c4 <searchD+0x1b4>)
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	461a      	mov	r2, r3
 800f1da:	4b3c      	ldr	r3, [pc, #240]	; (800f2cc <searchD+0x1bc>)
 800f1dc:	5c9b      	ldrb	r3, [r3, r2]
 800f1de:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d00e      	beq.n	800f204 <searchD+0xf4>
 800f1e6:	4b38      	ldr	r3, [pc, #224]	; (800f2c8 <searchD+0x1b8>)
 800f1e8:	881b      	ldrh	r3, [r3, #0]
 800f1ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d007      	beq.n	800f204 <searchD+0xf4>
						one_sectionD();
 800f1f4:	f7f6 ff20 	bl	8006038 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800f1f8:	4a33      	ldr	r2, [pc, #204]	; (800f2c8 <searchD+0x1b8>)
 800f1fa:	8813      	ldrh	r3, [r2, #0]
 800f1fc:	f36f 0341 	bfc	r3, #1, #1
 800f200:	8013      	strh	r3, [r2, #0]
 800f202:	e002      	b.n	800f20a <searchD+0xfa>
					}else{
						one_sectionU();
 800f204:	f7f7 f8d4 	bl	80063b0 <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (MF2.FLAG.HACCEL == 0)){
 800f208:	e003      	b.n	800f212 <searchD+0x102>
 800f20a:	e002      	b.n	800f212 <searchD+0x102>
					}
				}else{
					one_sectionU();
 800f20c:	f7f7 f8d0 	bl	80063b0 <one_sectionU>
				}
				break;
 800f210:	e016      	b.n	800f240 <searchD+0x130>
 800f212:	e015      	b.n	800f240 <searchD+0x130>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800f214:	f7f7 fb74 	bl	8006900 <slalom_R90>
				break;
 800f218:	e012      	b.n	800f240 <searchD+0x130>
			//----180回転----
			case 0x22:
				half_sectionD();
 800f21a:	f7f6 fd45 	bl	8005ca8 <half_sectionD>
				rotate_180();
 800f21e:	f7f7 fa97 	bl	8006750 <rotate_180>
				if(wall_info & 0x88){
 800f222:	4b2b      	ldr	r3, [pc, #172]	; (800f2d0 <searchD+0x1c0>)
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d002      	beq.n	800f234 <searchD+0x124>
					set_position();
 800f22e:	f7f6 fb6d 	bl	800590c <set_position>
				}else{
					half_sectionA();
				}
				break;
 800f232:	e005      	b.n	800f240 <searchD+0x130>
					half_sectionA();
 800f234:	f7f6 fcd2 	bl	8005bdc <half_sectionA>
				break;
 800f238:	e002      	b.n	800f240 <searchD+0x130>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800f23a:	f7f7 fc8f 	bl	8006b5c <slalom_L90>
				break;
 800f23e:	bf00      	nop
		}
		adv_pos();
 800f240:	f000 fc6a 	bl	800fb18 <adv_pos>
//		if(!MF.FLAG.SCND)conf_route();

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800f244:	4b23      	ldr	r3, [pc, #140]	; (800f2d4 <searchD+0x1c4>)
 800f246:	785b      	ldrb	r3, [r3, #1]
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	4618      	mov	r0, r3
 800f24c:	4b21      	ldr	r3, [pc, #132]	; (800f2d4 <searchD+0x1c4>)
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	b2db      	uxtb	r3, r3
 800f252:	4619      	mov	r1, r3
 800f254:	4a20      	ldr	r2, [pc, #128]	; (800f2d8 <searchD+0x1c8>)
 800f256:	0103      	lsls	r3, r0, #4
 800f258:	440b      	add	r3, r1
 800f25a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	f47f af72 	bne.w	800f148 <searchD+0x38>

	for(int j=0; j<goal_mode-1; j++){
 800f264:	2300      	movs	r3, #0
 800f266:	607b      	str	r3, [r7, #4]
 800f268:	e006      	b.n	800f278 <searchD+0x168>
		one_sectionU();
 800f26a:	f7f7 f8a1 	bl	80063b0 <one_sectionU>
		adv_pos();
 800f26e:	f000 fc53 	bl	800fb18 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	3301      	adds	r3, #1
 800f276:	607b      	str	r3, [r7, #4]
 800f278:	4b18      	ldr	r3, [pc, #96]	; (800f2dc <searchD+0x1cc>)
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	3b01      	subs	r3, #1
 800f27e:	687a      	ldr	r2, [r7, #4]
 800f280:	429a      	cmp	r2, r3
 800f282:	dbf2      	blt.n	800f26a <searchD+0x15a>
	}
	half_sectionD();
 800f284:	f7f6 fd10 	bl	8005ca8 <half_sectionD>
	set_positionF();
 800f288:	f7f6 fb56 	bl	8005938 <set_positionF>

	HAL_Delay(500);
 800f28c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f290:	f7f1 fec4 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800f294:	f7f7 fa5c 	bl	8006750 <rotate_180>
//	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800f298:	4b11      	ldr	r3, [pc, #68]	; (800f2e0 <searchD+0x1d0>)
 800f29a:	2201      	movs	r2, #1
 800f29c:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800f29e:	4b0f      	ldr	r3, [pc, #60]	; (800f2dc <searchD+0x1cc>)
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	701a      	strb	r2, [r3, #0]

	if(!MF.FLAG.SCND){
 800f2a4:	4b06      	ldr	r3, [pc, #24]	; (800f2c0 <searchD+0x1b0>)
 800f2a6:	881b      	ldrh	r3, [r3, #0]
 800f2a8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f2ac:	b2db      	uxtb	r3, r3
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d101      	bne.n	800f2b6 <searchD+0x1a6>
		store_map_in_eeprom();
 800f2b2:	f002 fb8b 	bl	80119cc <store_map_in_eeprom>
	}
}
 800f2b6:	bf00      	nop
 800f2b8:	3708      	adds	r7, #8
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	20000f68 	.word	0x20000f68
 800f2c4:	200015d0 	.word	0x200015d0
 800f2c8:	20000f64 	.word	0x20000f64
 800f2cc:	20000c54 	.word	0x20000c54
 800f2d0:	200002c8 	.word	0x200002c8
 800f2d4:	20000c0c 	.word	0x20000c0c
 800f2d8:	20000d60 	.word	0x20000d60
 800f2dc:	20000bb1 	.word	0x20000bb1
 800f2e0:	200015c8 	.word	0x200015c8

0800f2e4 <searchE>:
//searchE
//a未知壁を含むマスを仮goal座標とし、スラローム連続走行で全マスに進む。仮goalを連続的に変化させる。全面探索終了後は半区画減速
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchE(){
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0

	int i = 0;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	607b      	str	r3, [r7, #4]
	int j = 0;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	603b      	str	r3, [r7, #0]
	do {
		if(i == 0){
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d111      	bne.n	800f31c <searchE+0x38>
			//====a前に壁が無い想定で問答無用で前進====
			half_sectionA();
 800f2f8:	f7f6 fc70 	bl	8005bdc <half_sectionA>
			adv_pos();
 800f2fc:	f000 fc0c 	bl	800fb18 <adv_pos>
			write_map();														//地図の初期化
 800f300:	f000 fcce 	bl	800fca0 <write_map>

			//====a歩数等初期化====
			m_step = r_cnt = 0;													//歩数と経路カウンタの初期化
 800f304:	4b44      	ldr	r3, [pc, #272]	; (800f418 <searchE+0x134>)
 800f306:	2200      	movs	r2, #0
 800f308:	701a      	strb	r2, [r3, #0]
 800f30a:	4b44      	ldr	r3, [pc, #272]	; (800f41c <searchE+0x138>)
 800f30c:	2200      	movs	r2, #0
 800f30e:	801a      	strh	r2, [r3, #0]
			find_pregoal();														//仮goalまでの歩数マップの初期化
 800f310:	f001 fbd8 	bl	8010ac4 <find_pregoal>
			make_smap2();
 800f314:	f001 fdca 	bl	8010eac <make_smap2>
			make_route();														//最短経路探索(route配列に動作が格納される)
 800f318:	f001 fa74 	bl	8010804 <make_route>
		}

		//====a探索走行====
		do {
			//----a進行----
			switch (route[r_cnt++]) {										//route配列によって進行を決定。経路カウンタを進める
 800f31c:	4b3e      	ldr	r3, [pc, #248]	; (800f418 <searchE+0x134>)
 800f31e:	781b      	ldrb	r3, [r3, #0]
 800f320:	1c5a      	adds	r2, r3, #1
 800f322:	b2d1      	uxtb	r1, r2
 800f324:	4a3c      	ldr	r2, [pc, #240]	; (800f418 <searchE+0x134>)
 800f326:	7011      	strb	r1, [r2, #0]
 800f328:	461a      	mov	r2, r3
 800f32a:	4b3d      	ldr	r3, [pc, #244]	; (800f420 <searchE+0x13c>)
 800f32c:	5c9b      	ldrb	r3, [r3, r2]
 800f32e:	2b22      	cmp	r3, #34	; 0x22
 800f330:	d00e      	beq.n	800f350 <searchE+0x6c>
 800f332:	2b22      	cmp	r3, #34	; 0x22
 800f334:	dc02      	bgt.n	800f33c <searchE+0x58>
 800f336:	2b11      	cmp	r3, #17
 800f338:	d01a      	beq.n	800f370 <searchE+0x8c>
 800f33a:	e01c      	b.n	800f376 <searchE+0x92>
 800f33c:	2b44      	cmp	r3, #68	; 0x44
 800f33e:	d004      	beq.n	800f34a <searchE+0x66>
 800f340:	2b88      	cmp	r3, #136	; 0x88
 800f342:	d118      	bne.n	800f376 <searchE+0x92>
				//----a前進----
			case 0x88:
				one_sectionU();
 800f344:	f7f7 f834 	bl	80063b0 <one_sectionU>
				break;
 800f348:	e015      	b.n	800f376 <searchE+0x92>
				//----a右折----
			case 0x44:
				slalom_R90();
 800f34a:	f7f7 fad9 	bl	8006900 <slalom_R90>
				break;
 800f34e:	e012      	b.n	800f376 <searchE+0x92>
				//----180回転----
			case 0x22:
				half_sectionD();
 800f350:	f7f6 fcaa 	bl	8005ca8 <half_sectionD>
				rotate_180();
 800f354:	f7f7 f9fc 	bl	8006750 <rotate_180>
				if(wall_info & 0x88){
 800f358:	4b32      	ldr	r3, [pc, #200]	; (800f424 <searchE+0x140>)
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f360:	2b00      	cmp	r3, #0
 800f362:	d002      	beq.n	800f36a <searchE+0x86>
					set_position();
 800f364:	f7f6 fad2 	bl	800590c <set_position>
				}else{
					half_sectionA();
				}
				break;
 800f368:	e005      	b.n	800f376 <searchE+0x92>
					half_sectionA();
 800f36a:	f7f6 fc37 	bl	8005bdc <half_sectionA>
				break;
 800f36e:	e002      	b.n	800f376 <searchE+0x92>
				//----a左折----
			case 0x11:
				slalom_L90();
 800f370:	f7f7 fbf4 	bl	8006b5c <slalom_L90>
				break;
 800f374:	bf00      	nop
			}
			adv_pos();														//aマイクロマウス内部位置情報でも前進処理
 800f376:	f000 fbcf 	bl	800fb18 <adv_pos>
			j++;
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	3301      	adds	r3, #1
 800f37e:	603b      	str	r3, [r7, #0]
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	2b96      	cmp	r3, #150	; 0x96
 800f384:	dc0e      	bgt.n	800f3a4 <searchE+0xc0>

		} while ((mouse.x != pregoal_x) || (mouse.y != pregoal_y));			//a現在座標と仮goal座標が等しくなるまで実行
 800f386:	4b28      	ldr	r3, [pc, #160]	; (800f428 <searchE+0x144>)
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	b2da      	uxtb	r2, r3
 800f38c:	4b27      	ldr	r3, [pc, #156]	; (800f42c <searchE+0x148>)
 800f38e:	781b      	ldrb	r3, [r3, #0]
 800f390:	429a      	cmp	r2, r3
 800f392:	d1c3      	bne.n	800f31c <searchE+0x38>
 800f394:	4b24      	ldr	r3, [pc, #144]	; (800f428 <searchE+0x144>)
 800f396:	785b      	ldrb	r3, [r3, #1]
 800f398:	b2da      	uxtb	r2, r3
 800f39a:	4b25      	ldr	r3, [pc, #148]	; (800f430 <searchE+0x14c>)
 800f39c:	781b      	ldrb	r3, [r3, #0]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d1bc      	bne.n	800f31c <searchE+0x38>
 800f3a2:	e000      	b.n	800f3a6 <searchE+0xc2>
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800f3a4:	bf00      	nop

		get_wall_info();													//a壁情報の初期化, 後壁はなくなる
 800f3a6:	f002 fbc3 	bl	8011b30 <get_wall_info>
		write_map();														//a地図の初期化
 800f3aa:	f000 fc79 	bl	800fca0 <write_map>
		//printf("get pregoal, x = %d, y = %d\n", mouse.x, mouse.y);

		//====a歩数等初期化====
		m_step = r_cnt = 0;													//a歩数と経路カウンタの初期化
 800f3ae:	4b1a      	ldr	r3, [pc, #104]	; (800f418 <searchE+0x134>)
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	701a      	strb	r2, [r3, #0]
 800f3b4:	4b19      	ldr	r3, [pc, #100]	; (800f41c <searchE+0x138>)
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	801a      	strh	r2, [r3, #0]

		find_pregoal();														//a仮goalまでの歩数マップの初期化
 800f3ba:	f001 fb83 	bl	8010ac4 <find_pregoal>
		if(MF2.FLAG.ALLMAP) {
 800f3be:	4b1d      	ldr	r3, [pc, #116]	; (800f434 <searchE+0x150>)
 800f3c0:	881b      	ldrh	r3, [r3, #0]
 800f3c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d002      	beq.n	800f3d2 <searchE+0xee>
			//printf("get MF2.FLAG.ALLMAP\n");
			half_sectionD();
 800f3cc:	f7f6 fc6c 	bl	8005ca8 <half_sectionD>
			break;
 800f3d0:	e00e      	b.n	800f3f0 <searchE+0x10c>
		}
		make_smap2();
 800f3d2:	f001 fd6b 	bl	8010eac <make_smap2>
		make_route();														//a最短経路探索(route配列に動作が格納される)
 800f3d6:	f001 fa15 	bl	8010804 <make_route>

		if (j > 150) {
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	2b96      	cmp	r3, #150	; 0x96
 800f3de:	dc06      	bgt.n	800f3ee <searchE+0x10a>
			break;															//a移動マス数が250以上になった場合全面探索を中止
		}
		i++;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	607b      	str	r3, [r7, #4]

	} while (i < 150);														//a仮goalへの到着が130回以上になった場合全面探索を中止
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2b95      	cmp	r3, #149	; 0x95
 800f3ea:	dd82      	ble.n	800f2f2 <searchE+0xe>
 800f3ec:	e000      	b.n	800f3f0 <searchE+0x10c>
			break;															//a移動マス数が250以上になった場合全面探索を中止
 800f3ee:	bf00      	nop

	HAL_Delay(500);
 800f3f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f3f4:	f7f1 fe12 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800f3f8:	f7f7 f9aa 	bl	8006750 <rotate_180>

	if(!MF.FLAG.SCND){
 800f3fc:	4b0e      	ldr	r3, [pc, #56]	; (800f438 <searchE+0x154>)
 800f3fe:	881b      	ldrh	r3, [r3, #0]
 800f400:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f404:	b2db      	uxtb	r3, r3
 800f406:	2b00      	cmp	r3, #0
 800f408:	d101      	bne.n	800f40e <searchE+0x12a>
		store_map_in_eeprom();
 800f40a:	f002 fadf 	bl	80119cc <store_map_in_eeprom>
	}
}
 800f40e:	bf00      	nop
 800f410:	3708      	adds	r7, #8
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}
 800f416:	bf00      	nop
 800f418:	200015d0 	.word	0x200015d0
 800f41c:	2000034e 	.word	0x2000034e
 800f420:	20000c54 	.word	0x20000c54
 800f424:	200002c8 	.word	0x200002c8
 800f428:	20000c0c 	.word	0x20000c0c
 800f42c:	20000d5c 	.word	0x20000d5c
 800f430:	200012a1 	.word	0x200012a1
 800f434:	20000f64 	.word	0x20000f64
 800f438:	20000f68 	.word	0x20000f68

0800f43c <searchF3>:
//searchF3
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベースでgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF3(){
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b084      	sub	sp, #16
 800f440:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800f442:	4b62      	ldr	r3, [pc, #392]	; (800f5cc <searchF3+0x190>)
 800f444:	881b      	ldrh	r3, [r3, #0]
 800f446:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d001      	beq.n	800f454 <searchF3+0x18>
		load_map_from_eeprom();
 800f450:	f002 faf6 	bl	8011a40 <load_map_from_eeprom>
	}
	pass_mode = 3;
 800f454:	4b5e      	ldr	r3, [pc, #376]	; (800f5d0 <searchF3+0x194>)
 800f456:	2203      	movs	r2, #3
 800f458:	701a      	strb	r2, [r3, #0]

	//====a1区画前進====
	adv_pos();
 800f45a:	f000 fb5d 	bl	800fb18 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 800f45e:	f000 fe13 	bl	8010088 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800f462:	f001 f9cf 	bl	8010804 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800f466:	4b5b      	ldr	r3, [pc, #364]	; (800f5d4 <searchF3+0x198>)
 800f468:	2200      	movs	r2, #0
 800f46a:	701a      	strb	r2, [r3, #0]
	pass_route2();
 800f46c:	f001 fe42 	bl	80110f4 <pass_route2>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800f470:	f7f6 fa80 	bl	8005974 <start_sectionA>

	MF2.FLAG.HACCEL = 0;
 800f474:	4a58      	ldr	r2, [pc, #352]	; (800f5d8 <searchF3+0x19c>)
 800f476:	8813      	ldrh	r3, [r2, #0]
 800f478:	f36f 0341 	bfc	r3, #1, #1
 800f47c:	8013      	strh	r3, [r2, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800f47e:	4b55      	ldr	r3, [pc, #340]	; (800f5d4 <searchF3+0x198>)
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	1c5a      	adds	r2, r3, #1
 800f484:	b2d1      	uxtb	r1, r2
 800f486:	4a53      	ldr	r2, [pc, #332]	; (800f5d4 <searchF3+0x198>)
 800f488:	7011      	strb	r1, [r2, #0]
 800f48a:	461a      	mov	r2, r3
 800f48c:	4b53      	ldr	r3, [pc, #332]	; (800f5dc <searchF3+0x1a0>)
 800f48e:	569b      	ldrsb	r3, [r3, r2]
 800f490:	f113 0f04 	cmn.w	r3, #4
 800f494:	d01e      	beq.n	800f4d4 <searchF3+0x98>
 800f496:	f113 0f04 	cmn.w	r3, #4
 800f49a:	dc09      	bgt.n	800f4b0 <searchF3+0x74>
 800f49c:	f113 0f06 	cmn.w	r3, #6
 800f4a0:	d01e      	beq.n	800f4e0 <searchF3+0xa4>
 800f4a2:	f113 0f06 	cmn.w	r3, #6
 800f4a6:	dc18      	bgt.n	800f4da <searchF3+0x9e>
 800f4a8:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800f4ac:	d01b      	beq.n	800f4e6 <searchF3+0xaa>
 800f4ae:	e01f      	b.n	800f4f0 <searchF3+0xb4>
 800f4b0:	f113 0f02 	cmn.w	r3, #2
 800f4b4:	d008      	beq.n	800f4c8 <searchF3+0x8c>
 800f4b6:	f113 0f02 	cmn.w	r3, #2
 800f4ba:	db08      	blt.n	800f4ce <searchF3+0x92>
 800f4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4c0:	d116      	bne.n	800f4f0 <searchF3+0xb4>
			//----a右スラローム----
			case -1:
				slalom_R90();
 800f4c2:	f7f7 fa1d 	bl	8006900 <slalom_R90>
				break;
 800f4c6:	e04c      	b.n	800f562 <searchF3+0x126>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800f4c8:	f7f7 fb48 	bl	8006b5c <slalom_L90>
				break;
 800f4cc:	e049      	b.n	800f562 <searchF3+0x126>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800f4ce:	f7f7 fc65 	bl	8006d9c <Lslalom_R90>
				break;
 800f4d2:	e046      	b.n	800f562 <searchF3+0x126>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800f4d4:	f7f7 fd9c 	bl	8007010 <Lslalom_L90>
				break;
 800f4d8:	e043      	b.n	800f562 <searchF3+0x126>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800f4da:	f7f7 fec7 	bl	800726c <Lslalom_R180>
				break;
 800f4de:	e040      	b.n	800f562 <searchF3+0x126>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800f4e0:	f7f8 f816 	bl	8007510 <Lslalom_L180>
				break;
 800f4e4:	e03d      	b.n	800f562 <searchF3+0x126>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800f4e6:	f7f7 f933 	bl	8006750 <rotate_180>
				rotate_180();
 800f4ea:	f7f7 f931 	bl	8006750 <rotate_180>
				while(1);
 800f4ee:	e7fe      	b.n	800f4ee <searchF3+0xb2>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800f4f0:	4b38      	ldr	r3, [pc, #224]	; (800f5d4 <searchF3+0x198>)
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	3b01      	subs	r3, #1
 800f4f6:	4a39      	ldr	r2, [pc, #228]	; (800f5dc <searchF3+0x1a0>)
 800f4f8:	56d3      	ldrsb	r3, [r2, r3]
 800f4fa:	2b03      	cmp	r3, #3
 800f4fc:	dc11      	bgt.n	800f522 <searchF3+0xe6>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800f4fe:	2300      	movs	r3, #0
 800f500:	60fb      	str	r3, [r7, #12]
 800f502:	e004      	b.n	800f50e <searchF3+0xd2>
						half_sectionU();
 800f504:	f7f6 fcec 	bl	8005ee0 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	3301      	adds	r3, #1
 800f50c:	60fb      	str	r3, [r7, #12]
 800f50e:	4b31      	ldr	r3, [pc, #196]	; (800f5d4 <searchF3+0x198>)
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	3b01      	subs	r3, #1
 800f514:	4a31      	ldr	r2, [pc, #196]	; (800f5dc <searchF3+0x1a0>)
 800f516:	56d3      	ldrsb	r3, [r2, r3]
 800f518:	461a      	mov	r2, r3
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	4293      	cmp	r3, r2
 800f51e:	dbf1      	blt.n	800f504 <searchF3+0xc8>
						half_sectionU();
					}
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}
				break;
 800f520:	e01e      	b.n	800f560 <searchF3+0x124>
					one_sectionA();
 800f522:	f7f6 fcfd 	bl	8005f20 <one_sectionA>
					MF2.FLAG.HACCEL = 1;
 800f526:	4a2c      	ldr	r2, [pc, #176]	; (800f5d8 <searchF3+0x19c>)
 800f528:	8813      	ldrh	r3, [r2, #0]
 800f52a:	f043 0302 	orr.w	r3, r3, #2
 800f52e:	8013      	strh	r3, [r2, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800f530:	2300      	movs	r3, #0
 800f532:	60bb      	str	r3, [r7, #8]
 800f534:	e004      	b.n	800f540 <searchF3+0x104>
						half_sectionU();
 800f536:	f7f6 fcd3 	bl	8005ee0 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	3301      	adds	r3, #1
 800f53e:	60bb      	str	r3, [r7, #8]
 800f540:	4b24      	ldr	r3, [pc, #144]	; (800f5d4 <searchF3+0x198>)
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	3b01      	subs	r3, #1
 800f546:	4a25      	ldr	r2, [pc, #148]	; (800f5dc <searchF3+0x1a0>)
 800f548:	56d3      	ldrsb	r3, [r2, r3]
 800f54a:	3b04      	subs	r3, #4
 800f54c:	68ba      	ldr	r2, [r7, #8]
 800f54e:	429a      	cmp	r2, r3
 800f550:	dbf1      	blt.n	800f536 <searchF3+0xfa>
					one_sectionD();
 800f552:	f7f6 fd71 	bl	8006038 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800f556:	4a20      	ldr	r2, [pc, #128]	; (800f5d8 <searchF3+0x19c>)
 800f558:	8813      	ldrh	r3, [r2, #0]
 800f55a:	f36f 0341 	bfc	r3, #1, #1
 800f55e:	8013      	strh	r3, [r2, #0]
				break;
 800f560:	bf00      	nop
		}
	}while(pass[p_cnt] != -114);
 800f562:	4b1c      	ldr	r3, [pc, #112]	; (800f5d4 <searchF3+0x198>)
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	461a      	mov	r2, r3
 800f568:	4b1c      	ldr	r3, [pc, #112]	; (800f5dc <searchF3+0x1a0>)
 800f56a:	569b      	ldrsb	r3, [r3, r2]
 800f56c:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800f570:	d185      	bne.n	800f47e <searchF3+0x42>

	mouse.x = goal_x;
 800f572:	4b1b      	ldr	r3, [pc, #108]	; (800f5e0 <searchF3+0x1a4>)
 800f574:	781a      	ldrb	r2, [r3, #0]
 800f576:	4b1b      	ldr	r3, [pc, #108]	; (800f5e4 <searchF3+0x1a8>)
 800f578:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800f57a:	4b1b      	ldr	r3, [pc, #108]	; (800f5e8 <searchF3+0x1ac>)
 800f57c:	781a      	ldrb	r2, [r3, #0]
 800f57e:	4b19      	ldr	r3, [pc, #100]	; (800f5e4 <searchF3+0x1a8>)
 800f580:	705a      	strb	r2, [r3, #1]

	for(int j=0; j<goal_mode-1; j++){
 800f582:	2300      	movs	r3, #0
 800f584:	607b      	str	r3, [r7, #4]
 800f586:	e006      	b.n	800f596 <searchF3+0x15a>
		one_sectionU();
 800f588:	f7f6 ff12 	bl	80063b0 <one_sectionU>
		adv_pos();
 800f58c:	f000 fac4 	bl	800fb18 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	3301      	adds	r3, #1
 800f594:	607b      	str	r3, [r7, #4]
 800f596:	4b15      	ldr	r3, [pc, #84]	; (800f5ec <searchF3+0x1b0>)
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	3b01      	subs	r3, #1
 800f59c:	687a      	ldr	r2, [r7, #4]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	dbf2      	blt.n	800f588 <searchF3+0x14c>
	}
	half_sectionD();
 800f5a2:	f7f6 fb81 	bl	8005ca8 <half_sectionD>
	set_positionF();
 800f5a6:	f7f6 f9c7 	bl	8005938 <set_positionF>

	HAL_Delay(500);
 800f5aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f5ae:	f7f1 fd35 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800f5b2:	f7f7 f8cd 	bl	8006750 <rotate_180>
//	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800f5b6:	4b0e      	ldr	r3, [pc, #56]	; (800f5f0 <searchF3+0x1b4>)
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800f5bc:	4b0b      	ldr	r3, [pc, #44]	; (800f5ec <searchF3+0x1b0>)
 800f5be:	2201      	movs	r2, #1
 800f5c0:	701a      	strb	r2, [r3, #0]

}
 800f5c2:	bf00      	nop
 800f5c4:	3710      	adds	r7, #16
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
 800f5ca:	bf00      	nop
 800f5cc:	20000f68 	.word	0x20000f68
 800f5d0:	20000457 	.word	0x20000457
 800f5d4:	200002b0 	.word	0x200002b0
 800f5d8:	20000f64 	.word	0x20000f64
 800f5dc:	20000350 	.word	0x20000350
 800f5e0:	20000bb0 	.word	0x20000bb0
 800f5e4:	20000c0c 	.word	0x20000c0c
 800f5e8:	20000b4c 	.word	0x20000b4c
 800f5ec:	20000bb1 	.word	0x20000bb1
 800f5f0:	200015c8 	.word	0x200015c8

0800f5f4 <searchF4>:
//searchF4
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベース+斜め走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF4(){
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b084      	sub	sp, #16
 800f5f8:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800f5fa:	4bca      	ldr	r3, [pc, #808]	; (800f924 <searchF4+0x330>)
 800f5fc:	881b      	ldrh	r3, [r3, #0]
 800f5fe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f602:	b2db      	uxtb	r3, r3
 800f604:	2b00      	cmp	r3, #0
 800f606:	d001      	beq.n	800f60c <searchF4+0x18>
		load_map_from_eeprom();
 800f608:	f002 fa1a 	bl	8011a40 <load_map_from_eeprom>
	}
	pass_mode = 4;
 800f60c:	4bc6      	ldr	r3, [pc, #792]	; (800f928 <searchF4+0x334>)
 800f60e:	2204      	movs	r2, #4
 800f610:	701a      	strb	r2, [r3, #0]

	//====a1区画前進====
	adv_pos();
 800f612:	f000 fa81 	bl	800fb18 <adv_pos>

	//====a歩数マップ・経路作成====
	full_led_write(RED);
 800f616:	2001      	movs	r0, #1
 800f618:	f002 fafe 	bl	8011c18 <full_led_write>
	make_smap();											//a歩数マップ作成
 800f61c:	f000 fd34 	bl	8010088 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800f620:	f001 f8f0 	bl	8010804 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800f624:	4bc1      	ldr	r3, [pc, #772]	; (800f92c <searchF4+0x338>)
 800f626:	2200      	movs	r2, #0
 800f628:	701a      	strb	r2, [r3, #0]
	pass_route3();
 800f62a:	f001 fe77 	bl	801131c <pass_route3>

	if(start_mode == 0 || start_mode == 1){					//a大回りではない場合、先頭の半区画直進をスキップ
 800f62e:	4bc0      	ldr	r3, [pc, #768]	; (800f930 <searchF4+0x33c>)
 800f630:	781b      	ldrb	r3, [r3, #0]
 800f632:	b2db      	uxtb	r3, r3
 800f634:	2b00      	cmp	r3, #0
 800f636:	d004      	beq.n	800f642 <searchF4+0x4e>
 800f638:	4bbd      	ldr	r3, [pc, #756]	; (800f930 <searchF4+0x33c>)
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	2b01      	cmp	r3, #1
 800f640:	d109      	bne.n	800f656 <searchF4+0x62>
		pass[p_cnt]--;
 800f642:	4bba      	ldr	r3, [pc, #744]	; (800f92c <searchF4+0x338>)
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	4abb      	ldr	r2, [pc, #748]	; (800f934 <searchF4+0x340>)
 800f648:	56d2      	ldrsb	r2, [r2, r3]
 800f64a:	b2d2      	uxtb	r2, r2
 800f64c:	3a01      	subs	r2, #1
 800f64e:	b2d2      	uxtb	r2, r2
 800f650:	b251      	sxtb	r1, r2
 800f652:	4ab8      	ldr	r2, [pc, #736]	; (800f934 <searchF4+0x340>)
 800f654:	54d1      	strb	r1, [r2, r3]
	}
	mouse.dir = mouse.dir * 2;
 800f656:	4bb8      	ldr	r3, [pc, #736]	; (800f938 <searchF4+0x344>)
 800f658:	789b      	ldrb	r3, [r3, #2]
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	005b      	lsls	r3, r3, #1
 800f65e:	b2da      	uxtb	r2, r3
 800f660:	4bb5      	ldr	r3, [pc, #724]	; (800f938 <searchF4+0x344>)
 800f662:	709a      	strb	r2, [r3, #2]

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800f664:	f7f6 f986 	bl	8005974 <start_sectionA>

	MF2.FLAG.HACCEL = 0;
 800f668:	4ab4      	ldr	r2, [pc, #720]	; (800f93c <searchF4+0x348>)
 800f66a:	8813      	ldrh	r3, [r2, #0]
 800f66c:	f36f 0341 	bfc	r3, #1, #1
 800f670:	8013      	strh	r3, [r2, #0]
	MF.FLAG.XDIR = 1;
 800f672:	4aac      	ldr	r2, [pc, #688]	; (800f924 <searchF4+0x330>)
 800f674:	8813      	ldrh	r3, [r2, #0]
 800f676:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f67a:	8013      	strh	r3, [r2, #0]
	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800f67c:	4bab      	ldr	r3, [pc, #684]	; (800f92c <searchF4+0x338>)
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	1c5a      	adds	r2, r3, #1
 800f682:	b2d1      	uxtb	r1, r2
 800f684:	4aa9      	ldr	r2, [pc, #676]	; (800f92c <searchF4+0x338>)
 800f686:	7011      	strb	r1, [r2, #0]
 800f688:	461a      	mov	r2, r3
 800f68a:	4baa      	ldr	r3, [pc, #680]	; (800f934 <searchF4+0x340>)
 800f68c:	569b      	ldrsb	r3, [r3, r2]
 800f68e:	3372      	adds	r3, #114	; 0x72
 800f690:	2b71      	cmp	r3, #113	; 0x71
 800f692:	f200 811c 	bhi.w	800f8ce <searchF4+0x2da>
 800f696:	a201      	add	r2, pc, #4	; (adr r2, 800f69c <searchF4+0xa8>)
 800f698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f69c:	0800f8c5 	.word	0x0800f8c5
 800f6a0:	0800f8cf 	.word	0x0800f8cf
 800f6a4:	0800f8cf 	.word	0x0800f8cf
 800f6a8:	0800f8cf 	.word	0x0800f8cf
 800f6ac:	0800f8cf 	.word	0x0800f8cf
 800f6b0:	0800f8cf 	.word	0x0800f8cf
 800f6b4:	0800f8cf 	.word	0x0800f8cf
 800f6b8:	0800f8cf 	.word	0x0800f8cf
 800f6bc:	0800f8cf 	.word	0x0800f8cf
 800f6c0:	0800f8cf 	.word	0x0800f8cf
 800f6c4:	0800f8cf 	.word	0x0800f8cf
 800f6c8:	0800f8cf 	.word	0x0800f8cf
 800f6cc:	0800f8cf 	.word	0x0800f8cf
 800f6d0:	0800f8cf 	.word	0x0800f8cf
 800f6d4:	0800f8cf 	.word	0x0800f8cf
 800f6d8:	0800f8cf 	.word	0x0800f8cf
 800f6dc:	0800f8cf 	.word	0x0800f8cf
 800f6e0:	0800f8cf 	.word	0x0800f8cf
 800f6e4:	0800f8cf 	.word	0x0800f8cf
 800f6e8:	0800f8cf 	.word	0x0800f8cf
 800f6ec:	0800f8cf 	.word	0x0800f8cf
 800f6f0:	0800f8cf 	.word	0x0800f8cf
 800f6f4:	0800f8cf 	.word	0x0800f8cf
 800f6f8:	0800f8cf 	.word	0x0800f8cf
 800f6fc:	0800f8cf 	.word	0x0800f8cf
 800f700:	0800f8cf 	.word	0x0800f8cf
 800f704:	0800f8cf 	.word	0x0800f8cf
 800f708:	0800f8cf 	.word	0x0800f8cf
 800f70c:	0800f8cf 	.word	0x0800f8cf
 800f710:	0800f8cf 	.word	0x0800f8cf
 800f714:	0800f8cf 	.word	0x0800f8cf
 800f718:	0800f8cf 	.word	0x0800f8cf
 800f71c:	0800f8cf 	.word	0x0800f8cf
 800f720:	0800f8cf 	.word	0x0800f8cf
 800f724:	0800f8cf 	.word	0x0800f8cf
 800f728:	0800f8cf 	.word	0x0800f8cf
 800f72c:	0800f8cf 	.word	0x0800f8cf
 800f730:	0800f8cf 	.word	0x0800f8cf
 800f734:	0800f8cf 	.word	0x0800f8cf
 800f738:	0800f8cf 	.word	0x0800f8cf
 800f73c:	0800f8cf 	.word	0x0800f8cf
 800f740:	0800f8cf 	.word	0x0800f8cf
 800f744:	0800f8cf 	.word	0x0800f8cf
 800f748:	0800f8cf 	.word	0x0800f8cf
 800f74c:	0800f8cf 	.word	0x0800f8cf
 800f750:	0800f8cf 	.word	0x0800f8cf
 800f754:	0800f8cf 	.word	0x0800f8cf
 800f758:	0800f8cf 	.word	0x0800f8cf
 800f75c:	0800f8cf 	.word	0x0800f8cf
 800f760:	0800f8cf 	.word	0x0800f8cf
 800f764:	0800f8cf 	.word	0x0800f8cf
 800f768:	0800f8cf 	.word	0x0800f8cf
 800f76c:	0800f8cf 	.word	0x0800f8cf
 800f770:	0800f8cf 	.word	0x0800f8cf
 800f774:	0800f8cf 	.word	0x0800f8cf
 800f778:	0800f8cf 	.word	0x0800f8cf
 800f77c:	0800f8cf 	.word	0x0800f8cf
 800f780:	0800f8cf 	.word	0x0800f8cf
 800f784:	0800f8cf 	.word	0x0800f8cf
 800f788:	0800f8cf 	.word	0x0800f8cf
 800f78c:	0800f8cf 	.word	0x0800f8cf
 800f790:	0800f8cf 	.word	0x0800f8cf
 800f794:	0800f8cf 	.word	0x0800f8cf
 800f798:	0800f8cf 	.word	0x0800f8cf
 800f79c:	0800f8cf 	.word	0x0800f8cf
 800f7a0:	0800f8cf 	.word	0x0800f8cf
 800f7a4:	0800f8cf 	.word	0x0800f8cf
 800f7a8:	0800f8cf 	.word	0x0800f8cf
 800f7ac:	0800f8cf 	.word	0x0800f8cf
 800f7b0:	0800f8cf 	.word	0x0800f8cf
 800f7b4:	0800f8cf 	.word	0x0800f8cf
 800f7b8:	0800f8cf 	.word	0x0800f8cf
 800f7bc:	0800f8cf 	.word	0x0800f8cf
 800f7c0:	0800f8cf 	.word	0x0800f8cf
 800f7c4:	0800f8cf 	.word	0x0800f8cf
 800f7c8:	0800f8cf 	.word	0x0800f8cf
 800f7cc:	0800f8cf 	.word	0x0800f8cf
 800f7d0:	0800f8cf 	.word	0x0800f8cf
 800f7d4:	0800f8cf 	.word	0x0800f8cf
 800f7d8:	0800f8cf 	.word	0x0800f8cf
 800f7dc:	0800f8cf 	.word	0x0800f8cf
 800f7e0:	0800f8cf 	.word	0x0800f8cf
 800f7e4:	0800f8cf 	.word	0x0800f8cf
 800f7e8:	0800f8cf 	.word	0x0800f8cf
 800f7ec:	0800f8cf 	.word	0x0800f8cf
 800f7f0:	0800f8cf 	.word	0x0800f8cf
 800f7f4:	0800f8cf 	.word	0x0800f8cf
 800f7f8:	0800f8cf 	.word	0x0800f8cf
 800f7fc:	0800f8cf 	.word	0x0800f8cf
 800f800:	0800f8cf 	.word	0x0800f8cf
 800f804:	0800f8cf 	.word	0x0800f8cf
 800f808:	0800f8cf 	.word	0x0800f8cf
 800f80c:	0800f8cf 	.word	0x0800f8cf
 800f810:	0800f8cf 	.word	0x0800f8cf
 800f814:	0800f8cf 	.word	0x0800f8cf
 800f818:	0800f8cf 	.word	0x0800f8cf
 800f81c:	0800f8cf 	.word	0x0800f8cf
 800f820:	0800f8cf 	.word	0x0800f8cf
 800f824:	0800f8bf 	.word	0x0800f8bf
 800f828:	0800f8b9 	.word	0x0800f8b9
 800f82c:	0800f8b3 	.word	0x0800f8b3
 800f830:	0800f8ad 	.word	0x0800f8ad
 800f834:	0800f8a7 	.word	0x0800f8a7
 800f838:	0800f8a1 	.word	0x0800f8a1
 800f83c:	0800f89b 	.word	0x0800f89b
 800f840:	0800f895 	.word	0x0800f895
 800f844:	0800f88f 	.word	0x0800f88f
 800f848:	0800f889 	.word	0x0800f889
 800f84c:	0800f883 	.word	0x0800f883
 800f850:	0800f87d 	.word	0x0800f87d
 800f854:	0800f877 	.word	0x0800f877
 800f858:	0800f871 	.word	0x0800f871
 800f85c:	0800f86b 	.word	0x0800f86b
 800f860:	0800f865 	.word	0x0800f865
			//----a右スラローム----
			case -1:
				slalom_R90();
 800f864:	f7f7 f84c 	bl	8006900 <slalom_R90>
				break;
 800f868:	e0d1      	b.n	800fa0e <searchF4+0x41a>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800f86a:	f7f7 f977 	bl	8006b5c <slalom_L90>
				break;
 800f86e:	e0ce      	b.n	800fa0e <searchF4+0x41a>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800f870:	f7f7 fa94 	bl	8006d9c <Lslalom_R90>
				break;
 800f874:	e0cb      	b.n	800fa0e <searchF4+0x41a>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800f876:	f7f7 fbcb 	bl	8007010 <Lslalom_L90>
				break;
 800f87a:	e0c8      	b.n	800fa0e <searchF4+0x41a>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800f87c:	f7f7 fcf6 	bl	800726c <Lslalom_R180>
				break;
 800f880:	e0c5      	b.n	800fa0e <searchF4+0x41a>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800f882:	f7f7 fe45 	bl	8007510 <Lslalom_L180>
				break;
 800f886:	e0c2      	b.n	800fa0e <searchF4+0x41a>

			//----a斜め右V45----
			case -7:
				v_R45();
 800f888:	f7f7 ff86 	bl	8007798 <v_R45>
				break;
 800f88c:	e0bf      	b.n	800fa0e <searchF4+0x41a>

			//----a斜め左V45----
			case -8:
				v_L45();
 800f88e:	f7f8 f969 	bl	8007b64 <v_L45>
				break;
 800f892:	e0bc      	b.n	800fa0e <searchF4+0x41a>

			//----a斜め右V90----
			case -9:
				v_R90();
 800f894:	f7f8 fdea 	bl	800846c <v_R90>
				break;
 800f898:	e0b9      	b.n	800fa0e <searchF4+0x41a>

			//----a斜め左V90----
			case -10:
				v_L90();
 800f89a:	f7f8 feb7 	bl	800860c <v_L90>
				break;
 800f89e:	e0b6      	b.n	800fa0e <searchF4+0x41a>

			//----a斜め右V135----
			case -11:
				v_R135();
 800f8a0:	f7f8 ff7c 	bl	800879c <v_R135>
				break;
 800f8a4:	e0b3      	b.n	800fa0e <searchF4+0x41a>

			//----a斜め左V135----
			case -12:
				v_L135();
 800f8a6:	f7f9 f963 	bl	8008b70 <v_L135>
				break;
 800f8aa:	e0b0      	b.n	800fa0e <searchF4+0x41a>

			//----a斜め右V45Goal----
			case -13:
				v_R45D();
 800f8ac:	f7f8 fb36 	bl	8007f1c <v_R45D>
				break;
 800f8b0:	e0ad      	b.n	800fa0e <searchF4+0x41a>

			//----a斜め左V45Goal----
			case -14:
				v_L45D();
 800f8b2:	f7f8 fc8d 	bl	80081d0 <v_L45D>
				break;
 800f8b6:	e0aa      	b.n	800fa0e <searchF4+0x41a>

			//----a斜め右V135Goal----
			case -15:
				v_R135D();
 800f8b8:	f7f9 fb36 	bl	8008f28 <v_R135D>
				break;
 800f8bc:	e0a7      	b.n	800fa0e <searchF4+0x41a>

			//----a斜め左V135Goal----
			case -16:
				v_L135D();
 800f8be:	f7f9 fc8f 	bl	80091e0 <v_L135D>
				break;
 800f8c2:	e0a4      	b.n	800fa0e <searchF4+0x41a>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800f8c4:	f7f6 ff44 	bl	8006750 <rotate_180>
				rotate_180();
 800f8c8:	f7f6 ff42 	bl	8006750 <rotate_180>
				while(1);
 800f8cc:	e7fe      	b.n	800f8cc <searchF4+0x2d8>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800f8ce:	4b17      	ldr	r3, [pc, #92]	; (800f92c <searchF4+0x338>)
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	3b01      	subs	r3, #1
 800f8d4:	4a17      	ldr	r2, [pc, #92]	; (800f934 <searchF4+0x340>)
 800f8d6:	56d3      	ldrsb	r3, [r2, r3]
 800f8d8:	2b03      	cmp	r3, #3
 800f8da:	dc11      	bgt.n	800f900 <searchF4+0x30c>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800f8dc:	2300      	movs	r3, #0
 800f8de:	60fb      	str	r3, [r7, #12]
 800f8e0:	e004      	b.n	800f8ec <searchF4+0x2f8>
						half_sectionU();
 800f8e2:	f7f6 fafd 	bl	8005ee0 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	60fb      	str	r3, [r7, #12]
 800f8ec:	4b0f      	ldr	r3, [pc, #60]	; (800f92c <searchF4+0x338>)
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	3b01      	subs	r3, #1
 800f8f2:	4a10      	ldr	r2, [pc, #64]	; (800f934 <searchF4+0x340>)
 800f8f4:	56d3      	ldrsb	r3, [r2, r3]
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	dbf1      	blt.n	800f8e2 <searchF4+0x2ee>
						p_cnt++;
					}else{
						half_sectionV();
					}
				}
				break;
 800f8fe:	e085      	b.n	800fa0c <searchF4+0x418>
				}else if(pass[p_cnt-1] < 64){
 800f900:	4b0a      	ldr	r3, [pc, #40]	; (800f92c <searchF4+0x338>)
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	3b01      	subs	r3, #1
 800f906:	4a0b      	ldr	r2, [pc, #44]	; (800f934 <searchF4+0x340>)
 800f908:	56d3      	ldrsb	r3, [r2, r3]
 800f90a:	2b3f      	cmp	r3, #63	; 0x3f
 800f90c:	dc2e      	bgt.n	800f96c <searchF4+0x378>
					one_sectionA();
 800f90e:	f7f6 fb07 	bl	8005f20 <one_sectionA>
					MF2.FLAG.HACCEL = 1;
 800f912:	4a0a      	ldr	r2, [pc, #40]	; (800f93c <searchF4+0x348>)
 800f914:	8813      	ldrh	r3, [r2, #0]
 800f916:	f043 0302 	orr.w	r3, r3, #2
 800f91a:	8013      	strh	r3, [r2, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800f91c:	2300      	movs	r3, #0
 800f91e:	60bb      	str	r3, [r7, #8]
 800f920:	e013      	b.n	800f94a <searchF4+0x356>
 800f922:	bf00      	nop
 800f924:	20000f68 	.word	0x20000f68
 800f928:	20000457 	.word	0x20000457
 800f92c:	200002b0 	.word	0x200002b0
 800f930:	200015c8 	.word	0x200015c8
 800f934:	20000350 	.word	0x20000350
 800f938:	20000c0c 	.word	0x20000c0c
 800f93c:	20000f64 	.word	0x20000f64
						half_sectionU();
 800f940:	f7f6 face 	bl	8005ee0 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	3301      	adds	r3, #1
 800f948:	60bb      	str	r3, [r7, #8]
 800f94a:	4b6a      	ldr	r3, [pc, #424]	; (800faf4 <searchF4+0x500>)
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	3b01      	subs	r3, #1
 800f950:	4a69      	ldr	r2, [pc, #420]	; (800faf8 <searchF4+0x504>)
 800f952:	56d3      	ldrsb	r3, [r2, r3]
 800f954:	3b04      	subs	r3, #4
 800f956:	68ba      	ldr	r2, [r7, #8]
 800f958:	429a      	cmp	r2, r3
 800f95a:	dbf1      	blt.n	800f940 <searchF4+0x34c>
					one_sectionD();
 800f95c:	f7f6 fb6c 	bl	8006038 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800f960:	4a66      	ldr	r2, [pc, #408]	; (800fafc <searchF4+0x508>)
 800f962:	8813      	ldrh	r3, [r2, #0]
 800f964:	f36f 0341 	bfc	r3, #1, #1
 800f968:	8013      	strh	r3, [r2, #0]
				break;
 800f96a:	e04f      	b.n	800fa0c <searchF4+0x418>
					if((pass[p_cnt] == 64) && (pass[p_cnt+1] == 64) && (pass[p_cnt+2] == 64) && (MF2.FLAG.HACCEL == 0)){
 800f96c:	4b61      	ldr	r3, [pc, #388]	; (800faf4 <searchF4+0x500>)
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	461a      	mov	r2, r3
 800f972:	4b61      	ldr	r3, [pc, #388]	; (800faf8 <searchF4+0x504>)
 800f974:	569b      	ldrsb	r3, [r3, r2]
 800f976:	2b40      	cmp	r3, #64	; 0x40
 800f978:	d122      	bne.n	800f9c0 <searchF4+0x3cc>
 800f97a:	4b5e      	ldr	r3, [pc, #376]	; (800faf4 <searchF4+0x500>)
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	3301      	adds	r3, #1
 800f980:	4a5d      	ldr	r2, [pc, #372]	; (800faf8 <searchF4+0x504>)
 800f982:	56d3      	ldrsb	r3, [r2, r3]
 800f984:	2b40      	cmp	r3, #64	; 0x40
 800f986:	d11b      	bne.n	800f9c0 <searchF4+0x3cc>
 800f988:	4b5a      	ldr	r3, [pc, #360]	; (800faf4 <searchF4+0x500>)
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	3302      	adds	r3, #2
 800f98e:	4a5a      	ldr	r2, [pc, #360]	; (800faf8 <searchF4+0x504>)
 800f990:	56d3      	ldrsb	r3, [r2, r3]
 800f992:	2b40      	cmp	r3, #64	; 0x40
 800f994:	d114      	bne.n	800f9c0 <searchF4+0x3cc>
 800f996:	4b59      	ldr	r3, [pc, #356]	; (800fafc <searchF4+0x508>)
 800f998:	881b      	ldrh	r3, [r3, #0]
 800f99a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f99e:	b2db      	uxtb	r3, r3
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d10d      	bne.n	800f9c0 <searchF4+0x3cc>
						one_sectionVA();
 800f9a4:	f7f6 fbe6 	bl	8006174 <one_sectionVA>
						MF2.FLAG.HACCEL = 1;
 800f9a8:	4a54      	ldr	r2, [pc, #336]	; (800fafc <searchF4+0x508>)
 800f9aa:	8813      	ldrh	r3, [r2, #0]
 800f9ac:	f043 0302 	orr.w	r3, r3, #2
 800f9b0:	8013      	strh	r3, [r2, #0]
						p_cnt++;
 800f9b2:	4b50      	ldr	r3, [pc, #320]	; (800faf4 <searchF4+0x500>)
 800f9b4:	781b      	ldrb	r3, [r3, #0]
 800f9b6:	3301      	adds	r3, #1
 800f9b8:	b2da      	uxtb	r2, r3
 800f9ba:	4b4e      	ldr	r3, [pc, #312]	; (800faf4 <searchF4+0x500>)
 800f9bc:	701a      	strb	r2, [r3, #0]
 800f9be:	e025      	b.n	800fa0c <searchF4+0x418>
					else if((pass[p_cnt] == 64) && (pass[p_cnt+1] != 64) && (MF2.FLAG.HACCEL == 1)){
 800f9c0:	4b4c      	ldr	r3, [pc, #304]	; (800faf4 <searchF4+0x500>)
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	4b4c      	ldr	r3, [pc, #304]	; (800faf8 <searchF4+0x504>)
 800f9c8:	569b      	ldrsb	r3, [r3, r2]
 800f9ca:	2b40      	cmp	r3, #64	; 0x40
 800f9cc:	d11b      	bne.n	800fa06 <searchF4+0x412>
 800f9ce:	4b49      	ldr	r3, [pc, #292]	; (800faf4 <searchF4+0x500>)
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	4a48      	ldr	r2, [pc, #288]	; (800faf8 <searchF4+0x504>)
 800f9d6:	56d3      	ldrsb	r3, [r2, r3]
 800f9d8:	2b40      	cmp	r3, #64	; 0x40
 800f9da:	d014      	beq.n	800fa06 <searchF4+0x412>
 800f9dc:	4b47      	ldr	r3, [pc, #284]	; (800fafc <searchF4+0x508>)
 800f9de:	881b      	ldrh	r3, [r3, #0]
 800f9e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f9e4:	b2db      	uxtb	r3, r3
 800f9e6:	2b01      	cmp	r3, #1
 800f9e8:	d10d      	bne.n	800fa06 <searchF4+0x412>
						one_sectionVD();
 800f9ea:	f7f6 fc49 	bl	8006280 <one_sectionVD>
						MF2.FLAG.HACCEL = 0;
 800f9ee:	4a43      	ldr	r2, [pc, #268]	; (800fafc <searchF4+0x508>)
 800f9f0:	8813      	ldrh	r3, [r2, #0]
 800f9f2:	f36f 0341 	bfc	r3, #1, #1
 800f9f6:	8013      	strh	r3, [r2, #0]
						p_cnt++;
 800f9f8:	4b3e      	ldr	r3, [pc, #248]	; (800faf4 <searchF4+0x500>)
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	3301      	adds	r3, #1
 800f9fe:	b2da      	uxtb	r2, r3
 800fa00:	4b3c      	ldr	r3, [pc, #240]	; (800faf4 <searchF4+0x500>)
 800fa02:	701a      	strb	r2, [r3, #0]
 800fa04:	e002      	b.n	800fa0c <searchF4+0x418>
						half_sectionV();
 800fa06:	f7f6 fa77 	bl	8005ef8 <half_sectionV>
				break;
 800fa0a:	e7ff      	b.n	800fa0c <searchF4+0x418>
 800fa0c:	bf00      	nop
		}

	}while(pass[p_cnt] != -114);
 800fa0e:	4b39      	ldr	r3, [pc, #228]	; (800faf4 <searchF4+0x500>)
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	461a      	mov	r2, r3
 800fa14:	4b38      	ldr	r3, [pc, #224]	; (800faf8 <searchF4+0x504>)
 800fa16:	569b      	ldrsb	r3, [r3, r2]
 800fa18:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800fa1c:	f47f ae2e 	bne.w	800f67c <searchF4+0x88>

	mouse.x = goal_x;
 800fa20:	4b37      	ldr	r3, [pc, #220]	; (800fb00 <searchF4+0x50c>)
 800fa22:	781a      	ldrb	r2, [r3, #0]
 800fa24:	4b37      	ldr	r3, [pc, #220]	; (800fb04 <searchF4+0x510>)
 800fa26:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800fa28:	4b37      	ldr	r3, [pc, #220]	; (800fb08 <searchF4+0x514>)
 800fa2a:	781a      	ldrb	r2, [r3, #0]
 800fa2c:	4b35      	ldr	r3, [pc, #212]	; (800fb04 <searchF4+0x510>)
 800fa2e:	705a      	strb	r2, [r3, #1]
	mouse.dir = mouse.dir / 2;
 800fa30:	4b34      	ldr	r3, [pc, #208]	; (800fb04 <searchF4+0x510>)
 800fa32:	789b      	ldrb	r3, [r3, #2]
 800fa34:	b2db      	uxtb	r3, r3
 800fa36:	085b      	lsrs	r3, r3, #1
 800fa38:	b2da      	uxtb	r2, r3
 800fa3a:	4b32      	ldr	r3, [pc, #200]	; (800fb04 <searchF4+0x510>)
 800fa3c:	709a      	strb	r2, [r3, #2]
	MF.FLAG.XDIR = 0;
 800fa3e:	4a33      	ldr	r2, [pc, #204]	; (800fb0c <searchF4+0x518>)
 800fa40:	8813      	ldrh	r3, [r2, #0]
 800fa42:	f36f 330c 	bfc	r3, #12, #1
 800fa46:	8013      	strh	r3, [r2, #0]

	if(pass[p_cnt-1] != -13 && pass[p_cnt-1] != -14 && pass[p_cnt-1] != -15 && pass[p_cnt-1] != -16){
 800fa48:	4b2a      	ldr	r3, [pc, #168]	; (800faf4 <searchF4+0x500>)
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	3b01      	subs	r3, #1
 800fa4e:	4a2a      	ldr	r2, [pc, #168]	; (800faf8 <searchF4+0x504>)
 800fa50:	56d3      	ldrsb	r3, [r2, r3]
 800fa52:	f113 0f0d 	cmn.w	r3, #13
 800fa56:	d02c      	beq.n	800fab2 <searchF4+0x4be>
 800fa58:	4b26      	ldr	r3, [pc, #152]	; (800faf4 <searchF4+0x500>)
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	3b01      	subs	r3, #1
 800fa5e:	4a26      	ldr	r2, [pc, #152]	; (800faf8 <searchF4+0x504>)
 800fa60:	56d3      	ldrsb	r3, [r2, r3]
 800fa62:	f113 0f0e 	cmn.w	r3, #14
 800fa66:	d024      	beq.n	800fab2 <searchF4+0x4be>
 800fa68:	4b22      	ldr	r3, [pc, #136]	; (800faf4 <searchF4+0x500>)
 800fa6a:	781b      	ldrb	r3, [r3, #0]
 800fa6c:	3b01      	subs	r3, #1
 800fa6e:	4a22      	ldr	r2, [pc, #136]	; (800faf8 <searchF4+0x504>)
 800fa70:	56d3      	ldrsb	r3, [r2, r3]
 800fa72:	f113 0f0f 	cmn.w	r3, #15
 800fa76:	d01c      	beq.n	800fab2 <searchF4+0x4be>
 800fa78:	4b1e      	ldr	r3, [pc, #120]	; (800faf4 <searchF4+0x500>)
 800fa7a:	781b      	ldrb	r3, [r3, #0]
 800fa7c:	3b01      	subs	r3, #1
 800fa7e:	4a1e      	ldr	r2, [pc, #120]	; (800faf8 <searchF4+0x504>)
 800fa80:	56d3      	ldrsb	r3, [r2, r3]
 800fa82:	f113 0f10 	cmn.w	r3, #16
 800fa86:	d014      	beq.n	800fab2 <searchF4+0x4be>
		for(int j=0; j<goal_mode-1; j++){
 800fa88:	2300      	movs	r3, #0
 800fa8a:	607b      	str	r3, [r7, #4]
 800fa8c:	e006      	b.n	800fa9c <searchF4+0x4a8>
			one_sectionU();
 800fa8e:	f7f6 fc8f 	bl	80063b0 <one_sectionU>
			adv_pos();
 800fa92:	f000 f841 	bl	800fb18 <adv_pos>
		for(int j=0; j<goal_mode-1; j++){
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	3301      	adds	r3, #1
 800fa9a:	607b      	str	r3, [r7, #4]
 800fa9c:	4b1c      	ldr	r3, [pc, #112]	; (800fb10 <searchF4+0x51c>)
 800fa9e:	781b      	ldrb	r3, [r3, #0]
 800faa0:	3b01      	subs	r3, #1
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	429a      	cmp	r2, r3
 800faa6:	dbf2      	blt.n	800fa8e <searchF4+0x49a>
		}
		half_sectionD();
 800faa8:	f7f6 f8fe 	bl	8005ca8 <half_sectionD>
		set_positionF();
 800faac:	f7f5 ff44 	bl	8005938 <set_positionF>
 800fab0:	e00f      	b.n	800fad2 <searchF4+0x4de>
	}else{														//a減速斜めでgoalする場合
		for(int j=0; j<goal_mode-1; j++){
 800fab2:	2300      	movs	r3, #0
 800fab4:	603b      	str	r3, [r7, #0]
 800fab6:	e006      	b.n	800fac6 <searchF4+0x4d2>
			one_section();
 800fab8:	f7f6 fa2a 	bl	8005f10 <one_section>
			adv_pos();
 800fabc:	f000 f82c 	bl	800fb18 <adv_pos>
		for(int j=0; j<goal_mode-1; j++){
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	3301      	adds	r3, #1
 800fac4:	603b      	str	r3, [r7, #0]
 800fac6:	4b12      	ldr	r3, [pc, #72]	; (800fb10 <searchF4+0x51c>)
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	3b01      	subs	r3, #1
 800facc:	683a      	ldr	r2, [r7, #0]
 800face:	429a      	cmp	r2, r3
 800fad0:	dbf2      	blt.n	800fab8 <searchF4+0x4c4>
		}
	}
	HAL_Delay(500);
 800fad2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fad6:	f7f1 faa1 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800fada:	f7f6 fe39 	bl	8006750 <rotate_180>
//	driveC2(SETPOS_BACK); 							        //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800fade:	4b0d      	ldr	r3, [pc, #52]	; (800fb14 <searchF4+0x520>)
 800fae0:	2201      	movs	r2, #1
 800fae2:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800fae4:	4b0a      	ldr	r3, [pc, #40]	; (800fb10 <searchF4+0x51c>)
 800fae6:	2201      	movs	r2, #1
 800fae8:	701a      	strb	r2, [r3, #0]
}
 800faea:	bf00      	nop
 800faec:	3710      	adds	r7, #16
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}
 800faf2:	bf00      	nop
 800faf4:	200002b0 	.word	0x200002b0
 800faf8:	20000350 	.word	0x20000350
 800fafc:	20000f64 	.word	0x20000f64
 800fb00:	20000bb0 	.word	0x20000bb0
 800fb04:	20000c0c 	.word	0x20000c0c
 800fb08:	20000b4c 	.word	0x20000b4c
 800fb0c:	20000f68 	.word	0x20000f68
 800fb10:	20000bb1 	.word	0x20000bb1
 800fb14:	200015c8 	.word	0x200015c8

0800fb18 <adv_pos>:
//adv_pos
//aマイクロマウス内部位置情報で前進させる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 800fb18:	b480      	push	{r7}
 800fb1a:	af00      	add	r7, sp, #0

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 800fb1c:	4b1a      	ldr	r3, [pc, #104]	; (800fb88 <adv_pos+0x70>)
 800fb1e:	789b      	ldrb	r3, [r3, #2]
 800fb20:	b2db      	uxtb	r3, r3
 800fb22:	2b03      	cmp	r3, #3
 800fb24:	d82a      	bhi.n	800fb7c <adv_pos+0x64>
 800fb26:	a201      	add	r2, pc, #4	; (adr r2, 800fb2c <adv_pos+0x14>)
 800fb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb2c:	0800fb3d 	.word	0x0800fb3d
 800fb30:	0800fb4d 	.word	0x0800fb4d
 800fb34:	0800fb5d 	.word	0x0800fb5d
 800fb38:	0800fb6d 	.word	0x0800fb6d
	case 0x00:												//a北方向に向いている場合
		mouse.y++;											//Y座標をインクリメント
 800fb3c:	4b12      	ldr	r3, [pc, #72]	; (800fb88 <adv_pos+0x70>)
 800fb3e:	785b      	ldrb	r3, [r3, #1]
 800fb40:	b2db      	uxtb	r3, r3
 800fb42:	3301      	adds	r3, #1
 800fb44:	b2da      	uxtb	r2, r3
 800fb46:	4b10      	ldr	r3, [pc, #64]	; (800fb88 <adv_pos+0x70>)
 800fb48:	705a      	strb	r2, [r3, #1]
		break;
 800fb4a:	e017      	b.n	800fb7c <adv_pos+0x64>
	case 0x01:												//a東方向に向いている場合
		mouse.x++;											//X座標をインクリメント
 800fb4c:	4b0e      	ldr	r3, [pc, #56]	; (800fb88 <adv_pos+0x70>)
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	b2db      	uxtb	r3, r3
 800fb52:	3301      	adds	r3, #1
 800fb54:	b2da      	uxtb	r2, r3
 800fb56:	4b0c      	ldr	r3, [pc, #48]	; (800fb88 <adv_pos+0x70>)
 800fb58:	701a      	strb	r2, [r3, #0]
		break;
 800fb5a:	e00f      	b.n	800fb7c <adv_pos+0x64>
	case 0x02:												//a南方向に向いている場合
		mouse.y--;											//Y座標をデクリメント
 800fb5c:	4b0a      	ldr	r3, [pc, #40]	; (800fb88 <adv_pos+0x70>)
 800fb5e:	785b      	ldrb	r3, [r3, #1]
 800fb60:	b2db      	uxtb	r3, r3
 800fb62:	3b01      	subs	r3, #1
 800fb64:	b2da      	uxtb	r2, r3
 800fb66:	4b08      	ldr	r3, [pc, #32]	; (800fb88 <adv_pos+0x70>)
 800fb68:	705a      	strb	r2, [r3, #1]
		break;
 800fb6a:	e007      	b.n	800fb7c <adv_pos+0x64>
	case 0x03:												//a西方向に向いている場合
		mouse.x--;											//X座標をデクリメント
 800fb6c:	4b06      	ldr	r3, [pc, #24]	; (800fb88 <adv_pos+0x70>)
 800fb6e:	781b      	ldrb	r3, [r3, #0]
 800fb70:	b2db      	uxtb	r3, r3
 800fb72:	3b01      	subs	r3, #1
 800fb74:	b2da      	uxtb	r2, r3
 800fb76:	4b04      	ldr	r3, [pc, #16]	; (800fb88 <adv_pos+0x70>)
 800fb78:	701a      	strb	r2, [r3, #0]
		break;
 800fb7a:	bf00      	nop
	}
}
 800fb7c:	bf00      	nop
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr
 800fb86:	bf00      	nop
 800fb88:	20000c0c 	.word	0x20000c0c

0800fb8c <conf_route>:
//conf_route
//a進路を判定する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	af00      	add	r7, sp, #0

	//----a壁情報書き込み----
	write_map();
 800fb90:	f000 f886 	bl	800fca0 <write_map>

	//----a最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 800fb94:	4b09      	ldr	r3, [pc, #36]	; (800fbbc <conf_route+0x30>)
 800fb96:	781b      	ldrb	r3, [r3, #0]
 800fb98:	461a      	mov	r2, r3
 800fb9a:	4b09      	ldr	r3, [pc, #36]	; (800fbc0 <conf_route+0x34>)
 800fb9c:	5c9a      	ldrb	r2, [r3, r2]
 800fb9e:	4b09      	ldr	r3, [pc, #36]	; (800fbc4 <conf_route+0x38>)
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	4013      	ands	r3, r2
 800fba4:	b2db      	uxtb	r3, r3
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d006      	beq.n	800fbb8 <conf_route+0x2c>
		make_smap();										//a歩数マップを更新
 800fbaa:	f000 fa6d 	bl	8010088 <make_smap>
		make_route();										//a最短経路を更新
 800fbae:	f000 fe29 	bl	8010804 <make_route>
		r_cnt = 0;											//a経路カウンタを0に
 800fbb2:	4b02      	ldr	r3, [pc, #8]	; (800fbbc <conf_route+0x30>)
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	701a      	strb	r2, [r3, #0]
	}
}
 800fbb8:	bf00      	nop
 800fbba:	bd80      	pop	{r7, pc}
 800fbbc:	200015d0 	.word	0x200015d0
 800fbc0:	20000c54 	.word	0x20000c54
 800fbc4:	200002c8 	.word	0x200002c8

0800fbc8 <map_Init>:
//map_Init
//aマップ格納配列map[][]の初期化をする
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 800fbc8:	b480      	push	{r7}
 800fbca:	b083      	sub	sp, #12
 800fbcc:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数

	//====a初期化開始====
	//aマップのクリア
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800fbce:	2300      	movs	r3, #0
 800fbd0:	71bb      	strb	r3, [r7, #6]
 800fbd2:	e013      	b.n	800fbfc <map_Init+0x34>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	71fb      	strb	r3, [r7, #7]
 800fbd8:	e00a      	b.n	800fbf0 <map_Init+0x28>
			map[y][x] = 0xf0;								//a上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 800fbda:	79ba      	ldrb	r2, [r7, #6]
 800fbdc:	79fb      	ldrb	r3, [r7, #7]
 800fbde:	492f      	ldr	r1, [pc, #188]	; (800fc9c <map_Init+0xd4>)
 800fbe0:	0112      	lsls	r2, r2, #4
 800fbe2:	440a      	add	r2, r1
 800fbe4:	4413      	add	r3, r2
 800fbe6:	22f0      	movs	r2, #240	; 0xf0
 800fbe8:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800fbea:	79fb      	ldrb	r3, [r7, #7]
 800fbec:	3301      	adds	r3, #1
 800fbee:	71fb      	strb	r3, [r7, #7]
 800fbf0:	79fb      	ldrb	r3, [r7, #7]
 800fbf2:	2b0f      	cmp	r3, #15
 800fbf4:	d9f1      	bls.n	800fbda <map_Init+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800fbf6:	79bb      	ldrb	r3, [r7, #6]
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	71bb      	strb	r3, [r7, #6]
 800fbfc:	79bb      	ldrb	r3, [r7, #6]
 800fbfe:	2b0f      	cmp	r3, #15
 800fc00:	d9e8      	bls.n	800fbd4 <map_Init+0xc>
		}
	}

	//a確定壁の配置
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800fc02:	2300      	movs	r3, #0
 800fc04:	71bb      	strb	r3, [r7, #6]
 800fc06:	e020      	b.n	800fc4a <map_Init+0x82>
		map[y][0] |= 0xf1;									//a最西に壁を配置
 800fc08:	79bb      	ldrb	r3, [r7, #6]
 800fc0a:	4a24      	ldr	r2, [pc, #144]	; (800fc9c <map_Init+0xd4>)
 800fc0c:	011b      	lsls	r3, r3, #4
 800fc0e:	4413      	add	r3, r2
 800fc10:	781a      	ldrb	r2, [r3, #0]
 800fc12:	79bb      	ldrb	r3, [r7, #6]
 800fc14:	f062 020e 	orn	r2, r2, #14
 800fc18:	b2d1      	uxtb	r1, r2
 800fc1a:	4a20      	ldr	r2, [pc, #128]	; (800fc9c <map_Init+0xd4>)
 800fc1c:	011b      	lsls	r3, r3, #4
 800fc1e:	4413      	add	r3, r2
 800fc20:	460a      	mov	r2, r1
 800fc22:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//a最東に壁を配置
 800fc24:	79bb      	ldrb	r3, [r7, #6]
 800fc26:	4a1d      	ldr	r2, [pc, #116]	; (800fc9c <map_Init+0xd4>)
 800fc28:	011b      	lsls	r3, r3, #4
 800fc2a:	4413      	add	r3, r2
 800fc2c:	330f      	adds	r3, #15
 800fc2e:	781a      	ldrb	r2, [r3, #0]
 800fc30:	79bb      	ldrb	r3, [r7, #6]
 800fc32:	f062 020b 	orn	r2, r2, #11
 800fc36:	b2d1      	uxtb	r1, r2
 800fc38:	4a18      	ldr	r2, [pc, #96]	; (800fc9c <map_Init+0xd4>)
 800fc3a:	011b      	lsls	r3, r3, #4
 800fc3c:	4413      	add	r3, r2
 800fc3e:	330f      	adds	r3, #15
 800fc40:	460a      	mov	r2, r1
 800fc42:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800fc44:	79bb      	ldrb	r3, [r7, #6]
 800fc46:	3301      	adds	r3, #1
 800fc48:	71bb      	strb	r3, [r7, #6]
 800fc4a:	79bb      	ldrb	r3, [r7, #6]
 800fc4c:	2b0f      	cmp	r3, #15
 800fc4e:	d9db      	bls.n	800fc08 <map_Init+0x40>
	}
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800fc50:	2300      	movs	r3, #0
 800fc52:	71fb      	strb	r3, [r7, #7]
 800fc54:	e019      	b.n	800fc8a <map_Init+0xc2>
		map[0][x] |= 0xf2;									//a最南に壁を配置
 800fc56:	79fb      	ldrb	r3, [r7, #7]
 800fc58:	4a10      	ldr	r2, [pc, #64]	; (800fc9c <map_Init+0xd4>)
 800fc5a:	5cd2      	ldrb	r2, [r2, r3]
 800fc5c:	79fb      	ldrb	r3, [r7, #7]
 800fc5e:	f062 020d 	orn	r2, r2, #13
 800fc62:	b2d1      	uxtb	r1, r2
 800fc64:	4a0d      	ldr	r2, [pc, #52]	; (800fc9c <map_Init+0xd4>)
 800fc66:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//a最北に壁を配置
 800fc68:	79fb      	ldrb	r3, [r7, #7]
 800fc6a:	4a0c      	ldr	r2, [pc, #48]	; (800fc9c <map_Init+0xd4>)
 800fc6c:	4413      	add	r3, r2
 800fc6e:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 800fc72:	79fb      	ldrb	r3, [r7, #7]
 800fc74:	f062 0207 	orn	r2, r2, #7
 800fc78:	b2d1      	uxtb	r1, r2
 800fc7a:	4a08      	ldr	r2, [pc, #32]	; (800fc9c <map_Init+0xd4>)
 800fc7c:	4413      	add	r3, r2
 800fc7e:	460a      	mov	r2, r1
 800fc80:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800fc84:	79fb      	ldrb	r3, [r7, #7]
 800fc86:	3301      	adds	r3, #1
 800fc88:	71fb      	strb	r3, [r7, #7]
 800fc8a:	79fb      	ldrb	r3, [r7, #7]
 800fc8c:	2b0f      	cmp	r3, #15
 800fc8e:	d9e2      	bls.n	800fc56 <map_Init+0x8e>
	}
}
 800fc90:	bf00      	nop
 800fc92:	370c      	adds	r7, #12
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr
 800fc9c:	200001ac 	.word	0x200001ac

0800fca0 <write_map>:
//write_map
//aマップデータを書き込む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 800fca0:	b490      	push	{r4, r7}
 800fca2:	b082      	sub	sp, #8
 800fca4:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t m_temp;											//a向きを補正した壁情報

	//====a壁情報の補正格納====
	m_temp = (wall_info >> mouse.dir) & 0x0f;				//aセンサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 800fca6:	4b8f      	ldr	r3, [pc, #572]	; (800fee4 <write_map+0x244>)
 800fca8:	781b      	ldrb	r3, [r3, #0]
 800fcaa:	461a      	mov	r2, r3
 800fcac:	4b8e      	ldr	r3, [pc, #568]	; (800fee8 <write_map+0x248>)
 800fcae:	789b      	ldrb	r3, [r3, #2]
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	fa42 f303 	asr.w	r3, r2, r3
 800fcb6:	b2db      	uxtb	r3, r3
 800fcb8:	f003 030f 	and.w	r3, r3, #15
 800fcbc:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//a上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 800fcbe:	79fb      	ldrb	r3, [r7, #7]
 800fcc0:	011b      	lsls	r3, r3, #4
 800fcc2:	b25a      	sxtb	r2, r3
 800fcc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fcc8:	4313      	orrs	r3, r2
 800fcca:	b25b      	sxtb	r3, r3
 800fccc:	71fb      	strb	r3, [r7, #7]

	//====aデータの書き込み====
	map[mouse.y][mouse.x] = m_temp; 						//a現在地に壁情報書き込み
 800fcce:	4b86      	ldr	r3, [pc, #536]	; (800fee8 <write_map+0x248>)
 800fcd0:	785b      	ldrb	r3, [r3, #1]
 800fcd2:	b2db      	uxtb	r3, r3
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	4b84      	ldr	r3, [pc, #528]	; (800fee8 <write_map+0x248>)
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	b2db      	uxtb	r3, r3
 800fcdc:	4619      	mov	r1, r3
 800fcde:	4a83      	ldr	r2, [pc, #524]	; (800feec <write_map+0x24c>)
 800fce0:	0103      	lsls	r3, r0, #4
 800fce2:	4413      	add	r3, r2
 800fce4:	440b      	add	r3, r1
 800fce6:	79fa      	ldrb	r2, [r7, #7]
 800fce8:	701a      	strb	r2, [r3, #0]
	//----a周辺に書き込む----
	//a北側について
	if(mouse.y != 15){										//a現在最北端でないとき
 800fcea:	4b7f      	ldr	r3, [pc, #508]	; (800fee8 <write_map+0x248>)
 800fcec:	785b      	ldrb	r3, [r3, #1]
 800fcee:	b2db      	uxtb	r3, r3
 800fcf0:	2b0f      	cmp	r3, #15
 800fcf2:	d039      	beq.n	800fd68 <write_map+0xc8>
		if(m_temp & 0x88){									//a北壁がある場合
 800fcf4:	79fb      	ldrb	r3, [r7, #7]
 800fcf6:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d01a      	beq.n	800fd34 <write_map+0x94>
			map[mouse.y + 1][mouse.x] |= 0x22;				//a北側の区画から見て南壁ありを書き込む
 800fcfe:	4b7a      	ldr	r3, [pc, #488]	; (800fee8 <write_map+0x248>)
 800fd00:	785b      	ldrb	r3, [r3, #1]
 800fd02:	b2d8      	uxtb	r0, r3
 800fd04:	4603      	mov	r3, r0
 800fd06:	3301      	adds	r3, #1
 800fd08:	4a77      	ldr	r2, [pc, #476]	; (800fee8 <write_map+0x248>)
 800fd0a:	7812      	ldrb	r2, [r2, #0]
 800fd0c:	b2d1      	uxtb	r1, r2
 800fd0e:	460c      	mov	r4, r1
 800fd10:	4a76      	ldr	r2, [pc, #472]	; (800feec <write_map+0x24c>)
 800fd12:	011b      	lsls	r3, r3, #4
 800fd14:	4413      	add	r3, r2
 800fd16:	4423      	add	r3, r4
 800fd18:	781a      	ldrb	r2, [r3, #0]
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	3301      	adds	r3, #1
 800fd1e:	4608      	mov	r0, r1
 800fd20:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 800fd24:	b2d1      	uxtb	r1, r2
 800fd26:	4a71      	ldr	r2, [pc, #452]	; (800feec <write_map+0x24c>)
 800fd28:	011b      	lsls	r3, r3, #4
 800fd2a:	4413      	add	r3, r2
 800fd2c:	4403      	add	r3, r0
 800fd2e:	460a      	mov	r2, r1
 800fd30:	701a      	strb	r2, [r3, #0]
 800fd32:	e019      	b.n	800fd68 <write_map+0xc8>
		}else{												//a北壁がない場合
			map[mouse.y + 1][mouse.x] &= 0xDD;				//a北側の区画から見て南壁なしを書き込む
 800fd34:	4b6c      	ldr	r3, [pc, #432]	; (800fee8 <write_map+0x248>)
 800fd36:	785b      	ldrb	r3, [r3, #1]
 800fd38:	b2d8      	uxtb	r0, r3
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	4a6a      	ldr	r2, [pc, #424]	; (800fee8 <write_map+0x248>)
 800fd40:	7812      	ldrb	r2, [r2, #0]
 800fd42:	b2d1      	uxtb	r1, r2
 800fd44:	460c      	mov	r4, r1
 800fd46:	4a69      	ldr	r2, [pc, #420]	; (800feec <write_map+0x24c>)
 800fd48:	011b      	lsls	r3, r3, #4
 800fd4a:	4413      	add	r3, r2
 800fd4c:	4423      	add	r3, r4
 800fd4e:	781a      	ldrb	r2, [r3, #0]
 800fd50:	4603      	mov	r3, r0
 800fd52:	3301      	adds	r3, #1
 800fd54:	4608      	mov	r0, r1
 800fd56:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800fd5a:	b2d1      	uxtb	r1, r2
 800fd5c:	4a63      	ldr	r2, [pc, #396]	; (800feec <write_map+0x24c>)
 800fd5e:	011b      	lsls	r3, r3, #4
 800fd60:	4413      	add	r3, r2
 800fd62:	4403      	add	r3, r0
 800fd64:	460a      	mov	r2, r1
 800fd66:	701a      	strb	r2, [r3, #0]
		}
	}
	//a東側について
	if(mouse.x != 15){										//a現在最東端でないとき
 800fd68:	4b5f      	ldr	r3, [pc, #380]	; (800fee8 <write_map+0x248>)
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	b2db      	uxtb	r3, r3
 800fd6e:	2b0f      	cmp	r3, #15
 800fd70:	d037      	beq.n	800fde2 <write_map+0x142>
		if(m_temp & 0x44){									//a東壁がある場合
 800fd72:	79fb      	ldrb	r3, [r7, #7]
 800fd74:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d019      	beq.n	800fdb0 <write_map+0x110>
			map[mouse.y][mouse.x + 1] |= 0x11;				//a東側の区画から見て西壁ありを書き込む
 800fd7c:	4b5a      	ldr	r3, [pc, #360]	; (800fee8 <write_map+0x248>)
 800fd7e:	785b      	ldrb	r3, [r3, #1]
 800fd80:	b2dc      	uxtb	r4, r3
 800fd82:	4622      	mov	r2, r4
 800fd84:	4b58      	ldr	r3, [pc, #352]	; (800fee8 <write_map+0x248>)
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	b2d8      	uxtb	r0, r3
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	3301      	adds	r3, #1
 800fd8e:	4957      	ldr	r1, [pc, #348]	; (800feec <write_map+0x24c>)
 800fd90:	0112      	lsls	r2, r2, #4
 800fd92:	440a      	add	r2, r1
 800fd94:	4413      	add	r3, r2
 800fd96:	781a      	ldrb	r2, [r3, #0]
 800fd98:	4603      	mov	r3, r0
 800fd9a:	3301      	adds	r3, #1
 800fd9c:	f042 0211 	orr.w	r2, r2, #17
 800fda0:	b2d0      	uxtb	r0, r2
 800fda2:	4952      	ldr	r1, [pc, #328]	; (800feec <write_map+0x24c>)
 800fda4:	0122      	lsls	r2, r4, #4
 800fda6:	440a      	add	r2, r1
 800fda8:	4413      	add	r3, r2
 800fdaa:	4602      	mov	r2, r0
 800fdac:	701a      	strb	r2, [r3, #0]
 800fdae:	e018      	b.n	800fde2 <write_map+0x142>
		}else{												//a北壁がない場合
			map[mouse.y][mouse.x + 1] &= 0xEE;				//a東側の区画から見て西壁なしを書き込む
 800fdb0:	4b4d      	ldr	r3, [pc, #308]	; (800fee8 <write_map+0x248>)
 800fdb2:	785b      	ldrb	r3, [r3, #1]
 800fdb4:	b2dc      	uxtb	r4, r3
 800fdb6:	4622      	mov	r2, r4
 800fdb8:	4b4b      	ldr	r3, [pc, #300]	; (800fee8 <write_map+0x248>)
 800fdba:	781b      	ldrb	r3, [r3, #0]
 800fdbc:	b2d8      	uxtb	r0, r3
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	3301      	adds	r3, #1
 800fdc2:	494a      	ldr	r1, [pc, #296]	; (800feec <write_map+0x24c>)
 800fdc4:	0112      	lsls	r2, r2, #4
 800fdc6:	440a      	add	r2, r1
 800fdc8:	4413      	add	r3, r2
 800fdca:	781a      	ldrb	r2, [r3, #0]
 800fdcc:	4603      	mov	r3, r0
 800fdce:	3301      	adds	r3, #1
 800fdd0:	f022 0211 	bic.w	r2, r2, #17
 800fdd4:	b2d0      	uxtb	r0, r2
 800fdd6:	4945      	ldr	r1, [pc, #276]	; (800feec <write_map+0x24c>)
 800fdd8:	0122      	lsls	r2, r4, #4
 800fdda:	440a      	add	r2, r1
 800fddc:	4413      	add	r3, r2
 800fdde:	4602      	mov	r2, r0
 800fde0:	701a      	strb	r2, [r3, #0]
		}
	}
	//a南壁について
	if(mouse.y != 0){										//a現在最南端でないとき
 800fde2:	4b41      	ldr	r3, [pc, #260]	; (800fee8 <write_map+0x248>)
 800fde4:	785b      	ldrb	r3, [r3, #1]
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d039      	beq.n	800fe60 <write_map+0x1c0>
		if(m_temp & 0x22){									//a南壁がある場合
 800fdec:	79fb      	ldrb	r3, [r7, #7]
 800fdee:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d01a      	beq.n	800fe2c <write_map+0x18c>
			map[mouse.y - 1][mouse.x] |= 0x88;				//a南側の区画から見て北壁ありを書き込む
 800fdf6:	4b3c      	ldr	r3, [pc, #240]	; (800fee8 <write_map+0x248>)
 800fdf8:	785b      	ldrb	r3, [r3, #1]
 800fdfa:	b2d8      	uxtb	r0, r3
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	3b01      	subs	r3, #1
 800fe00:	4a39      	ldr	r2, [pc, #228]	; (800fee8 <write_map+0x248>)
 800fe02:	7812      	ldrb	r2, [r2, #0]
 800fe04:	b2d1      	uxtb	r1, r2
 800fe06:	460c      	mov	r4, r1
 800fe08:	4a38      	ldr	r2, [pc, #224]	; (800feec <write_map+0x24c>)
 800fe0a:	011b      	lsls	r3, r3, #4
 800fe0c:	4413      	add	r3, r2
 800fe0e:	4423      	add	r3, r4
 800fe10:	781a      	ldrb	r2, [r3, #0]
 800fe12:	4603      	mov	r3, r0
 800fe14:	3b01      	subs	r3, #1
 800fe16:	4608      	mov	r0, r1
 800fe18:	f062 0277 	orn	r2, r2, #119	; 0x77
 800fe1c:	b2d1      	uxtb	r1, r2
 800fe1e:	4a33      	ldr	r2, [pc, #204]	; (800feec <write_map+0x24c>)
 800fe20:	011b      	lsls	r3, r3, #4
 800fe22:	4413      	add	r3, r2
 800fe24:	4403      	add	r3, r0
 800fe26:	460a      	mov	r2, r1
 800fe28:	701a      	strb	r2, [r3, #0]
 800fe2a:	e019      	b.n	800fe60 <write_map+0x1c0>
		}else{												//a南壁がない場合
			map[mouse.y - 1][mouse.x] &= 0x77;				//a南側の区画から見て北壁なしを書き込む
 800fe2c:	4b2e      	ldr	r3, [pc, #184]	; (800fee8 <write_map+0x248>)
 800fe2e:	785b      	ldrb	r3, [r3, #1]
 800fe30:	b2d8      	uxtb	r0, r3
 800fe32:	4603      	mov	r3, r0
 800fe34:	3b01      	subs	r3, #1
 800fe36:	4a2c      	ldr	r2, [pc, #176]	; (800fee8 <write_map+0x248>)
 800fe38:	7812      	ldrb	r2, [r2, #0]
 800fe3a:	b2d1      	uxtb	r1, r2
 800fe3c:	460c      	mov	r4, r1
 800fe3e:	4a2b      	ldr	r2, [pc, #172]	; (800feec <write_map+0x24c>)
 800fe40:	011b      	lsls	r3, r3, #4
 800fe42:	4413      	add	r3, r2
 800fe44:	4423      	add	r3, r4
 800fe46:	781a      	ldrb	r2, [r3, #0]
 800fe48:	4603      	mov	r3, r0
 800fe4a:	3b01      	subs	r3, #1
 800fe4c:	4608      	mov	r0, r1
 800fe4e:	f002 0277 	and.w	r2, r2, #119	; 0x77
 800fe52:	b2d1      	uxtb	r1, r2
 800fe54:	4a25      	ldr	r2, [pc, #148]	; (800feec <write_map+0x24c>)
 800fe56:	011b      	lsls	r3, r3, #4
 800fe58:	4413      	add	r3, r2
 800fe5a:	4403      	add	r3, r0
 800fe5c:	460a      	mov	r2, r1
 800fe5e:	701a      	strb	r2, [r3, #0]
		}
	}
	//a西側について
	if(mouse.x != 0){										//a現在最西端でないとき
 800fe60:	4b21      	ldr	r3, [pc, #132]	; (800fee8 <write_map+0x248>)
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d037      	beq.n	800feda <write_map+0x23a>
		if(m_temp & 0x11){									//a西壁がある場合
 800fe6a:	79fb      	ldrb	r3, [r7, #7]
 800fe6c:	f003 0311 	and.w	r3, r3, #17
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d019      	beq.n	800fea8 <write_map+0x208>
			map[mouse.y][mouse.x - 1] |= 0x44;				//a西側の区画から見て東壁ありを書き込む
 800fe74:	4b1c      	ldr	r3, [pc, #112]	; (800fee8 <write_map+0x248>)
 800fe76:	785b      	ldrb	r3, [r3, #1]
 800fe78:	b2dc      	uxtb	r4, r3
 800fe7a:	4622      	mov	r2, r4
 800fe7c:	4b1a      	ldr	r3, [pc, #104]	; (800fee8 <write_map+0x248>)
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	b2d8      	uxtb	r0, r3
 800fe82:	4603      	mov	r3, r0
 800fe84:	3b01      	subs	r3, #1
 800fe86:	4919      	ldr	r1, [pc, #100]	; (800feec <write_map+0x24c>)
 800fe88:	0112      	lsls	r2, r2, #4
 800fe8a:	440a      	add	r2, r1
 800fe8c:	4413      	add	r3, r2
 800fe8e:	781a      	ldrb	r2, [r3, #0]
 800fe90:	4603      	mov	r3, r0
 800fe92:	3b01      	subs	r3, #1
 800fe94:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 800fe98:	b2d0      	uxtb	r0, r2
 800fe9a:	4914      	ldr	r1, [pc, #80]	; (800feec <write_map+0x24c>)
 800fe9c:	0122      	lsls	r2, r4, #4
 800fe9e:	440a      	add	r2, r1
 800fea0:	4413      	add	r3, r2
 800fea2:	4602      	mov	r2, r0
 800fea4:	701a      	strb	r2, [r3, #0]
		}else{												//a西壁がない場合
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
		}
	}
}
 800fea6:	e018      	b.n	800feda <write_map+0x23a>
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
 800fea8:	4b0f      	ldr	r3, [pc, #60]	; (800fee8 <write_map+0x248>)
 800feaa:	785b      	ldrb	r3, [r3, #1]
 800feac:	b2dc      	uxtb	r4, r3
 800feae:	4622      	mov	r2, r4
 800feb0:	4b0d      	ldr	r3, [pc, #52]	; (800fee8 <write_map+0x248>)
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	b2d8      	uxtb	r0, r3
 800feb6:	4603      	mov	r3, r0
 800feb8:	3b01      	subs	r3, #1
 800feba:	490c      	ldr	r1, [pc, #48]	; (800feec <write_map+0x24c>)
 800febc:	0112      	lsls	r2, r2, #4
 800febe:	440a      	add	r2, r1
 800fec0:	4413      	add	r3, r2
 800fec2:	781a      	ldrb	r2, [r3, #0]
 800fec4:	4603      	mov	r3, r0
 800fec6:	3b01      	subs	r3, #1
 800fec8:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 800fecc:	b2d0      	uxtb	r0, r2
 800fece:	4907      	ldr	r1, [pc, #28]	; (800feec <write_map+0x24c>)
 800fed0:	0122      	lsls	r2, r4, #4
 800fed2:	440a      	add	r2, r1
 800fed4:	4413      	add	r3, r2
 800fed6:	4602      	mov	r2, r0
 800fed8:	701a      	strb	r2, [r3, #0]
}
 800feda:	bf00      	nop
 800fedc:	3708      	adds	r7, #8
 800fede:	46bd      	mov	sp, r7
 800fee0:	bc90      	pop	{r4, r7}
 800fee2:	4770      	bx	lr
 800fee4:	200002c8 	.word	0x200002c8
 800fee8:	20000c0c 	.word	0x20000c0c
 800feec:	200001ac 	.word	0x200001ac

0800fef0 <turn_dir>:
//turn_dir
//aマウスの方向を変更する
//a引数1：t_pat …… 回転方向(search.hでマクロ定義)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat, uint8_t t_mode){
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	4603      	mov	r3, r0
 800fef8:	460a      	mov	r2, r1
 800fefa:	71fb      	strb	r3, [r7, #7]
 800fefc:	4613      	mov	r3, r2
 800fefe:	71bb      	strb	r3, [r7, #6]

	//====a方向を変更====
	if(t_mode < 2){												//4方位モード
 800ff00:	79bb      	ldrb	r3, [r7, #6]
 800ff02:	2b01      	cmp	r3, #1
 800ff04:	d837      	bhi.n	800ff76 <turn_dir+0x86>
		mouse.dir = (mouse.dir + t_pat) & 0x03;					//a指定された分mouse.dirを回転させる
 800ff06:	4b5a      	ldr	r3, [pc, #360]	; (8010070 <turn_dir+0x180>)
 800ff08:	789b      	ldrb	r3, [r3, #2]
 800ff0a:	b2da      	uxtb	r2, r3
 800ff0c:	79fb      	ldrb	r3, [r7, #7]
 800ff0e:	4413      	add	r3, r2
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	f003 0303 	and.w	r3, r3, #3
 800ff16:	b2da      	uxtb	r2, r3
 800ff18:	4b55      	ldr	r3, [pc, #340]	; (8010070 <turn_dir+0x180>)
 800ff1a:	709a      	strb	r2, [r3, #2]
		if(t_mode == 1){
 800ff1c:	79bb      	ldrb	r3, [r7, #6]
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	f040 809f 	bne.w	8010062 <turn_dir+0x172>
			if(t_pat == 0x01) target_degree_z -= 90.5;			//a目標角度+右90度
 800ff24:	79fb      	ldrb	r3, [r7, #7]
 800ff26:	2b01      	cmp	r3, #1
 800ff28:	d109      	bne.n	800ff3e <turn_dir+0x4e>
 800ff2a:	4b52      	ldr	r3, [pc, #328]	; (8010074 <turn_dir+0x184>)
 800ff2c:	edd3 7a00 	vldr	s15, [r3]
 800ff30:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8010078 <turn_dir+0x188>
 800ff34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff38:	4b4e      	ldr	r3, [pc, #312]	; (8010074 <turn_dir+0x184>)
 800ff3a:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 90.5;			//a目標角度+左90度
 800ff3e:	79fb      	ldrb	r3, [r7, #7]
 800ff40:	2bff      	cmp	r3, #255	; 0xff
 800ff42:	d109      	bne.n	800ff58 <turn_dir+0x68>
 800ff44:	4b4b      	ldr	r3, [pc, #300]	; (8010074 <turn_dir+0x184>)
 800ff46:	edd3 7a00 	vldr	s15, [r3]
 800ff4a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8010078 <turn_dir+0x188>
 800ff4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff52:	4b48      	ldr	r3, [pc, #288]	; (8010074 <turn_dir+0x184>)
 800ff54:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 181;			//a目標角度+右180度
 800ff58:	79fb      	ldrb	r3, [r7, #7]
 800ff5a:	2b02      	cmp	r3, #2
 800ff5c:	f040 8081 	bne.w	8010062 <turn_dir+0x172>
 800ff60:	4b44      	ldr	r3, [pc, #272]	; (8010074 <turn_dir+0x184>)
 800ff62:	edd3 7a00 	vldr	s15, [r3]
 800ff66:	ed9f 7a45 	vldr	s14, [pc, #276]	; 801007c <turn_dir+0x18c>
 800ff6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff6e:	4b41      	ldr	r3, [pc, #260]	; (8010074 <turn_dir+0x184>)
 800ff70:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
		}
	}
}
 800ff74:	e075      	b.n	8010062 <turn_dir+0x172>
		mouse.dir = (mouse.dir + t_pat) & 0x07;					//a指定された分mouse.dirを回転させる
 800ff76:	4b3e      	ldr	r3, [pc, #248]	; (8010070 <turn_dir+0x180>)
 800ff78:	789b      	ldrb	r3, [r3, #2]
 800ff7a:	b2da      	uxtb	r2, r3
 800ff7c:	79fb      	ldrb	r3, [r7, #7]
 800ff7e:	4413      	add	r3, r2
 800ff80:	b2db      	uxtb	r3, r3
 800ff82:	f003 0307 	and.w	r3, r3, #7
 800ff86:	b2da      	uxtb	r2, r3
 800ff88:	4b39      	ldr	r3, [pc, #228]	; (8010070 <turn_dir+0x180>)
 800ff8a:	709a      	strb	r2, [r3, #2]
		if(t_mode == 3){
 800ff8c:	79bb      	ldrb	r3, [r7, #6]
 800ff8e:	2b03      	cmp	r3, #3
 800ff90:	d167      	bne.n	8010062 <turn_dir+0x172>
			if(t_pat == 0x01) target_degree_z -= 45.25;			//a目標角度+右90度
 800ff92:	79fb      	ldrb	r3, [r7, #7]
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d109      	bne.n	800ffac <turn_dir+0xbc>
 800ff98:	4b36      	ldr	r3, [pc, #216]	; (8010074 <turn_dir+0x184>)
 800ff9a:	edd3 7a00 	vldr	s15, [r3]
 800ff9e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010080 <turn_dir+0x190>
 800ffa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ffa6:	4b33      	ldr	r3, [pc, #204]	; (8010074 <turn_dir+0x184>)
 800ffa8:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 90.5;			//a目標角度+左90度
 800ffac:	79fb      	ldrb	r3, [r7, #7]
 800ffae:	2b02      	cmp	r3, #2
 800ffb0:	d109      	bne.n	800ffc6 <turn_dir+0xd6>
 800ffb2:	4b30      	ldr	r3, [pc, #192]	; (8010074 <turn_dir+0x184>)
 800ffb4:	edd3 7a00 	vldr	s15, [r3]
 800ffb8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8010078 <turn_dir+0x188>
 800ffbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ffc0:	4b2c      	ldr	r3, [pc, #176]	; (8010074 <turn_dir+0x184>)
 800ffc2:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x03) target_degree_z -= 135.75;		//a目標角度+右180度
 800ffc6:	79fb      	ldrb	r3, [r7, #7]
 800ffc8:	2b03      	cmp	r3, #3
 800ffca:	d109      	bne.n	800ffe0 <turn_dir+0xf0>
 800ffcc:	4b29      	ldr	r3, [pc, #164]	; (8010074 <turn_dir+0x184>)
 800ffce:	edd3 7a00 	vldr	s15, [r3]
 800ffd2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8010084 <turn_dir+0x194>
 800ffd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ffda:	4b26      	ldr	r3, [pc, #152]	; (8010074 <turn_dir+0x184>)
 800ffdc:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x04) target_degree_z -= 181;			//a目標角度+右180度
 800ffe0:	79fb      	ldrb	r3, [r7, #7]
 800ffe2:	2b04      	cmp	r3, #4
 800ffe4:	d109      	bne.n	800fffa <turn_dir+0x10a>
 800ffe6:	4b23      	ldr	r3, [pc, #140]	; (8010074 <turn_dir+0x184>)
 800ffe8:	edd3 7a00 	vldr	s15, [r3]
 800ffec:	ed9f 7a23 	vldr	s14, [pc, #140]	; 801007c <turn_dir+0x18c>
 800fff0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fff4:	4b1f      	ldr	r3, [pc, #124]	; (8010074 <turn_dir+0x184>)
 800fff6:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 45.25;			//a目標角度+右90度
 800fffa:	79fb      	ldrb	r3, [r7, #7]
 800fffc:	2bff      	cmp	r3, #255	; 0xff
 800fffe:	d109      	bne.n	8010014 <turn_dir+0x124>
 8010000:	4b1c      	ldr	r3, [pc, #112]	; (8010074 <turn_dir+0x184>)
 8010002:	edd3 7a00 	vldr	s15, [r3]
 8010006:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8010080 <turn_dir+0x190>
 801000a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801000e:	4b19      	ldr	r3, [pc, #100]	; (8010074 <turn_dir+0x184>)
 8010010:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
 8010014:	79fb      	ldrb	r3, [r7, #7]
 8010016:	2bfe      	cmp	r3, #254	; 0xfe
 8010018:	d109      	bne.n	801002e <turn_dir+0x13e>
 801001a:	4b16      	ldr	r3, [pc, #88]	; (8010074 <turn_dir+0x184>)
 801001c:	edd3 7a00 	vldr	s15, [r3]
 8010020:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8010078 <turn_dir+0x188>
 8010024:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010028:	4b12      	ldr	r3, [pc, #72]	; (8010074 <turn_dir+0x184>)
 801002a:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
 801002e:	79fb      	ldrb	r3, [r7, #7]
 8010030:	2bfd      	cmp	r3, #253	; 0xfd
 8010032:	d109      	bne.n	8010048 <turn_dir+0x158>
 8010034:	4b0f      	ldr	r3, [pc, #60]	; (8010074 <turn_dir+0x184>)
 8010036:	edd3 7a00 	vldr	s15, [r3]
 801003a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8010084 <turn_dir+0x194>
 801003e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010042:	4b0c      	ldr	r3, [pc, #48]	; (8010074 <turn_dir+0x184>)
 8010044:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
 8010048:	79fb      	ldrb	r3, [r7, #7]
 801004a:	2bfc      	cmp	r3, #252	; 0xfc
 801004c:	d109      	bne.n	8010062 <turn_dir+0x172>
 801004e:	4b09      	ldr	r3, [pc, #36]	; (8010074 <turn_dir+0x184>)
 8010050:	edd3 7a00 	vldr	s15, [r3]
 8010054:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801007c <turn_dir+0x18c>
 8010058:	ee77 7a87 	vadd.f32	s15, s15, s14
 801005c:	4b05      	ldr	r3, [pc, #20]	; (8010074 <turn_dir+0x184>)
 801005e:	edc3 7a00 	vstr	s15, [r3]
}
 8010062:	bf00      	nop
 8010064:	370c      	adds	r7, #12
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr
 801006e:	bf00      	nop
 8010070:	20000c0c 	.word	0x20000c0c
 8010074:	20000bf8 	.word	0x20000bf8
 8010078:	42b50000 	.word	0x42b50000
 801007c:	43350000 	.word	0x43350000
 8010080:	42350000 	.word	0x42350000
 8010084:	4307c000 	.word	0x4307c000

08010088 <make_smap>:
//make_smap
//a歩数マップを作成する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 8010088:	b590      	push	{r4, r7, lr}
 801008a:	b08f      	sub	sp, #60	; 0x3c
 801008c:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数
	uint8_t m_temp_sample[16];

	//====a歩数マップのクリア====
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 801008e:	2300      	movs	r3, #0
 8010090:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8010094:	e01c      	b.n	80100d0 <make_smap+0x48>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 8010096:	2300      	movs	r3, #0
 8010098:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801009c:	e00f      	b.n	80100be <make_smap+0x36>
			smap[y][x] = 0x03e7;							//a未記入部分は歩数最大とする
 801009e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80100a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100a6:	49be      	ldr	r1, [pc, #760]	; (80103a0 <make_smap+0x318>)
 80100a8:	0112      	lsls	r2, r2, #4
 80100aa:	4413      	add	r3, r2
 80100ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80100b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 80100b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100b8:	3301      	adds	r3, #1
 80100ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80100be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100c2:	2b0f      	cmp	r3, #15
 80100c4:	d9eb      	bls.n	801009e <make_smap+0x16>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 80100c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80100ca:	3301      	adds	r3, #1
 80100cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80100d0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80100d4:	2b0f      	cmp	r3, #15
 80100d6:	d9de      	bls.n	8010096 <make_smap+0xe>
		}
	}

	//====aゴール座標を0にする====
	m_step = 0;												//a歩数カウンタを0にする
 80100d8:	4bb2      	ldr	r3, [pc, #712]	; (80103a4 <make_smap+0x31c>)
 80100da:	2200      	movs	r2, #0
 80100dc:	801a      	strh	r2, [r3, #0]

	for(int j=0; j<goal_mode; j++){
 80100de:	2300      	movs	r3, #0
 80100e0:	633b      	str	r3, [r7, #48]	; 0x30
 80100e2:	e01e      	b.n	8010122 <make_smap+0x9a>
		for(int k=0; k<goal_mode; k++){
 80100e4:	2300      	movs	r3, #0
 80100e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100e8:	e012      	b.n	8010110 <make_smap+0x88>
		smap[goal_y+j][goal_x+k] = 0;
 80100ea:	4baf      	ldr	r3, [pc, #700]	; (80103a8 <make_smap+0x320>)
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	461a      	mov	r2, r3
 80100f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f2:	441a      	add	r2, r3
 80100f4:	4bad      	ldr	r3, [pc, #692]	; (80103ac <make_smap+0x324>)
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	4619      	mov	r1, r3
 80100fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fc:	440b      	add	r3, r1
 80100fe:	49a8      	ldr	r1, [pc, #672]	; (80103a0 <make_smap+0x318>)
 8010100:	0112      	lsls	r2, r2, #4
 8010102:	4413      	add	r3, r2
 8010104:	2200      	movs	r2, #0
 8010106:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int k=0; k<goal_mode; k++){
 801010a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010c:	3301      	adds	r3, #1
 801010e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010110:	4ba7      	ldr	r3, [pc, #668]	; (80103b0 <make_smap+0x328>)
 8010112:	781b      	ldrb	r3, [r3, #0]
 8010114:	461a      	mov	r2, r3
 8010116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010118:	4293      	cmp	r3, r2
 801011a:	dbe6      	blt.n	80100ea <make_smap+0x62>
	for(int j=0; j<goal_mode; j++){
 801011c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801011e:	3301      	adds	r3, #1
 8010120:	633b      	str	r3, [r7, #48]	; 0x30
 8010122:	4ba3      	ldr	r3, [pc, #652]	; (80103b0 <make_smap+0x328>)
 8010124:	781b      	ldrb	r3, [r3, #0]
 8010126:	461a      	mov	r2, r3
 8010128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801012a:	4293      	cmp	r3, r2
 801012c:	dbda      	blt.n	80100e4 <make_smap+0x5c>
	}

//	smap[goal_y][goal_x] = 0;

	//====a歩数カウンタの重みづけ====
	int straight = 2;
 801012e:	2302      	movs	r3, #2
 8010130:	617b      	str	r3, [r7, #20]
	int turn = 5;
 8010132:	2305      	movs	r3, #5
 8010134:	613b      	str	r3, [r7, #16]
	full_led_write(GREEN);
 8010136:	2002      	movs	r0, #2
 8010138:	f001 fd6e 	bl	8011c18 <full_led_write>
	//====a自分の座標にたどり着くまでループ====
	do{
		//----aマップ全域を捜索----
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 801013c:	2300      	movs	r3, #0
 801013e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8010142:	e334      	b.n	80107ae <make_smap+0x726>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 8010144:	2300      	movs	r3, #0
 8010146:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801014a:	e326      	b.n	801079a <make_smap+0x712>
				//----a現在最大の歩数を発見したとき----
				if(smap[y][x] == m_step){					//a歩数カウンタm_stepの値が現在最大の歩数
 801014c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010150:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010154:	4992      	ldr	r1, [pc, #584]	; (80103a0 <make_smap+0x318>)
 8010156:	0112      	lsls	r2, r2, #4
 8010158:	4413      	add	r3, r2
 801015a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 801015e:	4b91      	ldr	r3, [pc, #580]	; (80103a4 <make_smap+0x31c>)
 8010160:	881b      	ldrh	r3, [r3, #0]
 8010162:	429a      	cmp	r2, r3
 8010164:	f040 8314 	bne.w	8010790 <make_smap+0x708>
					uint8_t m_temp = map[y][x];				//map配列からマップデータを取り出す
 8010168:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801016c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010170:	4990      	ldr	r1, [pc, #576]	; (80103b4 <make_smap+0x32c>)
 8010172:	0112      	lsls	r2, r2, #4
 8010174:	440a      	add	r2, r1
 8010176:	4413      	add	r3, r2
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					if(MF.FLAG.SCND){						//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 801017e:	4b8e      	ldr	r3, [pc, #568]	; (80103b8 <make_smap+0x330>)
 8010180:	881b      	ldrh	r3, [r3, #0]
 8010182:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010186:	b2db      	uxtb	r3, r3
 8010188:	2b00      	cmp	r3, #0
 801018a:	d004      	beq.n	8010196 <make_smap+0x10e>
						m_temp >>= 4;						//a上位4bitを使うので4bit分右にシフトさせる
 801018c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010190:	091b      	lsrs	r3, r3, #4
 8010192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					}
					//----a北壁についての処理----
					if(!(m_temp & 0x08) && y != 15){		//a北壁がなく現在最北端でないとき
 8010196:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801019a:	f003 0308 	and.w	r3, r3, #8
 801019e:	2b00      	cmp	r3, #0
 80101a0:	f040 80b4 	bne.w	801030c <make_smap+0x284>
 80101a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80101a8:	2b0f      	cmp	r3, #15
 80101aa:	f000 80af 	beq.w	801030c <make_smap+0x284>
						if(smap[y+1][x] >= (smap[y][x]+turn)){		//a北側が記入後より大きいなら
 80101ae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80101b2:	1c5a      	adds	r2, r3, #1
 80101b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101b8:	4979      	ldr	r1, [pc, #484]	; (80103a0 <make_smap+0x318>)
 80101ba:	0112      	lsls	r2, r2, #4
 80101bc:	4413      	add	r3, r2
 80101be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80101c2:	4618      	mov	r0, r3
 80101c4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80101c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101cc:	4974      	ldr	r1, [pc, #464]	; (80103a0 <make_smap+0x318>)
 80101ce:	0112      	lsls	r2, r2, #4
 80101d0:	4413      	add	r3, r2
 80101d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80101d6:	461a      	mov	r2, r3
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	4413      	add	r3, r2
 80101dc:	4298      	cmp	r0, r3
 80101de:	f2c0 8095 	blt.w	801030c <make_smap+0x284>
							smap[y+1][x] = smap[y][x] + turn;		//a次の歩数を書き込む
 80101e2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80101e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101ea:	496d      	ldr	r1, [pc, #436]	; (80103a0 <make_smap+0x318>)
 80101ec:	0112      	lsls	r2, r2, #4
 80101ee:	4413      	add	r3, r2
 80101f0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	b299      	uxth	r1, r3
 80101f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80101fc:	1c5a      	adds	r2, r3, #1
 80101fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010202:	4401      	add	r1, r0
 8010204:	b288      	uxth	r0, r1
 8010206:	4966      	ldr	r1, [pc, #408]	; (80103a0 <make_smap+0x318>)
 8010208:	0112      	lsls	r2, r2, #4
 801020a:	4413      	add	r3, r2
 801020c:	4602      	mov	r2, r0
 801020e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 8010212:	4b69      	ldr	r3, [pc, #420]	; (80103b8 <make_smap+0x330>)
 8010214:	881b      	ldrh	r3, [r3, #0]
 8010216:	f3c3 2380 	ubfx	r3, r3, #10, #1
 801021a:	b2db      	uxtb	r3, r3
 801021c:	2b00      	cmp	r3, #0
 801021e:	d075      	beq.n	801030c <make_smap+0x284>
								//----a直線優先処理----
								for(int k=1; k<16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 8010220:	2301      	movs	r3, #1
 8010222:	627b      	str	r3, [r7, #36]	; 0x24
 8010224:	e06b      	b.n	80102fe <make_smap+0x276>
									m_temp_sample[k] = map[y+k][x];				//map配列からマップデータを取り出す
 8010226:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801022a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022c:	441a      	add	r2, r3
 801022e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010232:	4960      	ldr	r1, [pc, #384]	; (80103b4 <make_smap+0x32c>)
 8010234:	0112      	lsls	r2, r2, #4
 8010236:	440a      	add	r2, r1
 8010238:	4413      	add	r3, r2
 801023a:	7819      	ldrb	r1, [r3, #0]
 801023c:	463a      	mov	r2, r7
 801023e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010240:	4413      	add	r3, r2
 8010242:	460a      	mov	r2, r1
 8010244:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 8010246:	4b5c      	ldr	r3, [pc, #368]	; (80103b8 <make_smap+0x330>)
 8010248:	881b      	ldrh	r3, [r3, #0]
 801024a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801024e:	b2db      	uxtb	r3, r3
 8010250:	2b00      	cmp	r3, #0
 8010252:	d00a      	beq.n	801026a <make_smap+0x1e2>
 8010254:	463a      	mov	r2, r7
 8010256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010258:	4413      	add	r3, r2
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	091b      	lsrs	r3, r3, #4
 801025e:	b2d9      	uxtb	r1, r3
 8010260:	463a      	mov	r2, r7
 8010262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010264:	4413      	add	r3, r2
 8010266:	460a      	mov	r2, r1
 8010268:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x08) && (y+k) != 15) {		//a北壁がなく現在最北端でないとき
 801026a:	463a      	mov	r2, r7
 801026c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801026e:	4413      	add	r3, r2
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	f003 0308 	and.w	r3, r3, #8
 8010276:	2b00      	cmp	r3, #0
 8010278:	d148      	bne.n	801030c <make_smap+0x284>
 801027a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801027e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010280:	4413      	add	r3, r2
 8010282:	2b0f      	cmp	r3, #15
 8010284:	d042      	beq.n	801030c <make_smap+0x284>
										if(smap[y+k+1][x] >= (smap[y+k][x]+straight)){		//a北側が記入後より大きいなら
 8010286:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801028a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028c:	4413      	add	r3, r2
 801028e:	1c5a      	adds	r2, r3, #1
 8010290:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010294:	4942      	ldr	r1, [pc, #264]	; (80103a0 <make_smap+0x318>)
 8010296:	0112      	lsls	r2, r2, #4
 8010298:	4413      	add	r3, r2
 801029a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801029e:	4618      	mov	r0, r3
 80102a0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80102a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a6:	441a      	add	r2, r3
 80102a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102ac:	493c      	ldr	r1, [pc, #240]	; (80103a0 <make_smap+0x318>)
 80102ae:	0112      	lsls	r2, r2, #4
 80102b0:	4413      	add	r3, r2
 80102b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80102b6:	461a      	mov	r2, r3
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	4413      	add	r3, r2
 80102bc:	4298      	cmp	r0, r3
 80102be:	db1b      	blt.n	80102f8 <make_smap+0x270>
											smap[y+k+1][x] = smap[y+k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 80102c0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80102c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c6:	441a      	add	r2, r3
 80102c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102cc:	4934      	ldr	r1, [pc, #208]	; (80103a0 <make_smap+0x318>)
 80102ce:	0112      	lsls	r2, r2, #4
 80102d0:	4413      	add	r3, r2
 80102d2:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	b299      	uxth	r1, r3
 80102da:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80102de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e0:	4413      	add	r3, r2
 80102e2:	1c5a      	adds	r2, r3, #1
 80102e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102e8:	4401      	add	r1, r0
 80102ea:	b288      	uxth	r0, r1
 80102ec:	492c      	ldr	r1, [pc, #176]	; (80103a0 <make_smap+0x318>)
 80102ee:	0112      	lsls	r2, r2, #4
 80102f0:	4413      	add	r3, r2
 80102f2:	4602      	mov	r2, r0
 80102f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 80102f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fa:	3301      	adds	r3, #1
 80102fc:	627b      	str	r3, [r7, #36]	; 0x24
 80102fe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010302:	f1c3 0310 	rsb	r3, r3, #16
 8010306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010308:	429a      	cmp	r2, r3
 801030a:	db8c      	blt.n	8010226 <make_smap+0x19e>
								}
							}
						}
					}
					//----a東壁についての処理----
					if(!(m_temp & 0x04) && x != 15){		//a東壁がなく現在最東端でないとき
 801030c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010310:	f003 0304 	and.w	r3, r3, #4
 8010314:	2b00      	cmp	r3, #0
 8010316:	f040 80c4 	bne.w	80104a2 <make_smap+0x41a>
 801031a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801031e:	2b0f      	cmp	r3, #15
 8010320:	f000 80bf 	beq.w	80104a2 <make_smap+0x41a>
						if(smap[y][x+1] >= (smap[y][x]+turn)){	//a東側が記入後より大きいなら
 8010324:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010328:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801032c:	3301      	adds	r3, #1
 801032e:	491c      	ldr	r1, [pc, #112]	; (80103a0 <make_smap+0x318>)
 8010330:	0112      	lsls	r2, r2, #4
 8010332:	4413      	add	r3, r2
 8010334:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010338:	4618      	mov	r0, r3
 801033a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801033e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010342:	4917      	ldr	r1, [pc, #92]	; (80103a0 <make_smap+0x318>)
 8010344:	0112      	lsls	r2, r2, #4
 8010346:	4413      	add	r3, r2
 8010348:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801034c:	461a      	mov	r2, r3
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	4413      	add	r3, r2
 8010352:	4298      	cmp	r0, r3
 8010354:	f2c0 80a5 	blt.w	80104a2 <make_smap+0x41a>
							smap[y][x+1] = smap[y][x] + turn;	//a次の歩数を書き込む
 8010358:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801035c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010360:	490f      	ldr	r1, [pc, #60]	; (80103a0 <make_smap+0x318>)
 8010362:	0112      	lsls	r2, r2, #4
 8010364:	4413      	add	r3, r2
 8010366:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	b299      	uxth	r1, r3
 801036e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010372:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010376:	3301      	adds	r3, #1
 8010378:	4401      	add	r1, r0
 801037a:	b288      	uxth	r0, r1
 801037c:	4908      	ldr	r1, [pc, #32]	; (80103a0 <make_smap+0x318>)
 801037e:	0112      	lsls	r2, r2, #4
 8010380:	4413      	add	r3, r2
 8010382:	4602      	mov	r2, r0
 8010384:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 8010388:	4b0b      	ldr	r3, [pc, #44]	; (80103b8 <make_smap+0x330>)
 801038a:	881b      	ldrh	r3, [r3, #0]
 801038c:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8010390:	b2db      	uxtb	r3, r3
 8010392:	2b00      	cmp	r3, #0
 8010394:	f000 8085 	beq.w	80104a2 <make_smap+0x41a>
								//----a直線優先処理----
								for(int k=1; k<16-x; k++) {					//a現在座標から見て東のマスすべてにおいて
 8010398:	2301      	movs	r3, #1
 801039a:	623b      	str	r3, [r7, #32]
 801039c:	e07a      	b.n	8010494 <make_smap+0x40c>
 801039e:	bf00      	nop
 80103a0:	20000d60 	.word	0x20000d60
 80103a4:	2000034e 	.word	0x2000034e
 80103a8:	20000b4c 	.word	0x20000b4c
 80103ac:	20000bb0 	.word	0x20000bb0
 80103b0:	20000bb1 	.word	0x20000bb1
 80103b4:	200001ac 	.word	0x200001ac
 80103b8:	20000f68 	.word	0x20000f68
									m_temp_sample[k] = map[y][x+k];				//map配列からマップデータを取り出す
 80103bc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80103c0:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80103c4:	6a3b      	ldr	r3, [r7, #32]
 80103c6:	440b      	add	r3, r1
 80103c8:	49b6      	ldr	r1, [pc, #728]	; (80106a4 <make_smap+0x61c>)
 80103ca:	0112      	lsls	r2, r2, #4
 80103cc:	440a      	add	r2, r1
 80103ce:	4413      	add	r3, r2
 80103d0:	7819      	ldrb	r1, [r3, #0]
 80103d2:	463a      	mov	r2, r7
 80103d4:	6a3b      	ldr	r3, [r7, #32]
 80103d6:	4413      	add	r3, r2
 80103d8:	460a      	mov	r2, r1
 80103da:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 80103dc:	4bb2      	ldr	r3, [pc, #712]	; (80106a8 <make_smap+0x620>)
 80103de:	881b      	ldrh	r3, [r3, #0]
 80103e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80103e4:	b2db      	uxtb	r3, r3
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d00a      	beq.n	8010400 <make_smap+0x378>
 80103ea:	463a      	mov	r2, r7
 80103ec:	6a3b      	ldr	r3, [r7, #32]
 80103ee:	4413      	add	r3, r2
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	091b      	lsrs	r3, r3, #4
 80103f4:	b2d9      	uxtb	r1, r3
 80103f6:	463a      	mov	r2, r7
 80103f8:	6a3b      	ldr	r3, [r7, #32]
 80103fa:	4413      	add	r3, r2
 80103fc:	460a      	mov	r2, r1
 80103fe:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x04) && (x+k) != 15) {		//a東壁がなく現在最東端でないとき
 8010400:	463a      	mov	r2, r7
 8010402:	6a3b      	ldr	r3, [r7, #32]
 8010404:	4413      	add	r3, r2
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	f003 0304 	and.w	r3, r3, #4
 801040c:	2b00      	cmp	r3, #0
 801040e:	d148      	bne.n	80104a2 <make_smap+0x41a>
 8010410:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010414:	6a3b      	ldr	r3, [r7, #32]
 8010416:	4413      	add	r3, r2
 8010418:	2b0f      	cmp	r3, #15
 801041a:	d042      	beq.n	80104a2 <make_smap+0x41a>
										if(smap[y][x+k+1] >= (smap[y][x+k]+straight)){		//a東側が記入後より大きいなら
 801041c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010420:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010424:	6a3b      	ldr	r3, [r7, #32]
 8010426:	440b      	add	r3, r1
 8010428:	3301      	adds	r3, #1
 801042a:	49a0      	ldr	r1, [pc, #640]	; (80106ac <make_smap+0x624>)
 801042c:	0112      	lsls	r2, r2, #4
 801042e:	4413      	add	r3, r2
 8010430:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010434:	4618      	mov	r0, r3
 8010436:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801043a:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 801043e:	6a3b      	ldr	r3, [r7, #32]
 8010440:	440b      	add	r3, r1
 8010442:	499a      	ldr	r1, [pc, #616]	; (80106ac <make_smap+0x624>)
 8010444:	0112      	lsls	r2, r2, #4
 8010446:	4413      	add	r3, r2
 8010448:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801044c:	461a      	mov	r2, r3
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	4413      	add	r3, r2
 8010452:	4298      	cmp	r0, r3
 8010454:	db1b      	blt.n	801048e <make_smap+0x406>
											smap[y][x+k+1] = smap[y][x+k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 8010456:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801045a:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 801045e:	6a3b      	ldr	r3, [r7, #32]
 8010460:	440b      	add	r3, r1
 8010462:	4992      	ldr	r1, [pc, #584]	; (80106ac <make_smap+0x624>)
 8010464:	0112      	lsls	r2, r2, #4
 8010466:	4413      	add	r3, r2
 8010468:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	b299      	uxth	r1, r3
 8010470:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010474:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8010478:	6a3b      	ldr	r3, [r7, #32]
 801047a:	4423      	add	r3, r4
 801047c:	3301      	adds	r3, #1
 801047e:	4401      	add	r1, r0
 8010480:	b288      	uxth	r0, r1
 8010482:	498a      	ldr	r1, [pc, #552]	; (80106ac <make_smap+0x624>)
 8010484:	0112      	lsls	r2, r2, #4
 8010486:	4413      	add	r3, r2
 8010488:	4602      	mov	r2, r0
 801048a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<16-x; k++) {					//a現在座標から見て東のマスすべてにおいて
 801048e:	6a3b      	ldr	r3, [r7, #32]
 8010490:	3301      	adds	r3, #1
 8010492:	623b      	str	r3, [r7, #32]
 8010494:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010498:	f1c3 0310 	rsb	r3, r3, #16
 801049c:	6a3a      	ldr	r2, [r7, #32]
 801049e:	429a      	cmp	r2, r3
 80104a0:	db8c      	blt.n	80103bc <make_smap+0x334>
								}
							}
						}
					}
					//----a南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//a南壁がなく現在最南端でないとき
 80104a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80104a6:	f003 0302 	and.w	r3, r3, #2
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	f040 80b1 	bne.w	8010612 <make_smap+0x58a>
 80104b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	f000 80ac 	beq.w	8010612 <make_smap+0x58a>
						if(smap[y-1][x] >= (smap[y][x]+turn)){	//a南側が記入後より大きいなら
 80104ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80104be:	1e5a      	subs	r2, r3, #1
 80104c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104c4:	4979      	ldr	r1, [pc, #484]	; (80106ac <make_smap+0x624>)
 80104c6:	0112      	lsls	r2, r2, #4
 80104c8:	4413      	add	r3, r2
 80104ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80104ce:	4618      	mov	r0, r3
 80104d0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80104d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104d8:	4974      	ldr	r1, [pc, #464]	; (80106ac <make_smap+0x624>)
 80104da:	0112      	lsls	r2, r2, #4
 80104dc:	4413      	add	r3, r2
 80104de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80104e2:	461a      	mov	r2, r3
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	4413      	add	r3, r2
 80104e8:	4298      	cmp	r0, r3
 80104ea:	f2c0 8092 	blt.w	8010612 <make_smap+0x58a>
							smap[y-1][x] = smap[y][x] + turn;	//a次の歩数を書き込む
 80104ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80104f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104f6:	496d      	ldr	r1, [pc, #436]	; (80106ac <make_smap+0x624>)
 80104f8:	0112      	lsls	r2, r2, #4
 80104fa:	4413      	add	r3, r2
 80104fc:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	b299      	uxth	r1, r3
 8010504:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010508:	1e5a      	subs	r2, r3, #1
 801050a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801050e:	4401      	add	r1, r0
 8010510:	b288      	uxth	r0, r1
 8010512:	4966      	ldr	r1, [pc, #408]	; (80106ac <make_smap+0x624>)
 8010514:	0112      	lsls	r2, r2, #4
 8010516:	4413      	add	r3, r2
 8010518:	4602      	mov	r2, r0
 801051a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 801051e:	4b62      	ldr	r3, [pc, #392]	; (80106a8 <make_smap+0x620>)
 8010520:	881b      	ldrh	r3, [r3, #0]
 8010522:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8010526:	b2db      	uxtb	r3, r3
 8010528:	2b00      	cmp	r3, #0
 801052a:	d072      	beq.n	8010612 <make_smap+0x58a>
								//----a直線優先処理----
								for(int k=1; k<y; k++) {						//a現在座標から見て南のマスすべてにおいて
 801052c:	2301      	movs	r3, #1
 801052e:	61fb      	str	r3, [r7, #28]
 8010530:	e06a      	b.n	8010608 <make_smap+0x580>
									m_temp_sample[k] = map[y-k][x];				//map配列からマップデータを取り出す
 8010532:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010536:	69fb      	ldr	r3, [r7, #28]
 8010538:	1ad2      	subs	r2, r2, r3
 801053a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801053e:	4959      	ldr	r1, [pc, #356]	; (80106a4 <make_smap+0x61c>)
 8010540:	0112      	lsls	r2, r2, #4
 8010542:	440a      	add	r2, r1
 8010544:	4413      	add	r3, r2
 8010546:	7819      	ldrb	r1, [r3, #0]
 8010548:	463a      	mov	r2, r7
 801054a:	69fb      	ldr	r3, [r7, #28]
 801054c:	4413      	add	r3, r2
 801054e:	460a      	mov	r2, r1
 8010550:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 8010552:	4b55      	ldr	r3, [pc, #340]	; (80106a8 <make_smap+0x620>)
 8010554:	881b      	ldrh	r3, [r3, #0]
 8010556:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801055a:	b2db      	uxtb	r3, r3
 801055c:	2b00      	cmp	r3, #0
 801055e:	d00a      	beq.n	8010576 <make_smap+0x4ee>
 8010560:	463a      	mov	r2, r7
 8010562:	69fb      	ldr	r3, [r7, #28]
 8010564:	4413      	add	r3, r2
 8010566:	781b      	ldrb	r3, [r3, #0]
 8010568:	091b      	lsrs	r3, r3, #4
 801056a:	b2d9      	uxtb	r1, r3
 801056c:	463a      	mov	r2, r7
 801056e:	69fb      	ldr	r3, [r7, #28]
 8010570:	4413      	add	r3, r2
 8010572:	460a      	mov	r2, r1
 8010574:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x02) && (y-k) != 0) {		//a南壁がなく現在最南端でないとき
 8010576:	463a      	mov	r2, r7
 8010578:	69fb      	ldr	r3, [r7, #28]
 801057a:	4413      	add	r3, r2
 801057c:	781b      	ldrb	r3, [r3, #0]
 801057e:	f003 0302 	and.w	r3, r3, #2
 8010582:	2b00      	cmp	r3, #0
 8010584:	d145      	bne.n	8010612 <make_smap+0x58a>
 8010586:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801058a:	69fa      	ldr	r2, [r7, #28]
 801058c:	429a      	cmp	r2, r3
 801058e:	d040      	beq.n	8010612 <make_smap+0x58a>
										if(smap[y-k-1][x] >= (smap[y-k][x]+straight)){		//a南側が記入後より大きいなら
 8010590:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010594:	69fb      	ldr	r3, [r7, #28]
 8010596:	1ad3      	subs	r3, r2, r3
 8010598:	1e5a      	subs	r2, r3, #1
 801059a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801059e:	4943      	ldr	r1, [pc, #268]	; (80106ac <make_smap+0x624>)
 80105a0:	0112      	lsls	r2, r2, #4
 80105a2:	4413      	add	r3, r2
 80105a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80105a8:	4618      	mov	r0, r3
 80105aa:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80105ae:	69fb      	ldr	r3, [r7, #28]
 80105b0:	1ad2      	subs	r2, r2, r3
 80105b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105b6:	493d      	ldr	r1, [pc, #244]	; (80106ac <make_smap+0x624>)
 80105b8:	0112      	lsls	r2, r2, #4
 80105ba:	4413      	add	r3, r2
 80105bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80105c0:	461a      	mov	r2, r3
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	4413      	add	r3, r2
 80105c6:	4298      	cmp	r0, r3
 80105c8:	db1b      	blt.n	8010602 <make_smap+0x57a>
											smap[y-k-1][x] = smap[y-k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 80105ca:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80105ce:	69fb      	ldr	r3, [r7, #28]
 80105d0:	1ad2      	subs	r2, r2, r3
 80105d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105d6:	4935      	ldr	r1, [pc, #212]	; (80106ac <make_smap+0x624>)
 80105d8:	0112      	lsls	r2, r2, #4
 80105da:	4413      	add	r3, r2
 80105dc:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80105e0:	697b      	ldr	r3, [r7, #20]
 80105e2:	b299      	uxth	r1, r3
 80105e4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80105e8:	69fb      	ldr	r3, [r7, #28]
 80105ea:	1ad3      	subs	r3, r2, r3
 80105ec:	1e5a      	subs	r2, r3, #1
 80105ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105f2:	4401      	add	r1, r0
 80105f4:	b288      	uxth	r0, r1
 80105f6:	492d      	ldr	r1, [pc, #180]	; (80106ac <make_smap+0x624>)
 80105f8:	0112      	lsls	r2, r2, #4
 80105fa:	4413      	add	r3, r2
 80105fc:	4602      	mov	r2, r0
 80105fe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<y; k++) {						//a現在座標から見て南のマスすべてにおいて
 8010602:	69fb      	ldr	r3, [r7, #28]
 8010604:	3301      	adds	r3, #1
 8010606:	61fb      	str	r3, [r7, #28]
 8010608:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801060c:	69fa      	ldr	r2, [r7, #28]
 801060e:	429a      	cmp	r2, r3
 8010610:	db8f      	blt.n	8010532 <make_smap+0x4aa>
								}
							}
						}
					}
					//----a西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//a西壁がなく現在最西端でないとき
 8010612:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010616:	f003 0301 	and.w	r3, r3, #1
 801061a:	2b00      	cmp	r3, #0
 801061c:	f040 80b8 	bne.w	8010790 <make_smap+0x708>
 8010620:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010624:	2b00      	cmp	r3, #0
 8010626:	f000 80b3 	beq.w	8010790 <make_smap+0x708>
						if(smap[y][x-1] >= (smap[y][x]+turn)){	//a西側が記入後より大きいなら
 801062a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801062e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010632:	3b01      	subs	r3, #1
 8010634:	491d      	ldr	r1, [pc, #116]	; (80106ac <make_smap+0x624>)
 8010636:	0112      	lsls	r2, r2, #4
 8010638:	4413      	add	r3, r2
 801063a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801063e:	4618      	mov	r0, r3
 8010640:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010644:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010648:	4918      	ldr	r1, [pc, #96]	; (80106ac <make_smap+0x624>)
 801064a:	0112      	lsls	r2, r2, #4
 801064c:	4413      	add	r3, r2
 801064e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010652:	461a      	mov	r2, r3
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	4413      	add	r3, r2
 8010658:	4298      	cmp	r0, r3
 801065a:	f2c0 8099 	blt.w	8010790 <make_smap+0x708>
							smap[y][x-1] = smap[y][x] + turn;	//a次の歩数を書き込む
 801065e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010662:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010666:	4911      	ldr	r1, [pc, #68]	; (80106ac <make_smap+0x624>)
 8010668:	0112      	lsls	r2, r2, #4
 801066a:	4413      	add	r3, r2
 801066c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	b299      	uxth	r1, r3
 8010674:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010678:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801067c:	3b01      	subs	r3, #1
 801067e:	4401      	add	r1, r0
 8010680:	b288      	uxth	r0, r1
 8010682:	490a      	ldr	r1, [pc, #40]	; (80106ac <make_smap+0x624>)
 8010684:	0112      	lsls	r2, r2, #4
 8010686:	4413      	add	r3, r2
 8010688:	4602      	mov	r2, r0
 801068a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 801068e:	4b06      	ldr	r3, [pc, #24]	; (80106a8 <make_smap+0x620>)
 8010690:	881b      	ldrh	r3, [r3, #0]
 8010692:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8010696:	b2db      	uxtb	r3, r3
 8010698:	2b00      	cmp	r3, #0
 801069a:	d079      	beq.n	8010790 <make_smap+0x708>
								//----a直線優先処理----
								for(int k=1; k<x; k++) {						//a現在座標から見て西のマスすべてにおいて
 801069c:	2301      	movs	r3, #1
 801069e:	61bb      	str	r3, [r7, #24]
 80106a0:	e071      	b.n	8010786 <make_smap+0x6fe>
 80106a2:	bf00      	nop
 80106a4:	200001ac 	.word	0x200001ac
 80106a8:	20000f68 	.word	0x20000f68
 80106ac:	20000d60 	.word	0x20000d60
									m_temp_sample[k] = map[y][x-k];				//map配列からマップデータを取り出す
 80106b0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80106b4:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80106b8:	69bb      	ldr	r3, [r7, #24]
 80106ba:	1acb      	subs	r3, r1, r3
 80106bc:	494c      	ldr	r1, [pc, #304]	; (80107f0 <make_smap+0x768>)
 80106be:	0112      	lsls	r2, r2, #4
 80106c0:	440a      	add	r2, r1
 80106c2:	4413      	add	r3, r2
 80106c4:	7819      	ldrb	r1, [r3, #0]
 80106c6:	463a      	mov	r2, r7
 80106c8:	69bb      	ldr	r3, [r7, #24]
 80106ca:	4413      	add	r3, r2
 80106cc:	460a      	mov	r2, r1
 80106ce:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 80106d0:	4b48      	ldr	r3, [pc, #288]	; (80107f4 <make_smap+0x76c>)
 80106d2:	881b      	ldrh	r3, [r3, #0]
 80106d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80106d8:	b2db      	uxtb	r3, r3
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d00a      	beq.n	80106f4 <make_smap+0x66c>
 80106de:	463a      	mov	r2, r7
 80106e0:	69bb      	ldr	r3, [r7, #24]
 80106e2:	4413      	add	r3, r2
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	091b      	lsrs	r3, r3, #4
 80106e8:	b2d9      	uxtb	r1, r3
 80106ea:	463a      	mov	r2, r7
 80106ec:	69bb      	ldr	r3, [r7, #24]
 80106ee:	4413      	add	r3, r2
 80106f0:	460a      	mov	r2, r1
 80106f2:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x01) && (x-k) != 0) {		//a西壁がなく現在最西端でないとき
 80106f4:	463a      	mov	r2, r7
 80106f6:	69bb      	ldr	r3, [r7, #24]
 80106f8:	4413      	add	r3, r2
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	f003 0301 	and.w	r3, r3, #1
 8010700:	2b00      	cmp	r3, #0
 8010702:	d145      	bne.n	8010790 <make_smap+0x708>
 8010704:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010708:	69ba      	ldr	r2, [r7, #24]
 801070a:	429a      	cmp	r2, r3
 801070c:	d040      	beq.n	8010790 <make_smap+0x708>
										if(smap[y][x-k-1] >= (smap[y][x-k]+straight)){		//a西側が記入後より大きいなら
 801070e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010712:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010716:	69bb      	ldr	r3, [r7, #24]
 8010718:	1acb      	subs	r3, r1, r3
 801071a:	3b01      	subs	r3, #1
 801071c:	4936      	ldr	r1, [pc, #216]	; (80107f8 <make_smap+0x770>)
 801071e:	0112      	lsls	r2, r2, #4
 8010720:	4413      	add	r3, r2
 8010722:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010726:	4618      	mov	r0, r3
 8010728:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801072c:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010730:	69bb      	ldr	r3, [r7, #24]
 8010732:	1acb      	subs	r3, r1, r3
 8010734:	4930      	ldr	r1, [pc, #192]	; (80107f8 <make_smap+0x770>)
 8010736:	0112      	lsls	r2, r2, #4
 8010738:	4413      	add	r3, r2
 801073a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801073e:	461a      	mov	r2, r3
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	4413      	add	r3, r2
 8010744:	4298      	cmp	r0, r3
 8010746:	db1b      	blt.n	8010780 <make_smap+0x6f8>
											smap[y][x-k-1] = smap[y][x-k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 8010748:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801074c:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010750:	69bb      	ldr	r3, [r7, #24]
 8010752:	1acb      	subs	r3, r1, r3
 8010754:	4928      	ldr	r1, [pc, #160]	; (80107f8 <make_smap+0x770>)
 8010756:	0112      	lsls	r2, r2, #4
 8010758:	4413      	add	r3, r2
 801075a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	b299      	uxth	r1, r3
 8010762:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010766:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 801076a:	69bb      	ldr	r3, [r7, #24]
 801076c:	1ae3      	subs	r3, r4, r3
 801076e:	3b01      	subs	r3, #1
 8010770:	4401      	add	r1, r0
 8010772:	b288      	uxth	r0, r1
 8010774:	4920      	ldr	r1, [pc, #128]	; (80107f8 <make_smap+0x770>)
 8010776:	0112      	lsls	r2, r2, #4
 8010778:	4413      	add	r3, r2
 801077a:	4602      	mov	r2, r0
 801077c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<x; k++) {						//a現在座標から見て西のマスすべてにおいて
 8010780:	69bb      	ldr	r3, [r7, #24]
 8010782:	3301      	adds	r3, #1
 8010784:	61bb      	str	r3, [r7, #24]
 8010786:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801078a:	69ba      	ldr	r2, [r7, #24]
 801078c:	429a      	cmp	r2, r3
 801078e:	db8f      	blt.n	80106b0 <make_smap+0x628>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 8010790:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010794:	3301      	adds	r3, #1
 8010796:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801079a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801079e:	2b0f      	cmp	r3, #15
 80107a0:	f67f acd4 	bls.w	801014c <make_smap+0xc4>
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 80107a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80107a8:	3301      	adds	r3, #1
 80107aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80107ae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80107b2:	2b0f      	cmp	r3, #15
 80107b4:	f67f acc6 	bls.w	8010144 <make_smap+0xbc>
					}
				}
			}
		}
		//====a歩数カウンタのインクリメント====
		m_step++;
 80107b8:	4b10      	ldr	r3, [pc, #64]	; (80107fc <make_smap+0x774>)
 80107ba:	881b      	ldrh	r3, [r3, #0]
 80107bc:	3301      	adds	r3, #1
 80107be:	b29a      	uxth	r2, r3
 80107c0:	4b0e      	ldr	r3, [pc, #56]	; (80107fc <make_smap+0x774>)
 80107c2:	801a      	strh	r2, [r3, #0]
	}while(smap[mouse.y][mouse.x] == 0x03e7);					//a現在座標が未記入ではなくなるまで実行
 80107c4:	4b0e      	ldr	r3, [pc, #56]	; (8010800 <make_smap+0x778>)
 80107c6:	785b      	ldrb	r3, [r3, #1]
 80107c8:	b2db      	uxtb	r3, r3
 80107ca:	4618      	mov	r0, r3
 80107cc:	4b0c      	ldr	r3, [pc, #48]	; (8010800 <make_smap+0x778>)
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	b2db      	uxtb	r3, r3
 80107d2:	4619      	mov	r1, r3
 80107d4:	4a08      	ldr	r2, [pc, #32]	; (80107f8 <make_smap+0x770>)
 80107d6:	0103      	lsls	r3, r0, #4
 80107d8:	440b      	add	r3, r1
 80107da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80107de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80107e2:	4293      	cmp	r3, r2
 80107e4:	f43f acaa 	beq.w	801013c <make_smap+0xb4>
}
 80107e8:	bf00      	nop
 80107ea:	373c      	adds	r7, #60	; 0x3c
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd90      	pop	{r4, r7, pc}
 80107f0:	200001ac 	.word	0x200001ac
 80107f4:	20000f68 	.word	0x20000f68
 80107f8:	20000d60 	.word	0x20000d60
 80107fc:	2000034e 	.word	0x2000034e
 8010800:	20000c0c 	.word	0x20000c0c

08010804 <make_route>:
//make_route
//a最短経路を導出する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 8010804:	b580      	push	{r7, lr}
 8010806:	b082      	sub	sp, #8
 8010808:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t x, y;												//X，Y座標
	uint8_t dir_temp =  mouse.dir;								//aマウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 801080a:	4ba6      	ldr	r3, [pc, #664]	; (8010aa4 <make_route+0x2a0>)
 801080c:	789b      	ldrb	r3, [r3, #2]
 801080e:	703b      	strb	r3, [r7, #0]

	//====a最短経路を初期化====
	uint16_t i;
	for(i = 0; i < 256; i++){
 8010810:	2300      	movs	r3, #0
 8010812:	80bb      	strh	r3, [r7, #4]
 8010814:	e006      	b.n	8010824 <make_route+0x20>
		route[i] = 0xff;										//routeを0xffで初期化
 8010816:	88bb      	ldrh	r3, [r7, #4]
 8010818:	4aa3      	ldr	r2, [pc, #652]	; (8010aa8 <make_route+0x2a4>)
 801081a:	21ff      	movs	r1, #255	; 0xff
 801081c:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 256; i++){
 801081e:	88bb      	ldrh	r3, [r7, #4]
 8010820:	3301      	adds	r3, #1
 8010822:	80bb      	strh	r3, [r7, #4]
 8010824:	88bb      	ldrh	r3, [r7, #4]
 8010826:	2bff      	cmp	r3, #255	; 0xff
 8010828:	d9f5      	bls.n	8010816 <make_route+0x12>
	}

	//====a歩数カウンタをセット====
	uint16_t m_step = smap[mouse.y][mouse.x];					//a現在座標の歩数マップ値を取得
 801082a:	4b9e      	ldr	r3, [pc, #632]	; (8010aa4 <make_route+0x2a0>)
 801082c:	785b      	ldrb	r3, [r3, #1]
 801082e:	b2db      	uxtb	r3, r3
 8010830:	4618      	mov	r0, r3
 8010832:	4b9c      	ldr	r3, [pc, #624]	; (8010aa4 <make_route+0x2a0>)
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	b2db      	uxtb	r3, r3
 8010838:	4619      	mov	r1, r3
 801083a:	4a9c      	ldr	r2, [pc, #624]	; (8010aac <make_route+0x2a8>)
 801083c:	0103      	lsls	r3, r0, #4
 801083e:	440b      	add	r3, r1
 8010840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010844:	807b      	strh	r3, [r7, #2]

	//====x, yに現在座標を書き込み====
	x = mouse.x;
 8010846:	4b97      	ldr	r3, [pc, #604]	; (8010aa4 <make_route+0x2a0>)
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	71fb      	strb	r3, [r7, #7]
	y = mouse.y;
 801084c:	4b95      	ldr	r3, [pc, #596]	; (8010aa4 <make_route+0x2a0>)
 801084e:	785b      	ldrb	r3, [r3, #1]
 8010850:	71bb      	strb	r3, [r7, #6]

	//====a最短経路を導出====
	if(pass_mode == 4){
 8010852:	4b97      	ldr	r3, [pc, #604]	; (8010ab0 <make_route+0x2ac>)
 8010854:	781b      	ldrb	r3, [r3, #0]
 8010856:	2b04      	cmp	r3, #4
 8010858:	d105      	bne.n	8010866 <make_route+0x62>
		route[0] = 0x77;
 801085a:	4b93      	ldr	r3, [pc, #588]	; (8010aa8 <make_route+0x2a4>)
 801085c:	2277      	movs	r2, #119	; 0x77
 801085e:	701a      	strb	r2, [r3, #0]
		i = 1;
 8010860:	2301      	movs	r3, #1
 8010862:	80bb      	strh	r3, [r7, #4]
 8010864:	e001      	b.n	801086a <make_route+0x66>
	}else{
		i = 0;
 8010866:	2300      	movs	r3, #0
 8010868:	80bb      	strh	r3, [r7, #4]
	}

	do{
		uint8_t m_temp = map[y][x];								//a比較用マップ情報の格納
 801086a:	79ba      	ldrb	r2, [r7, #6]
 801086c:	79fb      	ldrb	r3, [r7, #7]
 801086e:	4991      	ldr	r1, [pc, #580]	; (8010ab4 <make_route+0x2b0>)
 8010870:	0112      	lsls	r2, r2, #4
 8010872:	440a      	add	r2, r1
 8010874:	4413      	add	r3, r2
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	707b      	strb	r3, [r7, #1]
		if(MF.FLAG.SCND){										//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 801087a:	4b8f      	ldr	r3, [pc, #572]	; (8010ab8 <make_route+0x2b4>)
 801087c:	881b      	ldrh	r3, [r3, #0]
 801087e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010882:	b2db      	uxtb	r3, r3
 8010884:	2b00      	cmp	r3, #0
 8010886:	d002      	beq.n	801088e <make_route+0x8a>
			m_temp >>= 4;										//a上位4bitを使うので4bit分右にシフトさせる
 8010888:	787b      	ldrb	r3, [r7, #1]
 801088a:	091b      	lsrs	r3, r3, #4
 801088c:	707b      	strb	r3, [r7, #1]
		}
		//----a北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//a北側に壁が無く、現在地より小さい歩数マップ値であれば
 801088e:	787b      	ldrb	r3, [r7, #1]
 8010890:	f003 0308 	and.w	r3, r3, #8
 8010894:	2b00      	cmp	r3, #0
 8010896:	d122      	bne.n	80108de <make_route+0xda>
 8010898:	79bb      	ldrb	r3, [r7, #6]
 801089a:	1c5a      	adds	r2, r3, #1
 801089c:	79fb      	ldrb	r3, [r7, #7]
 801089e:	4983      	ldr	r1, [pc, #524]	; (8010aac <make_route+0x2a8>)
 80108a0:	0112      	lsls	r2, r2, #4
 80108a2:	4413      	add	r3, r2
 80108a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80108a8:	887a      	ldrh	r2, [r7, #2]
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d917      	bls.n	80108de <make_route+0xda>
			route[i] = (0x00 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 80108ae:	4b7d      	ldr	r3, [pc, #500]	; (8010aa4 <make_route+0x2a0>)
 80108b0:	789b      	ldrb	r3, [r3, #2]
 80108b2:	b2db      	uxtb	r3, r3
 80108b4:	425b      	negs	r3, r3
 80108b6:	b2da      	uxtb	r2, r3
 80108b8:	88bb      	ldrh	r3, [r7, #4]
 80108ba:	f002 0203 	and.w	r2, r2, #3
 80108be:	b2d1      	uxtb	r1, r2
 80108c0:	4a79      	ldr	r2, [pc, #484]	; (8010aa8 <make_route+0x2a4>)
 80108c2:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//a最大歩数マップ値を更新
 80108c4:	79bb      	ldrb	r3, [r7, #6]
 80108c6:	1c5a      	adds	r2, r3, #1
 80108c8:	79fb      	ldrb	r3, [r7, #7]
 80108ca:	4978      	ldr	r1, [pc, #480]	; (8010aac <make_route+0x2a8>)
 80108cc:	0112      	lsls	r2, r2, #4
 80108ce:	4413      	add	r3, r2
 80108d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80108d4:	807b      	strh	r3, [r7, #2]
			y++;												//a北に進んだのでY座標をインクリメント
 80108d6:	79bb      	ldrb	r3, [r7, #6]
 80108d8:	3301      	adds	r3, #1
 80108da:	71bb      	strb	r3, [r7, #6]
 80108dc:	e079      	b.n	80109d2 <make_route+0x1ce>
		}
		//----a東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//a東側に壁が無く、現在地より小さい歩数マップ値であれば
 80108de:	787b      	ldrb	r3, [r7, #1]
 80108e0:	f003 0304 	and.w	r3, r3, #4
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d123      	bne.n	8010930 <make_route+0x12c>
 80108e8:	79ba      	ldrb	r2, [r7, #6]
 80108ea:	79fb      	ldrb	r3, [r7, #7]
 80108ec:	3301      	adds	r3, #1
 80108ee:	496f      	ldr	r1, [pc, #444]	; (8010aac <make_route+0x2a8>)
 80108f0:	0112      	lsls	r2, r2, #4
 80108f2:	4413      	add	r3, r2
 80108f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80108f8:	887a      	ldrh	r2, [r7, #2]
 80108fa:	429a      	cmp	r2, r3
 80108fc:	d918      	bls.n	8010930 <make_route+0x12c>
			route[i] = (0x01 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 80108fe:	4b69      	ldr	r3, [pc, #420]	; (8010aa4 <make_route+0x2a0>)
 8010900:	789b      	ldrb	r3, [r3, #2]
 8010902:	b2db      	uxtb	r3, r3
 8010904:	f1c3 0301 	rsb	r3, r3, #1
 8010908:	b2da      	uxtb	r2, r3
 801090a:	88bb      	ldrh	r3, [r7, #4]
 801090c:	f002 0203 	and.w	r2, r2, #3
 8010910:	b2d1      	uxtb	r1, r2
 8010912:	4a65      	ldr	r2, [pc, #404]	; (8010aa8 <make_route+0x2a4>)
 8010914:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//a最大歩数マップ値を更新
 8010916:	79ba      	ldrb	r2, [r7, #6]
 8010918:	79fb      	ldrb	r3, [r7, #7]
 801091a:	3301      	adds	r3, #1
 801091c:	4963      	ldr	r1, [pc, #396]	; (8010aac <make_route+0x2a8>)
 801091e:	0112      	lsls	r2, r2, #4
 8010920:	4413      	add	r3, r2
 8010922:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010926:	807b      	strh	r3, [r7, #2]
			x++;												//a東に進んだのでX座標をインクリメント
 8010928:	79fb      	ldrb	r3, [r7, #7]
 801092a:	3301      	adds	r3, #1
 801092c:	71fb      	strb	r3, [r7, #7]
 801092e:	e050      	b.n	80109d2 <make_route+0x1ce>
		}
		//----a南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//a南側に壁が無く、現在地より小さい歩数マップ値であれば
 8010930:	787b      	ldrb	r3, [r7, #1]
 8010932:	f003 0302 	and.w	r3, r3, #2
 8010936:	2b00      	cmp	r3, #0
 8010938:	d123      	bne.n	8010982 <make_route+0x17e>
 801093a:	79bb      	ldrb	r3, [r7, #6]
 801093c:	1e5a      	subs	r2, r3, #1
 801093e:	79fb      	ldrb	r3, [r7, #7]
 8010940:	495a      	ldr	r1, [pc, #360]	; (8010aac <make_route+0x2a8>)
 8010942:	0112      	lsls	r2, r2, #4
 8010944:	4413      	add	r3, r2
 8010946:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801094a:	887a      	ldrh	r2, [r7, #2]
 801094c:	429a      	cmp	r2, r3
 801094e:	d918      	bls.n	8010982 <make_route+0x17e>
			route[i] = (0x02 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 8010950:	4b54      	ldr	r3, [pc, #336]	; (8010aa4 <make_route+0x2a0>)
 8010952:	789b      	ldrb	r3, [r3, #2]
 8010954:	b2db      	uxtb	r3, r3
 8010956:	f1c3 0302 	rsb	r3, r3, #2
 801095a:	b2da      	uxtb	r2, r3
 801095c:	88bb      	ldrh	r3, [r7, #4]
 801095e:	f002 0203 	and.w	r2, r2, #3
 8010962:	b2d1      	uxtb	r1, r2
 8010964:	4a50      	ldr	r2, [pc, #320]	; (8010aa8 <make_route+0x2a4>)
 8010966:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//a最大歩数マップ値を更新
 8010968:	79bb      	ldrb	r3, [r7, #6]
 801096a:	1e5a      	subs	r2, r3, #1
 801096c:	79fb      	ldrb	r3, [r7, #7]
 801096e:	494f      	ldr	r1, [pc, #316]	; (8010aac <make_route+0x2a8>)
 8010970:	0112      	lsls	r2, r2, #4
 8010972:	4413      	add	r3, r2
 8010974:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010978:	807b      	strh	r3, [r7, #2]
			y--;												//a南に進んだのでY座標をデクリメント
 801097a:	79bb      	ldrb	r3, [r7, #6]
 801097c:	3b01      	subs	r3, #1
 801097e:	71bb      	strb	r3, [r7, #6]
 8010980:	e027      	b.n	80109d2 <make_route+0x1ce>
		}
		//----a西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//a西側に壁が無く、現在地より小さい歩数マップ値であれば
 8010982:	787b      	ldrb	r3, [r7, #1]
 8010984:	f003 0301 	and.w	r3, r3, #1
 8010988:	2b00      	cmp	r3, #0
 801098a:	d122      	bne.n	80109d2 <make_route+0x1ce>
 801098c:	79ba      	ldrb	r2, [r7, #6]
 801098e:	79fb      	ldrb	r3, [r7, #7]
 8010990:	3b01      	subs	r3, #1
 8010992:	4946      	ldr	r1, [pc, #280]	; (8010aac <make_route+0x2a8>)
 8010994:	0112      	lsls	r2, r2, #4
 8010996:	4413      	add	r3, r2
 8010998:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801099c:	887a      	ldrh	r2, [r7, #2]
 801099e:	429a      	cmp	r2, r3
 80109a0:	d917      	bls.n	80109d2 <make_route+0x1ce>
			route[i] = (0x03 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 80109a2:	4b40      	ldr	r3, [pc, #256]	; (8010aa4 <make_route+0x2a0>)
 80109a4:	789b      	ldrb	r3, [r3, #2]
 80109a6:	b2db      	uxtb	r3, r3
 80109a8:	f1c3 0303 	rsb	r3, r3, #3
 80109ac:	b2da      	uxtb	r2, r3
 80109ae:	88bb      	ldrh	r3, [r7, #4]
 80109b0:	f002 0203 	and.w	r2, r2, #3
 80109b4:	b2d1      	uxtb	r1, r2
 80109b6:	4a3c      	ldr	r2, [pc, #240]	; (8010aa8 <make_route+0x2a4>)
 80109b8:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//a最大歩数マップ値を更新
 80109ba:	79ba      	ldrb	r2, [r7, #6]
 80109bc:	79fb      	ldrb	r3, [r7, #7]
 80109be:	3b01      	subs	r3, #1
 80109c0:	493a      	ldr	r1, [pc, #232]	; (8010aac <make_route+0x2a8>)
 80109c2:	0112      	lsls	r2, r2, #4
 80109c4:	4413      	add	r3, r2
 80109c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80109ca:	807b      	strh	r3, [r7, #2]
			x--;												//a西に進んだのでX座標をデクリメント
 80109cc:	79fb      	ldrb	r3, [r7, #7]
 80109ce:	3b01      	subs	r3, #1
 80109d0:	71fb      	strb	r3, [r7, #7]
				y--;												//a南に進んだのでY座標をデクリメント
			}*/

		}
		//----a格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 80109d2:	88bb      	ldrh	r3, [r7, #4]
 80109d4:	4a34      	ldr	r2, [pc, #208]	; (8010aa8 <make_route+0x2a4>)
 80109d6:	5cd3      	ldrb	r3, [r2, r3]
 80109d8:	2b03      	cmp	r3, #3
 80109da:	d83c      	bhi.n	8010a56 <make_route+0x252>
 80109dc:	a201      	add	r2, pc, #4	; (adr r2, 80109e4 <make_route+0x1e0>)
 80109de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109e2:	bf00      	nop
 80109e4:	080109f5 	.word	0x080109f5
 80109e8:	08010a21 	.word	0x08010a21
 80109ec:	08010a33 	.word	0x08010a33
 80109f0:	08010a45 	.word	0x08010a45
		case 0x00:												//a前進する場合
			if(pass_mode < 3){
 80109f4:	4b2e      	ldr	r3, [pc, #184]	; (8010ab0 <make_route+0x2ac>)
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	2b02      	cmp	r3, #2
 80109fa:	d804      	bhi.n	8010a06 <make_route+0x202>
				route[i] = 0x88;									//a格納データ形式を変更
 80109fc:	88bb      	ldrh	r3, [r7, #4]
 80109fe:	4a2a      	ldr	r2, [pc, #168]	; (8010aa8 <make_route+0x2a4>)
 8010a00:	2188      	movs	r1, #136	; 0x88
 8010a02:	54d1      	strb	r1, [r2, r3]
			}else{
				route[i] = 0x77;
				route[i+1] = 0x77;
				i++;
			}
			break;
 8010a04:	e02c      	b.n	8010a60 <make_route+0x25c>
				route[i] = 0x77;
 8010a06:	88bb      	ldrh	r3, [r7, #4]
 8010a08:	4a27      	ldr	r2, [pc, #156]	; (8010aa8 <make_route+0x2a4>)
 8010a0a:	2177      	movs	r1, #119	; 0x77
 8010a0c:	54d1      	strb	r1, [r2, r3]
				route[i+1] = 0x77;
 8010a0e:	88bb      	ldrh	r3, [r7, #4]
 8010a10:	3301      	adds	r3, #1
 8010a12:	4a25      	ldr	r2, [pc, #148]	; (8010aa8 <make_route+0x2a4>)
 8010a14:	2177      	movs	r1, #119	; 0x77
 8010a16:	54d1      	strb	r1, [r2, r3]
				i++;
 8010a18:	88bb      	ldrh	r3, [r7, #4]
 8010a1a:	3301      	adds	r3, #1
 8010a1c:	80bb      	strh	r3, [r7, #4]
			break;
 8010a1e:	e01f      	b.n	8010a60 <make_route+0x25c>
		case 0x01:												//a右折する場合
			turn_dir(DIR_TURN_R90, 0);							//a内部情報の方向を90度右回転
 8010a20:	2100      	movs	r1, #0
 8010a22:	2001      	movs	r0, #1
 8010a24:	f7ff fa64 	bl	800fef0 <turn_dir>
			route[i] = 0x44;									//a格納データ形式を変更
 8010a28:	88bb      	ldrh	r3, [r7, #4]
 8010a2a:	4a1f      	ldr	r2, [pc, #124]	; (8010aa8 <make_route+0x2a4>)
 8010a2c:	2144      	movs	r1, #68	; 0x44
 8010a2e:	54d1      	strb	r1, [r2, r3]
			break;
 8010a30:	e016      	b.n	8010a60 <make_route+0x25c>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180, 0);							//a内部情報の方向を180度回転
 8010a32:	2100      	movs	r1, #0
 8010a34:	2002      	movs	r0, #2
 8010a36:	f7ff fa5b 	bl	800fef0 <turn_dir>
			route[i] = 0x22;									//a格納データ形式を変更
 8010a3a:	88bb      	ldrh	r3, [r7, #4]
 8010a3c:	4a1a      	ldr	r2, [pc, #104]	; (8010aa8 <make_route+0x2a4>)
 8010a3e:	2122      	movs	r1, #34	; 0x22
 8010a40:	54d1      	strb	r1, [r2, r3]
			break;
 8010a42:	e00d      	b.n	8010a60 <make_route+0x25c>
		case 0x03:												//a左折する場合
			turn_dir(DIR_TURN_L90, 0);							//a内部情報の方向を90度左回転
 8010a44:	2100      	movs	r1, #0
 8010a46:	20ff      	movs	r0, #255	; 0xff
 8010a48:	f7ff fa52 	bl	800fef0 <turn_dir>
			route[i] = 0x11;									//a格納データ形式を変更
 8010a4c:	88bb      	ldrh	r3, [r7, #4]
 8010a4e:	4a16      	ldr	r2, [pc, #88]	; (8010aa8 <make_route+0x2a4>)
 8010a50:	2111      	movs	r1, #17
 8010a52:	54d1      	strb	r1, [r2, r3]
			break;
 8010a54:	e004      	b.n	8010a60 <make_route+0x25c>
		default:												//aそれ以外の場合
			route[i] = 0x00;									//a格納データ形式を変更
 8010a56:	88bb      	ldrh	r3, [r7, #4]
 8010a58:	4a13      	ldr	r2, [pc, #76]	; (8010aa8 <make_route+0x2a4>)
 8010a5a:	2100      	movs	r1, #0
 8010a5c:	54d1      	strb	r1, [r2, r3]
			break;
 8010a5e:	bf00      	nop
		}
		i++;													//aカウンタをインクリメント
 8010a60:	88bb      	ldrh	r3, [r7, #4]
 8010a62:	3301      	adds	r3, #1
 8010a64:	80bb      	strh	r3, [r7, #4]
	}while(smap[y][x] != 0);									//a進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 8010a66:	79ba      	ldrb	r2, [r7, #6]
 8010a68:	79fb      	ldrb	r3, [r7, #7]
 8010a6a:	4910      	ldr	r1, [pc, #64]	; (8010aac <make_route+0x2a8>)
 8010a6c:	0112      	lsls	r2, r2, #4
 8010a6e:	4413      	add	r3, r2
 8010a70:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	f47f aef8 	bne.w	801086a <make_route+0x66>

	if(MF.FLAG.SCND){
 8010a7a:	4b0f      	ldr	r3, [pc, #60]	; (8010ab8 <make_route+0x2b4>)
 8010a7c:	881b      	ldrh	r3, [r3, #0]
 8010a7e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010a82:	b2db      	uxtb	r3, r3
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d005      	beq.n	8010a94 <make_route+0x290>
		goal_x = x;
 8010a88:	4a0c      	ldr	r2, [pc, #48]	; (8010abc <make_route+0x2b8>)
 8010a8a:	79fb      	ldrb	r3, [r7, #7]
 8010a8c:	7013      	strb	r3, [r2, #0]
		goal_y = y;												//a二次走行でgoal後自己座標をgoal座標にするのでその時用
 8010a8e:	4a0c      	ldr	r2, [pc, #48]	; (8010ac0 <make_route+0x2bc>)
 8010a90:	79bb      	ldrb	r3, [r7, #6]
 8010a92:	7013      	strb	r3, [r2, #0]
	}
	mouse.dir = dir_temp;										//dir_tempに退避させた値をmouse.dirにリストア
 8010a94:	4a03      	ldr	r2, [pc, #12]	; (8010aa4 <make_route+0x2a0>)
 8010a96:	783b      	ldrb	r3, [r7, #0]
 8010a98:	7093      	strb	r3, [r2, #2]
}
 8010a9a:	bf00      	nop
 8010a9c:	3708      	adds	r7, #8
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}
 8010aa2:	bf00      	nop
 8010aa4:	20000c0c 	.word	0x20000c0c
 8010aa8:	20000c54 	.word	0x20000c54
 8010aac:	20000d60 	.word	0x20000d60
 8010ab0:	20000457 	.word	0x20000457
 8010ab4:	200001ac 	.word	0x200001ac
 8010ab8:	20000f68 	.word	0x20000f68
 8010abc:	20000bb0 	.word	0x20000bb0
 8010ac0:	20000b4c 	.word	0x20000b4c

08010ac4 <find_pregoal>:
//	未探索壁を含む＆現在座標から最も近いマス(=仮goal)を探す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void find_pregoal()
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b085      	sub	sp, #20
 8010ac8:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持
	//uint8_t m_temp_sample[16];
	uint8_t break_flag = 0;													//未知壁マスを見つけた時のループ脱出フラグ
 8010aca:	2300      	movs	r3, #0
 8010acc:	737b      	strb	r3, [r7, #13]

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8010ace:	2300      	movs	r3, #0
 8010ad0:	73bb      	strb	r3, [r7, #14]
 8010ad2:	e014      	b.n	8010afe <find_pregoal+0x3a>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	73fb      	strb	r3, [r7, #15]
 8010ad8:	e00b      	b.n	8010af2 <find_pregoal+0x2e>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 8010ada:	7bba      	ldrb	r2, [r7, #14]
 8010adc:	7bfb      	ldrb	r3, [r7, #15]
 8010ade:	49a0      	ldr	r1, [pc, #640]	; (8010d60 <find_pregoal+0x29c>)
 8010ae0:	0112      	lsls	r2, r2, #4
 8010ae2:	4413      	add	r3, r2
 8010ae4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010ae8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010aec:	7bfb      	ldrb	r3, [r7, #15]
 8010aee:	3301      	adds	r3, #1
 8010af0:	73fb      	strb	r3, [r7, #15]
 8010af2:	7bfb      	ldrb	r3, [r7, #15]
 8010af4:	2b0f      	cmp	r3, #15
 8010af6:	d9f0      	bls.n	8010ada <find_pregoal+0x16>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8010af8:	7bbb      	ldrb	r3, [r7, #14]
 8010afa:	3301      	adds	r3, #1
 8010afc:	73bb      	strb	r3, [r7, #14]
 8010afe:	7bbb      	ldrb	r3, [r7, #14]
 8010b00:	2b0f      	cmp	r3, #15
 8010b02:	d9e7      	bls.n	8010ad4 <find_pregoal+0x10>
		}
	}

	//====探索完了フラグのクリア====
	MF2.FLAG.ALLMAP = 0;
 8010b04:	4a97      	ldr	r2, [pc, #604]	; (8010d64 <find_pregoal+0x2a0>)
 8010b06:	8813      	ldrh	r3, [r2, #0]
 8010b08:	f36f 0382 	bfc	r3, #2, #1
 8010b0c:	8013      	strh	r3, [r2, #0]

	//====現在座標を0にする====
	smap[mouse.y][mouse.x] = 0;
 8010b0e:	4b96      	ldr	r3, [pc, #600]	; (8010d68 <find_pregoal+0x2a4>)
 8010b10:	785b      	ldrb	r3, [r3, #1]
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	4618      	mov	r0, r3
 8010b16:	4b94      	ldr	r3, [pc, #592]	; (8010d68 <find_pregoal+0x2a4>)
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	4619      	mov	r1, r3
 8010b1e:	4a90      	ldr	r2, [pc, #576]	; (8010d60 <find_pregoal+0x29c>)
 8010b20:	0103      	lsls	r3, r0, #4
 8010b22:	440b      	add	r3, r1
 8010b24:	2100      	movs	r1, #0
 8010b26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 8010b2a:	4b90      	ldr	r3, [pc, #576]	; (8010d6c <find_pregoal+0x2a8>)
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 8010b30:	2303      	movs	r3, #3
 8010b32:	60bb      	str	r3, [r7, #8]
	int turn = 1;
 8010b34:	2301      	movs	r3, #1
 8010b36:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 8010b38:	2300      	movs	r3, #0
 8010b3a:	73bb      	strb	r3, [r7, #14]
 8010b3c:	e180      	b.n	8010e40 <find_pregoal+0x37c>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8010b3e:	2300      	movs	r3, #0
 8010b40:	73fb      	strb	r3, [r7, #15]
 8010b42:	e173      	b.n	8010e2c <find_pregoal+0x368>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 8010b44:	7bba      	ldrb	r2, [r7, #14]
 8010b46:	7bfb      	ldrb	r3, [r7, #15]
 8010b48:	4985      	ldr	r1, [pc, #532]	; (8010d60 <find_pregoal+0x29c>)
 8010b4a:	0112      	lsls	r2, r2, #4
 8010b4c:	4413      	add	r3, r2
 8010b4e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010b52:	4b86      	ldr	r3, [pc, #536]	; (8010d6c <find_pregoal+0x2a8>)
 8010b54:	881b      	ldrh	r3, [r3, #0]
 8010b56:	429a      	cmp	r2, r3
 8010b58:	f040 8165 	bne.w	8010e26 <find_pregoal+0x362>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 8010b5c:	7bba      	ldrb	r2, [r7, #14]
 8010b5e:	7bfb      	ldrb	r3, [r7, #15]
 8010b60:	4983      	ldr	r1, [pc, #524]	; (8010d70 <find_pregoal+0x2ac>)
 8010b62:	0112      	lsls	r2, r2, #4
 8010b64:	440a      	add	r2, r1
 8010b66:	4413      	add	r3, r2
 8010b68:	781b      	ldrb	r3, [r3, #0]
 8010b6a:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 8010b6c:	78fb      	ldrb	r3, [r7, #3]
 8010b6e:	f003 0308 	and.w	r3, r3, #8
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d14d      	bne.n	8010c12 <find_pregoal+0x14e>
 8010b76:	7bbb      	ldrb	r3, [r7, #14]
 8010b78:	2b0f      	cmp	r3, #15
 8010b7a:	d04a      	beq.n	8010c12 <find_pregoal+0x14e>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 8010b7c:	7bbb      	ldrb	r3, [r7, #14]
 8010b7e:	1c5a      	adds	r2, r3, #1
 8010b80:	7bfb      	ldrb	r3, [r7, #15]
 8010b82:	4977      	ldr	r1, [pc, #476]	; (8010d60 <find_pregoal+0x29c>)
 8010b84:	0112      	lsls	r2, r2, #4
 8010b86:	4413      	add	r3, r2
 8010b88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010b8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010b90:	4293      	cmp	r3, r2
 8010b92:	d13e      	bne.n	8010c12 <find_pregoal+0x14e>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010b94:	7bba      	ldrb	r2, [r7, #14]
 8010b96:	7bfb      	ldrb	r3, [r7, #15]
 8010b98:	4971      	ldr	r1, [pc, #452]	; (8010d60 <find_pregoal+0x29c>)
 8010b9a:	0112      	lsls	r2, r2, #4
 8010b9c:	4413      	add	r3, r2
 8010b9e:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	b299      	uxth	r1, r3
 8010ba6:	7bbb      	ldrb	r3, [r7, #14]
 8010ba8:	1c5a      	adds	r2, r3, #1
 8010baa:	7bfb      	ldrb	r3, [r7, #15]
 8010bac:	4401      	add	r1, r0
 8010bae:	b288      	uxth	r0, r1
 8010bb0:	496b      	ldr	r1, [pc, #428]	; (8010d60 <find_pregoal+0x29c>)
 8010bb2:	0112      	lsls	r2, r2, #4
 8010bb4:	4413      	add	r3, r2
 8010bb6:	4602      	mov	r2, r0
 8010bb8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y + 1][x] & 0x0f ) << 4) != (map[y + 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8010bbc:	7bbb      	ldrb	r3, [r7, #14]
 8010bbe:	1c5a      	adds	r2, r3, #1
 8010bc0:	7bfb      	ldrb	r3, [r7, #15]
 8010bc2:	496b      	ldr	r1, [pc, #428]	; (8010d70 <find_pregoal+0x2ac>)
 8010bc4:	0112      	lsls	r2, r2, #4
 8010bc6:	440a      	add	r2, r1
 8010bc8:	4413      	add	r3, r2
 8010bca:	781b      	ldrb	r3, [r3, #0]
 8010bcc:	011b      	lsls	r3, r3, #4
 8010bce:	b2da      	uxtb	r2, r3
 8010bd0:	7bbb      	ldrb	r3, [r7, #14]
 8010bd2:	1c59      	adds	r1, r3, #1
 8010bd4:	7bfb      	ldrb	r3, [r7, #15]
 8010bd6:	4866      	ldr	r0, [pc, #408]	; (8010d70 <find_pregoal+0x2ac>)
 8010bd8:	0109      	lsls	r1, r1, #4
 8010bda:	4401      	add	r1, r0
 8010bdc:	440b      	add	r3, r1
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010be4:	429a      	cmp	r2, r3
 8010be6:	d014      	beq.n	8010c12 <find_pregoal+0x14e>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8010be8:	2301      	movs	r3, #1
 8010bea:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y + 1][x];					//仮goalの歩数を記録
 8010bec:	7bbb      	ldrb	r3, [r7, #14]
 8010bee:	1c5a      	adds	r2, r3, #1
 8010bf0:	7bfb      	ldrb	r3, [r7, #15]
 8010bf2:	495b      	ldr	r1, [pc, #364]	; (8010d60 <find_pregoal+0x29c>)
 8010bf4:	0112      	lsls	r2, r2, #4
 8010bf6:	4413      	add	r3, r2
 8010bf8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010bfc:	4b5d      	ldr	r3, [pc, #372]	; (8010d74 <find_pregoal+0x2b0>)
 8010bfe:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 8010c00:	4a5d      	ldr	r2, [pc, #372]	; (8010d78 <find_pregoal+0x2b4>)
 8010c02:	7bfb      	ldrb	r3, [r7, #15]
 8010c04:	7013      	strb	r3, [r2, #0]
								pregoal_y = y + 1;							//仮goalの座標を記録
 8010c06:	7bbb      	ldrb	r3, [r7, #14]
 8010c08:	3301      	adds	r3, #1
 8010c0a:	b2da      	uxtb	r2, r3
 8010c0c:	4b5b      	ldr	r3, [pc, #364]	; (8010d7c <find_pregoal+0x2b8>)
 8010c0e:	701a      	strb	r2, [r3, #0]
								break;
 8010c10:	e110      	b.n	8010e34 <find_pregoal+0x370>
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 8010c12:	78fb      	ldrb	r3, [r7, #3]
 8010c14:	f003 0304 	and.w	r3, r3, #4
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d14d      	bne.n	8010cb8 <find_pregoal+0x1f4>
 8010c1c:	7bfb      	ldrb	r3, [r7, #15]
 8010c1e:	2b0f      	cmp	r3, #15
 8010c20:	d04a      	beq.n	8010cb8 <find_pregoal+0x1f4>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 8010c22:	7bba      	ldrb	r2, [r7, #14]
 8010c24:	7bfb      	ldrb	r3, [r7, #15]
 8010c26:	3301      	adds	r3, #1
 8010c28:	494d      	ldr	r1, [pc, #308]	; (8010d60 <find_pregoal+0x29c>)
 8010c2a:	0112      	lsls	r2, r2, #4
 8010c2c:	4413      	add	r3, r2
 8010c2e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010c32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d13e      	bne.n	8010cb8 <find_pregoal+0x1f4>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010c3a:	7bba      	ldrb	r2, [r7, #14]
 8010c3c:	7bfb      	ldrb	r3, [r7, #15]
 8010c3e:	4948      	ldr	r1, [pc, #288]	; (8010d60 <find_pregoal+0x29c>)
 8010c40:	0112      	lsls	r2, r2, #4
 8010c42:	4413      	add	r3, r2
 8010c44:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	b299      	uxth	r1, r3
 8010c4c:	7bba      	ldrb	r2, [r7, #14]
 8010c4e:	7bfb      	ldrb	r3, [r7, #15]
 8010c50:	3301      	adds	r3, #1
 8010c52:	4401      	add	r1, r0
 8010c54:	b288      	uxth	r0, r1
 8010c56:	4942      	ldr	r1, [pc, #264]	; (8010d60 <find_pregoal+0x29c>)
 8010c58:	0112      	lsls	r2, r2, #4
 8010c5a:	4413      	add	r3, r2
 8010c5c:	4602      	mov	r2, r0
 8010c5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x + 1] & 0x0f) << 4) != (map[y][x + 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8010c62:	7bba      	ldrb	r2, [r7, #14]
 8010c64:	7bfb      	ldrb	r3, [r7, #15]
 8010c66:	3301      	adds	r3, #1
 8010c68:	4941      	ldr	r1, [pc, #260]	; (8010d70 <find_pregoal+0x2ac>)
 8010c6a:	0112      	lsls	r2, r2, #4
 8010c6c:	440a      	add	r2, r1
 8010c6e:	4413      	add	r3, r2
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	011b      	lsls	r3, r3, #4
 8010c74:	b2da      	uxtb	r2, r3
 8010c76:	7bb9      	ldrb	r1, [r7, #14]
 8010c78:	7bfb      	ldrb	r3, [r7, #15]
 8010c7a:	3301      	adds	r3, #1
 8010c7c:	483c      	ldr	r0, [pc, #240]	; (8010d70 <find_pregoal+0x2ac>)
 8010c7e:	0109      	lsls	r1, r1, #4
 8010c80:	4401      	add	r1, r0
 8010c82:	440b      	add	r3, r1
 8010c84:	781b      	ldrb	r3, [r3, #0]
 8010c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d014      	beq.n	8010cb8 <find_pregoal+0x1f4>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8010c8e:	2301      	movs	r3, #1
 8010c90:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x + 1];					//仮ゴールの歩数を記録
 8010c92:	7bba      	ldrb	r2, [r7, #14]
 8010c94:	7bfb      	ldrb	r3, [r7, #15]
 8010c96:	3301      	adds	r3, #1
 8010c98:	4931      	ldr	r1, [pc, #196]	; (8010d60 <find_pregoal+0x29c>)
 8010c9a:	0112      	lsls	r2, r2, #4
 8010c9c:	4413      	add	r3, r2
 8010c9e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010ca2:	4b34      	ldr	r3, [pc, #208]	; (8010d74 <find_pregoal+0x2b0>)
 8010ca4:	801a      	strh	r2, [r3, #0]
								pregoal_x = x + 1;
 8010ca6:	7bfb      	ldrb	r3, [r7, #15]
 8010ca8:	3301      	adds	r3, #1
 8010caa:	b2da      	uxtb	r2, r3
 8010cac:	4b32      	ldr	r3, [pc, #200]	; (8010d78 <find_pregoal+0x2b4>)
 8010cae:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 8010cb0:	4a32      	ldr	r2, [pc, #200]	; (8010d7c <find_pregoal+0x2b8>)
 8010cb2:	7bbb      	ldrb	r3, [r7, #14]
 8010cb4:	7013      	strb	r3, [r2, #0]
								break;
 8010cb6:	e0bd      	b.n	8010e34 <find_pregoal+0x370>
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 8010cb8:	78fb      	ldrb	r3, [r7, #3]
 8010cba:	f003 0302 	and.w	r3, r3, #2
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d15e      	bne.n	8010d80 <find_pregoal+0x2bc>
 8010cc2:	7bbb      	ldrb	r3, [r7, #14]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d05b      	beq.n	8010d80 <find_pregoal+0x2bc>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 8010cc8:	7bbb      	ldrb	r3, [r7, #14]
 8010cca:	1e5a      	subs	r2, r3, #1
 8010ccc:	7bfb      	ldrb	r3, [r7, #15]
 8010cce:	4924      	ldr	r1, [pc, #144]	; (8010d60 <find_pregoal+0x29c>)
 8010cd0:	0112      	lsls	r2, r2, #4
 8010cd2:	4413      	add	r3, r2
 8010cd4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010cd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d14f      	bne.n	8010d80 <find_pregoal+0x2bc>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010ce0:	7bba      	ldrb	r2, [r7, #14]
 8010ce2:	7bfb      	ldrb	r3, [r7, #15]
 8010ce4:	491e      	ldr	r1, [pc, #120]	; (8010d60 <find_pregoal+0x29c>)
 8010ce6:	0112      	lsls	r2, r2, #4
 8010ce8:	4413      	add	r3, r2
 8010cea:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	b299      	uxth	r1, r3
 8010cf2:	7bbb      	ldrb	r3, [r7, #14]
 8010cf4:	1e5a      	subs	r2, r3, #1
 8010cf6:	7bfb      	ldrb	r3, [r7, #15]
 8010cf8:	4401      	add	r1, r0
 8010cfa:	b288      	uxth	r0, r1
 8010cfc:	4918      	ldr	r1, [pc, #96]	; (8010d60 <find_pregoal+0x29c>)
 8010cfe:	0112      	lsls	r2, r2, #4
 8010d00:	4413      	add	r3, r2
 8010d02:	4602      	mov	r2, r0
 8010d04:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y - 1][x] & 0x0f) << 4) != (map[y - 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8010d08:	7bbb      	ldrb	r3, [r7, #14]
 8010d0a:	1e5a      	subs	r2, r3, #1
 8010d0c:	7bfb      	ldrb	r3, [r7, #15]
 8010d0e:	4918      	ldr	r1, [pc, #96]	; (8010d70 <find_pregoal+0x2ac>)
 8010d10:	0112      	lsls	r2, r2, #4
 8010d12:	440a      	add	r2, r1
 8010d14:	4413      	add	r3, r2
 8010d16:	781b      	ldrb	r3, [r3, #0]
 8010d18:	011b      	lsls	r3, r3, #4
 8010d1a:	b2da      	uxtb	r2, r3
 8010d1c:	7bbb      	ldrb	r3, [r7, #14]
 8010d1e:	1e59      	subs	r1, r3, #1
 8010d20:	7bfb      	ldrb	r3, [r7, #15]
 8010d22:	4813      	ldr	r0, [pc, #76]	; (8010d70 <find_pregoal+0x2ac>)
 8010d24:	0109      	lsls	r1, r1, #4
 8010d26:	4401      	add	r1, r0
 8010d28:	440b      	add	r3, r1
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d025      	beq.n	8010d80 <find_pregoal+0x2bc>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8010d34:	2301      	movs	r3, #1
 8010d36:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y - 1][x];					//仮ゴールの歩数を記録
 8010d38:	7bbb      	ldrb	r3, [r7, #14]
 8010d3a:	1e5a      	subs	r2, r3, #1
 8010d3c:	7bfb      	ldrb	r3, [r7, #15]
 8010d3e:	4908      	ldr	r1, [pc, #32]	; (8010d60 <find_pregoal+0x29c>)
 8010d40:	0112      	lsls	r2, r2, #4
 8010d42:	4413      	add	r3, r2
 8010d44:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010d48:	4b0a      	ldr	r3, [pc, #40]	; (8010d74 <find_pregoal+0x2b0>)
 8010d4a:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 8010d4c:	4a0a      	ldr	r2, [pc, #40]	; (8010d78 <find_pregoal+0x2b4>)
 8010d4e:	7bfb      	ldrb	r3, [r7, #15]
 8010d50:	7013      	strb	r3, [r2, #0]
								pregoal_y = y - 1;							//仮goalの座標を記録
 8010d52:	7bbb      	ldrb	r3, [r7, #14]
 8010d54:	3b01      	subs	r3, #1
 8010d56:	b2da      	uxtb	r2, r3
 8010d58:	4b08      	ldr	r3, [pc, #32]	; (8010d7c <find_pregoal+0x2b8>)
 8010d5a:	701a      	strb	r2, [r3, #0]
								break;
 8010d5c:	e06a      	b.n	8010e34 <find_pregoal+0x370>
 8010d5e:	bf00      	nop
 8010d60:	20000d60 	.word	0x20000d60
 8010d64:	20000f64 	.word	0x20000f64
 8010d68:	20000c0c 	.word	0x20000c0c
 8010d6c:	2000034e 	.word	0x2000034e
 8010d70:	200001ac 	.word	0x200001ac
 8010d74:	20000c04 	.word	0x20000c04
 8010d78:	20000d5c 	.word	0x20000d5c
 8010d7c:	200012a1 	.word	0x200012a1
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 8010d80:	78fb      	ldrb	r3, [r7, #3]
 8010d82:	f003 0301 	and.w	r3, r3, #1
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d14d      	bne.n	8010e26 <find_pregoal+0x362>
 8010d8a:	7bfb      	ldrb	r3, [r7, #15]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d04a      	beq.n	8010e26 <find_pregoal+0x362>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 8010d90:	7bba      	ldrb	r2, [r7, #14]
 8010d92:	7bfb      	ldrb	r3, [r7, #15]
 8010d94:	3b01      	subs	r3, #1
 8010d96:	493e      	ldr	r1, [pc, #248]	; (8010e90 <find_pregoal+0x3cc>)
 8010d98:	0112      	lsls	r2, r2, #4
 8010d9a:	4413      	add	r3, r2
 8010d9c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010da0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d13e      	bne.n	8010e26 <find_pregoal+0x362>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 8010da8:	7bba      	ldrb	r2, [r7, #14]
 8010daa:	7bfb      	ldrb	r3, [r7, #15]
 8010dac:	4938      	ldr	r1, [pc, #224]	; (8010e90 <find_pregoal+0x3cc>)
 8010dae:	0112      	lsls	r2, r2, #4
 8010db0:	4413      	add	r3, r2
 8010db2:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	b299      	uxth	r1, r3
 8010dba:	7bba      	ldrb	r2, [r7, #14]
 8010dbc:	7bfb      	ldrb	r3, [r7, #15]
 8010dbe:	3b01      	subs	r3, #1
 8010dc0:	4401      	add	r1, r0
 8010dc2:	b288      	uxth	r0, r1
 8010dc4:	4932      	ldr	r1, [pc, #200]	; (8010e90 <find_pregoal+0x3cc>)
 8010dc6:	0112      	lsls	r2, r2, #4
 8010dc8:	4413      	add	r3, r2
 8010dca:	4602      	mov	r2, r0
 8010dcc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x - 1] & 0x0f) << 4) != (map[y][x - 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8010dd0:	7bba      	ldrb	r2, [r7, #14]
 8010dd2:	7bfb      	ldrb	r3, [r7, #15]
 8010dd4:	3b01      	subs	r3, #1
 8010dd6:	492f      	ldr	r1, [pc, #188]	; (8010e94 <find_pregoal+0x3d0>)
 8010dd8:	0112      	lsls	r2, r2, #4
 8010dda:	440a      	add	r2, r1
 8010ddc:	4413      	add	r3, r2
 8010dde:	781b      	ldrb	r3, [r3, #0]
 8010de0:	011b      	lsls	r3, r3, #4
 8010de2:	b2da      	uxtb	r2, r3
 8010de4:	7bb9      	ldrb	r1, [r7, #14]
 8010de6:	7bfb      	ldrb	r3, [r7, #15]
 8010de8:	3b01      	subs	r3, #1
 8010dea:	482a      	ldr	r0, [pc, #168]	; (8010e94 <find_pregoal+0x3d0>)
 8010dec:	0109      	lsls	r1, r1, #4
 8010dee:	4401      	add	r1, r0
 8010df0:	440b      	add	r3, r1
 8010df2:	781b      	ldrb	r3, [r3, #0]
 8010df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	d014      	beq.n	8010e26 <find_pregoal+0x362>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x - 1];					//仮ゴールの歩数を記録
 8010e00:	7bba      	ldrb	r2, [r7, #14]
 8010e02:	7bfb      	ldrb	r3, [r7, #15]
 8010e04:	3b01      	subs	r3, #1
 8010e06:	4922      	ldr	r1, [pc, #136]	; (8010e90 <find_pregoal+0x3cc>)
 8010e08:	0112      	lsls	r2, r2, #4
 8010e0a:	4413      	add	r3, r2
 8010e0c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010e10:	4b21      	ldr	r3, [pc, #132]	; (8010e98 <find_pregoal+0x3d4>)
 8010e12:	801a      	strh	r2, [r3, #0]
								pregoal_x = x - 1;
 8010e14:	7bfb      	ldrb	r3, [r7, #15]
 8010e16:	3b01      	subs	r3, #1
 8010e18:	b2da      	uxtb	r2, r3
 8010e1a:	4b20      	ldr	r3, [pc, #128]	; (8010e9c <find_pregoal+0x3d8>)
 8010e1c:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 8010e1e:	4a20      	ldr	r2, [pc, #128]	; (8010ea0 <find_pregoal+0x3dc>)
 8010e20:	7bbb      	ldrb	r3, [r7, #14]
 8010e22:	7013      	strb	r3, [r2, #0]
								break;							}
 8010e24:	e006      	b.n	8010e34 <find_pregoal+0x370>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8010e26:	7bfb      	ldrb	r3, [r7, #15]
 8010e28:	3301      	adds	r3, #1
 8010e2a:	73fb      	strb	r3, [r7, #15]
 8010e2c:	7bfb      	ldrb	r3, [r7, #15]
 8010e2e:	2b0f      	cmp	r3, #15
 8010e30:	f67f ae88 	bls.w	8010b44 <find_pregoal+0x80>
						}
					}
				}
			}
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 8010e34:	7b7b      	ldrb	r3, [r7, #13]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d107      	bne.n	8010e4a <find_pregoal+0x386>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 8010e3a:	7bbb      	ldrb	r3, [r7, #14]
 8010e3c:	3301      	adds	r3, #1
 8010e3e:	73bb      	strb	r3, [r7, #14]
 8010e40:	7bbb      	ldrb	r3, [r7, #14]
 8010e42:	2b0f      	cmp	r3, #15
 8010e44:	f67f ae7b 	bls.w	8010b3e <find_pregoal+0x7a>
 8010e48:	e000      	b.n	8010e4c <find_pregoal+0x388>
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 8010e4a:	bf00      	nop
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 8010e4c:	4b15      	ldr	r3, [pc, #84]	; (8010ea4 <find_pregoal+0x3e0>)
 8010e4e:	881b      	ldrh	r3, [r3, #0]
 8010e50:	3301      	adds	r3, #1
 8010e52:	b29a      	uxth	r2, r3
 8010e54:	4b13      	ldr	r3, [pc, #76]	; (8010ea4 <find_pregoal+0x3e0>)
 8010e56:	801a      	strh	r2, [r3, #0]
		if(m_step > 500) MF2.FLAG.ALLMAP = 1;
 8010e58:	4b12      	ldr	r3, [pc, #72]	; (8010ea4 <find_pregoal+0x3e0>)
 8010e5a:	881b      	ldrh	r3, [r3, #0]
 8010e5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010e60:	d904      	bls.n	8010e6c <find_pregoal+0x3a8>
 8010e62:	4a11      	ldr	r2, [pc, #68]	; (8010ea8 <find_pregoal+0x3e4>)
 8010e64:	8813      	ldrh	r3, [r2, #0]
 8010e66:	f043 0304 	orr.w	r3, r3, #4
 8010e6a:	8013      	strh	r3, [r2, #0]
	} while(break_flag == 0 && MF2.FLAG.ALLMAP != 1);		//未探索壁ありマスを見つけるまで実行
 8010e6c:	7b7b      	ldrb	r3, [r7, #13]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d107      	bne.n	8010e82 <find_pregoal+0x3be>
 8010e72:	4b0d      	ldr	r3, [pc, #52]	; (8010ea8 <find_pregoal+0x3e4>)
 8010e74:	881b      	ldrh	r3, [r3, #0]
 8010e76:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	2b01      	cmp	r3, #1
 8010e7e:	f47f ae5b 	bne.w	8010b38 <find_pregoal+0x74>
}
 8010e82:	bf00      	nop
 8010e84:	3714      	adds	r7, #20
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr
 8010e8e:	bf00      	nop
 8010e90:	20000d60 	.word	0x20000d60
 8010e94:	200001ac 	.word	0x200001ac
 8010e98:	20000c04 	.word	0x20000c04
 8010e9c:	20000d5c 	.word	0x20000d5c
 8010ea0:	200012a1 	.word	0x200012a1
 8010ea4:	2000034e 	.word	0x2000034e
 8010ea8:	20000f64 	.word	0x20000f64

08010eac <make_smap2>:
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap2()
{
 8010eac:	b480      	push	{r7}
 8010eae:	b085      	sub	sp, #20
 8010eb0:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	73bb      	strb	r3, [r7, #14]
 8010eb6:	e014      	b.n	8010ee2 <make_smap2+0x36>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010eb8:	2300      	movs	r3, #0
 8010eba:	73fb      	strb	r3, [r7, #15]
 8010ebc:	e00b      	b.n	8010ed6 <make_smap2+0x2a>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 8010ebe:	7bba      	ldrb	r2, [r7, #14]
 8010ec0:	7bfb      	ldrb	r3, [r7, #15]
 8010ec2:	4986      	ldr	r1, [pc, #536]	; (80110dc <make_smap2+0x230>)
 8010ec4:	0112      	lsls	r2, r2, #4
 8010ec6:	4413      	add	r3, r2
 8010ec8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010ecc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010ed0:	7bfb      	ldrb	r3, [r7, #15]
 8010ed2:	3301      	adds	r3, #1
 8010ed4:	73fb      	strb	r3, [r7, #15]
 8010ed6:	7bfb      	ldrb	r3, [r7, #15]
 8010ed8:	2b0f      	cmp	r3, #15
 8010eda:	d9f0      	bls.n	8010ebe <make_smap2+0x12>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8010edc:	7bbb      	ldrb	r3, [r7, #14]
 8010ede:	3301      	adds	r3, #1
 8010ee0:	73bb      	strb	r3, [r7, #14]
 8010ee2:	7bbb      	ldrb	r3, [r7, #14]
 8010ee4:	2b0f      	cmp	r3, #15
 8010ee6:	d9e7      	bls.n	8010eb8 <make_smap2+0xc>
		}
	}

	//====仮ゴール座標を0にする====
	smap[pregoal_y][pregoal_x] = 0;
 8010ee8:	4b7d      	ldr	r3, [pc, #500]	; (80110e0 <make_smap2+0x234>)
 8010eea:	781b      	ldrb	r3, [r3, #0]
 8010eec:	4618      	mov	r0, r3
 8010eee:	4b7d      	ldr	r3, [pc, #500]	; (80110e4 <make_smap2+0x238>)
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	4a79      	ldr	r2, [pc, #484]	; (80110dc <make_smap2+0x230>)
 8010ef6:	0103      	lsls	r3, r0, #4
 8010ef8:	440b      	add	r3, r1
 8010efa:	2100      	movs	r1, #0
 8010efc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 8010f00:	4b79      	ldr	r3, [pc, #484]	; (80110e8 <make_smap2+0x23c>)
 8010f02:	2200      	movs	r2, #0
 8010f04:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 8010f06:	2303      	movs	r3, #3
 8010f08:	60bb      	str	r3, [r7, #8]
	int turn = 5;
 8010f0a:	2305      	movs	r3, #5
 8010f0c:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 8010f0e:	2300      	movs	r3, #0
 8010f10:	73bb      	strb	r3, [r7, #14]
 8010f12:	e0c0      	b.n	8011096 <make_smap2+0x1ea>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8010f14:	2300      	movs	r3, #0
 8010f16:	73fb      	strb	r3, [r7, #15]
 8010f18:	e0b6      	b.n	8011088 <make_smap2+0x1dc>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 8010f1a:	7bba      	ldrb	r2, [r7, #14]
 8010f1c:	7bfb      	ldrb	r3, [r7, #15]
 8010f1e:	496f      	ldr	r1, [pc, #444]	; (80110dc <make_smap2+0x230>)
 8010f20:	0112      	lsls	r2, r2, #4
 8010f22:	4413      	add	r3, r2
 8010f24:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010f28:	4b6f      	ldr	r3, [pc, #444]	; (80110e8 <make_smap2+0x23c>)
 8010f2a:	881b      	ldrh	r3, [r3, #0]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	f040 80a8 	bne.w	8011082 <make_smap2+0x1d6>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 8010f32:	7bba      	ldrb	r2, [r7, #14]
 8010f34:	7bfb      	ldrb	r3, [r7, #15]
 8010f36:	496d      	ldr	r1, [pc, #436]	; (80110ec <make_smap2+0x240>)
 8010f38:	0112      	lsls	r2, r2, #4
 8010f3a:	440a      	add	r2, r1
 8010f3c:	4413      	add	r3, r2
 8010f3e:	781b      	ldrb	r3, [r3, #0]
 8010f40:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 8010f42:	78fb      	ldrb	r3, [r7, #3]
 8010f44:	f003 0308 	and.w	r3, r3, #8
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d122      	bne.n	8010f92 <make_smap2+0xe6>
 8010f4c:	7bbb      	ldrb	r3, [r7, #14]
 8010f4e:	2b0f      	cmp	r3, #15
 8010f50:	d01f      	beq.n	8010f92 <make_smap2+0xe6>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 8010f52:	7bbb      	ldrb	r3, [r7, #14]
 8010f54:	1c5a      	adds	r2, r3, #1
 8010f56:	7bfb      	ldrb	r3, [r7, #15]
 8010f58:	4960      	ldr	r1, [pc, #384]	; (80110dc <make_smap2+0x230>)
 8010f5a:	0112      	lsls	r2, r2, #4
 8010f5c:	4413      	add	r3, r2
 8010f5e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010f62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010f66:	4293      	cmp	r3, r2
 8010f68:	d113      	bne.n	8010f92 <make_smap2+0xe6>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010f6a:	7bba      	ldrb	r2, [r7, #14]
 8010f6c:	7bfb      	ldrb	r3, [r7, #15]
 8010f6e:	495b      	ldr	r1, [pc, #364]	; (80110dc <make_smap2+0x230>)
 8010f70:	0112      	lsls	r2, r2, #4
 8010f72:	4413      	add	r3, r2
 8010f74:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	b299      	uxth	r1, r3
 8010f7c:	7bbb      	ldrb	r3, [r7, #14]
 8010f7e:	1c5a      	adds	r2, r3, #1
 8010f80:	7bfb      	ldrb	r3, [r7, #15]
 8010f82:	4401      	add	r1, r0
 8010f84:	b288      	uxth	r0, r1
 8010f86:	4955      	ldr	r1, [pc, #340]	; (80110dc <make_smap2+0x230>)
 8010f88:	0112      	lsls	r2, r2, #4
 8010f8a:	4413      	add	r3, r2
 8010f8c:	4602      	mov	r2, r0
 8010f8e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 8010f92:	78fb      	ldrb	r3, [r7, #3]
 8010f94:	f003 0304 	and.w	r3, r3, #4
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d122      	bne.n	8010fe2 <make_smap2+0x136>
 8010f9c:	7bfb      	ldrb	r3, [r7, #15]
 8010f9e:	2b0f      	cmp	r3, #15
 8010fa0:	d01f      	beq.n	8010fe2 <make_smap2+0x136>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 8010fa2:	7bba      	ldrb	r2, [r7, #14]
 8010fa4:	7bfb      	ldrb	r3, [r7, #15]
 8010fa6:	3301      	adds	r3, #1
 8010fa8:	494c      	ldr	r1, [pc, #304]	; (80110dc <make_smap2+0x230>)
 8010faa:	0112      	lsls	r2, r2, #4
 8010fac:	4413      	add	r3, r2
 8010fae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010fb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d113      	bne.n	8010fe2 <make_smap2+0x136>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010fba:	7bba      	ldrb	r2, [r7, #14]
 8010fbc:	7bfb      	ldrb	r3, [r7, #15]
 8010fbe:	4947      	ldr	r1, [pc, #284]	; (80110dc <make_smap2+0x230>)
 8010fc0:	0112      	lsls	r2, r2, #4
 8010fc2:	4413      	add	r3, r2
 8010fc4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	b299      	uxth	r1, r3
 8010fcc:	7bba      	ldrb	r2, [r7, #14]
 8010fce:	7bfb      	ldrb	r3, [r7, #15]
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	4401      	add	r1, r0
 8010fd4:	b288      	uxth	r0, r1
 8010fd6:	4941      	ldr	r1, [pc, #260]	; (80110dc <make_smap2+0x230>)
 8010fd8:	0112      	lsls	r2, r2, #4
 8010fda:	4413      	add	r3, r2
 8010fdc:	4602      	mov	r2, r0
 8010fde:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 8010fe2:	78fb      	ldrb	r3, [r7, #3]
 8010fe4:	f003 0302 	and.w	r3, r3, #2
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d122      	bne.n	8011032 <make_smap2+0x186>
 8010fec:	7bbb      	ldrb	r3, [r7, #14]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d01f      	beq.n	8011032 <make_smap2+0x186>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 8010ff2:	7bbb      	ldrb	r3, [r7, #14]
 8010ff4:	1e5a      	subs	r2, r3, #1
 8010ff6:	7bfb      	ldrb	r3, [r7, #15]
 8010ff8:	4938      	ldr	r1, [pc, #224]	; (80110dc <make_smap2+0x230>)
 8010ffa:	0112      	lsls	r2, r2, #4
 8010ffc:	4413      	add	r3, r2
 8010ffe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011002:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011006:	4293      	cmp	r3, r2
 8011008:	d113      	bne.n	8011032 <make_smap2+0x186>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 801100a:	7bba      	ldrb	r2, [r7, #14]
 801100c:	7bfb      	ldrb	r3, [r7, #15]
 801100e:	4933      	ldr	r1, [pc, #204]	; (80110dc <make_smap2+0x230>)
 8011010:	0112      	lsls	r2, r2, #4
 8011012:	4413      	add	r3, r2
 8011014:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	b299      	uxth	r1, r3
 801101c:	7bbb      	ldrb	r3, [r7, #14]
 801101e:	1e5a      	subs	r2, r3, #1
 8011020:	7bfb      	ldrb	r3, [r7, #15]
 8011022:	4401      	add	r1, r0
 8011024:	b288      	uxth	r0, r1
 8011026:	492d      	ldr	r1, [pc, #180]	; (80110dc <make_smap2+0x230>)
 8011028:	0112      	lsls	r2, r2, #4
 801102a:	4413      	add	r3, r2
 801102c:	4602      	mov	r2, r0
 801102e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 8011032:	78fb      	ldrb	r3, [r7, #3]
 8011034:	f003 0301 	and.w	r3, r3, #1
 8011038:	2b00      	cmp	r3, #0
 801103a:	d122      	bne.n	8011082 <make_smap2+0x1d6>
 801103c:	7bfb      	ldrb	r3, [r7, #15]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d01f      	beq.n	8011082 <make_smap2+0x1d6>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 8011042:	7bba      	ldrb	r2, [r7, #14]
 8011044:	7bfb      	ldrb	r3, [r7, #15]
 8011046:	3b01      	subs	r3, #1
 8011048:	4924      	ldr	r1, [pc, #144]	; (80110dc <make_smap2+0x230>)
 801104a:	0112      	lsls	r2, r2, #4
 801104c:	4413      	add	r3, r2
 801104e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011052:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011056:	4293      	cmp	r3, r2
 8011058:	d113      	bne.n	8011082 <make_smap2+0x1d6>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 801105a:	7bba      	ldrb	r2, [r7, #14]
 801105c:	7bfb      	ldrb	r3, [r7, #15]
 801105e:	491f      	ldr	r1, [pc, #124]	; (80110dc <make_smap2+0x230>)
 8011060:	0112      	lsls	r2, r2, #4
 8011062:	4413      	add	r3, r2
 8011064:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	b299      	uxth	r1, r3
 801106c:	7bba      	ldrb	r2, [r7, #14]
 801106e:	7bfb      	ldrb	r3, [r7, #15]
 8011070:	3b01      	subs	r3, #1
 8011072:	4401      	add	r1, r0
 8011074:	b288      	uxth	r0, r1
 8011076:	4919      	ldr	r1, [pc, #100]	; (80110dc <make_smap2+0x230>)
 8011078:	0112      	lsls	r2, r2, #4
 801107a:	4413      	add	r3, r2
 801107c:	4602      	mov	r2, r0
 801107e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8011082:	7bfb      	ldrb	r3, [r7, #15]
 8011084:	3301      	adds	r3, #1
 8011086:	73fb      	strb	r3, [r7, #15]
 8011088:	7bfb      	ldrb	r3, [r7, #15]
 801108a:	2b0f      	cmp	r3, #15
 801108c:	f67f af45 	bls.w	8010f1a <make_smap2+0x6e>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 8011090:	7bbb      	ldrb	r3, [r7, #14]
 8011092:	3301      	adds	r3, #1
 8011094:	73bb      	strb	r3, [r7, #14]
 8011096:	7bbb      	ldrb	r3, [r7, #14]
 8011098:	2b0f      	cmp	r3, #15
 801109a:	f67f af3b 	bls.w	8010f14 <make_smap2+0x68>
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 801109e:	4b12      	ldr	r3, [pc, #72]	; (80110e8 <make_smap2+0x23c>)
 80110a0:	881b      	ldrh	r3, [r3, #0]
 80110a2:	3301      	adds	r3, #1
 80110a4:	b29a      	uxth	r2, r3
 80110a6:	4b10      	ldr	r3, [pc, #64]	; (80110e8 <make_smap2+0x23c>)
 80110a8:	801a      	strh	r2, [r3, #0]
	} while (smap[mouse.y][mouse.x] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
 80110aa:	4b11      	ldr	r3, [pc, #68]	; (80110f0 <make_smap2+0x244>)
 80110ac:	785b      	ldrb	r3, [r3, #1]
 80110ae:	b2db      	uxtb	r3, r3
 80110b0:	4618      	mov	r0, r3
 80110b2:	4b0f      	ldr	r3, [pc, #60]	; (80110f0 <make_smap2+0x244>)
 80110b4:	781b      	ldrb	r3, [r3, #0]
 80110b6:	b2db      	uxtb	r3, r3
 80110b8:	4619      	mov	r1, r3
 80110ba:	4a08      	ldr	r2, [pc, #32]	; (80110dc <make_smap2+0x230>)
 80110bc:	0103      	lsls	r3, r0, #4
 80110be:	440b      	add	r3, r1
 80110c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80110c8:	4293      	cmp	r3, r2
 80110ca:	f43f af20 	beq.w	8010f0e <make_smap2+0x62>
}
 80110ce:	bf00      	nop
 80110d0:	3714      	adds	r7, #20
 80110d2:	46bd      	mov	sp, r7
 80110d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop
 80110dc:	20000d60 	.word	0x20000d60
 80110e0:	200012a1 	.word	0x200012a1
 80110e4:	20000d5c 	.word	0x20000d5c
 80110e8:	2000034e 	.word	0x2000034e
 80110ec:	200001ac 	.word	0x200001ac
 80110f0:	20000c0c 	.word	0x20000c0c

080110f4 <pass_route2>:
//pass_route2
// route配列をpass圧縮する(半区画ベース)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route2(void){
 80110f4:	b480      	push	{r7}
 80110f6:	b083      	sub	sp, #12
 80110f8:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 80110fa:	2300      	movs	r3, #0
 80110fc:	70fb      	strb	r3, [r7, #3]
	for(i = 0; i < 256; i++){
 80110fe:	2300      	movs	r3, #0
 8011100:	607b      	str	r3, [r7, #4]
 8011102:	e007      	b.n	8011114 <pass_route2+0x20>
		pass[i] = 0;								//pass配列の初期化
 8011104:	4a83      	ldr	r2, [pc, #524]	; (8011314 <pass_route2+0x220>)
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	4413      	add	r3, r2
 801110a:	2200      	movs	r2, #0
 801110c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	3301      	adds	r3, #1
 8011112:	607b      	str	r3, [r7, #4]
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2bff      	cmp	r3, #255	; 0xff
 8011118:	ddf4      	ble.n	8011104 <pass_route2+0x10>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 801111a:	2300      	movs	r3, #0
 801111c:	70bb      	strb	r3, [r7, #2]
	i = 0;
 801111e:	2300      	movs	r3, #0
 8011120:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 8011122:	2300      	movs	r3, #0
 8011124:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 8011126:	e0e8      	b.n	80112fa <pass_route2+0x206>
		s = 0;
 8011128:	2300      	movs	r3, #0
 801112a:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x44){
 801112c:	4a7a      	ldr	r2, [pc, #488]	; (8011318 <pass_route2+0x224>)
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	4413      	add	r3, r2
 8011132:	781b      	ldrb	r3, [r3, #0]
 8011134:	2b44      	cmp	r3, #68	; 0x44
 8011136:	d107      	bne.n	8011148 <pass_route2+0x54>
			pass[p] = -1;							//a右スラローム
 8011138:	78bb      	ldrb	r3, [r7, #2]
 801113a:	4a76      	ldr	r2, [pc, #472]	; (8011314 <pass_route2+0x220>)
 801113c:	21ff      	movs	r1, #255	; 0xff
 801113e:	54d1      	strb	r1, [r2, r3]
			i++;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	3301      	adds	r3, #1
 8011144:	607b      	str	r3, [r7, #4]
 8011146:	e0d5      	b.n	80112f4 <pass_route2+0x200>
		}else if(route[i] == 0x11){
 8011148:	4a73      	ldr	r2, [pc, #460]	; (8011318 <pass_route2+0x224>)
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	4413      	add	r3, r2
 801114e:	781b      	ldrb	r3, [r3, #0]
 8011150:	2b11      	cmp	r3, #17
 8011152:	d107      	bne.n	8011164 <pass_route2+0x70>
			pass[p] = -2;							//a左スラローム
 8011154:	78bb      	ldrb	r3, [r7, #2]
 8011156:	4a6f      	ldr	r2, [pc, #444]	; (8011314 <pass_route2+0x220>)
 8011158:	21fe      	movs	r1, #254	; 0xfe
 801115a:	54d1      	strb	r1, [r2, r3]
			i++;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	3301      	adds	r3, #1
 8011160:	607b      	str	r3, [r7, #4]
 8011162:	e0c7      	b.n	80112f4 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 8011164:	4a6c      	ldr	r2, [pc, #432]	; (8011318 <pass_route2+0x224>)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	4413      	add	r3, r2
 801116a:	781b      	ldrb	r3, [r3, #0]
 801116c:	2b77      	cmp	r3, #119	; 0x77
 801116e:	d115      	bne.n	801119c <pass_route2+0xa8>
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	3301      	adds	r3, #1
 8011174:	4a68      	ldr	r2, [pc, #416]	; (8011318 <pass_route2+0x224>)
 8011176:	5cd3      	ldrb	r3, [r2, r3]
 8011178:	2b44      	cmp	r3, #68	; 0x44
 801117a:	d10f      	bne.n	801119c <pass_route2+0xa8>
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	3302      	adds	r3, #2
 8011180:	4a65      	ldr	r2, [pc, #404]	; (8011318 <pass_route2+0x224>)
 8011182:	5cd3      	ldrb	r3, [r2, r3]
 8011184:	2b77      	cmp	r3, #119	; 0x77
 8011186:	d109      	bne.n	801119c <pass_route2+0xa8>
			s_flag = 0;
 8011188:	2300      	movs	r3, #0
 801118a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右スラローム
 801118c:	78bb      	ldrb	r3, [r7, #2]
 801118e:	4a61      	ldr	r2, [pc, #388]	; (8011314 <pass_route2+0x220>)
 8011190:	21fd      	movs	r1, #253	; 0xfd
 8011192:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	3303      	adds	r3, #3
 8011198:	607b      	str	r3, [r7, #4]
 801119a:	e0ab      	b.n	80112f4 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 801119c:	4a5e      	ldr	r2, [pc, #376]	; (8011318 <pass_route2+0x224>)
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	4413      	add	r3, r2
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	2b77      	cmp	r3, #119	; 0x77
 80111a6:	d115      	bne.n	80111d4 <pass_route2+0xe0>
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	3301      	adds	r3, #1
 80111ac:	4a5a      	ldr	r2, [pc, #360]	; (8011318 <pass_route2+0x224>)
 80111ae:	5cd3      	ldrb	r3, [r2, r3]
 80111b0:	2b11      	cmp	r3, #17
 80111b2:	d10f      	bne.n	80111d4 <pass_route2+0xe0>
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	3302      	adds	r3, #2
 80111b8:	4a57      	ldr	r2, [pc, #348]	; (8011318 <pass_route2+0x224>)
 80111ba:	5cd3      	ldrb	r3, [r2, r3]
 80111bc:	2b77      	cmp	r3, #119	; 0x77
 80111be:	d109      	bne.n	80111d4 <pass_route2+0xe0>
			s_flag = 0;
 80111c0:	2300      	movs	r3, #0
 80111c2:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左スラローム
 80111c4:	78bb      	ldrb	r3, [r7, #2]
 80111c6:	4a53      	ldr	r2, [pc, #332]	; (8011314 <pass_route2+0x220>)
 80111c8:	21fc      	movs	r1, #252	; 0xfc
 80111ca:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	3303      	adds	r3, #3
 80111d0:	607b      	str	r3, [r7, #4]
 80111d2:	e08f      	b.n	80112f4 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 80111d4:	4a50      	ldr	r2, [pc, #320]	; (8011318 <pass_route2+0x224>)
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	4413      	add	r3, r2
 80111da:	781b      	ldrb	r3, [r3, #0]
 80111dc:	2b77      	cmp	r3, #119	; 0x77
 80111de:	d11b      	bne.n	8011218 <pass_route2+0x124>
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	3301      	adds	r3, #1
 80111e4:	4a4c      	ldr	r2, [pc, #304]	; (8011318 <pass_route2+0x224>)
 80111e6:	5cd3      	ldrb	r3, [r2, r3]
 80111e8:	2b44      	cmp	r3, #68	; 0x44
 80111ea:	d115      	bne.n	8011218 <pass_route2+0x124>
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	3302      	adds	r3, #2
 80111f0:	4a49      	ldr	r2, [pc, #292]	; (8011318 <pass_route2+0x224>)
 80111f2:	5cd3      	ldrb	r3, [r2, r3]
 80111f4:	2b44      	cmp	r3, #68	; 0x44
 80111f6:	d10f      	bne.n	8011218 <pass_route2+0x124>
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	3303      	adds	r3, #3
 80111fc:	4a46      	ldr	r2, [pc, #280]	; (8011318 <pass_route2+0x224>)
 80111fe:	5cd3      	ldrb	r3, [r2, r3]
 8011200:	2b77      	cmp	r3, #119	; 0x77
 8011202:	d109      	bne.n	8011218 <pass_route2+0x124>
			s_flag = 0;
 8011204:	2300      	movs	r3, #0
 8011206:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180スラローム
 8011208:	78bb      	ldrb	r3, [r7, #2]
 801120a:	4a42      	ldr	r2, [pc, #264]	; (8011314 <pass_route2+0x220>)
 801120c:	21fb      	movs	r1, #251	; 0xfb
 801120e:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	3304      	adds	r3, #4
 8011214:	607b      	str	r3, [r7, #4]
 8011216:	e06d      	b.n	80112f4 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 8011218:	4a3f      	ldr	r2, [pc, #252]	; (8011318 <pass_route2+0x224>)
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	4413      	add	r3, r2
 801121e:	781b      	ldrb	r3, [r3, #0]
 8011220:	2b77      	cmp	r3, #119	; 0x77
 8011222:	d11b      	bne.n	801125c <pass_route2+0x168>
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	3301      	adds	r3, #1
 8011228:	4a3b      	ldr	r2, [pc, #236]	; (8011318 <pass_route2+0x224>)
 801122a:	5cd3      	ldrb	r3, [r2, r3]
 801122c:	2b11      	cmp	r3, #17
 801122e:	d115      	bne.n	801125c <pass_route2+0x168>
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	3302      	adds	r3, #2
 8011234:	4a38      	ldr	r2, [pc, #224]	; (8011318 <pass_route2+0x224>)
 8011236:	5cd3      	ldrb	r3, [r2, r3]
 8011238:	2b11      	cmp	r3, #17
 801123a:	d10f      	bne.n	801125c <pass_route2+0x168>
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	3303      	adds	r3, #3
 8011240:	4a35      	ldr	r2, [pc, #212]	; (8011318 <pass_route2+0x224>)
 8011242:	5cd3      	ldrb	r3, [r2, r3]
 8011244:	2b77      	cmp	r3, #119	; 0x77
 8011246:	d109      	bne.n	801125c <pass_route2+0x168>
			s_flag = 0;
 8011248:	2300      	movs	r3, #0
 801124a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180スラローム
 801124c:	78bb      	ldrb	r3, [r7, #2]
 801124e:	4a31      	ldr	r2, [pc, #196]	; (8011314 <pass_route2+0x220>)
 8011250:	21fa      	movs	r1, #250	; 0xfa
 8011252:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	3304      	adds	r3, #4
 8011258:	607b      	str	r3, [r7, #4]
 801125a:	e04b      	b.n	80112f4 <pass_route2+0x200>
		}else if(route[i] == 0xff){
 801125c:	4a2e      	ldr	r2, [pc, #184]	; (8011318 <pass_route2+0x224>)
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	4413      	add	r3, r2
 8011262:	781b      	ldrb	r3, [r3, #0]
 8011264:	2bff      	cmp	r3, #255	; 0xff
 8011266:	d107      	bne.n	8011278 <pass_route2+0x184>
			pass[p] = -114;							//a終了条件用
 8011268:	78bb      	ldrb	r3, [r7, #2]
 801126a:	4a2a      	ldr	r2, [pc, #168]	; (8011314 <pass_route2+0x220>)
 801126c:	218e      	movs	r1, #142	; 0x8e
 801126e:	54d1      	strb	r1, [r2, r3]
			i++;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	3301      	adds	r3, #1
 8011274:	607b      	str	r3, [r7, #4]
 8011276:	e03d      	b.n	80112f4 <pass_route2+0x200>
		}else if(route[i] == 0x77){
 8011278:	4a27      	ldr	r2, [pc, #156]	; (8011318 <pass_route2+0x224>)
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	4413      	add	r3, r2
 801127e:	781b      	ldrb	r3, [r3, #0]
 8011280:	2b77      	cmp	r3, #119	; 0x77
 8011282:	d137      	bne.n	80112f4 <pass_route2+0x200>
			if(s_flag){
 8011284:	78fb      	ldrb	r3, [r7, #3]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d012      	beq.n	80112b0 <pass_route2+0x1bc>
				pass[p-1]++;
 801128a:	78bb      	ldrb	r3, [r7, #2]
 801128c:	3b01      	subs	r3, #1
 801128e:	4a21      	ldr	r2, [pc, #132]	; (8011314 <pass_route2+0x220>)
 8011290:	56d2      	ldrsb	r2, [r2, r3]
 8011292:	b2d2      	uxtb	r2, r2
 8011294:	3201      	adds	r2, #1
 8011296:	b2d2      	uxtb	r2, r2
 8011298:	b251      	sxtb	r1, r2
 801129a:	4a1e      	ldr	r2, [pc, #120]	; (8011314 <pass_route2+0x220>)
 801129c:	54d1      	strb	r1, [r2, r3]
				p--;
 801129e:	78bb      	ldrb	r3, [r7, #2]
 80112a0:	3b01      	subs	r3, #1
 80112a2:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 80112a4:	2300      	movs	r3, #0
 80112a6:	70fb      	strb	r3, [r7, #3]
				i++;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	3301      	adds	r3, #1
 80112ac:	607b      	str	r3, [r7, #4]
 80112ae:	e021      	b.n	80112f4 <pass_route2+0x200>
			}else{
				s++;
 80112b0:	787b      	ldrb	r3, [r7, #1]
 80112b2:	3301      	adds	r3, #1
 80112b4:	707b      	strb	r3, [r7, #1]
				pass[p] = s;
 80112b6:	78bb      	ldrb	r3, [r7, #2]
 80112b8:	f997 1001 	ldrsb.w	r1, [r7, #1]
 80112bc:	4a15      	ldr	r2, [pc, #84]	; (8011314 <pass_route2+0x220>)
 80112be:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 80112c0:	e00c      	b.n	80112dc <pass_route2+0x1e8>
					s_flag = 1;
 80112c2:	2301      	movs	r3, #1
 80112c4:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;
 80112c6:	78bb      	ldrb	r3, [r7, #2]
 80112c8:	f997 1001 	ldrsb.w	r1, [r7, #1]
 80112cc:	4a11      	ldr	r2, [pc, #68]	; (8011314 <pass_route2+0x220>)
 80112ce:	54d1      	strb	r1, [r2, r3]
					i++;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	3301      	adds	r3, #1
 80112d4:	607b      	str	r3, [r7, #4]
					s++;
 80112d6:	787b      	ldrb	r3, [r7, #1]
 80112d8:	3301      	adds	r3, #1
 80112da:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	3301      	adds	r3, #1
 80112e0:	4a0d      	ldr	r2, [pc, #52]	; (8011318 <pass_route2+0x224>)
 80112e2:	5cd3      	ldrb	r3, [r2, r3]
 80112e4:	2b77      	cmp	r3, #119	; 0x77
 80112e6:	d0ec      	beq.n	80112c2 <pass_route2+0x1ce>
				}
				if(!s_flag){
 80112e8:	78fb      	ldrb	r3, [r7, #3]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d102      	bne.n	80112f4 <pass_route2+0x200>
					i++;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	3301      	adds	r3, #1
 80112f2:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 80112f4:	78bb      	ldrb	r3, [r7, #2]
 80112f6:	3301      	adds	r3, #1
 80112f8:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	3b01      	subs	r3, #1
 80112fe:	4a06      	ldr	r2, [pc, #24]	; (8011318 <pass_route2+0x224>)
 8011300:	5cd3      	ldrb	r3, [r2, r3]
 8011302:	2bff      	cmp	r3, #255	; 0xff
 8011304:	f47f af10 	bne.w	8011128 <pass_route2+0x34>
	}
}
 8011308:	bf00      	nop
 801130a:	370c      	adds	r7, #12
 801130c:	46bd      	mov	sp, r7
 801130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011312:	4770      	bx	lr
 8011314:	20000350 	.word	0x20000350
 8011318:	20000c54 	.word	0x20000c54

0801131c <pass_route3>:
//pass_route3
// route配列をpass圧縮する(半区画ベース+斜めあり)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route3(void){
 801131c:	b480      	push	{r7}
 801131e:	b083      	sub	sp, #12
 8011320:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 8011322:	2300      	movs	r3, #0
 8011324:	70fb      	strb	r3, [r7, #3]
	MF2.FLAG.V = 0;										//a斜めフラグの初期化
 8011326:	4a98      	ldr	r2, [pc, #608]	; (8011588 <pass_route3+0x26c>)
 8011328:	8813      	ldrh	r3, [r2, #0]
 801132a:	f36f 03c3 	bfc	r3, #3, #1
 801132e:	8013      	strh	r3, [r2, #0]
	for(i = 0; i < 256; i++){
 8011330:	2300      	movs	r3, #0
 8011332:	607b      	str	r3, [r7, #4]
 8011334:	e007      	b.n	8011346 <pass_route3+0x2a>
		pass[i] = 0;								//pass配列の初期化
 8011336:	4a95      	ldr	r2, [pc, #596]	; (801158c <pass_route3+0x270>)
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	4413      	add	r3, r2
 801133c:	2200      	movs	r2, #0
 801133e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	3301      	adds	r3, #1
 8011344:	607b      	str	r3, [r7, #4]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2bff      	cmp	r3, #255	; 0xff
 801134a:	ddf4      	ble.n	8011336 <pass_route3+0x1a>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 801134c:	2300      	movs	r3, #0
 801134e:	70bb      	strb	r3, [r7, #2]
	i = 0;
 8011350:	2300      	movs	r3, #0
 8011352:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 8011354:	2300      	movs	r3, #0
 8011356:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 8011358:	e324      	b.n	80119a4 <pass_route3+0x688>
		s = 0;
 801135a:	2300      	movs	r3, #0
 801135c:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 801135e:	4a8c      	ldr	r2, [pc, #560]	; (8011590 <pass_route3+0x274>)
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	4413      	add	r3, r2
 8011364:	781b      	ldrb	r3, [r3, #0]
 8011366:	2b77      	cmp	r3, #119	; 0x77
 8011368:	d11b      	bne.n	80113a2 <pass_route3+0x86>
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	3301      	adds	r3, #1
 801136e:	4a88      	ldr	r2, [pc, #544]	; (8011590 <pass_route3+0x274>)
 8011370:	5cd3      	ldrb	r3, [r2, r3]
 8011372:	2b44      	cmp	r3, #68	; 0x44
 8011374:	d115      	bne.n	80113a2 <pass_route3+0x86>
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	3302      	adds	r3, #2
 801137a:	4a85      	ldr	r2, [pc, #532]	; (8011590 <pass_route3+0x274>)
 801137c:	5cd3      	ldrb	r3, [r2, r3]
 801137e:	2b77      	cmp	r3, #119	; 0x77
 8011380:	d10f      	bne.n	80113a2 <pass_route3+0x86>
			s_flag = 0;
 8011382:	2300      	movs	r3, #0
 8011384:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右90
 8011386:	78bb      	ldrb	r3, [r7, #2]
 8011388:	4a80      	ldr	r2, [pc, #512]	; (801158c <pass_route3+0x270>)
 801138a:	21fd      	movs	r1, #253	; 0xfd
 801138c:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d102      	bne.n	801139a <pass_route3+0x7e>
				start_mode = 2;
 8011394:	4b7f      	ldr	r3, [pc, #508]	; (8011594 <pass_route3+0x278>)
 8011396:	2202      	movs	r2, #2
 8011398:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	3303      	adds	r3, #3
 801139e:	607b      	str	r3, [r7, #4]
 80113a0:	e2fd      	b.n	801199e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 80113a2:	4a7b      	ldr	r2, [pc, #492]	; (8011590 <pass_route3+0x274>)
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	4413      	add	r3, r2
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	2b77      	cmp	r3, #119	; 0x77
 80113ac:	d11b      	bne.n	80113e6 <pass_route3+0xca>
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	3301      	adds	r3, #1
 80113b2:	4a77      	ldr	r2, [pc, #476]	; (8011590 <pass_route3+0x274>)
 80113b4:	5cd3      	ldrb	r3, [r2, r3]
 80113b6:	2b11      	cmp	r3, #17
 80113b8:	d115      	bne.n	80113e6 <pass_route3+0xca>
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	3302      	adds	r3, #2
 80113be:	4a74      	ldr	r2, [pc, #464]	; (8011590 <pass_route3+0x274>)
 80113c0:	5cd3      	ldrb	r3, [r2, r3]
 80113c2:	2b77      	cmp	r3, #119	; 0x77
 80113c4:	d10f      	bne.n	80113e6 <pass_route3+0xca>
			s_flag = 0;
 80113c6:	2300      	movs	r3, #0
 80113c8:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左90
 80113ca:	78bb      	ldrb	r3, [r7, #2]
 80113cc:	4a6f      	ldr	r2, [pc, #444]	; (801158c <pass_route3+0x270>)
 80113ce:	21fc      	movs	r1, #252	; 0xfc
 80113d0:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d102      	bne.n	80113de <pass_route3+0xc2>
				start_mode = 2;
 80113d8:	4b6e      	ldr	r3, [pc, #440]	; (8011594 <pass_route3+0x278>)
 80113da:	2202      	movs	r2, #2
 80113dc:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	3303      	adds	r3, #3
 80113e2:	607b      	str	r3, [r7, #4]
 80113e4:	e2db      	b.n	801199e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 80113e6:	4a6a      	ldr	r2, [pc, #424]	; (8011590 <pass_route3+0x274>)
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	4413      	add	r3, r2
 80113ec:	781b      	ldrb	r3, [r3, #0]
 80113ee:	2b77      	cmp	r3, #119	; 0x77
 80113f0:	d11b      	bne.n	801142a <pass_route3+0x10e>
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	3301      	adds	r3, #1
 80113f6:	4a66      	ldr	r2, [pc, #408]	; (8011590 <pass_route3+0x274>)
 80113f8:	5cd3      	ldrb	r3, [r2, r3]
 80113fa:	2b44      	cmp	r3, #68	; 0x44
 80113fc:	d115      	bne.n	801142a <pass_route3+0x10e>
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	3302      	adds	r3, #2
 8011402:	4a63      	ldr	r2, [pc, #396]	; (8011590 <pass_route3+0x274>)
 8011404:	5cd3      	ldrb	r3, [r2, r3]
 8011406:	2b44      	cmp	r3, #68	; 0x44
 8011408:	d10f      	bne.n	801142a <pass_route3+0x10e>
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	3303      	adds	r3, #3
 801140e:	4a60      	ldr	r2, [pc, #384]	; (8011590 <pass_route3+0x274>)
 8011410:	5cd3      	ldrb	r3, [r2, r3]
 8011412:	2b77      	cmp	r3, #119	; 0x77
 8011414:	d109      	bne.n	801142a <pass_route3+0x10e>
			s_flag = 0;
 8011416:	2300      	movs	r3, #0
 8011418:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180
 801141a:	78bb      	ldrb	r3, [r7, #2]
 801141c:	4a5b      	ldr	r2, [pc, #364]	; (801158c <pass_route3+0x270>)
 801141e:	21fb      	movs	r1, #251	; 0xfb
 8011420:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	3304      	adds	r3, #4
 8011426:	607b      	str	r3, [r7, #4]
 8011428:	e2b9      	b.n	801199e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 801142a:	4a59      	ldr	r2, [pc, #356]	; (8011590 <pass_route3+0x274>)
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	4413      	add	r3, r2
 8011430:	781b      	ldrb	r3, [r3, #0]
 8011432:	2b77      	cmp	r3, #119	; 0x77
 8011434:	d11b      	bne.n	801146e <pass_route3+0x152>
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	3301      	adds	r3, #1
 801143a:	4a55      	ldr	r2, [pc, #340]	; (8011590 <pass_route3+0x274>)
 801143c:	5cd3      	ldrb	r3, [r2, r3]
 801143e:	2b11      	cmp	r3, #17
 8011440:	d115      	bne.n	801146e <pass_route3+0x152>
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	3302      	adds	r3, #2
 8011446:	4a52      	ldr	r2, [pc, #328]	; (8011590 <pass_route3+0x274>)
 8011448:	5cd3      	ldrb	r3, [r2, r3]
 801144a:	2b11      	cmp	r3, #17
 801144c:	d10f      	bne.n	801146e <pass_route3+0x152>
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	3303      	adds	r3, #3
 8011452:	4a4f      	ldr	r2, [pc, #316]	; (8011590 <pass_route3+0x274>)
 8011454:	5cd3      	ldrb	r3, [r2, r3]
 8011456:	2b77      	cmp	r3, #119	; 0x77
 8011458:	d109      	bne.n	801146e <pass_route3+0x152>
			s_flag = 0;
 801145a:	2300      	movs	r3, #0
 801145c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180
 801145e:	78bb      	ldrb	r3, [r7, #2]
 8011460:	4a4a      	ldr	r2, [pc, #296]	; (801158c <pass_route3+0x270>)
 8011462:	21fa      	movs	r1, #250	; 0xfa
 8011464:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	3304      	adds	r3, #4
 801146a:	607b      	str	r3, [r7, #4]
 801146c:	e297      	b.n	801199e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x11){
 801146e:	4a48      	ldr	r2, [pc, #288]	; (8011590 <pass_route3+0x274>)
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	4413      	add	r3, r2
 8011474:	781b      	ldrb	r3, [r3, #0]
 8011476:	2b77      	cmp	r3, #119	; 0x77
 8011478:	d120      	bne.n	80114bc <pass_route3+0x1a0>
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	3301      	adds	r3, #1
 801147e:	4a44      	ldr	r2, [pc, #272]	; (8011590 <pass_route3+0x274>)
 8011480:	5cd3      	ldrb	r3, [r2, r3]
 8011482:	2b44      	cmp	r3, #68	; 0x44
 8011484:	d11a      	bne.n	80114bc <pass_route3+0x1a0>
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	3302      	adds	r3, #2
 801148a:	4a41      	ldr	r2, [pc, #260]	; (8011590 <pass_route3+0x274>)
 801148c:	5cd3      	ldrb	r3, [r2, r3]
 801148e:	2b11      	cmp	r3, #17
 8011490:	d114      	bne.n	80114bc <pass_route3+0x1a0>
			s_flag = 0;
 8011492:	2300      	movs	r3, #0
 8011494:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45in
 8011496:	78bb      	ldrb	r3, [r7, #2]
 8011498:	4a3c      	ldr	r2, [pc, #240]	; (801158c <pass_route3+0x270>)
 801149a:	21f9      	movs	r1, #249	; 0xf9
 801149c:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 801149e:	4a3a      	ldr	r2, [pc, #232]	; (8011588 <pass_route3+0x26c>)
 80114a0:	8813      	ldrh	r3, [r2, #0]
 80114a2:	f043 0308 	orr.w	r3, r3, #8
 80114a6:	8013      	strh	r3, [r2, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d102      	bne.n	80114b4 <pass_route3+0x198>
				start_mode = 2;
 80114ae:	4b39      	ldr	r3, [pc, #228]	; (8011594 <pass_route3+0x278>)
 80114b0:	2202      	movs	r2, #2
 80114b2:	701a      	strb	r2, [r3, #0]
			}
			i = i + 2;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	3302      	adds	r3, #2
 80114b8:	607b      	str	r3, [r7, #4]
 80114ba:	e270      	b.n	801199e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x77){
 80114bc:	4b32      	ldr	r3, [pc, #200]	; (8011588 <pass_route3+0x26c>)
 80114be:	881b      	ldrh	r3, [r3, #0]
 80114c0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80114c4:	b2db      	uxtb	r3, r3
 80114c6:	2b01      	cmp	r3, #1
 80114c8:	d11a      	bne.n	8011500 <pass_route3+0x1e4>
 80114ca:	4a31      	ldr	r2, [pc, #196]	; (8011590 <pass_route3+0x274>)
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	4413      	add	r3, r2
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	2b44      	cmp	r3, #68	; 0x44
 80114d4:	d114      	bne.n	8011500 <pass_route3+0x1e4>
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	3301      	adds	r3, #1
 80114da:	4a2d      	ldr	r2, [pc, #180]	; (8011590 <pass_route3+0x274>)
 80114dc:	5cd3      	ldrb	r3, [r2, r3]
 80114de:	2b77      	cmp	r3, #119	; 0x77
 80114e0:	d10e      	bne.n	8011500 <pass_route3+0x1e4>
			s_flag = 0;
 80114e2:	2300      	movs	r3, #0
 80114e4:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45out
 80114e6:	78bb      	ldrb	r3, [r7, #2]
 80114e8:	4a28      	ldr	r2, [pc, #160]	; (801158c <pass_route3+0x270>)
 80114ea:	21f9      	movs	r1, #249	; 0xf9
 80114ec:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 80114ee:	4a26      	ldr	r2, [pc, #152]	; (8011588 <pass_route3+0x26c>)
 80114f0:	8813      	ldrh	r3, [r2, #0]
 80114f2:	f36f 03c3 	bfc	r3, #3, #1
 80114f6:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	3302      	adds	r3, #2
 80114fc:	607b      	str	r3, [r7, #4]
 80114fe:	e24e      	b.n	801199e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x44){
 8011500:	4a23      	ldr	r2, [pc, #140]	; (8011590 <pass_route3+0x274>)
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	4413      	add	r3, r2
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	2b77      	cmp	r3, #119	; 0x77
 801150a:	d11a      	bne.n	8011542 <pass_route3+0x226>
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	3301      	adds	r3, #1
 8011510:	4a1f      	ldr	r2, [pc, #124]	; (8011590 <pass_route3+0x274>)
 8011512:	5cd3      	ldrb	r3, [r2, r3]
 8011514:	2b11      	cmp	r3, #17
 8011516:	d114      	bne.n	8011542 <pass_route3+0x226>
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	3302      	adds	r3, #2
 801151c:	4a1c      	ldr	r2, [pc, #112]	; (8011590 <pass_route3+0x274>)
 801151e:	5cd3      	ldrb	r3, [r2, r3]
 8011520:	2b44      	cmp	r3, #68	; 0x44
 8011522:	d10e      	bne.n	8011542 <pass_route3+0x226>
			s_flag = 0;
 8011524:	2300      	movs	r3, #0
 8011526:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45in
 8011528:	78bb      	ldrb	r3, [r7, #2]
 801152a:	4a18      	ldr	r2, [pc, #96]	; (801158c <pass_route3+0x270>)
 801152c:	21f8      	movs	r1, #248	; 0xf8
 801152e:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011530:	4a15      	ldr	r2, [pc, #84]	; (8011588 <pass_route3+0x26c>)
 8011532:	8813      	ldrh	r3, [r2, #0]
 8011534:	f043 0308 	orr.w	r3, r3, #8
 8011538:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	3302      	adds	r3, #2
 801153e:	607b      	str	r3, [r7, #4]
 8011540:	e22d      	b.n	801199e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x77){
 8011542:	4b11      	ldr	r3, [pc, #68]	; (8011588 <pass_route3+0x26c>)
 8011544:	881b      	ldrh	r3, [r3, #0]
 8011546:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801154a:	b2db      	uxtb	r3, r3
 801154c:	2b01      	cmp	r3, #1
 801154e:	d123      	bne.n	8011598 <pass_route3+0x27c>
 8011550:	4a0f      	ldr	r2, [pc, #60]	; (8011590 <pass_route3+0x274>)
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	4413      	add	r3, r2
 8011556:	781b      	ldrb	r3, [r3, #0]
 8011558:	2b11      	cmp	r3, #17
 801155a:	d11d      	bne.n	8011598 <pass_route3+0x27c>
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	3301      	adds	r3, #1
 8011560:	4a0b      	ldr	r2, [pc, #44]	; (8011590 <pass_route3+0x274>)
 8011562:	5cd3      	ldrb	r3, [r2, r3]
 8011564:	2b77      	cmp	r3, #119	; 0x77
 8011566:	d117      	bne.n	8011598 <pass_route3+0x27c>
			s_flag = 0;
 8011568:	2300      	movs	r3, #0
 801156a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45out
 801156c:	78bb      	ldrb	r3, [r7, #2]
 801156e:	4a07      	ldr	r2, [pc, #28]	; (801158c <pass_route3+0x270>)
 8011570:	21f8      	movs	r1, #248	; 0xf8
 8011572:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 8011574:	4a04      	ldr	r2, [pc, #16]	; (8011588 <pass_route3+0x26c>)
 8011576:	8813      	ldrh	r3, [r2, #0]
 8011578:	f36f 03c3 	bfc	r3, #3, #1
 801157c:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	3302      	adds	r3, #2
 8011582:	607b      	str	r3, [r7, #4]
 8011584:	e20b      	b.n	801199e <pass_route3+0x682>
 8011586:	bf00      	nop
 8011588:	20000f64 	.word	0x20000f64
 801158c:	20000350 	.word	0x20000350
 8011590:	20000c54 	.word	0x20000c54
 8011594:	200015c8 	.word	0x200015c8
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x11){
 8011598:	4b99      	ldr	r3, [pc, #612]	; (8011800 <pass_route3+0x4e4>)
 801159a:	881b      	ldrh	r3, [r3, #0]
 801159c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80115a0:	b2db      	uxtb	r3, r3
 80115a2:	2b01      	cmp	r3, #1
 80115a4:	d120      	bne.n	80115e8 <pass_route3+0x2cc>
 80115a6:	4a97      	ldr	r2, [pc, #604]	; (8011804 <pass_route3+0x4e8>)
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	4413      	add	r3, r2
 80115ac:	781b      	ldrb	r3, [r3, #0]
 80115ae:	2b44      	cmp	r3, #68	; 0x44
 80115b0:	d11a      	bne.n	80115e8 <pass_route3+0x2cc>
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	3301      	adds	r3, #1
 80115b6:	4a93      	ldr	r2, [pc, #588]	; (8011804 <pass_route3+0x4e8>)
 80115b8:	5cd3      	ldrb	r3, [r2, r3]
 80115ba:	2b44      	cmp	r3, #68	; 0x44
 80115bc:	d114      	bne.n	80115e8 <pass_route3+0x2cc>
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	3302      	adds	r3, #2
 80115c2:	4a90      	ldr	r2, [pc, #576]	; (8011804 <pass_route3+0x4e8>)
 80115c4:	5cd3      	ldrb	r3, [r2, r3]
 80115c6:	2b11      	cmp	r3, #17
 80115c8:	d10e      	bne.n	80115e8 <pass_route3+0x2cc>
			s_flag = 0;
 80115ca:	2300      	movs	r3, #0
 80115cc:	70fb      	strb	r3, [r7, #3]
			pass[p] = -9;							//a斜め右V90
 80115ce:	78bb      	ldrb	r3, [r7, #2]
 80115d0:	4a8d      	ldr	r2, [pc, #564]	; (8011808 <pass_route3+0x4ec>)
 80115d2:	21f7      	movs	r1, #247	; 0xf7
 80115d4:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 80115d6:	4a8a      	ldr	r2, [pc, #552]	; (8011800 <pass_route3+0x4e4>)
 80115d8:	8813      	ldrh	r3, [r2, #0]
 80115da:	f043 0308 	orr.w	r3, r3, #8
 80115de:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	3302      	adds	r3, #2
 80115e4:	607b      	str	r3, [r7, #4]
 80115e6:	e1da      	b.n	801199e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x44){
 80115e8:	4b85      	ldr	r3, [pc, #532]	; (8011800 <pass_route3+0x4e4>)
 80115ea:	881b      	ldrh	r3, [r3, #0]
 80115ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80115f0:	b2db      	uxtb	r3, r3
 80115f2:	2b01      	cmp	r3, #1
 80115f4:	d120      	bne.n	8011638 <pass_route3+0x31c>
 80115f6:	4a83      	ldr	r2, [pc, #524]	; (8011804 <pass_route3+0x4e8>)
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	4413      	add	r3, r2
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	2b11      	cmp	r3, #17
 8011600:	d11a      	bne.n	8011638 <pass_route3+0x31c>
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	3301      	adds	r3, #1
 8011606:	4a7f      	ldr	r2, [pc, #508]	; (8011804 <pass_route3+0x4e8>)
 8011608:	5cd3      	ldrb	r3, [r2, r3]
 801160a:	2b11      	cmp	r3, #17
 801160c:	d114      	bne.n	8011638 <pass_route3+0x31c>
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	3302      	adds	r3, #2
 8011612:	4a7c      	ldr	r2, [pc, #496]	; (8011804 <pass_route3+0x4e8>)
 8011614:	5cd3      	ldrb	r3, [r2, r3]
 8011616:	2b44      	cmp	r3, #68	; 0x44
 8011618:	d10e      	bne.n	8011638 <pass_route3+0x31c>
			s_flag = 0;
 801161a:	2300      	movs	r3, #0
 801161c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -10;							//a斜め左V90
 801161e:	78bb      	ldrb	r3, [r7, #2]
 8011620:	4a79      	ldr	r2, [pc, #484]	; (8011808 <pass_route3+0x4ec>)
 8011622:	21f6      	movs	r1, #246	; 0xf6
 8011624:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011626:	4a76      	ldr	r2, [pc, #472]	; (8011800 <pass_route3+0x4e4>)
 8011628:	8813      	ldrh	r3, [r2, #0]
 801162a:	f043 0308 	orr.w	r3, r3, #8
 801162e:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	3302      	adds	r3, #2
 8011634:	607b      	str	r3, [r7, #4]
 8011636:	e1b2      	b.n	801199e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x11){
 8011638:	4a72      	ldr	r2, [pc, #456]	; (8011804 <pass_route3+0x4e8>)
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	4413      	add	r3, r2
 801163e:	781b      	ldrb	r3, [r3, #0]
 8011640:	2b77      	cmp	r3, #119	; 0x77
 8011642:	d126      	bne.n	8011692 <pass_route3+0x376>
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	3301      	adds	r3, #1
 8011648:	4a6e      	ldr	r2, [pc, #440]	; (8011804 <pass_route3+0x4e8>)
 801164a:	5cd3      	ldrb	r3, [r2, r3]
 801164c:	2b44      	cmp	r3, #68	; 0x44
 801164e:	d120      	bne.n	8011692 <pass_route3+0x376>
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	3302      	adds	r3, #2
 8011654:	4a6b      	ldr	r2, [pc, #428]	; (8011804 <pass_route3+0x4e8>)
 8011656:	5cd3      	ldrb	r3, [r2, r3]
 8011658:	2b44      	cmp	r3, #68	; 0x44
 801165a:	d11a      	bne.n	8011692 <pass_route3+0x376>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	3303      	adds	r3, #3
 8011660:	4a68      	ldr	r2, [pc, #416]	; (8011804 <pass_route3+0x4e8>)
 8011662:	5cd3      	ldrb	r3, [r2, r3]
 8011664:	2b11      	cmp	r3, #17
 8011666:	d114      	bne.n	8011692 <pass_route3+0x376>
			s_flag = 0;
 8011668:	2300      	movs	r3, #0
 801166a:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135in
 801166c:	78bb      	ldrb	r3, [r7, #2]
 801166e:	4a66      	ldr	r2, [pc, #408]	; (8011808 <pass_route3+0x4ec>)
 8011670:	21f5      	movs	r1, #245	; 0xf5
 8011672:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011674:	4a62      	ldr	r2, [pc, #392]	; (8011800 <pass_route3+0x4e4>)
 8011676:	8813      	ldrh	r3, [r2, #0]
 8011678:	f043 0308 	orr.w	r3, r3, #8
 801167c:	8013      	strh	r3, [r2, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d102      	bne.n	801168a <pass_route3+0x36e>
				start_mode = 2;
 8011684:	4b61      	ldr	r3, [pc, #388]	; (801180c <pass_route3+0x4f0>)
 8011686:	2202      	movs	r2, #2
 8011688:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	3303      	adds	r3, #3
 801168e:	607b      	str	r3, [r7, #4]
 8011690:	e185      	b.n	801199e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x77){
 8011692:	4b5b      	ldr	r3, [pc, #364]	; (8011800 <pass_route3+0x4e4>)
 8011694:	881b      	ldrh	r3, [r3, #0]
 8011696:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801169a:	b2db      	uxtb	r3, r3
 801169c:	2b01      	cmp	r3, #1
 801169e:	d120      	bne.n	80116e2 <pass_route3+0x3c6>
 80116a0:	4a58      	ldr	r2, [pc, #352]	; (8011804 <pass_route3+0x4e8>)
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	4413      	add	r3, r2
 80116a6:	781b      	ldrb	r3, [r3, #0]
 80116a8:	2b44      	cmp	r3, #68	; 0x44
 80116aa:	d11a      	bne.n	80116e2 <pass_route3+0x3c6>
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	3301      	adds	r3, #1
 80116b0:	4a54      	ldr	r2, [pc, #336]	; (8011804 <pass_route3+0x4e8>)
 80116b2:	5cd3      	ldrb	r3, [r2, r3]
 80116b4:	2b44      	cmp	r3, #68	; 0x44
 80116b6:	d114      	bne.n	80116e2 <pass_route3+0x3c6>
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	3302      	adds	r3, #2
 80116bc:	4a51      	ldr	r2, [pc, #324]	; (8011804 <pass_route3+0x4e8>)
 80116be:	5cd3      	ldrb	r3, [r2, r3]
 80116c0:	2b77      	cmp	r3, #119	; 0x77
 80116c2:	d10e      	bne.n	80116e2 <pass_route3+0x3c6>
			s_flag = 0;
 80116c4:	2300      	movs	r3, #0
 80116c6:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135out
 80116c8:	78bb      	ldrb	r3, [r7, #2]
 80116ca:	4a4f      	ldr	r2, [pc, #316]	; (8011808 <pass_route3+0x4ec>)
 80116cc:	21f5      	movs	r1, #245	; 0xf5
 80116ce:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 80116d0:	4a4b      	ldr	r2, [pc, #300]	; (8011800 <pass_route3+0x4e4>)
 80116d2:	8813      	ldrh	r3, [r2, #0]
 80116d4:	f36f 03c3 	bfc	r3, #3, #1
 80116d8:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	3303      	adds	r3, #3
 80116de:	607b      	str	r3, [r7, #4]
 80116e0:	e15d      	b.n	801199e <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x44){
 80116e2:	4a48      	ldr	r2, [pc, #288]	; (8011804 <pass_route3+0x4e8>)
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	4413      	add	r3, r2
 80116e8:	781b      	ldrb	r3, [r3, #0]
 80116ea:	2b77      	cmp	r3, #119	; 0x77
 80116ec:	d120      	bne.n	8011730 <pass_route3+0x414>
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	3301      	adds	r3, #1
 80116f2:	4a44      	ldr	r2, [pc, #272]	; (8011804 <pass_route3+0x4e8>)
 80116f4:	5cd3      	ldrb	r3, [r2, r3]
 80116f6:	2b11      	cmp	r3, #17
 80116f8:	d11a      	bne.n	8011730 <pass_route3+0x414>
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	3302      	adds	r3, #2
 80116fe:	4a41      	ldr	r2, [pc, #260]	; (8011804 <pass_route3+0x4e8>)
 8011700:	5cd3      	ldrb	r3, [r2, r3]
 8011702:	2b11      	cmp	r3, #17
 8011704:	d114      	bne.n	8011730 <pass_route3+0x414>
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	3303      	adds	r3, #3
 801170a:	4a3e      	ldr	r2, [pc, #248]	; (8011804 <pass_route3+0x4e8>)
 801170c:	5cd3      	ldrb	r3, [r2, r3]
 801170e:	2b44      	cmp	r3, #68	; 0x44
 8011710:	d10e      	bne.n	8011730 <pass_route3+0x414>
			s_flag = 0;
 8011712:	2300      	movs	r3, #0
 8011714:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135in
 8011716:	78bb      	ldrb	r3, [r7, #2]
 8011718:	4a3b      	ldr	r2, [pc, #236]	; (8011808 <pass_route3+0x4ec>)
 801171a:	21f4      	movs	r1, #244	; 0xf4
 801171c:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 801171e:	4a38      	ldr	r2, [pc, #224]	; (8011800 <pass_route3+0x4e4>)
 8011720:	8813      	ldrh	r3, [r2, #0]
 8011722:	f043 0308 	orr.w	r3, r3, #8
 8011726:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	3303      	adds	r3, #3
 801172c:	607b      	str	r3, [r7, #4]
 801172e:	e136      	b.n	801199e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x77){
 8011730:	4b33      	ldr	r3, [pc, #204]	; (8011800 <pass_route3+0x4e4>)
 8011732:	881b      	ldrh	r3, [r3, #0]
 8011734:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011738:	b2db      	uxtb	r3, r3
 801173a:	2b01      	cmp	r3, #1
 801173c:	d120      	bne.n	8011780 <pass_route3+0x464>
 801173e:	4a31      	ldr	r2, [pc, #196]	; (8011804 <pass_route3+0x4e8>)
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	4413      	add	r3, r2
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	2b11      	cmp	r3, #17
 8011748:	d11a      	bne.n	8011780 <pass_route3+0x464>
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	3301      	adds	r3, #1
 801174e:	4a2d      	ldr	r2, [pc, #180]	; (8011804 <pass_route3+0x4e8>)
 8011750:	5cd3      	ldrb	r3, [r2, r3]
 8011752:	2b11      	cmp	r3, #17
 8011754:	d114      	bne.n	8011780 <pass_route3+0x464>
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	3302      	adds	r3, #2
 801175a:	4a2a      	ldr	r2, [pc, #168]	; (8011804 <pass_route3+0x4e8>)
 801175c:	5cd3      	ldrb	r3, [r2, r3]
 801175e:	2b77      	cmp	r3, #119	; 0x77
 8011760:	d10e      	bne.n	8011780 <pass_route3+0x464>
			s_flag = 0;
 8011762:	2300      	movs	r3, #0
 8011764:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135out
 8011766:	78bb      	ldrb	r3, [r7, #2]
 8011768:	4a27      	ldr	r2, [pc, #156]	; (8011808 <pass_route3+0x4ec>)
 801176a:	21f4      	movs	r1, #244	; 0xf4
 801176c:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 801176e:	4a24      	ldr	r2, [pc, #144]	; (8011800 <pass_route3+0x4e4>)
 8011770:	8813      	ldrh	r3, [r2, #0]
 8011772:	f36f 03c3 	bfc	r3, #3, #1
 8011776:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	3303      	adds	r3, #3
 801177c:	607b      	str	r3, [r7, #4]
 801177e:	e10e      	b.n	801199e <pass_route3+0x682>
		}else if(route[i] == 0xff){
 8011780:	4a20      	ldr	r2, [pc, #128]	; (8011804 <pass_route3+0x4e8>)
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	4413      	add	r3, r2
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	2bff      	cmp	r3, #255	; 0xff
 801178a:	d16a      	bne.n	8011862 <pass_route3+0x546>
			if(MF2.FLAG.V == 1){
 801178c:	4b1c      	ldr	r3, [pc, #112]	; (8011800 <pass_route3+0x4e4>)
 801178e:	881b      	ldrh	r3, [r3, #0]
 8011790:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011794:	b2db      	uxtb	r3, r3
 8011796:	2b01      	cmp	r3, #1
 8011798:	d15b      	bne.n	8011852 <pass_route3+0x536>
				if(pass[p-1] == -1 && pass[p-2] == -1){
 801179a:	78bb      	ldrb	r3, [r7, #2]
 801179c:	3b01      	subs	r3, #1
 801179e:	4a1a      	ldr	r2, [pc, #104]	; (8011808 <pass_route3+0x4ec>)
 80117a0:	56d3      	ldrsb	r3, [r2, r3]
 80117a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117a6:	d111      	bne.n	80117cc <pass_route3+0x4b0>
 80117a8:	78bb      	ldrb	r3, [r7, #2]
 80117aa:	3b02      	subs	r3, #2
 80117ac:	4a16      	ldr	r2, [pc, #88]	; (8011808 <pass_route3+0x4ec>)
 80117ae:	56d3      	ldrsb	r3, [r2, r3]
 80117b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117b4:	d10a      	bne.n	80117cc <pass_route3+0x4b0>
					pass[p-2] = -15;
 80117b6:	78bb      	ldrb	r3, [r7, #2]
 80117b8:	3b02      	subs	r3, #2
 80117ba:	4a13      	ldr	r2, [pc, #76]	; (8011808 <pass_route3+0x4ec>)
 80117bc:	21f1      	movs	r1, #241	; 0xf1
 80117be:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 80117c0:	78bb      	ldrb	r3, [r7, #2]
 80117c2:	3b01      	subs	r3, #1
 80117c4:	4a10      	ldr	r2, [pc, #64]	; (8011808 <pass_route3+0x4ec>)
 80117c6:	218e      	movs	r1, #142	; 0x8e
 80117c8:	54d1      	strb	r1, [r2, r3]
 80117ca:	e042      	b.n	8011852 <pass_route3+0x536>
				}else if(pass[p-1] == -2 && pass[p-2] == -2){
 80117cc:	78bb      	ldrb	r3, [r7, #2]
 80117ce:	3b01      	subs	r3, #1
 80117d0:	4a0d      	ldr	r2, [pc, #52]	; (8011808 <pass_route3+0x4ec>)
 80117d2:	56d3      	ldrsb	r3, [r2, r3]
 80117d4:	f113 0f02 	cmn.w	r3, #2
 80117d8:	d11a      	bne.n	8011810 <pass_route3+0x4f4>
 80117da:	78bb      	ldrb	r3, [r7, #2]
 80117dc:	3b02      	subs	r3, #2
 80117de:	4a0a      	ldr	r2, [pc, #40]	; (8011808 <pass_route3+0x4ec>)
 80117e0:	56d3      	ldrsb	r3, [r2, r3]
 80117e2:	f113 0f02 	cmn.w	r3, #2
 80117e6:	d113      	bne.n	8011810 <pass_route3+0x4f4>
					pass[p-2] = -16;
 80117e8:	78bb      	ldrb	r3, [r7, #2]
 80117ea:	3b02      	subs	r3, #2
 80117ec:	4a06      	ldr	r2, [pc, #24]	; (8011808 <pass_route3+0x4ec>)
 80117ee:	21f0      	movs	r1, #240	; 0xf0
 80117f0:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 80117f2:	78bb      	ldrb	r3, [r7, #2]
 80117f4:	3b01      	subs	r3, #1
 80117f6:	4a04      	ldr	r2, [pc, #16]	; (8011808 <pass_route3+0x4ec>)
 80117f8:	218e      	movs	r1, #142	; 0x8e
 80117fa:	54d1      	strb	r1, [r2, r3]
 80117fc:	e029      	b.n	8011852 <pass_route3+0x536>
 80117fe:	bf00      	nop
 8011800:	20000f64 	.word	0x20000f64
 8011804:	20000c54 	.word	0x20000c54
 8011808:	20000350 	.word	0x20000350
 801180c:	200015c8 	.word	0x200015c8
				}else if(pass[p-1] == -1){
 8011810:	78bb      	ldrb	r3, [r7, #2]
 8011812:	3b01      	subs	r3, #1
 8011814:	4a6a      	ldr	r2, [pc, #424]	; (80119c0 <pass_route3+0x6a4>)
 8011816:	56d3      	ldrsb	r3, [r2, r3]
 8011818:	f1b3 3fff 	cmp.w	r3, #4294967295
 801181c:	d109      	bne.n	8011832 <pass_route3+0x516>
					pass[p-1] = -13;
 801181e:	78bb      	ldrb	r3, [r7, #2]
 8011820:	3b01      	subs	r3, #1
 8011822:	4a67      	ldr	r2, [pc, #412]	; (80119c0 <pass_route3+0x6a4>)
 8011824:	21f3      	movs	r1, #243	; 0xf3
 8011826:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 8011828:	78bb      	ldrb	r3, [r7, #2]
 801182a:	4a65      	ldr	r2, [pc, #404]	; (80119c0 <pass_route3+0x6a4>)
 801182c:	218e      	movs	r1, #142	; 0x8e
 801182e:	54d1      	strb	r1, [r2, r3]
 8011830:	e00f      	b.n	8011852 <pass_route3+0x536>
				}else if(pass[p-1] == -2){
 8011832:	78bb      	ldrb	r3, [r7, #2]
 8011834:	3b01      	subs	r3, #1
 8011836:	4a62      	ldr	r2, [pc, #392]	; (80119c0 <pass_route3+0x6a4>)
 8011838:	56d3      	ldrsb	r3, [r2, r3]
 801183a:	f113 0f02 	cmn.w	r3, #2
 801183e:	d108      	bne.n	8011852 <pass_route3+0x536>
					pass[p-1] = -14;
 8011840:	78bb      	ldrb	r3, [r7, #2]
 8011842:	3b01      	subs	r3, #1
 8011844:	4a5e      	ldr	r2, [pc, #376]	; (80119c0 <pass_route3+0x6a4>)
 8011846:	21f2      	movs	r1, #242	; 0xf2
 8011848:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 801184a:	78bb      	ldrb	r3, [r7, #2]
 801184c:	4a5c      	ldr	r2, [pc, #368]	; (80119c0 <pass_route3+0x6a4>)
 801184e:	218e      	movs	r1, #142	; 0x8e
 8011850:	54d1      	strb	r1, [r2, r3]
				}
			}
			pass[p] = -114;							//a終了用配列
 8011852:	78bb      	ldrb	r3, [r7, #2]
 8011854:	4a5a      	ldr	r2, [pc, #360]	; (80119c0 <pass_route3+0x6a4>)
 8011856:	218e      	movs	r1, #142	; 0x8e
 8011858:	54d1      	strb	r1, [r2, r3]
			i++;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	3301      	adds	r3, #1
 801185e:	607b      	str	r3, [r7, #4]
 8011860:	e09d      	b.n	801199e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x11){
 8011862:	4b58      	ldr	r3, [pc, #352]	; (80119c4 <pass_route3+0x6a8>)
 8011864:	881b      	ldrh	r3, [r3, #0]
 8011866:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801186a:	b2db      	uxtb	r3, r3
 801186c:	2b01      	cmp	r3, #1
 801186e:	d11a      	bne.n	80118a6 <pass_route3+0x58a>
 8011870:	4a55      	ldr	r2, [pc, #340]	; (80119c8 <pass_route3+0x6ac>)
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	4413      	add	r3, r2
 8011876:	781b      	ldrb	r3, [r3, #0]
 8011878:	2b44      	cmp	r3, #68	; 0x44
 801187a:	d114      	bne.n	80118a6 <pass_route3+0x58a>
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	3301      	adds	r3, #1
 8011880:	4a51      	ldr	r2, [pc, #324]	; (80119c8 <pass_route3+0x6ac>)
 8011882:	5cd3      	ldrb	r3, [r2, r3]
 8011884:	2b11      	cmp	r3, #17
 8011886:	d10e      	bne.n	80118a6 <pass_route3+0x58a>
			s_flag = 0;
 8011888:	2300      	movs	r3, #0
 801188a:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 801188c:	78bb      	ldrb	r3, [r7, #2]
 801188e:	4a4c      	ldr	r2, [pc, #304]	; (80119c0 <pass_route3+0x6a4>)
 8011890:	2140      	movs	r1, #64	; 0x40
 8011892:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011894:	4a4b      	ldr	r2, [pc, #300]	; (80119c4 <pass_route3+0x6a8>)
 8011896:	8813      	ldrh	r3, [r2, #0]
 8011898:	f043 0308 	orr.w	r3, r3, #8
 801189c:	8013      	strh	r3, [r2, #0]
			i++;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	3301      	adds	r3, #1
 80118a2:	607b      	str	r3, [r7, #4]
 80118a4:	e07b      	b.n	801199e <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x44){
 80118a6:	4b47      	ldr	r3, [pc, #284]	; (80119c4 <pass_route3+0x6a8>)
 80118a8:	881b      	ldrh	r3, [r3, #0]
 80118aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80118ae:	b2db      	uxtb	r3, r3
 80118b0:	2b01      	cmp	r3, #1
 80118b2:	d11a      	bne.n	80118ea <pass_route3+0x5ce>
 80118b4:	4a44      	ldr	r2, [pc, #272]	; (80119c8 <pass_route3+0x6ac>)
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	4413      	add	r3, r2
 80118ba:	781b      	ldrb	r3, [r3, #0]
 80118bc:	2b11      	cmp	r3, #17
 80118be:	d114      	bne.n	80118ea <pass_route3+0x5ce>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	3301      	adds	r3, #1
 80118c4:	4a40      	ldr	r2, [pc, #256]	; (80119c8 <pass_route3+0x6ac>)
 80118c6:	5cd3      	ldrb	r3, [r2, r3]
 80118c8:	2b44      	cmp	r3, #68	; 0x44
 80118ca:	d10e      	bne.n	80118ea <pass_route3+0x5ce>
			s_flag = 0;
 80118cc:	2300      	movs	r3, #0
 80118ce:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 80118d0:	78bb      	ldrb	r3, [r7, #2]
 80118d2:	4a3b      	ldr	r2, [pc, #236]	; (80119c0 <pass_route3+0x6a4>)
 80118d4:	2140      	movs	r1, #64	; 0x40
 80118d6:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 80118d8:	4a3a      	ldr	r2, [pc, #232]	; (80119c4 <pass_route3+0x6a8>)
 80118da:	8813      	ldrh	r3, [r2, #0]
 80118dc:	f043 0308 	orr.w	r3, r3, #8
 80118e0:	8013      	strh	r3, [r2, #0]
			i++;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	3301      	adds	r3, #1
 80118e6:	607b      	str	r3, [r7, #4]
 80118e8:	e059      	b.n	801199e <pass_route3+0x682>
		}else if(route[i] == 0x44){
 80118ea:	4a37      	ldr	r2, [pc, #220]	; (80119c8 <pass_route3+0x6ac>)
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	4413      	add	r3, r2
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	2b44      	cmp	r3, #68	; 0x44
 80118f4:	d107      	bne.n	8011906 <pass_route3+0x5ea>
			pass[p] = -1;							//a右スラローム
 80118f6:	78bb      	ldrb	r3, [r7, #2]
 80118f8:	4a31      	ldr	r2, [pc, #196]	; (80119c0 <pass_route3+0x6a4>)
 80118fa:	21ff      	movs	r1, #255	; 0xff
 80118fc:	54d1      	strb	r1, [r2, r3]
			i++;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	3301      	adds	r3, #1
 8011902:	607b      	str	r3, [r7, #4]
 8011904:	e04b      	b.n	801199e <pass_route3+0x682>
		}else if(route[i] == 0x11){
 8011906:	4a30      	ldr	r2, [pc, #192]	; (80119c8 <pass_route3+0x6ac>)
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	4413      	add	r3, r2
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	2b11      	cmp	r3, #17
 8011910:	d107      	bne.n	8011922 <pass_route3+0x606>
			pass[p] = -2;							//a左スラローム
 8011912:	78bb      	ldrb	r3, [r7, #2]
 8011914:	4a2a      	ldr	r2, [pc, #168]	; (80119c0 <pass_route3+0x6a4>)
 8011916:	21fe      	movs	r1, #254	; 0xfe
 8011918:	54d1      	strb	r1, [r2, r3]
			i++;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	3301      	adds	r3, #1
 801191e:	607b      	str	r3, [r7, #4]
 8011920:	e03d      	b.n	801199e <pass_route3+0x682>
		}else if(route[i] == 0x77){
 8011922:	4a29      	ldr	r2, [pc, #164]	; (80119c8 <pass_route3+0x6ac>)
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	4413      	add	r3, r2
 8011928:	781b      	ldrb	r3, [r3, #0]
 801192a:	2b77      	cmp	r3, #119	; 0x77
 801192c:	d137      	bne.n	801199e <pass_route3+0x682>
			if(s_flag){
 801192e:	78fb      	ldrb	r3, [r7, #3]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d012      	beq.n	801195a <pass_route3+0x63e>
				pass[p-1]++;						//aスラローム前半直線追加
 8011934:	78bb      	ldrb	r3, [r7, #2]
 8011936:	3b01      	subs	r3, #1
 8011938:	4a21      	ldr	r2, [pc, #132]	; (80119c0 <pass_route3+0x6a4>)
 801193a:	56d2      	ldrsb	r2, [r2, r3]
 801193c:	b2d2      	uxtb	r2, r2
 801193e:	3201      	adds	r2, #1
 8011940:	b2d2      	uxtb	r2, r2
 8011942:	b251      	sxtb	r1, r2
 8011944:	4a1e      	ldr	r2, [pc, #120]	; (80119c0 <pass_route3+0x6a4>)
 8011946:	54d1      	strb	r1, [r2, r3]
				p--;
 8011948:	78bb      	ldrb	r3, [r7, #2]
 801194a:	3b01      	subs	r3, #1
 801194c:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 801194e:	2300      	movs	r3, #0
 8011950:	70fb      	strb	r3, [r7, #3]
				i++;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	3301      	adds	r3, #1
 8011956:	607b      	str	r3, [r7, #4]
 8011958:	e021      	b.n	801199e <pass_route3+0x682>
			}else{
				s++;
 801195a:	787b      	ldrb	r3, [r7, #1]
 801195c:	3301      	adds	r3, #1
 801195e:	707b      	strb	r3, [r7, #1]
				pass[p] = s;						//aもし半直線1つだけの場合whileには入らない
 8011960:	78bb      	ldrb	r3, [r7, #2]
 8011962:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8011966:	4a16      	ldr	r2, [pc, #88]	; (80119c0 <pass_route3+0x6a4>)
 8011968:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 801196a:	e00c      	b.n	8011986 <pass_route3+0x66a>
					s_flag = 1;
 801196c:	2301      	movs	r3, #1
 801196e:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;					//a半直線2つ以上続く場合、最後半直線は大回り用に残す
 8011970:	78bb      	ldrb	r3, [r7, #2]
 8011972:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8011976:	4a12      	ldr	r2, [pc, #72]	; (80119c0 <pass_route3+0x6a4>)
 8011978:	54d1      	strb	r1, [r2, r3]
					i++;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	3301      	adds	r3, #1
 801197e:	607b      	str	r3, [r7, #4]
					s++;
 8011980:	787b      	ldrb	r3, [r7, #1]
 8011982:	3301      	adds	r3, #1
 8011984:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	3301      	adds	r3, #1
 801198a:	4a0f      	ldr	r2, [pc, #60]	; (80119c8 <pass_route3+0x6ac>)
 801198c:	5cd3      	ldrb	r3, [r2, r3]
 801198e:	2b77      	cmp	r3, #119	; 0x77
 8011990:	d0ec      	beq.n	801196c <pass_route3+0x650>
				}
				if(!s_flag){
 8011992:	78fb      	ldrb	r3, [r7, #3]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d102      	bne.n	801199e <pass_route3+0x682>
					i++;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	3301      	adds	r3, #1
 801199c:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 801199e:	78bb      	ldrb	r3, [r7, #2]
 80119a0:	3301      	adds	r3, #1
 80119a2:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	3b01      	subs	r3, #1
 80119a8:	4a07      	ldr	r2, [pc, #28]	; (80119c8 <pass_route3+0x6ac>)
 80119aa:	5cd3      	ldrb	r3, [r2, r3]
 80119ac:	2bff      	cmp	r3, #255	; 0xff
 80119ae:	f47f acd4 	bne.w	801135a <pass_route3+0x3e>
	}
}
 80119b2:	bf00      	nop
 80119b4:	370c      	adds	r7, #12
 80119b6:	46bd      	mov	sp, r7
 80119b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119bc:	4770      	bx	lr
 80119be:	bf00      	nop
 80119c0:	20000350 	.word	0x20000350
 80119c4:	20000f64 	.word	0x20000f64
 80119c8:	20000c54 	.word	0x20000c54

080119cc <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b082      	sub	sp, #8
 80119d0:	af00      	add	r7, sp, #0
	printf("eprom func start \n");
 80119d2:	4818      	ldr	r0, [pc, #96]	; (8011a34 <store_map_in_eeprom+0x68>)
 80119d4:	f000 ff28 	bl	8012828 <puts>
	eeprom_enable_write();
 80119d8:	f7fa fe18 	bl	800c60c <eeprom_enable_write>
	printf("eprom enable_write fin \n");
 80119dc:	4816      	ldr	r0, [pc, #88]	; (8011a38 <store_map_in_eeprom+0x6c>)
 80119de:	f000 ff23 	bl	8012828 <puts>
	int i;
	for(i = 0; i < 16; i++){
 80119e2:	2300      	movs	r3, #0
 80119e4:	607b      	str	r3, [r7, #4]
 80119e6:	e01b      	b.n	8011a20 <store_map_in_eeprom+0x54>
		int j;
		for(j = 0; j < 16; j++){
 80119e8:	2300      	movs	r3, #0
 80119ea:	603b      	str	r3, [r7, #0]
 80119ec:	e012      	b.n	8011a14 <store_map_in_eeprom+0x48>
			eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	011a      	lsls	r2, r3, #4
 80119f2:	683b      	ldr	r3, [r7, #0]
 80119f4:	4413      	add	r3, r2
 80119f6:	4618      	mov	r0, r3
 80119f8:	4a10      	ldr	r2, [pc, #64]	; (8011a3c <store_map_in_eeprom+0x70>)
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	011b      	lsls	r3, r3, #4
 80119fe:	441a      	add	r2, r3
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	4413      	add	r3, r2
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	b29b      	uxth	r3, r3
 8011a08:	4619      	mov	r1, r3
 8011a0a:	f7fa fe2a 	bl	800c662 <eeprom_write_halfword>
		for(j = 0; j < 16; j++){
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	3301      	adds	r3, #1
 8011a12:	603b      	str	r3, [r7, #0]
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	2b0f      	cmp	r3, #15
 8011a18:	dde9      	ble.n	80119ee <store_map_in_eeprom+0x22>
	for(i = 0; i < 16; i++){
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	3301      	adds	r3, #1
 8011a1e:	607b      	str	r3, [r7, #4]
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2b0f      	cmp	r3, #15
 8011a24:	dde0      	ble.n	80119e8 <store_map_in_eeprom+0x1c>
		}
	}
	eeprom_disable_write();
 8011a26:	f7fa fe15 	bl	800c654 <eeprom_disable_write>
}
 8011a2a:	bf00      	nop
 8011a2c:	3708      	adds	r7, #8
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}
 8011a32:	bf00      	nop
 8011a34:	08013dc8 	.word	0x08013dc8
 8011a38:	08013ddc 	.word	0x08013ddc
 8011a3c:	200001ac 	.word	0x200001ac

08011a40 <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b082      	sub	sp, #8
 8011a44:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 16; i++){
 8011a46:	2300      	movs	r3, #0
 8011a48:	607b      	str	r3, [r7, #4]
 8011a4a:	e01c      	b.n	8011a86 <load_map_from_eeprom+0x46>
		int j;
		for(j = 0; j < 16; j++){
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	603b      	str	r3, [r7, #0]
 8011a50:	e013      	b.n	8011a7a <load_map_from_eeprom+0x3a>
			map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	011a      	lsls	r2, r3, #4
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	4413      	add	r3, r2
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f7fa fe1e 	bl	800c69c <eeprom_read_halfword>
 8011a60:	4603      	mov	r3, r0
 8011a62:	b2d9      	uxtb	r1, r3
 8011a64:	4a0b      	ldr	r2, [pc, #44]	; (8011a94 <load_map_from_eeprom+0x54>)
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	011b      	lsls	r3, r3, #4
 8011a6a:	441a      	add	r2, r3
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	4413      	add	r3, r2
 8011a70:	460a      	mov	r2, r1
 8011a72:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 16; j++){
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	3301      	adds	r3, #1
 8011a78:	603b      	str	r3, [r7, #0]
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	2b0f      	cmp	r3, #15
 8011a7e:	dde8      	ble.n	8011a52 <load_map_from_eeprom+0x12>
	for(i = 0; i < 16; i++){
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	3301      	adds	r3, #1
 8011a84:	607b      	str	r3, [r7, #4]
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	2b0f      	cmp	r3, #15
 8011a8a:	dddf      	ble.n	8011a4c <load_map_from_eeprom+0xc>
		}
	}
}
 8011a8c:	bf00      	nop
 8011a8e:	3708      	adds	r7, #8
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}
 8011a94:	200001ac 	.word	0x200001ac

08011a98 <sensor_init>:

#include "global.h"


void sensor_init(void){
 8011a98:	b480      	push	{r7}
 8011a9a:	af00      	add	r7, sp, #0
	tp = 0;
 8011a9c:	4b0e      	ldr	r3, [pc, #56]	; (8011ad8 <sensor_init+0x40>)
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	701a      	strb	r2, [r3, #0]
	ad_l = ad_r = ad_fr = ad_fl = 0;
 8011aa2:	4b0e      	ldr	r3, [pc, #56]	; (8011adc <sensor_init+0x44>)
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	601a      	str	r2, [r3, #0]
 8011aa8:	4b0c      	ldr	r3, [pc, #48]	; (8011adc <sensor_init+0x44>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	4a0c      	ldr	r2, [pc, #48]	; (8011ae0 <sensor_init+0x48>)
 8011aae:	6013      	str	r3, [r2, #0]
 8011ab0:	4b0b      	ldr	r3, [pc, #44]	; (8011ae0 <sensor_init+0x48>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	4a0b      	ldr	r2, [pc, #44]	; (8011ae4 <sensor_init+0x4c>)
 8011ab6:	6013      	str	r3, [r2, #0]
 8011ab8:	4b0a      	ldr	r3, [pc, #40]	; (8011ae4 <sensor_init+0x4c>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	4a0a      	ldr	r2, [pc, #40]	; (8011ae8 <sensor_init+0x50>)
 8011abe:	6013      	str	r3, [r2, #0]
	base_l = base_r = 0;
 8011ac0:	4b0a      	ldr	r3, [pc, #40]	; (8011aec <sensor_init+0x54>)
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	801a      	strh	r2, [r3, #0]
 8011ac6:	4b09      	ldr	r3, [pc, #36]	; (8011aec <sensor_init+0x54>)
 8011ac8:	881a      	ldrh	r2, [r3, #0]
 8011aca:	4b09      	ldr	r3, [pc, #36]	; (8011af0 <sensor_init+0x58>)
 8011acc:	801a      	strh	r2, [r3, #0]
}
 8011ace:	bf00      	nop
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad6:	4770      	bx	lr
 8011ad8:	200012a0 	.word	0x200012a0
 8011adc:	20000d54 	.word	0x20000d54
 8011ae0:	20000c00 	.word	0x20000c00
 8011ae4:	20000f60 	.word	0x20000f60
 8011ae8:	20000afc 	.word	0x20000afc
 8011aec:	200002c0 	.word	0x200002c0
 8011af0:	2000034c 	.word	0x2000034c

08011af4 <get_base>:


uint8_t get_base(){
 8011af4:	b480      	push	{r7}
 8011af6:	b083      	sub	sp, #12
 8011af8:	af00      	add	r7, sp, #0
	uint8_t res = 1;									//for return
 8011afa:	2301      	movs	r3, #1
 8011afc:	71fb      	strb	r3, [r7, #7]

	base_l = ad_l;										//sensor value base L
 8011afe:	4b08      	ldr	r3, [pc, #32]	; (8011b20 <get_base+0x2c>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	b29a      	uxth	r2, r3
 8011b04:	4b07      	ldr	r3, [pc, #28]	; (8011b24 <get_base+0x30>)
 8011b06:	801a      	strh	r2, [r3, #0]
	base_r = ad_r;										//sensor value base R
 8011b08:	4b07      	ldr	r3, [pc, #28]	; (8011b28 <get_base+0x34>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	b29a      	uxth	r2, r3
 8011b0e:	4b07      	ldr	r3, [pc, #28]	; (8011b2c <get_base+0x38>)
 8011b10:	801a      	strh	r2, [r3, #0]

	return res;											//
 8011b12:	79fb      	ldrb	r3, [r7, #7]
}
 8011b14:	4618      	mov	r0, r3
 8011b16:	370c      	adds	r7, #12
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1e:	4770      	bx	lr
 8011b20:	20000afc 	.word	0x20000afc
 8011b24:	2000034c 	.word	0x2000034c
 8011b28:	20000f60 	.word	0x20000f60
 8011b2c:	200002c0 	.word	0x200002c0

08011b30 <get_wall_info>:


void get_wall_info(){
 8011b30:	b480      	push	{r7}
 8011b32:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 8011b34:	4b16      	ldr	r3, [pc, #88]	; (8011b90 <get_wall_info+0x60>)
 8011b36:	2200      	movs	r2, #0
 8011b38:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 8011b3a:	4b16      	ldr	r3, [pc, #88]	; (8011b94 <get_wall_info+0x64>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	2b78      	cmp	r3, #120	; 0x78
 8011b40:	d803      	bhi.n	8011b4a <get_wall_info+0x1a>
 8011b42:	4b15      	ldr	r3, [pc, #84]	; (8011b98 <get_wall_info+0x68>)
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	2bc8      	cmp	r3, #200	; 0xc8
 8011b48:	d906      	bls.n	8011b58 <get_wall_info+0x28>
		wall_info |= 0x88;								//forward check
 8011b4a:	4b11      	ldr	r3, [pc, #68]	; (8011b90 <get_wall_info+0x60>)
 8011b4c:	781b      	ldrb	r3, [r3, #0]
 8011b4e:	f063 0377 	orn	r3, r3, #119	; 0x77
 8011b52:	b2da      	uxtb	r2, r3
 8011b54:	4b0e      	ldr	r3, [pc, #56]	; (8011b90 <get_wall_info+0x60>)
 8011b56:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 8011b58:	4b10      	ldr	r3, [pc, #64]	; (8011b9c <get_wall_info+0x6c>)
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	2b78      	cmp	r3, #120	; 0x78
 8011b5e:	d906      	bls.n	8011b6e <get_wall_info+0x3e>
		wall_info |= 0x44;								//right check
 8011b60:	4b0b      	ldr	r3, [pc, #44]	; (8011b90 <get_wall_info+0x60>)
 8011b62:	781b      	ldrb	r3, [r3, #0]
 8011b64:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8011b68:	b2da      	uxtb	r2, r3
 8011b6a:	4b09      	ldr	r3, [pc, #36]	; (8011b90 <get_wall_info+0x60>)
 8011b6c:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 8011b6e:	4b0c      	ldr	r3, [pc, #48]	; (8011ba0 <get_wall_info+0x70>)
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	2b8c      	cmp	r3, #140	; 0x8c
 8011b74:	d906      	bls.n	8011b84 <get_wall_info+0x54>
		wall_info |= 0x11;								//light check
 8011b76:	4b06      	ldr	r3, [pc, #24]	; (8011b90 <get_wall_info+0x60>)
 8011b78:	781b      	ldrb	r3, [r3, #0]
 8011b7a:	f043 0311 	orr.w	r3, r3, #17
 8011b7e:	b2da      	uxtb	r2, r3
 8011b80:	4b03      	ldr	r3, [pc, #12]	; (8011b90 <get_wall_info+0x60>)
 8011b82:	701a      	strb	r2, [r3, #0]
	}
}
 8011b84:	bf00      	nop
 8011b86:	46bd      	mov	sp, r7
 8011b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8c:	4770      	bx	lr
 8011b8e:	bf00      	nop
 8011b90:	200002c8 	.word	0x200002c8
 8011b94:	20000c00 	.word	0x20000c00
 8011b98:	20000d54 	.word	0x20000d54
 8011b9c:	20000f60 	.word	0x20000f60
 8011ba0:	20000afc 	.word	0x20000afc

08011ba4 <led_write>:
//led_write
//aモード選択用LEDのON-OFF
//a引数：led1(0=>OFF, 1=>ON), led2(0=>OFF, 1=>ON), led3(0=>OFF, 1=>ON)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write(uint8_t led1, uint8_t led2, uint8_t led3){
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b082      	sub	sp, #8
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	4603      	mov	r3, r0
 8011bac:	71fb      	strb	r3, [r7, #7]
 8011bae:	460b      	mov	r3, r1
 8011bb0:	71bb      	strb	r3, [r7, #6]
 8011bb2:	4613      	mov	r3, r2
 8011bb4:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8011bb6:	79fb      	ldrb	r3, [r7, #7]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d005      	beq.n	8011bc8 <led_write+0x24>
 8011bbc:	2201      	movs	r2, #1
 8011bbe:	2110      	movs	r1, #16
 8011bc0:	4814      	ldr	r0, [pc, #80]	; (8011c14 <led_write+0x70>)
 8011bc2:	f7f0 fb9f 	bl	8002304 <HAL_GPIO_WritePin>
 8011bc6:	e004      	b.n	8011bd2 <led_write+0x2e>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8011bc8:	2200      	movs	r2, #0
 8011bca:	2110      	movs	r1, #16
 8011bcc:	4811      	ldr	r0, [pc, #68]	; (8011c14 <led_write+0x70>)
 8011bce:	f7f0 fb99 	bl	8002304 <HAL_GPIO_WritePin>

	if(led2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8011bd2:	79bb      	ldrb	r3, [r7, #6]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d005      	beq.n	8011be4 <led_write+0x40>
 8011bd8:	2201      	movs	r2, #1
 8011bda:	2140      	movs	r1, #64	; 0x40
 8011bdc:	480d      	ldr	r0, [pc, #52]	; (8011c14 <led_write+0x70>)
 8011bde:	f7f0 fb91 	bl	8002304 <HAL_GPIO_WritePin>
 8011be2:	e004      	b.n	8011bee <led_write+0x4a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8011be4:	2200      	movs	r2, #0
 8011be6:	2140      	movs	r1, #64	; 0x40
 8011be8:	480a      	ldr	r0, [pc, #40]	; (8011c14 <led_write+0x70>)
 8011bea:	f7f0 fb8b 	bl	8002304 <HAL_GPIO_WritePin>

	if(led3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8011bee:	797b      	ldrb	r3, [r7, #5]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d005      	beq.n	8011c00 <led_write+0x5c>
 8011bf4:	2201      	movs	r2, #1
 8011bf6:	2180      	movs	r1, #128	; 0x80
 8011bf8:	4806      	ldr	r0, [pc, #24]	; (8011c14 <led_write+0x70>)
 8011bfa:	f7f0 fb83 	bl	8002304 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 8011bfe:	e004      	b.n	8011c0a <led_write+0x66>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8011c00:	2200      	movs	r2, #0
 8011c02:	2180      	movs	r1, #128	; 0x80
 8011c04:	4803      	ldr	r0, [pc, #12]	; (8011c14 <led_write+0x70>)
 8011c06:	f7f0 fb7d 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011c0a:	bf00      	nop
 8011c0c:	3708      	adds	r7, #8
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}
 8011c12:	bf00      	nop
 8011c14:	40020000 	.word	0x40020000

08011c18 <full_led_write>:
//full_led_write
//aフルカラーLEDの色選択
//a引数：fulled(0=>OFF, 1=>a赤, 2=>緑, 3=>青, 4=>青緑, 5=>紫, 6=>黄, 7=>白)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void full_led_write(uint8_t fulled){
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b082      	sub	sp, #8
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	4603      	mov	r3, r0
 8011c20:	71fb      	strb	r3, [r7, #7]
	if(fulled == 0){
 8011c22:	79fb      	ldrb	r3, [r7, #7]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d112      	bne.n	8011c4e <full_led_write+0x36>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8011c28:	2201      	movs	r2, #1
 8011c2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011c2e:	4856      	ldr	r0, [pc, #344]	; (8011d88 <full_led_write+0x170>)
 8011c30:	f7f0 fb68 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8011c34:	2201      	movs	r2, #1
 8011c36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011c3a:	4853      	ldr	r0, [pc, #332]	; (8011d88 <full_led_write+0x170>)
 8011c3c:	f7f0 fb62 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8011c40:	2201      	movs	r2, #1
 8011c42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011c46:	4851      	ldr	r0, [pc, #324]	; (8011d8c <full_led_write+0x174>)
 8011c48:	f7f0 fb5c 	bl	8002304 <HAL_GPIO_WritePin>
	else if(fulled == 7){
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 8011c4c:	e098      	b.n	8011d80 <full_led_write+0x168>
	else if(fulled == 1){
 8011c4e:	79fb      	ldrb	r3, [r7, #7]
 8011c50:	2b01      	cmp	r3, #1
 8011c52:	d112      	bne.n	8011c7a <full_led_write+0x62>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8011c54:	2201      	movs	r2, #1
 8011c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011c5a:	484b      	ldr	r0, [pc, #300]	; (8011d88 <full_led_write+0x170>)
 8011c5c:	f7f0 fb52 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8011c60:	2201      	movs	r2, #1
 8011c62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011c66:	4848      	ldr	r0, [pc, #288]	; (8011d88 <full_led_write+0x170>)
 8011c68:	f7f0 fb4c 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011c72:	4846      	ldr	r0, [pc, #280]	; (8011d8c <full_led_write+0x174>)
 8011c74:	f7f0 fb46 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011c78:	e082      	b.n	8011d80 <full_led_write+0x168>
	else if(fulled == 2){
 8011c7a:	79fb      	ldrb	r3, [r7, #7]
 8011c7c:	2b02      	cmp	r3, #2
 8011c7e:	d112      	bne.n	8011ca6 <full_led_write+0x8e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8011c80:	2201      	movs	r2, #1
 8011c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011c86:	4840      	ldr	r0, [pc, #256]	; (8011d88 <full_led_write+0x170>)
 8011c88:	f7f0 fb3c 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011c92:	483d      	ldr	r0, [pc, #244]	; (8011d88 <full_led_write+0x170>)
 8011c94:	f7f0 fb36 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8011c98:	2201      	movs	r2, #1
 8011c9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011c9e:	483b      	ldr	r0, [pc, #236]	; (8011d8c <full_led_write+0x174>)
 8011ca0:	f7f0 fb30 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011ca4:	e06c      	b.n	8011d80 <full_led_write+0x168>
	else if(fulled == 3){
 8011ca6:	79fb      	ldrb	r3, [r7, #7]
 8011ca8:	2b03      	cmp	r3, #3
 8011caa:	d112      	bne.n	8011cd2 <full_led_write+0xba>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8011cac:	2200      	movs	r2, #0
 8011cae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011cb2:	4835      	ldr	r0, [pc, #212]	; (8011d88 <full_led_write+0x170>)
 8011cb4:	f7f0 fb26 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8011cb8:	2201      	movs	r2, #1
 8011cba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011cbe:	4832      	ldr	r0, [pc, #200]	; (8011d88 <full_led_write+0x170>)
 8011cc0:	f7f0 fb20 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8011cc4:	2201      	movs	r2, #1
 8011cc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011cca:	4830      	ldr	r0, [pc, #192]	; (8011d8c <full_led_write+0x174>)
 8011ccc:	f7f0 fb1a 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011cd0:	e056      	b.n	8011d80 <full_led_write+0x168>
	else if(fulled == 4){
 8011cd2:	79fb      	ldrb	r3, [r7, #7]
 8011cd4:	2b04      	cmp	r3, #4
 8011cd6:	d112      	bne.n	8011cfe <full_led_write+0xe6>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8011cd8:	2200      	movs	r2, #0
 8011cda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011cde:	482a      	ldr	r0, [pc, #168]	; (8011d88 <full_led_write+0x170>)
 8011ce0:	f7f0 fb10 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011cea:	4827      	ldr	r0, [pc, #156]	; (8011d88 <full_led_write+0x170>)
 8011cec:	f7f0 fb0a 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8011cf0:	2201      	movs	r2, #1
 8011cf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011cf6:	4825      	ldr	r0, [pc, #148]	; (8011d8c <full_led_write+0x174>)
 8011cf8:	f7f0 fb04 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011cfc:	e040      	b.n	8011d80 <full_led_write+0x168>
	else if(fulled == 5){
 8011cfe:	79fb      	ldrb	r3, [r7, #7]
 8011d00:	2b05      	cmp	r3, #5
 8011d02:	d112      	bne.n	8011d2a <full_led_write+0x112>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8011d04:	2200      	movs	r2, #0
 8011d06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011d0a:	481f      	ldr	r0, [pc, #124]	; (8011d88 <full_led_write+0x170>)
 8011d0c:	f7f0 fafa 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8011d10:	2201      	movs	r2, #1
 8011d12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011d16:	481c      	ldr	r0, [pc, #112]	; (8011d88 <full_led_write+0x170>)
 8011d18:	f7f0 faf4 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011d22:	481a      	ldr	r0, [pc, #104]	; (8011d8c <full_led_write+0x174>)
 8011d24:	f7f0 faee 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011d28:	e02a      	b.n	8011d80 <full_led_write+0x168>
	else if(fulled == 6){
 8011d2a:	79fb      	ldrb	r3, [r7, #7]
 8011d2c:	2b06      	cmp	r3, #6
 8011d2e:	d112      	bne.n	8011d56 <full_led_write+0x13e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8011d30:	2201      	movs	r2, #1
 8011d32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011d36:	4814      	ldr	r0, [pc, #80]	; (8011d88 <full_led_write+0x170>)
 8011d38:	f7f0 fae4 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011d42:	4811      	ldr	r0, [pc, #68]	; (8011d88 <full_led_write+0x170>)
 8011d44:	f7f0 fade 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8011d48:	2200      	movs	r2, #0
 8011d4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011d4e:	480f      	ldr	r0, [pc, #60]	; (8011d8c <full_led_write+0x174>)
 8011d50:	f7f0 fad8 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011d54:	e014      	b.n	8011d80 <full_led_write+0x168>
	else if(fulled == 7){
 8011d56:	79fb      	ldrb	r3, [r7, #7]
 8011d58:	2b07      	cmp	r3, #7
 8011d5a:	d111      	bne.n	8011d80 <full_led_write+0x168>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011d62:	4809      	ldr	r0, [pc, #36]	; (8011d88 <full_led_write+0x170>)
 8011d64:	f7f0 face 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8011d68:	2200      	movs	r2, #0
 8011d6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011d6e:	4806      	ldr	r0, [pc, #24]	; (8011d88 <full_led_write+0x170>)
 8011d70:	f7f0 fac8 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8011d74:	2200      	movs	r2, #0
 8011d76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011d7a:	4804      	ldr	r0, [pc, #16]	; (8011d8c <full_led_write+0x174>)
 8011d7c:	f7f0 fac2 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011d80:	bf00      	nop
 8011d82:	3708      	adds	r7, #8
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}
 8011d88:	40020400 	.word	0x40020400
 8011d8c:	40020800 	.word	0x40020800

08011d90 <sensor_test>:
//sensor_test
//a壁センサーとジャイロセンサーの値確認
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_test(){
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b08c      	sub	sp, #48	; 0x30
 8011d94:	af02      	add	r7, sp, #8

	int mode = 0;
 8011d96:	2300      	movs	r3, #0
 8011d98:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Mode : %d\n", mode);
 8011d9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d9c:	4881      	ldr	r0, [pc, #516]	; (8011fa4 <sensor_test+0x214>)
 8011d9e:	f000 fccf 	bl	8012740 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8011da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da4:	b2db      	uxtb	r3, r3
 8011da6:	f003 0301 	and.w	r3, r3, #1
 8011daa:	b2d8      	uxtb	r0, r3
 8011dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dae:	b2db      	uxtb	r3, r3
 8011db0:	f003 0302 	and.w	r3, r3, #2
 8011db4:	b2d9      	uxtb	r1, r3
 8011db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db8:	b2db      	uxtb	r3, r3
 8011dba:	f003 0304 	and.w	r3, r3, #4
 8011dbe:	b2db      	uxtb	r3, r3
 8011dc0:	461a      	mov	r2, r3
 8011dc2:	f7ff feef 	bl	8011ba4 <led_write>
		  if(dist_r >= 20){
 8011dc6:	4b78      	ldr	r3, [pc, #480]	; (8011fa8 <sensor_test+0x218>)
 8011dc8:	edd3 7a00 	vldr	s15, [r3]
 8011dcc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8011dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dd8:	db0f      	blt.n	8011dfa <sensor_test+0x6a>
			  mode++;
 8011dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ddc:	3301      	adds	r3, #1
 8011dde:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8011de0:	4b71      	ldr	r3, [pc, #452]	; (8011fa8 <sensor_test+0x218>)
 8011de2:	f04f 0200 	mov.w	r2, #0
 8011de6:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8011de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dea:	2b07      	cmp	r3, #7
 8011dec:	dd01      	ble.n	8011df2 <sensor_test+0x62>
				  mode = 0;
 8011dee:	2300      	movs	r3, #0
 8011df0:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 8011df2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011df4:	486b      	ldr	r0, [pc, #428]	; (8011fa4 <sensor_test+0x214>)
 8011df6:	f000 fca3 	bl	8012740 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8011dfa:	4b6b      	ldr	r3, [pc, #428]	; (8011fa8 <sensor_test+0x218>)
 8011dfc:	edd3 7a00 	vldr	s15, [r3]
 8011e00:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8011e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e0c:	d80f      	bhi.n	8011e2e <sensor_test+0x9e>
			  mode--;
 8011e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e10:	3b01      	subs	r3, #1
 8011e12:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8011e14:	4b64      	ldr	r3, [pc, #400]	; (8011fa8 <sensor_test+0x218>)
 8011e16:	f04f 0200 	mov.w	r2, #0
 8011e1a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8011e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	da01      	bge.n	8011e26 <sensor_test+0x96>
				  mode = 7;
 8011e22:	2307      	movs	r3, #7
 8011e24:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 8011e26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e28:	485e      	ldr	r0, [pc, #376]	; (8011fa4 <sensor_test+0x214>)
 8011e2a:	f000 fc89 	bl	8012740 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8011e2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011e32:	485e      	ldr	r0, [pc, #376]	; (8011fac <sensor_test+0x21c>)
 8011e34:	f7f0 fa4e 	bl	80022d4 <HAL_GPIO_ReadPin>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d1b1      	bne.n	8011da2 <sensor_test+0x12>
			  HAL_Delay(50);
 8011e3e:	2032      	movs	r0, #50	; 0x32
 8011e40:	f7ef f8ec 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8011e44:	bf00      	nop
 8011e46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011e4a:	4858      	ldr	r0, [pc, #352]	; (8011fac <sensor_test+0x21c>)
 8011e4c:	f7f0 fa42 	bl	80022d4 <HAL_GPIO_ReadPin>
 8011e50:	4603      	mov	r3, r0
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d0f7      	beq.n	8011e46 <sensor_test+0xb6>

			  drive_ready();
 8011e56:	f7f2 ff13 	bl	8004c80 <drive_ready>

			  switch(mode){
 8011e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e5c:	2b07      	cmp	r3, #7
 8011e5e:	d8a0      	bhi.n	8011da2 <sensor_test+0x12>
 8011e60:	a201      	add	r2, pc, #4	; (adr r2, 8011e68 <sensor_test+0xd8>)
 8011e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e66:	bf00      	nop
 8011e68:	08011e89 	.word	0x08011e89
 8011e6c:	08011e8f 	.word	0x08011e8f
 8011e70:	08011ee1 	.word	0x08011ee1
 8011e74:	08011da3 	.word	0x08011da3
 8011e78:	08011da3 	.word	0x08011da3
 8011e7c:	08011da3 	.word	0x08011da3
 8011e80:	08011da3 	.word	0x08011da3
 8011e84:	08011da3 	.word	0x08011da3
				case 0:
					get_base();
 8011e88:	f7ff fe34 	bl	8011af4 <get_base>
					break;
 8011e8c:	e089      	b.n	8011fa2 <sensor_test+0x212>
				case 1:
			  		  //----Wall sensor check----
			  		  printf("Wall Sensor Check.\n");
 8011e8e:	4848      	ldr	r0, [pc, #288]	; (8011fb0 <sensor_test+0x220>)
 8011e90:	f000 fcca 	bl	8012828 <puts>
			  		  while(1){
			  			  get_wall_info();
 8011e94:	f7ff fe4c 	bl	8011b30 <get_wall_info>
			  			  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 8011e98:	4b46      	ldr	r3, [pc, #280]	; (8011fb4 <sensor_test+0x224>)
 8011e9a:	781b      	ldrb	r3, [r3, #0]
 8011e9c:	f003 0311 	and.w	r3, r3, #17
 8011ea0:	b2d8      	uxtb	r0, r3
 8011ea2:	4b44      	ldr	r3, [pc, #272]	; (8011fb4 <sensor_test+0x224>)
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8011eaa:	b2d9      	uxtb	r1, r3
 8011eac:	4b41      	ldr	r3, [pc, #260]	; (8011fb4 <sensor_test+0x224>)
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011eb4:	b2db      	uxtb	r3, r3
 8011eb6:	461a      	mov	r2, r3
 8011eb8:	f7ff fe74 	bl	8011ba4 <led_write>
			  			  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 8011ebc:	4b3e      	ldr	r3, [pc, #248]	; (8011fb8 <sensor_test+0x228>)
 8011ebe:	6819      	ldr	r1, [r3, #0]
 8011ec0:	4b3e      	ldr	r3, [pc, #248]	; (8011fbc <sensor_test+0x22c>)
 8011ec2:	681a      	ldr	r2, [r3, #0]
 8011ec4:	4b3e      	ldr	r3, [pc, #248]	; (8011fc0 <sensor_test+0x230>)
 8011ec6:	6818      	ldr	r0, [r3, #0]
 8011ec8:	4b3e      	ldr	r3, [pc, #248]	; (8011fc4 <sensor_test+0x234>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	9300      	str	r3, [sp, #0]
 8011ece:	4603      	mov	r3, r0
 8011ed0:	483d      	ldr	r0, [pc, #244]	; (8011fc8 <sensor_test+0x238>)
 8011ed2:	f000 fc35 	bl	8012740 <iprintf>
			  			  HAL_Delay(333);
 8011ed6:	f240 104d 	movw	r0, #333	; 0x14d
 8011eda:	f7ef f89f 	bl	800101c <HAL_Delay>
			  			  get_wall_info();
 8011ede:	e7d9      	b.n	8011e94 <sensor_test+0x104>
						}
					break;
				case 2:
					//----Gyro sensor check----
					printf("Gyro Sensor Check.\n");
 8011ee0:	483a      	ldr	r0, [pc, #232]	; (8011fcc <sensor_test+0x23c>)
 8011ee2:	f000 fca1 	bl	8012828 <puts>
					int accel_x, accel_y, accel_z;
					int gyro_x, gyro_y, gyro_z;
					int deg_x, deg_y, deg_z;
			  		  while(1){
			  			  accel_x = accel_read_x();
 8011ee6:	f7fa fc81 	bl	800c7ec <accel_read_x>
 8011eea:	eef0 7a40 	vmov.f32	s15, s0
 8011eee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011ef2:	ee17 3a90 	vmov	r3, s15
 8011ef6:	623b      	str	r3, [r7, #32]
			  			  accel_y = accel_read_y();
 8011ef8:	f7fa fc9e 	bl	800c838 <accel_read_y>
 8011efc:	eef0 7a40 	vmov.f32	s15, s0
 8011f00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f04:	ee17 3a90 	vmov	r3, s15
 8011f08:	61fb      	str	r3, [r7, #28]
			  			  accel_z = accel_read_z();
 8011f0a:	f7fa fcbb 	bl	800c884 <accel_read_z>
 8011f0e:	eef0 7a40 	vmov.f32	s15, s0
 8011f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f16:	ee17 3a90 	vmov	r3, s15
 8011f1a:	61bb      	str	r3, [r7, #24]
			  			  gyro_x = gyro_read_x();
 8011f1c:	f7fa fcdc 	bl	800c8d8 <gyro_read_x>
 8011f20:	eef0 7a40 	vmov.f32	s15, s0
 8011f24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f28:	ee17 3a90 	vmov	r3, s15
 8011f2c:	617b      	str	r3, [r7, #20]
			  			  gyro_y = gyro_read_y();
 8011f2e:	f7fa fd0f 	bl	800c950 <gyro_read_y>
 8011f32:	eef0 7a40 	vmov.f32	s15, s0
 8011f36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f3a:	ee17 3a90 	vmov	r3, s15
 8011f3e:	613b      	str	r3, [r7, #16]
			  			  gyro_z = gyro_read_z();
 8011f40:	f7fa fd42 	bl	800c9c8 <gyro_read_z>
 8011f44:	eef0 7a40 	vmov.f32	s15, s0
 8011f48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f4c:	ee17 3a90 	vmov	r3, s15
 8011f50:	60fb      	str	r3, [r7, #12]
			  			  deg_x = degree_x;
 8011f52:	4b1f      	ldr	r3, [pc, #124]	; (8011fd0 <sensor_test+0x240>)
 8011f54:	edd3 7a00 	vldr	s15, [r3]
 8011f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f5c:	ee17 3a90 	vmov	r3, s15
 8011f60:	60bb      	str	r3, [r7, #8]
			  			  deg_y = degree_y;
 8011f62:	4b1c      	ldr	r3, [pc, #112]	; (8011fd4 <sensor_test+0x244>)
 8011f64:	edd3 7a00 	vldr	s15, [r3]
 8011f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f6c:	ee17 3a90 	vmov	r3, s15
 8011f70:	607b      	str	r3, [r7, #4]
			  			  deg_z = degree_z;
 8011f72:	4b19      	ldr	r3, [pc, #100]	; (8011fd8 <sensor_test+0x248>)
 8011f74:	edd3 7a00 	vldr	s15, [r3]
 8011f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f7c:	ee17 3a90 	vmov	r3, s15
 8011f80:	603b      	str	r3, [r7, #0]

			  			  //printf("Accel x: %3d, y: %3d, z: %3d\n", accel_x, accel_y, accel_z);
			  			  printf("Gyro  x: %3d, y: %3d, z: %3d\n", gyro_x, gyro_y, gyro_z);
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	693a      	ldr	r2, [r7, #16]
 8011f86:	6979      	ldr	r1, [r7, #20]
 8011f88:	4814      	ldr	r0, [pc, #80]	; (8011fdc <sensor_test+0x24c>)
 8011f8a:	f000 fbd9 	bl	8012740 <iprintf>
			  			  printf("Deg   x: %3d, y: %3d, z: %3d\n", deg_x, deg_y, deg_z);
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	687a      	ldr	r2, [r7, #4]
 8011f92:	68b9      	ldr	r1, [r7, #8]
 8011f94:	4812      	ldr	r0, [pc, #72]	; (8011fe0 <sensor_test+0x250>)
 8011f96:	f000 fbd3 	bl	8012740 <iprintf>
			  			  HAL_Delay(111);
 8011f9a:	206f      	movs	r0, #111	; 0x6f
 8011f9c:	f7ef f83e 	bl	800101c <HAL_Delay>
			  			  accel_x = accel_read_x();
 8011fa0:	e7a1      	b.n	8011ee6 <sensor_test+0x156>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8011fa2:	e6fe      	b.n	8011da2 <sensor_test+0x12>
 8011fa4:	08013df4 	.word	0x08013df4
 8011fa8:	20000aec 	.word	0x20000aec
 8011fac:	40020000 	.word	0x40020000
 8011fb0:	08013e00 	.word	0x08013e00
 8011fb4:	200002c8 	.word	0x200002c8
 8011fb8:	20000afc 	.word	0x20000afc
 8011fbc:	20000d54 	.word	0x20000d54
 8011fc0:	20000c00 	.word	0x20000c00
 8011fc4:	20000f60 	.word	0x20000f60
 8011fc8:	08013e14 	.word	0x08013e14
 8011fcc:	08013e44 	.word	0x08013e44
 8011fd0:	20000450 	.word	0x20000450
 8011fd4:	20000f70 	.word	0x20000f70
 8011fd8:	20000b5c 	.word	0x20000b5c
 8011fdc:	08013e58 	.word	0x08013e58
 8011fe0:	08013e78 	.word	0x08013e78

08011fe4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011fe4:	b480      	push	{r7}
 8011fe6:	b083      	sub	sp, #12
 8011fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011fea:	2300      	movs	r3, #0
 8011fec:	607b      	str	r3, [r7, #4]
 8011fee:	4b10      	ldr	r3, [pc, #64]	; (8012030 <HAL_MspInit+0x4c>)
 8011ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ff2:	4a0f      	ldr	r2, [pc, #60]	; (8012030 <HAL_MspInit+0x4c>)
 8011ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8011ffa:	4b0d      	ldr	r3, [pc, #52]	; (8012030 <HAL_MspInit+0x4c>)
 8011ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012002:	607b      	str	r3, [r7, #4]
 8012004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012006:	2300      	movs	r3, #0
 8012008:	603b      	str	r3, [r7, #0]
 801200a:	4b09      	ldr	r3, [pc, #36]	; (8012030 <HAL_MspInit+0x4c>)
 801200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801200e:	4a08      	ldr	r2, [pc, #32]	; (8012030 <HAL_MspInit+0x4c>)
 8012010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012014:	6413      	str	r3, [r2, #64]	; 0x40
 8012016:	4b06      	ldr	r3, [pc, #24]	; (8012030 <HAL_MspInit+0x4c>)
 8012018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801201e:	603b      	str	r3, [r7, #0]
 8012020:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012022:	bf00      	nop
 8012024:	370c      	adds	r7, #12
 8012026:	46bd      	mov	sp, r7
 8012028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202c:	4770      	bx	lr
 801202e:	bf00      	nop
 8012030:	40023800 	.word	0x40023800

08012034 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b08a      	sub	sp, #40	; 0x28
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801203c:	f107 0314 	add.w	r3, r7, #20
 8012040:	2200      	movs	r2, #0
 8012042:	601a      	str	r2, [r3, #0]
 8012044:	605a      	str	r2, [r3, #4]
 8012046:	609a      	str	r2, [r3, #8]
 8012048:	60da      	str	r2, [r3, #12]
 801204a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	4a17      	ldr	r2, [pc, #92]	; (80120b0 <HAL_ADC_MspInit+0x7c>)
 8012052:	4293      	cmp	r3, r2
 8012054:	d127      	bne.n	80120a6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8012056:	2300      	movs	r3, #0
 8012058:	613b      	str	r3, [r7, #16]
 801205a:	4b16      	ldr	r3, [pc, #88]	; (80120b4 <HAL_ADC_MspInit+0x80>)
 801205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801205e:	4a15      	ldr	r2, [pc, #84]	; (80120b4 <HAL_ADC_MspInit+0x80>)
 8012060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012064:	6453      	str	r3, [r2, #68]	; 0x44
 8012066:	4b13      	ldr	r3, [pc, #76]	; (80120b4 <HAL_ADC_MspInit+0x80>)
 8012068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801206a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801206e:	613b      	str	r3, [r7, #16]
 8012070:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012072:	2300      	movs	r3, #0
 8012074:	60fb      	str	r3, [r7, #12]
 8012076:	4b0f      	ldr	r3, [pc, #60]	; (80120b4 <HAL_ADC_MspInit+0x80>)
 8012078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801207a:	4a0e      	ldr	r2, [pc, #56]	; (80120b4 <HAL_ADC_MspInit+0x80>)
 801207c:	f043 0301 	orr.w	r3, r3, #1
 8012080:	6313      	str	r3, [r2, #48]	; 0x30
 8012082:	4b0c      	ldr	r3, [pc, #48]	; (80120b4 <HAL_ADC_MspInit+0x80>)
 8012084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012086:	f003 0301 	and.w	r3, r3, #1
 801208a:	60fb      	str	r3, [r7, #12]
 801208c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 801208e:	230f      	movs	r3, #15
 8012090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012092:	2303      	movs	r3, #3
 8012094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012096:	2300      	movs	r3, #0
 8012098:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801209a:	f107 0314 	add.w	r3, r7, #20
 801209e:	4619      	mov	r1, r3
 80120a0:	4805      	ldr	r0, [pc, #20]	; (80120b8 <HAL_ADC_MspInit+0x84>)
 80120a2:	f7ef ff7d 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80120a6:	bf00      	nop
 80120a8:	3728      	adds	r7, #40	; 0x28
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}
 80120ae:	bf00      	nop
 80120b0:	40012000 	.word	0x40012000
 80120b4:	40023800 	.word	0x40023800
 80120b8:	40020000 	.word	0x40020000

080120bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b08a      	sub	sp, #40	; 0x28
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80120c4:	f107 0314 	add.w	r3, r7, #20
 80120c8:	2200      	movs	r2, #0
 80120ca:	601a      	str	r2, [r3, #0]
 80120cc:	605a      	str	r2, [r3, #4]
 80120ce:	609a      	str	r2, [r3, #8]
 80120d0:	60da      	str	r2, [r3, #12]
 80120d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	4a19      	ldr	r2, [pc, #100]	; (8012140 <HAL_SPI_MspInit+0x84>)
 80120da:	4293      	cmp	r3, r2
 80120dc:	d12c      	bne.n	8012138 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80120de:	2300      	movs	r3, #0
 80120e0:	613b      	str	r3, [r7, #16]
 80120e2:	4b18      	ldr	r3, [pc, #96]	; (8012144 <HAL_SPI_MspInit+0x88>)
 80120e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120e6:	4a17      	ldr	r2, [pc, #92]	; (8012144 <HAL_SPI_MspInit+0x88>)
 80120e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80120ec:	6413      	str	r3, [r2, #64]	; 0x40
 80120ee:	4b15      	ldr	r3, [pc, #84]	; (8012144 <HAL_SPI_MspInit+0x88>)
 80120f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80120f6:	613b      	str	r3, [r7, #16]
 80120f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80120fa:	2300      	movs	r3, #0
 80120fc:	60fb      	str	r3, [r7, #12]
 80120fe:	4b11      	ldr	r3, [pc, #68]	; (8012144 <HAL_SPI_MspInit+0x88>)
 8012100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012102:	4a10      	ldr	r2, [pc, #64]	; (8012144 <HAL_SPI_MspInit+0x88>)
 8012104:	f043 0304 	orr.w	r3, r3, #4
 8012108:	6313      	str	r3, [r2, #48]	; 0x30
 801210a:	4b0e      	ldr	r3, [pc, #56]	; (8012144 <HAL_SPI_MspInit+0x88>)
 801210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801210e:	f003 0304 	and.w	r3, r3, #4
 8012112:	60fb      	str	r3, [r7, #12]
 8012114:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8012116:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801211a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801211c:	2302      	movs	r3, #2
 801211e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012120:	2300      	movs	r3, #0
 8012122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012124:	2303      	movs	r3, #3
 8012126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8012128:	2306      	movs	r3, #6
 801212a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801212c:	f107 0314 	add.w	r3, r7, #20
 8012130:	4619      	mov	r1, r3
 8012132:	4805      	ldr	r0, [pc, #20]	; (8012148 <HAL_SPI_MspInit+0x8c>)
 8012134:	f7ef ff34 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8012138:	bf00      	nop
 801213a:	3728      	adds	r7, #40	; 0x28
 801213c:	46bd      	mov	sp, r7
 801213e:	bd80      	pop	{r7, pc}
 8012140:	40003c00 	.word	0x40003c00
 8012144:	40023800 	.word	0x40023800
 8012148:	40020800 	.word	0x40020800

0801214c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b086      	sub	sp, #24
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801215c:	d10e      	bne.n	801217c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 801215e:	2300      	movs	r3, #0
 8012160:	617b      	str	r3, [r7, #20]
 8012162:	4b20      	ldr	r3, [pc, #128]	; (80121e4 <HAL_TIM_Base_MspInit+0x98>)
 8012164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012166:	4a1f      	ldr	r2, [pc, #124]	; (80121e4 <HAL_TIM_Base_MspInit+0x98>)
 8012168:	f043 0301 	orr.w	r3, r3, #1
 801216c:	6413      	str	r3, [r2, #64]	; 0x40
 801216e:	4b1d      	ldr	r3, [pc, #116]	; (80121e4 <HAL_TIM_Base_MspInit+0x98>)
 8012170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012172:	f003 0301 	and.w	r3, r3, #1
 8012176:	617b      	str	r3, [r7, #20]
 8012178:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 801217a:	e02e      	b.n	80121da <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	4a19      	ldr	r2, [pc, #100]	; (80121e8 <HAL_TIM_Base_MspInit+0x9c>)
 8012182:	4293      	cmp	r3, r2
 8012184:	d10e      	bne.n	80121a4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8012186:	2300      	movs	r3, #0
 8012188:	613b      	str	r3, [r7, #16]
 801218a:	4b16      	ldr	r3, [pc, #88]	; (80121e4 <HAL_TIM_Base_MspInit+0x98>)
 801218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801218e:	4a15      	ldr	r2, [pc, #84]	; (80121e4 <HAL_TIM_Base_MspInit+0x98>)
 8012190:	f043 0302 	orr.w	r3, r3, #2
 8012194:	6413      	str	r3, [r2, #64]	; 0x40
 8012196:	4b13      	ldr	r3, [pc, #76]	; (80121e4 <HAL_TIM_Base_MspInit+0x98>)
 8012198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801219a:	f003 0302 	and.w	r3, r3, #2
 801219e:	613b      	str	r3, [r7, #16]
 80121a0:	693b      	ldr	r3, [r7, #16]
}
 80121a2:	e01a      	b.n	80121da <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	4a10      	ldr	r2, [pc, #64]	; (80121ec <HAL_TIM_Base_MspInit+0xa0>)
 80121aa:	4293      	cmp	r3, r2
 80121ac:	d115      	bne.n	80121da <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80121ae:	2300      	movs	r3, #0
 80121b0:	60fb      	str	r3, [r7, #12]
 80121b2:	4b0c      	ldr	r3, [pc, #48]	; (80121e4 <HAL_TIM_Base_MspInit+0x98>)
 80121b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121b6:	4a0b      	ldr	r2, [pc, #44]	; (80121e4 <HAL_TIM_Base_MspInit+0x98>)
 80121b8:	f043 0310 	orr.w	r3, r3, #16
 80121bc:	6413      	str	r3, [r2, #64]	; 0x40
 80121be:	4b09      	ldr	r3, [pc, #36]	; (80121e4 <HAL_TIM_Base_MspInit+0x98>)
 80121c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121c2:	f003 0310 	and.w	r3, r3, #16
 80121c6:	60fb      	str	r3, [r7, #12]
 80121c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80121ca:	2200      	movs	r2, #0
 80121cc:	2100      	movs	r1, #0
 80121ce:	2036      	movs	r0, #54	; 0x36
 80121d0:	f7ef fbdb 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80121d4:	2036      	movs	r0, #54	; 0x36
 80121d6:	f7ef fbf4 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 80121da:	bf00      	nop
 80121dc:	3718      	adds	r7, #24
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}
 80121e2:	bf00      	nop
 80121e4:	40023800 	.word	0x40023800
 80121e8:	40000400 	.word	0x40000400
 80121ec:	40001000 	.word	0x40001000

080121f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b08c      	sub	sp, #48	; 0x30
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80121f8:	f107 031c 	add.w	r3, r7, #28
 80121fc:	2200      	movs	r2, #0
 80121fe:	601a      	str	r2, [r3, #0]
 8012200:	605a      	str	r2, [r3, #4]
 8012202:	609a      	str	r2, [r3, #8]
 8012204:	60da      	str	r2, [r3, #12]
 8012206:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	4a32      	ldr	r2, [pc, #200]	; (80122d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 801220e:	4293      	cmp	r3, r2
 8012210:	d12c      	bne.n	801226c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8012212:	2300      	movs	r3, #0
 8012214:	61bb      	str	r3, [r7, #24]
 8012216:	4b31      	ldr	r3, [pc, #196]	; (80122dc <HAL_TIM_Encoder_MspInit+0xec>)
 8012218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801221a:	4a30      	ldr	r2, [pc, #192]	; (80122dc <HAL_TIM_Encoder_MspInit+0xec>)
 801221c:	f043 0304 	orr.w	r3, r3, #4
 8012220:	6413      	str	r3, [r2, #64]	; 0x40
 8012222:	4b2e      	ldr	r3, [pc, #184]	; (80122dc <HAL_TIM_Encoder_MspInit+0xec>)
 8012224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012226:	f003 0304 	and.w	r3, r3, #4
 801222a:	61bb      	str	r3, [r7, #24]
 801222c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801222e:	2300      	movs	r3, #0
 8012230:	617b      	str	r3, [r7, #20]
 8012232:	4b2a      	ldr	r3, [pc, #168]	; (80122dc <HAL_TIM_Encoder_MspInit+0xec>)
 8012234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012236:	4a29      	ldr	r2, [pc, #164]	; (80122dc <HAL_TIM_Encoder_MspInit+0xec>)
 8012238:	f043 0302 	orr.w	r3, r3, #2
 801223c:	6313      	str	r3, [r2, #48]	; 0x30
 801223e:	4b27      	ldr	r3, [pc, #156]	; (80122dc <HAL_TIM_Encoder_MspInit+0xec>)
 8012240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012242:	f003 0302 	and.w	r3, r3, #2
 8012246:	617b      	str	r3, [r7, #20]
 8012248:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801224a:	23c0      	movs	r3, #192	; 0xc0
 801224c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801224e:	2302      	movs	r3, #2
 8012250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012252:	2300      	movs	r3, #0
 8012254:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012256:	2300      	movs	r3, #0
 8012258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 801225a:	2302      	movs	r3, #2
 801225c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801225e:	f107 031c 	add.w	r3, r7, #28
 8012262:	4619      	mov	r1, r3
 8012264:	481e      	ldr	r0, [pc, #120]	; (80122e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8012266:	f7ef fe9b 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 801226a:	e030      	b.n	80122ce <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	4a1c      	ldr	r2, [pc, #112]	; (80122e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8012272:	4293      	cmp	r3, r2
 8012274:	d12b      	bne.n	80122ce <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8012276:	2300      	movs	r3, #0
 8012278:	613b      	str	r3, [r7, #16]
 801227a:	4b18      	ldr	r3, [pc, #96]	; (80122dc <HAL_TIM_Encoder_MspInit+0xec>)
 801227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801227e:	4a17      	ldr	r2, [pc, #92]	; (80122dc <HAL_TIM_Encoder_MspInit+0xec>)
 8012280:	f043 0302 	orr.w	r3, r3, #2
 8012284:	6453      	str	r3, [r2, #68]	; 0x44
 8012286:	4b15      	ldr	r3, [pc, #84]	; (80122dc <HAL_TIM_Encoder_MspInit+0xec>)
 8012288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801228a:	f003 0302 	and.w	r3, r3, #2
 801228e:	613b      	str	r3, [r7, #16]
 8012290:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012292:	2300      	movs	r3, #0
 8012294:	60fb      	str	r3, [r7, #12]
 8012296:	4b11      	ldr	r3, [pc, #68]	; (80122dc <HAL_TIM_Encoder_MspInit+0xec>)
 8012298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801229a:	4a10      	ldr	r2, [pc, #64]	; (80122dc <HAL_TIM_Encoder_MspInit+0xec>)
 801229c:	f043 0304 	orr.w	r3, r3, #4
 80122a0:	6313      	str	r3, [r2, #48]	; 0x30
 80122a2:	4b0e      	ldr	r3, [pc, #56]	; (80122dc <HAL_TIM_Encoder_MspInit+0xec>)
 80122a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122a6:	f003 0304 	and.w	r3, r3, #4
 80122aa:	60fb      	str	r3, [r7, #12]
 80122ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80122ae:	23c0      	movs	r3, #192	; 0xc0
 80122b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80122b2:	2302      	movs	r3, #2
 80122b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80122b6:	2300      	movs	r3, #0
 80122b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80122ba:	2300      	movs	r3, #0
 80122bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80122be:	2303      	movs	r3, #3
 80122c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80122c2:	f107 031c 	add.w	r3, r7, #28
 80122c6:	4619      	mov	r1, r3
 80122c8:	4807      	ldr	r0, [pc, #28]	; (80122e8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80122ca:	f7ef fe69 	bl	8001fa0 <HAL_GPIO_Init>
}
 80122ce:	bf00      	nop
 80122d0:	3730      	adds	r7, #48	; 0x30
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	bf00      	nop
 80122d8:	40000800 	.word	0x40000800
 80122dc:	40023800 	.word	0x40023800
 80122e0:	40020400 	.word	0x40020400
 80122e4:	40010400 	.word	0x40010400
 80122e8:	40020800 	.word	0x40020800

080122ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b08a      	sub	sp, #40	; 0x28
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80122f4:	f107 0314 	add.w	r3, r7, #20
 80122f8:	2200      	movs	r2, #0
 80122fa:	601a      	str	r2, [r3, #0]
 80122fc:	605a      	str	r2, [r3, #4]
 80122fe:	609a      	str	r2, [r3, #8]
 8012300:	60da      	str	r2, [r3, #12]
 8012302:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801230c:	d13d      	bne.n	801238a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801230e:	2300      	movs	r3, #0
 8012310:	613b      	str	r3, [r7, #16]
 8012312:	4b31      	ldr	r3, [pc, #196]	; (80123d8 <HAL_TIM_MspPostInit+0xec>)
 8012314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012316:	4a30      	ldr	r2, [pc, #192]	; (80123d8 <HAL_TIM_MspPostInit+0xec>)
 8012318:	f043 0301 	orr.w	r3, r3, #1
 801231c:	6313      	str	r3, [r2, #48]	; 0x30
 801231e:	4b2e      	ldr	r3, [pc, #184]	; (80123d8 <HAL_TIM_MspPostInit+0xec>)
 8012320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012322:	f003 0301 	and.w	r3, r3, #1
 8012326:	613b      	str	r3, [r7, #16]
 8012328:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801232a:	2300      	movs	r3, #0
 801232c:	60fb      	str	r3, [r7, #12]
 801232e:	4b2a      	ldr	r3, [pc, #168]	; (80123d8 <HAL_TIM_MspPostInit+0xec>)
 8012330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012332:	4a29      	ldr	r2, [pc, #164]	; (80123d8 <HAL_TIM_MspPostInit+0xec>)
 8012334:	f043 0302 	orr.w	r3, r3, #2
 8012338:	6313      	str	r3, [r2, #48]	; 0x30
 801233a:	4b27      	ldr	r3, [pc, #156]	; (80123d8 <HAL_TIM_MspPostInit+0xec>)
 801233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801233e:	f003 0302 	and.w	r3, r3, #2
 8012342:	60fb      	str	r3, [r7, #12]
 8012344:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8012346:	2320      	movs	r3, #32
 8012348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801234a:	2302      	movs	r3, #2
 801234c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801234e:	2300      	movs	r3, #0
 8012350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012352:	2300      	movs	r3, #0
 8012354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8012356:	2301      	movs	r3, #1
 8012358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801235a:	f107 0314 	add.w	r3, r7, #20
 801235e:	4619      	mov	r1, r3
 8012360:	481e      	ldr	r0, [pc, #120]	; (80123dc <HAL_TIM_MspPostInit+0xf0>)
 8012362:	f7ef fe1d 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8012366:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801236a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801236c:	2302      	movs	r3, #2
 801236e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012370:	2300      	movs	r3, #0
 8012372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012374:	2300      	movs	r3, #0
 8012376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8012378:	2301      	movs	r3, #1
 801237a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801237c:	f107 0314 	add.w	r3, r7, #20
 8012380:	4619      	mov	r1, r3
 8012382:	4817      	ldr	r0, [pc, #92]	; (80123e0 <HAL_TIM_MspPostInit+0xf4>)
 8012384:	f7ef fe0c 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8012388:	e022      	b.n	80123d0 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	4a15      	ldr	r2, [pc, #84]	; (80123e4 <HAL_TIM_MspPostInit+0xf8>)
 8012390:	4293      	cmp	r3, r2
 8012392:	d11d      	bne.n	80123d0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012394:	2300      	movs	r3, #0
 8012396:	60bb      	str	r3, [r7, #8]
 8012398:	4b0f      	ldr	r3, [pc, #60]	; (80123d8 <HAL_TIM_MspPostInit+0xec>)
 801239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801239c:	4a0e      	ldr	r2, [pc, #56]	; (80123d8 <HAL_TIM_MspPostInit+0xec>)
 801239e:	f043 0302 	orr.w	r3, r3, #2
 80123a2:	6313      	str	r3, [r2, #48]	; 0x30
 80123a4:	4b0c      	ldr	r3, [pc, #48]	; (80123d8 <HAL_TIM_MspPostInit+0xec>)
 80123a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123a8:	f003 0302 	and.w	r3, r3, #2
 80123ac:	60bb      	str	r3, [r7, #8]
 80123ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80123b0:	2320      	movs	r3, #32
 80123b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80123b4:	2302      	movs	r3, #2
 80123b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80123b8:	2300      	movs	r3, #0
 80123ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80123bc:	2300      	movs	r3, #0
 80123be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80123c0:	2302      	movs	r3, #2
 80123c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80123c4:	f107 0314 	add.w	r3, r7, #20
 80123c8:	4619      	mov	r1, r3
 80123ca:	4805      	ldr	r0, [pc, #20]	; (80123e0 <HAL_TIM_MspPostInit+0xf4>)
 80123cc:	f7ef fde8 	bl	8001fa0 <HAL_GPIO_Init>
}
 80123d0:	bf00      	nop
 80123d2:	3728      	adds	r7, #40	; 0x28
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}
 80123d8:	40023800 	.word	0x40023800
 80123dc:	40020000 	.word	0x40020000
 80123e0:	40020400 	.word	0x40020400
 80123e4:	40000400 	.word	0x40000400

080123e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b08a      	sub	sp, #40	; 0x28
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80123f0:	f107 0314 	add.w	r3, r7, #20
 80123f4:	2200      	movs	r2, #0
 80123f6:	601a      	str	r2, [r3, #0]
 80123f8:	605a      	str	r2, [r3, #4]
 80123fa:	609a      	str	r2, [r3, #8]
 80123fc:	60da      	str	r2, [r3, #12]
 80123fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	4a19      	ldr	r2, [pc, #100]	; (801246c <HAL_UART_MspInit+0x84>)
 8012406:	4293      	cmp	r3, r2
 8012408:	d12c      	bne.n	8012464 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 801240a:	2300      	movs	r3, #0
 801240c:	613b      	str	r3, [r7, #16]
 801240e:	4b18      	ldr	r3, [pc, #96]	; (8012470 <HAL_UART_MspInit+0x88>)
 8012410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012412:	4a17      	ldr	r2, [pc, #92]	; (8012470 <HAL_UART_MspInit+0x88>)
 8012414:	f043 0310 	orr.w	r3, r3, #16
 8012418:	6453      	str	r3, [r2, #68]	; 0x44
 801241a:	4b15      	ldr	r3, [pc, #84]	; (8012470 <HAL_UART_MspInit+0x88>)
 801241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801241e:	f003 0310 	and.w	r3, r3, #16
 8012422:	613b      	str	r3, [r7, #16]
 8012424:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012426:	2300      	movs	r3, #0
 8012428:	60fb      	str	r3, [r7, #12]
 801242a:	4b11      	ldr	r3, [pc, #68]	; (8012470 <HAL_UART_MspInit+0x88>)
 801242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801242e:	4a10      	ldr	r2, [pc, #64]	; (8012470 <HAL_UART_MspInit+0x88>)
 8012430:	f043 0301 	orr.w	r3, r3, #1
 8012434:	6313      	str	r3, [r2, #48]	; 0x30
 8012436:	4b0e      	ldr	r3, [pc, #56]	; (8012470 <HAL_UART_MspInit+0x88>)
 8012438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801243a:	f003 0301 	and.w	r3, r3, #1
 801243e:	60fb      	str	r3, [r7, #12]
 8012440:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8012442:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8012446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012448:	2302      	movs	r3, #2
 801244a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801244c:	2301      	movs	r3, #1
 801244e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012450:	2303      	movs	r3, #3
 8012452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8012454:	2307      	movs	r3, #7
 8012456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012458:	f107 0314 	add.w	r3, r7, #20
 801245c:	4619      	mov	r1, r3
 801245e:	4805      	ldr	r0, [pc, #20]	; (8012474 <HAL_UART_MspInit+0x8c>)
 8012460:	f7ef fd9e 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8012464:	bf00      	nop
 8012466:	3728      	adds	r7, #40	; 0x28
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}
 801246c:	40011000 	.word	0x40011000
 8012470:	40023800 	.word	0x40023800
 8012474:	40020000 	.word	0x40020000

08012478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012478:	b480      	push	{r7}
 801247a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 801247c:	bf00      	nop
 801247e:	46bd      	mov	sp, r7
 8012480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012484:	4770      	bx	lr

08012486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012486:	b480      	push	{r7}
 8012488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801248a:	e7fe      	b.n	801248a <HardFault_Handler+0x4>

0801248c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801248c:	b480      	push	{r7}
 801248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012490:	e7fe      	b.n	8012490 <MemManage_Handler+0x4>

08012492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012492:	b480      	push	{r7}
 8012494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012496:	e7fe      	b.n	8012496 <BusFault_Handler+0x4>

08012498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012498:	b480      	push	{r7}
 801249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801249c:	e7fe      	b.n	801249c <UsageFault_Handler+0x4>

0801249e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801249e:	b480      	push	{r7}
 80124a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80124a2:	bf00      	nop
 80124a4:	46bd      	mov	sp, r7
 80124a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124aa:	4770      	bx	lr

080124ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80124ac:	b480      	push	{r7}
 80124ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80124b0:	bf00      	nop
 80124b2:	46bd      	mov	sp, r7
 80124b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b8:	4770      	bx	lr

080124ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80124ba:	b480      	push	{r7}
 80124bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80124be:	bf00      	nop
 80124c0:	46bd      	mov	sp, r7
 80124c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c6:	4770      	bx	lr

080124c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80124cc:	f7ee fd86 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80124d0:	bf00      	nop
 80124d2:	bd80      	pop	{r7, pc}

080124d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80124d8:	4802      	ldr	r0, [pc, #8]	; (80124e4 <TIM6_DAC_IRQHandler+0x10>)
 80124da:	f7f1 fa6e 	bl	80039ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80124de:	bf00      	nop
 80124e0:	bd80      	pop	{r7, pc}
 80124e2:	bf00      	nop
 80124e4:	20000bb4 	.word	0x20000bb4

080124e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b086      	sub	sp, #24
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80124f4:	2300      	movs	r3, #0
 80124f6:	617b      	str	r3, [r7, #20]
 80124f8:	e00a      	b.n	8012510 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80124fa:	f3af 8000 	nop.w
 80124fe:	4601      	mov	r1, r0
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	1c5a      	adds	r2, r3, #1
 8012504:	60ba      	str	r2, [r7, #8]
 8012506:	b2ca      	uxtb	r2, r1
 8012508:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	3301      	adds	r3, #1
 801250e:	617b      	str	r3, [r7, #20]
 8012510:	697a      	ldr	r2, [r7, #20]
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	429a      	cmp	r2, r3
 8012516:	dbf0      	blt.n	80124fa <_read+0x12>
	}

return len;
 8012518:	687b      	ldr	r3, [r7, #4]
}
 801251a:	4618      	mov	r0, r3
 801251c:	3718      	adds	r7, #24
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}

08012522 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012522:	b580      	push	{r7, lr}
 8012524:	b086      	sub	sp, #24
 8012526:	af00      	add	r7, sp, #0
 8012528:	60f8      	str	r0, [r7, #12]
 801252a:	60b9      	str	r1, [r7, #8]
 801252c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801252e:	2300      	movs	r3, #0
 8012530:	617b      	str	r3, [r7, #20]
 8012532:	e009      	b.n	8012548 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	1c5a      	adds	r2, r3, #1
 8012538:	60ba      	str	r2, [r7, #8]
 801253a:	781b      	ldrb	r3, [r3, #0]
 801253c:	4618      	mov	r0, r3
 801253e:	f7fa fa85 	bl	800ca4c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	3301      	adds	r3, #1
 8012546:	617b      	str	r3, [r7, #20]
 8012548:	697a      	ldr	r2, [r7, #20]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	429a      	cmp	r2, r3
 801254e:	dbf1      	blt.n	8012534 <_write+0x12>
	}
	return len;
 8012550:	687b      	ldr	r3, [r7, #4]
}
 8012552:	4618      	mov	r0, r3
 8012554:	3718      	adds	r7, #24
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}

0801255a <_close>:

int _close(int file)
{
 801255a:	b480      	push	{r7}
 801255c:	b083      	sub	sp, #12
 801255e:	af00      	add	r7, sp, #0
 8012560:	6078      	str	r0, [r7, #4]
	return -1;
 8012562:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012566:	4618      	mov	r0, r3
 8012568:	370c      	adds	r7, #12
 801256a:	46bd      	mov	sp, r7
 801256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012570:	4770      	bx	lr

08012572 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012572:	b480      	push	{r7}
 8012574:	b083      	sub	sp, #12
 8012576:	af00      	add	r7, sp, #0
 8012578:	6078      	str	r0, [r7, #4]
 801257a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012582:	605a      	str	r2, [r3, #4]
	return 0;
 8012584:	2300      	movs	r3, #0
}
 8012586:	4618      	mov	r0, r3
 8012588:	370c      	adds	r7, #12
 801258a:	46bd      	mov	sp, r7
 801258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012590:	4770      	bx	lr

08012592 <_isatty>:

int _isatty(int file)
{
 8012592:	b480      	push	{r7}
 8012594:	b083      	sub	sp, #12
 8012596:	af00      	add	r7, sp, #0
 8012598:	6078      	str	r0, [r7, #4]
	return 1;
 801259a:	2301      	movs	r3, #1
}
 801259c:	4618      	mov	r0, r3
 801259e:	370c      	adds	r7, #12
 80125a0:	46bd      	mov	sp, r7
 80125a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a6:	4770      	bx	lr

080125a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80125a8:	b480      	push	{r7}
 80125aa:	b085      	sub	sp, #20
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	60f8      	str	r0, [r7, #12]
 80125b0:	60b9      	str	r1, [r7, #8]
 80125b2:	607a      	str	r2, [r7, #4]
	return 0;
 80125b4:	2300      	movs	r3, #0
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	3714      	adds	r7, #20
 80125ba:	46bd      	mov	sp, r7
 80125bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c0:	4770      	bx	lr
	...

080125c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b084      	sub	sp, #16
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80125cc:	4b11      	ldr	r3, [pc, #68]	; (8012614 <_sbrk+0x50>)
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d102      	bne.n	80125da <_sbrk+0x16>
		heap_end = &end;
 80125d4:	4b0f      	ldr	r3, [pc, #60]	; (8012614 <_sbrk+0x50>)
 80125d6:	4a10      	ldr	r2, [pc, #64]	; (8012618 <_sbrk+0x54>)
 80125d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80125da:	4b0e      	ldr	r3, [pc, #56]	; (8012614 <_sbrk+0x50>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80125e0:	4b0c      	ldr	r3, [pc, #48]	; (8012614 <_sbrk+0x50>)
 80125e2:	681a      	ldr	r2, [r3, #0]
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	4413      	add	r3, r2
 80125e8:	466a      	mov	r2, sp
 80125ea:	4293      	cmp	r3, r2
 80125ec:	d907      	bls.n	80125fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80125ee:	f000 f875 	bl	80126dc <__errno>
 80125f2:	4602      	mov	r2, r0
 80125f4:	230c      	movs	r3, #12
 80125f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80125f8:	f04f 33ff 	mov.w	r3, #4294967295
 80125fc:	e006      	b.n	801260c <_sbrk+0x48>
	}

	heap_end += incr;
 80125fe:	4b05      	ldr	r3, [pc, #20]	; (8012614 <_sbrk+0x50>)
 8012600:	681a      	ldr	r2, [r3, #0]
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	4413      	add	r3, r2
 8012606:	4a03      	ldr	r2, [pc, #12]	; (8012614 <_sbrk+0x50>)
 8012608:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 801260a:	68fb      	ldr	r3, [r7, #12]
}
 801260c:	4618      	mov	r0, r3
 801260e:	3710      	adds	r7, #16
 8012610:	46bd      	mov	sp, r7
 8012612:	bd80      	pop	{r7, pc}
 8012614:	20000114 	.word	0x20000114
 8012618:	200015e0 	.word	0x200015e0

0801261c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801261c:	b480      	push	{r7}
 801261e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012620:	4b16      	ldr	r3, [pc, #88]	; (801267c <SystemInit+0x60>)
 8012622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012626:	4a15      	ldr	r2, [pc, #84]	; (801267c <SystemInit+0x60>)
 8012628:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801262c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8012630:	4b13      	ldr	r3, [pc, #76]	; (8012680 <SystemInit+0x64>)
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	4a12      	ldr	r2, [pc, #72]	; (8012680 <SystemInit+0x64>)
 8012636:	f043 0301 	orr.w	r3, r3, #1
 801263a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801263c:	4b10      	ldr	r3, [pc, #64]	; (8012680 <SystemInit+0x64>)
 801263e:	2200      	movs	r2, #0
 8012640:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8012642:	4b0f      	ldr	r3, [pc, #60]	; (8012680 <SystemInit+0x64>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	4a0e      	ldr	r2, [pc, #56]	; (8012680 <SystemInit+0x64>)
 8012648:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 801264c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012650:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8012652:	4b0b      	ldr	r3, [pc, #44]	; (8012680 <SystemInit+0x64>)
 8012654:	4a0b      	ldr	r2, [pc, #44]	; (8012684 <SystemInit+0x68>)
 8012656:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8012658:	4b09      	ldr	r3, [pc, #36]	; (8012680 <SystemInit+0x64>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	4a08      	ldr	r2, [pc, #32]	; (8012680 <SystemInit+0x64>)
 801265e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012662:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8012664:	4b06      	ldr	r3, [pc, #24]	; (8012680 <SystemInit+0x64>)
 8012666:	2200      	movs	r2, #0
 8012668:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801266a:	4b04      	ldr	r3, [pc, #16]	; (801267c <SystemInit+0x60>)
 801266c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012670:	609a      	str	r2, [r3, #8]
#endif
}
 8012672:	bf00      	nop
 8012674:	46bd      	mov	sp, r7
 8012676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267a:	4770      	bx	lr
 801267c:	e000ed00 	.word	0xe000ed00
 8012680:	40023800 	.word	0x40023800
 8012684:	24003010 	.word	0x24003010

08012688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8012688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80126c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801268c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801268e:	e003      	b.n	8012698 <LoopCopyDataInit>

08012690 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8012690:	4b0c      	ldr	r3, [pc, #48]	; (80126c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8012692:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8012694:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8012696:	3104      	adds	r1, #4

08012698 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8012698:	480b      	ldr	r0, [pc, #44]	; (80126c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801269a:	4b0c      	ldr	r3, [pc, #48]	; (80126cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801269c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801269e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80126a0:	d3f6      	bcc.n	8012690 <CopyDataInit>
  ldr  r2, =_sbss
 80126a2:	4a0b      	ldr	r2, [pc, #44]	; (80126d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80126a4:	e002      	b.n	80126ac <LoopFillZerobss>

080126a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80126a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80126a8:	f842 3b04 	str.w	r3, [r2], #4

080126ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80126ac:	4b09      	ldr	r3, [pc, #36]	; (80126d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80126ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80126b0:	d3f9      	bcc.n	80126a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80126b2:	f7ff ffb3 	bl	801261c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80126b6:	f000 f817 	bl	80126e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80126ba:	f7fb fce9 	bl	800e090 <main>
  bx  lr    
 80126be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80126c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80126c4:	08013f5c 	.word	0x08013f5c
  ldr  r0, =_sdata
 80126c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80126cc:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 80126d0:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 80126d4:	200015dc 	.word	0x200015dc

080126d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80126d8:	e7fe      	b.n	80126d8 <ADC_IRQHandler>
	...

080126dc <__errno>:
 80126dc:	4b01      	ldr	r3, [pc, #4]	; (80126e4 <__errno+0x8>)
 80126de:	6818      	ldr	r0, [r3, #0]
 80126e0:	4770      	bx	lr
 80126e2:	bf00      	nop
 80126e4:	20000084 	.word	0x20000084

080126e8 <__libc_init_array>:
 80126e8:	b570      	push	{r4, r5, r6, lr}
 80126ea:	4e0d      	ldr	r6, [pc, #52]	; (8012720 <__libc_init_array+0x38>)
 80126ec:	4c0d      	ldr	r4, [pc, #52]	; (8012724 <__libc_init_array+0x3c>)
 80126ee:	1ba4      	subs	r4, r4, r6
 80126f0:	10a4      	asrs	r4, r4, #2
 80126f2:	2500      	movs	r5, #0
 80126f4:	42a5      	cmp	r5, r4
 80126f6:	d109      	bne.n	801270c <__libc_init_array+0x24>
 80126f8:	4e0b      	ldr	r6, [pc, #44]	; (8012728 <__libc_init_array+0x40>)
 80126fa:	4c0c      	ldr	r4, [pc, #48]	; (801272c <__libc_init_array+0x44>)
 80126fc:	f001 f932 	bl	8013964 <_init>
 8012700:	1ba4      	subs	r4, r4, r6
 8012702:	10a4      	asrs	r4, r4, #2
 8012704:	2500      	movs	r5, #0
 8012706:	42a5      	cmp	r5, r4
 8012708:	d105      	bne.n	8012716 <__libc_init_array+0x2e>
 801270a:	bd70      	pop	{r4, r5, r6, pc}
 801270c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012710:	4798      	blx	r3
 8012712:	3501      	adds	r5, #1
 8012714:	e7ee      	b.n	80126f4 <__libc_init_array+0xc>
 8012716:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801271a:	4798      	blx	r3
 801271c:	3501      	adds	r5, #1
 801271e:	e7f2      	b.n	8012706 <__libc_init_array+0x1e>
 8012720:	08013f54 	.word	0x08013f54
 8012724:	08013f54 	.word	0x08013f54
 8012728:	08013f54 	.word	0x08013f54
 801272c:	08013f58 	.word	0x08013f58

08012730 <memset>:
 8012730:	4402      	add	r2, r0
 8012732:	4603      	mov	r3, r0
 8012734:	4293      	cmp	r3, r2
 8012736:	d100      	bne.n	801273a <memset+0xa>
 8012738:	4770      	bx	lr
 801273a:	f803 1b01 	strb.w	r1, [r3], #1
 801273e:	e7f9      	b.n	8012734 <memset+0x4>

08012740 <iprintf>:
 8012740:	b40f      	push	{r0, r1, r2, r3}
 8012742:	4b0a      	ldr	r3, [pc, #40]	; (801276c <iprintf+0x2c>)
 8012744:	b513      	push	{r0, r1, r4, lr}
 8012746:	681c      	ldr	r4, [r3, #0]
 8012748:	b124      	cbz	r4, 8012754 <iprintf+0x14>
 801274a:	69a3      	ldr	r3, [r4, #24]
 801274c:	b913      	cbnz	r3, 8012754 <iprintf+0x14>
 801274e:	4620      	mov	r0, r4
 8012750:	f000 fad8 	bl	8012d04 <__sinit>
 8012754:	ab05      	add	r3, sp, #20
 8012756:	9a04      	ldr	r2, [sp, #16]
 8012758:	68a1      	ldr	r1, [r4, #8]
 801275a:	9301      	str	r3, [sp, #4]
 801275c:	4620      	mov	r0, r4
 801275e:	f000 fc99 	bl	8013094 <_vfiprintf_r>
 8012762:	b002      	add	sp, #8
 8012764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012768:	b004      	add	sp, #16
 801276a:	4770      	bx	lr
 801276c:	20000084 	.word	0x20000084

08012770 <_puts_r>:
 8012770:	b570      	push	{r4, r5, r6, lr}
 8012772:	460e      	mov	r6, r1
 8012774:	4605      	mov	r5, r0
 8012776:	b118      	cbz	r0, 8012780 <_puts_r+0x10>
 8012778:	6983      	ldr	r3, [r0, #24]
 801277a:	b90b      	cbnz	r3, 8012780 <_puts_r+0x10>
 801277c:	f000 fac2 	bl	8012d04 <__sinit>
 8012780:	69ab      	ldr	r3, [r5, #24]
 8012782:	68ac      	ldr	r4, [r5, #8]
 8012784:	b913      	cbnz	r3, 801278c <_puts_r+0x1c>
 8012786:	4628      	mov	r0, r5
 8012788:	f000 fabc 	bl	8012d04 <__sinit>
 801278c:	4b23      	ldr	r3, [pc, #140]	; (801281c <_puts_r+0xac>)
 801278e:	429c      	cmp	r4, r3
 8012790:	d117      	bne.n	80127c2 <_puts_r+0x52>
 8012792:	686c      	ldr	r4, [r5, #4]
 8012794:	89a3      	ldrh	r3, [r4, #12]
 8012796:	071b      	lsls	r3, r3, #28
 8012798:	d51d      	bpl.n	80127d6 <_puts_r+0x66>
 801279a:	6923      	ldr	r3, [r4, #16]
 801279c:	b1db      	cbz	r3, 80127d6 <_puts_r+0x66>
 801279e:	3e01      	subs	r6, #1
 80127a0:	68a3      	ldr	r3, [r4, #8]
 80127a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80127a6:	3b01      	subs	r3, #1
 80127a8:	60a3      	str	r3, [r4, #8]
 80127aa:	b9e9      	cbnz	r1, 80127e8 <_puts_r+0x78>
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	da2e      	bge.n	801280e <_puts_r+0x9e>
 80127b0:	4622      	mov	r2, r4
 80127b2:	210a      	movs	r1, #10
 80127b4:	4628      	mov	r0, r5
 80127b6:	f000 f8f5 	bl	80129a4 <__swbuf_r>
 80127ba:	3001      	adds	r0, #1
 80127bc:	d011      	beq.n	80127e2 <_puts_r+0x72>
 80127be:	200a      	movs	r0, #10
 80127c0:	e011      	b.n	80127e6 <_puts_r+0x76>
 80127c2:	4b17      	ldr	r3, [pc, #92]	; (8012820 <_puts_r+0xb0>)
 80127c4:	429c      	cmp	r4, r3
 80127c6:	d101      	bne.n	80127cc <_puts_r+0x5c>
 80127c8:	68ac      	ldr	r4, [r5, #8]
 80127ca:	e7e3      	b.n	8012794 <_puts_r+0x24>
 80127cc:	4b15      	ldr	r3, [pc, #84]	; (8012824 <_puts_r+0xb4>)
 80127ce:	429c      	cmp	r4, r3
 80127d0:	bf08      	it	eq
 80127d2:	68ec      	ldreq	r4, [r5, #12]
 80127d4:	e7de      	b.n	8012794 <_puts_r+0x24>
 80127d6:	4621      	mov	r1, r4
 80127d8:	4628      	mov	r0, r5
 80127da:	f000 f935 	bl	8012a48 <__swsetup_r>
 80127de:	2800      	cmp	r0, #0
 80127e0:	d0dd      	beq.n	801279e <_puts_r+0x2e>
 80127e2:	f04f 30ff 	mov.w	r0, #4294967295
 80127e6:	bd70      	pop	{r4, r5, r6, pc}
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	da04      	bge.n	80127f6 <_puts_r+0x86>
 80127ec:	69a2      	ldr	r2, [r4, #24]
 80127ee:	429a      	cmp	r2, r3
 80127f0:	dc06      	bgt.n	8012800 <_puts_r+0x90>
 80127f2:	290a      	cmp	r1, #10
 80127f4:	d004      	beq.n	8012800 <_puts_r+0x90>
 80127f6:	6823      	ldr	r3, [r4, #0]
 80127f8:	1c5a      	adds	r2, r3, #1
 80127fa:	6022      	str	r2, [r4, #0]
 80127fc:	7019      	strb	r1, [r3, #0]
 80127fe:	e7cf      	b.n	80127a0 <_puts_r+0x30>
 8012800:	4622      	mov	r2, r4
 8012802:	4628      	mov	r0, r5
 8012804:	f000 f8ce 	bl	80129a4 <__swbuf_r>
 8012808:	3001      	adds	r0, #1
 801280a:	d1c9      	bne.n	80127a0 <_puts_r+0x30>
 801280c:	e7e9      	b.n	80127e2 <_puts_r+0x72>
 801280e:	6823      	ldr	r3, [r4, #0]
 8012810:	200a      	movs	r0, #10
 8012812:	1c5a      	adds	r2, r3, #1
 8012814:	6022      	str	r2, [r4, #0]
 8012816:	7018      	strb	r0, [r3, #0]
 8012818:	e7e5      	b.n	80127e6 <_puts_r+0x76>
 801281a:	bf00      	nop
 801281c:	08013ed4 	.word	0x08013ed4
 8012820:	08013ef4 	.word	0x08013ef4
 8012824:	08013eb4 	.word	0x08013eb4

08012828 <puts>:
 8012828:	4b02      	ldr	r3, [pc, #8]	; (8012834 <puts+0xc>)
 801282a:	4601      	mov	r1, r0
 801282c:	6818      	ldr	r0, [r3, #0]
 801282e:	f7ff bf9f 	b.w	8012770 <_puts_r>
 8012832:	bf00      	nop
 8012834:	20000084 	.word	0x20000084

08012838 <setbuf>:
 8012838:	2900      	cmp	r1, #0
 801283a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801283e:	bf0c      	ite	eq
 8012840:	2202      	moveq	r2, #2
 8012842:	2200      	movne	r2, #0
 8012844:	f000 b800 	b.w	8012848 <setvbuf>

08012848 <setvbuf>:
 8012848:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801284c:	461d      	mov	r5, r3
 801284e:	4b51      	ldr	r3, [pc, #324]	; (8012994 <setvbuf+0x14c>)
 8012850:	681e      	ldr	r6, [r3, #0]
 8012852:	4604      	mov	r4, r0
 8012854:	460f      	mov	r7, r1
 8012856:	4690      	mov	r8, r2
 8012858:	b126      	cbz	r6, 8012864 <setvbuf+0x1c>
 801285a:	69b3      	ldr	r3, [r6, #24]
 801285c:	b913      	cbnz	r3, 8012864 <setvbuf+0x1c>
 801285e:	4630      	mov	r0, r6
 8012860:	f000 fa50 	bl	8012d04 <__sinit>
 8012864:	4b4c      	ldr	r3, [pc, #304]	; (8012998 <setvbuf+0x150>)
 8012866:	429c      	cmp	r4, r3
 8012868:	d152      	bne.n	8012910 <setvbuf+0xc8>
 801286a:	6874      	ldr	r4, [r6, #4]
 801286c:	f1b8 0f02 	cmp.w	r8, #2
 8012870:	d006      	beq.n	8012880 <setvbuf+0x38>
 8012872:	f1b8 0f01 	cmp.w	r8, #1
 8012876:	f200 8089 	bhi.w	801298c <setvbuf+0x144>
 801287a:	2d00      	cmp	r5, #0
 801287c:	f2c0 8086 	blt.w	801298c <setvbuf+0x144>
 8012880:	4621      	mov	r1, r4
 8012882:	4630      	mov	r0, r6
 8012884:	f000 f9d4 	bl	8012c30 <_fflush_r>
 8012888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801288a:	b141      	cbz	r1, 801289e <setvbuf+0x56>
 801288c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012890:	4299      	cmp	r1, r3
 8012892:	d002      	beq.n	801289a <setvbuf+0x52>
 8012894:	4630      	mov	r0, r6
 8012896:	f000 fb2b 	bl	8012ef0 <_free_r>
 801289a:	2300      	movs	r3, #0
 801289c:	6363      	str	r3, [r4, #52]	; 0x34
 801289e:	2300      	movs	r3, #0
 80128a0:	61a3      	str	r3, [r4, #24]
 80128a2:	6063      	str	r3, [r4, #4]
 80128a4:	89a3      	ldrh	r3, [r4, #12]
 80128a6:	061b      	lsls	r3, r3, #24
 80128a8:	d503      	bpl.n	80128b2 <setvbuf+0x6a>
 80128aa:	6921      	ldr	r1, [r4, #16]
 80128ac:	4630      	mov	r0, r6
 80128ae:	f000 fb1f 	bl	8012ef0 <_free_r>
 80128b2:	89a3      	ldrh	r3, [r4, #12]
 80128b4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80128b8:	f023 0303 	bic.w	r3, r3, #3
 80128bc:	f1b8 0f02 	cmp.w	r8, #2
 80128c0:	81a3      	strh	r3, [r4, #12]
 80128c2:	d05d      	beq.n	8012980 <setvbuf+0x138>
 80128c4:	ab01      	add	r3, sp, #4
 80128c6:	466a      	mov	r2, sp
 80128c8:	4621      	mov	r1, r4
 80128ca:	4630      	mov	r0, r6
 80128cc:	f000 faa4 	bl	8012e18 <__swhatbuf_r>
 80128d0:	89a3      	ldrh	r3, [r4, #12]
 80128d2:	4318      	orrs	r0, r3
 80128d4:	81a0      	strh	r0, [r4, #12]
 80128d6:	bb2d      	cbnz	r5, 8012924 <setvbuf+0xdc>
 80128d8:	9d00      	ldr	r5, [sp, #0]
 80128da:	4628      	mov	r0, r5
 80128dc:	f000 fb00 	bl	8012ee0 <malloc>
 80128e0:	4607      	mov	r7, r0
 80128e2:	2800      	cmp	r0, #0
 80128e4:	d14e      	bne.n	8012984 <setvbuf+0x13c>
 80128e6:	f8dd 9000 	ldr.w	r9, [sp]
 80128ea:	45a9      	cmp	r9, r5
 80128ec:	d13c      	bne.n	8012968 <setvbuf+0x120>
 80128ee:	f04f 30ff 	mov.w	r0, #4294967295
 80128f2:	89a3      	ldrh	r3, [r4, #12]
 80128f4:	f043 0302 	orr.w	r3, r3, #2
 80128f8:	81a3      	strh	r3, [r4, #12]
 80128fa:	2300      	movs	r3, #0
 80128fc:	60a3      	str	r3, [r4, #8]
 80128fe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012902:	6023      	str	r3, [r4, #0]
 8012904:	6123      	str	r3, [r4, #16]
 8012906:	2301      	movs	r3, #1
 8012908:	6163      	str	r3, [r4, #20]
 801290a:	b003      	add	sp, #12
 801290c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012910:	4b22      	ldr	r3, [pc, #136]	; (801299c <setvbuf+0x154>)
 8012912:	429c      	cmp	r4, r3
 8012914:	d101      	bne.n	801291a <setvbuf+0xd2>
 8012916:	68b4      	ldr	r4, [r6, #8]
 8012918:	e7a8      	b.n	801286c <setvbuf+0x24>
 801291a:	4b21      	ldr	r3, [pc, #132]	; (80129a0 <setvbuf+0x158>)
 801291c:	429c      	cmp	r4, r3
 801291e:	bf08      	it	eq
 8012920:	68f4      	ldreq	r4, [r6, #12]
 8012922:	e7a3      	b.n	801286c <setvbuf+0x24>
 8012924:	2f00      	cmp	r7, #0
 8012926:	d0d8      	beq.n	80128da <setvbuf+0x92>
 8012928:	69b3      	ldr	r3, [r6, #24]
 801292a:	b913      	cbnz	r3, 8012932 <setvbuf+0xea>
 801292c:	4630      	mov	r0, r6
 801292e:	f000 f9e9 	bl	8012d04 <__sinit>
 8012932:	f1b8 0f01 	cmp.w	r8, #1
 8012936:	bf08      	it	eq
 8012938:	89a3      	ldrheq	r3, [r4, #12]
 801293a:	6027      	str	r7, [r4, #0]
 801293c:	bf04      	itt	eq
 801293e:	f043 0301 	orreq.w	r3, r3, #1
 8012942:	81a3      	strheq	r3, [r4, #12]
 8012944:	89a3      	ldrh	r3, [r4, #12]
 8012946:	f013 0008 	ands.w	r0, r3, #8
 801294a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 801294e:	d01b      	beq.n	8012988 <setvbuf+0x140>
 8012950:	f013 0001 	ands.w	r0, r3, #1
 8012954:	bf18      	it	ne
 8012956:	426d      	negne	r5, r5
 8012958:	f04f 0300 	mov.w	r3, #0
 801295c:	bf1d      	ittte	ne
 801295e:	60a3      	strne	r3, [r4, #8]
 8012960:	61a5      	strne	r5, [r4, #24]
 8012962:	4618      	movne	r0, r3
 8012964:	60a5      	streq	r5, [r4, #8]
 8012966:	e7d0      	b.n	801290a <setvbuf+0xc2>
 8012968:	4648      	mov	r0, r9
 801296a:	f000 fab9 	bl	8012ee0 <malloc>
 801296e:	4607      	mov	r7, r0
 8012970:	2800      	cmp	r0, #0
 8012972:	d0bc      	beq.n	80128ee <setvbuf+0xa6>
 8012974:	89a3      	ldrh	r3, [r4, #12]
 8012976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801297a:	81a3      	strh	r3, [r4, #12]
 801297c:	464d      	mov	r5, r9
 801297e:	e7d3      	b.n	8012928 <setvbuf+0xe0>
 8012980:	2000      	movs	r0, #0
 8012982:	e7b6      	b.n	80128f2 <setvbuf+0xaa>
 8012984:	46a9      	mov	r9, r5
 8012986:	e7f5      	b.n	8012974 <setvbuf+0x12c>
 8012988:	60a0      	str	r0, [r4, #8]
 801298a:	e7be      	b.n	801290a <setvbuf+0xc2>
 801298c:	f04f 30ff 	mov.w	r0, #4294967295
 8012990:	e7bb      	b.n	801290a <setvbuf+0xc2>
 8012992:	bf00      	nop
 8012994:	20000084 	.word	0x20000084
 8012998:	08013ed4 	.word	0x08013ed4
 801299c:	08013ef4 	.word	0x08013ef4
 80129a0:	08013eb4 	.word	0x08013eb4

080129a4 <__swbuf_r>:
 80129a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129a6:	460e      	mov	r6, r1
 80129a8:	4614      	mov	r4, r2
 80129aa:	4605      	mov	r5, r0
 80129ac:	b118      	cbz	r0, 80129b6 <__swbuf_r+0x12>
 80129ae:	6983      	ldr	r3, [r0, #24]
 80129b0:	b90b      	cbnz	r3, 80129b6 <__swbuf_r+0x12>
 80129b2:	f000 f9a7 	bl	8012d04 <__sinit>
 80129b6:	4b21      	ldr	r3, [pc, #132]	; (8012a3c <__swbuf_r+0x98>)
 80129b8:	429c      	cmp	r4, r3
 80129ba:	d12a      	bne.n	8012a12 <__swbuf_r+0x6e>
 80129bc:	686c      	ldr	r4, [r5, #4]
 80129be:	69a3      	ldr	r3, [r4, #24]
 80129c0:	60a3      	str	r3, [r4, #8]
 80129c2:	89a3      	ldrh	r3, [r4, #12]
 80129c4:	071a      	lsls	r2, r3, #28
 80129c6:	d52e      	bpl.n	8012a26 <__swbuf_r+0x82>
 80129c8:	6923      	ldr	r3, [r4, #16]
 80129ca:	b363      	cbz	r3, 8012a26 <__swbuf_r+0x82>
 80129cc:	6923      	ldr	r3, [r4, #16]
 80129ce:	6820      	ldr	r0, [r4, #0]
 80129d0:	1ac0      	subs	r0, r0, r3
 80129d2:	6963      	ldr	r3, [r4, #20]
 80129d4:	b2f6      	uxtb	r6, r6
 80129d6:	4283      	cmp	r3, r0
 80129d8:	4637      	mov	r7, r6
 80129da:	dc04      	bgt.n	80129e6 <__swbuf_r+0x42>
 80129dc:	4621      	mov	r1, r4
 80129de:	4628      	mov	r0, r5
 80129e0:	f000 f926 	bl	8012c30 <_fflush_r>
 80129e4:	bb28      	cbnz	r0, 8012a32 <__swbuf_r+0x8e>
 80129e6:	68a3      	ldr	r3, [r4, #8]
 80129e8:	3b01      	subs	r3, #1
 80129ea:	60a3      	str	r3, [r4, #8]
 80129ec:	6823      	ldr	r3, [r4, #0]
 80129ee:	1c5a      	adds	r2, r3, #1
 80129f0:	6022      	str	r2, [r4, #0]
 80129f2:	701e      	strb	r6, [r3, #0]
 80129f4:	6963      	ldr	r3, [r4, #20]
 80129f6:	3001      	adds	r0, #1
 80129f8:	4283      	cmp	r3, r0
 80129fa:	d004      	beq.n	8012a06 <__swbuf_r+0x62>
 80129fc:	89a3      	ldrh	r3, [r4, #12]
 80129fe:	07db      	lsls	r3, r3, #31
 8012a00:	d519      	bpl.n	8012a36 <__swbuf_r+0x92>
 8012a02:	2e0a      	cmp	r6, #10
 8012a04:	d117      	bne.n	8012a36 <__swbuf_r+0x92>
 8012a06:	4621      	mov	r1, r4
 8012a08:	4628      	mov	r0, r5
 8012a0a:	f000 f911 	bl	8012c30 <_fflush_r>
 8012a0e:	b190      	cbz	r0, 8012a36 <__swbuf_r+0x92>
 8012a10:	e00f      	b.n	8012a32 <__swbuf_r+0x8e>
 8012a12:	4b0b      	ldr	r3, [pc, #44]	; (8012a40 <__swbuf_r+0x9c>)
 8012a14:	429c      	cmp	r4, r3
 8012a16:	d101      	bne.n	8012a1c <__swbuf_r+0x78>
 8012a18:	68ac      	ldr	r4, [r5, #8]
 8012a1a:	e7d0      	b.n	80129be <__swbuf_r+0x1a>
 8012a1c:	4b09      	ldr	r3, [pc, #36]	; (8012a44 <__swbuf_r+0xa0>)
 8012a1e:	429c      	cmp	r4, r3
 8012a20:	bf08      	it	eq
 8012a22:	68ec      	ldreq	r4, [r5, #12]
 8012a24:	e7cb      	b.n	80129be <__swbuf_r+0x1a>
 8012a26:	4621      	mov	r1, r4
 8012a28:	4628      	mov	r0, r5
 8012a2a:	f000 f80d 	bl	8012a48 <__swsetup_r>
 8012a2e:	2800      	cmp	r0, #0
 8012a30:	d0cc      	beq.n	80129cc <__swbuf_r+0x28>
 8012a32:	f04f 37ff 	mov.w	r7, #4294967295
 8012a36:	4638      	mov	r0, r7
 8012a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	08013ed4 	.word	0x08013ed4
 8012a40:	08013ef4 	.word	0x08013ef4
 8012a44:	08013eb4 	.word	0x08013eb4

08012a48 <__swsetup_r>:
 8012a48:	4b32      	ldr	r3, [pc, #200]	; (8012b14 <__swsetup_r+0xcc>)
 8012a4a:	b570      	push	{r4, r5, r6, lr}
 8012a4c:	681d      	ldr	r5, [r3, #0]
 8012a4e:	4606      	mov	r6, r0
 8012a50:	460c      	mov	r4, r1
 8012a52:	b125      	cbz	r5, 8012a5e <__swsetup_r+0x16>
 8012a54:	69ab      	ldr	r3, [r5, #24]
 8012a56:	b913      	cbnz	r3, 8012a5e <__swsetup_r+0x16>
 8012a58:	4628      	mov	r0, r5
 8012a5a:	f000 f953 	bl	8012d04 <__sinit>
 8012a5e:	4b2e      	ldr	r3, [pc, #184]	; (8012b18 <__swsetup_r+0xd0>)
 8012a60:	429c      	cmp	r4, r3
 8012a62:	d10f      	bne.n	8012a84 <__swsetup_r+0x3c>
 8012a64:	686c      	ldr	r4, [r5, #4]
 8012a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a6a:	b29a      	uxth	r2, r3
 8012a6c:	0715      	lsls	r5, r2, #28
 8012a6e:	d42c      	bmi.n	8012aca <__swsetup_r+0x82>
 8012a70:	06d0      	lsls	r0, r2, #27
 8012a72:	d411      	bmi.n	8012a98 <__swsetup_r+0x50>
 8012a74:	2209      	movs	r2, #9
 8012a76:	6032      	str	r2, [r6, #0]
 8012a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a7c:	81a3      	strh	r3, [r4, #12]
 8012a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8012a82:	e03e      	b.n	8012b02 <__swsetup_r+0xba>
 8012a84:	4b25      	ldr	r3, [pc, #148]	; (8012b1c <__swsetup_r+0xd4>)
 8012a86:	429c      	cmp	r4, r3
 8012a88:	d101      	bne.n	8012a8e <__swsetup_r+0x46>
 8012a8a:	68ac      	ldr	r4, [r5, #8]
 8012a8c:	e7eb      	b.n	8012a66 <__swsetup_r+0x1e>
 8012a8e:	4b24      	ldr	r3, [pc, #144]	; (8012b20 <__swsetup_r+0xd8>)
 8012a90:	429c      	cmp	r4, r3
 8012a92:	bf08      	it	eq
 8012a94:	68ec      	ldreq	r4, [r5, #12]
 8012a96:	e7e6      	b.n	8012a66 <__swsetup_r+0x1e>
 8012a98:	0751      	lsls	r1, r2, #29
 8012a9a:	d512      	bpl.n	8012ac2 <__swsetup_r+0x7a>
 8012a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a9e:	b141      	cbz	r1, 8012ab2 <__swsetup_r+0x6a>
 8012aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012aa4:	4299      	cmp	r1, r3
 8012aa6:	d002      	beq.n	8012aae <__swsetup_r+0x66>
 8012aa8:	4630      	mov	r0, r6
 8012aaa:	f000 fa21 	bl	8012ef0 <_free_r>
 8012aae:	2300      	movs	r3, #0
 8012ab0:	6363      	str	r3, [r4, #52]	; 0x34
 8012ab2:	89a3      	ldrh	r3, [r4, #12]
 8012ab4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012ab8:	81a3      	strh	r3, [r4, #12]
 8012aba:	2300      	movs	r3, #0
 8012abc:	6063      	str	r3, [r4, #4]
 8012abe:	6923      	ldr	r3, [r4, #16]
 8012ac0:	6023      	str	r3, [r4, #0]
 8012ac2:	89a3      	ldrh	r3, [r4, #12]
 8012ac4:	f043 0308 	orr.w	r3, r3, #8
 8012ac8:	81a3      	strh	r3, [r4, #12]
 8012aca:	6923      	ldr	r3, [r4, #16]
 8012acc:	b94b      	cbnz	r3, 8012ae2 <__swsetup_r+0x9a>
 8012ace:	89a3      	ldrh	r3, [r4, #12]
 8012ad0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ad8:	d003      	beq.n	8012ae2 <__swsetup_r+0x9a>
 8012ada:	4621      	mov	r1, r4
 8012adc:	4630      	mov	r0, r6
 8012ade:	f000 f9bf 	bl	8012e60 <__smakebuf_r>
 8012ae2:	89a2      	ldrh	r2, [r4, #12]
 8012ae4:	f012 0301 	ands.w	r3, r2, #1
 8012ae8:	d00c      	beq.n	8012b04 <__swsetup_r+0xbc>
 8012aea:	2300      	movs	r3, #0
 8012aec:	60a3      	str	r3, [r4, #8]
 8012aee:	6963      	ldr	r3, [r4, #20]
 8012af0:	425b      	negs	r3, r3
 8012af2:	61a3      	str	r3, [r4, #24]
 8012af4:	6923      	ldr	r3, [r4, #16]
 8012af6:	b953      	cbnz	r3, 8012b0e <__swsetup_r+0xc6>
 8012af8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012afc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012b00:	d1ba      	bne.n	8012a78 <__swsetup_r+0x30>
 8012b02:	bd70      	pop	{r4, r5, r6, pc}
 8012b04:	0792      	lsls	r2, r2, #30
 8012b06:	bf58      	it	pl
 8012b08:	6963      	ldrpl	r3, [r4, #20]
 8012b0a:	60a3      	str	r3, [r4, #8]
 8012b0c:	e7f2      	b.n	8012af4 <__swsetup_r+0xac>
 8012b0e:	2000      	movs	r0, #0
 8012b10:	e7f7      	b.n	8012b02 <__swsetup_r+0xba>
 8012b12:	bf00      	nop
 8012b14:	20000084 	.word	0x20000084
 8012b18:	08013ed4 	.word	0x08013ed4
 8012b1c:	08013ef4 	.word	0x08013ef4
 8012b20:	08013eb4 	.word	0x08013eb4

08012b24 <__sflush_r>:
 8012b24:	898a      	ldrh	r2, [r1, #12]
 8012b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b2a:	4605      	mov	r5, r0
 8012b2c:	0710      	lsls	r0, r2, #28
 8012b2e:	460c      	mov	r4, r1
 8012b30:	d458      	bmi.n	8012be4 <__sflush_r+0xc0>
 8012b32:	684b      	ldr	r3, [r1, #4]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	dc05      	bgt.n	8012b44 <__sflush_r+0x20>
 8012b38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	dc02      	bgt.n	8012b44 <__sflush_r+0x20>
 8012b3e:	2000      	movs	r0, #0
 8012b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012b46:	2e00      	cmp	r6, #0
 8012b48:	d0f9      	beq.n	8012b3e <__sflush_r+0x1a>
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012b50:	682f      	ldr	r7, [r5, #0]
 8012b52:	6a21      	ldr	r1, [r4, #32]
 8012b54:	602b      	str	r3, [r5, #0]
 8012b56:	d032      	beq.n	8012bbe <__sflush_r+0x9a>
 8012b58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012b5a:	89a3      	ldrh	r3, [r4, #12]
 8012b5c:	075a      	lsls	r2, r3, #29
 8012b5e:	d505      	bpl.n	8012b6c <__sflush_r+0x48>
 8012b60:	6863      	ldr	r3, [r4, #4]
 8012b62:	1ac0      	subs	r0, r0, r3
 8012b64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012b66:	b10b      	cbz	r3, 8012b6c <__sflush_r+0x48>
 8012b68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012b6a:	1ac0      	subs	r0, r0, r3
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	4602      	mov	r2, r0
 8012b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012b72:	6a21      	ldr	r1, [r4, #32]
 8012b74:	4628      	mov	r0, r5
 8012b76:	47b0      	blx	r6
 8012b78:	1c43      	adds	r3, r0, #1
 8012b7a:	89a3      	ldrh	r3, [r4, #12]
 8012b7c:	d106      	bne.n	8012b8c <__sflush_r+0x68>
 8012b7e:	6829      	ldr	r1, [r5, #0]
 8012b80:	291d      	cmp	r1, #29
 8012b82:	d848      	bhi.n	8012c16 <__sflush_r+0xf2>
 8012b84:	4a29      	ldr	r2, [pc, #164]	; (8012c2c <__sflush_r+0x108>)
 8012b86:	40ca      	lsrs	r2, r1
 8012b88:	07d6      	lsls	r6, r2, #31
 8012b8a:	d544      	bpl.n	8012c16 <__sflush_r+0xf2>
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	6062      	str	r2, [r4, #4]
 8012b90:	04d9      	lsls	r1, r3, #19
 8012b92:	6922      	ldr	r2, [r4, #16]
 8012b94:	6022      	str	r2, [r4, #0]
 8012b96:	d504      	bpl.n	8012ba2 <__sflush_r+0x7e>
 8012b98:	1c42      	adds	r2, r0, #1
 8012b9a:	d101      	bne.n	8012ba0 <__sflush_r+0x7c>
 8012b9c:	682b      	ldr	r3, [r5, #0]
 8012b9e:	b903      	cbnz	r3, 8012ba2 <__sflush_r+0x7e>
 8012ba0:	6560      	str	r0, [r4, #84]	; 0x54
 8012ba2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ba4:	602f      	str	r7, [r5, #0]
 8012ba6:	2900      	cmp	r1, #0
 8012ba8:	d0c9      	beq.n	8012b3e <__sflush_r+0x1a>
 8012baa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012bae:	4299      	cmp	r1, r3
 8012bb0:	d002      	beq.n	8012bb8 <__sflush_r+0x94>
 8012bb2:	4628      	mov	r0, r5
 8012bb4:	f000 f99c 	bl	8012ef0 <_free_r>
 8012bb8:	2000      	movs	r0, #0
 8012bba:	6360      	str	r0, [r4, #52]	; 0x34
 8012bbc:	e7c0      	b.n	8012b40 <__sflush_r+0x1c>
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	4628      	mov	r0, r5
 8012bc2:	47b0      	blx	r6
 8012bc4:	1c41      	adds	r1, r0, #1
 8012bc6:	d1c8      	bne.n	8012b5a <__sflush_r+0x36>
 8012bc8:	682b      	ldr	r3, [r5, #0]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d0c5      	beq.n	8012b5a <__sflush_r+0x36>
 8012bce:	2b1d      	cmp	r3, #29
 8012bd0:	d001      	beq.n	8012bd6 <__sflush_r+0xb2>
 8012bd2:	2b16      	cmp	r3, #22
 8012bd4:	d101      	bne.n	8012bda <__sflush_r+0xb6>
 8012bd6:	602f      	str	r7, [r5, #0]
 8012bd8:	e7b1      	b.n	8012b3e <__sflush_r+0x1a>
 8012bda:	89a3      	ldrh	r3, [r4, #12]
 8012bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012be0:	81a3      	strh	r3, [r4, #12]
 8012be2:	e7ad      	b.n	8012b40 <__sflush_r+0x1c>
 8012be4:	690f      	ldr	r7, [r1, #16]
 8012be6:	2f00      	cmp	r7, #0
 8012be8:	d0a9      	beq.n	8012b3e <__sflush_r+0x1a>
 8012bea:	0793      	lsls	r3, r2, #30
 8012bec:	680e      	ldr	r6, [r1, #0]
 8012bee:	bf08      	it	eq
 8012bf0:	694b      	ldreq	r3, [r1, #20]
 8012bf2:	600f      	str	r7, [r1, #0]
 8012bf4:	bf18      	it	ne
 8012bf6:	2300      	movne	r3, #0
 8012bf8:	eba6 0807 	sub.w	r8, r6, r7
 8012bfc:	608b      	str	r3, [r1, #8]
 8012bfe:	f1b8 0f00 	cmp.w	r8, #0
 8012c02:	dd9c      	ble.n	8012b3e <__sflush_r+0x1a>
 8012c04:	4643      	mov	r3, r8
 8012c06:	463a      	mov	r2, r7
 8012c08:	6a21      	ldr	r1, [r4, #32]
 8012c0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012c0c:	4628      	mov	r0, r5
 8012c0e:	47b0      	blx	r6
 8012c10:	2800      	cmp	r0, #0
 8012c12:	dc06      	bgt.n	8012c22 <__sflush_r+0xfe>
 8012c14:	89a3      	ldrh	r3, [r4, #12]
 8012c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c1a:	81a3      	strh	r3, [r4, #12]
 8012c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c20:	e78e      	b.n	8012b40 <__sflush_r+0x1c>
 8012c22:	4407      	add	r7, r0
 8012c24:	eba8 0800 	sub.w	r8, r8, r0
 8012c28:	e7e9      	b.n	8012bfe <__sflush_r+0xda>
 8012c2a:	bf00      	nop
 8012c2c:	20400001 	.word	0x20400001

08012c30 <_fflush_r>:
 8012c30:	b538      	push	{r3, r4, r5, lr}
 8012c32:	690b      	ldr	r3, [r1, #16]
 8012c34:	4605      	mov	r5, r0
 8012c36:	460c      	mov	r4, r1
 8012c38:	b1db      	cbz	r3, 8012c72 <_fflush_r+0x42>
 8012c3a:	b118      	cbz	r0, 8012c44 <_fflush_r+0x14>
 8012c3c:	6983      	ldr	r3, [r0, #24]
 8012c3e:	b90b      	cbnz	r3, 8012c44 <_fflush_r+0x14>
 8012c40:	f000 f860 	bl	8012d04 <__sinit>
 8012c44:	4b0c      	ldr	r3, [pc, #48]	; (8012c78 <_fflush_r+0x48>)
 8012c46:	429c      	cmp	r4, r3
 8012c48:	d109      	bne.n	8012c5e <_fflush_r+0x2e>
 8012c4a:	686c      	ldr	r4, [r5, #4]
 8012c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c50:	b17b      	cbz	r3, 8012c72 <_fflush_r+0x42>
 8012c52:	4621      	mov	r1, r4
 8012c54:	4628      	mov	r0, r5
 8012c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c5a:	f7ff bf63 	b.w	8012b24 <__sflush_r>
 8012c5e:	4b07      	ldr	r3, [pc, #28]	; (8012c7c <_fflush_r+0x4c>)
 8012c60:	429c      	cmp	r4, r3
 8012c62:	d101      	bne.n	8012c68 <_fflush_r+0x38>
 8012c64:	68ac      	ldr	r4, [r5, #8]
 8012c66:	e7f1      	b.n	8012c4c <_fflush_r+0x1c>
 8012c68:	4b05      	ldr	r3, [pc, #20]	; (8012c80 <_fflush_r+0x50>)
 8012c6a:	429c      	cmp	r4, r3
 8012c6c:	bf08      	it	eq
 8012c6e:	68ec      	ldreq	r4, [r5, #12]
 8012c70:	e7ec      	b.n	8012c4c <_fflush_r+0x1c>
 8012c72:	2000      	movs	r0, #0
 8012c74:	bd38      	pop	{r3, r4, r5, pc}
 8012c76:	bf00      	nop
 8012c78:	08013ed4 	.word	0x08013ed4
 8012c7c:	08013ef4 	.word	0x08013ef4
 8012c80:	08013eb4 	.word	0x08013eb4

08012c84 <std>:
 8012c84:	2300      	movs	r3, #0
 8012c86:	b510      	push	{r4, lr}
 8012c88:	4604      	mov	r4, r0
 8012c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8012c8e:	6083      	str	r3, [r0, #8]
 8012c90:	8181      	strh	r1, [r0, #12]
 8012c92:	6643      	str	r3, [r0, #100]	; 0x64
 8012c94:	81c2      	strh	r2, [r0, #14]
 8012c96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012c9a:	6183      	str	r3, [r0, #24]
 8012c9c:	4619      	mov	r1, r3
 8012c9e:	2208      	movs	r2, #8
 8012ca0:	305c      	adds	r0, #92	; 0x5c
 8012ca2:	f7ff fd45 	bl	8012730 <memset>
 8012ca6:	4b05      	ldr	r3, [pc, #20]	; (8012cbc <std+0x38>)
 8012ca8:	6263      	str	r3, [r4, #36]	; 0x24
 8012caa:	4b05      	ldr	r3, [pc, #20]	; (8012cc0 <std+0x3c>)
 8012cac:	62a3      	str	r3, [r4, #40]	; 0x28
 8012cae:	4b05      	ldr	r3, [pc, #20]	; (8012cc4 <std+0x40>)
 8012cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012cb2:	4b05      	ldr	r3, [pc, #20]	; (8012cc8 <std+0x44>)
 8012cb4:	6224      	str	r4, [r4, #32]
 8012cb6:	6323      	str	r3, [r4, #48]	; 0x30
 8012cb8:	bd10      	pop	{r4, pc}
 8012cba:	bf00      	nop
 8012cbc:	080135f1 	.word	0x080135f1
 8012cc0:	08013613 	.word	0x08013613
 8012cc4:	0801364b 	.word	0x0801364b
 8012cc8:	0801366f 	.word	0x0801366f

08012ccc <_cleanup_r>:
 8012ccc:	4901      	ldr	r1, [pc, #4]	; (8012cd4 <_cleanup_r+0x8>)
 8012cce:	f000 b885 	b.w	8012ddc <_fwalk_reent>
 8012cd2:	bf00      	nop
 8012cd4:	08012c31 	.word	0x08012c31

08012cd8 <__sfmoreglue>:
 8012cd8:	b570      	push	{r4, r5, r6, lr}
 8012cda:	1e4a      	subs	r2, r1, #1
 8012cdc:	2568      	movs	r5, #104	; 0x68
 8012cde:	4355      	muls	r5, r2
 8012ce0:	460e      	mov	r6, r1
 8012ce2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012ce6:	f000 f951 	bl	8012f8c <_malloc_r>
 8012cea:	4604      	mov	r4, r0
 8012cec:	b140      	cbz	r0, 8012d00 <__sfmoreglue+0x28>
 8012cee:	2100      	movs	r1, #0
 8012cf0:	e9c0 1600 	strd	r1, r6, [r0]
 8012cf4:	300c      	adds	r0, #12
 8012cf6:	60a0      	str	r0, [r4, #8]
 8012cf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012cfc:	f7ff fd18 	bl	8012730 <memset>
 8012d00:	4620      	mov	r0, r4
 8012d02:	bd70      	pop	{r4, r5, r6, pc}

08012d04 <__sinit>:
 8012d04:	6983      	ldr	r3, [r0, #24]
 8012d06:	b510      	push	{r4, lr}
 8012d08:	4604      	mov	r4, r0
 8012d0a:	bb33      	cbnz	r3, 8012d5a <__sinit+0x56>
 8012d0c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012d10:	6503      	str	r3, [r0, #80]	; 0x50
 8012d12:	4b12      	ldr	r3, [pc, #72]	; (8012d5c <__sinit+0x58>)
 8012d14:	4a12      	ldr	r2, [pc, #72]	; (8012d60 <__sinit+0x5c>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	6282      	str	r2, [r0, #40]	; 0x28
 8012d1a:	4298      	cmp	r0, r3
 8012d1c:	bf04      	itt	eq
 8012d1e:	2301      	moveq	r3, #1
 8012d20:	6183      	streq	r3, [r0, #24]
 8012d22:	f000 f81f 	bl	8012d64 <__sfp>
 8012d26:	6060      	str	r0, [r4, #4]
 8012d28:	4620      	mov	r0, r4
 8012d2a:	f000 f81b 	bl	8012d64 <__sfp>
 8012d2e:	60a0      	str	r0, [r4, #8]
 8012d30:	4620      	mov	r0, r4
 8012d32:	f000 f817 	bl	8012d64 <__sfp>
 8012d36:	2200      	movs	r2, #0
 8012d38:	60e0      	str	r0, [r4, #12]
 8012d3a:	2104      	movs	r1, #4
 8012d3c:	6860      	ldr	r0, [r4, #4]
 8012d3e:	f7ff ffa1 	bl	8012c84 <std>
 8012d42:	2201      	movs	r2, #1
 8012d44:	2109      	movs	r1, #9
 8012d46:	68a0      	ldr	r0, [r4, #8]
 8012d48:	f7ff ff9c 	bl	8012c84 <std>
 8012d4c:	2202      	movs	r2, #2
 8012d4e:	2112      	movs	r1, #18
 8012d50:	68e0      	ldr	r0, [r4, #12]
 8012d52:	f7ff ff97 	bl	8012c84 <std>
 8012d56:	2301      	movs	r3, #1
 8012d58:	61a3      	str	r3, [r4, #24]
 8012d5a:	bd10      	pop	{r4, pc}
 8012d5c:	08013eb0 	.word	0x08013eb0
 8012d60:	08012ccd 	.word	0x08012ccd

08012d64 <__sfp>:
 8012d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d66:	4b1b      	ldr	r3, [pc, #108]	; (8012dd4 <__sfp+0x70>)
 8012d68:	681e      	ldr	r6, [r3, #0]
 8012d6a:	69b3      	ldr	r3, [r6, #24]
 8012d6c:	4607      	mov	r7, r0
 8012d6e:	b913      	cbnz	r3, 8012d76 <__sfp+0x12>
 8012d70:	4630      	mov	r0, r6
 8012d72:	f7ff ffc7 	bl	8012d04 <__sinit>
 8012d76:	3648      	adds	r6, #72	; 0x48
 8012d78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012d7c:	3b01      	subs	r3, #1
 8012d7e:	d503      	bpl.n	8012d88 <__sfp+0x24>
 8012d80:	6833      	ldr	r3, [r6, #0]
 8012d82:	b133      	cbz	r3, 8012d92 <__sfp+0x2e>
 8012d84:	6836      	ldr	r6, [r6, #0]
 8012d86:	e7f7      	b.n	8012d78 <__sfp+0x14>
 8012d88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012d8c:	b16d      	cbz	r5, 8012daa <__sfp+0x46>
 8012d8e:	3468      	adds	r4, #104	; 0x68
 8012d90:	e7f4      	b.n	8012d7c <__sfp+0x18>
 8012d92:	2104      	movs	r1, #4
 8012d94:	4638      	mov	r0, r7
 8012d96:	f7ff ff9f 	bl	8012cd8 <__sfmoreglue>
 8012d9a:	6030      	str	r0, [r6, #0]
 8012d9c:	2800      	cmp	r0, #0
 8012d9e:	d1f1      	bne.n	8012d84 <__sfp+0x20>
 8012da0:	230c      	movs	r3, #12
 8012da2:	603b      	str	r3, [r7, #0]
 8012da4:	4604      	mov	r4, r0
 8012da6:	4620      	mov	r0, r4
 8012da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012daa:	4b0b      	ldr	r3, [pc, #44]	; (8012dd8 <__sfp+0x74>)
 8012dac:	6665      	str	r5, [r4, #100]	; 0x64
 8012dae:	e9c4 5500 	strd	r5, r5, [r4]
 8012db2:	60a5      	str	r5, [r4, #8]
 8012db4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012db8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012dbc:	2208      	movs	r2, #8
 8012dbe:	4629      	mov	r1, r5
 8012dc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012dc4:	f7ff fcb4 	bl	8012730 <memset>
 8012dc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012dcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012dd0:	e7e9      	b.n	8012da6 <__sfp+0x42>
 8012dd2:	bf00      	nop
 8012dd4:	08013eb0 	.word	0x08013eb0
 8012dd8:	ffff0001 	.word	0xffff0001

08012ddc <_fwalk_reent>:
 8012ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012de0:	4680      	mov	r8, r0
 8012de2:	4689      	mov	r9, r1
 8012de4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012de8:	2600      	movs	r6, #0
 8012dea:	b914      	cbnz	r4, 8012df2 <_fwalk_reent+0x16>
 8012dec:	4630      	mov	r0, r6
 8012dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012df2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012df6:	3f01      	subs	r7, #1
 8012df8:	d501      	bpl.n	8012dfe <_fwalk_reent+0x22>
 8012dfa:	6824      	ldr	r4, [r4, #0]
 8012dfc:	e7f5      	b.n	8012dea <_fwalk_reent+0xe>
 8012dfe:	89ab      	ldrh	r3, [r5, #12]
 8012e00:	2b01      	cmp	r3, #1
 8012e02:	d907      	bls.n	8012e14 <_fwalk_reent+0x38>
 8012e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012e08:	3301      	adds	r3, #1
 8012e0a:	d003      	beq.n	8012e14 <_fwalk_reent+0x38>
 8012e0c:	4629      	mov	r1, r5
 8012e0e:	4640      	mov	r0, r8
 8012e10:	47c8      	blx	r9
 8012e12:	4306      	orrs	r6, r0
 8012e14:	3568      	adds	r5, #104	; 0x68
 8012e16:	e7ee      	b.n	8012df6 <_fwalk_reent+0x1a>

08012e18 <__swhatbuf_r>:
 8012e18:	b570      	push	{r4, r5, r6, lr}
 8012e1a:	460e      	mov	r6, r1
 8012e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e20:	2900      	cmp	r1, #0
 8012e22:	b096      	sub	sp, #88	; 0x58
 8012e24:	4614      	mov	r4, r2
 8012e26:	461d      	mov	r5, r3
 8012e28:	da07      	bge.n	8012e3a <__swhatbuf_r+0x22>
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	602b      	str	r3, [r5, #0]
 8012e2e:	89b3      	ldrh	r3, [r6, #12]
 8012e30:	061a      	lsls	r2, r3, #24
 8012e32:	d410      	bmi.n	8012e56 <__swhatbuf_r+0x3e>
 8012e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e38:	e00e      	b.n	8012e58 <__swhatbuf_r+0x40>
 8012e3a:	466a      	mov	r2, sp
 8012e3c:	f000 fc3e 	bl	80136bc <_fstat_r>
 8012e40:	2800      	cmp	r0, #0
 8012e42:	dbf2      	blt.n	8012e2a <__swhatbuf_r+0x12>
 8012e44:	9a01      	ldr	r2, [sp, #4]
 8012e46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012e4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012e4e:	425a      	negs	r2, r3
 8012e50:	415a      	adcs	r2, r3
 8012e52:	602a      	str	r2, [r5, #0]
 8012e54:	e7ee      	b.n	8012e34 <__swhatbuf_r+0x1c>
 8012e56:	2340      	movs	r3, #64	; 0x40
 8012e58:	2000      	movs	r0, #0
 8012e5a:	6023      	str	r3, [r4, #0]
 8012e5c:	b016      	add	sp, #88	; 0x58
 8012e5e:	bd70      	pop	{r4, r5, r6, pc}

08012e60 <__smakebuf_r>:
 8012e60:	898b      	ldrh	r3, [r1, #12]
 8012e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012e64:	079d      	lsls	r5, r3, #30
 8012e66:	4606      	mov	r6, r0
 8012e68:	460c      	mov	r4, r1
 8012e6a:	d507      	bpl.n	8012e7c <__smakebuf_r+0x1c>
 8012e6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012e70:	6023      	str	r3, [r4, #0]
 8012e72:	6123      	str	r3, [r4, #16]
 8012e74:	2301      	movs	r3, #1
 8012e76:	6163      	str	r3, [r4, #20]
 8012e78:	b002      	add	sp, #8
 8012e7a:	bd70      	pop	{r4, r5, r6, pc}
 8012e7c:	ab01      	add	r3, sp, #4
 8012e7e:	466a      	mov	r2, sp
 8012e80:	f7ff ffca 	bl	8012e18 <__swhatbuf_r>
 8012e84:	9900      	ldr	r1, [sp, #0]
 8012e86:	4605      	mov	r5, r0
 8012e88:	4630      	mov	r0, r6
 8012e8a:	f000 f87f 	bl	8012f8c <_malloc_r>
 8012e8e:	b948      	cbnz	r0, 8012ea4 <__smakebuf_r+0x44>
 8012e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e94:	059a      	lsls	r2, r3, #22
 8012e96:	d4ef      	bmi.n	8012e78 <__smakebuf_r+0x18>
 8012e98:	f023 0303 	bic.w	r3, r3, #3
 8012e9c:	f043 0302 	orr.w	r3, r3, #2
 8012ea0:	81a3      	strh	r3, [r4, #12]
 8012ea2:	e7e3      	b.n	8012e6c <__smakebuf_r+0xc>
 8012ea4:	4b0d      	ldr	r3, [pc, #52]	; (8012edc <__smakebuf_r+0x7c>)
 8012ea6:	62b3      	str	r3, [r6, #40]	; 0x28
 8012ea8:	89a3      	ldrh	r3, [r4, #12]
 8012eaa:	6020      	str	r0, [r4, #0]
 8012eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012eb0:	81a3      	strh	r3, [r4, #12]
 8012eb2:	9b00      	ldr	r3, [sp, #0]
 8012eb4:	6163      	str	r3, [r4, #20]
 8012eb6:	9b01      	ldr	r3, [sp, #4]
 8012eb8:	6120      	str	r0, [r4, #16]
 8012eba:	b15b      	cbz	r3, 8012ed4 <__smakebuf_r+0x74>
 8012ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ec0:	4630      	mov	r0, r6
 8012ec2:	f000 fc0d 	bl	80136e0 <_isatty_r>
 8012ec6:	b128      	cbz	r0, 8012ed4 <__smakebuf_r+0x74>
 8012ec8:	89a3      	ldrh	r3, [r4, #12]
 8012eca:	f023 0303 	bic.w	r3, r3, #3
 8012ece:	f043 0301 	orr.w	r3, r3, #1
 8012ed2:	81a3      	strh	r3, [r4, #12]
 8012ed4:	89a3      	ldrh	r3, [r4, #12]
 8012ed6:	431d      	orrs	r5, r3
 8012ed8:	81a5      	strh	r5, [r4, #12]
 8012eda:	e7cd      	b.n	8012e78 <__smakebuf_r+0x18>
 8012edc:	08012ccd 	.word	0x08012ccd

08012ee0 <malloc>:
 8012ee0:	4b02      	ldr	r3, [pc, #8]	; (8012eec <malloc+0xc>)
 8012ee2:	4601      	mov	r1, r0
 8012ee4:	6818      	ldr	r0, [r3, #0]
 8012ee6:	f000 b851 	b.w	8012f8c <_malloc_r>
 8012eea:	bf00      	nop
 8012eec:	20000084 	.word	0x20000084

08012ef0 <_free_r>:
 8012ef0:	b538      	push	{r3, r4, r5, lr}
 8012ef2:	4605      	mov	r5, r0
 8012ef4:	2900      	cmp	r1, #0
 8012ef6:	d045      	beq.n	8012f84 <_free_r+0x94>
 8012ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012efc:	1f0c      	subs	r4, r1, #4
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	bfb8      	it	lt
 8012f02:	18e4      	addlt	r4, r4, r3
 8012f04:	f000 fc0e 	bl	8013724 <__malloc_lock>
 8012f08:	4a1f      	ldr	r2, [pc, #124]	; (8012f88 <_free_r+0x98>)
 8012f0a:	6813      	ldr	r3, [r2, #0]
 8012f0c:	4610      	mov	r0, r2
 8012f0e:	b933      	cbnz	r3, 8012f1e <_free_r+0x2e>
 8012f10:	6063      	str	r3, [r4, #4]
 8012f12:	6014      	str	r4, [r2, #0]
 8012f14:	4628      	mov	r0, r5
 8012f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f1a:	f000 bc04 	b.w	8013726 <__malloc_unlock>
 8012f1e:	42a3      	cmp	r3, r4
 8012f20:	d90c      	bls.n	8012f3c <_free_r+0x4c>
 8012f22:	6821      	ldr	r1, [r4, #0]
 8012f24:	1862      	adds	r2, r4, r1
 8012f26:	4293      	cmp	r3, r2
 8012f28:	bf04      	itt	eq
 8012f2a:	681a      	ldreq	r2, [r3, #0]
 8012f2c:	685b      	ldreq	r3, [r3, #4]
 8012f2e:	6063      	str	r3, [r4, #4]
 8012f30:	bf04      	itt	eq
 8012f32:	1852      	addeq	r2, r2, r1
 8012f34:	6022      	streq	r2, [r4, #0]
 8012f36:	6004      	str	r4, [r0, #0]
 8012f38:	e7ec      	b.n	8012f14 <_free_r+0x24>
 8012f3a:	4613      	mov	r3, r2
 8012f3c:	685a      	ldr	r2, [r3, #4]
 8012f3e:	b10a      	cbz	r2, 8012f44 <_free_r+0x54>
 8012f40:	42a2      	cmp	r2, r4
 8012f42:	d9fa      	bls.n	8012f3a <_free_r+0x4a>
 8012f44:	6819      	ldr	r1, [r3, #0]
 8012f46:	1858      	adds	r0, r3, r1
 8012f48:	42a0      	cmp	r0, r4
 8012f4a:	d10b      	bne.n	8012f64 <_free_r+0x74>
 8012f4c:	6820      	ldr	r0, [r4, #0]
 8012f4e:	4401      	add	r1, r0
 8012f50:	1858      	adds	r0, r3, r1
 8012f52:	4282      	cmp	r2, r0
 8012f54:	6019      	str	r1, [r3, #0]
 8012f56:	d1dd      	bne.n	8012f14 <_free_r+0x24>
 8012f58:	6810      	ldr	r0, [r2, #0]
 8012f5a:	6852      	ldr	r2, [r2, #4]
 8012f5c:	605a      	str	r2, [r3, #4]
 8012f5e:	4401      	add	r1, r0
 8012f60:	6019      	str	r1, [r3, #0]
 8012f62:	e7d7      	b.n	8012f14 <_free_r+0x24>
 8012f64:	d902      	bls.n	8012f6c <_free_r+0x7c>
 8012f66:	230c      	movs	r3, #12
 8012f68:	602b      	str	r3, [r5, #0]
 8012f6a:	e7d3      	b.n	8012f14 <_free_r+0x24>
 8012f6c:	6820      	ldr	r0, [r4, #0]
 8012f6e:	1821      	adds	r1, r4, r0
 8012f70:	428a      	cmp	r2, r1
 8012f72:	bf04      	itt	eq
 8012f74:	6811      	ldreq	r1, [r2, #0]
 8012f76:	6852      	ldreq	r2, [r2, #4]
 8012f78:	6062      	str	r2, [r4, #4]
 8012f7a:	bf04      	itt	eq
 8012f7c:	1809      	addeq	r1, r1, r0
 8012f7e:	6021      	streq	r1, [r4, #0]
 8012f80:	605c      	str	r4, [r3, #4]
 8012f82:	e7c7      	b.n	8012f14 <_free_r+0x24>
 8012f84:	bd38      	pop	{r3, r4, r5, pc}
 8012f86:	bf00      	nop
 8012f88:	20000118 	.word	0x20000118

08012f8c <_malloc_r>:
 8012f8c:	b570      	push	{r4, r5, r6, lr}
 8012f8e:	1ccd      	adds	r5, r1, #3
 8012f90:	f025 0503 	bic.w	r5, r5, #3
 8012f94:	3508      	adds	r5, #8
 8012f96:	2d0c      	cmp	r5, #12
 8012f98:	bf38      	it	cc
 8012f9a:	250c      	movcc	r5, #12
 8012f9c:	2d00      	cmp	r5, #0
 8012f9e:	4606      	mov	r6, r0
 8012fa0:	db01      	blt.n	8012fa6 <_malloc_r+0x1a>
 8012fa2:	42a9      	cmp	r1, r5
 8012fa4:	d903      	bls.n	8012fae <_malloc_r+0x22>
 8012fa6:	230c      	movs	r3, #12
 8012fa8:	6033      	str	r3, [r6, #0]
 8012faa:	2000      	movs	r0, #0
 8012fac:	bd70      	pop	{r4, r5, r6, pc}
 8012fae:	f000 fbb9 	bl	8013724 <__malloc_lock>
 8012fb2:	4a21      	ldr	r2, [pc, #132]	; (8013038 <_malloc_r+0xac>)
 8012fb4:	6814      	ldr	r4, [r2, #0]
 8012fb6:	4621      	mov	r1, r4
 8012fb8:	b991      	cbnz	r1, 8012fe0 <_malloc_r+0x54>
 8012fba:	4c20      	ldr	r4, [pc, #128]	; (801303c <_malloc_r+0xb0>)
 8012fbc:	6823      	ldr	r3, [r4, #0]
 8012fbe:	b91b      	cbnz	r3, 8012fc8 <_malloc_r+0x3c>
 8012fc0:	4630      	mov	r0, r6
 8012fc2:	f000 fb05 	bl	80135d0 <_sbrk_r>
 8012fc6:	6020      	str	r0, [r4, #0]
 8012fc8:	4629      	mov	r1, r5
 8012fca:	4630      	mov	r0, r6
 8012fcc:	f000 fb00 	bl	80135d0 <_sbrk_r>
 8012fd0:	1c43      	adds	r3, r0, #1
 8012fd2:	d124      	bne.n	801301e <_malloc_r+0x92>
 8012fd4:	230c      	movs	r3, #12
 8012fd6:	6033      	str	r3, [r6, #0]
 8012fd8:	4630      	mov	r0, r6
 8012fda:	f000 fba4 	bl	8013726 <__malloc_unlock>
 8012fde:	e7e4      	b.n	8012faa <_malloc_r+0x1e>
 8012fe0:	680b      	ldr	r3, [r1, #0]
 8012fe2:	1b5b      	subs	r3, r3, r5
 8012fe4:	d418      	bmi.n	8013018 <_malloc_r+0x8c>
 8012fe6:	2b0b      	cmp	r3, #11
 8012fe8:	d90f      	bls.n	801300a <_malloc_r+0x7e>
 8012fea:	600b      	str	r3, [r1, #0]
 8012fec:	50cd      	str	r5, [r1, r3]
 8012fee:	18cc      	adds	r4, r1, r3
 8012ff0:	4630      	mov	r0, r6
 8012ff2:	f000 fb98 	bl	8013726 <__malloc_unlock>
 8012ff6:	f104 000b 	add.w	r0, r4, #11
 8012ffa:	1d23      	adds	r3, r4, #4
 8012ffc:	f020 0007 	bic.w	r0, r0, #7
 8013000:	1ac3      	subs	r3, r0, r3
 8013002:	d0d3      	beq.n	8012fac <_malloc_r+0x20>
 8013004:	425a      	negs	r2, r3
 8013006:	50e2      	str	r2, [r4, r3]
 8013008:	e7d0      	b.n	8012fac <_malloc_r+0x20>
 801300a:	428c      	cmp	r4, r1
 801300c:	684b      	ldr	r3, [r1, #4]
 801300e:	bf16      	itet	ne
 8013010:	6063      	strne	r3, [r4, #4]
 8013012:	6013      	streq	r3, [r2, #0]
 8013014:	460c      	movne	r4, r1
 8013016:	e7eb      	b.n	8012ff0 <_malloc_r+0x64>
 8013018:	460c      	mov	r4, r1
 801301a:	6849      	ldr	r1, [r1, #4]
 801301c:	e7cc      	b.n	8012fb8 <_malloc_r+0x2c>
 801301e:	1cc4      	adds	r4, r0, #3
 8013020:	f024 0403 	bic.w	r4, r4, #3
 8013024:	42a0      	cmp	r0, r4
 8013026:	d005      	beq.n	8013034 <_malloc_r+0xa8>
 8013028:	1a21      	subs	r1, r4, r0
 801302a:	4630      	mov	r0, r6
 801302c:	f000 fad0 	bl	80135d0 <_sbrk_r>
 8013030:	3001      	adds	r0, #1
 8013032:	d0cf      	beq.n	8012fd4 <_malloc_r+0x48>
 8013034:	6025      	str	r5, [r4, #0]
 8013036:	e7db      	b.n	8012ff0 <_malloc_r+0x64>
 8013038:	20000118 	.word	0x20000118
 801303c:	2000011c 	.word	0x2000011c

08013040 <__sfputc_r>:
 8013040:	6893      	ldr	r3, [r2, #8]
 8013042:	3b01      	subs	r3, #1
 8013044:	2b00      	cmp	r3, #0
 8013046:	b410      	push	{r4}
 8013048:	6093      	str	r3, [r2, #8]
 801304a:	da08      	bge.n	801305e <__sfputc_r+0x1e>
 801304c:	6994      	ldr	r4, [r2, #24]
 801304e:	42a3      	cmp	r3, r4
 8013050:	db01      	blt.n	8013056 <__sfputc_r+0x16>
 8013052:	290a      	cmp	r1, #10
 8013054:	d103      	bne.n	801305e <__sfputc_r+0x1e>
 8013056:	f85d 4b04 	ldr.w	r4, [sp], #4
 801305a:	f7ff bca3 	b.w	80129a4 <__swbuf_r>
 801305e:	6813      	ldr	r3, [r2, #0]
 8013060:	1c58      	adds	r0, r3, #1
 8013062:	6010      	str	r0, [r2, #0]
 8013064:	7019      	strb	r1, [r3, #0]
 8013066:	4608      	mov	r0, r1
 8013068:	f85d 4b04 	ldr.w	r4, [sp], #4
 801306c:	4770      	bx	lr

0801306e <__sfputs_r>:
 801306e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013070:	4606      	mov	r6, r0
 8013072:	460f      	mov	r7, r1
 8013074:	4614      	mov	r4, r2
 8013076:	18d5      	adds	r5, r2, r3
 8013078:	42ac      	cmp	r4, r5
 801307a:	d101      	bne.n	8013080 <__sfputs_r+0x12>
 801307c:	2000      	movs	r0, #0
 801307e:	e007      	b.n	8013090 <__sfputs_r+0x22>
 8013080:	463a      	mov	r2, r7
 8013082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013086:	4630      	mov	r0, r6
 8013088:	f7ff ffda 	bl	8013040 <__sfputc_r>
 801308c:	1c43      	adds	r3, r0, #1
 801308e:	d1f3      	bne.n	8013078 <__sfputs_r+0xa>
 8013090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013094 <_vfiprintf_r>:
 8013094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013098:	460c      	mov	r4, r1
 801309a:	b09d      	sub	sp, #116	; 0x74
 801309c:	4617      	mov	r7, r2
 801309e:	461d      	mov	r5, r3
 80130a0:	4606      	mov	r6, r0
 80130a2:	b118      	cbz	r0, 80130ac <_vfiprintf_r+0x18>
 80130a4:	6983      	ldr	r3, [r0, #24]
 80130a6:	b90b      	cbnz	r3, 80130ac <_vfiprintf_r+0x18>
 80130a8:	f7ff fe2c 	bl	8012d04 <__sinit>
 80130ac:	4b7c      	ldr	r3, [pc, #496]	; (80132a0 <_vfiprintf_r+0x20c>)
 80130ae:	429c      	cmp	r4, r3
 80130b0:	d158      	bne.n	8013164 <_vfiprintf_r+0xd0>
 80130b2:	6874      	ldr	r4, [r6, #4]
 80130b4:	89a3      	ldrh	r3, [r4, #12]
 80130b6:	0718      	lsls	r0, r3, #28
 80130b8:	d55e      	bpl.n	8013178 <_vfiprintf_r+0xe4>
 80130ba:	6923      	ldr	r3, [r4, #16]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d05b      	beq.n	8013178 <_vfiprintf_r+0xe4>
 80130c0:	2300      	movs	r3, #0
 80130c2:	9309      	str	r3, [sp, #36]	; 0x24
 80130c4:	2320      	movs	r3, #32
 80130c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80130ca:	2330      	movs	r3, #48	; 0x30
 80130cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80130d0:	9503      	str	r5, [sp, #12]
 80130d2:	f04f 0b01 	mov.w	fp, #1
 80130d6:	46b8      	mov	r8, r7
 80130d8:	4645      	mov	r5, r8
 80130da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80130de:	b10b      	cbz	r3, 80130e4 <_vfiprintf_r+0x50>
 80130e0:	2b25      	cmp	r3, #37	; 0x25
 80130e2:	d154      	bne.n	801318e <_vfiprintf_r+0xfa>
 80130e4:	ebb8 0a07 	subs.w	sl, r8, r7
 80130e8:	d00b      	beq.n	8013102 <_vfiprintf_r+0x6e>
 80130ea:	4653      	mov	r3, sl
 80130ec:	463a      	mov	r2, r7
 80130ee:	4621      	mov	r1, r4
 80130f0:	4630      	mov	r0, r6
 80130f2:	f7ff ffbc 	bl	801306e <__sfputs_r>
 80130f6:	3001      	adds	r0, #1
 80130f8:	f000 80c2 	beq.w	8013280 <_vfiprintf_r+0x1ec>
 80130fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130fe:	4453      	add	r3, sl
 8013100:	9309      	str	r3, [sp, #36]	; 0x24
 8013102:	f898 3000 	ldrb.w	r3, [r8]
 8013106:	2b00      	cmp	r3, #0
 8013108:	f000 80ba 	beq.w	8013280 <_vfiprintf_r+0x1ec>
 801310c:	2300      	movs	r3, #0
 801310e:	f04f 32ff 	mov.w	r2, #4294967295
 8013112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013116:	9304      	str	r3, [sp, #16]
 8013118:	9307      	str	r3, [sp, #28]
 801311a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801311e:	931a      	str	r3, [sp, #104]	; 0x68
 8013120:	46a8      	mov	r8, r5
 8013122:	2205      	movs	r2, #5
 8013124:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013128:	485e      	ldr	r0, [pc, #376]	; (80132a4 <_vfiprintf_r+0x210>)
 801312a:	f7ed f851 	bl	80001d0 <memchr>
 801312e:	9b04      	ldr	r3, [sp, #16]
 8013130:	bb78      	cbnz	r0, 8013192 <_vfiprintf_r+0xfe>
 8013132:	06d9      	lsls	r1, r3, #27
 8013134:	bf44      	itt	mi
 8013136:	2220      	movmi	r2, #32
 8013138:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801313c:	071a      	lsls	r2, r3, #28
 801313e:	bf44      	itt	mi
 8013140:	222b      	movmi	r2, #43	; 0x2b
 8013142:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013146:	782a      	ldrb	r2, [r5, #0]
 8013148:	2a2a      	cmp	r2, #42	; 0x2a
 801314a:	d02a      	beq.n	80131a2 <_vfiprintf_r+0x10e>
 801314c:	9a07      	ldr	r2, [sp, #28]
 801314e:	46a8      	mov	r8, r5
 8013150:	2000      	movs	r0, #0
 8013152:	250a      	movs	r5, #10
 8013154:	4641      	mov	r1, r8
 8013156:	f811 3b01 	ldrb.w	r3, [r1], #1
 801315a:	3b30      	subs	r3, #48	; 0x30
 801315c:	2b09      	cmp	r3, #9
 801315e:	d969      	bls.n	8013234 <_vfiprintf_r+0x1a0>
 8013160:	b360      	cbz	r0, 80131bc <_vfiprintf_r+0x128>
 8013162:	e024      	b.n	80131ae <_vfiprintf_r+0x11a>
 8013164:	4b50      	ldr	r3, [pc, #320]	; (80132a8 <_vfiprintf_r+0x214>)
 8013166:	429c      	cmp	r4, r3
 8013168:	d101      	bne.n	801316e <_vfiprintf_r+0xda>
 801316a:	68b4      	ldr	r4, [r6, #8]
 801316c:	e7a2      	b.n	80130b4 <_vfiprintf_r+0x20>
 801316e:	4b4f      	ldr	r3, [pc, #316]	; (80132ac <_vfiprintf_r+0x218>)
 8013170:	429c      	cmp	r4, r3
 8013172:	bf08      	it	eq
 8013174:	68f4      	ldreq	r4, [r6, #12]
 8013176:	e79d      	b.n	80130b4 <_vfiprintf_r+0x20>
 8013178:	4621      	mov	r1, r4
 801317a:	4630      	mov	r0, r6
 801317c:	f7ff fc64 	bl	8012a48 <__swsetup_r>
 8013180:	2800      	cmp	r0, #0
 8013182:	d09d      	beq.n	80130c0 <_vfiprintf_r+0x2c>
 8013184:	f04f 30ff 	mov.w	r0, #4294967295
 8013188:	b01d      	add	sp, #116	; 0x74
 801318a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801318e:	46a8      	mov	r8, r5
 8013190:	e7a2      	b.n	80130d8 <_vfiprintf_r+0x44>
 8013192:	4a44      	ldr	r2, [pc, #272]	; (80132a4 <_vfiprintf_r+0x210>)
 8013194:	1a80      	subs	r0, r0, r2
 8013196:	fa0b f000 	lsl.w	r0, fp, r0
 801319a:	4318      	orrs	r0, r3
 801319c:	9004      	str	r0, [sp, #16]
 801319e:	4645      	mov	r5, r8
 80131a0:	e7be      	b.n	8013120 <_vfiprintf_r+0x8c>
 80131a2:	9a03      	ldr	r2, [sp, #12]
 80131a4:	1d11      	adds	r1, r2, #4
 80131a6:	6812      	ldr	r2, [r2, #0]
 80131a8:	9103      	str	r1, [sp, #12]
 80131aa:	2a00      	cmp	r2, #0
 80131ac:	db01      	blt.n	80131b2 <_vfiprintf_r+0x11e>
 80131ae:	9207      	str	r2, [sp, #28]
 80131b0:	e004      	b.n	80131bc <_vfiprintf_r+0x128>
 80131b2:	4252      	negs	r2, r2
 80131b4:	f043 0302 	orr.w	r3, r3, #2
 80131b8:	9207      	str	r2, [sp, #28]
 80131ba:	9304      	str	r3, [sp, #16]
 80131bc:	f898 3000 	ldrb.w	r3, [r8]
 80131c0:	2b2e      	cmp	r3, #46	; 0x2e
 80131c2:	d10e      	bne.n	80131e2 <_vfiprintf_r+0x14e>
 80131c4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80131c8:	2b2a      	cmp	r3, #42	; 0x2a
 80131ca:	d138      	bne.n	801323e <_vfiprintf_r+0x1aa>
 80131cc:	9b03      	ldr	r3, [sp, #12]
 80131ce:	1d1a      	adds	r2, r3, #4
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	9203      	str	r2, [sp, #12]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	bfb8      	it	lt
 80131d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80131dc:	f108 0802 	add.w	r8, r8, #2
 80131e0:	9305      	str	r3, [sp, #20]
 80131e2:	4d33      	ldr	r5, [pc, #204]	; (80132b0 <_vfiprintf_r+0x21c>)
 80131e4:	f898 1000 	ldrb.w	r1, [r8]
 80131e8:	2203      	movs	r2, #3
 80131ea:	4628      	mov	r0, r5
 80131ec:	f7ec fff0 	bl	80001d0 <memchr>
 80131f0:	b140      	cbz	r0, 8013204 <_vfiprintf_r+0x170>
 80131f2:	2340      	movs	r3, #64	; 0x40
 80131f4:	1b40      	subs	r0, r0, r5
 80131f6:	fa03 f000 	lsl.w	r0, r3, r0
 80131fa:	9b04      	ldr	r3, [sp, #16]
 80131fc:	4303      	orrs	r3, r0
 80131fe:	f108 0801 	add.w	r8, r8, #1
 8013202:	9304      	str	r3, [sp, #16]
 8013204:	f898 1000 	ldrb.w	r1, [r8]
 8013208:	482a      	ldr	r0, [pc, #168]	; (80132b4 <_vfiprintf_r+0x220>)
 801320a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801320e:	2206      	movs	r2, #6
 8013210:	f108 0701 	add.w	r7, r8, #1
 8013214:	f7ec ffdc 	bl	80001d0 <memchr>
 8013218:	2800      	cmp	r0, #0
 801321a:	d037      	beq.n	801328c <_vfiprintf_r+0x1f8>
 801321c:	4b26      	ldr	r3, [pc, #152]	; (80132b8 <_vfiprintf_r+0x224>)
 801321e:	bb1b      	cbnz	r3, 8013268 <_vfiprintf_r+0x1d4>
 8013220:	9b03      	ldr	r3, [sp, #12]
 8013222:	3307      	adds	r3, #7
 8013224:	f023 0307 	bic.w	r3, r3, #7
 8013228:	3308      	adds	r3, #8
 801322a:	9303      	str	r3, [sp, #12]
 801322c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801322e:	444b      	add	r3, r9
 8013230:	9309      	str	r3, [sp, #36]	; 0x24
 8013232:	e750      	b.n	80130d6 <_vfiprintf_r+0x42>
 8013234:	fb05 3202 	mla	r2, r5, r2, r3
 8013238:	2001      	movs	r0, #1
 801323a:	4688      	mov	r8, r1
 801323c:	e78a      	b.n	8013154 <_vfiprintf_r+0xc0>
 801323e:	2300      	movs	r3, #0
 8013240:	f108 0801 	add.w	r8, r8, #1
 8013244:	9305      	str	r3, [sp, #20]
 8013246:	4619      	mov	r1, r3
 8013248:	250a      	movs	r5, #10
 801324a:	4640      	mov	r0, r8
 801324c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013250:	3a30      	subs	r2, #48	; 0x30
 8013252:	2a09      	cmp	r2, #9
 8013254:	d903      	bls.n	801325e <_vfiprintf_r+0x1ca>
 8013256:	2b00      	cmp	r3, #0
 8013258:	d0c3      	beq.n	80131e2 <_vfiprintf_r+0x14e>
 801325a:	9105      	str	r1, [sp, #20]
 801325c:	e7c1      	b.n	80131e2 <_vfiprintf_r+0x14e>
 801325e:	fb05 2101 	mla	r1, r5, r1, r2
 8013262:	2301      	movs	r3, #1
 8013264:	4680      	mov	r8, r0
 8013266:	e7f0      	b.n	801324a <_vfiprintf_r+0x1b6>
 8013268:	ab03      	add	r3, sp, #12
 801326a:	9300      	str	r3, [sp, #0]
 801326c:	4622      	mov	r2, r4
 801326e:	4b13      	ldr	r3, [pc, #76]	; (80132bc <_vfiprintf_r+0x228>)
 8013270:	a904      	add	r1, sp, #16
 8013272:	4630      	mov	r0, r6
 8013274:	f3af 8000 	nop.w
 8013278:	f1b0 3fff 	cmp.w	r0, #4294967295
 801327c:	4681      	mov	r9, r0
 801327e:	d1d5      	bne.n	801322c <_vfiprintf_r+0x198>
 8013280:	89a3      	ldrh	r3, [r4, #12]
 8013282:	065b      	lsls	r3, r3, #25
 8013284:	f53f af7e 	bmi.w	8013184 <_vfiprintf_r+0xf0>
 8013288:	9809      	ldr	r0, [sp, #36]	; 0x24
 801328a:	e77d      	b.n	8013188 <_vfiprintf_r+0xf4>
 801328c:	ab03      	add	r3, sp, #12
 801328e:	9300      	str	r3, [sp, #0]
 8013290:	4622      	mov	r2, r4
 8013292:	4b0a      	ldr	r3, [pc, #40]	; (80132bc <_vfiprintf_r+0x228>)
 8013294:	a904      	add	r1, sp, #16
 8013296:	4630      	mov	r0, r6
 8013298:	f000 f888 	bl	80133ac <_printf_i>
 801329c:	e7ec      	b.n	8013278 <_vfiprintf_r+0x1e4>
 801329e:	bf00      	nop
 80132a0:	08013ed4 	.word	0x08013ed4
 80132a4:	08013f14 	.word	0x08013f14
 80132a8:	08013ef4 	.word	0x08013ef4
 80132ac:	08013eb4 	.word	0x08013eb4
 80132b0:	08013f1a 	.word	0x08013f1a
 80132b4:	08013f1e 	.word	0x08013f1e
 80132b8:	00000000 	.word	0x00000000
 80132bc:	0801306f 	.word	0x0801306f

080132c0 <_printf_common>:
 80132c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132c4:	4691      	mov	r9, r2
 80132c6:	461f      	mov	r7, r3
 80132c8:	688a      	ldr	r2, [r1, #8]
 80132ca:	690b      	ldr	r3, [r1, #16]
 80132cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80132d0:	4293      	cmp	r3, r2
 80132d2:	bfb8      	it	lt
 80132d4:	4613      	movlt	r3, r2
 80132d6:	f8c9 3000 	str.w	r3, [r9]
 80132da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80132de:	4606      	mov	r6, r0
 80132e0:	460c      	mov	r4, r1
 80132e2:	b112      	cbz	r2, 80132ea <_printf_common+0x2a>
 80132e4:	3301      	adds	r3, #1
 80132e6:	f8c9 3000 	str.w	r3, [r9]
 80132ea:	6823      	ldr	r3, [r4, #0]
 80132ec:	0699      	lsls	r1, r3, #26
 80132ee:	bf42      	ittt	mi
 80132f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80132f4:	3302      	addmi	r3, #2
 80132f6:	f8c9 3000 	strmi.w	r3, [r9]
 80132fa:	6825      	ldr	r5, [r4, #0]
 80132fc:	f015 0506 	ands.w	r5, r5, #6
 8013300:	d107      	bne.n	8013312 <_printf_common+0x52>
 8013302:	f104 0a19 	add.w	sl, r4, #25
 8013306:	68e3      	ldr	r3, [r4, #12]
 8013308:	f8d9 2000 	ldr.w	r2, [r9]
 801330c:	1a9b      	subs	r3, r3, r2
 801330e:	42ab      	cmp	r3, r5
 8013310:	dc28      	bgt.n	8013364 <_printf_common+0xa4>
 8013312:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013316:	6822      	ldr	r2, [r4, #0]
 8013318:	3300      	adds	r3, #0
 801331a:	bf18      	it	ne
 801331c:	2301      	movne	r3, #1
 801331e:	0692      	lsls	r2, r2, #26
 8013320:	d42d      	bmi.n	801337e <_printf_common+0xbe>
 8013322:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013326:	4639      	mov	r1, r7
 8013328:	4630      	mov	r0, r6
 801332a:	47c0      	blx	r8
 801332c:	3001      	adds	r0, #1
 801332e:	d020      	beq.n	8013372 <_printf_common+0xb2>
 8013330:	6823      	ldr	r3, [r4, #0]
 8013332:	68e5      	ldr	r5, [r4, #12]
 8013334:	f8d9 2000 	ldr.w	r2, [r9]
 8013338:	f003 0306 	and.w	r3, r3, #6
 801333c:	2b04      	cmp	r3, #4
 801333e:	bf08      	it	eq
 8013340:	1aad      	subeq	r5, r5, r2
 8013342:	68a3      	ldr	r3, [r4, #8]
 8013344:	6922      	ldr	r2, [r4, #16]
 8013346:	bf0c      	ite	eq
 8013348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801334c:	2500      	movne	r5, #0
 801334e:	4293      	cmp	r3, r2
 8013350:	bfc4      	itt	gt
 8013352:	1a9b      	subgt	r3, r3, r2
 8013354:	18ed      	addgt	r5, r5, r3
 8013356:	f04f 0900 	mov.w	r9, #0
 801335a:	341a      	adds	r4, #26
 801335c:	454d      	cmp	r5, r9
 801335e:	d11a      	bne.n	8013396 <_printf_common+0xd6>
 8013360:	2000      	movs	r0, #0
 8013362:	e008      	b.n	8013376 <_printf_common+0xb6>
 8013364:	2301      	movs	r3, #1
 8013366:	4652      	mov	r2, sl
 8013368:	4639      	mov	r1, r7
 801336a:	4630      	mov	r0, r6
 801336c:	47c0      	blx	r8
 801336e:	3001      	adds	r0, #1
 8013370:	d103      	bne.n	801337a <_printf_common+0xba>
 8013372:	f04f 30ff 	mov.w	r0, #4294967295
 8013376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801337a:	3501      	adds	r5, #1
 801337c:	e7c3      	b.n	8013306 <_printf_common+0x46>
 801337e:	18e1      	adds	r1, r4, r3
 8013380:	1c5a      	adds	r2, r3, #1
 8013382:	2030      	movs	r0, #48	; 0x30
 8013384:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013388:	4422      	add	r2, r4
 801338a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801338e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013392:	3302      	adds	r3, #2
 8013394:	e7c5      	b.n	8013322 <_printf_common+0x62>
 8013396:	2301      	movs	r3, #1
 8013398:	4622      	mov	r2, r4
 801339a:	4639      	mov	r1, r7
 801339c:	4630      	mov	r0, r6
 801339e:	47c0      	blx	r8
 80133a0:	3001      	adds	r0, #1
 80133a2:	d0e6      	beq.n	8013372 <_printf_common+0xb2>
 80133a4:	f109 0901 	add.w	r9, r9, #1
 80133a8:	e7d8      	b.n	801335c <_printf_common+0x9c>
	...

080133ac <_printf_i>:
 80133ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80133b4:	460c      	mov	r4, r1
 80133b6:	7e09      	ldrb	r1, [r1, #24]
 80133b8:	b085      	sub	sp, #20
 80133ba:	296e      	cmp	r1, #110	; 0x6e
 80133bc:	4617      	mov	r7, r2
 80133be:	4606      	mov	r6, r0
 80133c0:	4698      	mov	r8, r3
 80133c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80133c4:	f000 80b3 	beq.w	801352e <_printf_i+0x182>
 80133c8:	d822      	bhi.n	8013410 <_printf_i+0x64>
 80133ca:	2963      	cmp	r1, #99	; 0x63
 80133cc:	d036      	beq.n	801343c <_printf_i+0x90>
 80133ce:	d80a      	bhi.n	80133e6 <_printf_i+0x3a>
 80133d0:	2900      	cmp	r1, #0
 80133d2:	f000 80b9 	beq.w	8013548 <_printf_i+0x19c>
 80133d6:	2958      	cmp	r1, #88	; 0x58
 80133d8:	f000 8083 	beq.w	80134e2 <_printf_i+0x136>
 80133dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80133e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80133e4:	e032      	b.n	801344c <_printf_i+0xa0>
 80133e6:	2964      	cmp	r1, #100	; 0x64
 80133e8:	d001      	beq.n	80133ee <_printf_i+0x42>
 80133ea:	2969      	cmp	r1, #105	; 0x69
 80133ec:	d1f6      	bne.n	80133dc <_printf_i+0x30>
 80133ee:	6820      	ldr	r0, [r4, #0]
 80133f0:	6813      	ldr	r3, [r2, #0]
 80133f2:	0605      	lsls	r5, r0, #24
 80133f4:	f103 0104 	add.w	r1, r3, #4
 80133f8:	d52a      	bpl.n	8013450 <_printf_i+0xa4>
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	6011      	str	r1, [r2, #0]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	da03      	bge.n	801340a <_printf_i+0x5e>
 8013402:	222d      	movs	r2, #45	; 0x2d
 8013404:	425b      	negs	r3, r3
 8013406:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801340a:	486f      	ldr	r0, [pc, #444]	; (80135c8 <_printf_i+0x21c>)
 801340c:	220a      	movs	r2, #10
 801340e:	e039      	b.n	8013484 <_printf_i+0xd8>
 8013410:	2973      	cmp	r1, #115	; 0x73
 8013412:	f000 809d 	beq.w	8013550 <_printf_i+0x1a4>
 8013416:	d808      	bhi.n	801342a <_printf_i+0x7e>
 8013418:	296f      	cmp	r1, #111	; 0x6f
 801341a:	d020      	beq.n	801345e <_printf_i+0xb2>
 801341c:	2970      	cmp	r1, #112	; 0x70
 801341e:	d1dd      	bne.n	80133dc <_printf_i+0x30>
 8013420:	6823      	ldr	r3, [r4, #0]
 8013422:	f043 0320 	orr.w	r3, r3, #32
 8013426:	6023      	str	r3, [r4, #0]
 8013428:	e003      	b.n	8013432 <_printf_i+0x86>
 801342a:	2975      	cmp	r1, #117	; 0x75
 801342c:	d017      	beq.n	801345e <_printf_i+0xb2>
 801342e:	2978      	cmp	r1, #120	; 0x78
 8013430:	d1d4      	bne.n	80133dc <_printf_i+0x30>
 8013432:	2378      	movs	r3, #120	; 0x78
 8013434:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013438:	4864      	ldr	r0, [pc, #400]	; (80135cc <_printf_i+0x220>)
 801343a:	e055      	b.n	80134e8 <_printf_i+0x13c>
 801343c:	6813      	ldr	r3, [r2, #0]
 801343e:	1d19      	adds	r1, r3, #4
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	6011      	str	r1, [r2, #0]
 8013444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801344c:	2301      	movs	r3, #1
 801344e:	e08c      	b.n	801356a <_printf_i+0x1be>
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	6011      	str	r1, [r2, #0]
 8013454:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013458:	bf18      	it	ne
 801345a:	b21b      	sxthne	r3, r3
 801345c:	e7cf      	b.n	80133fe <_printf_i+0x52>
 801345e:	6813      	ldr	r3, [r2, #0]
 8013460:	6825      	ldr	r5, [r4, #0]
 8013462:	1d18      	adds	r0, r3, #4
 8013464:	6010      	str	r0, [r2, #0]
 8013466:	0628      	lsls	r0, r5, #24
 8013468:	d501      	bpl.n	801346e <_printf_i+0xc2>
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	e002      	b.n	8013474 <_printf_i+0xc8>
 801346e:	0668      	lsls	r0, r5, #25
 8013470:	d5fb      	bpl.n	801346a <_printf_i+0xbe>
 8013472:	881b      	ldrh	r3, [r3, #0]
 8013474:	4854      	ldr	r0, [pc, #336]	; (80135c8 <_printf_i+0x21c>)
 8013476:	296f      	cmp	r1, #111	; 0x6f
 8013478:	bf14      	ite	ne
 801347a:	220a      	movne	r2, #10
 801347c:	2208      	moveq	r2, #8
 801347e:	2100      	movs	r1, #0
 8013480:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013484:	6865      	ldr	r5, [r4, #4]
 8013486:	60a5      	str	r5, [r4, #8]
 8013488:	2d00      	cmp	r5, #0
 801348a:	f2c0 8095 	blt.w	80135b8 <_printf_i+0x20c>
 801348e:	6821      	ldr	r1, [r4, #0]
 8013490:	f021 0104 	bic.w	r1, r1, #4
 8013494:	6021      	str	r1, [r4, #0]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d13d      	bne.n	8013516 <_printf_i+0x16a>
 801349a:	2d00      	cmp	r5, #0
 801349c:	f040 808e 	bne.w	80135bc <_printf_i+0x210>
 80134a0:	4665      	mov	r5, ip
 80134a2:	2a08      	cmp	r2, #8
 80134a4:	d10b      	bne.n	80134be <_printf_i+0x112>
 80134a6:	6823      	ldr	r3, [r4, #0]
 80134a8:	07db      	lsls	r3, r3, #31
 80134aa:	d508      	bpl.n	80134be <_printf_i+0x112>
 80134ac:	6923      	ldr	r3, [r4, #16]
 80134ae:	6862      	ldr	r2, [r4, #4]
 80134b0:	429a      	cmp	r2, r3
 80134b2:	bfde      	ittt	le
 80134b4:	2330      	movle	r3, #48	; 0x30
 80134b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80134ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80134be:	ebac 0305 	sub.w	r3, ip, r5
 80134c2:	6123      	str	r3, [r4, #16]
 80134c4:	f8cd 8000 	str.w	r8, [sp]
 80134c8:	463b      	mov	r3, r7
 80134ca:	aa03      	add	r2, sp, #12
 80134cc:	4621      	mov	r1, r4
 80134ce:	4630      	mov	r0, r6
 80134d0:	f7ff fef6 	bl	80132c0 <_printf_common>
 80134d4:	3001      	adds	r0, #1
 80134d6:	d14d      	bne.n	8013574 <_printf_i+0x1c8>
 80134d8:	f04f 30ff 	mov.w	r0, #4294967295
 80134dc:	b005      	add	sp, #20
 80134de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134e2:	4839      	ldr	r0, [pc, #228]	; (80135c8 <_printf_i+0x21c>)
 80134e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80134e8:	6813      	ldr	r3, [r2, #0]
 80134ea:	6821      	ldr	r1, [r4, #0]
 80134ec:	1d1d      	adds	r5, r3, #4
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	6015      	str	r5, [r2, #0]
 80134f2:	060a      	lsls	r2, r1, #24
 80134f4:	d50b      	bpl.n	801350e <_printf_i+0x162>
 80134f6:	07ca      	lsls	r2, r1, #31
 80134f8:	bf44      	itt	mi
 80134fa:	f041 0120 	orrmi.w	r1, r1, #32
 80134fe:	6021      	strmi	r1, [r4, #0]
 8013500:	b91b      	cbnz	r3, 801350a <_printf_i+0x15e>
 8013502:	6822      	ldr	r2, [r4, #0]
 8013504:	f022 0220 	bic.w	r2, r2, #32
 8013508:	6022      	str	r2, [r4, #0]
 801350a:	2210      	movs	r2, #16
 801350c:	e7b7      	b.n	801347e <_printf_i+0xd2>
 801350e:	064d      	lsls	r5, r1, #25
 8013510:	bf48      	it	mi
 8013512:	b29b      	uxthmi	r3, r3
 8013514:	e7ef      	b.n	80134f6 <_printf_i+0x14a>
 8013516:	4665      	mov	r5, ip
 8013518:	fbb3 f1f2 	udiv	r1, r3, r2
 801351c:	fb02 3311 	mls	r3, r2, r1, r3
 8013520:	5cc3      	ldrb	r3, [r0, r3]
 8013522:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013526:	460b      	mov	r3, r1
 8013528:	2900      	cmp	r1, #0
 801352a:	d1f5      	bne.n	8013518 <_printf_i+0x16c>
 801352c:	e7b9      	b.n	80134a2 <_printf_i+0xf6>
 801352e:	6813      	ldr	r3, [r2, #0]
 8013530:	6825      	ldr	r5, [r4, #0]
 8013532:	6961      	ldr	r1, [r4, #20]
 8013534:	1d18      	adds	r0, r3, #4
 8013536:	6010      	str	r0, [r2, #0]
 8013538:	0628      	lsls	r0, r5, #24
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	d501      	bpl.n	8013542 <_printf_i+0x196>
 801353e:	6019      	str	r1, [r3, #0]
 8013540:	e002      	b.n	8013548 <_printf_i+0x19c>
 8013542:	066a      	lsls	r2, r5, #25
 8013544:	d5fb      	bpl.n	801353e <_printf_i+0x192>
 8013546:	8019      	strh	r1, [r3, #0]
 8013548:	2300      	movs	r3, #0
 801354a:	6123      	str	r3, [r4, #16]
 801354c:	4665      	mov	r5, ip
 801354e:	e7b9      	b.n	80134c4 <_printf_i+0x118>
 8013550:	6813      	ldr	r3, [r2, #0]
 8013552:	1d19      	adds	r1, r3, #4
 8013554:	6011      	str	r1, [r2, #0]
 8013556:	681d      	ldr	r5, [r3, #0]
 8013558:	6862      	ldr	r2, [r4, #4]
 801355a:	2100      	movs	r1, #0
 801355c:	4628      	mov	r0, r5
 801355e:	f7ec fe37 	bl	80001d0 <memchr>
 8013562:	b108      	cbz	r0, 8013568 <_printf_i+0x1bc>
 8013564:	1b40      	subs	r0, r0, r5
 8013566:	6060      	str	r0, [r4, #4]
 8013568:	6863      	ldr	r3, [r4, #4]
 801356a:	6123      	str	r3, [r4, #16]
 801356c:	2300      	movs	r3, #0
 801356e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013572:	e7a7      	b.n	80134c4 <_printf_i+0x118>
 8013574:	6923      	ldr	r3, [r4, #16]
 8013576:	462a      	mov	r2, r5
 8013578:	4639      	mov	r1, r7
 801357a:	4630      	mov	r0, r6
 801357c:	47c0      	blx	r8
 801357e:	3001      	adds	r0, #1
 8013580:	d0aa      	beq.n	80134d8 <_printf_i+0x12c>
 8013582:	6823      	ldr	r3, [r4, #0]
 8013584:	079b      	lsls	r3, r3, #30
 8013586:	d413      	bmi.n	80135b0 <_printf_i+0x204>
 8013588:	68e0      	ldr	r0, [r4, #12]
 801358a:	9b03      	ldr	r3, [sp, #12]
 801358c:	4298      	cmp	r0, r3
 801358e:	bfb8      	it	lt
 8013590:	4618      	movlt	r0, r3
 8013592:	e7a3      	b.n	80134dc <_printf_i+0x130>
 8013594:	2301      	movs	r3, #1
 8013596:	464a      	mov	r2, r9
 8013598:	4639      	mov	r1, r7
 801359a:	4630      	mov	r0, r6
 801359c:	47c0      	blx	r8
 801359e:	3001      	adds	r0, #1
 80135a0:	d09a      	beq.n	80134d8 <_printf_i+0x12c>
 80135a2:	3501      	adds	r5, #1
 80135a4:	68e3      	ldr	r3, [r4, #12]
 80135a6:	9a03      	ldr	r2, [sp, #12]
 80135a8:	1a9b      	subs	r3, r3, r2
 80135aa:	42ab      	cmp	r3, r5
 80135ac:	dcf2      	bgt.n	8013594 <_printf_i+0x1e8>
 80135ae:	e7eb      	b.n	8013588 <_printf_i+0x1dc>
 80135b0:	2500      	movs	r5, #0
 80135b2:	f104 0919 	add.w	r9, r4, #25
 80135b6:	e7f5      	b.n	80135a4 <_printf_i+0x1f8>
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d1ac      	bne.n	8013516 <_printf_i+0x16a>
 80135bc:	7803      	ldrb	r3, [r0, #0]
 80135be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80135c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80135c6:	e76c      	b.n	80134a2 <_printf_i+0xf6>
 80135c8:	08013f25 	.word	0x08013f25
 80135cc:	08013f36 	.word	0x08013f36

080135d0 <_sbrk_r>:
 80135d0:	b538      	push	{r3, r4, r5, lr}
 80135d2:	4c06      	ldr	r4, [pc, #24]	; (80135ec <_sbrk_r+0x1c>)
 80135d4:	2300      	movs	r3, #0
 80135d6:	4605      	mov	r5, r0
 80135d8:	4608      	mov	r0, r1
 80135da:	6023      	str	r3, [r4, #0]
 80135dc:	f7fe fff2 	bl	80125c4 <_sbrk>
 80135e0:	1c43      	adds	r3, r0, #1
 80135e2:	d102      	bne.n	80135ea <_sbrk_r+0x1a>
 80135e4:	6823      	ldr	r3, [r4, #0]
 80135e6:	b103      	cbz	r3, 80135ea <_sbrk_r+0x1a>
 80135e8:	602b      	str	r3, [r5, #0]
 80135ea:	bd38      	pop	{r3, r4, r5, pc}
 80135ec:	200015d8 	.word	0x200015d8

080135f0 <__sread>:
 80135f0:	b510      	push	{r4, lr}
 80135f2:	460c      	mov	r4, r1
 80135f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135f8:	f000 f896 	bl	8013728 <_read_r>
 80135fc:	2800      	cmp	r0, #0
 80135fe:	bfab      	itete	ge
 8013600:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013602:	89a3      	ldrhlt	r3, [r4, #12]
 8013604:	181b      	addge	r3, r3, r0
 8013606:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801360a:	bfac      	ite	ge
 801360c:	6563      	strge	r3, [r4, #84]	; 0x54
 801360e:	81a3      	strhlt	r3, [r4, #12]
 8013610:	bd10      	pop	{r4, pc}

08013612 <__swrite>:
 8013612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013616:	461f      	mov	r7, r3
 8013618:	898b      	ldrh	r3, [r1, #12]
 801361a:	05db      	lsls	r3, r3, #23
 801361c:	4605      	mov	r5, r0
 801361e:	460c      	mov	r4, r1
 8013620:	4616      	mov	r6, r2
 8013622:	d505      	bpl.n	8013630 <__swrite+0x1e>
 8013624:	2302      	movs	r3, #2
 8013626:	2200      	movs	r2, #0
 8013628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801362c:	f000 f868 	bl	8013700 <_lseek_r>
 8013630:	89a3      	ldrh	r3, [r4, #12]
 8013632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801363a:	81a3      	strh	r3, [r4, #12]
 801363c:	4632      	mov	r2, r6
 801363e:	463b      	mov	r3, r7
 8013640:	4628      	mov	r0, r5
 8013642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013646:	f000 b817 	b.w	8013678 <_write_r>

0801364a <__sseek>:
 801364a:	b510      	push	{r4, lr}
 801364c:	460c      	mov	r4, r1
 801364e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013652:	f000 f855 	bl	8013700 <_lseek_r>
 8013656:	1c43      	adds	r3, r0, #1
 8013658:	89a3      	ldrh	r3, [r4, #12]
 801365a:	bf15      	itete	ne
 801365c:	6560      	strne	r0, [r4, #84]	; 0x54
 801365e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013662:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013666:	81a3      	strheq	r3, [r4, #12]
 8013668:	bf18      	it	ne
 801366a:	81a3      	strhne	r3, [r4, #12]
 801366c:	bd10      	pop	{r4, pc}

0801366e <__sclose>:
 801366e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013672:	f000 b813 	b.w	801369c <_close_r>
	...

08013678 <_write_r>:
 8013678:	b538      	push	{r3, r4, r5, lr}
 801367a:	4c07      	ldr	r4, [pc, #28]	; (8013698 <_write_r+0x20>)
 801367c:	4605      	mov	r5, r0
 801367e:	4608      	mov	r0, r1
 8013680:	4611      	mov	r1, r2
 8013682:	2200      	movs	r2, #0
 8013684:	6022      	str	r2, [r4, #0]
 8013686:	461a      	mov	r2, r3
 8013688:	f7fe ff4b 	bl	8012522 <_write>
 801368c:	1c43      	adds	r3, r0, #1
 801368e:	d102      	bne.n	8013696 <_write_r+0x1e>
 8013690:	6823      	ldr	r3, [r4, #0]
 8013692:	b103      	cbz	r3, 8013696 <_write_r+0x1e>
 8013694:	602b      	str	r3, [r5, #0]
 8013696:	bd38      	pop	{r3, r4, r5, pc}
 8013698:	200015d8 	.word	0x200015d8

0801369c <_close_r>:
 801369c:	b538      	push	{r3, r4, r5, lr}
 801369e:	4c06      	ldr	r4, [pc, #24]	; (80136b8 <_close_r+0x1c>)
 80136a0:	2300      	movs	r3, #0
 80136a2:	4605      	mov	r5, r0
 80136a4:	4608      	mov	r0, r1
 80136a6:	6023      	str	r3, [r4, #0]
 80136a8:	f7fe ff57 	bl	801255a <_close>
 80136ac:	1c43      	adds	r3, r0, #1
 80136ae:	d102      	bne.n	80136b6 <_close_r+0x1a>
 80136b0:	6823      	ldr	r3, [r4, #0]
 80136b2:	b103      	cbz	r3, 80136b6 <_close_r+0x1a>
 80136b4:	602b      	str	r3, [r5, #0]
 80136b6:	bd38      	pop	{r3, r4, r5, pc}
 80136b8:	200015d8 	.word	0x200015d8

080136bc <_fstat_r>:
 80136bc:	b538      	push	{r3, r4, r5, lr}
 80136be:	4c07      	ldr	r4, [pc, #28]	; (80136dc <_fstat_r+0x20>)
 80136c0:	2300      	movs	r3, #0
 80136c2:	4605      	mov	r5, r0
 80136c4:	4608      	mov	r0, r1
 80136c6:	4611      	mov	r1, r2
 80136c8:	6023      	str	r3, [r4, #0]
 80136ca:	f7fe ff52 	bl	8012572 <_fstat>
 80136ce:	1c43      	adds	r3, r0, #1
 80136d0:	d102      	bne.n	80136d8 <_fstat_r+0x1c>
 80136d2:	6823      	ldr	r3, [r4, #0]
 80136d4:	b103      	cbz	r3, 80136d8 <_fstat_r+0x1c>
 80136d6:	602b      	str	r3, [r5, #0]
 80136d8:	bd38      	pop	{r3, r4, r5, pc}
 80136da:	bf00      	nop
 80136dc:	200015d8 	.word	0x200015d8

080136e0 <_isatty_r>:
 80136e0:	b538      	push	{r3, r4, r5, lr}
 80136e2:	4c06      	ldr	r4, [pc, #24]	; (80136fc <_isatty_r+0x1c>)
 80136e4:	2300      	movs	r3, #0
 80136e6:	4605      	mov	r5, r0
 80136e8:	4608      	mov	r0, r1
 80136ea:	6023      	str	r3, [r4, #0]
 80136ec:	f7fe ff51 	bl	8012592 <_isatty>
 80136f0:	1c43      	adds	r3, r0, #1
 80136f2:	d102      	bne.n	80136fa <_isatty_r+0x1a>
 80136f4:	6823      	ldr	r3, [r4, #0]
 80136f6:	b103      	cbz	r3, 80136fa <_isatty_r+0x1a>
 80136f8:	602b      	str	r3, [r5, #0]
 80136fa:	bd38      	pop	{r3, r4, r5, pc}
 80136fc:	200015d8 	.word	0x200015d8

08013700 <_lseek_r>:
 8013700:	b538      	push	{r3, r4, r5, lr}
 8013702:	4c07      	ldr	r4, [pc, #28]	; (8013720 <_lseek_r+0x20>)
 8013704:	4605      	mov	r5, r0
 8013706:	4608      	mov	r0, r1
 8013708:	4611      	mov	r1, r2
 801370a:	2200      	movs	r2, #0
 801370c:	6022      	str	r2, [r4, #0]
 801370e:	461a      	mov	r2, r3
 8013710:	f7fe ff4a 	bl	80125a8 <_lseek>
 8013714:	1c43      	adds	r3, r0, #1
 8013716:	d102      	bne.n	801371e <_lseek_r+0x1e>
 8013718:	6823      	ldr	r3, [r4, #0]
 801371a:	b103      	cbz	r3, 801371e <_lseek_r+0x1e>
 801371c:	602b      	str	r3, [r5, #0]
 801371e:	bd38      	pop	{r3, r4, r5, pc}
 8013720:	200015d8 	.word	0x200015d8

08013724 <__malloc_lock>:
 8013724:	4770      	bx	lr

08013726 <__malloc_unlock>:
 8013726:	4770      	bx	lr

08013728 <_read_r>:
 8013728:	b538      	push	{r3, r4, r5, lr}
 801372a:	4c07      	ldr	r4, [pc, #28]	; (8013748 <_read_r+0x20>)
 801372c:	4605      	mov	r5, r0
 801372e:	4608      	mov	r0, r1
 8013730:	4611      	mov	r1, r2
 8013732:	2200      	movs	r2, #0
 8013734:	6022      	str	r2, [r4, #0]
 8013736:	461a      	mov	r2, r3
 8013738:	f7fe fed6 	bl	80124e8 <_read>
 801373c:	1c43      	adds	r3, r0, #1
 801373e:	d102      	bne.n	8013746 <_read_r+0x1e>
 8013740:	6823      	ldr	r3, [r4, #0]
 8013742:	b103      	cbz	r3, 8013746 <_read_r+0x1e>
 8013744:	602b      	str	r3, [r5, #0]
 8013746:	bd38      	pop	{r3, r4, r5, pc}
 8013748:	200015d8 	.word	0x200015d8

0801374c <sqrt>:
 801374c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013750:	ed2d 8b02 	vpush	{d8}
 8013754:	b08b      	sub	sp, #44	; 0x2c
 8013756:	ec55 4b10 	vmov	r4, r5, d0
 801375a:	f000 f851 	bl	8013800 <__ieee754_sqrt>
 801375e:	4b26      	ldr	r3, [pc, #152]	; (80137f8 <sqrt+0xac>)
 8013760:	eeb0 8a40 	vmov.f32	s16, s0
 8013764:	eef0 8a60 	vmov.f32	s17, s1
 8013768:	f993 6000 	ldrsb.w	r6, [r3]
 801376c:	1c73      	adds	r3, r6, #1
 801376e:	d02a      	beq.n	80137c6 <sqrt+0x7a>
 8013770:	4622      	mov	r2, r4
 8013772:	462b      	mov	r3, r5
 8013774:	4620      	mov	r0, r4
 8013776:	4629      	mov	r1, r5
 8013778:	f7ed f9d0 	bl	8000b1c <__aeabi_dcmpun>
 801377c:	4607      	mov	r7, r0
 801377e:	bb10      	cbnz	r0, 80137c6 <sqrt+0x7a>
 8013780:	f04f 0800 	mov.w	r8, #0
 8013784:	f04f 0900 	mov.w	r9, #0
 8013788:	4642      	mov	r2, r8
 801378a:	464b      	mov	r3, r9
 801378c:	4620      	mov	r0, r4
 801378e:	4629      	mov	r1, r5
 8013790:	f7ed f99c 	bl	8000acc <__aeabi_dcmplt>
 8013794:	b1b8      	cbz	r0, 80137c6 <sqrt+0x7a>
 8013796:	2301      	movs	r3, #1
 8013798:	9300      	str	r3, [sp, #0]
 801379a:	4b18      	ldr	r3, [pc, #96]	; (80137fc <sqrt+0xb0>)
 801379c:	9301      	str	r3, [sp, #4]
 801379e:	9708      	str	r7, [sp, #32]
 80137a0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80137a4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80137a8:	b9b6      	cbnz	r6, 80137d8 <sqrt+0x8c>
 80137aa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80137ae:	4668      	mov	r0, sp
 80137b0:	f000 f8d6 	bl	8013960 <matherr>
 80137b4:	b1d0      	cbz	r0, 80137ec <sqrt+0xa0>
 80137b6:	9b08      	ldr	r3, [sp, #32]
 80137b8:	b11b      	cbz	r3, 80137c2 <sqrt+0x76>
 80137ba:	f7fe ff8f 	bl	80126dc <__errno>
 80137be:	9b08      	ldr	r3, [sp, #32]
 80137c0:	6003      	str	r3, [r0, #0]
 80137c2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80137c6:	eeb0 0a48 	vmov.f32	s0, s16
 80137ca:	eef0 0a68 	vmov.f32	s1, s17
 80137ce:	b00b      	add	sp, #44	; 0x2c
 80137d0:	ecbd 8b02 	vpop	{d8}
 80137d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137d8:	4642      	mov	r2, r8
 80137da:	464b      	mov	r3, r9
 80137dc:	4640      	mov	r0, r8
 80137de:	4649      	mov	r1, r9
 80137e0:	f7ed f82c 	bl	800083c <__aeabi_ddiv>
 80137e4:	2e02      	cmp	r6, #2
 80137e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80137ea:	d1e0      	bne.n	80137ae <sqrt+0x62>
 80137ec:	f7fe ff76 	bl	80126dc <__errno>
 80137f0:	2321      	movs	r3, #33	; 0x21
 80137f2:	6003      	str	r3, [r0, #0]
 80137f4:	e7df      	b.n	80137b6 <sqrt+0x6a>
 80137f6:	bf00      	nop
 80137f8:	200000e8 	.word	0x200000e8
 80137fc:	08013f47 	.word	0x08013f47

08013800 <__ieee754_sqrt>:
 8013800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013804:	4955      	ldr	r1, [pc, #340]	; (801395c <__ieee754_sqrt+0x15c>)
 8013806:	ec55 4b10 	vmov	r4, r5, d0
 801380a:	43a9      	bics	r1, r5
 801380c:	462b      	mov	r3, r5
 801380e:	462a      	mov	r2, r5
 8013810:	d112      	bne.n	8013838 <__ieee754_sqrt+0x38>
 8013812:	ee10 2a10 	vmov	r2, s0
 8013816:	ee10 0a10 	vmov	r0, s0
 801381a:	4629      	mov	r1, r5
 801381c:	f7ec fee4 	bl	80005e8 <__aeabi_dmul>
 8013820:	4602      	mov	r2, r0
 8013822:	460b      	mov	r3, r1
 8013824:	4620      	mov	r0, r4
 8013826:	4629      	mov	r1, r5
 8013828:	f7ec fd28 	bl	800027c <__adddf3>
 801382c:	4604      	mov	r4, r0
 801382e:	460d      	mov	r5, r1
 8013830:	ec45 4b10 	vmov	d0, r4, r5
 8013834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013838:	2d00      	cmp	r5, #0
 801383a:	ee10 0a10 	vmov	r0, s0
 801383e:	4621      	mov	r1, r4
 8013840:	dc0f      	bgt.n	8013862 <__ieee754_sqrt+0x62>
 8013842:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013846:	4330      	orrs	r0, r6
 8013848:	d0f2      	beq.n	8013830 <__ieee754_sqrt+0x30>
 801384a:	b155      	cbz	r5, 8013862 <__ieee754_sqrt+0x62>
 801384c:	ee10 2a10 	vmov	r2, s0
 8013850:	4620      	mov	r0, r4
 8013852:	4629      	mov	r1, r5
 8013854:	f7ec fd10 	bl	8000278 <__aeabi_dsub>
 8013858:	4602      	mov	r2, r0
 801385a:	460b      	mov	r3, r1
 801385c:	f7ec ffee 	bl	800083c <__aeabi_ddiv>
 8013860:	e7e4      	b.n	801382c <__ieee754_sqrt+0x2c>
 8013862:	151b      	asrs	r3, r3, #20
 8013864:	d073      	beq.n	801394e <__ieee754_sqrt+0x14e>
 8013866:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801386a:	07dd      	lsls	r5, r3, #31
 801386c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8013870:	bf48      	it	mi
 8013872:	0fc8      	lsrmi	r0, r1, #31
 8013874:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013878:	bf44      	itt	mi
 801387a:	0049      	lslmi	r1, r1, #1
 801387c:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8013880:	2500      	movs	r5, #0
 8013882:	1058      	asrs	r0, r3, #1
 8013884:	0fcb      	lsrs	r3, r1, #31
 8013886:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801388a:	0049      	lsls	r1, r1, #1
 801388c:	2316      	movs	r3, #22
 801388e:	462c      	mov	r4, r5
 8013890:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8013894:	19a7      	adds	r7, r4, r6
 8013896:	4297      	cmp	r7, r2
 8013898:	bfde      	ittt	le
 801389a:	19bc      	addle	r4, r7, r6
 801389c:	1bd2      	suble	r2, r2, r7
 801389e:	19ad      	addle	r5, r5, r6
 80138a0:	0fcf      	lsrs	r7, r1, #31
 80138a2:	3b01      	subs	r3, #1
 80138a4:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80138a8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80138ac:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80138b0:	d1f0      	bne.n	8013894 <__ieee754_sqrt+0x94>
 80138b2:	f04f 0c20 	mov.w	ip, #32
 80138b6:	469e      	mov	lr, r3
 80138b8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80138bc:	42a2      	cmp	r2, r4
 80138be:	eb06 070e 	add.w	r7, r6, lr
 80138c2:	dc02      	bgt.n	80138ca <__ieee754_sqrt+0xca>
 80138c4:	d112      	bne.n	80138ec <__ieee754_sqrt+0xec>
 80138c6:	428f      	cmp	r7, r1
 80138c8:	d810      	bhi.n	80138ec <__ieee754_sqrt+0xec>
 80138ca:	2f00      	cmp	r7, #0
 80138cc:	eb07 0e06 	add.w	lr, r7, r6
 80138d0:	da42      	bge.n	8013958 <__ieee754_sqrt+0x158>
 80138d2:	f1be 0f00 	cmp.w	lr, #0
 80138d6:	db3f      	blt.n	8013958 <__ieee754_sqrt+0x158>
 80138d8:	f104 0801 	add.w	r8, r4, #1
 80138dc:	1b12      	subs	r2, r2, r4
 80138de:	428f      	cmp	r7, r1
 80138e0:	bf88      	it	hi
 80138e2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80138e6:	1bc9      	subs	r1, r1, r7
 80138e8:	4433      	add	r3, r6
 80138ea:	4644      	mov	r4, r8
 80138ec:	0052      	lsls	r2, r2, #1
 80138ee:	f1bc 0c01 	subs.w	ip, ip, #1
 80138f2:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80138f6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80138fa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80138fe:	d1dd      	bne.n	80138bc <__ieee754_sqrt+0xbc>
 8013900:	430a      	orrs	r2, r1
 8013902:	d006      	beq.n	8013912 <__ieee754_sqrt+0x112>
 8013904:	1c5c      	adds	r4, r3, #1
 8013906:	bf13      	iteet	ne
 8013908:	3301      	addne	r3, #1
 801390a:	3501      	addeq	r5, #1
 801390c:	4663      	moveq	r3, ip
 801390e:	f023 0301 	bicne.w	r3, r3, #1
 8013912:	106a      	asrs	r2, r5, #1
 8013914:	085b      	lsrs	r3, r3, #1
 8013916:	07e9      	lsls	r1, r5, #31
 8013918:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801391c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8013920:	bf48      	it	mi
 8013922:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8013926:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801392a:	461c      	mov	r4, r3
 801392c:	e780      	b.n	8013830 <__ieee754_sqrt+0x30>
 801392e:	0aca      	lsrs	r2, r1, #11
 8013930:	3815      	subs	r0, #21
 8013932:	0549      	lsls	r1, r1, #21
 8013934:	2a00      	cmp	r2, #0
 8013936:	d0fa      	beq.n	801392e <__ieee754_sqrt+0x12e>
 8013938:	02d6      	lsls	r6, r2, #11
 801393a:	d50a      	bpl.n	8013952 <__ieee754_sqrt+0x152>
 801393c:	f1c3 0420 	rsb	r4, r3, #32
 8013940:	fa21 f404 	lsr.w	r4, r1, r4
 8013944:	1e5d      	subs	r5, r3, #1
 8013946:	4099      	lsls	r1, r3
 8013948:	4322      	orrs	r2, r4
 801394a:	1b43      	subs	r3, r0, r5
 801394c:	e78b      	b.n	8013866 <__ieee754_sqrt+0x66>
 801394e:	4618      	mov	r0, r3
 8013950:	e7f0      	b.n	8013934 <__ieee754_sqrt+0x134>
 8013952:	0052      	lsls	r2, r2, #1
 8013954:	3301      	adds	r3, #1
 8013956:	e7ef      	b.n	8013938 <__ieee754_sqrt+0x138>
 8013958:	46a0      	mov	r8, r4
 801395a:	e7bf      	b.n	80138dc <__ieee754_sqrt+0xdc>
 801395c:	7ff00000 	.word	0x7ff00000

08013960 <matherr>:
 8013960:	2000      	movs	r0, #0
 8013962:	4770      	bx	lr

08013964 <_init>:
 8013964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013966:	bf00      	nop
 8013968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801396a:	bc08      	pop	{r3}
 801396c:	469e      	mov	lr, r3
 801396e:	4770      	bx	lr

08013970 <_fini>:
 8013970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013972:	bf00      	nop
 8013974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013976:	bc08      	pop	{r3}
 8013978:	469e      	mov	lr, r3
 801397a:	4770      	bx	lr
