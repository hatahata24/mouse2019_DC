
mouse2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013168  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  080132f8  080132f8  000232f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138b0  080138b0  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  080138b0  080138b0  000238b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138b8  080138b8  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138b8  080138b8  000238b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138bc  080138bc  000238bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  080138c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014f0  200000ec  080139ac  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015dc  080139ac  000315dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016df8  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030ac  00000000  00000000  00046f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f8  00000000  00000000  00049fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a8  00000000  00000000  0004b3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022b04  00000000  00000000  0004c660  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010bd7  00000000  00000000  0006f164  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8690  00000000  00000000  0007fd3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001483cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d58  00000000  00000000  00148448  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ec 	.word	0x200000ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080132e0 	.word	0x080132e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	080132e0 	.word	0x080132e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_Init+0x40>)
 8000f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_Init+0x40>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x40>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 fd07 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f010 fcf8 	bl	8011960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fd1f 	bl	80019de <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 fce7 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000080 	.word	0x20000080
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004
 8001000:	20000120 	.word	0x20000120

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000120 	.word	0x20000120

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_Delay+0x40>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e033      	b.n	80010de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f010 fc96 	bl	80119b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d118      	bne.n	80010d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a6:	f023 0302 	bic.w	r3, r3, #2
 80010aa:	f043 0202 	orr.w	r2, r3, #2
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fa92 	bl	80015dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
 80010ce:	e001      	b.n	80010d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Start+0x1a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e0a5      	b.n	800124e <HAL_ADC_Start+0x166>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d018      	beq.n	800114a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001128:	4b4c      	ldr	r3, [pc, #304]	; (800125c <HAL_ADC_Start+0x174>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_ADC_Start+0x178>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9a      	lsrs	r2, r3, #18
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800113c:	e002      	b.n	8001144 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3b01      	subs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d179      	bne.n	800124c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001182:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001196:	d106      	bne.n	80011a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f023 0206 	bic.w	r2, r3, #6
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d12a      	bne.n	8001224 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_ADC_Start+0x180>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d015      	beq.n	8001204 <HAL_ADC_Start+0x11c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_ADC_Start+0x184>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d105      	bne.n	80011ee <HAL_ADC_Start+0x106>
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00a      	beq.n	8001204 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_ADC_Start+0x188>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d129      	bne.n	800124c <HAL_ADC_Start+0x164>
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d823      	bhi.n	800124c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11c      	bne.n	800124c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	e013      	b.n	800124c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_ADC_Start+0x180>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_ADC_Start+0x164>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800124a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000080 	.word	0x20000080
 8001260:	431bde83 	.word	0x431bde83
 8001264:	40012300 	.word	0x40012300
 8001268:	40012000 	.word	0x40012000
 800126c:	40012100 	.word	0x40012100
 8001270:	40012200 	.word	0x40012200

08001274 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001290:	d113      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a0:	d10b      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0220 	orr.w	r2, r3, #32
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e05c      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012ba:	f7ff fea3 	bl	8001004 <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012c0:	e01a      	b.n	80012f8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d016      	beq.n	80012f8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <HAL_ADC_PollForConversion+0x6c>
 80012d0:	f7ff fe98 	bl	8001004 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d20b      	bcs.n	80012f8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f043 0204 	orr.w	r2, r3, #4
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e03d      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b02      	cmp	r3, #2
 8001304:	d1dd      	bne.n	80012c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0212 	mvn.w	r2, #18
 800130e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d123      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800132e:	2b00      	cmp	r3, #0
 8001330:	d11f      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134a:	2b00      	cmp	r3, #0
 800134c:	d111      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e105      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x228>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d925      	bls.n	8001410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3b1e      	subs	r3, #30
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43da      	mvns	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	400a      	ands	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	3b1e      	subs	r3, #30
 8001404:	409a      	lsls	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e022      	b.n	8001456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	2207      	movs	r2, #7
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6919      	ldr	r1, [r3, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4403      	add	r3, r0
 800144c:	409a      	lsls	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b06      	cmp	r3, #6
 800145c:	d824      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b05      	subs	r3, #5
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b05      	subs	r3, #5
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
 80014a6:	e04c      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d824      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b23      	subs	r3, #35	; 0x23
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43da      	mvns	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b23      	subs	r3, #35	; 0x23
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e023      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b41      	subs	r3, #65	; 0x41
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_ADC_ConfigChannel+0x234>)
 8001544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d109      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d105      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d123      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d003      	beq.n	800157e <HAL_ADC_ConfigChannel+0x1e6>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b11      	cmp	r3, #17
 800157c:	d11b      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_ADC_ConfigChannel+0x240>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9a      	lsrs	r2, r3, #18
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	40012000 	.word	0x40012000
 80015d4:	20000080 	.word	0x20000080
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <ADC_Init+0x1f0>)
 80015e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <ADC_Init+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e00f      	b.n	80016da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0202 	bic.w	r2, r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
 80016f4:	005a      	lsls	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001716:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	035a      	lsls	r2, r3, #13
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e007      	b.n	8001750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	3b01      	subs	r3, #1
 800176c:	051a      	lsls	r2, r3, #20
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001792:	025a      	lsls	r2, r3, #9
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	029a      	lsls	r2, r3, #10
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a0c:	7e1b      	ldrb	r3, [r3, #24]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_FLASH_Program+0x1e>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e03b      	b.n	8001a8e <HAL_FLASH_Program+0x96>
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a20:	f000 f870 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d12b      	bne.n	8001a86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a34:	783b      	ldrb	r3, [r7, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	68b8      	ldr	r0, [r7, #8]
 8001a3a:	f000 f917 	bl	8001c6c <FLASH_Program_Byte>
 8001a3e:	e016      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	68b8      	ldr	r0, [r7, #8]
 8001a4c:	f000 f8ea 	bl	8001c24 <FLASH_Program_HalfWord>
 8001a50:	e00d      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d105      	bne.n	8001a64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68b8      	ldr	r0, [r7, #8]
 8001a5e:	f000 f8bf 	bl	8001be0 <FLASH_Program_Word>
 8001a62:	e004      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f000 f88b 	bl	8001b84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a72:	f000 f847 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a76:	4603      	mov	r3, r0
 8001a78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000124 	.word	0x20000124
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da0b      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_FLASH_Unlock+0x3c>)
 8001ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_FLASH_Unlock+0x40>)
 8001abc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da01      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	45670123 	.word	0x45670123
 8001ae0:	cdef89ab 	.word	0xcdef89ab

08001ae4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001af2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <FLASH_WaitForLastOperation+0x78>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b16:	f7ff fa75 	bl	8001004 <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b1c:	e010      	b.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d00c      	beq.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <FLASH_WaitForLastOperation+0x38>
 8001b2c:	f7ff fa6a 	bl	8001004 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d201      	bcs.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e019      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e8      	bne.n	8001b1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b6a:	f000 f8a1 	bl	8001cb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
  
}  
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000124 	.word	0x20000124
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b84:	b490      	push	{r4, r7}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001ba2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	f04f 0400 	mov.w	r4, #0
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	2400      	movs	r4, #0
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	3204      	adds	r2, #4
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc90      	pop	{r4, r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	801a      	strh	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cce:	2210      	movs	r2, #16
 8001cd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cec:	2220      	movs	r2, #32
 8001cee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	f043 0320 	orr.w	r3, r3, #32
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	60da      	str	r2, [r3, #12]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023c00 	.word	0x40023c00
 8001d58:	20000124 	.word	0x20000124

08001d5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d70:	7e1b      	ldrb	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_FLASHEx_Erase+0x1e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e058      	b.n	8001e2c <HAL_FLASHEx_Erase+0xd0>
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d84:	f7ff febe 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d148      	bne.n	8001e24 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d115      	bne.n	8001dce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f844 	bl	8001e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db8:	f7ff fea4 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6113      	str	r3, [r2, #16]
 8001dcc:	e028      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	e01c      	b.n	8001e10 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68b8      	ldr	r0, [r7, #8]
 8001de0:	f000 f850 	bl	8001e84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de8:	f7ff fe8c 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dfa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	601a      	str	r2, [r3, #0]
          break;
 8001e08:	e00a      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3da      	bcc.n	8001dd6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001e20:	f000 f878 	bl	8001f14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	761a      	strb	r2, [r3, #24]

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000124 	.word	0x20000124
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6113      	str	r3, [r2, #16]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e010      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e009      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d103      	bne.n	8001ebc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e002      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	490f      	ldr	r1, [pc, #60]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ee4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6113      	str	r3, [r2, #16]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
  }
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e16b      	b.n	8002294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 815a 	bne.w	800228e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x4a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d123      	bne.n	8002032 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0203 	and.w	r2, r3, #3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00b      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207a:	2b11      	cmp	r3, #17
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b12      	cmp	r3, #18
 8002084:	d130      	bne.n	80020e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 0201 	and.w	r2, r3, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80b4 	beq.w	800228e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x308>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_GPIO_Init+0x30c>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02b      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d025      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d019      	beq.n	80021ba <HAL_GPIO_Init+0x21a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x216>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00d      	beq.n	80021b2 <HAL_GPIO_Init+0x212>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_GPIO_Init+0x328>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x32c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_GPIO_Init+0x20a>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e00e      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00c      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ae:	2306      	movs	r3, #6
 80021b0:	e00a      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c6:	2300      	movs	r3, #0
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d8:	4934      	ldr	r1, [pc, #208]	; (80022ac <HAL_GPIO_Init+0x30c>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_GPIO_Init+0x330>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220a:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f67f ae90 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3724      	adds	r7, #36	; 0x24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e22d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b9d      	ldr	r3, [pc, #628]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e208      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe08 	bl	8001004 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fe04 	bl	8001004 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1cd      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fdf4 	bl	8001004 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fdf0 	bl	8001004 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1b9      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e18d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fda9 	bl	8001004 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fda5 	bl	8001004 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e16e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd88 	bl	8001004 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fd84 	bl	8001004 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e14d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fd68 	bl	8001004 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fd64 	bl	8001004 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e12d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fd51 	bl	8001004 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fd4d 	bl	8001004 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e116      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a0 	beq.w	80026d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fd13 	bl	8001004 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e011      	b.n	8002606 <HAL_RCC_OscConfig+0x2ce>
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
 80025f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fd06 	bl	8001004 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0cf      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2f0>
 800261a:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 8002630:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a5c      	ldr	r2, [pc, #368]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fccb 	bl	8001004 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fcc7 	bl	8001004 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e08e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x33a>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fcb5 	bl	8001004 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fcb1 	bl	8001004 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e078      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d064      	beq.n	80027a4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d05c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d141      	bne.n	8002772 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc86 	bl	8001004 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fc82 	bl	8001004 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04b      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	3b01      	subs	r3, #1
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	491d      	ldr	r1, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fc5b 	bl	8001004 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fc57 	bl	8001004 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e020      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x41a>
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fc44 	bl	8001004 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fc40 	bl	8001004 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x448>
 800279e:	e001      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000
 80027b4:	40023800 	.word	0x40023800
 80027b8:	42470060 	.word	0x42470060

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0ca      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d90c      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b6      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002810:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002828:	4b52      	ldr	r3, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	494c      	ldr	r1, [pc, #304]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d119      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d003      	beq.n	800287a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e065      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4933      	ldr	r1, [pc, #204]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fbaa 	bl	8001004 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fba6 	bl	8001004 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20c      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e030      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4915      	ldr	r1, [pc, #84]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	490d      	ldr	r1, [pc, #52]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002942:	f000 f81d 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002946:	4601      	mov	r1, r0
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	fa21 f303 	lsr.w	r3, r1, r3
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe fb0c 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	080137fc 	.word	0x080137fc
 800297c:	20000080 	.word	0x20000080

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d007      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x32>
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d008      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x38>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 808d 	bne.w	8002ac6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 80029ae:	60bb      	str	r3, [r7, #8]
       break;
 80029b0:	e08c      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029b4:	60bb      	str	r3, [r7, #8]
      break;
 80029b6:	e089      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b8:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d023      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	f04f 0400 	mov.w	r4, #0
 80029d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	ea03 0501 	and.w	r5, r3, r1
 80029e4:	ea04 0602 	and.w	r6, r4, r2
 80029e8:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ea:	fb02 f106 	mul.w	r1, r2, r6
 80029ee:	2200      	movs	r2, #0
 80029f0:	fb02 f205 	mul.w	r2, r2, r5
 80029f4:	440a      	add	r2, r1
 80029f6:	493a      	ldr	r1, [pc, #232]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f8:	fba5 0101 	umull	r0, r1, r5, r1
 80029fc:	1853      	adds	r3, r2, r1
 80029fe:	4619      	mov	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4623      	mov	r3, r4
 8002a0a:	f7fe f915 	bl	8000c38 <__aeabi_uldivmod>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e049      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	099b      	lsrs	r3, r3, #6
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	ea03 0501 	and.w	r5, r3, r1
 8002a2c:	ea04 0602 	and.w	r6, r4, r2
 8002a30:	4629      	mov	r1, r5
 8002a32:	4632      	mov	r2, r6
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	0154      	lsls	r4, r2, #5
 8002a3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a42:	014b      	lsls	r3, r1, #5
 8002a44:	4619      	mov	r1, r3
 8002a46:	4622      	mov	r2, r4
 8002a48:	1b49      	subs	r1, r1, r5
 8002a4a:	eb62 0206 	sbc.w	r2, r2, r6
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	f04f 0400 	mov.w	r4, #0
 8002a56:	0194      	lsls	r4, r2, #6
 8002a58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a5c:	018b      	lsls	r3, r1, #6
 8002a5e:	1a5b      	subs	r3, r3, r1
 8002a60:	eb64 0402 	sbc.w	r4, r4, r2
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	00e2      	lsls	r2, r4, #3
 8002a6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a72:	00d9      	lsls	r1, r3, #3
 8002a74:	460b      	mov	r3, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	195b      	adds	r3, r3, r5
 8002a7a:	eb44 0406 	adc.w	r4, r4, r6
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	02a2      	lsls	r2, r4, #10
 8002a88:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a8c:	0299      	lsls	r1, r3, #10
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4614      	mov	r4, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	4621      	mov	r1, r4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f04f 0400 	mov.w	r4, #0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	f7fe f8ca 	bl	8000c38 <__aeabi_uldivmod>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	60bb      	str	r3, [r7, #8]
      break;
 8002ac4:	e002      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ac8:	60bb      	str	r3, [r7, #8]
      break;
 8002aca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002acc:	68bb      	ldr	r3, [r7, #8]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	017d7840 	.word	0x017d7840

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000080 	.word	0x20000080

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b04:	4601      	mov	r1, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	0801380c 	.word	0x0801380c

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffdc 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0b5b      	lsrs	r3, r3, #13
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	0801380c 	.word	0x0801380c

08002b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e056      	b.n	8002c0c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f00e ff5d 	bl	8011a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	f003 0104 	and.w	r1, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_SPI_Transmit+0x22>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e11e      	b.n	8002e74 <HAL_SPI_Transmit+0x260>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c3e:	f7fe f9e1 	bl	8001004 <HAL_GetTick>
 8002c42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
 8002c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c58:	e103      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_SPI_Transmit+0x52>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c6a:	e0fa      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb2:	d107      	bne.n	8002cc4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d007      	beq.n	8002ce2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cea:	d14b      	bne.n	8002d84 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Transmit+0xe6>
 8002cf4:	8afb      	ldrh	r3, [r7, #22]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d13e      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d1e:	e02b      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d112      	bne.n	8002d54 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	1c9a      	adds	r2, r3, #2
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d52:	e011      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d54:	f7fe f956 	bl	8001004 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d803      	bhi.n	8002d6c <HAL_SPI_Transmit+0x158>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d102      	bne.n	8002d72 <HAL_SPI_Transmit+0x15e>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d76:	e074      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ce      	bne.n	8002d20 <HAL_SPI_Transmit+0x10c>
 8002d82:	e04c      	b.n	8002e1e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Transmit+0x17e>
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d140      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002db8:	e02c      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d113      	bne.n	8002df0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dee:	e011      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df0:	f7fe f908 	bl	8001004 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d803      	bhi.n	8002e08 <HAL_SPI_Transmit+0x1f4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_Transmit+0x1fa>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e12:	e026      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1cd      	bne.n	8002dba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fba4 	bl	8003570 <SPI_EndRxTxTransaction>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e000      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e98:	d112      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8e9 	bl	800308e <HAL_SPI_TransmitReceive>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	e0e2      	b.n	8003086 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Receive+0x52>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0db      	b.n	8003086 <HAL_SPI_Receive+0x20a>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed6:	f7fe f895 	bl	8001004 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eec:	e0c2      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_SPI_Receive+0x7e>
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002efe:	e0b9      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2204      	movs	r2, #4
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f46:	d107      	bne.n	8002f58 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d007      	beq.n	8002f76 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d162      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f7e:	e02e      	b.n	8002fde <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d115      	bne.n	8002fba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f103 020c 	add.w	r2, r3, #12
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fb8:	e011      	b.n	8002fde <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fba:	f7fe f823 	bl	8001004 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d803      	bhi.n	8002fd2 <HAL_SPI_Receive+0x156>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d102      	bne.n	8002fd8 <HAL_SPI_Receive+0x15c>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fdc:	e04a      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1cb      	bne.n	8002f80 <HAL_SPI_Receive+0x104>
 8002fe8:	e031      	b.n	800304e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d113      	bne.n	8003020 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	b292      	uxth	r2, r2
 8003004:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800301e:	e011      	b.n	8003044 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003020:	f7fd fff0 	bl	8001004 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d803      	bhi.n	8003038 <HAL_SPI_Receive+0x1bc>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d102      	bne.n	800303e <HAL_SPI_Receive+0x1c2>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003042:	e017      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1cd      	bne.n	8002fea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa27 	bl	80034a6 <SPI_EndRxTransaction>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
 8003070:	e000      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003072:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b08c      	sub	sp, #48	; 0x30
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800309c:	2301      	movs	r3, #1
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x26>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e18a      	b.n	80033ca <HAL_SPI_TransmitReceive+0x33c>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030bc:	f7fd ffa2 	bl	8001004 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d00f      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e4:	d107      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
 80030ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d003      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030fc:	e15b      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003116:	e14e      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b04      	cmp	r3, #4
 8003122:	d003      	beq.n	800312c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2205      	movs	r2, #5
 8003128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	887a      	ldrh	r2, [r7, #2]
 8003142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d007      	beq.n	8003180 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003188:	d178      	bne.n	800327c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x10a>
 8003192:	8b7b      	ldrh	r3, [r7, #26]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d166      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	e053      	b.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11b      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d113      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d119      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d014      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	b292      	uxth	r2, r2
 8003228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003242:	2301      	movs	r3, #1
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003246:	f7fd fedd 	bl	8001004 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003252:	429a      	cmp	r2, r3
 8003254:	d807      	bhi.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d003      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003264:	e0a7      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1a6      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1a1      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 800327a:	e07c      	b.n	8003376 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_TransmitReceive+0x1fc>
 8003284:	8b7b      	ldrh	r3, [r7, #26]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d16b      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b0:	e057      	b.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d11c      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d114      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d119      	bne.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d014      	beq.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003338:	2301      	movs	r3, #1
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800333c:	f7fd fe62 	bl	8001004 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003348:	429a      	cmp	r2, r3
 800334a:	d803      	bhi.n	8003354 <HAL_SPI_TransmitReceive+0x2c6>
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d102      	bne.n	800335a <HAL_SPI_TransmitReceive+0x2cc>
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003360:	e029      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1a2      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d19d      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8f8 	bl	8003570 <SPI_EndRxTxTransaction>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003392:	e010      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	e000      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033e2:	e04c      	b.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d048      	beq.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033ec:	f7fd fe0a 	bl	8001004 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d902      	bls.n	8003402 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d13d      	bne.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003410:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341a:	d111      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d004      	beq.n	8003430 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d107      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d10f      	bne.n	800346a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d1a3      	bne.n	80033e4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d111      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	d004      	beq.n	80034d0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d107      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e8:	d12a      	bne.n	8003540 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f2:	d012      	beq.n	800351a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff67 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02d      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e026      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	2101      	movs	r1, #1
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff54 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e013      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	2101      	movs	r1, #1
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff41 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e000      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <SPI_EndRxTxTransaction+0x7c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <SPI_EndRxTxTransaction+0x80>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0d5b      	lsrs	r3, r3, #21
 8003588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359a:	d112      	bne.n	80035c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2180      	movs	r1, #128	; 0x80
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff13 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e00f      	b.n	80035e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d0f2      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x52>
 80035dc:	e000      	b.n	80035e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80035de:	bf00      	nop
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000080 	.word	0x20000080
 80035f0:	165e9f81 	.word	0x165e9f81

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e01d      	b.n	8003642 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f00e fa54 	bl	8011ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 fc70 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d007      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e01d      	b.n	80036e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f815 	bl	80036e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f000 fc21 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 feec 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <HAL_TIM_PWM_Start+0x74>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_TIM_PWM_Start+0x2c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_TIM_PWM_Start+0x78>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d101      	bne.n	800372c <HAL_TIM_PWM_Start+0x30>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_TIM_PWM_Start+0x32>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b06      	cmp	r3, #6
 8003752:	d007      	beq.n	8003764 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000
 8003774:	40010400 	.word	0x40010400

08003778 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 feae 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_TIM_PWM_Stop+0xa8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_PWM_Stop+0x2c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_TIM_PWM_Stop+0xac>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_PWM_Stop+0x30>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_TIM_PWM_Stop+0x32>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d017      	beq.n	80037de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	f240 4344 	movw	r3, #1092	; 0x444
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	f240 4344 	movw	r3, #1092	; 0x444
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40010000 	.word	0x40010000
 8003824:	40010400 	.word	0x40010400

08003828 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e083      	b.n	8003944 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f00e f98b 	bl	8011b6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386c:	f023 0307 	bic.w	r3, r3, #7
 8003870:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f000 fb4b 	bl	8003f18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	4313      	orrs	r3, r2
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038c8:	f023 030c 	bic.w	r3, r3, #12
 80038cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	4313      	orrs	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	011a      	lsls	r2, r3, #4
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	4313      	orrs	r3, r2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003906:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4313      	orrs	r3, r2
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_TIM_Encoder_Start+0x16>
 800395c:	2b04      	cmp	r3, #4
 800395e:	d008      	beq.n	8003972 <HAL_TIM_Encoder_Start+0x26>
 8003960:	e00f      	b.n	8003982 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fdbe 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003970:	e016      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	2104      	movs	r1, #4
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fdb6 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003980:	e00e      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fdae 	bl	80044ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2201      	movs	r2, #1
 8003996:	2104      	movs	r1, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fda7 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 800399e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d122      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d11b      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f06f 0202 	mvn.w	r2, #2
 80039e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fa6c 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a02:	e005      	b.n	8003a10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa5e 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fa6f 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d122      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d11b      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0204 	mvn.w	r2, #4
 8003a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fa42 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a56:	e005      	b.n	8003a64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa34 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa45 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d122      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d11b      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0208 	mvn.w	r2, #8
 8003a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2204      	movs	r2, #4
 8003a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa18 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003aaa:	e005      	b.n	8003ab8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa0a 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa1b 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d122      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d11b      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f06f 0210 	mvn.w	r2, #16
 8003ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f9ee 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003afe:	e005      	b.n	8003b0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f9e0 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9f1 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10e      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0201 	mvn.w	r2, #1
 8003b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f008 fb79 	bl	800c230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d10e      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	d107      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fd35 	bl	80045d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d10e      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9b6 	bl	8003f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d107      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f06f 0220 	mvn.w	r2, #32
 8003bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fcff 	bl	80045c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e0b4      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b0c      	cmp	r3, #12
 8003bfa:	f200 809f 	bhi.w	8003d3c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c39 	.word	0x08003c39
 8003c08:	08003d3d 	.word	0x08003d3d
 8003c0c:	08003d3d 	.word	0x08003d3d
 8003c10:	08003d3d 	.word	0x08003d3d
 8003c14:	08003c79 	.word	0x08003c79
 8003c18:	08003d3d 	.word	0x08003d3d
 8003c1c:	08003d3d 	.word	0x08003d3d
 8003c20:	08003d3d 	.word	0x08003d3d
 8003c24:	08003cbb 	.word	0x08003cbb
 8003c28:	08003d3d 	.word	0x08003d3d
 8003c2c:	08003d3d 	.word	0x08003d3d
 8003c30:	08003d3d 	.word	0x08003d3d
 8003c34:	08003cfb 	.word	0x08003cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fa0a 	bl	8004058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0208 	orr.w	r2, r2, #8
 8003c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0204 	bic.w	r2, r2, #4
 8003c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6999      	ldr	r1, [r3, #24]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	619a      	str	r2, [r3, #24]
      break;
 8003c76:	e062      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fa5a 	bl	8004138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	021a      	lsls	r2, r3, #8
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	619a      	str	r2, [r3, #24]
      break;
 8003cb8:	e041      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 faaf 	bl	8004224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0208 	orr.w	r2, r2, #8
 8003cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0204 	bic.w	r2, r2, #4
 8003ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69d9      	ldr	r1, [r3, #28]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	61da      	str	r2, [r3, #28]
      break;
 8003cf8:	e021      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fb03 	bl	800430c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	021a      	lsls	r2, r3, #8
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	61da      	str	r2, [r3, #28]
      break;
 8003d3a:	e000      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIM_ConfigClockSource+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e0a6      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x166>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d067      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0x120>
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d80b      	bhi.n	8003dc4 <HAL_TIM_ConfigClockSource+0x6c>
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d073      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d802      	bhi.n	8003dba <HAL_TIM_ConfigClockSource+0x62>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d06f      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003db8:	e078      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d06c      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003dbe:	2b30      	cmp	r3, #48	; 0x30
 8003dc0:	d06a      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dc2:	e073      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dc4:	2b70      	cmp	r3, #112	; 0x70
 8003dc6:	d00d      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x8c>
 8003dc8:	2b70      	cmp	r3, #112	; 0x70
 8003dca:	d804      	bhi.n	8003dd6 <HAL_TIM_ConfigClockSource+0x7e>
 8003dcc:	2b50      	cmp	r3, #80	; 0x50
 8003dce:	d033      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0xe0>
 8003dd0:	2b60      	cmp	r3, #96	; 0x60
 8003dd2:	d041      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dd4:	e06a      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d066      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x152>
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d017      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003de2:	e063      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6899      	ldr	r1, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f000 fb5a 	bl	80044ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	609a      	str	r2, [r3, #8]
      break;
 8003e10:	e04c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6899      	ldr	r1, [r3, #8]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f000 fb43 	bl	80044ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e34:	609a      	str	r2, [r3, #8]
      break;
 8003e36:	e039      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f000 fab7 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2150      	movs	r1, #80	; 0x50
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fb10 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e56:	e029      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f000 fad6 	bl	8004416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2160      	movs	r1, #96	; 0x60
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fb00 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e76:	e019      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f000 fa97 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2140      	movs	r1, #64	; 0x40
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 faf0 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e96:	e009      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fae7 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e000      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a40      	ldr	r2, [pc, #256]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d027      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d023      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d017      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a28      	ldr	r2, [pc, #160]	; (8004040 <TIM_Base_SetConfig+0x128>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a27      	ldr	r2, [pc, #156]	; (8004044 <TIM_Base_SetConfig+0x12c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a26      	ldr	r2, [pc, #152]	; (8004048 <TIM_Base_SetConfig+0x130>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_Base_SetConfig+0x134>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <TIM_Base_SetConfig+0x138>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <TIM_Base_SetConfig+0x13c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0xf8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d103      	bne.n	8004018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	615a      	str	r2, [r3, #20]
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800
 800404c:	40001800 	.word	0x40001800
 8004050:	40001c00 	.word	0x40001c00
 8004054:	40002000 	.word	0x40002000

08004058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f023 0302 	bic.w	r3, r3, #2
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a20      	ldr	r2, [pc, #128]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC1_SetConfig+0x64>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10c      	bne.n	80040d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0308 	bic.w	r3, r3, #8
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a15      	ldr	r2, [pc, #84]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_OC1_SetConfig+0x8e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d111      	bne.n	800410a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40010000 	.word	0x40010000
 8004134:	40010400 	.word	0x40010400

08004138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0210 	bic.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0320 	bic.w	r3, r3, #32
 8004182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a22      	ldr	r2, [pc, #136]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC2_SetConfig+0x68>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10d      	bne.n	80041bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC2_SetConfig+0x94>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d113      	bne.n	80041f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40010400 	.word	0x40010400

08004224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800426c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_OC3_SetConfig+0x66>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10d      	bne.n	80042a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a16      	ldr	r2, [pc, #88]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_OC3_SetConfig+0x92>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d113      	bne.n	80042de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40010000 	.word	0x40010000
 8004308:	40010400 	.word	0x40010400

0800430c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	031b      	lsls	r3, r3, #12
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <TIM_OC4_SetConfig+0xa4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_OC4_SetConfig+0x68>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <TIM_OC4_SetConfig+0xa8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d109      	bne.n	8004388 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40010400 	.word	0x40010400

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	f043 0307 	orr.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2201      	movs	r2, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1a      	ldr	r2, [r3, #32]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800454a:	2302      	movs	r3, #2
 800454c:	e032      	b.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004586:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e03f      	b.n	800467a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f00d fba8 	bl	8011d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2224      	movs	r2, #36	; 0x24
 8004618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f90b 	bl	8004848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af02      	add	r7, sp, #8
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b20      	cmp	r3, #32
 80046a0:	f040 8083 	bne.w	80047aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Transmit+0x2e>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e07b      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_UART_Transmit+0x40>
 80046be:	2302      	movs	r3, #2
 80046c0:	e074      	b.n	80047ac <HAL_UART_Transmit+0x12a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2221      	movs	r2, #33	; 0x21
 80046d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046d8:	f7fc fc94 	bl	8001004 <HAL_GetTick>
 80046dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ea:	e042      	b.n	8004772 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	d122      	bne.n	800474a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f850 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e046      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004730:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3302      	adds	r3, #2
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	e017      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3301      	adds	r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	e013      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f82d 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e023      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	60ba      	str	r2, [r7, #8]
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1b7      	bne.n	80046ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2200      	movs	r2, #0
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f814 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e00a      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c4:	e02c      	b.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d028      	beq.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d4:	f7fc fc16 	bl	8001004 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d21d      	bcs.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e00f      	b.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	d0c3      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004848:	b5b0      	push	{r4, r5, r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004888:	f023 030c 	bic.w	r3, r3, #12
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	430b      	orrs	r3, r1
 8004894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b4:	f040 80e4 	bne.w	8004a80 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4aab      	ldr	r2, [pc, #684]	; (8004b6c <UART_SetConfig+0x324>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <UART_SetConfig+0x84>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4aaa      	ldr	r2, [pc, #680]	; (8004b70 <UART_SetConfig+0x328>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d16c      	bne.n	80049a6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80048cc:	f7fe f92a 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009a      	lsls	r2, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	4aa3      	ldr	r2, [pc, #652]	; (8004b74 <UART_SetConfig+0x32c>)
 80048e8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	011c      	lsls	r4, r3, #4
 80048f0:	f7fe f918 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009a      	lsls	r2, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fbb2 f5f3 	udiv	r5, r2, r3
 800490a:	f7fe f90b 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800490e:	4602      	mov	r2, r0
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009a      	lsls	r2, r3, #2
 8004918:	441a      	add	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	4a93      	ldr	r2, [pc, #588]	; (8004b74 <UART_SetConfig+0x32c>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	2264      	movs	r2, #100	; 0x64
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	1aeb      	subs	r3, r5, r3
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	3332      	adds	r3, #50	; 0x32
 8004938:	4a8e      	ldr	r2, [pc, #568]	; (8004b74 <UART_SetConfig+0x32c>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004946:	441c      	add	r4, r3
 8004948:	f7fe f8ec 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800494c:	4602      	mov	r2, r0
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009a      	lsls	r2, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004962:	f7fe f8df 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004966:	4602      	mov	r2, r0
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	009a      	lsls	r2, r3, #2
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	4a7d      	ldr	r2, [pc, #500]	; (8004b74 <UART_SetConfig+0x32c>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2264      	movs	r2, #100	; 0x64
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	1aeb      	subs	r3, r5, r3
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	3332      	adds	r3, #50	; 0x32
 8004990:	4a78      	ldr	r2, [pc, #480]	; (8004b74 <UART_SetConfig+0x32c>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	f003 0207 	and.w	r2, r3, #7
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4422      	add	r2, r4
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	e154      	b.n	8004c50 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80049a6:	f7fe f8a9 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009a      	lsls	r2, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	4a6c      	ldr	r2, [pc, #432]	; (8004b74 <UART_SetConfig+0x32c>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	011c      	lsls	r4, r3, #4
 80049ca:	f7fe f897 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	009a      	lsls	r2, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80049e4:	f7fe f88a 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	009a      	lsls	r2, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	4a5d      	ldr	r2, [pc, #372]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	2264      	movs	r2, #100	; 0x64
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	1aeb      	subs	r3, r5, r3
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	3332      	adds	r3, #50	; 0x32
 8004a12:	4a58      	ldr	r2, [pc, #352]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a20:	441c      	add	r4, r3
 8004a22:	f7fe f86b 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009a      	lsls	r2, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a3c:	f7fe f85e 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009a      	lsls	r2, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	4a47      	ldr	r2, [pc, #284]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2264      	movs	r2, #100	; 0x64
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	1aeb      	subs	r3, r5, r3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	4a42      	ldr	r2, [pc, #264]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 0207 	and.w	r2, r3, #7
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4422      	add	r2, r4
 8004a7c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004a7e:	e0e7      	b.n	8004c50 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a39      	ldr	r2, [pc, #228]	; (8004b6c <UART_SetConfig+0x324>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <UART_SetConfig+0x24c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a38      	ldr	r2, [pc, #224]	; (8004b70 <UART_SetConfig+0x328>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d171      	bne.n	8004b78 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a94:	f7fe f846 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009a      	lsls	r2, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <UART_SetConfig+0x32c>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	011c      	lsls	r4, r3, #4
 8004ab8:	f7fe f834 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009a      	lsls	r2, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ad2:	f7fe f827 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <UART_SetConfig+0x32c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2264      	movs	r2, #100	; 0x64
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	1aeb      	subs	r3, r5, r3
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	3332      	adds	r3, #50	; 0x32
 8004b00:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0c:	441c      	add	r4, r3
 8004b0e:	f7fe f809 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b28:	f7fd fffc 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	009a      	lsls	r2, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	2264      	movs	r2, #100	; 0x64
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	1aeb      	subs	r3, r5, r3
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	3332      	adds	r3, #50	; 0x32
 8004b56:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4422      	add	r2, r4
 8004b68:	609a      	str	r2, [r3, #8]
 8004b6a:	e071      	b.n	8004c50 <UART_SetConfig+0x408>
 8004b6c:	40011000 	.word	0x40011000
 8004b70:	40011400 	.word	0x40011400
 8004b74:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b78:	f7fd ffc0 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009a      	lsls	r2, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	4a31      	ldr	r2, [pc, #196]	; (8004c58 <UART_SetConfig+0x410>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	011c      	lsls	r4, r3, #4
 8004b9c:	f7fd ffae 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009a      	lsls	r2, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bb6:	f7fd ffa1 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009a      	lsls	r2, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <UART_SetConfig+0x410>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2264      	movs	r2, #100	; 0x64
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	1aeb      	subs	r3, r5, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <UART_SetConfig+0x410>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	441c      	add	r4, r3
 8004bf2:	f7fd ff83 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009a      	lsls	r2, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c0c:	f7fd ff76 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009a      	lsls	r2, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <UART_SetConfig+0x410>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	2264      	movs	r2, #100	; 0x64
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
 8004c34:	1aeb      	subs	r3, r5, r3
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	3332      	adds	r3, #50	; 0x32
 8004c3a:	4a07      	ldr	r2, [pc, #28]	; (8004c58 <UART_SetConfig+0x410>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	f003 020f 	and.w	r2, r3, #15
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4422      	add	r2, r4
 8004c4c:	609a      	str	r2, [r3, #8]
}
 8004c4e:	e7ff      	b.n	8004c50 <UART_SetConfig+0x408>
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bdb0      	pop	{r4, r5, r7, pc}
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <drive_init>:
//drive_init
// 走行系の変数の初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
	MF.FLAGS = 0;
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <drive_init+0x1c>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	801a      	strh	r2, [r3, #0]
	MF2.FLAGS2 = 0;
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <drive_init+0x20>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	801a      	strh	r2, [r3, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000f68 	.word	0x20000f68
 8004c7c:	20000f64 	.word	0x20000f64

08004c80 <drive_ready>:
//drive_ready
// 走行前のLED点滅&ジャイロのドリフト計算
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_ready(void){
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
	  while(ad_fl <= WALL_BASE_FL){
 8004c84:	e00f      	b.n	8004ca6 <drive_ready+0x26>
		  led_write(1, 1, 1);
 8004c86:	2201      	movs	r2, #1
 8004c88:	2101      	movs	r1, #1
 8004c8a:	2001      	movs	r0, #1
 8004c8c:	f00c fc48 	bl	8011520 <led_write>
		  HAL_Delay(200);
 8004c90:	20c8      	movs	r0, #200	; 0xc8
 8004c92:	f7fc f9c3 	bl	800101c <HAL_Delay>
		  led_write(0, 0, 0);
 8004c96:	2200      	movs	r2, #0
 8004c98:	2100      	movs	r1, #0
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f00c fc40 	bl	8011520 <led_write>
		  HAL_Delay(200);
 8004ca0:	20c8      	movs	r0, #200	; 0xc8
 8004ca2:	f7fc f9bb 	bl	800101c <HAL_Delay>
	  while(ad_fl <= WALL_BASE_FL){
 8004ca6:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <drive_ready+0x4c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2bc8      	cmp	r3, #200	; 0xc8
 8004cac:	d9eb      	bls.n	8004c86 <drive_ready+0x6>
	  }
	  MF2.FLAG.GDRIFT = 1;
 8004cae:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <drive_ready+0x50>)
 8004cb0:	8813      	ldrh	r3, [r2, #0]
 8004cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb6:	8013      	strh	r3, [r2, #0]
	  HAL_Delay(2000);
 8004cb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004cbc:	f7fc f9ae 	bl	800101c <HAL_Delay>
	  degree_z = 0;
 8004cc0:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <drive_ready+0x54>)
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20000d54 	.word	0x20000d54
 8004cd0:	20000f64 	.word	0x20000f64
 8004cd4:	20000b5c 	.word	0x20000b5c

08004cd8 <drive_start>:
//drive_start
// 走行開始前に走行距離と機体角度を初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//走行距離の初期化
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <drive_start+0x48>)
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	4a0f      	ldr	r2, [pc, #60]	; (8004d24 <drive_start+0x4c>)
 8004ce6:	6013      	str	r3, [r2, #0]
	if(!MF2.FLAG.HACCEL) target_speed_l = target_speed_r = 0;		//モータ出力の初期化
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <drive_start+0x50>)
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d105      	bne.n	8004d02 <drive_start+0x2a>
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	4a0c      	ldr	r2, [pc, #48]	; (8004d2c <drive_start+0x54>)
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	4a0c      	ldr	r2, [pc, #48]	; (8004d30 <drive_start+0x58>)
 8004d00:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8004d02:	4a0c      	ldr	r2, [pc, #48]	; (8004d34 <drive_start+0x5c>)
 8004d04:	8813      	ldrh	r3, [r2, #0]
 8004d06:	f043 0302 	orr.w	r3, r3, #2
 8004d0a:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8004d0c:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <drive_start+0x5c>)
 8004d0e:	8813      	ldrh	r3, [r2, #0]
 8004d10:	f043 0304 	orr.w	r3, r3, #4
 8004d14:	8013      	strh	r3, [r2, #0]
}
 8004d16:	bf00      	nop
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	20000aec 	.word	0x20000aec
 8004d24:	200015c4 	.word	0x200015c4
 8004d28:	20000f64 	.word	0x20000f64
 8004d2c:	200001a0 	.word	0x200001a0
 8004d30:	20000bfc 	.word	0x20000bfc
 8004d34:	20000f68 	.word	0x20000f68

08004d38 <drive_stop>:
//drive_stop
// 走行を終了する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	4a0c      	ldr	r2, [pc, #48]	; (8004d74 <drive_stop+0x3c>)
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	4a0c      	ldr	r2, [pc, #48]	; (8004d78 <drive_stop+0x40>)
 8004d46:	6013      	str	r3, [r2, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	4a0b      	ldr	r2, [pc, #44]	; (8004d7c <drive_stop+0x44>)
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	4a0b      	ldr	r2, [pc, #44]	; (8004d80 <drive_stop+0x48>)
 8004d52:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 0;
 8004d54:	4a0b      	ldr	r2, [pc, #44]	; (8004d84 <drive_stop+0x4c>)
 8004d56:	8813      	ldrh	r3, [r2, #0]
 8004d58:	f36f 0341 	bfc	r3, #1, #1
 8004d5c:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 0;
 8004d5e:	4a09      	ldr	r2, [pc, #36]	; (8004d84 <drive_stop+0x4c>)
 8004d60:	8813      	ldrh	r3, [r2, #0]
 8004d62:	f36f 0382 	bfc	r3, #2, #1
 8004d66:	8013      	strh	r3, [r2, #0]
}
 8004d68:	bf00      	nop
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	20000aec 	.word	0x20000aec
 8004d78:	200015c4 	.word	0x200015c4
 8004d7c:	20000780 	.word	0x20000780
 8004d80:	20000ba8 	.word	0x20000ba8
 8004d84:	20000f68 	.word	0x20000f68

08004d88 <control_start>:
//control_start
// wallとgyroの姿勢制御を開始する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_start(){
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004d8c:	4a07      	ldr	r2, [pc, #28]	; (8004dac <control_start+0x24>)
 8004d8e:	8813      	ldrh	r3, [r2, #0]
 8004d90:	f043 0308 	orr.w	r3, r3, #8
 8004d94:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004d96:	4a05      	ldr	r2, [pc, #20]	; (8004dac <control_start+0x24>)
 8004d98:	8813      	ldrh	r3, [r2, #0]
 8004d9a:	f043 0310 	orr.w	r3, r3, #16
 8004d9e:	8013      	strh	r3, [r2, #0]
}
 8004da0:	bf00      	nop
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20000f68 	.word	0x20000f68

08004db0 <control_stop>:
//control_stop
// wallとgyroの姿勢制御を停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_stop(){
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 0;										//wall制御を無効にする
 8004db4:	4a07      	ldr	r2, [pc, #28]	; (8004dd4 <control_stop+0x24>)
 8004db6:	8813      	ldrh	r3, [r2, #0]
 8004db8:	f36f 03c3 	bfc	r3, #3, #1
 8004dbc:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 0;										//gyro制御を無効にする
 8004dbe:	4a05      	ldr	r2, [pc, #20]	; (8004dd4 <control_stop+0x24>)
 8004dc0:	8813      	ldrh	r3, [r2, #0]
 8004dc2:	f36f 1304 	bfc	r3, #4, #1
 8004dc6:	8013      	strh	r3, [r2, #0]
}
 8004dc8:	bf00      	nop
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	20000f68 	.word	0x20000f68

08004dd8 <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
// 引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
// 戻り値: なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	460a      	mov	r2, r1
 8004de2:	71fb      	strb	r3, [r7, #7]
 8004de4:	4613      	mov	r3, r2
 8004de6:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d13e      	bne.n	8004e6c <drive_dir+0x94>
		if(dir == 0){
 8004dee:	79bb      	ldrb	r3, [r7, #6]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10f      	bne.n	8004e14 <drive_dir+0x3c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004df4:	2201      	movs	r2, #1
 8004df6:	2120      	movs	r1, #32
 8004df8:	483f      	ldr	r0, [pc, #252]	; (8004ef8 <drive_dir+0x120>)
 8004dfa:	f7fd fa83 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2110      	movs	r1, #16
 8004e02:	483d      	ldr	r0, [pc, #244]	; (8004ef8 <drive_dir+0x120>)
 8004e04:	f7fd fa7e 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e08:	2201      	movs	r2, #1
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	483b      	ldr	r0, [pc, #236]	; (8004efc <drive_dir+0x124>)
 8004e0e:	f7fd fa79 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
		}
	}
}
 8004e12:	e06c      	b.n	8004eee <drive_dir+0x116>
		}else if(dir == 1){
 8004e14:	79bb      	ldrb	r3, [r7, #6]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d10f      	bne.n	8004e3a <drive_dir+0x62>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	//L_CW
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2120      	movs	r1, #32
 8004e1e:	4836      	ldr	r0, [pc, #216]	; (8004ef8 <drive_dir+0x120>)
 8004e20:	f7fd fa70 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e24:	2201      	movs	r2, #1
 8004e26:	2110      	movs	r1, #16
 8004e28:	4833      	ldr	r0, [pc, #204]	; (8004ef8 <drive_dir+0x120>)
 8004e2a:	f7fd fa6b 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e2e:	2201      	movs	r2, #1
 8004e30:	2101      	movs	r1, #1
 8004e32:	4832      	ldr	r0, [pc, #200]	; (8004efc <drive_dir+0x124>)
 8004e34:	f7fd fa66 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e38:	e059      	b.n	8004eee <drive_dir+0x116>
		}else if(dir == 2){
 8004e3a:	79bb      	ldrb	r3, [r7, #6]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d10f      	bne.n	8004e60 <drive_dir+0x88>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004e40:	2201      	movs	r2, #1
 8004e42:	2120      	movs	r1, #32
 8004e44:	482c      	ldr	r0, [pc, #176]	; (8004ef8 <drive_dir+0x120>)
 8004e46:	f7fd fa5d 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	2110      	movs	r1, #16
 8004e4e:	482a      	ldr	r0, [pc, #168]	; (8004ef8 <drive_dir+0x120>)
 8004e50:	f7fd fa58 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e54:	2201      	movs	r2, #1
 8004e56:	2101      	movs	r1, #1
 8004e58:	4828      	ldr	r0, [pc, #160]	; (8004efc <drive_dir+0x124>)
 8004e5a:	f7fd fa53 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e5e:	e046      	b.n	8004eee <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004e60:	2200      	movs	r2, #0
 8004e62:	2101      	movs	r1, #1
 8004e64:	4825      	ldr	r0, [pc, #148]	; (8004efc <drive_dir+0x124>)
 8004e66:	f7fd fa4d 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e6a:	e040      	b.n	8004eee <drive_dir+0x116>
		if(dir == 0){
 8004e6c:	79bb      	ldrb	r3, [r7, #6]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d110      	bne.n	8004e94 <drive_dir+0xbc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004e72:	2201      	movs	r2, #1
 8004e74:	2102      	movs	r1, #2
 8004e76:	4821      	ldr	r0, [pc, #132]	; (8004efc <drive_dir+0x124>)
 8004e78:	f7fd fa44 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e82:	481e      	ldr	r0, [pc, #120]	; (8004efc <drive_dir+0x124>)
 8004e84:	f7fd fa3e 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e88:	2201      	movs	r2, #1
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	481b      	ldr	r0, [pc, #108]	; (8004efc <drive_dir+0x124>)
 8004e8e:	f7fd fa39 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e92:	e02c      	b.n	8004eee <drive_dir+0x116>
		}else if(dir == 1){
 8004e94:	79bb      	ldrb	r3, [r7, #6]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d110      	bne.n	8004ebc <drive_dir+0xe4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	//R_CW
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2102      	movs	r1, #2
 8004e9e:	4817      	ldr	r0, [pc, #92]	; (8004efc <drive_dir+0x124>)
 8004ea0:	f7fd fa30 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004eaa:	4814      	ldr	r0, [pc, #80]	; (8004efc <drive_dir+0x124>)
 8004eac:	f7fd fa2a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	4811      	ldr	r0, [pc, #68]	; (8004efc <drive_dir+0x124>)
 8004eb6:	f7fd fa25 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004eba:	e018      	b.n	8004eee <drive_dir+0x116>
		}else if(dir == 2){
 8004ebc:	79bb      	ldrb	r3, [r7, #6]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d110      	bne.n	8004ee4 <drive_dir+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	480d      	ldr	r0, [pc, #52]	; (8004efc <drive_dir+0x124>)
 8004ec8:	f7fd fa1c 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ed2:	480a      	ldr	r0, [pc, #40]	; (8004efc <drive_dir+0x124>)
 8004ed4:	f7fd fa16 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004ed8:	2201      	movs	r2, #1
 8004eda:	2101      	movs	r1, #1
 8004edc:	4807      	ldr	r0, [pc, #28]	; (8004efc <drive_dir+0x124>)
 8004ede:	f7fd fa11 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ee2:	e004      	b.n	8004eee <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	4804      	ldr	r0, [pc, #16]	; (8004efc <drive_dir+0x124>)
 8004eea:	f7fd fa0b 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004eee:	bf00      	nop
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40020800 	.word	0x40020800
 8004efc:	40020400 	.word	0x40020400

08004f00 <run_select>:
//run_select
// a走行速度を選択する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void run_select(){
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
	full_led_write(YELLOW);
 8004f06:	2006      	movs	r0, #6
 8004f08:	f00c fb44 	bl	8011594 <full_led_write>
	int mode = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	607b      	str	r3, [r7, #4]

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	b2d8      	uxtb	r0, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	b2d9      	uxtb	r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f00c faf6 	bl	8011520 <led_write>
		if(dist_r >= 20){
 8004f34:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <run_select+0xbc>)
 8004f36:	edd3 7a00 	vldr	s15, [r3]
 8004f3a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f46:	db0f      	blt.n	8004f68 <run_select+0x68>
			  mode++;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8004f4e:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <run_select+0xbc>)
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b07      	cmp	r3, #7
 8004f5a:	dd01      	ble.n	8004f60 <run_select+0x60>
				  mode = 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4817      	ldr	r0, [pc, #92]	; (8004fc0 <run_select+0xc0>)
 8004f64:	f00d f8aa 	bl	80120bc <iprintf>
		}
		if(dist_r <= -20){
 8004f68:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <run_select+0xbc>)
 8004f6a:	edd3 7a00 	vldr	s15, [r3]
 8004f6e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8004f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f7a:	d80f      	bhi.n	8004f9c <run_select+0x9c>
			  mode--;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8004f82:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <run_select+0xbc>)
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	da01      	bge.n	8004f94 <run_select+0x94>
				  mode = 7;
 8004f90:	2307      	movs	r3, #7
 8004f92:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	480a      	ldr	r0, [pc, #40]	; (8004fc0 <run_select+0xc0>)
 8004f98:	f00d f890 	bl	80120bc <iprintf>
		}
		if(ad_fl >= WALL_BASE_FL){
 8004f9c:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <run_select+0xc4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2bc7      	cmp	r3, #199	; 0xc7
 8004fa2:	d9b5      	bls.n	8004f10 <run_select+0x10>
			  run_mode = mode;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <run_select+0xc8>)
 8004faa:	701a      	strb	r2, [r3, #0]
			  full_led_write(BLUEGREEN);
 8004fac:	2004      	movs	r0, #4
 8004fae:	f00c faf1 	bl	8011594 <full_led_write>
			  break;
 8004fb2:	bf00      	nop
		}
	}
}
 8004fb4:	bf00      	nop
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20000aec 	.word	0x20000aec
 8004fc0:	080132f8 	.word	0x080132f8
 8004fc4:	20000d54 	.word	0x20000d54
 8004fc8:	20000456 	.word	0x20000456

08004fcc <driveA>:
//driveA
// 指定距離、指定加速度で加速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004fcc:	b590      	push	{r4, r7, lr}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	4608      	mov	r0, r1
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4623      	mov	r3, r4
 8004fdc:	80fb      	strh	r3, [r7, #6]
 8004fde:	4603      	mov	r3, r0
 8004fe0:	80bb      	strh	r3, [r7, #4]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	807b      	strh	r3, [r7, #2]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 8004fea:	88bb      	ldrh	r3, [r7, #4]
 8004fec:	ee07 3a90 	vmov	s15, r3
 8004ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff4:	4b27      	ldr	r3, [pc, #156]	; (8005094 <driveA+0xc8>)
 8004ff6:	edc3 7a00 	vstr	s15, [r3]
 8004ffa:	4b27      	ldr	r3, [pc, #156]	; (8005098 <driveA+0xcc>)
 8004ffc:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8005000:	887b      	ldrh	r3, [r7, #2]
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500a:	4b24      	ldr	r3, [pc, #144]	; (800509c <driveA+0xd0>)
 800500c:	edc3 7a00 	vstr	s15, [r3]
 8005010:	4b23      	ldr	r3, [pc, #140]	; (80050a0 <driveA+0xd4>)
 8005012:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	ee07 3a90 	vmov	s15, r3
 800501c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005020:	4b20      	ldr	r3, [pc, #128]	; (80050a4 <driveA+0xd8>)
 8005022:	edc3 7a00 	vstr	s15, [r3]
 8005026:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <driveA+0xdc>)
 8005028:	edc3 7a00 	vstr	s15, [r3]
	if(MF2.FLAG.HACCEL)target_speed_l = target_speed_r = speed_min_p;
 800502c:	4b1f      	ldr	r3, [pc, #124]	; (80050ac <driveA+0xe0>)
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <driveA+0x84>
 800503a:	88bb      	ldrh	r3, [r7, #4]
 800503c:	ee07 3a90 	vmov	s15, r3
 8005040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005044:	4b1a      	ldr	r3, [pc, #104]	; (80050b0 <driveA+0xe4>)
 8005046:	edc3 7a00 	vstr	s15, [r3]
 800504a:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <driveA+0xe8>)
 800504c:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//走行開始
 8005050:	f7ff fe42 	bl	8004cd8 <drive_start>

	//----走行----
	while((dist_l < dist) || (dist_r < dist));				//左右のモータが指定距離以上進むまで待機
 8005054:	bf00      	nop
 8005056:	883b      	ldrh	r3, [r7, #0]
 8005058:	ee07 3a90 	vmov	s15, r3
 800505c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005060:	4b15      	ldr	r3, [pc, #84]	; (80050b8 <driveA+0xec>)
 8005062:	edd3 7a00 	vldr	s15, [r3]
 8005066:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800506a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506e:	dcf2      	bgt.n	8005056 <driveA+0x8a>
 8005070:	883b      	ldrh	r3, [r7, #0]
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800507a:	4b10      	ldr	r3, [pc, #64]	; (80050bc <driveA+0xf0>)
 800507c:	edd3 7a00 	vldr	s15, [r3]
 8005080:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005088:	dce5      	bgt.n	8005056 <driveA+0x8a>

//	drive_stop();
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bd90      	pop	{r4, r7, pc}
 8005092:	bf00      	nop
 8005094:	20000f6c 	.word	0x20000f6c
 8005098:	20000b54 	.word	0x20000b54
 800509c:	200001a4 	.word	0x200001a4
 80050a0:	2000077c 	.word	0x2000077c
 80050a4:	20000ae4 	.word	0x20000ae4
 80050a8:	20000d58 	.word	0x20000d58
 80050ac:	20000f64 	.word	0x20000f64
 80050b0:	200001a0 	.word	0x200001a0
 80050b4:	20000bfc 	.word	0x20000bfc
 80050b8:	200015c4 	.word	0x200015c4
 80050bc:	20000aec 	.word	0x20000aec

080050c0 <driveD>:
//driveD
// 指定距離、指定減速度で減速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 80050c0:	b590      	push	{r4, r7, lr}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4604      	mov	r4, r0
 80050c8:	4608      	mov	r0, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	461a      	mov	r2, r3
 80050ce:	4623      	mov	r3, r4
 80050d0:	80fb      	strh	r3, [r7, #6]
 80050d2:	4603      	mov	r3, r0
 80050d4:	80bb      	strh	r3, [r7, #4]
 80050d6:	460b      	mov	r3, r1
 80050d8:	807b      	strh	r3, [r7, #2]
 80050da:	4613      	mov	r3, r2
 80050dc:	803b      	strh	r3, [r7, #0]

	float speed_0 = (speed_l + speed_r) / 2;								//等速走行距離を計算するためにmain.cより参照
 80050de:	4b5a      	ldr	r3, [pc, #360]	; (8005248 <driveD+0x188>)
 80050e0:	ed93 7a00 	vldr	s14, [r3]
 80050e4:	4b59      	ldr	r3, [pc, #356]	; (800524c <driveD+0x18c>)
 80050e6:	edd3 7a00 	vldr	s15, [r3]
 80050ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050ee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80050f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050f6:	edc7 7a03 	vstr	s15, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 80050fa:	88bb      	ldrh	r3, [r7, #4]
 80050fc:	ee07 3a90 	vmov	s15, r3
 8005100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005104:	4b52      	ldr	r3, [pc, #328]	; (8005250 <driveD+0x190>)
 8005106:	edc3 7a00 	vstr	s15, [r3]
 800510a:	4b52      	ldr	r3, [pc, #328]	; (8005254 <driveD+0x194>)
 800510c:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8005110:	887b      	ldrh	r3, [r7, #2]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511a:	4b4f      	ldr	r3, [pc, #316]	; (8005258 <driveD+0x198>)
 800511c:	edc3 7a00 	vstr	s15, [r3]
 8005120:	4b4e      	ldr	r3, [pc, #312]	; (800525c <driveD+0x19c>)
 8005122:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 8005126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005132:	4b4b      	ldr	r3, [pc, #300]	; (8005260 <driveD+0x1a0>)
 8005134:	edc3 7a00 	vstr	s15, [r3]
 8005138:	4b4a      	ldr	r3, [pc, #296]	; (8005264 <driveD+0x1a4>)
 800513a:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//等速走行距離 = 総距離 - 減速に必要な距離
 800513e:	883b      	ldrh	r3, [r7, #0]
 8005140:	ee07 3a90 	vmov	s15, r3
 8005144:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005148:	4b42      	ldr	r3, [pc, #264]	; (8005254 <driveD+0x194>)
 800514a:	edd3 6a00 	vldr	s13, [r3]
 800514e:	4b41      	ldr	r3, [pc, #260]	; (8005254 <driveD+0x194>)
 8005150:	edd3 7a00 	vldr	s15, [r3]
 8005154:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005158:	ed97 6a03 	vldr	s12, [r7, #12]
 800515c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005160:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005164:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005168:	4b3e      	ldr	r3, [pc, #248]	; (8005264 <driveD+0x1a4>)
 800516a:	edd3 7a00 	vldr	s15, [r3]
 800516e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005172:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800517a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800517e:	ee17 3a90 	vmov	r3, s15
 8005182:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	4a35      	ldr	r2, [pc, #212]	; (8005260 <driveD+0x1a0>)
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	4a35      	ldr	r2, [pc, #212]	; (8005264 <driveD+0x1a4>)
 800518e:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	4a34      	ldr	r2, [pc, #208]	; (8005268 <driveD+0x1a8>)
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	4a34      	ldr	r2, [pc, #208]	; (800526c <driveD+0x1ac>)
 800519a:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 800519c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	dd1c      	ble.n	80051de <driveD+0x11e>
		//----等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));	//a左右のモータが等速分の距離以上進むまで待機
 80051a4:	bf00      	nop
 80051a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051b2:	4b2e      	ldr	r3, [pc, #184]	; (800526c <driveD+0x1ac>)
 80051b4:	edd3 7a00 	vldr	s15, [r3]
 80051b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	dcf1      	bgt.n	80051a6 <driveD+0xe6>
 80051c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051ce:	4b26      	ldr	r3, [pc, #152]	; (8005268 <driveD+0x1a8>)
 80051d0:	edd3 7a00 	vldr	s15, [r3]
 80051d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051dc:	dce3      	bgt.n	80051a6 <driveD+0xe6>
	}
	accel_l = accel_r = accel_p;
 80051de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ea:	4b1d      	ldr	r3, [pc, #116]	; (8005260 <driveD+0x1a0>)
 80051ec:	edc3 7a00 	vstr	s15, [r3]
 80051f0:	4b1c      	ldr	r3, [pc, #112]	; (8005264 <driveD+0x1a4>)
 80051f2:	edc3 7a00 	vstr	s15, [r3]
	//----減速走行----
	while((dist_l < dist) && (dist_r < dist));			//a左右のモータが減速分の距離以上進むまで待機
 80051f6:	bf00      	nop
 80051f8:	883b      	ldrh	r3, [r7, #0]
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005202:	4b1a      	ldr	r3, [pc, #104]	; (800526c <driveD+0x1ac>)
 8005204:	edd3 7a00 	vldr	s15, [r3]
 8005208:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800520c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005210:	dd0c      	ble.n	800522c <driveD+0x16c>
 8005212:	883b      	ldrh	r3, [r7, #0]
 8005214:	ee07 3a90 	vmov	s15, r3
 8005218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800521c:	4b12      	ldr	r3, [pc, #72]	; (8005268 <driveD+0x1a8>)
 800521e:	edd3 7a00 	vldr	s15, [r3]
 8005222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522a:	dce5      	bgt.n	80051f8 <driveD+0x138>

	if(!MF2.FLAG.HACCEL)drive_stop();											//走行停止
 800522c:	4b10      	ldr	r3, [pc, #64]	; (8005270 <driveD+0x1b0>)
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <driveD+0x17e>
 800523a:	f7ff fd7d 	bl	8004d38 <drive_stop>
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	bd90      	pop	{r4, r7, pc}
 8005246:	bf00      	nop
 8005248:	20000af0 	.word	0x20000af0
 800524c:	200002bc 	.word	0x200002bc
 8005250:	20000f6c 	.word	0x20000f6c
 8005254:	20000b54 	.word	0x20000b54
 8005258:	200001a4 	.word	0x200001a4
 800525c:	2000077c 	.word	0x2000077c
 8005260:	20000ae4 	.word	0x20000ae4
 8005264:	20000d58 	.word	0x20000d58
 8005268:	20000aec 	.word	0x20000aec
 800526c:	200015c4 	.word	0x200015c4
 8005270:	20000f64 	.word	0x20000f64

08005274 <driveU>:
//driveU
// 指定距離分等速走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;									//等速走行のため加速度は0
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	4a28      	ldr	r2, [pc, #160]	; (8005324 <driveU+0xb0>)
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	4a28      	ldr	r2, [pc, #160]	; (8005328 <driveU+0xb4>)
 8005288:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	4a27      	ldr	r2, [pc, #156]	; (800532c <driveU+0xb8>)
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	4a27      	ldr	r2, [pc, #156]	; (8005330 <driveU+0xbc>)
 8005294:	6013      	str	r3, [r2, #0]

	//----走行----
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 8005296:	e024      	b.n	80052e2 <driveU+0x6e>
		if(MF.FLAG.WEDGE){
 8005298:	4b26      	ldr	r3, [pc, #152]	; (8005334 <driveU+0xc0>)
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d01d      	beq.n	80052e2 <driveU+0x6e>
			if(ad_l < WALL_BASE_L-30 || ad_r < WALL_BASE_R-10){
 80052a6:	4b24      	ldr	r3, [pc, #144]	; (8005338 <driveU+0xc4>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b6d      	cmp	r3, #109	; 0x6d
 80052ac:	d903      	bls.n	80052b6 <driveU+0x42>
 80052ae:	4b23      	ldr	r3, [pc, #140]	; (800533c <driveU+0xc8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b6d      	cmp	r3, #109	; 0x6d
 80052b4:	d815      	bhi.n	80052e2 <driveU+0x6e>
				while((dist_l < W_DIST) || (dist_r < W_DIST));	//左右のモータが壁切れ用指定距離以上進むまで待機
 80052b6:	bf00      	nop
 80052b8:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <driveU+0xbc>)
 80052ba:	edd3 7a00 	vldr	s15, [r3]
 80052be:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005340 <driveU+0xcc>
 80052c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ca:	d4f5      	bmi.n	80052b8 <driveU+0x44>
 80052cc:	4b17      	ldr	r3, [pc, #92]	; (800532c <driveU+0xb8>)
 80052ce:	edd3 7a00 	vldr	s15, [r3]
 80052d2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005340 <driveU+0xcc>
 80052d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052de:	d4eb      	bmi.n	80052b8 <driveU+0x44>
			break;
 80052e0:	e019      	b.n	8005316 <driveU+0xa2>
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	ee07 3a90 	vmov	s15, r3
 80052e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052ec:	4b10      	ldr	r3, [pc, #64]	; (8005330 <driveU+0xbc>)
 80052ee:	edd3 7a00 	vldr	s15, [r3]
 80052f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fa:	dccd      	bgt.n	8005298 <driveU+0x24>
 80052fc:	88fb      	ldrh	r3, [r7, #6]
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005306:	4b09      	ldr	r3, [pc, #36]	; (800532c <driveU+0xb8>)
 8005308:	edd3 7a00 	vldr	s15, [r3]
 800530c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005314:	dcc0      	bgt.n	8005298 <driveU+0x24>
			}
		}
	}
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	20000ae4 	.word	0x20000ae4
 8005328:	20000d58 	.word	0x20000d58
 800532c:	20000aec 	.word	0x20000aec
 8005330:	200015c4 	.word	0x200015c4
 8005334:	20000f68 	.word	0x20000f68
 8005338:	20000afc 	.word	0x20000afc
 800533c:	20000f60 	.word	0x20000f60
 8005340:	428c0000 	.word	0x428c0000

08005344 <driveC>:
//driveC
// 指定距離分デフォルト速度で走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 800534e:	4b19      	ldr	r3, [pc, #100]	; (80053b4 <driveC+0x70>)
 8005350:	4a19      	ldr	r2, [pc, #100]	; (80053b8 <driveC+0x74>)
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	4a19      	ldr	r2, [pc, #100]	; (80053bc <driveC+0x78>)
 8005356:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 150;
 8005358:	4b16      	ldr	r3, [pc, #88]	; (80053b4 <driveC+0x70>)
 800535a:	4a19      	ldr	r2, [pc, #100]	; (80053c0 <driveC+0x7c>)
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	4a19      	ldr	r2, [pc, #100]	; (80053c4 <driveC+0x80>)
 8005360:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;												//等速走行のため加速度は0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	4a18      	ldr	r2, [pc, #96]	; (80053c8 <driveC+0x84>)
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	4a18      	ldr	r2, [pc, #96]	; (80053cc <driveC+0x88>)
 800536c:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 800536e:	f7ff fcb3 	bl	8004cd8 <drive_start>
	//====回転====
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが定速分の距離以上進むまで待機
 8005372:	bf00      	nop
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800537e:	4b14      	ldr	r3, [pc, #80]	; (80053d0 <driveC+0x8c>)
 8005380:	edd3 7a00 	vldr	s15, [r3]
 8005384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800538c:	dcf2      	bgt.n	8005374 <driveC+0x30>
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	ee07 3a90 	vmov	s15, r3
 8005394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005398:	4b0e      	ldr	r3, [pc, #56]	; (80053d4 <driveC+0x90>)
 800539a:	edd3 7a00 	vldr	s15, [r3]
 800539e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a6:	dce5      	bgt.n	8005374 <driveC+0x30>

	drive_stop();											//走行停止
 80053a8:	f7ff fcc6 	bl	8004d38 <drive_stop>
}
 80053ac:	bf00      	nop
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	43160000 	.word	0x43160000
 80053b8:	20000f6c 	.word	0x20000f6c
 80053bc:	20000b54 	.word	0x20000b54
 80053c0:	200001a4 	.word	0x200001a4
 80053c4:	2000077c 	.word	0x2000077c
 80053c8:	20000ae4 	.word	0x20000ae4
 80053cc:	20000d58 	.word	0x20000d58
 80053d0:	200015c4 	.word	0x200015c4
 80053d4:	20000aec 	.word	0x20000aec

080053d8 <driveC2>:
//driveC2
//a指定距離分デフォルト逆回転速度で走行して停止する
//a引数1：dist …… 走行距離
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC2(uint16_t dist){
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = -250;
 80053e2:	4b1a      	ldr	r3, [pc, #104]	; (800544c <driveC2+0x74>)
 80053e4:	4a1a      	ldr	r2, [pc, #104]	; (8005450 <driveC2+0x78>)
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	4a1a      	ldr	r2, [pc, #104]	; (8005454 <driveC2+0x7c>)
 80053ea:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = -250;
 80053ec:	4b17      	ldr	r3, [pc, #92]	; (800544c <driveC2+0x74>)
 80053ee:	4a1a      	ldr	r2, [pc, #104]	; (8005458 <driveC2+0x80>)
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	4a1a      	ldr	r2, [pc, #104]	; (800545c <driveC2+0x84>)
 80053f4:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;									//a等速走行のため加速度は0
 80053f6:	f04f 0300 	mov.w	r3, #0
 80053fa:	4a19      	ldr	r2, [pc, #100]	; (8005460 <driveC2+0x88>)
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	4a19      	ldr	r2, [pc, #100]	; (8005464 <driveC2+0x8c>)
 8005400:	6013      	str	r3, [r2, #0]

	drive_start();											//a走行開始
 8005402:	f7ff fc69 	bl	8004cd8 <drive_start>
	//====a回転====
	while((dist_l > (-1*dist)) || (dist_r > (-1*dist)));	//a左右のモータが定速分の逆走距離以上進むまで待機
 8005406:	bf00      	nop
 8005408:	88fb      	ldrh	r3, [r7, #6]
 800540a:	425b      	negs	r3, r3
 800540c:	ee07 3a90 	vmov	s15, r3
 8005410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005414:	4b14      	ldr	r3, [pc, #80]	; (8005468 <driveC2+0x90>)
 8005416:	edd3 7a00 	vldr	s15, [r3]
 800541a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800541e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005422:	d4f1      	bmi.n	8005408 <driveC2+0x30>
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	425b      	negs	r3, r3
 8005428:	ee07 3a90 	vmov	s15, r3
 800542c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005430:	4b0e      	ldr	r3, [pc, #56]	; (800546c <driveC2+0x94>)
 8005432:	edd3 7a00 	vldr	s15, [r3]
 8005436:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800543a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800543e:	d4e3      	bmi.n	8005408 <driveC2+0x30>

	drive_stop();											//a走行停止
 8005440:	f7ff fc7a 	bl	8004d38 <drive_stop>
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	c37a0000 	.word	0xc37a0000
 8005450:	20000f6c 	.word	0x20000f6c
 8005454:	20000b54 	.word	0x20000b54
 8005458:	200001a4 	.word	0x200001a4
 800545c:	2000077c 	.word	0x2000077c
 8005460:	20000ae4 	.word	0x20000ae4
 8005464:	20000d58 	.word	0x20000d58
 8005468:	200015c4 	.word	0x200015c4
 800546c:	20000aec 	.word	0x20000aec

08005470 <slalomF>:
//slalomF
//aスラロームの前オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomF(int16_t accel_p, int16_t speed_p, uint8_t dist_p, uint16_t wall_fl, uint16_t wall_fr){
 8005470:	b590      	push	{r4, r7, lr}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	4604      	mov	r4, r0
 8005478:	4608      	mov	r0, r1
 800547a:	4611      	mov	r1, r2
 800547c:	461a      	mov	r2, r3
 800547e:	4623      	mov	r3, r4
 8005480:	80fb      	strh	r3, [r7, #6]
 8005482:	4603      	mov	r3, r0
 8005484:	80bb      	strh	r3, [r7, #4]
 8005486:	460b      	mov	r3, r1
 8005488:	70fb      	strb	r3, [r7, #3]
 800548a:	4613      	mov	r3, r2
 800548c:	803b      	strh	r3, [r7, #0]
	MF.FLAG.GYRO = 0;
 800548e:	4a2d      	ldr	r2, [pc, #180]	; (8005544 <slalomF+0xd4>)
 8005490:	8813      	ldrh	r3, [r2, #0]
 8005492:	f36f 2308 	bfc	r3, #8, #1
 8005496:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005498:	4a2a      	ldr	r2, [pc, #168]	; (8005544 <slalomF+0xd4>)
 800549a:	8813      	ldrh	r3, [r2, #0]
 800549c:	f043 0304 	orr.w	r3, r3, #4
 80054a0:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 80054a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054ae:	4b26      	ldr	r3, [pc, #152]	; (8005548 <slalomF+0xd8>)
 80054b0:	edc3 7a00 	vstr	s15, [r3]
 80054b4:	4b25      	ldr	r3, [pc, #148]	; (800554c <slalomF+0xdc>)
 80054b6:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 80054ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054c6:	4b22      	ldr	r3, [pc, #136]	; (8005550 <slalomF+0xe0>)
 80054c8:	edc3 7a00 	vstr	s15, [r3]
 80054cc:	4b21      	ldr	r3, [pc, #132]	; (8005554 <slalomF+0xe4>)
 80054ce:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 80054d2:	f7ff fc59 	bl	8004d88 <control_start>
	dist_l = dist_r = 0;
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	4a1f      	ldr	r2, [pc, #124]	; (8005558 <slalomF+0xe8>)
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	4a1f      	ldr	r2, [pc, #124]	; (800555c <slalomF+0xec>)
 80054e0:	6013      	str	r3, [r2, #0]
	while(dist_l < dist_p && dist_r < dist_p){
 80054e2:	e00d      	b.n	8005500 <slalomF+0x90>
		if(ad_fl > wall_fl || ad_fr > wall_fr){
 80054e4:	883a      	ldrh	r2, [r7, #0]
 80054e6:	4b1e      	ldr	r3, [pc, #120]	; (8005560 <slalomF+0xf0>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d304      	bcc.n	80054f8 <slalomF+0x88>
 80054ee:	8b3a      	ldrh	r2, [r7, #24]
 80054f0:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <slalomF+0xf4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d203      	bcs.n	8005500 <slalomF+0x90>
			full_led_write(RED);
 80054f8:	2001      	movs	r0, #1
 80054fa:	f00c f84b 	bl	8011594 <full_led_write>
			break;
 80054fe:	e019      	b.n	8005534 <slalomF+0xc4>
	while(dist_l < dist_p && dist_r < dist_p){
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	ee07 3a90 	vmov	s15, r3
 8005506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800550a:	4b14      	ldr	r3, [pc, #80]	; (800555c <slalomF+0xec>)
 800550c:	edd3 7a00 	vldr	s15, [r3]
 8005510:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005518:	dd0c      	ble.n	8005534 <slalomF+0xc4>
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	ee07 3a90 	vmov	s15, r3
 8005520:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005524:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <slalomF+0xe8>)
 8005526:	edd3 7a00 	vldr	s15, [r3]
 800552a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800552e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005532:	dcd7      	bgt.n	80054e4 <slalomF+0x74>
		}
	}
	drive_stop();
 8005534:	f7ff fc00 	bl	8004d38 <drive_stop>
	control_stop();
 8005538:	f7ff fc3a 	bl	8004db0 <control_stop>
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bd90      	pop	{r4, r7, pc}
 8005544:	20000f68 	.word	0x20000f68
 8005548:	20000ae4 	.word	0x20000ae4
 800554c:	20000d58 	.word	0x20000d58
 8005550:	200001a4 	.word	0x200001a4
 8005554:	2000077c 	.word	0x2000077c
 8005558:	20000aec 	.word	0x20000aec
 800555c:	200015c4 	.word	0x200015c4
 8005560:	20000d54 	.word	0x20000d54
 8005564:	20000c00 	.word	0x20000c00

08005568 <slalomR>:
//slalomR
//aスラロームの旋回部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomR(int16_t degaccel_p, int16_t omega_p, int16_t degree_p, int16_t speed_p){
 8005568:	b490      	push	{r4, r7}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	4604      	mov	r4, r0
 8005570:	4608      	mov	r0, r1
 8005572:	4611      	mov	r1, r2
 8005574:	461a      	mov	r2, r3
 8005576:	4623      	mov	r3, r4
 8005578:	80fb      	strh	r3, [r7, #6]
 800557a:	4603      	mov	r3, r0
 800557c:	80bb      	strh	r3, [r7, #4]
 800557e:	460b      	mov	r3, r1
 8005580:	807b      	strh	r3, [r7, #2]
 8005582:	4613      	mov	r3, r2
 8005584:	803b      	strh	r3, [r7, #0]
	MF.FLAG.GYRO = 1;
 8005586:	4a82      	ldr	r2, [pc, #520]	; (8005790 <slalomR+0x228>)
 8005588:	8813      	ldrh	r3, [r2, #0]
 800558a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800558e:	8013      	strh	r3, [r2, #0]
	target_degaccel_z = degaccel_p;
 8005590:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005594:	ee07 3a90 	vmov	s15, r3
 8005598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800559c:	4b7d      	ldr	r3, [pc, #500]	; (8005794 <slalomR+0x22c>)
 800559e:	edc3 7a00 	vstr	s15, [r3]
	target_omega_z = 0;
 80055a2:	4b7d      	ldr	r3, [pc, #500]	; (8005798 <slalomR+0x230>)
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]
	speed_G = speed_p;
 80055aa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055b6:	4b79      	ldr	r3, [pc, #484]	; (800579c <slalomR+0x234>)
 80055b8:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_degree;

	if(omega_p < 0){
 80055bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	da1f      	bge.n	8005604 <slalomR+0x9c>
		omega_min = omega_p;
 80055c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80055c8:	ee07 3a90 	vmov	s15, r3
 80055cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055d0:	4b73      	ldr	r3, [pc, #460]	; (80057a0 <slalomR+0x238>)
 80055d2:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_min * omega_min / target_degaccel_z / 2;
 80055d6:	4b72      	ldr	r3, [pc, #456]	; (80057a0 <slalomR+0x238>)
 80055d8:	ed93 7a00 	vldr	s14, [r3]
 80055dc:	4b70      	ldr	r3, [pc, #448]	; (80057a0 <slalomR+0x238>)
 80055de:	edd3 7a00 	vldr	s15, [r3]
 80055e2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80055e6:	4b6b      	ldr	r3, [pc, #428]	; (8005794 <slalomR+0x22c>)
 80055e8:	edd3 7a00 	vldr	s15, [r3]
 80055ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80055f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055fc:	ee17 3a90 	vmov	r3, s15
 8005600:	81fb      	strh	r3, [r7, #14]
 8005602:	e01e      	b.n	8005642 <slalomR+0xda>
	}else{
		omega_max = omega_p;
 8005604:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005608:	ee07 3a90 	vmov	s15, r3
 800560c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005610:	4b64      	ldr	r3, [pc, #400]	; (80057a4 <slalomR+0x23c>)
 8005612:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_max * omega_max / target_degaccel_z / 2;
 8005616:	4b63      	ldr	r3, [pc, #396]	; (80057a4 <slalomR+0x23c>)
 8005618:	ed93 7a00 	vldr	s14, [r3]
 800561c:	4b61      	ldr	r3, [pc, #388]	; (80057a4 <slalomR+0x23c>)
 800561e:	edd3 7a00 	vldr	s15, [r3]
 8005622:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005626:	4b5b      	ldr	r3, [pc, #364]	; (8005794 <slalomR+0x22c>)
 8005628:	edd3 7a00 	vldr	s15, [r3]
 800562c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005630:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005634:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800563c:	ee17 3a90 	vmov	r3, s15
 8005640:	81fb      	strh	r3, [r7, #14]
	}

	MF.FLAG.DRV = 1;
 8005642:	4a53      	ldr	r2, [pc, #332]	; (8005790 <slalomR+0x228>)
 8005644:	8813      	ldrh	r3, [r2, #0]
 8005646:	f043 0302 	orr.w	r3, r3, #2
 800564a:	8013      	strh	r3, [r2, #0]
	if(omega_p < 0){
 800564c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	da14      	bge.n	800567e <slalomR+0x116>
		while(degree_z > target_degree_z+c_degree);
 8005654:	bf00      	nop
 8005656:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005662:	4b51      	ldr	r3, [pc, #324]	; (80057a8 <slalomR+0x240>)
 8005664:	edd3 7a00 	vldr	s15, [r3]
 8005668:	ee37 7a27 	vadd.f32	s14, s14, s15
 800566c:	4b4f      	ldr	r3, [pc, #316]	; (80057ac <slalomR+0x244>)
 800566e:	edd3 7a00 	vldr	s15, [r3]
 8005672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567a:	d4ec      	bmi.n	8005656 <slalomR+0xee>
 800567c:	e013      	b.n	80056a6 <slalomR+0x13e>
	}else{
		while(degree_z < target_degree_z+c_degree);
 800567e:	bf00      	nop
 8005680:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005684:	ee07 3a90 	vmov	s15, r3
 8005688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800568c:	4b46      	ldr	r3, [pc, #280]	; (80057a8 <slalomR+0x240>)
 800568e:	edd3 7a00 	vldr	s15, [r3]
 8005692:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005696:	4b45      	ldr	r3, [pc, #276]	; (80057ac <slalomR+0x244>)
 8005698:	edd3 7a00 	vldr	s15, [r3]
 800569c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a4:	dcec      	bgt.n	8005680 <slalomR+0x118>
	}

	target_degaccel_z = 0;
 80056a6:	4b3b      	ldr	r3, [pc, #236]	; (8005794 <slalomR+0x22c>)
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]

	if(omega_p < 0){
 80056ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da18      	bge.n	80056e8 <slalomR+0x180>
		while(degree_z > target_degree_z+(degree_p-c_degree-4));
 80056b6:	bf00      	nop
 80056b8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80056bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	3b04      	subs	r3, #4
 80056c4:	ee07 3a90 	vmov	s15, r3
 80056c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056cc:	4b36      	ldr	r3, [pc, #216]	; (80057a8 <slalomR+0x240>)
 80056ce:	edd3 7a00 	vldr	s15, [r3]
 80056d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056d6:	4b35      	ldr	r3, [pc, #212]	; (80057ac <slalomR+0x244>)
 80056d8:	edd3 7a00 	vldr	s15, [r3]
 80056dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e4:	d4e8      	bmi.n	80056b8 <slalomR+0x150>
 80056e6:	e017      	b.n	8005718 <slalomR+0x1b0>
	}else{
		while(degree_z < target_degree_z+(degree_p-c_degree+4));
 80056e8:	bf00      	nop
 80056ea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80056ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	3304      	adds	r3, #4
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056fe:	4b2a      	ldr	r3, [pc, #168]	; (80057a8 <slalomR+0x240>)
 8005700:	edd3 7a00 	vldr	s15, [r3]
 8005704:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005708:	4b28      	ldr	r3, [pc, #160]	; (80057ac <slalomR+0x244>)
 800570a:	edd3 7a00 	vldr	s15, [r3]
 800570e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005716:	dce8      	bgt.n	80056ea <slalomR+0x182>
	}

	target_degaccel_z = -degaccel_p;
 8005718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800571c:	425b      	negs	r3, r3
 800571e:	ee07 3a90 	vmov	s15, r3
 8005722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005726:	4b1b      	ldr	r3, [pc, #108]	; (8005794 <slalomR+0x22c>)
 8005728:	edc3 7a00 	vstr	s15, [r3]

	if(omega_p < 0){
 800572c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	da14      	bge.n	800575e <slalomR+0x1f6>
		while(degree_z > target_degree_z+degree_p);
 8005734:	bf00      	nop
 8005736:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005742:	4b19      	ldr	r3, [pc, #100]	; (80057a8 <slalomR+0x240>)
 8005744:	edd3 7a00 	vldr	s15, [r3]
 8005748:	ee37 7a27 	vadd.f32	s14, s14, s15
 800574c:	4b17      	ldr	r3, [pc, #92]	; (80057ac <slalomR+0x244>)
 800574e:	edd3 7a00 	vldr	s15, [r3]
 8005752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800575a:	d4ec      	bmi.n	8005736 <slalomR+0x1ce>
	}else{
		while(degree_z < target_degree_z+degree_p);
	}
}
 800575c:	e013      	b.n	8005786 <slalomR+0x21e>
		while(degree_z < target_degree_z+degree_p);
 800575e:	bf00      	nop
 8005760:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005764:	ee07 3a90 	vmov	s15, r3
 8005768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800576c:	4b0e      	ldr	r3, [pc, #56]	; (80057a8 <slalomR+0x240>)
 800576e:	edd3 7a00 	vldr	s15, [r3]
 8005772:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005776:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <slalomR+0x244>)
 8005778:	edd3 7a00 	vldr	s15, [r3]
 800577c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005784:	dcec      	bgt.n	8005760 <slalomR+0x1f8>
}
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bc90      	pop	{r4, r7}
 800578e:	4770      	bx	lr
 8005790:	20000f68 	.word	0x20000f68
 8005794:	20000b58 	.word	0x20000b58
 8005798:	200001a8 	.word	0x200001a8
 800579c:	20000af4 	.word	0x20000af4
 80057a0:	200002b8 	.word	0x200002b8
 80057a4:	20000ae8 	.word	0x20000ae8
 80057a8:	20000bf8 	.word	0x20000bf8
 80057ac:	20000b5c 	.word	0x20000b5c

080057b0 <slalomB>:
//slalomB
//aスラロームの後オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomB(int16_t accel_p, int16_t speed_p, uint8_t dist_p){
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	80fb      	strh	r3, [r7, #6]
 80057ba:	460b      	mov	r3, r1
 80057bc:	80bb      	strh	r3, [r7, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	70fb      	strb	r3, [r7, #3]
	MF.FLAG.GYRO = 0;
 80057c2:	4a25      	ldr	r2, [pc, #148]	; (8005858 <slalomB+0xa8>)
 80057c4:	8813      	ldrh	r3, [r2, #0]
 80057c6:	f36f 2308 	bfc	r3, #8, #1
 80057ca:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80057cc:	4a22      	ldr	r2, [pc, #136]	; (8005858 <slalomB+0xa8>)
 80057ce:	8813      	ldrh	r3, [r2, #0]
 80057d0:	f043 0304 	orr.w	r3, r3, #4
 80057d4:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 80057d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057e2:	4b1e      	ldr	r3, [pc, #120]	; (800585c <slalomB+0xac>)
 80057e4:	edc3 7a00 	vstr	s15, [r3]
 80057e8:	4b1d      	ldr	r3, [pc, #116]	; (8005860 <slalomB+0xb0>)
 80057ea:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 80057ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057fa:	4b1a      	ldr	r3, [pc, #104]	; (8005864 <slalomB+0xb4>)
 80057fc:	edc3 7a00 	vstr	s15, [r3]
 8005800:	4b19      	ldr	r3, [pc, #100]	; (8005868 <slalomB+0xb8>)
 8005802:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 8005806:	f7ff fabf 	bl	8004d88 <control_start>
	dist_l = dist_r = 0;
 800580a:	f04f 0300 	mov.w	r3, #0
 800580e:	4a17      	ldr	r2, [pc, #92]	; (800586c <slalomB+0xbc>)
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	4a17      	ldr	r2, [pc, #92]	; (8005870 <slalomB+0xc0>)
 8005814:	6013      	str	r3, [r2, #0]
	while(dist_l < dist_p && dist_r < dist_p);
 8005816:	bf00      	nop
 8005818:	78fb      	ldrb	r3, [r7, #3]
 800581a:	ee07 3a90 	vmov	s15, r3
 800581e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005822:	4b13      	ldr	r3, [pc, #76]	; (8005870 <slalomB+0xc0>)
 8005824:	edd3 7a00 	vldr	s15, [r3]
 8005828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800582c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005830:	dc00      	bgt.n	8005834 <slalomB+0x84>
}
 8005832:	e00c      	b.n	800584e <slalomB+0x9e>
	while(dist_l < dist_p && dist_r < dist_p);
 8005834:	78fb      	ldrb	r3, [r7, #3]
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800583e:	4b0b      	ldr	r3, [pc, #44]	; (800586c <slalomB+0xbc>)
 8005840:	edd3 7a00 	vldr	s15, [r3]
 8005844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800584c:	dce4      	bgt.n	8005818 <slalomB+0x68>
}
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000f68 	.word	0x20000f68
 800585c:	20000ae4 	.word	0x20000ae4
 8005860:	20000d58 	.word	0x20000d58
 8005864:	200001a4 	.word	0x200001a4
 8005868:	2000077c 	.word	0x2000077c
 800586c:	20000aec 	.word	0x20000aec
 8005870:	200015c4 	.word	0x200015c4

08005874 <set_position>:
//set_position
//a機体の尻を壁に当てて場所を区画中央に合わせる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(){
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0

  driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8005878:	2064      	movs	r0, #100	; 0x64
 800587a:	f7ff fdad 	bl	80053d8 <driveC2>
  degree_z = target_degree_z;
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <set_position+0x20>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a05      	ldr	r2, [pc, #20]	; (8005898 <set_position+0x24>)
 8005884:	6013      	str	r3, [r2, #0]
  start_mode = 0;
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <set_position+0x28>)
 8005888:	2200      	movs	r2, #0
 800588a:	701a      	strb	r2, [r3, #0]
  start_sectionA();
 800588c:	f000 f826 	bl	80058dc <start_sectionA>
}
 8005890:	bf00      	nop
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20000bf8 	.word	0x20000bf8
 8005898:	20000b5c 	.word	0x20000b5c
 800589c:	200015c8 	.word	0x200015c8

080058a0 <set_positionF>:
//set_positionF
//a前壁との距離を測定し、場所を区画中央に合わせる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_positionF(){
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0

	full_led_write(RED);
 80058a4:	2001      	movs	r0, #1
 80058a6:	f00b fe75 	bl	8011594 <full_led_write>
	HAL_Delay(100);
 80058aa:	2064      	movs	r0, #100	; 0x64
 80058ac:	f7fb fbb6 	bl	800101c <HAL_Delay>

	MF.FLAG.DRV = 1;
 80058b0:	4a09      	ldr	r2, [pc, #36]	; (80058d8 <set_positionF+0x38>)
 80058b2:	8813      	ldrh	r3, [r2, #0]
 80058b4:	f043 0302 	orr.w	r3, r3, #2
 80058b8:	8013      	strh	r3, [r2, #0]
//	MF.FLAG.FWALL = 1;
	MF.FLAG.GCTRL = 1;
 80058ba:	4a07      	ldr	r2, [pc, #28]	; (80058d8 <set_positionF+0x38>)
 80058bc:	8813      	ldrh	r3, [r2, #0]
 80058be:	f043 0310 	orr.w	r3, r3, #16
 80058c2:	8013      	strh	r3, [r2, #0]
//	while(MF.FLAG.FWALL);

	MF.FLAG.GCTRL = 0;
 80058c4:	4a04      	ldr	r2, [pc, #16]	; (80058d8 <set_positionF+0x38>)
 80058c6:	8813      	ldrh	r3, [r2, #0]
 80058c8:	f36f 1304 	bfc	r3, #4, #1
 80058cc:	8013      	strh	r3, [r2, #0]
	drive_stop();
 80058ce:	f7ff fa33 	bl	8004d38 <drive_stop>
}
 80058d2:	bf00      	nop
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20000f68 	.word	0x20000f68

080058dc <start_sectionA>:
//start_sectionA
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA(void){
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0

	control_start();
 80058e0:	f7ff fa52 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 80058e4:	4b64      	ldr	r3, [pc, #400]	; (8005a78 <start_sectionA+0x19c>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d12a      	bne.n	8005944 <start_sectionA+0x68>
		if(start_mode == 0){
 80058ee:	4b63      	ldr	r3, [pc, #396]	; (8005a7c <start_sectionA+0x1a0>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d108      	bne.n	800590a <start_sectionA+0x2e>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 80058f8:	237d      	movs	r3, #125	; 0x7d
 80058fa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80058fe:	2114      	movs	r1, #20
 8005900:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005904:	f7ff fb62 	bl	8004fcc <driveA>
 8005908:	e0a8      	b.n	8005a5c <start_sectionA+0x180>
		}else if(start_mode == 1){
 800590a:	4b5c      	ldr	r3, [pc, #368]	; (8005a7c <start_sectionA+0x1a0>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b01      	cmp	r3, #1
 8005912:	d108      	bne.n	8005926 <start_sectionA+0x4a>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005914:	235b      	movs	r3, #91	; 0x5b
 8005916:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800591a:	2114      	movs	r1, #20
 800591c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005920:	f7ff fb54 	bl	8004fcc <driveA>
 8005924:	e09a      	b.n	8005a5c <start_sectionA+0x180>
		}else if(start_mode == 2){
 8005926:	4b55      	ldr	r3, [pc, #340]	; (8005a7c <start_sectionA+0x1a0>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	f040 8095 	bne.w	8005a5c <start_sectionA+0x180>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_START_HALF);				//aスタート半区画分加速しながら走行。走行後は停止しない
 8005932:	2323      	movs	r3, #35	; 0x23
 8005934:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005938:	2114      	movs	r1, #20
 800593a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800593e:	f7ff fb45 	bl	8004fcc <driveA>
 8005942:	e08b      	b.n	8005a5c <start_sectionA+0x180>
		}
	}else if(run_mode == MIDDLE){
 8005944:	4b4c      	ldr	r3, [pc, #304]	; (8005a78 <start_sectionA+0x19c>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d129      	bne.n	80059a2 <start_sectionA+0xc6>
		if(start_mode == 0){
 800594e:	4b4b      	ldr	r3, [pc, #300]	; (8005a7c <start_sectionA+0x1a0>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d108      	bne.n	800596a <start_sectionA+0x8e>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_START);				//aスタート区画分加速しながら走行。走行後は停止しない
 8005958:	237d      	movs	r3, #125	; 0x7d
 800595a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800595e:	2114      	movs	r1, #20
 8005960:	f241 7070 	movw	r0, #6000	; 0x1770
 8005964:	f7ff fb32 	bl	8004fcc <driveA>
 8005968:	e078      	b.n	8005a5c <start_sectionA+0x180>
		}else if(start_mode == 1){
 800596a:	4b44      	ldr	r3, [pc, #272]	; (8005a7c <start_sectionA+0x1a0>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b01      	cmp	r3, #1
 8005972:	d108      	bne.n	8005986 <start_sectionA+0xaa>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);				//a半区画分加速しながら走行。走行後は停止しない
 8005974:	235b      	movs	r3, #91	; 0x5b
 8005976:	f44f 7216 	mov.w	r2, #600	; 0x258
 800597a:	2114      	movs	r1, #20
 800597c:	f241 7070 	movw	r0, #6000	; 0x1770
 8005980:	f7ff fb24 	bl	8004fcc <driveA>
 8005984:	e06a      	b.n	8005a5c <start_sectionA+0x180>
		}else if(start_mode == 2){
 8005986:	4b3d      	ldr	r3, [pc, #244]	; (8005a7c <start_sectionA+0x1a0>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d165      	bne.n	8005a5c <start_sectionA+0x180>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005990:	2323      	movs	r3, #35	; 0x23
 8005992:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005996:	2114      	movs	r1, #20
 8005998:	f241 7070 	movw	r0, #6000	; 0x1770
 800599c:	f7ff fb16 	bl	8004fcc <driveA>
 80059a0:	e05c      	b.n	8005a5c <start_sectionA+0x180>
		}
	}else if(run_mode == HIGH){
 80059a2:	4b35      	ldr	r3, [pc, #212]	; (8005a78 <start_sectionA+0x19c>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d129      	bne.n	8005a00 <start_sectionA+0x124>
		if(start_mode == 0){
 80059ac:	4b33      	ldr	r3, [pc, #204]	; (8005a7c <start_sectionA+0x1a0>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d108      	bne.n	80059c8 <start_sectionA+0xec>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 80059b6:	237d      	movs	r3, #125	; 0x7d
 80059b8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80059bc:	2114      	movs	r1, #20
 80059be:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80059c2:	f7ff fb03 	bl	8004fcc <driveA>
 80059c6:	e049      	b.n	8005a5c <start_sectionA+0x180>
		}else if(start_mode == 1){
 80059c8:	4b2c      	ldr	r3, [pc, #176]	; (8005a7c <start_sectionA+0x1a0>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d108      	bne.n	80059e4 <start_sectionA+0x108>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 80059d2:	235b      	movs	r3, #91	; 0x5b
 80059d4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80059d8:	2114      	movs	r1, #20
 80059da:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80059de:	f7ff faf5 	bl	8004fcc <driveA>
 80059e2:	e03b      	b.n	8005a5c <start_sectionA+0x180>
		}else if(start_mode == 2){
 80059e4:	4b25      	ldr	r3, [pc, #148]	; (8005a7c <start_sectionA+0x1a0>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d136      	bne.n	8005a5c <start_sectionA+0x180>
			driveA(10000, SPEED_MIN, SPEED_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 80059ee:	2323      	movs	r3, #35	; 0x23
 80059f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80059f4:	2114      	movs	r1, #20
 80059f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80059fa:	f7ff fae7 	bl	8004fcc <driveA>
 80059fe:	e02d      	b.n	8005a5c <start_sectionA+0x180>
		}
	}else if(run_mode == HIGH_HIGH){
 8005a00:	4b1d      	ldr	r3, [pc, #116]	; (8005a78 <start_sectionA+0x19c>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d128      	bne.n	8005a5c <start_sectionA+0x180>
		if(start_mode == 0){
 8005a0a:	4b1c      	ldr	r3, [pc, #112]	; (8005a7c <start_sectionA+0x1a0>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d108      	bne.n	8005a26 <start_sectionA+0x14a>
			driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005a14:	237d      	movs	r3, #125	; 0x7d
 8005a16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a1a:	2114      	movs	r1, #20
 8005a1c:	f242 7010 	movw	r0, #10000	; 0x2710
 8005a20:	f7ff fad4 	bl	8004fcc <driveA>
 8005a24:	e01a      	b.n	8005a5c <start_sectionA+0x180>
		}else if(start_mode == 1){
 8005a26:	4b15      	ldr	r3, [pc, #84]	; (8005a7c <start_sectionA+0x1a0>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d108      	bne.n	8005a42 <start_sectionA+0x166>
			driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 8005a30:	235b      	movs	r3, #91	; 0x5b
 8005a32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a36:	2114      	movs	r1, #20
 8005a38:	f242 7010 	movw	r0, #10000	; 0x2710
 8005a3c:	f7ff fac6 	bl	8004fcc <driveA>
 8005a40:	e00c      	b.n	8005a5c <start_sectionA+0x180>
		}else if(start_mode == 2){
 8005a42:	4b0e      	ldr	r3, [pc, #56]	; (8005a7c <start_sectionA+0x1a0>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d107      	bne.n	8005a5c <start_sectionA+0x180>
			driveA(15000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005a4c:	2323      	movs	r3, #35	; 0x23
 8005a4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a52:	2114      	movs	r1, #20
 8005a54:	f643 2098 	movw	r0, #15000	; 0x3a98
 8005a58:	f7ff fab8 	bl	8004fcc <driveA>
		}
	}
	start_mode = 1;
 8005a5c:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <start_sectionA+0x1a0>)
 8005a5e:	2201      	movs	r2, #1
 8005a60:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005a62:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <start_sectionA+0x1a4>)
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <start_sectionA+0x198>
 8005a70:	f00b fd1c 	bl	80114ac <get_wall_info>
}
 8005a74:	bf00      	nop
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	20000456 	.word	0x20000456
 8005a7c:	200015c8 	.word	0x200015c8
 8005a80:	20000f68 	.word	0x20000f68

08005a84 <half_sectionA>:
//half_sectionA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0

	control_start();
 8005a88:	f7ff f97e 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005a8c:	4b20      	ldr	r3, [pc, #128]	; (8005b10 <half_sectionA+0x8c>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d108      	bne.n	8005aa8 <half_sectionA+0x24>
		driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005a96:	235b      	movs	r3, #91	; 0x5b
 8005a98:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005a9c:	2114      	movs	r1, #20
 8005a9e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005aa2:	f7ff fa93 	bl	8004fcc <driveA>
 8005aa6:	e028      	b.n	8005afa <half_sectionA+0x76>
	}else if(run_mode == MIDDLE){
 8005aa8:	4b19      	ldr	r3, [pc, #100]	; (8005b10 <half_sectionA+0x8c>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d108      	bne.n	8005ac4 <half_sectionA+0x40>
		driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分加速しながら走行。走行後は停止しない
 8005ab2:	235b      	movs	r3, #91	; 0x5b
 8005ab4:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005ab8:	2114      	movs	r1, #20
 8005aba:	f241 7070 	movw	r0, #6000	; 0x1770
 8005abe:	f7ff fa85 	bl	8004fcc <driveA>
 8005ac2:	e01a      	b.n	8005afa <half_sectionA+0x76>
	}else if(run_mode == HIGH){
 8005ac4:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <half_sectionA+0x8c>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d108      	bne.n	8005ae0 <half_sectionA+0x5c>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005ace:	235b      	movs	r3, #91	; 0x5b
 8005ad0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005ad4:	2114      	movs	r1, #20
 8005ad6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005ada:	f7ff fa77 	bl	8004fcc <driveA>
 8005ade:	e00c      	b.n	8005afa <half_sectionA+0x76>
	}else if(run_mode == HIGH_HIGH){
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <half_sectionA+0x8c>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d107      	bne.n	8005afa <half_sectionA+0x76>
		driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005aea:	235b      	movs	r3, #91	; 0x5b
 8005aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005af0:	2114      	movs	r1, #20
 8005af2:	f242 7010 	movw	r0, #10000	; 0x2710
 8005af6:	f7ff fa69 	bl	8004fcc <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8005afa:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <half_sectionA+0x90>)
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <half_sectionA+0x88>
 8005b08:	f00b fcd0 	bl	80114ac <get_wall_info>
}
 8005b0c:	bf00      	nop
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	20000456 	.word	0x20000456
 8005b14:	20000f68 	.word	0x20000f68

08005b18 <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005b1c:	2003      	movs	r0, #3
 8005b1e:	f00b fd39 	bl	8011594 <full_led_write>

	control_start();
 8005b22:	f7ff f931 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005b26:	4b1a      	ldr	r3, [pc, #104]	; (8005b90 <half_sectionD+0x78>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d107      	bne.n	8005b40 <half_sectionD+0x28>
		driveD(-4000, SPEED_MIN, SPEED_LOW, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005b30:	235b      	movs	r3, #91	; 0x5b
 8005b32:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005b36:	2114      	movs	r1, #20
 8005b38:	4816      	ldr	r0, [pc, #88]	; (8005b94 <half_sectionD+0x7c>)
 8005b3a:	f7ff fac1 	bl	80050c0 <driveD>
	}else if(run_mode == HIGH){
		driveD(-4000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == HIGH_HIGH){
		driveD(-6000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005b3e:	e025      	b.n	8005b8c <half_sectionD+0x74>
	}else if(run_mode == MIDDLE){
 8005b40:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <half_sectionD+0x78>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d107      	bne.n	8005b5a <half_sectionD+0x42>
		driveD(-4000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分指定減速度で減速走行。走行後は停止する
 8005b4a:	235b      	movs	r3, #91	; 0x5b
 8005b4c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005b50:	2114      	movs	r1, #20
 8005b52:	4810      	ldr	r0, [pc, #64]	; (8005b94 <half_sectionD+0x7c>)
 8005b54:	f7ff fab4 	bl	80050c0 <driveD>
}
 8005b58:	e018      	b.n	8005b8c <half_sectionD+0x74>
	}else if(run_mode == HIGH){
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	; (8005b90 <half_sectionD+0x78>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d107      	bne.n	8005b74 <half_sectionD+0x5c>
		driveD(-4000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005b64:	235b      	movs	r3, #91	; 0x5b
 8005b66:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005b6a:	2114      	movs	r1, #20
 8005b6c:	4809      	ldr	r0, [pc, #36]	; (8005b94 <half_sectionD+0x7c>)
 8005b6e:	f7ff faa7 	bl	80050c0 <driveD>
}
 8005b72:	e00b      	b.n	8005b8c <half_sectionD+0x74>
	}else if(run_mode == HIGH_HIGH){
 8005b74:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <half_sectionD+0x78>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d106      	bne.n	8005b8c <half_sectionD+0x74>
		driveD(-6000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);				//半区画分指定減速度で減速走行。走行後は停止する
 8005b7e:	235b      	movs	r3, #91	; 0x5b
 8005b80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b84:	2114      	movs	r1, #20
 8005b86:	4804      	ldr	r0, [pc, #16]	; (8005b98 <half_sectionD+0x80>)
 8005b88:	f7ff fa9a 	bl	80050c0 <driveD>
}
 8005b8c:	bf00      	nop
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20000456 	.word	0x20000456
 8005b94:	fffff060 	.word	0xfffff060
 8005b98:	ffffe890 	.word	0xffffe890

08005b9c <half_sectionVA>:
//half_sectionVA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionVA(void){
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0

	control_start();
 8005ba0:	f7ff f8f2 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005ba4:	4b20      	ldr	r3, [pc, #128]	; (8005c28 <half_sectionVA+0x8c>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d108      	bne.n	8005bc0 <half_sectionVA+0x24>
		driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005bae:	2382      	movs	r3, #130	; 0x82
 8005bb0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005bb4:	2114      	movs	r1, #20
 8005bb6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005bba:	f7ff fa07 	bl	8004fcc <driveA>
 8005bbe:	e028      	b.n	8005c12 <half_sectionVA+0x76>
	}else if(run_mode == MIDDLE){
 8005bc0:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <half_sectionVA+0x8c>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d108      	bne.n	8005bdc <half_sectionVA+0x40>
		driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF_V);					//半区画分加速しながら走行。走行後は停止しない
 8005bca:	2382      	movs	r3, #130	; 0x82
 8005bcc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005bd0:	2114      	movs	r1, #20
 8005bd2:	f241 7070 	movw	r0, #6000	; 0x1770
 8005bd6:	f7ff f9f9 	bl	8004fcc <driveA>
 8005bda:	e01a      	b.n	8005c12 <half_sectionVA+0x76>
	}else if(run_mode == HIGH){
 8005bdc:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <half_sectionVA+0x8c>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d108      	bne.n	8005bf8 <half_sectionVA+0x5c>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005be6:	2382      	movs	r3, #130	; 0x82
 8005be8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005bec:	2114      	movs	r1, #20
 8005bee:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005bf2:	f7ff f9eb 	bl	8004fcc <driveA>
 8005bf6:	e00c      	b.n	8005c12 <half_sectionVA+0x76>
	}else if(run_mode == HIGH_HIGH){
 8005bf8:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <half_sectionVA+0x8c>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d107      	bne.n	8005c12 <half_sectionVA+0x76>
		driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF_V);						//半区画分加速しながら走行。走行後は停止しない
 8005c02:	2382      	movs	r3, #130	; 0x82
 8005c04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c08:	2114      	movs	r1, #20
 8005c0a:	f242 7010 	movw	r0, #10000	; 0x2710
 8005c0e:	f7ff f9dd 	bl	8004fcc <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8005c12:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <half_sectionVA+0x90>)
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <half_sectionVA+0x88>
 8005c20:	f00b fc44 	bl	80114ac <get_wall_info>
}
 8005c24:	bf00      	nop
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20000456 	.word	0x20000456
 8005c2c:	20000f68 	.word	0x20000f68

08005c30 <half_sectionVD>:
//half_sectionVD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionVD(void){
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005c34:	2003      	movs	r0, #3
 8005c36:	f00b fcad 	bl	8011594 <full_led_write>

	control_start();
 8005c3a:	f7ff f8a5 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005c3e:	4b1a      	ldr	r3, [pc, #104]	; (8005ca8 <half_sectionVD+0x78>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d107      	bne.n	8005c58 <half_sectionVD+0x28>
		driveD(-4000, SPEED_MIN, SPEED_LOW, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005c48:	2382      	movs	r3, #130	; 0x82
 8005c4a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005c4e:	2114      	movs	r1, #20
 8005c50:	4816      	ldr	r0, [pc, #88]	; (8005cac <half_sectionVD+0x7c>)
 8005c52:	f7ff fa35 	bl	80050c0 <driveD>
	}else if(run_mode == HIGH){
		driveD(-4000, SPEED_MIN, SPEED_HIGH, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == HIGH_HIGH){
		driveD(-6000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005c56:	e025      	b.n	8005ca4 <half_sectionVD+0x74>
	}else if(run_mode == MIDDLE){
 8005c58:	4b13      	ldr	r3, [pc, #76]	; (8005ca8 <half_sectionVD+0x78>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d107      	bne.n	8005c72 <half_sectionVD+0x42>
		driveD(-4000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF_V);					//半区画分指定減速度で減速走行。走行後は停止する
 8005c62:	2382      	movs	r3, #130	; 0x82
 8005c64:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005c68:	2114      	movs	r1, #20
 8005c6a:	4810      	ldr	r0, [pc, #64]	; (8005cac <half_sectionVD+0x7c>)
 8005c6c:	f7ff fa28 	bl	80050c0 <driveD>
}
 8005c70:	e018      	b.n	8005ca4 <half_sectionVD+0x74>
	}else if(run_mode == HIGH){
 8005c72:	4b0d      	ldr	r3, [pc, #52]	; (8005ca8 <half_sectionVD+0x78>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d107      	bne.n	8005c8c <half_sectionVD+0x5c>
		driveD(-4000, SPEED_MIN, SPEED_HIGH, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005c7c:	2382      	movs	r3, #130	; 0x82
 8005c7e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005c82:	2114      	movs	r1, #20
 8005c84:	4809      	ldr	r0, [pc, #36]	; (8005cac <half_sectionVD+0x7c>)
 8005c86:	f7ff fa1b 	bl	80050c0 <driveD>
}
 8005c8a:	e00b      	b.n	8005ca4 <half_sectionVD+0x74>
	}else if(run_mode == HIGH_HIGH){
 8005c8c:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <half_sectionVD+0x78>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	d106      	bne.n	8005ca4 <half_sectionVD+0x74>
		driveD(-6000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF_V);						//半区画分指定減速度で減速走行。走行後は停止する
 8005c96:	2382      	movs	r3, #130	; 0x82
 8005c98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c9c:	2114      	movs	r1, #20
 8005c9e:	4804      	ldr	r0, [pc, #16]	; (8005cb0 <half_sectionVD+0x80>)
 8005ca0:	f7ff fa0e 	bl	80050c0 <driveD>
}
 8005ca4:	bf00      	nop
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	20000456 	.word	0x20000456
 8005cac:	fffff060 	.word	0xfffff060
 8005cb0:	ffffe890 	.word	0xffffe890

08005cb4 <half_sectionU>:
//half_sectionU
// 等速で半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionU(void){
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005cb8:	2007      	movs	r0, #7
 8005cba:	f00b fc6b 	bl	8011594 <full_led_write>
	control_start();
 8005cbe:	f7ff f863 	bl	8004d88 <control_start>
	driveU(SEC_HALF);													//半区画分等速走行。走行後は停止しない
 8005cc2:	205b      	movs	r0, #91	; 0x5b
 8005cc4:	f7ff fad6 	bl	8005274 <driveU>
}
 8005cc8:	bf00      	nop
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <half_sectionV>:
//half_sectionV
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionV(void){
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005cd0:	2007      	movs	r0, #7
 8005cd2:	f00b fc5f 	bl	8011594 <full_led_write>
	control_start();
 8005cd6:	f7ff f857 	bl	8004d88 <control_start>
	driveU(SEC_HALF_V);													//半区画分等速走行。走行後は停止しない
 8005cda:	2082      	movs	r0, #130	; 0x82
 8005cdc:	f7ff faca 	bl	8005274 <driveU>
}
 8005ce0:	bf00      	nop
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <one_section>:
//one_section
// 1区画分進んで停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_section(void){
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0

	half_sectionA();													//半区画分加速走行
 8005ce8:	f7ff fecc 	bl	8005a84 <half_sectionA>
	half_sectionD();													//半区画分減速走行のち停止
 8005cec:	f7ff ff14 	bl	8005b18 <half_sectionD>
}
 8005cf0:	bf00      	nop
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <one_sectionA>:
//one_sectionA
// 1区画分加速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA(void){
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8005cf8:	2004      	movs	r0, #4
 8005cfa:	f00b fc4b 	bl	8011594 <full_led_write>
	control_start();
 8005cfe:	f7ff f843 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005d02:	4b2b      	ldr	r3, [pc, #172]	; (8005db0 <one_sectionA+0xbc>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d10d      	bne.n	8005d28 <one_sectionA+0x34>
		driveA(accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005d0c:	4b29      	ldr	r3, [pc, #164]	; (8005db4 <one_sectionA+0xc0>)
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b21b      	sxth	r3, r3
 8005d12:	b298      	uxth	r0, r3
 8005d14:	4b28      	ldr	r3, [pc, #160]	; (8005db8 <one_sectionA+0xc4>)
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b21b      	sxth	r3, r3
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	23b6      	movs	r3, #182	; 0xb6
 8005d1e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005d22:	f7ff f953 	bl	8004fcc <driveA>
 8005d26:	e037      	b.n	8005d98 <one_sectionA+0xa4>
	}else if(run_mode == MIDDLE){
 8005d28:	4b21      	ldr	r3, [pc, #132]	; (8005db0 <one_sectionA+0xbc>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d10d      	bne.n	8005d4e <one_sectionA+0x5a>
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分加速走行。走行後は停止しない
 8005d32:	4b20      	ldr	r3, [pc, #128]	; (8005db4 <one_sectionA+0xc0>)
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	b21b      	sxth	r3, r3
 8005d38:	b298      	uxth	r0, r3
 8005d3a:	4b1f      	ldr	r3, [pc, #124]	; (8005db8 <one_sectionA+0xc4>)
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	b21b      	sxth	r3, r3
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	23b6      	movs	r3, #182	; 0xb6
 8005d44:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005d48:	f7ff f940 	bl	8004fcc <driveA>
 8005d4c:	e024      	b.n	8005d98 <one_sectionA+0xa4>
	}else if(run_mode == HIGH){
 8005d4e:	4b18      	ldr	r3, [pc, #96]	; (8005db0 <one_sectionA+0xbc>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d10d      	bne.n	8005d74 <one_sectionA+0x80>
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005d58:	4b16      	ldr	r3, [pc, #88]	; (8005db4 <one_sectionA+0xc0>)
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	b21b      	sxth	r3, r3
 8005d5e:	b298      	uxth	r0, r3
 8005d60:	4b15      	ldr	r3, [pc, #84]	; (8005db8 <one_sectionA+0xc4>)
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b21b      	sxth	r3, r3
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	23b6      	movs	r3, #182	; 0xb6
 8005d6a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005d6e:	f7ff f92d 	bl	8004fcc <driveA>
 8005d72:	e011      	b.n	8005d98 <one_sectionA+0xa4>
	}else if(run_mode == HIGH_HIGH){
 8005d74:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <one_sectionA+0xbc>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	d10c      	bne.n	8005d98 <one_sectionA+0xa4>
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	; (8005db4 <one_sectionA+0xc0>)
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	b21b      	sxth	r3, r3
 8005d84:	b298      	uxth	r0, r3
 8005d86:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <one_sectionA+0xc4>)
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b21b      	sxth	r3, r3
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	23b6      	movs	r3, #182	; 0xb6
 8005d90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d94:	f7ff f91a 	bl	8004fcc <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005d98:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <one_sectionA+0xc8>)
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <one_sectionA+0xb6>
 8005da6:	f00b fb81 	bl	80114ac <get_wall_info>
}
 8005daa:	bf00      	nop
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20000456 	.word	0x20000456
 8005db4:	20000454 	.word	0x20000454
 8005db8:	20000f7c 	.word	0x20000f7c
 8005dbc:	20000f68 	.word	0x20000f68

08005dc0 <one_sectionD>:
//one_sectionD
// 1区画分減速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD(void){
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005dc4:	2003      	movs	r0, #3
 8005dc6:	f00b fbe5 	bl	8011594 <full_led_write>
	control_start();
 8005dca:	f7fe ffdd 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005dce:	4b31      	ldr	r3, [pc, #196]	; (8005e94 <one_sectionD+0xd4>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d110      	bne.n	8005dfa <one_sectionD+0x3a>
		driveD(-accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF*2);				//1区画分減速走行。走行後は停止しない
 8005dd8:	4b2f      	ldr	r3, [pc, #188]	; (8005e98 <one_sectionD+0xd8>)
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b21b      	sxth	r3, r3
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	425b      	negs	r3, r3
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	b218      	sxth	r0, r3
 8005de6:	4b2d      	ldr	r3, [pc, #180]	; (8005e9c <one_sectionD+0xdc>)
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b21b      	sxth	r3, r3
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	23b6      	movs	r3, #182	; 0xb6
 8005df0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005df4:	f7ff f964 	bl	80050c0 <driveD>
 8005df8:	e040      	b.n	8005e7c <one_sectionD+0xbc>
	}else if(run_mode == MIDDLE){
 8005dfa:	4b26      	ldr	r3, [pc, #152]	; (8005e94 <one_sectionD+0xd4>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d110      	bne.n	8005e26 <one_sectionD+0x66>
		driveD(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005e04:	4b24      	ldr	r3, [pc, #144]	; (8005e98 <one_sectionD+0xd8>)
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b21b      	sxth	r3, r3
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	425b      	negs	r3, r3
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	b218      	sxth	r0, r3
 8005e12:	4b22      	ldr	r3, [pc, #136]	; (8005e9c <one_sectionD+0xdc>)
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b21b      	sxth	r3, r3
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	23b6      	movs	r3, #182	; 0xb6
 8005e1c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005e20:	f7ff f94e 	bl	80050c0 <driveD>
 8005e24:	e02a      	b.n	8005e7c <one_sectionD+0xbc>
	}else if(run_mode == HIGH){
 8005e26:	4b1b      	ldr	r3, [pc, #108]	; (8005e94 <one_sectionD+0xd4>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d110      	bne.n	8005e52 <one_sectionD+0x92>
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005e30:	4b19      	ldr	r3, [pc, #100]	; (8005e98 <one_sectionD+0xd8>)
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b21b      	sxth	r3, r3
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	425b      	negs	r3, r3
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	b218      	sxth	r0, r3
 8005e3e:	4b17      	ldr	r3, [pc, #92]	; (8005e9c <one_sectionD+0xdc>)
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	b21b      	sxth	r3, r3
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	23b6      	movs	r3, #182	; 0xb6
 8005e48:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005e4c:	f7ff f938 	bl	80050c0 <driveD>
 8005e50:	e014      	b.n	8005e7c <one_sectionD+0xbc>
	}else if(run_mode == HIGH_HIGH){
 8005e52:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <one_sectionD+0xd4>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d10f      	bne.n	8005e7c <one_sectionD+0xbc>
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005e5c:	4b0e      	ldr	r3, [pc, #56]	; (8005e98 <one_sectionD+0xd8>)
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b21b      	sxth	r3, r3
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	425b      	negs	r3, r3
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	b218      	sxth	r0, r3
 8005e6a:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <one_sectionD+0xdc>)
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b21b      	sxth	r3, r3
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	23b6      	movs	r3, #182	; 0xb6
 8005e74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e78:	f7ff f922 	bl	80050c0 <driveD>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005e7c:	4b08      	ldr	r3, [pc, #32]	; (8005ea0 <one_sectionD+0xe0>)
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <one_sectionD+0xce>
 8005e8a:	f00b fb0f 	bl	80114ac <get_wall_info>
}
 8005e8e:	bf00      	nop
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000456 	.word	0x20000456
 8005e98:	20000454 	.word	0x20000454
 8005e9c:	20000f7c 	.word	0x20000f7c
 8005ea0:	20000f68 	.word	0x20000f68

08005ea4 <one_sectionVA>:
//one_sectionVA
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVA(void){
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8005ea8:	2004      	movs	r0, #4
 8005eaa:	f00b fb73 	bl	8011594 <full_led_write>
	control_start();
 8005eae:	f7fe ff6b 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005eb2:	4b28      	ldr	r3, [pc, #160]	; (8005f54 <one_sectionVA+0xb0>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d10e      	bne.n	8005eda <one_sectionVA+0x36>
		driveA(accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005ebc:	4b26      	ldr	r3, [pc, #152]	; (8005f58 <one_sectionVA+0xb4>)
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	b21b      	sxth	r3, r3
 8005ec2:	b298      	uxth	r0, r3
 8005ec4:	4b25      	ldr	r3, [pc, #148]	; (8005f5c <one_sectionVA+0xb8>)
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b21b      	sxth	r3, r3
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005ed0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005ed4:	f7ff f87a 	bl	8004fcc <driveA>
	}else if(run_mode == HIGH){
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}else if(run_mode == HIGH_HIGH){
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}
}
 8005ed8:	e03a      	b.n	8005f50 <one_sectionVA+0xac>
	}else if(run_mode == MIDDLE){
 8005eda:	4b1e      	ldr	r3, [pc, #120]	; (8005f54 <one_sectionVA+0xb0>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d10e      	bne.n	8005f02 <one_sectionVA+0x5e>
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005ee4:	4b1c      	ldr	r3, [pc, #112]	; (8005f58 <one_sectionVA+0xb4>)
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	b21b      	sxth	r3, r3
 8005eea:	b298      	uxth	r0, r3
 8005eec:	4b1b      	ldr	r3, [pc, #108]	; (8005f5c <one_sectionVA+0xb8>)
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b21b      	sxth	r3, r3
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005ef8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005efc:	f7ff f866 	bl	8004fcc <driveA>
}
 8005f00:	e026      	b.n	8005f50 <one_sectionVA+0xac>
	}else if(run_mode == HIGH){
 8005f02:	4b14      	ldr	r3, [pc, #80]	; (8005f54 <one_sectionVA+0xb0>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b03      	cmp	r3, #3
 8005f0a:	d10e      	bne.n	8005f2a <one_sectionVA+0x86>
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005f0c:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <one_sectionVA+0xb4>)
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	b21b      	sxth	r3, r3
 8005f12:	b298      	uxth	r0, r3
 8005f14:	4b11      	ldr	r3, [pc, #68]	; (8005f5c <one_sectionVA+0xb8>)
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b21b      	sxth	r3, r3
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005f20:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005f24:	f7ff f852 	bl	8004fcc <driveA>
}
 8005f28:	e012      	b.n	8005f50 <one_sectionVA+0xac>
	}else if(run_mode == HIGH_HIGH){
 8005f2a:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <one_sectionVA+0xb0>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d10d      	bne.n	8005f50 <one_sectionVA+0xac>
		driveA(accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005f34:	4b08      	ldr	r3, [pc, #32]	; (8005f58 <one_sectionVA+0xb4>)
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b21b      	sxth	r3, r3
 8005f3a:	b298      	uxth	r0, r3
 8005f3c:	4b07      	ldr	r3, [pc, #28]	; (8005f5c <one_sectionVA+0xb8>)
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	b21b      	sxth	r3, r3
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005f48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f4c:	f7ff f83e 	bl	8004fcc <driveA>
}
 8005f50:	bf00      	nop
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20000456 	.word	0x20000456
 8005f58:	20000454 	.word	0x20000454
 8005f5c:	20000f7c 	.word	0x20000f7c

08005f60 <one_sectionVD>:
//one_sectionVD
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVD(void){
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005f64:	2003      	movs	r0, #3
 8005f66:	f00b fb15 	bl	8011594 <full_led_write>
	control_start();
 8005f6a:	f7fe ff0d 	bl	8004d88 <control_start>
	if(run_mode == LOW){
 8005f6e:	4b2e      	ldr	r3, [pc, #184]	; (8006028 <one_sectionVD+0xc8>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d111      	bne.n	8005f9c <one_sectionVD+0x3c>
		driveD(-accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8005f78:	4b2c      	ldr	r3, [pc, #176]	; (800602c <one_sectionVD+0xcc>)
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b21b      	sxth	r3, r3
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	425b      	negs	r3, r3
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	b218      	sxth	r0, r3
 8005f86:	4b2a      	ldr	r3, [pc, #168]	; (8006030 <one_sectionVD+0xd0>)
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b21b      	sxth	r3, r3
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005f92:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005f96:	f7ff f893 	bl	80050c0 <driveD>
	}else if(run_mode == HIGH){
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}else if(run_mode == HIGH_HIGH){
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}
}
 8005f9a:	e043      	b.n	8006024 <one_sectionVD+0xc4>
	}else if(run_mode == MIDDLE){
 8005f9c:	4b22      	ldr	r3, [pc, #136]	; (8006028 <one_sectionVD+0xc8>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d111      	bne.n	8005fca <one_sectionVD+0x6a>
		driveD(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);			//1区画分減速走行。走行後は停止しない
 8005fa6:	4b21      	ldr	r3, [pc, #132]	; (800602c <one_sectionVD+0xcc>)
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b21b      	sxth	r3, r3
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	425b      	negs	r3, r3
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	b218      	sxth	r0, r3
 8005fb4:	4b1e      	ldr	r3, [pc, #120]	; (8006030 <one_sectionVD+0xd0>)
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b21b      	sxth	r3, r3
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005fc0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005fc4:	f7ff f87c 	bl	80050c0 <driveD>
}
 8005fc8:	e02c      	b.n	8006024 <one_sectionVD+0xc4>
	}else if(run_mode == HIGH){
 8005fca:	4b17      	ldr	r3, [pc, #92]	; (8006028 <one_sectionVD+0xc8>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d111      	bne.n	8005ff8 <one_sectionVD+0x98>
		driveD(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8005fd4:	4b15      	ldr	r3, [pc, #84]	; (800602c <one_sectionVD+0xcc>)
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	b21b      	sxth	r3, r3
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	425b      	negs	r3, r3
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	b218      	sxth	r0, r3
 8005fe2:	4b13      	ldr	r3, [pc, #76]	; (8006030 <one_sectionVD+0xd0>)
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b21b      	sxth	r3, r3
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005fee:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005ff2:	f7ff f865 	bl	80050c0 <driveD>
}
 8005ff6:	e015      	b.n	8006024 <one_sectionVD+0xc4>
	}else if(run_mode == HIGH_HIGH){
 8005ff8:	4b0b      	ldr	r3, [pc, #44]	; (8006028 <one_sectionVD+0xc8>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d110      	bne.n	8006024 <one_sectionVD+0xc4>
		driveD(-accel_hs, SPEED_HIGH_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8006002:	4b0a      	ldr	r3, [pc, #40]	; (800602c <one_sectionVD+0xcc>)
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	b21b      	sxth	r3, r3
 8006008:	b29b      	uxth	r3, r3
 800600a:	425b      	negs	r3, r3
 800600c:	b29b      	uxth	r3, r3
 800600e:	b218      	sxth	r0, r3
 8006010:	4b07      	ldr	r3, [pc, #28]	; (8006030 <one_sectionVD+0xd0>)
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b21b      	sxth	r3, r3
 8006016:	b29a      	uxth	r2, r3
 8006018:	f44f 7382 	mov.w	r3, #260	; 0x104
 800601c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006020:	f7ff f84e 	bl	80050c0 <driveD>
}
 8006024:	bf00      	nop
 8006026:	bd80      	pop	{r7, pc}
 8006028:	20000456 	.word	0x20000456
 800602c:	20000454 	.word	0x20000454
 8006030:	20000f7c 	.word	0x20000f7c

08006034 <one_sectionU>:
//one_sectionU
// 等速で1区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8006038:	2007      	movs	r0, #7
 800603a:	f00b faab 	bl	8011594 <full_led_write>
	control_start();
 800603e:	f7fe fea3 	bl	8004d88 <control_start>
	driveU(SEC_HALF*2);													//1区画分等速走行。走行後は停止しない
 8006042:	20b6      	movs	r0, #182	; 0xb6
 8006044:	f7ff f916 	bl	8005274 <driveU>
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得
 8006048:	4b05      	ldr	r3, [pc, #20]	; (8006060 <one_sectionU+0x2c>)
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <one_sectionU+0x26>
 8006056:	f00b fa29 	bl	80114ac <get_wall_info>
}
 800605a:	bf00      	nop
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000f68 	.word	0x20000f68
 8006064:	00000000 	.word	0x00000000

08006068 <rotate_R90>:
//rotate_R90
// 右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 8006068:	b598      	push	{r3, r4, r7, lr}
 800606a:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 800606c:	4b56      	ldr	r3, [pc, #344]	; (80061c8 <rotate_R90+0x160>)
 800606e:	4a57      	ldr	r2, [pc, #348]	; (80061cc <rotate_R90+0x164>)
 8006070:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 8006072:	4b57      	ldr	r3, [pc, #348]	; (80061d0 <rotate_R90+0x168>)
 8006074:	4a57      	ldr	r2, [pc, #348]	; (80061d4 <rotate_R90+0x16c>)
 8006076:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8006078:	4b57      	ldr	r3, [pc, #348]	; (80061d8 <rotate_R90+0x170>)
 800607a:	4a58      	ldr	r2, [pc, #352]	; (80061dc <rotate_R90+0x174>)
 800607c:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 800607e:	4b52      	ldr	r3, [pc, #328]	; (80061c8 <rotate_R90+0x160>)
 8006080:	edd3 7a00 	vldr	s15, [r3]
 8006084:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80061e0 <rotate_R90+0x178>
 8006088:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800608c:	ee16 0a90 	vmov	r0, s13
 8006090:	f7fa fa52 	bl	8000538 <__aeabi_f2d>
 8006094:	a34a      	add	r3, pc, #296	; (adr r3, 80061c0 <rotate_R90+0x158>)
 8006096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609a:	f7fa faa5 	bl	80005e8 <__aeabi_dmul>
 800609e:	4603      	mov	r3, r0
 80060a0:	460c      	mov	r4, r1
 80060a2:	4618      	mov	r0, r3
 80060a4:	4621      	mov	r1, r4
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	4b4e      	ldr	r3, [pc, #312]	; (80061e4 <rotate_R90+0x17c>)
 80060ac:	f7fa fa9c 	bl	80005e8 <__aeabi_dmul>
 80060b0:	4603      	mov	r3, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	4618      	mov	r0, r3
 80060b6:	4621      	mov	r1, r4
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060c0:	f7fa fbbc 	bl	800083c <__aeabi_ddiv>
 80060c4:	4603      	mov	r3, r0
 80060c6:	460c      	mov	r4, r1
 80060c8:	4618      	mov	r0, r3
 80060ca:	4621      	mov	r1, r4
 80060cc:	f7fa fd64 	bl	8000b98 <__aeabi_d2f>
 80060d0:	4602      	mov	r2, r0
 80060d2:	4b45      	ldr	r3, [pc, #276]	; (80061e8 <rotate_R90+0x180>)
 80060d4:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 80060d6:	4b3c      	ldr	r3, [pc, #240]	; (80061c8 <rotate_R90+0x160>)
 80060d8:	edd3 7a00 	vldr	s15, [r3]
 80060dc:	eef1 7a67 	vneg.f32	s15, s15
 80060e0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80061e0 <rotate_R90+0x178>
 80060e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80060e8:	ee16 0a90 	vmov	r0, s13
 80060ec:	f7fa fa24 	bl	8000538 <__aeabi_f2d>
 80060f0:	a333      	add	r3, pc, #204	; (adr r3, 80061c0 <rotate_R90+0x158>)
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	f7fa fa77 	bl	80005e8 <__aeabi_dmul>
 80060fa:	4603      	mov	r3, r0
 80060fc:	460c      	mov	r4, r1
 80060fe:	4618      	mov	r0, r3
 8006100:	4621      	mov	r1, r4
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	4b37      	ldr	r3, [pc, #220]	; (80061e4 <rotate_R90+0x17c>)
 8006108:	f7fa fa6e 	bl	80005e8 <__aeabi_dmul>
 800610c:	4603      	mov	r3, r0
 800610e:	460c      	mov	r4, r1
 8006110:	4618      	mov	r0, r3
 8006112:	4621      	mov	r1, r4
 8006114:	f04f 0200 	mov.w	r2, #0
 8006118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800611c:	f7fa fb8e 	bl	800083c <__aeabi_ddiv>
 8006120:	4603      	mov	r3, r0
 8006122:	460c      	mov	r4, r1
 8006124:	4618      	mov	r0, r3
 8006126:	4621      	mov	r1, r4
 8006128:	f7fa fd36 	bl	8000b98 <__aeabi_d2f>
 800612c:	4602      	mov	r2, r0
 800612e:	4b2f      	ldr	r3, [pc, #188]	; (80061ec <rotate_R90+0x184>)
 8006130:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8006132:	f7fe fdd1 	bl	8004cd8 <drive_start>
	control_stop();
 8006136:	f7fe fe3b 	bl	8004db0 <control_stop>
	while(degree_z > target_degree_z-80);
 800613a:	bf00      	nop
 800613c:	4b2c      	ldr	r3, [pc, #176]	; (80061f0 <rotate_R90+0x188>)
 800613e:	edd3 7a00 	vldr	s15, [r3]
 8006142:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80061f4 <rotate_R90+0x18c>
 8006146:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800614a:	4b2b      	ldr	r3, [pc, #172]	; (80061f8 <rotate_R90+0x190>)
 800614c:	edd3 7a00 	vldr	s15, [r3]
 8006150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006158:	d4f0      	bmi.n	800613c <rotate_R90+0xd4>

	accel_l = -10000;
 800615a:	4b1d      	ldr	r3, [pc, #116]	; (80061d0 <rotate_R90+0x168>)
 800615c:	4a27      	ldr	r2, [pc, #156]	; (80061fc <rotate_R90+0x194>)
 800615e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006160:	4b1d      	ldr	r3, [pc, #116]	; (80061d8 <rotate_R90+0x170>)
 8006162:	4a27      	ldr	r2, [pc, #156]	; (8006200 <rotate_R90+0x198>)
 8006164:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 8006166:	4b27      	ldr	r3, [pc, #156]	; (8006204 <rotate_R90+0x19c>)
 8006168:	4a27      	ldr	r2, [pc, #156]	; (8006208 <rotate_R90+0x1a0>)
 800616a:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 800616c:	4b27      	ldr	r3, [pc, #156]	; (800620c <rotate_R90+0x1a4>)
 800616e:	4a28      	ldr	r2, [pc, #160]	; (8006210 <rotate_R90+0x1a8>)
 8006170:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 8006172:	bf00      	nop
 8006174:	4b1e      	ldr	r3, [pc, #120]	; (80061f0 <rotate_R90+0x188>)
 8006176:	edd3 7a00 	vldr	s15, [r3]
 800617a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006214 <rotate_R90+0x1ac>
 800617e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006182:	4b1d      	ldr	r3, [pc, #116]	; (80061f8 <rotate_R90+0x190>)
 8006184:	edd3 7a00 	vldr	s15, [r3]
 8006188:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800618c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006190:	d4f0      	bmi.n	8006174 <rotate_R90+0x10c>

	if(!MF.FLAG.XDIR){
 8006192:	4b21      	ldr	r3, [pc, #132]	; (8006218 <rotate_R90+0x1b0>)
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d104      	bne.n	80061aa <rotate_R90+0x142>
		turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80061a0:	2101      	movs	r1, #1
 80061a2:	2001      	movs	r0, #1
 80061a4:	f009 fb6c 	bl	800f880 <turn_dir>
 80061a8:	e003      	b.n	80061b2 <rotate_R90+0x14a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80061aa:	2103      	movs	r1, #3
 80061ac:	2002      	movs	r0, #2
 80061ae:	f009 fb67 	bl	800f880 <turn_dir>
	}
	drive_stop();
 80061b2:	f7fe fdc1 	bl	8004d38 <drive_stop>
}
 80061b6:	bf00      	nop
 80061b8:	bd98      	pop	{r3, r4, r7, pc}
 80061ba:	bf00      	nop
 80061bc:	f3af 8000 	nop.w
 80061c0:	54442d18 	.word	0x54442d18
 80061c4:	400921fb 	.word	0x400921fb
 80061c8:	200001a8 	.word	0x200001a8
 80061cc:	44480000 	.word	0x44480000
 80061d0:	20000d58 	.word	0x20000d58
 80061d4:	453b8000 	.word	0x453b8000
 80061d8:	20000ae4 	.word	0x20000ae4
 80061dc:	c53b8000 	.word	0xc53b8000
 80061e0:	43340000 	.word	0x43340000
 80061e4:	40508000 	.word	0x40508000
 80061e8:	2000077c 	.word	0x2000077c
 80061ec:	20000f6c 	.word	0x20000f6c
 80061f0:	20000bf8 	.word	0x20000bf8
 80061f4:	42a00000 	.word	0x42a00000
 80061f8:	20000b5c 	.word	0x20000b5c
 80061fc:	c61c4000 	.word	0xc61c4000
 8006200:	461c4000 	.word	0x461c4000
 8006204:	20000b54 	.word	0x20000b54
 8006208:	42c80000 	.word	0x42c80000
 800620c:	200001a4 	.word	0x200001a4
 8006210:	c2c80000 	.word	0xc2c80000
 8006214:	42b40000 	.word	0x42b40000
 8006218:	20000f68 	.word	0x20000f68
 800621c:	00000000 	.word	0x00000000

08006220 <rotate_L90>:
//rotate_L90
// 左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 8006220:	b598      	push	{r3, r4, r7, lr}
 8006222:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 8006224:	4b56      	ldr	r3, [pc, #344]	; (8006380 <rotate_L90+0x160>)
 8006226:	4a57      	ldr	r2, [pc, #348]	; (8006384 <rotate_L90+0x164>)
 8006228:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 800622a:	4b57      	ldr	r3, [pc, #348]	; (8006388 <rotate_L90+0x168>)
 800622c:	4a57      	ldr	r2, [pc, #348]	; (800638c <rotate_L90+0x16c>)
 800622e:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8006230:	4b57      	ldr	r3, [pc, #348]	; (8006390 <rotate_L90+0x170>)
 8006232:	4a58      	ldr	r2, [pc, #352]	; (8006394 <rotate_L90+0x174>)
 8006234:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 8006236:	4b52      	ldr	r3, [pc, #328]	; (8006380 <rotate_L90+0x160>)
 8006238:	edd3 7a00 	vldr	s15, [r3]
 800623c:	eef1 7a67 	vneg.f32	s15, s15
 8006240:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006398 <rotate_L90+0x178>
 8006244:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006248:	ee16 0a90 	vmov	r0, s13
 800624c:	f7fa f974 	bl	8000538 <__aeabi_f2d>
 8006250:	a349      	add	r3, pc, #292	; (adr r3, 8006378 <rotate_L90+0x158>)
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	f7fa f9c7 	bl	80005e8 <__aeabi_dmul>
 800625a:	4603      	mov	r3, r0
 800625c:	460c      	mov	r4, r1
 800625e:	4618      	mov	r0, r3
 8006260:	4621      	mov	r1, r4
 8006262:	f04f 0200 	mov.w	r2, #0
 8006266:	4b4d      	ldr	r3, [pc, #308]	; (800639c <rotate_L90+0x17c>)
 8006268:	f7fa f9be 	bl	80005e8 <__aeabi_dmul>
 800626c:	4603      	mov	r3, r0
 800626e:	460c      	mov	r4, r1
 8006270:	4618      	mov	r0, r3
 8006272:	4621      	mov	r1, r4
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800627c:	f7fa fade 	bl	800083c <__aeabi_ddiv>
 8006280:	4603      	mov	r3, r0
 8006282:	460c      	mov	r4, r1
 8006284:	4618      	mov	r0, r3
 8006286:	4621      	mov	r1, r4
 8006288:	f7fa fc86 	bl	8000b98 <__aeabi_d2f>
 800628c:	4602      	mov	r2, r0
 800628e:	4b44      	ldr	r3, [pc, #272]	; (80063a0 <rotate_L90+0x180>)
 8006290:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 8006292:	4b3b      	ldr	r3, [pc, #236]	; (8006380 <rotate_L90+0x160>)
 8006294:	edd3 7a00 	vldr	s15, [r3]
 8006298:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006398 <rotate_L90+0x178>
 800629c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062a0:	ee16 0a90 	vmov	r0, s13
 80062a4:	f7fa f948 	bl	8000538 <__aeabi_f2d>
 80062a8:	a333      	add	r3, pc, #204	; (adr r3, 8006378 <rotate_L90+0x158>)
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	f7fa f99b 	bl	80005e8 <__aeabi_dmul>
 80062b2:	4603      	mov	r3, r0
 80062b4:	460c      	mov	r4, r1
 80062b6:	4618      	mov	r0, r3
 80062b8:	4621      	mov	r1, r4
 80062ba:	f04f 0200 	mov.w	r2, #0
 80062be:	4b37      	ldr	r3, [pc, #220]	; (800639c <rotate_L90+0x17c>)
 80062c0:	f7fa f992 	bl	80005e8 <__aeabi_dmul>
 80062c4:	4603      	mov	r3, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	4618      	mov	r0, r3
 80062ca:	4621      	mov	r1, r4
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062d4:	f7fa fab2 	bl	800083c <__aeabi_ddiv>
 80062d8:	4603      	mov	r3, r0
 80062da:	460c      	mov	r4, r1
 80062dc:	4618      	mov	r0, r3
 80062de:	4621      	mov	r1, r4
 80062e0:	f7fa fc5a 	bl	8000b98 <__aeabi_d2f>
 80062e4:	4602      	mov	r2, r0
 80062e6:	4b2f      	ldr	r3, [pc, #188]	; (80063a4 <rotate_L90+0x184>)
 80062e8:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80062ea:	f7fe fcf5 	bl	8004cd8 <drive_start>
	control_stop();
 80062ee:	f7fe fd5f 	bl	8004db0 <control_stop>
	while(degree_z < target_degree_z+80);
 80062f2:	bf00      	nop
 80062f4:	4b2c      	ldr	r3, [pc, #176]	; (80063a8 <rotate_L90+0x188>)
 80062f6:	edd3 7a00 	vldr	s15, [r3]
 80062fa:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80063ac <rotate_L90+0x18c>
 80062fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006302:	4b2b      	ldr	r3, [pc, #172]	; (80063b0 <rotate_L90+0x190>)
 8006304:	edd3 7a00 	vldr	s15, [r3]
 8006308:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800630c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006310:	dcf0      	bgt.n	80062f4 <rotate_L90+0xd4>

	accel_l = 10000;
 8006312:	4b1d      	ldr	r3, [pc, #116]	; (8006388 <rotate_L90+0x168>)
 8006314:	4a27      	ldr	r2, [pc, #156]	; (80063b4 <rotate_L90+0x194>)
 8006316:	601a      	str	r2, [r3, #0]
	accel_r = -10000;
 8006318:	4b1d      	ldr	r3, [pc, #116]	; (8006390 <rotate_L90+0x170>)
 800631a:	4a27      	ldr	r2, [pc, #156]	; (80063b8 <rotate_L90+0x198>)
 800631c:	601a      	str	r2, [r3, #0]
	speed_max_l = -100;
 800631e:	4b27      	ldr	r3, [pc, #156]	; (80063bc <rotate_L90+0x19c>)
 8006320:	4a27      	ldr	r2, [pc, #156]	; (80063c0 <rotate_L90+0x1a0>)
 8006322:	601a      	str	r2, [r3, #0]
	speed_min_r = 100;
 8006324:	4b27      	ldr	r3, [pc, #156]	; (80063c4 <rotate_L90+0x1a4>)
 8006326:	4a28      	ldr	r2, [pc, #160]	; (80063c8 <rotate_L90+0x1a8>)
 8006328:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 800632a:	bf00      	nop
 800632c:	4b1e      	ldr	r3, [pc, #120]	; (80063a8 <rotate_L90+0x188>)
 800632e:	edd3 7a00 	vldr	s15, [r3]
 8006332:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80063cc <rotate_L90+0x1ac>
 8006336:	ee37 7a87 	vadd.f32	s14, s15, s14
 800633a:	4b1d      	ldr	r3, [pc, #116]	; (80063b0 <rotate_L90+0x190>)
 800633c:	edd3 7a00 	vldr	s15, [r3]
 8006340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006348:	dcf0      	bgt.n	800632c <rotate_L90+0x10c>

	if(!MF.FLAG.XDIR){
 800634a:	4b21      	ldr	r3, [pc, #132]	; (80063d0 <rotate_L90+0x1b0>)
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	d104      	bne.n	8006362 <rotate_L90+0x142>
		turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 8006358:	2101      	movs	r1, #1
 800635a:	20ff      	movs	r0, #255	; 0xff
 800635c:	f009 fa90 	bl	800f880 <turn_dir>
 8006360:	e003      	b.n	800636a <rotate_L90+0x14a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 8006362:	2103      	movs	r1, #3
 8006364:	20fe      	movs	r0, #254	; 0xfe
 8006366:	f009 fa8b 	bl	800f880 <turn_dir>
	}
	drive_stop();
 800636a:	f7fe fce5 	bl	8004d38 <drive_stop>
}
 800636e:	bf00      	nop
 8006370:	bd98      	pop	{r3, r4, r7, pc}
 8006372:	bf00      	nop
 8006374:	f3af 8000 	nop.w
 8006378:	54442d18 	.word	0x54442d18
 800637c:	400921fb 	.word	0x400921fb
 8006380:	200001a8 	.word	0x200001a8
 8006384:	44480000 	.word	0x44480000
 8006388:	20000d58 	.word	0x20000d58
 800638c:	c53b8000 	.word	0xc53b8000
 8006390:	20000ae4 	.word	0x20000ae4
 8006394:	453b8000 	.word	0x453b8000
 8006398:	43340000 	.word	0x43340000
 800639c:	40508000 	.word	0x40508000
 80063a0:	20000b54 	.word	0x20000b54
 80063a4:	200001a4 	.word	0x200001a4
 80063a8:	20000bf8 	.word	0x20000bf8
 80063ac:	42a00000 	.word	0x42a00000
 80063b0:	20000b5c 	.word	0x20000b5c
 80063b4:	461c4000 	.word	0x461c4000
 80063b8:	c61c4000 	.word	0xc61c4000
 80063bc:	2000077c 	.word	0x2000077c
 80063c0:	c2c80000 	.word	0xc2c80000
 80063c4:	20000f6c 	.word	0x20000f6c
 80063c8:	42c80000 	.word	0x42c80000
 80063cc:	42b40000 	.word	0x42b40000
 80063d0:	20000f68 	.word	0x20000f68
 80063d4:	00000000 	.word	0x00000000

080063d8 <rotate_180>:
//rotate_180
// 180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 80063d8:	b598      	push	{r3, r4, r7, lr}
 80063da:	af00      	add	r7, sp, #0

	full_led_write(GREEN);
 80063dc:	2002      	movs	r0, #2
 80063de:	f00b f8d9 	bl	8011594 <full_led_write>
	target_omega_z = 800;
 80063e2:	4b55      	ldr	r3, [pc, #340]	; (8006538 <rotate_180+0x160>)
 80063e4:	4a55      	ldr	r2, [pc, #340]	; (800653c <rotate_180+0x164>)
 80063e6:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 80063e8:	4b55      	ldr	r3, [pc, #340]	; (8006540 <rotate_180+0x168>)
 80063ea:	4a56      	ldr	r2, [pc, #344]	; (8006544 <rotate_180+0x16c>)
 80063ec:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 80063ee:	4b56      	ldr	r3, [pc, #344]	; (8006548 <rotate_180+0x170>)
 80063f0:	4a56      	ldr	r2, [pc, #344]	; (800654c <rotate_180+0x174>)
 80063f2:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 80063f4:	4b50      	ldr	r3, [pc, #320]	; (8006538 <rotate_180+0x160>)
 80063f6:	edd3 7a00 	vldr	s15, [r3]
 80063fa:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006550 <rotate_180+0x178>
 80063fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006402:	ee16 0a90 	vmov	r0, s13
 8006406:	f7fa f897 	bl	8000538 <__aeabi_f2d>
 800640a:	a349      	add	r3, pc, #292	; (adr r3, 8006530 <rotate_180+0x158>)
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	f7fa f8ea 	bl	80005e8 <__aeabi_dmul>
 8006414:	4603      	mov	r3, r0
 8006416:	460c      	mov	r4, r1
 8006418:	4618      	mov	r0, r3
 800641a:	4621      	mov	r1, r4
 800641c:	f04f 0200 	mov.w	r2, #0
 8006420:	4b4c      	ldr	r3, [pc, #304]	; (8006554 <rotate_180+0x17c>)
 8006422:	f7fa f8e1 	bl	80005e8 <__aeabi_dmul>
 8006426:	4603      	mov	r3, r0
 8006428:	460c      	mov	r4, r1
 800642a:	4618      	mov	r0, r3
 800642c:	4621      	mov	r1, r4
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006436:	f7fa fa01 	bl	800083c <__aeabi_ddiv>
 800643a:	4603      	mov	r3, r0
 800643c:	460c      	mov	r4, r1
 800643e:	4618      	mov	r0, r3
 8006440:	4621      	mov	r1, r4
 8006442:	f7fa fba9 	bl	8000b98 <__aeabi_d2f>
 8006446:	4602      	mov	r2, r0
 8006448:	4b43      	ldr	r3, [pc, #268]	; (8006558 <rotate_180+0x180>)
 800644a:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 800644c:	4b3a      	ldr	r3, [pc, #232]	; (8006538 <rotate_180+0x160>)
 800644e:	edd3 7a00 	vldr	s15, [r3]
 8006452:	eef1 7a67 	vneg.f32	s15, s15
 8006456:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8006550 <rotate_180+0x178>
 800645a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800645e:	ee16 0a90 	vmov	r0, s13
 8006462:	f7fa f869 	bl	8000538 <__aeabi_f2d>
 8006466:	a332      	add	r3, pc, #200	; (adr r3, 8006530 <rotate_180+0x158>)
 8006468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646c:	f7fa f8bc 	bl	80005e8 <__aeabi_dmul>
 8006470:	4603      	mov	r3, r0
 8006472:	460c      	mov	r4, r1
 8006474:	4618      	mov	r0, r3
 8006476:	4621      	mov	r1, r4
 8006478:	f04f 0200 	mov.w	r2, #0
 800647c:	4b35      	ldr	r3, [pc, #212]	; (8006554 <rotate_180+0x17c>)
 800647e:	f7fa f8b3 	bl	80005e8 <__aeabi_dmul>
 8006482:	4603      	mov	r3, r0
 8006484:	460c      	mov	r4, r1
 8006486:	4618      	mov	r0, r3
 8006488:	4621      	mov	r1, r4
 800648a:	f04f 0200 	mov.w	r2, #0
 800648e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006492:	f7fa f9d3 	bl	800083c <__aeabi_ddiv>
 8006496:	4603      	mov	r3, r0
 8006498:	460c      	mov	r4, r1
 800649a:	4618      	mov	r0, r3
 800649c:	4621      	mov	r1, r4
 800649e:	f7fa fb7b 	bl	8000b98 <__aeabi_d2f>
 80064a2:	4602      	mov	r2, r0
 80064a4:	4b2d      	ldr	r3, [pc, #180]	; (800655c <rotate_180+0x184>)
 80064a6:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80064a8:	f7fe fc16 	bl	8004cd8 <drive_start>
	control_stop();
 80064ac:	f7fe fc80 	bl	8004db0 <control_stop>
	while(degree_z > target_degree_z-160);
 80064b0:	bf00      	nop
 80064b2:	4b2b      	ldr	r3, [pc, #172]	; (8006560 <rotate_180+0x188>)
 80064b4:	edd3 7a00 	vldr	s15, [r3]
 80064b8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006564 <rotate_180+0x18c>
 80064bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80064c0:	4b29      	ldr	r3, [pc, #164]	; (8006568 <rotate_180+0x190>)
 80064c2:	edd3 7a00 	vldr	s15, [r3]
 80064c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ce:	d4f0      	bmi.n	80064b2 <rotate_180+0xda>

	accel_l = -10000;
 80064d0:	4b1b      	ldr	r3, [pc, #108]	; (8006540 <rotate_180+0x168>)
 80064d2:	4a26      	ldr	r2, [pc, #152]	; (800656c <rotate_180+0x194>)
 80064d4:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80064d6:	4b1c      	ldr	r3, [pc, #112]	; (8006548 <rotate_180+0x170>)
 80064d8:	4a25      	ldr	r2, [pc, #148]	; (8006570 <rotate_180+0x198>)
 80064da:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 80064dc:	4b25      	ldr	r3, [pc, #148]	; (8006574 <rotate_180+0x19c>)
 80064de:	4a26      	ldr	r2, [pc, #152]	; (8006578 <rotate_180+0x1a0>)
 80064e0:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 80064e2:	4b26      	ldr	r3, [pc, #152]	; (800657c <rotate_180+0x1a4>)
 80064e4:	4a26      	ldr	r2, [pc, #152]	; (8006580 <rotate_180+0x1a8>)
 80064e6:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 80064e8:	bf00      	nop
 80064ea:	4b1d      	ldr	r3, [pc, #116]	; (8006560 <rotate_180+0x188>)
 80064ec:	edd3 7a00 	vldr	s15, [r3]
 80064f0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006550 <rotate_180+0x178>
 80064f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80064f8:	4b1b      	ldr	r3, [pc, #108]	; (8006568 <rotate_180+0x190>)
 80064fa:	edd3 7a00 	vldr	s15, [r3]
 80064fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006506:	d4f0      	bmi.n	80064ea <rotate_180+0x112>

	if(!MF.FLAG.XDIR){
 8006508:	4b1e      	ldr	r3, [pc, #120]	; (8006584 <rotate_180+0x1ac>)
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <rotate_180+0x148>
		turn_dir(DIR_TURN_180, 1);										//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 8006516:	2101      	movs	r1, #1
 8006518:	2002      	movs	r0, #2
 800651a:	f009 f9b1 	bl	800f880 <turn_dir>
 800651e:	e003      	b.n	8006528 <rotate_180+0x150>
	}else{
		turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 8006520:	2103      	movs	r1, #3
 8006522:	2004      	movs	r0, #4
 8006524:	f009 f9ac 	bl	800f880 <turn_dir>
	}
	drive_stop();
 8006528:	f7fe fc06 	bl	8004d38 <drive_stop>

}
 800652c:	bf00      	nop
 800652e:	bd98      	pop	{r3, r4, r7, pc}
 8006530:	54442d18 	.word	0x54442d18
 8006534:	400921fb 	.word	0x400921fb
 8006538:	200001a8 	.word	0x200001a8
 800653c:	44480000 	.word	0x44480000
 8006540:	20000d58 	.word	0x20000d58
 8006544:	453b8000 	.word	0x453b8000
 8006548:	20000ae4 	.word	0x20000ae4
 800654c:	c53b8000 	.word	0xc53b8000
 8006550:	43340000 	.word	0x43340000
 8006554:	40508000 	.word	0x40508000
 8006558:	2000077c 	.word	0x2000077c
 800655c:	20000f6c 	.word	0x20000f6c
 8006560:	20000bf8 	.word	0x20000bf8
 8006564:	43200000 	.word	0x43200000
 8006568:	20000b5c 	.word	0x20000b5c
 800656c:	c61c4000 	.word	0xc61c4000
 8006570:	461c4000 	.word	0x461c4000
 8006574:	20000b54 	.word	0x20000b54
 8006578:	42c80000 	.word	0x42c80000
 800657c:	200001a4 	.word	0x200001a4
 8006580:	c2c80000 	.word	0xc2c80000
 8006584:	20000f68 	.word	0x20000f68

08006588 <slalom_R90>:
//slalom_R90
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 800658e:	2005      	movs	r0, #5
 8006590:	f00b f800 	bl	8011594 <full_led_write>
	if(run_mode == LOW){
 8006594:	4b7d      	ldr	r3, [pc, #500]	; (800678c <slalom_R90+0x204>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b01      	cmp	r3, #1
 800659c:	d12a      	bne.n	80065f4 <slalom_R90+0x6c>
		slalomF(10000, SPEED_LOW, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 800659e:	23fa      	movs	r3, #250	; 0xfa
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80065a6:	2212      	movs	r2, #18
 80065a8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80065ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80065b0:	f7fe ff5e 	bl	8005470 <slalomF>
		slalomR(-SLALOM_DEGACCEL, -SLALOM_OMEGA, -90, SPEED_LOW);
 80065b4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80065b8:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80065bc:	4974      	ldr	r1, [pc, #464]	; (8006790 <slalom_R90+0x208>)
 80065be:	4875      	ldr	r0, [pc, #468]	; (8006794 <slalom_R90+0x20c>)
 80065c0:	f7fe ffd2 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 80065c4:	4b74      	ldr	r3, [pc, #464]	; (8006798 <slalom_R90+0x210>)
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d104      	bne.n	80065dc <slalom_R90+0x54>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80065d2:	2101      	movs	r1, #1
 80065d4:	2001      	movs	r0, #1
 80065d6:	f009 f953 	bl	800f880 <turn_dir>
 80065da:	e003      	b.n	80065e4 <slalom_R90+0x5c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80065dc:	2103      	movs	r1, #3
 80065de:	2002      	movs	r0, #2
 80065e0:	f009 f94e 	bl	800f880 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, SLALOM_OFFSET_B);
 80065e4:	2219      	movs	r2, #25
 80065e6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80065ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80065ee:	f7ff f8df 	bl	80057b0 <slalomB>
 80065f2:	e0bf      	b.n	8006774 <slalom_R90+0x1ec>
	}else if(run_mode == MIDDLE){
 80065f4:	4b65      	ldr	r3, [pc, #404]	; (800678c <slalom_R90+0x204>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d12a      	bne.n	8006654 <slalom_R90+0xcc>
		slalomF(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_F, SLALOM_2_WALL_FL, SLALOM_2_WALL_FR);
 80065fe:	23f0      	movs	r3, #240	; 0xf0
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006606:	2219      	movs	r2, #25
 8006608:	f44f 7116 	mov.w	r1, #600	; 0x258
 800660c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006610:	f7fe ff2e 	bl	8005470 <slalomF>
		slalomR(-SLALOM_2_DEGACCEL, -SLALOM_2_OMEGA, -85, SPEED_MIDDLE);
 8006614:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006618:	f06f 0254 	mvn.w	r2, #84	; 0x54
 800661c:	495f      	ldr	r1, [pc, #380]	; (800679c <slalom_R90+0x214>)
 800661e:	4860      	ldr	r0, [pc, #384]	; (80067a0 <slalom_R90+0x218>)
 8006620:	f7fe ffa2 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006624:	4b5c      	ldr	r3, [pc, #368]	; (8006798 <slalom_R90+0x210>)
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d104      	bne.n	800663c <slalom_R90+0xb4>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006632:	2101      	movs	r1, #1
 8006634:	2001      	movs	r0, #1
 8006636:	f009 f923 	bl	800f880 <turn_dir>
 800663a:	e003      	b.n	8006644 <slalom_R90+0xbc>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800663c:	2103      	movs	r1, #3
 800663e:	2002      	movs	r0, #2
 8006640:	f009 f91e 	bl	800f880 <turn_dir>
		}
		slalomB(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_B);
 8006644:	223c      	movs	r2, #60	; 0x3c
 8006646:	f44f 7116 	mov.w	r1, #600	; 0x258
 800664a:	f242 7010 	movw	r0, #10000	; 0x2710
 800664e:	f7ff f8af 	bl	80057b0 <slalomB>
 8006652:	e08f      	b.n	8006774 <slalom_R90+0x1ec>
	}else if(run_mode == HIGH){
 8006654:	4b4d      	ldr	r3, [pc, #308]	; (800678c <slalom_R90+0x204>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b03      	cmp	r3, #3
 800665c:	d12a      	bne.n	80066b4 <slalom_R90+0x12c>
		slalomF(10000, SPEED_HIGH, SLALOM_3_OFFSET_F, SLALOM_3_WALL_FL, SLALOM_3_WALL_FR);
 800665e:	23b4      	movs	r3, #180	; 0xb4
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8006666:	2216      	movs	r2, #22
 8006668:	f44f 7148 	mov.w	r1, #800	; 0x320
 800666c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006670:	f7fe fefe 	bl	8005470 <slalomF>
		slalomR(-SLALOM_3_DEGACCEL, -SLALOM_3_OMEGA, -70, SPEED_HIGH);
 8006674:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006678:	f06f 0245 	mvn.w	r2, #69	; 0x45
 800667c:	4949      	ldr	r1, [pc, #292]	; (80067a4 <slalom_R90+0x21c>)
 800667e:	484a      	ldr	r0, [pc, #296]	; (80067a8 <slalom_R90+0x220>)
 8006680:	f7fe ff72 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006684:	4b44      	ldr	r3, [pc, #272]	; (8006798 <slalom_R90+0x210>)
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d104      	bne.n	800669c <slalom_R90+0x114>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006692:	2101      	movs	r1, #1
 8006694:	2001      	movs	r0, #1
 8006696:	f009 f8f3 	bl	800f880 <turn_dir>
 800669a:	e003      	b.n	80066a4 <slalom_R90+0x11c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800669c:	2103      	movs	r1, #3
 800669e:	2002      	movs	r0, #2
 80066a0:	f009 f8ee 	bl	800f880 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH, SLALOM_3_OFFSET_B);
 80066a4:	225a      	movs	r2, #90	; 0x5a
 80066a6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80066aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80066ae:	f7ff f87f 	bl	80057b0 <slalomB>
 80066b2:	e05f      	b.n	8006774 <slalom_R90+0x1ec>
	}else if(run_mode == HIGH_HIGH){
 80066b4:	4b35      	ldr	r3, [pc, #212]	; (800678c <slalom_R90+0x204>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d12a      	bne.n	8006714 <slalom_R90+0x18c>
		slalomF(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_F, SLALOM_4_WALL_FL, SLALOM_4_WALL_FR);
 80066be:	23b4      	movs	r3, #180	; 0xb4
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80066c6:	220d      	movs	r2, #13
 80066c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80066cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80066d0:	f7fe fece 	bl	8005470 <slalomF>
		slalomR(-SLALOM_4_DEGACCEL, -SLALOM_4_OMEGA, -50, SPEED_HIGH_HIGH);
 80066d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066d8:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80066dc:	4931      	ldr	r1, [pc, #196]	; (80067a4 <slalom_R90+0x21c>)
 80066de:	4833      	ldr	r0, [pc, #204]	; (80067ac <slalom_R90+0x224>)
 80066e0:	f7fe ff42 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 80066e4:	4b2c      	ldr	r3, [pc, #176]	; (8006798 <slalom_R90+0x210>)
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d104      	bne.n	80066fc <slalom_R90+0x174>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80066f2:	2101      	movs	r1, #1
 80066f4:	2001      	movs	r0, #1
 80066f6:	f009 f8c3 	bl	800f880 <turn_dir>
 80066fa:	e003      	b.n	8006704 <slalom_R90+0x17c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80066fc:	2103      	movs	r1, #3
 80066fe:	2002      	movs	r0, #2
 8006700:	f009 f8be 	bl	800f880 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_B);
 8006704:	2273      	movs	r2, #115	; 0x73
 8006706:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800670a:	f242 7010 	movw	r0, #10000	; 0x2710
 800670e:	f7ff f84f 	bl	80057b0 <slalomB>
 8006712:	e02f      	b.n	8006774 <slalom_R90+0x1ec>
	}else if(run_mode == 5){
 8006714:	4b1d      	ldr	r3, [pc, #116]	; (800678c <slalom_R90+0x204>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b05      	cmp	r3, #5
 800671c:	d12a      	bne.n	8006774 <slalom_R90+0x1ec>
		slalomF(10000, SPEED_5, SLALOM_5_OFFSET_F, SLALOM_5_WALL_FL, SLALOM_5_WALL_FR);
 800671e:	23b4      	movs	r3, #180	; 0xb4
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8006726:	2217      	movs	r2, #23
 8006728:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800672c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006730:	f7fe fe9e 	bl	8005470 <slalomF>
		slalomR(-SLALOM_5_DEGACCEL, -SLALOM_5_OMEGA, -50, SPEED_5);
 8006734:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006738:	f06f 0231 	mvn.w	r2, #49	; 0x31
 800673c:	491c      	ldr	r1, [pc, #112]	; (80067b0 <slalom_R90+0x228>)
 800673e:	f246 30c0 	movw	r0, #25536	; 0x63c0
 8006742:	f7fe ff11 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006746:	4b14      	ldr	r3, [pc, #80]	; (8006798 <slalom_R90+0x210>)
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d104      	bne.n	800675e <slalom_R90+0x1d6>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006754:	2101      	movs	r1, #1
 8006756:	2001      	movs	r0, #1
 8006758:	f009 f892 	bl	800f880 <turn_dir>
 800675c:	e003      	b.n	8006766 <slalom_R90+0x1de>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800675e:	2103      	movs	r1, #3
 8006760:	2002      	movs	r0, #2
 8006762:	f009 f88d 	bl	800f880 <turn_dir>
		}
		slalomB(10000, SPEED_5, SLALOM_5_OFFSET_B);
 8006766:	2217      	movs	r2, #23
 8006768:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800676c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006770:	f7ff f81e 	bl	80057b0 <slalomB>
	}
	if(!MF.FLAG.SCND)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006774:	4b08      	ldr	r3, [pc, #32]	; (8006798 <slalom_R90+0x210>)
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <slalom_R90+0x1fe>
 8006782:	f00a fe93 	bl	80114ac <get_wall_info>
}
 8006786:	bf00      	nop
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	20000456 	.word	0x20000456
 8006790:	fffffdda 	.word	0xfffffdda
 8006794:	fffff060 	.word	0xfffff060
 8006798:	20000f68 	.word	0x20000f68
 800679c:	fffffc7c 	.word	0xfffffc7c
 80067a0:	ffffd120 	.word	0xffffd120
 80067a4:	fffffb50 	.word	0xfffffb50
 80067a8:	ffffa240 	.word	0xffffa240
 80067ac:	ffff8300 	.word	0xffff8300
 80067b0:	fffff8f8 	.word	0xfffff8f8

080067b4 <slalom_L90>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80067ba:	2006      	movs	r0, #6
 80067bc:	f00a feea 	bl	8011594 <full_led_write>
	if(run_mode == LOW){
 80067c0:	4b7f      	ldr	r3, [pc, #508]	; (80069c0 <slalom_L90+0x20c>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d12b      	bne.n	8006822 <slalom_L90+0x6e>
		slalomF(10000, SPEED_LOW, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 80067ca:	23fa      	movs	r3, #250	; 0xfa
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80067d2:	2212      	movs	r2, #18
 80067d4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80067d8:	f242 7010 	movw	r0, #10000	; 0x2710
 80067dc:	f7fe fe48 	bl	8005470 <slalomF>
		slalomR(SLALOM_DEGACCEL, SLALOM_OMEGA, 90, SPEED_LOW);
 80067e0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80067e4:	225a      	movs	r2, #90	; 0x5a
 80067e6:	f240 2126 	movw	r1, #550	; 0x226
 80067ea:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80067ee:	f7fe febb 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 80067f2:	4b74      	ldr	r3, [pc, #464]	; (80069c4 <slalom_L90+0x210>)
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <slalom_L90+0x56>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006800:	2101      	movs	r1, #1
 8006802:	20ff      	movs	r0, #255	; 0xff
 8006804:	f009 f83c 	bl	800f880 <turn_dir>
 8006808:	e003      	b.n	8006812 <slalom_L90+0x5e>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800680a:	2103      	movs	r1, #3
 800680c:	20fe      	movs	r0, #254	; 0xfe
 800680e:	f009 f837 	bl	800f880 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, SLALOM_OFFSET_B);
 8006812:	2219      	movs	r2, #25
 8006814:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006818:	f242 7010 	movw	r0, #10000	; 0x2710
 800681c:	f7fe ffc8 	bl	80057b0 <slalomB>
 8006820:	e0c1      	b.n	80069a6 <slalom_L90+0x1f2>
	}else if(run_mode == MIDDLE){
 8006822:	4b67      	ldr	r3, [pc, #412]	; (80069c0 <slalom_L90+0x20c>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b02      	cmp	r3, #2
 800682a:	d12b      	bne.n	8006884 <slalom_L90+0xd0>
		slalomF(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_F, SLALOM_2_WALL_FL, SLALOM_2_WALL_FR);
 800682c:	23f0      	movs	r3, #240	; 0xf0
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006834:	2219      	movs	r2, #25
 8006836:	f44f 7116 	mov.w	r1, #600	; 0x258
 800683a:	f242 7010 	movw	r0, #10000	; 0x2710
 800683e:	f7fe fe17 	bl	8005470 <slalomF>
		slalomR(SLALOM_2_DEGACCEL, SLALOM_2_OMEGA, 85, SPEED_MIDDLE);
 8006842:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006846:	2255      	movs	r2, #85	; 0x55
 8006848:	f44f 7161 	mov.w	r1, #900	; 0x384
 800684c:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8006850:	f7fe fe8a 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006854:	4b5b      	ldr	r3, [pc, #364]	; (80069c4 <slalom_L90+0x210>)
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d104      	bne.n	800686c <slalom_L90+0xb8>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006862:	2101      	movs	r1, #1
 8006864:	20ff      	movs	r0, #255	; 0xff
 8006866:	f009 f80b 	bl	800f880 <turn_dir>
 800686a:	e003      	b.n	8006874 <slalom_L90+0xc0>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800686c:	2103      	movs	r1, #3
 800686e:	20fe      	movs	r0, #254	; 0xfe
 8006870:	f009 f806 	bl	800f880 <turn_dir>
		}
		slalomB(10000, SPEED_MIDDLE, SLALOM_2_OFFSET_B);
 8006874:	223c      	movs	r2, #60	; 0x3c
 8006876:	f44f 7116 	mov.w	r1, #600	; 0x258
 800687a:	f242 7010 	movw	r0, #10000	; 0x2710
 800687e:	f7fe ff97 	bl	80057b0 <slalomB>
 8006882:	e090      	b.n	80069a6 <slalom_L90+0x1f2>
	}else if(run_mode == HIGH){
 8006884:	4b4e      	ldr	r3, [pc, #312]	; (80069c0 <slalom_L90+0x20c>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b03      	cmp	r3, #3
 800688c:	d12b      	bne.n	80068e6 <slalom_L90+0x132>
		slalomF(10000, SPEED_HIGH, SLALOM_3_OFFSET_F, SLALOM_3_WALL_FL, SLALOM_3_WALL_FR);
 800688e:	23b4      	movs	r3, #180	; 0xb4
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8006896:	2216      	movs	r2, #22
 8006898:	f44f 7148 	mov.w	r1, #800	; 0x320
 800689c:	f242 7010 	movw	r0, #10000	; 0x2710
 80068a0:	f7fe fde6 	bl	8005470 <slalomF>
		slalomR(SLALOM_3_DEGACCEL, SLALOM_3_OMEGA, 70, SPEED_HIGH);
 80068a4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80068a8:	2246      	movs	r2, #70	; 0x46
 80068aa:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80068ae:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 80068b2:	f7fe fe59 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 80068b6:	4b43      	ldr	r3, [pc, #268]	; (80069c4 <slalom_L90+0x210>)
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d104      	bne.n	80068ce <slalom_L90+0x11a>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80068c4:	2101      	movs	r1, #1
 80068c6:	20ff      	movs	r0, #255	; 0xff
 80068c8:	f008 ffda 	bl	800f880 <turn_dir>
 80068cc:	e003      	b.n	80068d6 <slalom_L90+0x122>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80068ce:	2103      	movs	r1, #3
 80068d0:	20fe      	movs	r0, #254	; 0xfe
 80068d2:	f008 ffd5 	bl	800f880 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH, SLALOM_3_OFFSET_B);
 80068d6:	225a      	movs	r2, #90	; 0x5a
 80068d8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80068dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80068e0:	f7fe ff66 	bl	80057b0 <slalomB>
 80068e4:	e05f      	b.n	80069a6 <slalom_L90+0x1f2>
	}else if(run_mode == HIGH_HIGH){
 80068e6:	4b36      	ldr	r3, [pc, #216]	; (80069c0 <slalom_L90+0x20c>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d12b      	bne.n	8006948 <slalom_L90+0x194>
		slalomF(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_F, SLALOM_4_WALL_FL, SLALOM_4_WALL_FR);
 80068f0:	23b4      	movs	r3, #180	; 0xb4
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80068f8:	220d      	movs	r2, #13
 80068fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80068fe:	f242 7010 	movw	r0, #10000	; 0x2710
 8006902:	f7fe fdb5 	bl	8005470 <slalomF>
		slalomR(SLALOM_4_DEGACCEL, SLALOM_4_OMEGA, 50, SPEED_HIGH_HIGH);
 8006906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800690a:	2232      	movs	r2, #50	; 0x32
 800690c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006910:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8006914:	f7fe fe28 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006918:	4b2a      	ldr	r3, [pc, #168]	; (80069c4 <slalom_L90+0x210>)
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d104      	bne.n	8006930 <slalom_L90+0x17c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006926:	2101      	movs	r1, #1
 8006928:	20ff      	movs	r0, #255	; 0xff
 800692a:	f008 ffa9 	bl	800f880 <turn_dir>
 800692e:	e003      	b.n	8006938 <slalom_L90+0x184>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006930:	2103      	movs	r1, #3
 8006932:	20fe      	movs	r0, #254	; 0xfe
 8006934:	f008 ffa4 	bl	800f880 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH_HIGH, SLALOM_4_OFFSET_B);
 8006938:	2273      	movs	r2, #115	; 0x73
 800693a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800693e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006942:	f7fe ff35 	bl	80057b0 <slalomB>
 8006946:	e02e      	b.n	80069a6 <slalom_L90+0x1f2>
	}else if(run_mode == 5){
 8006948:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <slalom_L90+0x20c>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b05      	cmp	r3, #5
 8006950:	d129      	bne.n	80069a6 <slalom_L90+0x1f2>
		slalomF(10000, SPEED_5, SLALOM_5_OFFSET_F, SLALOM_5_WALL_FL, SLALOM_5_WALL_FR);
 8006952:	23b4      	movs	r3, #180	; 0xb4
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800695a:	2217      	movs	r2, #23
 800695c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006960:	f242 7010 	movw	r0, #10000	; 0x2710
 8006964:	f7fe fd84 	bl	8005470 <slalomF>
		slalomR(SLALOM_5_DEGACCEL, SLALOM_5_OMEGA, 50, SPEED_5);
 8006968:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800696c:	2232      	movs	r2, #50	; 0x32
 800696e:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8006972:	4815      	ldr	r0, [pc, #84]	; (80069c8 <slalom_L90+0x214>)
 8006974:	f7fe fdf8 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006978:	4b12      	ldr	r3, [pc, #72]	; (80069c4 <slalom_L90+0x210>)
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d104      	bne.n	8006990 <slalom_L90+0x1dc>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006986:	2101      	movs	r1, #1
 8006988:	20ff      	movs	r0, #255	; 0xff
 800698a:	f008 ff79 	bl	800f880 <turn_dir>
 800698e:	e003      	b.n	8006998 <slalom_L90+0x1e4>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006990:	2103      	movs	r1, #3
 8006992:	20fe      	movs	r0, #254	; 0xfe
 8006994:	f008 ff74 	bl	800f880 <turn_dir>
		}
		slalomB(10000, SPEED_5, SLALOM_5_OFFSET_B);
 8006998:	2217      	movs	r2, #23
 800699a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800699e:	f242 7010 	movw	r0, #10000	; 0x2710
 80069a2:	f7fe ff05 	bl	80057b0 <slalomB>
	}
	if(!MF.FLAG.SCND)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 80069a6:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <slalom_L90+0x210>)
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <slalom_L90+0x204>
 80069b4:	f00a fd7a 	bl	80114ac <get_wall_info>
}
 80069b8:	bf00      	nop
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000456 	.word	0x20000456
 80069c4:	20000f68 	.word	0x20000f68
 80069c8:	ffff9c40 	.word	0xffff9c40

080069cc <Lslalom_R90>:
//Lslalom_R90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R90(void){
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 80069d2:	2005      	movs	r0, #5
 80069d4:	f00a fdde 	bl	8011594 <full_led_write>
	if(run_mode == LOW){
 80069d8:	4b76      	ldr	r3, [pc, #472]	; (8006bb4 <Lslalom_R90+0x1e8>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d12a      	bne.n	8006a38 <Lslalom_R90+0x6c>
		slalomF(10000, SPEED_LOW, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 80069e2:	2364      	movs	r3, #100	; 0x64
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	23c8      	movs	r3, #200	; 0xc8
 80069e8:	222d      	movs	r2, #45	; 0x2d
 80069ea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80069ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80069f2:	f7fe fd3d 	bl	8005470 <slalomF>
		slalomR(-LSLALOM_DEGACCEL, -LSLALOM_OMEGA, -90, SPEED_LOW);
 80069f6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80069fa:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80069fe:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8006a02:	486d      	ldr	r0, [pc, #436]	; (8006bb8 <Lslalom_R90+0x1ec>)
 8006a04:	f7fe fdb0 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006a08:	4b6c      	ldr	r3, [pc, #432]	; (8006bbc <Lslalom_R90+0x1f0>)
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d104      	bne.n	8006a20 <Lslalom_R90+0x54>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006a16:	2101      	movs	r1, #1
 8006a18:	2001      	movs	r0, #1
 8006a1a:	f008 ff31 	bl	800f880 <turn_dir>
 8006a1e:	e003      	b.n	8006a28 <Lslalom_R90+0x5c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006a20:	2103      	movs	r1, #3
 8006a22:	2002      	movs	r0, #2
 8006a24:	f008 ff2c 	bl	800f880 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LSLALOM_OFFSET_B);
 8006a28:	2235      	movs	r2, #53	; 0x35
 8006a2a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006a2e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a32:	f7fe febd 	bl	80057b0 <slalomB>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_5, LSLALOM_5_OFFSET_B);
	}
}
 8006a36:	e0ba      	b.n	8006bae <Lslalom_R90+0x1e2>
	}else if(run_mode == MIDDLE){
 8006a38:	4b5e      	ldr	r3, [pc, #376]	; (8006bb4 <Lslalom_R90+0x1e8>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d129      	bne.n	8006a96 <Lslalom_R90+0xca>
		slalomF(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_F, LSLALOM_2_WALL_FL, LSLALOM_2_WALL_FR);
 8006a42:	2378      	movs	r3, #120	; 0x78
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	23f0      	movs	r3, #240	; 0xf0
 8006a48:	223c      	movs	r2, #60	; 0x3c
 8006a4a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006a4e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a52:	f7fe fd0d 	bl	8005470 <slalomF>
		slalomR(-LSLALOM_2_DEGACCEL, -LSLALOM_2_OMEGA, -90, SPEED_MIDDLE);
 8006a56:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006a5a:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006a5e:	4958      	ldr	r1, [pc, #352]	; (8006bc0 <Lslalom_R90+0x1f4>)
 8006a60:	4858      	ldr	r0, [pc, #352]	; (8006bc4 <Lslalom_R90+0x1f8>)
 8006a62:	f7fe fd81 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006a66:	4b55      	ldr	r3, [pc, #340]	; (8006bbc <Lslalom_R90+0x1f0>)
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d104      	bne.n	8006a7e <Lslalom_R90+0xb2>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006a74:	2101      	movs	r1, #1
 8006a76:	2001      	movs	r0, #1
 8006a78:	f008 ff02 	bl	800f880 <turn_dir>
 8006a7c:	e003      	b.n	8006a86 <Lslalom_R90+0xba>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006a7e:	2103      	movs	r1, #3
 8006a80:	2002      	movs	r0, #2
 8006a82:	f008 fefd 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_B);
 8006a86:	2258      	movs	r2, #88	; 0x58
 8006a88:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006a8c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a90:	f7fe fe8e 	bl	80057b0 <slalomB>
}
 8006a94:	e08b      	b.n	8006bae <Lslalom_R90+0x1e2>
	}else if(run_mode == HIGH){
 8006a96:	4b47      	ldr	r3, [pc, #284]	; (8006bb4 <Lslalom_R90+0x1e8>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d129      	bne.n	8006af4 <Lslalom_R90+0x128>
		slalomF(10000, SPEED_HIGH, LSLALOM_3_OFFSET_F, LSLALOM_3_WALL_FL, LSLALOM_3_WALL_FR);
 8006aa0:	2364      	movs	r3, #100	; 0x64
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	23c8      	movs	r3, #200	; 0xc8
 8006aa6:	222d      	movs	r2, #45	; 0x2d
 8006aa8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006aac:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ab0:	f7fe fcde 	bl	8005470 <slalomF>
		slalomR(-LSLALOM_3_DEGACCEL, -LSLALOM_3_OMEGA, -90, SPEED_HIGH);
 8006ab4:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006ab8:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006abc:	4942      	ldr	r1, [pc, #264]	; (8006bc8 <Lslalom_R90+0x1fc>)
 8006abe:	4843      	ldr	r0, [pc, #268]	; (8006bcc <Lslalom_R90+0x200>)
 8006ac0:	f7fe fd52 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006ac4:	4b3d      	ldr	r3, [pc, #244]	; (8006bbc <Lslalom_R90+0x1f0>)
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d104      	bne.n	8006adc <Lslalom_R90+0x110>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	2001      	movs	r0, #1
 8006ad6:	f008 fed3 	bl	800f880 <turn_dir>
 8006ada:	e003      	b.n	8006ae4 <Lslalom_R90+0x118>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006adc:	2103      	movs	r1, #3
 8006ade:	2002      	movs	r0, #2
 8006ae0:	f008 fece 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_HIGH, LSLALOM_3_OFFSET_B);
 8006ae4:	2258      	movs	r2, #88	; 0x58
 8006ae6:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006aea:	f242 7010 	movw	r0, #10000	; 0x2710
 8006aee:	f7fe fe5f 	bl	80057b0 <slalomB>
}
 8006af2:	e05c      	b.n	8006bae <Lslalom_R90+0x1e2>
	}else if(run_mode == HIGH_HIGH){
 8006af4:	4b2f      	ldr	r3, [pc, #188]	; (8006bb4 <Lslalom_R90+0x1e8>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d129      	bne.n	8006b52 <Lslalom_R90+0x186>
		slalomF(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_F, LSLALOM_4_WALL_FL, LSLALOM_4_WALL_FR);
 8006afe:	2364      	movs	r3, #100	; 0x64
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	23c8      	movs	r3, #200	; 0xc8
 8006b04:	2232      	movs	r2, #50	; 0x32
 8006b06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b0a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b0e:	f7fe fcaf 	bl	8005470 <slalomF>
		slalomR(-LSLALOM_4_DEGACCEL, -LSLALOM_4_OMEGA, -85, SPEED_HIGH_HIGH);
 8006b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b16:	f06f 0254 	mvn.w	r2, #84	; 0x54
 8006b1a:	492d      	ldr	r1, [pc, #180]	; (8006bd0 <Lslalom_R90+0x204>)
 8006b1c:	482d      	ldr	r0, [pc, #180]	; (8006bd4 <Lslalom_R90+0x208>)
 8006b1e:	f7fe fd23 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006b22:	4b26      	ldr	r3, [pc, #152]	; (8006bbc <Lslalom_R90+0x1f0>)
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d104      	bne.n	8006b3a <Lslalom_R90+0x16e>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b30:	2101      	movs	r1, #1
 8006b32:	2001      	movs	r0, #1
 8006b34:	f008 fea4 	bl	800f880 <turn_dir>
 8006b38:	e003      	b.n	8006b42 <Lslalom_R90+0x176>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b3a:	2103      	movs	r1, #3
 8006b3c:	2002      	movs	r0, #2
 8006b3e:	f008 fe9f 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_B);
 8006b42:	226e      	movs	r2, #110	; 0x6e
 8006b44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b48:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b4c:	f7fe fe30 	bl	80057b0 <slalomB>
}
 8006b50:	e02d      	b.n	8006bae <Lslalom_R90+0x1e2>
	}else if(run_mode == 5){
 8006b52:	4b18      	ldr	r3, [pc, #96]	; (8006bb4 <Lslalom_R90+0x1e8>)
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b05      	cmp	r3, #5
 8006b5a:	d128      	bne.n	8006bae <Lslalom_R90+0x1e2>
		slalomF(10000, SPEED_5, LSLALOM_5_OFFSET_F, LSLALOM_5_WALL_FL, LSLALOM_5_WALL_FR);
 8006b5c:	2364      	movs	r3, #100	; 0x64
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	23c8      	movs	r3, #200	; 0xc8
 8006b62:	221d      	movs	r2, #29
 8006b64:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006b68:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b6c:	f7fe fc80 	bl	8005470 <slalomF>
		slalomR(-LSLALOM_5_DEGACCEL, -LSLALOM_5_OMEGA, -85, SPEED_5);
 8006b70:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006b74:	f06f 0254 	mvn.w	r2, #84	; 0x54
 8006b78:	4915      	ldr	r1, [pc, #84]	; (8006bd0 <Lslalom_R90+0x204>)
 8006b7a:	4816      	ldr	r0, [pc, #88]	; (8006bd4 <Lslalom_R90+0x208>)
 8006b7c:	f7fe fcf4 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006b80:	4b0e      	ldr	r3, [pc, #56]	; (8006bbc <Lslalom_R90+0x1f0>)
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d104      	bne.n	8006b98 <Lslalom_R90+0x1cc>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b8e:	2101      	movs	r1, #1
 8006b90:	2001      	movs	r0, #1
 8006b92:	f008 fe75 	bl	800f880 <turn_dir>
 8006b96:	e003      	b.n	8006ba0 <Lslalom_R90+0x1d4>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006b98:	2103      	movs	r1, #3
 8006b9a:	2002      	movs	r0, #2
 8006b9c:	f008 fe70 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_5, LSLALOM_5_OFFSET_B);
 8006ba0:	221d      	movs	r2, #29
 8006ba2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006ba6:	f242 7010 	movw	r0, #10000	; 0x2710
 8006baa:	f7fe fe01 	bl	80057b0 <slalomB>
}
 8006bae:	bf00      	nop
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	20000456 	.word	0x20000456
 8006bb8:	fffff830 	.word	0xfffff830
 8006bbc:	20000f68 	.word	0x20000f68
 8006bc0:	fffffe70 	.word	0xfffffe70
 8006bc4:	fffff060 	.word	0xfffff060
 8006bc8:	fffffda8 	.word	0xfffffda8
 8006bcc:	ffffee6c 	.word	0xffffee6c
 8006bd0:	fffffce0 	.word	0xfffffce0
 8006bd4:	ffffe0c0 	.word	0xffffe0c0

08006bd8 <Lslalom_L90>:
//Lslalom_L90
// 大回りスラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L90(void){
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8006bde:	2006      	movs	r0, #6
 8006be0:	f00a fcd8 	bl	8011594 <full_led_write>
	if(run_mode == LOW){
 8006be4:	4b78      	ldr	r3, [pc, #480]	; (8006dc8 <Lslalom_L90+0x1f0>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d129      	bne.n	8006c42 <Lslalom_L90+0x6a>
		slalomF(10000, SPEED_LOW, LSLALOM_OFFSET_F, LSLALOM_WALL_FL, LSLALOM_WALL_FR);
 8006bee:	2364      	movs	r3, #100	; 0x64
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	23c8      	movs	r3, #200	; 0xc8
 8006bf4:	222d      	movs	r2, #45	; 0x2d
 8006bf6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006bfa:	f242 7010 	movw	r0, #10000	; 0x2710
 8006bfe:	f7fe fc37 	bl	8005470 <slalomF>
		slalomR(LSLALOM_DEGACCEL, LSLALOM_OMEGA, 90, SPEED_LOW);
 8006c02:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006c06:	225a      	movs	r2, #90	; 0x5a
 8006c08:	21c8      	movs	r1, #200	; 0xc8
 8006c0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006c0e:	f7fe fcab 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006c12:	4b6e      	ldr	r3, [pc, #440]	; (8006dcc <Lslalom_L90+0x1f4>)
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d104      	bne.n	8006c2a <Lslalom_L90+0x52>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c20:	2101      	movs	r1, #1
 8006c22:	20ff      	movs	r0, #255	; 0xff
 8006c24:	f008 fe2c 	bl	800f880 <turn_dir>
 8006c28:	e003      	b.n	8006c32 <Lslalom_L90+0x5a>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c2a:	2103      	movs	r1, #3
 8006c2c:	20fe      	movs	r0, #254	; 0xfe
 8006c2e:	f008 fe27 	bl	800f880 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LSLALOM_OFFSET_B);
 8006c32:	2235      	movs	r2, #53	; 0x35
 8006c34:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006c38:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c3c:	f7fe fdb8 	bl	80057b0 <slalomB>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_5, LSLALOM_5_OFFSET_B);
	}
}
 8006c40:	e0be      	b.n	8006dc0 <Lslalom_L90+0x1e8>
	}else if(run_mode == MIDDLE){
 8006c42:	4b61      	ldr	r3, [pc, #388]	; (8006dc8 <Lslalom_L90+0x1f0>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d12a      	bne.n	8006ca2 <Lslalom_L90+0xca>
		slalomF(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_F, LSLALOM_2_WALL_FL, LSLALOM_2_WALL_FR);
 8006c4c:	2378      	movs	r3, #120	; 0x78
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	23f0      	movs	r3, #240	; 0xf0
 8006c52:	223c      	movs	r2, #60	; 0x3c
 8006c54:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006c58:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c5c:	f7fe fc08 	bl	8005470 <slalomF>
		slalomR(LSLALOM_2_DEGACCEL, LSLALOM_2_OMEGA, 90, SPEED_MIDDLE);
 8006c60:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006c64:	225a      	movs	r2, #90	; 0x5a
 8006c66:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006c6a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006c6e:	f7fe fc7b 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006c72:	4b56      	ldr	r3, [pc, #344]	; (8006dcc <Lslalom_L90+0x1f4>)
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d104      	bne.n	8006c8a <Lslalom_L90+0xb2>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c80:	2101      	movs	r1, #1
 8006c82:	20ff      	movs	r0, #255	; 0xff
 8006c84:	f008 fdfc 	bl	800f880 <turn_dir>
 8006c88:	e003      	b.n	8006c92 <Lslalom_L90+0xba>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006c8a:	2103      	movs	r1, #3
 8006c8c:	20fe      	movs	r0, #254	; 0xfe
 8006c8e:	f008 fdf7 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LSLALOM_2_OFFSET_B);
 8006c92:	2258      	movs	r2, #88	; 0x58
 8006c94:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006c98:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c9c:	f7fe fd88 	bl	80057b0 <slalomB>
}
 8006ca0:	e08e      	b.n	8006dc0 <Lslalom_L90+0x1e8>
	}else if(run_mode == HIGH){
 8006ca2:	4b49      	ldr	r3, [pc, #292]	; (8006dc8 <Lslalom_L90+0x1f0>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b03      	cmp	r3, #3
 8006caa:	d12a      	bne.n	8006d02 <Lslalom_L90+0x12a>
		slalomF(10000, SPEED_HIGH, LSLALOM_3_OFFSET_F, LSLALOM_3_WALL_FL, LSLALOM_3_WALL_FR);
 8006cac:	2364      	movs	r3, #100	; 0x64
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	23c8      	movs	r3, #200	; 0xc8
 8006cb2:	222d      	movs	r2, #45	; 0x2d
 8006cb4:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006cb8:	f242 7010 	movw	r0, #10000	; 0x2710
 8006cbc:	f7fe fbd8 	bl	8005470 <slalomF>
		slalomR(LSLALOM_3_DEGACCEL, LSLALOM_3_OMEGA, 90, SPEED_HIGH);
 8006cc0:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006cc4:	225a      	movs	r2, #90	; 0x5a
 8006cc6:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006cca:	f241 1094 	movw	r0, #4500	; 0x1194
 8006cce:	f7fe fc4b 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006cd2:	4b3e      	ldr	r3, [pc, #248]	; (8006dcc <Lslalom_L90+0x1f4>)
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d104      	bne.n	8006cea <Lslalom_L90+0x112>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	20ff      	movs	r0, #255	; 0xff
 8006ce4:	f008 fdcc 	bl	800f880 <turn_dir>
 8006ce8:	e003      	b.n	8006cf2 <Lslalom_L90+0x11a>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006cea:	2103      	movs	r1, #3
 8006cec:	20fe      	movs	r0, #254	; 0xfe
 8006cee:	f008 fdc7 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_HIGH, LSLALOM_3_OFFSET_B);
 8006cf2:	2258      	movs	r2, #88	; 0x58
 8006cf4:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006cf8:	f242 7010 	movw	r0, #10000	; 0x2710
 8006cfc:	f7fe fd58 	bl	80057b0 <slalomB>
}
 8006d00:	e05e      	b.n	8006dc0 <Lslalom_L90+0x1e8>
	}else if(run_mode == HIGH_HIGH){
 8006d02:	4b31      	ldr	r3, [pc, #196]	; (8006dc8 <Lslalom_L90+0x1f0>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d12a      	bne.n	8006d62 <Lslalom_L90+0x18a>
		slalomF(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_F, LSLALOM_4_WALL_FL, LSLALOM_4_WALL_FR);
 8006d0c:	2364      	movs	r3, #100	; 0x64
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	23c8      	movs	r3, #200	; 0xc8
 8006d12:	2232      	movs	r2, #50	; 0x32
 8006d14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006d18:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d1c:	f7fe fba8 	bl	8005470 <slalomF>
		slalomR(LSLALOM_4_DEGACCEL, LSLALOM_4_OMEGA, 85, SPEED_HIGH_HIGH);
 8006d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d24:	2255      	movs	r2, #85	; 0x55
 8006d26:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006d2a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8006d2e:	f7fe fc1b 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006d32:	4b26      	ldr	r3, [pc, #152]	; (8006dcc <Lslalom_L90+0x1f4>)
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d104      	bne.n	8006d4a <Lslalom_L90+0x172>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d40:	2101      	movs	r1, #1
 8006d42:	20ff      	movs	r0, #255	; 0xff
 8006d44:	f008 fd9c 	bl	800f880 <turn_dir>
 8006d48:	e003      	b.n	8006d52 <Lslalom_L90+0x17a>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006d4a:	2103      	movs	r1, #3
 8006d4c:	20fe      	movs	r0, #254	; 0xfe
 8006d4e:	f008 fd97 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_4_OFFSET_B);
 8006d52:	226e      	movs	r2, #110	; 0x6e
 8006d54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006d58:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d5c:	f7fe fd28 	bl	80057b0 <slalomB>
}
 8006d60:	e02e      	b.n	8006dc0 <Lslalom_L90+0x1e8>
	}else if(run_mode == 5){
 8006d62:	4b19      	ldr	r3, [pc, #100]	; (8006dc8 <Lslalom_L90+0x1f0>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b05      	cmp	r3, #5
 8006d6a:	d129      	bne.n	8006dc0 <Lslalom_L90+0x1e8>
		slalomF(10000, SPEED_5, LSLALOM_5_OFFSET_F, LSLALOM_5_WALL_FL, LSLALOM_5_WALL_FR);
 8006d6c:	2364      	movs	r3, #100	; 0x64
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	23c8      	movs	r3, #200	; 0xc8
 8006d72:	221d      	movs	r2, #29
 8006d74:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006d78:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d7c:	f7fe fb78 	bl	8005470 <slalomF>
		slalomR(LSLALOM_5_DEGACCEL, LSLALOM_5_OMEGA, 85, SPEED_5);
 8006d80:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006d84:	2255      	movs	r2, #85	; 0x55
 8006d86:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006d8a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8006d8e:	f7fe fbeb 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006d92:	4b0e      	ldr	r3, [pc, #56]	; (8006dcc <Lslalom_L90+0x1f4>)
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d104      	bne.n	8006daa <Lslalom_L90+0x1d2>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006da0:	2101      	movs	r1, #1
 8006da2:	20ff      	movs	r0, #255	; 0xff
 8006da4:	f008 fd6c 	bl	800f880 <turn_dir>
 8006da8:	e003      	b.n	8006db2 <Lslalom_L90+0x1da>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006daa:	2103      	movs	r1, #3
 8006dac:	20fe      	movs	r0, #254	; 0xfe
 8006dae:	f008 fd67 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_5, LSLALOM_5_OFFSET_B);
 8006db2:	221d      	movs	r2, #29
 8006db4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006db8:	f242 7010 	movw	r0, #10000	; 0x2710
 8006dbc:	f7fe fcf8 	bl	80057b0 <slalomB>
}
 8006dc0:	bf00      	nop
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20000456 	.word	0x20000456
 8006dcc:	20000f68 	.word	0x20000f68

08006dd0 <Lslalom_R180>:
//Lslalom_R180
// スラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R180(void){
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af02      	add	r7, sp, #8
	full_led_write(GREEN);
 8006dd6:	2002      	movs	r0, #2
 8006dd8:	f00a fbdc 	bl	8011594 <full_led_write>
	if(run_mode == LOW){
 8006ddc:	4b80      	ldr	r3, [pc, #512]	; (8006fe0 <Lslalom_R180+0x210>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d12d      	bne.n	8006e42 <Lslalom_R180+0x72>
		slalomF(10000, SPEED_LOW, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 8006de6:	2364      	movs	r3, #100	; 0x64
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	23c8      	movs	r3, #200	; 0xc8
 8006dec:	223c      	movs	r2, #60	; 0x3c
 8006dee:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006df2:	f242 7010 	movw	r0, #10000	; 0x2710
 8006df6:	f7fe fb3b 	bl	8005470 <slalomF>
		slalomR(-LROTATE_DEGACCEL, -LROTATE_OMEGA, -180, SPEED_LOW);
 8006dfa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006dfe:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8006e02:	4978      	ldr	r1, [pc, #480]	; (8006fe4 <Lslalom_R180+0x214>)
 8006e04:	4878      	ldr	r0, [pc, #480]	; (8006fe8 <Lslalom_R180+0x218>)
 8006e06:	f7fe fbaf 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8006e0a:	4b78      	ldr	r3, [pc, #480]	; (8006fec <Lslalom_R180+0x21c>)
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d108      	bne.n	8006e2a <Lslalom_R180+0x5a>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e18:	2101      	movs	r1, #1
 8006e1a:	2001      	movs	r0, #1
 8006e1c:	f008 fd30 	bl	800f880 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e20:	2101      	movs	r1, #1
 8006e22:	2001      	movs	r0, #1
 8006e24:	f008 fd2c 	bl	800f880 <turn_dir>
 8006e28:	e003      	b.n	8006e32 <Lslalom_R180+0x62>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e2a:	2103      	movs	r1, #3
 8006e2c:	2004      	movs	r0, #4
 8006e2e:	f008 fd27 	bl	800f880 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LROTATE_OFFSET_B);
 8006e32:	2250      	movs	r2, #80	; 0x50
 8006e34:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006e38:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e3c:	f7fe fcb8 	bl	80057b0 <slalomB>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_5, LROTATE_5_OFFSET_B);
	}
}
 8006e40:	e0ca      	b.n	8006fd8 <Lslalom_R180+0x208>
	}else if(run_mode == MIDDLE){
 8006e42:	4b67      	ldr	r3, [pc, #412]	; (8006fe0 <Lslalom_R180+0x210>)
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d12d      	bne.n	8006ea8 <Lslalom_R180+0xd8>
		slalomF(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_F, LROTATE_2_WALL_FL, LROTATE_2_WALL_FR);
 8006e4c:	2364      	movs	r3, #100	; 0x64
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	23c8      	movs	r3, #200	; 0xc8
 8006e52:	2232      	movs	r2, #50	; 0x32
 8006e54:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006e58:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e5c:	f7fe fb08 	bl	8005470 <slalomF>
		slalomR(-LROTATE_2_DEGACCEL, -LROTATE_2_OMEGA, -180, SPEED_MIDDLE);
 8006e60:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006e64:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8006e68:	4961      	ldr	r1, [pc, #388]	; (8006ff0 <Lslalom_R180+0x220>)
 8006e6a:	4862      	ldr	r0, [pc, #392]	; (8006ff4 <Lslalom_R180+0x224>)
 8006e6c:	f7fe fb7c 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006e70:	4b5e      	ldr	r3, [pc, #376]	; (8006fec <Lslalom_R180+0x21c>)
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d108      	bne.n	8006e90 <Lslalom_R180+0xc0>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e7e:	2101      	movs	r1, #1
 8006e80:	2001      	movs	r0, #1
 8006e82:	f008 fcfd 	bl	800f880 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e86:	2101      	movs	r1, #1
 8006e88:	2001      	movs	r0, #1
 8006e8a:	f008 fcf9 	bl	800f880 <turn_dir>
 8006e8e:	e003      	b.n	8006e98 <Lslalom_R180+0xc8>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006e90:	2103      	movs	r1, #3
 8006e92:	2004      	movs	r0, #4
 8006e94:	f008 fcf4 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_B);
 8006e98:	224e      	movs	r2, #78	; 0x4e
 8006e9a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006e9e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ea2:	f7fe fc85 	bl	80057b0 <slalomB>
}
 8006ea6:	e097      	b.n	8006fd8 <Lslalom_R180+0x208>
	}else if(run_mode == HIGH){
 8006ea8:	4b4d      	ldr	r3, [pc, #308]	; (8006fe0 <Lslalom_R180+0x210>)
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d12d      	bne.n	8006f0e <Lslalom_R180+0x13e>
		slalomF(10000, SPEED_HIGH, LROTATE_3_OFFSET_F, LROTATE_3_WALL_FL, LROTATE_3_WALL_FR);
 8006eb2:	235a      	movs	r3, #90	; 0x5a
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	23b4      	movs	r3, #180	; 0xb4
 8006eb8:	221c      	movs	r2, #28
 8006eba:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006ebe:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ec2:	f7fe fad5 	bl	8005470 <slalomF>
		slalomR(-LROTATE_3_DEGACCEL, -LROTATE_3_OMEGA, -180, SPEED_HIGH);
 8006ec6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006eca:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8006ece:	494a      	ldr	r1, [pc, #296]	; (8006ff8 <Lslalom_R180+0x228>)
 8006ed0:	4848      	ldr	r0, [pc, #288]	; (8006ff4 <Lslalom_R180+0x224>)
 8006ed2:	f7fe fb49 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006ed6:	4b45      	ldr	r3, [pc, #276]	; (8006fec <Lslalom_R180+0x21c>)
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d108      	bne.n	8006ef6 <Lslalom_R180+0x126>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	2001      	movs	r0, #1
 8006ee8:	f008 fcca 	bl	800f880 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006eec:	2101      	movs	r1, #1
 8006eee:	2001      	movs	r0, #1
 8006ef0:	f008 fcc6 	bl	800f880 <turn_dir>
 8006ef4:	e003      	b.n	8006efe <Lslalom_R180+0x12e>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ef6:	2103      	movs	r1, #3
 8006ef8:	2004      	movs	r0, #4
 8006efa:	f008 fcc1 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_HIGH, LROTATE_3_OFFSET_B);
 8006efe:	224e      	movs	r2, #78	; 0x4e
 8006f00:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006f04:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f08:	f7fe fc52 	bl	80057b0 <slalomB>
}
 8006f0c:	e064      	b.n	8006fd8 <Lslalom_R180+0x208>
	}else if(run_mode == HIGH_HIGH){
 8006f0e:	4b34      	ldr	r3, [pc, #208]	; (8006fe0 <Lslalom_R180+0x210>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b04      	cmp	r3, #4
 8006f16:	d12d      	bne.n	8006f74 <Lslalom_R180+0x1a4>
		slalomF(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_F, LROTATE_4_WALL_FL, LROTATE_4_WALL_FR);
 8006f18:	235a      	movs	r3, #90	; 0x5a
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	23b4      	movs	r3, #180	; 0xb4
 8006f1e:	2232      	movs	r2, #50	; 0x32
 8006f20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006f24:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f28:	f7fe faa2 	bl	8005470 <slalomF>
		slalomR(-LROTATE_4_DEGACCEL, -LROTATE_4_OMEGA, -170, SPEED_HIGH_HIGH);
 8006f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f30:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 8006f34:	4931      	ldr	r1, [pc, #196]	; (8006ffc <Lslalom_R180+0x22c>)
 8006f36:	4832      	ldr	r0, [pc, #200]	; (8007000 <Lslalom_R180+0x230>)
 8006f38:	f7fe fb16 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006f3c:	4b2b      	ldr	r3, [pc, #172]	; (8006fec <Lslalom_R180+0x21c>)
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d108      	bne.n	8006f5c <Lslalom_R180+0x18c>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	2001      	movs	r0, #1
 8006f4e:	f008 fc97 	bl	800f880 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f52:	2101      	movs	r1, #1
 8006f54:	2001      	movs	r0, #1
 8006f56:	f008 fc93 	bl	800f880 <turn_dir>
 8006f5a:	e003      	b.n	8006f64 <Lslalom_R180+0x194>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006f5c:	2103      	movs	r1, #3
 8006f5e:	2004      	movs	r0, #4
 8006f60:	f008 fc8e 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_B);
 8006f64:	227d      	movs	r2, #125	; 0x7d
 8006f66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006f6a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f6e:	f7fe fc1f 	bl	80057b0 <slalomB>
}
 8006f72:	e031      	b.n	8006fd8 <Lslalom_R180+0x208>
	}else if(run_mode == 5){
 8006f74:	4b1a      	ldr	r3, [pc, #104]	; (8006fe0 <Lslalom_R180+0x210>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b05      	cmp	r3, #5
 8006f7c:	d12c      	bne.n	8006fd8 <Lslalom_R180+0x208>
		slalomF(10000, SPEED_5, LROTATE_5_OFFSET_F, LROTATE_5_WALL_FL, LROTATE_5_WALL_FR);
 8006f7e:	235a      	movs	r3, #90	; 0x5a
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	23b4      	movs	r3, #180	; 0xb4
 8006f84:	2228      	movs	r2, #40	; 0x28
 8006f86:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006f8a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f8e:	f7fe fa6f 	bl	8005470 <slalomF>
		slalomR(-LROTATE_5_DEGACCEL, -LROTATE_5_OMEGA, -170, SPEED_5);
 8006f92:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8006f96:	f06f 02a9 	mvn.w	r2, #169	; 0xa9
 8006f9a:	491a      	ldr	r1, [pc, #104]	; (8007004 <Lslalom_R180+0x234>)
 8006f9c:	4818      	ldr	r0, [pc, #96]	; (8007000 <Lslalom_R180+0x230>)
 8006f9e:	f7fe fae3 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8006fa2:	4b12      	ldr	r3, [pc, #72]	; (8006fec <Lslalom_R180+0x21c>)
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d108      	bne.n	8006fc2 <Lslalom_R180+0x1f2>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	2001      	movs	r0, #1
 8006fb4:	f008 fc64 	bl	800f880 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006fb8:	2101      	movs	r1, #1
 8006fba:	2001      	movs	r0, #1
 8006fbc:	f008 fc60 	bl	800f880 <turn_dir>
 8006fc0:	e003      	b.n	8006fca <Lslalom_R180+0x1fa>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006fc2:	2103      	movs	r1, #3
 8006fc4:	2004      	movs	r0, #4
 8006fc6:	f008 fc5b 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_5, LROTATE_5_OFFSET_B);
 8006fca:	2228      	movs	r2, #40	; 0x28
 8006fcc:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006fd0:	f242 7010 	movw	r0, #10000	; 0x2710
 8006fd4:	f7fe fbec 	bl	80057b0 <slalomB>
}
 8006fd8:	bf00      	nop
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	20000456 	.word	0x20000456
 8006fe4:	fffffefc 	.word	0xfffffefc
 8006fe8:	fffff830 	.word	0xfffff830
 8006fec:	20000f68 	.word	0x20000f68
 8006ff0:	fffffe74 	.word	0xfffffe74
 8006ff4:	fffff448 	.word	0xfffff448
 8006ff8:	fffffdd0 	.word	0xfffffdd0
 8006ffc:	fffffd85 	.word	0xfffffd85
 8007000:	ffffe0c0 	.word	0xffffe0c0
 8007004:	fffffce0 	.word	0xfffffce0

08007008 <Lslalom_L180>:
//Lslalom_L180
// 大回りスラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L180(void){
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af02      	add	r7, sp, #8
	full_led_write(GREEN);
 800700e:	2002      	movs	r0, #2
 8007010:	f00a fac0 	bl	8011594 <full_led_write>
	if(run_mode == LOW){
 8007014:	4b82      	ldr	r3, [pc, #520]	; (8007220 <Lslalom_L180+0x218>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b01      	cmp	r3, #1
 800701c:	d12e      	bne.n	800707c <Lslalom_L180+0x74>
		slalomF(10000, SPEED_LOW, LROTATE_OFFSET_F, LROTATE_WALL_FL, LROTATE_WALL_FR);
 800701e:	2364      	movs	r3, #100	; 0x64
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	23c8      	movs	r3, #200	; 0xc8
 8007024:	223c      	movs	r2, #60	; 0x3c
 8007026:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800702a:	f242 7010 	movw	r0, #10000	; 0x2710
 800702e:	f7fe fa1f 	bl	8005470 <slalomF>
		slalomR(LROTATE_DEGACCEL, LROTATE_OMEGA, 180, SPEED_LOW);
 8007032:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007036:	22b4      	movs	r2, #180	; 0xb4
 8007038:	f44f 7182 	mov.w	r1, #260	; 0x104
 800703c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007040:	f7fe fa92 	bl	8005568 <slalomR>

		if(!MF.FLAG.XDIR){
 8007044:	4b77      	ldr	r3, [pc, #476]	; (8007224 <Lslalom_L180+0x21c>)
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d108      	bne.n	8007064 <Lslalom_L180+0x5c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007052:	2101      	movs	r1, #1
 8007054:	20ff      	movs	r0, #255	; 0xff
 8007056:	f008 fc13 	bl	800f880 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800705a:	2101      	movs	r1, #1
 800705c:	20ff      	movs	r0, #255	; 0xff
 800705e:	f008 fc0f 	bl	800f880 <turn_dir>
 8007062:	e003      	b.n	800706c <Lslalom_L180+0x64>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007064:	2103      	movs	r1, #3
 8007066:	20fc      	movs	r0, #252	; 0xfc
 8007068:	f008 fc0a 	bl	800f880 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LROTATE_OFFSET_B);
 800706c:	2250      	movs	r2, #80	; 0x50
 800706e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007072:	f242 7010 	movw	r0, #10000	; 0x2710
 8007076:	f7fe fb9b 	bl	80057b0 <slalomB>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_5, LROTATE_5_OFFSET_B);
	}
}
 800707a:	e0ce      	b.n	800721a <Lslalom_L180+0x212>
	}else if(run_mode == MIDDLE){
 800707c:	4b68      	ldr	r3, [pc, #416]	; (8007220 <Lslalom_L180+0x218>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d12e      	bne.n	80070e4 <Lslalom_L180+0xdc>
		slalomF(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_F, LROTATE_2_WALL_FL, LROTATE_2_WALL_FR);
 8007086:	2364      	movs	r3, #100	; 0x64
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	23c8      	movs	r3, #200	; 0xc8
 800708c:	2232      	movs	r2, #50	; 0x32
 800708e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007092:	f242 7010 	movw	r0, #10000	; 0x2710
 8007096:	f7fe f9eb 	bl	8005470 <slalomF>
		slalomR(LROTATE_2_DEGACCEL, LROTATE_2_OMEGA, 180, SPEED_MIDDLE);
 800709a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800709e:	22b4      	movs	r2, #180	; 0xb4
 80070a0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80070a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80070a8:	f7fe fa5e 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 80070ac:	4b5d      	ldr	r3, [pc, #372]	; (8007224 <Lslalom_L180+0x21c>)
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d108      	bne.n	80070cc <Lslalom_L180+0xc4>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80070ba:	2101      	movs	r1, #1
 80070bc:	20ff      	movs	r0, #255	; 0xff
 80070be:	f008 fbdf 	bl	800f880 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80070c2:	2101      	movs	r1, #1
 80070c4:	20ff      	movs	r0, #255	; 0xff
 80070c6:	f008 fbdb 	bl	800f880 <turn_dir>
 80070ca:	e003      	b.n	80070d4 <Lslalom_L180+0xcc>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80070cc:	2103      	movs	r1, #3
 80070ce:	20fc      	movs	r0, #252	; 0xfc
 80070d0:	f008 fbd6 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, LROTATE_2_OFFSET_B);
 80070d4:	224e      	movs	r2, #78	; 0x4e
 80070d6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80070da:	f242 7010 	movw	r0, #10000	; 0x2710
 80070de:	f7fe fb67 	bl	80057b0 <slalomB>
}
 80070e2:	e09a      	b.n	800721a <Lslalom_L180+0x212>
	}else if(run_mode == HIGH){
 80070e4:	4b4e      	ldr	r3, [pc, #312]	; (8007220 <Lslalom_L180+0x218>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d12e      	bne.n	800714c <Lslalom_L180+0x144>
		slalomF(10000, SPEED_HIGH, LROTATE_3_OFFSET_F, LROTATE_3_WALL_FL, LROTATE_3_WALL_FR);
 80070ee:	235a      	movs	r3, #90	; 0x5a
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	23b4      	movs	r3, #180	; 0xb4
 80070f4:	221c      	movs	r2, #28
 80070f6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80070fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80070fe:	f7fe f9b7 	bl	8005470 <slalomF>
		slalomR(LROTATE_3_DEGACCEL, LROTATE_3_OMEGA, 180, SPEED_HIGH);
 8007102:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007106:	22b4      	movs	r2, #180	; 0xb4
 8007108:	f44f 710c 	mov.w	r1, #560	; 0x230
 800710c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007110:	f7fe fa2a 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 8007114:	4b43      	ldr	r3, [pc, #268]	; (8007224 <Lslalom_L180+0x21c>)
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d108      	bne.n	8007134 <Lslalom_L180+0x12c>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007122:	2101      	movs	r1, #1
 8007124:	20ff      	movs	r0, #255	; 0xff
 8007126:	f008 fbab 	bl	800f880 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800712a:	2101      	movs	r1, #1
 800712c:	20ff      	movs	r0, #255	; 0xff
 800712e:	f008 fba7 	bl	800f880 <turn_dir>
 8007132:	e003      	b.n	800713c <Lslalom_L180+0x134>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007134:	2103      	movs	r1, #3
 8007136:	20fc      	movs	r0, #252	; 0xfc
 8007138:	f008 fba2 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_HIGH, LROTATE_3_OFFSET_B);
 800713c:	224e      	movs	r2, #78	; 0x4e
 800713e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007142:	f242 7010 	movw	r0, #10000	; 0x2710
 8007146:	f7fe fb33 	bl	80057b0 <slalomB>
}
 800714a:	e066      	b.n	800721a <Lslalom_L180+0x212>
	}else if(run_mode == HIGH_HIGH){
 800714c:	4b34      	ldr	r3, [pc, #208]	; (8007220 <Lslalom_L180+0x218>)
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b04      	cmp	r3, #4
 8007154:	d12e      	bne.n	80071b4 <Lslalom_L180+0x1ac>
		slalomF(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_F, LROTATE_4_WALL_FL, LROTATE_4_WALL_FR);
 8007156:	235a      	movs	r3, #90	; 0x5a
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	23b4      	movs	r3, #180	; 0xb4
 800715c:	2232      	movs	r2, #50	; 0x32
 800715e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007162:	f242 7010 	movw	r0, #10000	; 0x2710
 8007166:	f7fe f983 	bl	8005470 <slalomF>
		slalomR(LROTATE_4_DEGACCEL, LROTATE_4_OMEGA, 170, SPEED_HIGH_HIGH);
 800716a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800716e:	22aa      	movs	r2, #170	; 0xaa
 8007170:	f240 217b 	movw	r1, #635	; 0x27b
 8007174:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007178:	f7fe f9f6 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 800717c:	4b29      	ldr	r3, [pc, #164]	; (8007224 <Lslalom_L180+0x21c>)
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d108      	bne.n	800719c <Lslalom_L180+0x194>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800718a:	2101      	movs	r1, #1
 800718c:	20ff      	movs	r0, #255	; 0xff
 800718e:	f008 fb77 	bl	800f880 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007192:	2101      	movs	r1, #1
 8007194:	20ff      	movs	r0, #255	; 0xff
 8007196:	f008 fb73 	bl	800f880 <turn_dir>
 800719a:	e003      	b.n	80071a4 <Lslalom_L180+0x19c>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800719c:	2103      	movs	r1, #3
 800719e:	20fc      	movs	r0, #252	; 0xfc
 80071a0:	f008 fb6e 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, LROTATE_4_OFFSET_B);
 80071a4:	227d      	movs	r2, #125	; 0x7d
 80071a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80071aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80071ae:	f7fe faff 	bl	80057b0 <slalomB>
}
 80071b2:	e032      	b.n	800721a <Lslalom_L180+0x212>
	}else if(run_mode == 5){
 80071b4:	4b1a      	ldr	r3, [pc, #104]	; (8007220 <Lslalom_L180+0x218>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b05      	cmp	r3, #5
 80071bc:	d12d      	bne.n	800721a <Lslalom_L180+0x212>
		slalomF(10000, SPEED_5, LROTATE_5_OFFSET_F, LROTATE_5_WALL_FL, LROTATE_5_WALL_FR);
 80071be:	235a      	movs	r3, #90	; 0x5a
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	23b4      	movs	r3, #180	; 0xb4
 80071c4:	2228      	movs	r2, #40	; 0x28
 80071c6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80071ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80071ce:	f7fe f94f 	bl	8005470 <slalomF>
		slalomR(LROTATE_5_DEGACCEL, LROTATE_5_OMEGA, 170, SPEED_5);
 80071d2:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80071d6:	22aa      	movs	r2, #170	; 0xaa
 80071d8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80071dc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80071e0:	f7fe f9c2 	bl	8005568 <slalomR>
		if(!MF.FLAG.XDIR){
 80071e4:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <Lslalom_L180+0x21c>)
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d108      	bne.n	8007204 <Lslalom_L180+0x1fc>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80071f2:	2101      	movs	r1, #1
 80071f4:	20ff      	movs	r0, #255	; 0xff
 80071f6:	f008 fb43 	bl	800f880 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80071fa:	2101      	movs	r1, #1
 80071fc:	20ff      	movs	r0, #255	; 0xff
 80071fe:	f008 fb3f 	bl	800f880 <turn_dir>
 8007202:	e003      	b.n	800720c <Lslalom_L180+0x204>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007204:	2103      	movs	r1, #3
 8007206:	20fc      	movs	r0, #252	; 0xfc
 8007208:	f008 fb3a 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_5, LROTATE_5_OFFSET_B);
 800720c:	2228      	movs	r2, #40	; 0x28
 800720e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007212:	f242 7010 	movw	r0, #10000	; 0x2710
 8007216:	f7fe facb 	bl	80057b0 <slalomB>
}
 800721a:	bf00      	nop
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	20000456 	.word	0x20000456
 8007224:	20000f68 	.word	0x20000f68

08007228 <v_R45>:
//v_R45
// 区画中心から右に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45(void){
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 800722e:	2005      	movs	r0, #5
 8007230:	f00a f9b0 	bl	8011594 <full_led_write>
	if(run_mode == LOW){
 8007234:	4bc2      	ldr	r3, [pc, #776]	; (8007540 <v_R45+0x318>)
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b01      	cmp	r3, #1
 800723c:	d155      	bne.n	80072ea <v_R45+0xc2>
		if(!MF2.FLAG.V){
 800723e:	4bc1      	ldr	r3, [pc, #772]	; (8007544 <v_R45+0x31c>)
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10c      	bne.n	8007266 <v_R45+0x3e>
			slalomF(10000, SPEED_LOW, V45_OFFSET_F, NO_WALL, NO_WALL);
 800724c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	f241 3388 	movw	r3, #5000	; 0x1388
 8007256:	2228      	movs	r2, #40	; 0x28
 8007258:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800725c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007260:	f7fe f906 	bl	8005470 <slalomF>
 8007264:	e00b      	b.n	800727e <v_R45+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 8007266:	f241 3388 	movw	r3, #5000	; 0x1388
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007270:	2255      	movs	r2, #85	; 0x55
 8007272:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007276:	f242 7010 	movw	r0, #10000	; 0x2710
 800727a:	f7fe f8f9 	bl	8005470 <slalomF>
		}
		slalomR(-V45_DEGACCEL, -V45_OMEGA, -45, SPEED_LOW);
 800727e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007282:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007286:	49b0      	ldr	r1, [pc, #704]	; (8007548 <v_R45+0x320>)
 8007288:	48b0      	ldr	r0, [pc, #704]	; (800754c <v_R45+0x324>)
 800728a:	f7fe f96d 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800728e:	2103      	movs	r1, #3
 8007290:	2001      	movs	r0, #1
 8007292:	f008 faf5 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007296:	4bab      	ldr	r3, [pc, #684]	; (8007544 <v_R45+0x31c>)
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	3301      	adds	r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	bfb8      	it	lt
 80072aa:	425b      	neglt	r3, r3
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	b2d9      	uxtb	r1, r3
 80072b2:	4aa4      	ldr	r2, [pc, #656]	; (8007544 <v_R45+0x31c>)
 80072b4:	8813      	ldrh	r3, [r2, #0]
 80072b6:	f361 03c3 	bfi	r3, r1, #3, #1
 80072ba:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 80072bc:	4ba1      	ldr	r3, [pc, #644]	; (8007544 <v_R45+0x31c>)
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d107      	bne.n	80072da <v_R45+0xb2>
			slalomB(10000, SPEED_LOW, V45_OFFSET_VB);
 80072ca:	2228      	movs	r2, #40	; 0x28
 80072cc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80072d0:	f242 7010 	movw	r0, #10000	; 0x2710
 80072d4:	f7fe fa6c 	bl	80057b0 <slalomB>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
		}
	}
}
 80072d8:	e183      	b.n	80075e2 <v_R45+0x3ba>
			slalomB(10000, SPEED_LOW, V45_OFFSET_B);
 80072da:	2255      	movs	r2, #85	; 0x55
 80072dc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80072e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80072e4:	f7fe fa64 	bl	80057b0 <slalomB>
}
 80072e8:	e17b      	b.n	80075e2 <v_R45+0x3ba>
	}else if(run_mode == MIDDLE){
 80072ea:	4b95      	ldr	r3, [pc, #596]	; (8007540 <v_R45+0x318>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d155      	bne.n	80073a0 <v_R45+0x178>
		if(!MF2.FLAG.V){
 80072f4:	4b93      	ldr	r3, [pc, #588]	; (8007544 <v_R45+0x31c>)
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10c      	bne.n	800731c <v_R45+0xf4>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_F, NO_WALL, NO_WALL);
 8007302:	f241 3388 	movw	r3, #5000	; 0x1388
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	f241 3388 	movw	r3, #5000	; 0x1388
 800730c:	2228      	movs	r2, #40	; 0x28
 800730e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007312:	f242 7010 	movw	r0, #10000	; 0x2710
 8007316:	f7fe f8ab 	bl	8005470 <slalomF>
 800731a:	e00b      	b.n	8007334 <v_R45+0x10c>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 800731c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	f241 3388 	movw	r3, #5000	; 0x1388
 8007326:	2249      	movs	r2, #73	; 0x49
 8007328:	f44f 7116 	mov.w	r1, #600	; 0x258
 800732c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007330:	f7fe f89e 	bl	8005470 <slalomF>
		slalomR(-V45_2_DEGACCEL, -V45_2_OMEGA, -45, SPEED_MIDDLE);
 8007334:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007338:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 800733c:	4984      	ldr	r1, [pc, #528]	; (8007550 <v_R45+0x328>)
 800733e:	4885      	ldr	r0, [pc, #532]	; (8007554 <v_R45+0x32c>)
 8007340:	f7fe f912 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007344:	2103      	movs	r1, #3
 8007346:	2001      	movs	r0, #1
 8007348:	f008 fa9a 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800734c:	4b7d      	ldr	r3, [pc, #500]	; (8007544 <v_R45+0x31c>)
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007354:	b2db      	uxtb	r3, r3
 8007356:	3301      	adds	r3, #1
 8007358:	2b00      	cmp	r3, #0
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	bfb8      	it	lt
 8007360:	425b      	neglt	r3, r3
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	b2d9      	uxtb	r1, r3
 8007368:	4a76      	ldr	r2, [pc, #472]	; (8007544 <v_R45+0x31c>)
 800736a:	8813      	ldrh	r3, [r2, #0]
 800736c:	f361 03c3 	bfi	r3, r1, #3, #1
 8007370:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007372:	4b74      	ldr	r3, [pc, #464]	; (8007544 <v_R45+0x31c>)
 8007374:	881b      	ldrh	r3, [r3, #0]
 8007376:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d107      	bne.n	8007390 <v_R45+0x168>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB);
 8007380:	2237      	movs	r2, #55	; 0x37
 8007382:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007386:	f242 7010 	movw	r0, #10000	; 0x2710
 800738a:	f7fe fa11 	bl	80057b0 <slalomB>
}
 800738e:	e128      	b.n	80075e2 <v_R45+0x3ba>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_B);
 8007390:	225d      	movs	r2, #93	; 0x5d
 8007392:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007396:	f242 7010 	movw	r0, #10000	; 0x2710
 800739a:	f7fe fa09 	bl	80057b0 <slalomB>
}
 800739e:	e120      	b.n	80075e2 <v_R45+0x3ba>
	}else if(run_mode == HIGH){
 80073a0:	4b67      	ldr	r3, [pc, #412]	; (8007540 <v_R45+0x318>)
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d155      	bne.n	8007456 <v_R45+0x22e>
		if(!MF2.FLAG.V){
 80073aa:	4b66      	ldr	r3, [pc, #408]	; (8007544 <v_R45+0x31c>)
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10c      	bne.n	80073d2 <v_R45+0x1aa>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_F, NO_WALL, NO_WALL);
 80073b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	f241 3388 	movw	r3, #5000	; 0x1388
 80073c2:	2217      	movs	r2, #23
 80073c4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80073c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80073cc:	f7fe f850 	bl	8005470 <slalomF>
 80073d0:	e00b      	b.n	80073ea <v_R45+0x1c2>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 80073d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80073dc:	2237      	movs	r2, #55	; 0x37
 80073de:	f44f 7148 	mov.w	r1, #800	; 0x320
 80073e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80073e6:	f7fe f843 	bl	8005470 <slalomF>
		slalomR(-V45_3_DEGACCEL, -V45_3_OMEGA, -45, SPEED_HIGH);
 80073ea:	f44f 7348 	mov.w	r3, #800	; 0x320
 80073ee:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80073f2:	4957      	ldr	r1, [pc, #348]	; (8007550 <v_R45+0x328>)
 80073f4:	4857      	ldr	r0, [pc, #348]	; (8007554 <v_R45+0x32c>)
 80073f6:	f7fe f8b7 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80073fa:	2103      	movs	r1, #3
 80073fc:	2001      	movs	r0, #1
 80073fe:	f008 fa3f 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007402:	4b50      	ldr	r3, [pc, #320]	; (8007544 <v_R45+0x31c>)
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800740a:	b2db      	uxtb	r3, r3
 800740c:	3301      	adds	r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	bfb8      	it	lt
 8007416:	425b      	neglt	r3, r3
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	b2d9      	uxtb	r1, r3
 800741e:	4a49      	ldr	r2, [pc, #292]	; (8007544 <v_R45+0x31c>)
 8007420:	8813      	ldrh	r3, [r2, #0]
 8007422:	f361 03c3 	bfi	r3, r1, #3, #1
 8007426:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007428:	4b46      	ldr	r3, [pc, #280]	; (8007544 <v_R45+0x31c>)
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d107      	bne.n	8007446 <v_R45+0x21e>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB);
 8007436:	2233      	movs	r2, #51	; 0x33
 8007438:	f44f 7148 	mov.w	r1, #800	; 0x320
 800743c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007440:	f7fe f9b6 	bl	80057b0 <slalomB>
}
 8007444:	e0cd      	b.n	80075e2 <v_R45+0x3ba>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_B);
 8007446:	224b      	movs	r2, #75	; 0x4b
 8007448:	f44f 7148 	mov.w	r1, #800	; 0x320
 800744c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007450:	f7fe f9ae 	bl	80057b0 <slalomB>
}
 8007454:	e0c5      	b.n	80075e2 <v_R45+0x3ba>
	}else if(run_mode == HIGH_HIGH){
 8007456:	4b3a      	ldr	r3, [pc, #232]	; (8007540 <v_R45+0x318>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b04      	cmp	r3, #4
 800745e:	d155      	bne.n	800750c <v_R45+0x2e4>
		if(!MF2.FLAG.V){
 8007460:	4b38      	ldr	r3, [pc, #224]	; (8007544 <v_R45+0x31c>)
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10c      	bne.n	8007488 <v_R45+0x260>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_F, NO_WALL, NO_WALL);
 800746e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	f241 3388 	movw	r3, #5000	; 0x1388
 8007478:	2214      	movs	r2, #20
 800747a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800747e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007482:	f7fd fff5 	bl	8005470 <slalomF>
 8007486:	e00b      	b.n	80074a0 <v_R45+0x278>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 8007488:	f241 3388 	movw	r3, #5000	; 0x1388
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007492:	2214      	movs	r2, #20
 8007494:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007498:	f242 7010 	movw	r0, #10000	; 0x2710
 800749c:	f7fd ffe8 	bl	8005470 <slalomF>
		slalomR(-V45_4_DEGACCEL, -V45_4_OMEGA, -45, SPEED_HIGH_HIGH);
 80074a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074a4:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80074a8:	492b      	ldr	r1, [pc, #172]	; (8007558 <v_R45+0x330>)
 80074aa:	482c      	ldr	r0, [pc, #176]	; (800755c <v_R45+0x334>)
 80074ac:	f7fe f85c 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80074b0:	2103      	movs	r1, #3
 80074b2:	2001      	movs	r0, #1
 80074b4:	f008 f9e4 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80074b8:	4b22      	ldr	r3, [pc, #136]	; (8007544 <v_R45+0x31c>)
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	3301      	adds	r3, #1
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	bfb8      	it	lt
 80074cc:	425b      	neglt	r3, r3
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	b2d9      	uxtb	r1, r3
 80074d4:	4a1b      	ldr	r2, [pc, #108]	; (8007544 <v_R45+0x31c>)
 80074d6:	8813      	ldrh	r3, [r2, #0]
 80074d8:	f361 03c3 	bfi	r3, r1, #3, #1
 80074dc:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80074de:	4b19      	ldr	r3, [pc, #100]	; (8007544 <v_R45+0x31c>)
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d107      	bne.n	80074fc <v_R45+0x2d4>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB);
 80074ec:	223a      	movs	r2, #58	; 0x3a
 80074ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80074f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80074f6:	f7fe f95b 	bl	80057b0 <slalomB>
}
 80074fa:	e072      	b.n	80075e2 <v_R45+0x3ba>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_B);
 80074fc:	223a      	movs	r2, #58	; 0x3a
 80074fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007502:	f242 7010 	movw	r0, #10000	; 0x2710
 8007506:	f7fe f953 	bl	80057b0 <slalomB>
}
 800750a:	e06a      	b.n	80075e2 <v_R45+0x3ba>
	}else if(run_mode == 5){
 800750c:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <v_R45+0x318>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b05      	cmp	r3, #5
 8007514:	d165      	bne.n	80075e2 <v_R45+0x3ba>
		if(!MF2.FLAG.V){
 8007516:	4b0b      	ldr	r3, [pc, #44]	; (8007544 <v_R45+0x31c>)
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d11d      	bne.n	8007560 <v_R45+0x338>
			slalomF(10000, SPEED_5, V45_5_OFFSET_F, NO_WALL, NO_WALL);
 8007524:	f241 3388 	movw	r3, #5000	; 0x1388
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	f241 3388 	movw	r3, #5000	; 0x1388
 800752e:	2218      	movs	r2, #24
 8007530:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007534:	f242 7010 	movw	r0, #10000	; 0x2710
 8007538:	f7fd ff9a 	bl	8005470 <slalomF>
 800753c:	e01c      	b.n	8007578 <v_R45+0x350>
 800753e:	bf00      	nop
 8007540:	20000456 	.word	0x20000456
 8007544:	20000f64 	.word	0x20000f64
 8007548:	fffffed4 	.word	0xfffffed4
 800754c:	fffff448 	.word	0xfffff448
 8007550:	fffffe70 	.word	0xfffffe70
 8007554:	ffffe0c0 	.word	0xffffe0c0
 8007558:	fffffda8 	.word	0xfffffda8
 800755c:	ffffd8f0 	.word	0xffffd8f0
			slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8007560:	f241 3388 	movw	r3, #5000	; 0x1388
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	f241 3388 	movw	r3, #5000	; 0x1388
 800756a:	2214      	movs	r2, #20
 800756c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007570:	f242 7010 	movw	r0, #10000	; 0x2710
 8007574:	f7fd ff7c 	bl	8005470 <slalomF>
		slalomR(-V45_5_DEGACCEL, -V45_5_OMEGA, -45, SPEED_5);
 8007578:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800757c:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007580:	4919      	ldr	r1, [pc, #100]	; (80075e8 <v_R45+0x3c0>)
 8007582:	481a      	ldr	r0, [pc, #104]	; (80075ec <v_R45+0x3c4>)
 8007584:	f7fd fff0 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007588:	2103      	movs	r1, #3
 800758a:	2001      	movs	r0, #1
 800758c:	f008 f978 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007590:	4b17      	ldr	r3, [pc, #92]	; (80075f0 <v_R45+0x3c8>)
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007598:	b2db      	uxtb	r3, r3
 800759a:	3301      	adds	r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	bfb8      	it	lt
 80075a4:	425b      	neglt	r3, r3
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	b2d9      	uxtb	r1, r3
 80075ac:	4a10      	ldr	r2, [pc, #64]	; (80075f0 <v_R45+0x3c8>)
 80075ae:	8813      	ldrh	r3, [r2, #0]
 80075b0:	f361 03c3 	bfi	r3, r1, #3, #1
 80075b4:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80075b6:	4b0e      	ldr	r3, [pc, #56]	; (80075f0 <v_R45+0x3c8>)
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d107      	bne.n	80075d4 <v_R45+0x3ac>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
 80075c4:	223a      	movs	r2, #58	; 0x3a
 80075c6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80075ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80075ce:	f7fe f8ef 	bl	80057b0 <slalomB>
}
 80075d2:	e006      	b.n	80075e2 <v_R45+0x3ba>
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
 80075d4:	223d      	movs	r2, #61	; 0x3d
 80075d6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80075da:	f242 7010 	movw	r0, #10000	; 0x2710
 80075de:	f7fe f8e7 	bl	80057b0 <slalomB>
}
 80075e2:	bf00      	nop
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	fffffce0 	.word	0xfffffce0
 80075ec:	ffffc180 	.word	0xffffc180
 80075f0:	20000f64 	.word	0x20000f64

080075f4 <v_L45>:
//v_L45
// 区画中心から左に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45(void){
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80075fa:	2006      	movs	r0, #6
 80075fc:	f009 ffca 	bl	8011594 <full_led_write>
	if(run_mode == LOW){
 8007600:	4bc4      	ldr	r3, [pc, #784]	; (8007914 <v_L45+0x320>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b01      	cmp	r3, #1
 8007608:	d156      	bne.n	80076b8 <v_L45+0xc4>
		if(!MF2.FLAG.V){
 800760a:	4bc3      	ldr	r3, [pc, #780]	; (8007918 <v_L45+0x324>)
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10c      	bne.n	8007632 <v_L45+0x3e>
			slalomF(10000, SPEED_LOW, V45_OFFSET_F, NO_WALL, NO_WALL);
 8007618:	f241 3388 	movw	r3, #5000	; 0x1388
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007622:	2228      	movs	r2, #40	; 0x28
 8007624:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007628:	f242 7010 	movw	r0, #10000	; 0x2710
 800762c:	f7fd ff20 	bl	8005470 <slalomF>
 8007630:	e00b      	b.n	800764a <v_L45+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 8007632:	f241 3388 	movw	r3, #5000	; 0x1388
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	f241 3388 	movw	r3, #5000	; 0x1388
 800763c:	2255      	movs	r2, #85	; 0x55
 800763e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007642:	f242 7010 	movw	r0, #10000	; 0x2710
 8007646:	f7fd ff13 	bl	8005470 <slalomF>
		}
		slalomR(V45_DEGACCEL, V45_OMEGA, 45, SPEED_LOW);
 800764a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800764e:	222d      	movs	r2, #45	; 0x2d
 8007650:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007654:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007658:	f7fd ff86 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800765c:	2103      	movs	r1, #3
 800765e:	20ff      	movs	r0, #255	; 0xff
 8007660:	f008 f90e 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007664:	4bac      	ldr	r3, [pc, #688]	; (8007918 <v_L45+0x324>)
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800766c:	b2db      	uxtb	r3, r3
 800766e:	3301      	adds	r3, #1
 8007670:	2b00      	cmp	r3, #0
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	bfb8      	it	lt
 8007678:	425b      	neglt	r3, r3
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	b2d9      	uxtb	r1, r3
 8007680:	4aa5      	ldr	r2, [pc, #660]	; (8007918 <v_L45+0x324>)
 8007682:	8813      	ldrh	r3, [r2, #0]
 8007684:	f361 03c3 	bfi	r3, r1, #3, #1
 8007688:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 800768a:	4ba3      	ldr	r3, [pc, #652]	; (8007918 <v_L45+0x324>)
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d107      	bne.n	80076a8 <v_L45+0xb4>
			slalomB(10000, SPEED_LOW, V45_OFFSET_VB);
 8007698:	2228      	movs	r2, #40	; 0x28
 800769a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800769e:	f242 7010 	movw	r0, #10000	; 0x2710
 80076a2:	f7fe f885 	bl	80057b0 <slalomB>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
		}
	}
}
 80076a6:	e17b      	b.n	80079a0 <v_L45+0x3ac>
			slalomB(10000, SPEED_LOW, V45_OFFSET_B);
 80076a8:	2255      	movs	r2, #85	; 0x55
 80076aa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80076ae:	f242 7010 	movw	r0, #10000	; 0x2710
 80076b2:	f7fe f87d 	bl	80057b0 <slalomB>
}
 80076b6:	e173      	b.n	80079a0 <v_L45+0x3ac>
	}else if(run_mode == MIDDLE){
 80076b8:	4b96      	ldr	r3, [pc, #600]	; (8007914 <v_L45+0x320>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d156      	bne.n	8007770 <v_L45+0x17c>
		if(!MF2.FLAG.V){
 80076c2:	4b95      	ldr	r3, [pc, #596]	; (8007918 <v_L45+0x324>)
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10c      	bne.n	80076ea <v_L45+0xf6>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_F, NO_WALL, NO_WALL);
 80076d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80076da:	2228      	movs	r2, #40	; 0x28
 80076dc:	f44f 7116 	mov.w	r1, #600	; 0x258
 80076e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80076e4:	f7fd fec4 	bl	8005470 <slalomF>
 80076e8:	e00b      	b.n	8007702 <v_L45+0x10e>
			slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 80076ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80076f4:	2249      	movs	r2, #73	; 0x49
 80076f6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80076fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80076fe:	f7fd feb7 	bl	8005470 <slalomF>
		slalomR(V45_2_DEGACCEL, V45_2_OMEGA, 45, SPEED_MIDDLE);
 8007702:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007706:	222d      	movs	r2, #45	; 0x2d
 8007708:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800770c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007710:	f7fd ff2a 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007714:	2103      	movs	r1, #3
 8007716:	20ff      	movs	r0, #255	; 0xff
 8007718:	f008 f8b2 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800771c:	4b7e      	ldr	r3, [pc, #504]	; (8007918 <v_L45+0x324>)
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007724:	b2db      	uxtb	r3, r3
 8007726:	3301      	adds	r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	bfb8      	it	lt
 8007730:	425b      	neglt	r3, r3
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	b2d9      	uxtb	r1, r3
 8007738:	4a77      	ldr	r2, [pc, #476]	; (8007918 <v_L45+0x324>)
 800773a:	8813      	ldrh	r3, [r2, #0]
 800773c:	f361 03c3 	bfi	r3, r1, #3, #1
 8007740:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007742:	4b75      	ldr	r3, [pc, #468]	; (8007918 <v_L45+0x324>)
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d107      	bne.n	8007760 <v_L45+0x16c>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB);
 8007750:	2237      	movs	r2, #55	; 0x37
 8007752:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007756:	f242 7010 	movw	r0, #10000	; 0x2710
 800775a:	f7fe f829 	bl	80057b0 <slalomB>
}
 800775e:	e11f      	b.n	80079a0 <v_L45+0x3ac>
			slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_B);
 8007760:	225d      	movs	r2, #93	; 0x5d
 8007762:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007766:	f242 7010 	movw	r0, #10000	; 0x2710
 800776a:	f7fe f821 	bl	80057b0 <slalomB>
}
 800776e:	e117      	b.n	80079a0 <v_L45+0x3ac>
	}else if(run_mode == HIGH){
 8007770:	4b68      	ldr	r3, [pc, #416]	; (8007914 <v_L45+0x320>)
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b03      	cmp	r3, #3
 8007778:	d156      	bne.n	8007828 <v_L45+0x234>
		if(!MF2.FLAG.V){
 800777a:	4b67      	ldr	r3, [pc, #412]	; (8007918 <v_L45+0x324>)
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10c      	bne.n	80077a2 <v_L45+0x1ae>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_F+5, NO_WALL, NO_WALL);
 8007788:	f241 3388 	movw	r3, #5000	; 0x1388
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007792:	221c      	movs	r2, #28
 8007794:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007798:	f242 7010 	movw	r0, #10000	; 0x2710
 800779c:	f7fd fe68 	bl	8005470 <slalomF>
 80077a0:	e00b      	b.n	80077ba <v_L45+0x1c6>
			slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 80077a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80077ac:	2237      	movs	r2, #55	; 0x37
 80077ae:	f44f 7148 	mov.w	r1, #800	; 0x320
 80077b2:	f242 7010 	movw	r0, #10000	; 0x2710
 80077b6:	f7fd fe5b 	bl	8005470 <slalomF>
		slalomR(V45_3_DEGACCEL, V45_3_OMEGA, 45, SPEED_HIGH);
 80077ba:	f44f 7348 	mov.w	r3, #800	; 0x320
 80077be:	222d      	movs	r2, #45	; 0x2d
 80077c0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80077c4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80077c8:	f7fd fece 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80077cc:	2103      	movs	r1, #3
 80077ce:	20ff      	movs	r0, #255	; 0xff
 80077d0:	f008 f856 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80077d4:	4b50      	ldr	r3, [pc, #320]	; (8007918 <v_L45+0x324>)
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	3301      	adds	r3, #1
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	bfb8      	it	lt
 80077e8:	425b      	neglt	r3, r3
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	b2d9      	uxtb	r1, r3
 80077f0:	4a49      	ldr	r2, [pc, #292]	; (8007918 <v_L45+0x324>)
 80077f2:	8813      	ldrh	r3, [r2, #0]
 80077f4:	f361 03c3 	bfi	r3, r1, #3, #1
 80077f8:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80077fa:	4b47      	ldr	r3, [pc, #284]	; (8007918 <v_L45+0x324>)
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d107      	bne.n	8007818 <v_L45+0x224>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB);
 8007808:	2233      	movs	r2, #51	; 0x33
 800780a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800780e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007812:	f7fd ffcd 	bl	80057b0 <slalomB>
}
 8007816:	e0c3      	b.n	80079a0 <v_L45+0x3ac>
			slalomB(10000, SPEED_HIGH, V45_3_OFFSET_B);
 8007818:	224b      	movs	r2, #75	; 0x4b
 800781a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800781e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007822:	f7fd ffc5 	bl	80057b0 <slalomB>
}
 8007826:	e0bb      	b.n	80079a0 <v_L45+0x3ac>
	}else if(run_mode == HIGH_HIGH){
 8007828:	4b3a      	ldr	r3, [pc, #232]	; (8007914 <v_L45+0x320>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b04      	cmp	r3, #4
 8007830:	d156      	bne.n	80078e0 <v_L45+0x2ec>
		if(!MF2.FLAG.V){
 8007832:	4b39      	ldr	r3, [pc, #228]	; (8007918 <v_L45+0x324>)
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10c      	bne.n	800785a <v_L45+0x266>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_F, NO_WALL, NO_WALL);
 8007840:	f241 3388 	movw	r3, #5000	; 0x1388
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	f241 3388 	movw	r3, #5000	; 0x1388
 800784a:	2214      	movs	r2, #20
 800784c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007850:	f242 7010 	movw	r0, #10000	; 0x2710
 8007854:	f7fd fe0c 	bl	8005470 <slalomF>
 8007858:	e00b      	b.n	8007872 <v_L45+0x27e>
			slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 800785a:	f241 3388 	movw	r3, #5000	; 0x1388
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	f241 3388 	movw	r3, #5000	; 0x1388
 8007864:	2214      	movs	r2, #20
 8007866:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800786a:	f242 7010 	movw	r0, #10000	; 0x2710
 800786e:	f7fd fdff 	bl	8005470 <slalomF>
		slalomR(V45_4_DEGACCEL, V45_4_OMEGA, 45, SPEED_HIGH_HIGH);
 8007872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007876:	222d      	movs	r2, #45	; 0x2d
 8007878:	f44f 7116 	mov.w	r1, #600	; 0x258
 800787c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007880:	f7fd fe72 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007884:	2103      	movs	r1, #3
 8007886:	20ff      	movs	r0, #255	; 0xff
 8007888:	f007 fffa 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800788c:	4b22      	ldr	r3, [pc, #136]	; (8007918 <v_L45+0x324>)
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007894:	b2db      	uxtb	r3, r3
 8007896:	3301      	adds	r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	bfb8      	it	lt
 80078a0:	425b      	neglt	r3, r3
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	b2d9      	uxtb	r1, r3
 80078a8:	4a1b      	ldr	r2, [pc, #108]	; (8007918 <v_L45+0x324>)
 80078aa:	8813      	ldrh	r3, [r2, #0]
 80078ac:	f361 03c3 	bfi	r3, r1, #3, #1
 80078b0:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80078b2:	4b19      	ldr	r3, [pc, #100]	; (8007918 <v_L45+0x324>)
 80078b4:	881b      	ldrh	r3, [r3, #0]
 80078b6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d107      	bne.n	80078d0 <v_L45+0x2dc>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB);
 80078c0:	223a      	movs	r2, #58	; 0x3a
 80078c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80078c6:	f242 7010 	movw	r0, #10000	; 0x2710
 80078ca:	f7fd ff71 	bl	80057b0 <slalomB>
}
 80078ce:	e067      	b.n	80079a0 <v_L45+0x3ac>
			slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_B);
 80078d0:	223a      	movs	r2, #58	; 0x3a
 80078d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80078d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80078da:	f7fd ff69 	bl	80057b0 <slalomB>
}
 80078de:	e05f      	b.n	80079a0 <v_L45+0x3ac>
	}else if(run_mode == 5){
 80078e0:	4b0c      	ldr	r3, [pc, #48]	; (8007914 <v_L45+0x320>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b05      	cmp	r3, #5
 80078e8:	d15a      	bne.n	80079a0 <v_L45+0x3ac>
		if(!MF2.FLAG.V){
 80078ea:	4b0b      	ldr	r3, [pc, #44]	; (8007918 <v_L45+0x324>)
 80078ec:	881b      	ldrh	r3, [r3, #0]
 80078ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d111      	bne.n	800791c <v_L45+0x328>
			slalomF(10000, SPEED_5, V45_5_OFFSET_F, NO_WALL, NO_WALL);
 80078f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8007902:	2218      	movs	r2, #24
 8007904:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007908:	f242 7010 	movw	r0, #10000	; 0x2710
 800790c:	f7fd fdb0 	bl	8005470 <slalomF>
 8007910:	e010      	b.n	8007934 <v_L45+0x340>
 8007912:	bf00      	nop
 8007914:	20000456 	.word	0x20000456
 8007918:	20000f64 	.word	0x20000f64
			slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 800791c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	f241 3388 	movw	r3, #5000	; 0x1388
 8007926:	2214      	movs	r2, #20
 8007928:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800792c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007930:	f7fd fd9e 	bl	8005470 <slalomF>
		slalomR(V45_5_DEGACCEL, V45_5_OMEGA, 45, SPEED_5);
 8007934:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007938:	222d      	movs	r2, #45	; 0x2d
 800793a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800793e:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8007942:	f7fd fe11 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007946:	2103      	movs	r1, #3
 8007948:	20ff      	movs	r0, #255	; 0xff
 800794a:	f007 ff99 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800794e:	4b16      	ldr	r3, [pc, #88]	; (80079a8 <v_L45+0x3b4>)
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007956:	b2db      	uxtb	r3, r3
 8007958:	3301      	adds	r3, #1
 800795a:	2b00      	cmp	r3, #0
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	bfb8      	it	lt
 8007962:	425b      	neglt	r3, r3
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	b2d9      	uxtb	r1, r3
 800796a:	4a0f      	ldr	r2, [pc, #60]	; (80079a8 <v_L45+0x3b4>)
 800796c:	8813      	ldrh	r3, [r2, #0]
 800796e:	f361 03c3 	bfi	r3, r1, #3, #1
 8007972:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8007974:	4b0c      	ldr	r3, [pc, #48]	; (80079a8 <v_L45+0x3b4>)
 8007976:	881b      	ldrh	r3, [r3, #0]
 8007978:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d107      	bne.n	8007992 <v_L45+0x39e>
			slalomB(10000, SPEED_5, V45_5_OFFSET_VB);
 8007982:	223a      	movs	r2, #58	; 0x3a
 8007984:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007988:	f242 7010 	movw	r0, #10000	; 0x2710
 800798c:	f7fd ff10 	bl	80057b0 <slalomB>
}
 8007990:	e006      	b.n	80079a0 <v_L45+0x3ac>
			slalomB(10000, SPEED_5, V45_5_OFFSET_B);
 8007992:	223d      	movs	r2, #61	; 0x3d
 8007994:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007998:	f242 7010 	movw	r0, #10000	; 0x2710
 800799c:	f7fd ff08 	bl	80057b0 <slalomB>
}
 80079a0:	bf00      	nop
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	20000f64 	.word	0x20000f64

080079ac <v_R45D>:
//v_R45D
//a区画中心から右に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45D(void){
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 80079b2:	2005      	movs	r0, #5
 80079b4:	f009 fdee 	bl	8011594 <full_led_write>
	if(run_mode == LOW){
 80079b8:	4b9e      	ldr	r3, [pc, #632]	; (8007c34 <v_R45D+0x288>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d139      	bne.n	8007a36 <v_R45D+0x8a>
		slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 80079c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80079cc:	2255      	movs	r2, #85	; 0x55
 80079ce:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80079d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80079d6:	f7fd fd4b 	bl	8005470 <slalomF>
		slalomR(-V45_DEGACCEL, -V45_OMEGA, -45, SPEED_LOW);
 80079da:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80079de:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80079e2:	4995      	ldr	r1, [pc, #596]	; (8007c38 <v_R45D+0x28c>)
 80079e4:	4895      	ldr	r0, [pc, #596]	; (8007c3c <v_R45D+0x290>)
 80079e6:	f7fd fdbf 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80079ea:	2103      	movs	r1, #3
 80079ec:	2001      	movs	r0, #1
 80079ee:	f007 ff47 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80079f2:	4b93      	ldr	r3, [pc, #588]	; (8007c40 <v_R45D+0x294>)
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	3301      	adds	r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	bfb8      	it	lt
 8007a06:	425b      	neglt	r3, r3
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	b2d9      	uxtb	r1, r3
 8007a0e:	4a8c      	ldr	r2, [pc, #560]	; (8007c40 <v_R45D+0x294>)
 8007a10:	8813      	ldrh	r3, [r2, #0]
 8007a12:	f361 03c3 	bfi	r3, r1, #3, #1
 8007a16:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V45_OFFSET_VB-30);
 8007a18:	220a      	movs	r2, #10
 8007a1a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007a1e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a22:	f7fd fec5 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 8007a26:	231e      	movs	r3, #30
 8007a28:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007a2c:	2114      	movs	r1, #20
 8007a2e:	4885      	ldr	r0, [pc, #532]	; (8007c44 <v_R45D+0x298>)
 8007a30:	f7fd fb46 	bl	80050c0 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8007a34:	e0fa      	b.n	8007c2c <v_R45D+0x280>
	}else if(run_mode == MIDDLE){
 8007a36:	4b7f      	ldr	r3, [pc, #508]	; (8007c34 <v_R45D+0x288>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d139      	bne.n	8007ab4 <v_R45D+0x108>
		slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 8007a40:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a4a:	2249      	movs	r2, #73	; 0x49
 8007a4c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007a50:	f242 7010 	movw	r0, #10000	; 0x2710
 8007a54:	f7fd fd0c 	bl	8005470 <slalomF>
		slalomR(-V45_2_DEGACCEL, -V45_2_OMEGA, -45, SPEED_MIDDLE);
 8007a58:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007a5c:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007a60:	4979      	ldr	r1, [pc, #484]	; (8007c48 <v_R45D+0x29c>)
 8007a62:	487a      	ldr	r0, [pc, #488]	; (8007c4c <v_R45D+0x2a0>)
 8007a64:	f7fd fd80 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007a68:	2103      	movs	r1, #3
 8007a6a:	2001      	movs	r0, #1
 8007a6c:	f007 ff08 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007a70:	4b73      	ldr	r3, [pc, #460]	; (8007c40 <v_R45D+0x294>)
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	bfb8      	it	lt
 8007a84:	425b      	neglt	r3, r3
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	b2d9      	uxtb	r1, r3
 8007a8c:	4a6c      	ldr	r2, [pc, #432]	; (8007c40 <v_R45D+0x294>)
 8007a8e:	8813      	ldrh	r3, [r2, #0]
 8007a90:	f361 03c3 	bfi	r3, r1, #3, #1
 8007a94:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB-30);
 8007a96:	2219      	movs	r2, #25
 8007a98:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007a9c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007aa0:	f7fd fe86 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 8007aa4:	231e      	movs	r3, #30
 8007aa6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007aaa:	2114      	movs	r1, #20
 8007aac:	4865      	ldr	r0, [pc, #404]	; (8007c44 <v_R45D+0x298>)
 8007aae:	f7fd fb07 	bl	80050c0 <driveD>
}
 8007ab2:	e0bb      	b.n	8007c2c <v_R45D+0x280>
	}else if(run_mode == HIGH){
 8007ab4:	4b5f      	ldr	r3, [pc, #380]	; (8007c34 <v_R45D+0x288>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	d139      	bne.n	8007b32 <v_R45D+0x186>
		slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 8007abe:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ac8:	2237      	movs	r2, #55	; 0x37
 8007aca:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007ace:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ad2:	f7fd fccd 	bl	8005470 <slalomF>
		slalomR(-V45_3_DEGACCEL, -V45_3_OMEGA, -45, SPEED_HIGH);
 8007ad6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007ada:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007ade:	495a      	ldr	r1, [pc, #360]	; (8007c48 <v_R45D+0x29c>)
 8007ae0:	485a      	ldr	r0, [pc, #360]	; (8007c4c <v_R45D+0x2a0>)
 8007ae2:	f7fd fd41 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007ae6:	2103      	movs	r1, #3
 8007ae8:	2001      	movs	r0, #1
 8007aea:	f007 fec9 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007aee:	4b54      	ldr	r3, [pc, #336]	; (8007c40 <v_R45D+0x294>)
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	3301      	adds	r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	bfb8      	it	lt
 8007b02:	425b      	neglt	r3, r3
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	b2d9      	uxtb	r1, r3
 8007b0a:	4a4d      	ldr	r2, [pc, #308]	; (8007c40 <v_R45D+0x294>)
 8007b0c:	8813      	ldrh	r3, [r2, #0]
 8007b0e:	f361 03c3 	bfi	r3, r1, #3, #1
 8007b12:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB-30);
 8007b14:	2215      	movs	r2, #21
 8007b16:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007b1a:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b1e:	f7fd fe47 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8007b22:	231e      	movs	r3, #30
 8007b24:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007b28:	2114      	movs	r1, #20
 8007b2a:	4846      	ldr	r0, [pc, #280]	; (8007c44 <v_R45D+0x298>)
 8007b2c:	f7fd fac8 	bl	80050c0 <driveD>
}
 8007b30:	e07c      	b.n	8007c2c <v_R45D+0x280>
	}else if(run_mode == HIGH_HIGH){
 8007b32:	4b40      	ldr	r3, [pc, #256]	; (8007c34 <v_R45D+0x288>)
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b04      	cmp	r3, #4
 8007b3a:	d139      	bne.n	8007bb0 <v_R45D+0x204>
		slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 8007b3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b46:	2214      	movs	r2, #20
 8007b48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007b4c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b50:	f7fd fc8e 	bl	8005470 <slalomF>
		slalomR(-V45_4_DEGACCEL, -V45_4_OMEGA, -45, SPEED_HIGH_HIGH);
 8007b54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b58:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007b5c:	493c      	ldr	r1, [pc, #240]	; (8007c50 <v_R45D+0x2a4>)
 8007b5e:	483d      	ldr	r0, [pc, #244]	; (8007c54 <v_R45D+0x2a8>)
 8007b60:	f7fd fd02 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007b64:	2103      	movs	r1, #3
 8007b66:	2001      	movs	r0, #1
 8007b68:	f007 fe8a 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007b6c:	4b34      	ldr	r3, [pc, #208]	; (8007c40 <v_R45D+0x294>)
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	3301      	adds	r3, #1
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	bfb8      	it	lt
 8007b80:	425b      	neglt	r3, r3
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	b2d9      	uxtb	r1, r3
 8007b88:	4a2d      	ldr	r2, [pc, #180]	; (8007c40 <v_R45D+0x294>)
 8007b8a:	8813      	ldrh	r3, [r2, #0]
 8007b8c:	f361 03c3 	bfi	r3, r1, #3, #1
 8007b90:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB-30);
 8007b92:	221c      	movs	r2, #28
 8007b94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007b98:	f242 7010 	movw	r0, #10000	; 0x2710
 8007b9c:	f7fd fe08 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH_HIGH, 30);
 8007ba0:	231e      	movs	r3, #30
 8007ba2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ba6:	2114      	movs	r1, #20
 8007ba8:	4826      	ldr	r0, [pc, #152]	; (8007c44 <v_R45D+0x298>)
 8007baa:	f7fd fa89 	bl	80050c0 <driveD>
}
 8007bae:	e03d      	b.n	8007c2c <v_R45D+0x280>
	}else if(run_mode == 5){
 8007bb0:	4b20      	ldr	r3, [pc, #128]	; (8007c34 <v_R45D+0x288>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b05      	cmp	r3, #5
 8007bb8:	d138      	bne.n	8007c2c <v_R45D+0x280>
		slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8007bba:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bc4:	2214      	movs	r2, #20
 8007bc6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007bca:	f242 7010 	movw	r0, #10000	; 0x2710
 8007bce:	f7fd fc4f 	bl	8005470 <slalomF>
		slalomR(-V45_5_DEGACCEL, -V45_5_OMEGA, -45, SPEED_5);
 8007bd2:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007bd6:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8007bda:	491f      	ldr	r1, [pc, #124]	; (8007c58 <v_R45D+0x2ac>)
 8007bdc:	481f      	ldr	r0, [pc, #124]	; (8007c5c <v_R45D+0x2b0>)
 8007bde:	f7fd fcc3 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007be2:	2103      	movs	r1, #3
 8007be4:	2001      	movs	r0, #1
 8007be6:	f007 fe4b 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007bea:	4b15      	ldr	r3, [pc, #84]	; (8007c40 <v_R45D+0x294>)
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	bfb8      	it	lt
 8007bfe:	425b      	neglt	r3, r3
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	b2d9      	uxtb	r1, r3
 8007c06:	4a0e      	ldr	r2, [pc, #56]	; (8007c40 <v_R45D+0x294>)
 8007c08:	8813      	ldrh	r3, [r2, #0]
 8007c0a:	f361 03c3 	bfi	r3, r1, #3, #1
 8007c0e:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
 8007c10:	221c      	movs	r2, #28
 8007c12:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007c16:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c1a:	f7fd fdc9 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8007c1e:	231e      	movs	r3, #30
 8007c20:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8007c24:	2114      	movs	r1, #20
 8007c26:	4807      	ldr	r0, [pc, #28]	; (8007c44 <v_R45D+0x298>)
 8007c28:	f7fd fa4a 	bl	80050c0 <driveD>
}
 8007c2c:	bf00      	nop
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	20000456 	.word	0x20000456
 8007c38:	fffffed4 	.word	0xfffffed4
 8007c3c:	fffff448 	.word	0xfffff448
 8007c40:	20000f64 	.word	0x20000f64
 8007c44:	ffff8ad0 	.word	0xffff8ad0
 8007c48:	fffffe70 	.word	0xfffffe70
 8007c4c:	ffffe0c0 	.word	0xffffe0c0
 8007c50:	fffffda8 	.word	0xfffffda8
 8007c54:	ffffd8f0 	.word	0xffffd8f0
 8007c58:	fffffce0 	.word	0xfffffce0
 8007c5c:	ffffc180 	.word	0xffffc180

08007c60 <v_L45D>:
//v_L45D
//a区画中心から左に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45D(void){
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8007c66:	2006      	movs	r0, #6
 8007c68:	f009 fc94 	bl	8011594 <full_led_write>
	if(run_mode == LOW){
 8007c6c:	4ba0      	ldr	r3, [pc, #640]	; (8007ef0 <v_L45D+0x290>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d13a      	bne.n	8007cec <v_L45D+0x8c>
		slalomF(10000, SPEED_LOW, V45_OFFSET_VF, NO_WALL, NO_WALL);
 8007c76:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c80:	2255      	movs	r2, #85	; 0x55
 8007c82:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007c86:	f242 7010 	movw	r0, #10000	; 0x2710
 8007c8a:	f7fd fbf1 	bl	8005470 <slalomF>
		slalomR(V45_DEGACCEL, V45_OMEGA, 55, SPEED_LOW);
 8007c8e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007c92:	2237      	movs	r2, #55	; 0x37
 8007c94:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007c98:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007c9c:	f7fd fc64 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007ca0:	2103      	movs	r1, #3
 8007ca2:	20ff      	movs	r0, #255	; 0xff
 8007ca4:	f007 fdec 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007ca8:	4b92      	ldr	r3, [pc, #584]	; (8007ef4 <v_L45D+0x294>)
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	bfb8      	it	lt
 8007cbc:	425b      	neglt	r3, r3
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	b2d9      	uxtb	r1, r3
 8007cc4:	4a8b      	ldr	r2, [pc, #556]	; (8007ef4 <v_L45D+0x294>)
 8007cc6:	8813      	ldrh	r3, [r2, #0]
 8007cc8:	f361 03c3 	bfi	r3, r1, #3, #1
 8007ccc:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V45_OFFSET_VB-30);
 8007cce:	220a      	movs	r2, #10
 8007cd0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007cd4:	f242 7010 	movw	r0, #10000	; 0x2710
 8007cd8:	f7fd fd6a 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 8007cdc:	231e      	movs	r3, #30
 8007cde:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007ce2:	2114      	movs	r1, #20
 8007ce4:	4884      	ldr	r0, [pc, #528]	; (8007ef8 <v_L45D+0x298>)
 8007ce6:	f7fd f9eb 	bl	80050c0 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8007cea:	e0fe      	b.n	8007eea <v_L45D+0x28a>
	}else if(run_mode == MIDDLE){
 8007cec:	4b80      	ldr	r3, [pc, #512]	; (8007ef0 <v_L45D+0x290>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d13a      	bne.n	8007d6c <v_L45D+0x10c>
		slalomF(10000, SPEED_MIDDLE, V45_2_OFFSET_VF, NO_WALL, NO_WALL);
 8007cf6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d00:	2249      	movs	r2, #73	; 0x49
 8007d02:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007d06:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d0a:	f7fd fbb1 	bl	8005470 <slalomF>
		slalomR(V45_2_DEGACCEL, V45_2_OMEGA, 45, SPEED_MIDDLE);
 8007d0e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007d12:	222d      	movs	r2, #45	; 0x2d
 8007d14:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007d18:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007d1c:	f7fd fc24 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007d20:	2103      	movs	r1, #3
 8007d22:	20ff      	movs	r0, #255	; 0xff
 8007d24:	f007 fdac 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007d28:	4b72      	ldr	r3, [pc, #456]	; (8007ef4 <v_L45D+0x294>)
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	3301      	adds	r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	bfb8      	it	lt
 8007d3c:	425b      	neglt	r3, r3
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	b2d9      	uxtb	r1, r3
 8007d44:	4a6b      	ldr	r2, [pc, #428]	; (8007ef4 <v_L45D+0x294>)
 8007d46:	8813      	ldrh	r3, [r2, #0]
 8007d48:	f361 03c3 	bfi	r3, r1, #3, #1
 8007d4c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V45_2_OFFSET_VB-30);
 8007d4e:	2219      	movs	r2, #25
 8007d50:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007d54:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d58:	f7fd fd2a 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 8007d5c:	231e      	movs	r3, #30
 8007d5e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007d62:	2114      	movs	r1, #20
 8007d64:	4864      	ldr	r0, [pc, #400]	; (8007ef8 <v_L45D+0x298>)
 8007d66:	f7fd f9ab 	bl	80050c0 <driveD>
}
 8007d6a:	e0be      	b.n	8007eea <v_L45D+0x28a>
	}else if(run_mode == HIGH){
 8007d6c:	4b60      	ldr	r3, [pc, #384]	; (8007ef0 <v_L45D+0x290>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b03      	cmp	r3, #3
 8007d74:	d13a      	bne.n	8007dec <v_L45D+0x18c>
		slalomF(10000, SPEED_HIGH, V45_3_OFFSET_VF, NO_WALL, NO_WALL);
 8007d76:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d80:	2237      	movs	r2, #55	; 0x37
 8007d82:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007d86:	f242 7010 	movw	r0, #10000	; 0x2710
 8007d8a:	f7fd fb71 	bl	8005470 <slalomF>
		slalomR(V45_3_DEGACCEL, V45_3_OMEGA, 45, SPEED_HIGH);
 8007d8e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007d92:	222d      	movs	r2, #45	; 0x2d
 8007d94:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007d98:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007d9c:	f7fd fbe4 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007da0:	2103      	movs	r1, #3
 8007da2:	20ff      	movs	r0, #255	; 0xff
 8007da4:	f007 fd6c 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007da8:	4b52      	ldr	r3, [pc, #328]	; (8007ef4 <v_L45D+0x294>)
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	3301      	adds	r3, #1
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	bfb8      	it	lt
 8007dbc:	425b      	neglt	r3, r3
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	b2d9      	uxtb	r1, r3
 8007dc4:	4a4b      	ldr	r2, [pc, #300]	; (8007ef4 <v_L45D+0x294>)
 8007dc6:	8813      	ldrh	r3, [r2, #0]
 8007dc8:	f361 03c3 	bfi	r3, r1, #3, #1
 8007dcc:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V45_3_OFFSET_VB-30);
 8007dce:	2215      	movs	r2, #21
 8007dd0:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007dd4:	f242 7010 	movw	r0, #10000	; 0x2710
 8007dd8:	f7fd fcea 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8007ddc:	231e      	movs	r3, #30
 8007dde:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007de2:	2114      	movs	r1, #20
 8007de4:	4844      	ldr	r0, [pc, #272]	; (8007ef8 <v_L45D+0x298>)
 8007de6:	f7fd f96b 	bl	80050c0 <driveD>
}
 8007dea:	e07e      	b.n	8007eea <v_L45D+0x28a>
	}else if(run_mode == HIGH_HIGH){
 8007dec:	4b40      	ldr	r3, [pc, #256]	; (8007ef0 <v_L45D+0x290>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d13a      	bne.n	8007e6c <v_L45D+0x20c>
		slalomF(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VF, NO_WALL, NO_WALL);
 8007df6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e00:	2214      	movs	r2, #20
 8007e02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007e06:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e0a:	f7fd fb31 	bl	8005470 <slalomF>
		slalomR(V45_4_DEGACCEL, V45_4_OMEGA, 45, SPEED_HIGH_HIGH);
 8007e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e12:	222d      	movs	r2, #45	; 0x2d
 8007e14:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007e18:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e1c:	f7fd fba4 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007e20:	2103      	movs	r1, #3
 8007e22:	20ff      	movs	r0, #255	; 0xff
 8007e24:	f007 fd2c 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007e28:	4b32      	ldr	r3, [pc, #200]	; (8007ef4 <v_L45D+0x294>)
 8007e2a:	881b      	ldrh	r3, [r3, #0]
 8007e2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	3301      	adds	r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	bfb8      	it	lt
 8007e3c:	425b      	neglt	r3, r3
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	b2d9      	uxtb	r1, r3
 8007e44:	4a2b      	ldr	r2, [pc, #172]	; (8007ef4 <v_L45D+0x294>)
 8007e46:	8813      	ldrh	r3, [r2, #0]
 8007e48:	f361 03c3 	bfi	r3, r1, #3, #1
 8007e4c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V45_4_OFFSET_VB-30);
 8007e4e:	221c      	movs	r2, #28
 8007e50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007e54:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e58:	f7fd fcaa 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH_HIGH, 30);
 8007e5c:	231e      	movs	r3, #30
 8007e5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e62:	2114      	movs	r1, #20
 8007e64:	4824      	ldr	r0, [pc, #144]	; (8007ef8 <v_L45D+0x298>)
 8007e66:	f7fd f92b 	bl	80050c0 <driveD>
}
 8007e6a:	e03e      	b.n	8007eea <v_L45D+0x28a>
	}else if(run_mode == 5){
 8007e6c:	4b20      	ldr	r3, [pc, #128]	; (8007ef0 <v_L45D+0x290>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b05      	cmp	r3, #5
 8007e74:	d139      	bne.n	8007eea <v_L45D+0x28a>
		slalomF(10000, SPEED_5, V45_5_OFFSET_VF, NO_WALL, NO_WALL);
 8007e76:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e80:	2214      	movs	r2, #20
 8007e82:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007e86:	f242 7010 	movw	r0, #10000	; 0x2710
 8007e8a:	f7fd faf1 	bl	8005470 <slalomF>
		slalomR(V45_5_DEGACCEL, V45_5_OMEGA, 45, SPEED_5);
 8007e8e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007e92:	222d      	movs	r2, #45	; 0x2d
 8007e94:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007e98:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8007e9c:	f7fd fb64 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007ea0:	2103      	movs	r1, #3
 8007ea2:	20ff      	movs	r0, #255	; 0xff
 8007ea4:	f007 fcec 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8007ea8:	4b12      	ldr	r3, [pc, #72]	; (8007ef4 <v_L45D+0x294>)
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	bfb8      	it	lt
 8007ebc:	425b      	neglt	r3, r3
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	b2d9      	uxtb	r1, r3
 8007ec4:	4a0b      	ldr	r2, [pc, #44]	; (8007ef4 <v_L45D+0x294>)
 8007ec6:	8813      	ldrh	r3, [r2, #0]
 8007ec8:	f361 03c3 	bfi	r3, r1, #3, #1
 8007ecc:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V45_5_OFFSET_VB-30);
 8007ece:	221c      	movs	r2, #28
 8007ed0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007ed4:	f242 7010 	movw	r0, #10000	; 0x2710
 8007ed8:	f7fd fc6a 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8007edc:	231e      	movs	r3, #30
 8007ede:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8007ee2:	2114      	movs	r1, #20
 8007ee4:	4804      	ldr	r0, [pc, #16]	; (8007ef8 <v_L45D+0x298>)
 8007ee6:	f7fd f8eb 	bl	80050c0 <driveD>
}
 8007eea:	bf00      	nop
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	20000456 	.word	0x20000456
 8007ef4:	20000f64 	.word	0x20000f64
 8007ef8:	ffff8ad0 	.word	0xffff8ad0

08007efc <v_R90>:
//v_R90
// 柱中心から右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R90(void){
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8007f02:	2006      	movs	r0, #6
 8007f04:	f009 fb46 	bl	8011594 <full_led_write>
	if(run_mode == LOW){
 8007f08:	4b5d      	ldr	r3, [pc, #372]	; (8008080 <v_R90+0x184>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d11f      	bne.n	8007f52 <v_R90+0x56>
		slalomF(10000, SPEED_LOW, V90_OFFSET_F, NO_WALL, NO_WALL);
 8007f12:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f1c:	222d      	movs	r2, #45	; 0x2d
 8007f1e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007f22:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f26:	f7fd faa3 	bl	8005470 <slalomF>
		slalomR(-V90_DEGACCEL, -V90_OMEGA, -90, SPEED_LOW);
 8007f2a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007f2e:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8007f32:	4954      	ldr	r1, [pc, #336]	; (8008084 <v_R90+0x188>)
 8007f34:	4854      	ldr	r0, [pc, #336]	; (8008088 <v_R90+0x18c>)
 8007f36:	f7fd fb17 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007f3a:	2103      	movs	r1, #3
 8007f3c:	2002      	movs	r0, #2
 8007f3e:	f007 fc9f 	bl	800f880 <turn_dir>

		slalomB(10000, SPEED_LOW, V90_OFFSET_B);
 8007f42:	222d      	movs	r2, #45	; 0x2d
 8007f44:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007f48:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f4c:	f7fd fc30 	bl	80057b0 <slalomB>

		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
	}
}
 8007f50:	e092      	b.n	8008078 <v_R90+0x17c>
	}else if(run_mode == MIDDLE){
 8007f52:	4b4b      	ldr	r3, [pc, #300]	; (8008080 <v_R90+0x184>)
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d11f      	bne.n	8007f9c <v_R90+0xa0>
		slalomF(10000, SPEED_MIDDLE, V90_2_OFFSET_F, NO_WALL, NO_WALL);
 8007f5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f66:	223a      	movs	r2, #58	; 0x3a
 8007f68:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007f6c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f70:	f7fd fa7e 	bl	8005470 <slalomF>
		slalomR(-V90_2_DEGACCEL, -V90_2_OMEGA, -90, SPEED_MIDDLE);
 8007f74:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007f78:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8007f7c:	4943      	ldr	r1, [pc, #268]	; (800808c <v_R90+0x190>)
 8007f7e:	4844      	ldr	r0, [pc, #272]	; (8008090 <v_R90+0x194>)
 8007f80:	f7fd faf2 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 8007f84:	2103      	movs	r1, #3
 8007f86:	2002      	movs	r0, #2
 8007f88:	f007 fc7a 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, V90_2_OFFSET_B);
 8007f8c:	2252      	movs	r2, #82	; 0x52
 8007f8e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007f92:	f242 7010 	movw	r0, #10000	; 0x2710
 8007f96:	f7fd fc0b 	bl	80057b0 <slalomB>
}
 8007f9a:	e06d      	b.n	8008078 <v_R90+0x17c>
	}else if(run_mode == HIGH){
 8007f9c:	4b38      	ldr	r3, [pc, #224]	; (8008080 <v_R90+0x184>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d11f      	bne.n	8007fe6 <v_R90+0xea>
		slalomF(10000, SPEED_HIGH, V90_3_OFFSET_F, NO_WALL, NO_WALL);
 8007fa6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	f241 3388 	movw	r3, #5000	; 0x1388
 8007fb0:	2223      	movs	r2, #35	; 0x23
 8007fb2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007fb6:	f242 7010 	movw	r0, #10000	; 0x2710
 8007fba:	f7fd fa59 	bl	8005470 <slalomF>
		slalomR(-V90_3_DEGACCEL, -V90_3_OMEGA, -90, SPEED_HIGH);
 8007fbe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007fc2:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8007fc6:	4931      	ldr	r1, [pc, #196]	; (800808c <v_R90+0x190>)
 8007fc8:	4831      	ldr	r0, [pc, #196]	; (8008090 <v_R90+0x194>)
 8007fca:	f7fd facd 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 8007fce:	2103      	movs	r1, #3
 8007fd0:	2002      	movs	r0, #2
 8007fd2:	f007 fc55 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_HIGH, V90_3_OFFSET_B);
 8007fd6:	2241      	movs	r2, #65	; 0x41
 8007fd8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007fdc:	f242 7010 	movw	r0, #10000	; 0x2710
 8007fe0:	f7fd fbe6 	bl	80057b0 <slalomB>
}
 8007fe4:	e048      	b.n	8008078 <v_R90+0x17c>
	}else if(run_mode == HIGH_HIGH){
 8007fe6:	4b26      	ldr	r3, [pc, #152]	; (8008080 <v_R90+0x184>)
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b04      	cmp	r3, #4
 8007fee:	d11f      	bne.n	8008030 <v_R90+0x134>
		slalomF(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_F, NO_WALL, NO_WALL);
 8007ff0:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ffa:	221e      	movs	r2, #30
 8007ffc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008000:	f242 7010 	movw	r0, #10000	; 0x2710
 8008004:	f7fd fa34 	bl	8005470 <slalomF>
		slalomR(-V90_4_DEGACCEL, -V90_4_OMEGA, -90, SPEED_HIGH_HIGH);
 8008008:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800800c:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8008010:	491e      	ldr	r1, [pc, #120]	; (800808c <v_R90+0x190>)
 8008012:	4820      	ldr	r0, [pc, #128]	; (8008094 <v_R90+0x198>)
 8008014:	f7fd faa8 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 8008018:	2103      	movs	r1, #3
 800801a:	2002      	movs	r0, #2
 800801c:	f007 fc30 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_B);
 8008020:	221e      	movs	r2, #30
 8008022:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008026:	f242 7010 	movw	r0, #10000	; 0x2710
 800802a:	f7fd fbc1 	bl	80057b0 <slalomB>
}
 800802e:	e023      	b.n	8008078 <v_R90+0x17c>
	}else if(run_mode == 5){
 8008030:	4b13      	ldr	r3, [pc, #76]	; (8008080 <v_R90+0x184>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b05      	cmp	r3, #5
 8008038:	d11e      	bne.n	8008078 <v_R90+0x17c>
		slalomF(10000, SPEED_5, V90_5_OFFSET_F, NO_WALL, NO_WALL);
 800803a:	f241 3388 	movw	r3, #5000	; 0x1388
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	f241 3388 	movw	r3, #5000	; 0x1388
 8008044:	2214      	movs	r2, #20
 8008046:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800804a:	f242 7010 	movw	r0, #10000	; 0x2710
 800804e:	f7fd fa0f 	bl	8005470 <slalomF>
		slalomR(-V90_5_DEGACCEL, -V90_5_OMEGA, -90, SPEED_5);
 8008052:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008056:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800805a:	490f      	ldr	r1, [pc, #60]	; (8008098 <v_R90+0x19c>)
 800805c:	480d      	ldr	r0, [pc, #52]	; (8008094 <v_R90+0x198>)
 800805e:	f7fd fa83 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 8008062:	2103      	movs	r1, #3
 8008064:	2002      	movs	r0, #2
 8008066:	f007 fc0b 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
 800806a:	2214      	movs	r2, #20
 800806c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008070:	f242 7010 	movw	r0, #10000	; 0x2710
 8008074:	f7fd fb9c 	bl	80057b0 <slalomB>
}
 8008078:	bf00      	nop
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	20000456 	.word	0x20000456
 8008084:	fffffea2 	.word	0xfffffea2
 8008088:	fffff254 	.word	0xfffff254
 800808c:	fffffce0 	.word	0xfffffce0
 8008090:	ffffd8f0 	.word	0xffffd8f0
 8008094:	ffffc180 	.word	0xffffc180
 8008098:	fffffc18 	.word	0xfffffc18

0800809c <v_L90>:
//v_L90
// 柱中心から左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L90(void){
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 80080a2:	2005      	movs	r0, #5
 80080a4:	f009 fa76 	bl	8011594 <full_led_write>
	if(run_mode == LOW){
 80080a8:	4b5f      	ldr	r3, [pc, #380]	; (8008228 <v_L90+0x18c>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d120      	bne.n	80080f4 <v_L90+0x58>
		slalomF(10000, SPEED_LOW, V90_OFFSET_F, NO_WALL, NO_WALL);
 80080b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80080bc:	222d      	movs	r2, #45	; 0x2d
 80080be:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80080c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80080c6:	f7fd f9d3 	bl	8005470 <slalomF>
		slalomR(V90_DEGACCEL, V90_OMEGA, 90, SPEED_LOW);
 80080ca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80080ce:	225a      	movs	r2, #90	; 0x5a
 80080d0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80080d4:	f640 50ac 	movw	r0, #3500	; 0xdac
 80080d8:	f7fd fa46 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80080dc:	2103      	movs	r1, #3
 80080de:	20fe      	movs	r0, #254	; 0xfe
 80080e0:	f007 fbce 	bl	800f880 <turn_dir>

		slalomB(10000, SPEED_LOW, V90_OFFSET_B);
 80080e4:	222d      	movs	r2, #45	; 0x2d
 80080e6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80080ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80080ee:	f7fd fb5f 	bl	80057b0 <slalomB>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
	}
}
 80080f2:	e096      	b.n	8008222 <v_L90+0x186>
	}else if(run_mode == MIDDLE){
 80080f4:	4b4c      	ldr	r3, [pc, #304]	; (8008228 <v_L90+0x18c>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d120      	bne.n	8008140 <v_L90+0xa4>
		slalomF(10000, SPEED_MIDDLE, V90_2_OFFSET_F, NO_WALL, NO_WALL);
 80080fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	f241 3388 	movw	r3, #5000	; 0x1388
 8008108:	223a      	movs	r2, #58	; 0x3a
 800810a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800810e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008112:	f7fd f9ad 	bl	8005470 <slalomF>
		slalomR(V90_2_DEGACCEL, V90_2_OMEGA, 90, SPEED_MIDDLE);
 8008116:	f44f 7316 	mov.w	r3, #600	; 0x258
 800811a:	225a      	movs	r2, #90	; 0x5a
 800811c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008120:	f242 7010 	movw	r0, #10000	; 0x2710
 8008124:	f7fd fa20 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008128:	2103      	movs	r1, #3
 800812a:	20fe      	movs	r0, #254	; 0xfe
 800812c:	f007 fba8 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_MIDDLE, V90_2_OFFSET_B);
 8008130:	2252      	movs	r2, #82	; 0x52
 8008132:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008136:	f242 7010 	movw	r0, #10000	; 0x2710
 800813a:	f7fd fb39 	bl	80057b0 <slalomB>
}
 800813e:	e070      	b.n	8008222 <v_L90+0x186>
	}else if(run_mode == HIGH){
 8008140:	4b39      	ldr	r3, [pc, #228]	; (8008228 <v_L90+0x18c>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b03      	cmp	r3, #3
 8008148:	d120      	bne.n	800818c <v_L90+0xf0>
		slalomF(10000, SPEED_HIGH, V90_3_OFFSET_F, NO_WALL, NO_WALL);
 800814a:	f241 3388 	movw	r3, #5000	; 0x1388
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	f241 3388 	movw	r3, #5000	; 0x1388
 8008154:	2223      	movs	r2, #35	; 0x23
 8008156:	f44f 7148 	mov.w	r1, #800	; 0x320
 800815a:	f242 7010 	movw	r0, #10000	; 0x2710
 800815e:	f7fd f987 	bl	8005470 <slalomF>
		slalomR(V90_3_DEGACCEL, V90_3_OMEGA, 90, SPEED_HIGH);
 8008162:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008166:	225a      	movs	r2, #90	; 0x5a
 8008168:	f44f 7148 	mov.w	r1, #800	; 0x320
 800816c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008170:	f7fd f9fa 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008174:	2103      	movs	r1, #3
 8008176:	20fe      	movs	r0, #254	; 0xfe
 8008178:	f007 fb82 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_HIGH, V90_3_OFFSET_B);
 800817c:	2241      	movs	r2, #65	; 0x41
 800817e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008182:	f242 7010 	movw	r0, #10000	; 0x2710
 8008186:	f7fd fb13 	bl	80057b0 <slalomB>
}
 800818a:	e04a      	b.n	8008222 <v_L90+0x186>
	}else if(run_mode == HIGH_HIGH){
 800818c:	4b26      	ldr	r3, [pc, #152]	; (8008228 <v_L90+0x18c>)
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b04      	cmp	r3, #4
 8008194:	d120      	bne.n	80081d8 <v_L90+0x13c>
		slalomF(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_F, NO_WALL, NO_WALL);
 8008196:	f241 3388 	movw	r3, #5000	; 0x1388
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	f241 3388 	movw	r3, #5000	; 0x1388
 80081a0:	221e      	movs	r2, #30
 80081a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80081a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80081aa:	f7fd f961 	bl	8005470 <slalomF>
		slalomR(V90_4_DEGACCEL, V90_4_OMEGA, 90, SPEED_HIGH_HIGH);
 80081ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80081b2:	225a      	movs	r2, #90	; 0x5a
 80081b4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80081b8:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80081bc:	f7fd f9d4 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80081c0:	2103      	movs	r1, #3
 80081c2:	20fe      	movs	r0, #254	; 0xfe
 80081c4:	f007 fb5c 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_HIGH_HIGH, V90_4_OFFSET_B);
 80081c8:	221e      	movs	r2, #30
 80081ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80081ce:	f242 7010 	movw	r0, #10000	; 0x2710
 80081d2:	f7fd faed 	bl	80057b0 <slalomB>
}
 80081d6:	e024      	b.n	8008222 <v_L90+0x186>
	}else if(run_mode == 5){
 80081d8:	4b13      	ldr	r3, [pc, #76]	; (8008228 <v_L90+0x18c>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b05      	cmp	r3, #5
 80081e0:	d11f      	bne.n	8008222 <v_L90+0x186>
		slalomF(10000, SPEED_5, V90_5_OFFSET_F, NO_WALL, NO_WALL);
 80081e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80081ec:	2214      	movs	r2, #20
 80081ee:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80081f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80081f6:	f7fd f93b 	bl	8005470 <slalomF>
		slalomR(V90_5_DEGACCEL, V90_5_OMEGA, 90, SPEED_5);
 80081fa:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80081fe:	225a      	movs	r2, #90	; 0x5a
 8008200:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008204:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8008208:	f7fd f9ae 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800820c:	2103      	movs	r1, #3
 800820e:	20fe      	movs	r0, #254	; 0xfe
 8008210:	f007 fb36 	bl	800f880 <turn_dir>
		slalomB(10000, SPEED_5, V90_5_OFFSET_B);
 8008214:	2214      	movs	r2, #20
 8008216:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800821a:	f242 7010 	movw	r0, #10000	; 0x2710
 800821e:	f7fd fac7 	bl	80057b0 <slalomB>
}
 8008222:	bf00      	nop
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	20000456 	.word	0x20000456

0800822c <v_R135>:
//v_R135
// 区画中心から右に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135(void){
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8008232:	2006      	movs	r0, #6
 8008234:	f009 f9ae 	bl	8011594 <full_led_write>
	if(run_mode == LOW){
 8008238:	4bc2      	ldr	r3, [pc, #776]	; (8008544 <v_R135+0x318>)
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b01      	cmp	r3, #1
 8008240:	d155      	bne.n	80082ee <v_R135+0xc2>
		if(!MF2.FLAG.V){
 8008242:	4bc1      	ldr	r3, [pc, #772]	; (8008548 <v_R135+0x31c>)
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10c      	bne.n	800826a <v_R135+0x3e>
			slalomF(10000, SPEED_LOW, V135_OFFSET_F, NO_WALL, NO_WALL);
 8008250:	f241 3388 	movw	r3, #5000	; 0x1388
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	f241 3388 	movw	r3, #5000	; 0x1388
 800825a:	2244      	movs	r2, #68	; 0x44
 800825c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008260:	f242 7010 	movw	r0, #10000	; 0x2710
 8008264:	f7fd f904 	bl	8005470 <slalomF>
 8008268:	e00b      	b.n	8008282 <v_R135+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 800826a:	f241 3388 	movw	r3, #5000	; 0x1388
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	f241 3388 	movw	r3, #5000	; 0x1388
 8008274:	223a      	movs	r2, #58	; 0x3a
 8008276:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800827a:	f242 7010 	movw	r0, #10000	; 0x2710
 800827e:	f7fd f8f7 	bl	8005470 <slalomF>
		}
		slalomR(-V135_DEGACCEL, -V135_OMEGA, -135, SPEED_LOW);
 8008282:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008286:	f06f 0286 	mvn.w	r2, #134	; 0x86
 800828a:	49b0      	ldr	r1, [pc, #704]	; (800854c <v_R135+0x320>)
 800828c:	48b0      	ldr	r0, [pc, #704]	; (8008550 <v_R135+0x324>)
 800828e:	f7fd f96b 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008292:	2103      	movs	r1, #3
 8008294:	2003      	movs	r0, #3
 8008296:	f007 faf3 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800829a:	4bab      	ldr	r3, [pc, #684]	; (8008548 <v_R135+0x31c>)
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	3301      	adds	r3, #1
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	bfb8      	it	lt
 80082ae:	425b      	neglt	r3, r3
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	b2d9      	uxtb	r1, r3
 80082b6:	4aa4      	ldr	r2, [pc, #656]	; (8008548 <v_R135+0x31c>)
 80082b8:	8813      	ldrh	r3, [r2, #0]
 80082ba:	f361 03c3 	bfi	r3, r1, #3, #1
 80082be:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 80082c0:	4ba1      	ldr	r3, [pc, #644]	; (8008548 <v_R135+0x31c>)
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d107      	bne.n	80082de <v_R135+0xb2>
			slalomB(10000, SPEED_LOW, V135_OFFSET_VB);
 80082ce:	2244      	movs	r2, #68	; 0x44
 80082d0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80082d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80082d8:	f7fd fa6a 	bl	80057b0 <slalomB>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
		}
	}
}
 80082dc:	e187      	b.n	80085ee <v_R135+0x3c2>
			slalomB(10000, SPEED_LOW, V135_OFFSET_B);
 80082de:	223a      	movs	r2, #58	; 0x3a
 80082e0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80082e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80082e8:	f7fd fa62 	bl	80057b0 <slalomB>
}
 80082ec:	e17f      	b.n	80085ee <v_R135+0x3c2>
	}else if(run_mode == MIDDLE){
 80082ee:	4b95      	ldr	r3, [pc, #596]	; (8008544 <v_R135+0x318>)
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d155      	bne.n	80083a4 <v_R135+0x178>
		if(!MF2.FLAG.V){
 80082f8:	4b93      	ldr	r3, [pc, #588]	; (8008548 <v_R135+0x31c>)
 80082fa:	881b      	ldrh	r3, [r3, #0]
 80082fc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10c      	bne.n	8008320 <v_R135+0xf4>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_F, NO_WALL, NO_WALL);
 8008306:	f241 3388 	movw	r3, #5000	; 0x1388
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008310:	2246      	movs	r2, #70	; 0x46
 8008312:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008316:	f242 7010 	movw	r0, #10000	; 0x2710
 800831a:	f7fd f8a9 	bl	8005470 <slalomF>
 800831e:	e00b      	b.n	8008338 <v_R135+0x10c>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008320:	f241 3388 	movw	r3, #5000	; 0x1388
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	f241 3388 	movw	r3, #5000	; 0x1388
 800832a:	2237      	movs	r2, #55	; 0x37
 800832c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008330:	f242 7010 	movw	r0, #10000	; 0x2710
 8008334:	f7fd f89c 	bl	8005470 <slalomF>
		slalomR(-V135_2_DEGACCEL, -V135_2_OMEGA, -135, SPEED_MIDDLE);
 8008338:	f44f 7316 	mov.w	r3, #600	; 0x258
 800833c:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008340:	4984      	ldr	r1, [pc, #528]	; (8008554 <v_R135+0x328>)
 8008342:	4885      	ldr	r0, [pc, #532]	; (8008558 <v_R135+0x32c>)
 8008344:	f7fd f910 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008348:	2103      	movs	r1, #3
 800834a:	2003      	movs	r0, #3
 800834c:	f007 fa98 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008350:	4b7d      	ldr	r3, [pc, #500]	; (8008548 <v_R135+0x31c>)
 8008352:	881b      	ldrh	r3, [r3, #0]
 8008354:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008358:	b2db      	uxtb	r3, r3
 800835a:	3301      	adds	r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	bfb8      	it	lt
 8008364:	425b      	neglt	r3, r3
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	b2d9      	uxtb	r1, r3
 800836c:	4a76      	ldr	r2, [pc, #472]	; (8008548 <v_R135+0x31c>)
 800836e:	8813      	ldrh	r3, [r2, #0]
 8008370:	f361 03c3 	bfi	r3, r1, #3, #1
 8008374:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008376:	4b74      	ldr	r3, [pc, #464]	; (8008548 <v_R135+0x31c>)
 8008378:	881b      	ldrh	r3, [r3, #0]
 800837a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d107      	bne.n	8008394 <v_R135+0x168>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB);
 8008384:	225f      	movs	r2, #95	; 0x5f
 8008386:	f44f 7116 	mov.w	r1, #600	; 0x258
 800838a:	f242 7010 	movw	r0, #10000	; 0x2710
 800838e:	f7fd fa0f 	bl	80057b0 <slalomB>
}
 8008392:	e12c      	b.n	80085ee <v_R135+0x3c2>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_B);
 8008394:	2250      	movs	r2, #80	; 0x50
 8008396:	f44f 7116 	mov.w	r1, #600	; 0x258
 800839a:	f242 7010 	movw	r0, #10000	; 0x2710
 800839e:	f7fd fa07 	bl	80057b0 <slalomB>
}
 80083a2:	e124      	b.n	80085ee <v_R135+0x3c2>
	}else if(run_mode == HIGH){
 80083a4:	4b67      	ldr	r3, [pc, #412]	; (8008544 <v_R135+0x318>)
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d155      	bne.n	800845a <v_R135+0x22e>
		if(!MF2.FLAG.V){
 80083ae:	4b66      	ldr	r3, [pc, #408]	; (8008548 <v_R135+0x31c>)
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10c      	bne.n	80083d6 <v_R135+0x1aa>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_F, NO_WALL, NO_WALL);
 80083bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80083c6:	2255      	movs	r2, #85	; 0x55
 80083c8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80083cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80083d0:	f7fd f84e 	bl	8005470 <slalomF>
 80083d4:	e00b      	b.n	80083ee <v_R135+0x1c2>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 80083d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80083e0:	224b      	movs	r2, #75	; 0x4b
 80083e2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80083e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80083ea:	f7fd f841 	bl	8005470 <slalomF>
		slalomR(-V135_3_DEGACCEL, -V135_3_OMEGA, -135, SPEED_HIGH);
 80083ee:	f44f 7348 	mov.w	r3, #800	; 0x320
 80083f2:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80083f6:	4959      	ldr	r1, [pc, #356]	; (800855c <v_R135+0x330>)
 80083f8:	4859      	ldr	r0, [pc, #356]	; (8008560 <v_R135+0x334>)
 80083fa:	f7fd f8b5 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80083fe:	2103      	movs	r1, #3
 8008400:	2003      	movs	r0, #3
 8008402:	f007 fa3d 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008406:	4b50      	ldr	r3, [pc, #320]	; (8008548 <v_R135+0x31c>)
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800840e:	b2db      	uxtb	r3, r3
 8008410:	3301      	adds	r3, #1
 8008412:	2b00      	cmp	r3, #0
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	bfb8      	it	lt
 800841a:	425b      	neglt	r3, r3
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	b2d9      	uxtb	r1, r3
 8008422:	4a49      	ldr	r2, [pc, #292]	; (8008548 <v_R135+0x31c>)
 8008424:	8813      	ldrh	r3, [r2, #0]
 8008426:	f361 03c3 	bfi	r3, r1, #3, #1
 800842a:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 800842c:	4b46      	ldr	r3, [pc, #280]	; (8008548 <v_R135+0x31c>)
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d107      	bne.n	800844a <v_R135+0x21e>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB);
 800843a:	2282      	movs	r2, #130	; 0x82
 800843c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008440:	f242 7010 	movw	r0, #10000	; 0x2710
 8008444:	f7fd f9b4 	bl	80057b0 <slalomB>
}
 8008448:	e0d1      	b.n	80085ee <v_R135+0x3c2>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_B);
 800844a:	2269      	movs	r2, #105	; 0x69
 800844c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008450:	f242 7010 	movw	r0, #10000	; 0x2710
 8008454:	f7fd f9ac 	bl	80057b0 <slalomB>
}
 8008458:	e0c9      	b.n	80085ee <v_R135+0x3c2>
	}else if(run_mode == HIGH_HIGH){
 800845a:	4b3a      	ldr	r3, [pc, #232]	; (8008544 <v_R135+0x318>)
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b04      	cmp	r3, #4
 8008462:	d155      	bne.n	8008510 <v_R135+0x2e4>
		if(!MF2.FLAG.V){
 8008464:	4b38      	ldr	r3, [pc, #224]	; (8008548 <v_R135+0x31c>)
 8008466:	881b      	ldrh	r3, [r3, #0]
 8008468:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10c      	bne.n	800848c <v_R135+0x260>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_F, NO_WALL, NO_WALL);
 8008472:	f241 3388 	movw	r3, #5000	; 0x1388
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	f241 3388 	movw	r3, #5000	; 0x1388
 800847c:	2243      	movs	r2, #67	; 0x43
 800847e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008482:	f242 7010 	movw	r0, #10000	; 0x2710
 8008486:	f7fc fff3 	bl	8005470 <slalomF>
 800848a:	e00b      	b.n	80084a4 <v_R135+0x278>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 800848c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	f241 3388 	movw	r3, #5000	; 0x1388
 8008496:	2243      	movs	r2, #67	; 0x43
 8008498:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800849c:	f242 7010 	movw	r0, #10000	; 0x2710
 80084a0:	f7fc ffe6 	bl	8005470 <slalomF>
		slalomR(-V135_4_DEGACCEL, -V135_4_OMEGA, -135, SPEED_HIGH_HIGH);
 80084a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084a8:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80084ac:	492d      	ldr	r1, [pc, #180]	; (8008564 <v_R135+0x338>)
 80084ae:	482e      	ldr	r0, [pc, #184]	; (8008568 <v_R135+0x33c>)
 80084b0:	f7fd f85a 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80084b4:	2103      	movs	r1, #3
 80084b6:	2003      	movs	r0, #3
 80084b8:	f007 f9e2 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80084bc:	4b22      	ldr	r3, [pc, #136]	; (8008548 <v_R135+0x31c>)
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	3301      	adds	r3, #1
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	bfb8      	it	lt
 80084d0:	425b      	neglt	r3, r3
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	b2d9      	uxtb	r1, r3
 80084d8:	4a1b      	ldr	r2, [pc, #108]	; (8008548 <v_R135+0x31c>)
 80084da:	8813      	ldrh	r3, [r2, #0]
 80084dc:	f361 03c3 	bfi	r3, r1, #3, #1
 80084e0:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80084e2:	4b19      	ldr	r3, [pc, #100]	; (8008548 <v_R135+0x31c>)
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d107      	bne.n	8008500 <v_R135+0x2d4>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB);
 80084f0:	2232      	movs	r2, #50	; 0x32
 80084f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80084f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80084fa:	f7fd f959 	bl	80057b0 <slalomB>
}
 80084fe:	e076      	b.n	80085ee <v_R135+0x3c2>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_B);
 8008500:	2232      	movs	r2, #50	; 0x32
 8008502:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008506:	f242 7010 	movw	r0, #10000	; 0x2710
 800850a:	f7fd f951 	bl	80057b0 <slalomB>
}
 800850e:	e06e      	b.n	80085ee <v_R135+0x3c2>
	}else if(run_mode == 5){
 8008510:	4b0c      	ldr	r3, [pc, #48]	; (8008544 <v_R135+0x318>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b05      	cmp	r3, #5
 8008518:	d169      	bne.n	80085ee <v_R135+0x3c2>
		if(!MF2.FLAG.V){
 800851a:	4b0b      	ldr	r3, [pc, #44]	; (8008548 <v_R135+0x31c>)
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b00      	cmp	r3, #0
 8008526:	d121      	bne.n	800856c <v_R135+0x340>
			slalomF(10000, SPEED_5, V135_5_OFFSET_F, NO_WALL, NO_WALL);
 8008528:	f241 3388 	movw	r3, #5000	; 0x1388
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008532:	2228      	movs	r2, #40	; 0x28
 8008534:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008538:	f242 7010 	movw	r0, #10000	; 0x2710
 800853c:	f7fc ff98 	bl	8005470 <slalomF>
 8008540:	e020      	b.n	8008584 <v_R135+0x358>
 8008542:	bf00      	nop
 8008544:	20000456 	.word	0x20000456
 8008548:	20000f64 	.word	0x20000f64
 800854c:	fffffed4 	.word	0xfffffed4
 8008550:	fffff448 	.word	0xfffff448
 8008554:	fffffe0c 	.word	0xfffffe0c
 8008558:	ffffec78 	.word	0xffffec78
 800855c:	fffffce0 	.word	0xfffffce0
 8008560:	ffffe0c0 	.word	0xffffe0c0
 8008564:	fffffc18 	.word	0xfffffc18
 8008568:	ffffd8f0 	.word	0xffffd8f0
			slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 800856c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	f241 3388 	movw	r3, #5000	; 0x1388
 8008576:	2243      	movs	r2, #67	; 0x43
 8008578:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800857c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008580:	f7fc ff76 	bl	8005470 <slalomF>
		slalomR(-V135_5_DEGACCEL, -V135_5_OMEGA, -135, SPEED_5);
 8008584:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008588:	f06f 0286 	mvn.w	r2, #134	; 0x86
 800858c:	4919      	ldr	r1, [pc, #100]	; (80085f4 <v_R135+0x3c8>)
 800858e:	481a      	ldr	r0, [pc, #104]	; (80085f8 <v_R135+0x3cc>)
 8008590:	f7fc ffea 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008594:	2103      	movs	r1, #3
 8008596:	2003      	movs	r0, #3
 8008598:	f007 f972 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800859c:	4b17      	ldr	r3, [pc, #92]	; (80085fc <v_R135+0x3d0>)
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	3301      	adds	r3, #1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	bfb8      	it	lt
 80085b0:	425b      	neglt	r3, r3
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	b2d9      	uxtb	r1, r3
 80085b8:	4a10      	ldr	r2, [pc, #64]	; (80085fc <v_R135+0x3d0>)
 80085ba:	8813      	ldrh	r3, [r2, #0]
 80085bc:	f361 03c3 	bfi	r3, r1, #3, #1
 80085c0:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80085c2:	4b0e      	ldr	r3, [pc, #56]	; (80085fc <v_R135+0x3d0>)
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d107      	bne.n	80085e0 <v_R135+0x3b4>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
 80085d0:	2232      	movs	r2, #50	; 0x32
 80085d2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80085d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80085da:	f7fd f8e9 	bl	80057b0 <slalomB>
}
 80085de:	e006      	b.n	80085ee <v_R135+0x3c2>
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
 80085e0:	2219      	movs	r2, #25
 80085e2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80085e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80085ea:	f7fd f8e1 	bl	80057b0 <slalomB>
}
 80085ee:	bf00      	nop
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	fffffc18 	.word	0xfffffc18
 80085f8:	ffffd120 	.word	0xffffd120
 80085fc:	20000f64 	.word	0x20000f64

08008600 <v_L135>:
//v_L135
// 区画中心から左に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135(void){
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8008606:	2005      	movs	r0, #5
 8008608:	f008 ffc4 	bl	8011594 <full_led_write>
	if(run_mode == LOW){
 800860c:	4bc4      	ldr	r3, [pc, #784]	; (8008920 <v_L135+0x320>)
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b01      	cmp	r3, #1
 8008614:	d156      	bne.n	80086c4 <v_L135+0xc4>
		if(!MF2.FLAG.V){
 8008616:	4bc3      	ldr	r3, [pc, #780]	; (8008924 <v_L135+0x324>)
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10c      	bne.n	800863e <v_L135+0x3e>
			slalomF(10000, SPEED_LOW, V135_OFFSET_F, NO_WALL, NO_WALL);
 8008624:	f241 3388 	movw	r3, #5000	; 0x1388
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	f241 3388 	movw	r3, #5000	; 0x1388
 800862e:	2244      	movs	r2, #68	; 0x44
 8008630:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008634:	f242 7010 	movw	r0, #10000	; 0x2710
 8008638:	f7fc ff1a 	bl	8005470 <slalomF>
 800863c:	e00b      	b.n	8008656 <v_L135+0x56>
		}else{
			slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 800863e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	f241 3388 	movw	r3, #5000	; 0x1388
 8008648:	223a      	movs	r2, #58	; 0x3a
 800864a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800864e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008652:	f7fc ff0d 	bl	8005470 <slalomF>
		}
		slalomR(V135_DEGACCEL, V135_OMEGA, 135, SPEED_LOW);
 8008656:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800865a:	2287      	movs	r2, #135	; 0x87
 800865c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008660:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008664:	f7fc ff80 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008668:	2103      	movs	r1, #3
 800866a:	20fd      	movs	r0, #253	; 0xfd
 800866c:	f007 f908 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008670:	4bac      	ldr	r3, [pc, #688]	; (8008924 <v_L135+0x324>)
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008678:	b2db      	uxtb	r3, r3
 800867a:	3301      	adds	r3, #1
 800867c:	2b00      	cmp	r3, #0
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	bfb8      	it	lt
 8008684:	425b      	neglt	r3, r3
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	b2d9      	uxtb	r1, r3
 800868c:	4aa5      	ldr	r2, [pc, #660]	; (8008924 <v_L135+0x324>)
 800868e:	8813      	ldrh	r3, [r2, #0]
 8008690:	f361 03c3 	bfi	r3, r1, #3, #1
 8008694:	8013      	strh	r3, [r2, #0]

		if(!MF2.FLAG.V){
 8008696:	4ba3      	ldr	r3, [pc, #652]	; (8008924 <v_L135+0x324>)
 8008698:	881b      	ldrh	r3, [r3, #0]
 800869a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d107      	bne.n	80086b4 <v_L135+0xb4>
			slalomB(10000, SPEED_LOW, V135_OFFSET_VB);
 80086a4:	2244      	movs	r2, #68	; 0x44
 80086a6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80086aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80086ae:	f7fd f87f 	bl	80057b0 <slalomB>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
		}else{
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
		}
	}
}
 80086b2:	e17b      	b.n	80089ac <v_L135+0x3ac>
			slalomB(10000, SPEED_LOW, V135_OFFSET_B);
 80086b4:	223a      	movs	r2, #58	; 0x3a
 80086b6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80086ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80086be:	f7fd f877 	bl	80057b0 <slalomB>
}
 80086c2:	e173      	b.n	80089ac <v_L135+0x3ac>
	}else if(run_mode == MIDDLE){
 80086c4:	4b96      	ldr	r3, [pc, #600]	; (8008920 <v_L135+0x320>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d156      	bne.n	800877c <v_L135+0x17c>
		if(!MF2.FLAG.V){
 80086ce:	4b95      	ldr	r3, [pc, #596]	; (8008924 <v_L135+0x324>)
 80086d0:	881b      	ldrh	r3, [r3, #0]
 80086d2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10c      	bne.n	80086f6 <v_L135+0xf6>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_F, NO_WALL, NO_WALL);
 80086dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80086e6:	2246      	movs	r2, #70	; 0x46
 80086e8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80086ec:	f242 7010 	movw	r0, #10000	; 0x2710
 80086f0:	f7fc febe 	bl	8005470 <slalomF>
 80086f4:	e00b      	b.n	800870e <v_L135+0x10e>
			slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 80086f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008700:	2237      	movs	r2, #55	; 0x37
 8008702:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008706:	f242 7010 	movw	r0, #10000	; 0x2710
 800870a:	f7fc feb1 	bl	8005470 <slalomF>
		slalomR(V135_2_DEGACCEL, V135_2_OMEGA, 135, SPEED_MIDDLE);
 800870e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008712:	2287      	movs	r2, #135	; 0x87
 8008714:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008718:	f241 3088 	movw	r0, #5000	; 0x1388
 800871c:	f7fc ff24 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008720:	2103      	movs	r1, #3
 8008722:	20fd      	movs	r0, #253	; 0xfd
 8008724:	f007 f8ac 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008728:	4b7e      	ldr	r3, [pc, #504]	; (8008924 <v_L135+0x324>)
 800872a:	881b      	ldrh	r3, [r3, #0]
 800872c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008730:	b2db      	uxtb	r3, r3
 8008732:	3301      	adds	r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	bfb8      	it	lt
 800873c:	425b      	neglt	r3, r3
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	b2d9      	uxtb	r1, r3
 8008744:	4a77      	ldr	r2, [pc, #476]	; (8008924 <v_L135+0x324>)
 8008746:	8813      	ldrh	r3, [r2, #0]
 8008748:	f361 03c3 	bfi	r3, r1, #3, #1
 800874c:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 800874e:	4b75      	ldr	r3, [pc, #468]	; (8008924 <v_L135+0x324>)
 8008750:	881b      	ldrh	r3, [r3, #0]
 8008752:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008756:	b2db      	uxtb	r3, r3
 8008758:	2b00      	cmp	r3, #0
 800875a:	d107      	bne.n	800876c <v_L135+0x16c>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB);
 800875c:	225f      	movs	r2, #95	; 0x5f
 800875e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008762:	f242 7010 	movw	r0, #10000	; 0x2710
 8008766:	f7fd f823 	bl	80057b0 <slalomB>
}
 800876a:	e11f      	b.n	80089ac <v_L135+0x3ac>
			slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_B);
 800876c:	2250      	movs	r2, #80	; 0x50
 800876e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008772:	f242 7010 	movw	r0, #10000	; 0x2710
 8008776:	f7fd f81b 	bl	80057b0 <slalomB>
}
 800877a:	e117      	b.n	80089ac <v_L135+0x3ac>
	}else if(run_mode == HIGH){
 800877c:	4b68      	ldr	r3, [pc, #416]	; (8008920 <v_L135+0x320>)
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b03      	cmp	r3, #3
 8008784:	d156      	bne.n	8008834 <v_L135+0x234>
		if(!MF2.FLAG.V){
 8008786:	4b67      	ldr	r3, [pc, #412]	; (8008924 <v_L135+0x324>)
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10c      	bne.n	80087ae <v_L135+0x1ae>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_F, NO_WALL, NO_WALL);
 8008794:	f241 3388 	movw	r3, #5000	; 0x1388
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	f241 3388 	movw	r3, #5000	; 0x1388
 800879e:	2255      	movs	r2, #85	; 0x55
 80087a0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80087a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80087a8:	f7fc fe62 	bl	8005470 <slalomF>
 80087ac:	e00b      	b.n	80087c6 <v_L135+0x1c6>
			slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 80087ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80087b8:	224b      	movs	r2, #75	; 0x4b
 80087ba:	f44f 7148 	mov.w	r1, #800	; 0x320
 80087be:	f242 7010 	movw	r0, #10000	; 0x2710
 80087c2:	f7fc fe55 	bl	8005470 <slalomF>
		slalomR(V135_3_DEGACCEL, V135_3_OMEGA, 135, SPEED_HIGH);
 80087c6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80087ca:	2287      	movs	r2, #135	; 0x87
 80087cc:	f44f 7148 	mov.w	r1, #800	; 0x320
 80087d0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80087d4:	f7fc fec8 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80087d8:	2103      	movs	r1, #3
 80087da:	20fd      	movs	r0, #253	; 0xfd
 80087dc:	f007 f850 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80087e0:	4b50      	ldr	r3, [pc, #320]	; (8008924 <v_L135+0x324>)
 80087e2:	881b      	ldrh	r3, [r3, #0]
 80087e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	3301      	adds	r3, #1
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	bfb8      	it	lt
 80087f4:	425b      	neglt	r3, r3
 80087f6:	f003 0301 	and.w	r3, r3, #1
 80087fa:	b2d9      	uxtb	r1, r3
 80087fc:	4a49      	ldr	r2, [pc, #292]	; (8008924 <v_L135+0x324>)
 80087fe:	8813      	ldrh	r3, [r2, #0]
 8008800:	f361 03c3 	bfi	r3, r1, #3, #1
 8008804:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008806:	4b47      	ldr	r3, [pc, #284]	; (8008924 <v_L135+0x324>)
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800880e:	b2db      	uxtb	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	d107      	bne.n	8008824 <v_L135+0x224>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB);
 8008814:	2282      	movs	r2, #130	; 0x82
 8008816:	f44f 7148 	mov.w	r1, #800	; 0x320
 800881a:	f242 7010 	movw	r0, #10000	; 0x2710
 800881e:	f7fc ffc7 	bl	80057b0 <slalomB>
}
 8008822:	e0c3      	b.n	80089ac <v_L135+0x3ac>
			slalomB(10000, SPEED_HIGH, V135_3_OFFSET_B);
 8008824:	2269      	movs	r2, #105	; 0x69
 8008826:	f44f 7148 	mov.w	r1, #800	; 0x320
 800882a:	f242 7010 	movw	r0, #10000	; 0x2710
 800882e:	f7fc ffbf 	bl	80057b0 <slalomB>
}
 8008832:	e0bb      	b.n	80089ac <v_L135+0x3ac>
	}else if(run_mode == HIGH_HIGH){
 8008834:	4b3a      	ldr	r3, [pc, #232]	; (8008920 <v_L135+0x320>)
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b04      	cmp	r3, #4
 800883c:	d156      	bne.n	80088ec <v_L135+0x2ec>
		if(!MF2.FLAG.V){
 800883e:	4b39      	ldr	r3, [pc, #228]	; (8008924 <v_L135+0x324>)
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10c      	bne.n	8008866 <v_L135+0x266>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_F, NO_WALL, NO_WALL);
 800884c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	f241 3388 	movw	r3, #5000	; 0x1388
 8008856:	2243      	movs	r2, #67	; 0x43
 8008858:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800885c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008860:	f7fc fe06 	bl	8005470 <slalomF>
 8008864:	e00b      	b.n	800887e <v_L135+0x27e>
			slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 8008866:	f241 3388 	movw	r3, #5000	; 0x1388
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008870:	2243      	movs	r2, #67	; 0x43
 8008872:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008876:	f242 7010 	movw	r0, #10000	; 0x2710
 800887a:	f7fc fdf9 	bl	8005470 <slalomF>
		slalomR(V135_4_DEGACCEL, V135_4_OMEGA, 135, SPEED_HIGH_HIGH);
 800887e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008882:	2287      	movs	r2, #135	; 0x87
 8008884:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008888:	f242 7010 	movw	r0, #10000	; 0x2710
 800888c:	f7fc fe6c 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008890:	2103      	movs	r1, #3
 8008892:	20fd      	movs	r0, #253	; 0xfd
 8008894:	f006 fff4 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008898:	4b22      	ldr	r3, [pc, #136]	; (8008924 <v_L135+0x324>)
 800889a:	881b      	ldrh	r3, [r3, #0]
 800889c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	3301      	adds	r3, #1
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	bfb8      	it	lt
 80088ac:	425b      	neglt	r3, r3
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	b2d9      	uxtb	r1, r3
 80088b4:	4a1b      	ldr	r2, [pc, #108]	; (8008924 <v_L135+0x324>)
 80088b6:	8813      	ldrh	r3, [r2, #0]
 80088b8:	f361 03c3 	bfi	r3, r1, #3, #1
 80088bc:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 80088be:	4b19      	ldr	r3, [pc, #100]	; (8008924 <v_L135+0x324>)
 80088c0:	881b      	ldrh	r3, [r3, #0]
 80088c2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d107      	bne.n	80088dc <v_L135+0x2dc>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB);
 80088cc:	2232      	movs	r2, #50	; 0x32
 80088ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80088d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80088d6:	f7fc ff6b 	bl	80057b0 <slalomB>
}
 80088da:	e067      	b.n	80089ac <v_L135+0x3ac>
			slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_B);
 80088dc:	2232      	movs	r2, #50	; 0x32
 80088de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80088e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80088e6:	f7fc ff63 	bl	80057b0 <slalomB>
}
 80088ea:	e05f      	b.n	80089ac <v_L135+0x3ac>
	}else if(run_mode == 5){
 80088ec:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <v_L135+0x320>)
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b05      	cmp	r3, #5
 80088f4:	d15a      	bne.n	80089ac <v_L135+0x3ac>
		if(!MF2.FLAG.V){
 80088f6:	4b0b      	ldr	r3, [pc, #44]	; (8008924 <v_L135+0x324>)
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d111      	bne.n	8008928 <v_L135+0x328>
			slalomF(10000, SPEED_5, V135_5_OFFSET_F, NO_WALL, NO_WALL);
 8008904:	f241 3388 	movw	r3, #5000	; 0x1388
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	f241 3388 	movw	r3, #5000	; 0x1388
 800890e:	2228      	movs	r2, #40	; 0x28
 8008910:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008914:	f242 7010 	movw	r0, #10000	; 0x2710
 8008918:	f7fc fdaa 	bl	8005470 <slalomF>
 800891c:	e010      	b.n	8008940 <v_L135+0x340>
 800891e:	bf00      	nop
 8008920:	20000456 	.word	0x20000456
 8008924:	20000f64 	.word	0x20000f64
			slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008928:	f241 3388 	movw	r3, #5000	; 0x1388
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008932:	2243      	movs	r2, #67	; 0x43
 8008934:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008938:	f242 7010 	movw	r0, #10000	; 0x2710
 800893c:	f7fc fd98 	bl	8005470 <slalomF>
		slalomR(V135_5_DEGACCEL, V135_5_OMEGA, 135, SPEED_5);
 8008940:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008944:	2287      	movs	r2, #135	; 0x87
 8008946:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800894a:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 800894e:	f7fc fe0b 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008952:	2103      	movs	r1, #3
 8008954:	20fd      	movs	r0, #253	; 0xfd
 8008956:	f006 ff93 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 800895a:	4b16      	ldr	r3, [pc, #88]	; (80089b4 <v_L135+0x3b4>)
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008962:	b2db      	uxtb	r3, r3
 8008964:	3301      	adds	r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	bfb8      	it	lt
 800896e:	425b      	neglt	r3, r3
 8008970:	f003 0301 	and.w	r3, r3, #1
 8008974:	b2d9      	uxtb	r1, r3
 8008976:	4a0f      	ldr	r2, [pc, #60]	; (80089b4 <v_L135+0x3b4>)
 8008978:	8813      	ldrh	r3, [r2, #0]
 800897a:	f361 03c3 	bfi	r3, r1, #3, #1
 800897e:	8013      	strh	r3, [r2, #0]
		if(!MF2.FLAG.V){
 8008980:	4b0c      	ldr	r3, [pc, #48]	; (80089b4 <v_L135+0x3b4>)
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d107      	bne.n	800899e <v_L135+0x39e>
			slalomB(10000, SPEED_5, V135_5_OFFSET_VB);
 800898e:	2232      	movs	r2, #50	; 0x32
 8008990:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008994:	f242 7010 	movw	r0, #10000	; 0x2710
 8008998:	f7fc ff0a 	bl	80057b0 <slalomB>
}
 800899c:	e006      	b.n	80089ac <v_L135+0x3ac>
			slalomB(10000, SPEED_5, V135_5_OFFSET_B);
 800899e:	2219      	movs	r2, #25
 80089a0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80089a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80089a8:	f7fc ff02 	bl	80057b0 <slalomB>
}
 80089ac:	bf00      	nop
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	20000f64 	.word	0x20000f64

080089b8 <v_R135D>:
//v_R135D
// 区画中心から右に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135D(void){
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80089be:	2006      	movs	r0, #6
 80089c0:	f008 fde8 	bl	8011594 <full_led_write>
	if(run_mode == LOW){
 80089c4:	4b9e      	ldr	r3, [pc, #632]	; (8008c40 <v_R135D+0x288>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d139      	bne.n	8008a42 <v_R135D+0x8a>
		slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 80089ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80089d8:	223a      	movs	r2, #58	; 0x3a
 80089da:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80089de:	f242 7010 	movw	r0, #10000	; 0x2710
 80089e2:	f7fc fd45 	bl	8005470 <slalomF>
		slalomR(-V135_DEGACCEL, -V135_OMEGA, -135, SPEED_LOW);
 80089e6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80089ea:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80089ee:	4995      	ldr	r1, [pc, #596]	; (8008c44 <v_R135D+0x28c>)
 80089f0:	4895      	ldr	r0, [pc, #596]	; (8008c48 <v_R135D+0x290>)
 80089f2:	f7fc fdb9 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80089f6:	2103      	movs	r1, #3
 80089f8:	2003      	movs	r0, #3
 80089fa:	f006 ff41 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 80089fe:	4b93      	ldr	r3, [pc, #588]	; (8008c4c <v_R135D+0x294>)
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	3301      	adds	r3, #1
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f003 0301 	and.w	r3, r3, #1
 8008a10:	bfb8      	it	lt
 8008a12:	425b      	neglt	r3, r3
 8008a14:	f003 0301 	and.w	r3, r3, #1
 8008a18:	b2d9      	uxtb	r1, r3
 8008a1a:	4a8c      	ldr	r2, [pc, #560]	; (8008c4c <v_R135D+0x294>)
 8008a1c:	8813      	ldrh	r3, [r2, #0]
 8008a1e:	f361 03c3 	bfi	r3, r1, #3, #1
 8008a22:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V135_OFFSET_VB-30);
 8008a24:	2226      	movs	r2, #38	; 0x26
 8008a26:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008a2a:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a2e:	f7fc febf 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 8008a32:	231e      	movs	r3, #30
 8008a34:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008a38:	2114      	movs	r1, #20
 8008a3a:	4885      	ldr	r0, [pc, #532]	; (8008c50 <v_R135D+0x298>)
 8008a3c:	f7fc fb40 	bl	80050c0 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8008a40:	e0fa      	b.n	8008c38 <v_R135D+0x280>
	}else if(run_mode == MIDDLE){
 8008a42:	4b7f      	ldr	r3, [pc, #508]	; (8008c40 <v_R135D+0x288>)
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d139      	bne.n	8008ac0 <v_R135D+0x108>
		slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008a4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a56:	2237      	movs	r2, #55	; 0x37
 8008a58:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008a5c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a60:	f7fc fd06 	bl	8005470 <slalomF>
		slalomR(-V135_2_DEGACCEL, -V135_2_OMEGA, -135, SPEED_MIDDLE);
 8008a64:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008a68:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008a6c:	4979      	ldr	r1, [pc, #484]	; (8008c54 <v_R135D+0x29c>)
 8008a6e:	487a      	ldr	r0, [pc, #488]	; (8008c58 <v_R135D+0x2a0>)
 8008a70:	f7fc fd7a 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008a74:	2103      	movs	r1, #3
 8008a76:	2003      	movs	r0, #3
 8008a78:	f006 ff02 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008a7c:	4b73      	ldr	r3, [pc, #460]	; (8008c4c <v_R135D+0x294>)
 8008a7e:	881b      	ldrh	r3, [r3, #0]
 8008a80:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	3301      	adds	r3, #1
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	bfb8      	it	lt
 8008a90:	425b      	neglt	r3, r3
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	b2d9      	uxtb	r1, r3
 8008a98:	4a6c      	ldr	r2, [pc, #432]	; (8008c4c <v_R135D+0x294>)
 8008a9a:	8813      	ldrh	r3, [r2, #0]
 8008a9c:	f361 03c3 	bfi	r3, r1, #3, #1
 8008aa0:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB-30);
 8008aa2:	2241      	movs	r2, #65	; 0x41
 8008aa4:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008aa8:	f242 7010 	movw	r0, #10000	; 0x2710
 8008aac:	f7fc fe80 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 8008ab0:	231e      	movs	r3, #30
 8008ab2:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008ab6:	2114      	movs	r1, #20
 8008ab8:	4865      	ldr	r0, [pc, #404]	; (8008c50 <v_R135D+0x298>)
 8008aba:	f7fc fb01 	bl	80050c0 <driveD>
}
 8008abe:	e0bb      	b.n	8008c38 <v_R135D+0x280>
	}else if(run_mode == HIGH){
 8008ac0:	4b5f      	ldr	r3, [pc, #380]	; (8008c40 <v_R135D+0x288>)
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	d139      	bne.n	8008b3e <v_R135D+0x186>
		slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 8008aca:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ad4:	224b      	movs	r2, #75	; 0x4b
 8008ad6:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008ada:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ade:	f7fc fcc7 	bl	8005470 <slalomF>
		slalomR(-V135_3_DEGACCEL, -V135_3_OMEGA, -135, SPEED_HIGH);
 8008ae2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008ae6:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008aea:	495c      	ldr	r1, [pc, #368]	; (8008c5c <v_R135D+0x2a4>)
 8008aec:	485c      	ldr	r0, [pc, #368]	; (8008c60 <v_R135D+0x2a8>)
 8008aee:	f7fc fd3b 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008af2:	2103      	movs	r1, #3
 8008af4:	2003      	movs	r0, #3
 8008af6:	f006 fec3 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008afa:	4b54      	ldr	r3, [pc, #336]	; (8008c4c <v_R135D+0x294>)
 8008afc:	881b      	ldrh	r3, [r3, #0]
 8008afe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	3301      	adds	r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	bfb8      	it	lt
 8008b0e:	425b      	neglt	r3, r3
 8008b10:	f003 0301 	and.w	r3, r3, #1
 8008b14:	b2d9      	uxtb	r1, r3
 8008b16:	4a4d      	ldr	r2, [pc, #308]	; (8008c4c <v_R135D+0x294>)
 8008b18:	8813      	ldrh	r3, [r2, #0]
 8008b1a:	f361 03c3 	bfi	r3, r1, #3, #1
 8008b1e:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB-30);
 8008b20:	2264      	movs	r2, #100	; 0x64
 8008b22:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008b26:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b2a:	f7fc fe41 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8008b2e:	231e      	movs	r3, #30
 8008b30:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008b34:	2114      	movs	r1, #20
 8008b36:	4846      	ldr	r0, [pc, #280]	; (8008c50 <v_R135D+0x298>)
 8008b38:	f7fc fac2 	bl	80050c0 <driveD>
}
 8008b3c:	e07c      	b.n	8008c38 <v_R135D+0x280>
	}else if(run_mode == HIGH_HIGH){
 8008b3e:	4b40      	ldr	r3, [pc, #256]	; (8008c40 <v_R135D+0x288>)
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b04      	cmp	r3, #4
 8008b46:	d139      	bne.n	8008bbc <v_R135D+0x204>
		slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 8008b48:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b52:	2243      	movs	r2, #67	; 0x43
 8008b54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008b58:	f242 7010 	movw	r0, #10000	; 0x2710
 8008b5c:	f7fc fc88 	bl	8005470 <slalomF>
		slalomR(-V135_4_DEGACCEL, -V135_4_OMEGA, -135, SPEED_HIGH);
 8008b60:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008b64:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008b68:	493e      	ldr	r1, [pc, #248]	; (8008c64 <v_R135D+0x2ac>)
 8008b6a:	483f      	ldr	r0, [pc, #252]	; (8008c68 <v_R135D+0x2b0>)
 8008b6c:	f7fc fcfc 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008b70:	2103      	movs	r1, #3
 8008b72:	2003      	movs	r0, #3
 8008b74:	f006 fe84 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008b78:	4b34      	ldr	r3, [pc, #208]	; (8008c4c <v_R135D+0x294>)
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	3301      	adds	r3, #1
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	bfb8      	it	lt
 8008b8c:	425b      	neglt	r3, r3
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	b2d9      	uxtb	r1, r3
 8008b94:	4a2d      	ldr	r2, [pc, #180]	; (8008c4c <v_R135D+0x294>)
 8008b96:	8813      	ldrh	r3, [r2, #0]
 8008b98:	f361 03c3 	bfi	r3, r1, #3, #1
 8008b9c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB-30);
 8008b9e:	2214      	movs	r2, #20
 8008ba0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008ba4:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ba8:	f7fc fe02 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH_HIGH, 30);
 8008bac:	231e      	movs	r3, #30
 8008bae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008bb2:	2114      	movs	r1, #20
 8008bb4:	4826      	ldr	r0, [pc, #152]	; (8008c50 <v_R135D+0x298>)
 8008bb6:	f7fc fa83 	bl	80050c0 <driveD>
}
 8008bba:	e03d      	b.n	8008c38 <v_R135D+0x280>
	}else if(run_mode == 5){
 8008bbc:	4b20      	ldr	r3, [pc, #128]	; (8008c40 <v_R135D+0x288>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b05      	cmp	r3, #5
 8008bc4:	d138      	bne.n	8008c38 <v_R135D+0x280>
		slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008bc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	f241 3388 	movw	r3, #5000	; 0x1388
 8008bd0:	2243      	movs	r2, #67	; 0x43
 8008bd2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008bd6:	f242 7010 	movw	r0, #10000	; 0x2710
 8008bda:	f7fc fc49 	bl	8005470 <slalomF>
		slalomR(-V135_5_DEGACCEL, -V135_5_OMEGA, -135, SPEED_5);
 8008bde:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008be2:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8008be6:	491f      	ldr	r1, [pc, #124]	; (8008c64 <v_R135D+0x2ac>)
 8008be8:	4820      	ldr	r0, [pc, #128]	; (8008c6c <v_R135D+0x2b4>)
 8008bea:	f7fc fcbd 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008bee:	2103      	movs	r1, #3
 8008bf0:	2003      	movs	r0, #3
 8008bf2:	f006 fe45 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008bf6:	4b15      	ldr	r3, [pc, #84]	; (8008c4c <v_R135D+0x294>)
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	3301      	adds	r3, #1
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f003 0301 	and.w	r3, r3, #1
 8008c08:	bfb8      	it	lt
 8008c0a:	425b      	neglt	r3, r3
 8008c0c:	f003 0301 	and.w	r3, r3, #1
 8008c10:	b2d9      	uxtb	r1, r3
 8008c12:	4a0e      	ldr	r2, [pc, #56]	; (8008c4c <v_R135D+0x294>)
 8008c14:	8813      	ldrh	r3, [r2, #0]
 8008c16:	f361 03c3 	bfi	r3, r1, #3, #1
 8008c1a:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
 8008c1c:	2214      	movs	r2, #20
 8008c1e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008c22:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c26:	f7fc fdc3 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8008c2a:	231e      	movs	r3, #30
 8008c2c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8008c30:	2114      	movs	r1, #20
 8008c32:	4807      	ldr	r0, [pc, #28]	; (8008c50 <v_R135D+0x298>)
 8008c34:	f7fc fa44 	bl	80050c0 <driveD>
}
 8008c38:	bf00      	nop
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	20000456 	.word	0x20000456
 8008c44:	fffffed4 	.word	0xfffffed4
 8008c48:	fffff448 	.word	0xfffff448
 8008c4c:	20000f64 	.word	0x20000f64
 8008c50:	ffff8ad0 	.word	0xffff8ad0
 8008c54:	fffffe0c 	.word	0xfffffe0c
 8008c58:	ffffec78 	.word	0xffffec78
 8008c5c:	fffffce0 	.word	0xfffffce0
 8008c60:	ffffe0c0 	.word	0xffffe0c0
 8008c64:	fffffc18 	.word	0xfffffc18
 8008c68:	ffffd8f0 	.word	0xffffd8f0
 8008c6c:	ffffd120 	.word	0xffffd120

08008c70 <v_L135D>:
//v_L135D
// 区画中心から左に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135D(void){
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8008c76:	2005      	movs	r0, #5
 8008c78:	f008 fc8c 	bl	8011594 <full_led_write>
	if(run_mode == LOW){
 8008c7c:	4ba0      	ldr	r3, [pc, #640]	; (8008f00 <v_L135D+0x290>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d13a      	bne.n	8008cfc <v_L135D+0x8c>
		slalomF(10000, SPEED_LOW, V135_OFFSET_VF, NO_WALL, NO_WALL);
 8008c86:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c90:	223a      	movs	r2, #58	; 0x3a
 8008c92:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008c96:	f242 7010 	movw	r0, #10000	; 0x2710
 8008c9a:	f7fc fbe9 	bl	8005470 <slalomF>
		slalomR(V135_DEGACCEL, V135_OMEGA, 135, SPEED_LOW);
 8008c9e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008ca2:	2287      	movs	r2, #135	; 0x87
 8008ca4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008ca8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008cac:	f7fc fc5c 	bl	8005568 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008cb0:	2103      	movs	r1, #3
 8008cb2:	20fd      	movs	r0, #253	; 0xfd
 8008cb4:	f006 fde4 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008cb8:	4b92      	ldr	r3, [pc, #584]	; (8008f04 <v_L135D+0x294>)
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	bfb8      	it	lt
 8008ccc:	425b      	neglt	r3, r3
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	b2d9      	uxtb	r1, r3
 8008cd4:	4a8b      	ldr	r2, [pc, #556]	; (8008f04 <v_L135D+0x294>)
 8008cd6:	8813      	ldrh	r3, [r2, #0]
 8008cd8:	f361 03c3 	bfi	r3, r1, #3, #1
 8008cdc:	8013      	strh	r3, [r2, #0]

		slalomB(10000, SPEED_LOW, V135_OFFSET_VB-30);
 8008cde:	2226      	movs	r2, #38	; 0x26
 8008ce0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008ce4:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ce8:	f7fc fd62 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_LOW, 30);
 8008cec:	231e      	movs	r3, #30
 8008cee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008cf2:	2114      	movs	r1, #20
 8008cf4:	4884      	ldr	r0, [pc, #528]	; (8008f08 <v_L135D+0x298>)
 8008cf6:	f7fc f9e3 	bl	80050c0 <driveD>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;

		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
	}
}
 8008cfa:	e0fe      	b.n	8008efa <v_L135D+0x28a>
	}else if(run_mode == MIDDLE){
 8008cfc:	4b80      	ldr	r3, [pc, #512]	; (8008f00 <v_L135D+0x290>)
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d13a      	bne.n	8008d7c <v_L135D+0x10c>
		slalomF(10000, SPEED_MIDDLE, V135_2_OFFSET_VF, NO_WALL, NO_WALL);
 8008d06:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d10:	2237      	movs	r2, #55	; 0x37
 8008d12:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008d16:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d1a:	f7fc fba9 	bl	8005470 <slalomF>
		slalomR(V135_2_DEGACCEL, V135_2_OMEGA, 135, SPEED_MIDDLE);
 8008d1e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008d22:	2287      	movs	r2, #135	; 0x87
 8008d24:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008d28:	f241 3088 	movw	r0, #5000	; 0x1388
 8008d2c:	f7fc fc1c 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008d30:	2103      	movs	r1, #3
 8008d32:	20fd      	movs	r0, #253	; 0xfd
 8008d34:	f006 fda4 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008d38:	4b72      	ldr	r3, [pc, #456]	; (8008f04 <v_L135D+0x294>)
 8008d3a:	881b      	ldrh	r3, [r3, #0]
 8008d3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	3301      	adds	r3, #1
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	bfb8      	it	lt
 8008d4c:	425b      	neglt	r3, r3
 8008d4e:	f003 0301 	and.w	r3, r3, #1
 8008d52:	b2d9      	uxtb	r1, r3
 8008d54:	4a6b      	ldr	r2, [pc, #428]	; (8008f04 <v_L135D+0x294>)
 8008d56:	8813      	ldrh	r3, [r2, #0]
 8008d58:	f361 03c3 	bfi	r3, r1, #3, #1
 8008d5c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_MIDDLE, V135_2_OFFSET_VB-30);
 8008d5e:	2241      	movs	r2, #65	; 0x41
 8008d60:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008d64:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d68:	f7fc fd22 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_MIDDLE, 30);
 8008d6c:	231e      	movs	r3, #30
 8008d6e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008d72:	2114      	movs	r1, #20
 8008d74:	4864      	ldr	r0, [pc, #400]	; (8008f08 <v_L135D+0x298>)
 8008d76:	f7fc f9a3 	bl	80050c0 <driveD>
}
 8008d7a:	e0be      	b.n	8008efa <v_L135D+0x28a>
	}else if(run_mode == HIGH){
 8008d7c:	4b60      	ldr	r3, [pc, #384]	; (8008f00 <v_L135D+0x290>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	d13a      	bne.n	8008dfc <v_L135D+0x18c>
		slalomF(10000, SPEED_HIGH, V135_3_OFFSET_VF, NO_WALL, NO_WALL);
 8008d86:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d90:	224b      	movs	r2, #75	; 0x4b
 8008d92:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008d96:	f242 7010 	movw	r0, #10000	; 0x2710
 8008d9a:	f7fc fb69 	bl	8005470 <slalomF>
		slalomR(V135_3_DEGACCEL, V135_3_OMEGA, 135, SPEED_HIGH);
 8008d9e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008da2:	2287      	movs	r2, #135	; 0x87
 8008da4:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008da8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8008dac:	f7fc fbdc 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008db0:	2103      	movs	r1, #3
 8008db2:	20fd      	movs	r0, #253	; 0xfd
 8008db4:	f006 fd64 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008db8:	4b52      	ldr	r3, [pc, #328]	; (8008f04 <v_L135D+0x294>)
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	bfb8      	it	lt
 8008dcc:	425b      	neglt	r3, r3
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	b2d9      	uxtb	r1, r3
 8008dd4:	4a4b      	ldr	r2, [pc, #300]	; (8008f04 <v_L135D+0x294>)
 8008dd6:	8813      	ldrh	r3, [r2, #0]
 8008dd8:	f361 03c3 	bfi	r3, r1, #3, #1
 8008ddc:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH, V135_3_OFFSET_VB-30);
 8008dde:	2264      	movs	r2, #100	; 0x64
 8008de0:	f44f 7148 	mov.w	r1, #800	; 0x320
 8008de4:	f242 7010 	movw	r0, #10000	; 0x2710
 8008de8:	f7fc fce2 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8008dec:	231e      	movs	r3, #30
 8008dee:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008df2:	2114      	movs	r1, #20
 8008df4:	4844      	ldr	r0, [pc, #272]	; (8008f08 <v_L135D+0x298>)
 8008df6:	f7fc f963 	bl	80050c0 <driveD>
}
 8008dfa:	e07e      	b.n	8008efa <v_L135D+0x28a>
	}else if(run_mode == HIGH_HIGH){
 8008dfc:	4b40      	ldr	r3, [pc, #256]	; (8008f00 <v_L135D+0x290>)
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b04      	cmp	r3, #4
 8008e04:	d13a      	bne.n	8008e7c <v_L135D+0x20c>
		slalomF(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VF, NO_WALL, NO_WALL);
 8008e06:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e10:	2243      	movs	r2, #67	; 0x43
 8008e12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008e16:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e1a:	f7fc fb29 	bl	8005470 <slalomF>
		slalomR(V135_4_DEGACCEL, V135_4_OMEGA, 135, SPEED_HIGH_HIGH);
 8008e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e22:	2287      	movs	r2, #135	; 0x87
 8008e24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008e28:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e2c:	f7fc fb9c 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008e30:	2103      	movs	r1, #3
 8008e32:	20fd      	movs	r0, #253	; 0xfd
 8008e34:	f006 fd24 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008e38:	4b32      	ldr	r3, [pc, #200]	; (8008f04 <v_L135D+0x294>)
 8008e3a:	881b      	ldrh	r3, [r3, #0]
 8008e3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	3301      	adds	r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	bfb8      	it	lt
 8008e4c:	425b      	neglt	r3, r3
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	b2d9      	uxtb	r1, r3
 8008e54:	4a2b      	ldr	r2, [pc, #172]	; (8008f04 <v_L135D+0x294>)
 8008e56:	8813      	ldrh	r3, [r2, #0]
 8008e58:	f361 03c3 	bfi	r3, r1, #3, #1
 8008e5c:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_HIGH_HIGH, V135_4_OFFSET_VB-30);
 8008e5e:	2214      	movs	r2, #20
 8008e60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008e64:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e68:	f7fc fca2 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_HIGH, 30);
 8008e6c:	231e      	movs	r3, #30
 8008e6e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008e72:	2114      	movs	r1, #20
 8008e74:	4824      	ldr	r0, [pc, #144]	; (8008f08 <v_L135D+0x298>)
 8008e76:	f7fc f923 	bl	80050c0 <driveD>
}
 8008e7a:	e03e      	b.n	8008efa <v_L135D+0x28a>
	}else if(run_mode == 5){
 8008e7c:	4b20      	ldr	r3, [pc, #128]	; (8008f00 <v_L135D+0x290>)
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	2b05      	cmp	r3, #5
 8008e84:	d139      	bne.n	8008efa <v_L135D+0x28a>
		slalomF(10000, SPEED_5, V135_5_OFFSET_VF, NO_WALL, NO_WALL);
 8008e86:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e90:	2243      	movs	r2, #67	; 0x43
 8008e92:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008e96:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e9a:	f7fc fae9 	bl	8005470 <slalomF>
		slalomR(V135_5_DEGACCEL, V135_5_OMEGA, 135, SPEED_5);
 8008e9e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008ea2:	2287      	movs	r2, #135	; 0x87
 8008ea4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008ea8:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8008eac:	f7fc fb5c 	bl	8005568 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008eb0:	2103      	movs	r1, #3
 8008eb2:	20fd      	movs	r0, #253	; 0xfd
 8008eb4:	f006 fce4 	bl	800f880 <turn_dir>
		MF2.FLAG.V = (MF2.FLAG.V+1)%2;
 8008eb8:	4b12      	ldr	r3, [pc, #72]	; (8008f04 <v_L135D+0x294>)
 8008eba:	881b      	ldrh	r3, [r3, #0]
 8008ebc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	bfb8      	it	lt
 8008ecc:	425b      	neglt	r3, r3
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	b2d9      	uxtb	r1, r3
 8008ed4:	4a0b      	ldr	r2, [pc, #44]	; (8008f04 <v_L135D+0x294>)
 8008ed6:	8813      	ldrh	r3, [r2, #0]
 8008ed8:	f361 03c3 	bfi	r3, r1, #3, #1
 8008edc:	8013      	strh	r3, [r2, #0]
		slalomB(10000, SPEED_5, V135_5_OFFSET_VB-30);
 8008ede:	2214      	movs	r2, #20
 8008ee0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008ee4:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ee8:	f7fc fc62 	bl	80057b0 <slalomB>
		driveD(-30000, SPEED_MIN, SPEED_5, 30);
 8008eec:	231e      	movs	r3, #30
 8008eee:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8008ef2:	2114      	movs	r1, #20
 8008ef4:	4804      	ldr	r0, [pc, #16]	; (8008f08 <v_L135D+0x298>)
 8008ef6:	f7fc f8e3 	bl	80050c0 <driveD>
}
 8008efa:	bf00      	nop
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	20000456 	.word	0x20000456
 8008f04:	20000f64 	.word	0x20000f64
 8008f08:	ffff8ad0 	.word	0xffff8ad0

08008f0c <test_select>:
//test_select
// 走行系テスト選択
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void test_select(void){
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
	int mode = 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 8008f16:	6879      	ldr	r1, [r7, #4]
 8008f18:	483f      	ldr	r0, [pc, #252]	; (8009018 <test_select+0x10c>)
 8008f1a:	f009 f8cf 	bl	80120bc <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	b2d8      	uxtb	r0, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	f003 0302 	and.w	r3, r3, #2
 8008f30:	b2d9      	uxtb	r1, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	f003 0304 	and.w	r3, r3, #4
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	f008 faef 	bl	8011520 <led_write>
		  if(dist_r >= 20){
 8008f42:	4b36      	ldr	r3, [pc, #216]	; (800901c <test_select+0x110>)
 8008f44:	edd3 7a00 	vldr	s15, [r3]
 8008f48:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f54:	db0f      	blt.n	8008f76 <test_select+0x6a>
			  mode++;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8008f5c:	4b2f      	ldr	r3, [pc, #188]	; (800901c <test_select+0x110>)
 8008f5e:	f04f 0200 	mov.w	r2, #0
 8008f62:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b07      	cmp	r3, #7
 8008f68:	dd01      	ble.n	8008f6e <test_select+0x62>
				  mode = 0;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8008f6e:	6879      	ldr	r1, [r7, #4]
 8008f70:	482b      	ldr	r0, [pc, #172]	; (8009020 <test_select+0x114>)
 8008f72:	f009 f8a3 	bl	80120bc <iprintf>
		  }
		  if(dist_r <= -20){
 8008f76:	4b29      	ldr	r3, [pc, #164]	; (800901c <test_select+0x110>)
 8008f78:	edd3 7a00 	vldr	s15, [r3]
 8008f7c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8008f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f88:	d80f      	bhi.n	8008faa <test_select+0x9e>
			  mode--;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8008f90:	4b22      	ldr	r3, [pc, #136]	; (800901c <test_select+0x110>)
 8008f92:	f04f 0200 	mov.w	r2, #0
 8008f96:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	da01      	bge.n	8008fa2 <test_select+0x96>
				  mode = 7;
 8008f9e:	2307      	movs	r3, #7
 8008fa0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	481e      	ldr	r0, [pc, #120]	; (8009020 <test_select+0x114>)
 8008fa6:	f009 f889 	bl	80120bc <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8008faa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008fae:	481d      	ldr	r0, [pc, #116]	; (8009024 <test_select+0x118>)
 8008fb0:	f7f9 f990 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1b1      	bne.n	8008f1e <test_select+0x12>
			  HAL_Delay(50);
 8008fba:	2032      	movs	r0, #50	; 0x32
 8008fbc:	f7f8 f82e 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8008fc0:	bf00      	nop
 8008fc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008fc6:	4817      	ldr	r0, [pc, #92]	; (8009024 <test_select+0x118>)
 8008fc8:	f7f9 f984 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0f7      	beq.n	8008fc2 <test_select+0xb6>
			  switch(mode){
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	2b05      	cmp	r3, #5
 8008fd8:	d8a1      	bhi.n	8008f1e <test_select+0x12>
 8008fda:	a201      	add	r2, pc, #4	; (adr r2, 8008fe0 <test_select+0xd4>)
 8008fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe0:	08008ff9 	.word	0x08008ff9
 8008fe4:	08008fff 	.word	0x08008fff
 8008fe8:	08009005 	.word	0x08009005
 8008fec:	0800900b 	.word	0x0800900b
 8008ff0:	0800900f 	.word	0x0800900f
 8008ff4:	08009013 	.word	0x08009013
				case 1:
					init_test();
 8008ff8:	f000 f816 	bl	8009028 <init_test>
					break;
 8008ffc:	e00b      	b.n	8009016 <test_select+0x10a>

				case 2:
					slalom_test();
 8008ffe:	f000 f91d 	bl	800923c <slalom_test>
					break;
 8009002:	e008      	b.n	8009016 <test_select+0x10a>

				case 3:
					v_test();
 8009004:	f000 fae2 	bl	80095cc <v_test>
					break;
 8009008:	e005      	b.n	8009016 <test_select+0x10a>

				case 4:
					pass_test();
 800900a:	f000 fd13 	bl	8009a34 <pass_test>

				case 5:
					goal_test();
 800900e:	f000 ffed 	bl	8009fec <goal_test>

				case 6:
					sample_course_run();
 8009012:	f001 fac7 	bl	800a5a4 <sample_course_run>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009016:	e782      	b.n	8008f1e <test_select+0x12>
 8009018:	08013304 	.word	0x08013304
 800901c:	20000aec 	.word	0x20000aec
 8009020:	080132f8 	.word	0x080132f8
 8009024:	40020000 	.word	0x40020000

08009028 <init_test>:
//init_test
// 初期基幹関数走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af00      	add	r7, sp, #0

	int mode = 0;
 800902e:	2300      	movs	r3, #0
 8009030:	617b      	str	r3, [r7, #20]
	printf("Test Init Run, Mode : %d\n", mode);
 8009032:	6979      	ldr	r1, [r7, #20]
 8009034:	4872      	ldr	r0, [pc, #456]	; (8009200 <init_test+0x1d8>)
 8009036:	f009 f841 	bl	80120bc <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	b2db      	uxtb	r3, r3
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	b2d8      	uxtb	r0, r3
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	b2db      	uxtb	r3, r3
 8009048:	f003 0302 	and.w	r3, r3, #2
 800904c:	b2d9      	uxtb	r1, r3
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	b2db      	uxtb	r3, r3
 8009052:	f003 0304 	and.w	r3, r3, #4
 8009056:	b2db      	uxtb	r3, r3
 8009058:	461a      	mov	r2, r3
 800905a:	f008 fa61 	bl	8011520 <led_write>
		  if(dist_r >= 20){
 800905e:	4b69      	ldr	r3, [pc, #420]	; (8009204 <init_test+0x1dc>)
 8009060:	edd3 7a00 	vldr	s15, [r3]
 8009064:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800906c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009070:	db0f      	blt.n	8009092 <init_test+0x6a>
			  mode++;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	3301      	adds	r3, #1
 8009076:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8009078:	4b62      	ldr	r3, [pc, #392]	; (8009204 <init_test+0x1dc>)
 800907a:	f04f 0200 	mov.w	r2, #0
 800907e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	2b07      	cmp	r3, #7
 8009084:	dd01      	ble.n	800908a <init_test+0x62>
				  mode = 0;
 8009086:	2300      	movs	r3, #0
 8009088:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 800908a:	6979      	ldr	r1, [r7, #20]
 800908c:	485e      	ldr	r0, [pc, #376]	; (8009208 <init_test+0x1e0>)
 800908e:	f009 f815 	bl	80120bc <iprintf>
		  }
		  if(dist_r <= -20){
 8009092:	4b5c      	ldr	r3, [pc, #368]	; (8009204 <init_test+0x1dc>)
 8009094:	edd3 7a00 	vldr	s15, [r3]
 8009098:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800909c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a4:	d80f      	bhi.n	80090c6 <init_test+0x9e>
			  mode--;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	3b01      	subs	r3, #1
 80090aa:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 80090ac:	4b55      	ldr	r3, [pc, #340]	; (8009204 <init_test+0x1dc>)
 80090ae:	f04f 0200 	mov.w	r2, #0
 80090b2:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	da01      	bge.n	80090be <init_test+0x96>
				  mode = 7;
 80090ba:	2307      	movs	r3, #7
 80090bc:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 80090be:	6979      	ldr	r1, [r7, #20]
 80090c0:	4851      	ldr	r0, [pc, #324]	; (8009208 <init_test+0x1e0>)
 80090c2:	f008 fffb 	bl	80120bc <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80090c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80090ca:	4850      	ldr	r0, [pc, #320]	; (800920c <init_test+0x1e4>)
 80090cc:	f7f9 f902 	bl	80022d4 <HAL_GPIO_ReadPin>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1b1      	bne.n	800903a <init_test+0x12>
			  HAL_Delay(50);
 80090d6:	2032      	movs	r0, #50	; 0x32
 80090d8:	f7f7 ffa0 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80090dc:	bf00      	nop
 80090de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80090e2:	484a      	ldr	r0, [pc, #296]	; (800920c <init_test+0x1e4>)
 80090e4:	f7f9 f8f6 	bl	80022d4 <HAL_GPIO_ReadPin>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0f7      	beq.n	80090de <init_test+0xb6>
			  drive_ready();
 80090ee:	f7fb fdc7 	bl	8004c80 <drive_ready>
			  get_base();
 80090f2:	f008 f9bd 	bl	8011470 <get_base>

			  switch(mode){
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	2b07      	cmp	r3, #7
 80090fa:	d89e      	bhi.n	800903a <init_test+0x12>
 80090fc:	a201      	add	r2, pc, #4	; (adr r2, 8009104 <init_test+0xdc>)
 80090fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009102:	bf00      	nop
 8009104:	08009125 	.word	0x08009125
 8009108:	0800912b 	.word	0x0800912b
 800910c:	0800914b 	.word	0x0800914b
 8009110:	08009169 	.word	0x08009169
 8009114:	08009187 	.word	0x08009187
 8009118:	080091a5 	.word	0x080091a5
 800911c:	080091cf 	.word	0x080091cf
 8009120:	080091e9 	.word	0x080091e9
				case 0:
					get_base();
 8009124:	f008 f9a4 	bl	8011470 <get_base>
					break;
 8009128:	e069      	b.n	80091fe <init_test+0x1d6>
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 800912a:	4839      	ldr	r0, [pc, #228]	; (8009210 <init_test+0x1e8>)
 800912c:	f009 f83a 	bl	80121a4 <puts>
					for(int i = 0; i < 1; i++){
 8009130:	2300      	movs	r3, #0
 8009132:	613b      	str	r3, [r7, #16]
 8009134:	e005      	b.n	8009142 <init_test+0x11a>
						driveC(SEC_HALF*2);	//一区画のパルス分デフォルトインターバルで走行
 8009136:	20b6      	movs	r0, #182	; 0xb6
 8009138:	f7fc f904 	bl	8005344 <driveC>
					for(int i = 0; i < 1; i++){
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	3301      	adds	r3, #1
 8009140:	613b      	str	r3, [r7, #16]
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	2b00      	cmp	r3, #0
 8009146:	ddf6      	ble.n	8009136 <init_test+0x10e>
					}
					break;
 8009148:	e059      	b.n	80091fe <init_test+0x1d6>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 800914a:	4832      	ldr	r0, [pc, #200]	; (8009214 <init_test+0x1ec>)
 800914c:	f009 f82a 	bl	80121a4 <puts>
					for(int i = 0; i < 32; i++){
 8009150:	2300      	movs	r3, #0
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	e004      	b.n	8009160 <init_test+0x138>
						rotate_R90();				//16回右90度回転、つまり4周回転
 8009156:	f7fc ff87 	bl	8006068 <rotate_R90>
					for(int i = 0; i < 32; i++){
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	3301      	adds	r3, #1
 800915e:	60fb      	str	r3, [r7, #12]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b1f      	cmp	r3, #31
 8009164:	ddf7      	ble.n	8009156 <init_test+0x12e>
					}
					break;
 8009166:	e04a      	b.n	80091fe <init_test+0x1d6>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 8009168:	482b      	ldr	r0, [pc, #172]	; (8009218 <init_test+0x1f0>)
 800916a:	f009 f81b 	bl	80121a4 <puts>
					for(int i = 0; i < 32; i++){
 800916e:	2300      	movs	r3, #0
 8009170:	60bb      	str	r3, [r7, #8]
 8009172:	e004      	b.n	800917e <init_test+0x156>
						rotate_L90();				//16回左90度回転、つまり4周回転
 8009174:	f7fd f854 	bl	8006220 <rotate_L90>
					for(int i = 0; i < 32; i++){
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	3301      	adds	r3, #1
 800917c:	60bb      	str	r3, [r7, #8]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	2b1f      	cmp	r3, #31
 8009182:	ddf7      	ble.n	8009174 <init_test+0x14c>
					}
					break;
 8009184:	e03b      	b.n	80091fe <init_test+0x1d6>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 8009186:	4825      	ldr	r0, [pc, #148]	; (800921c <init_test+0x1f4>)
 8009188:	f009 f80c 	bl	80121a4 <puts>
					for(int i = 0; i < 16; i++){
 800918c:	2300      	movs	r3, #0
 800918e:	607b      	str	r3, [r7, #4]
 8009190:	e004      	b.n	800919c <init_test+0x174>
						rotate_180();				//8回右180度回転、つまり4周回転
 8009192:	f7fd f921 	bl	80063d8 <rotate_180>
					for(int i = 0; i < 16; i++){
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	3301      	adds	r3, #1
 800919a:	607b      	str	r3, [r7, #4]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b0f      	cmp	r3, #15
 80091a0:	ddf7      	ble.n	8009192 <init_test+0x16a>
					}
					break;
 80091a2:	e02c      	b.n	80091fe <init_test+0x1d6>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 80091a4:	481e      	ldr	r0, [pc, #120]	; (8009220 <init_test+0x1f8>)
 80091a6:	f008 fffd 	bl	80121a4 <puts>
					get_base();
 80091aa:	f008 f961 	bl	8011470 <get_base>
					half_sectionA();				//半区画のパルス分加速しながら走行
 80091ae:	f7fc fc69 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 6-1; i++){
 80091b2:	2300      	movs	r3, #0
 80091b4:	603b      	str	r3, [r7, #0]
 80091b6:	e004      	b.n	80091c2 <init_test+0x19a>
						one_sectionU();			//一区画のパルス分等速走行
 80091b8:	f7fc ff3c 	bl	8006034 <one_sectionU>
					for(int i = 0; i < 6-1; i++){
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	3301      	adds	r3, #1
 80091c0:	603b      	str	r3, [r7, #0]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2b04      	cmp	r3, #4
 80091c6:	ddf7      	ble.n	80091b8 <init_test+0x190>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 80091c8:	f7fc fca6 	bl	8005b18 <half_sectionD>
					break;
 80091cc:	e017      	b.n	80091fe <init_test+0x1d6>
				case 6:
					//----a宴会芸モード----
					target_degree_z = degree_z;
 80091ce:	4b15      	ldr	r3, [pc, #84]	; (8009224 <init_test+0x1fc>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a15      	ldr	r2, [pc, #84]	; (8009228 <init_test+0x200>)
 80091d4:	6013      	str	r3, [r2, #0]
					accel_l = 5000;
 80091d6:	4b15      	ldr	r3, [pc, #84]	; (800922c <init_test+0x204>)
 80091d8:	4a15      	ldr	r2, [pc, #84]	; (8009230 <init_test+0x208>)
 80091da:	601a      	str	r2, [r3, #0]

					MF2.FLAG.ENKAI = 1;
 80091dc:	4a15      	ldr	r2, [pc, #84]	; (8009234 <init_test+0x20c>)
 80091de:	8813      	ldrh	r3, [r2, #0]
 80091e0:	f043 0320 	orr.w	r3, r3, #32
 80091e4:	8013      	strh	r3, [r2, #0]

					while(1);
 80091e6:	e7fe      	b.n	80091e6 <init_test+0x1be>
					break;
				case 7:
					//----a停止時前壁補正モード----
					MF.FLAG.FWALL = 1;
 80091e8:	4a13      	ldr	r2, [pc, #76]	; (8009238 <init_test+0x210>)
 80091ea:	8813      	ldrh	r3, [r2, #0]
 80091ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091f0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.DRV = 1;
 80091f2:	4a11      	ldr	r2, [pc, #68]	; (8009238 <init_test+0x210>)
 80091f4:	8813      	ldrh	r3, [r2, #0]
 80091f6:	f043 0302 	orr.w	r3, r3, #2
 80091fa:	8013      	strh	r3, [r2, #0]
					while(1);
 80091fc:	e7fe      	b.n	80091fc <init_test+0x1d4>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80091fe:	e71c      	b.n	800903a <init_test+0x12>
 8009200:	0801331c 	.word	0x0801331c
 8009204:	20000aec 	.word	0x20000aec
 8009208:	080132f8 	.word	0x080132f8
 800920c:	40020000 	.word	0x40020000
 8009210:	08013338 	.word	0x08013338
 8009214:	0801335c 	.word	0x0801335c
 8009218:	08013368 	.word	0x08013368
 800921c:	08013374 	.word	0x08013374
 8009220:	08013380 	.word	0x08013380
 8009224:	20000b5c 	.word	0x20000b5c
 8009228:	20000bf8 	.word	0x20000bf8
 800922c:	20000d58 	.word	0x20000d58
 8009230:	459c4000 	.word	0x459c4000
 8009234:	20000f64 	.word	0x20000f64
 8009238:	20000f68 	.word	0x20000f68

0800923c <slalom_test>:
//slalom_test
// スラローム走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 800923c:	b580      	push	{r7, lr}
 800923e:	b08e      	sub	sp, #56	; 0x38
 8009240:	af00      	add	r7, sp, #0

	int mode = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	637b      	str	r3, [r7, #52]	; 0x34
	printf("Test Slalom Run, Mode : %d\n", mode);
 8009246:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009248:	48b8      	ldr	r0, [pc, #736]	; (800952c <slalom_test+0x2f0>)
 800924a:	f008 ff37 	bl	80120bc <iprintf>

	run_select();
 800924e:	f7fb fe57 	bl	8004f00 <run_select>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009254:	b2db      	uxtb	r3, r3
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	b2d8      	uxtb	r0, r3
 800925c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800925e:	b2db      	uxtb	r3, r3
 8009260:	f003 0302 	and.w	r3, r3, #2
 8009264:	b2d9      	uxtb	r1, r3
 8009266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009268:	b2db      	uxtb	r3, r3
 800926a:	f003 0304 	and.w	r3, r3, #4
 800926e:	b2db      	uxtb	r3, r3
 8009270:	461a      	mov	r2, r3
 8009272:	f008 f955 	bl	8011520 <led_write>
		  if(dist_r >= 20){
 8009276:	4bae      	ldr	r3, [pc, #696]	; (8009530 <slalom_test+0x2f4>)
 8009278:	edd3 7a00 	vldr	s15, [r3]
 800927c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009288:	db20      	blt.n	80092cc <slalom_test+0x90>
			  mode++;
 800928a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928c:	3301      	adds	r3, #1
 800928e:	637b      	str	r3, [r7, #52]	; 0x34
			  dist_r = 0;
 8009290:	4ba7      	ldr	r3, [pc, #668]	; (8009530 <slalom_test+0x2f4>)
 8009292:	f04f 0200 	mov.w	r2, #0
 8009296:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 8009298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800929a:	2b07      	cmp	r3, #7
 800929c:	dc03      	bgt.n	80092a6 <slalom_test+0x6a>
				  full_led_write(WHITE);
 800929e:	2007      	movs	r0, #7
 80092a0:	f008 f978 	bl	8011594 <full_led_write>
 80092a4:	e009      	b.n	80092ba <slalom_test+0x7e>
			  }else if(mode < 16){
 80092a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a8:	2b0f      	cmp	r3, #15
 80092aa:	dc03      	bgt.n	80092b4 <slalom_test+0x78>
				  full_led_write(BLUEGREEN);
 80092ac:	2004      	movs	r0, #4
 80092ae:	f008 f971 	bl	8011594 <full_led_write>
 80092b2:	e002      	b.n	80092ba <slalom_test+0x7e>
			  }else{
				  full_led_write(PURPLE);
 80092b4:	2005      	movs	r0, #5
 80092b6:	f008 f96d 	bl	8011594 <full_led_write>
			  }
			  if(mode > 23){
 80092ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092bc:	2b17      	cmp	r3, #23
 80092be:	dd01      	ble.n	80092c4 <slalom_test+0x88>
				  mode = 0;
 80092c0:	2300      	movs	r3, #0
 80092c2:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  printf("Mode : %d\n", mode);
 80092c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80092c6:	489b      	ldr	r0, [pc, #620]	; (8009534 <slalom_test+0x2f8>)
 80092c8:	f008 fef8 	bl	80120bc <iprintf>
		  }
		  if(dist_r <= -20){
 80092cc:	4b98      	ldr	r3, [pc, #608]	; (8009530 <slalom_test+0x2f4>)
 80092ce:	edd3 7a00 	vldr	s15, [r3]
 80092d2:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80092d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092de:	d820      	bhi.n	8009322 <slalom_test+0xe6>
			  mode--;
 80092e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e2:	3b01      	subs	r3, #1
 80092e4:	637b      	str	r3, [r7, #52]	; 0x34
			  dist_r = 0;
 80092e6:	4b92      	ldr	r3, [pc, #584]	; (8009530 <slalom_test+0x2f4>)
 80092e8:	f04f 0200 	mov.w	r2, #0
 80092ec:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 80092ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f0:	2b07      	cmp	r3, #7
 80092f2:	dc03      	bgt.n	80092fc <slalom_test+0xc0>
				  full_led_write(WHITE);
 80092f4:	2007      	movs	r0, #7
 80092f6:	f008 f94d 	bl	8011594 <full_led_write>
 80092fa:	e009      	b.n	8009310 <slalom_test+0xd4>
			  }else if(mode < 16){
 80092fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fe:	2b0f      	cmp	r3, #15
 8009300:	dc03      	bgt.n	800930a <slalom_test+0xce>
				  full_led_write(BLUEGREEN);
 8009302:	2004      	movs	r0, #4
 8009304:	f008 f946 	bl	8011594 <full_led_write>
 8009308:	e002      	b.n	8009310 <slalom_test+0xd4>
			  }else{
				  full_led_write(PURPLE);
 800930a:	2005      	movs	r0, #5
 800930c:	f008 f942 	bl	8011594 <full_led_write>
			  }
			  if(mode < 0){
 8009310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009312:	2b00      	cmp	r3, #0
 8009314:	da01      	bge.n	800931a <slalom_test+0xde>
				  mode = 23;
 8009316:	2317      	movs	r3, #23
 8009318:	637b      	str	r3, [r7, #52]	; 0x34
			  }
			  printf("Mode : %d\n", mode);
 800931a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800931c:	4885      	ldr	r0, [pc, #532]	; (8009534 <slalom_test+0x2f8>)
 800931e:	f008 fecd 	bl	80120bc <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009322:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009326:	4884      	ldr	r0, [pc, #528]	; (8009538 <slalom_test+0x2fc>)
 8009328:	f7f8 ffd4 	bl	80022d4 <HAL_GPIO_ReadPin>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d18f      	bne.n	8009252 <slalom_test+0x16>
			  HAL_Delay(50);
 8009332:	2032      	movs	r0, #50	; 0x32
 8009334:	f7f7 fe72 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009338:	bf00      	nop
 800933a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800933e:	487e      	ldr	r0, [pc, #504]	; (8009538 <slalom_test+0x2fc>)
 8009340:	f7f8 ffc8 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d0f7      	beq.n	800933a <slalom_test+0xfe>
			  drive_ready();
 800934a:	f7fb fc99 	bl	8004c80 <drive_ready>
			  get_base();
 800934e:	f008 f88f 	bl	8011470 <get_base>

			  switch(mode){
 8009352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009354:	2b10      	cmp	r3, #16
 8009356:	f200 8130 	bhi.w	80095ba <slalom_test+0x37e>
 800935a:	a201      	add	r2, pc, #4	; (adr r2, 8009360 <slalom_test+0x124>)
 800935c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009360:	080093a5 	.word	0x080093a5
 8009364:	080093ab 	.word	0x080093ab
 8009368:	080093d1 	.word	0x080093d1
 800936c:	080093f7 	.word	0x080093f7
 8009370:	0800941d 	.word	0x0800941d
 8009374:	08009443 	.word	0x08009443
 8009378:	08009469 	.word	0x08009469
 800937c:	080095bb 	.word	0x080095bb
 8009380:	080095bb 	.word	0x080095bb
 8009384:	0800948f 	.word	0x0800948f
 8009388:	080094b9 	.word	0x080094b9
 800938c:	080094f7 	.word	0x080094f7
 8009390:	0800951d 	.word	0x0800951d
 8009394:	0800956f 	.word	0x0800956f
 8009398:	08009595 	.word	0x08009595
 800939c:	080095bb 	.word	0x080095bb
 80093a0:	080095bb 	.word	0x080095bb
				case 0:
					get_base();
 80093a4:	f008 f864 	bl	8011470 <get_base>
					break;
 80093a8:	e107      	b.n	80095ba <slalom_test+0x37e>
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 80093aa:	4864      	ldr	r0, [pc, #400]	; (800953c <slalom_test+0x300>)
 80093ac:	f008 fefa 	bl	80121a4 <puts>
					half_sectionA();
 80093b0:	f7fc fb68 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 1; i++){
 80093b4:	2300      	movs	r3, #0
 80093b6:	633b      	str	r3, [r7, #48]	; 0x30
 80093b8:	e004      	b.n	80093c4 <slalom_test+0x188>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 80093ba:	f7fd f8e5 	bl	8006588 <slalom_R90>
					for(int i = 0; i < 1; i++){
 80093be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c0:	3301      	adds	r3, #1
 80093c2:	633b      	str	r3, [r7, #48]	; 0x30
 80093c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	ddf7      	ble.n	80093ba <slalom_test+0x17e>
					}
					half_sectionD();
 80093ca:	f7fc fba5 	bl	8005b18 <half_sectionD>
					break;
 80093ce:	e0f4      	b.n	80095ba <slalom_test+0x37e>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 80093d0:	485b      	ldr	r0, [pc, #364]	; (8009540 <slalom_test+0x304>)
 80093d2:	f008 fee7 	bl	80121a4 <puts>
					half_sectionA();
 80093d6:	f7fc fb55 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 1; i++){
 80093da:	2300      	movs	r3, #0
 80093dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093de:	e004      	b.n	80093ea <slalom_test+0x1ae>
						slalom_L90();				//16回右90度回転、つまり4周回転
 80093e0:	f7fd f9e8 	bl	80067b4 <slalom_L90>
					for(int i = 0; i < 1; i++){
 80093e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e6:	3301      	adds	r3, #1
 80093e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	ddf7      	ble.n	80093e0 <slalom_test+0x1a4>
					}
					half_sectionD();
 80093f0:	f7fc fb92 	bl	8005b18 <half_sectionD>
					break;
 80093f4:	e0e1      	b.n	80095ba <slalom_test+0x37e>
				case 3:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 80093f6:	4853      	ldr	r0, [pc, #332]	; (8009544 <slalom_test+0x308>)
 80093f8:	f008 fed4 	bl	80121a4 <puts>
					half_sectionA();
 80093fc:	f7fc fb42 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009400:	2300      	movs	r3, #0
 8009402:	62bb      	str	r3, [r7, #40]	; 0x28
 8009404:	e004      	b.n	8009410 <slalom_test+0x1d4>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 8009406:	f7fd fae1 	bl	80069cc <Lslalom_R90>
					for(int i = 0; i < 1; i++){
 800940a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940c:	3301      	adds	r3, #1
 800940e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009412:	2b00      	cmp	r3, #0
 8009414:	ddf7      	ble.n	8009406 <slalom_test+0x1ca>
					}
					half_sectionD();
 8009416:	f7fc fb7f 	bl	8005b18 <half_sectionD>
					break;
 800941a:	e0ce      	b.n	80095ba <slalom_test+0x37e>
				case 4:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 800941c:	484a      	ldr	r0, [pc, #296]	; (8009548 <slalom_test+0x30c>)
 800941e:	f008 fec1 	bl	80121a4 <puts>
					half_sectionA();
 8009422:	f7fc fb2f 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009426:	2300      	movs	r3, #0
 8009428:	627b      	str	r3, [r7, #36]	; 0x24
 800942a:	e004      	b.n	8009436 <slalom_test+0x1fa>
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 800942c:	f7fd fbd4 	bl	8006bd8 <Lslalom_L90>
					for(int i = 0; i < 1; i++){
 8009430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009432:	3301      	adds	r3, #1
 8009434:	627b      	str	r3, [r7, #36]	; 0x24
 8009436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009438:	2b00      	cmp	r3, #0
 800943a:	ddf7      	ble.n	800942c <slalom_test+0x1f0>
					}
					half_sectionD();
 800943c:	f7fc fb6c 	bl	8005b18 <half_sectionD>
					break;
 8009440:	e0bb      	b.n	80095ba <slalom_test+0x37e>
				case 5:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 8009442:	4842      	ldr	r0, [pc, #264]	; (800954c <slalom_test+0x310>)
 8009444:	f008 feae 	bl	80121a4 <puts>
					half_sectionA();
 8009448:	f7fc fb1c 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 1; i++){
 800944c:	2300      	movs	r3, #0
 800944e:	623b      	str	r3, [r7, #32]
 8009450:	e004      	b.n	800945c <slalom_test+0x220>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 8009452:	f7fd fcbd 	bl	8006dd0 <Lslalom_R180>
					for(int i = 0; i < 1; i++){
 8009456:	6a3b      	ldr	r3, [r7, #32]
 8009458:	3301      	adds	r3, #1
 800945a:	623b      	str	r3, [r7, #32]
 800945c:	6a3b      	ldr	r3, [r7, #32]
 800945e:	2b00      	cmp	r3, #0
 8009460:	ddf7      	ble.n	8009452 <slalom_test+0x216>
					}
					half_sectionD();
 8009462:	f7fc fb59 	bl	8005b18 <half_sectionD>
					break;
 8009466:	e0a8      	b.n	80095ba <slalom_test+0x37e>
				case 6:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 8009468:	4839      	ldr	r0, [pc, #228]	; (8009550 <slalom_test+0x314>)
 800946a:	f008 fe9b 	bl	80121a4 <puts>
					half_sectionA();
 800946e:	f7fc fb09 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009472:	2300      	movs	r3, #0
 8009474:	61fb      	str	r3, [r7, #28]
 8009476:	e004      	b.n	8009482 <slalom_test+0x246>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 8009478:	f7fd fdc6 	bl	8007008 <Lslalom_L180>
					for(int i = 0; i < 1; i++){
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	3301      	adds	r3, #1
 8009480:	61fb      	str	r3, [r7, #28]
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	2b00      	cmp	r3, #0
 8009486:	ddf7      	ble.n	8009478 <slalom_test+0x23c>
					}
					half_sectionD();
 8009488:	f7fc fb46 	bl	8005b18 <half_sectionD>
					break;
 800948c:	e095      	b.n	80095ba <slalom_test+0x37e>
					break;
				case 8:
					break;
				case 9:
					//----slalom右折----
					printf("slalom turn right .\n");
 800948e:	482b      	ldr	r0, [pc, #172]	; (800953c <slalom_test+0x300>)
 8009490:	f008 fe88 	bl	80121a4 <puts>
					half_sectionA();
 8009494:	f7fc faf6 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009498:	2300      	movs	r3, #0
 800949a:	61bb      	str	r3, [r7, #24]
 800949c:	e006      	b.n	80094ac <slalom_test+0x270>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 800949e:	f7fd f873 	bl	8006588 <slalom_R90>
						one_sectionU();
 80094a2:	f7fc fdc7 	bl	8006034 <one_sectionU>
					for(int i = 0; i < 8; i++){
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	3301      	adds	r3, #1
 80094aa:	61bb      	str	r3, [r7, #24]
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	2b07      	cmp	r3, #7
 80094b0:	ddf5      	ble.n	800949e <slalom_test+0x262>
					}
					half_sectionD();
 80094b2:	f7fc fb31 	bl	8005b18 <half_sectionD>
					break;
 80094b6:	e080      	b.n	80095ba <slalom_test+0x37e>
				case 10:
					//----slalom左折----
					printf("slalom turn left .\n");
 80094b8:	4821      	ldr	r0, [pc, #132]	; (8009540 <slalom_test+0x304>)
 80094ba:	f008 fe73 	bl	80121a4 <puts>
					half_sectionA();
 80094be:	f7fc fae1 	bl	8005a84 <half_sectionA>
					MF2.FLAG.LOG = 1;
 80094c2:	4a24      	ldr	r2, [pc, #144]	; (8009554 <slalom_test+0x318>)
 80094c4:	8813      	ldrh	r3, [r2, #0]
 80094c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ca:	8013      	strh	r3, [r2, #0]
					for(int i = 0; i < 8; i++){
 80094cc:	2300      	movs	r3, #0
 80094ce:	617b      	str	r3, [r7, #20]
 80094d0:	e006      	b.n	80094e0 <slalom_test+0x2a4>
						slalom_L90();				//16回右90度回転、つまり4周回転
 80094d2:	f7fd f96f 	bl	80067b4 <slalom_L90>
						one_sectionU();
 80094d6:	f7fc fdad 	bl	8006034 <one_sectionU>
					for(int i = 0; i < 8; i++){
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	3301      	adds	r3, #1
 80094de:	617b      	str	r3, [r7, #20]
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	2b07      	cmp	r3, #7
 80094e4:	ddf5      	ble.n	80094d2 <slalom_test+0x296>
					}
					MF2.FLAG.LOG = 0;
 80094e6:	4a1b      	ldr	r2, [pc, #108]	; (8009554 <slalom_test+0x318>)
 80094e8:	8813      	ldrh	r3, [r2, #0]
 80094ea:	f36f 1386 	bfc	r3, #6, #1
 80094ee:	8013      	strh	r3, [r2, #0]
					half_sectionD();
 80094f0:	f7fc fb12 	bl	8005b18 <half_sectionD>
					printf("r start\n");
					for(int j = 0; j < log_allay; j++){
						printf("%d\n", get_speed_r[j]);
					}
					printf("r end\n");
*/					break;
 80094f4:	e061      	b.n	80095ba <slalom_test+0x37e>
				case 11:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 80094f6:	4813      	ldr	r0, [pc, #76]	; (8009544 <slalom_test+0x308>)
 80094f8:	f008 fe54 	bl	80121a4 <puts>
					half_sectionA();
 80094fc:	f7fc fac2 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009500:	2300      	movs	r3, #0
 8009502:	613b      	str	r3, [r7, #16]
 8009504:	e004      	b.n	8009510 <slalom_test+0x2d4>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 8009506:	f7fd fa61 	bl	80069cc <Lslalom_R90>
					for(int i = 0; i < 8; i++){
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	3301      	adds	r3, #1
 800950e:	613b      	str	r3, [r7, #16]
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	2b07      	cmp	r3, #7
 8009514:	ddf7      	ble.n	8009506 <slalom_test+0x2ca>
					}
					half_sectionD();
 8009516:	f7fc faff 	bl	8005b18 <half_sectionD>
					break;
 800951a:	e04e      	b.n	80095ba <slalom_test+0x37e>
				case 12:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 800951c:	480a      	ldr	r0, [pc, #40]	; (8009548 <slalom_test+0x30c>)
 800951e:	f008 fe41 	bl	80121a4 <puts>
					half_sectionA();
 8009522:	f7fc faaf 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009526:	2300      	movs	r3, #0
 8009528:	60fb      	str	r3, [r7, #12]
 800952a:	e01a      	b.n	8009562 <slalom_test+0x326>
 800952c:	080133a0 	.word	0x080133a0
 8009530:	20000aec 	.word	0x20000aec
 8009534:	080132f8 	.word	0x080132f8
 8009538:	40020000 	.word	0x40020000
 800953c:	080133bc 	.word	0x080133bc
 8009540:	080133d0 	.word	0x080133d0
 8009544:	080133e4 	.word	0x080133e4
 8009548:	080133fc 	.word	0x080133fc
 800954c:	08013410 	.word	0x08013410
 8009550:	08013430 	.word	0x08013430
 8009554:	20000f64 	.word	0x20000f64
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 8009558:	f7fd fb3e 	bl	8006bd8 <Lslalom_L90>
					for(int i = 0; i < 8; i++){
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	3301      	adds	r3, #1
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2b07      	cmp	r3, #7
 8009566:	ddf7      	ble.n	8009558 <slalom_test+0x31c>
					}
					half_sectionD();
 8009568:	f7fc fad6 	bl	8005b18 <half_sectionD>
					break;
 800956c:	e025      	b.n	80095ba <slalom_test+0x37e>
				case 13:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 800956e:	4815      	ldr	r0, [pc, #84]	; (80095c4 <slalom_test+0x388>)
 8009570:	f008 fe18 	bl	80121a4 <puts>
					half_sectionA();
 8009574:	f7fc fa86 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009578:	2300      	movs	r3, #0
 800957a:	60bb      	str	r3, [r7, #8]
 800957c:	e004      	b.n	8009588 <slalom_test+0x34c>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 800957e:	f7fd fc27 	bl	8006dd0 <Lslalom_R180>
					for(int i = 0; i < 8; i++){
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	3301      	adds	r3, #1
 8009586:	60bb      	str	r3, [r7, #8]
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	2b07      	cmp	r3, #7
 800958c:	ddf7      	ble.n	800957e <slalom_test+0x342>
					}
					half_sectionD();
 800958e:	f7fc fac3 	bl	8005b18 <half_sectionD>
					break;
 8009592:	e012      	b.n	80095ba <slalom_test+0x37e>
				case 14:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 8009594:	480c      	ldr	r0, [pc, #48]	; (80095c8 <slalom_test+0x38c>)
 8009596:	f008 fe05 	bl	80121a4 <puts>
					half_sectionA();
 800959a:	f7fc fa73 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 8; i++){
 800959e:	2300      	movs	r3, #0
 80095a0:	607b      	str	r3, [r7, #4]
 80095a2:	e004      	b.n	80095ae <slalom_test+0x372>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 80095a4:	f7fd fd30 	bl	8007008 <Lslalom_L180>
					for(int i = 0; i < 8; i++){
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	3301      	adds	r3, #1
 80095ac:	607b      	str	r3, [r7, #4]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b07      	cmp	r3, #7
 80095b2:	ddf7      	ble.n	80095a4 <slalom_test+0x368>
					}
					half_sectionD();
 80095b4:	f7fc fab0 	bl	8005b18 <half_sectionD>
					break;
 80095b8:	bf00      	nop
					break;
				case 16:
					break;

			  }
			  full_led_write(RED);
 80095ba:	2001      	movs	r0, #1
 80095bc:	f007 ffea 	bl	8011594 <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80095c0:	e647      	b.n	8009252 <slalom_test+0x16>
 80095c2:	bf00      	nop
 80095c4:	08013410 	.word	0x08013410
 80095c8:	08013430 	.word	0x08013430

080095cc <v_test>:
//v_test
// 斜め走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_test(void){
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b092      	sub	sp, #72	; 0x48
 80095d0:	af00      	add	r7, sp, #0

	int mode = 0;
 80095d2:	2300      	movs	r3, #0
 80095d4:	647b      	str	r3, [r7, #68]	; 0x44
	printf("Test V Run, Mode : %d\n", mode);
 80095d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095d8:	48ba      	ldr	r0, [pc, #744]	; (80098c4 <v_test+0x2f8>)
 80095da:	f008 fd6f 	bl	80120bc <iprintf>

	run_select();
 80095de:	f7fb fc8f 	bl	8004f00 <run_select>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80095e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	b2d8      	uxtb	r0, r3
 80095ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	f003 0302 	and.w	r3, r3, #2
 80095f4:	b2d9      	uxtb	r1, r3
 80095f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	f003 0304 	and.w	r3, r3, #4
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	461a      	mov	r2, r3
 8009602:	f007 ff8d 	bl	8011520 <led_write>
		  if(dist_r >= 20){
 8009606:	4bb0      	ldr	r3, [pc, #704]	; (80098c8 <v_test+0x2fc>)
 8009608:	edd3 7a00 	vldr	s15, [r3]
 800960c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009618:	db20      	blt.n	800965c <v_test+0x90>
			  mode++;
 800961a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800961c:	3301      	adds	r3, #1
 800961e:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 8009620:	4ba9      	ldr	r3, [pc, #676]	; (80098c8 <v_test+0x2fc>)
 8009622:	f04f 0200 	mov.w	r2, #0
 8009626:	601a      	str	r2, [r3, #0]
			  if(mode > 23){
 8009628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800962a:	2b17      	cmp	r3, #23
 800962c:	dd01      	ble.n	8009632 <v_test+0x66>
				  mode = 0;
 800962e:	2300      	movs	r3, #0
 8009630:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  if(mode < 8){
 8009632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009634:	2b07      	cmp	r3, #7
 8009636:	dc03      	bgt.n	8009640 <v_test+0x74>
				  full_led_write(WHITE);
 8009638:	2007      	movs	r0, #7
 800963a:	f007 ffab 	bl	8011594 <full_led_write>
 800963e:	e009      	b.n	8009654 <v_test+0x88>
			  }else if(mode < 16){
 8009640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009642:	2b0f      	cmp	r3, #15
 8009644:	dc03      	bgt.n	800964e <v_test+0x82>
				  full_led_write(BLUEGREEN);
 8009646:	2004      	movs	r0, #4
 8009648:	f007 ffa4 	bl	8011594 <full_led_write>
 800964c:	e002      	b.n	8009654 <v_test+0x88>
			  }else{
				  full_led_write(PURPLE);
 800964e:	2005      	movs	r0, #5
 8009650:	f007 ffa0 	bl	8011594 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 8009654:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009656:	489d      	ldr	r0, [pc, #628]	; (80098cc <v_test+0x300>)
 8009658:	f008 fd30 	bl	80120bc <iprintf>
		  }
		  if(dist_r <= -20){
 800965c:	4b9a      	ldr	r3, [pc, #616]	; (80098c8 <v_test+0x2fc>)
 800965e:	edd3 7a00 	vldr	s15, [r3]
 8009662:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800966a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800966e:	d820      	bhi.n	80096b2 <v_test+0xe6>
			  mode--;
 8009670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009672:	3b01      	subs	r3, #1
 8009674:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 8009676:	4b94      	ldr	r3, [pc, #592]	; (80098c8 <v_test+0x2fc>)
 8009678:	f04f 0200 	mov.w	r2, #0
 800967c:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800967e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009680:	2b00      	cmp	r3, #0
 8009682:	da01      	bge.n	8009688 <v_test+0xbc>
				  mode = 23;
 8009684:	2317      	movs	r3, #23
 8009686:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  if(mode < 8){
 8009688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800968a:	2b07      	cmp	r3, #7
 800968c:	dc03      	bgt.n	8009696 <v_test+0xca>
				  full_led_write(WHITE);
 800968e:	2007      	movs	r0, #7
 8009690:	f007 ff80 	bl	8011594 <full_led_write>
 8009694:	e009      	b.n	80096aa <v_test+0xde>
			  }else if(mode < 16){
 8009696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009698:	2b0f      	cmp	r3, #15
 800969a:	dc03      	bgt.n	80096a4 <v_test+0xd8>
				  full_led_write(BLUEGREEN);
 800969c:	2004      	movs	r0, #4
 800969e:	f007 ff79 	bl	8011594 <full_led_write>
 80096a2:	e002      	b.n	80096aa <v_test+0xde>
			  }else{
				  full_led_write(PURPLE);
 80096a4:	2005      	movs	r0, #5
 80096a6:	f007 ff75 	bl	8011594 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 80096aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80096ac:	4887      	ldr	r0, [pc, #540]	; (80098cc <v_test+0x300>)
 80096ae:	f008 fd05 	bl	80120bc <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80096b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80096b6:	4886      	ldr	r0, [pc, #536]	; (80098d0 <v_test+0x304>)
 80096b8:	f7f8 fe0c 	bl	80022d4 <HAL_GPIO_ReadPin>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d18f      	bne.n	80095e2 <v_test+0x16>
			  HAL_Delay(50);
 80096c2:	2032      	movs	r0, #50	; 0x32
 80096c4:	f7f7 fcaa 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80096c8:	bf00      	nop
 80096ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80096ce:	4880      	ldr	r0, [pc, #512]	; (80098d0 <v_test+0x304>)
 80096d0:	f7f8 fe00 	bl	80022d4 <HAL_GPIO_ReadPin>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d0f7      	beq.n	80096ca <v_test+0xfe>
			  drive_ready();
 80096da:	f7fb fad1 	bl	8004c80 <drive_ready>

			  MF.FLAG.XDIR = 1;
 80096de:	4a7d      	ldr	r2, [pc, #500]	; (80098d4 <v_test+0x308>)
 80096e0:	8813      	ldrh	r3, [r2, #0]
 80096e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80096e6:	8013      	strh	r3, [r2, #0]
			  MF2.FLAG.V = 0;
 80096e8:	4a7b      	ldr	r2, [pc, #492]	; (80098d8 <v_test+0x30c>)
 80096ea:	8813      	ldrh	r3, [r2, #0]
 80096ec:	f36f 03c3 	bfc	r3, #3, #1
 80096f0:	8013      	strh	r3, [r2, #0]
			  get_base();
 80096f2:	f007 febd 	bl	8011470 <get_base>

			  switch(mode){
 80096f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096f8:	2b14      	cmp	r3, #20
 80096fa:	f200 818c 	bhi.w	8009a16 <v_test+0x44a>
 80096fe:	a201      	add	r2, pc, #4	; (adr r2, 8009704 <v_test+0x138>)
 8009700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009704:	08009759 	.word	0x08009759
 8009708:	0800975f 	.word	0x0800975f
 800970c:	08009785 	.word	0x08009785
 8009710:	080097ab 	.word	0x080097ab
 8009714:	080097d1 	.word	0x080097d1
 8009718:	080097f7 	.word	0x080097f7
 800971c:	0800981d 	.word	0x0800981d
 8009720:	08009a17 	.word	0x08009a17
 8009724:	08009a17 	.word	0x08009a17
 8009728:	08009843 	.word	0x08009843
 800972c:	08009869 	.word	0x08009869
 8009730:	0800988f 	.word	0x0800988f
 8009734:	080098b5 	.word	0x080098b5
 8009738:	0800990b 	.word	0x0800990b
 800973c:	08009931 	.word	0x08009931
 8009740:	08009a17 	.word	0x08009a17
 8009744:	08009a17 	.word	0x08009a17
 8009748:	08009957 	.word	0x08009957
 800974c:	08009987 	.word	0x08009987
 8009750:	080099b7 	.word	0x080099b7
 8009754:	080099e7 	.word	0x080099e7
				case 0:
					get_base();
 8009758:	f007 fe8a 	bl	8011470 <get_base>
					break;
 800975c:	e15b      	b.n	8009a16 <v_test+0x44a>
				case 1:
					//----V右45----
					printf("V 45 right .\n");
 800975e:	485f      	ldr	r0, [pc, #380]	; (80098dc <v_test+0x310>)
 8009760:	f008 fd20 	bl	80121a4 <puts>
					half_sectionA();
 8009764:	f7fc f98e 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8009768:	2300      	movs	r3, #0
 800976a:	643b      	str	r3, [r7, #64]	; 0x40
 800976c:	e004      	b.n	8009778 <v_test+0x1ac>
						v_R45();
 800976e:	f7fd fd5b 	bl	8007228 <v_R45>
					for(int i = 0; i < 1; i++){
 8009772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009774:	3301      	adds	r3, #1
 8009776:	643b      	str	r3, [r7, #64]	; 0x40
 8009778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800977a:	2b00      	cmp	r3, #0
 800977c:	ddf7      	ble.n	800976e <v_test+0x1a2>
					}
					half_sectionVD();
 800977e:	f7fc fa57 	bl	8005c30 <half_sectionVD>
					break;
 8009782:	e148      	b.n	8009a16 <v_test+0x44a>
				case 2:
					//----V左45----
					printf("V 45 left .\n");
 8009784:	4856      	ldr	r0, [pc, #344]	; (80098e0 <v_test+0x314>)
 8009786:	f008 fd0d 	bl	80121a4 <puts>
					half_sectionA();
 800978a:	f7fc f97b 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 1; i++){
 800978e:	2300      	movs	r3, #0
 8009790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009792:	e004      	b.n	800979e <v_test+0x1d2>
						v_L45();
 8009794:	f7fd ff2e 	bl	80075f4 <v_L45>
					for(int i = 0; i < 1; i++){
 8009798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800979a:	3301      	adds	r3, #1
 800979c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800979e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	ddf7      	ble.n	8009794 <v_test+0x1c8>
					}
					half_sectionVD();
 80097a4:	f7fc fa44 	bl	8005c30 <half_sectionVD>
					break;
 80097a8:	e135      	b.n	8009a16 <v_test+0x44a>
				case 3:
					//----V右90----
					printf("V 90 right .\n");
 80097aa:	484e      	ldr	r0, [pc, #312]	; (80098e4 <v_test+0x318>)
 80097ac:	f008 fcfa 	bl	80121a4 <puts>
					half_sectionVA();
 80097b0:	f7fc f9f4 	bl	8005b9c <half_sectionVA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 80097b4:	2300      	movs	r3, #0
 80097b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80097b8:	e004      	b.n	80097c4 <v_test+0x1f8>
						v_R90();
 80097ba:	f7fe fb9f 	bl	8007efc <v_R90>
					for(int i = 0; i < 1; i++){
 80097be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c0:	3301      	adds	r3, #1
 80097c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80097c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	ddf7      	ble.n	80097ba <v_test+0x1ee>
					}
//					v_R45();
					half_sectionVD();
 80097ca:	f7fc fa31 	bl	8005c30 <half_sectionVD>
					break;
 80097ce:	e122      	b.n	8009a16 <v_test+0x44a>
				case 4:
					//----V左90----
					printf("V 90 left .\n");
 80097d0:	4845      	ldr	r0, [pc, #276]	; (80098e8 <v_test+0x31c>)
 80097d2:	f008 fce7 	bl	80121a4 <puts>
					half_sectionVA();
 80097d6:	f7fc f9e1 	bl	8005b9c <half_sectionVA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 80097da:	2300      	movs	r3, #0
 80097dc:	637b      	str	r3, [r7, #52]	; 0x34
 80097de:	e004      	b.n	80097ea <v_test+0x21e>
						v_L90();
 80097e0:	f7fe fc5c 	bl	800809c <v_L90>
					for(int i = 0; i < 1; i++){
 80097e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097e6:	3301      	adds	r3, #1
 80097e8:	637b      	str	r3, [r7, #52]	; 0x34
 80097ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	ddf7      	ble.n	80097e0 <v_test+0x214>
					}
//					v_L45();
					half_sectionVD();
 80097f0:	f7fc fa1e 	bl	8005c30 <half_sectionVD>
					break;
 80097f4:	e10f      	b.n	8009a16 <v_test+0x44a>
				case 5:
					//----V右135----
					printf("V 135 right .\n");
 80097f6:	483d      	ldr	r0, [pc, #244]	; (80098ec <v_test+0x320>)
 80097f8:	f008 fcd4 	bl	80121a4 <puts>
					half_sectionA();
 80097fc:	f7fc f942 	bl	8005a84 <half_sectionA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 8009800:	2300      	movs	r3, #0
 8009802:	633b      	str	r3, [r7, #48]	; 0x30
 8009804:	e004      	b.n	8009810 <v_test+0x244>
						v_R135();
 8009806:	f7fe fd11 	bl	800822c <v_R135>
					for(int i = 0; i < 1; i++){
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	3301      	adds	r3, #1
 800980e:	633b      	str	r3, [r7, #48]	; 0x30
 8009810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009812:	2b00      	cmp	r3, #0
 8009814:	ddf7      	ble.n	8009806 <v_test+0x23a>
					}
//					v_R45();
					half_sectionVD();
 8009816:	f7fc fa0b 	bl	8005c30 <half_sectionVD>
					break;
 800981a:	e0fc      	b.n	8009a16 <v_test+0x44a>
				case 6:
					//----V左135----
					printf("V 135 left .\n");
 800981c:	4834      	ldr	r0, [pc, #208]	; (80098f0 <v_test+0x324>)
 800981e:	f008 fcc1 	bl	80121a4 <puts>
					half_sectionA();
 8009822:	f7fc f92f 	bl	8005a84 <half_sectionA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 8009826:	2300      	movs	r3, #0
 8009828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800982a:	e004      	b.n	8009836 <v_test+0x26a>
						v_L135();
 800982c:	f7fe fee8 	bl	8008600 <v_L135>
					for(int i = 0; i < 1; i++){
 8009830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009832:	3301      	adds	r3, #1
 8009834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009838:	2b00      	cmp	r3, #0
 800983a:	ddf7      	ble.n	800982c <v_test+0x260>
					}
//					v_L45();
					half_sectionVD();
 800983c:	f7fc f9f8 	bl	8005c30 <half_sectionVD>
					break;
 8009840:	e0e9      	b.n	8009a16 <v_test+0x44a>
					break;
				case 8:
					break;
				case 9:
					//----V右45----
					printf("V 45 right .\n");
 8009842:	4826      	ldr	r0, [pc, #152]	; (80098dc <v_test+0x310>)
 8009844:	f008 fcae 	bl	80121a4 <puts>
					half_sectionA();
 8009848:	f7fc f91c 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 8; i++){
 800984c:	2300      	movs	r3, #0
 800984e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009850:	e004      	b.n	800985c <v_test+0x290>
						v_R45();
 8009852:	f7fd fce9 	bl	8007228 <v_R45>
					for(int i = 0; i < 8; i++){
 8009856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009858:	3301      	adds	r3, #1
 800985a:	62bb      	str	r3, [r7, #40]	; 0x28
 800985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985e:	2b07      	cmp	r3, #7
 8009860:	ddf7      	ble.n	8009852 <v_test+0x286>
					}
					half_sectionD();
 8009862:	f7fc f959 	bl	8005b18 <half_sectionD>
					break;
 8009866:	e0d6      	b.n	8009a16 <v_test+0x44a>
				case 10:
					//----V左45----
					printf("V 45 left .\n");
 8009868:	481d      	ldr	r0, [pc, #116]	; (80098e0 <v_test+0x314>)
 800986a:	f008 fc9b 	bl	80121a4 <puts>
					half_sectionA();
 800986e:	f7fc f909 	bl	8005a84 <half_sectionA>
					for(int i = 0; i < 8; i++){
 8009872:	2300      	movs	r3, #0
 8009874:	627b      	str	r3, [r7, #36]	; 0x24
 8009876:	e004      	b.n	8009882 <v_test+0x2b6>
						v_L45();
 8009878:	f7fd febc 	bl	80075f4 <v_L45>
					for(int i = 0; i < 8; i++){
 800987c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987e:	3301      	adds	r3, #1
 8009880:	627b      	str	r3, [r7, #36]	; 0x24
 8009882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009884:	2b07      	cmp	r3, #7
 8009886:	ddf7      	ble.n	8009878 <v_test+0x2ac>
					}
					half_sectionD();
 8009888:	f7fc f946 	bl	8005b18 <half_sectionD>
					break;
 800988c:	e0c3      	b.n	8009a16 <v_test+0x44a>
				case 11:
					//----V右90----
					printf("V 90 right .\n");
 800988e:	4815      	ldr	r0, [pc, #84]	; (80098e4 <v_test+0x318>)
 8009890:	f008 fc88 	bl	80121a4 <puts>
					half_sectionVA();
 8009894:	f7fc f982 	bl	8005b9c <half_sectionVA>
//					v_R45();
					for(int i = 0; i < 8; i++){
 8009898:	2300      	movs	r3, #0
 800989a:	623b      	str	r3, [r7, #32]
 800989c:	e004      	b.n	80098a8 <v_test+0x2dc>
						v_R90();
 800989e:	f7fe fb2d 	bl	8007efc <v_R90>
					for(int i = 0; i < 8; i++){
 80098a2:	6a3b      	ldr	r3, [r7, #32]
 80098a4:	3301      	adds	r3, #1
 80098a6:	623b      	str	r3, [r7, #32]
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	2b07      	cmp	r3, #7
 80098ac:	ddf7      	ble.n	800989e <v_test+0x2d2>
					}
//					v_R45();
					half_sectionVD();
 80098ae:	f7fc f9bf 	bl	8005c30 <half_sectionVD>
					break;
 80098b2:	e0b0      	b.n	8009a16 <v_test+0x44a>
				case 12:
					//----V左90----
					printf("V 90 left .\n");
 80098b4:	480c      	ldr	r0, [pc, #48]	; (80098e8 <v_test+0x31c>)
 80098b6:	f008 fc75 	bl	80121a4 <puts>
					half_sectionVA();
 80098ba:	f7fc f96f 	bl	8005b9c <half_sectionVA>
//					v_L45();
					for(int i = 0; i < 8; i++){
 80098be:	2300      	movs	r3, #0
 80098c0:	61fb      	str	r3, [r7, #28]
 80098c2:	e01c      	b.n	80098fe <v_test+0x332>
 80098c4:	0801344c 	.word	0x0801344c
 80098c8:	20000aec 	.word	0x20000aec
 80098cc:	080132f8 	.word	0x080132f8
 80098d0:	40020000 	.word	0x40020000
 80098d4:	20000f68 	.word	0x20000f68
 80098d8:	20000f64 	.word	0x20000f64
 80098dc:	08013464 	.word	0x08013464
 80098e0:	08013474 	.word	0x08013474
 80098e4:	08013480 	.word	0x08013480
 80098e8:	08013490 	.word	0x08013490
 80098ec:	0801349c 	.word	0x0801349c
 80098f0:	080134ac 	.word	0x080134ac
						v_L90();
 80098f4:	f7fe fbd2 	bl	800809c <v_L90>
					for(int i = 0; i < 8; i++){
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	3301      	adds	r3, #1
 80098fc:	61fb      	str	r3, [r7, #28]
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	2b07      	cmp	r3, #7
 8009902:	ddf7      	ble.n	80098f4 <v_test+0x328>
					}
//					v_L45();
					half_sectionVD();
 8009904:	f7fc f994 	bl	8005c30 <half_sectionVD>
					break;
 8009908:	e085      	b.n	8009a16 <v_test+0x44a>
				case 13:
					//----V右135----
					printf("V 135 right .\n");
 800990a:	4845      	ldr	r0, [pc, #276]	; (8009a20 <v_test+0x454>)
 800990c:	f008 fc4a 	bl	80121a4 <puts>
					half_sectionA();
 8009910:	f7fc f8b8 	bl	8005a84 <half_sectionA>
//					v_R45();
					for(int i = 0; i < 4; i++){
 8009914:	2300      	movs	r3, #0
 8009916:	61bb      	str	r3, [r7, #24]
 8009918:	e004      	b.n	8009924 <v_test+0x358>
						v_R135();
 800991a:	f7fe fc87 	bl	800822c <v_R135>
					for(int i = 0; i < 4; i++){
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	3301      	adds	r3, #1
 8009922:	61bb      	str	r3, [r7, #24]
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	2b03      	cmp	r3, #3
 8009928:	ddf7      	ble.n	800991a <v_test+0x34e>
					}
//					v_R45();
					half_sectionD();
 800992a:	f7fc f8f5 	bl	8005b18 <half_sectionD>
					break;
 800992e:	e072      	b.n	8009a16 <v_test+0x44a>
				case 14:
					//----V左135----
					printf("V 135 left .\n");
 8009930:	483c      	ldr	r0, [pc, #240]	; (8009a24 <v_test+0x458>)
 8009932:	f008 fc37 	bl	80121a4 <puts>
					half_sectionA();
 8009936:	f7fc f8a5 	bl	8005a84 <half_sectionA>
//					v_L45();
					for(int i = 0; i < 4; i++){
 800993a:	2300      	movs	r3, #0
 800993c:	617b      	str	r3, [r7, #20]
 800993e:	e004      	b.n	800994a <v_test+0x37e>
						v_L135();
 8009940:	f7fe fe5e 	bl	8008600 <v_L135>
					for(int i = 0; i < 4; i++){
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	3301      	adds	r3, #1
 8009948:	617b      	str	r3, [r7, #20]
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	2b03      	cmp	r3, #3
 800994e:	ddf7      	ble.n	8009940 <v_test+0x374>
					}
//					v_L45();
					half_sectionD();
 8009950:	f7fc f8e2 	bl	8005b18 <half_sectionD>
					break;
 8009954:	e05f      	b.n	8009a16 <v_test+0x44a>
					break;
				case 16:
					break;
				case 17:
					//----V右45D----
					printf("V 45 right .\n");
 8009956:	4834      	ldr	r0, [pc, #208]	; (8009a28 <v_test+0x45c>)
 8009958:	f008 fc24 	bl	80121a4 <puts>
					MF2.FLAG.V = 1;
 800995c:	4a33      	ldr	r2, [pc, #204]	; (8009a2c <v_test+0x460>)
 800995e:	8813      	ldrh	r3, [r2, #0]
 8009960:	f043 0308 	orr.w	r3, r3, #8
 8009964:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 8009966:	f7fc f919 	bl	8005b9c <half_sectionVA>
					for(int i = 0; i < 1; i++){
 800996a:	2300      	movs	r3, #0
 800996c:	613b      	str	r3, [r7, #16]
 800996e:	e004      	b.n	800997a <v_test+0x3ae>
//						v_R45D();
						v_R45();
 8009970:	f7fd fc5a 	bl	8007228 <v_R45>
					for(int i = 0; i < 1; i++){
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	3301      	adds	r3, #1
 8009978:	613b      	str	r3, [r7, #16]
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	2b00      	cmp	r3, #0
 800997e:	ddf7      	ble.n	8009970 <v_test+0x3a4>
					}
					half_sectionD();
 8009980:	f7fc f8ca 	bl	8005b18 <half_sectionD>
					break;
 8009984:	e047      	b.n	8009a16 <v_test+0x44a>
				case 18:
					//----V左45D----
					printf("V 45 left .\n");
 8009986:	482a      	ldr	r0, [pc, #168]	; (8009a30 <v_test+0x464>)
 8009988:	f008 fc0c 	bl	80121a4 <puts>
					MF2.FLAG.V = 1;
 800998c:	4a27      	ldr	r2, [pc, #156]	; (8009a2c <v_test+0x460>)
 800998e:	8813      	ldrh	r3, [r2, #0]
 8009990:	f043 0308 	orr.w	r3, r3, #8
 8009994:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 8009996:	f7fc f901 	bl	8005b9c <half_sectionVA>
					for(int i = 0; i < 1; i++){
 800999a:	2300      	movs	r3, #0
 800999c:	60fb      	str	r3, [r7, #12]
 800999e:	e004      	b.n	80099aa <v_test+0x3de>
//						v_L45D();
						v_L45();
 80099a0:	f7fd fe28 	bl	80075f4 <v_L45>
					for(int i = 0; i < 1; i++){
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	3301      	adds	r3, #1
 80099a8:	60fb      	str	r3, [r7, #12]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	ddf7      	ble.n	80099a0 <v_test+0x3d4>
					}
					half_sectionD();
 80099b0:	f7fc f8b2 	bl	8005b18 <half_sectionD>
					break;
 80099b4:	e02f      	b.n	8009a16 <v_test+0x44a>
				case 19:
					//----V右135D----
					printf("V 135 right .\n");
 80099b6:	481a      	ldr	r0, [pc, #104]	; (8009a20 <v_test+0x454>)
 80099b8:	f008 fbf4 	bl	80121a4 <puts>
					MF2.FLAG.V = 1;
 80099bc:	4a1b      	ldr	r2, [pc, #108]	; (8009a2c <v_test+0x460>)
 80099be:	8813      	ldrh	r3, [r2, #0]
 80099c0:	f043 0308 	orr.w	r3, r3, #8
 80099c4:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 80099c6:	f7fc f8e9 	bl	8005b9c <half_sectionVA>
					for(int i = 0; i < 1; i++){
 80099ca:	2300      	movs	r3, #0
 80099cc:	60bb      	str	r3, [r7, #8]
 80099ce:	e004      	b.n	80099da <v_test+0x40e>
//						v_R135D();
						v_R135();
 80099d0:	f7fe fc2c 	bl	800822c <v_R135>
					for(int i = 0; i < 1; i++){
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	3301      	adds	r3, #1
 80099d8:	60bb      	str	r3, [r7, #8]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	ddf7      	ble.n	80099d0 <v_test+0x404>
					}
					half_sectionD();
 80099e0:	f7fc f89a 	bl	8005b18 <half_sectionD>
					break;
 80099e4:	e017      	b.n	8009a16 <v_test+0x44a>
				case 20:
					//----V左135D----
					printf("V 135 left .\n");
 80099e6:	480f      	ldr	r0, [pc, #60]	; (8009a24 <v_test+0x458>)
 80099e8:	f008 fbdc 	bl	80121a4 <puts>
					MF2.FLAG.V = 1;
 80099ec:	4a0f      	ldr	r2, [pc, #60]	; (8009a2c <v_test+0x460>)
 80099ee:	8813      	ldrh	r3, [r2, #0]
 80099f0:	f043 0308 	orr.w	r3, r3, #8
 80099f4:	8013      	strh	r3, [r2, #0]
					half_sectionVA();
 80099f6:	f7fc f8d1 	bl	8005b9c <half_sectionVA>
					for(int i = 0; i < 1; i++){
 80099fa:	2300      	movs	r3, #0
 80099fc:	607b      	str	r3, [r7, #4]
 80099fe:	e004      	b.n	8009a0a <v_test+0x43e>
//						v_L135D();
						v_L135();
 8009a00:	f7fe fdfe 	bl	8008600 <v_L135>
					for(int i = 0; i < 1; i++){
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	3301      	adds	r3, #1
 8009a08:	607b      	str	r3, [r7, #4]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	ddf7      	ble.n	8009a00 <v_test+0x434>
					}
					half_sectionD();
 8009a10:	f7fc f882 	bl	8005b18 <half_sectionD>
					break;
 8009a14:	bf00      	nop
			}
		full_led_write(RED);
 8009a16:	2001      	movs	r0, #1
 8009a18:	f007 fdbc 	bl	8011594 <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009a1c:	e5e1      	b.n	80095e2 <v_test+0x16>
 8009a1e:	bf00      	nop
 8009a20:	0801349c 	.word	0x0801349c
 8009a24:	080134ac 	.word	0x080134ac
 8009a28:	08013464 	.word	0x08013464
 8009a2c:	20000f64 	.word	0x20000f64
 8009a30:	08013474 	.word	0x08013474

08009a34 <pass_test>:
//pass_test
// pass圧縮走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_test(void){
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0

	int mode = 0;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	607b      	str	r3, [r7, #4]
	printf("Test pass Run, Mode : %d\n", mode);
 8009a3e:	6879      	ldr	r1, [r7, #4]
 8009a40:	48a2      	ldr	r0, [pc, #648]	; (8009ccc <pass_test+0x298>)
 8009a42:	f008 fb3b 	bl	80120bc <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	f003 0301 	and.w	r3, r3, #1
 8009a4e:	b2d8      	uxtb	r0, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	f003 0302 	and.w	r3, r3, #2
 8009a58:	b2d9      	uxtb	r1, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	f003 0304 	and.w	r3, r3, #4
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	461a      	mov	r2, r3
 8009a66:	f007 fd5b 	bl	8011520 <led_write>
		  if(dist_r >= 20){
 8009a6a:	4b99      	ldr	r3, [pc, #612]	; (8009cd0 <pass_test+0x29c>)
 8009a6c:	edd3 7a00 	vldr	s15, [r3]
 8009a70:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a7c:	db0f      	blt.n	8009a9e <pass_test+0x6a>
			  mode++;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	3301      	adds	r3, #1
 8009a82:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009a84:	4b92      	ldr	r3, [pc, #584]	; (8009cd0 <pass_test+0x29c>)
 8009a86:	f04f 0200 	mov.w	r2, #0
 8009a8a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b07      	cmp	r3, #7
 8009a90:	dd01      	ble.n	8009a96 <pass_test+0x62>
				  mode = 0;
 8009a92:	2300      	movs	r3, #0
 8009a94:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	488e      	ldr	r0, [pc, #568]	; (8009cd4 <pass_test+0x2a0>)
 8009a9a:	f008 fb0f 	bl	80120bc <iprintf>
		  }
		  if(dist_r <= -20){
 8009a9e:	4b8c      	ldr	r3, [pc, #560]	; (8009cd0 <pass_test+0x29c>)
 8009aa0:	edd3 7a00 	vldr	s15, [r3]
 8009aa4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8009aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ab0:	d80f      	bhi.n	8009ad2 <pass_test+0x9e>
			  mode--;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009ab8:	4b85      	ldr	r3, [pc, #532]	; (8009cd0 <pass_test+0x29c>)
 8009aba:	f04f 0200 	mov.w	r2, #0
 8009abe:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	da01      	bge.n	8009aca <pass_test+0x96>
				  mode = 7;
 8009ac6:	2307      	movs	r3, #7
 8009ac8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8009aca:	6879      	ldr	r1, [r7, #4]
 8009acc:	4881      	ldr	r0, [pc, #516]	; (8009cd4 <pass_test+0x2a0>)
 8009ace:	f008 faf5 	bl	80120bc <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009ad2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009ad6:	4880      	ldr	r0, [pc, #512]	; (8009cd8 <pass_test+0x2a4>)
 8009ad8:	f7f8 fbfc 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1b1      	bne.n	8009a46 <pass_test+0x12>
			  HAL_Delay(50);
 8009ae2:	2032      	movs	r0, #50	; 0x32
 8009ae4:	f7f7 fa9a 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8009ae8:	bf00      	nop
 8009aea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009aee:	487a      	ldr	r0, [pc, #488]	; (8009cd8 <pass_test+0x2a4>)
 8009af0:	f7f8 fbf0 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d0f7      	beq.n	8009aea <pass_test+0xb6>
			  drive_ready();
 8009afa:	f7fb f8c1 	bl	8004c80 <drive_ready>
			  MF2.FLAG.V = 0;
 8009afe:	4a77      	ldr	r2, [pc, #476]	; (8009cdc <pass_test+0x2a8>)
 8009b00:	8813      	ldrh	r3, [r2, #0]
 8009b02:	f36f 03c3 	bfc	r3, #3, #1
 8009b06:	8013      	strh	r3, [r2, #0]

			  switch(mode){
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b07      	cmp	r3, #7
 8009b0c:	d89b      	bhi.n	8009a46 <pass_test+0x12>
 8009b0e:	a201      	add	r2, pc, #4	; (adr r2, 8009b14 <pass_test+0xe0>)
 8009b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b14:	08009b35 	.word	0x08009b35
 8009b18:	08009bbd 	.word	0x08009bbd
 8009b1c:	08009c45 	.word	0x08009c45
 8009b20:	08009d11 	.word	0x08009d11
 8009b24:	08009d99 	.word	0x08009d99
 8009b28:	08009e21 	.word	0x08009e21
 8009b2c:	08009ea9 	.word	0x08009ea9
 8009b30:	08009f31 	.word	0x08009f31
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 8009b34:	486a      	ldr	r0, [pc, #424]	; (8009ce0 <pass_test+0x2ac>)
 8009b36:	f008 fb35 	bl	80121a4 <puts>

					MF.FLAG.SCND = 0;
 8009b3a:	4a6a      	ldr	r2, [pc, #424]	; (8009ce4 <pass_test+0x2b0>)
 8009b3c:	8813      	ldrh	r3, [r2, #0]
 8009b3e:	f36f 1345 	bfc	r3, #5, #1
 8009b42:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009b44:	4a67      	ldr	r2, [pc, #412]	; (8009ce4 <pass_test+0x2b0>)
 8009b46:	8813      	ldrh	r3, [r2, #0]
 8009b48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b4c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 8009b4e:	4a65      	ldr	r2, [pc, #404]	; (8009ce4 <pass_test+0x2b0>)
 8009b50:	8813      	ldrh	r3, [r2, #0]
 8009b52:	f36f 238a 	bfc	r3, #10, #1
 8009b56:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 8009b58:	4b63      	ldr	r3, [pc, #396]	; (8009ce8 <pass_test+0x2b4>)
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009b5e:	4b63      	ldr	r3, [pc, #396]	; (8009cec <pass_test+0x2b8>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009b64:	4b62      	ldr	r3, [pc, #392]	; (8009cf0 <pass_test+0x2bc>)
 8009b66:	2201      	movs	r2, #1
 8009b68:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009b6a:	4b62      	ldr	r3, [pc, #392]	; (8009cf4 <pass_test+0x2c0>)
 8009b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b70:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8009b72:	4b61      	ldr	r3, [pc, #388]	; (8009cf8 <pass_test+0x2c4>)
 8009b74:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009b78:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 8009b7a:	4b5c      	ldr	r3, [pc, #368]	; (8009cec <pass_test+0x2b8>)
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8009b80:	4b5e      	ldr	r3, [pc, #376]	; (8009cfc <pass_test+0x2c8>)
 8009b82:	2201      	movs	r2, #1
 8009b84:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009b86:	4b5e      	ldr	r3, [pc, #376]	; (8009d00 <pass_test+0x2cc>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	701a      	strb	r2, [r3, #0]

					get_base();
 8009b8c:	f007 fc70 	bl	8011470 <get_base>

					searchC();
 8009b90:	f004 fcba 	bl	800e508 <searchC>
					HAL_Delay(2000);
 8009b94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009b98:	f7f7 fa40 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009b9c:	4b58      	ldr	r3, [pc, #352]	; (8009d00 <pass_test+0x2cc>)
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	701a      	strb	r2, [r3, #0]
 8009ba2:	4b57      	ldr	r3, [pc, #348]	; (8009d00 <pass_test+0x2cc>)
 8009ba4:	781a      	ldrb	r2, [r3, #0]
 8009ba6:	4b55      	ldr	r3, [pc, #340]	; (8009cfc <pass_test+0x2c8>)
 8009ba8:	701a      	strb	r2, [r3, #0]
					searchC();
 8009baa:	f004 fcad 	bl	800e508 <searchC>

					goal_x = GOAL_X;
 8009bae:	4b53      	ldr	r3, [pc, #332]	; (8009cfc <pass_test+0x2c8>)
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009bb4:	4b52      	ldr	r3, [pc, #328]	; (8009d00 <pass_test+0x2cc>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	701a      	strb	r2, [r3, #0]
					break;
 8009bba:	e1fd      	b.n	8009fb8 <pass_test+0x584>
				case 1:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 8009bbc:	4851      	ldr	r0, [pc, #324]	; (8009d04 <pass_test+0x2d0>)
 8009bbe:	f008 faf1 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 8009bc2:	4a48      	ldr	r2, [pc, #288]	; (8009ce4 <pass_test+0x2b0>)
 8009bc4:	8813      	ldrh	r3, [r2, #0]
 8009bc6:	f043 0320 	orr.w	r3, r3, #32
 8009bca:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009bcc:	4a45      	ldr	r2, [pc, #276]	; (8009ce4 <pass_test+0x2b0>)
 8009bce:	8813      	ldrh	r3, [r2, #0]
 8009bd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009bd4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009bd6:	4a43      	ldr	r2, [pc, #268]	; (8009ce4 <pass_test+0x2b0>)
 8009bd8:	8813      	ldrh	r3, [r2, #0]
 8009bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009bde:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009be0:	4b41      	ldr	r3, [pc, #260]	; (8009ce8 <pass_test+0x2b4>)
 8009be2:	2201      	movs	r2, #1
 8009be4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009be6:	4b41      	ldr	r3, [pc, #260]	; (8009cec <pass_test+0x2b8>)
 8009be8:	2200      	movs	r2, #0
 8009bea:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009bec:	4b40      	ldr	r3, [pc, #256]	; (8009cf0 <pass_test+0x2bc>)
 8009bee:	2201      	movs	r2, #1
 8009bf0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009bf2:	4b40      	ldr	r3, [pc, #256]	; (8009cf4 <pass_test+0x2c0>)
 8009bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bf8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8009bfa:	4b3f      	ldr	r3, [pc, #252]	; (8009cf8 <pass_test+0x2c4>)
 8009bfc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009c00:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8009c02:	4b41      	ldr	r3, [pc, #260]	; (8009d08 <pass_test+0x2d4>)
 8009c04:	2203      	movs	r2, #3
 8009c06:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009c08:	4b3c      	ldr	r3, [pc, #240]	; (8009cfc <pass_test+0x2c8>)
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009c0e:	4b3c      	ldr	r3, [pc, #240]	; (8009d00 <pass_test+0x2cc>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	701a      	strb	r2, [r3, #0]

					get_base();
 8009c14:	f007 fc2c 	bl	8011470 <get_base>

					searchF3();
 8009c18:	f005 f8ec 	bl	800edf4 <searchF3>
					HAL_Delay(2000);
 8009c1c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009c20:	f7f7 f9fc 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009c24:	4b36      	ldr	r3, [pc, #216]	; (8009d00 <pass_test+0x2cc>)
 8009c26:	2200      	movs	r2, #0
 8009c28:	701a      	strb	r2, [r3, #0]
 8009c2a:	4b35      	ldr	r3, [pc, #212]	; (8009d00 <pass_test+0x2cc>)
 8009c2c:	781a      	ldrb	r2, [r3, #0]
 8009c2e:	4b33      	ldr	r3, [pc, #204]	; (8009cfc <pass_test+0x2c8>)
 8009c30:	701a      	strb	r2, [r3, #0]
					searchF3();
 8009c32:	f005 f8df 	bl	800edf4 <searchF3>

					goal_x = GOAL_X;
 8009c36:	4b31      	ldr	r3, [pc, #196]	; (8009cfc <pass_test+0x2c8>)
 8009c38:	2201      	movs	r2, #1
 8009c3a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009c3c:	4b30      	ldr	r3, [pc, #192]	; (8009d00 <pass_test+0x2cc>)
 8009c3e:	2200      	movs	r2, #0
 8009c40:	701a      	strb	r2, [r3, #0]
					break;
 8009c42:	e1b9      	b.n	8009fb8 <pass_test+0x584>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 8009c44:	4831      	ldr	r0, [pc, #196]	; (8009d0c <pass_test+0x2d8>)
 8009c46:	f008 faad 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 8009c4a:	4a26      	ldr	r2, [pc, #152]	; (8009ce4 <pass_test+0x2b0>)
 8009c4c:	8813      	ldrh	r3, [r2, #0]
 8009c4e:	f043 0320 	orr.w	r3, r3, #32
 8009c52:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009c54:	4a23      	ldr	r2, [pc, #140]	; (8009ce4 <pass_test+0x2b0>)
 8009c56:	8813      	ldrh	r3, [r2, #0]
 8009c58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c5c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009c5e:	4a21      	ldr	r2, [pc, #132]	; (8009ce4 <pass_test+0x2b0>)
 8009c60:	8813      	ldrh	r3, [r2, #0]
 8009c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c66:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 8009c68:	4b1f      	ldr	r3, [pc, #124]	; (8009ce8 <pass_test+0x2b4>)
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009c6e:	4b1f      	ldr	r3, [pc, #124]	; (8009cec <pass_test+0x2b8>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009c74:	4b1e      	ldr	r3, [pc, #120]	; (8009cf0 <pass_test+0x2bc>)
 8009c76:	2201      	movs	r2, #1
 8009c78:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009c7a:	4b1e      	ldr	r3, [pc, #120]	; (8009cf4 <pass_test+0x2c0>)
 8009c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c80:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8009c82:	4b1d      	ldr	r3, [pc, #116]	; (8009cf8 <pass_test+0x2c4>)
 8009c84:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009c88:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8009c8a:	4b1f      	ldr	r3, [pc, #124]	; (8009d08 <pass_test+0x2d4>)
 8009c8c:	2203      	movs	r2, #3
 8009c8e:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009c90:	4b1a      	ldr	r3, [pc, #104]	; (8009cfc <pass_test+0x2c8>)
 8009c92:	2201      	movs	r2, #1
 8009c94:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009c96:	4b1a      	ldr	r3, [pc, #104]	; (8009d00 <pass_test+0x2cc>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	701a      	strb	r2, [r3, #0]

					get_base();
 8009c9c:	f007 fbe8 	bl	8011470 <get_base>

					searchF3();
 8009ca0:	f005 f8a8 	bl	800edf4 <searchF3>
					HAL_Delay(2000);
 8009ca4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009ca8:	f7f7 f9b8 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009cac:	4b14      	ldr	r3, [pc, #80]	; (8009d00 <pass_test+0x2cc>)
 8009cae:	2200      	movs	r2, #0
 8009cb0:	701a      	strb	r2, [r3, #0]
 8009cb2:	4b13      	ldr	r3, [pc, #76]	; (8009d00 <pass_test+0x2cc>)
 8009cb4:	781a      	ldrb	r2, [r3, #0]
 8009cb6:	4b11      	ldr	r3, [pc, #68]	; (8009cfc <pass_test+0x2c8>)
 8009cb8:	701a      	strb	r2, [r3, #0]
					searchF3();
 8009cba:	f005 f89b 	bl	800edf4 <searchF3>

					goal_x = GOAL_X;
 8009cbe:	4b0f      	ldr	r3, [pc, #60]	; (8009cfc <pass_test+0x2c8>)
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009cc4:	4b0e      	ldr	r3, [pc, #56]	; (8009d00 <pass_test+0x2cc>)
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	701a      	strb	r2, [r3, #0]
					break;
 8009cca:	e175      	b.n	8009fb8 <pass_test+0x584>
 8009ccc:	080134bc 	.word	0x080134bc
 8009cd0:	20000aec 	.word	0x20000aec
 8009cd4:	080132f8 	.word	0x080132f8
 8009cd8:	40020000 	.word	0x40020000
 8009cdc:	20000f64 	.word	0x20000f64
 8009ce0:	080134d8 	.word	0x080134d8
 8009ce4:	20000f68 	.word	0x20000f68
 8009ce8:	20000456 	.word	0x20000456
 8009cec:	200015c8 	.word	0x200015c8
 8009cf0:	20000bb1 	.word	0x20000bb1
 8009cf4:	20000454 	.word	0x20000454
 8009cf8:	20000f7c 	.word	0x20000f7c
 8009cfc:	20000bb0 	.word	0x20000bb0
 8009d00:	20000b4c 	.word	0x20000b4c
 8009d04:	080134ec 	.word	0x080134ec
 8009d08:	20000457 	.word	0x20000457
 8009d0c:	080134fc 	.word	0x080134fc
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 8009d10:	48aa      	ldr	r0, [pc, #680]	; (8009fbc <pass_test+0x588>)
 8009d12:	f008 fa47 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 8009d16:	4aaa      	ldr	r2, [pc, #680]	; (8009fc0 <pass_test+0x58c>)
 8009d18:	8813      	ldrh	r3, [r2, #0]
 8009d1a:	f043 0320 	orr.w	r3, r3, #32
 8009d1e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009d20:	4aa7      	ldr	r2, [pc, #668]	; (8009fc0 <pass_test+0x58c>)
 8009d22:	8813      	ldrh	r3, [r2, #0]
 8009d24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d28:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009d2a:	4aa5      	ldr	r2, [pc, #660]	; (8009fc0 <pass_test+0x58c>)
 8009d2c:	8813      	ldrh	r3, [r2, #0]
 8009d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d32:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 8009d34:	4ba3      	ldr	r3, [pc, #652]	; (8009fc4 <pass_test+0x590>)
 8009d36:	2203      	movs	r2, #3
 8009d38:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009d3a:	4ba3      	ldr	r3, [pc, #652]	; (8009fc8 <pass_test+0x594>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009d40:	4ba2      	ldr	r3, [pc, #648]	; (8009fcc <pass_test+0x598>)
 8009d42:	2201      	movs	r2, #1
 8009d44:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009d46:	4ba2      	ldr	r3, [pc, #648]	; (8009fd0 <pass_test+0x59c>)
 8009d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d4c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 8009d4e:	4ba1      	ldr	r3, [pc, #644]	; (8009fd4 <pass_test+0x5a0>)
 8009d50:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009d54:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8009d56:	4ba0      	ldr	r3, [pc, #640]	; (8009fd8 <pass_test+0x5a4>)
 8009d58:	2203      	movs	r2, #3
 8009d5a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009d5c:	4b9f      	ldr	r3, [pc, #636]	; (8009fdc <pass_test+0x5a8>)
 8009d5e:	2201      	movs	r2, #1
 8009d60:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009d62:	4b9f      	ldr	r3, [pc, #636]	; (8009fe0 <pass_test+0x5ac>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	701a      	strb	r2, [r3, #0]

					get_base();
 8009d68:	f007 fb82 	bl	8011470 <get_base>

					searchF3();
 8009d6c:	f005 f842 	bl	800edf4 <searchF3>
					HAL_Delay(2000);
 8009d70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009d74:	f7f7 f952 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009d78:	4b99      	ldr	r3, [pc, #612]	; (8009fe0 <pass_test+0x5ac>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	701a      	strb	r2, [r3, #0]
 8009d7e:	4b98      	ldr	r3, [pc, #608]	; (8009fe0 <pass_test+0x5ac>)
 8009d80:	781a      	ldrb	r2, [r3, #0]
 8009d82:	4b96      	ldr	r3, [pc, #600]	; (8009fdc <pass_test+0x5a8>)
 8009d84:	701a      	strb	r2, [r3, #0]
					searchF3();
 8009d86:	f005 f835 	bl	800edf4 <searchF3>

					goal_x = GOAL_X;
 8009d8a:	4b94      	ldr	r3, [pc, #592]	; (8009fdc <pass_test+0x5a8>)
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009d90:	4b93      	ldr	r3, [pc, #588]	; (8009fe0 <pass_test+0x5ac>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	701a      	strb	r2, [r3, #0]
					break;
 8009d96:	e10f      	b.n	8009fb8 <pass_test+0x584>
				case 4:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 8009d98:	4892      	ldr	r0, [pc, #584]	; (8009fe4 <pass_test+0x5b0>)
 8009d9a:	f008 fa03 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 8009d9e:	4a88      	ldr	r2, [pc, #544]	; (8009fc0 <pass_test+0x58c>)
 8009da0:	8813      	ldrh	r3, [r2, #0]
 8009da2:	f043 0320 	orr.w	r3, r3, #32
 8009da6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009da8:	4a85      	ldr	r2, [pc, #532]	; (8009fc0 <pass_test+0x58c>)
 8009daa:	8813      	ldrh	r3, [r2, #0]
 8009dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009db0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009db2:	4a83      	ldr	r2, [pc, #524]	; (8009fc0 <pass_test+0x58c>)
 8009db4:	8813      	ldrh	r3, [r2, #0]
 8009db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009dba:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009dbc:	4b81      	ldr	r3, [pc, #516]	; (8009fc4 <pass_test+0x590>)
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009dc2:	4b81      	ldr	r3, [pc, #516]	; (8009fc8 <pass_test+0x594>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009dc8:	4b80      	ldr	r3, [pc, #512]	; (8009fcc <pass_test+0x598>)
 8009dca:	2201      	movs	r2, #1
 8009dcc:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009dce:	4b80      	ldr	r3, [pc, #512]	; (8009fd0 <pass_test+0x59c>)
 8009dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dd4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8009dd6:	4b7f      	ldr	r3, [pc, #508]	; (8009fd4 <pass_test+0x5a0>)
 8009dd8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009ddc:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 8009dde:	4b7e      	ldr	r3, [pc, #504]	; (8009fd8 <pass_test+0x5a4>)
 8009de0:	2204      	movs	r2, #4
 8009de2:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009de4:	4b7d      	ldr	r3, [pc, #500]	; (8009fdc <pass_test+0x5a8>)
 8009de6:	2201      	movs	r2, #1
 8009de8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009dea:	4b7d      	ldr	r3, [pc, #500]	; (8009fe0 <pass_test+0x5ac>)
 8009dec:	2200      	movs	r2, #0
 8009dee:	701a      	strb	r2, [r3, #0]

					get_base();
 8009df0:	f007 fb3e 	bl	8011470 <get_base>

					searchF4();
 8009df4:	f005 f8d4 	bl	800efa0 <searchF4>
					HAL_Delay(2000);
 8009df8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009dfc:	f7f7 f90e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009e00:	4b77      	ldr	r3, [pc, #476]	; (8009fe0 <pass_test+0x5ac>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	701a      	strb	r2, [r3, #0]
 8009e06:	4b76      	ldr	r3, [pc, #472]	; (8009fe0 <pass_test+0x5ac>)
 8009e08:	781a      	ldrb	r2, [r3, #0]
 8009e0a:	4b74      	ldr	r3, [pc, #464]	; (8009fdc <pass_test+0x5a8>)
 8009e0c:	701a      	strb	r2, [r3, #0]
					searchF4();
 8009e0e:	f005 f8c7 	bl	800efa0 <searchF4>

					goal_x = GOAL_X;
 8009e12:	4b72      	ldr	r3, [pc, #456]	; (8009fdc <pass_test+0x5a8>)
 8009e14:	2201      	movs	r2, #1
 8009e16:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009e18:	4b71      	ldr	r3, [pc, #452]	; (8009fe0 <pass_test+0x5ac>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	701a      	strb	r2, [r3, #0]
					break;
 8009e1e:	e0cb      	b.n	8009fb8 <pass_test+0x584>
				case 5:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 8009e20:	4870      	ldr	r0, [pc, #448]	; (8009fe4 <pass_test+0x5b0>)
 8009e22:	f008 f9bf 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 8009e26:	4a66      	ldr	r2, [pc, #408]	; (8009fc0 <pass_test+0x58c>)
 8009e28:	8813      	ldrh	r3, [r2, #0]
 8009e2a:	f043 0320 	orr.w	r3, r3, #32
 8009e2e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009e30:	4a63      	ldr	r2, [pc, #396]	; (8009fc0 <pass_test+0x58c>)
 8009e32:	8813      	ldrh	r3, [r2, #0]
 8009e34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e38:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009e3a:	4a61      	ldr	r2, [pc, #388]	; (8009fc0 <pass_test+0x58c>)
 8009e3c:	8813      	ldrh	r3, [r2, #0]
 8009e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e42:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 8009e44:	4b5f      	ldr	r3, [pc, #380]	; (8009fc4 <pass_test+0x590>)
 8009e46:	2202      	movs	r2, #2
 8009e48:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009e4a:	4b5f      	ldr	r3, [pc, #380]	; (8009fc8 <pass_test+0x594>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009e50:	4b5e      	ldr	r3, [pc, #376]	; (8009fcc <pass_test+0x598>)
 8009e52:	2201      	movs	r2, #1
 8009e54:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009e56:	4b5e      	ldr	r3, [pc, #376]	; (8009fd0 <pass_test+0x59c>)
 8009e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e5c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8009e5e:	4b5d      	ldr	r3, [pc, #372]	; (8009fd4 <pass_test+0x5a0>)
 8009e60:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009e64:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 8009e66:	4b5c      	ldr	r3, [pc, #368]	; (8009fd8 <pass_test+0x5a4>)
 8009e68:	2204      	movs	r2, #4
 8009e6a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009e6c:	4b5b      	ldr	r3, [pc, #364]	; (8009fdc <pass_test+0x5a8>)
 8009e6e:	2201      	movs	r2, #1
 8009e70:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009e72:	4b5b      	ldr	r3, [pc, #364]	; (8009fe0 <pass_test+0x5ac>)
 8009e74:	2200      	movs	r2, #0
 8009e76:	701a      	strb	r2, [r3, #0]

					get_base();
 8009e78:	f007 fafa 	bl	8011470 <get_base>

					searchF4();
 8009e7c:	f005 f890 	bl	800efa0 <searchF4>
					HAL_Delay(2000);
 8009e80:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009e84:	f7f7 f8ca 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009e88:	4b55      	ldr	r3, [pc, #340]	; (8009fe0 <pass_test+0x5ac>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	701a      	strb	r2, [r3, #0]
 8009e8e:	4b54      	ldr	r3, [pc, #336]	; (8009fe0 <pass_test+0x5ac>)
 8009e90:	781a      	ldrb	r2, [r3, #0]
 8009e92:	4b52      	ldr	r3, [pc, #328]	; (8009fdc <pass_test+0x5a8>)
 8009e94:	701a      	strb	r2, [r3, #0]
					searchF4();
 8009e96:	f005 f883 	bl	800efa0 <searchF4>

					goal_x = GOAL_X;
 8009e9a:	4b50      	ldr	r3, [pc, #320]	; (8009fdc <pass_test+0x5a8>)
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009ea0:	4b4f      	ldr	r3, [pc, #316]	; (8009fe0 <pass_test+0x5ac>)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	701a      	strb	r2, [r3, #0]
					break;
 8009ea6:	e087      	b.n	8009fb8 <pass_test+0x584>
				case 6:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 8009ea8:	484e      	ldr	r0, [pc, #312]	; (8009fe4 <pass_test+0x5b0>)
 8009eaa:	f008 f97b 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 8009eae:	4a44      	ldr	r2, [pc, #272]	; (8009fc0 <pass_test+0x58c>)
 8009eb0:	8813      	ldrh	r3, [r2, #0]
 8009eb2:	f043 0320 	orr.w	r3, r3, #32
 8009eb6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009eb8:	4a41      	ldr	r2, [pc, #260]	; (8009fc0 <pass_test+0x58c>)
 8009eba:	8813      	ldrh	r3, [r2, #0]
 8009ebc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ec0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009ec2:	4a3f      	ldr	r2, [pc, #252]	; (8009fc0 <pass_test+0x58c>)
 8009ec4:	8813      	ldrh	r3, [r2, #0]
 8009ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009eca:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 8009ecc:	4b3d      	ldr	r3, [pc, #244]	; (8009fc4 <pass_test+0x590>)
 8009ece:	2203      	movs	r2, #3
 8009ed0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009ed2:	4b3d      	ldr	r3, [pc, #244]	; (8009fc8 <pass_test+0x594>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009ed8:	4b3c      	ldr	r3, [pc, #240]	; (8009fcc <pass_test+0x598>)
 8009eda:	2201      	movs	r2, #1
 8009edc:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009ede:	4b3c      	ldr	r3, [pc, #240]	; (8009fd0 <pass_test+0x59c>)
 8009ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ee4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 8009ee6:	4b3b      	ldr	r3, [pc, #236]	; (8009fd4 <pass_test+0x5a0>)
 8009ee8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009eec:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 8009eee:	4b3a      	ldr	r3, [pc, #232]	; (8009fd8 <pass_test+0x5a4>)
 8009ef0:	2204      	movs	r2, #4
 8009ef2:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009ef4:	4b39      	ldr	r3, [pc, #228]	; (8009fdc <pass_test+0x5a8>)
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009efa:	4b39      	ldr	r3, [pc, #228]	; (8009fe0 <pass_test+0x5ac>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	701a      	strb	r2, [r3, #0]

					get_base();
 8009f00:	f007 fab6 	bl	8011470 <get_base>

					searchF4();
 8009f04:	f005 f84c 	bl	800efa0 <searchF4>
					HAL_Delay(2000);
 8009f08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009f0c:	f7f7 f886 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009f10:	4b33      	ldr	r3, [pc, #204]	; (8009fe0 <pass_test+0x5ac>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	701a      	strb	r2, [r3, #0]
 8009f16:	4b32      	ldr	r3, [pc, #200]	; (8009fe0 <pass_test+0x5ac>)
 8009f18:	781a      	ldrb	r2, [r3, #0]
 8009f1a:	4b30      	ldr	r3, [pc, #192]	; (8009fdc <pass_test+0x5a8>)
 8009f1c:	701a      	strb	r2, [r3, #0]
					searchF4();
 8009f1e:	f005 f83f 	bl	800efa0 <searchF4>

					goal_x = GOAL_X;
 8009f22:	4b2e      	ldr	r3, [pc, #184]	; (8009fdc <pass_test+0x5a8>)
 8009f24:	2201      	movs	r2, #1
 8009f26:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009f28:	4b2d      	ldr	r3, [pc, #180]	; (8009fe0 <pass_test+0x5ac>)
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	701a      	strb	r2, [r3, #0]
					break;
 8009f2e:	e043      	b.n	8009fb8 <pass_test+0x584>
				case 7:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-4.\n");
 8009f30:	482d      	ldr	r0, [pc, #180]	; (8009fe8 <pass_test+0x5b4>)
 8009f32:	f008 f937 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 8009f36:	4a22      	ldr	r2, [pc, #136]	; (8009fc0 <pass_test+0x58c>)
 8009f38:	8813      	ldrh	r3, [r2, #0]
 8009f3a:	f043 0320 	orr.w	r3, r3, #32
 8009f3e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009f40:	4a1f      	ldr	r2, [pc, #124]	; (8009fc0 <pass_test+0x58c>)
 8009f42:	8813      	ldrh	r3, [r2, #0]
 8009f44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f48:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009f4a:	4a1d      	ldr	r2, [pc, #116]	; (8009fc0 <pass_test+0x58c>)
 8009f4c:	8813      	ldrh	r3, [r2, #0]
 8009f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009f52:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH_HIGH;
 8009f54:	4b1b      	ldr	r3, [pc, #108]	; (8009fc4 <pass_test+0x590>)
 8009f56:	2204      	movs	r2, #4
 8009f58:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 8009f5a:	4b1b      	ldr	r3, [pc, #108]	; (8009fc8 <pass_test+0x594>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 8009f60:	4b1a      	ldr	r3, [pc, #104]	; (8009fcc <pass_test+0x598>)
 8009f62:	2201      	movs	r2, #1
 8009f64:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009f66:	4b1a      	ldr	r3, [pc, #104]	; (8009fd0 <pass_test+0x59c>)
 8009f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f6c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 8009f6e:	4b19      	ldr	r3, [pc, #100]	; (8009fd4 <pass_test+0x5a0>)
 8009f70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009f74:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8009f76:	4b18      	ldr	r3, [pc, #96]	; (8009fd8 <pass_test+0x5a4>)
 8009f78:	2203      	movs	r2, #3
 8009f7a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009f7c:	4b17      	ldr	r3, [pc, #92]	; (8009fdc <pass_test+0x5a8>)
 8009f7e:	2201      	movs	r2, #1
 8009f80:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009f82:	4b17      	ldr	r3, [pc, #92]	; (8009fe0 <pass_test+0x5ac>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	701a      	strb	r2, [r3, #0]

					get_base();
 8009f88:	f007 fa72 	bl	8011470 <get_base>

					searchF3();
 8009f8c:	f004 ff32 	bl	800edf4 <searchF3>
					HAL_Delay(2000);
 8009f90:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009f94:	f7f7 f842 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009f98:	4b11      	ldr	r3, [pc, #68]	; (8009fe0 <pass_test+0x5ac>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	701a      	strb	r2, [r3, #0]
 8009f9e:	4b10      	ldr	r3, [pc, #64]	; (8009fe0 <pass_test+0x5ac>)
 8009fa0:	781a      	ldrb	r2, [r3, #0]
 8009fa2:	4b0e      	ldr	r3, [pc, #56]	; (8009fdc <pass_test+0x5a8>)
 8009fa4:	701a      	strb	r2, [r3, #0]
					searchF3();
 8009fa6:	f004 ff25 	bl	800edf4 <searchF3>

					goal_x = GOAL_X;
 8009faa:	4b0c      	ldr	r3, [pc, #48]	; (8009fdc <pass_test+0x5a8>)
 8009fac:	2201      	movs	r2, #1
 8009fae:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009fb0:	4b0b      	ldr	r3, [pc, #44]	; (8009fe0 <pass_test+0x5ac>)
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	701a      	strb	r2, [r3, #0]
					break;
 8009fb6:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009fb8:	e545      	b.n	8009a46 <pass_test+0x12>
 8009fba:	bf00      	nop
 8009fbc:	080134fc 	.word	0x080134fc
 8009fc0:	20000f68 	.word	0x20000f68
 8009fc4:	20000456 	.word	0x20000456
 8009fc8:	200015c8 	.word	0x200015c8
 8009fcc:	20000bb1 	.word	0x20000bb1
 8009fd0:	20000454 	.word	0x20000454
 8009fd4:	20000f7c 	.word	0x20000f7c
 8009fd8:	20000457 	.word	0x20000457
 8009fdc:	20000bb0 	.word	0x20000bb0
 8009fe0:	20000b4c 	.word	0x20000b4c
 8009fe4:	0801350c 	.word	0x0801350c
 8009fe8:	0801351c 	.word	0x0801351c

08009fec <goal_test>:
//goal_test
// a複数マスgoal走行テスト
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void goal_test(void){
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0

	int mode = 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	607b      	str	r3, [r7, #4]
	printf("Test goal Run, Mode : %d\n", mode);
 8009ff6:	6879      	ldr	r1, [r7, #4]
 8009ff8:	48a2      	ldr	r0, [pc, #648]	; (800a284 <goal_test+0x298>)
 8009ffa:	f008 f85f 	bl	80120bc <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	b2db      	uxtb	r3, r3
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	b2d8      	uxtb	r0, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	f003 0302 	and.w	r3, r3, #2
 800a010:	b2d9      	uxtb	r1, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	b2db      	uxtb	r3, r3
 800a016:	f003 0304 	and.w	r3, r3, #4
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	461a      	mov	r2, r3
 800a01e:	f007 fa7f 	bl	8011520 <led_write>
		  if(dist_r >= 20){
 800a022:	4b99      	ldr	r3, [pc, #612]	; (800a288 <goal_test+0x29c>)
 800a024:	edd3 7a00 	vldr	s15, [r3]
 800a028:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a02c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a034:	db0f      	blt.n	800a056 <goal_test+0x6a>
			  mode++;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	3301      	adds	r3, #1
 800a03a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a03c:	4b92      	ldr	r3, [pc, #584]	; (800a288 <goal_test+0x29c>)
 800a03e:	f04f 0200 	mov.w	r2, #0
 800a042:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b07      	cmp	r3, #7
 800a048:	dd01      	ble.n	800a04e <goal_test+0x62>
				  mode = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a04e:	6879      	ldr	r1, [r7, #4]
 800a050:	488e      	ldr	r0, [pc, #568]	; (800a28c <goal_test+0x2a0>)
 800a052:	f008 f833 	bl	80120bc <iprintf>
		  }
		  if(dist_r <= -20){
 800a056:	4b8c      	ldr	r3, [pc, #560]	; (800a288 <goal_test+0x29c>)
 800a058:	edd3 7a00 	vldr	s15, [r3]
 800a05c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a060:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a068:	d80f      	bhi.n	800a08a <goal_test+0x9e>
			  mode--;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	3b01      	subs	r3, #1
 800a06e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a070:	4b85      	ldr	r3, [pc, #532]	; (800a288 <goal_test+0x29c>)
 800a072:	f04f 0200 	mov.w	r2, #0
 800a076:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	da01      	bge.n	800a082 <goal_test+0x96>
				  mode = 7;
 800a07e:	2307      	movs	r3, #7
 800a080:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a082:	6879      	ldr	r1, [r7, #4]
 800a084:	4881      	ldr	r0, [pc, #516]	; (800a28c <goal_test+0x2a0>)
 800a086:	f008 f819 	bl	80120bc <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a08a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a08e:	4880      	ldr	r0, [pc, #512]	; (800a290 <goal_test+0x2a4>)
 800a090:	f7f8 f920 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1b1      	bne.n	8009ffe <goal_test+0x12>
			  HAL_Delay(50);
 800a09a:	2032      	movs	r0, #50	; 0x32
 800a09c:	f7f6 ffbe 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a0a0:	bf00      	nop
 800a0a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a0a6:	487a      	ldr	r0, [pc, #488]	; (800a290 <goal_test+0x2a4>)
 800a0a8:	f7f8 f914 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d0f7      	beq.n	800a0a2 <goal_test+0xb6>
			  drive_ready();
 800a0b2:	f7fa fde5 	bl	8004c80 <drive_ready>
			  MF2.FLAG.V = 0;
 800a0b6:	4a77      	ldr	r2, [pc, #476]	; (800a294 <goal_test+0x2a8>)
 800a0b8:	8813      	ldrh	r3, [r2, #0]
 800a0ba:	f36f 03c3 	bfc	r3, #3, #1
 800a0be:	8013      	strh	r3, [r2, #0]

			  switch(mode){
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b07      	cmp	r3, #7
 800a0c4:	d89b      	bhi.n	8009ffe <goal_test+0x12>
 800a0c6:	a201      	add	r2, pc, #4	; (adr r2, 800a0cc <goal_test+0xe0>)
 800a0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0cc:	0800a0ed 	.word	0x0800a0ed
 800a0d0:	0800a175 	.word	0x0800a175
 800a0d4:	0800a1fd 	.word	0x0800a1fd
 800a0d8:	0800a2c9 	.word	0x0800a2c9
 800a0dc:	0800a351 	.word	0x0800a351
 800a0e0:	0800a3d9 	.word	0x0800a3d9
 800a0e4:	0800a461 	.word	0x0800a461
 800a0e8:	0800a4e9 	.word	0x0800a4e9
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800a0ec:	486a      	ldr	r0, [pc, #424]	; (800a298 <goal_test+0x2ac>)
 800a0ee:	f008 f859 	bl	80121a4 <puts>

					MF.FLAG.SCND = 0;
 800a0f2:	4a6a      	ldr	r2, [pc, #424]	; (800a29c <goal_test+0x2b0>)
 800a0f4:	8813      	ldrh	r3, [r2, #0]
 800a0f6:	f36f 1345 	bfc	r3, #5, #1
 800a0fa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a0fc:	4a67      	ldr	r2, [pc, #412]	; (800a29c <goal_test+0x2b0>)
 800a0fe:	8813      	ldrh	r3, [r2, #0]
 800a100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a104:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a106:	4a65      	ldr	r2, [pc, #404]	; (800a29c <goal_test+0x2b0>)
 800a108:	8813      	ldrh	r3, [r2, #0]
 800a10a:	f36f 238a 	bfc	r3, #10, #1
 800a10e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a110:	4b63      	ldr	r3, [pc, #396]	; (800a2a0 <goal_test+0x2b4>)
 800a112:	2202      	movs	r2, #2
 800a114:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a116:	4b63      	ldr	r3, [pc, #396]	; (800a2a4 <goal_test+0x2b8>)
 800a118:	2200      	movs	r2, #0
 800a11a:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a11c:	4b62      	ldr	r3, [pc, #392]	; (800a2a8 <goal_test+0x2bc>)
 800a11e:	2201      	movs	r2, #1
 800a120:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a122:	4b62      	ldr	r3, [pc, #392]	; (800a2ac <goal_test+0x2c0>)
 800a124:	f241 3288 	movw	r2, #5000	; 0x1388
 800a128:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a12a:	4b61      	ldr	r3, [pc, #388]	; (800a2b0 <goal_test+0x2c4>)
 800a12c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a130:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a132:	4b5c      	ldr	r3, [pc, #368]	; (800a2a4 <goal_test+0x2b8>)
 800a134:	2200      	movs	r2, #0
 800a136:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a138:	4b5e      	ldr	r3, [pc, #376]	; (800a2b4 <goal_test+0x2c8>)
 800a13a:	2201      	movs	r2, #1
 800a13c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a13e:	4b5e      	ldr	r3, [pc, #376]	; (800a2b8 <goal_test+0x2cc>)
 800a140:	2200      	movs	r2, #0
 800a142:	701a      	strb	r2, [r3, #0]

					get_base();
 800a144:	f007 f994 	bl	8011470 <get_base>

					searchC();
 800a148:	f004 f9de 	bl	800e508 <searchC>
					HAL_Delay(2000);
 800a14c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a150:	f7f6 ff64 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a154:	4b58      	ldr	r3, [pc, #352]	; (800a2b8 <goal_test+0x2cc>)
 800a156:	2200      	movs	r2, #0
 800a158:	701a      	strb	r2, [r3, #0]
 800a15a:	4b57      	ldr	r3, [pc, #348]	; (800a2b8 <goal_test+0x2cc>)
 800a15c:	781a      	ldrb	r2, [r3, #0]
 800a15e:	4b55      	ldr	r3, [pc, #340]	; (800a2b4 <goal_test+0x2c8>)
 800a160:	701a      	strb	r2, [r3, #0]
					searchC();
 800a162:	f004 f9d1 	bl	800e508 <searchC>

					goal_x = GOAL_X;
 800a166:	4b53      	ldr	r3, [pc, #332]	; (800a2b4 <goal_test+0x2c8>)
 800a168:	2201      	movs	r2, #1
 800a16a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a16c:	4b52      	ldr	r3, [pc, #328]	; (800a2b8 <goal_test+0x2cc>)
 800a16e:	2200      	movs	r2, #0
 800a170:	701a      	strb	r2, [r3, #0]
					break;
 800a172:	e1fd      	b.n	800a570 <goal_test+0x584>
				case 1:
					//----a一次探索スラローム走行 4マスgoal----
					printf("First Run. (4 goal)\n");
 800a174:	4851      	ldr	r0, [pc, #324]	; (800a2bc <goal_test+0x2d0>)
 800a176:	f008 f815 	bl	80121a4 <puts>

					MF.FLAG.SCND = 0;
 800a17a:	4a48      	ldr	r2, [pc, #288]	; (800a29c <goal_test+0x2b0>)
 800a17c:	8813      	ldrh	r3, [r2, #0]
 800a17e:	f36f 1345 	bfc	r3, #5, #1
 800a182:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a184:	4a45      	ldr	r2, [pc, #276]	; (800a29c <goal_test+0x2b0>)
 800a186:	8813      	ldrh	r3, [r2, #0]
 800a188:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a18c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a18e:	4a43      	ldr	r2, [pc, #268]	; (800a29c <goal_test+0x2b0>)
 800a190:	8813      	ldrh	r3, [r2, #0]
 800a192:	f36f 238a 	bfc	r3, #10, #1
 800a196:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a198:	4b41      	ldr	r3, [pc, #260]	; (800a2a0 <goal_test+0x2b4>)
 800a19a:	2202      	movs	r2, #2
 800a19c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a19e:	4b41      	ldr	r3, [pc, #260]	; (800a2a4 <goal_test+0x2b8>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a1a4:	4b40      	ldr	r3, [pc, #256]	; (800a2a8 <goal_test+0x2bc>)
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a1aa:	4b40      	ldr	r3, [pc, #256]	; (800a2ac <goal_test+0x2c0>)
 800a1ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1b0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a1b2:	4b3f      	ldr	r3, [pc, #252]	; (800a2b0 <goal_test+0x2c4>)
 800a1b4:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a1b8:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a1ba:	4b3a      	ldr	r3, [pc, #232]	; (800a2a4 <goal_test+0x2b8>)
 800a1bc:	2200      	movs	r2, #0
 800a1be:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a1c0:	4b3c      	ldr	r3, [pc, #240]	; (800a2b4 <goal_test+0x2c8>)
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a1c6:	4b3c      	ldr	r3, [pc, #240]	; (800a2b8 <goal_test+0x2cc>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	701a      	strb	r2, [r3, #0]

					get_base();
 800a1cc:	f007 f950 	bl	8011470 <get_base>

					searchC();
 800a1d0:	f004 f99a 	bl	800e508 <searchC>
					HAL_Delay(2000);
 800a1d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a1d8:	f7f6 ff20 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a1dc:	4b36      	ldr	r3, [pc, #216]	; (800a2b8 <goal_test+0x2cc>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	701a      	strb	r2, [r3, #0]
 800a1e2:	4b35      	ldr	r3, [pc, #212]	; (800a2b8 <goal_test+0x2cc>)
 800a1e4:	781a      	ldrb	r2, [r3, #0]
 800a1e6:	4b33      	ldr	r3, [pc, #204]	; (800a2b4 <goal_test+0x2c8>)
 800a1e8:	701a      	strb	r2, [r3, #0]
					searchC();
 800a1ea:	f004 f98d 	bl	800e508 <searchC>

					goal_x = GOAL_X;
 800a1ee:	4b31      	ldr	r3, [pc, #196]	; (800a2b4 <goal_test+0x2c8>)
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a1f4:	4b30      	ldr	r3, [pc, #192]	; (800a2b8 <goal_test+0x2cc>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	701a      	strb	r2, [r3, #0]
					break;
 800a1fa:	e1b9      	b.n	800a570 <goal_test+0x584>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed----
					printf("pass press 3-2.\n");
 800a1fc:	4830      	ldr	r0, [pc, #192]	; (800a2c0 <goal_test+0x2d4>)
 800a1fe:	f007 ffd1 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800a202:	4a26      	ldr	r2, [pc, #152]	; (800a29c <goal_test+0x2b0>)
 800a204:	8813      	ldrh	r3, [r2, #0]
 800a206:	f043 0320 	orr.w	r3, r3, #32
 800a20a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a20c:	4a23      	ldr	r2, [pc, #140]	; (800a29c <goal_test+0x2b0>)
 800a20e:	8813      	ldrh	r3, [r2, #0]
 800a210:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a214:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a216:	4a21      	ldr	r2, [pc, #132]	; (800a29c <goal_test+0x2b0>)
 800a218:	8813      	ldrh	r3, [r2, #0]
 800a21a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a21e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a220:	4b1f      	ldr	r3, [pc, #124]	; (800a2a0 <goal_test+0x2b4>)
 800a222:	2202      	movs	r2, #2
 800a224:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a226:	4b1f      	ldr	r3, [pc, #124]	; (800a2a4 <goal_test+0x2b8>)
 800a228:	2200      	movs	r2, #0
 800a22a:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a22c:	4b1e      	ldr	r3, [pc, #120]	; (800a2a8 <goal_test+0x2bc>)
 800a22e:	2201      	movs	r2, #1
 800a230:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a232:	4b1e      	ldr	r3, [pc, #120]	; (800a2ac <goal_test+0x2c0>)
 800a234:	f241 3288 	movw	r2, #5000	; 0x1388
 800a238:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a23a:	4b1d      	ldr	r3, [pc, #116]	; (800a2b0 <goal_test+0x2c4>)
 800a23c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a240:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a242:	4b20      	ldr	r3, [pc, #128]	; (800a2c4 <goal_test+0x2d8>)
 800a244:	2203      	movs	r2, #3
 800a246:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a248:	4b1a      	ldr	r3, [pc, #104]	; (800a2b4 <goal_test+0x2c8>)
 800a24a:	2201      	movs	r2, #1
 800a24c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a24e:	4b1a      	ldr	r3, [pc, #104]	; (800a2b8 <goal_test+0x2cc>)
 800a250:	2200      	movs	r2, #0
 800a252:	701a      	strb	r2, [r3, #0]

					get_base();
 800a254:	f007 f90c 	bl	8011470 <get_base>

					searchF3();
 800a258:	f004 fdcc 	bl	800edf4 <searchF3>
					HAL_Delay(2000);
 800a25c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a260:	f7f6 fedc 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a264:	4b14      	ldr	r3, [pc, #80]	; (800a2b8 <goal_test+0x2cc>)
 800a266:	2200      	movs	r2, #0
 800a268:	701a      	strb	r2, [r3, #0]
 800a26a:	4b13      	ldr	r3, [pc, #76]	; (800a2b8 <goal_test+0x2cc>)
 800a26c:	781a      	ldrb	r2, [r3, #0]
 800a26e:	4b11      	ldr	r3, [pc, #68]	; (800a2b4 <goal_test+0x2c8>)
 800a270:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a272:	f004 fdbf 	bl	800edf4 <searchF3>

					goal_x = GOAL_X;
 800a276:	4b0f      	ldr	r3, [pc, #60]	; (800a2b4 <goal_test+0x2c8>)
 800a278:	2201      	movs	r2, #1
 800a27a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a27c:	4b0e      	ldr	r3, [pc, #56]	; (800a2b8 <goal_test+0x2cc>)
 800a27e:	2200      	movs	r2, #0
 800a280:	701a      	strb	r2, [r3, #0]
					break;
 800a282:	e175      	b.n	800a570 <goal_test+0x584>
 800a284:	0801352c 	.word	0x0801352c
 800a288:	20000aec 	.word	0x20000aec
 800a28c:	080132f8 	.word	0x080132f8
 800a290:	40020000 	.word	0x40020000
 800a294:	20000f64 	.word	0x20000f64
 800a298:	080134d8 	.word	0x080134d8
 800a29c:	20000f68 	.word	0x20000f68
 800a2a0:	20000456 	.word	0x20000456
 800a2a4:	200015c8 	.word	0x200015c8
 800a2a8:	20000bb1 	.word	0x20000bb1
 800a2ac:	20000454 	.word	0x20000454
 800a2b0:	20000f7c 	.word	0x20000f7c
 800a2b4:	20000bb0 	.word	0x20000bb0
 800a2b8:	20000b4c 	.word	0x20000b4c
 800a2bc:	08013548 	.word	0x08013548
 800a2c0:	080134fc 	.word	0x080134fc
 800a2c4:	20000457 	.word	0x20000457
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース Middle Speed 4マスgoal----
					printf("pass press 3-2.\n");
 800a2c8:	48aa      	ldr	r0, [pc, #680]	; (800a574 <goal_test+0x588>)
 800a2ca:	f007 ff6b 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800a2ce:	4aaa      	ldr	r2, [pc, #680]	; (800a578 <goal_test+0x58c>)
 800a2d0:	8813      	ldrh	r3, [r2, #0]
 800a2d2:	f043 0320 	orr.w	r3, r3, #32
 800a2d6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a2d8:	4aa7      	ldr	r2, [pc, #668]	; (800a578 <goal_test+0x58c>)
 800a2da:	8813      	ldrh	r3, [r2, #0]
 800a2dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2e0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a2e2:	4aa5      	ldr	r2, [pc, #660]	; (800a578 <goal_test+0x58c>)
 800a2e4:	8813      	ldrh	r3, [r2, #0]
 800a2e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a2ea:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a2ec:	4ba3      	ldr	r3, [pc, #652]	; (800a57c <goal_test+0x590>)
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a2f2:	4ba3      	ldr	r3, [pc, #652]	; (800a580 <goal_test+0x594>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a2f8:	4ba2      	ldr	r3, [pc, #648]	; (800a584 <goal_test+0x598>)
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a2fe:	4ba2      	ldr	r3, [pc, #648]	; (800a588 <goal_test+0x59c>)
 800a300:	f241 3288 	movw	r2, #5000	; 0x1388
 800a304:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a306:	4ba1      	ldr	r3, [pc, #644]	; (800a58c <goal_test+0x5a0>)
 800a308:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a30c:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800a30e:	4ba0      	ldr	r3, [pc, #640]	; (800a590 <goal_test+0x5a4>)
 800a310:	2203      	movs	r2, #3
 800a312:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a314:	4b9f      	ldr	r3, [pc, #636]	; (800a594 <goal_test+0x5a8>)
 800a316:	2201      	movs	r2, #1
 800a318:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a31a:	4b9f      	ldr	r3, [pc, #636]	; (800a598 <goal_test+0x5ac>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	701a      	strb	r2, [r3, #0]

					get_base();
 800a320:	f007 f8a6 	bl	8011470 <get_base>

					searchF3();
 800a324:	f004 fd66 	bl	800edf4 <searchF3>
					HAL_Delay(2000);
 800a328:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a32c:	f7f6 fe76 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a330:	4b99      	ldr	r3, [pc, #612]	; (800a598 <goal_test+0x5ac>)
 800a332:	2200      	movs	r2, #0
 800a334:	701a      	strb	r2, [r3, #0]
 800a336:	4b98      	ldr	r3, [pc, #608]	; (800a598 <goal_test+0x5ac>)
 800a338:	781a      	ldrb	r2, [r3, #0]
 800a33a:	4b96      	ldr	r3, [pc, #600]	; (800a594 <goal_test+0x5a8>)
 800a33c:	701a      	strb	r2, [r3, #0]
					searchF3();
 800a33e:	f004 fd59 	bl	800edf4 <searchF3>

					goal_x = GOAL_X;
 800a342:	4b94      	ldr	r3, [pc, #592]	; (800a594 <goal_test+0x5a8>)
 800a344:	2201      	movs	r2, #1
 800a346:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a348:	4b93      	ldr	r3, [pc, #588]	; (800a598 <goal_test+0x5ac>)
 800a34a:	2200      	movs	r2, #0
 800a34c:	701a      	strb	r2, [r3, #0]
					break;
 800a34e:	e10f      	b.n	800a570 <goal_test+0x584>
				case 4:
					//----a直線と大回り圧縮と斜め Middle Speedｰｰｰｰ
					printf("pass press 4.\n");
 800a350:	4892      	ldr	r0, [pc, #584]	; (800a59c <goal_test+0x5b0>)
 800a352:	f007 ff27 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800a356:	4a88      	ldr	r2, [pc, #544]	; (800a578 <goal_test+0x58c>)
 800a358:	8813      	ldrh	r3, [r2, #0]
 800a35a:	f043 0320 	orr.w	r3, r3, #32
 800a35e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a360:	4a85      	ldr	r2, [pc, #532]	; (800a578 <goal_test+0x58c>)
 800a362:	8813      	ldrh	r3, [r2, #0]
 800a364:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a368:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a36a:	4a83      	ldr	r2, [pc, #524]	; (800a578 <goal_test+0x58c>)
 800a36c:	8813      	ldrh	r3, [r2, #0]
 800a36e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a372:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a374:	4b81      	ldr	r3, [pc, #516]	; (800a57c <goal_test+0x590>)
 800a376:	2202      	movs	r2, #2
 800a378:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a37a:	4b81      	ldr	r3, [pc, #516]	; (800a580 <goal_test+0x594>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a380:	4b80      	ldr	r3, [pc, #512]	; (800a584 <goal_test+0x598>)
 800a382:	2201      	movs	r2, #1
 800a384:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a386:	4b80      	ldr	r3, [pc, #512]	; (800a588 <goal_test+0x59c>)
 800a388:	f241 3288 	movw	r2, #5000	; 0x1388
 800a38c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a38e:	4b7f      	ldr	r3, [pc, #508]	; (800a58c <goal_test+0x5a0>)
 800a390:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a394:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800a396:	4b7e      	ldr	r3, [pc, #504]	; (800a590 <goal_test+0x5a4>)
 800a398:	2204      	movs	r2, #4
 800a39a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a39c:	4b7d      	ldr	r3, [pc, #500]	; (800a594 <goal_test+0x5a8>)
 800a39e:	2201      	movs	r2, #1
 800a3a0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a3a2:	4b7d      	ldr	r3, [pc, #500]	; (800a598 <goal_test+0x5ac>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	701a      	strb	r2, [r3, #0]

					get_base();
 800a3a8:	f007 f862 	bl	8011470 <get_base>

					searchF4();
 800a3ac:	f004 fdf8 	bl	800efa0 <searchF4>
					HAL_Delay(2000);
 800a3b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a3b4:	f7f6 fe32 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a3b8:	4b77      	ldr	r3, [pc, #476]	; (800a598 <goal_test+0x5ac>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	701a      	strb	r2, [r3, #0]
 800a3be:	4b76      	ldr	r3, [pc, #472]	; (800a598 <goal_test+0x5ac>)
 800a3c0:	781a      	ldrb	r2, [r3, #0]
 800a3c2:	4b74      	ldr	r3, [pc, #464]	; (800a594 <goal_test+0x5a8>)
 800a3c4:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a3c6:	f004 fdeb 	bl	800efa0 <searchF4>

					goal_x = GOAL_X;
 800a3ca:	4b72      	ldr	r3, [pc, #456]	; (800a594 <goal_test+0x5a8>)
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a3d0:	4b71      	ldr	r3, [pc, #452]	; (800a598 <goal_test+0x5ac>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	701a      	strb	r2, [r3, #0]
					break;
 800a3d6:	e0cb      	b.n	800a570 <goal_test+0x584>
				case 5:
					//----a直線と大回り圧縮と斜め Middle Speed 4マスgoalｰｰｰｰ
					printf("pass press 4.\n");
 800a3d8:	4870      	ldr	r0, [pc, #448]	; (800a59c <goal_test+0x5b0>)
 800a3da:	f007 fee3 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800a3de:	4a66      	ldr	r2, [pc, #408]	; (800a578 <goal_test+0x58c>)
 800a3e0:	8813      	ldrh	r3, [r2, #0]
 800a3e2:	f043 0320 	orr.w	r3, r3, #32
 800a3e6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a3e8:	4a63      	ldr	r2, [pc, #396]	; (800a578 <goal_test+0x58c>)
 800a3ea:	8813      	ldrh	r3, [r2, #0]
 800a3ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3f0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a3f2:	4a61      	ldr	r2, [pc, #388]	; (800a578 <goal_test+0x58c>)
 800a3f4:	8813      	ldrh	r3, [r2, #0]
 800a3f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a3fa:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a3fc:	4b5f      	ldr	r3, [pc, #380]	; (800a57c <goal_test+0x590>)
 800a3fe:	2202      	movs	r2, #2
 800a400:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a402:	4b5f      	ldr	r3, [pc, #380]	; (800a580 <goal_test+0x594>)
 800a404:	2200      	movs	r2, #0
 800a406:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a408:	4b5e      	ldr	r3, [pc, #376]	; (800a584 <goal_test+0x598>)
 800a40a:	2202      	movs	r2, #2
 800a40c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a40e:	4b5e      	ldr	r3, [pc, #376]	; (800a588 <goal_test+0x59c>)
 800a410:	f241 3288 	movw	r2, #5000	; 0x1388
 800a414:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800a416:	4b5d      	ldr	r3, [pc, #372]	; (800a58c <goal_test+0x5a0>)
 800a418:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800a41c:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800a41e:	4b5c      	ldr	r3, [pc, #368]	; (800a590 <goal_test+0x5a4>)
 800a420:	2204      	movs	r2, #4
 800a422:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800a424:	4b5b      	ldr	r3, [pc, #364]	; (800a594 <goal_test+0x5a8>)
 800a426:	2201      	movs	r2, #1
 800a428:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a42a:	4b5b      	ldr	r3, [pc, #364]	; (800a598 <goal_test+0x5ac>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	701a      	strb	r2, [r3, #0]

					get_base();
 800a430:	f007 f81e 	bl	8011470 <get_base>

					searchF4();
 800a434:	f004 fdb4 	bl	800efa0 <searchF4>
					HAL_Delay(2000);
 800a438:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a43c:	f7f6 fdee 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a440:	4b55      	ldr	r3, [pc, #340]	; (800a598 <goal_test+0x5ac>)
 800a442:	2200      	movs	r2, #0
 800a444:	701a      	strb	r2, [r3, #0]
 800a446:	4b54      	ldr	r3, [pc, #336]	; (800a598 <goal_test+0x5ac>)
 800a448:	781a      	ldrb	r2, [r3, #0]
 800a44a:	4b52      	ldr	r3, [pc, #328]	; (800a594 <goal_test+0x5a8>)
 800a44c:	701a      	strb	r2, [r3, #0]
					searchF4();
 800a44e:	f004 fda7 	bl	800efa0 <searchF4>

					goal_x = GOAL_X;
 800a452:	4b50      	ldr	r3, [pc, #320]	; (800a594 <goal_test+0x5a8>)
 800a454:	2201      	movs	r2, #1
 800a456:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a458:	4b4f      	ldr	r3, [pc, #316]	; (800a598 <goal_test+0x5ac>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	701a      	strb	r2, [r3, #0]
					break;
 800a45e:	e087      	b.n	800a570 <goal_test+0x584>
				case 6:
					//----a一次探索スラローム走行　重ね探索----
					printf("First Run. (Slalom)\n");
 800a460:	484f      	ldr	r0, [pc, #316]	; (800a5a0 <goal_test+0x5b4>)
 800a462:	f007 fe9f 	bl	80121a4 <puts>

					MF.FLAG.SCND = 0;
 800a466:	4a44      	ldr	r2, [pc, #272]	; (800a578 <goal_test+0x58c>)
 800a468:	8813      	ldrh	r3, [r2, #0]
 800a46a:	f36f 1345 	bfc	r3, #5, #1
 800a46e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a470:	4a41      	ldr	r2, [pc, #260]	; (800a578 <goal_test+0x58c>)
 800a472:	8813      	ldrh	r3, [r2, #0]
 800a474:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a478:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a47a:	4a3f      	ldr	r2, [pc, #252]	; (800a578 <goal_test+0x58c>)
 800a47c:	8813      	ldrh	r3, [r2, #0]
 800a47e:	f36f 238a 	bfc	r3, #10, #1
 800a482:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a484:	4b3d      	ldr	r3, [pc, #244]	; (800a57c <goal_test+0x590>)
 800a486:	2202      	movs	r2, #2
 800a488:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a48a:	4b3d      	ldr	r3, [pc, #244]	; (800a580 <goal_test+0x594>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800a490:	4b3c      	ldr	r3, [pc, #240]	; (800a584 <goal_test+0x598>)
 800a492:	2201      	movs	r2, #1
 800a494:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a496:	4b3c      	ldr	r3, [pc, #240]	; (800a588 <goal_test+0x59c>)
 800a498:	f241 3288 	movw	r2, #5000	; 0x1388
 800a49c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a49e:	4b3b      	ldr	r3, [pc, #236]	; (800a58c <goal_test+0x5a0>)
 800a4a0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a4a4:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a4a6:	4b36      	ldr	r3, [pc, #216]	; (800a580 <goal_test+0x594>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a4ac:	4b39      	ldr	r3, [pc, #228]	; (800a594 <goal_test+0x5a8>)
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a4b2:	4b39      	ldr	r3, [pc, #228]	; (800a598 <goal_test+0x5ac>)
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	701a      	strb	r2, [r3, #0]

					get_base();
 800a4b8:	f006 ffda 	bl	8011470 <get_base>

					searchC2();
 800a4bc:	f004 f992 	bl	800e7e4 <searchC2>
					HAL_Delay(2000);
 800a4c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a4c4:	f7f6 fdaa 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a4c8:	4b33      	ldr	r3, [pc, #204]	; (800a598 <goal_test+0x5ac>)
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	701a      	strb	r2, [r3, #0]
 800a4ce:	4b32      	ldr	r3, [pc, #200]	; (800a598 <goal_test+0x5ac>)
 800a4d0:	781a      	ldrb	r2, [r3, #0]
 800a4d2:	4b30      	ldr	r3, [pc, #192]	; (800a594 <goal_test+0x5a8>)
 800a4d4:	701a      	strb	r2, [r3, #0]
					searchC();
 800a4d6:	f004 f817 	bl	800e508 <searchC>

					goal_x = GOAL_X;
 800a4da:	4b2e      	ldr	r3, [pc, #184]	; (800a594 <goal_test+0x5a8>)
 800a4dc:	2201      	movs	r2, #1
 800a4de:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a4e0:	4b2d      	ldr	r3, [pc, #180]	; (800a598 <goal_test+0x5ac>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	701a      	strb	r2, [r3, #0]
					break;
 800a4e6:	e043      	b.n	800a570 <goal_test+0x584>
				case 7:
					//----a一次探索スラローム走行　重ね探索 4マスgoal----
					printf("First Run. (Slalom)\n");
 800a4e8:	482d      	ldr	r0, [pc, #180]	; (800a5a0 <goal_test+0x5b4>)
 800a4ea:	f007 fe5b 	bl	80121a4 <puts>

					MF.FLAG.SCND = 0;
 800a4ee:	4a22      	ldr	r2, [pc, #136]	; (800a578 <goal_test+0x58c>)
 800a4f0:	8813      	ldrh	r3, [r2, #0]
 800a4f2:	f36f 1345 	bfc	r3, #5, #1
 800a4f6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a4f8:	4a1f      	ldr	r2, [pc, #124]	; (800a578 <goal_test+0x58c>)
 800a4fa:	8813      	ldrh	r3, [r2, #0]
 800a4fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a500:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800a502:	4a1d      	ldr	r2, [pc, #116]	; (800a578 <goal_test+0x58c>)
 800a504:	8813      	ldrh	r3, [r2, #0]
 800a506:	f36f 238a 	bfc	r3, #10, #1
 800a50a:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800a50c:	4b1b      	ldr	r3, [pc, #108]	; (800a57c <goal_test+0x590>)
 800a50e:	2202      	movs	r2, #2
 800a510:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800a512:	4b1b      	ldr	r3, [pc, #108]	; (800a580 <goal_test+0x594>)
 800a514:	2200      	movs	r2, #0
 800a516:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800a518:	4b1a      	ldr	r3, [pc, #104]	; (800a584 <goal_test+0x598>)
 800a51a:	2202      	movs	r2, #2
 800a51c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a51e:	4b1a      	ldr	r3, [pc, #104]	; (800a588 <goal_test+0x59c>)
 800a520:	f241 3288 	movw	r2, #5000	; 0x1388
 800a524:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a526:	4b19      	ldr	r3, [pc, #100]	; (800a58c <goal_test+0x5a0>)
 800a528:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a52c:	801a      	strh	r2, [r3, #0]
					start_mode = 0;
 800a52e:	4b14      	ldr	r3, [pc, #80]	; (800a580 <goal_test+0x594>)
 800a530:	2200      	movs	r2, #0
 800a532:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a534:	4b17      	ldr	r3, [pc, #92]	; (800a594 <goal_test+0x5a8>)
 800a536:	2201      	movs	r2, #1
 800a538:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a53a:	4b17      	ldr	r3, [pc, #92]	; (800a598 <goal_test+0x5ac>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	701a      	strb	r2, [r3, #0]

					get_base();
 800a540:	f006 ff96 	bl	8011470 <get_base>

					searchC2();
 800a544:	f004 f94e 	bl	800e7e4 <searchC2>
					HAL_Delay(2000);
 800a548:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a54c:	f7f6 fd66 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a550:	4b11      	ldr	r3, [pc, #68]	; (800a598 <goal_test+0x5ac>)
 800a552:	2200      	movs	r2, #0
 800a554:	701a      	strb	r2, [r3, #0]
 800a556:	4b10      	ldr	r3, [pc, #64]	; (800a598 <goal_test+0x5ac>)
 800a558:	781a      	ldrb	r2, [r3, #0]
 800a55a:	4b0e      	ldr	r3, [pc, #56]	; (800a594 <goal_test+0x5a8>)
 800a55c:	701a      	strb	r2, [r3, #0]
					searchC();
 800a55e:	f003 ffd3 	bl	800e508 <searchC>

					goal_x = GOAL_X;
 800a562:	4b0c      	ldr	r3, [pc, #48]	; (800a594 <goal_test+0x5a8>)
 800a564:	2201      	movs	r2, #1
 800a566:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a568:	4b0b      	ldr	r3, [pc, #44]	; (800a598 <goal_test+0x5ac>)
 800a56a:	2200      	movs	r2, #0
 800a56c:	701a      	strb	r2, [r3, #0]
					break;
 800a56e:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a570:	e545      	b.n	8009ffe <goal_test+0x12>
 800a572:	bf00      	nop
 800a574:	080134fc 	.word	0x080134fc
 800a578:	20000f68 	.word	0x20000f68
 800a57c:	20000456 	.word	0x20000456
 800a580:	200015c8 	.word	0x200015c8
 800a584:	20000bb1 	.word	0x20000bb1
 800a588:	20000454 	.word	0x20000454
 800a58c:	20000f7c 	.word	0x20000f7c
 800a590:	20000457 	.word	0x20000457
 800a594:	20000bb0 	.word	0x20000bb0
 800a598:	20000b4c 	.word	0x20000b4c
 800a59c:	0801350c 	.word	0x0801350c
 800a5a0:	080134d8 	.word	0x080134d8

0800a5a4 <sample_course_run>:
//sample_course_run
//a試験走行モード
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sample_course_run(void){
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0

	int mode = 0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	607b      	str	r3, [r7, #4]
	printf("Sample Course Run, Mode : %d\n", mode);
 800a5ae:	6879      	ldr	r1, [r7, #4]
 800a5b0:	488f      	ldr	r0, [pc, #572]	; (800a7f0 <sample_course_run+0x24c>)
 800a5b2:	f007 fd83 	bl	80120bc <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	b2d8      	uxtb	r0, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	f003 0302 	and.w	r3, r3, #2
 800a5c8:	b2d9      	uxtb	r1, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	f003 0304 	and.w	r3, r3, #4
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	f006 ffa3 	bl	8011520 <led_write>
		  if(dist_r >= 20){
 800a5da:	4b86      	ldr	r3, [pc, #536]	; (800a7f4 <sample_course_run+0x250>)
 800a5dc:	edd3 7a00 	vldr	s15, [r3]
 800a5e0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a5e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5ec:	db0f      	blt.n	800a60e <sample_course_run+0x6a>
			  mode++;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a5f4:	4b7f      	ldr	r3, [pc, #508]	; (800a7f4 <sample_course_run+0x250>)
 800a5f6:	f04f 0200 	mov.w	r2, #0
 800a5fa:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2b07      	cmp	r3, #7
 800a600:	dd01      	ble.n	800a606 <sample_course_run+0x62>
				  mode = 0;
 800a602:	2300      	movs	r3, #0
 800a604:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a606:	6879      	ldr	r1, [r7, #4]
 800a608:	487b      	ldr	r0, [pc, #492]	; (800a7f8 <sample_course_run+0x254>)
 800a60a:	f007 fd57 	bl	80120bc <iprintf>
		  }
		  if(dist_r <= -20){
 800a60e:	4b79      	ldr	r3, [pc, #484]	; (800a7f4 <sample_course_run+0x250>)
 800a610:	edd3 7a00 	vldr	s15, [r3]
 800a614:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a61c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a620:	d80f      	bhi.n	800a642 <sample_course_run+0x9e>
			  mode--;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	3b01      	subs	r3, #1
 800a626:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a628:	4b72      	ldr	r3, [pc, #456]	; (800a7f4 <sample_course_run+0x250>)
 800a62a:	f04f 0200 	mov.w	r2, #0
 800a62e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2b00      	cmp	r3, #0
 800a634:	da01      	bge.n	800a63a <sample_course_run+0x96>
				  mode = 7;
 800a636:	2307      	movs	r3, #7
 800a638:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a63a:	6879      	ldr	r1, [r7, #4]
 800a63c:	486e      	ldr	r0, [pc, #440]	; (800a7f8 <sample_course_run+0x254>)
 800a63e:	f007 fd3d 	bl	80120bc <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a642:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a646:	486d      	ldr	r0, [pc, #436]	; (800a7fc <sample_course_run+0x258>)
 800a648:	f7f7 fe44 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1b1      	bne.n	800a5b6 <sample_course_run+0x12>
			  HAL_Delay(50);
 800a652:	2032      	movs	r0, #50	; 0x32
 800a654:	f7f6 fce2 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a658:	bf00      	nop
 800a65a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a65e:	4867      	ldr	r0, [pc, #412]	; (800a7fc <sample_course_run+0x258>)
 800a660:	f7f7 fe38 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d0f7      	beq.n	800a65a <sample_course_run+0xb6>
			  drive_ready();
 800a66a:	f7fa fb09 	bl	8004c80 <drive_ready>

			  switch(mode){
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2b07      	cmp	r3, #7
 800a672:	d8a0      	bhi.n	800a5b6 <sample_course_run+0x12>
 800a674:	a201      	add	r2, pc, #4	; (adr r2, 800a67c <sample_course_run+0xd8>)
 800a676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a67a:	bf00      	nop
 800a67c:	0800a69d 	.word	0x0800a69d
 800a680:	0800a6a3 	.word	0x0800a6a3
 800a684:	0800a6c5 	.word	0x0800a6c5
 800a688:	0800a6e7 	.word	0x0800a6e7
 800a68c:	0800a5b7 	.word	0x0800a5b7
 800a690:	0800a6f9 	.word	0x0800a6f9
 800a694:	0800a773 	.word	0x0800a773
 800a698:	0800a5b7 	.word	0x0800a5b7
				case 0:
					get_base();
 800a69c:	f006 fee8 	bl	8011470 <get_base>
					break;
 800a6a0:	e0a4      	b.n	800a7ec <sample_course_run+0x248>

				case 1:
					//----サンプルコース1　超信地----
					half_sectionA();
 800a6a2:	f7fb f9ef 	bl	8005a84 <half_sectionA>
					half_sectionD();
 800a6a6:	f7fb fa37 	bl	8005b18 <half_sectionD>
					rotate_R90();
 800a6aa:	f7fb fcdd 	bl	8006068 <rotate_R90>
					half_sectionA();
 800a6ae:	f7fb f9e9 	bl	8005a84 <half_sectionA>
					half_sectionD();
 800a6b2:	f7fb fa31 	bl	8005b18 <half_sectionD>
					rotate_R90();
 800a6b6:	f7fb fcd7 	bl	8006068 <rotate_R90>
					half_sectionA();
 800a6ba:	f7fb f9e3 	bl	8005a84 <half_sectionA>
					half_sectionD();
 800a6be:	f7fb fa2b 	bl	8005b18 <half_sectionD>
					break;
 800a6c2:	e093      	b.n	800a7ec <sample_course_run+0x248>

				case 2:
					//----サンプルコース1　超信地----
					half_sectionA();
 800a6c4:	f7fb f9de 	bl	8005a84 <half_sectionA>
					half_sectionD();
 800a6c8:	f7fb fa26 	bl	8005b18 <half_sectionD>
					rotate_L90();
 800a6cc:	f7fb fda8 	bl	8006220 <rotate_L90>
					half_sectionA();
 800a6d0:	f7fb f9d8 	bl	8005a84 <half_sectionA>
					half_sectionD();
 800a6d4:	f7fb fa20 	bl	8005b18 <half_sectionD>
					rotate_L90();
 800a6d8:	f7fb fda2 	bl	8006220 <rotate_L90>
					half_sectionA();
 800a6dc:	f7fb f9d2 	bl	8005a84 <half_sectionA>
					half_sectionD();
 800a6e0:	f7fb fa1a 	bl	8005b18 <half_sectionD>
					break;
 800a6e4:	e082      	b.n	800a7ec <sample_course_run+0x248>

				case 3:
					//---サンプルコース2　スラローム----
					half_sectionA();
 800a6e6:	f7fb f9cd 	bl	8005a84 <half_sectionA>
					slalom_R90();
 800a6ea:	f7fb ff4d 	bl	8006588 <slalom_R90>
					slalom_R90();
 800a6ee:	f7fb ff4b 	bl	8006588 <slalom_R90>
					half_sectionD();
 800a6f2:	f7fb fa11 	bl	8005b18 <half_sectionD>
					break;
 800a6f6:	e079      	b.n	800a7ec <sample_course_run+0x248>
				case 4:
					break;

				case 5:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800a6f8:	4841      	ldr	r0, [pc, #260]	; (800a800 <sample_course_run+0x25c>)
 800a6fa:	f007 fd53 	bl	80121a4 <puts>

					MF.FLAG.SCND = 0;
 800a6fe:	4a41      	ldr	r2, [pc, #260]	; (800a804 <sample_course_run+0x260>)
 800a700:	8813      	ldrh	r3, [r2, #0]
 800a702:	f36f 1345 	bfc	r3, #5, #1
 800a706:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a708:	4a3e      	ldr	r2, [pc, #248]	; (800a804 <sample_course_run+0x260>)
 800a70a:	8813      	ldrh	r3, [r2, #0]
 800a70c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a710:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a712:	4a3c      	ldr	r2, [pc, #240]	; (800a804 <sample_course_run+0x260>)
 800a714:	8813      	ldrh	r3, [r2, #0]
 800a716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a71a:	8013      	strh	r3, [r2, #0]
					start_mode = 0;
 800a71c:	4b3a      	ldr	r3, [pc, #232]	; (800a808 <sample_course_run+0x264>)
 800a71e:	2200      	movs	r2, #0
 800a720:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a722:	4b3a      	ldr	r3, [pc, #232]	; (800a80c <sample_course_run+0x268>)
 800a724:	f241 3288 	movw	r2, #5000	; 0x1388
 800a728:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a72a:	4b39      	ldr	r3, [pc, #228]	; (800a810 <sample_course_run+0x26c>)
 800a72c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a730:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800a732:	4b38      	ldr	r3, [pc, #224]	; (800a814 <sample_course_run+0x270>)
 800a734:	2201      	movs	r2, #1
 800a736:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a738:	4b37      	ldr	r3, [pc, #220]	; (800a818 <sample_course_run+0x274>)
 800a73a:	2200      	movs	r2, #0
 800a73c:	701a      	strb	r2, [r3, #0]

					get_base();
 800a73e:	f006 fe97 	bl	8011470 <get_base>

					searchC();
 800a742:	f003 fee1 	bl	800e508 <searchC>
					HAL_Delay(2000);
 800a746:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a74a:	f7f6 fc67 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a74e:	4b32      	ldr	r3, [pc, #200]	; (800a818 <sample_course_run+0x274>)
 800a750:	2200      	movs	r2, #0
 800a752:	701a      	strb	r2, [r3, #0]
 800a754:	4b30      	ldr	r3, [pc, #192]	; (800a818 <sample_course_run+0x274>)
 800a756:	781a      	ldrb	r2, [r3, #0]
 800a758:	4b2e      	ldr	r3, [pc, #184]	; (800a814 <sample_course_run+0x270>)
 800a75a:	701a      	strb	r2, [r3, #0]
					searchE();
 800a75c:	f004 fa9e 	bl	800ec9c <searchE>

					searchC();
 800a760:	f003 fed2 	bl	800e508 <searchC>
					goal_x = GOAL_X;
 800a764:	4b2b      	ldr	r3, [pc, #172]	; (800a814 <sample_course_run+0x270>)
 800a766:	2201      	movs	r2, #1
 800a768:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a76a:	4b2b      	ldr	r3, [pc, #172]	; (800a818 <sample_course_run+0x274>)
 800a76c:	2200      	movs	r2, #0
 800a76e:	701a      	strb	r2, [r3, #0]

					break;
 800a770:	e03c      	b.n	800a7ec <sample_course_run+0x248>

				case 6:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800a772:	4823      	ldr	r0, [pc, #140]	; (800a800 <sample_course_run+0x25c>)
 800a774:	f007 fd16 	bl	80121a4 <puts>

					MF.FLAG.SCND = 0;
 800a778:	4a22      	ldr	r2, [pc, #136]	; (800a804 <sample_course_run+0x260>)
 800a77a:	8813      	ldrh	r3, [r2, #0]
 800a77c:	f36f 1345 	bfc	r3, #5, #1
 800a780:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800a782:	4a20      	ldr	r2, [pc, #128]	; (800a804 <sample_course_run+0x260>)
 800a784:	8813      	ldrh	r3, [r2, #0]
 800a786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a78a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800a78c:	4a1d      	ldr	r2, [pc, #116]	; (800a804 <sample_course_run+0x260>)
 800a78e:	8813      	ldrh	r3, [r2, #0]
 800a790:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a794:	8013      	strh	r3, [r2, #0]
					start_mode = 0;
 800a796:	4b1c      	ldr	r3, [pc, #112]	; (800a808 <sample_course_run+0x264>)
 800a798:	2200      	movs	r2, #0
 800a79a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800a79c:	4b1b      	ldr	r3, [pc, #108]	; (800a80c <sample_course_run+0x268>)
 800a79e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7a2:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800a7a4:	4b1a      	ldr	r3, [pc, #104]	; (800a810 <sample_course_run+0x26c>)
 800a7a6:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a7aa:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800a7ac:	4b19      	ldr	r3, [pc, #100]	; (800a814 <sample_course_run+0x270>)
 800a7ae:	2207      	movs	r2, #7
 800a7b0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a7b2:	4b19      	ldr	r3, [pc, #100]	; (800a818 <sample_course_run+0x274>)
 800a7b4:	2207      	movs	r2, #7
 800a7b6:	701a      	strb	r2, [r3, #0]

					get_base();
 800a7b8:	f006 fe5a 	bl	8011470 <get_base>

					searchC();
 800a7bc:	f003 fea4 	bl	800e508 <searchC>
					HAL_Delay(2000);
 800a7c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a7c4:	f7f6 fc2a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a7c8:	4b13      	ldr	r3, [pc, #76]	; (800a818 <sample_course_run+0x274>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	701a      	strb	r2, [r3, #0]
 800a7ce:	4b12      	ldr	r3, [pc, #72]	; (800a818 <sample_course_run+0x274>)
 800a7d0:	781a      	ldrb	r2, [r3, #0]
 800a7d2:	4b10      	ldr	r3, [pc, #64]	; (800a814 <sample_course_run+0x270>)
 800a7d4:	701a      	strb	r2, [r3, #0]
					searchE();
 800a7d6:	f004 fa61 	bl	800ec9c <searchE>

					searchC();
 800a7da:	f003 fe95 	bl	800e508 <searchC>
					goal_x = 7;
 800a7de:	4b0d      	ldr	r3, [pc, #52]	; (800a814 <sample_course_run+0x270>)
 800a7e0:	2207      	movs	r2, #7
 800a7e2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800a7e4:	4b0c      	ldr	r3, [pc, #48]	; (800a818 <sample_course_run+0x274>)
 800a7e6:	2207      	movs	r2, #7
 800a7e8:	701a      	strb	r2, [r3, #0]

					break;
 800a7ea:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a7ec:	e6e3      	b.n	800a5b6 <sample_course_run+0x12>
 800a7ee:	bf00      	nop
 800a7f0:	0801355c 	.word	0x0801355c
 800a7f4:	20000aec 	.word	0x20000aec
 800a7f8:	080132f8 	.word	0x080132f8
 800a7fc:	40020000 	.word	0x40020000
 800a800:	0801357c 	.word	0x0801357c
 800a804:	20000f68 	.word	0x20000f68
 800a808:	200015c8 	.word	0x200015c8
 800a80c:	20000454 	.word	0x20000454
 800a810:	20000f7c 	.word	0x20000f7c
 800a814:	20000bb0 	.word	0x20000bb0
 800a818:	20000b4c 	.word	0x20000b4c

0800a81c <simple_run>:
//simple_run
// 超信地走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void simple_run(void){
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0

	int mode = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	607b      	str	r3, [r7, #4]
	printf("Simple Run, Mode : %d\n", mode);
 800a826:	6879      	ldr	r1, [r7, #4]
 800a828:	4878      	ldr	r0, [pc, #480]	; (800aa0c <simple_run+0x1f0>)
 800a82a:	f007 fc47 	bl	80120bc <iprintf>

	while(1){

		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	b2db      	uxtb	r3, r3
 800a832:	f003 0301 	and.w	r3, r3, #1
 800a836:	b2d8      	uxtb	r0, r3
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	f003 0302 	and.w	r3, r3, #2
 800a840:	b2d9      	uxtb	r1, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	b2db      	uxtb	r3, r3
 800a846:	f003 0304 	and.w	r3, r3, #4
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	461a      	mov	r2, r3
 800a84e:	f006 fe67 	bl	8011520 <led_write>
		  if(dist_r >= 20){
 800a852:	4b6f      	ldr	r3, [pc, #444]	; (800aa10 <simple_run+0x1f4>)
 800a854:	edd3 7a00 	vldr	s15, [r3]
 800a858:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a85c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a864:	db0f      	blt.n	800a886 <simple_run+0x6a>
			  mode++;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	3301      	adds	r3, #1
 800a86a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a86c:	4b68      	ldr	r3, [pc, #416]	; (800aa10 <simple_run+0x1f4>)
 800a86e:	f04f 0200 	mov.w	r2, #0
 800a872:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2b07      	cmp	r3, #7
 800a878:	dd01      	ble.n	800a87e <simple_run+0x62>
				  mode = 0;
 800a87a:	2300      	movs	r3, #0
 800a87c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a87e:	6879      	ldr	r1, [r7, #4]
 800a880:	4864      	ldr	r0, [pc, #400]	; (800aa14 <simple_run+0x1f8>)
 800a882:	f007 fc1b 	bl	80120bc <iprintf>
		  }
		  if(dist_r <= -20){
 800a886:	4b62      	ldr	r3, [pc, #392]	; (800aa10 <simple_run+0x1f4>)
 800a888:	edd3 7a00 	vldr	s15, [r3]
 800a88c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a890:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a898:	d80f      	bhi.n	800a8ba <simple_run+0x9e>
			  mode--;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	3b01      	subs	r3, #1
 800a89e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a8a0:	4b5b      	ldr	r3, [pc, #364]	; (800aa10 <simple_run+0x1f4>)
 800a8a2:	f04f 0200 	mov.w	r2, #0
 800a8a6:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	da01      	bge.n	800a8b2 <simple_run+0x96>
				  mode = 7;
 800a8ae:	2307      	movs	r3, #7
 800a8b0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a8b2:	6879      	ldr	r1, [r7, #4]
 800a8b4:	4857      	ldr	r0, [pc, #348]	; (800aa14 <simple_run+0x1f8>)
 800a8b6:	f007 fc01 	bl	80120bc <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a8ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a8be:	4856      	ldr	r0, [pc, #344]	; (800aa18 <simple_run+0x1fc>)
 800a8c0:	f7f7 fd08 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d1b1      	bne.n	800a82e <simple_run+0x12>
			  HAL_Delay(50);
 800a8ca:	2032      	movs	r0, #50	; 0x32
 800a8cc:	f7f6 fba6 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a8d0:	bf00      	nop
 800a8d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a8d6:	4850      	ldr	r0, [pc, #320]	; (800aa18 <simple_run+0x1fc>)
 800a8d8:	f7f7 fcfc 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d0f7      	beq.n	800a8d2 <simple_run+0xb6>
			  drive_ready();
 800a8e2:	f7fa f9cd 	bl	8004c80 <drive_ready>

			  switch(mode){
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b07      	cmp	r3, #7
 800a8ea:	d8a0      	bhi.n	800a82e <simple_run+0x12>
 800a8ec:	a201      	add	r2, pc, #4	; (adr r2, 800a8f4 <simple_run+0xd8>)
 800a8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f2:	bf00      	nop
 800a8f4:	0800a82f 	.word	0x0800a82f
 800a8f8:	0800a915 	.word	0x0800a915
 800a8fc:	0800a967 	.word	0x0800a967
 800a900:	0800a9b9 	.word	0x0800a9b9
 800a904:	0800a82f 	.word	0x0800a82f
 800a908:	0800a82f 	.word	0x0800a82f
 800a90c:	0800a82f 	.word	0x0800a82f
 800a910:	0800a82f 	.word	0x0800a82f

				case 0:
					break;
				case 1:
					//----一次探索走行----
					printf("First Run.\n");
 800a914:	4841      	ldr	r0, [pc, #260]	; (800aa1c <simple_run+0x200>)
 800a916:	f007 fc45 	bl	80121a4 <puts>

					MF.FLAG.SCND = 0;
 800a91a:	4a41      	ldr	r2, [pc, #260]	; (800aa20 <simple_run+0x204>)
 800a91c:	8813      	ldrh	r3, [r2, #0]
 800a91e:	f36f 1345 	bfc	r3, #5, #1
 800a922:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800a924:	4b3f      	ldr	r3, [pc, #252]	; (800aa24 <simple_run+0x208>)
 800a926:	2201      	movs	r2, #1
 800a928:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a92a:	4b3f      	ldr	r3, [pc, #252]	; (800aa28 <simple_run+0x20c>)
 800a92c:	2201      	movs	r2, #1
 800a92e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a930:	4b3e      	ldr	r3, [pc, #248]	; (800aa2c <simple_run+0x210>)
 800a932:	2200      	movs	r2, #0
 800a934:	701a      	strb	r2, [r3, #0]

					get_base();
 800a936:	f006 fd9b 	bl	8011470 <get_base>

					searchA();
 800a93a:	f003 fcd9 	bl	800e2f0 <searchA>
					HAL_Delay(2000);
 800a93e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a942:	f7f6 fb6b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a946:	4b39      	ldr	r3, [pc, #228]	; (800aa2c <simple_run+0x210>)
 800a948:	2200      	movs	r2, #0
 800a94a:	701a      	strb	r2, [r3, #0]
 800a94c:	4b37      	ldr	r3, [pc, #220]	; (800aa2c <simple_run+0x210>)
 800a94e:	781a      	ldrb	r2, [r3, #0]
 800a950:	4b35      	ldr	r3, [pc, #212]	; (800aa28 <simple_run+0x20c>)
 800a952:	701a      	strb	r2, [r3, #0]
					searchA();
 800a954:	f003 fccc 	bl	800e2f0 <searchA>

					goal_x = GOAL_X;
 800a958:	4b33      	ldr	r3, [pc, #204]	; (800aa28 <simple_run+0x20c>)
 800a95a:	2201      	movs	r2, #1
 800a95c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a95e:	4b33      	ldr	r3, [pc, #204]	; (800aa2c <simple_run+0x210>)
 800a960:	2200      	movs	r2, #0
 800a962:	701a      	strb	r2, [r3, #0]

					break;
 800a964:	e051      	b.n	800aa0a <simple_run+0x1ee>

				case 2:
					//----一次探索連続走行----
					printf("First Run. (Continuous)\n");
 800a966:	4832      	ldr	r0, [pc, #200]	; (800aa30 <simple_run+0x214>)
 800a968:	f007 fc1c 	bl	80121a4 <puts>

					MF.FLAG.SCND = 0;
 800a96c:	4a2c      	ldr	r2, [pc, #176]	; (800aa20 <simple_run+0x204>)
 800a96e:	8813      	ldrh	r3, [r2, #0]
 800a970:	f36f 1345 	bfc	r3, #5, #1
 800a974:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800a976:	4b2b      	ldr	r3, [pc, #172]	; (800aa24 <simple_run+0x208>)
 800a978:	2201      	movs	r2, #1
 800a97a:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a97c:	4b2a      	ldr	r3, [pc, #168]	; (800aa28 <simple_run+0x20c>)
 800a97e:	2201      	movs	r2, #1
 800a980:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a982:	4b2a      	ldr	r3, [pc, #168]	; (800aa2c <simple_run+0x210>)
 800a984:	2200      	movs	r2, #0
 800a986:	701a      	strb	r2, [r3, #0]

					get_base();
 800a988:	f006 fd72 	bl	8011470 <get_base>

					searchB();
 800a98c:	f003 fd32 	bl	800e3f4 <searchB>
					HAL_Delay(2000);
 800a990:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a994:	f7f6 fb42 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a998:	4b24      	ldr	r3, [pc, #144]	; (800aa2c <simple_run+0x210>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	701a      	strb	r2, [r3, #0]
 800a99e:	4b23      	ldr	r3, [pc, #140]	; (800aa2c <simple_run+0x210>)
 800a9a0:	781a      	ldrb	r2, [r3, #0]
 800a9a2:	4b21      	ldr	r3, [pc, #132]	; (800aa28 <simple_run+0x20c>)
 800a9a4:	701a      	strb	r2, [r3, #0]
					searchB();
 800a9a6:	f003 fd25 	bl	800e3f4 <searchB>

					goal_x = GOAL_X;
 800a9aa:	4b1f      	ldr	r3, [pc, #124]	; (800aa28 <simple_run+0x20c>)
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a9b0:	4b1e      	ldr	r3, [pc, #120]	; (800aa2c <simple_run+0x210>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	701a      	strb	r2, [r3, #0]

					break;
 800a9b6:	e028      	b.n	800aa0a <simple_run+0x1ee>

				case 3:
					//----二次探索走行----
					printf("Second Run. (Continuous)\n");
 800a9b8:	481e      	ldr	r0, [pc, #120]	; (800aa34 <simple_run+0x218>)
 800a9ba:	f007 fbf3 	bl	80121a4 <puts>

					MF.FLAG.SCND = 1;
 800a9be:	4a18      	ldr	r2, [pc, #96]	; (800aa20 <simple_run+0x204>)
 800a9c0:	8813      	ldrh	r3, [r2, #0]
 800a9c2:	f043 0320 	orr.w	r3, r3, #32
 800a9c6:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800a9c8:	4b16      	ldr	r3, [pc, #88]	; (800aa24 <simple_run+0x208>)
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800a9ce:	4b16      	ldr	r3, [pc, #88]	; (800aa28 <simple_run+0x20c>)
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800a9d4:	4b15      	ldr	r3, [pc, #84]	; (800aa2c <simple_run+0x210>)
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	701a      	strb	r2, [r3, #0]

					get_base();
 800a9da:	f006 fd49 	bl	8011470 <get_base>

					searchB();
 800a9de:	f003 fd09 	bl	800e3f4 <searchB>
					HAL_Delay(2000);
 800a9e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a9e6:	f7f6 fb19 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800a9ea:	4b10      	ldr	r3, [pc, #64]	; (800aa2c <simple_run+0x210>)
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	701a      	strb	r2, [r3, #0]
 800a9f0:	4b0e      	ldr	r3, [pc, #56]	; (800aa2c <simple_run+0x210>)
 800a9f2:	781a      	ldrb	r2, [r3, #0]
 800a9f4:	4b0c      	ldr	r3, [pc, #48]	; (800aa28 <simple_run+0x20c>)
 800a9f6:	701a      	strb	r2, [r3, #0]
					searchB();
 800a9f8:	f003 fcfc 	bl	800e3f4 <searchB>

					goal_x = GOAL_X;
 800a9fc:	4b0a      	ldr	r3, [pc, #40]	; (800aa28 <simple_run+0x20c>)
 800a9fe:	2201      	movs	r2, #1
 800aa00:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aa02:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <simple_run+0x210>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	701a      	strb	r2, [r3, #0]

					break;
 800aa08:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800aa0a:	e710      	b.n	800a82e <simple_run+0x12>
 800aa0c:	08013598 	.word	0x08013598
 800aa10:	20000aec 	.word	0x20000aec
 800aa14:	080132f8 	.word	0x080132f8
 800aa18:	40020000 	.word	0x40020000
 800aa1c:	080135b0 	.word	0x080135b0
 800aa20:	20000f68 	.word	0x20000f68
 800aa24:	20000456 	.word	0x20000456
 800aa28:	20000bb0 	.word	0x20000bb0
 800aa2c:	20000b4c 	.word	0x20000b4c
 800aa30:	080135bc 	.word	0x080135bc
 800aa34:	080135d4 	.word	0x080135d4

0800aa38 <slalom_run>:
//slalom_run
// スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_run(void){
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0

	int mode = 0;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	607b      	str	r3, [r7, #4]
	printf("Slalom Run, Mode : %d\n", mode);
 800aa42:	6879      	ldr	r1, [r7, #4]
 800aa44:	48a6      	ldr	r0, [pc, #664]	; (800ace0 <slalom_run+0x2a8>)
 800aa46:	f007 fb39 	bl	80120bc <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	f003 0301 	and.w	r3, r3, #1
 800aa52:	b2d8      	uxtb	r0, r3
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	f003 0302 	and.w	r3, r3, #2
 800aa5c:	b2d9      	uxtb	r1, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	f003 0304 	and.w	r3, r3, #4
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	461a      	mov	r2, r3
 800aa6a:	f006 fd59 	bl	8011520 <led_write>
		  if(dist_r >= 20){
 800aa6e:	4b9d      	ldr	r3, [pc, #628]	; (800ace4 <slalom_run+0x2ac>)
 800aa70:	edd3 7a00 	vldr	s15, [r3]
 800aa74:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800aa78:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa80:	db0f      	blt.n	800aaa2 <slalom_run+0x6a>
			  mode++;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	3301      	adds	r3, #1
 800aa86:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800aa88:	4b96      	ldr	r3, [pc, #600]	; (800ace4 <slalom_run+0x2ac>)
 800aa8a:	f04f 0200 	mov.w	r2, #0
 800aa8e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b07      	cmp	r3, #7
 800aa94:	dd01      	ble.n	800aa9a <slalom_run+0x62>
				  mode = 0;
 800aa96:	2300      	movs	r3, #0
 800aa98:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800aa9a:	6879      	ldr	r1, [r7, #4]
 800aa9c:	4892      	ldr	r0, [pc, #584]	; (800ace8 <slalom_run+0x2b0>)
 800aa9e:	f007 fb0d 	bl	80120bc <iprintf>
		  }
		  if(dist_r <= -20){
 800aaa2:	4b90      	ldr	r3, [pc, #576]	; (800ace4 <slalom_run+0x2ac>)
 800aaa4:	edd3 7a00 	vldr	s15, [r3]
 800aaa8:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800aaac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aab4:	d80f      	bhi.n	800aad6 <slalom_run+0x9e>
			  mode--;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	3b01      	subs	r3, #1
 800aaba:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800aabc:	4b89      	ldr	r3, [pc, #548]	; (800ace4 <slalom_run+0x2ac>)
 800aabe:	f04f 0200 	mov.w	r2, #0
 800aac2:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	da01      	bge.n	800aace <slalom_run+0x96>
				  mode = 7;
 800aaca:	2307      	movs	r3, #7
 800aacc:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800aace:	6879      	ldr	r1, [r7, #4]
 800aad0:	4885      	ldr	r0, [pc, #532]	; (800ace8 <slalom_run+0x2b0>)
 800aad2:	f007 faf3 	bl	80120bc <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800aad6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aada:	4884      	ldr	r0, [pc, #528]	; (800acec <slalom_run+0x2b4>)
 800aadc:	f7f7 fbfa 	bl	80022d4 <HAL_GPIO_ReadPin>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d1b1      	bne.n	800aa4a <slalom_run+0x12>
			  HAL_Delay(50);
 800aae6:	2032      	movs	r0, #50	; 0x32
 800aae8:	f7f6 fa98 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800aaec:	bf00      	nop
 800aaee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aaf2:	487e      	ldr	r0, [pc, #504]	; (800acec <slalom_run+0x2b4>)
 800aaf4:	f7f7 fbee 	bl	80022d4 <HAL_GPIO_ReadPin>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d0f7      	beq.n	800aaee <slalom_run+0xb6>
			  drive_ready();
 800aafe:	f7fa f8bf 	bl	8004c80 <drive_ready>

			  switch(mode){
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2b07      	cmp	r3, #7
 800ab06:	d8a0      	bhi.n	800aa4a <slalom_run+0x12>
 800ab08:	a201      	add	r2, pc, #4	; (adr r2, 800ab10 <slalom_run+0xd8>)
 800ab0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab0e:	bf00      	nop
 800ab10:	0800ab31 	.word	0x0800ab31
 800ab14:	0800aba3 	.word	0x0800aba3
 800ab18:	0800abfb 	.word	0x0800abfb
 800ab1c:	0800ac6d 	.word	0x0800ac6d
 800ab20:	0800ad19 	.word	0x0800ad19
 800ab24:	0800ad8b 	.word	0x0800ad8b
 800ab28:	0800adf5 	.word	0x0800adf5
 800ab2c:	0800ae79 	.word	0x0800ae79

			  case 0:
					//----一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800ab30:	486f      	ldr	r0, [pc, #444]	; (800acf0 <slalom_run+0x2b8>)
 800ab32:	f007 fb37 	bl	80121a4 <puts>

					MF.FLAG.SCND = 0;
 800ab36:	4a6f      	ldr	r2, [pc, #444]	; (800acf4 <slalom_run+0x2bc>)
 800ab38:	8813      	ldrh	r3, [r2, #0]
 800ab3a:	f36f 1345 	bfc	r3, #5, #1
 800ab3e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800ab40:	4a6c      	ldr	r2, [pc, #432]	; (800acf4 <slalom_run+0x2bc>)
 800ab42:	8813      	ldrh	r3, [r2, #0]
 800ab44:	f36f 2349 	bfc	r3, #9, #1
 800ab48:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800ab4a:	4b6b      	ldr	r3, [pc, #428]	; (800acf8 <slalom_run+0x2c0>)
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ab50:	4b6a      	ldr	r3, [pc, #424]	; (800acfc <slalom_run+0x2c4>)
 800ab52:	2200      	movs	r2, #0
 800ab54:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ab56:	4b6a      	ldr	r3, [pc, #424]	; (800ad00 <slalom_run+0x2c8>)
 800ab58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab5c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800ab5e:	4b69      	ldr	r3, [pc, #420]	; (800ad04 <slalom_run+0x2cc>)
 800ab60:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ab64:	801a      	strh	r2, [r3, #0]


					goal_x = GOAL_X;
 800ab66:	4b68      	ldr	r3, [pc, #416]	; (800ad08 <slalom_run+0x2d0>)
 800ab68:	2201      	movs	r2, #1
 800ab6a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ab6c:	4b67      	ldr	r3, [pc, #412]	; (800ad0c <slalom_run+0x2d4>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	701a      	strb	r2, [r3, #0]

					get_base();
 800ab72:	f006 fc7d 	bl	8011470 <get_base>

					searchC();
 800ab76:	f003 fcc7 	bl	800e508 <searchC>
					HAL_Delay(2000);
 800ab7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ab7e:	f7f6 fa4d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ab82:	4b62      	ldr	r3, [pc, #392]	; (800ad0c <slalom_run+0x2d4>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	701a      	strb	r2, [r3, #0]
 800ab88:	4b60      	ldr	r3, [pc, #384]	; (800ad0c <slalom_run+0x2d4>)
 800ab8a:	781a      	ldrb	r2, [r3, #0]
 800ab8c:	4b5e      	ldr	r3, [pc, #376]	; (800ad08 <slalom_run+0x2d0>)
 800ab8e:	701a      	strb	r2, [r3, #0]
					searchC();
 800ab90:	f003 fcba 	bl	800e508 <searchC>

					goal_x = GOAL_X;
 800ab94:	4b5c      	ldr	r3, [pc, #368]	; (800ad08 <slalom_run+0x2d0>)
 800ab96:	2201      	movs	r2, #1
 800ab98:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ab9a:	4b5c      	ldr	r3, [pc, #368]	; (800ad0c <slalom_run+0x2d4>)
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	701a      	strb	r2, [r3, #0]
					break;
 800aba0:	e1ac      	b.n	800aefc <slalom_run+0x4c4>

				case 1:
					//----二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 800aba2:	485b      	ldr	r0, [pc, #364]	; (800ad10 <slalom_run+0x2d8>)
 800aba4:	f007 fafe 	bl	80121a4 <puts>

					MF.FLAG.SCND = 1;
 800aba8:	4a52      	ldr	r2, [pc, #328]	; (800acf4 <slalom_run+0x2bc>)
 800abaa:	8813      	ldrh	r3, [r2, #0]
 800abac:	f043 0320 	orr.w	r3, r3, #32
 800abb0:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800abb2:	4b51      	ldr	r3, [pc, #324]	; (800acf8 <slalom_run+0x2c0>)
 800abb4:	2201      	movs	r2, #1
 800abb6:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800abb8:	4b50      	ldr	r3, [pc, #320]	; (800acfc <slalom_run+0x2c4>)
 800abba:	2200      	movs	r2, #0
 800abbc:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800abbe:	4b52      	ldr	r3, [pc, #328]	; (800ad08 <slalom_run+0x2d0>)
 800abc0:	2201      	movs	r2, #1
 800abc2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800abc4:	4b51      	ldr	r3, [pc, #324]	; (800ad0c <slalom_run+0x2d4>)
 800abc6:	2200      	movs	r2, #0
 800abc8:	701a      	strb	r2, [r3, #0]

					get_base();
 800abca:	f006 fc51 	bl	8011470 <get_base>

					searchC();
 800abce:	f003 fc9b 	bl	800e508 <searchC>
					HAL_Delay(2000);
 800abd2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800abd6:	f7f6 fa21 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800abda:	4b4c      	ldr	r3, [pc, #304]	; (800ad0c <slalom_run+0x2d4>)
 800abdc:	2200      	movs	r2, #0
 800abde:	701a      	strb	r2, [r3, #0]
 800abe0:	4b4a      	ldr	r3, [pc, #296]	; (800ad0c <slalom_run+0x2d4>)
 800abe2:	781a      	ldrb	r2, [r3, #0]
 800abe4:	4b48      	ldr	r3, [pc, #288]	; (800ad08 <slalom_run+0x2d0>)
 800abe6:	701a      	strb	r2, [r3, #0]
					searchC();
 800abe8:	f003 fc8e 	bl	800e508 <searchC>

					goal_x = GOAL_X;
 800abec:	4b46      	ldr	r3, [pc, #280]	; (800ad08 <slalom_run+0x2d0>)
 800abee:	2201      	movs	r2, #1
 800abf0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800abf2:	4b46      	ldr	r3, [pc, #280]	; (800ad0c <slalom_run+0x2d4>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	701a      	strb	r2, [r3, #0]
					break;
 800abf8:	e180      	b.n	800aefc <slalom_run+0x4c4>

				case 2:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800abfa:	4846      	ldr	r0, [pc, #280]	; (800ad14 <slalom_run+0x2dc>)
 800abfc:	f007 fad2 	bl	80121a4 <puts>

					MF.FLAG.SCND = 1;
 800ac00:	4a3c      	ldr	r2, [pc, #240]	; (800acf4 <slalom_run+0x2bc>)
 800ac02:	8813      	ldrh	r3, [r2, #0]
 800ac04:	f043 0320 	orr.w	r3, r3, #32
 800ac08:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ac0a:	4a3a      	ldr	r2, [pc, #232]	; (800acf4 <slalom_run+0x2bc>)
 800ac0c:	8813      	ldrh	r3, [r2, #0]
 800ac0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac12:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800ac14:	4b38      	ldr	r3, [pc, #224]	; (800acf8 <slalom_run+0x2c0>)
 800ac16:	2201      	movs	r2, #1
 800ac18:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ac1a:	4b38      	ldr	r3, [pc, #224]	; (800acfc <slalom_run+0x2c4>)
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ac20:	4b37      	ldr	r3, [pc, #220]	; (800ad00 <slalom_run+0x2c8>)
 800ac22:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac26:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 800ac28:	4b36      	ldr	r3, [pc, #216]	; (800ad04 <slalom_run+0x2cc>)
 800ac2a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ac2e:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800ac30:	4b35      	ldr	r3, [pc, #212]	; (800ad08 <slalom_run+0x2d0>)
 800ac32:	2201      	movs	r2, #1
 800ac34:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ac36:	4b35      	ldr	r3, [pc, #212]	; (800ad0c <slalom_run+0x2d4>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	701a      	strb	r2, [r3, #0]

					get_base();
 800ac3c:	f006 fc18 	bl	8011470 <get_base>

					searchD();
 800ac40:	f003 ff42 	bl	800eac8 <searchD>
					HAL_Delay(2000);
 800ac44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ac48:	f7f6 f9e8 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ac4c:	4b2f      	ldr	r3, [pc, #188]	; (800ad0c <slalom_run+0x2d4>)
 800ac4e:	2200      	movs	r2, #0
 800ac50:	701a      	strb	r2, [r3, #0]
 800ac52:	4b2e      	ldr	r3, [pc, #184]	; (800ad0c <slalom_run+0x2d4>)
 800ac54:	781a      	ldrb	r2, [r3, #0]
 800ac56:	4b2c      	ldr	r3, [pc, #176]	; (800ad08 <slalom_run+0x2d0>)
 800ac58:	701a      	strb	r2, [r3, #0]
					searchD();
 800ac5a:	f003 ff35 	bl	800eac8 <searchD>

					goal_x = GOAL_X;
 800ac5e:	4b2a      	ldr	r3, [pc, #168]	; (800ad08 <slalom_run+0x2d0>)
 800ac60:	2201      	movs	r2, #1
 800ac62:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ac64:	4b29      	ldr	r3, [pc, #164]	; (800ad0c <slalom_run+0x2d4>)
 800ac66:	2200      	movs	r2, #0
 800ac68:	701a      	strb	r2, [r3, #0]
					break;
 800ac6a:	e147      	b.n	800aefc <slalom_run+0x4c4>

				case 3:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800ac6c:	4829      	ldr	r0, [pc, #164]	; (800ad14 <slalom_run+0x2dc>)
 800ac6e:	f007 fa99 	bl	80121a4 <puts>

					MF.FLAG.SCND = 1;
 800ac72:	4a20      	ldr	r2, [pc, #128]	; (800acf4 <slalom_run+0x2bc>)
 800ac74:	8813      	ldrh	r3, [r2, #0]
 800ac76:	f043 0320 	orr.w	r3, r3, #32
 800ac7a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ac7c:	4a1d      	ldr	r2, [pc, #116]	; (800acf4 <slalom_run+0x2bc>)
 800ac7e:	8813      	ldrh	r3, [r2, #0]
 800ac80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac84:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800ac86:	4b1c      	ldr	r3, [pc, #112]	; (800acf8 <slalom_run+0x2c0>)
 800ac88:	2201      	movs	r2, #1
 800ac8a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ac8c:	4b1b      	ldr	r3, [pc, #108]	; (800acfc <slalom_run+0x2c4>)
 800ac8e:	2200      	movs	r2, #0
 800ac90:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ac92:	4b1b      	ldr	r3, [pc, #108]	; (800ad00 <slalom_run+0x2c8>)
 800ac94:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac98:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800ac9a:	4b1a      	ldr	r3, [pc, #104]	; (800ad04 <slalom_run+0x2cc>)
 800ac9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aca0:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800aca2:	4b19      	ldr	r3, [pc, #100]	; (800ad08 <slalom_run+0x2d0>)
 800aca4:	2201      	movs	r2, #1
 800aca6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aca8:	4b18      	ldr	r3, [pc, #96]	; (800ad0c <slalom_run+0x2d4>)
 800acaa:	2200      	movs	r2, #0
 800acac:	701a      	strb	r2, [r3, #0]

					get_base();
 800acae:	f006 fbdf 	bl	8011470 <get_base>

					searchD();
 800acb2:	f003 ff09 	bl	800eac8 <searchD>
					HAL_Delay(2000);
 800acb6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800acba:	f7f6 f9af 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800acbe:	4b13      	ldr	r3, [pc, #76]	; (800ad0c <slalom_run+0x2d4>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	701a      	strb	r2, [r3, #0]
 800acc4:	4b11      	ldr	r3, [pc, #68]	; (800ad0c <slalom_run+0x2d4>)
 800acc6:	781a      	ldrb	r2, [r3, #0]
 800acc8:	4b0f      	ldr	r3, [pc, #60]	; (800ad08 <slalom_run+0x2d0>)
 800acca:	701a      	strb	r2, [r3, #0]
					searchD();
 800accc:	f003 fefc 	bl	800eac8 <searchD>

					goal_x = GOAL_X;
 800acd0:	4b0d      	ldr	r3, [pc, #52]	; (800ad08 <slalom_run+0x2d0>)
 800acd2:	2201      	movs	r2, #1
 800acd4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800acd6:	4b0d      	ldr	r3, [pc, #52]	; (800ad0c <slalom_run+0x2d4>)
 800acd8:	2200      	movs	r2, #0
 800acda:	701a      	strb	r2, [r3, #0]
					break;
 800acdc:	e10e      	b.n	800aefc <slalom_run+0x4c4>
 800acde:	bf00      	nop
 800ace0:	080135f0 	.word	0x080135f0
 800ace4:	20000aec 	.word	0x20000aec
 800ace8:	080132f8 	.word	0x080132f8
 800acec:	40020000 	.word	0x40020000
 800acf0:	080134d8 	.word	0x080134d8
 800acf4:	20000f68 	.word	0x20000f68
 800acf8:	20000456 	.word	0x20000456
 800acfc:	200015c8 	.word	0x200015c8
 800ad00:	20000454 	.word	0x20000454
 800ad04:	20000f7c 	.word	0x20000f7c
 800ad08:	20000bb0 	.word	0x20000bb0
 800ad0c:	20000b4c 	.word	0x20000b4c
 800ad10:	08013608 	.word	0x08013608
 800ad14:	08013620 	.word	0x08013620

				case 4:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800ad18:	4879      	ldr	r0, [pc, #484]	; (800af00 <slalom_run+0x4c8>)
 800ad1a:	f007 fa43 	bl	80121a4 <puts>

					MF.FLAG.SCND = 1;
 800ad1e:	4a79      	ldr	r2, [pc, #484]	; (800af04 <slalom_run+0x4cc>)
 800ad20:	8813      	ldrh	r3, [r2, #0]
 800ad22:	f043 0320 	orr.w	r3, r3, #32
 800ad26:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ad28:	4a76      	ldr	r2, [pc, #472]	; (800af04 <slalom_run+0x4cc>)
 800ad2a:	8813      	ldrh	r3, [r2, #0]
 800ad2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ad30:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800ad32:	4b75      	ldr	r3, [pc, #468]	; (800af08 <slalom_run+0x4d0>)
 800ad34:	2201      	movs	r2, #1
 800ad36:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ad38:	4b74      	ldr	r3, [pc, #464]	; (800af0c <slalom_run+0x4d4>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ad3e:	4b74      	ldr	r3, [pc, #464]	; (800af10 <slalom_run+0x4d8>)
 800ad40:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad44:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1500;
 800ad46:	4b73      	ldr	r3, [pc, #460]	; (800af14 <slalom_run+0x4dc>)
 800ad48:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ad4c:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800ad4e:	4b72      	ldr	r3, [pc, #456]	; (800af18 <slalom_run+0x4e0>)
 800ad50:	2201      	movs	r2, #1
 800ad52:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ad54:	4b71      	ldr	r3, [pc, #452]	; (800af1c <slalom_run+0x4e4>)
 800ad56:	2200      	movs	r2, #0
 800ad58:	701a      	strb	r2, [r3, #0]

					get_base();
 800ad5a:	f006 fb89 	bl	8011470 <get_base>

					searchD();
 800ad5e:	f003 feb3 	bl	800eac8 <searchD>
					HAL_Delay(2000);
 800ad62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ad66:	f7f6 f959 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ad6a:	4b6c      	ldr	r3, [pc, #432]	; (800af1c <slalom_run+0x4e4>)
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	701a      	strb	r2, [r3, #0]
 800ad70:	4b6a      	ldr	r3, [pc, #424]	; (800af1c <slalom_run+0x4e4>)
 800ad72:	781a      	ldrb	r2, [r3, #0]
 800ad74:	4b68      	ldr	r3, [pc, #416]	; (800af18 <slalom_run+0x4e0>)
 800ad76:	701a      	strb	r2, [r3, #0]
					searchD();
 800ad78:	f003 fea6 	bl	800eac8 <searchD>

					goal_x = GOAL_X;
 800ad7c:	4b66      	ldr	r3, [pc, #408]	; (800af18 <slalom_run+0x4e0>)
 800ad7e:	2201      	movs	r2, #1
 800ad80:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ad82:	4b66      	ldr	r3, [pc, #408]	; (800af1c <slalom_run+0x4e4>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	701a      	strb	r2, [r3, #0]
					break;
 800ad88:	e0b8      	b.n	800aefc <slalom_run+0x4c4>

				case 5:
					//----二次走行スラローム+直線優先----
					printf("High Speed Run. (Slalom)\n");
 800ad8a:	4865      	ldr	r0, [pc, #404]	; (800af20 <slalom_run+0x4e8>)
 800ad8c:	f007 fa0a 	bl	80121a4 <puts>

					MF.FLAG.SCND = 1;
 800ad90:	4a5c      	ldr	r2, [pc, #368]	; (800af04 <slalom_run+0x4cc>)
 800ad92:	8813      	ldrh	r3, [r2, #0]
 800ad94:	f043 0320 	orr.w	r3, r3, #32
 800ad98:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ad9a:	4a5a      	ldr	r2, [pc, #360]	; (800af04 <slalom_run+0x4cc>)
 800ad9c:	8813      	ldrh	r3, [r2, #0]
 800ad9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ada2:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800ada4:	4b58      	ldr	r3, [pc, #352]	; (800af08 <slalom_run+0x4d0>)
 800ada6:	2201      	movs	r2, #1
 800ada8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800adaa:	4b58      	ldr	r3, [pc, #352]	; (800af0c <slalom_run+0x4d4>)
 800adac:	2200      	movs	r2, #0
 800adae:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800adb0:	4b59      	ldr	r3, [pc, #356]	; (800af18 <slalom_run+0x4e0>)
 800adb2:	2201      	movs	r2, #1
 800adb4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800adb6:	4b59      	ldr	r3, [pc, #356]	; (800af1c <slalom_run+0x4e4>)
 800adb8:	2200      	movs	r2, #0
 800adba:	701a      	strb	r2, [r3, #0]

					get_base();
 800adbc:	f006 fb58 	bl	8011470 <get_base>

					HAL_Delay(5000);
 800adc0:	f241 3088 	movw	r0, #5000	; 0x1388
 800adc4:	f7f6 f92a 	bl	800101c <HAL_Delay>
					searchC();
 800adc8:	f003 fb9e 	bl	800e508 <searchC>
					HAL_Delay(2000);
 800adcc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800add0:	f7f6 f924 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800add4:	4b51      	ldr	r3, [pc, #324]	; (800af1c <slalom_run+0x4e4>)
 800add6:	2200      	movs	r2, #0
 800add8:	701a      	strb	r2, [r3, #0]
 800adda:	4b50      	ldr	r3, [pc, #320]	; (800af1c <slalom_run+0x4e4>)
 800addc:	781a      	ldrb	r2, [r3, #0]
 800adde:	4b4e      	ldr	r3, [pc, #312]	; (800af18 <slalom_run+0x4e0>)
 800ade0:	701a      	strb	r2, [r3, #0]
					searchC();
 800ade2:	f003 fb91 	bl	800e508 <searchC>

					goal_x = GOAL_X;
 800ade6:	4b4c      	ldr	r3, [pc, #304]	; (800af18 <slalom_run+0x4e0>)
 800ade8:	2201      	movs	r2, #1
 800adea:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800adec:	4b4b      	ldr	r3, [pc, #300]	; (800af1c <slalom_run+0x4e4>)
 800adee:	2200      	movs	r2, #0
 800adf0:	701a      	strb	r2, [r3, #0]
					break;
 800adf2:	e083      	b.n	800aefc <slalom_run+0x4c4>

				case 6:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800adf4:	484a      	ldr	r0, [pc, #296]	; (800af20 <slalom_run+0x4e8>)
 800adf6:	f007 f9d5 	bl	80121a4 <puts>

					MF.FLAG.SCND = 1;
 800adfa:	4a42      	ldr	r2, [pc, #264]	; (800af04 <slalom_run+0x4cc>)
 800adfc:	8813      	ldrh	r3, [r2, #0]
 800adfe:	f043 0320 	orr.w	r3, r3, #32
 800ae02:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ae04:	4a3f      	ldr	r2, [pc, #252]	; (800af04 <slalom_run+0x4cc>)
 800ae06:	8813      	ldrh	r3, [r2, #0]
 800ae08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ae0c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ae0e:	4a3d      	ldr	r2, [pc, #244]	; (800af04 <slalom_run+0x4cc>)
 800ae10:	8813      	ldrh	r3, [r2, #0]
 800ae12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae16:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800ae18:	4b3b      	ldr	r3, [pc, #236]	; (800af08 <slalom_run+0x4d0>)
 800ae1a:	2203      	movs	r2, #3
 800ae1c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ae1e:	4b3b      	ldr	r3, [pc, #236]	; (800af0c <slalom_run+0x4d4>)
 800ae20:	2200      	movs	r2, #0
 800ae22:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ae24:	4b3a      	ldr	r3, [pc, #232]	; (800af10 <slalom_run+0x4d8>)
 800ae26:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae2a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800ae2c:	4b39      	ldr	r3, [pc, #228]	; (800af14 <slalom_run+0x4dc>)
 800ae2e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800ae32:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800ae34:	4b38      	ldr	r3, [pc, #224]	; (800af18 <slalom_run+0x4e0>)
 800ae36:	2201      	movs	r2, #1
 800ae38:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ae3a:	4b38      	ldr	r3, [pc, #224]	; (800af1c <slalom_run+0x4e4>)
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	701a      	strb	r2, [r3, #0]

					get_base();
 800ae40:	f006 fb16 	bl	8011470 <get_base>

					HAL_Delay(5000);
 800ae44:	f241 3088 	movw	r0, #5000	; 0x1388
 800ae48:	f7f6 f8e8 	bl	800101c <HAL_Delay>
					searchD();
 800ae4c:	f003 fe3c 	bl	800eac8 <searchD>
					HAL_Delay(2000);
 800ae50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ae54:	f7f6 f8e2 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ae58:	4b30      	ldr	r3, [pc, #192]	; (800af1c <slalom_run+0x4e4>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	701a      	strb	r2, [r3, #0]
 800ae5e:	4b2f      	ldr	r3, [pc, #188]	; (800af1c <slalom_run+0x4e4>)
 800ae60:	781a      	ldrb	r2, [r3, #0]
 800ae62:	4b2d      	ldr	r3, [pc, #180]	; (800af18 <slalom_run+0x4e0>)
 800ae64:	701a      	strb	r2, [r3, #0]
					searchD();
 800ae66:	f003 fe2f 	bl	800eac8 <searchD>

					goal_x = GOAL_X;
 800ae6a:	4b2b      	ldr	r3, [pc, #172]	; (800af18 <slalom_run+0x4e0>)
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ae70:	4b2a      	ldr	r3, [pc, #168]	; (800af1c <slalom_run+0x4e4>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	701a      	strb	r2, [r3, #0]
					break;
 800ae76:	e041      	b.n	800aefc <slalom_run+0x4c4>

				case 7:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800ae78:	4829      	ldr	r0, [pc, #164]	; (800af20 <slalom_run+0x4e8>)
 800ae7a:	f007 f993 	bl	80121a4 <puts>

					MF.FLAG.SCND = 1;
 800ae7e:	4a21      	ldr	r2, [pc, #132]	; (800af04 <slalom_run+0x4cc>)
 800ae80:	8813      	ldrh	r3, [r2, #0]
 800ae82:	f043 0320 	orr.w	r3, r3, #32
 800ae86:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ae88:	4a1e      	ldr	r2, [pc, #120]	; (800af04 <slalom_run+0x4cc>)
 800ae8a:	8813      	ldrh	r3, [r2, #0]
 800ae8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ae90:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ae92:	4a1c      	ldr	r2, [pc, #112]	; (800af04 <slalom_run+0x4cc>)
 800ae94:	8813      	ldrh	r3, [r2, #0]
 800ae96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae9a:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800ae9c:	4b1a      	ldr	r3, [pc, #104]	; (800af08 <slalom_run+0x4d0>)
 800ae9e:	2203      	movs	r2, #3
 800aea0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800aea2:	4b1a      	ldr	r3, [pc, #104]	; (800af0c <slalom_run+0x4d4>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800aea8:	4b19      	ldr	r3, [pc, #100]	; (800af10 <slalom_run+0x4d8>)
 800aeaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeae:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800aeb0:	4b18      	ldr	r3, [pc, #96]	; (800af14 <slalom_run+0x4dc>)
 800aeb2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aeb6:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800aeb8:	4b17      	ldr	r3, [pc, #92]	; (800af18 <slalom_run+0x4e0>)
 800aeba:	2201      	movs	r2, #1
 800aebc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aebe:	4b17      	ldr	r3, [pc, #92]	; (800af1c <slalom_run+0x4e4>)
 800aec0:	2200      	movs	r2, #0
 800aec2:	701a      	strb	r2, [r3, #0]

					get_base();
 800aec4:	f006 fad4 	bl	8011470 <get_base>

					HAL_Delay(5000);
 800aec8:	f241 3088 	movw	r0, #5000	; 0x1388
 800aecc:	f7f6 f8a6 	bl	800101c <HAL_Delay>
					searchD();
 800aed0:	f003 fdfa 	bl	800eac8 <searchD>
					HAL_Delay(2000);
 800aed4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aed8:	f7f6 f8a0 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800aedc:	4b0f      	ldr	r3, [pc, #60]	; (800af1c <slalom_run+0x4e4>)
 800aede:	2200      	movs	r2, #0
 800aee0:	701a      	strb	r2, [r3, #0]
 800aee2:	4b0e      	ldr	r3, [pc, #56]	; (800af1c <slalom_run+0x4e4>)
 800aee4:	781a      	ldrb	r2, [r3, #0]
 800aee6:	4b0c      	ldr	r3, [pc, #48]	; (800af18 <slalom_run+0x4e0>)
 800aee8:	701a      	strb	r2, [r3, #0]
					searchD();
 800aeea:	f003 fded 	bl	800eac8 <searchD>

					goal_x = GOAL_X;
 800aeee:	4b0a      	ldr	r3, [pc, #40]	; (800af18 <slalom_run+0x4e0>)
 800aef0:	2201      	movs	r2, #1
 800aef2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800aef4:	4b09      	ldr	r3, [pc, #36]	; (800af1c <slalom_run+0x4e4>)
 800aef6:	2200      	movs	r2, #0
 800aef8:	701a      	strb	r2, [r3, #0]
					break;
 800aefa:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800aefc:	e5a5      	b.n	800aa4a <slalom_run+0x12>
 800aefe:	bf00      	nop
 800af00:	08013620 	.word	0x08013620
 800af04:	20000f68 	.word	0x20000f68
 800af08:	20000456 	.word	0x20000456
 800af0c:	200015c8 	.word	0x200015c8
 800af10:	20000454 	.word	0x20000454
 800af14:	20000f7c 	.word	0x20000f7c
 800af18:	20000bb0 	.word	0x20000bb0
 800af1c:	20000b4c 	.word	0x20000b4c
 800af20:	0801363c 	.word	0x0801363c

0800af24 <perfect_slalom>:
//perfect_slalom
// 本番用スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_slalom(void){
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0

	int mode = 0;
 800af2a:	2300      	movs	r3, #0
 800af2c:	607b      	str	r3, [r7, #4]
	printf("Perfect Slalom, Mode : %d\n", mode);
 800af2e:	6879      	ldr	r1, [r7, #4]
 800af30:	4898      	ldr	r0, [pc, #608]	; (800b194 <perfect_slalom+0x270>)
 800af32:	f007 f8c3 	bl	80120bc <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	f003 0301 	and.w	r3, r3, #1
 800af3e:	b2d8      	uxtb	r0, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	b2db      	uxtb	r3, r3
 800af44:	f003 0302 	and.w	r3, r3, #2
 800af48:	b2d9      	uxtb	r1, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	f003 0304 	and.w	r3, r3, #4
 800af52:	b2db      	uxtb	r3, r3
 800af54:	461a      	mov	r2, r3
 800af56:	f006 fae3 	bl	8011520 <led_write>
		  if(dist_r >= 20){
 800af5a:	4b8f      	ldr	r3, [pc, #572]	; (800b198 <perfect_slalom+0x274>)
 800af5c:	edd3 7a00 	vldr	s15, [r3]
 800af60:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800af64:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af6c:	db0f      	blt.n	800af8e <perfect_slalom+0x6a>
			  mode++;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	3301      	adds	r3, #1
 800af72:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800af74:	4b88      	ldr	r3, [pc, #544]	; (800b198 <perfect_slalom+0x274>)
 800af76:	f04f 0200 	mov.w	r2, #0
 800af7a:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b07      	cmp	r3, #7
 800af80:	dd01      	ble.n	800af86 <perfect_slalom+0x62>
				  mode = 0;
 800af82:	2300      	movs	r3, #0
 800af84:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800af86:	6879      	ldr	r1, [r7, #4]
 800af88:	4884      	ldr	r0, [pc, #528]	; (800b19c <perfect_slalom+0x278>)
 800af8a:	f007 f897 	bl	80120bc <iprintf>
		  }
		  if(dist_r <= -20){
 800af8e:	4b82      	ldr	r3, [pc, #520]	; (800b198 <perfect_slalom+0x274>)
 800af90:	edd3 7a00 	vldr	s15, [r3]
 800af94:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800af98:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afa0:	d80f      	bhi.n	800afc2 <perfect_slalom+0x9e>
			  mode--;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800afa8:	4b7b      	ldr	r3, [pc, #492]	; (800b198 <perfect_slalom+0x274>)
 800afaa:	f04f 0200 	mov.w	r2, #0
 800afae:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	da01      	bge.n	800afba <perfect_slalom+0x96>
				  mode = 7;
 800afb6:	2307      	movs	r3, #7
 800afb8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800afba:	6879      	ldr	r1, [r7, #4]
 800afbc:	4877      	ldr	r0, [pc, #476]	; (800b19c <perfect_slalom+0x278>)
 800afbe:	f007 f87d 	bl	80120bc <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800afc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800afc6:	4876      	ldr	r0, [pc, #472]	; (800b1a0 <perfect_slalom+0x27c>)
 800afc8:	f7f7 f984 	bl	80022d4 <HAL_GPIO_ReadPin>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1b1      	bne.n	800af36 <perfect_slalom+0x12>
			  HAL_Delay(50);
 800afd2:	2032      	movs	r0, #50	; 0x32
 800afd4:	f7f6 f822 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800afd8:	bf00      	nop
 800afda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800afde:	4870      	ldr	r0, [pc, #448]	; (800b1a0 <perfect_slalom+0x27c>)
 800afe0:	f7f7 f978 	bl	80022d4 <HAL_GPIO_ReadPin>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d0f7      	beq.n	800afda <perfect_slalom+0xb6>
			  drive_ready();
 800afea:	f7f9 fe49 	bl	8004c80 <drive_ready>

			  switch(mode){
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2b07      	cmp	r3, #7
 800aff2:	d8a0      	bhi.n	800af36 <perfect_slalom+0x12>
 800aff4:	a201      	add	r2, pc, #4	; (adr r2, 800affc <perfect_slalom+0xd8>)
 800aff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800affa:	bf00      	nop
 800affc:	0800af37 	.word	0x0800af37
 800b000:	0800b01d 	.word	0x0800b01d
 800b004:	0800b09f 	.word	0x0800b09f
 800b008:	0800b121 	.word	0x0800b121
 800b00c:	0800b1d1 	.word	0x0800b1d1
 800b010:	0800b253 	.word	0x0800b253
 800b014:	0800b2d5 	.word	0x0800b2d5
 800b018:	0800b357 	.word	0x0800b357
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800b01c:	4861      	ldr	r0, [pc, #388]	; (800b1a4 <perfect_slalom+0x280>)
 800b01e:	f007 f8c1 	bl	80121a4 <puts>
					MF.FLAG.SCND = 0;
 800b022:	4a61      	ldr	r2, [pc, #388]	; (800b1a8 <perfect_slalom+0x284>)
 800b024:	8813      	ldrh	r3, [r2, #0]
 800b026:	f36f 1345 	bfc	r3, #5, #1
 800b02a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b02c:	4a5e      	ldr	r2, [pc, #376]	; (800b1a8 <perfect_slalom+0x284>)
 800b02e:	8813      	ldrh	r3, [r2, #0]
 800b030:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b034:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b036:	4a5c      	ldr	r2, [pc, #368]	; (800b1a8 <perfect_slalom+0x284>)
 800b038:	8813      	ldrh	r3, [r2, #0]
 800b03a:	f36f 238a 	bfc	r3, #10, #1
 800b03e:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800b040:	4b5a      	ldr	r3, [pc, #360]	; (800b1ac <perfect_slalom+0x288>)
 800b042:	2201      	movs	r2, #1
 800b044:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b046:	4b5a      	ldr	r3, [pc, #360]	; (800b1b0 <perfect_slalom+0x28c>)
 800b048:	2200      	movs	r2, #0
 800b04a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b04c:	4b59      	ldr	r3, [pc, #356]	; (800b1b4 <perfect_slalom+0x290>)
 800b04e:	2202      	movs	r2, #2
 800b050:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b052:	4b59      	ldr	r3, [pc, #356]	; (800b1b8 <perfect_slalom+0x294>)
 800b054:	f241 3288 	movw	r2, #5000	; 0x1388
 800b058:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b05a:	4b58      	ldr	r3, [pc, #352]	; (800b1bc <perfect_slalom+0x298>)
 800b05c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b060:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800b062:	4b57      	ldr	r3, [pc, #348]	; (800b1c0 <perfect_slalom+0x29c>)
 800b064:	2207      	movs	r2, #7
 800b066:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b068:	4b56      	ldr	r3, [pc, #344]	; (800b1c4 <perfect_slalom+0x2a0>)
 800b06a:	2207      	movs	r2, #7
 800b06c:	701a      	strb	r2, [r3, #0]

					get_base();
 800b06e:	f006 f9ff 	bl	8011470 <get_base>

					searchC();
 800b072:	f003 fa49 	bl	800e508 <searchC>
					HAL_Delay(2000);
 800b076:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b07a:	f7f5 ffcf 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b07e:	4b51      	ldr	r3, [pc, #324]	; (800b1c4 <perfect_slalom+0x2a0>)
 800b080:	2200      	movs	r2, #0
 800b082:	701a      	strb	r2, [r3, #0]
 800b084:	4b4f      	ldr	r3, [pc, #316]	; (800b1c4 <perfect_slalom+0x2a0>)
 800b086:	781a      	ldrb	r2, [r3, #0]
 800b088:	4b4d      	ldr	r3, [pc, #308]	; (800b1c0 <perfect_slalom+0x29c>)
 800b08a:	701a      	strb	r2, [r3, #0]
					searchC();
 800b08c:	f003 fa3c 	bl	800e508 <searchC>

					goal_x = 7;
 800b090:	4b4b      	ldr	r3, [pc, #300]	; (800b1c0 <perfect_slalom+0x29c>)
 800b092:	2207      	movs	r2, #7
 800b094:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b096:	4b4b      	ldr	r3, [pc, #300]	; (800b1c4 <perfect_slalom+0x2a0>)
 800b098:	2207      	movs	r2, #7
 800b09a:	701a      	strb	r2, [r3, #0]
					break;
 800b09c:	e15e      	b.n	800b35c <perfect_slalom+0x438>

				case 2:
					//----a二次走行スラローム+既知区間加速走行 speed1----
					printf("First Run. (Continuous)\n");
 800b09e:	484a      	ldr	r0, [pc, #296]	; (800b1c8 <perfect_slalom+0x2a4>)
 800b0a0:	f007 f880 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800b0a4:	4a40      	ldr	r2, [pc, #256]	; (800b1a8 <perfect_slalom+0x284>)
 800b0a6:	8813      	ldrh	r3, [r2, #0]
 800b0a8:	f043 0320 	orr.w	r3, r3, #32
 800b0ac:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b0ae:	4a3e      	ldr	r2, [pc, #248]	; (800b1a8 <perfect_slalom+0x284>)
 800b0b0:	8813      	ldrh	r3, [r2, #0]
 800b0b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b0b6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b0b8:	4a3b      	ldr	r2, [pc, #236]	; (800b1a8 <perfect_slalom+0x284>)
 800b0ba:	8813      	ldrh	r3, [r2, #0]
 800b0bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b0c0:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800b0c2:	4b3a      	ldr	r3, [pc, #232]	; (800b1ac <perfect_slalom+0x288>)
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b0c8:	4b39      	ldr	r3, [pc, #228]	; (800b1b0 <perfect_slalom+0x28c>)
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b0ce:	4b39      	ldr	r3, [pc, #228]	; (800b1b4 <perfect_slalom+0x290>)
 800b0d0:	2202      	movs	r2, #2
 800b0d2:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b0d4:	4b38      	ldr	r3, [pc, #224]	; (800b1b8 <perfect_slalom+0x294>)
 800b0d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0da:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b0dc:	4b37      	ldr	r3, [pc, #220]	; (800b1bc <perfect_slalom+0x298>)
 800b0de:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b0e2:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b0e4:	4b36      	ldr	r3, [pc, #216]	; (800b1c0 <perfect_slalom+0x29c>)
 800b0e6:	2207      	movs	r2, #7
 800b0e8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b0ea:	4b36      	ldr	r3, [pc, #216]	; (800b1c4 <perfect_slalom+0x2a0>)
 800b0ec:	2207      	movs	r2, #7
 800b0ee:	701a      	strb	r2, [r3, #0]

					get_base();
 800b0f0:	f006 f9be 	bl	8011470 <get_base>

					searchD();
 800b0f4:	f003 fce8 	bl	800eac8 <searchD>
					HAL_Delay(2000);
 800b0f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b0fc:	f7f5 ff8e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b100:	4b30      	ldr	r3, [pc, #192]	; (800b1c4 <perfect_slalom+0x2a0>)
 800b102:	2200      	movs	r2, #0
 800b104:	701a      	strb	r2, [r3, #0]
 800b106:	4b2f      	ldr	r3, [pc, #188]	; (800b1c4 <perfect_slalom+0x2a0>)
 800b108:	781a      	ldrb	r2, [r3, #0]
 800b10a:	4b2d      	ldr	r3, [pc, #180]	; (800b1c0 <perfect_slalom+0x29c>)
 800b10c:	701a      	strb	r2, [r3, #0]
					searchD();
 800b10e:	f003 fcdb 	bl	800eac8 <searchD>

					goal_x = 7;
 800b112:	4b2b      	ldr	r3, [pc, #172]	; (800b1c0 <perfect_slalom+0x29c>)
 800b114:	2207      	movs	r2, #7
 800b116:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b118:	4b2a      	ldr	r3, [pc, #168]	; (800b1c4 <perfect_slalom+0x2a0>)
 800b11a:	2207      	movs	r2, #7
 800b11c:	701a      	strb	r2, [r3, #0]
					break;
 800b11e:	e11d      	b.n	800b35c <perfect_slalom+0x438>

				case 3:
					//----a二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 800b120:	482a      	ldr	r0, [pc, #168]	; (800b1cc <perfect_slalom+0x2a8>)
 800b122:	f007 f83f 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800b126:	4a20      	ldr	r2, [pc, #128]	; (800b1a8 <perfect_slalom+0x284>)
 800b128:	8813      	ldrh	r3, [r2, #0]
 800b12a:	f043 0320 	orr.w	r3, r3, #32
 800b12e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800b130:	4a1d      	ldr	r2, [pc, #116]	; (800b1a8 <perfect_slalom+0x284>)
 800b132:	8813      	ldrh	r3, [r2, #0]
 800b134:	f36f 2349 	bfc	r3, #9, #1
 800b138:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b13a:	4a1b      	ldr	r2, [pc, #108]	; (800b1a8 <perfect_slalom+0x284>)
 800b13c:	8813      	ldrh	r3, [r2, #0]
 800b13e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b142:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b144:	4b19      	ldr	r3, [pc, #100]	; (800b1ac <perfect_slalom+0x288>)
 800b146:	2203      	movs	r2, #3
 800b148:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b14a:	4b19      	ldr	r3, [pc, #100]	; (800b1b0 <perfect_slalom+0x28c>)
 800b14c:	2200      	movs	r2, #0
 800b14e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b150:	4b18      	ldr	r3, [pc, #96]	; (800b1b4 <perfect_slalom+0x290>)
 800b152:	2202      	movs	r2, #2
 800b154:	701a      	strb	r2, [r3, #0]
					goal_x = 7;
 800b156:	4b1a      	ldr	r3, [pc, #104]	; (800b1c0 <perfect_slalom+0x29c>)
 800b158:	2207      	movs	r2, #7
 800b15a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b15c:	4b19      	ldr	r3, [pc, #100]	; (800b1c4 <perfect_slalom+0x2a0>)
 800b15e:	2207      	movs	r2, #7
 800b160:	701a      	strb	r2, [r3, #0]

					get_base();
 800b162:	f006 f985 	bl	8011470 <get_base>

					searchC();
 800b166:	f003 f9cf 	bl	800e508 <searchC>
					HAL_Delay(2000);
 800b16a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b16e:	f7f5 ff55 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b172:	4b14      	ldr	r3, [pc, #80]	; (800b1c4 <perfect_slalom+0x2a0>)
 800b174:	2200      	movs	r2, #0
 800b176:	701a      	strb	r2, [r3, #0]
 800b178:	4b12      	ldr	r3, [pc, #72]	; (800b1c4 <perfect_slalom+0x2a0>)
 800b17a:	781a      	ldrb	r2, [r3, #0]
 800b17c:	4b10      	ldr	r3, [pc, #64]	; (800b1c0 <perfect_slalom+0x29c>)
 800b17e:	701a      	strb	r2, [r3, #0]
					searchC();
 800b180:	f003 f9c2 	bl	800e508 <searchC>
					goal_x = 7;
 800b184:	4b0e      	ldr	r3, [pc, #56]	; (800b1c0 <perfect_slalom+0x29c>)
 800b186:	2207      	movs	r2, #7
 800b188:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b18a:	4b0e      	ldr	r3, [pc, #56]	; (800b1c4 <perfect_slalom+0x2a0>)
 800b18c:	2207      	movs	r2, #7
 800b18e:	701a      	strb	r2, [r3, #0]
					break;
 800b190:	e0e4      	b.n	800b35c <perfect_slalom+0x438>
 800b192:	bf00      	nop
 800b194:	08013670 	.word	0x08013670
 800b198:	20000aec 	.word	0x20000aec
 800b19c:	080132f8 	.word	0x080132f8
 800b1a0:	40020000 	.word	0x40020000
 800b1a4:	080135b0 	.word	0x080135b0
 800b1a8:	20000f68 	.word	0x20000f68
 800b1ac:	20000456 	.word	0x20000456
 800b1b0:	200015c8 	.word	0x200015c8
 800b1b4:	20000bb1 	.word	0x20000bb1
 800b1b8:	20000454 	.word	0x20000454
 800b1bc:	20000f7c 	.word	0x20000f7c
 800b1c0:	20000bb0 	.word	0x20000bb0
 800b1c4:	20000b4c 	.word	0x20000b4c
 800b1c8:	080135bc 	.word	0x080135bc
 800b1cc:	08013608 	.word	0x08013608

				case 4:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800b1d0:	4863      	ldr	r0, [pc, #396]	; (800b360 <perfect_slalom+0x43c>)
 800b1d2:	f006 ffe7 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800b1d6:	4a63      	ldr	r2, [pc, #396]	; (800b364 <perfect_slalom+0x440>)
 800b1d8:	8813      	ldrh	r3, [r2, #0]
 800b1da:	f043 0320 	orr.w	r3, r3, #32
 800b1de:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b1e0:	4a60      	ldr	r2, [pc, #384]	; (800b364 <perfect_slalom+0x440>)
 800b1e2:	8813      	ldrh	r3, [r2, #0]
 800b1e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b1e8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b1ea:	4a5e      	ldr	r2, [pc, #376]	; (800b364 <perfect_slalom+0x440>)
 800b1ec:	8813      	ldrh	r3, [r2, #0]
 800b1ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b1f2:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b1f4:	4b5c      	ldr	r3, [pc, #368]	; (800b368 <perfect_slalom+0x444>)
 800b1f6:	2203      	movs	r2, #3
 800b1f8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b1fa:	4b5c      	ldr	r3, [pc, #368]	; (800b36c <perfect_slalom+0x448>)
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b200:	4b5b      	ldr	r3, [pc, #364]	; (800b370 <perfect_slalom+0x44c>)
 800b202:	2202      	movs	r2, #2
 800b204:	701a      	strb	r2, [r3, #0]
					accel_hs = 3000;
 800b206:	4b5b      	ldr	r3, [pc, #364]	; (800b374 <perfect_slalom+0x450>)
 800b208:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800b20c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b20e:	4b5a      	ldr	r3, [pc, #360]	; (800b378 <perfect_slalom+0x454>)
 800b210:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b214:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b216:	4b59      	ldr	r3, [pc, #356]	; (800b37c <perfect_slalom+0x458>)
 800b218:	2207      	movs	r2, #7
 800b21a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b21c:	4b58      	ldr	r3, [pc, #352]	; (800b380 <perfect_slalom+0x45c>)
 800b21e:	2207      	movs	r2, #7
 800b220:	701a      	strb	r2, [r3, #0]

					get_base();
 800b222:	f006 f925 	bl	8011470 <get_base>

					searchD();
 800b226:	f003 fc4f 	bl	800eac8 <searchD>
					HAL_Delay(2000);
 800b22a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b22e:	f7f5 fef5 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b232:	4b53      	ldr	r3, [pc, #332]	; (800b380 <perfect_slalom+0x45c>)
 800b234:	2200      	movs	r2, #0
 800b236:	701a      	strb	r2, [r3, #0]
 800b238:	4b51      	ldr	r3, [pc, #324]	; (800b380 <perfect_slalom+0x45c>)
 800b23a:	781a      	ldrb	r2, [r3, #0]
 800b23c:	4b4f      	ldr	r3, [pc, #316]	; (800b37c <perfect_slalom+0x458>)
 800b23e:	701a      	strb	r2, [r3, #0]
					searchD();
 800b240:	f003 fc42 	bl	800eac8 <searchD>

					goal_x = 7;
 800b244:	4b4d      	ldr	r3, [pc, #308]	; (800b37c <perfect_slalom+0x458>)
 800b246:	2207      	movs	r2, #7
 800b248:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b24a:	4b4d      	ldr	r3, [pc, #308]	; (800b380 <perfect_slalom+0x45c>)
 800b24c:	2207      	movs	r2, #7
 800b24e:	701a      	strb	r2, [r3, #0]
					break;
 800b250:	e084      	b.n	800b35c <perfect_slalom+0x438>

				case 5:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800b252:	4843      	ldr	r0, [pc, #268]	; (800b360 <perfect_slalom+0x43c>)
 800b254:	f006 ffa6 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800b258:	4a42      	ldr	r2, [pc, #264]	; (800b364 <perfect_slalom+0x440>)
 800b25a:	8813      	ldrh	r3, [r2, #0]
 800b25c:	f043 0320 	orr.w	r3, r3, #32
 800b260:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b262:	4a40      	ldr	r2, [pc, #256]	; (800b364 <perfect_slalom+0x440>)
 800b264:	8813      	ldrh	r3, [r2, #0]
 800b266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b26a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b26c:	4a3d      	ldr	r2, [pc, #244]	; (800b364 <perfect_slalom+0x440>)
 800b26e:	8813      	ldrh	r3, [r2, #0]
 800b270:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b274:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b276:	4b3c      	ldr	r3, [pc, #240]	; (800b368 <perfect_slalom+0x444>)
 800b278:	2203      	movs	r2, #3
 800b27a:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b27c:	4b3b      	ldr	r3, [pc, #236]	; (800b36c <perfect_slalom+0x448>)
 800b27e:	2200      	movs	r2, #0
 800b280:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b282:	4b3b      	ldr	r3, [pc, #236]	; (800b370 <perfect_slalom+0x44c>)
 800b284:	2202      	movs	r2, #2
 800b286:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800b288:	4b3a      	ldr	r3, [pc, #232]	; (800b374 <perfect_slalom+0x450>)
 800b28a:	f242 7210 	movw	r2, #10000	; 0x2710
 800b28e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800b290:	4b39      	ldr	r3, [pc, #228]	; (800b378 <perfect_slalom+0x454>)
 800b292:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b296:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b298:	4b38      	ldr	r3, [pc, #224]	; (800b37c <perfect_slalom+0x458>)
 800b29a:	2207      	movs	r2, #7
 800b29c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b29e:	4b38      	ldr	r3, [pc, #224]	; (800b380 <perfect_slalom+0x45c>)
 800b2a0:	2207      	movs	r2, #7
 800b2a2:	701a      	strb	r2, [r3, #0]

					get_base();
 800b2a4:	f006 f8e4 	bl	8011470 <get_base>

					searchD();
 800b2a8:	f003 fc0e 	bl	800eac8 <searchD>
					HAL_Delay(2000);
 800b2ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b2b0:	f7f5 feb4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b2b4:	4b32      	ldr	r3, [pc, #200]	; (800b380 <perfect_slalom+0x45c>)
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	701a      	strb	r2, [r3, #0]
 800b2ba:	4b31      	ldr	r3, [pc, #196]	; (800b380 <perfect_slalom+0x45c>)
 800b2bc:	781a      	ldrb	r2, [r3, #0]
 800b2be:	4b2f      	ldr	r3, [pc, #188]	; (800b37c <perfect_slalom+0x458>)
 800b2c0:	701a      	strb	r2, [r3, #0]
					searchD();
 800b2c2:	f003 fc01 	bl	800eac8 <searchD>

					goal_x = 7;
 800b2c6:	4b2d      	ldr	r3, [pc, #180]	; (800b37c <perfect_slalom+0x458>)
 800b2c8:	2207      	movs	r2, #7
 800b2ca:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b2cc:	4b2c      	ldr	r3, [pc, #176]	; (800b380 <perfect_slalom+0x45c>)
 800b2ce:	2207      	movs	r2, #7
 800b2d0:	701a      	strb	r2, [r3, #0]
					break;
 800b2d2:	e043      	b.n	800b35c <perfect_slalom+0x438>

				case 6:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800b2d4:	4822      	ldr	r0, [pc, #136]	; (800b360 <perfect_slalom+0x43c>)
 800b2d6:	f006 ff65 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800b2da:	4a22      	ldr	r2, [pc, #136]	; (800b364 <perfect_slalom+0x440>)
 800b2dc:	8813      	ldrh	r3, [r2, #0]
 800b2de:	f043 0320 	orr.w	r3, r3, #32
 800b2e2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b2e4:	4a1f      	ldr	r2, [pc, #124]	; (800b364 <perfect_slalom+0x440>)
 800b2e6:	8813      	ldrh	r3, [r2, #0]
 800b2e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b2ec:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b2ee:	4a1d      	ldr	r2, [pc, #116]	; (800b364 <perfect_slalom+0x440>)
 800b2f0:	8813      	ldrh	r3, [r2, #0]
 800b2f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b2f6:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b2f8:	4b1b      	ldr	r3, [pc, #108]	; (800b368 <perfect_slalom+0x444>)
 800b2fa:	2203      	movs	r2, #3
 800b2fc:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b2fe:	4b1b      	ldr	r3, [pc, #108]	; (800b36c <perfect_slalom+0x448>)
 800b300:	2200      	movs	r2, #0
 800b302:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b304:	4b1a      	ldr	r3, [pc, #104]	; (800b370 <perfect_slalom+0x44c>)
 800b306:	2202      	movs	r2, #2
 800b308:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800b30a:	4b1a      	ldr	r3, [pc, #104]	; (800b374 <perfect_slalom+0x450>)
 800b30c:	f242 7210 	movw	r2, #10000	; 0x2710
 800b310:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800b312:	4b19      	ldr	r3, [pc, #100]	; (800b378 <perfect_slalom+0x454>)
 800b314:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b318:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800b31a:	4b18      	ldr	r3, [pc, #96]	; (800b37c <perfect_slalom+0x458>)
 800b31c:	2207      	movs	r2, #7
 800b31e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b320:	4b17      	ldr	r3, [pc, #92]	; (800b380 <perfect_slalom+0x45c>)
 800b322:	2207      	movs	r2, #7
 800b324:	701a      	strb	r2, [r3, #0]

					get_base();
 800b326:	f006 f8a3 	bl	8011470 <get_base>

					searchD();
 800b32a:	f003 fbcd 	bl	800eac8 <searchD>
					HAL_Delay(2000);
 800b32e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b332:	f7f5 fe73 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b336:	4b12      	ldr	r3, [pc, #72]	; (800b380 <perfect_slalom+0x45c>)
 800b338:	2200      	movs	r2, #0
 800b33a:	701a      	strb	r2, [r3, #0]
 800b33c:	4b10      	ldr	r3, [pc, #64]	; (800b380 <perfect_slalom+0x45c>)
 800b33e:	781a      	ldrb	r2, [r3, #0]
 800b340:	4b0e      	ldr	r3, [pc, #56]	; (800b37c <perfect_slalom+0x458>)
 800b342:	701a      	strb	r2, [r3, #0]
					searchD();
 800b344:	f003 fbc0 	bl	800eac8 <searchD>

					goal_x = 7;
 800b348:	4b0c      	ldr	r3, [pc, #48]	; (800b37c <perfect_slalom+0x458>)
 800b34a:	2207      	movs	r2, #7
 800b34c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b34e:	4b0c      	ldr	r3, [pc, #48]	; (800b380 <perfect_slalom+0x45c>)
 800b350:	2207      	movs	r2, #7
 800b352:	701a      	strb	r2, [r3, #0]
					break;
 800b354:	e002      	b.n	800b35c <perfect_slalom+0x438>

				case 7:
					perfect_pass();
 800b356:	f000 f815 	bl	800b384 <perfect_pass>
					break;
 800b35a:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b35c:	e5eb      	b.n	800af36 <perfect_slalom+0x12>
 800b35e:	bf00      	nop
 800b360:	08013608 	.word	0x08013608
 800b364:	20000f68 	.word	0x20000f68
 800b368:	20000456 	.word	0x20000456
 800b36c:	200015c8 	.word	0x200015c8
 800b370:	20000bb1 	.word	0x20000bb1
 800b374:	20000454 	.word	0x20000454
 800b378:	20000f7c 	.word	0x20000f7c
 800b37c:	20000bb0 	.word	0x20000bb0
 800b380:	20000b4c 	.word	0x20000b4c

0800b384 <perfect_pass>:
//perfect_pass
// a本番用pass圧縮走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_pass(void){
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0

	int mode = 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	607b      	str	r3, [r7, #4]
	printf("Perfect Pass Press, Mode : %d\n", mode);
 800b38e:	6879      	ldr	r1, [r7, #4]
 800b390:	48a0      	ldr	r0, [pc, #640]	; (800b614 <perfect_pass+0x290>)
 800b392:	f006 fe93 	bl	80120bc <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	f003 0301 	and.w	r3, r3, #1
 800b39e:	b2d8      	uxtb	r0, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	f003 0302 	and.w	r3, r3, #2
 800b3a8:	b2d9      	uxtb	r1, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	f003 0304 	and.w	r3, r3, #4
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	f006 f8b3 	bl	8011520 <led_write>
		  if(dist_r >= 20){
 800b3ba:	4b97      	ldr	r3, [pc, #604]	; (800b618 <perfect_pass+0x294>)
 800b3bc:	edd3 7a00 	vldr	s15, [r3]
 800b3c0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b3c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3cc:	db0f      	blt.n	800b3ee <perfect_pass+0x6a>
			  mode++;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b3d4:	4b90      	ldr	r3, [pc, #576]	; (800b618 <perfect_pass+0x294>)
 800b3d6:	f04f 0200 	mov.w	r2, #0
 800b3da:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b07      	cmp	r3, #7
 800b3e0:	dd01      	ble.n	800b3e6 <perfect_pass+0x62>
				  mode = 0;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b3e6:	6879      	ldr	r1, [r7, #4]
 800b3e8:	488c      	ldr	r0, [pc, #560]	; (800b61c <perfect_pass+0x298>)
 800b3ea:	f006 fe67 	bl	80120bc <iprintf>
		  }
		  if(dist_r <= -20){
 800b3ee:	4b8a      	ldr	r3, [pc, #552]	; (800b618 <perfect_pass+0x294>)
 800b3f0:	edd3 7a00 	vldr	s15, [r3]
 800b3f4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b3f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b400:	d80f      	bhi.n	800b422 <perfect_pass+0x9e>
			  mode--;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	3b01      	subs	r3, #1
 800b406:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b408:	4b83      	ldr	r3, [pc, #524]	; (800b618 <perfect_pass+0x294>)
 800b40a:	f04f 0200 	mov.w	r2, #0
 800b40e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	da01      	bge.n	800b41a <perfect_pass+0x96>
				  mode = 7;
 800b416:	2307      	movs	r3, #7
 800b418:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b41a:	6879      	ldr	r1, [r7, #4]
 800b41c:	487f      	ldr	r0, [pc, #508]	; (800b61c <perfect_pass+0x298>)
 800b41e:	f006 fe4d 	bl	80120bc <iprintf>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800b422:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b426:	487e      	ldr	r0, [pc, #504]	; (800b620 <perfect_pass+0x29c>)
 800b428:	f7f6 ff54 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1b1      	bne.n	800b396 <perfect_pass+0x12>
			  HAL_Delay(50);
 800b432:	2032      	movs	r0, #50	; 0x32
 800b434:	f7f5 fdf2 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800b438:	bf00      	nop
 800b43a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b43e:	4878      	ldr	r0, [pc, #480]	; (800b620 <perfect_pass+0x29c>)
 800b440:	f7f6 ff48 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b444:	4603      	mov	r3, r0
 800b446:	2b00      	cmp	r3, #0
 800b448:	d0f7      	beq.n	800b43a <perfect_pass+0xb6>
			  drive_ready();
 800b44a:	f7f9 fc19 	bl	8004c80 <drive_ready>

			  switch(mode){
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2b07      	cmp	r3, #7
 800b452:	d8a0      	bhi.n	800b396 <perfect_pass+0x12>
 800b454:	a201      	add	r2, pc, #4	; (adr r2, 800b45c <perfect_pass+0xd8>)
 800b456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b45a:	bf00      	nop
 800b45c:	0800b397 	.word	0x0800b397
 800b460:	0800b47d 	.word	0x0800b47d
 800b464:	0800b501 	.word	0x0800b501
 800b468:	0800b58b 	.word	0x0800b58b
 800b46c:	0800b655 	.word	0x0800b655
 800b470:	0800b6dd 	.word	0x0800b6dd
 800b474:	0800b78d 	.word	0x0800b78d
 800b478:	0800ba39 	.word	0x0800ba39
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800b47c:	4869      	ldr	r0, [pc, #420]	; (800b624 <perfect_pass+0x2a0>)
 800b47e:	f006 fe91 	bl	80121a4 <puts>
					MF.FLAG.SCND = 0;
 800b482:	4a69      	ldr	r2, [pc, #420]	; (800b628 <perfect_pass+0x2a4>)
 800b484:	8813      	ldrh	r3, [r2, #0]
 800b486:	f36f 1345 	bfc	r3, #5, #1
 800b48a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b48c:	4a66      	ldr	r2, [pc, #408]	; (800b628 <perfect_pass+0x2a4>)
 800b48e:	8813      	ldrh	r3, [r2, #0]
 800b490:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b494:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b496:	4a64      	ldr	r2, [pc, #400]	; (800b628 <perfect_pass+0x2a4>)
 800b498:	8813      	ldrh	r3, [r2, #0]
 800b49a:	f36f 238a 	bfc	r3, #10, #1
 800b49e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b4a0:	4b62      	ldr	r3, [pc, #392]	; (800b62c <perfect_pass+0x2a8>)
 800b4a2:	2202      	movs	r2, #2
 800b4a4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b4a6:	4b62      	ldr	r3, [pc, #392]	; (800b630 <perfect_pass+0x2ac>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b4ac:	4b61      	ldr	r3, [pc, #388]	; (800b634 <perfect_pass+0x2b0>)
 800b4ae:	2202      	movs	r2, #2
 800b4b0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b4b2:	4b61      	ldr	r3, [pc, #388]	; (800b638 <perfect_pass+0x2b4>)
 800b4b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4b8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800b4ba:	4b60      	ldr	r3, [pc, #384]	; (800b63c <perfect_pass+0x2b8>)
 800b4bc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b4c0:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800b4c2:	4b5f      	ldr	r3, [pc, #380]	; (800b640 <perfect_pass+0x2bc>)
 800b4c4:	2207      	movs	r2, #7
 800b4c6:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b4c8:	4b5e      	ldr	r3, [pc, #376]	; (800b644 <perfect_pass+0x2c0>)
 800b4ca:	2207      	movs	r2, #7
 800b4cc:	701a      	strb	r2, [r3, #0]

					get_base();
 800b4ce:	f005 ffcf 	bl	8011470 <get_base>

					searchC();
 800b4d2:	f003 f819 	bl	800e508 <searchC>
					HAL_Delay(2000);
 800b4d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b4da:	f7f5 fd9f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b4de:	4b59      	ldr	r3, [pc, #356]	; (800b644 <perfect_pass+0x2c0>)
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	701a      	strb	r2, [r3, #0]
 800b4e4:	4b57      	ldr	r3, [pc, #348]	; (800b644 <perfect_pass+0x2c0>)
 800b4e6:	781a      	ldrb	r2, [r3, #0]
 800b4e8:	4b55      	ldr	r3, [pc, #340]	; (800b640 <perfect_pass+0x2bc>)
 800b4ea:	701a      	strb	r2, [r3, #0]
					searchC();
 800b4ec:	f003 f80c 	bl	800e508 <searchC>

					goal_x = 7;
 800b4f0:	4b53      	ldr	r3, [pc, #332]	; (800b640 <perfect_pass+0x2bc>)
 800b4f2:	2207      	movs	r2, #7
 800b4f4:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b4f6:	4b53      	ldr	r3, [pc, #332]	; (800b644 <perfect_pass+0x2c0>)
 800b4f8:	2207      	movs	r2, #7
 800b4fa:	701a      	strb	r2, [r3, #0]
					break;
 800b4fc:	f000 bc4c 	b.w	800bd98 <perfect_pass+0xa14>

				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 800b500:	4851      	ldr	r0, [pc, #324]	; (800b648 <perfect_pass+0x2c4>)
 800b502:	f006 fe4f 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800b506:	4a48      	ldr	r2, [pc, #288]	; (800b628 <perfect_pass+0x2a4>)
 800b508:	8813      	ldrh	r3, [r2, #0]
 800b50a:	f043 0320 	orr.w	r3, r3, #32
 800b50e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b510:	4a45      	ldr	r2, [pc, #276]	; (800b628 <perfect_pass+0x2a4>)
 800b512:	8813      	ldrh	r3, [r2, #0]
 800b514:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b518:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b51a:	4a43      	ldr	r2, [pc, #268]	; (800b628 <perfect_pass+0x2a4>)
 800b51c:	8813      	ldrh	r3, [r2, #0]
 800b51e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b522:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b524:	4b41      	ldr	r3, [pc, #260]	; (800b62c <perfect_pass+0x2a8>)
 800b526:	2202      	movs	r2, #2
 800b528:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b52a:	4b41      	ldr	r3, [pc, #260]	; (800b630 <perfect_pass+0x2ac>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800b530:	4b40      	ldr	r3, [pc, #256]	; (800b634 <perfect_pass+0x2b0>)
 800b532:	2201      	movs	r2, #1
 800b534:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b536:	4b40      	ldr	r3, [pc, #256]	; (800b638 <perfect_pass+0x2b4>)
 800b538:	f241 3288 	movw	r2, #5000	; 0x1388
 800b53c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800b53e:	4b3f      	ldr	r3, [pc, #252]	; (800b63c <perfect_pass+0x2b8>)
 800b540:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b544:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800b546:	4b41      	ldr	r3, [pc, #260]	; (800b64c <perfect_pass+0x2c8>)
 800b548:	2203      	movs	r2, #3
 800b54a:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800b54c:	4b3c      	ldr	r3, [pc, #240]	; (800b640 <perfect_pass+0x2bc>)
 800b54e:	2207      	movs	r2, #7
 800b550:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b552:	4b3c      	ldr	r3, [pc, #240]	; (800b644 <perfect_pass+0x2c0>)
 800b554:	2207      	movs	r2, #7
 800b556:	701a      	strb	r2, [r3, #0]

					get_base();
 800b558:	f005 ff8a 	bl	8011470 <get_base>

					searchF3();
 800b55c:	f003 fc4a 	bl	800edf4 <searchF3>
					HAL_Delay(2000);
 800b560:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b564:	f7f5 fd5a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b568:	4b36      	ldr	r3, [pc, #216]	; (800b644 <perfect_pass+0x2c0>)
 800b56a:	2200      	movs	r2, #0
 800b56c:	701a      	strb	r2, [r3, #0]
 800b56e:	4b35      	ldr	r3, [pc, #212]	; (800b644 <perfect_pass+0x2c0>)
 800b570:	781a      	ldrb	r2, [r3, #0]
 800b572:	4b33      	ldr	r3, [pc, #204]	; (800b640 <perfect_pass+0x2bc>)
 800b574:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b576:	f003 fc3d 	bl	800edf4 <searchF3>

					goal_x = 7;
 800b57a:	4b31      	ldr	r3, [pc, #196]	; (800b640 <perfect_pass+0x2bc>)
 800b57c:	2207      	movs	r2, #7
 800b57e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b580:	4b30      	ldr	r3, [pc, #192]	; (800b644 <perfect_pass+0x2c0>)
 800b582:	2207      	movs	r2, #7
 800b584:	701a      	strb	r2, [r3, #0]
					break;
 800b586:	f000 bc07 	b.w	800bd98 <perfect_pass+0xa14>
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 800b58a:	4831      	ldr	r0, [pc, #196]	; (800b650 <perfect_pass+0x2cc>)
 800b58c:	f006 fe0a 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800b590:	4a25      	ldr	r2, [pc, #148]	; (800b628 <perfect_pass+0x2a4>)
 800b592:	8813      	ldrh	r3, [r2, #0]
 800b594:	f043 0320 	orr.w	r3, r3, #32
 800b598:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b59a:	4a23      	ldr	r2, [pc, #140]	; (800b628 <perfect_pass+0x2a4>)
 800b59c:	8813      	ldrh	r3, [r2, #0]
 800b59e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b5a2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b5a4:	4a20      	ldr	r2, [pc, #128]	; (800b628 <perfect_pass+0x2a4>)
 800b5a6:	8813      	ldrh	r3, [r2, #0]
 800b5a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b5ac:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b5ae:	4b1f      	ldr	r3, [pc, #124]	; (800b62c <perfect_pass+0x2a8>)
 800b5b0:	2203      	movs	r2, #3
 800b5b2:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800b5b4:	4b1f      	ldr	r3, [pc, #124]	; (800b634 <perfect_pass+0x2b0>)
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b5ba:	4b1d      	ldr	r3, [pc, #116]	; (800b630 <perfect_pass+0x2ac>)
 800b5bc:	2200      	movs	r2, #0
 800b5be:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b5c0:	4b1d      	ldr	r3, [pc, #116]	; (800b638 <perfect_pass+0x2b4>)
 800b5c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5c6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b5c8:	4b1c      	ldr	r3, [pc, #112]	; (800b63c <perfect_pass+0x2b8>)
 800b5ca:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b5ce:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800b5d0:	4b1e      	ldr	r3, [pc, #120]	; (800b64c <perfect_pass+0x2c8>)
 800b5d2:	2203      	movs	r2, #3
 800b5d4:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800b5d6:	4b1a      	ldr	r3, [pc, #104]	; (800b640 <perfect_pass+0x2bc>)
 800b5d8:	2207      	movs	r2, #7
 800b5da:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b5dc:	4b19      	ldr	r3, [pc, #100]	; (800b644 <perfect_pass+0x2c0>)
 800b5de:	2207      	movs	r2, #7
 800b5e0:	701a      	strb	r2, [r3, #0]

					get_base();
 800b5e2:	f005 ff45 	bl	8011470 <get_base>

					searchF3();
 800b5e6:	f003 fc05 	bl	800edf4 <searchF3>
					HAL_Delay(2000);
 800b5ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b5ee:	f7f5 fd15 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b5f2:	4b14      	ldr	r3, [pc, #80]	; (800b644 <perfect_pass+0x2c0>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	701a      	strb	r2, [r3, #0]
 800b5f8:	4b12      	ldr	r3, [pc, #72]	; (800b644 <perfect_pass+0x2c0>)
 800b5fa:	781a      	ldrb	r2, [r3, #0]
 800b5fc:	4b10      	ldr	r3, [pc, #64]	; (800b640 <perfect_pass+0x2bc>)
 800b5fe:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b600:	f003 fbf8 	bl	800edf4 <searchF3>

					goal_x = 7;
 800b604:	4b0e      	ldr	r3, [pc, #56]	; (800b640 <perfect_pass+0x2bc>)
 800b606:	2207      	movs	r2, #7
 800b608:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b60a:	4b0e      	ldr	r3, [pc, #56]	; (800b644 <perfect_pass+0x2c0>)
 800b60c:	2207      	movs	r2, #7
 800b60e:	701a      	strb	r2, [r3, #0]
					break;
 800b610:	e3c2      	b.n	800bd98 <perfect_pass+0xa14>
 800b612:	bf00      	nop
 800b614:	0801368c 	.word	0x0801368c
 800b618:	20000aec 	.word	0x20000aec
 800b61c:	080132f8 	.word	0x080132f8
 800b620:	40020000 	.word	0x40020000
 800b624:	080135b0 	.word	0x080135b0
 800b628:	20000f68 	.word	0x20000f68
 800b62c:	20000456 	.word	0x20000456
 800b630:	200015c8 	.word	0x200015c8
 800b634:	20000bb1 	.word	0x20000bb1
 800b638:	20000454 	.word	0x20000454
 800b63c:	20000f7c 	.word	0x20000f7c
 800b640:	20000bb0 	.word	0x20000bb0
 800b644:	20000b4c 	.word	0x20000b4c
 800b648:	080134ec 	.word	0x080134ec
 800b64c:	20000457 	.word	0x20000457
 800b650:	080134fc 	.word	0x080134fc
				case 4:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800b654:	4843      	ldr	r0, [pc, #268]	; (800b764 <perfect_pass+0x3e0>)
 800b656:	f006 fda5 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800b65a:	4a43      	ldr	r2, [pc, #268]	; (800b768 <perfect_pass+0x3e4>)
 800b65c:	8813      	ldrh	r3, [r2, #0]
 800b65e:	f043 0320 	orr.w	r3, r3, #32
 800b662:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b664:	4a40      	ldr	r2, [pc, #256]	; (800b768 <perfect_pass+0x3e4>)
 800b666:	8813      	ldrh	r3, [r2, #0]
 800b668:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b66c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b66e:	4a3e      	ldr	r2, [pc, #248]	; (800b768 <perfect_pass+0x3e4>)
 800b670:	8813      	ldrh	r3, [r2, #0]
 800b672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b676:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b678:	4b3c      	ldr	r3, [pc, #240]	; (800b76c <perfect_pass+0x3e8>)
 800b67a:	2202      	movs	r2, #2
 800b67c:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b67e:	4b3c      	ldr	r3, [pc, #240]	; (800b770 <perfect_pass+0x3ec>)
 800b680:	2200      	movs	r2, #0
 800b682:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b684:	4b3b      	ldr	r3, [pc, #236]	; (800b774 <perfect_pass+0x3f0>)
 800b686:	2202      	movs	r2, #2
 800b688:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b68a:	4b3b      	ldr	r3, [pc, #236]	; (800b778 <perfect_pass+0x3f4>)
 800b68c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b690:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800b692:	4b3a      	ldr	r3, [pc, #232]	; (800b77c <perfect_pass+0x3f8>)
 800b694:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b698:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800b69a:	4b39      	ldr	r3, [pc, #228]	; (800b780 <perfect_pass+0x3fc>)
 800b69c:	2204      	movs	r2, #4
 800b69e:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800b6a0:	4b38      	ldr	r3, [pc, #224]	; (800b784 <perfect_pass+0x400>)
 800b6a2:	2207      	movs	r2, #7
 800b6a4:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b6a6:	4b38      	ldr	r3, [pc, #224]	; (800b788 <perfect_pass+0x404>)
 800b6a8:	2207      	movs	r2, #7
 800b6aa:	701a      	strb	r2, [r3, #0]

					get_base();
 800b6ac:	f005 fee0 	bl	8011470 <get_base>

					searchF4();
 800b6b0:	f003 fc76 	bl	800efa0 <searchF4>
					HAL_Delay(2000);
 800b6b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b6b8:	f7f5 fcb0 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b6bc:	4b32      	ldr	r3, [pc, #200]	; (800b788 <perfect_pass+0x404>)
 800b6be:	2200      	movs	r2, #0
 800b6c0:	701a      	strb	r2, [r3, #0]
 800b6c2:	4b31      	ldr	r3, [pc, #196]	; (800b788 <perfect_pass+0x404>)
 800b6c4:	781a      	ldrb	r2, [r3, #0]
 800b6c6:	4b2f      	ldr	r3, [pc, #188]	; (800b784 <perfect_pass+0x400>)
 800b6c8:	701a      	strb	r2, [r3, #0]
					searchF4();
 800b6ca:	f003 fc69 	bl	800efa0 <searchF4>

					goal_x = 7;
 800b6ce:	4b2d      	ldr	r3, [pc, #180]	; (800b784 <perfect_pass+0x400>)
 800b6d0:	2207      	movs	r2, #7
 800b6d2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b6d4:	4b2c      	ldr	r3, [pc, #176]	; (800b788 <perfect_pass+0x404>)
 800b6d6:	2207      	movs	r2, #7
 800b6d8:	701a      	strb	r2, [r3, #0]
					break;
 800b6da:	e35d      	b.n	800bd98 <perfect_pass+0xa14>

				case 5:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800b6dc:	4821      	ldr	r0, [pc, #132]	; (800b764 <perfect_pass+0x3e0>)
 800b6de:	f006 fd61 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800b6e2:	4a21      	ldr	r2, [pc, #132]	; (800b768 <perfect_pass+0x3e4>)
 800b6e4:	8813      	ldrh	r3, [r2, #0]
 800b6e6:	f043 0320 	orr.w	r3, r3, #32
 800b6ea:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b6ec:	4a1e      	ldr	r2, [pc, #120]	; (800b768 <perfect_pass+0x3e4>)
 800b6ee:	8813      	ldrh	r3, [r2, #0]
 800b6f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b6f4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b6f6:	4a1c      	ldr	r2, [pc, #112]	; (800b768 <perfect_pass+0x3e4>)
 800b6f8:	8813      	ldrh	r3, [r2, #0]
 800b6fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b6fe:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b700:	4b1a      	ldr	r3, [pc, #104]	; (800b76c <perfect_pass+0x3e8>)
 800b702:	2203      	movs	r2, #3
 800b704:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b706:	4b1a      	ldr	r3, [pc, #104]	; (800b770 <perfect_pass+0x3ec>)
 800b708:	2200      	movs	r2, #0
 800b70a:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b70c:	4b19      	ldr	r3, [pc, #100]	; (800b774 <perfect_pass+0x3f0>)
 800b70e:	2202      	movs	r2, #2
 800b710:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b712:	4b19      	ldr	r3, [pc, #100]	; (800b778 <perfect_pass+0x3f4>)
 800b714:	f241 3288 	movw	r2, #5000	; 0x1388
 800b718:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b71a:	4b18      	ldr	r3, [pc, #96]	; (800b77c <perfect_pass+0x3f8>)
 800b71c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b720:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800b722:	4b17      	ldr	r3, [pc, #92]	; (800b780 <perfect_pass+0x3fc>)
 800b724:	2204      	movs	r2, #4
 800b726:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800b728:	4b16      	ldr	r3, [pc, #88]	; (800b784 <perfect_pass+0x400>)
 800b72a:	2207      	movs	r2, #7
 800b72c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b72e:	4b16      	ldr	r3, [pc, #88]	; (800b788 <perfect_pass+0x404>)
 800b730:	2207      	movs	r2, #7
 800b732:	701a      	strb	r2, [r3, #0]

					get_base();
 800b734:	f005 fe9c 	bl	8011470 <get_base>

					searchF4();
 800b738:	f003 fc32 	bl	800efa0 <searchF4>
					HAL_Delay(2000);
 800b73c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b740:	f7f5 fc6c 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b744:	4b10      	ldr	r3, [pc, #64]	; (800b788 <perfect_pass+0x404>)
 800b746:	2200      	movs	r2, #0
 800b748:	701a      	strb	r2, [r3, #0]
 800b74a:	4b0f      	ldr	r3, [pc, #60]	; (800b788 <perfect_pass+0x404>)
 800b74c:	781a      	ldrb	r2, [r3, #0]
 800b74e:	4b0d      	ldr	r3, [pc, #52]	; (800b784 <perfect_pass+0x400>)
 800b750:	701a      	strb	r2, [r3, #0]
					searchF4();
 800b752:	f003 fc25 	bl	800efa0 <searchF4>

					goal_x = 7;
 800b756:	4b0b      	ldr	r3, [pc, #44]	; (800b784 <perfect_pass+0x400>)
 800b758:	2207      	movs	r2, #7
 800b75a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800b75c:	4b0a      	ldr	r3, [pc, #40]	; (800b788 <perfect_pass+0x404>)
 800b75e:	2207      	movs	r2, #7
 800b760:	701a      	strb	r2, [r3, #0]
					break;
 800b762:	e319      	b.n	800bd98 <perfect_pass+0xa14>
 800b764:	0801350c 	.word	0x0801350c
 800b768:	20000f68 	.word	0x20000f68
 800b76c:	20000456 	.word	0x20000456
 800b770:	200015c8 	.word	0x200015c8
 800b774:	20000bb1 	.word	0x20000bb1
 800b778:	20000454 	.word	0x20000454
 800b77c:	20000f7c 	.word	0x20000f7c
 800b780:	20000457 	.word	0x20000457
 800b784:	20000bb0 	.word	0x20000bb0
 800b788:	20000b4c 	.word	0x20000b4c
				case 6:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800b78c:	489d      	ldr	r0, [pc, #628]	; (800ba04 <perfect_pass+0x680>)
 800b78e:	f006 fd09 	bl	80121a4 <puts>
					MF.FLAG.SCND = 0;
 800b792:	4a9d      	ldr	r2, [pc, #628]	; (800ba08 <perfect_pass+0x684>)
 800b794:	8813      	ldrh	r3, [r2, #0]
 800b796:	f36f 1345 	bfc	r3, #5, #1
 800b79a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b79c:	4a9a      	ldr	r2, [pc, #616]	; (800ba08 <perfect_pass+0x684>)
 800b79e:	8813      	ldrh	r3, [r2, #0]
 800b7a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b7a4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800b7a6:	4a98      	ldr	r2, [pc, #608]	; (800ba08 <perfect_pass+0x684>)
 800b7a8:	8813      	ldrh	r3, [r2, #0]
 800b7aa:	f36f 238a 	bfc	r3, #10, #1
 800b7ae:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b7b0:	4b96      	ldr	r3, [pc, #600]	; (800ba0c <perfect_pass+0x688>)
 800b7b2:	2202      	movs	r2, #2
 800b7b4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b7b6:	4b96      	ldr	r3, [pc, #600]	; (800ba10 <perfect_pass+0x68c>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b7bc:	4b95      	ldr	r3, [pc, #596]	; (800ba14 <perfect_pass+0x690>)
 800b7be:	2202      	movs	r2, #2
 800b7c0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b7c2:	4b95      	ldr	r3, [pc, #596]	; (800ba18 <perfect_pass+0x694>)
 800b7c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7c8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800b7ca:	4b94      	ldr	r3, [pc, #592]	; (800ba1c <perfect_pass+0x698>)
 800b7cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b7d0:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800b7d2:	4b93      	ldr	r3, [pc, #588]	; (800ba20 <perfect_pass+0x69c>)
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b7d8:	4b92      	ldr	r3, [pc, #584]	; (800ba24 <perfect_pass+0x6a0>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	701a      	strb	r2, [r3, #0]

					get_base();
 800b7de:	f005 fe47 	bl	8011470 <get_base>

					searchC();
 800b7e2:	f002 fe91 	bl	800e508 <searchC>
					HAL_Delay(2000);
 800b7e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b7ea:	f7f5 fc17 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b7ee:	4b8d      	ldr	r3, [pc, #564]	; (800ba24 <perfect_pass+0x6a0>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	701a      	strb	r2, [r3, #0]
 800b7f4:	4b8b      	ldr	r3, [pc, #556]	; (800ba24 <perfect_pass+0x6a0>)
 800b7f6:	781a      	ldrb	r2, [r3, #0]
 800b7f8:	4b89      	ldr	r3, [pc, #548]	; (800ba20 <perfect_pass+0x69c>)
 800b7fa:	701a      	strb	r2, [r3, #0]
					searchC();
 800b7fc:	f002 fe84 	bl	800e508 <searchC>

					degree_z = target_degree_z;
 800b800:	4b89      	ldr	r3, [pc, #548]	; (800ba28 <perfect_pass+0x6a4>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a89      	ldr	r2, [pc, #548]	; (800ba2c <perfect_pass+0x6a8>)
 800b806:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800b808:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b80c:	f7f5 fc06 	bl	800101c <HAL_Delay>


					//----a二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 800b810:	4887      	ldr	r0, [pc, #540]	; (800ba30 <perfect_pass+0x6ac>)
 800b812:	f006 fcc7 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800b816:	4a7c      	ldr	r2, [pc, #496]	; (800ba08 <perfect_pass+0x684>)
 800b818:	8813      	ldrh	r3, [r2, #0]
 800b81a:	f043 0320 	orr.w	r3, r3, #32
 800b81e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b820:	4a79      	ldr	r2, [pc, #484]	; (800ba08 <perfect_pass+0x684>)
 800b822:	8813      	ldrh	r3, [r2, #0]
 800b824:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b828:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b82a:	4a77      	ldr	r2, [pc, #476]	; (800ba08 <perfect_pass+0x684>)
 800b82c:	8813      	ldrh	r3, [r2, #0]
 800b82e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b832:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800b834:	4b75      	ldr	r3, [pc, #468]	; (800ba0c <perfect_pass+0x688>)
 800b836:	2202      	movs	r2, #2
 800b838:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b83a:	4b75      	ldr	r3, [pc, #468]	; (800ba10 <perfect_pass+0x68c>)
 800b83c:	2200      	movs	r2, #0
 800b83e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b840:	4b74      	ldr	r3, [pc, #464]	; (800ba14 <perfect_pass+0x690>)
 800b842:	2202      	movs	r2, #2
 800b844:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b846:	4b74      	ldr	r3, [pc, #464]	; (800ba18 <perfect_pass+0x694>)
 800b848:	f241 3288 	movw	r2, #5000	; 0x1388
 800b84c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b84e:	4b73      	ldr	r3, [pc, #460]	; (800ba1c <perfect_pass+0x698>)
 800b850:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b854:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b856:	4b72      	ldr	r3, [pc, #456]	; (800ba20 <perfect_pass+0x69c>)
 800b858:	2201      	movs	r2, #1
 800b85a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b85c:	4b71      	ldr	r3, [pc, #452]	; (800ba24 <perfect_pass+0x6a0>)
 800b85e:	2200      	movs	r2, #0
 800b860:	701a      	strb	r2, [r3, #0]

					searchD();
 800b862:	f003 f931 	bl	800eac8 <searchD>
					HAL_Delay(2000);
 800b866:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b86a:	f7f5 fbd7 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b86e:	4b6d      	ldr	r3, [pc, #436]	; (800ba24 <perfect_pass+0x6a0>)
 800b870:	2200      	movs	r2, #0
 800b872:	701a      	strb	r2, [r3, #0]
 800b874:	4b6b      	ldr	r3, [pc, #428]	; (800ba24 <perfect_pass+0x6a0>)
 800b876:	781a      	ldrb	r2, [r3, #0]
 800b878:	4b69      	ldr	r3, [pc, #420]	; (800ba20 <perfect_pass+0x69c>)
 800b87a:	701a      	strb	r2, [r3, #0]
					searchD();
 800b87c:	f003 f924 	bl	800eac8 <searchD>

					degree_z = target_degree_z;
 800b880:	4b69      	ldr	r3, [pc, #420]	; (800ba28 <perfect_pass+0x6a4>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a69      	ldr	r2, [pc, #420]	; (800ba2c <perfect_pass+0x6a8>)
 800b886:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800b888:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b88c:	f7f5 fbc6 	bl	800101c <HAL_Delay>
					degree_z = target_degree_z;
					HAL_Delay(2000);

*/
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800b890:	4868      	ldr	r0, [pc, #416]	; (800ba34 <perfect_pass+0x6b0>)
 800b892:	f006 fc87 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800b896:	4a5c      	ldr	r2, [pc, #368]	; (800ba08 <perfect_pass+0x684>)
 800b898:	8813      	ldrh	r3, [r2, #0]
 800b89a:	f043 0320 	orr.w	r3, r3, #32
 800b89e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b8a0:	4a59      	ldr	r2, [pc, #356]	; (800ba08 <perfect_pass+0x684>)
 800b8a2:	8813      	ldrh	r3, [r2, #0]
 800b8a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b8a8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b8aa:	4a57      	ldr	r2, [pc, #348]	; (800ba08 <perfect_pass+0x684>)
 800b8ac:	8813      	ldrh	r3, [r2, #0]
 800b8ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b8b2:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b8b4:	4b55      	ldr	r3, [pc, #340]	; (800ba0c <perfect_pass+0x688>)
 800b8b6:	2203      	movs	r2, #3
 800b8b8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b8ba:	4b55      	ldr	r3, [pc, #340]	; (800ba10 <perfect_pass+0x68c>)
 800b8bc:	2200      	movs	r2, #0
 800b8be:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b8c0:	4b54      	ldr	r3, [pc, #336]	; (800ba14 <perfect_pass+0x690>)
 800b8c2:	2202      	movs	r2, #2
 800b8c4:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800b8c6:	4b54      	ldr	r3, [pc, #336]	; (800ba18 <perfect_pass+0x694>)
 800b8c8:	f242 7210 	movw	r2, #10000	; 0x2710
 800b8cc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b8ce:	4b53      	ldr	r3, [pc, #332]	; (800ba1c <perfect_pass+0x698>)
 800b8d0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b8d4:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b8d6:	4b52      	ldr	r3, [pc, #328]	; (800ba20 <perfect_pass+0x69c>)
 800b8d8:	2201      	movs	r2, #1
 800b8da:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b8dc:	4b51      	ldr	r3, [pc, #324]	; (800ba24 <perfect_pass+0x6a0>)
 800b8de:	2200      	movs	r2, #0
 800b8e0:	701a      	strb	r2, [r3, #0]

					searchD();
 800b8e2:	f003 f8f1 	bl	800eac8 <searchD>
					HAL_Delay(2000);
 800b8e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b8ea:	f7f5 fb97 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b8ee:	4b4d      	ldr	r3, [pc, #308]	; (800ba24 <perfect_pass+0x6a0>)
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	701a      	strb	r2, [r3, #0]
 800b8f4:	4b4b      	ldr	r3, [pc, #300]	; (800ba24 <perfect_pass+0x6a0>)
 800b8f6:	781a      	ldrb	r2, [r3, #0]
 800b8f8:	4b49      	ldr	r3, [pc, #292]	; (800ba20 <perfect_pass+0x69c>)
 800b8fa:	701a      	strb	r2, [r3, #0]
					searchD();
 800b8fc:	f003 f8e4 	bl	800eac8 <searchD>

					degree_z = target_degree_z;
 800b900:	4b49      	ldr	r3, [pc, #292]	; (800ba28 <perfect_pass+0x6a4>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a49      	ldr	r2, [pc, #292]	; (800ba2c <perfect_pass+0x6a8>)
 800b906:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800b908:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b90c:	f7f5 fb86 	bl	800101c <HAL_Delay>


					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed2----
					printf("Second Run. (Slalom)\n");
 800b910:	4848      	ldr	r0, [pc, #288]	; (800ba34 <perfect_pass+0x6b0>)
 800b912:	f006 fc47 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800b916:	4a3c      	ldr	r2, [pc, #240]	; (800ba08 <perfect_pass+0x684>)
 800b918:	8813      	ldrh	r3, [r2, #0]
 800b91a:	f043 0320 	orr.w	r3, r3, #32
 800b91e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b920:	4a39      	ldr	r2, [pc, #228]	; (800ba08 <perfect_pass+0x684>)
 800b922:	8813      	ldrh	r3, [r2, #0]
 800b924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b928:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b92a:	4a37      	ldr	r2, [pc, #220]	; (800ba08 <perfect_pass+0x684>)
 800b92c:	8813      	ldrh	r3, [r2, #0]
 800b92e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b932:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b934:	4b35      	ldr	r3, [pc, #212]	; (800ba0c <perfect_pass+0x688>)
 800b936:	2203      	movs	r2, #3
 800b938:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b93a:	4b35      	ldr	r3, [pc, #212]	; (800ba10 <perfect_pass+0x68c>)
 800b93c:	2200      	movs	r2, #0
 800b93e:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b940:	4b34      	ldr	r3, [pc, #208]	; (800ba14 <perfect_pass+0x690>)
 800b942:	2202      	movs	r2, #2
 800b944:	701a      	strb	r2, [r3, #0]
					accel_hs = 10000;
 800b946:	4b34      	ldr	r3, [pc, #208]	; (800ba18 <perfect_pass+0x694>)
 800b948:	f242 7210 	movw	r2, #10000	; 0x2710
 800b94c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800b94e:	4b33      	ldr	r3, [pc, #204]	; (800ba1c <perfect_pass+0x698>)
 800b950:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b954:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b956:	4b32      	ldr	r3, [pc, #200]	; (800ba20 <perfect_pass+0x69c>)
 800b958:	2201      	movs	r2, #1
 800b95a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b95c:	4b31      	ldr	r3, [pc, #196]	; (800ba24 <perfect_pass+0x6a0>)
 800b95e:	2200      	movs	r2, #0
 800b960:	701a      	strb	r2, [r3, #0]

					searchD();
 800b962:	f003 f8b1 	bl	800eac8 <searchD>
					HAL_Delay(2000);
 800b966:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b96a:	f7f5 fb57 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b96e:	4b2d      	ldr	r3, [pc, #180]	; (800ba24 <perfect_pass+0x6a0>)
 800b970:	2200      	movs	r2, #0
 800b972:	701a      	strb	r2, [r3, #0]
 800b974:	4b2b      	ldr	r3, [pc, #172]	; (800ba24 <perfect_pass+0x6a0>)
 800b976:	781a      	ldrb	r2, [r3, #0]
 800b978:	4b29      	ldr	r3, [pc, #164]	; (800ba20 <perfect_pass+0x69c>)
 800b97a:	701a      	strb	r2, [r3, #0]
					searchD();
 800b97c:	f003 f8a4 	bl	800eac8 <searchD>

					degree_z = target_degree_z;
 800b980:	4b29      	ldr	r3, [pc, #164]	; (800ba28 <perfect_pass+0x6a4>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a29      	ldr	r2, [pc, #164]	; (800ba2c <perfect_pass+0x6a8>)
 800b986:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800b988:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b98c:	f7f5 fb46 	bl	800101c <HAL_Delay>


					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed3----
					printf("Second Run. (Slalom)\n");
 800b990:	4828      	ldr	r0, [pc, #160]	; (800ba34 <perfect_pass+0x6b0>)
 800b992:	f006 fc07 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800b996:	4a1c      	ldr	r2, [pc, #112]	; (800ba08 <perfect_pass+0x684>)
 800b998:	8813      	ldrh	r3, [r2, #0]
 800b99a:	f043 0320 	orr.w	r3, r3, #32
 800b99e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b9a0:	4a19      	ldr	r2, [pc, #100]	; (800ba08 <perfect_pass+0x684>)
 800b9a2:	8813      	ldrh	r3, [r2, #0]
 800b9a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b9a8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800b9aa:	4a17      	ldr	r2, [pc, #92]	; (800ba08 <perfect_pass+0x684>)
 800b9ac:	8813      	ldrh	r3, [r2, #0]
 800b9ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b9b2:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800b9b4:	4b15      	ldr	r3, [pc, #84]	; (800ba0c <perfect_pass+0x688>)
 800b9b6:	2203      	movs	r2, #3
 800b9b8:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800b9ba:	4b15      	ldr	r3, [pc, #84]	; (800ba10 <perfect_pass+0x68c>)
 800b9bc:	2200      	movs	r2, #0
 800b9be:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800b9c0:	4b14      	ldr	r3, [pc, #80]	; (800ba14 <perfect_pass+0x690>)
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	701a      	strb	r2, [r3, #0]
					accel_hs = 20000;
 800b9c6:	4b14      	ldr	r3, [pc, #80]	; (800ba18 <perfect_pass+0x694>)
 800b9c8:	f644 6220 	movw	r2, #20000	; 0x4e20
 800b9cc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800b9ce:	4b13      	ldr	r3, [pc, #76]	; (800ba1c <perfect_pass+0x698>)
 800b9d0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b9d4:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800b9d6:	4b12      	ldr	r3, [pc, #72]	; (800ba20 <perfect_pass+0x69c>)
 800b9d8:	2201      	movs	r2, #1
 800b9da:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b9dc:	4b11      	ldr	r3, [pc, #68]	; (800ba24 <perfect_pass+0x6a0>)
 800b9de:	2200      	movs	r2, #0
 800b9e0:	701a      	strb	r2, [r3, #0]

					searchD();
 800b9e2:	f003 f871 	bl	800eac8 <searchD>
					HAL_Delay(2000);
 800b9e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b9ea:	f7f5 fb17 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b9ee:	4b0d      	ldr	r3, [pc, #52]	; (800ba24 <perfect_pass+0x6a0>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	701a      	strb	r2, [r3, #0]
 800b9f4:	4b0b      	ldr	r3, [pc, #44]	; (800ba24 <perfect_pass+0x6a0>)
 800b9f6:	781a      	ldrb	r2, [r3, #0]
 800b9f8:	4b09      	ldr	r3, [pc, #36]	; (800ba20 <perfect_pass+0x69c>)
 800b9fa:	701a      	strb	r2, [r3, #0]
					searchD();
 800b9fc:	f003 f864 	bl	800eac8 <searchD>
					searchF4();

					goal_x = 7;
					goal_y = 7;

*/					break;
 800ba00:	e1ca      	b.n	800bd98 <perfect_pass+0xa14>
 800ba02:	bf00      	nop
 800ba04:	080135b0 	.word	0x080135b0
 800ba08:	20000f68 	.word	0x20000f68
 800ba0c:	20000456 	.word	0x20000456
 800ba10:	200015c8 	.word	0x200015c8
 800ba14:	20000bb1 	.word	0x20000bb1
 800ba18:	20000454 	.word	0x20000454
 800ba1c:	20000f7c 	.word	0x20000f7c
 800ba20:	20000bb0 	.word	0x20000bb0
 800ba24:	20000b4c 	.word	0x20000b4c
 800ba28:	20000bf8 	.word	0x20000bf8
 800ba2c:	20000b5c 	.word	0x20000b5c
 800ba30:	080135d4 	.word	0x080135d4
 800ba34:	08013608 	.word	0x08013608

					break;
				case 7:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800ba38:	48b3      	ldr	r0, [pc, #716]	; (800bd08 <perfect_pass+0x984>)
 800ba3a:	f006 fbb3 	bl	80121a4 <puts>
					MF.FLAG.SCND = 0;
 800ba3e:	4ab3      	ldr	r2, [pc, #716]	; (800bd0c <perfect_pass+0x988>)
 800ba40:	8813      	ldrh	r3, [r2, #0]
 800ba42:	f36f 1345 	bfc	r3, #5, #1
 800ba46:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ba48:	4ab0      	ldr	r2, [pc, #704]	; (800bd0c <perfect_pass+0x988>)
 800ba4a:	8813      	ldrh	r3, [r2, #0]
 800ba4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ba50:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 0;
 800ba52:	4aae      	ldr	r2, [pc, #696]	; (800bd0c <perfect_pass+0x988>)
 800ba54:	8813      	ldrh	r3, [r2, #0]
 800ba56:	f36f 238a 	bfc	r3, #10, #1
 800ba5a:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800ba5c:	4bac      	ldr	r3, [pc, #688]	; (800bd10 <perfect_pass+0x98c>)
 800ba5e:	2202      	movs	r2, #2
 800ba60:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800ba62:	4bac      	ldr	r3, [pc, #688]	; (800bd14 <perfect_pass+0x990>)
 800ba64:	2200      	movs	r2, #0
 800ba66:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800ba68:	4bab      	ldr	r3, [pc, #684]	; (800bd18 <perfect_pass+0x994>)
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800ba6e:	4bab      	ldr	r3, [pc, #684]	; (800bd1c <perfect_pass+0x998>)
 800ba70:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba74:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800ba76:	4baa      	ldr	r3, [pc, #680]	; (800bd20 <perfect_pass+0x99c>)
 800ba78:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ba7c:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800ba7e:	4ba9      	ldr	r3, [pc, #676]	; (800bd24 <perfect_pass+0x9a0>)
 800ba80:	2207      	movs	r2, #7
 800ba82:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ba84:	4ba8      	ldr	r3, [pc, #672]	; (800bd28 <perfect_pass+0x9a4>)
 800ba86:	2207      	movs	r2, #7
 800ba88:	701a      	strb	r2, [r3, #0]

					get_base();
 800ba8a:	f005 fcf1 	bl	8011470 <get_base>

					searchC();
 800ba8e:	f002 fd3b 	bl	800e508 <searchC>
					HAL_Delay(2000);
 800ba92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ba96:	f7f5 fac1 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ba9a:	4ba3      	ldr	r3, [pc, #652]	; (800bd28 <perfect_pass+0x9a4>)
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	701a      	strb	r2, [r3, #0]
 800baa0:	4ba1      	ldr	r3, [pc, #644]	; (800bd28 <perfect_pass+0x9a4>)
 800baa2:	781a      	ldrb	r2, [r3, #0]
 800baa4:	4b9f      	ldr	r3, [pc, #636]	; (800bd24 <perfect_pass+0x9a0>)
 800baa6:	701a      	strb	r2, [r3, #0]
					searchC();
 800baa8:	f002 fd2e 	bl	800e508 <searchC>

					degree_z = target_degree_z;
 800baac:	4b9f      	ldr	r3, [pc, #636]	; (800bd2c <perfect_pass+0x9a8>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a9f      	ldr	r2, [pc, #636]	; (800bd30 <perfect_pass+0x9ac>)
 800bab2:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800bab4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bab8:	f7f5 fab0 	bl	800101c <HAL_Delay>


					//----a二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 800babc:	489d      	ldr	r0, [pc, #628]	; (800bd34 <perfect_pass+0x9b0>)
 800babe:	f006 fb71 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800bac2:	4a92      	ldr	r2, [pc, #584]	; (800bd0c <perfect_pass+0x988>)
 800bac4:	8813      	ldrh	r3, [r2, #0]
 800bac6:	f043 0320 	orr.w	r3, r3, #32
 800baca:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bacc:	4a8f      	ldr	r2, [pc, #572]	; (800bd0c <perfect_pass+0x988>)
 800bace:	8813      	ldrh	r3, [r2, #0]
 800bad0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bad4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bad6:	4a8d      	ldr	r2, [pc, #564]	; (800bd0c <perfect_pass+0x988>)
 800bad8:	8813      	ldrh	r3, [r2, #0]
 800bada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bade:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800bae0:	4b8b      	ldr	r3, [pc, #556]	; (800bd10 <perfect_pass+0x98c>)
 800bae2:	2202      	movs	r2, #2
 800bae4:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bae6:	4b8b      	ldr	r3, [pc, #556]	; (800bd14 <perfect_pass+0x990>)
 800bae8:	2200      	movs	r2, #0
 800baea:	701a      	strb	r2, [r3, #0]
					goal_mode = 2;
 800baec:	4b8a      	ldr	r3, [pc, #552]	; (800bd18 <perfect_pass+0x994>)
 800baee:	2202      	movs	r2, #2
 800baf0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800baf2:	4b8a      	ldr	r3, [pc, #552]	; (800bd1c <perfect_pass+0x998>)
 800baf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800baf8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bafa:	4b89      	ldr	r3, [pc, #548]	; (800bd20 <perfect_pass+0x99c>)
 800bafc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bb00:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800bb02:	4b88      	ldr	r3, [pc, #544]	; (800bd24 <perfect_pass+0x9a0>)
 800bb04:	2207      	movs	r2, #7
 800bb06:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bb08:	4b87      	ldr	r3, [pc, #540]	; (800bd28 <perfect_pass+0x9a4>)
 800bb0a:	2207      	movs	r2, #7
 800bb0c:	701a      	strb	r2, [r3, #0]

					searchD();
 800bb0e:	f002 ffdb 	bl	800eac8 <searchD>
					HAL_Delay(2000);
 800bb12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bb16:	f7f5 fa81 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bb1a:	4b83      	ldr	r3, [pc, #524]	; (800bd28 <perfect_pass+0x9a4>)
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	701a      	strb	r2, [r3, #0]
 800bb20:	4b81      	ldr	r3, [pc, #516]	; (800bd28 <perfect_pass+0x9a4>)
 800bb22:	781a      	ldrb	r2, [r3, #0]
 800bb24:	4b7f      	ldr	r3, [pc, #508]	; (800bd24 <perfect_pass+0x9a0>)
 800bb26:	701a      	strb	r2, [r3, #0]
					searchD();
 800bb28:	f002 ffce 	bl	800eac8 <searchD>

					degree_z = target_degree_z;
 800bb2c:	4b7f      	ldr	r3, [pc, #508]	; (800bd2c <perfect_pass+0x9a8>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a7f      	ldr	r2, [pc, #508]	; (800bd30 <perfect_pass+0x9ac>)
 800bb32:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800bb34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bb38:	f7f5 fa70 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 800bb3c:	487e      	ldr	r0, [pc, #504]	; (800bd38 <perfect_pass+0x9b4>)
 800bb3e:	f006 fb31 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800bb42:	4a72      	ldr	r2, [pc, #456]	; (800bd0c <perfect_pass+0x988>)
 800bb44:	8813      	ldrh	r3, [r2, #0]
 800bb46:	f043 0320 	orr.w	r3, r3, #32
 800bb4a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bb4c:	4a6f      	ldr	r2, [pc, #444]	; (800bd0c <perfect_pass+0x988>)
 800bb4e:	8813      	ldrh	r3, [r2, #0]
 800bb50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb54:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bb56:	4a6d      	ldr	r2, [pc, #436]	; (800bd0c <perfect_pass+0x988>)
 800bb58:	8813      	ldrh	r3, [r2, #0]
 800bb5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb5e:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 800bb60:	4b6b      	ldr	r3, [pc, #428]	; (800bd10 <perfect_pass+0x98c>)
 800bb62:	2202      	movs	r2, #2
 800bb64:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bb66:	4b6b      	ldr	r3, [pc, #428]	; (800bd14 <perfect_pass+0x990>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800bb6c:	4b6a      	ldr	r3, [pc, #424]	; (800bd18 <perfect_pass+0x994>)
 800bb6e:	2201      	movs	r2, #1
 800bb70:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bb72:	4b6a      	ldr	r3, [pc, #424]	; (800bd1c <perfect_pass+0x998>)
 800bb74:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb78:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bb7a:	4b69      	ldr	r3, [pc, #420]	; (800bd20 <perfect_pass+0x99c>)
 800bb7c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bb80:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800bb82:	4b6e      	ldr	r3, [pc, #440]	; (800bd3c <perfect_pass+0x9b8>)
 800bb84:	2203      	movs	r2, #3
 800bb86:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800bb88:	4b66      	ldr	r3, [pc, #408]	; (800bd24 <perfect_pass+0x9a0>)
 800bb8a:	2207      	movs	r2, #7
 800bb8c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bb8e:	4b66      	ldr	r3, [pc, #408]	; (800bd28 <perfect_pass+0x9a4>)
 800bb90:	2207      	movs	r2, #7
 800bb92:	701a      	strb	r2, [r3, #0]

					searchF3();
 800bb94:	f003 f92e 	bl	800edf4 <searchF3>
					HAL_Delay(2000);
 800bb98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bb9c:	f7f5 fa3e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bba0:	4b61      	ldr	r3, [pc, #388]	; (800bd28 <perfect_pass+0x9a4>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	701a      	strb	r2, [r3, #0]
 800bba6:	4b60      	ldr	r3, [pc, #384]	; (800bd28 <perfect_pass+0x9a4>)
 800bba8:	781a      	ldrb	r2, [r3, #0]
 800bbaa:	4b5e      	ldr	r3, [pc, #376]	; (800bd24 <perfect_pass+0x9a0>)
 800bbac:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bbae:	f003 f921 	bl	800edf4 <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800bbb2:	2064      	movs	r0, #100	; 0x64
 800bbb4:	f7f9 fc10 	bl	80053d8 <driveC2>
					degree_z = target_degree_z;
 800bbb8:	4b5c      	ldr	r3, [pc, #368]	; (800bd2c <perfect_pass+0x9a8>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a5c      	ldr	r2, [pc, #368]	; (800bd30 <perfect_pass+0x9ac>)
 800bbbe:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800bbc0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bbc4:	f7f5 fa2a 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800bbc8:	485d      	ldr	r0, [pc, #372]	; (800bd40 <perfect_pass+0x9bc>)
 800bbca:	f006 faeb 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800bbce:	4a4f      	ldr	r2, [pc, #316]	; (800bd0c <perfect_pass+0x988>)
 800bbd0:	8813      	ldrh	r3, [r2, #0]
 800bbd2:	f043 0320 	orr.w	r3, r3, #32
 800bbd6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bbd8:	4a4c      	ldr	r2, [pc, #304]	; (800bd0c <perfect_pass+0x988>)
 800bbda:	8813      	ldrh	r3, [r2, #0]
 800bbdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bbe0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bbe2:	4a4a      	ldr	r2, [pc, #296]	; (800bd0c <perfect_pass+0x988>)
 800bbe4:	8813      	ldrh	r3, [r2, #0]
 800bbe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bbea:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800bbec:	4b48      	ldr	r3, [pc, #288]	; (800bd10 <perfect_pass+0x98c>)
 800bbee:	2203      	movs	r2, #3
 800bbf0:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bbf2:	4b48      	ldr	r3, [pc, #288]	; (800bd14 <perfect_pass+0x990>)
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800bbf8:	4b47      	ldr	r3, [pc, #284]	; (800bd18 <perfect_pass+0x994>)
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bbfe:	4b47      	ldr	r3, [pc, #284]	; (800bd1c <perfect_pass+0x998>)
 800bc00:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc04:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bc06:	4b46      	ldr	r3, [pc, #280]	; (800bd20 <perfect_pass+0x99c>)
 800bc08:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bc0c:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800bc0e:	4b4b      	ldr	r3, [pc, #300]	; (800bd3c <perfect_pass+0x9b8>)
 800bc10:	2204      	movs	r2, #4
 800bc12:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800bc14:	4b43      	ldr	r3, [pc, #268]	; (800bd24 <perfect_pass+0x9a0>)
 800bc16:	2207      	movs	r2, #7
 800bc18:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bc1a:	4b43      	ldr	r3, [pc, #268]	; (800bd28 <perfect_pass+0x9a4>)
 800bc1c:	2207      	movs	r2, #7
 800bc1e:	701a      	strb	r2, [r3, #0]

					searchF4();
 800bc20:	f003 f9be 	bl	800efa0 <searchF4>
					HAL_Delay(2000);
 800bc24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bc28:	f7f5 f9f8 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bc2c:	4b3e      	ldr	r3, [pc, #248]	; (800bd28 <perfect_pass+0x9a4>)
 800bc2e:	2200      	movs	r2, #0
 800bc30:	701a      	strb	r2, [r3, #0]
 800bc32:	4b3d      	ldr	r3, [pc, #244]	; (800bd28 <perfect_pass+0x9a4>)
 800bc34:	781a      	ldrb	r2, [r3, #0]
 800bc36:	4b3b      	ldr	r3, [pc, #236]	; (800bd24 <perfect_pass+0x9a0>)
 800bc38:	701a      	strb	r2, [r3, #0]
					searchF4();
 800bc3a:	f003 f9b1 	bl	800efa0 <searchF4>

					goal_x = 7;
 800bc3e:	4b39      	ldr	r3, [pc, #228]	; (800bd24 <perfect_pass+0x9a0>)
 800bc40:	2207      	movs	r2, #7
 800bc42:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bc44:	4b38      	ldr	r3, [pc, #224]	; (800bd28 <perfect_pass+0x9a4>)
 800bc46:	2207      	movs	r2, #7
 800bc48:	701a      	strb	r2, [r3, #0]
					goal_x = goal_y = 0;
					searchD();
*/

					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 800bc4a:	483b      	ldr	r0, [pc, #236]	; (800bd38 <perfect_pass+0x9b4>)
 800bc4c:	f006 faaa 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800bc50:	4a2e      	ldr	r2, [pc, #184]	; (800bd0c <perfect_pass+0x988>)
 800bc52:	8813      	ldrh	r3, [r2, #0]
 800bc54:	f043 0320 	orr.w	r3, r3, #32
 800bc58:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bc5a:	4a2c      	ldr	r2, [pc, #176]	; (800bd0c <perfect_pass+0x988>)
 800bc5c:	8813      	ldrh	r3, [r2, #0]
 800bc5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bc62:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bc64:	4a29      	ldr	r2, [pc, #164]	; (800bd0c <perfect_pass+0x988>)
 800bc66:	8813      	ldrh	r3, [r2, #0]
 800bc68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bc6c:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800bc6e:	4b28      	ldr	r3, [pc, #160]	; (800bd10 <perfect_pass+0x98c>)
 800bc70:	2203      	movs	r2, #3
 800bc72:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bc74:	4b27      	ldr	r3, [pc, #156]	; (800bd14 <perfect_pass+0x990>)
 800bc76:	2200      	movs	r2, #0
 800bc78:	701a      	strb	r2, [r3, #0]
					goal_mode = 1;
 800bc7a:	4b27      	ldr	r3, [pc, #156]	; (800bd18 <perfect_pass+0x994>)
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bc80:	4b26      	ldr	r3, [pc, #152]	; (800bd1c <perfect_pass+0x998>)
 800bc82:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc86:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bc88:	4b25      	ldr	r3, [pc, #148]	; (800bd20 <perfect_pass+0x99c>)
 800bc8a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bc8e:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800bc90:	4b2a      	ldr	r3, [pc, #168]	; (800bd3c <perfect_pass+0x9b8>)
 800bc92:	2203      	movs	r2, #3
 800bc94:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800bc96:	4b23      	ldr	r3, [pc, #140]	; (800bd24 <perfect_pass+0x9a0>)
 800bc98:	2207      	movs	r2, #7
 800bc9a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bc9c:	4b22      	ldr	r3, [pc, #136]	; (800bd28 <perfect_pass+0x9a4>)
 800bc9e:	2207      	movs	r2, #7
 800bca0:	701a      	strb	r2, [r3, #0]

					searchF3();
 800bca2:	f003 f8a7 	bl	800edf4 <searchF3>
					HAL_Delay(2000);
 800bca6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bcaa:	f7f5 f9b7 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bcae:	4b1e      	ldr	r3, [pc, #120]	; (800bd28 <perfect_pass+0x9a4>)
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	701a      	strb	r2, [r3, #0]
 800bcb4:	4b1c      	ldr	r3, [pc, #112]	; (800bd28 <perfect_pass+0x9a4>)
 800bcb6:	781a      	ldrb	r2, [r3, #0]
 800bcb8:	4b1a      	ldr	r3, [pc, #104]	; (800bd24 <perfect_pass+0x9a0>)
 800bcba:	701a      	strb	r2, [r3, #0]
					searchF3();
 800bcbc:	f003 f89a 	bl	800edf4 <searchF3>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800bcc0:	2064      	movs	r0, #100	; 0x64
 800bcc2:	f7f9 fb89 	bl	80053d8 <driveC2>
					degree_z = target_degree_z;
 800bcc6:	4b19      	ldr	r3, [pc, #100]	; (800bd2c <perfect_pass+0x9a8>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a19      	ldr	r2, [pc, #100]	; (800bd30 <perfect_pass+0x9ac>)
 800bccc:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800bcce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bcd2:	f7f5 f9a3 	bl	800101c <HAL_Delay>


					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800bcd6:	481a      	ldr	r0, [pc, #104]	; (800bd40 <perfect_pass+0x9bc>)
 800bcd8:	f006 fa64 	bl	80121a4 <puts>
					MF.FLAG.SCND = 1;
 800bcdc:	4a0b      	ldr	r2, [pc, #44]	; (800bd0c <perfect_pass+0x988>)
 800bcde:	8813      	ldrh	r3, [r2, #0]
 800bce0:	f043 0320 	orr.w	r3, r3, #32
 800bce4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bce6:	4a09      	ldr	r2, [pc, #36]	; (800bd0c <perfect_pass+0x988>)
 800bce8:	8813      	ldrh	r3, [r2, #0]
 800bcea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bcee:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bcf0:	4a06      	ldr	r2, [pc, #24]	; (800bd0c <perfect_pass+0x988>)
 800bcf2:	8813      	ldrh	r3, [r2, #0]
 800bcf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bcf8:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800bcfa:	4b05      	ldr	r3, [pc, #20]	; (800bd10 <perfect_pass+0x98c>)
 800bcfc:	2203      	movs	r2, #3
 800bcfe:	701a      	strb	r2, [r3, #0]
					start_mode = 0;
 800bd00:	4b04      	ldr	r3, [pc, #16]	; (800bd14 <perfect_pass+0x990>)
 800bd02:	2200      	movs	r2, #0
 800bd04:	701a      	strb	r2, [r3, #0]
 800bd06:	e01d      	b.n	800bd44 <perfect_pass+0x9c0>
 800bd08:	080135b0 	.word	0x080135b0
 800bd0c:	20000f68 	.word	0x20000f68
 800bd10:	20000456 	.word	0x20000456
 800bd14:	200015c8 	.word	0x200015c8
 800bd18:	20000bb1 	.word	0x20000bb1
 800bd1c:	20000454 	.word	0x20000454
 800bd20:	20000f7c 	.word	0x20000f7c
 800bd24:	20000bb0 	.word	0x20000bb0
 800bd28:	20000b4c 	.word	0x20000b4c
 800bd2c:	20000bf8 	.word	0x20000bf8
 800bd30:	20000b5c 	.word	0x20000b5c
 800bd34:	080135d4 	.word	0x080135d4
 800bd38:	080134ec 	.word	0x080134ec
 800bd3c:	20000457 	.word	0x20000457
 800bd40:	0801350c 	.word	0x0801350c
					goal_mode = 1;
 800bd44:	4b15      	ldr	r3, [pc, #84]	; (800bd9c <perfect_pass+0xa18>)
 800bd46:	2201      	movs	r2, #1
 800bd48:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bd4a:	4b15      	ldr	r3, [pc, #84]	; (800bda0 <perfect_pass+0xa1c>)
 800bd4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd50:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bd52:	4b14      	ldr	r3, [pc, #80]	; (800bda4 <perfect_pass+0xa20>)
 800bd54:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bd58:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800bd5a:	4b13      	ldr	r3, [pc, #76]	; (800bda8 <perfect_pass+0xa24>)
 800bd5c:	2204      	movs	r2, #4
 800bd5e:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800bd60:	4b12      	ldr	r3, [pc, #72]	; (800bdac <perfect_pass+0xa28>)
 800bd62:	2207      	movs	r2, #7
 800bd64:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bd66:	4b12      	ldr	r3, [pc, #72]	; (800bdb0 <perfect_pass+0xa2c>)
 800bd68:	2207      	movs	r2, #7
 800bd6a:	701a      	strb	r2, [r3, #0]

					searchF4();
 800bd6c:	f003 f918 	bl	800efa0 <searchF4>
					HAL_Delay(2000);
 800bd70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bd74:	f7f5 f952 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bd78:	4b0d      	ldr	r3, [pc, #52]	; (800bdb0 <perfect_pass+0xa2c>)
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	701a      	strb	r2, [r3, #0]
 800bd7e:	4b0c      	ldr	r3, [pc, #48]	; (800bdb0 <perfect_pass+0xa2c>)
 800bd80:	781a      	ldrb	r2, [r3, #0]
 800bd82:	4b0a      	ldr	r3, [pc, #40]	; (800bdac <perfect_pass+0xa28>)
 800bd84:	701a      	strb	r2, [r3, #0]
					searchF4();
 800bd86:	f003 f90b 	bl	800efa0 <searchF4>

					goal_x = 7;
 800bd8a:	4b08      	ldr	r3, [pc, #32]	; (800bdac <perfect_pass+0xa28>)
 800bd8c:	2207      	movs	r2, #7
 800bd8e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800bd90:	4b07      	ldr	r3, [pc, #28]	; (800bdb0 <perfect_pass+0xa2c>)
 800bd92:	2207      	movs	r2, #7
 800bd94:	701a      	strb	r2, [r3, #0]

					break;
 800bd96:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800bd98:	f7ff bafd 	b.w	800b396 <perfect_pass+0x12>
 800bd9c:	20000bb1 	.word	0x20000bb1
 800bda0:	20000454 	.word	0x20000454
 800bda4:	20000f7c 	.word	0x20000f7c
 800bda8:	20000457 	.word	0x20000457
 800bdac:	20000bb0 	.word	0x20000bb0
 800bdb0:	20000b4c 	.word	0x20000b4c

0800bdb4 <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b088      	sub	sp, #32
 800bdb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 800bdc2:	230b      	movs	r3, #11
 800bdc4:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800bdca:	2302      	movs	r3, #2
 800bdcc:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 800bdce:	f7f5 fe67 	bl	8001aa0 <HAL_FLASH_Unlock>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 800bdd6:	7ffb      	ldrb	r3, [r7, #31]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d001      	beq.n	800bde0 <eeprom_enable_write+0x2c>
 800bddc:	7ffb      	ldrb	r3, [r7, #31]
 800bdde:	e009      	b.n	800bdf4 <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800bde0:	1d3a      	adds	r2, r7, #4
 800bde2:	f107 0308 	add.w	r3, r7, #8
 800bde6:	4611      	mov	r1, r2
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7f5 ffb7 	bl	8001d5c <HAL_FLASHEx_Erase>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	77fb      	strb	r3, [r7, #31]
  return status;
 800bdf2:	7ffb      	ldrb	r3, [r7, #31]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3720      	adds	r7, #32
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 800be00:	f7f5 fe70 	bl	8001ae4 <HAL_FLASH_Lock>
 800be04:	4603      	mov	r3, r0
}
 800be06:	4618      	mov	r0, r3
 800be08:	bd80      	pop	{r7, pc}

0800be0a <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 800be0a:	b590      	push	{r4, r7, lr}
 800be0c:	b085      	sub	sp, #20
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
 800be12:	460b      	mov	r3, r1
 800be14:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + EEPROM_START_ADDRESS;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800be1c:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800be20:	005b      	lsls	r3, r3, #1
 800be22:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 800be24:	887b      	ldrh	r3, [r7, #2]
 800be26:	f04f 0400 	mov.w	r4, #0
 800be2a:	461a      	mov	r2, r3
 800be2c:	4623      	mov	r3, r4
 800be2e:	6879      	ldr	r1, [r7, #4]
 800be30:	2001      	movs	r0, #1
 800be32:	f7f5 fde1 	bl	80019f8 <HAL_FLASH_Program>
 800be36:	4603      	mov	r3, r0
 800be38:	73fb      	strb	r3, [r7, #15]
  return status;
 800be3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3714      	adds	r7, #20
 800be40:	46bd      	mov	sp, r7
 800be42:	bd90      	pop	{r4, r7, pc}

0800be44 <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 800be44:	b480      	push	{r7}
 800be46:	b085      	sub	sp, #20
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 800be4c:	2300      	movs	r3, #0
 800be4e:	81fb      	strh	r3, [r7, #14]
  address = address*2 + EEPROM_START_ADDRESS;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800be56:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800be5a:	005b      	lsls	r3, r3, #1
 800be5c:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	881b      	ldrh	r3, [r3, #0]
 800be62:	81fb      	strh	r3, [r7, #14]
  return val;
 800be64:	89fb      	ldrh	r3, [r7, #14]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3714      	adds	r7, #20
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
	...

0800be74 <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); 					// wait start up
 800be7a:	2064      	movs	r0, #100	; 0x64
 800be7c:	f7f5 f8ce 	bl	800101c <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); 	// 1. read who am i
 800be80:	2075      	movs	r0, #117	; 0x75
 800be82:	f000 f82f 	bl	800bee4 <read_byte>
 800be86:	4603      	mov	r3, r0
 800be88:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); 		// 2. check who am i value
 800be8a:	79fb      	ldrb	r3, [r7, #7]
 800be8c:	4619      	mov	r1, r3
 800be8e:	4813      	ldr	r0, [pc, #76]	; (800bedc <gyro_init+0x68>)
 800be90:	f006 f914 	bl	80120bc <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 800be94:	79fb      	ldrb	r3, [r7, #7]
 800be96:	2b98      	cmp	r3, #152	; 0x98
 800be98:	d003      	beq.n	800bea2 <gyro_init+0x2e>
    while(1){
      printf("gyro_error\r");
 800be9a:	4811      	ldr	r0, [pc, #68]	; (800bee0 <gyro_init+0x6c>)
 800be9c:	f006 f90e 	bl	80120bc <iprintf>
 800bea0:	e7fb      	b.n	800be9a <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 800bea2:	2032      	movs	r0, #50	; 0x32
 800bea4:	f7f5 f8ba 	bl	800101c <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); 	// 3. set pwr_might
 800bea8:	2100      	movs	r1, #0
 800beaa:	206b      	movs	r0, #107	; 0x6b
 800beac:	f000 f846 	bl	800bf3c <write_byte>

  HAL_Delay(50);
 800beb0:	2032      	movs	r0, #50	; 0x32
 800beb2:	f7f5 f8b3 	bl	800101c <HAL_Delay>
  write_byte(CONFIG, 0x00); 		// 4. set config
 800beb6:	2100      	movs	r1, #0
 800beb8:	201a      	movs	r0, #26
 800beba:	f000 f83f 	bl	800bf3c <write_byte>

  HAL_Delay(50);
 800bebe:	2032      	movs	r0, #50	; 0x32
 800bec0:	f7f5 f8ac 	bl	800101c <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); 	// 5. set gyro config
 800bec4:	2118      	movs	r1, #24
 800bec6:	201b      	movs	r0, #27
 800bec8:	f000 f838 	bl	800bf3c <write_byte>

  HAL_Delay(50);
 800becc:	2032      	movs	r0, #50	; 0x32
 800bece:	f7f5 f8a5 	bl	800101c <HAL_Delay>
}
 800bed2:	bf00      	nop
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	080136ac 	.word	0x080136ac
 800bee0:	080136b4 	.word	0x080136b4

0800bee4 <read_byte>:


uint8_t read_byte(uint8_t reg){
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	4603      	mov	r3, r0
 800beec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET ); 	//cs = Low;
 800beee:	2200      	movs	r2, #0
 800bef0:	2104      	movs	r1, #4
 800bef2:	4810      	ldr	r0, [pc, #64]	; (800bf34 <read_byte+0x50>)
 800bef4:	f7f6 fa06 	bl	8002304 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 800bef8:	79fb      	ldrb	r3, [r7, #7]
 800befa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800bf02:	f107 010f 	add.w	r1, r7, #15
 800bf06:	2364      	movs	r3, #100	; 0x64
 800bf08:	2201      	movs	r2, #1
 800bf0a:	480b      	ldr	r0, [pc, #44]	; (800bf38 <read_byte+0x54>)
 800bf0c:	f7f6 fe82 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); 						// read 1byte(read data)
 800bf10:	f107 010e 	add.w	r1, r7, #14
 800bf14:	2364      	movs	r3, #100	; 0x64
 800bf16:	2201      	movs	r2, #1
 800bf18:	4807      	ldr	r0, [pc, #28]	; (800bf38 <read_byte+0x54>)
 800bf1a:	f7f6 ffaf 	bl	8002e7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET );  	//cs = High;
 800bf1e:	2201      	movs	r2, #1
 800bf20:	2104      	movs	r1, #4
 800bf22:	4804      	ldr	r0, [pc, #16]	; (800bf34 <read_byte+0x50>)
 800bf24:	f7f6 f9ee 	bl	8002304 <HAL_GPIO_WritePin>
  return val;
 800bf28:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	40020c00 	.word	0x40020c00
 800bf38:	20000144 	.word	0x20000144

0800bf3c <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	4603      	mov	r3, r0
 800bf44:	460a      	mov	r2, r1
 800bf46:	71fb      	strb	r3, [r7, #7]
 800bf48:	4613      	mov	r3, r2
 800bf4a:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 800bf4c:	79fb      	ldrb	r3, [r7, #7]
 800bf4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); 	// cs = Low;
 800bf56:	2200      	movs	r2, #0
 800bf58:	2104      	movs	r1, #4
 800bf5a:	480c      	ldr	r0, [pc, #48]	; (800bf8c <write_byte+0x50>)
 800bf5c:	f7f6 f9d2 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800bf60:	f107 010f 	add.w	r1, r7, #15
 800bf64:	2364      	movs	r3, #100	; 0x64
 800bf66:	2201      	movs	r2, #1
 800bf68:	4809      	ldr	r0, [pc, #36]	; (800bf90 <write_byte+0x54>)
 800bf6a:	f7f6 fe53 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); 					// read 1byte(write data)
 800bf6e:	1db9      	adds	r1, r7, #6
 800bf70:	2364      	movs	r3, #100	; 0x64
 800bf72:	2201      	movs	r2, #1
 800bf74:	4806      	ldr	r0, [pc, #24]	; (800bf90 <write_byte+0x54>)
 800bf76:	f7f6 fe4d 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); 		// cs = High;
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	2104      	movs	r1, #4
 800bf7e:	4803      	ldr	r0, [pc, #12]	; (800bf8c <write_byte+0x50>)
 800bf80:	f7f6 f9c0 	bl	8002304 <HAL_GPIO_WritePin>
}
 800bf84:	bf00      	nop
 800bf86:	3710      	adds	r7, #16
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	40020c00 	.word	0x40020c00
 800bf90:	20000144 	.word	0x20000144

0800bf94 <accel_read_x>:


float accel_read_x(void){
 800bf94:	b590      	push	{r4, r7, lr}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
  int16_t accel_x;
  float accel;

  // H:8bit shift, Link h and l
  accel_x = (int16_t)((int16_t)(read_byte(ACCEL_XOUT_H) << 8) | read_byte(ACCEL_XOUT_L));
 800bf9a:	203b      	movs	r0, #59	; 0x3b
 800bf9c:	f7ff ffa2 	bl	800bee4 <read_byte>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	021b      	lsls	r3, r3, #8
 800bfa4:	b21c      	sxth	r4, r3
 800bfa6:	203c      	movs	r0, #60	; 0x3c
 800bfa8:	f7ff ff9c 	bl	800bee4 <read_byte>
 800bfac:	4603      	mov	r3, r0
 800bfae:	b21b      	sxth	r3, r3
 800bfb0:	4323      	orrs	r3, r4
 800bfb2:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_x / ACCEL_FACTOR); // dps to accel
 800bfb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	da01      	bge.n	800bfc0 <accel_read_x+0x2c>
 800bfbc:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800bfc0:	12db      	asrs	r3, r3, #11
 800bfc2:	b21b      	sxth	r3, r3
 800bfc4:	ee07 3a90 	vmov	s15, r3
 800bfc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfcc:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	ee07 3a90 	vmov	s15, r3
}
 800bfd6:	eeb0 0a67 	vmov.f32	s0, s15
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd90      	pop	{r4, r7, pc}

0800bfe0 <accel_read_y>:


float accel_read_y(void){
 800bfe0:	b590      	push	{r4, r7, lr}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
  int16_t accel_y;
  float accel;

  // H:8bit shift, Link h and l
  accel_y = (int16_t)((int16_t)(read_byte(ACCEL_YOUT_H) << 8) | read_byte(ACCEL_YOUT_L));
 800bfe6:	203d      	movs	r0, #61	; 0x3d
 800bfe8:	f7ff ff7c 	bl	800bee4 <read_byte>
 800bfec:	4603      	mov	r3, r0
 800bfee:	021b      	lsls	r3, r3, #8
 800bff0:	b21c      	sxth	r4, r3
 800bff2:	203e      	movs	r0, #62	; 0x3e
 800bff4:	f7ff ff76 	bl	800bee4 <read_byte>
 800bff8:	4603      	mov	r3, r0
 800bffa:	b21b      	sxth	r3, r3
 800bffc:	4323      	orrs	r3, r4
 800bffe:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_y / ACCEL_FACTOR); // dps to accel
 800c000:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c004:	2b00      	cmp	r3, #0
 800c006:	da01      	bge.n	800c00c <accel_read_y+0x2c>
 800c008:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c00c:	12db      	asrs	r3, r3, #11
 800c00e:	b21b      	sxth	r3, r3
 800c010:	ee07 3a90 	vmov	s15, r3
 800c014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c018:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	ee07 3a90 	vmov	s15, r3
}
 800c022:	eeb0 0a67 	vmov.f32	s0, s15
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd90      	pop	{r4, r7, pc}

0800c02c <accel_read_z>:


float accel_read_z(void){
 800c02c:	b590      	push	{r4, r7, lr}
 800c02e:	b083      	sub	sp, #12
 800c030:	af00      	add	r7, sp, #0
  int16_t accel_z;
  float accel;

  // H:8bit shift, Link h and l
  accel_z = (int16_t)((int16_t)(read_byte(ACCEL_ZOUT_H) << 8) | read_byte(ACCEL_ZOUT_L));
 800c032:	203f      	movs	r0, #63	; 0x3f
 800c034:	f7ff ff56 	bl	800bee4 <read_byte>
 800c038:	4603      	mov	r3, r0
 800c03a:	021b      	lsls	r3, r3, #8
 800c03c:	b21c      	sxth	r4, r3
 800c03e:	2040      	movs	r0, #64	; 0x40
 800c040:	f7ff ff50 	bl	800bee4 <read_byte>
 800c044:	4603      	mov	r3, r0
 800c046:	b21b      	sxth	r3, r3
 800c048:	4323      	orrs	r3, r4
 800c04a:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_z / ACCEL_FACTOR-7); // dps to accel
 800c04c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c050:	2b00      	cmp	r3, #0
 800c052:	da01      	bge.n	800c058 <accel_read_z+0x2c>
 800c054:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c058:	12db      	asrs	r3, r3, #11
 800c05a:	b21b      	sxth	r3, r3
 800c05c:	3b07      	subs	r3, #7
 800c05e:	ee07 3a90 	vmov	s15, r3
 800c062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c066:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	ee07 3a90 	vmov	s15, r3
}
 800c070:	eeb0 0a67 	vmov.f32	s0, s15
 800c074:	370c      	adds	r7, #12
 800c076:	46bd      	mov	sp, r7
 800c078:	bd90      	pop	{r4, r7, pc}
 800c07a:	0000      	movs	r0, r0
 800c07c:	0000      	movs	r0, r0
	...

0800c080 <gyro_read_x>:


float gyro_read_x(void){
 800c080:	b590      	push	{r4, r7, lr}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
  int16_t gyro_x;
  float omega;

  // H:8bit shift, Link h and l
  gyro_x = (int16_t)((int16_t)(read_byte(GYRO_XOUT_H) << 8) | read_byte(GYRO_XOUT_L));
 800c086:	2043      	movs	r0, #67	; 0x43
 800c088:	f7ff ff2c 	bl	800bee4 <read_byte>
 800c08c:	4603      	mov	r3, r0
 800c08e:	021b      	lsls	r3, r3, #8
 800c090:	b21c      	sxth	r4, r3
 800c092:	2044      	movs	r0, #68	; 0x44
 800c094:	f7ff ff26 	bl	800bee4 <read_byte>
 800c098:	4603      	mov	r3, r0
 800c09a:	b21b      	sxth	r3, r3
 800c09c:	4323      	orrs	r3, r4
 800c09e:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_x / GYRO_FACTOR+1.4); // dps to deg/sec
 800c0a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7f4 fa35 	bl	8000514 <__aeabi_i2d>
 800c0aa:	a30f      	add	r3, pc, #60	; (adr r3, 800c0e8 <gyro_read_x+0x68>)
 800c0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b0:	f7f4 fbc4 	bl	800083c <__aeabi_ddiv>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	460c      	mov	r4, r1
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	4621      	mov	r1, r4
 800c0bc:	a30c      	add	r3, pc, #48	; (adr r3, 800c0f0 <gyro_read_x+0x70>)
 800c0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c2:	f7f4 f8db 	bl	800027c <__adddf3>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	460c      	mov	r4, r1
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	4621      	mov	r1, r4
 800c0ce:	f7f4 fd63 	bl	8000b98 <__aeabi_d2f>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	603b      	str	r3, [r7, #0]
  return omega;
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	ee07 3a90 	vmov	s15, r3
}
 800c0dc:	eeb0 0a67 	vmov.f32	s0, s15
 800c0e0:	370c      	adds	r7, #12
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd90      	pop	{r4, r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	66666666 	.word	0x66666666
 800c0ec:	40306666 	.word	0x40306666
 800c0f0:	66666666 	.word	0x66666666
 800c0f4:	3ff66666 	.word	0x3ff66666

0800c0f8 <gyro_read_y>:


float gyro_read_y(void){
 800c0f8:	b590      	push	{r4, r7, lr}
 800c0fa:	b083      	sub	sp, #12
 800c0fc:	af00      	add	r7, sp, #0
  int16_t gyro_y;
  float omega;

  // H:8bit shift, Link h and l
  gyro_y = (int16_t)((int16_t)(read_byte(GYRO_YOUT_H) << 8) | read_byte(GYRO_YOUT_L));
 800c0fe:	2045      	movs	r0, #69	; 0x45
 800c100:	f7ff fef0 	bl	800bee4 <read_byte>
 800c104:	4603      	mov	r3, r0
 800c106:	021b      	lsls	r3, r3, #8
 800c108:	b21c      	sxth	r4, r3
 800c10a:	2046      	movs	r0, #70	; 0x46
 800c10c:	f7ff feea 	bl	800bee4 <read_byte>
 800c110:	4603      	mov	r3, r0
 800c112:	b21b      	sxth	r3, r3
 800c114:	4323      	orrs	r3, r4
 800c116:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_y / GYRO_FACTOR-0.75); // dps to deg/sec
 800c118:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7f4 f9f9 	bl	8000514 <__aeabi_i2d>
 800c122:	a310      	add	r3, pc, #64	; (adr r3, 800c164 <gyro_read_y+0x6c>)
 800c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c128:	f7f4 fb88 	bl	800083c <__aeabi_ddiv>
 800c12c:	4603      	mov	r3, r0
 800c12e:	460c      	mov	r4, r1
 800c130:	4618      	mov	r0, r3
 800c132:	4621      	mov	r1, r4
 800c134:	f04f 0200 	mov.w	r2, #0
 800c138:	4b09      	ldr	r3, [pc, #36]	; (800c160 <gyro_read_y+0x68>)
 800c13a:	f7f4 f89d 	bl	8000278 <__aeabi_dsub>
 800c13e:	4603      	mov	r3, r0
 800c140:	460c      	mov	r4, r1
 800c142:	4618      	mov	r0, r3
 800c144:	4621      	mov	r1, r4
 800c146:	f7f4 fd27 	bl	8000b98 <__aeabi_d2f>
 800c14a:	4603      	mov	r3, r0
 800c14c:	603b      	str	r3, [r7, #0]
  return omega;
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	ee07 3a90 	vmov	s15, r3
}
 800c154:	eeb0 0a67 	vmov.f32	s0, s15
 800c158:	370c      	adds	r7, #12
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd90      	pop	{r4, r7, pc}
 800c15e:	bf00      	nop
 800c160:	3fe80000 	.word	0x3fe80000
 800c164:	66666666 	.word	0x66666666
 800c168:	40306666 	.word	0x40306666
 800c16c:	00000000 	.word	0x00000000

0800c170 <gyro_read_z>:


float gyro_read_z(void){
 800c170:	b5b0      	push	{r4, r5, r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 800c176:	2047      	movs	r0, #71	; 0x47
 800c178:	f7ff feb4 	bl	800bee4 <read_byte>
 800c17c:	4603      	mov	r3, r0
 800c17e:	021b      	lsls	r3, r3, #8
 800c180:	b21c      	sxth	r4, r3
 800c182:	2048      	movs	r0, #72	; 0x48
 800c184:	f7ff feae 	bl	800bee4 <read_byte>
 800c188:	4603      	mov	r3, r0
 800c18a:	b21b      	sxth	r3, r3
 800c18c:	4323      	orrs	r3, r4
 800c18e:	80fb      	strh	r3, [r7, #6]

//  omega = (float)(gyro_z / GYRO_FACTOR+1.15); // dps to deg/sec
  omega = (float)(gyro_z / GYRO_FACTOR-gyro_drift_value); // dps to deg/sec
 800c190:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c194:	4618      	mov	r0, r3
 800c196:	f7f4 f9bd 	bl	8000514 <__aeabi_i2d>
 800c19a:	a314      	add	r3, pc, #80	; (adr r3, 800c1ec <gyro_read_z+0x7c>)
 800c19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a0:	f7f4 fb4c 	bl	800083c <__aeabi_ddiv>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	460c      	mov	r4, r1
 800c1a8:	4625      	mov	r5, r4
 800c1aa:	461c      	mov	r4, r3
 800c1ac:	4b0e      	ldr	r3, [pc, #56]	; (800c1e8 <gyro_read_z+0x78>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7f4 f9c1 	bl	8000538 <__aeabi_f2d>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	4629      	mov	r1, r5
 800c1be:	f7f4 f85b 	bl	8000278 <__aeabi_dsub>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	460c      	mov	r4, r1
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	f7f4 fce5 	bl	8000b98 <__aeabi_d2f>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	603b      	str	r3, [r7, #0]
  return omega;
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	ee07 3a90 	vmov	s15, r3
}
 800c1d8:	eeb0 0a67 	vmov.f32	s0, s15
 800c1dc:	3708      	adds	r7, #8
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bdb0      	pop	{r4, r5, r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	f3af 8000 	nop.w
 800c1e8:	20000bf4 	.word	0x20000bf4
 800c1ec:	66666666 	.word	0x66666666
 800c1f0:	40306666 	.word	0x40306666

0800c1f4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int c) {
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b0a      	cmp	r3, #10
 800c200:	d108      	bne.n	800c214 <__io_putchar+0x20>
    int _c = '\r';
 800c202:	230d      	movs	r3, #13
 800c204:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 800c206:	f107 010c 	add.w	r1, r7, #12
 800c20a:	2301      	movs	r3, #1
 800c20c:	2201      	movs	r2, #1
 800c20e:	4807      	ldr	r0, [pc, #28]	; (800c22c <__io_putchar+0x38>)
 800c210:	f7f8 fa37 	bl	8004682 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 800c214:	1d39      	adds	r1, r7, #4
 800c216:	2301      	movs	r3, #1
 800c218:	2201      	movs	r2, #1
 800c21a:	4804      	ldr	r0, [pc, #16]	; (800c22c <__io_putchar+0x38>)
 800c21c:	f7f8 fa31 	bl	8004682 <HAL_UART_Transmit>
  return 0;
 800c220:	2300      	movs	r3, #0
}
 800c222:	4618      	mov	r0, r3
 800c224:	3710      	adds	r7, #16
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	20000b64 	.word	0x20000b64

0800c230 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c230:	b5b0      	push	{r4, r5, r7, lr}
 800c232:	ed2d 8b02 	vpush	{d8}
 800c236:	b08c      	sub	sp, #48	; 0x30
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c23c:	2360      	movs	r3, #96	; 0x60
 800c23e:	60bb      	str	r3, [r7, #8]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c240:	2300      	movs	r3, #0
 800c242:	613b      	str	r3, [r7, #16]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c244:	2300      	movs	r3, #0
 800c246:	61bb      	str	r3, [r7, #24]

	if(htim == &htim6){
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4ab5      	ldr	r2, [pc, #724]	; (800c520 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	f041 82c4 	bne.w	800d7da <HAL_TIM_PeriodElapsedCallback+0x15aa>
		cnt_l = TIM4 -> CNT;
 800c252:	4bb4      	ldr	r3, [pc, #720]	; (800c524 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800c254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c256:	ee07 3a90 	vmov	s15, r3
 800c25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c25e:	4bb2      	ldr	r3, [pc, #712]	; (800c528 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800c260:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 800c264:	4bb1      	ldr	r3, [pc, #708]	; (800c52c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800c266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c268:	ee07 3a90 	vmov	s15, r3
 800c26c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c270:	4baf      	ldr	r3, [pc, #700]	; (800c530 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c272:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;		//0=>65505の値飛び検出用
 800c276:	4bac      	ldr	r3, [pc, #688]	; (800c528 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800c278:	edd3 7a00 	vldr	s15, [r3]
 800c27c:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800c534 <HAL_TIM_PeriodElapsedCallback+0x304>
 800c280:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c288:	dd09      	ble.n	800c29e <HAL_TIM_PeriodElapsedCallback+0x6e>
 800c28a:	4ba7      	ldr	r3, [pc, #668]	; (800c528 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800c28c:	edd3 7a00 	vldr	s15, [r3]
 800c290:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800c538 <HAL_TIM_PeriodElapsedCallback+0x308>
 800c294:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c298:	4ba3      	ldr	r3, [pc, #652]	; (800c528 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800c29a:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;		//0=>65505の値飛び検出用
 800c29e:	4ba4      	ldr	r3, [pc, #656]	; (800c530 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c2a0:	edd3 7a00 	vldr	s15, [r3]
 800c2a4:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800c534 <HAL_TIM_PeriodElapsedCallback+0x304>
 800c2a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2b0:	dd09      	ble.n	800c2c6 <HAL_TIM_PeriodElapsedCallback+0x96>
 800c2b2:	4b9f      	ldr	r3, [pc, #636]	; (800c530 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c2b4:	edd3 7a00 	vldr	s15, [r3]
 800c2b8:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800c538 <HAL_TIM_PeriodElapsedCallback+0x308>
 800c2bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2c0:	4b9b      	ldr	r3, [pc, #620]	; (800c530 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c2c2:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;								//a回転方向合わせ
 800c2c6:	4b9a      	ldr	r3, [pc, #616]	; (800c530 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c2c8:	edd3 7a00 	vldr	s15, [r3]
 800c2cc:	eef1 7a67 	vneg.f32	s15, s15
 800c2d0:	4b97      	ldr	r3, [pc, #604]	; (800c530 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c2d2:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800c2d6:	4b99      	ldr	r3, [pc, #612]	; (800c53c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7f4 f92c 	bl	8000538 <__aeabi_f2d>
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	460d      	mov	r5, r1
 800c2e4:	4b90      	ldr	r3, [pc, #576]	; (800c528 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7f4 f925 	bl	8000538 <__aeabi_f2d>
 800c2ee:	a388      	add	r3, pc, #544	; (adr r3, 800c510 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800c2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f4:	f7f4 f978 	bl	80005e8 <__aeabi_dmul>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	4629      	mov	r1, r5
 800c300:	f7f3 ffbc 	bl	800027c <__adddf3>
 800c304:	4603      	mov	r3, r0
 800c306:	460c      	mov	r4, r1
 800c308:	4618      	mov	r0, r3
 800c30a:	4621      	mov	r1, r4
 800c30c:	f7f4 fc44 	bl	8000b98 <__aeabi_d2f>
 800c310:	4602      	mov	r2, r0
 800c312:	4b8a      	ldr	r3, [pc, #552]	; (800c53c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800c314:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800c316:	4b8a      	ldr	r3, [pc, #552]	; (800c540 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7f4 f90c 	bl	8000538 <__aeabi_f2d>
 800c320:	4604      	mov	r4, r0
 800c322:	460d      	mov	r5, r1
 800c324:	4b82      	ldr	r3, [pc, #520]	; (800c530 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4618      	mov	r0, r3
 800c32a:	f7f4 f905 	bl	8000538 <__aeabi_f2d>
 800c32e:	a378      	add	r3, pc, #480	; (adr r3, 800c510 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800c330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c334:	f7f4 f958 	bl	80005e8 <__aeabi_dmul>
 800c338:	4602      	mov	r2, r0
 800c33a:	460b      	mov	r3, r1
 800c33c:	4620      	mov	r0, r4
 800c33e:	4629      	mov	r1, r5
 800c340:	f7f3 ff9c 	bl	800027c <__adddf3>
 800c344:	4603      	mov	r3, r0
 800c346:	460c      	mov	r4, r1
 800c348:	4618      	mov	r0, r3
 800c34a:	4621      	mov	r1, r4
 800c34c:	f7f4 fc24 	bl	8000b98 <__aeabi_d2f>
 800c350:	4602      	mov	r2, r0
 800c352:	4b7b      	ldr	r3, [pc, #492]	; (800c540 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800c354:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800c356:	4b74      	ldr	r3, [pc, #464]	; (800c528 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7f4 f8ec 	bl	8000538 <__aeabi_f2d>
 800c360:	a36b      	add	r3, pc, #428	; (adr r3, 800c510 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800c362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c366:	f7f4 f93f 	bl	80005e8 <__aeabi_dmul>
 800c36a:	4603      	mov	r3, r0
 800c36c:	460c      	mov	r4, r1
 800c36e:	4618      	mov	r0, r3
 800c370:	4621      	mov	r1, r4
 800c372:	a369      	add	r3, pc, #420	; (adr r3, 800c518 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800c374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c378:	f7f4 fa60 	bl	800083c <__aeabi_ddiv>
 800c37c:	4603      	mov	r3, r0
 800c37e:	460c      	mov	r4, r1
 800c380:	4618      	mov	r0, r3
 800c382:	4621      	mov	r1, r4
 800c384:	f7f4 fc08 	bl	8000b98 <__aeabi_d2f>
 800c388:	4602      	mov	r2, r0
 800c38a:	4b6e      	ldr	r3, [pc, #440]	; (800c544 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800c38c:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800c38e:	4b68      	ldr	r3, [pc, #416]	; (800c530 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4618      	mov	r0, r3
 800c394:	f7f4 f8d0 	bl	8000538 <__aeabi_f2d>
 800c398:	a35d      	add	r3, pc, #372	; (adr r3, 800c510 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800c39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39e:	f7f4 f923 	bl	80005e8 <__aeabi_dmul>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	460c      	mov	r4, r1
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	4621      	mov	r1, r4
 800c3aa:	a35b      	add	r3, pc, #364	; (adr r3, 800c518 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800c3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b0:	f7f4 fa44 	bl	800083c <__aeabi_ddiv>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	4621      	mov	r1, r4
 800c3bc:	f7f4 fbec 	bl	8000b98 <__aeabi_d2f>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	4b61      	ldr	r3, [pc, #388]	; (800c548 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800c3c4:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 800c3c6:	4b57      	ldr	r3, [pc, #348]	; (800c524 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 800c3cc:	4b57      	ldr	r3, [pc, #348]	; (800c52c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.SPD){
 800c3d2:	4b5e      	ldr	r3, [pc, #376]	; (800c54c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800c3d4:	881b      	ldrh	r3, [r3, #0]
 800c3d6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f000 80fe 	beq.w	800c5de <HAL_TIM_PeriodElapsedCallback+0x3ae>
			target_speed_l += accel_l * 0.001;
 800c3e2:	4b5b      	ldr	r3, [pc, #364]	; (800c550 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7f4 f8a6 	bl	8000538 <__aeabi_f2d>
 800c3ec:	a34a      	add	r3, pc, #296	; (adr r3, 800c518 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800c3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f2:	f7f4 f8f9 	bl	80005e8 <__aeabi_dmul>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	460c      	mov	r4, r1
 800c3fa:	4625      	mov	r5, r4
 800c3fc:	461c      	mov	r4, r3
 800c3fe:	4b55      	ldr	r3, [pc, #340]	; (800c554 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4618      	mov	r0, r3
 800c404:	f7f4 f898 	bl	8000538 <__aeabi_f2d>
 800c408:	4602      	mov	r2, r0
 800c40a:	460b      	mov	r3, r1
 800c40c:	4620      	mov	r0, r4
 800c40e:	4629      	mov	r1, r5
 800c410:	f7f3 ff34 	bl	800027c <__adddf3>
 800c414:	4603      	mov	r3, r0
 800c416:	460c      	mov	r4, r1
 800c418:	4618      	mov	r0, r3
 800c41a:	4621      	mov	r1, r4
 800c41c:	f7f4 fbbc 	bl	8000b98 <__aeabi_d2f>
 800c420:	4602      	mov	r2, r0
 800c422:	4b4c      	ldr	r3, [pc, #304]	; (800c554 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c424:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 800c426:	4b4b      	ldr	r3, [pc, #300]	; (800c554 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c428:	ed93 7a00 	vldr	s14, [r3]
 800c42c:	4b4a      	ldr	r3, [pc, #296]	; (800c558 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800c42e:	edd3 7a00 	vldr	s15, [r3]
 800c432:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c43a:	dd03      	ble.n	800c444 <HAL_TIM_PeriodElapsedCallback+0x214>
 800c43c:	4b46      	ldr	r3, [pc, #280]	; (800c558 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800c43e:	edd3 7a00 	vldr	s15, [r3]
 800c442:	e002      	b.n	800c44a <HAL_TIM_PeriodElapsedCallback+0x21a>
 800c444:	4b43      	ldr	r3, [pc, #268]	; (800c554 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c446:	edd3 7a00 	vldr	s15, [r3]
 800c44a:	4b44      	ldr	r3, [pc, #272]	; (800c55c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800c44c:	ed93 7a00 	vldr	s14, [r3]
 800c450:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c458:	dd10      	ble.n	800c47c <HAL_TIM_PeriodElapsedCallback+0x24c>
 800c45a:	4b3e      	ldr	r3, [pc, #248]	; (800c554 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c45c:	ed93 7a00 	vldr	s14, [r3]
 800c460:	4b3d      	ldr	r3, [pc, #244]	; (800c558 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800c462:	edd3 7a00 	vldr	s15, [r3]
 800c466:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c46e:	dd02      	ble.n	800c476 <HAL_TIM_PeriodElapsedCallback+0x246>
 800c470:	4b39      	ldr	r3, [pc, #228]	; (800c558 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	e004      	b.n	800c480 <HAL_TIM_PeriodElapsedCallback+0x250>
 800c476:	4b37      	ldr	r3, [pc, #220]	; (800c554 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	e001      	b.n	800c480 <HAL_TIM_PeriodElapsedCallback+0x250>
 800c47c:	4b37      	ldr	r3, [pc, #220]	; (800c55c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a34      	ldr	r2, [pc, #208]	; (800c554 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c482:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 800c484:	4b33      	ldr	r3, [pc, #204]	; (800c554 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800c486:	ed93 7a00 	vldr	s14, [r3]
 800c48a:	4b2e      	ldr	r3, [pc, #184]	; (800c544 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800c48c:	edd3 7a00 	vldr	s15, [r3]
 800c490:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c494:	4b32      	ldr	r3, [pc, #200]	; (800c560 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800c496:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800c49a:	4b31      	ldr	r3, [pc, #196]	; (800c560 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800c49c:	edd3 7a00 	vldr	s15, [r3]
 800c4a0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c4a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c4a8:	4b2e      	ldr	r3, [pc, #184]	; (800c564 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800c4aa:	edc3 7a00 	vstr	s15, [r3]

			target_speed_r += accel_r * 0.001;
 800c4ae:	4b2e      	ldr	r3, [pc, #184]	; (800c568 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7f4 f840 	bl	8000538 <__aeabi_f2d>
 800c4b8:	a317      	add	r3, pc, #92	; (adr r3, 800c518 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800c4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4be:	f7f4 f893 	bl	80005e8 <__aeabi_dmul>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	460c      	mov	r4, r1
 800c4c6:	4625      	mov	r5, r4
 800c4c8:	461c      	mov	r4, r3
 800c4ca:	4b28      	ldr	r3, [pc, #160]	; (800c56c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7f4 f832 	bl	8000538 <__aeabi_f2d>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	4620      	mov	r0, r4
 800c4da:	4629      	mov	r1, r5
 800c4dc:	f7f3 fece 	bl	800027c <__adddf3>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	460c      	mov	r4, r1
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	4621      	mov	r1, r4
 800c4e8:	f7f4 fb56 	bl	8000b98 <__aeabi_d2f>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	4b1f      	ldr	r3, [pc, #124]	; (800c56c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800c4f0:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 800c4f2:	4b1e      	ldr	r3, [pc, #120]	; (800c56c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800c4f4:	ed93 7a00 	vldr	s14, [r3]
 800c4f8:	4b1d      	ldr	r3, [pc, #116]	; (800c570 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800c4fa:	edd3 7a00 	vldr	s15, [r3]
 800c4fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c506:	dd35      	ble.n	800c574 <HAL_TIM_PeriodElapsedCallback+0x344>
 800c508:	4b19      	ldr	r3, [pc, #100]	; (800c570 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800c50a:	edd3 7a00 	vldr	s15, [r3]
 800c50e:	e034      	b.n	800c57a <HAL_TIM_PeriodElapsedCallback+0x34a>
 800c510:	775e3793 	.word	0x775e3793
 800c514:	3f552a9e 	.word	0x3f552a9e
 800c518:	d2f1a9fc 	.word	0xd2f1a9fc
 800c51c:	3f50624d 	.word	0x3f50624d
 800c520:	20000bb4 	.word	0x20000bb4
 800c524:	40000800 	.word	0x40000800
 800c528:	200002ac 	.word	0x200002ac
 800c52c:	40010400 	.word	0x40010400
 800c530:	20000bac 	.word	0x20000bac
 800c534:	471c4000 	.word	0x471c4000
 800c538:	477fff00 	.word	0x477fff00
 800c53c:	200015c4 	.word	0x200015c4
 800c540:	20000aec 	.word	0x20000aec
 800c544:	20000af0 	.word	0x20000af0
 800c548:	200002bc 	.word	0x200002bc
 800c54c:	20000f68 	.word	0x20000f68
 800c550:	20000d58 	.word	0x20000d58
 800c554:	20000bfc 	.word	0x20000bfc
 800c558:	2000077c 	.word	0x2000077c
 800c55c:	20000b54 	.word	0x20000b54
 800c560:	20000b60 	.word	0x20000b60
 800c564:	20000ba8 	.word	0x20000ba8
 800c568:	20000ae4 	.word	0x20000ae4
 800c56c:	200001a0 	.word	0x200001a0
 800c570:	200001a4 	.word	0x200001a4
 800c574:	4ba4      	ldr	r3, [pc, #656]	; (800c808 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800c576:	edd3 7a00 	vldr	s15, [r3]
 800c57a:	4ba4      	ldr	r3, [pc, #656]	; (800c80c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800c57c:	ed93 7a00 	vldr	s14, [r3]
 800c580:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c588:	dd10      	ble.n	800c5ac <HAL_TIM_PeriodElapsedCallback+0x37c>
 800c58a:	4b9f      	ldr	r3, [pc, #636]	; (800c808 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800c58c:	ed93 7a00 	vldr	s14, [r3]
 800c590:	4b9f      	ldr	r3, [pc, #636]	; (800c810 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800c592:	edd3 7a00 	vldr	s15, [r3]
 800c596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c59e:	dd02      	ble.n	800c5a6 <HAL_TIM_PeriodElapsedCallback+0x376>
 800c5a0:	4b9b      	ldr	r3, [pc, #620]	; (800c810 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	e004      	b.n	800c5b0 <HAL_TIM_PeriodElapsedCallback+0x380>
 800c5a6:	4b98      	ldr	r3, [pc, #608]	; (800c808 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	e001      	b.n	800c5b0 <HAL_TIM_PeriodElapsedCallback+0x380>
 800c5ac:	4b97      	ldr	r3, [pc, #604]	; (800c80c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a95      	ldr	r2, [pc, #596]	; (800c808 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800c5b2:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 800c5b4:	4b94      	ldr	r3, [pc, #592]	; (800c808 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800c5b6:	ed93 7a00 	vldr	s14, [r3]
 800c5ba:	4b96      	ldr	r3, [pc, #600]	; (800c814 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800c5bc:	edd3 7a00 	vldr	s15, [r3]
 800c5c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5c4:	4b94      	ldr	r3, [pc, #592]	; (800c818 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800c5c6:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800c5ca:	4b93      	ldr	r3, [pc, #588]	; (800c818 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800c5cc:	edd3 7a00 	vldr	s15, [r3]
 800c5d0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c5d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5d8:	4b90      	ldr	r3, [pc, #576]	; (800c81c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800c5da:	edc3 7a00 	vstr	s15, [r3]
		}

		log_cnt ++;
 800c5de:	4b90      	ldr	r3, [pc, #576]	; (800c820 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	4a8e      	ldr	r2, [pc, #568]	; (800c820 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800c5e6:	6013      	str	r3, [r2, #0]

		if(log_cnt >= 5 && MF2.FLAG.LOG){
 800c5e8:	4b8d      	ldr	r3, [pc, #564]	; (800c820 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b04      	cmp	r3, #4
 800c5ee:	dd37      	ble.n	800c660 <HAL_TIM_PeriodElapsedCallback+0x430>
 800c5f0:	4b8c      	ldr	r3, [pc, #560]	; (800c824 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800c5f2:	881b      	ldrh	r3, [r3, #0]
 800c5f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d030      	beq.n	800c660 <HAL_TIM_PeriodElapsedCallback+0x430>
			log_cnt = 0;
 800c5fe:	4b88      	ldr	r3, [pc, #544]	; (800c820 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800c600:	2200      	movs	r2, #0
 800c602:	601a      	str	r2, [r3, #0]
			if(get_cnt < log_allay){
 800c604:	4b88      	ldr	r3, [pc, #544]	; (800c828 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2bc7      	cmp	r3, #199	; 0xc7
 800c60a:	dc29      	bgt.n	800c660 <HAL_TIM_PeriodElapsedCallback+0x430>
				get_speed_l[get_cnt] = speed_l;
 800c60c:	4b87      	ldr	r3, [pc, #540]	; (800c82c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800c60e:	edd3 7a00 	vldr	s15, [r3]
 800c612:	4b85      	ldr	r3, [pc, #532]	; (800c828 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c61a:	ee17 1a90 	vmov	r1, s15
 800c61e:	4a84      	ldr	r2, [pc, #528]	; (800c830 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800c620:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_speed_r[get_cnt] = speed_r;
 800c624:	4b7b      	ldr	r3, [pc, #492]	; (800c814 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800c626:	edd3 7a00 	vldr	s15, [r3]
 800c62a:	4b7f      	ldr	r3, [pc, #508]	; (800c828 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c632:	ee17 1a90 	vmov	r1, s15
 800c636:	4a7f      	ldr	r2, [pc, #508]	; (800c834 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800c638:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_omega[get_cnt] = gyro_read_z();
 800c63c:	f7ff fd98 	bl	800c170 <gyro_read_z>
 800c640:	eef0 7a40 	vmov.f32	s15, s0
 800c644:	4b78      	ldr	r3, [pc, #480]	; (800c828 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c64c:	ee17 1a90 	vmov	r1, s15
 800c650:	4a79      	ldr	r2, [pc, #484]	; (800c838 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800c652:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_cnt++;
 800c656:	4b74      	ldr	r3, [pc, #464]	; (800c828 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	3301      	adds	r3, #1
 800c65c:	4a72      	ldr	r2, [pc, #456]	; (800c828 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800c65e:	6013      	str	r3, [r2, #0]
//		degree_x += accel_read_x() * 0.001;
//		degree_y += accel_read_y() * 0.001;
//		degree_z += accel_read_z() * 0.001;
//		degree_x += gyro_read_x() * 0.001;
//		degree_y += gyro_read_y() * 0.001;
		degree_z += gyro_read_z() * 0.001;
 800c660:	f7ff fd86 	bl	800c170 <gyro_read_z>
 800c664:	ee10 3a10 	vmov	r3, s0
 800c668:	4618      	mov	r0, r3
 800c66a:	f7f3 ff65 	bl	8000538 <__aeabi_f2d>
 800c66e:	a362      	add	r3, pc, #392	; (adr r3, 800c7f8 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800c670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c674:	f7f3 ffb8 	bl	80005e8 <__aeabi_dmul>
 800c678:	4603      	mov	r3, r0
 800c67a:	460c      	mov	r4, r1
 800c67c:	4625      	mov	r5, r4
 800c67e:	461c      	mov	r4, r3
 800c680:	4b6e      	ldr	r3, [pc, #440]	; (800c83c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4618      	mov	r0, r3
 800c686:	f7f3 ff57 	bl	8000538 <__aeabi_f2d>
 800c68a:	4602      	mov	r2, r0
 800c68c:	460b      	mov	r3, r1
 800c68e:	4620      	mov	r0, r4
 800c690:	4629      	mov	r1, r5
 800c692:	f7f3 fdf3 	bl	800027c <__adddf3>
 800c696:	4603      	mov	r3, r0
 800c698:	460c      	mov	r4, r1
 800c69a:	4618      	mov	r0, r3
 800c69c:	4621      	mov	r1, r4
 800c69e:	f7f4 fa7b 	bl	8000b98 <__aeabi_d2f>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	4b65      	ldr	r3, [pc, #404]	; (800c83c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800c6a6:	601a      	str	r2, [r3, #0]

		//gyro ドリフト量計算
		if(MF2.FLAG.GDRIFT){
 800c6a8:	4b5e      	ldr	r3, [pc, #376]	; (800c824 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800c6aa:	881b      	ldrh	r3, [r3, #0]
 800c6ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d04d      	beq.n	800c752 <HAL_TIM_PeriodElapsedCallback+0x522>
			gyro_cnt ++;
 800c6b6:	4b62      	ldr	r3, [pc, #392]	; (800c840 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	4a60      	ldr	r2, [pc, #384]	; (800c840 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800c6be:	6013      	str	r3, [r2, #0]
			if(gyro_cnt >= 2)dif_omega_z += old_omega_z - gyro_read_z();
 800c6c0:	4b5f      	ldr	r3, [pc, #380]	; (800c840 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	dd10      	ble.n	800c6ea <HAL_TIM_PeriodElapsedCallback+0x4ba>
 800c6c8:	4b5e      	ldr	r3, [pc, #376]	; (800c844 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800c6ca:	ed93 8a00 	vldr	s16, [r3]
 800c6ce:	f7ff fd4f 	bl	800c170 <gyro_read_z>
 800c6d2:	eef0 7a40 	vmov.f32	s15, s0
 800c6d6:	ee38 7a67 	vsub.f32	s14, s16, s15
 800c6da:	4b5b      	ldr	r3, [pc, #364]	; (800c848 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800c6dc:	edd3 7a00 	vldr	s15, [r3]
 800c6e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6e4:	4b58      	ldr	r3, [pc, #352]	; (800c848 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800c6e6:	edc3 7a00 	vstr	s15, [r3]
			old_omega_z = gyro_read_z();
 800c6ea:	f7ff fd41 	bl	800c170 <gyro_read_z>
 800c6ee:	eef0 7a40 	vmov.f32	s15, s0
 800c6f2:	4b54      	ldr	r3, [pc, #336]	; (800c844 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800c6f4:	edc3 7a00 	vstr	s15, [r3]
			full_led_write(YELLOW);
 800c6f8:	2006      	movs	r0, #6
 800c6fa:	f004 ff4b 	bl	8011594 <full_led_write>
			if(gyro_cnt >= 1001) {
 800c6fe:	4b50      	ldr	r3, [pc, #320]	; (800c840 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c706:	dd1c      	ble.n	800c742 <HAL_TIM_PeriodElapsedCallback+0x512>
				MF2.FLAG.GDRIFT = 0;
 800c708:	4a46      	ldr	r2, [pc, #280]	; (800c824 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800c70a:	8813      	ldrh	r3, [r2, #0]
 800c70c:	f36f 13c7 	bfc	r3, #7, #1
 800c710:	8013      	strh	r3, [r2, #0]
				gyro_drift_value = dif_omega_z / gyro_cnt-1;
 800c712:	4b4d      	ldr	r3, [pc, #308]	; (800c848 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800c714:	edd3 6a00 	vldr	s13, [r3]
 800c718:	4b49      	ldr	r3, [pc, #292]	; (800c840 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	ee07 3a90 	vmov	s15, r3
 800c720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c72c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c730:	4b46      	ldr	r3, [pc, #280]	; (800c84c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800c732:	edc3 7a00 	vstr	s15, [r3]
				gyro_cnt = 0;
 800c736:	4b42      	ldr	r3, [pc, #264]	; (800c840 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800c738:	2200      	movs	r2, #0
 800c73a:	601a      	str	r2, [r3, #0]
				full_led_write(BLUEGREEN);
 800c73c:	2004      	movs	r0, #4
 800c73e:	f004 ff29 	bl	8011594 <full_led_write>
			}
			degree_z = 0;
 800c742:	4b3e      	ldr	r3, [pc, #248]	; (800c83c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800c744:	f04f 0200 	mov.w	r2, #0
 800c748:	601a      	str	r2, [r3, #0]
			target_degree_z = 0;
 800c74a:	4b41      	ldr	r3, [pc, #260]	; (800c850 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800c74c:	f04f 0200 	mov.w	r2, #0
 800c750:	601a      	str	r2, [r3, #0]
		}


		if(MF2.FLAG.ENKAI){
 800c752:	4b34      	ldr	r3, [pc, #208]	; (800c824 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800c754:	881b      	ldrh	r3, [r3, #0]
 800c756:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f000 80d6 	beq.w	800c90e <HAL_TIM_PeriodElapsedCallback+0x6de>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 800c762:	4b36      	ldr	r3, [pc, #216]	; (800c83c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800c764:	ed93 7a00 	vldr	s14, [r3]
 800c768:	4b39      	ldr	r3, [pc, #228]	; (800c850 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800c76a:	edd3 7a00 	vldr	s15, [r3]
 800c76e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c772:	ee17 0a90 	vmov	r0, s15
 800c776:	f7f3 fedf 	bl	8000538 <__aeabi_f2d>
 800c77a:	a321      	add	r3, pc, #132	; (adr r3, 800c800 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800c77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c780:	f7f3 ff32 	bl	80005e8 <__aeabi_dmul>
 800c784:	4603      	mov	r3, r0
 800c786:	460c      	mov	r4, r1
 800c788:	4618      	mov	r0, r3
 800c78a:	4621      	mov	r1, r4
 800c78c:	f7f4 fa04 	bl	8000b98 <__aeabi_d2f>
 800c790:	4602      	mov	r2, r0
 800c792:	4b30      	ldr	r3, [pc, #192]	; (800c854 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800c794:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 800c796:	4b2f      	ldr	r3, [pc, #188]	; (800c854 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800c798:	edd3 7a00 	vldr	s15, [r3]
 800c79c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a4:	dd5c      	ble.n	800c860 <HAL_TIM_PeriodElapsedCallback+0x630>
				target_speed_l = sqrt(2*accel_l*target_dist);
 800c7a6:	4b2c      	ldr	r3, [pc, #176]	; (800c858 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800c7a8:	edd3 7a00 	vldr	s15, [r3]
 800c7ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800c7b0:	4b28      	ldr	r3, [pc, #160]	; (800c854 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800c7b2:	edd3 7a00 	vldr	s15, [r3]
 800c7b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ba:	ee17 0a90 	vmov	r0, s15
 800c7be:	f7f3 febb 	bl	8000538 <__aeabi_f2d>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	460c      	mov	r4, r1
 800c7c6:	ec44 3b10 	vmov	d0, r3, r4
 800c7ca:	f006 fc7d 	bl	80130c8 <sqrt>
 800c7ce:	ec54 3b10 	vmov	r3, r4, d0
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	f7f4 f9df 	bl	8000b98 <__aeabi_d2f>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	4b1f      	ldr	r3, [pc, #124]	; (800c85c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800c7de:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 800c7e0:	4b1e      	ldr	r3, [pc, #120]	; (800c85c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800c7e2:	edd3 7a00 	vldr	s15, [r3]
 800c7e6:	eef1 7a67 	vneg.f32	s15, s15
 800c7ea:	4b07      	ldr	r3, [pc, #28]	; (800c808 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800c7ec:	edc3 7a00 	vstr	s15, [r3]
 800c7f0:	e063      	b.n	800c8ba <HAL_TIM_PeriodElapsedCallback+0x68a>
 800c7f2:	bf00      	nop
 800c7f4:	f3af 8000 	nop.w
 800c7f8:	d2f1a9fc 	.word	0xd2f1a9fc
 800c7fc:	3f50624d 	.word	0x3f50624d
 800c800:	d7653223 	.word	0xd7653223
 800c804:	3fe26e40 	.word	0x3fe26e40
 800c808:	200001a0 	.word	0x200001a0
 800c80c:	20000f6c 	.word	0x20000f6c
 800c810:	200001a4 	.word	0x200001a4
 800c814:	200002bc 	.word	0x200002bc
 800c818:	20000c08 	.word	0x20000c08
 800c81c:	20000780 	.word	0x20000780
 800c820:	20000108 	.word	0x20000108
 800c824:	20000f64 	.word	0x20000f64
 800c828:	20000110 	.word	0x20000110
 800c82c:	20000af0 	.word	0x20000af0
 800c830:	20000784 	.word	0x20000784
 800c834:	2000045c 	.word	0x2000045c
 800c838:	200012a4 	.word	0x200012a4
 800c83c:	20000b5c 	.word	0x20000b5c
 800c840:	2000010c 	.word	0x2000010c
 800c844:	200015cc 	.word	0x200015cc
 800c848:	20000ba4 	.word	0x20000ba4
 800c84c:	20000bf4 	.word	0x20000bf4
 800c850:	20000bf8 	.word	0x20000bf8
 800c854:	20000f78 	.word	0x20000f78
 800c858:	20000d58 	.word	0x20000d58
 800c85c:	20000bfc 	.word	0x20000bfc
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 800c860:	4bac      	ldr	r3, [pc, #688]	; (800cb14 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800c862:	edd3 7a00 	vldr	s15, [r3]
 800c866:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800c86a:	4bab      	ldr	r3, [pc, #684]	; (800cb18 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800c86c:	edd3 7a00 	vldr	s15, [r3]
 800c870:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c874:	eef1 7a67 	vneg.f32	s15, s15
 800c878:	ee17 3a90 	vmov	r3, s15
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7f3 fe5b 	bl	8000538 <__aeabi_f2d>
 800c882:	4603      	mov	r3, r0
 800c884:	460c      	mov	r4, r1
 800c886:	ec44 3b10 	vmov	d0, r3, r4
 800c88a:	f006 fc1d 	bl	80130c8 <sqrt>
 800c88e:	ec54 3b10 	vmov	r3, r4, d0
 800c892:	4618      	mov	r0, r3
 800c894:	4621      	mov	r1, r4
 800c896:	f7f4 f97f 	bl	8000b98 <__aeabi_d2f>
 800c89a:	4603      	mov	r3, r0
 800c89c:	ee07 3a90 	vmov	s15, r3
 800c8a0:	eef1 7a67 	vneg.f32	s15, s15
 800c8a4:	4b9d      	ldr	r3, [pc, #628]	; (800cb1c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800c8a6:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 800c8aa:	4b9c      	ldr	r3, [pc, #624]	; (800cb1c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800c8ac:	edd3 7a00 	vldr	s15, [r3]
 800c8b0:	eef1 7a67 	vneg.f32	s15, s15
 800c8b4:	4b9a      	ldr	r3, [pc, #616]	; (800cb20 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800c8b6:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 800c8ba:	4b98      	ldr	r3, [pc, #608]	; (800cb1c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800c8bc:	ed93 7a00 	vldr	s14, [r3]
 800c8c0:	4b98      	ldr	r3, [pc, #608]	; (800cb24 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800c8c2:	edd3 7a00 	vldr	s15, [r3]
 800c8c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8ca:	4b97      	ldr	r3, [pc, #604]	; (800cb28 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800c8cc:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800c8d0:	4b95      	ldr	r3, [pc, #596]	; (800cb28 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800c8d2:	edd3 7a00 	vldr	s15, [r3]
 800c8d6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c8da:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c8de:	4b93      	ldr	r3, [pc, #588]	; (800cb2c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800c8e0:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800c8e4:	4b8e      	ldr	r3, [pc, #568]	; (800cb20 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800c8e6:	ed93 7a00 	vldr	s14, [r3]
 800c8ea:	4b91      	ldr	r3, [pc, #580]	; (800cb30 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800c8ec:	edd3 7a00 	vldr	s15, [r3]
 800c8f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8f4:	4b8f      	ldr	r3, [pc, #572]	; (800cb34 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800c8f6:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800c8fa:	4b8e      	ldr	r3, [pc, #568]	; (800cb34 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800c8fc:	edd3 7a00 	vldr	s15, [r3]
 800c900:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c904:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c908:	4b8b      	ldr	r3, [pc, #556]	; (800cb38 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800c90a:	edc3 7a00 	vstr	s15, [r3]
		}


		if(MF.FLAG.FWALL){
 800c90e:	4b8b      	ldr	r3, [pc, #556]	; (800cb3c <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800c910:	881b      	ldrh	r3, [r3, #0]
 800c912:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c916:	b2db      	uxtb	r3, r3
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f000 8124 	beq.w	800cb66 <HAL_TIM_PeriodElapsedCallback+0x936>
			target_speed_l = (int16_t)(OFFSET_FWALL_L - ad_fl)*0.5;//0.75;
 800c91e:	4b88      	ldr	r3, [pc, #544]	; (800cb40 <HAL_TIM_PeriodElapsedCallback+0x910>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	b29b      	uxth	r3, r3
 800c924:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800c928:	3304      	adds	r3, #4
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	b21b      	sxth	r3, r3
 800c92e:	4618      	mov	r0, r3
 800c930:	f7f3 fdf0 	bl	8000514 <__aeabi_i2d>
 800c934:	f04f 0200 	mov.w	r2, #0
 800c938:	4b82      	ldr	r3, [pc, #520]	; (800cb44 <HAL_TIM_PeriodElapsedCallback+0x914>)
 800c93a:	f7f3 fe55 	bl	80005e8 <__aeabi_dmul>
 800c93e:	4603      	mov	r3, r0
 800c940:	460c      	mov	r4, r1
 800c942:	4618      	mov	r0, r3
 800c944:	4621      	mov	r1, r4
 800c946:	f7f4 f927 	bl	8000b98 <__aeabi_d2f>
 800c94a:	4602      	mov	r2, r0
 800c94c:	4b73      	ldr	r3, [pc, #460]	; (800cb1c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800c94e:	601a      	str	r2, [r3, #0]
			target_speed_r = (int16_t)(OFFSET_FWALL_R - ad_fr);//*1.5;
 800c950:	4b7d      	ldr	r3, [pc, #500]	; (800cb48 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	b29b      	uxth	r3, r3
 800c956:	f5c3 7361 	rsb	r3, r3, #900	; 0x384
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	b21b      	sxth	r3, r3
 800c95e:	ee07 3a90 	vmov	s15, r3
 800c962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c966:	4b6e      	ldr	r3, [pc, #440]	; (800cb20 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800c968:	edc3 7a00 	vstr	s15, [r3]

			if(target_speed_l*target_speed_l < 2500)target_speed_l = 0;
 800c96c:	4b6b      	ldr	r3, [pc, #428]	; (800cb1c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800c96e:	ed93 7a00 	vldr	s14, [r3]
 800c972:	4b6a      	ldr	r3, [pc, #424]	; (800cb1c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800c974:	edd3 7a00 	vldr	s15, [r3]
 800c978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c97c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800cb4c <HAL_TIM_PeriodElapsedCallback+0x91c>
 800c980:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c988:	d503      	bpl.n	800c992 <HAL_TIM_PeriodElapsedCallback+0x762>
 800c98a:	4b64      	ldr	r3, [pc, #400]	; (800cb1c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800c98c:	f04f 0200 	mov.w	r2, #0
 800c990:	601a      	str	r2, [r3, #0]
			if(target_speed_r*target_speed_r < 2500)target_speed_r = 0;
 800c992:	4b63      	ldr	r3, [pc, #396]	; (800cb20 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800c994:	ed93 7a00 	vldr	s14, [r3]
 800c998:	4b61      	ldr	r3, [pc, #388]	; (800cb20 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800c99a:	edd3 7a00 	vldr	s15, [r3]
 800c99e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9a2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800cb4c <HAL_TIM_PeriodElapsedCallback+0x91c>
 800c9a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9ae:	d503      	bpl.n	800c9b8 <HAL_TIM_PeriodElapsedCallback+0x788>
 800c9b0:	4b5b      	ldr	r3, [pc, #364]	; (800cb20 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800c9b2:	f04f 0200 	mov.w	r2, #0
 800c9b6:	601a      	str	r2, [r3, #0]
			if(target_speed_l == 0 && target_speed_r == 0){
 800c9b8:	4b58      	ldr	r3, [pc, #352]	; (800cb1c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800c9ba:	edd3 7a00 	vldr	s15, [r3]
 800c9be:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9c6:	d111      	bne.n	800c9ec <HAL_TIM_PeriodElapsedCallback+0x7bc>
 800c9c8:	4b55      	ldr	r3, [pc, #340]	; (800cb20 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800c9ca:	edd3 7a00 	vldr	s15, [r3]
 800c9ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9d6:	d109      	bne.n	800c9ec <HAL_TIM_PeriodElapsedCallback+0x7bc>
				MF.FLAG.FWALL = 0;
 800c9d8:	4a58      	ldr	r2, [pc, #352]	; (800cb3c <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800c9da:	8813      	ldrh	r3, [r2, #0]
 800c9dc:	f36f 13c7 	bfc	r3, #7, #1
 800c9e0:	8013      	strh	r3, [r2, #0]
				MF.FLAG.DRV = 0;
 800c9e2:	4a56      	ldr	r2, [pc, #344]	; (800cb3c <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800c9e4:	8813      	ldrh	r3, [r2, #0]
 800c9e6:	f36f 0341 	bfc	r3, #1, #1
 800c9ea:	8013      	strh	r3, [r2, #0]
			}

			epsilon_l = target_speed_l - speed_l;
 800c9ec:	4b4b      	ldr	r3, [pc, #300]	; (800cb1c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800c9ee:	ed93 7a00 	vldr	s14, [r3]
 800c9f2:	4b4c      	ldr	r3, [pc, #304]	; (800cb24 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800c9f4:	edd3 7a00 	vldr	s15, [r3]
 800c9f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9fc:	4b4a      	ldr	r3, [pc, #296]	; (800cb28 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800c9fe:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800ca02:	4b49      	ldr	r3, [pc, #292]	; (800cb28 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800ca04:	edd3 7a00 	vldr	s15, [r3]
 800ca08:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800ca0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ca10:	4b46      	ldr	r3, [pc, #280]	; (800cb2c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ca12:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800ca16:	4b42      	ldr	r3, [pc, #264]	; (800cb20 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800ca18:	ed93 7a00 	vldr	s14, [r3]
 800ca1c:	4b44      	ldr	r3, [pc, #272]	; (800cb30 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800ca1e:	edd3 7a00 	vldr	s15, [r3]
 800ca22:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca26:	4b43      	ldr	r3, [pc, #268]	; (800cb34 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800ca28:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800ca2c:	4b41      	ldr	r3, [pc, #260]	; (800cb34 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800ca2e:	edd3 7a00 	vldr	s15, [r3]
 800ca32:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800ca36:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ca3a:	4b3f      	ldr	r3, [pc, #252]	; (800cb38 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800ca3c:	edc3 7a00 	vstr	s15, [r3]

			pulse_l = min(max(pulse_l, -100), 100);
 800ca40:	4b3a      	ldr	r3, [pc, #232]	; (800cb2c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ca42:	edd3 7a00 	vldr	s15, [r3]
 800ca46:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800cb50 <HAL_TIM_PeriodElapsedCallback+0x920>
 800ca4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca52:	bfcc      	ite	gt
 800ca54:	2301      	movgt	r3, #1
 800ca56:	2300      	movle	r3, #0
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	f083 0301 	eor.w	r3, r3, #1
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d111      	bne.n	800ca88 <HAL_TIM_PeriodElapsedCallback+0x858>
 800ca64:	4b31      	ldr	r3, [pc, #196]	; (800cb2c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ca66:	edd3 7a00 	vldr	s15, [r3]
 800ca6a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800cb54 <HAL_TIM_PeriodElapsedCallback+0x924>
 800ca6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca76:	bfcc      	ite	gt
 800ca78:	2301      	movgt	r3, #1
 800ca7a:	2300      	movle	r3, #0
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	f083 0301 	eor.w	r3, r3, #1
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d00e      	beq.n	800caa6 <HAL_TIM_PeriodElapsedCallback+0x876>
 800ca88:	4b28      	ldr	r3, [pc, #160]	; (800cb2c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ca8a:	edd3 7a00 	vldr	s15, [r3]
 800ca8e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800cb50 <HAL_TIM_PeriodElapsedCallback+0x920>
 800ca92:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca9a:	dd02      	ble.n	800caa2 <HAL_TIM_PeriodElapsedCallback+0x872>
 800ca9c:	4b23      	ldr	r3, [pc, #140]	; (800cb2c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	e002      	b.n	800caa8 <HAL_TIM_PeriodElapsedCallback+0x878>
 800caa2:	4b2d      	ldr	r3, [pc, #180]	; (800cb58 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800caa4:	e000      	b.n	800caa8 <HAL_TIM_PeriodElapsedCallback+0x878>
 800caa6:	4b2d      	ldr	r3, [pc, #180]	; (800cb5c <HAL_TIM_PeriodElapsedCallback+0x92c>)
 800caa8:	4a20      	ldr	r2, [pc, #128]	; (800cb2c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800caaa:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -100), 100);
 800caac:	4b22      	ldr	r3, [pc, #136]	; (800cb38 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800caae:	edd3 7a00 	vldr	s15, [r3]
 800cab2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800cb50 <HAL_TIM_PeriodElapsedCallback+0x920>
 800cab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800caba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cabe:	bfcc      	ite	gt
 800cac0:	2301      	movgt	r3, #1
 800cac2:	2300      	movle	r3, #0
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	f083 0301 	eor.w	r3, r3, #1
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d111      	bne.n	800caf4 <HAL_TIM_PeriodElapsedCallback+0x8c4>
 800cad0:	4b19      	ldr	r3, [pc, #100]	; (800cb38 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800cad2:	edd3 7a00 	vldr	s15, [r3]
 800cad6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800cb54 <HAL_TIM_PeriodElapsedCallback+0x924>
 800cada:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cae2:	bfcc      	ite	gt
 800cae4:	2301      	movgt	r3, #1
 800cae6:	2300      	movle	r3, #0
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	f083 0301 	eor.w	r3, r3, #1
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d035      	beq.n	800cb60 <HAL_TIM_PeriodElapsedCallback+0x930>
 800caf4:	4b10      	ldr	r3, [pc, #64]	; (800cb38 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800caf6:	edd3 7a00 	vldr	s15, [r3]
 800cafa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800cb50 <HAL_TIM_PeriodElapsedCallback+0x920>
 800cafe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb06:	dd02      	ble.n	800cb0e <HAL_TIM_PeriodElapsedCallback+0x8de>
 800cb08:	4b0b      	ldr	r3, [pc, #44]	; (800cb38 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	e029      	b.n	800cb62 <HAL_TIM_PeriodElapsedCallback+0x932>
 800cb0e:	4b12      	ldr	r3, [pc, #72]	; (800cb58 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800cb10:	e027      	b.n	800cb62 <HAL_TIM_PeriodElapsedCallback+0x932>
 800cb12:	bf00      	nop
 800cb14:	20000d58 	.word	0x20000d58
 800cb18:	20000f78 	.word	0x20000f78
 800cb1c:	20000bfc 	.word	0x20000bfc
 800cb20:	200001a0 	.word	0x200001a0
 800cb24:	20000af0 	.word	0x20000af0
 800cb28:	20000b60 	.word	0x20000b60
 800cb2c:	20000ba8 	.word	0x20000ba8
 800cb30:	200002bc 	.word	0x200002bc
 800cb34:	20000c08 	.word	0x20000c08
 800cb38:	20000780 	.word	0x20000780
 800cb3c:	20000f68 	.word	0x20000f68
 800cb40:	20000d54 	.word	0x20000d54
 800cb44:	3fe00000 	.word	0x3fe00000
 800cb48:	20000c00 	.word	0x20000c00
 800cb4c:	451c4000 	.word	0x451c4000
 800cb50:	c2c80000 	.word	0xc2c80000
 800cb54:	42c80000 	.word	0x42c80000
 800cb58:	c2c80000 	.word	0xc2c80000
 800cb5c:	42c80000 	.word	0x42c80000
 800cb60:	4bbf      	ldr	r3, [pc, #764]	; (800ce60 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800cb62:	4ac0      	ldr	r2, [pc, #768]	; (800ce64 <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800cb64:	6013      	str	r3, [r2, #0]
		}


		if(MF.FLAG.GYRO){
 800cb66:	4bc0      	ldr	r3, [pc, #768]	; (800ce68 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 800cb68:	881b      	ldrh	r3, [r3, #0]
 800cb6a:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	f000 810b 	beq.w	800cd8c <HAL_TIM_PeriodElapsedCallback+0xb5c>
			target_omega_z += target_degaccel_z * 0.001;
 800cb76:	4bbd      	ldr	r3, [pc, #756]	; (800ce6c <HAL_TIM_PeriodElapsedCallback+0xc3c>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7f3 fcdc 	bl	8000538 <__aeabi_f2d>
 800cb80:	a3b3      	add	r3, pc, #716	; (adr r3, 800ce50 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800cb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb86:	f7f3 fd2f 	bl	80005e8 <__aeabi_dmul>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	460c      	mov	r4, r1
 800cb8e:	4625      	mov	r5, r4
 800cb90:	461c      	mov	r4, r3
 800cb92:	4bb7      	ldr	r3, [pc, #732]	; (800ce70 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7f3 fcce 	bl	8000538 <__aeabi_f2d>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	460b      	mov	r3, r1
 800cba0:	4620      	mov	r0, r4
 800cba2:	4629      	mov	r1, r5
 800cba4:	f7f3 fb6a 	bl	800027c <__adddf3>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	460c      	mov	r4, r1
 800cbac:	4618      	mov	r0, r3
 800cbae:	4621      	mov	r1, r4
 800cbb0:	f7f3 fff2 	bl	8000b98 <__aeabi_d2f>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	4bae      	ldr	r3, [pc, #696]	; (800ce70 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cbb8:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 800cbba:	4bad      	ldr	r3, [pc, #692]	; (800ce70 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cbbc:	ed93 7a00 	vldr	s14, [r3]
 800cbc0:	4bac      	ldr	r3, [pc, #688]	; (800ce74 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800cbc2:	edd3 7a00 	vldr	s15, [r3]
 800cbc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cbca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbce:	dd03      	ble.n	800cbd8 <HAL_TIM_PeriodElapsedCallback+0x9a8>
 800cbd0:	4ba8      	ldr	r3, [pc, #672]	; (800ce74 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800cbd2:	edd3 7a00 	vldr	s15, [r3]
 800cbd6:	e002      	b.n	800cbde <HAL_TIM_PeriodElapsedCallback+0x9ae>
 800cbd8:	4ba5      	ldr	r3, [pc, #660]	; (800ce70 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cbda:	edd3 7a00 	vldr	s15, [r3]
 800cbde:	4ba6      	ldr	r3, [pc, #664]	; (800ce78 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800cbe0:	ed93 7a00 	vldr	s14, [r3]
 800cbe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbec:	dd10      	ble.n	800cc10 <HAL_TIM_PeriodElapsedCallback+0x9e0>
 800cbee:	4ba0      	ldr	r3, [pc, #640]	; (800ce70 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cbf0:	ed93 7a00 	vldr	s14, [r3]
 800cbf4:	4b9f      	ldr	r3, [pc, #636]	; (800ce74 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800cbf6:	edd3 7a00 	vldr	s15, [r3]
 800cbfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc02:	dd02      	ble.n	800cc0a <HAL_TIM_PeriodElapsedCallback+0x9da>
 800cc04:	4b9b      	ldr	r3, [pc, #620]	; (800ce74 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	e004      	b.n	800cc14 <HAL_TIM_PeriodElapsedCallback+0x9e4>
 800cc0a:	4b99      	ldr	r3, [pc, #612]	; (800ce70 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	e001      	b.n	800cc14 <HAL_TIM_PeriodElapsedCallback+0x9e4>
 800cc10:	4b99      	ldr	r3, [pc, #612]	; (800ce78 <HAL_TIM_PeriodElapsedCallback+0xc48>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a96      	ldr	r2, [pc, #600]	; (800ce70 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cc16:	6013      	str	r3, [r2, #0]

			epsilon_omega = target_omega_z - gyro_read_z();
 800cc18:	4b95      	ldr	r3, [pc, #596]	; (800ce70 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cc1a:	ed93 8a00 	vldr	s16, [r3]
 800cc1e:	f7ff faa7 	bl	800c170 <gyro_read_z>
 800cc22:	eef0 7a40 	vmov.f32	s15, s0
 800cc26:	ee78 7a67 	vsub.f32	s15, s16, s15
 800cc2a:	4b94      	ldr	r3, [pc, #592]	; (800ce7c <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800cc2c:	edc3 7a00 	vstr	s15, [r3]

			target_speed_l = speed_G - (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800cc30:	4b93      	ldr	r3, [pc, #588]	; (800ce80 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7f3 fc7f 	bl	8000538 <__aeabi_f2d>
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	460d      	mov	r5, r1
 800cc3e:	4b8f      	ldr	r3, [pc, #572]	; (800ce7c <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800cc40:	edd3 7a00 	vldr	s15, [r3]
 800cc44:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800cc48:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cc4c:	4b88      	ldr	r3, [pc, #544]	; (800ce70 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800cc4e:	edd3 7a00 	vldr	s15, [r3]
 800cc52:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc56:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800ce84 <HAL_TIM_PeriodElapsedCallback+0xc54>
 800cc5a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cc5e:	ee16 0a90 	vmov	r0, s13
 800cc62:	f7f3 fc69 	bl	8000538 <__aeabi_f2d>
 800cc66:	a37c      	add	r3, pc, #496	; (adr r3, 800ce58 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800cc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6c:	f7f3 fcbc 	bl	80005e8 <__aeabi_dmul>
 800cc70:	4602      	mov	r2, r0
 800cc72:	460b      	mov	r3, r1
 800cc74:	4610      	mov	r0, r2
 800cc76:	4619      	mov	r1, r3
 800cc78:	f04f 0200 	mov.w	r2, #0
 800cc7c:	4b82      	ldr	r3, [pc, #520]	; (800ce88 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 800cc7e:	f7f3 fcb3 	bl	80005e8 <__aeabi_dmul>
 800cc82:	4602      	mov	r2, r0
 800cc84:	460b      	mov	r3, r1
 800cc86:	4610      	mov	r0, r2
 800cc88:	4619      	mov	r1, r3
 800cc8a:	f04f 0200 	mov.w	r2, #0
 800cc8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc92:	f7f3 fdd3 	bl	800083c <__aeabi_ddiv>
 800cc96:	4602      	mov	r2, r0
 800cc98:	460b      	mov	r3, r1
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	4629      	mov	r1, r5
 800cc9e:	f7f3 faeb 	bl	8000278 <__aeabi_dsub>
 800cca2:	4603      	mov	r3, r0
 800cca4:	460c      	mov	r4, r1
 800cca6:	4618      	mov	r0, r3
 800cca8:	4621      	mov	r1, r4
 800ccaa:	f7f3 ff75 	bl	8000b98 <__aeabi_d2f>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	4b76      	ldr	r3, [pc, #472]	; (800ce8c <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800ccb2:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G + (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800ccb4:	4b72      	ldr	r3, [pc, #456]	; (800ce80 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7f3 fc3d 	bl	8000538 <__aeabi_f2d>
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	460d      	mov	r5, r1
 800ccc2:	4b6e      	ldr	r3, [pc, #440]	; (800ce7c <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800ccc4:	edd3 7a00 	vldr	s15, [r3]
 800ccc8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800cccc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ccd0:	4b67      	ldr	r3, [pc, #412]	; (800ce70 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800ccd2:	edd3 7a00 	vldr	s15, [r3]
 800ccd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ccda:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800ce84 <HAL_TIM_PeriodElapsedCallback+0xc54>
 800ccde:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cce2:	ee16 0a90 	vmov	r0, s13
 800cce6:	f7f3 fc27 	bl	8000538 <__aeabi_f2d>
 800ccea:	a35b      	add	r3, pc, #364	; (adr r3, 800ce58 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800ccec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf0:	f7f3 fc7a 	bl	80005e8 <__aeabi_dmul>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	4610      	mov	r0, r2
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	f04f 0200 	mov.w	r2, #0
 800cd00:	4b61      	ldr	r3, [pc, #388]	; (800ce88 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 800cd02:	f7f3 fc71 	bl	80005e8 <__aeabi_dmul>
 800cd06:	4602      	mov	r2, r0
 800cd08:	460b      	mov	r3, r1
 800cd0a:	4610      	mov	r0, r2
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	f04f 0200 	mov.w	r2, #0
 800cd12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd16:	f7f3 fd91 	bl	800083c <__aeabi_ddiv>
 800cd1a:	4602      	mov	r2, r0
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	4620      	mov	r0, r4
 800cd20:	4629      	mov	r1, r5
 800cd22:	f7f3 faab 	bl	800027c <__adddf3>
 800cd26:	4603      	mov	r3, r0
 800cd28:	460c      	mov	r4, r1
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	4621      	mov	r1, r4
 800cd2e:	f7f3 ff33 	bl	8000b98 <__aeabi_d2f>
 800cd32:	4602      	mov	r2, r0
 800cd34:	4b56      	ldr	r3, [pc, #344]	; (800ce90 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800cd36:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 800cd38:	4b54      	ldr	r3, [pc, #336]	; (800ce8c <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800cd3a:	ed93 7a00 	vldr	s14, [r3]
 800cd3e:	4b55      	ldr	r3, [pc, #340]	; (800ce94 <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800cd40:	edd3 7a00 	vldr	s15, [r3]
 800cd44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd48:	4b53      	ldr	r3, [pc, #332]	; (800ce98 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800cd4a:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800cd4e:	4b52      	ldr	r3, [pc, #328]	; (800ce98 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800cd50:	edd3 7a00 	vldr	s15, [r3]
 800cd54:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800cd58:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd5c:	4b4f      	ldr	r3, [pc, #316]	; (800ce9c <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 800cd5e:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800cd62:	4b4b      	ldr	r3, [pc, #300]	; (800ce90 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800cd64:	ed93 7a00 	vldr	s14, [r3]
 800cd68:	4b4d      	ldr	r3, [pc, #308]	; (800cea0 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 800cd6a:	edd3 7a00 	vldr	s15, [r3]
 800cd6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd72:	4b4c      	ldr	r3, [pc, #304]	; (800cea4 <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800cd74:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800cd78:	4b4a      	ldr	r3, [pc, #296]	; (800cea4 <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800cd7a:	edd3 7a00 	vldr	s15, [r3]
 800cd7e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800cd82:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd86:	4b37      	ldr	r3, [pc, #220]	; (800ce64 <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800cd88:	edc3 7a00 	vstr	s15, [r3]
		}


		//ADchange interrupt
		uint16_t delay;
		tp = (tp+1)%3;
 800cd8c:	4b46      	ldr	r3, [pc, #280]	; (800cea8 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	1c5a      	adds	r2, r3, #1
 800cd92:	4b46      	ldr	r3, [pc, #280]	; (800ceac <HAL_TIM_PeriodElapsedCallback+0xc7c>)
 800cd94:	fb83 3102 	smull	r3, r1, r3, r2
 800cd98:	17d3      	asrs	r3, r2, #31
 800cd9a:	1ac9      	subs	r1, r1, r3
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	005b      	lsls	r3, r3, #1
 800cda0:	440b      	add	r3, r1
 800cda2:	1ad1      	subs	r1, r2, r3
 800cda4:	b2ca      	uxtb	r2, r1
 800cda6:	4b40      	ldr	r3, [pc, #256]	; (800cea8 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800cda8:	701a      	strb	r2, [r3, #0]

		switch(tp){
 800cdaa:	4b3f      	ldr	r3, [pc, #252]	; (800cea8 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d044      	beq.n	800ce3c <HAL_TIM_PeriodElapsedCallback+0xc0c>
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	f000 80bc 	beq.w	800cf30 <HAL_TIM_PeriodElapsedCallback+0xd00>
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f040 82da 	bne.w	800d372 <HAL_TIM_PeriodElapsedCallback+0x1142>
		  case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); 	//L
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800cdc4:	483a      	ldr	r0, [pc, #232]	; (800ceb0 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800cdc6:	f7f5 fa9d 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800cdca:	2300      	movs	r3, #0
 800cdcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cdce:	e002      	b.n	800cdd6 <HAL_TIM_PeriodElapsedCallback+0xba6>
 800cdd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cdd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cdd8:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d9f7      	bls.n	800cdd0 <HAL_TIM_PeriodElapsedCallback+0xba0>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_3);			//L
 800cde0:	2103      	movs	r1, #3
 800cde2:	4834      	ldr	r0, [pc, #208]	; (800ceb4 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800cde4:	f001 fa38 	bl	800e258 <get_adc_value>
 800cde8:	4603      	mov	r3, r0
 800cdea:	461a      	mov	r2, r3
 800cdec:	4b32      	ldr	r3, [pc, #200]	; (800ceb8 <HAL_TIM_PeriodElapsedCallback+0xc88>)
 800cdee:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800cdf6:	482e      	ldr	r0, [pc, #184]	; (800ceb0 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800cdf8:	f7f5 fa84 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  	//R
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ce02:	482e      	ldr	r0, [pc, #184]	; (800cebc <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800ce04:	f7f5 fa7e 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800ce08:	2300      	movs	r3, #0
 800ce0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ce0c:	e002      	b.n	800ce14 <HAL_TIM_PeriodElapsedCallback+0xbe4>
 800ce0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ce10:	3301      	adds	r3, #1
 800ce12:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ce14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ce16:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d9f7      	bls.n	800ce0e <HAL_TIM_PeriodElapsedCallback+0xbde>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_1);			//R
 800ce1e:	2101      	movs	r1, #1
 800ce20:	4824      	ldr	r0, [pc, #144]	; (800ceb4 <HAL_TIM_PeriodElapsedCallback+0xc84>)
 800ce22:	f001 fa19 	bl	800e258 <get_adc_value>
 800ce26:	4603      	mov	r3, r0
 800ce28:	461a      	mov	r2, r3
 800ce2a:	4b25      	ldr	r3, [pc, #148]	; (800cec0 <HAL_TIM_PeriodElapsedCallback+0xc90>)
 800ce2c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ce34:	4821      	ldr	r0, [pc, #132]	; (800cebc <HAL_TIM_PeriodElapsedCallback+0xc8c>)
 800ce36:	f7f5 fa65 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800ce3a:	e29a      	b.n	800d372 <HAL_TIM_PeriodElapsedCallback+0x1142>

		  case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); 	//FL
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ce42:	481b      	ldr	r0, [pc, #108]	; (800ceb0 <HAL_TIM_PeriodElapsedCallback+0xc80>)
 800ce44:	f7f5 fa5e 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800ce48:	2300      	movs	r3, #0
 800ce4a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ce4c:	e03d      	b.n	800ceca <HAL_TIM_PeriodElapsedCallback+0xc9a>
 800ce4e:	bf00      	nop
 800ce50:	d2f1a9fc 	.word	0xd2f1a9fc
 800ce54:	3f50624d 	.word	0x3f50624d
 800ce58:	54442d18 	.word	0x54442d18
 800ce5c:	400921fb 	.word	0x400921fb
 800ce60:	42c80000 	.word	0x42c80000
 800ce64:	20000780 	.word	0x20000780
 800ce68:	20000f68 	.word	0x20000f68
 800ce6c:	20000b58 	.word	0x20000b58
 800ce70:	200001a8 	.word	0x200001a8
 800ce74:	20000ae8 	.word	0x20000ae8
 800ce78:	200002b8 	.word	0x200002b8
 800ce7c:	20000458 	.word	0x20000458
 800ce80:	20000af4 	.word	0x20000af4
 800ce84:	43340000 	.word	0x43340000
 800ce88:	40508000 	.word	0x40508000
 800ce8c:	20000bfc 	.word	0x20000bfc
 800ce90:	200001a0 	.word	0x200001a0
 800ce94:	20000af0 	.word	0x20000af0
 800ce98:	20000b60 	.word	0x20000b60
 800ce9c:	20000ba8 	.word	0x20000ba8
 800cea0:	200002bc 	.word	0x200002bc
 800cea4:	20000c08 	.word	0x20000c08
 800cea8:	200012a0 	.word	0x200012a0
 800ceac:	55555556 	.word	0x55555556
 800ceb0:	40020800 	.word	0x40020800
 800ceb4:	20000b00 	.word	0x20000b00
 800ceb8:	20000afc 	.word	0x20000afc
 800cebc:	40020000 	.word	0x40020000
 800cec0:	20000f60 	.word	0x20000f60
 800cec4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cec6:	3301      	adds	r3, #1
 800cec8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ceca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cecc:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d9f7      	bls.n	800cec4 <HAL_TIM_PeriodElapsedCallback+0xc94>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_2);			//FL
 800ced4:	2102      	movs	r1, #2
 800ced6:	48b4      	ldr	r0, [pc, #720]	; (800d1a8 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800ced8:	f001 f9be 	bl	800e258 <get_adc_value>
 800cedc:	4603      	mov	r3, r0
 800cede:	461a      	mov	r2, r3
 800cee0:	4bb2      	ldr	r3, [pc, #712]	; (800d1ac <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800cee2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800cee4:	2200      	movs	r2, #0
 800cee6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ceea:	48b1      	ldr	r0, [pc, #708]	; (800d1b0 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800ceec:	f7f5 fa0a 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   	//FR
 800cef0:	2201      	movs	r2, #1
 800cef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cef6:	48ae      	ldr	r0, [pc, #696]	; (800d1b0 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800cef8:	f7f5 fa04 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800cefc:	2300      	movs	r3, #0
 800cefe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cf00:	e002      	b.n	800cf08 <HAL_TIM_PeriodElapsedCallback+0xcd8>
 800cf02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf04:	3301      	adds	r3, #1
 800cf06:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cf08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf0a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d9f7      	bls.n	800cf02 <HAL_TIM_PeriodElapsedCallback+0xcd2>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_0);			//FR
 800cf12:	2100      	movs	r1, #0
 800cf14:	48a4      	ldr	r0, [pc, #656]	; (800d1a8 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800cf16:	f001 f99f 	bl	800e258 <get_adc_value>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	4ba5      	ldr	r3, [pc, #660]	; (800d1b4 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 800cf20:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800cf22:	2200      	movs	r2, #0
 800cf24:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf28:	48a1      	ldr	r0, [pc, #644]	; (800d1b0 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 800cf2a:	f7f5 f9eb 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800cf2e:	e220      	b.n	800d372 <HAL_TIM_PeriodElapsedCallback+0x1142>

		  case 2:
				//
				if(MF.FLAG.WCTRL){
 800cf30:	4ba1      	ldr	r3, [pc, #644]	; (800d1b8 <HAL_TIM_PeriodElapsedCallback+0xf88>)
 800cf32:	881b      	ldrh	r3, [r3, #0]
 800cf34:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	f000 81c5 	beq.w	800d2ca <HAL_TIM_PeriodElapsedCallback+0x109a>
					if(!MF2.FLAG.V){
 800cf40:	4b9e      	ldr	r3, [pc, #632]	; (800d1bc <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800cf42:	881b      	ldrh	r3, [r3, #0]
 800cf44:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	f040 80bb 	bne.w	800d0c6 <HAL_TIM_PeriodElapsedCallback+0xe96>
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800cf50:	2300      	movs	r3, #0
 800cf52:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cf54:	2300      	movs	r3, #0
 800cf56:	857b      	strh	r3, [r7, #42]	; 0x2a
						dif_l = (int32_t) ad_l - base_l;
 800cf58:	4b99      	ldr	r3, [pc, #612]	; (800d1c0 <HAL_TIM_PeriodElapsedCallback+0xf90>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	4b99      	ldr	r3, [pc, #612]	; (800d1c4 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 800cf60:	881b      	ldrh	r3, [r3, #0]
 800cf62:	1ad3      	subs	r3, r2, r3
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	b21a      	sxth	r2, r3
 800cf68:	4b97      	ldr	r3, [pc, #604]	; (800d1c8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800cf6a:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_r - base_r;
 800cf6c:	4b97      	ldr	r3, [pc, #604]	; (800d1cc <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	b29a      	uxth	r2, r3
 800cf72:	4b97      	ldr	r3, [pc, #604]	; (800d1d0 <HAL_TIM_PeriodElapsedCallback+0xfa0>)
 800cf74:	881b      	ldrh	r3, [r3, #0]
 800cf76:	1ad3      	subs	r3, r2, r3
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	b21a      	sxth	r2, r3
 800cf7c:	4b95      	ldr	r3, [pc, #596]	; (800d1d4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800cf7e:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_L || dif_r > CTRL_BASE_R){
 800cf80:	4b91      	ldr	r3, [pc, #580]	; (800d1c8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800cf82:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf86:	2b23      	cmp	r3, #35	; 0x23
 800cf88:	dc04      	bgt.n	800cf94 <HAL_TIM_PeriodElapsedCallback+0xd64>
 800cf8a:	4b92      	ldr	r3, [pc, #584]	; (800d1d4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800cf8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf90:	2b1e      	cmp	r3, #30
 800cf92:	dd70      	ble.n	800d076 <HAL_TIM_PeriodElapsedCallback+0xe46>
							if(dif_l > CTRL_BASE_L){
 800cf94:	4b8c      	ldr	r3, [pc, #560]	; (800d1c8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800cf96:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf9a:	2b23      	cmp	r3, #35	; 0x23
 800cf9c:	dd30      	ble.n	800d000 <HAL_TIM_PeriodElapsedCallback+0xdd0>
								dwl_tmp += CTRL_CONT_W * dif_l;					//a比例制御値を決定
 800cf9e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800cfa2:	ee07 3a90 	vmov	s15, r3
 800cfa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cfaa:	4b87      	ldr	r3, [pc, #540]	; (800d1c8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800cfac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfb0:	ee07 3a90 	vmov	s15, r3
 800cfb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfb8:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800cfbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cfc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cfc8:	ee17 3a90 	vmov	r3, s15
 800cfcc:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += -1 * CTRL_CONT_W * dif_l;			//a比例制御値を決定
 800cfce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800cfd2:	ee07 3a90 	vmov	s15, r3
 800cfd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cfda:	4b7b      	ldr	r3, [pc, #492]	; (800d1c8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800cfdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfe0:	ee07 3a90 	vmov	s15, r3
 800cfe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfe8:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800cfec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cff4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cff8:	ee17 3a90 	vmov	r3, s15
 800cffc:	857b      	strh	r3, [r7, #42]	; 0x2a
 800cffe:	e034      	b.n	800d06a <HAL_TIM_PeriodElapsedCallback+0xe3a>
							}
							else if(dif_r > CTRL_BASE_R){
 800d000:	4b74      	ldr	r3, [pc, #464]	; (800d1d4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d002:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d006:	2b1e      	cmp	r3, #30
 800d008:	dd2f      	ble.n	800d06a <HAL_TIM_PeriodElapsedCallback+0xe3a>
								dwl_tmp += -1 * CTRL_CONT_W * dif_r;			//a比例制御値を決定
 800d00a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d00e:	ee07 3a90 	vmov	s15, r3
 800d012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d016:	4b6f      	ldr	r3, [pc, #444]	; (800d1d4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d01c:	ee07 3a90 	vmov	s15, r3
 800d020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d024:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800d028:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d02c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d034:	ee17 3a90 	vmov	r3, s15
 800d038:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += CTRL_CONT_W * dif_r;					//a比例制御値を決定
 800d03a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d03e:	ee07 3a90 	vmov	s15, r3
 800d042:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d046:	4b63      	ldr	r3, [pc, #396]	; (800d1d4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d04c:	ee07 3a90 	vmov	s15, r3
 800d050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d054:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800d058:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d05c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d064:	ee17 3a90 	vmov	r3, s15
 800d068:	857b      	strh	r3, [r7, #42]	; 0x2a
							}
							MF2.FLAG.WG = 1;
 800d06a:	4a54      	ldr	r2, [pc, #336]	; (800d1bc <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800d06c:	8813      	ldrh	r3, [r2, #0]
 800d06e:	f043 0310 	orr.w	r3, r3, #16
 800d072:	8013      	strh	r3, [r2, #0]
 800d074:	e004      	b.n	800d080 <HAL_TIM_PeriodElapsedCallback+0xe50>
						}else{
							MF2.FLAG.WG = 0;
 800d076:	4a51      	ldr	r2, [pc, #324]	; (800d1bc <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800d078:	8813      	ldrh	r3, [r2, #0]
 800d07a:	f36f 1304 	bfc	r3, #4, #1
 800d07e:	8013      	strh	r3, [r2, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800d080:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d084:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d088:	dd08      	ble.n	800d09c <HAL_TIM_PeriodElapsedCallback+0xe6c>
 800d08a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d08e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d092:	bfa8      	it	ge
 800d094:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800d098:	b21b      	sxth	r3, r3
 800d09a:	e000      	b.n	800d09e <HAL_TIM_PeriodElapsedCallback+0xe6e>
 800d09c:	4b4e      	ldr	r3, [pc, #312]	; (800d1d8 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 800d09e:	4a4f      	ldr	r2, [pc, #316]	; (800d1dc <HAL_TIM_PeriodElapsedCallback+0xfac>)
 800d0a0:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800d0a2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d0a6:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d0aa:	dd08      	ble.n	800d0be <HAL_TIM_PeriodElapsedCallback+0xe8e>
 800d0ac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800d0b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d0b4:	bfa8      	it	ge
 800d0b6:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800d0ba:	b21b      	sxth	r3, r3
 800d0bc:	e000      	b.n	800d0c0 <HAL_TIM_PeriodElapsedCallback+0xe90>
 800d0be:	4b46      	ldr	r3, [pc, #280]	; (800d1d8 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 800d0c0:	4a47      	ldr	r2, [pc, #284]	; (800d1e0 <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 800d0c2:	8013      	strh	r3, [r2, #0]
 800d0c4:	e108      	b.n	800d2d8 <HAL_TIM_PeriodElapsedCallback+0x10a8>
					}else{
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	853b      	strh	r3, [r7, #40]	; 0x28
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	84fb      	strh	r3, [r7, #38]	; 0x26
						dif_l = (int32_t) ad_fl - BASE_FL;
 800d0ce:	4b37      	ldr	r3, [pc, #220]	; (800d1ac <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	b21a      	sxth	r2, r3
 800d0dc:	4b3a      	ldr	r3, [pc, #232]	; (800d1c8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d0de:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_fr - BASE_FR;
 800d0e0:	4b34      	ldr	r3, [pc, #208]	; (800d1b4 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	b21a      	sxth	r2, r3
 800d0ee:	4b39      	ldr	r3, [pc, #228]	; (800d1d4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d0f0:	801a      	strh	r2, [r3, #0]

						if(dif_l > CTRL_BASE_FL || dif_r > CTRL_BASE_FR){
 800d0f2:	4b35      	ldr	r3, [pc, #212]	; (800d1c8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d0f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0f8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800d0fc:	dc05      	bgt.n	800d10a <HAL_TIM_PeriodElapsedCallback+0xeda>
 800d0fe:	4b35      	ldr	r3, [pc, #212]	; (800d1d4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 800d100:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d104:	2bc8      	cmp	r3, #200	; 0xc8
 800d106:	f340 80b8 	ble.w	800d27a <HAL_TIM_PeriodElapsedCallback+0x104a>
							if(dif_l > CTRL_BASE_FL){
 800d10a:	4b2f      	ldr	r3, [pc, #188]	; (800d1c8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d10c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d110:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800d114:	dd66      	ble.n	800d1e4 <HAL_TIM_PeriodElapsedCallback+0xfb4>
								dwl_tmp += CTRL_CONT_W * 0.1 * dif_l;				//a比例制御値を決定
 800d116:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7f3 f9fa 	bl	8000514 <__aeabi_i2d>
 800d120:	4604      	mov	r4, r0
 800d122:	460d      	mov	r5, r1
 800d124:	4b28      	ldr	r3, [pc, #160]	; (800d1c8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7f3 f9f2 	bl	8000514 <__aeabi_i2d>
 800d130:	a319      	add	r3, pc, #100	; (adr r3, 800d198 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800d132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d136:	f7f3 fa57 	bl	80005e8 <__aeabi_dmul>
 800d13a:	4602      	mov	r2, r0
 800d13c:	460b      	mov	r3, r1
 800d13e:	4620      	mov	r0, r4
 800d140:	4629      	mov	r1, r5
 800d142:	f7f3 f89b 	bl	800027c <__adddf3>
 800d146:	4603      	mov	r3, r0
 800d148:	460c      	mov	r4, r1
 800d14a:	4618      	mov	r0, r3
 800d14c:	4621      	mov	r1, r4
 800d14e:	f7f3 fcfb 	bl	8000b48 <__aeabi_d2iz>
 800d152:	4603      	mov	r3, r0
 800d154:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += -1 * CTRL_CONT_W * 0.1 * dif_l;			//a比例制御値を決定
 800d156:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7f3 f9da 	bl	8000514 <__aeabi_i2d>
 800d160:	4604      	mov	r4, r0
 800d162:	460d      	mov	r5, r1
 800d164:	4b18      	ldr	r3, [pc, #96]	; (800d1c8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800d166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7f3 f9d2 	bl	8000514 <__aeabi_i2d>
 800d170:	a30b      	add	r3, pc, #44	; (adr r3, 800d1a0 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 800d172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d176:	f7f3 fa37 	bl	80005e8 <__aeabi_dmul>
 800d17a:	4602      	mov	r2, r0
 800d17c:	460b      	mov	r3, r1
 800d17e:	4620      	mov	r0, r4
 800d180:	4629      	mov	r1, r5
 800d182:	f7f3 f87b 	bl	800027c <__adddf3>
 800d186:	4603      	mov	r3, r0
 800d188:	460c      	mov	r4, r1
 800d18a:	4618      	mov	r0, r3
 800d18c:	4621      	mov	r1, r4
 800d18e:	f7f3 fcdb 	bl	8000b48 <__aeabi_d2iz>
 800d192:	4603      	mov	r3, r0
 800d194:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d196:	e06a      	b.n	800d26e <HAL_TIM_PeriodElapsedCallback+0x103e>
 800d198:	33333334 	.word	0x33333334
 800d19c:	3fb33333 	.word	0x3fb33333
 800d1a0:	33333334 	.word	0x33333334
 800d1a4:	bfb33333 	.word	0xbfb33333
 800d1a8:	20000b00 	.word	0x20000b00
 800d1ac:	20000d54 	.word	0x20000d54
 800d1b0:	40020800 	.word	0x40020800
 800d1b4:	20000c00 	.word	0x20000c00
 800d1b8:	20000f68 	.word	0x20000f68
 800d1bc:	20000f64 	.word	0x20000f64
 800d1c0:	20000afc 	.word	0x20000afc
 800d1c4:	2000034c 	.word	0x2000034c
 800d1c8:	20000b50 	.word	0x20000b50
 800d1cc:	20000f60 	.word	0x20000f60
 800d1d0:	200002c0 	.word	0x200002c0
 800d1d4:	20000bb2 	.word	0x20000bb2
 800d1d8:	fffffc18 	.word	0xfffffc18
 800d1dc:	20000af8 	.word	0x20000af8
 800d1e0:	20000f74 	.word	0x20000f74
							}
							else if(dif_r > CTRL_BASE_FR){
 800d1e4:	4bb8      	ldr	r3, [pc, #736]	; (800d4c8 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800d1e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1ea:	2bc8      	cmp	r3, #200	; 0xc8
 800d1ec:	dd3f      	ble.n	800d26e <HAL_TIM_PeriodElapsedCallback+0x103e>
								dwl_tmp += -1 * CTRL_CONT_W * 0.2 * dif_r;			//a比例制御値を決定
 800d1ee:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7f3 f98e 	bl	8000514 <__aeabi_i2d>
 800d1f8:	4604      	mov	r4, r0
 800d1fa:	460d      	mov	r5, r1
 800d1fc:	4bb2      	ldr	r3, [pc, #712]	; (800d4c8 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800d1fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d202:	4618      	mov	r0, r3
 800d204:	f7f3 f986 	bl	8000514 <__aeabi_i2d>
 800d208:	a3ab      	add	r3, pc, #684	; (adr r3, 800d4b8 <HAL_TIM_PeriodElapsedCallback+0x1288>)
 800d20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20e:	f7f3 f9eb 	bl	80005e8 <__aeabi_dmul>
 800d212:	4602      	mov	r2, r0
 800d214:	460b      	mov	r3, r1
 800d216:	4620      	mov	r0, r4
 800d218:	4629      	mov	r1, r5
 800d21a:	f7f3 f82f 	bl	800027c <__adddf3>
 800d21e:	4603      	mov	r3, r0
 800d220:	460c      	mov	r4, r1
 800d222:	4618      	mov	r0, r3
 800d224:	4621      	mov	r1, r4
 800d226:	f7f3 fc8f 	bl	8000b48 <__aeabi_d2iz>
 800d22a:	4603      	mov	r3, r0
 800d22c:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += CTRL_CONT_W * 0.2 * dif_r;				//a比例制御値を決定
 800d22e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d232:	4618      	mov	r0, r3
 800d234:	f7f3 f96e 	bl	8000514 <__aeabi_i2d>
 800d238:	4604      	mov	r4, r0
 800d23a:	460d      	mov	r5, r1
 800d23c:	4ba2      	ldr	r3, [pc, #648]	; (800d4c8 <HAL_TIM_PeriodElapsedCallback+0x1298>)
 800d23e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d242:	4618      	mov	r0, r3
 800d244:	f7f3 f966 	bl	8000514 <__aeabi_i2d>
 800d248:	a39d      	add	r3, pc, #628	; (adr r3, 800d4c0 <HAL_TIM_PeriodElapsedCallback+0x1290>)
 800d24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24e:	f7f3 f9cb 	bl	80005e8 <__aeabi_dmul>
 800d252:	4602      	mov	r2, r0
 800d254:	460b      	mov	r3, r1
 800d256:	4620      	mov	r0, r4
 800d258:	4629      	mov	r1, r5
 800d25a:	f7f3 f80f 	bl	800027c <__adddf3>
 800d25e:	4603      	mov	r3, r0
 800d260:	460c      	mov	r4, r1
 800d262:	4618      	mov	r0, r3
 800d264:	4621      	mov	r1, r4
 800d266:	f7f3 fc6f 	bl	8000b48 <__aeabi_d2iz>
 800d26a:	4603      	mov	r3, r0
 800d26c:	84fb      	strh	r3, [r7, #38]	; 0x26
							}
							MF2.FLAG.WG = 1;
 800d26e:	4a97      	ldr	r2, [pc, #604]	; (800d4cc <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800d270:	8813      	ldrh	r3, [r2, #0]
 800d272:	f043 0310 	orr.w	r3, r3, #16
 800d276:	8013      	strh	r3, [r2, #0]
 800d278:	e004      	b.n	800d284 <HAL_TIM_PeriodElapsedCallback+0x1054>
						}else{
							MF2.FLAG.WG = 0;
 800d27a:	4a94      	ldr	r2, [pc, #592]	; (800d4cc <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800d27c:	8813      	ldrh	r3, [r2, #0]
 800d27e:	f36f 1304 	bfc	r3, #4, #1
 800d282:	8013      	strh	r3, [r2, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800d284:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d288:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d28c:	dd08      	ble.n	800d2a0 <HAL_TIM_PeriodElapsedCallback+0x1070>
 800d28e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800d292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d296:	bfa8      	it	ge
 800d298:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800d29c:	b21b      	sxth	r3, r3
 800d29e:	e000      	b.n	800d2a2 <HAL_TIM_PeriodElapsedCallback+0x1072>
 800d2a0:	4b8b      	ldr	r3, [pc, #556]	; (800d4d0 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800d2a2:	4a8c      	ldr	r2, [pc, #560]	; (800d4d4 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800d2a4:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800d2a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d2aa:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d2ae:	dd08      	ble.n	800d2c2 <HAL_TIM_PeriodElapsedCallback+0x1092>
 800d2b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d2b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2b8:	bfa8      	it	ge
 800d2ba:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800d2be:	b21b      	sxth	r3, r3
 800d2c0:	e000      	b.n	800d2c4 <HAL_TIM_PeriodElapsedCallback+0x1094>
 800d2c2:	4b83      	ldr	r3, [pc, #524]	; (800d4d0 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800d2c4:	4a84      	ldr	r2, [pc, #528]	; (800d4d8 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800d2c6:	8013      	strh	r3, [r2, #0]
 800d2c8:	e006      	b.n	800d2d8 <HAL_TIM_PeriodElapsedCallback+0x10a8>
					}
				}else{
					//a制御フラグがなければ壁制御値0
					dwl = dwr = 0;
 800d2ca:	2100      	movs	r1, #0
 800d2cc:	4b82      	ldr	r3, [pc, #520]	; (800d4d8 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800d2ce:	460a      	mov	r2, r1
 800d2d0:	801a      	strh	r2, [r3, #0]
 800d2d2:	4b80      	ldr	r3, [pc, #512]	; (800d4d4 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800d2d4:	460a      	mov	r2, r1
 800d2d6:	801a      	strh	r2, [r3, #0]
				}

				if(MF.FLAG.GCTRL){
 800d2d8:	4b80      	ldr	r3, [pc, #512]	; (800d4dc <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800d2da:	881b      	ldrh	r3, [r3, #0]
 800d2dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d03d      	beq.n	800d362 <HAL_TIM_PeriodElapsedCallback+0x1132>
				}

					dg = CTRL_CONT_G * gyro_read_z();			//a角速度制御
					dg = CTRL_CONT_G * degree_z;				//a角度制御
*/
					dg = CTRL_CONT_G * (target_degree_z - degree_z);		//a角度制御(目標角度はスタートを0度とし、旋回量と対応付け)
 800d2e6:	4b7e      	ldr	r3, [pc, #504]	; (800d4e0 <HAL_TIM_PeriodElapsedCallback+0x12b0>)
 800d2e8:	ed93 7a00 	vldr	s14, [r3]
 800d2ec:	4b7d      	ldr	r3, [pc, #500]	; (800d4e4 <HAL_TIM_PeriodElapsedCallback+0x12b4>)
 800d2ee:	edd3 7a00 	vldr	s15, [r3]
 800d2f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2f6:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800d4e8 <HAL_TIM_PeriodElapsedCallback+0x12b8>
 800d2fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d2fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d302:	ee17 3a90 	vmov	r3, s15
 800d306:	b21a      	sxth	r2, r3
 800d308:	4b78      	ldr	r3, [pc, #480]	; (800d4ec <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d30a:	801a      	strh	r2, [r3, #0]

					dg = max(min(CTRL_MAX_G, dg), -1 * CTRL_MAX_G);
 800d30c:	4b77      	ldr	r3, [pc, #476]	; (800d4ec <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d30e:	881b      	ldrh	r3, [r3, #0]
 800d310:	b21b      	sxth	r3, r3
 800d312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d316:	da05      	bge.n	800d324 <HAL_TIM_PeriodElapsedCallback+0x10f4>
 800d318:	4b74      	ldr	r3, [pc, #464]	; (800d4ec <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d31a:	881b      	ldrh	r3, [r3, #0]
 800d31c:	b21b      	sxth	r3, r3
 800d31e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800d322:	dd0c      	ble.n	800d33e <HAL_TIM_PeriodElapsedCallback+0x110e>
 800d324:	4b71      	ldr	r3, [pc, #452]	; (800d4ec <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d326:	881b      	ldrh	r3, [r3, #0]
 800d328:	b21b      	sxth	r3, r3
 800d32a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d32e:	da03      	bge.n	800d338 <HAL_TIM_PeriodElapsedCallback+0x1108>
 800d330:	4b6e      	ldr	r3, [pc, #440]	; (800d4ec <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d332:	881b      	ldrh	r3, [r3, #0]
 800d334:	b21b      	sxth	r3, r3
 800d336:	e003      	b.n	800d340 <HAL_TIM_PeriodElapsedCallback+0x1110>
 800d338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d33c:	e000      	b.n	800d340 <HAL_TIM_PeriodElapsedCallback+0x1110>
 800d33e:	4b64      	ldr	r3, [pc, #400]	; (800d4d0 <HAL_TIM_PeriodElapsedCallback+0x12a0>)
 800d340:	4a6a      	ldr	r2, [pc, #424]	; (800d4ec <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d342:	8013      	strh	r3, [r2, #0]
					dgl = -1*dg;
 800d344:	4b69      	ldr	r3, [pc, #420]	; (800d4ec <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d346:	881b      	ldrh	r3, [r3, #0]
 800d348:	b21b      	sxth	r3, r3
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	425b      	negs	r3, r3
 800d34e:	b29b      	uxth	r3, r3
 800d350:	b21a      	sxth	r2, r3
 800d352:	4b67      	ldr	r3, [pc, #412]	; (800d4f0 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800d354:	801a      	strh	r2, [r3, #0]
					dgr = dg;
 800d356:	4b65      	ldr	r3, [pc, #404]	; (800d4ec <HAL_TIM_PeriodElapsedCallback+0x12bc>)
 800d358:	881b      	ldrh	r3, [r3, #0]
 800d35a:	b21a      	sxth	r2, r3
 800d35c:	4b65      	ldr	r3, [pc, #404]	; (800d4f4 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800d35e:	801a      	strh	r2, [r3, #0]
				}else{
					//a制御フラグがなければ壁制御値0
					dgl = dgr = 0;
				}
				break;
 800d360:	e006      	b.n	800d370 <HAL_TIM_PeriodElapsedCallback+0x1140>
					dgl = dgr = 0;
 800d362:	2100      	movs	r1, #0
 800d364:	4b63      	ldr	r3, [pc, #396]	; (800d4f4 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800d366:	460a      	mov	r2, r1
 800d368:	801a      	strh	r2, [r3, #0]
 800d36a:	4b61      	ldr	r3, [pc, #388]	; (800d4f0 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800d36c:	460a      	mov	r2, r1
 800d36e:	801a      	strh	r2, [r3, #0]
				break;
 800d370:	bf00      	nop
		}


		if(MF.FLAG.DRV){
 800d372:	4b5a      	ldr	r3, [pc, #360]	; (800d4dc <HAL_TIM_PeriodElapsedCallback+0x12ac>)
 800d374:	881b      	ldrh	r3, [r3, #0]
 800d376:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f000 81b2 	beq.w	800d6e6 <HAL_TIM_PeriodElapsedCallback+0x14b6>
			if(!MF2.FLAG.WG){
 800d382:	4b52      	ldr	r3, [pc, #328]	; (800d4cc <HAL_TIM_PeriodElapsedCallback+0x129c>)
 800d384:	881b      	ldrh	r3, [r3, #0]
 800d386:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d130      	bne.n	800d3f2 <HAL_TIM_PeriodElapsedCallback+0x11c2>
				pulse_l = pulse_l + dgl + dwl;
 800d390:	4b57      	ldr	r3, [pc, #348]	; (800d4f0 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800d392:	881b      	ldrh	r3, [r3, #0]
 800d394:	b21b      	sxth	r3, r3
 800d396:	ee07 3a90 	vmov	s15, r3
 800d39a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d39e:	4b56      	ldr	r3, [pc, #344]	; (800d4f8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d3a0:	edd3 7a00 	vldr	s15, [r3]
 800d3a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d3a8:	4b4a      	ldr	r3, [pc, #296]	; (800d4d4 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800d3aa:	881b      	ldrh	r3, [r3, #0]
 800d3ac:	b21b      	sxth	r3, r3
 800d3ae:	ee07 3a90 	vmov	s15, r3
 800d3b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3ba:	4b4f      	ldr	r3, [pc, #316]	; (800d4f8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d3bc:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800d3c0:	4b4c      	ldr	r3, [pc, #304]	; (800d4f4 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800d3c2:	881b      	ldrh	r3, [r3, #0]
 800d3c4:	b21b      	sxth	r3, r3
 800d3c6:	ee07 3a90 	vmov	s15, r3
 800d3ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d3ce:	4b4b      	ldr	r3, [pc, #300]	; (800d4fc <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800d3d0:	edd3 7a00 	vldr	s15, [r3]
 800d3d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d3d8:	4b3f      	ldr	r3, [pc, #252]	; (800d4d8 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800d3da:	881b      	ldrh	r3, [r3, #0]
 800d3dc:	b21b      	sxth	r3, r3
 800d3de:	ee07 3a90 	vmov	s15, r3
 800d3e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3ea:	4b44      	ldr	r3, [pc, #272]	; (800d4fc <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800d3ec:	edc3 7a00 	vstr	s15, [r3]
 800d3f0:	e02f      	b.n	800d452 <HAL_TIM_PeriodElapsedCallback+0x1222>
//				pulse_l = pulse_l + dgl;
//				pulse_r = pulse_r + dgr;
			}else{
				pulse_l = pulse_l + dgl + dwl;
 800d3f2:	4b3f      	ldr	r3, [pc, #252]	; (800d4f0 <HAL_TIM_PeriodElapsedCallback+0x12c0>)
 800d3f4:	881b      	ldrh	r3, [r3, #0]
 800d3f6:	b21b      	sxth	r3, r3
 800d3f8:	ee07 3a90 	vmov	s15, r3
 800d3fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d400:	4b3d      	ldr	r3, [pc, #244]	; (800d4f8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d402:	edd3 7a00 	vldr	s15, [r3]
 800d406:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d40a:	4b32      	ldr	r3, [pc, #200]	; (800d4d4 <HAL_TIM_PeriodElapsedCallback+0x12a4>)
 800d40c:	881b      	ldrh	r3, [r3, #0]
 800d40e:	b21b      	sxth	r3, r3
 800d410:	ee07 3a90 	vmov	s15, r3
 800d414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d41c:	4b36      	ldr	r3, [pc, #216]	; (800d4f8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d41e:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800d422:	4b34      	ldr	r3, [pc, #208]	; (800d4f4 <HAL_TIM_PeriodElapsedCallback+0x12c4>)
 800d424:	881b      	ldrh	r3, [r3, #0]
 800d426:	b21b      	sxth	r3, r3
 800d428:	ee07 3a90 	vmov	s15, r3
 800d42c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d430:	4b32      	ldr	r3, [pc, #200]	; (800d4fc <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800d432:	edd3 7a00 	vldr	s15, [r3]
 800d436:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d43a:	4b27      	ldr	r3, [pc, #156]	; (800d4d8 <HAL_TIM_PeriodElapsedCallback+0x12a8>)
 800d43c:	881b      	ldrh	r3, [r3, #0]
 800d43e:	b21b      	sxth	r3, r3
 800d440:	ee07 3a90 	vmov	s15, r3
 800d444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d44c:	4b2b      	ldr	r3, [pc, #172]	; (800d4fc <HAL_TIM_PeriodElapsedCallback+0x12cc>)
 800d44e:	edc3 7a00 	vstr	s15, [r3]
//				pulse_l = pulse_l + dwl;
//				pulse_r = pulse_r + dwr;
			}
			pulse_l = min(max(pulse_l, -1000), 1000);
 800d452:	4b29      	ldr	r3, [pc, #164]	; (800d4f8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d454:	edd3 7a00 	vldr	s15, [r3]
 800d458:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800d500 <HAL_TIM_PeriodElapsedCallback+0x12d0>
 800d45c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d464:	bfcc      	ite	gt
 800d466:	2301      	movgt	r3, #1
 800d468:	2300      	movle	r3, #0
 800d46a:	b2db      	uxtb	r3, r3
 800d46c:	f083 0301 	eor.w	r3, r3, #1
 800d470:	b2db      	uxtb	r3, r3
 800d472:	2b00      	cmp	r3, #0
 800d474:	d111      	bne.n	800d49a <HAL_TIM_PeriodElapsedCallback+0x126a>
 800d476:	4b20      	ldr	r3, [pc, #128]	; (800d4f8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d478:	edd3 7a00 	vldr	s15, [r3]
 800d47c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800d504 <HAL_TIM_PeriodElapsedCallback+0x12d4>
 800d480:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d488:	bfcc      	ite	gt
 800d48a:	2301      	movgt	r3, #1
 800d48c:	2300      	movle	r3, #0
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	f083 0301 	eor.w	r3, r3, #1
 800d494:	b2db      	uxtb	r3, r3
 800d496:	2b00      	cmp	r3, #0
 800d498:	d038      	beq.n	800d50c <HAL_TIM_PeriodElapsedCallback+0x12dc>
 800d49a:	4b17      	ldr	r3, [pc, #92]	; (800d4f8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d49c:	edd3 7a00 	vldr	s15, [r3]
 800d4a0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800d500 <HAL_TIM_PeriodElapsedCallback+0x12d0>
 800d4a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ac:	dd2c      	ble.n	800d508 <HAL_TIM_PeriodElapsedCallback+0x12d8>
 800d4ae:	4b12      	ldr	r3, [pc, #72]	; (800d4f8 <HAL_TIM_PeriodElapsedCallback+0x12c8>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	e02c      	b.n	800d50e <HAL_TIM_PeriodElapsedCallback+0x12de>
 800d4b4:	f3af 8000 	nop.w
 800d4b8:	33333334 	.word	0x33333334
 800d4bc:	bfc33333 	.word	0xbfc33333
 800d4c0:	33333334 	.word	0x33333334
 800d4c4:	3fc33333 	.word	0x3fc33333
 800d4c8:	20000bb2 	.word	0x20000bb2
 800d4cc:	20000f64 	.word	0x20000f64
 800d4d0:	fffffc18 	.word	0xfffffc18
 800d4d4:	20000af8 	.word	0x20000af8
 800d4d8:	20000f74 	.word	0x20000f74
 800d4dc:	20000f68 	.word	0x20000f68
 800d4e0:	20000bf8 	.word	0x20000bf8
 800d4e4:	20000b5c 	.word	0x20000b5c
 800d4e8:	42200000 	.word	0x42200000
 800d4ec:	20000c10 	.word	0x20000c10
 800d4f0:	2000019c 	.word	0x2000019c
 800d4f4:	20000b4e 	.word	0x20000b4e
 800d4f8:	20000ba8 	.word	0x20000ba8
 800d4fc:	20000780 	.word	0x20000780
 800d500:	c47a0000 	.word	0xc47a0000
 800d504:	447a0000 	.word	0x447a0000
 800d508:	4bb7      	ldr	r3, [pc, #732]	; (800d7e8 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 800d50a:	e000      	b.n	800d50e <HAL_TIM_PeriodElapsedCallback+0x12de>
 800d50c:	4bb7      	ldr	r3, [pc, #732]	; (800d7ec <HAL_TIM_PeriodElapsedCallback+0x15bc>)
 800d50e:	4ab8      	ldr	r2, [pc, #736]	; (800d7f0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800d510:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -1000), 1000);
 800d512:	4bb8      	ldr	r3, [pc, #736]	; (800d7f4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d514:	edd3 7a00 	vldr	s15, [r3]
 800d518:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800d7f8 <HAL_TIM_PeriodElapsedCallback+0x15c8>
 800d51c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d524:	bfcc      	ite	gt
 800d526:	2301      	movgt	r3, #1
 800d528:	2300      	movle	r3, #0
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	f083 0301 	eor.w	r3, r3, #1
 800d530:	b2db      	uxtb	r3, r3
 800d532:	2b00      	cmp	r3, #0
 800d534:	d111      	bne.n	800d55a <HAL_TIM_PeriodElapsedCallback+0x132a>
 800d536:	4baf      	ldr	r3, [pc, #700]	; (800d7f4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d538:	edd3 7a00 	vldr	s15, [r3]
 800d53c:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800d7fc <HAL_TIM_PeriodElapsedCallback+0x15cc>
 800d540:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d548:	bfcc      	ite	gt
 800d54a:	2301      	movgt	r3, #1
 800d54c:	2300      	movle	r3, #0
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	f083 0301 	eor.w	r3, r3, #1
 800d554:	b2db      	uxtb	r3, r3
 800d556:	2b00      	cmp	r3, #0
 800d558:	d00e      	beq.n	800d578 <HAL_TIM_PeriodElapsedCallback+0x1348>
 800d55a:	4ba6      	ldr	r3, [pc, #664]	; (800d7f4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d55c:	edd3 7a00 	vldr	s15, [r3]
 800d560:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800d7f8 <HAL_TIM_PeriodElapsedCallback+0x15c8>
 800d564:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d56c:	dd02      	ble.n	800d574 <HAL_TIM_PeriodElapsedCallback+0x1344>
 800d56e:	4ba1      	ldr	r3, [pc, #644]	; (800d7f4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	e002      	b.n	800d57a <HAL_TIM_PeriodElapsedCallback+0x134a>
 800d574:	4b9c      	ldr	r3, [pc, #624]	; (800d7e8 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 800d576:	e000      	b.n	800d57a <HAL_TIM_PeriodElapsedCallback+0x134a>
 800d578:	4b9c      	ldr	r3, [pc, #624]	; (800d7ec <HAL_TIM_PeriodElapsedCallback+0x15bc>)
 800d57a:	4a9e      	ldr	r2, [pc, #632]	; (800d7f4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d57c:	6013      	str	r3, [r2, #0]

			if(pulse_l > 0){
 800d57e:	4b9c      	ldr	r3, [pc, #624]	; (800d7f0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800d580:	edd3 7a00 	vldr	s15, [r3]
 800d584:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d58c:	dd17      	ble.n	800d5be <HAL_TIM_PeriodElapsedCallback+0x138e>
				drive_dir(0, 0);
 800d58e:	2100      	movs	r1, #0
 800d590:	2000      	movs	r0, #0
 800d592:	f7f7 fc21 	bl	8004dd8 <drive_dir>
				ConfigOC.Pulse = pulse_l;
 800d596:	4b96      	ldr	r3, [pc, #600]	; (800d7f0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800d598:	edd3 7a00 	vldr	s15, [r3]
 800d59c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5a0:	ee17 3a90 	vmov	r3, s15
 800d5a4:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800d5a6:	f107 0308 	add.w	r3, r7, #8
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	4894      	ldr	r0, [pc, #592]	; (800d800 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d5b0:	f7f6 fb0c 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800d5b4:	2100      	movs	r1, #0
 800d5b6:	4892      	ldr	r0, [pc, #584]	; (800d800 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d5b8:	f7f6 f8a0 	bl	80036fc <HAL_TIM_PWM_Start>
 800d5bc:	e020      	b.n	800d600 <HAL_TIM_PeriodElapsedCallback+0x13d0>
			}
			else if(pulse_l < 0){
 800d5be:	4b8c      	ldr	r3, [pc, #560]	; (800d7f0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800d5c0:	edd3 7a00 	vldr	s15, [r3]
 800d5c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5cc:	d518      	bpl.n	800d600 <HAL_TIM_PeriodElapsedCallback+0x13d0>
				drive_dir(0, 1);
 800d5ce:	2101      	movs	r1, #1
 800d5d0:	2000      	movs	r0, #0
 800d5d2:	f7f7 fc01 	bl	8004dd8 <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 800d5d6:	4b86      	ldr	r3, [pc, #536]	; (800d7f0 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800d5d8:	edd3 7a00 	vldr	s15, [r3]
 800d5dc:	eef1 7a67 	vneg.f32	s15, s15
 800d5e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5e4:	ee17 3a90 	vmov	r3, s15
 800d5e8:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800d5ea:	f107 0308 	add.w	r3, r7, #8
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	4883      	ldr	r0, [pc, #524]	; (800d800 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d5f4:	f7f6 faea 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800d5f8:	2100      	movs	r1, #0
 800d5fa:	4881      	ldr	r0, [pc, #516]	; (800d800 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d5fc:	f7f6 f87e 	bl	80036fc <HAL_TIM_PWM_Start>
			}

			if(pulse_r > 0){
 800d600:	4b7c      	ldr	r3, [pc, #496]	; (800d7f4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d602:	edd3 7a00 	vldr	s15, [r3]
 800d606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d60e:	dd17      	ble.n	800d640 <HAL_TIM_PeriodElapsedCallback+0x1410>
				drive_dir(1, 0);
 800d610:	2100      	movs	r1, #0
 800d612:	2001      	movs	r0, #1
 800d614:	f7f7 fbe0 	bl	8004dd8 <drive_dir>
				ConfigOC.Pulse = pulse_r;
 800d618:	4b76      	ldr	r3, [pc, #472]	; (800d7f4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d61a:	edd3 7a00 	vldr	s15, [r3]
 800d61e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d622:	ee17 3a90 	vmov	r3, s15
 800d626:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800d628:	f107 0308 	add.w	r3, r7, #8
 800d62c:	220c      	movs	r2, #12
 800d62e:	4619      	mov	r1, r3
 800d630:	4873      	ldr	r0, [pc, #460]	; (800d800 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d632:	f7f6 facb 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800d636:	210c      	movs	r1, #12
 800d638:	4871      	ldr	r0, [pc, #452]	; (800d800 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d63a:	f7f6 f85f 	bl	80036fc <HAL_TIM_PWM_Start>
 800d63e:	e020      	b.n	800d682 <HAL_TIM_PeriodElapsedCallback+0x1452>
			}
			else if(pulse_r < 0){
 800d640:	4b6c      	ldr	r3, [pc, #432]	; (800d7f4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d642:	edd3 7a00 	vldr	s15, [r3]
 800d646:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d64e:	d518      	bpl.n	800d682 <HAL_TIM_PeriodElapsedCallback+0x1452>
				drive_dir(1, 1);
 800d650:	2101      	movs	r1, #1
 800d652:	2001      	movs	r0, #1
 800d654:	f7f7 fbc0 	bl	8004dd8 <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 800d658:	4b66      	ldr	r3, [pc, #408]	; (800d7f4 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800d65a:	edd3 7a00 	vldr	s15, [r3]
 800d65e:	eef1 7a67 	vneg.f32	s15, s15
 800d662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d666:	ee17 3a90 	vmov	r3, s15
 800d66a:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800d66c:	f107 0308 	add.w	r3, r7, #8
 800d670:	220c      	movs	r2, #12
 800d672:	4619      	mov	r1, r3
 800d674:	4862      	ldr	r0, [pc, #392]	; (800d800 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d676:	f7f6 faa9 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800d67a:	210c      	movs	r1, #12
 800d67c:	4860      	ldr	r0, [pc, #384]	; (800d800 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 800d67e:	f7f6 f83d 	bl	80036fc <HAL_TIM_PWM_Start>
			}
			//wall check
//			if(!MF.FLAG.SCND){
				//----look forward----
				if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 800d682:	4b60      	ldr	r3, [pc, #384]	; (800d804 <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2b78      	cmp	r3, #120	; 0x78
 800d688:	d803      	bhi.n	800d692 <HAL_TIM_PeriodElapsedCallback+0x1462>
 800d68a:	4b5f      	ldr	r3, [pc, #380]	; (800d808 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	2bc8      	cmp	r3, #200	; 0xc8
 800d690:	d905      	bls.n	800d69e <HAL_TIM_PeriodElapsedCallback+0x146e>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800d692:	2201      	movs	r2, #1
 800d694:	2140      	movs	r1, #64	; 0x40
 800d696:	485d      	ldr	r0, [pc, #372]	; (800d80c <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800d698:	f7f4 fe34 	bl	8002304 <HAL_GPIO_WritePin>
 800d69c:	e004      	b.n	800d6a8 <HAL_TIM_PeriodElapsedCallback+0x1478>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800d69e:	2200      	movs	r2, #0
 800d6a0:	2140      	movs	r1, #64	; 0x40
 800d6a2:	485a      	ldr	r0, [pc, #360]	; (800d80c <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800d6a4:	f7f4 fe2e 	bl	8002304 <HAL_GPIO_WritePin>
				}
				//----look forwardL----
				if(ad_fl > WALL_BASE_FL){
 800d6a8:	4b57      	ldr	r3, [pc, #348]	; (800d808 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	2bc8      	cmp	r3, #200	; 0xc8
 800d6ae:	d905      	bls.n	800d6bc <HAL_TIM_PeriodElapsedCallback+0x148c>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	2110      	movs	r1, #16
 800d6b4:	4855      	ldr	r0, [pc, #340]	; (800d80c <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800d6b6:	f7f4 fe25 	bl	8002304 <HAL_GPIO_WritePin>
 800d6ba:	e004      	b.n	800d6c6 <HAL_TIM_PeriodElapsedCallback+0x1496>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800d6bc:	2200      	movs	r2, #0
 800d6be:	2110      	movs	r1, #16
 800d6c0:	4852      	ldr	r0, [pc, #328]	; (800d80c <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800d6c2:	f7f4 fe1f 	bl	8002304 <HAL_GPIO_WritePin>
				}
				//----look forward-R---
				if(ad_fr > WALL_BASE_FR){
 800d6c6:	4b4f      	ldr	r3, [pc, #316]	; (800d804 <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2b78      	cmp	r3, #120	; 0x78
 800d6cc:	d905      	bls.n	800d6da <HAL_TIM_PeriodElapsedCallback+0x14aa>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	2180      	movs	r1, #128	; 0x80
 800d6d2:	484e      	ldr	r0, [pc, #312]	; (800d80c <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800d6d4:	f7f4 fe16 	bl	8002304 <HAL_GPIO_WritePin>
 800d6d8:	e00d      	b.n	800d6f6 <HAL_TIM_PeriodElapsedCallback+0x14c6>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800d6da:	2200      	movs	r2, #0
 800d6dc:	2180      	movs	r1, #128	; 0x80
 800d6de:	484b      	ldr	r0, [pc, #300]	; (800d80c <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 800d6e0:	f7f4 fe10 	bl	8002304 <HAL_GPIO_WritePin>
 800d6e4:	e007      	b.n	800d6f6 <HAL_TIM_PeriodElapsedCallback+0x14c6>
				}
		}else{
			drive_dir(0, 2);
 800d6e6:	2102      	movs	r1, #2
 800d6e8:	2000      	movs	r0, #0
 800d6ea:	f7f7 fb75 	bl	8004dd8 <drive_dir>
			drive_dir(1, 2);
 800d6ee:	2102      	movs	r1, #2
 800d6f0:	2001      	movs	r0, #1
 800d6f2:	f7f7 fb71 	bl	8004dd8 <drive_dir>
		}


		//wall check
		//----look right----
		if(ad_r > WALL_BASE_R){
 800d6f6:	4b46      	ldr	r3, [pc, #280]	; (800d810 <HAL_TIM_PeriodElapsedCallback+0x15e0>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b78      	cmp	r3, #120	; 0x78
 800d6fc:	d906      	bls.n	800d70c <HAL_TIM_PeriodElapsedCallback+0x14dc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800d6fe:	2201      	movs	r2, #1
 800d700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d704:	4843      	ldr	r0, [pc, #268]	; (800d814 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800d706:	f7f4 fdfd 	bl	8002304 <HAL_GPIO_WritePin>
 800d70a:	e005      	b.n	800d718 <HAL_TIM_PeriodElapsedCallback+0x14e8>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800d70c:	2200      	movs	r2, #0
 800d70e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d712:	4840      	ldr	r0, [pc, #256]	; (800d814 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800d714:	f7f4 fdf6 	bl	8002304 <HAL_GPIO_WritePin>
		}
		//----look left----
		if(ad_l > WALL_BASE_L){
 800d718:	4b3f      	ldr	r3, [pc, #252]	; (800d818 <HAL_TIM_PeriodElapsedCallback+0x15e8>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2b8c      	cmp	r3, #140	; 0x8c
 800d71e:	d905      	bls.n	800d72c <HAL_TIM_PeriodElapsedCallback+0x14fc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800d720:	2201      	movs	r2, #1
 800d722:	2104      	movs	r1, #4
 800d724:	483d      	ldr	r0, [pc, #244]	; (800d81c <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800d726:	f7f4 fded 	bl	8002304 <HAL_GPIO_WritePin>
 800d72a:	e004      	b.n	800d736 <HAL_TIM_PeriodElapsedCallback+0x1506>
		}else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800d72c:	2200      	movs	r2, #0
 800d72e:	2104      	movs	r1, #4
 800d730:	483a      	ldr	r0, [pc, #232]	; (800d81c <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800d732:	f7f4 fde7 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//battery check
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {	//2.1V以下で赤ランプ点灯=>LiPoが約7Vを下回るとランプ点灯
 800d736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d73a:	4836      	ldr	r0, [pc, #216]	; (800d814 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800d73c:	f7f4 fdca 	bl	80022d4 <HAL_GPIO_ReadPin>
 800d740:	4603      	mov	r3, r0
 800d742:	2b00      	cmp	r3, #0
 800d744:	d105      	bne.n	800d752 <HAL_TIM_PeriodElapsedCallback+0x1522>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800d746:	2201      	movs	r2, #1
 800d748:	2108      	movs	r1, #8
 800d74a:	4834      	ldr	r0, [pc, #208]	; (800d81c <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800d74c:	f7f4 fdda 	bl	8002304 <HAL_GPIO_WritePin>
 800d750:	e004      	b.n	800d75c <HAL_TIM_PeriodElapsedCallback+0x152c>
		} else {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800d752:	2200      	movs	r2, #0
 800d754:	2108      	movs	r1, #8
 800d756:	4831      	ldr	r0, [pc, #196]	; (800d81c <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 800d758:	f7f4 fdd4 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//fail safe
		if(degree_z >= target_degree_z+270 || degree_z <= target_degree_z-270 || dist_r > 500 || dist_l > 500){	//270度以上回転発生でFail Safe
 800d75c:	4b30      	ldr	r3, [pc, #192]	; (800d820 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 800d75e:	edd3 7a00 	vldr	s15, [r3]
 800d762:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800d824 <HAL_TIM_PeriodElapsedCallback+0x15f4>
 800d766:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d76a:	4b2f      	ldr	r3, [pc, #188]	; (800d828 <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 800d76c:	edd3 7a00 	vldr	s15, [r3]
 800d770:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d778:	d923      	bls.n	800d7c2 <HAL_TIM_PeriodElapsedCallback+0x1592>
 800d77a:	4b29      	ldr	r3, [pc, #164]	; (800d820 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 800d77c:	edd3 7a00 	vldr	s15, [r3]
 800d780:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800d824 <HAL_TIM_PeriodElapsedCallback+0x15f4>
 800d784:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d788:	4b27      	ldr	r3, [pc, #156]	; (800d828 <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 800d78a:	edd3 7a00 	vldr	s15, [r3]
 800d78e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d796:	da14      	bge.n	800d7c2 <HAL_TIM_PeriodElapsedCallback+0x1592>
 800d798:	4b24      	ldr	r3, [pc, #144]	; (800d82c <HAL_TIM_PeriodElapsedCallback+0x15fc>)
 800d79a:	edd3 7a00 	vldr	s15, [r3]
 800d79e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800d830 <HAL_TIM_PeriodElapsedCallback+0x1600>
 800d7a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7aa:	dc0a      	bgt.n	800d7c2 <HAL_TIM_PeriodElapsedCallback+0x1592>
 800d7ac:	4b21      	ldr	r3, [pc, #132]	; (800d834 <HAL_TIM_PeriodElapsedCallback+0x1604>)
 800d7ae:	edd3 7a00 	vldr	s15, [r3]
 800d7b2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d830 <HAL_TIM_PeriodElapsedCallback+0x1600>
 800d7b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7be:	dc00      	bgt.n	800d7c2 <HAL_TIM_PeriodElapsedCallback+0x1592>
			   drive_dir(1, 2);
			   full_led_write(RED);
		   }
		}
	}
}
 800d7c0:	e00b      	b.n	800d7da <HAL_TIM_PeriodElapsedCallback+0x15aa>
			   drive_dir(0, 2);
 800d7c2:	2102      	movs	r1, #2
 800d7c4:	2000      	movs	r0, #0
 800d7c6:	f7f7 fb07 	bl	8004dd8 <drive_dir>
			   drive_dir(1, 2);
 800d7ca:	2102      	movs	r1, #2
 800d7cc:	2001      	movs	r0, #1
 800d7ce:	f7f7 fb03 	bl	8004dd8 <drive_dir>
			   full_led_write(RED);
 800d7d2:	2001      	movs	r0, #1
 800d7d4:	f003 fede 	bl	8011594 <full_led_write>
			   drive_dir(0, 2);
 800d7d8:	e7f3      	b.n	800d7c2 <HAL_TIM_PeriodElapsedCallback+0x1592>
}
 800d7da:	bf00      	nop
 800d7dc:	3730      	adds	r7, #48	; 0x30
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	ecbd 8b02 	vpop	{d8}
 800d7e4:	bdb0      	pop	{r4, r5, r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	c47a0000 	.word	0xc47a0000
 800d7ec:	447a0000 	.word	0x447a0000
 800d7f0:	20000ba8 	.word	0x20000ba8
 800d7f4:	20000780 	.word	0x20000780
 800d7f8:	c47a0000 	.word	0xc47a0000
 800d7fc:	447a0000 	.word	0x447a0000
 800d800:	20000c14 	.word	0x20000c14
 800d804:	20000c00 	.word	0x20000c00
 800d808:	20000d54 	.word	0x20000d54
 800d80c:	40020000 	.word	0x40020000
 800d810:	20000f60 	.word	0x20000f60
 800d814:	40020400 	.word	0x40020400
 800d818:	20000afc 	.word	0x20000afc
 800d81c:	40020800 	.word	0x40020800
 800d820:	20000bf8 	.word	0x20000bf8
 800d824:	43870000 	.word	0x43870000
 800d828:	20000b5c 	.word	0x20000b5c
 800d82c:	20000aec 	.word	0x20000aec
 800d830:	43fa0000 	.word	0x43fa0000
 800d834:	200015c4 	.word	0x200015c4

0800d838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d83e:	f7f3 fb7b 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d842:	f000 f917 	bl	800da74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d846:	f000 fc09 	bl	800e05c <MX_GPIO_Init>
  MX_ADC1_Init();
 800d84a:	f000 f97d 	bl	800db48 <MX_ADC1_Init>
  MX_TIM2_Init();
 800d84e:	f000 fa03 	bl	800dc58 <MX_TIM2_Init>
  MX_TIM3_Init();
 800d852:	f000 fa81 	bl	800dd58 <MX_TIM3_Init>
  MX_TIM4_Init();
 800d856:	f000 faf5 	bl	800de44 <MX_TIM4_Init>
  MX_TIM6_Init();
 800d85a:	f000 fb47 	bl	800deec <MX_TIM6_Init>
  MX_TIM8_Init();
 800d85e:	f000 fb7b 	bl	800df58 <MX_TIM8_Init>
  MX_SPI3_Init();
 800d862:	f000 f9c3 	bl	800dbec <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800d866:	f000 fbcf 	bl	800e008 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  drive_init();
 800d86a:	f7f7 f9f7 	bl	8004c5c <drive_init>
  gyro_init();
 800d86e:	f7fe fb01 	bl	800be74 <gyro_init>
  search_init();
 800d872:	f000 fd21 	bl	800e2b8 <search_init>
  sensor_init();
 800d876:	f003 fdcd 	bl	8011414 <sensor_init>

  printf("*** Welcome to WMMC ! ***\n");
 800d87a:	4870      	ldr	r0, [pc, #448]	; (800da3c <main+0x204>)
 800d87c:	f004 fc92 	bl	80121a4 <puts>

  setbuf(stdout, NULL);
 800d880:	4b6f      	ldr	r3, [pc, #444]	; (800da40 <main+0x208>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	2100      	movs	r1, #0
 800d888:	4618      	mov	r0, r3
 800d88a:	f004 fc93 	bl	80121b4 <setbuf>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800d88e:	213c      	movs	r1, #60	; 0x3c
 800d890:	486c      	ldr	r0, [pc, #432]	; (800da44 <main+0x20c>)
 800d892:	f7f6 f85b 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800d896:	213c      	movs	r1, #60	; 0x3c
 800d898:	486b      	ldr	r0, [pc, #428]	; (800da48 <main+0x210>)
 800d89a:	f7f6 f857 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800d89e:	486b      	ldr	r0, [pc, #428]	; (800da4c <main+0x214>)
 800d8a0:	f7f5 fed3 	bl	800364a <HAL_TIM_Base_Start_IT>

  int mode = 0;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	607b      	str	r3, [r7, #4]
  printf("Mode : %d\n", mode);
 800d8a8:	6879      	ldr	r1, [r7, #4]
 800d8aa:	4869      	ldr	r0, [pc, #420]	; (800da50 <main+0x218>)
 800d8ac:	f004 fc06 	bl	80120bc <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	f003 0301 	and.w	r3, r3, #1
 800d8b8:	b2d8      	uxtb	r0, r3
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	f003 0302 	and.w	r3, r3, #2
 800d8c2:	b2d9      	uxtb	r1, r3
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	f003 0304 	and.w	r3, r3, #4
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	f003 fe26 	bl	8011520 <led_write>
	  if(dist_r >= 20){
 800d8d4:	4b5f      	ldr	r3, [pc, #380]	; (800da54 <main+0x21c>)
 800d8d6:	edd3 7a00 	vldr	s15, [r3]
 800d8da:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800d8de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8e6:	db0f      	blt.n	800d908 <main+0xd0>
		  mode++;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800d8ee:	4b59      	ldr	r3, [pc, #356]	; (800da54 <main+0x21c>)
 800d8f0:	f04f 0200 	mov.w	r2, #0
 800d8f4:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2b07      	cmp	r3, #7
 800d8fa:	dd01      	ble.n	800d900 <main+0xc8>
			  mode = 0;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800d900:	6879      	ldr	r1, [r7, #4]
 800d902:	4853      	ldr	r0, [pc, #332]	; (800da50 <main+0x218>)
 800d904:	f004 fbda 	bl	80120bc <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(dist_r <= -20){
 800d908:	4b52      	ldr	r3, [pc, #328]	; (800da54 <main+0x21c>)
 800d90a:	edd3 7a00 	vldr	s15, [r3]
 800d90e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800d912:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d91a:	d80f      	bhi.n	800d93c <main+0x104>
		  mode--;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	3b01      	subs	r3, #1
 800d920:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800d922:	4b4c      	ldr	r3, [pc, #304]	; (800da54 <main+0x21c>)
 800d924:	f04f 0200 	mov.w	r2, #0
 800d928:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	da01      	bge.n	800d934 <main+0xfc>
			  mode = 7;
 800d930:	2307      	movs	r3, #7
 800d932:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800d934:	6879      	ldr	r1, [r7, #4]
 800d936:	4846      	ldr	r0, [pc, #280]	; (800da50 <main+0x218>)
 800d938:	f004 fbc0 	bl	80120bc <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800d93c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d940:	4845      	ldr	r0, [pc, #276]	; (800da58 <main+0x220>)
 800d942:	f7f4 fcc7 	bl	80022d4 <HAL_GPIO_ReadPin>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d1b1      	bne.n	800d8b0 <main+0x78>
		  HAL_Delay(50);
 800d94c:	2032      	movs	r0, #50	; 0x32
 800d94e:	f7f3 fb65 	bl	800101c <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800d952:	bf00      	nop
 800d954:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d958:	483f      	ldr	r0, [pc, #252]	; (800da58 <main+0x220>)
 800d95a:	f7f4 fcbb 	bl	80022d4 <HAL_GPIO_ReadPin>
 800d95e:	4603      	mov	r3, r0
 800d960:	2b00      	cmp	r3, #0
 800d962:	d0f7      	beq.n	800d954 <main+0x11c>
		  switch(mode){
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2b07      	cmp	r3, #7
 800d968:	d8a2      	bhi.n	800d8b0 <main+0x78>
 800d96a:	a201      	add	r2, pc, #4	; (adr r2, 800d970 <main+0x138>)
 800d96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d970:	0800d991 	.word	0x0800d991
 800d974:	0800d99b 	.word	0x0800d99b
 800d978:	0800d9a7 	.word	0x0800d9a7
 800d97c:	0800d9b3 	.word	0x0800d9b3
 800d980:	0800d9bf 	.word	0x0800d9bf
 800d984:	0800d9c5 	.word	0x0800d9c5
 800d988:	0800d9f1 	.word	0x0800d9f1
 800d98c:	0800da33 	.word	0x0800da33

		  	  case 0:
		  		  HAL_Delay(5000);
 800d990:	f241 3088 	movw	r0, #5000	; 0x1388
 800d994:	f7f3 fb42 	bl	800101c <HAL_Delay>
		  		  break;
 800d998:	e04e      	b.n	800da38 <main+0x200>

		  	  case 1:
		  		  //----a超新地走行----
		  		  printf("Simple Run.\n");
 800d99a:	4830      	ldr	r0, [pc, #192]	; (800da5c <main+0x224>)
 800d99c:	f004 fc02 	bl	80121a4 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  simple_run();
 800d9a0:	f7fc ff3c 	bl	800a81c <simple_run>
		  		  break;
 800d9a4:	e048      	b.n	800da38 <main+0x200>

		  	  case 2:
		  		  //----aスラローム走行----
		  		  printf("slalom Run.\n");
 800d9a6:	482e      	ldr	r0, [pc, #184]	; (800da60 <main+0x228>)
 800d9a8:	f004 fbfc 	bl	80121a4 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  slalom_run();
 800d9ac:	f7fd f844 	bl	800aa38 <slalom_run>
		  		  break;
 800d9b0:	e042      	b.n	800da38 <main+0x200>

		  	  case 3:
		  		  //----aスラローム走行&pass圧縮----
				  printf("First Run. (Slalom)\n");
 800d9b2:	482c      	ldr	r0, [pc, #176]	; (800da64 <main+0x22c>)
 800d9b4:	f004 fbf6 	bl	80121a4 <puts>
		  		  pass_test();
 800d9b8:	f7fc f83c 	bl	8009a34 <pass_test>
		  		  break;
 800d9bc:	e03c      	b.n	800da38 <main+0x200>

		  	  case 4:
		  		  //----aテストモード選択----
		  		  test_select();
 800d9be:	f7fb faa5 	bl	8008f0c <test_select>
		  		  break;
 800d9c2:	e039      	b.n	800da38 <main+0x200>

		  	  case 5:
		  		  //----sensor check----
		  		  printf("Sensor Check.\n");
 800d9c4:	4828      	ldr	r0, [pc, #160]	; (800da68 <main+0x230>)
 800d9c6:	f004 fbed 	bl	80121a4 <puts>
		  		  sensor_test();
 800d9ca:	f003 fe9f 	bl	801170c <sensor_test>
		  		  break;
 800d9ce:	e033      	b.n	800da38 <main+0x200>

		  	  case 6:
		  		  //----pitagola sound----
				  while(ad_fl <= WALL_BASE_FL){
					  led_write(1, 1, 1);
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	2101      	movs	r1, #1
 800d9d4:	2001      	movs	r0, #1
 800d9d6:	f003 fda3 	bl	8011520 <led_write>
					  HAL_Delay(200);
 800d9da:	20c8      	movs	r0, #200	; 0xc8
 800d9dc:	f7f3 fb1e 	bl	800101c <HAL_Delay>
					  led_write(0, 0, 0);
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	2100      	movs	r1, #0
 800d9e4:	2000      	movs	r0, #0
 800d9e6:	f003 fd9b 	bl	8011520 <led_write>
					  HAL_Delay(200);
 800d9ea:	20c8      	movs	r0, #200	; 0xc8
 800d9ec:	f7f3 fb16 	bl	800101c <HAL_Delay>
				  while(ad_fl <= WALL_BASE_FL){
 800d9f0:	4b1e      	ldr	r3, [pc, #120]	; (800da6c <main+0x234>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	2bc8      	cmp	r3, #200	; 0xc8
 800d9f6:	d9eb      	bls.n	800d9d0 <main+0x198>
				  }
				  HAL_Delay(200);
 800d9f8:	20c8      	movs	r0, #200	; 0xc8
 800d9fa:	f7f3 fb0f 	bl	800101c <HAL_Delay>
		  		  }
				  HAL_Delay(2000);
				  for(int i=0; i<m_ok; i++){
		  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
		  		  }
*/				  HAL_Delay(2000);
 800d9fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800da02:	f7f3 fb0b 	bl	800101c <HAL_Delay>
				  for(int i=0; i<m_goal; i++){
 800da06:	2300      	movs	r3, #0
 800da08:	603b      	str	r3, [r7, #0]
 800da0a:	e00e      	b.n	800da2a <main+0x1f2>
		  			  buzzer(mario_goal[i][0], mario_goal[i][1]);
 800da0c:	4a18      	ldr	r2, [pc, #96]	; (800da70 <main+0x238>)
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800da14:	4a16      	ldr	r2, [pc, #88]	; (800da70 <main+0x238>)
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	00db      	lsls	r3, r3, #3
 800da1a:	4413      	add	r3, r2
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	4619      	mov	r1, r3
 800da20:	f000 fbda 	bl	800e1d8 <buzzer>
				  for(int i=0; i<m_goal; i++){
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	3301      	adds	r3, #1
 800da28:	603b      	str	r3, [r7, #0]
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	2b0e      	cmp	r3, #14
 800da2e:	dded      	ble.n	800da0c <main+0x1d4>
		  		  }
		  		  break;
 800da30:	e002      	b.n	800da38 <main+0x200>
		  		  //MF.FLAG.WEDGE = 1;
/*		  		  for(int i=0; i<m_select; i++){
		  			  buzzer(mario_select[i][0], mario_select[i][1]);
		  		  }
*///		  		  perfect_run();
		  		  perfect_slalom();
 800da32:	f7fd fa77 	bl	800af24 <perfect_slalom>
		  		  break;
 800da36:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800da38:	e73a      	b.n	800d8b0 <main+0x78>
 800da3a:	bf00      	nop
 800da3c:	080136c0 	.word	0x080136c0
 800da40:	20000084 	.word	0x20000084
 800da44:	2000030c 	.word	0x2000030c
 800da48:	200002cc 	.word	0x200002cc
 800da4c:	20000bb4 	.word	0x20000bb4
 800da50:	080136dc 	.word	0x080136dc
 800da54:	20000aec 	.word	0x20000aec
 800da58:	40020000 	.word	0x40020000
 800da5c:	080136e8 	.word	0x080136e8
 800da60:	080136f4 	.word	0x080136f4
 800da64:	08013700 	.word	0x08013700
 800da68:	08013714 	.word	0x08013714
 800da6c:	20000d54 	.word	0x20000d54
 800da70:	20000008 	.word	0x20000008

0800da74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b094      	sub	sp, #80	; 0x50
 800da78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800da7a:	f107 0320 	add.w	r3, r7, #32
 800da7e:	2230      	movs	r2, #48	; 0x30
 800da80:	2100      	movs	r1, #0
 800da82:	4618      	mov	r0, r3
 800da84:	f004 fb12 	bl	80120ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800da88:	f107 030c 	add.w	r3, r7, #12
 800da8c:	2200      	movs	r2, #0
 800da8e:	601a      	str	r2, [r3, #0]
 800da90:	605a      	str	r2, [r3, #4]
 800da92:	609a      	str	r2, [r3, #8]
 800da94:	60da      	str	r2, [r3, #12]
 800da96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800da98:	2300      	movs	r3, #0
 800da9a:	60bb      	str	r3, [r7, #8]
 800da9c:	4b28      	ldr	r3, [pc, #160]	; (800db40 <SystemClock_Config+0xcc>)
 800da9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daa0:	4a27      	ldr	r2, [pc, #156]	; (800db40 <SystemClock_Config+0xcc>)
 800daa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800daa6:	6413      	str	r3, [r2, #64]	; 0x40
 800daa8:	4b25      	ldr	r3, [pc, #148]	; (800db40 <SystemClock_Config+0xcc>)
 800daaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dab0:	60bb      	str	r3, [r7, #8]
 800dab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800dab4:	2300      	movs	r3, #0
 800dab6:	607b      	str	r3, [r7, #4]
 800dab8:	4b22      	ldr	r3, [pc, #136]	; (800db44 <SystemClock_Config+0xd0>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a21      	ldr	r2, [pc, #132]	; (800db44 <SystemClock_Config+0xd0>)
 800dabe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dac2:	6013      	str	r3, [r2, #0]
 800dac4:	4b1f      	ldr	r3, [pc, #124]	; (800db44 <SystemClock_Config+0xd0>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dacc:	607b      	str	r3, [r7, #4]
 800dace:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800dad0:	2302      	movs	r3, #2
 800dad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800dad4:	2301      	movs	r3, #1
 800dad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800dad8:	2310      	movs	r3, #16
 800dada:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800dadc:	2302      	movs	r3, #2
 800dade:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800dae0:	2300      	movs	r3, #0
 800dae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800dae4:	2308      	movs	r3, #8
 800dae6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800dae8:	23a8      	movs	r3, #168	; 0xa8
 800daea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800daec:	2302      	movs	r3, #2
 800daee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800daf0:	2304      	movs	r3, #4
 800daf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800daf4:	f107 0320 	add.w	r3, r7, #32
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7f4 fc1d 	bl	8002338 <HAL_RCC_OscConfig>
 800dafe:	4603      	mov	r3, r0
 800db00:	2b00      	cmp	r3, #0
 800db02:	d001      	beq.n	800db08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800db04:	f000 fbd1 	bl	800e2aa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800db08:	230f      	movs	r3, #15
 800db0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800db0c:	2302      	movs	r3, #2
 800db0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800db10:	2300      	movs	r3, #0
 800db12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800db14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800db18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800db1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800db20:	f107 030c 	add.w	r3, r7, #12
 800db24:	2105      	movs	r1, #5
 800db26:	4618      	mov	r0, r3
 800db28:	f7f4 fe48 	bl	80027bc <HAL_RCC_ClockConfig>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d001      	beq.n	800db36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800db32:	f000 fbba 	bl	800e2aa <Error_Handler>
  }
}
 800db36:	bf00      	nop
 800db38:	3750      	adds	r7, #80	; 0x50
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	40023800 	.word	0x40023800
 800db44:	40007000 	.word	0x40007000

0800db48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b084      	sub	sp, #16
 800db4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800db4e:	463b      	mov	r3, r7
 800db50:	2200      	movs	r2, #0
 800db52:	601a      	str	r2, [r3, #0]
 800db54:	605a      	str	r2, [r3, #4]
 800db56:	609a      	str	r2, [r3, #8]
 800db58:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800db5a:	4b21      	ldr	r3, [pc, #132]	; (800dbe0 <MX_ADC1_Init+0x98>)
 800db5c:	4a21      	ldr	r2, [pc, #132]	; (800dbe4 <MX_ADC1_Init+0x9c>)
 800db5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800db60:	4b1f      	ldr	r3, [pc, #124]	; (800dbe0 <MX_ADC1_Init+0x98>)
 800db62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800db66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800db68:	4b1d      	ldr	r3, [pc, #116]	; (800dbe0 <MX_ADC1_Init+0x98>)
 800db6a:	2200      	movs	r2, #0
 800db6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800db6e:	4b1c      	ldr	r3, [pc, #112]	; (800dbe0 <MX_ADC1_Init+0x98>)
 800db70:	2200      	movs	r2, #0
 800db72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800db74:	4b1a      	ldr	r3, [pc, #104]	; (800dbe0 <MX_ADC1_Init+0x98>)
 800db76:	2200      	movs	r2, #0
 800db78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800db7a:	4b19      	ldr	r3, [pc, #100]	; (800dbe0 <MX_ADC1_Init+0x98>)
 800db7c:	2200      	movs	r2, #0
 800db7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800db82:	4b17      	ldr	r3, [pc, #92]	; (800dbe0 <MX_ADC1_Init+0x98>)
 800db84:	2200      	movs	r2, #0
 800db86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800db88:	4b15      	ldr	r3, [pc, #84]	; (800dbe0 <MX_ADC1_Init+0x98>)
 800db8a:	4a17      	ldr	r2, [pc, #92]	; (800dbe8 <MX_ADC1_Init+0xa0>)
 800db8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800db8e:	4b14      	ldr	r3, [pc, #80]	; (800dbe0 <MX_ADC1_Init+0x98>)
 800db90:	2200      	movs	r2, #0
 800db92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800db94:	4b12      	ldr	r3, [pc, #72]	; (800dbe0 <MX_ADC1_Init+0x98>)
 800db96:	2201      	movs	r2, #1
 800db98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800db9a:	4b11      	ldr	r3, [pc, #68]	; (800dbe0 <MX_ADC1_Init+0x98>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800dba2:	4b0f      	ldr	r3, [pc, #60]	; (800dbe0 <MX_ADC1_Init+0x98>)
 800dba4:	2201      	movs	r2, #1
 800dba6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800dba8:	480d      	ldr	r0, [pc, #52]	; (800dbe0 <MX_ADC1_Init+0x98>)
 800dbaa:	f7f3 fa59 	bl	8001060 <HAL_ADC_Init>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d001      	beq.n	800dbb8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800dbb4:	f000 fb79 	bl	800e2aa <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dbc4:	463b      	mov	r3, r7
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	4805      	ldr	r0, [pc, #20]	; (800dbe0 <MX_ADC1_Init+0x98>)
 800dbca:	f7f3 fbe5 	bl	8001398 <HAL_ADC_ConfigChannel>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d001      	beq.n	800dbd8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800dbd4:	f000 fb69 	bl	800e2aa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800dbd8:	bf00      	nop
 800dbda:	3710      	adds	r7, #16
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	20000b00 	.word	0x20000b00
 800dbe4:	40012000 	.word	0x40012000
 800dbe8:	0f000001 	.word	0x0f000001

0800dbec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800dbf0:	4b17      	ldr	r3, [pc, #92]	; (800dc50 <MX_SPI3_Init+0x64>)
 800dbf2:	4a18      	ldr	r2, [pc, #96]	; (800dc54 <MX_SPI3_Init+0x68>)
 800dbf4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800dbf6:	4b16      	ldr	r3, [pc, #88]	; (800dc50 <MX_SPI3_Init+0x64>)
 800dbf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800dbfc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800dbfe:	4b14      	ldr	r3, [pc, #80]	; (800dc50 <MX_SPI3_Init+0x64>)
 800dc00:	2200      	movs	r2, #0
 800dc02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800dc04:	4b12      	ldr	r3, [pc, #72]	; (800dc50 <MX_SPI3_Init+0x64>)
 800dc06:	2200      	movs	r2, #0
 800dc08:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800dc0a:	4b11      	ldr	r3, [pc, #68]	; (800dc50 <MX_SPI3_Init+0x64>)
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800dc10:	4b0f      	ldr	r3, [pc, #60]	; (800dc50 <MX_SPI3_Init+0x64>)
 800dc12:	2200      	movs	r2, #0
 800dc14:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800dc16:	4b0e      	ldr	r3, [pc, #56]	; (800dc50 <MX_SPI3_Init+0x64>)
 800dc18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc1c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800dc1e:	4b0c      	ldr	r3, [pc, #48]	; (800dc50 <MX_SPI3_Init+0x64>)
 800dc20:	2218      	movs	r2, #24
 800dc22:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800dc24:	4b0a      	ldr	r3, [pc, #40]	; (800dc50 <MX_SPI3_Init+0x64>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800dc2a:	4b09      	ldr	r3, [pc, #36]	; (800dc50 <MX_SPI3_Init+0x64>)
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dc30:	4b07      	ldr	r3, [pc, #28]	; (800dc50 <MX_SPI3_Init+0x64>)
 800dc32:	2200      	movs	r2, #0
 800dc34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800dc36:	4b06      	ldr	r3, [pc, #24]	; (800dc50 <MX_SPI3_Init+0x64>)
 800dc38:	220a      	movs	r2, #10
 800dc3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800dc3c:	4804      	ldr	r0, [pc, #16]	; (800dc50 <MX_SPI3_Init+0x64>)
 800dc3e:	f7f4 ff85 	bl	8002b4c <HAL_SPI_Init>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d001      	beq.n	800dc4c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800dc48:	f000 fb2f 	bl	800e2aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800dc4c:	bf00      	nop
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	20000144 	.word	0x20000144
 800dc54:	40003c00 	.word	0x40003c00

0800dc58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b08e      	sub	sp, #56	; 0x38
 800dc5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dc5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc62:	2200      	movs	r2, #0
 800dc64:	601a      	str	r2, [r3, #0]
 800dc66:	605a      	str	r2, [r3, #4]
 800dc68:	609a      	str	r2, [r3, #8]
 800dc6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc6c:	f107 0320 	add.w	r3, r7, #32
 800dc70:	2200      	movs	r2, #0
 800dc72:	601a      	str	r2, [r3, #0]
 800dc74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dc76:	1d3b      	adds	r3, r7, #4
 800dc78:	2200      	movs	r2, #0
 800dc7a:	601a      	str	r2, [r3, #0]
 800dc7c:	605a      	str	r2, [r3, #4]
 800dc7e:	609a      	str	r2, [r3, #8]
 800dc80:	60da      	str	r2, [r3, #12]
 800dc82:	611a      	str	r2, [r3, #16]
 800dc84:	615a      	str	r2, [r3, #20]
 800dc86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800dc88:	4b32      	ldr	r3, [pc, #200]	; (800dd54 <MX_TIM2_Init+0xfc>)
 800dc8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dc8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800dc90:	4b30      	ldr	r3, [pc, #192]	; (800dd54 <MX_TIM2_Init+0xfc>)
 800dc92:	2200      	movs	r2, #0
 800dc94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc96:	4b2f      	ldr	r3, [pc, #188]	; (800dd54 <MX_TIM2_Init+0xfc>)
 800dc98:	2200      	movs	r2, #0
 800dc9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800dc9c:	4b2d      	ldr	r3, [pc, #180]	; (800dd54 <MX_TIM2_Init+0xfc>)
 800dc9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800dca2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dca4:	4b2b      	ldr	r3, [pc, #172]	; (800dd54 <MX_TIM2_Init+0xfc>)
 800dca6:	2200      	movs	r2, #0
 800dca8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dcaa:	4b2a      	ldr	r3, [pc, #168]	; (800dd54 <MX_TIM2_Init+0xfc>)
 800dcac:	2200      	movs	r2, #0
 800dcae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800dcb0:	4828      	ldr	r0, [pc, #160]	; (800dd54 <MX_TIM2_Init+0xfc>)
 800dcb2:	f7f5 fc9f 	bl	80035f4 <HAL_TIM_Base_Init>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d001      	beq.n	800dcc0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800dcbc:	f000 faf5 	bl	800e2aa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dcc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcc4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800dcc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dcca:	4619      	mov	r1, r3
 800dccc:	4821      	ldr	r0, [pc, #132]	; (800dd54 <MX_TIM2_Init+0xfc>)
 800dcce:	f7f6 f843 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d001      	beq.n	800dcdc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800dcd8:	f000 fae7 	bl	800e2aa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800dcdc:	481d      	ldr	r0, [pc, #116]	; (800dd54 <MX_TIM2_Init+0xfc>)
 800dcde:	f7f5 fcd8 	bl	8003692 <HAL_TIM_PWM_Init>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d001      	beq.n	800dcec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800dce8:	f000 fadf 	bl	800e2aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dcec:	2300      	movs	r3, #0
 800dcee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800dcf4:	f107 0320 	add.w	r3, r7, #32
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	4816      	ldr	r0, [pc, #88]	; (800dd54 <MX_TIM2_Init+0xfc>)
 800dcfc:	f7f6 fc1b 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800dd00:	4603      	mov	r3, r0
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d001      	beq.n	800dd0a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800dd06:	f000 fad0 	bl	800e2aa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dd0a:	2360      	movs	r3, #96	; 0x60
 800dd0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dd12:	2300      	movs	r3, #0
 800dd14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dd16:	2300      	movs	r3, #0
 800dd18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dd1a:	1d3b      	adds	r3, r7, #4
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	4619      	mov	r1, r3
 800dd20:	480c      	ldr	r0, [pc, #48]	; (800dd54 <MX_TIM2_Init+0xfc>)
 800dd22:	f7f5 ff53 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d001      	beq.n	800dd30 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800dd2c:	f000 fabd 	bl	800e2aa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800dd30:	1d3b      	adds	r3, r7, #4
 800dd32:	220c      	movs	r2, #12
 800dd34:	4619      	mov	r1, r3
 800dd36:	4807      	ldr	r0, [pc, #28]	; (800dd54 <MX_TIM2_Init+0xfc>)
 800dd38:	f7f5 ff48 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d001      	beq.n	800dd46 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800dd42:	f000 fab2 	bl	800e2aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800dd46:	4803      	ldr	r0, [pc, #12]	; (800dd54 <MX_TIM2_Init+0xfc>)
 800dd48:	f003 ff8e 	bl	8011c68 <HAL_TIM_MspPostInit>

}
 800dd4c:	bf00      	nop
 800dd4e:	3738      	adds	r7, #56	; 0x38
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}
 800dd54:	20000c14 	.word	0x20000c14

0800dd58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b08e      	sub	sp, #56	; 0x38
 800dd5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dd5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dd62:	2200      	movs	r2, #0
 800dd64:	601a      	str	r2, [r3, #0]
 800dd66:	605a      	str	r2, [r3, #4]
 800dd68:	609a      	str	r2, [r3, #8]
 800dd6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dd6c:	f107 0320 	add.w	r3, r7, #32
 800dd70:	2200      	movs	r2, #0
 800dd72:	601a      	str	r2, [r3, #0]
 800dd74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dd76:	1d3b      	adds	r3, r7, #4
 800dd78:	2200      	movs	r2, #0
 800dd7a:	601a      	str	r2, [r3, #0]
 800dd7c:	605a      	str	r2, [r3, #4]
 800dd7e:	609a      	str	r2, [r3, #8]
 800dd80:	60da      	str	r2, [r3, #12]
 800dd82:	611a      	str	r2, [r3, #16]
 800dd84:	615a      	str	r2, [r3, #20]
 800dd86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800dd88:	4b2c      	ldr	r3, [pc, #176]	; (800de3c <MX_TIM3_Init+0xe4>)
 800dd8a:	4a2d      	ldr	r2, [pc, #180]	; (800de40 <MX_TIM3_Init+0xe8>)
 800dd8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800dd8e:	4b2b      	ldr	r3, [pc, #172]	; (800de3c <MX_TIM3_Init+0xe4>)
 800dd90:	223f      	movs	r2, #63	; 0x3f
 800dd92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dd94:	4b29      	ldr	r3, [pc, #164]	; (800de3c <MX_TIM3_Init+0xe4>)
 800dd96:	2200      	movs	r2, #0
 800dd98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800dd9a:	4b28      	ldr	r3, [pc, #160]	; (800de3c <MX_TIM3_Init+0xe4>)
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dda0:	4b26      	ldr	r3, [pc, #152]	; (800de3c <MX_TIM3_Init+0xe4>)
 800dda2:	2200      	movs	r2, #0
 800dda4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dda6:	4b25      	ldr	r3, [pc, #148]	; (800de3c <MX_TIM3_Init+0xe4>)
 800dda8:	2200      	movs	r2, #0
 800ddaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800ddac:	4823      	ldr	r0, [pc, #140]	; (800de3c <MX_TIM3_Init+0xe4>)
 800ddae:	f7f5 fc21 	bl	80035f4 <HAL_TIM_Base_Init>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d001      	beq.n	800ddbc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800ddb8:	f000 fa77 	bl	800e2aa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ddbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800ddc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	481c      	ldr	r0, [pc, #112]	; (800de3c <MX_TIM3_Init+0xe4>)
 800ddca:	f7f5 ffc5 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d001      	beq.n	800ddd8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800ddd4:	f000 fa69 	bl	800e2aa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800ddd8:	4818      	ldr	r0, [pc, #96]	; (800de3c <MX_TIM3_Init+0xe4>)
 800ddda:	f7f5 fc5a 	bl	8003692 <HAL_TIM_PWM_Init>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d001      	beq.n	800dde8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800dde4:	f000 fa61 	bl	800e2aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dde8:	2300      	movs	r3, #0
 800ddea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ddec:	2300      	movs	r3, #0
 800ddee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ddf0:	f107 0320 	add.w	r3, r7, #32
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	4811      	ldr	r0, [pc, #68]	; (800de3c <MX_TIM3_Init+0xe4>)
 800ddf8:	f7f6 fb9d 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d001      	beq.n	800de06 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800de02:	f000 fa52 	bl	800e2aa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800de06:	2360      	movs	r3, #96	; 0x60
 800de08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800de0a:	2300      	movs	r3, #0
 800de0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800de0e:	2300      	movs	r3, #0
 800de10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800de12:	2300      	movs	r3, #0
 800de14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800de16:	1d3b      	adds	r3, r7, #4
 800de18:	2204      	movs	r2, #4
 800de1a:	4619      	mov	r1, r3
 800de1c:	4807      	ldr	r0, [pc, #28]	; (800de3c <MX_TIM3_Init+0xe4>)
 800de1e:	f7f5 fed5 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800de22:	4603      	mov	r3, r0
 800de24:	2b00      	cmp	r3, #0
 800de26:	d001      	beq.n	800de2c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800de28:	f000 fa3f 	bl	800e2aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800de2c:	4803      	ldr	r0, [pc, #12]	; (800de3c <MX_TIM3_Init+0xe4>)
 800de2e:	f003 ff1b 	bl	8011c68 <HAL_TIM_MspPostInit>

}
 800de32:	bf00      	nop
 800de34:	3738      	adds	r7, #56	; 0x38
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	20000aa4 	.word	0x20000aa4
 800de40:	40000400 	.word	0x40000400

0800de44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b08c      	sub	sp, #48	; 0x30
 800de48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800de4a:	f107 030c 	add.w	r3, r7, #12
 800de4e:	2224      	movs	r2, #36	; 0x24
 800de50:	2100      	movs	r1, #0
 800de52:	4618      	mov	r0, r3
 800de54:	f004 f92a 	bl	80120ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800de58:	1d3b      	adds	r3, r7, #4
 800de5a:	2200      	movs	r2, #0
 800de5c:	601a      	str	r2, [r3, #0]
 800de5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800de60:	4b20      	ldr	r3, [pc, #128]	; (800dee4 <MX_TIM4_Init+0xa0>)
 800de62:	4a21      	ldr	r2, [pc, #132]	; (800dee8 <MX_TIM4_Init+0xa4>)
 800de64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800de66:	4b1f      	ldr	r3, [pc, #124]	; (800dee4 <MX_TIM4_Init+0xa0>)
 800de68:	2200      	movs	r2, #0
 800de6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800de6c:	4b1d      	ldr	r3, [pc, #116]	; (800dee4 <MX_TIM4_Init+0xa0>)
 800de6e:	2200      	movs	r2, #0
 800de70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800de72:	4b1c      	ldr	r3, [pc, #112]	; (800dee4 <MX_TIM4_Init+0xa0>)
 800de74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800de7a:	4b1a      	ldr	r3, [pc, #104]	; (800dee4 <MX_TIM4_Init+0xa0>)
 800de7c:	2200      	movs	r2, #0
 800de7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800de80:	4b18      	ldr	r3, [pc, #96]	; (800dee4 <MX_TIM4_Init+0xa0>)
 800de82:	2200      	movs	r2, #0
 800de84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800de86:	2303      	movs	r3, #3
 800de88:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800de8a:	2300      	movs	r3, #0
 800de8c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800de8e:	2301      	movs	r3, #1
 800de90:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800de92:	2300      	movs	r3, #0
 800de94:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800de96:	2300      	movs	r3, #0
 800de98:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800de9a:	2300      	movs	r3, #0
 800de9c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800de9e:	2301      	movs	r3, #1
 800dea0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800dea2:	2300      	movs	r3, #0
 800dea4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800dea6:	2300      	movs	r3, #0
 800dea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800deaa:	f107 030c 	add.w	r3, r7, #12
 800deae:	4619      	mov	r1, r3
 800deb0:	480c      	ldr	r0, [pc, #48]	; (800dee4 <MX_TIM4_Init+0xa0>)
 800deb2:	f7f5 fcb9 	bl	8003828 <HAL_TIM_Encoder_Init>
 800deb6:	4603      	mov	r3, r0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d001      	beq.n	800dec0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800debc:	f000 f9f5 	bl	800e2aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dec0:	2300      	movs	r3, #0
 800dec2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dec4:	2300      	movs	r3, #0
 800dec6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800dec8:	1d3b      	adds	r3, r7, #4
 800deca:	4619      	mov	r1, r3
 800decc:	4805      	ldr	r0, [pc, #20]	; (800dee4 <MX_TIM4_Init+0xa0>)
 800dece:	f7f6 fb32 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800ded2:	4603      	mov	r3, r0
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d001      	beq.n	800dedc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800ded8:	f000 f9e7 	bl	800e2aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800dedc:	bf00      	nop
 800dede:	3730      	adds	r7, #48	; 0x30
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	2000030c 	.word	0x2000030c
 800dee8:	40000800 	.word	0x40000800

0800deec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800def2:	463b      	mov	r3, r7
 800def4:	2200      	movs	r2, #0
 800def6:	601a      	str	r2, [r3, #0]
 800def8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800defa:	4b15      	ldr	r3, [pc, #84]	; (800df50 <MX_TIM6_Init+0x64>)
 800defc:	4a15      	ldr	r2, [pc, #84]	; (800df54 <MX_TIM6_Init+0x68>)
 800defe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800df00:	4b13      	ldr	r3, [pc, #76]	; (800df50 <MX_TIM6_Init+0x64>)
 800df02:	2253      	movs	r2, #83	; 0x53
 800df04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800df06:	4b12      	ldr	r3, [pc, #72]	; (800df50 <MX_TIM6_Init+0x64>)
 800df08:	2200      	movs	r2, #0
 800df0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800df0c:	4b10      	ldr	r3, [pc, #64]	; (800df50 <MX_TIM6_Init+0x64>)
 800df0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800df12:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800df14:	4b0e      	ldr	r3, [pc, #56]	; (800df50 <MX_TIM6_Init+0x64>)
 800df16:	2200      	movs	r2, #0
 800df18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800df1a:	480d      	ldr	r0, [pc, #52]	; (800df50 <MX_TIM6_Init+0x64>)
 800df1c:	f7f5 fb6a 	bl	80035f4 <HAL_TIM_Base_Init>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	d001      	beq.n	800df2a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800df26:	f000 f9c0 	bl	800e2aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800df2a:	2300      	movs	r3, #0
 800df2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800df2e:	2300      	movs	r3, #0
 800df30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800df32:	463b      	mov	r3, r7
 800df34:	4619      	mov	r1, r3
 800df36:	4806      	ldr	r0, [pc, #24]	; (800df50 <MX_TIM6_Init+0x64>)
 800df38:	f7f6 fafd 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800df3c:	4603      	mov	r3, r0
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d001      	beq.n	800df46 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800df42:	f000 f9b2 	bl	800e2aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800df46:	bf00      	nop
 800df48:	3708      	adds	r7, #8
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	20000bb4 	.word	0x20000bb4
 800df54:	40001000 	.word	0x40001000

0800df58 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b08c      	sub	sp, #48	; 0x30
 800df5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800df5e:	f107 030c 	add.w	r3, r7, #12
 800df62:	2224      	movs	r2, #36	; 0x24
 800df64:	2100      	movs	r1, #0
 800df66:	4618      	mov	r0, r3
 800df68:	f004 f8a0 	bl	80120ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800df6c:	1d3b      	adds	r3, r7, #4
 800df6e:	2200      	movs	r2, #0
 800df70:	601a      	str	r2, [r3, #0]
 800df72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800df74:	4b22      	ldr	r3, [pc, #136]	; (800e000 <MX_TIM8_Init+0xa8>)
 800df76:	4a23      	ldr	r2, [pc, #140]	; (800e004 <MX_TIM8_Init+0xac>)
 800df78:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800df7a:	4b21      	ldr	r3, [pc, #132]	; (800e000 <MX_TIM8_Init+0xa8>)
 800df7c:	2200      	movs	r2, #0
 800df7e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800df80:	4b1f      	ldr	r3, [pc, #124]	; (800e000 <MX_TIM8_Init+0xa8>)
 800df82:	2200      	movs	r2, #0
 800df84:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800df86:	4b1e      	ldr	r3, [pc, #120]	; (800e000 <MX_TIM8_Init+0xa8>)
 800df88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df8c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800df8e:	4b1c      	ldr	r3, [pc, #112]	; (800e000 <MX_TIM8_Init+0xa8>)
 800df90:	2200      	movs	r2, #0
 800df92:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800df94:	4b1a      	ldr	r3, [pc, #104]	; (800e000 <MX_TIM8_Init+0xa8>)
 800df96:	2200      	movs	r2, #0
 800df98:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800df9a:	4b19      	ldr	r3, [pc, #100]	; (800e000 <MX_TIM8_Init+0xa8>)
 800df9c:	2200      	movs	r2, #0
 800df9e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800dfa0:	2303      	movs	r3, #3
 800dfa2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800dfac:	2300      	movs	r3, #0
 800dfae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800dfc4:	f107 030c 	add.w	r3, r7, #12
 800dfc8:	4619      	mov	r1, r3
 800dfca:	480d      	ldr	r0, [pc, #52]	; (800e000 <MX_TIM8_Init+0xa8>)
 800dfcc:	f7f5 fc2c 	bl	8003828 <HAL_TIM_Encoder_Init>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d001      	beq.n	800dfda <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800dfd6:	f000 f968 	bl	800e2aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800dfe2:	1d3b      	adds	r3, r7, #4
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	4806      	ldr	r0, [pc, #24]	; (800e000 <MX_TIM8_Init+0xa8>)
 800dfe8:	f7f6 faa5 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d001      	beq.n	800dff6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800dff2:	f000 f95a 	bl	800e2aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800dff6:	bf00      	nop
 800dff8:	3730      	adds	r7, #48	; 0x30
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	200002cc 	.word	0x200002cc
 800e004:	40010400 	.word	0x40010400

0800e008 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e00c:	4b11      	ldr	r3, [pc, #68]	; (800e054 <MX_USART1_UART_Init+0x4c>)
 800e00e:	4a12      	ldr	r2, [pc, #72]	; (800e058 <MX_USART1_UART_Init+0x50>)
 800e010:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800e012:	4b10      	ldr	r3, [pc, #64]	; (800e054 <MX_USART1_UART_Init+0x4c>)
 800e014:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800e018:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e01a:	4b0e      	ldr	r3, [pc, #56]	; (800e054 <MX_USART1_UART_Init+0x4c>)
 800e01c:	2200      	movs	r2, #0
 800e01e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e020:	4b0c      	ldr	r3, [pc, #48]	; (800e054 <MX_USART1_UART_Init+0x4c>)
 800e022:	2200      	movs	r2, #0
 800e024:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e026:	4b0b      	ldr	r3, [pc, #44]	; (800e054 <MX_USART1_UART_Init+0x4c>)
 800e028:	2200      	movs	r2, #0
 800e02a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e02c:	4b09      	ldr	r3, [pc, #36]	; (800e054 <MX_USART1_UART_Init+0x4c>)
 800e02e:	220c      	movs	r2, #12
 800e030:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e032:	4b08      	ldr	r3, [pc, #32]	; (800e054 <MX_USART1_UART_Init+0x4c>)
 800e034:	2200      	movs	r2, #0
 800e036:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e038:	4b06      	ldr	r3, [pc, #24]	; (800e054 <MX_USART1_UART_Init+0x4c>)
 800e03a:	2200      	movs	r2, #0
 800e03c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e03e:	4805      	ldr	r0, [pc, #20]	; (800e054 <MX_USART1_UART_Init+0x4c>)
 800e040:	f7f6 fad2 	bl	80045e8 <HAL_UART_Init>
 800e044:	4603      	mov	r3, r0
 800e046:	2b00      	cmp	r3, #0
 800e048:	d001      	beq.n	800e04e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800e04a:	f000 f92e 	bl	800e2aa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e04e:	bf00      	nop
 800e050:	bd80      	pop	{r7, pc}
 800e052:	bf00      	nop
 800e054:	20000b64 	.word	0x20000b64
 800e058:	40011000 	.word	0x40011000

0800e05c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b08a      	sub	sp, #40	; 0x28
 800e060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e062:	f107 0314 	add.w	r3, r7, #20
 800e066:	2200      	movs	r2, #0
 800e068:	601a      	str	r2, [r3, #0]
 800e06a:	605a      	str	r2, [r3, #4]
 800e06c:	609a      	str	r2, [r3, #8]
 800e06e:	60da      	str	r2, [r3, #12]
 800e070:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e072:	2300      	movs	r3, #0
 800e074:	613b      	str	r3, [r7, #16]
 800e076:	4b53      	ldr	r3, [pc, #332]	; (800e1c4 <MX_GPIO_Init+0x168>)
 800e078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e07a:	4a52      	ldr	r2, [pc, #328]	; (800e1c4 <MX_GPIO_Init+0x168>)
 800e07c:	f043 0304 	orr.w	r3, r3, #4
 800e080:	6313      	str	r3, [r2, #48]	; 0x30
 800e082:	4b50      	ldr	r3, [pc, #320]	; (800e1c4 <MX_GPIO_Init+0x168>)
 800e084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e086:	f003 0304 	and.w	r3, r3, #4
 800e08a:	613b      	str	r3, [r7, #16]
 800e08c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e08e:	2300      	movs	r3, #0
 800e090:	60fb      	str	r3, [r7, #12]
 800e092:	4b4c      	ldr	r3, [pc, #304]	; (800e1c4 <MX_GPIO_Init+0x168>)
 800e094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e096:	4a4b      	ldr	r2, [pc, #300]	; (800e1c4 <MX_GPIO_Init+0x168>)
 800e098:	f043 0301 	orr.w	r3, r3, #1
 800e09c:	6313      	str	r3, [r2, #48]	; 0x30
 800e09e:	4b49      	ldr	r3, [pc, #292]	; (800e1c4 <MX_GPIO_Init+0x168>)
 800e0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0a2:	f003 0301 	and.w	r3, r3, #1
 800e0a6:	60fb      	str	r3, [r7, #12]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	60bb      	str	r3, [r7, #8]
 800e0ae:	4b45      	ldr	r3, [pc, #276]	; (800e1c4 <MX_GPIO_Init+0x168>)
 800e0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0b2:	4a44      	ldr	r2, [pc, #272]	; (800e1c4 <MX_GPIO_Init+0x168>)
 800e0b4:	f043 0302 	orr.w	r3, r3, #2
 800e0b8:	6313      	str	r3, [r2, #48]	; 0x30
 800e0ba:	4b42      	ldr	r3, [pc, #264]	; (800e1c4 <MX_GPIO_Init+0x168>)
 800e0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0be:	f003 0302 	and.w	r3, r3, #2
 800e0c2:	60bb      	str	r3, [r7, #8]
 800e0c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	607b      	str	r3, [r7, #4]
 800e0ca:	4b3e      	ldr	r3, [pc, #248]	; (800e1c4 <MX_GPIO_Init+0x168>)
 800e0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ce:	4a3d      	ldr	r2, [pc, #244]	; (800e1c4 <MX_GPIO_Init+0x168>)
 800e0d0:	f043 0308 	orr.w	r3, r3, #8
 800e0d4:	6313      	str	r3, [r2, #48]	; 0x30
 800e0d6:	4b3b      	ldr	r3, [pc, #236]	; (800e1c4 <MX_GPIO_Init+0x168>)
 800e0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0da:	f003 0308 	and.w	r3, r3, #8
 800e0de:	607b      	str	r3, [r7, #4]
 800e0e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	f24e 213c 	movw	r1, #57916	; 0xe23c
 800e0e8:	4837      	ldr	r0, [pc, #220]	; (800e1c8 <MX_GPIO_Init+0x16c>)
 800e0ea:	f7f4 f90b 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800e0f4:	4835      	ldr	r0, [pc, #212]	; (800e1cc <MX_GPIO_Init+0x170>)
 800e0f6:	f7f4 f905 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f242 7103 	movw	r1, #9987	; 0x2703
 800e100:	4833      	ldr	r0, [pc, #204]	; (800e1d0 <MX_GPIO_Init+0x174>)
 800e102:	f7f4 f8ff 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800e106:	2200      	movs	r2, #0
 800e108:	2104      	movs	r1, #4
 800e10a:	4832      	ldr	r0, [pc, #200]	; (800e1d4 <MX_GPIO_Init+0x178>)
 800e10c:	f7f4 f8fa 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800e110:	f24e 233c 	movw	r3, #57916	; 0xe23c
 800e114:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e116:	2301      	movs	r3, #1
 800e118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e11a:	2300      	movs	r3, #0
 800e11c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e11e:	2300      	movs	r3, #0
 800e120:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e122:	f107 0314 	add.w	r3, r7, #20
 800e126:	4619      	mov	r1, r3
 800e128:	4827      	ldr	r0, [pc, #156]	; (800e1c8 <MX_GPIO_Init+0x16c>)
 800e12a:	f7f3 ff39 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800e12e:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800e132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e134:	2301      	movs	r3, #1
 800e136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e138:	2300      	movs	r3, #0
 800e13a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e13c:	2300      	movs	r3, #0
 800e13e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e140:	f107 0314 	add.w	r3, r7, #20
 800e144:	4619      	mov	r1, r3
 800e146:	4821      	ldr	r0, [pc, #132]	; (800e1cc <MX_GPIO_Init+0x170>)
 800e148:	f7f3 ff2a 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800e14c:	f242 7303 	movw	r3, #9987	; 0x2703
 800e150:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e152:	2301      	movs	r3, #1
 800e154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e156:	2300      	movs	r3, #0
 800e158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e15a:	2300      	movs	r3, #0
 800e15c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e15e:	f107 0314 	add.w	r3, r7, #20
 800e162:	4619      	mov	r1, r3
 800e164:	481a      	ldr	r0, [pc, #104]	; (800e1d0 <MX_GPIO_Init+0x174>)
 800e166:	f7f3 ff1b 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800e16a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e16e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e170:	2300      	movs	r3, #0
 800e172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e174:	2301      	movs	r3, #1
 800e176:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e178:	f107 0314 	add.w	r3, r7, #20
 800e17c:	4619      	mov	r1, r3
 800e17e:	4814      	ldr	r0, [pc, #80]	; (800e1d0 <MX_GPIO_Init+0x174>)
 800e180:	f7f3 ff0e 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800e184:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e18a:	2300      	movs	r3, #0
 800e18c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e18e:	2300      	movs	r3, #0
 800e190:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e192:	f107 0314 	add.w	r3, r7, #20
 800e196:	4619      	mov	r1, r3
 800e198:	480c      	ldr	r0, [pc, #48]	; (800e1cc <MX_GPIO_Init+0x170>)
 800e19a:	f7f3 ff01 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e19e:	2304      	movs	r3, #4
 800e1a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e1ae:	f107 0314 	add.w	r3, r7, #20
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	4807      	ldr	r0, [pc, #28]	; (800e1d4 <MX_GPIO_Init+0x178>)
 800e1b6:	f7f3 fef3 	bl	8001fa0 <HAL_GPIO_Init>

}
 800e1ba:	bf00      	nop
 800e1bc:	3728      	adds	r7, #40	; 0x28
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	bf00      	nop
 800e1c4:	40023800 	.word	0x40023800
 800e1c8:	40020800 	.word	0x40020800
 800e1cc:	40020000 	.word	0x40020000
 800e1d0:	40020400 	.word	0x40020400
 800e1d4:	40020c00 	.word	0x40020c00

0800e1d8 <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b08a      	sub	sp, #40	; 0x28
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e1e2:	2360      	movs	r3, #96	; 0x60
 800e1e4:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 800e1ee:	4a15      	ldr	r2, [pc, #84]	; (800e244 <buzzer+0x6c>)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	fb92 f3f3 	sdiv	r3, r2, r3
 800e1f6:	4a14      	ldr	r2, [pc, #80]	; (800e248 <buzzer+0x70>)
 800e1f8:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 800e1fa:	4b13      	ldr	r3, [pc, #76]	; (800e248 <buzzer+0x70>)
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	4b13      	ldr	r3, [pc, #76]	; (800e24c <buzzer+0x74>)
 800e200:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 10;
 800e202:	4b11      	ldr	r3, [pc, #68]	; (800e248 <buzzer+0x70>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	4a12      	ldr	r2, [pc, #72]	; (800e250 <buzzer+0x78>)
 800e208:	fb82 1203 	smull	r1, r2, r2, r3
 800e20c:	1092      	asrs	r2, r2, #2
 800e20e:	17db      	asrs	r3, r3, #31
 800e210:	1ad3      	subs	r3, r2, r3
 800e212:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_2);
 800e214:	f107 030c 	add.w	r3, r7, #12
 800e218:	2204      	movs	r2, #4
 800e21a:	4619      	mov	r1, r3
 800e21c:	480d      	ldr	r0, [pc, #52]	; (800e254 <buzzer+0x7c>)
 800e21e:	f7f5 fcd5 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800e222:	2104      	movs	r1, #4
 800e224:	480b      	ldr	r0, [pc, #44]	; (800e254 <buzzer+0x7c>)
 800e226:	f7f5 fa69 	bl	80036fc <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7f2 fef5 	bl	800101c <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800e232:	2104      	movs	r1, #4
 800e234:	4807      	ldr	r0, [pc, #28]	; (800e254 <buzzer+0x7c>)
 800e236:	f7f5 fa9f 	bl	8003778 <HAL_TIM_PWM_Stop>
}
 800e23a:	bf00      	nop
 800e23c:	3728      	adds	r7, #40	; 0x28
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop
 800e244:	000f4240 	.word	0x000f4240
 800e248:	200002c4 	.word	0x200002c4
 800e24c:	40000400 	.word	0x40000400
 800e250:	66666667 	.word	0x66666667
 800e254:	20000aa4 	.word	0x20000aa4

0800e258 <get_adc_value>:


int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 800e258:	b580      	push	{r7, lr}
 800e25a:	b086      	sub	sp, #24
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 800e262:	f107 0308 	add.w	r3, r7, #8
 800e266:	2200      	movs	r2, #0
 800e268:	601a      	str	r2, [r3, #0]
 800e26a:	605a      	str	r2, [r3, #4]
 800e26c:	609a      	str	r2, [r3, #8]
 800e26e:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 800e274:	2301      	movs	r3, #1
 800e276:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800e278:	2300      	movs	r3, #0
 800e27a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800e27c:	2300      	movs	r3, #0
 800e27e:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 800e280:	f107 0308 	add.w	r3, r7, #8
 800e284:	4619      	mov	r1, r3
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f7f3 f886 	bl	8001398 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f7f2 ff2b 	bl	80010e8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 800e292:	2164      	movs	r1, #100	; 0x64
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f7f2 ffed 	bl	8001274 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f7f3 f86e 	bl	800137c <HAL_ADC_GetValue>
 800e2a0:	4603      	mov	r3, r0
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3718      	adds	r7, #24
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}

0800e2aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e2aa:	b480      	push	{r7}
 800e2ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800e2ae:	bf00      	nop
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b6:	4770      	bx	lr

0800e2b8 <search_init>:

#include "global.h"

void search_init(void){
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	af00      	add	r7, sp, #0

	//----a探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 800e2bc:	4b09      	ldr	r3, [pc, #36]	; (800e2e4 <search_init+0x2c>)
 800e2be:	2201      	movs	r2, #1
 800e2c0:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 800e2c2:	4b09      	ldr	r3, [pc, #36]	; (800e2e8 <search_init+0x30>)
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	701a      	strb	r2, [r3, #0]
	map_Init();						//aマップの初期化
 800e2c8:	f001 f946 	bl	800f558 <map_Init>
	mouse.x = 0;
 800e2cc:	4b07      	ldr	r3, [pc, #28]	; (800e2ec <search_init+0x34>)
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	701a      	strb	r2, [r3, #0]
	mouse.y = 0;					//a現在地の初期化
 800e2d2:	4b06      	ldr	r3, [pc, #24]	; (800e2ec <search_init+0x34>)
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	705a      	strb	r2, [r3, #1]
	mouse.dir = 0;					//aマウスの向きの初期化
 800e2d8:	4b04      	ldr	r3, [pc, #16]	; (800e2ec <search_init+0x34>)
 800e2da:	2200      	movs	r2, #0
 800e2dc:	709a      	strb	r2, [r3, #2]
}
 800e2de:	bf00      	nop
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	20000bb0 	.word	0x20000bb0
 800e2e8:	20000b4c 	.word	0x20000b4c
 800e2ec:	20000c0c 	.word	0x20000c0c

0800e2f0 <searchA>:
//searchA
//a1区画走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchA(){
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800e2f4:	4b37      	ldr	r3, [pc, #220]	; (800e3d4 <searchA+0xe4>)
 800e2f6:	881b      	ldrh	r3, [r3, #0]
 800e2f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d001      	beq.n	800e306 <searchA+0x16>
		load_map_from_eeprom();
 800e302:	f003 f85b 	bl	80113bc <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800e306:	f003 f8d1 	bl	80114ac <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800e30a:	4b33      	ldr	r3, [pc, #204]	; (800e3d8 <searchA+0xe8>)
 800e30c:	781b      	ldrb	r3, [r3, #0]
 800e30e:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800e312:	b2da      	uxtb	r2, r3
 800e314:	4b30      	ldr	r3, [pc, #192]	; (800e3d8 <searchA+0xe8>)
 800e316:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800e318:	f001 f98a 	bl	800f630 <write_map>

	//====a歩数マップ・経路作成====
	r_cnt = 0;												//a経路カウンタの初期化
 800e31c:	4b2f      	ldr	r3, [pc, #188]	; (800e3dc <searchA+0xec>)
 800e31e:	2200      	movs	r2, #0
 800e320:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800e322:	f001 fb79 	bl	800fa18 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800e326:	f001 ff33 	bl	8010190 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800e32a:	4b2c      	ldr	r3, [pc, #176]	; (800e3dc <searchA+0xec>)
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	1c5a      	adds	r2, r3, #1
 800e330:	b2d1      	uxtb	r1, r2
 800e332:	4a2a      	ldr	r2, [pc, #168]	; (800e3dc <searchA+0xec>)
 800e334:	7011      	strb	r1, [r2, #0]
 800e336:	461a      	mov	r2, r3
 800e338:	4b29      	ldr	r3, [pc, #164]	; (800e3e0 <searchA+0xf0>)
 800e33a:	5c9b      	ldrb	r3, [r3, r2]
 800e33c:	2b22      	cmp	r3, #34	; 0x22
 800e33e:	d00b      	beq.n	800e358 <searchA+0x68>
 800e340:	2b22      	cmp	r3, #34	; 0x22
 800e342:	dc02      	bgt.n	800e34a <searchA+0x5a>
 800e344:	2b11      	cmp	r3, #17
 800e346:	d012      	beq.n	800e36e <searchA+0x7e>
 800e348:	e015      	b.n	800e376 <searchA+0x86>
 800e34a:	2b44      	cmp	r3, #68	; 0x44
 800e34c:	d001      	beq.n	800e352 <searchA+0x62>
 800e34e:	2b88      	cmp	r3, #136	; 0x88
			//----a前進----
			case 0x88:
				break;
 800e350:	e011      	b.n	800e376 <searchA+0x86>
			//----a右折----
			case 0x44:
				rotate_R90();								//a右回転
 800e352:	f7f7 fe89 	bl	8006068 <rotate_R90>
				break;
 800e356:	e00e      	b.n	800e376 <searchA+0x86>
			//----180回転----
			case 0x22:
				rotate_180();								//180度回転
 800e358:	f7f8 f83e 	bl	80063d8 <rotate_180>
				if(wall_info & 0x88){
 800e35c:	4b1e      	ldr	r3, [pc, #120]	; (800e3d8 <searchA+0xe8>)
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800e364:	2b00      	cmp	r3, #0
 800e366:	d005      	beq.n	800e374 <searchA+0x84>
					set_position();
 800e368:	f7f7 fa84 	bl	8005874 <set_position>
				}
				break;
 800e36c:	e002      	b.n	800e374 <searchA+0x84>
			//----a左折----
			case 0x11:
				rotate_L90();								//a左回転
 800e36e:	f7f7 ff57 	bl	8006220 <rotate_L90>
				break;
 800e372:	e000      	b.n	800e376 <searchA+0x86>
				break;
 800e374:	bf00      	nop
		}

		drive_wait();
 800e376:	2032      	movs	r0, #50	; 0x32
 800e378:	f7f2 fe50 	bl	800101c <HAL_Delay>
		one_section();										//a前進する
 800e37c:	f7f7 fcb2 	bl	8005ce4 <one_section>
		drive_wait();
 800e380:	2032      	movs	r0, #50	; 0x32
 800e382:	f7f2 fe4b 	bl	800101c <HAL_Delay>

		adv_pos();											//aマイクロマウス内部位置情報でも前進処理
 800e386:	f001 f88f 	bl	800f4a8 <adv_pos>
		conf_route();										//a最短経路で進行可能か判定
 800e38a:	f001 f8c7 	bl	800f51c <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));		//a現在座標とgoal座標が等しくなるまで実行
 800e38e:	4b15      	ldr	r3, [pc, #84]	; (800e3e4 <searchA+0xf4>)
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	b2da      	uxtb	r2, r3
 800e394:	4b14      	ldr	r3, [pc, #80]	; (800e3e8 <searchA+0xf8>)
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d1c6      	bne.n	800e32a <searchA+0x3a>
 800e39c:	4b11      	ldr	r3, [pc, #68]	; (800e3e4 <searchA+0xf4>)
 800e39e:	785b      	ldrb	r3, [r3, #1]
 800e3a0:	b2da      	uxtb	r2, r3
 800e3a2:	4b12      	ldr	r3, [pc, #72]	; (800e3ec <searchA+0xfc>)
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d1bf      	bne.n	800e32a <searchA+0x3a>

	printf("goal\n");
 800e3aa:	4811      	ldr	r0, [pc, #68]	; (800e3f0 <searchA+0x100>)
 800e3ac:	f003 fefa 	bl	80121a4 <puts>
	HAL_Delay(500);										//aスタートでは***2秒以上***停止しなくてはならない
 800e3b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e3b4:	f7f2 fe32 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800e3b8:	f7f8 f80e 	bl	80063d8 <rotate_180>

	if(!MF.FLAG.SCND){
 800e3bc:	4b05      	ldr	r3, [pc, #20]	; (800e3d4 <searchA+0xe4>)
 800e3be:	881b      	ldrh	r3, [r3, #0]
 800e3c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e3c4:	b2db      	uxtb	r3, r3
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d101      	bne.n	800e3ce <searchA+0xde>
		store_map_in_eeprom();
 800e3ca:	f002 ffbd 	bl	8011348 <store_map_in_eeprom>
	}
}
 800e3ce:	bf00      	nop
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	20000f68 	.word	0x20000f68
 800e3d8:	200002c8 	.word	0x200002c8
 800e3dc:	200015d0 	.word	0x200015d0
 800e3e0:	20000c54 	.word	0x20000c54
 800e3e4:	20000c0c 	.word	0x20000c0c
 800e3e8:	20000bb0 	.word	0x20000bb0
 800e3ec:	20000b4c 	.word	0x20000b4c
 800e3f0:	08013724 	.word	0x08013724

0800e3f4 <searchB>:
//searchB
//a連続走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchB(){
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800e3f8:	4b3c      	ldr	r3, [pc, #240]	; (800e4ec <searchB+0xf8>)
 800e3fa:	881b      	ldrh	r3, [r3, #0]
 800e3fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e400:	b2db      	uxtb	r3, r3
 800e402:	2b00      	cmp	r3, #0
 800e404:	d001      	beq.n	800e40a <searchB+0x16>
		load_map_from_eeprom();
 800e406:	f002 ffd9 	bl	80113bc <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800e40a:	f003 f84f 	bl	80114ac <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800e40e:	4b38      	ldr	r3, [pc, #224]	; (800e4f0 <searchB+0xfc>)
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800e416:	b2da      	uxtb	r2, r3
 800e418:	4b35      	ldr	r3, [pc, #212]	; (800e4f0 <searchB+0xfc>)
 800e41a:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800e41c:	f001 f908 	bl	800f630 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800e420:	f7f7 fa5c 	bl	80058dc <start_sectionA>
	adv_pos();
 800e424:	f001 f840 	bl	800f4a8 <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 800e428:	f001 f902 	bl	800f630 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800e42c:	4b31      	ldr	r3, [pc, #196]	; (800e4f4 <searchB+0x100>)
 800e42e:	2200      	movs	r2, #0
 800e430:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800e432:	f001 faf1 	bl	800fa18 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800e436:	f001 feab 	bl	8010190 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800e43a:	4b2e      	ldr	r3, [pc, #184]	; (800e4f4 <searchB+0x100>)
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	1c5a      	adds	r2, r3, #1
 800e440:	b2d1      	uxtb	r1, r2
 800e442:	4a2c      	ldr	r2, [pc, #176]	; (800e4f4 <searchB+0x100>)
 800e444:	7011      	strb	r1, [r2, #0]
 800e446:	461a      	mov	r2, r3
 800e448:	4b2b      	ldr	r3, [pc, #172]	; (800e4f8 <searchB+0x104>)
 800e44a:	5c9b      	ldrb	r3, [r3, r2]
 800e44c:	2b22      	cmp	r3, #34	; 0x22
 800e44e:	d012      	beq.n	800e476 <searchB+0x82>
 800e450:	2b22      	cmp	r3, #34	; 0x22
 800e452:	dc02      	bgt.n	800e45a <searchB+0x66>
 800e454:	2b11      	cmp	r3, #17
 800e456:	d01d      	beq.n	800e494 <searchB+0xa0>
 800e458:	e023      	b.n	800e4a2 <searchB+0xae>
 800e45a:	2b44      	cmp	r3, #68	; 0x44
 800e45c:	d004      	beq.n	800e468 <searchB+0x74>
 800e45e:	2b88      	cmp	r3, #136	; 0x88
 800e460:	d11f      	bne.n	800e4a2 <searchB+0xae>
			//----a前進----
			case 0x88:
				one_sectionU();
 800e462:	f7f7 fde7 	bl	8006034 <one_sectionU>
				break;
 800e466:	e01c      	b.n	800e4a2 <searchB+0xae>
			//----a右折----
			case 0x44:
				half_sectionD();
 800e468:	f7f7 fb56 	bl	8005b18 <half_sectionD>
				rotate_R90();
 800e46c:	f7f7 fdfc 	bl	8006068 <rotate_R90>
				half_sectionA();
 800e470:	f7f7 fb08 	bl	8005a84 <half_sectionA>
				break;
 800e474:	e015      	b.n	800e4a2 <searchB+0xae>
			//----180回転----
			case 0x22:
				half_sectionD();
 800e476:	f7f7 fb4f 	bl	8005b18 <half_sectionD>
				rotate_180();
 800e47a:	f7f7 ffad 	bl	80063d8 <rotate_180>
				if(wall_info & 0x88){
 800e47e:	4b1c      	ldr	r3, [pc, #112]	; (800e4f0 <searchB+0xfc>)
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800e486:	2b00      	cmp	r3, #0
 800e488:	d001      	beq.n	800e48e <searchB+0x9a>
					set_position();
 800e48a:	f7f7 f9f3 	bl	8005874 <set_position>
				}
				half_sectionA();
 800e48e:	f7f7 faf9 	bl	8005a84 <half_sectionA>
				break;
 800e492:	e006      	b.n	800e4a2 <searchB+0xae>
			//----a左折----
			case 0x11:
				half_sectionD();
 800e494:	f7f7 fb40 	bl	8005b18 <half_sectionD>
				rotate_L90();
 800e498:	f7f7 fec2 	bl	8006220 <rotate_L90>
				half_sectionA();
 800e49c:	f7f7 faf2 	bl	8005a84 <half_sectionA>
				break;
 800e4a0:	bf00      	nop
		}
		adv_pos();
 800e4a2:	f001 f801 	bl	800f4a8 <adv_pos>
		conf_route();
 800e4a6:	f001 f839 	bl	800f51c <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800e4aa:	4b14      	ldr	r3, [pc, #80]	; (800e4fc <searchB+0x108>)
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	b2da      	uxtb	r2, r3
 800e4b0:	4b13      	ldr	r3, [pc, #76]	; (800e500 <searchB+0x10c>)
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d1c0      	bne.n	800e43a <searchB+0x46>
 800e4b8:	4b10      	ldr	r3, [pc, #64]	; (800e4fc <searchB+0x108>)
 800e4ba:	785b      	ldrb	r3, [r3, #1]
 800e4bc:	b2da      	uxtb	r2, r3
 800e4be:	4b11      	ldr	r3, [pc, #68]	; (800e504 <searchB+0x110>)
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d1b9      	bne.n	800e43a <searchB+0x46>

	half_sectionD();
 800e4c6:	f7f7 fb27 	bl	8005b18 <half_sectionD>

	HAL_Delay(500);
 800e4ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e4ce:	f7f2 fda5 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800e4d2:	f7f7 ff81 	bl	80063d8 <rotate_180>

	if(!MF.FLAG.SCND){
 800e4d6:	4b05      	ldr	r3, [pc, #20]	; (800e4ec <searchB+0xf8>)
 800e4d8:	881b      	ldrh	r3, [r3, #0]
 800e4da:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e4de:	b2db      	uxtb	r3, r3
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d101      	bne.n	800e4e8 <searchB+0xf4>
		store_map_in_eeprom();
 800e4e4:	f002 ff30 	bl	8011348 <store_map_in_eeprom>
	}
}
 800e4e8:	bf00      	nop
 800e4ea:	bd80      	pop	{r7, pc}
 800e4ec:	20000f68 	.word	0x20000f68
 800e4f0:	200002c8 	.word	0x200002c8
 800e4f4:	200015d0 	.word	0x200015d0
 800e4f8:	20000c54 	.word	0x20000c54
 800e4fc:	20000c0c 	.word	0x20000c0c
 800e500:	20000bb0 	.word	0x20000bb0
 800e504:	20000b4c 	.word	0x20000b4c

0800e508 <searchC>:
//searchC
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC(){
 800e508:	b590      	push	{r4, r7, lr}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800e50e:	4ba9      	ldr	r3, [pc, #676]	; (800e7b4 <searchC+0x2ac>)
 800e510:	881b      	ldrh	r3, [r3, #0]
 800e512:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e516:	b2db      	uxtb	r3, r3
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d001      	beq.n	800e520 <searchC+0x18>
		load_map_from_eeprom();
 800e51c:	f002 ff4e 	bl	80113bc <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800e520:	4ba4      	ldr	r3, [pc, #656]	; (800e7b4 <searchC+0x2ac>)
 800e522:	881b      	ldrh	r3, [r3, #0]
 800e524:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d101      	bne.n	800e532 <searchC+0x2a>
 800e52e:	f002 ffbd 	bl	80114ac <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
 800e532:	4ba0      	ldr	r3, [pc, #640]	; (800e7b4 <searchC+0x2ac>)
 800e534:	881b      	ldrh	r3, [r3, #0]
 800e536:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e53a:	b2db      	uxtb	r3, r3
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d106      	bne.n	800e54e <searchC+0x46>
 800e540:	4b9d      	ldr	r3, [pc, #628]	; (800e7b8 <searchC+0x2b0>)
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800e548:	b2da      	uxtb	r2, r3
 800e54a:	4b9b      	ldr	r3, [pc, #620]	; (800e7b8 <searchC+0x2b0>)
 800e54c:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800e54e:	4b99      	ldr	r3, [pc, #612]	; (800e7b4 <searchC+0x2ac>)
 800e550:	881b      	ldrh	r3, [r3, #0]
 800e552:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e556:	b2db      	uxtb	r3, r3
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d101      	bne.n	800e560 <searchC+0x58>
 800e55c:	f001 f868 	bl	800f630 <write_map>

	if(MF2.FLAG.GOAL){
 800e560:	4b96      	ldr	r3, [pc, #600]	; (800e7bc <searchC+0x2b4>)
 800e562:	881b      	ldrh	r3, [r3, #0]
 800e564:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d007      	beq.n	800e57e <searchC+0x76>
//		HAL_Delay(500);
		rotate_180();											//180度回転
 800e56e:	f7f7 ff33 	bl	80063d8 <rotate_180>
//		driveC2(SETPOS_BACK);         							//a尻を当てる程度に後退。回転後に停止する
//		degree_z = target_degree_z;
//		start_mode = 0;
		start_mode = 1;
 800e572:	4b93      	ldr	r3, [pc, #588]	; (800e7c0 <searchC+0x2b8>)
 800e574:	2201      	movs	r2, #1
 800e576:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800e578:	4b92      	ldr	r3, [pc, #584]	; (800e7c4 <searchC+0x2bc>)
 800e57a:	2201      	movs	r2, #1
 800e57c:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND || !MF2.FLAG.GOAL)wall_info &= ~0x88;					//a前壁は存在するはずがないので削除する
	if(!MF.FLAG.SCND || !MF2.FLAG.GOAL)write_map();							//a壁情報を地図に記入
*/

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800e57e:	f7f7 f9ad 	bl	80058dc <start_sectionA>
	adv_pos();
 800e582:	f000 ff91 	bl	800f4a8 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800e586:	4b8b      	ldr	r3, [pc, #556]	; (800e7b4 <searchC+0x2ac>)
 800e588:	881b      	ldrh	r3, [r3, #0]
 800e58a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e58e:	b2db      	uxtb	r3, r3
 800e590:	2b00      	cmp	r3, #0
 800e592:	d101      	bne.n	800e598 <searchC+0x90>
 800e594:	f001 f84c 	bl	800f630 <write_map>
	r_cnt = 0;																//a経路カウンタの初期化
 800e598:	4b8b      	ldr	r3, [pc, #556]	; (800e7c8 <searchC+0x2c0>)
 800e59a:	2200      	movs	r2, #0
 800e59c:	701a      	strb	r2, [r3, #0]
	make_smap();															//a歩数マップ作成
 800e59e:	f001 fa3b 	bl	800fa18 <make_smap>
	make_route();															//a最短経路探索（route配列に動作が格納される）
 800e5a2:	f001 fdf5 	bl	8010190 <make_route>
	uint8_t x, y;															//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){												//route配列によって進行を決定。経路カウンタを進める
 800e5a6:	4b88      	ldr	r3, [pc, #544]	; (800e7c8 <searchC+0x2c0>)
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	1c5a      	adds	r2, r3, #1
 800e5ac:	b2d1      	uxtb	r1, r2
 800e5ae:	4a86      	ldr	r2, [pc, #536]	; (800e7c8 <searchC+0x2c0>)
 800e5b0:	7011      	strb	r1, [r2, #0]
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	4b85      	ldr	r3, [pc, #532]	; (800e7cc <searchC+0x2c4>)
 800e5b6:	5c9b      	ldrb	r3, [r3, r2]
 800e5b8:	2b22      	cmp	r3, #34	; 0x22
 800e5ba:	d07f      	beq.n	800e6bc <searchC+0x1b4>
 800e5bc:	2b22      	cmp	r3, #34	; 0x22
 800e5be:	dc03      	bgt.n	800e5c8 <searchC+0xc0>
 800e5c0:	2b11      	cmp	r3, #17
 800e5c2:	f000 808b 	beq.w	800e6dc <searchC+0x1d4>
 800e5c6:	e08c      	b.n	800e6e2 <searchC+0x1da>
 800e5c8:	2b44      	cmp	r3, #68	; 0x44
 800e5ca:	d074      	beq.n	800e6b6 <searchC+0x1ae>
 800e5cc:	2b88      	cmp	r3, #136	; 0x88
 800e5ce:	f040 8088 	bne.w	800e6e2 <searchC+0x1da>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800e5d2:	4b7d      	ldr	r3, [pc, #500]	; (800e7c8 <searchC+0x2c0>)
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	461a      	mov	r2, r3
 800e5d8:	4b7c      	ldr	r3, [pc, #496]	; (800e7cc <searchC+0x2c4>)
 800e5da:	5c9b      	ldrb	r3, [r3, r2]
 800e5dc:	2b88      	cmp	r3, #136	; 0x88
 800e5de:	d158      	bne.n	800e692 <searchC+0x18a>
 800e5e0:	4b74      	ldr	r3, [pc, #464]	; (800e7b4 <searchC+0x2ac>)
 800e5e2:	881b      	ldrh	r3, [r3, #0]
 800e5e4:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800e5e8:	b2db      	uxtb	r3, r3
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d051      	beq.n	800e692 <searchC+0x18a>
					x = mouse.x;
 800e5ee:	4b78      	ldr	r3, [pc, #480]	; (800e7d0 <searchC+0x2c8>)
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	70fb      	strb	r3, [r7, #3]
					y = mouse.y;
 800e5f4:	4b76      	ldr	r3, [pc, #472]	; (800e7d0 <searchC+0x2c8>)
 800e5f6:	785b      	ldrb	r3, [r3, #1]
 800e5f8:	70bb      	strb	r3, [r7, #2]
					adv_pos();
 800e5fa:	f000 ff55 	bl	800f4a8 <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800e5fe:	4b74      	ldr	r3, [pc, #464]	; (800e7d0 <searchC+0x2c8>)
 800e600:	785b      	ldrb	r3, [r3, #1]
 800e602:	b2db      	uxtb	r3, r3
 800e604:	4618      	mov	r0, r3
 800e606:	4b72      	ldr	r3, [pc, #456]	; (800e7d0 <searchC+0x2c8>)
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	4619      	mov	r1, r3
 800e60e:	4a71      	ldr	r2, [pc, #452]	; (800e7d4 <searchC+0x2cc>)
 800e610:	0103      	lsls	r3, r0, #4
 800e612:	4413      	add	r3, r2
 800e614:	440b      	add	r3, r1
 800e616:	781b      	ldrb	r3, [r3, #0]
 800e618:	f003 030f 	and.w	r3, r3, #15
 800e61c:	4a6c      	ldr	r2, [pc, #432]	; (800e7d0 <searchC+0x2c8>)
 800e61e:	7852      	ldrb	r2, [r2, #1]
 800e620:	b2d2      	uxtb	r2, r2
 800e622:	4614      	mov	r4, r2
 800e624:	4a6a      	ldr	r2, [pc, #424]	; (800e7d0 <searchC+0x2c8>)
 800e626:	7812      	ldrb	r2, [r2, #0]
 800e628:	b2d2      	uxtb	r2, r2
 800e62a:	4610      	mov	r0, r2
 800e62c:	4969      	ldr	r1, [pc, #420]	; (800e7d4 <searchC+0x2cc>)
 800e62e:	0122      	lsls	r2, r4, #4
 800e630:	440a      	add	r2, r1
 800e632:	4402      	add	r2, r0
 800e634:	7812      	ldrb	r2, [r2, #0]
 800e636:	0912      	lsrs	r2, r2, #4
 800e638:	b2d2      	uxtb	r2, r2
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d111      	bne.n	800e662 <searchC+0x15a>
						if(!MF2.FLAG.HACCEL){
 800e63e:	4b5f      	ldr	r3, [pc, #380]	; (800e7bc <searchC+0x2b4>)
 800e640:	881b      	ldrh	r3, [r3, #0]
 800e642:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e646:	b2db      	uxtb	r3, r3
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d107      	bne.n	800e65c <searchC+0x154>
							one_sectionA();
 800e64c:	f7f7 fb52 	bl	8005cf4 <one_sectionA>
							MF2.FLAG.HACCEL = 1;
 800e650:	4a5a      	ldr	r2, [pc, #360]	; (800e7bc <searchC+0x2b4>)
 800e652:	8813      	ldrh	r3, [r2, #0]
 800e654:	f043 0302 	orr.w	r3, r3, #2
 800e658:	8013      	strh	r3, [r2, #0]
 800e65a:	e013      	b.n	800e684 <searchC+0x17c>
						}else{
							one_sectionU();
 800e65c:	f7f7 fcea 	bl	8006034 <one_sectionU>
 800e660:	e010      	b.n	800e684 <searchC+0x17c>
						}
					}else if(MF2.FLAG.HACCEL){
 800e662:	4b56      	ldr	r3, [pc, #344]	; (800e7bc <searchC+0x2b4>)
 800e664:	881b      	ldrh	r3, [r3, #0]
 800e666:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d007      	beq.n	800e680 <searchC+0x178>
						one_sectionD();
 800e670:	f7f7 fba6 	bl	8005dc0 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800e674:	4a51      	ldr	r2, [pc, #324]	; (800e7bc <searchC+0x2b4>)
 800e676:	8813      	ldrh	r3, [r2, #0]
 800e678:	f36f 0341 	bfc	r3, #1, #1
 800e67c:	8013      	strh	r3, [r2, #0]
 800e67e:	e001      	b.n	800e684 <searchC+0x17c>
					}else{
						one_sectionU();
 800e680:	f7f7 fcd8 	bl	8006034 <one_sectionU>
					}
					mouse.x = x;
 800e684:	4a52      	ldr	r2, [pc, #328]	; (800e7d0 <searchC+0x2c8>)
 800e686:	78fb      	ldrb	r3, [r7, #3]
 800e688:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800e68a:	4a51      	ldr	r2, [pc, #324]	; (800e7d0 <searchC+0x2c8>)
 800e68c:	78bb      	ldrb	r3, [r7, #2]
 800e68e:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}else{
					one_sectionU();
				}
				break;
 800e690:	e027      	b.n	800e6e2 <searchC+0x1da>
				}else if(MF2.FLAG.HACCEL){
 800e692:	4b4a      	ldr	r3, [pc, #296]	; (800e7bc <searchC+0x2b4>)
 800e694:	881b      	ldrh	r3, [r3, #0]
 800e696:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d007      	beq.n	800e6b0 <searchC+0x1a8>
					one_sectionD();
 800e6a0:	f7f7 fb8e 	bl	8005dc0 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800e6a4:	4a45      	ldr	r2, [pc, #276]	; (800e7bc <searchC+0x2b4>)
 800e6a6:	8813      	ldrh	r3, [r2, #0]
 800e6a8:	f36f 0341 	bfc	r3, #1, #1
 800e6ac:	8013      	strh	r3, [r2, #0]
				break;
 800e6ae:	e018      	b.n	800e6e2 <searchC+0x1da>
					one_sectionU();
 800e6b0:	f7f7 fcc0 	bl	8006034 <one_sectionU>
				break;
 800e6b4:	e015      	b.n	800e6e2 <searchC+0x1da>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800e6b6:	f7f7 ff67 	bl	8006588 <slalom_R90>
				break;
 800e6ba:	e012      	b.n	800e6e2 <searchC+0x1da>
			//----180回転----
			case 0x22:
				half_sectionD();
 800e6bc:	f7f7 fa2c 	bl	8005b18 <half_sectionD>
				rotate_180();
 800e6c0:	f7f7 fe8a 	bl	80063d8 <rotate_180>
				if(wall_info & 0x88){
 800e6c4:	4b3c      	ldr	r3, [pc, #240]	; (800e7b8 <searchC+0x2b0>)
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d002      	beq.n	800e6d6 <searchC+0x1ce>
					set_position();
 800e6d0:	f7f7 f8d0 	bl	8005874 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800e6d4:	e005      	b.n	800e6e2 <searchC+0x1da>
					half_sectionA();
 800e6d6:	f7f7 f9d5 	bl	8005a84 <half_sectionA>
				break;
 800e6da:	e002      	b.n	800e6e2 <searchC+0x1da>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800e6dc:	f7f8 f86a 	bl	80067b4 <slalom_L90>
				break;
 800e6e0:	bf00      	nop
		}
		adv_pos();
 800e6e2:	f000 fee1 	bl	800f4a8 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800e6e6:	4b33      	ldr	r3, [pc, #204]	; (800e7b4 <searchC+0x2ac>)
 800e6e8:	881b      	ldrh	r3, [r3, #0]
 800e6ea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d101      	bne.n	800e6f8 <searchC+0x1f0>
 800e6f4:	f000 ff12 	bl	800f51c <conf_route>

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800e6f8:	4b35      	ldr	r3, [pc, #212]	; (800e7d0 <searchC+0x2c8>)
 800e6fa:	785b      	ldrb	r3, [r3, #1]
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	4618      	mov	r0, r3
 800e700:	4b33      	ldr	r3, [pc, #204]	; (800e7d0 <searchC+0x2c8>)
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	b2db      	uxtb	r3, r3
 800e706:	4619      	mov	r1, r3
 800e708:	4a33      	ldr	r2, [pc, #204]	; (800e7d8 <searchC+0x2d0>)
 800e70a:	0103      	lsls	r3, r0, #4
 800e70c:	440b      	add	r3, r1
 800e70e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e712:	2b00      	cmp	r3, #0
 800e714:	f47f af47 	bne.w	800e5a6 <searchC+0x9e>

	for(int j=0; j<goal_mode-1; j++){
 800e718:	2300      	movs	r3, #0
 800e71a:	607b      	str	r3, [r7, #4]
 800e71c:	e006      	b.n	800e72c <searchC+0x224>
		one_sectionU();
 800e71e:	f7f7 fc89 	bl	8006034 <one_sectionU>
		adv_pos();
 800e722:	f000 fec1 	bl	800f4a8 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	3301      	adds	r3, #1
 800e72a:	607b      	str	r3, [r7, #4]
 800e72c:	4b25      	ldr	r3, [pc, #148]	; (800e7c4 <searchC+0x2bc>)
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	3b01      	subs	r3, #1
 800e732:	687a      	ldr	r2, [r7, #4]
 800e734:	429a      	cmp	r2, r3
 800e736:	dbf2      	blt.n	800e71e <searchC+0x216>
	}
	half_sectionD();
 800e738:	f7f7 f9ee 	bl	8005b18 <half_sectionD>

	set_positionF();
 800e73c:	f7f7 f8b0 	bl	80058a0 <set_positionF>

	MF2.FLAG.GOAL = (MF2.FLAG.GOAL+1)%2;
 800e740:	4b1e      	ldr	r3, [pc, #120]	; (800e7bc <searchC+0x2b4>)
 800e742:	881b      	ldrh	r3, [r3, #0]
 800e744:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	3301      	adds	r3, #1
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	f003 0301 	and.w	r3, r3, #1
 800e752:	bfb8      	it	lt
 800e754:	425b      	neglt	r3, r3
 800e756:	f003 0301 	and.w	r3, r3, #1
 800e75a:	b2d9      	uxtb	r1, r3
 800e75c:	4a17      	ldr	r2, [pc, #92]	; (800e7bc <searchC+0x2b4>)
 800e75e:	8813      	ldrh	r3, [r2, #0]
 800e760:	f361 2308 	bfi	r3, r1, #8, #1
 800e764:	8013      	strh	r3, [r2, #0]
	if(!MF2.FLAG.GOAL){
 800e766:	4b15      	ldr	r3, [pc, #84]	; (800e7bc <searchC+0x2b4>)
 800e768:	881b      	ldrh	r3, [r3, #0]
 800e76a:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	2b00      	cmp	r3, #0
 800e772:	d112      	bne.n	800e79a <searchC+0x292>
		HAL_Delay(500);
 800e774:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e778:	f7f2 fc50 	bl	800101c <HAL_Delay>
		rotate_180();										//180度回転
 800e77c:	f7f7 fe2c 	bl	80063d8 <rotate_180>
		driveC2(SETPOS_BACK);         						//a尻を当てる程度に後退。回転後に停止する
 800e780:	2064      	movs	r0, #100	; 0x64
 800e782:	f7f6 fe29 	bl	80053d8 <driveC2>
		degree_z = target_degree_z;
 800e786:	4b15      	ldr	r3, [pc, #84]	; (800e7dc <searchC+0x2d4>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4a15      	ldr	r2, [pc, #84]	; (800e7e0 <searchC+0x2d8>)
 800e78c:	6013      	str	r3, [r2, #0]
		start_mode = 0;
 800e78e:	4b0c      	ldr	r3, [pc, #48]	; (800e7c0 <searchC+0x2b8>)
 800e790:	2200      	movs	r2, #0
 800e792:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800e794:	4b0b      	ldr	r3, [pc, #44]	; (800e7c4 <searchC+0x2bc>)
 800e796:	2201      	movs	r2, #1
 800e798:	701a      	strb	r2, [r3, #0]
	}

	if(!MF.FLAG.SCND){
 800e79a:	4b06      	ldr	r3, [pc, #24]	; (800e7b4 <searchC+0x2ac>)
 800e79c:	881b      	ldrh	r3, [r3, #0]
 800e79e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d101      	bne.n	800e7ac <searchC+0x2a4>
		store_map_in_eeprom();
 800e7a8:	f002 fdce 	bl	8011348 <store_map_in_eeprom>
	}
}
 800e7ac:	bf00      	nop
 800e7ae:	370c      	adds	r7, #12
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd90      	pop	{r4, r7, pc}
 800e7b4:	20000f68 	.word	0x20000f68
 800e7b8:	200002c8 	.word	0x200002c8
 800e7bc:	20000f64 	.word	0x20000f64
 800e7c0:	200015c8 	.word	0x200015c8
 800e7c4:	20000bb1 	.word	0x20000bb1
 800e7c8:	200015d0 	.word	0x200015d0
 800e7cc:	20000c54 	.word	0x20000c54
 800e7d0:	20000c0c 	.word	0x20000c0c
 800e7d4:	200001ac 	.word	0x200001ac
 800e7d8:	20000d60 	.word	0x20000d60
 800e7dc:	20000bf8 	.word	0x20000bf8
 800e7e0:	20000b5c 	.word	0x20000b5c

0800e7e4 <searchC2>:
//searchC2
//aスラローム走行でgoal座標に進む　重ね探索用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC2(){
 800e7e4:	b590      	push	{r4, r7, lr}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	af00      	add	r7, sp, #0

	if(MF.FLAG.SRC2){
 800e7ea:	4bab      	ldr	r3, [pc, #684]	; (800ea98 <searchC2+0x2b4>)
 800e7ec:	881b      	ldrh	r3, [r3, #0]
 800e7ee:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800e7f2:	b2db      	uxtb	r3, r3
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d001      	beq.n	800e7fc <searchC2+0x18>
		load_map_from_eeprom();
 800e7f8:	f002 fde0 	bl	80113bc <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800e7fc:	4ba6      	ldr	r3, [pc, #664]	; (800ea98 <searchC2+0x2b4>)
 800e7fe:	881b      	ldrh	r3, [r3, #0]
 800e800:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e804:	b2db      	uxtb	r3, r3
 800e806:	2b00      	cmp	r3, #0
 800e808:	d101      	bne.n	800e80e <searchC2+0x2a>
 800e80a:	f002 fe4f 	bl	80114ac <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
 800e80e:	4ba2      	ldr	r3, [pc, #648]	; (800ea98 <searchC2+0x2b4>)
 800e810:	881b      	ldrh	r3, [r3, #0]
 800e812:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e816:	b2db      	uxtb	r3, r3
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d106      	bne.n	800e82a <searchC2+0x46>
 800e81c:	4b9f      	ldr	r3, [pc, #636]	; (800ea9c <searchC2+0x2b8>)
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800e824:	b2da      	uxtb	r2, r3
 800e826:	4b9d      	ldr	r3, [pc, #628]	; (800ea9c <searchC2+0x2b8>)
 800e828:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800e82a:	4b9b      	ldr	r3, [pc, #620]	; (800ea98 <searchC2+0x2b4>)
 800e82c:	881b      	ldrh	r3, [r3, #0]
 800e82e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e832:	b2db      	uxtb	r3, r3
 800e834:	2b00      	cmp	r3, #0
 800e836:	d101      	bne.n	800e83c <searchC2+0x58>
 800e838:	f000 fefa 	bl	800f630 <write_map>

	if(MF2.FLAG.GOAL){
 800e83c:	4b98      	ldr	r3, [pc, #608]	; (800eaa0 <searchC2+0x2bc>)
 800e83e:	881b      	ldrh	r3, [r3, #0]
 800e840:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800e844:	b2db      	uxtb	r3, r3
 800e846:	2b00      	cmp	r3, #0
 800e848:	d00b      	beq.n	800e862 <searchC2+0x7e>
		HAL_Delay(500);
 800e84a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e84e:	f7f2 fbe5 	bl	800101c <HAL_Delay>
		rotate_180();											//180度回転
 800e852:	f7f7 fdc1 	bl	80063d8 <rotate_180>
//		driveC2(SETPOS_BACK);         							//a尻を当てる程度に後退。回転後に停止する
//		degree_z = target_degree_z;
//		start_mode = 0;
		start_mode = 1;
 800e856:	4b93      	ldr	r3, [pc, #588]	; (800eaa4 <searchC2+0x2c0>)
 800e858:	2201      	movs	r2, #1
 800e85a:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800e85c:	4b92      	ldr	r3, [pc, #584]	; (800eaa8 <searchC2+0x2c4>)
 800e85e:	2201      	movs	r2, #1
 800e860:	701a      	strb	r2, [r3, #0]
	}

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800e862:	f7f7 f83b 	bl	80058dc <start_sectionA>
	adv_pos();
 800e866:	f000 fe1f 	bl	800f4a8 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800e86a:	4b8b      	ldr	r3, [pc, #556]	; (800ea98 <searchC2+0x2b4>)
 800e86c:	881b      	ldrh	r3, [r3, #0]
 800e86e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e872:	b2db      	uxtb	r3, r3
 800e874:	2b00      	cmp	r3, #0
 800e876:	d101      	bne.n	800e87c <searchC2+0x98>
 800e878:	f000 feda 	bl	800f630 <write_map>
	r_cnt = 0;																//a経路カウンタの初期化
 800e87c:	4b8b      	ldr	r3, [pc, #556]	; (800eaac <searchC2+0x2c8>)
 800e87e:	2200      	movs	r2, #0
 800e880:	701a      	strb	r2, [r3, #0]
	make_smap();															//a歩数マップ作成
 800e882:	f001 f8c9 	bl	800fa18 <make_smap>
	make_route();															//a最短経路探索（route配列に動作が格納される）
 800e886:	f001 fc83 	bl	8010190 <make_route>
	uint8_t x, y;															//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){												//route配列によって進行を決定。経路カウンタを進める
 800e88a:	4b88      	ldr	r3, [pc, #544]	; (800eaac <searchC2+0x2c8>)
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	1c5a      	adds	r2, r3, #1
 800e890:	b2d1      	uxtb	r1, r2
 800e892:	4a86      	ldr	r2, [pc, #536]	; (800eaac <searchC2+0x2c8>)
 800e894:	7011      	strb	r1, [r2, #0]
 800e896:	461a      	mov	r2, r3
 800e898:	4b85      	ldr	r3, [pc, #532]	; (800eab0 <searchC2+0x2cc>)
 800e89a:	5c9b      	ldrb	r3, [r3, r2]
 800e89c:	2b22      	cmp	r3, #34	; 0x22
 800e89e:	d07f      	beq.n	800e9a0 <searchC2+0x1bc>
 800e8a0:	2b22      	cmp	r3, #34	; 0x22
 800e8a2:	dc03      	bgt.n	800e8ac <searchC2+0xc8>
 800e8a4:	2b11      	cmp	r3, #17
 800e8a6:	f000 808b 	beq.w	800e9c0 <searchC2+0x1dc>
 800e8aa:	e08c      	b.n	800e9c6 <searchC2+0x1e2>
 800e8ac:	2b44      	cmp	r3, #68	; 0x44
 800e8ae:	d074      	beq.n	800e99a <searchC2+0x1b6>
 800e8b0:	2b88      	cmp	r3, #136	; 0x88
 800e8b2:	f040 8088 	bne.w	800e9c6 <searchC2+0x1e2>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800e8b6:	4b7d      	ldr	r3, [pc, #500]	; (800eaac <searchC2+0x2c8>)
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	4b7c      	ldr	r3, [pc, #496]	; (800eab0 <searchC2+0x2cc>)
 800e8be:	5c9b      	ldrb	r3, [r3, r2]
 800e8c0:	2b88      	cmp	r3, #136	; 0x88
 800e8c2:	d158      	bne.n	800e976 <searchC2+0x192>
 800e8c4:	4b74      	ldr	r3, [pc, #464]	; (800ea98 <searchC2+0x2b4>)
 800e8c6:	881b      	ldrh	r3, [r3, #0]
 800e8c8:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800e8cc:	b2db      	uxtb	r3, r3
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d051      	beq.n	800e976 <searchC2+0x192>
					x = mouse.x;
 800e8d2:	4b78      	ldr	r3, [pc, #480]	; (800eab4 <searchC2+0x2d0>)
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	70fb      	strb	r3, [r7, #3]
					y = mouse.y;
 800e8d8:	4b76      	ldr	r3, [pc, #472]	; (800eab4 <searchC2+0x2d0>)
 800e8da:	785b      	ldrb	r3, [r3, #1]
 800e8dc:	70bb      	strb	r3, [r7, #2]
					adv_pos();
 800e8de:	f000 fde3 	bl	800f4a8 <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800e8e2:	4b74      	ldr	r3, [pc, #464]	; (800eab4 <searchC2+0x2d0>)
 800e8e4:	785b      	ldrb	r3, [r3, #1]
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	4b72      	ldr	r3, [pc, #456]	; (800eab4 <searchC2+0x2d0>)
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	4a71      	ldr	r2, [pc, #452]	; (800eab8 <searchC2+0x2d4>)
 800e8f4:	0103      	lsls	r3, r0, #4
 800e8f6:	4413      	add	r3, r2
 800e8f8:	440b      	add	r3, r1
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	f003 030f 	and.w	r3, r3, #15
 800e900:	4a6c      	ldr	r2, [pc, #432]	; (800eab4 <searchC2+0x2d0>)
 800e902:	7852      	ldrb	r2, [r2, #1]
 800e904:	b2d2      	uxtb	r2, r2
 800e906:	4614      	mov	r4, r2
 800e908:	4a6a      	ldr	r2, [pc, #424]	; (800eab4 <searchC2+0x2d0>)
 800e90a:	7812      	ldrb	r2, [r2, #0]
 800e90c:	b2d2      	uxtb	r2, r2
 800e90e:	4610      	mov	r0, r2
 800e910:	4969      	ldr	r1, [pc, #420]	; (800eab8 <searchC2+0x2d4>)
 800e912:	0122      	lsls	r2, r4, #4
 800e914:	440a      	add	r2, r1
 800e916:	4402      	add	r2, r0
 800e918:	7812      	ldrb	r2, [r2, #0]
 800e91a:	0912      	lsrs	r2, r2, #4
 800e91c:	b2d2      	uxtb	r2, r2
 800e91e:	4293      	cmp	r3, r2
 800e920:	d111      	bne.n	800e946 <searchC2+0x162>
						if(!MF2.FLAG.HACCEL){
 800e922:	4b5f      	ldr	r3, [pc, #380]	; (800eaa0 <searchC2+0x2bc>)
 800e924:	881b      	ldrh	r3, [r3, #0]
 800e926:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d107      	bne.n	800e940 <searchC2+0x15c>
							one_sectionA();
 800e930:	f7f7 f9e0 	bl	8005cf4 <one_sectionA>
							MF2.FLAG.HACCEL = 1;
 800e934:	4a5a      	ldr	r2, [pc, #360]	; (800eaa0 <searchC2+0x2bc>)
 800e936:	8813      	ldrh	r3, [r2, #0]
 800e938:	f043 0302 	orr.w	r3, r3, #2
 800e93c:	8013      	strh	r3, [r2, #0]
 800e93e:	e013      	b.n	800e968 <searchC2+0x184>
						}else{
							one_sectionU();
 800e940:	f7f7 fb78 	bl	8006034 <one_sectionU>
 800e944:	e010      	b.n	800e968 <searchC2+0x184>
						}
					}else if(MF2.FLAG.HACCEL){
 800e946:	4b56      	ldr	r3, [pc, #344]	; (800eaa0 <searchC2+0x2bc>)
 800e948:	881b      	ldrh	r3, [r3, #0]
 800e94a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	2b00      	cmp	r3, #0
 800e952:	d007      	beq.n	800e964 <searchC2+0x180>
						one_sectionD();
 800e954:	f7f7 fa34 	bl	8005dc0 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800e958:	4a51      	ldr	r2, [pc, #324]	; (800eaa0 <searchC2+0x2bc>)
 800e95a:	8813      	ldrh	r3, [r2, #0]
 800e95c:	f36f 0341 	bfc	r3, #1, #1
 800e960:	8013      	strh	r3, [r2, #0]
 800e962:	e001      	b.n	800e968 <searchC2+0x184>
					}else{
						one_sectionU();
 800e964:	f7f7 fb66 	bl	8006034 <one_sectionU>
					}
					mouse.x = x;
 800e968:	4a52      	ldr	r2, [pc, #328]	; (800eab4 <searchC2+0x2d0>)
 800e96a:	78fb      	ldrb	r3, [r7, #3]
 800e96c:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800e96e:	4a51      	ldr	r2, [pc, #324]	; (800eab4 <searchC2+0x2d0>)
 800e970:	78bb      	ldrb	r3, [r7, #2]
 800e972:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}else{
					one_sectionU();
				}
				break;
 800e974:	e027      	b.n	800e9c6 <searchC2+0x1e2>
				}else if(MF2.FLAG.HACCEL){
 800e976:	4b4a      	ldr	r3, [pc, #296]	; (800eaa0 <searchC2+0x2bc>)
 800e978:	881b      	ldrh	r3, [r3, #0]
 800e97a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e97e:	b2db      	uxtb	r3, r3
 800e980:	2b00      	cmp	r3, #0
 800e982:	d007      	beq.n	800e994 <searchC2+0x1b0>
					one_sectionD();
 800e984:	f7f7 fa1c 	bl	8005dc0 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800e988:	4a45      	ldr	r2, [pc, #276]	; (800eaa0 <searchC2+0x2bc>)
 800e98a:	8813      	ldrh	r3, [r2, #0]
 800e98c:	f36f 0341 	bfc	r3, #1, #1
 800e990:	8013      	strh	r3, [r2, #0]
				break;
 800e992:	e018      	b.n	800e9c6 <searchC2+0x1e2>
					one_sectionU();
 800e994:	f7f7 fb4e 	bl	8006034 <one_sectionU>
				break;
 800e998:	e015      	b.n	800e9c6 <searchC2+0x1e2>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800e99a:	f7f7 fdf5 	bl	8006588 <slalom_R90>
				break;
 800e99e:	e012      	b.n	800e9c6 <searchC2+0x1e2>
			//----180回転----
			case 0x22:
				half_sectionD();
 800e9a0:	f7f7 f8ba 	bl	8005b18 <half_sectionD>
				rotate_180();
 800e9a4:	f7f7 fd18 	bl	80063d8 <rotate_180>
				if(wall_info & 0x88){
 800e9a8:	4b3c      	ldr	r3, [pc, #240]	; (800ea9c <searchC2+0x2b8>)
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d002      	beq.n	800e9ba <searchC2+0x1d6>
					set_position();
 800e9b4:	f7f6 ff5e 	bl	8005874 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800e9b8:	e005      	b.n	800e9c6 <searchC2+0x1e2>
					half_sectionA();
 800e9ba:	f7f7 f863 	bl	8005a84 <half_sectionA>
				break;
 800e9be:	e002      	b.n	800e9c6 <searchC2+0x1e2>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800e9c0:	f7f7 fef8 	bl	80067b4 <slalom_L90>
				break;
 800e9c4:	bf00      	nop
		}
		adv_pos();
 800e9c6:	f000 fd6f 	bl	800f4a8 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800e9ca:	4b33      	ldr	r3, [pc, #204]	; (800ea98 <searchC2+0x2b4>)
 800e9cc:	881b      	ldrh	r3, [r3, #0]
 800e9ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d101      	bne.n	800e9dc <searchC2+0x1f8>
 800e9d8:	f000 fda0 	bl	800f51c <conf_route>

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800e9dc:	4b35      	ldr	r3, [pc, #212]	; (800eab4 <searchC2+0x2d0>)
 800e9de:	785b      	ldrb	r3, [r3, #1]
 800e9e0:	b2db      	uxtb	r3, r3
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	4b33      	ldr	r3, [pc, #204]	; (800eab4 <searchC2+0x2d0>)
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	4a33      	ldr	r2, [pc, #204]	; (800eabc <searchC2+0x2d8>)
 800e9ee:	0103      	lsls	r3, r0, #4
 800e9f0:	440b      	add	r3, r1
 800e9f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	f47f af47 	bne.w	800e88a <searchC2+0xa6>

	for(int j=0; j<goal_mode-1; j++){
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	607b      	str	r3, [r7, #4]
 800ea00:	e006      	b.n	800ea10 <searchC2+0x22c>
		one_sectionU();
 800ea02:	f7f7 fb17 	bl	8006034 <one_sectionU>
		adv_pos();
 800ea06:	f000 fd4f 	bl	800f4a8 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	607b      	str	r3, [r7, #4]
 800ea10:	4b25      	ldr	r3, [pc, #148]	; (800eaa8 <searchC2+0x2c4>)
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	3b01      	subs	r3, #1
 800ea16:	687a      	ldr	r2, [r7, #4]
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	dbf2      	blt.n	800ea02 <searchC2+0x21e>
	}
	half_sectionD();
 800ea1c:	f7f7 f87c 	bl	8005b18 <half_sectionD>

	set_positionF();
 800ea20:	f7f6 ff3e 	bl	80058a0 <set_positionF>

	MF2.FLAG.GOAL = (MF2.FLAG.GOAL+1)%2;
 800ea24:	4b1e      	ldr	r3, [pc, #120]	; (800eaa0 <searchC2+0x2bc>)
 800ea26:	881b      	ldrh	r3, [r3, #0]
 800ea28:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800ea2c:	b2db      	uxtb	r3, r3
 800ea2e:	3301      	adds	r3, #1
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	f003 0301 	and.w	r3, r3, #1
 800ea36:	bfb8      	it	lt
 800ea38:	425b      	neglt	r3, r3
 800ea3a:	f003 0301 	and.w	r3, r3, #1
 800ea3e:	b2d9      	uxtb	r1, r3
 800ea40:	4a17      	ldr	r2, [pc, #92]	; (800eaa0 <searchC2+0x2bc>)
 800ea42:	8813      	ldrh	r3, [r2, #0]
 800ea44:	f361 2308 	bfi	r3, r1, #8, #1
 800ea48:	8013      	strh	r3, [r2, #0]
	if(!MF2.FLAG.GOAL){
 800ea4a:	4b15      	ldr	r3, [pc, #84]	; (800eaa0 <searchC2+0x2bc>)
 800ea4c:	881b      	ldrh	r3, [r3, #0]
 800ea4e:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d112      	bne.n	800ea7e <searchC2+0x29a>
		HAL_Delay(500);
 800ea58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ea5c:	f7f2 fade 	bl	800101c <HAL_Delay>
		rotate_180();										//180度回転
 800ea60:	f7f7 fcba 	bl	80063d8 <rotate_180>
		driveC2(SETPOS_BACK);         						//a尻を当てる程度に後退。回転後に停止する
 800ea64:	2064      	movs	r0, #100	; 0x64
 800ea66:	f7f6 fcb7 	bl	80053d8 <driveC2>
		degree_z = target_degree_z;
 800ea6a:	4b15      	ldr	r3, [pc, #84]	; (800eac0 <searchC2+0x2dc>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4a15      	ldr	r2, [pc, #84]	; (800eac4 <searchC2+0x2e0>)
 800ea70:	6013      	str	r3, [r2, #0]
		start_mode = 0;
 800ea72:	4b0c      	ldr	r3, [pc, #48]	; (800eaa4 <searchC2+0x2c0>)
 800ea74:	2200      	movs	r2, #0
 800ea76:	701a      	strb	r2, [r3, #0]
		goal_mode = 1;
 800ea78:	4b0b      	ldr	r3, [pc, #44]	; (800eaa8 <searchC2+0x2c4>)
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	701a      	strb	r2, [r3, #0]
	}

	if(!MF.FLAG.SCND){
 800ea7e:	4b06      	ldr	r3, [pc, #24]	; (800ea98 <searchC2+0x2b4>)
 800ea80:	881b      	ldrh	r3, [r3, #0]
 800ea82:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ea86:	b2db      	uxtb	r3, r3
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d101      	bne.n	800ea90 <searchC2+0x2ac>
		store_map_in_eeprom();
 800ea8c:	f002 fc5c 	bl	8011348 <store_map_in_eeprom>
	}
}
 800ea90:	bf00      	nop
 800ea92:	370c      	adds	r7, #12
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd90      	pop	{r4, r7, pc}
 800ea98:	20000f68 	.word	0x20000f68
 800ea9c:	200002c8 	.word	0x200002c8
 800eaa0:	20000f64 	.word	0x20000f64
 800eaa4:	200015c8 	.word	0x200015c8
 800eaa8:	20000bb1 	.word	0x20000bb1
 800eaac:	200015d0 	.word	0x200015d0
 800eab0:	20000c54 	.word	0x20000c54
 800eab4:	20000c0c 	.word	0x20000c0c
 800eab8:	200001ac 	.word	0x200001ac
 800eabc:	20000d60 	.word	0x20000d60
 800eac0:	20000bf8 	.word	0x20000bf8
 800eac4:	20000b5c 	.word	0x20000b5c

0800eac8 <searchD>:
//searchD
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD(){
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800eace:	4b6a      	ldr	r3, [pc, #424]	; (800ec78 <searchD+0x1b0>)
 800ead0:	881b      	ldrh	r3, [r3, #0]
 800ead2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ead6:	b2db      	uxtb	r3, r3
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d001      	beq.n	800eae0 <searchD+0x18>
		load_map_from_eeprom();
 800eadc:	f002 fc6e 	bl	80113bc <load_map_from_eeprom>
//	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
//	if(!MF.FLAG.SCND)wall_info &= ~0x88;									//a前壁は存在するはずがないので削除する
//	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800eae0:	f7f6 fefc 	bl	80058dc <start_sectionA>
	adv_pos();
 800eae4:	f000 fce0 	bl	800f4a8 <adv_pos>

	//====a歩数マップ・経路作成====
//	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
	r_cnt = 0;												//a経路カウンタの初期化
 800eae8:	4b64      	ldr	r3, [pc, #400]	; (800ec7c <searchD+0x1b4>)
 800eaea:	2200      	movs	r2, #0
 800eaec:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800eaee:	f000 ff93 	bl	800fa18 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800eaf2:	f001 fb4d 	bl	8010190 <make_route>

	MF2.FLAG.HACCEL = 0;
 800eaf6:	4a62      	ldr	r2, [pc, #392]	; (800ec80 <searchD+0x1b8>)
 800eaf8:	8813      	ldrh	r3, [r2, #0]
 800eafa:	f36f 0341 	bfc	r3, #1, #1
 800eafe:	8013      	strh	r3, [r2, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800eb00:	4b5e      	ldr	r3, [pc, #376]	; (800ec7c <searchD+0x1b4>)
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	1c5a      	adds	r2, r3, #1
 800eb06:	b2d1      	uxtb	r1, r2
 800eb08:	4a5c      	ldr	r2, [pc, #368]	; (800ec7c <searchD+0x1b4>)
 800eb0a:	7011      	strb	r1, [r2, #0]
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	4b5d      	ldr	r3, [pc, #372]	; (800ec84 <searchD+0x1bc>)
 800eb10:	5c9b      	ldrb	r3, [r3, r2]
 800eb12:	2b22      	cmp	r3, #34	; 0x22
 800eb14:	d05d      	beq.n	800ebd2 <searchD+0x10a>
 800eb16:	2b22      	cmp	r3, #34	; 0x22
 800eb18:	dc02      	bgt.n	800eb20 <searchD+0x58>
 800eb1a:	2b11      	cmp	r3, #17
 800eb1c:	d069      	beq.n	800ebf2 <searchD+0x12a>
 800eb1e:	e06b      	b.n	800ebf8 <searchD+0x130>
 800eb20:	2b44      	cmp	r3, #68	; 0x44
 800eb22:	d053      	beq.n	800ebcc <searchD+0x104>
 800eb24:	2b88      	cmp	r3, #136	; 0x88
 800eb26:	d167      	bne.n	800ebf8 <searchD+0x130>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND && MF.FLAG.ACCL2){
 800eb28:	4b53      	ldr	r3, [pc, #332]	; (800ec78 <searchD+0x1b0>)
 800eb2a:	881b      	ldrh	r3, [r3, #0]
 800eb2c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d046      	beq.n	800ebc4 <searchD+0xfc>
 800eb36:	4b50      	ldr	r3, [pc, #320]	; (800ec78 <searchD+0x1b0>)
 800eb38:	881b      	ldrh	r3, [r3, #0]
 800eb3a:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d03f      	beq.n	800ebc4 <searchD+0xfc>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (MF2.FLAG.HACCEL == 0)){
 800eb44:	4b4d      	ldr	r3, [pc, #308]	; (800ec7c <searchD+0x1b4>)
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	3b01      	subs	r3, #1
 800eb4a:	4a4e      	ldr	r2, [pc, #312]	; (800ec84 <searchD+0x1bc>)
 800eb4c:	5cd2      	ldrb	r2, [r2, r3]
 800eb4e:	4b4b      	ldr	r3, [pc, #300]	; (800ec7c <searchD+0x1b4>)
 800eb50:	781b      	ldrb	r3, [r3, #0]
 800eb52:	4619      	mov	r1, r3
 800eb54:	4b4b      	ldr	r3, [pc, #300]	; (800ec84 <searchD+0x1bc>)
 800eb56:	5c5b      	ldrb	r3, [r3, r1]
 800eb58:	4013      	ands	r3, r2
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	2b88      	cmp	r3, #136	; 0x88
 800eb5e:	d115      	bne.n	800eb8c <searchD+0xc4>
 800eb60:	4b46      	ldr	r3, [pc, #280]	; (800ec7c <searchD+0x1b4>)
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	461a      	mov	r2, r3
 800eb66:	4b47      	ldr	r3, [pc, #284]	; (800ec84 <searchD+0x1bc>)
 800eb68:	5c9b      	ldrb	r3, [r3, r2]
 800eb6a:	2bff      	cmp	r3, #255	; 0xff
 800eb6c:	d00e      	beq.n	800eb8c <searchD+0xc4>
 800eb6e:	4b44      	ldr	r3, [pc, #272]	; (800ec80 <searchD+0x1b8>)
 800eb70:	881b      	ldrh	r3, [r3, #0]
 800eb72:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d107      	bne.n	800eb8c <searchD+0xc4>
						one_sectionA();
 800eb7c:	f7f7 f8ba 	bl	8005cf4 <one_sectionA>
						MF2.FLAG.HACCEL = 1;
 800eb80:	4a3f      	ldr	r2, [pc, #252]	; (800ec80 <searchD+0x1b8>)
 800eb82:	8813      	ldrh	r3, [r2, #0]
 800eb84:	f043 0302 	orr.w	r3, r3, #2
 800eb88:	8013      	strh	r3, [r2, #0]
 800eb8a:	e01a      	b.n	800ebc2 <searchD+0xfa>
					}
					else if((route[r_cnt] & 0x55) && (MF2.FLAG.HACCEL)){
 800eb8c:	4b3b      	ldr	r3, [pc, #236]	; (800ec7c <searchD+0x1b4>)
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	461a      	mov	r2, r3
 800eb92:	4b3c      	ldr	r3, [pc, #240]	; (800ec84 <searchD+0x1bc>)
 800eb94:	5c9b      	ldrb	r3, [r3, r2]
 800eb96:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d00e      	beq.n	800ebbc <searchD+0xf4>
 800eb9e:	4b38      	ldr	r3, [pc, #224]	; (800ec80 <searchD+0x1b8>)
 800eba0:	881b      	ldrh	r3, [r3, #0]
 800eba2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800eba6:	b2db      	uxtb	r3, r3
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d007      	beq.n	800ebbc <searchD+0xf4>
						one_sectionD();
 800ebac:	f7f7 f908 	bl	8005dc0 <one_sectionD>
						MF2.FLAG.HACCEL = 0;
 800ebb0:	4a33      	ldr	r2, [pc, #204]	; (800ec80 <searchD+0x1b8>)
 800ebb2:	8813      	ldrh	r3, [r2, #0]
 800ebb4:	f36f 0341 	bfc	r3, #1, #1
 800ebb8:	8013      	strh	r3, [r2, #0]
 800ebba:	e002      	b.n	800ebc2 <searchD+0xfa>
					}else{
						one_sectionU();
 800ebbc:	f7f7 fa3a 	bl	8006034 <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (MF2.FLAG.HACCEL == 0)){
 800ebc0:	e003      	b.n	800ebca <searchD+0x102>
 800ebc2:	e002      	b.n	800ebca <searchD+0x102>
					}
				}else{
					one_sectionU();
 800ebc4:	f7f7 fa36 	bl	8006034 <one_sectionU>
				}
				break;
 800ebc8:	e016      	b.n	800ebf8 <searchD+0x130>
 800ebca:	e015      	b.n	800ebf8 <searchD+0x130>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800ebcc:	f7f7 fcdc 	bl	8006588 <slalom_R90>
				break;
 800ebd0:	e012      	b.n	800ebf8 <searchD+0x130>
			//----180回転----
			case 0x22:
				half_sectionD();
 800ebd2:	f7f6 ffa1 	bl	8005b18 <half_sectionD>
				rotate_180();
 800ebd6:	f7f7 fbff 	bl	80063d8 <rotate_180>
				if(wall_info & 0x88){
 800ebda:	4b2b      	ldr	r3, [pc, #172]	; (800ec88 <searchD+0x1c0>)
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d002      	beq.n	800ebec <searchD+0x124>
					set_position();
 800ebe6:	f7f6 fe45 	bl	8005874 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800ebea:	e005      	b.n	800ebf8 <searchD+0x130>
					half_sectionA();
 800ebec:	f7f6 ff4a 	bl	8005a84 <half_sectionA>
				break;
 800ebf0:	e002      	b.n	800ebf8 <searchD+0x130>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800ebf2:	f7f7 fddf 	bl	80067b4 <slalom_L90>
				break;
 800ebf6:	bf00      	nop
		}
		adv_pos();
 800ebf8:	f000 fc56 	bl	800f4a8 <adv_pos>
//		if(!MF.FLAG.SCND)conf_route();

//	}while((mouse.x != goal_x) || (mouse.y != goal_y));
	}while(smap[mouse.y][mouse.x] != 0);
 800ebfc:	4b23      	ldr	r3, [pc, #140]	; (800ec8c <searchD+0x1c4>)
 800ebfe:	785b      	ldrb	r3, [r3, #1]
 800ec00:	b2db      	uxtb	r3, r3
 800ec02:	4618      	mov	r0, r3
 800ec04:	4b21      	ldr	r3, [pc, #132]	; (800ec8c <searchD+0x1c4>)
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	b2db      	uxtb	r3, r3
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	4a20      	ldr	r2, [pc, #128]	; (800ec90 <searchD+0x1c8>)
 800ec0e:	0103      	lsls	r3, r0, #4
 800ec10:	440b      	add	r3, r1
 800ec12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	f47f af72 	bne.w	800eb00 <searchD+0x38>

	for(int j=0; j<goal_mode-1; j++){
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	607b      	str	r3, [r7, #4]
 800ec20:	e006      	b.n	800ec30 <searchD+0x168>
		one_sectionU();
 800ec22:	f7f7 fa07 	bl	8006034 <one_sectionU>
		adv_pos();
 800ec26:	f000 fc3f 	bl	800f4a8 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	607b      	str	r3, [r7, #4]
 800ec30:	4b18      	ldr	r3, [pc, #96]	; (800ec94 <searchD+0x1cc>)
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	3b01      	subs	r3, #1
 800ec36:	687a      	ldr	r2, [r7, #4]
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	dbf2      	blt.n	800ec22 <searchD+0x15a>
	}
	half_sectionD();
 800ec3c:	f7f6 ff6c 	bl	8005b18 <half_sectionD>
	set_positionF();
 800ec40:	f7f6 fe2e 	bl	80058a0 <set_positionF>

	HAL_Delay(500);
 800ec44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ec48:	f7f2 f9e8 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800ec4c:	f7f7 fbc4 	bl	80063d8 <rotate_180>
//	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800ec50:	4b11      	ldr	r3, [pc, #68]	; (800ec98 <searchD+0x1d0>)
 800ec52:	2201      	movs	r2, #1
 800ec54:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800ec56:	4b0f      	ldr	r3, [pc, #60]	; (800ec94 <searchD+0x1cc>)
 800ec58:	2201      	movs	r2, #1
 800ec5a:	701a      	strb	r2, [r3, #0]

	if(!MF.FLAG.SCND){
 800ec5c:	4b06      	ldr	r3, [pc, #24]	; (800ec78 <searchD+0x1b0>)
 800ec5e:	881b      	ldrh	r3, [r3, #0]
 800ec60:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ec64:	b2db      	uxtb	r3, r3
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d101      	bne.n	800ec6e <searchD+0x1a6>
		store_map_in_eeprom();
 800ec6a:	f002 fb6d 	bl	8011348 <store_map_in_eeprom>
	}
}
 800ec6e:	bf00      	nop
 800ec70:	3708      	adds	r7, #8
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	20000f68 	.word	0x20000f68
 800ec7c:	200015d0 	.word	0x200015d0
 800ec80:	20000f64 	.word	0x20000f64
 800ec84:	20000c54 	.word	0x20000c54
 800ec88:	200002c8 	.word	0x200002c8
 800ec8c:	20000c0c 	.word	0x20000c0c
 800ec90:	20000d60 	.word	0x20000d60
 800ec94:	20000bb1 	.word	0x20000bb1
 800ec98:	200015c8 	.word	0x200015c8

0800ec9c <searchE>:
//searchE
//a未知壁を含むマスを仮goal座標とし、スラローム連続走行で全マスに進む。仮goalを連続的に変化させる。全面探索終了後は半区画減速
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchE(){
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	af00      	add	r7, sp, #0

	int i = 0;
 800eca2:	2300      	movs	r3, #0
 800eca4:	607b      	str	r3, [r7, #4]
	int j = 0;
 800eca6:	2300      	movs	r3, #0
 800eca8:	603b      	str	r3, [r7, #0]
	do {
		if(i == 0){
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d111      	bne.n	800ecd4 <searchE+0x38>
			//====a前に壁が無い想定で問答無用で前進====
			half_sectionA();
 800ecb0:	f7f6 fee8 	bl	8005a84 <half_sectionA>
			adv_pos();
 800ecb4:	f000 fbf8 	bl	800f4a8 <adv_pos>
			write_map();														//地図の初期化
 800ecb8:	f000 fcba 	bl	800f630 <write_map>

			//====a歩数等初期化====
			m_step = r_cnt = 0;													//歩数と経路カウンタの初期化
 800ecbc:	4b44      	ldr	r3, [pc, #272]	; (800edd0 <searchE+0x134>)
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	701a      	strb	r2, [r3, #0]
 800ecc2:	4b44      	ldr	r3, [pc, #272]	; (800edd4 <searchE+0x138>)
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	801a      	strh	r2, [r3, #0]
			find_pregoal();														//仮goalまでの歩数マップの初期化
 800ecc8:	f001 fbba 	bl	8010440 <find_pregoal>
			make_smap2();
 800eccc:	f001 fdac 	bl	8010828 <make_smap2>
			make_route();														//最短経路探索(route配列に動作が格納される)
 800ecd0:	f001 fa5e 	bl	8010190 <make_route>
		}

		//====a探索走行====
		do {
			//----a進行----
			switch (route[r_cnt++]) {										//route配列によって進行を決定。経路カウンタを進める
 800ecd4:	4b3e      	ldr	r3, [pc, #248]	; (800edd0 <searchE+0x134>)
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	1c5a      	adds	r2, r3, #1
 800ecda:	b2d1      	uxtb	r1, r2
 800ecdc:	4a3c      	ldr	r2, [pc, #240]	; (800edd0 <searchE+0x134>)
 800ecde:	7011      	strb	r1, [r2, #0]
 800ece0:	461a      	mov	r2, r3
 800ece2:	4b3d      	ldr	r3, [pc, #244]	; (800edd8 <searchE+0x13c>)
 800ece4:	5c9b      	ldrb	r3, [r3, r2]
 800ece6:	2b22      	cmp	r3, #34	; 0x22
 800ece8:	d00e      	beq.n	800ed08 <searchE+0x6c>
 800ecea:	2b22      	cmp	r3, #34	; 0x22
 800ecec:	dc02      	bgt.n	800ecf4 <searchE+0x58>
 800ecee:	2b11      	cmp	r3, #17
 800ecf0:	d01a      	beq.n	800ed28 <searchE+0x8c>
 800ecf2:	e01c      	b.n	800ed2e <searchE+0x92>
 800ecf4:	2b44      	cmp	r3, #68	; 0x44
 800ecf6:	d004      	beq.n	800ed02 <searchE+0x66>
 800ecf8:	2b88      	cmp	r3, #136	; 0x88
 800ecfa:	d118      	bne.n	800ed2e <searchE+0x92>
				//----a前進----
			case 0x88:
				one_sectionU();
 800ecfc:	f7f7 f99a 	bl	8006034 <one_sectionU>
				break;
 800ed00:	e015      	b.n	800ed2e <searchE+0x92>
				//----a右折----
			case 0x44:
				slalom_R90();
 800ed02:	f7f7 fc41 	bl	8006588 <slalom_R90>
				break;
 800ed06:	e012      	b.n	800ed2e <searchE+0x92>
				//----180回転----
			case 0x22:
				half_sectionD();
 800ed08:	f7f6 ff06 	bl	8005b18 <half_sectionD>
				rotate_180();
 800ed0c:	f7f7 fb64 	bl	80063d8 <rotate_180>
				if(wall_info & 0x88){
 800ed10:	4b32      	ldr	r3, [pc, #200]	; (800eddc <searchE+0x140>)
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d002      	beq.n	800ed22 <searchE+0x86>
					set_position();
 800ed1c:	f7f6 fdaa 	bl	8005874 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800ed20:	e005      	b.n	800ed2e <searchE+0x92>
					half_sectionA();
 800ed22:	f7f6 feaf 	bl	8005a84 <half_sectionA>
				break;
 800ed26:	e002      	b.n	800ed2e <searchE+0x92>
				//----a左折----
			case 0x11:
				slalom_L90();
 800ed28:	f7f7 fd44 	bl	80067b4 <slalom_L90>
				break;
 800ed2c:	bf00      	nop
			}
			adv_pos();														//aマイクロマウス内部位置情報でも前進処理
 800ed2e:	f000 fbbb 	bl	800f4a8 <adv_pos>
			j++;
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	3301      	adds	r3, #1
 800ed36:	603b      	str	r3, [r7, #0]
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	2b96      	cmp	r3, #150	; 0x96
 800ed3c:	dc0e      	bgt.n	800ed5c <searchE+0xc0>

		} while ((mouse.x != pregoal_x) || (mouse.y != pregoal_y));			//a現在座標と仮goal座標が等しくなるまで実行
 800ed3e:	4b28      	ldr	r3, [pc, #160]	; (800ede0 <searchE+0x144>)
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	b2da      	uxtb	r2, r3
 800ed44:	4b27      	ldr	r3, [pc, #156]	; (800ede4 <searchE+0x148>)
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d1c3      	bne.n	800ecd4 <searchE+0x38>
 800ed4c:	4b24      	ldr	r3, [pc, #144]	; (800ede0 <searchE+0x144>)
 800ed4e:	785b      	ldrb	r3, [r3, #1]
 800ed50:	b2da      	uxtb	r2, r3
 800ed52:	4b25      	ldr	r3, [pc, #148]	; (800ede8 <searchE+0x14c>)
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d1bc      	bne.n	800ecd4 <searchE+0x38>
 800ed5a:	e000      	b.n	800ed5e <searchE+0xc2>
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800ed5c:	bf00      	nop

		get_wall_info();													//a壁情報の初期化, 後壁はなくなる
 800ed5e:	f002 fba5 	bl	80114ac <get_wall_info>
		write_map();														//a地図の初期化
 800ed62:	f000 fc65 	bl	800f630 <write_map>
		//printf("get pregoal, x = %d, y = %d\n", mouse.x, mouse.y);

		//====a歩数等初期化====
		m_step = r_cnt = 0;													//a歩数と経路カウンタの初期化
 800ed66:	4b1a      	ldr	r3, [pc, #104]	; (800edd0 <searchE+0x134>)
 800ed68:	2200      	movs	r2, #0
 800ed6a:	701a      	strb	r2, [r3, #0]
 800ed6c:	4b19      	ldr	r3, [pc, #100]	; (800edd4 <searchE+0x138>)
 800ed6e:	2200      	movs	r2, #0
 800ed70:	801a      	strh	r2, [r3, #0]

		find_pregoal();														//a仮goalまでの歩数マップの初期化
 800ed72:	f001 fb65 	bl	8010440 <find_pregoal>
		if(MF2.FLAG.ALLMAP) {
 800ed76:	4b1d      	ldr	r3, [pc, #116]	; (800edec <searchE+0x150>)
 800ed78:	881b      	ldrh	r3, [r3, #0]
 800ed7a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ed7e:	b2db      	uxtb	r3, r3
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d002      	beq.n	800ed8a <searchE+0xee>
			//printf("get MF2.FLAG.ALLMAP\n");
			half_sectionD();
 800ed84:	f7f6 fec8 	bl	8005b18 <half_sectionD>
			break;
 800ed88:	e00e      	b.n	800eda8 <searchE+0x10c>
		}
		make_smap2();
 800ed8a:	f001 fd4d 	bl	8010828 <make_smap2>
		make_route();														//a最短経路探索(route配列に動作が格納される)
 800ed8e:	f001 f9ff 	bl	8010190 <make_route>

		if (j > 150) {
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	2b96      	cmp	r3, #150	; 0x96
 800ed96:	dc06      	bgt.n	800eda6 <searchE+0x10a>
			break;															//a移動マス数が250以上になった場合全面探索を中止
		}
		i++;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	607b      	str	r3, [r7, #4]

	} while (i < 150);														//a仮goalへの到着が130回以上になった場合全面探索を中止
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2b95      	cmp	r3, #149	; 0x95
 800eda2:	dd82      	ble.n	800ecaa <searchE+0xe>
 800eda4:	e000      	b.n	800eda8 <searchE+0x10c>
			break;															//a移動マス数が250以上になった場合全面探索を中止
 800eda6:	bf00      	nop

	HAL_Delay(500);
 800eda8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800edac:	f7f2 f936 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800edb0:	f7f7 fb12 	bl	80063d8 <rotate_180>

	if(!MF.FLAG.SCND){
 800edb4:	4b0e      	ldr	r3, [pc, #56]	; (800edf0 <searchE+0x154>)
 800edb6:	881b      	ldrh	r3, [r3, #0]
 800edb8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800edbc:	b2db      	uxtb	r3, r3
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d101      	bne.n	800edc6 <searchE+0x12a>
		store_map_in_eeprom();
 800edc2:	f002 fac1 	bl	8011348 <store_map_in_eeprom>
	}
}
 800edc6:	bf00      	nop
 800edc8:	3708      	adds	r7, #8
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	200015d0 	.word	0x200015d0
 800edd4:	2000034e 	.word	0x2000034e
 800edd8:	20000c54 	.word	0x20000c54
 800eddc:	200002c8 	.word	0x200002c8
 800ede0:	20000c0c 	.word	0x20000c0c
 800ede4:	20000d5c 	.word	0x20000d5c
 800ede8:	200012a1 	.word	0x200012a1
 800edec:	20000f64 	.word	0x20000f64
 800edf0:	20000f68 	.word	0x20000f68

0800edf4 <searchF3>:
//searchF3
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベースでgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF3(){
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b084      	sub	sp, #16
 800edf8:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800edfa:	4b60      	ldr	r3, [pc, #384]	; (800ef7c <searchF3+0x188>)
 800edfc:	881b      	ldrh	r3, [r3, #0]
 800edfe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d001      	beq.n	800ee0c <searchF3+0x18>
		load_map_from_eeprom();
 800ee08:	f002 fad8 	bl	80113bc <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 800ee0c:	f000 fb4c 	bl	800f4a8 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 800ee10:	f000 fe02 	bl	800fa18 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800ee14:	f001 f9bc 	bl	8010190 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800ee18:	4b59      	ldr	r3, [pc, #356]	; (800ef80 <searchF3+0x18c>)
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	701a      	strb	r2, [r3, #0]
	pass_route2();
 800ee1e:	f001 fe27 	bl	8010a70 <pass_route2>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800ee22:	f7f6 fd5b 	bl	80058dc <start_sectionA>

	MF2.FLAG.HACCEL = 0;
 800ee26:	4a57      	ldr	r2, [pc, #348]	; (800ef84 <searchF3+0x190>)
 800ee28:	8813      	ldrh	r3, [r2, #0]
 800ee2a:	f36f 0341 	bfc	r3, #1, #1
 800ee2e:	8013      	strh	r3, [r2, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800ee30:	4b53      	ldr	r3, [pc, #332]	; (800ef80 <searchF3+0x18c>)
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	1c5a      	adds	r2, r3, #1
 800ee36:	b2d1      	uxtb	r1, r2
 800ee38:	4a51      	ldr	r2, [pc, #324]	; (800ef80 <searchF3+0x18c>)
 800ee3a:	7011      	strb	r1, [r2, #0]
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	4b52      	ldr	r3, [pc, #328]	; (800ef88 <searchF3+0x194>)
 800ee40:	569b      	ldrsb	r3, [r3, r2]
 800ee42:	f113 0f04 	cmn.w	r3, #4
 800ee46:	d01e      	beq.n	800ee86 <searchF3+0x92>
 800ee48:	f113 0f04 	cmn.w	r3, #4
 800ee4c:	dc09      	bgt.n	800ee62 <searchF3+0x6e>
 800ee4e:	f113 0f06 	cmn.w	r3, #6
 800ee52:	d01e      	beq.n	800ee92 <searchF3+0x9e>
 800ee54:	f113 0f06 	cmn.w	r3, #6
 800ee58:	dc18      	bgt.n	800ee8c <searchF3+0x98>
 800ee5a:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800ee5e:	d01b      	beq.n	800ee98 <searchF3+0xa4>
 800ee60:	e01f      	b.n	800eea2 <searchF3+0xae>
 800ee62:	f113 0f02 	cmn.w	r3, #2
 800ee66:	d008      	beq.n	800ee7a <searchF3+0x86>
 800ee68:	f113 0f02 	cmn.w	r3, #2
 800ee6c:	db08      	blt.n	800ee80 <searchF3+0x8c>
 800ee6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee72:	d116      	bne.n	800eea2 <searchF3+0xae>
			//----a右スラローム----
			case -1:
				slalom_R90();
 800ee74:	f7f7 fb88 	bl	8006588 <slalom_R90>
				break;
 800ee78:	e04c      	b.n	800ef14 <searchF3+0x120>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800ee7a:	f7f7 fc9b 	bl	80067b4 <slalom_L90>
				break;
 800ee7e:	e049      	b.n	800ef14 <searchF3+0x120>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800ee80:	f7f7 fda4 	bl	80069cc <Lslalom_R90>
				break;
 800ee84:	e046      	b.n	800ef14 <searchF3+0x120>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800ee86:	f7f7 fea7 	bl	8006bd8 <Lslalom_L90>
				break;
 800ee8a:	e043      	b.n	800ef14 <searchF3+0x120>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800ee8c:	f7f7 ffa0 	bl	8006dd0 <Lslalom_R180>
				break;
 800ee90:	e040      	b.n	800ef14 <searchF3+0x120>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800ee92:	f7f8 f8b9 	bl	8007008 <Lslalom_L180>
				break;
 800ee96:	e03d      	b.n	800ef14 <searchF3+0x120>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800ee98:	f7f7 fa9e 	bl	80063d8 <rotate_180>
				rotate_180();
 800ee9c:	f7f7 fa9c 	bl	80063d8 <rotate_180>
				while(1);
 800eea0:	e7fe      	b.n	800eea0 <searchF3+0xac>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800eea2:	4b37      	ldr	r3, [pc, #220]	; (800ef80 <searchF3+0x18c>)
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	3b01      	subs	r3, #1
 800eea8:	4a37      	ldr	r2, [pc, #220]	; (800ef88 <searchF3+0x194>)
 800eeaa:	56d3      	ldrsb	r3, [r2, r3]
 800eeac:	2b03      	cmp	r3, #3
 800eeae:	dc11      	bgt.n	800eed4 <searchF3+0xe0>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	60fb      	str	r3, [r7, #12]
 800eeb4:	e004      	b.n	800eec0 <searchF3+0xcc>
						half_sectionU();
 800eeb6:	f7f6 fefd 	bl	8005cb4 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	3301      	adds	r3, #1
 800eebe:	60fb      	str	r3, [r7, #12]
 800eec0:	4b2f      	ldr	r3, [pc, #188]	; (800ef80 <searchF3+0x18c>)
 800eec2:	781b      	ldrb	r3, [r3, #0]
 800eec4:	3b01      	subs	r3, #1
 800eec6:	4a30      	ldr	r2, [pc, #192]	; (800ef88 <searchF3+0x194>)
 800eec8:	56d3      	ldrsb	r3, [r2, r3]
 800eeca:	461a      	mov	r2, r3
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	4293      	cmp	r3, r2
 800eed0:	dbf1      	blt.n	800eeb6 <searchF3+0xc2>
						half_sectionU();
					}
					one_sectionD();
					MF2.FLAG.HACCEL = 0;
				}
				break;
 800eed2:	e01e      	b.n	800ef12 <searchF3+0x11e>
					one_sectionA();
 800eed4:	f7f6 ff0e 	bl	8005cf4 <one_sectionA>
					MF2.FLAG.HACCEL = 1;
 800eed8:	4a2a      	ldr	r2, [pc, #168]	; (800ef84 <searchF3+0x190>)
 800eeda:	8813      	ldrh	r3, [r2, #0]
 800eedc:	f043 0302 	orr.w	r3, r3, #2
 800eee0:	8013      	strh	r3, [r2, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800eee2:	2300      	movs	r3, #0
 800eee4:	60bb      	str	r3, [r7, #8]
 800eee6:	e004      	b.n	800eef2 <searchF3+0xfe>
						half_sectionU();
 800eee8:	f7f6 fee4 	bl	8005cb4 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	3301      	adds	r3, #1
 800eef0:	60bb      	str	r3, [r7, #8]
 800eef2:	4b23      	ldr	r3, [pc, #140]	; (800ef80 <searchF3+0x18c>)
 800eef4:	781b      	ldrb	r3, [r3, #0]
 800eef6:	3b01      	subs	r3, #1
 800eef8:	4a23      	ldr	r2, [pc, #140]	; (800ef88 <searchF3+0x194>)
 800eefa:	56d3      	ldrsb	r3, [r2, r3]
 800eefc:	3b04      	subs	r3, #4
 800eefe:	68ba      	ldr	r2, [r7, #8]
 800ef00:	429a      	cmp	r2, r3
 800ef02:	dbf1      	blt.n	800eee8 <searchF3+0xf4>
					one_sectionD();
 800ef04:	f7f6 ff5c 	bl	8005dc0 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800ef08:	4a1e      	ldr	r2, [pc, #120]	; (800ef84 <searchF3+0x190>)
 800ef0a:	8813      	ldrh	r3, [r2, #0]
 800ef0c:	f36f 0341 	bfc	r3, #1, #1
 800ef10:	8013      	strh	r3, [r2, #0]
				break;
 800ef12:	bf00      	nop
		}
	}while(pass[p_cnt] != -114);
 800ef14:	4b1a      	ldr	r3, [pc, #104]	; (800ef80 <searchF3+0x18c>)
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	461a      	mov	r2, r3
 800ef1a:	4b1b      	ldr	r3, [pc, #108]	; (800ef88 <searchF3+0x194>)
 800ef1c:	569b      	ldrsb	r3, [r3, r2]
 800ef1e:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800ef22:	d185      	bne.n	800ee30 <searchF3+0x3c>

	mouse.x = goal_x;
 800ef24:	4b19      	ldr	r3, [pc, #100]	; (800ef8c <searchF3+0x198>)
 800ef26:	781a      	ldrb	r2, [r3, #0]
 800ef28:	4b19      	ldr	r3, [pc, #100]	; (800ef90 <searchF3+0x19c>)
 800ef2a:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800ef2c:	4b19      	ldr	r3, [pc, #100]	; (800ef94 <searchF3+0x1a0>)
 800ef2e:	781a      	ldrb	r2, [r3, #0]
 800ef30:	4b17      	ldr	r3, [pc, #92]	; (800ef90 <searchF3+0x19c>)
 800ef32:	705a      	strb	r2, [r3, #1]

	for(int j=0; j<goal_mode-1; j++){
 800ef34:	2300      	movs	r3, #0
 800ef36:	607b      	str	r3, [r7, #4]
 800ef38:	e006      	b.n	800ef48 <searchF3+0x154>
		one_sectionU();
 800ef3a:	f7f7 f87b 	bl	8006034 <one_sectionU>
		adv_pos();
 800ef3e:	f000 fab3 	bl	800f4a8 <adv_pos>
	for(int j=0; j<goal_mode-1; j++){
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	3301      	adds	r3, #1
 800ef46:	607b      	str	r3, [r7, #4]
 800ef48:	4b13      	ldr	r3, [pc, #76]	; (800ef98 <searchF3+0x1a4>)
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	3b01      	subs	r3, #1
 800ef4e:	687a      	ldr	r2, [r7, #4]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	dbf2      	blt.n	800ef3a <searchF3+0x146>
	}
	half_sectionD();
 800ef54:	f7f6 fde0 	bl	8005b18 <half_sectionD>
	set_positionF();
 800ef58:	f7f6 fca2 	bl	80058a0 <set_positionF>

	HAL_Delay(500);
 800ef5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ef60:	f7f2 f85c 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800ef64:	f7f7 fa38 	bl	80063d8 <rotate_180>
//	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800ef68:	4b0c      	ldr	r3, [pc, #48]	; (800ef9c <searchF3+0x1a8>)
 800ef6a:	2201      	movs	r2, #1
 800ef6c:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800ef6e:	4b0a      	ldr	r3, [pc, #40]	; (800ef98 <searchF3+0x1a4>)
 800ef70:	2201      	movs	r2, #1
 800ef72:	701a      	strb	r2, [r3, #0]

}
 800ef74:	bf00      	nop
 800ef76:	3710      	adds	r7, #16
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}
 800ef7c:	20000f68 	.word	0x20000f68
 800ef80:	200002b0 	.word	0x200002b0
 800ef84:	20000f64 	.word	0x20000f64
 800ef88:	20000350 	.word	0x20000350
 800ef8c:	20000bb0 	.word	0x20000bb0
 800ef90:	20000c0c 	.word	0x20000c0c
 800ef94:	20000b4c 	.word	0x20000b4c
 800ef98:	20000bb1 	.word	0x20000bb1
 800ef9c:	200015c8 	.word	0x200015c8

0800efa0 <searchF4>:
//searchF4
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベース+斜め走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF4(){
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800efa6:	4bd0      	ldr	r3, [pc, #832]	; (800f2e8 <searchF4+0x348>)
 800efa8:	881b      	ldrh	r3, [r3, #0]
 800efaa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800efae:	b2db      	uxtb	r3, r3
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d001      	beq.n	800efb8 <searchF4+0x18>
		load_map_from_eeprom();
 800efb4:	f002 fa02 	bl	80113bc <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 800efb8:	f000 fa76 	bl	800f4a8 <adv_pos>

	//====a歩数マップ・経路作成====
	full_led_write(RED);
 800efbc:	2001      	movs	r0, #1
 800efbe:	f002 fae9 	bl	8011594 <full_led_write>
	make_smap();											//a歩数マップ作成
 800efc2:	f000 fd29 	bl	800fa18 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800efc6:	f001 f8e3 	bl	8010190 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800efca:	4bc8      	ldr	r3, [pc, #800]	; (800f2ec <searchF4+0x34c>)
 800efcc:	2200      	movs	r2, #0
 800efce:	701a      	strb	r2, [r3, #0]
	pass_route3();
 800efd0:	f001 fe62 	bl	8010c98 <pass_route3>

	if(start_mode == 0 || start_mode == 1){					//a大回りではない場合、先頭の半区画直進をスキップ
 800efd4:	4bc6      	ldr	r3, [pc, #792]	; (800f2f0 <searchF4+0x350>)
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	b2db      	uxtb	r3, r3
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d004      	beq.n	800efe8 <searchF4+0x48>
 800efde:	4bc4      	ldr	r3, [pc, #784]	; (800f2f0 <searchF4+0x350>)
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	b2db      	uxtb	r3, r3
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d109      	bne.n	800effc <searchF4+0x5c>
		pass[p_cnt]--;
 800efe8:	4bc0      	ldr	r3, [pc, #768]	; (800f2ec <searchF4+0x34c>)
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	4ac1      	ldr	r2, [pc, #772]	; (800f2f4 <searchF4+0x354>)
 800efee:	56d2      	ldrsb	r2, [r2, r3]
 800eff0:	b2d2      	uxtb	r2, r2
 800eff2:	3a01      	subs	r2, #1
 800eff4:	b2d2      	uxtb	r2, r2
 800eff6:	b251      	sxtb	r1, r2
 800eff8:	4abe      	ldr	r2, [pc, #760]	; (800f2f4 <searchF4+0x354>)
 800effa:	54d1      	strb	r1, [r2, r3]
	}

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800effc:	f7f6 fc6e 	bl	80058dc <start_sectionA>

	MF2.FLAG.HACCEL = 0;
 800f000:	4abd      	ldr	r2, [pc, #756]	; (800f2f8 <searchF4+0x358>)
 800f002:	8813      	ldrh	r3, [r2, #0]
 800f004:	f36f 0341 	bfc	r3, #1, #1
 800f008:	8013      	strh	r3, [r2, #0]
	MF.FLAG.XDIR = 1;
 800f00a:	4ab7      	ldr	r2, [pc, #732]	; (800f2e8 <searchF4+0x348>)
 800f00c:	8813      	ldrh	r3, [r2, #0]
 800f00e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f012:	8013      	strh	r3, [r2, #0]
	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800f014:	4bb5      	ldr	r3, [pc, #724]	; (800f2ec <searchF4+0x34c>)
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	1c5a      	adds	r2, r3, #1
 800f01a:	b2d1      	uxtb	r1, r2
 800f01c:	4ab3      	ldr	r2, [pc, #716]	; (800f2ec <searchF4+0x34c>)
 800f01e:	7011      	strb	r1, [r2, #0]
 800f020:	461a      	mov	r2, r3
 800f022:	4bb4      	ldr	r3, [pc, #720]	; (800f2f4 <searchF4+0x354>)
 800f024:	569b      	ldrsb	r3, [r3, r2]
 800f026:	3372      	adds	r3, #114	; 0x72
 800f028:	2b71      	cmp	r3, #113	; 0x71
 800f02a:	f200 811c 	bhi.w	800f266 <searchF4+0x2c6>
 800f02e:	a201      	add	r2, pc, #4	; (adr r2, 800f034 <searchF4+0x94>)
 800f030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f034:	0800f25d 	.word	0x0800f25d
 800f038:	0800f267 	.word	0x0800f267
 800f03c:	0800f267 	.word	0x0800f267
 800f040:	0800f267 	.word	0x0800f267
 800f044:	0800f267 	.word	0x0800f267
 800f048:	0800f267 	.word	0x0800f267
 800f04c:	0800f267 	.word	0x0800f267
 800f050:	0800f267 	.word	0x0800f267
 800f054:	0800f267 	.word	0x0800f267
 800f058:	0800f267 	.word	0x0800f267
 800f05c:	0800f267 	.word	0x0800f267
 800f060:	0800f267 	.word	0x0800f267
 800f064:	0800f267 	.word	0x0800f267
 800f068:	0800f267 	.word	0x0800f267
 800f06c:	0800f267 	.word	0x0800f267
 800f070:	0800f267 	.word	0x0800f267
 800f074:	0800f267 	.word	0x0800f267
 800f078:	0800f267 	.word	0x0800f267
 800f07c:	0800f267 	.word	0x0800f267
 800f080:	0800f267 	.word	0x0800f267
 800f084:	0800f267 	.word	0x0800f267
 800f088:	0800f267 	.word	0x0800f267
 800f08c:	0800f267 	.word	0x0800f267
 800f090:	0800f267 	.word	0x0800f267
 800f094:	0800f267 	.word	0x0800f267
 800f098:	0800f267 	.word	0x0800f267
 800f09c:	0800f267 	.word	0x0800f267
 800f0a0:	0800f267 	.word	0x0800f267
 800f0a4:	0800f267 	.word	0x0800f267
 800f0a8:	0800f267 	.word	0x0800f267
 800f0ac:	0800f267 	.word	0x0800f267
 800f0b0:	0800f267 	.word	0x0800f267
 800f0b4:	0800f267 	.word	0x0800f267
 800f0b8:	0800f267 	.word	0x0800f267
 800f0bc:	0800f267 	.word	0x0800f267
 800f0c0:	0800f267 	.word	0x0800f267
 800f0c4:	0800f267 	.word	0x0800f267
 800f0c8:	0800f267 	.word	0x0800f267
 800f0cc:	0800f267 	.word	0x0800f267
 800f0d0:	0800f267 	.word	0x0800f267
 800f0d4:	0800f267 	.word	0x0800f267
 800f0d8:	0800f267 	.word	0x0800f267
 800f0dc:	0800f267 	.word	0x0800f267
 800f0e0:	0800f267 	.word	0x0800f267
 800f0e4:	0800f267 	.word	0x0800f267
 800f0e8:	0800f267 	.word	0x0800f267
 800f0ec:	0800f267 	.word	0x0800f267
 800f0f0:	0800f267 	.word	0x0800f267
 800f0f4:	0800f267 	.word	0x0800f267
 800f0f8:	0800f267 	.word	0x0800f267
 800f0fc:	0800f267 	.word	0x0800f267
 800f100:	0800f267 	.word	0x0800f267
 800f104:	0800f267 	.word	0x0800f267
 800f108:	0800f267 	.word	0x0800f267
 800f10c:	0800f267 	.word	0x0800f267
 800f110:	0800f267 	.word	0x0800f267
 800f114:	0800f267 	.word	0x0800f267
 800f118:	0800f267 	.word	0x0800f267
 800f11c:	0800f267 	.word	0x0800f267
 800f120:	0800f267 	.word	0x0800f267
 800f124:	0800f267 	.word	0x0800f267
 800f128:	0800f267 	.word	0x0800f267
 800f12c:	0800f267 	.word	0x0800f267
 800f130:	0800f267 	.word	0x0800f267
 800f134:	0800f267 	.word	0x0800f267
 800f138:	0800f267 	.word	0x0800f267
 800f13c:	0800f267 	.word	0x0800f267
 800f140:	0800f267 	.word	0x0800f267
 800f144:	0800f267 	.word	0x0800f267
 800f148:	0800f267 	.word	0x0800f267
 800f14c:	0800f267 	.word	0x0800f267
 800f150:	0800f267 	.word	0x0800f267
 800f154:	0800f267 	.word	0x0800f267
 800f158:	0800f267 	.word	0x0800f267
 800f15c:	0800f267 	.word	0x0800f267
 800f160:	0800f267 	.word	0x0800f267
 800f164:	0800f267 	.word	0x0800f267
 800f168:	0800f267 	.word	0x0800f267
 800f16c:	0800f267 	.word	0x0800f267
 800f170:	0800f267 	.word	0x0800f267
 800f174:	0800f267 	.word	0x0800f267
 800f178:	0800f267 	.word	0x0800f267
 800f17c:	0800f267 	.word	0x0800f267
 800f180:	0800f267 	.word	0x0800f267
 800f184:	0800f267 	.word	0x0800f267
 800f188:	0800f267 	.word	0x0800f267
 800f18c:	0800f267 	.word	0x0800f267
 800f190:	0800f267 	.word	0x0800f267
 800f194:	0800f267 	.word	0x0800f267
 800f198:	0800f267 	.word	0x0800f267
 800f19c:	0800f267 	.word	0x0800f267
 800f1a0:	0800f267 	.word	0x0800f267
 800f1a4:	0800f267 	.word	0x0800f267
 800f1a8:	0800f267 	.word	0x0800f267
 800f1ac:	0800f267 	.word	0x0800f267
 800f1b0:	0800f267 	.word	0x0800f267
 800f1b4:	0800f267 	.word	0x0800f267
 800f1b8:	0800f267 	.word	0x0800f267
 800f1bc:	0800f257 	.word	0x0800f257
 800f1c0:	0800f251 	.word	0x0800f251
 800f1c4:	0800f24b 	.word	0x0800f24b
 800f1c8:	0800f245 	.word	0x0800f245
 800f1cc:	0800f23f 	.word	0x0800f23f
 800f1d0:	0800f239 	.word	0x0800f239
 800f1d4:	0800f233 	.word	0x0800f233
 800f1d8:	0800f22d 	.word	0x0800f22d
 800f1dc:	0800f227 	.word	0x0800f227
 800f1e0:	0800f221 	.word	0x0800f221
 800f1e4:	0800f21b 	.word	0x0800f21b
 800f1e8:	0800f215 	.word	0x0800f215
 800f1ec:	0800f20f 	.word	0x0800f20f
 800f1f0:	0800f209 	.word	0x0800f209
 800f1f4:	0800f203 	.word	0x0800f203
 800f1f8:	0800f1fd 	.word	0x0800f1fd
			//----a右スラローム----
			case -1:
				slalom_R90();
 800f1fc:	f7f7 f9c4 	bl	8006588 <slalom_R90>
				break;
 800f200:	e0cd      	b.n	800f39e <searchF4+0x3fe>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800f202:	f7f7 fad7 	bl	80067b4 <slalom_L90>
				break;
 800f206:	e0ca      	b.n	800f39e <searchF4+0x3fe>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800f208:	f7f7 fbe0 	bl	80069cc <Lslalom_R90>
				break;
 800f20c:	e0c7      	b.n	800f39e <searchF4+0x3fe>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800f20e:	f7f7 fce3 	bl	8006bd8 <Lslalom_L90>
				break;
 800f212:	e0c4      	b.n	800f39e <searchF4+0x3fe>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800f214:	f7f7 fddc 	bl	8006dd0 <Lslalom_R180>
				break;
 800f218:	e0c1      	b.n	800f39e <searchF4+0x3fe>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800f21a:	f7f7 fef5 	bl	8007008 <Lslalom_L180>
				break;
 800f21e:	e0be      	b.n	800f39e <searchF4+0x3fe>

			//----a斜め右V45----
			case -7:
				v_R45();
 800f220:	f7f8 f802 	bl	8007228 <v_R45>
				break;
 800f224:	e0bb      	b.n	800f39e <searchF4+0x3fe>

			//----a斜め左V45----
			case -8:
				v_L45();
 800f226:	f7f8 f9e5 	bl	80075f4 <v_L45>
				break;
 800f22a:	e0b8      	b.n	800f39e <searchF4+0x3fe>

			//----a斜め右V90----
			case -9:
				v_R90();
 800f22c:	f7f8 fe66 	bl	8007efc <v_R90>
				break;
 800f230:	e0b5      	b.n	800f39e <searchF4+0x3fe>

			//----a斜め左V90----
			case -10:
				v_L90();
 800f232:	f7f8 ff33 	bl	800809c <v_L90>
				break;
 800f236:	e0b2      	b.n	800f39e <searchF4+0x3fe>

			//----a斜め右V135----
			case -11:
				v_R135();
 800f238:	f7f8 fff8 	bl	800822c <v_R135>
				break;
 800f23c:	e0af      	b.n	800f39e <searchF4+0x3fe>

			//----a斜め左V135----
			case -12:
				v_L135();
 800f23e:	f7f9 f9df 	bl	8008600 <v_L135>
				break;
 800f242:	e0ac      	b.n	800f39e <searchF4+0x3fe>

			//----a斜め右V45Goal----
			case -13:
				v_R45D();
 800f244:	f7f8 fbb2 	bl	80079ac <v_R45D>
				break;
 800f248:	e0a9      	b.n	800f39e <searchF4+0x3fe>

			//----a斜め左V45Goal----
			case -14:
				v_L45D();
 800f24a:	f7f8 fd09 	bl	8007c60 <v_L45D>
				break;
 800f24e:	e0a6      	b.n	800f39e <searchF4+0x3fe>

			//----a斜め右V135Goal----
			case -15:
				v_R135D();
 800f250:	f7f9 fbb2 	bl	80089b8 <v_R135D>
				break;
 800f254:	e0a3      	b.n	800f39e <searchF4+0x3fe>

			//----a斜め左V135Goal----
			case -16:
				v_L135D();
 800f256:	f7f9 fd0b 	bl	8008c70 <v_L135D>
				break;
 800f25a:	e0a0      	b.n	800f39e <searchF4+0x3fe>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800f25c:	f7f7 f8bc 	bl	80063d8 <rotate_180>
				rotate_180();
 800f260:	f7f7 f8ba 	bl	80063d8 <rotate_180>
				while(1);
 800f264:	e7fe      	b.n	800f264 <searchF4+0x2c4>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800f266:	4b21      	ldr	r3, [pc, #132]	; (800f2ec <searchF4+0x34c>)
 800f268:	781b      	ldrb	r3, [r3, #0]
 800f26a:	3b01      	subs	r3, #1
 800f26c:	4a21      	ldr	r2, [pc, #132]	; (800f2f4 <searchF4+0x354>)
 800f26e:	56d3      	ldrsb	r3, [r2, r3]
 800f270:	2b03      	cmp	r3, #3
 800f272:	dc11      	bgt.n	800f298 <searchF4+0x2f8>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800f274:	2300      	movs	r3, #0
 800f276:	60fb      	str	r3, [r7, #12]
 800f278:	e004      	b.n	800f284 <searchF4+0x2e4>
						half_sectionU();
 800f27a:	f7f6 fd1b 	bl	8005cb4 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	3301      	adds	r3, #1
 800f282:	60fb      	str	r3, [r7, #12]
 800f284:	4b19      	ldr	r3, [pc, #100]	; (800f2ec <searchF4+0x34c>)
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	3b01      	subs	r3, #1
 800f28a:	4a1a      	ldr	r2, [pc, #104]	; (800f2f4 <searchF4+0x354>)
 800f28c:	56d3      	ldrsb	r3, [r2, r3]
 800f28e:	461a      	mov	r2, r3
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	4293      	cmp	r3, r2
 800f294:	dbf1      	blt.n	800f27a <searchF4+0x2da>
						p_cnt++;
					}else{
						half_sectionV();
					}
				}
				break;
 800f296:	e081      	b.n	800f39c <searchF4+0x3fc>
				}else if(pass[p_cnt-1] < 64){
 800f298:	4b14      	ldr	r3, [pc, #80]	; (800f2ec <searchF4+0x34c>)
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	3b01      	subs	r3, #1
 800f29e:	4a15      	ldr	r2, [pc, #84]	; (800f2f4 <searchF4+0x354>)
 800f2a0:	56d3      	ldrsb	r3, [r2, r3]
 800f2a2:	2b3f      	cmp	r3, #63	; 0x3f
 800f2a4:	dc2a      	bgt.n	800f2fc <searchF4+0x35c>
					one_sectionA();
 800f2a6:	f7f6 fd25 	bl	8005cf4 <one_sectionA>
					MF2.FLAG.HACCEL = 1;
 800f2aa:	4a13      	ldr	r2, [pc, #76]	; (800f2f8 <searchF4+0x358>)
 800f2ac:	8813      	ldrh	r3, [r2, #0]
 800f2ae:	f043 0302 	orr.w	r3, r3, #2
 800f2b2:	8013      	strh	r3, [r2, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	60bb      	str	r3, [r7, #8]
 800f2b8:	e004      	b.n	800f2c4 <searchF4+0x324>
						half_sectionU();
 800f2ba:	f7f6 fcfb 	bl	8005cb4 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	60bb      	str	r3, [r7, #8]
 800f2c4:	4b09      	ldr	r3, [pc, #36]	; (800f2ec <searchF4+0x34c>)
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	3b01      	subs	r3, #1
 800f2ca:	4a0a      	ldr	r2, [pc, #40]	; (800f2f4 <searchF4+0x354>)
 800f2cc:	56d3      	ldrsb	r3, [r2, r3]
 800f2ce:	3b04      	subs	r3, #4
 800f2d0:	68ba      	ldr	r2, [r7, #8]
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	dbf1      	blt.n	800f2ba <searchF4+0x31a>
					one_sectionD();
 800f2d6:	f7f6 fd73 	bl	8005dc0 <one_sectionD>
					MF2.FLAG.HACCEL = 0;
 800f2da:	4a07      	ldr	r2, [pc, #28]	; (800f2f8 <searchF4+0x358>)
 800f2dc:	8813      	ldrh	r3, [r2, #0]
 800f2de:	f36f 0341 	bfc	r3, #1, #1
 800f2e2:	8013      	strh	r3, [r2, #0]
				break;
 800f2e4:	e05a      	b.n	800f39c <searchF4+0x3fc>
 800f2e6:	bf00      	nop
 800f2e8:	20000f68 	.word	0x20000f68
 800f2ec:	200002b0 	.word	0x200002b0
 800f2f0:	200015c8 	.word	0x200015c8
 800f2f4:	20000350 	.word	0x20000350
 800f2f8:	20000f64 	.word	0x20000f64
					if((pass[p_cnt] == 64) && (pass[p_cnt+1] == 64) && (pass[p_cnt+2] == 64) && (MF2.FLAG.HACCEL == 0)){
 800f2fc:	4b61      	ldr	r3, [pc, #388]	; (800f484 <searchF4+0x4e4>)
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	461a      	mov	r2, r3
 800f302:	4b61      	ldr	r3, [pc, #388]	; (800f488 <searchF4+0x4e8>)
 800f304:	569b      	ldrsb	r3, [r3, r2]
 800f306:	2b40      	cmp	r3, #64	; 0x40
 800f308:	d122      	bne.n	800f350 <searchF4+0x3b0>
 800f30a:	4b5e      	ldr	r3, [pc, #376]	; (800f484 <searchF4+0x4e4>)
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	3301      	adds	r3, #1
 800f310:	4a5d      	ldr	r2, [pc, #372]	; (800f488 <searchF4+0x4e8>)
 800f312:	56d3      	ldrsb	r3, [r2, r3]
 800f314:	2b40      	cmp	r3, #64	; 0x40
 800f316:	d11b      	bne.n	800f350 <searchF4+0x3b0>
 800f318:	4b5a      	ldr	r3, [pc, #360]	; (800f484 <searchF4+0x4e4>)
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	3302      	adds	r3, #2
 800f31e:	4a5a      	ldr	r2, [pc, #360]	; (800f488 <searchF4+0x4e8>)
 800f320:	56d3      	ldrsb	r3, [r2, r3]
 800f322:	2b40      	cmp	r3, #64	; 0x40
 800f324:	d114      	bne.n	800f350 <searchF4+0x3b0>
 800f326:	4b59      	ldr	r3, [pc, #356]	; (800f48c <searchF4+0x4ec>)
 800f328:	881b      	ldrh	r3, [r3, #0]
 800f32a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f32e:	b2db      	uxtb	r3, r3
 800f330:	2b00      	cmp	r3, #0
 800f332:	d10d      	bne.n	800f350 <searchF4+0x3b0>
						one_sectionVA();
 800f334:	f7f6 fdb6 	bl	8005ea4 <one_sectionVA>
						MF2.FLAG.HACCEL = 1;
 800f338:	4a54      	ldr	r2, [pc, #336]	; (800f48c <searchF4+0x4ec>)
 800f33a:	8813      	ldrh	r3, [r2, #0]
 800f33c:	f043 0302 	orr.w	r3, r3, #2
 800f340:	8013      	strh	r3, [r2, #0]
						p_cnt++;
 800f342:	4b50      	ldr	r3, [pc, #320]	; (800f484 <searchF4+0x4e4>)
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	3301      	adds	r3, #1
 800f348:	b2da      	uxtb	r2, r3
 800f34a:	4b4e      	ldr	r3, [pc, #312]	; (800f484 <searchF4+0x4e4>)
 800f34c:	701a      	strb	r2, [r3, #0]
 800f34e:	e025      	b.n	800f39c <searchF4+0x3fc>
					else if((pass[p_cnt] == 64) && (pass[p_cnt+1] != 64) && (MF2.FLAG.HACCEL == 1)){
 800f350:	4b4c      	ldr	r3, [pc, #304]	; (800f484 <searchF4+0x4e4>)
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	461a      	mov	r2, r3
 800f356:	4b4c      	ldr	r3, [pc, #304]	; (800f488 <searchF4+0x4e8>)
 800f358:	569b      	ldrsb	r3, [r3, r2]
 800f35a:	2b40      	cmp	r3, #64	; 0x40
 800f35c:	d11b      	bne.n	800f396 <searchF4+0x3f6>
 800f35e:	4b49      	ldr	r3, [pc, #292]	; (800f484 <searchF4+0x4e4>)
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	3301      	adds	r3, #1
 800f364:	4a48      	ldr	r2, [pc, #288]	; (800f488 <searchF4+0x4e8>)
 800f366:	56d3      	ldrsb	r3, [r2, r3]
 800f368:	2b40      	cmp	r3, #64	; 0x40
 800f36a:	d014      	beq.n	800f396 <searchF4+0x3f6>
 800f36c:	4b47      	ldr	r3, [pc, #284]	; (800f48c <searchF4+0x4ec>)
 800f36e:	881b      	ldrh	r3, [r3, #0]
 800f370:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f374:	b2db      	uxtb	r3, r3
 800f376:	2b01      	cmp	r3, #1
 800f378:	d10d      	bne.n	800f396 <searchF4+0x3f6>
						one_sectionVD();
 800f37a:	f7f6 fdf1 	bl	8005f60 <one_sectionVD>
						MF2.FLAG.HACCEL = 0;
 800f37e:	4a43      	ldr	r2, [pc, #268]	; (800f48c <searchF4+0x4ec>)
 800f380:	8813      	ldrh	r3, [r2, #0]
 800f382:	f36f 0341 	bfc	r3, #1, #1
 800f386:	8013      	strh	r3, [r2, #0]
						p_cnt++;
 800f388:	4b3e      	ldr	r3, [pc, #248]	; (800f484 <searchF4+0x4e4>)
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	3301      	adds	r3, #1
 800f38e:	b2da      	uxtb	r2, r3
 800f390:	4b3c      	ldr	r3, [pc, #240]	; (800f484 <searchF4+0x4e4>)
 800f392:	701a      	strb	r2, [r3, #0]
 800f394:	e002      	b.n	800f39c <searchF4+0x3fc>
						half_sectionV();
 800f396:	f7f6 fc99 	bl	8005ccc <half_sectionV>
				break;
 800f39a:	e7ff      	b.n	800f39c <searchF4+0x3fc>
 800f39c:	bf00      	nop
		}

	}while(pass[p_cnt] != -114);
 800f39e:	4b39      	ldr	r3, [pc, #228]	; (800f484 <searchF4+0x4e4>)
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	4b38      	ldr	r3, [pc, #224]	; (800f488 <searchF4+0x4e8>)
 800f3a6:	569b      	ldrsb	r3, [r3, r2]
 800f3a8:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800f3ac:	f47f ae32 	bne.w	800f014 <searchF4+0x74>

	mouse.x = goal_x;
 800f3b0:	4b37      	ldr	r3, [pc, #220]	; (800f490 <searchF4+0x4f0>)
 800f3b2:	781a      	ldrb	r2, [r3, #0]
 800f3b4:	4b37      	ldr	r3, [pc, #220]	; (800f494 <searchF4+0x4f4>)
 800f3b6:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800f3b8:	4b37      	ldr	r3, [pc, #220]	; (800f498 <searchF4+0x4f8>)
 800f3ba:	781a      	ldrb	r2, [r3, #0]
 800f3bc:	4b35      	ldr	r3, [pc, #212]	; (800f494 <searchF4+0x4f4>)
 800f3be:	705a      	strb	r2, [r3, #1]
	mouse.dir = mouse.dir / 2;
 800f3c0:	4b34      	ldr	r3, [pc, #208]	; (800f494 <searchF4+0x4f4>)
 800f3c2:	789b      	ldrb	r3, [r3, #2]
 800f3c4:	b2db      	uxtb	r3, r3
 800f3c6:	085b      	lsrs	r3, r3, #1
 800f3c8:	b2da      	uxtb	r2, r3
 800f3ca:	4b32      	ldr	r3, [pc, #200]	; (800f494 <searchF4+0x4f4>)
 800f3cc:	709a      	strb	r2, [r3, #2]
	MF.FLAG.XDIR = 0;
 800f3ce:	4a33      	ldr	r2, [pc, #204]	; (800f49c <searchF4+0x4fc>)
 800f3d0:	8813      	ldrh	r3, [r2, #0]
 800f3d2:	f36f 330c 	bfc	r3, #12, #1
 800f3d6:	8013      	strh	r3, [r2, #0]

	if(pass[p_cnt-1] != -13 && pass[p_cnt-1] != -14 && pass[p_cnt-1] != -15 && pass[p_cnt-1] != -16){
 800f3d8:	4b2a      	ldr	r3, [pc, #168]	; (800f484 <searchF4+0x4e4>)
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	3b01      	subs	r3, #1
 800f3de:	4a2a      	ldr	r2, [pc, #168]	; (800f488 <searchF4+0x4e8>)
 800f3e0:	56d3      	ldrsb	r3, [r2, r3]
 800f3e2:	f113 0f0d 	cmn.w	r3, #13
 800f3e6:	d02c      	beq.n	800f442 <searchF4+0x4a2>
 800f3e8:	4b26      	ldr	r3, [pc, #152]	; (800f484 <searchF4+0x4e4>)
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	3b01      	subs	r3, #1
 800f3ee:	4a26      	ldr	r2, [pc, #152]	; (800f488 <searchF4+0x4e8>)
 800f3f0:	56d3      	ldrsb	r3, [r2, r3]
 800f3f2:	f113 0f0e 	cmn.w	r3, #14
 800f3f6:	d024      	beq.n	800f442 <searchF4+0x4a2>
 800f3f8:	4b22      	ldr	r3, [pc, #136]	; (800f484 <searchF4+0x4e4>)
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	3b01      	subs	r3, #1
 800f3fe:	4a22      	ldr	r2, [pc, #136]	; (800f488 <searchF4+0x4e8>)
 800f400:	56d3      	ldrsb	r3, [r2, r3]
 800f402:	f113 0f0f 	cmn.w	r3, #15
 800f406:	d01c      	beq.n	800f442 <searchF4+0x4a2>
 800f408:	4b1e      	ldr	r3, [pc, #120]	; (800f484 <searchF4+0x4e4>)
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	3b01      	subs	r3, #1
 800f40e:	4a1e      	ldr	r2, [pc, #120]	; (800f488 <searchF4+0x4e8>)
 800f410:	56d3      	ldrsb	r3, [r2, r3]
 800f412:	f113 0f10 	cmn.w	r3, #16
 800f416:	d014      	beq.n	800f442 <searchF4+0x4a2>
		for(int j=0; j<goal_mode-1; j++){
 800f418:	2300      	movs	r3, #0
 800f41a:	607b      	str	r3, [r7, #4]
 800f41c:	e006      	b.n	800f42c <searchF4+0x48c>
			one_sectionU();
 800f41e:	f7f6 fe09 	bl	8006034 <one_sectionU>
			adv_pos();
 800f422:	f000 f841 	bl	800f4a8 <adv_pos>
		for(int j=0; j<goal_mode-1; j++){
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	3301      	adds	r3, #1
 800f42a:	607b      	str	r3, [r7, #4]
 800f42c:	4b1c      	ldr	r3, [pc, #112]	; (800f4a0 <searchF4+0x500>)
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	3b01      	subs	r3, #1
 800f432:	687a      	ldr	r2, [r7, #4]
 800f434:	429a      	cmp	r2, r3
 800f436:	dbf2      	blt.n	800f41e <searchF4+0x47e>
		}
		half_sectionD();
 800f438:	f7f6 fb6e 	bl	8005b18 <half_sectionD>
		set_positionF();
 800f43c:	f7f6 fa30 	bl	80058a0 <set_positionF>
 800f440:	e00f      	b.n	800f462 <searchF4+0x4c2>
	}else{														//a減速斜めでgoalする場合
		for(int j=0; j<goal_mode-1; j++){
 800f442:	2300      	movs	r3, #0
 800f444:	603b      	str	r3, [r7, #0]
 800f446:	e006      	b.n	800f456 <searchF4+0x4b6>
			one_section();
 800f448:	f7f6 fc4c 	bl	8005ce4 <one_section>
			adv_pos();
 800f44c:	f000 f82c 	bl	800f4a8 <adv_pos>
		for(int j=0; j<goal_mode-1; j++){
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	3301      	adds	r3, #1
 800f454:	603b      	str	r3, [r7, #0]
 800f456:	4b12      	ldr	r3, [pc, #72]	; (800f4a0 <searchF4+0x500>)
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	3b01      	subs	r3, #1
 800f45c:	683a      	ldr	r2, [r7, #0]
 800f45e:	429a      	cmp	r2, r3
 800f460:	dbf2      	blt.n	800f448 <searchF4+0x4a8>
		}
	}
	HAL_Delay(500);
 800f462:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f466:	f7f1 fdd9 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800f46a:	f7f6 ffb5 	bl	80063d8 <rotate_180>
//	driveC2(SETPOS_BACK); 							        //a尻を当てる程度に後退。回転後に停止する
//	degree_z = target_degree_z;
//	start_mode = 0;
	start_mode = 1;
 800f46e:	4b0d      	ldr	r3, [pc, #52]	; (800f4a4 <searchF4+0x504>)
 800f470:	2201      	movs	r2, #1
 800f472:	701a      	strb	r2, [r3, #0]
	goal_mode = 1;
 800f474:	4b0a      	ldr	r3, [pc, #40]	; (800f4a0 <searchF4+0x500>)
 800f476:	2201      	movs	r2, #1
 800f478:	701a      	strb	r2, [r3, #0]
}
 800f47a:	bf00      	nop
 800f47c:	3710      	adds	r7, #16
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
 800f482:	bf00      	nop
 800f484:	200002b0 	.word	0x200002b0
 800f488:	20000350 	.word	0x20000350
 800f48c:	20000f64 	.word	0x20000f64
 800f490:	20000bb0 	.word	0x20000bb0
 800f494:	20000c0c 	.word	0x20000c0c
 800f498:	20000b4c 	.word	0x20000b4c
 800f49c:	20000f68 	.word	0x20000f68
 800f4a0:	20000bb1 	.word	0x20000bb1
 800f4a4:	200015c8 	.word	0x200015c8

0800f4a8 <adv_pos>:
//adv_pos
//aマイクロマウス内部位置情報で前進させる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 800f4a8:	b480      	push	{r7}
 800f4aa:	af00      	add	r7, sp, #0

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 800f4ac:	4b1a      	ldr	r3, [pc, #104]	; (800f518 <adv_pos+0x70>)
 800f4ae:	789b      	ldrb	r3, [r3, #2]
 800f4b0:	b2db      	uxtb	r3, r3
 800f4b2:	2b03      	cmp	r3, #3
 800f4b4:	d82a      	bhi.n	800f50c <adv_pos+0x64>
 800f4b6:	a201      	add	r2, pc, #4	; (adr r2, 800f4bc <adv_pos+0x14>)
 800f4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4bc:	0800f4cd 	.word	0x0800f4cd
 800f4c0:	0800f4dd 	.word	0x0800f4dd
 800f4c4:	0800f4ed 	.word	0x0800f4ed
 800f4c8:	0800f4fd 	.word	0x0800f4fd
	case 0x00:												//a北方向に向いている場合
		mouse.y++;											//Y座標をインクリメント
 800f4cc:	4b12      	ldr	r3, [pc, #72]	; (800f518 <adv_pos+0x70>)
 800f4ce:	785b      	ldrb	r3, [r3, #1]
 800f4d0:	b2db      	uxtb	r3, r3
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	b2da      	uxtb	r2, r3
 800f4d6:	4b10      	ldr	r3, [pc, #64]	; (800f518 <adv_pos+0x70>)
 800f4d8:	705a      	strb	r2, [r3, #1]
		break;
 800f4da:	e017      	b.n	800f50c <adv_pos+0x64>
	case 0x01:												//a東方向に向いている場合
		mouse.x++;											//X座標をインクリメント
 800f4dc:	4b0e      	ldr	r3, [pc, #56]	; (800f518 <adv_pos+0x70>)
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	b2db      	uxtb	r3, r3
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	b2da      	uxtb	r2, r3
 800f4e6:	4b0c      	ldr	r3, [pc, #48]	; (800f518 <adv_pos+0x70>)
 800f4e8:	701a      	strb	r2, [r3, #0]
		break;
 800f4ea:	e00f      	b.n	800f50c <adv_pos+0x64>
	case 0x02:												//a南方向に向いている場合
		mouse.y--;											//Y座標をデクリメント
 800f4ec:	4b0a      	ldr	r3, [pc, #40]	; (800f518 <adv_pos+0x70>)
 800f4ee:	785b      	ldrb	r3, [r3, #1]
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	b2da      	uxtb	r2, r3
 800f4f6:	4b08      	ldr	r3, [pc, #32]	; (800f518 <adv_pos+0x70>)
 800f4f8:	705a      	strb	r2, [r3, #1]
		break;
 800f4fa:	e007      	b.n	800f50c <adv_pos+0x64>
	case 0x03:												//a西方向に向いている場合
		mouse.x--;											//X座標をデクリメント
 800f4fc:	4b06      	ldr	r3, [pc, #24]	; (800f518 <adv_pos+0x70>)
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	b2db      	uxtb	r3, r3
 800f502:	3b01      	subs	r3, #1
 800f504:	b2da      	uxtb	r2, r3
 800f506:	4b04      	ldr	r3, [pc, #16]	; (800f518 <adv_pos+0x70>)
 800f508:	701a      	strb	r2, [r3, #0]
		break;
 800f50a:	bf00      	nop
	}
}
 800f50c:	bf00      	nop
 800f50e:	46bd      	mov	sp, r7
 800f510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f514:	4770      	bx	lr
 800f516:	bf00      	nop
 800f518:	20000c0c 	.word	0x20000c0c

0800f51c <conf_route>:
//conf_route
//a進路を判定する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 800f51c:	b580      	push	{r7, lr}
 800f51e:	af00      	add	r7, sp, #0

	//----a壁情報書き込み----
	write_map();
 800f520:	f000 f886 	bl	800f630 <write_map>

	//----a最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 800f524:	4b09      	ldr	r3, [pc, #36]	; (800f54c <conf_route+0x30>)
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	461a      	mov	r2, r3
 800f52a:	4b09      	ldr	r3, [pc, #36]	; (800f550 <conf_route+0x34>)
 800f52c:	5c9a      	ldrb	r2, [r3, r2]
 800f52e:	4b09      	ldr	r3, [pc, #36]	; (800f554 <conf_route+0x38>)
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	4013      	ands	r3, r2
 800f534:	b2db      	uxtb	r3, r3
 800f536:	2b00      	cmp	r3, #0
 800f538:	d006      	beq.n	800f548 <conf_route+0x2c>
		make_smap();										//a歩数マップを更新
 800f53a:	f000 fa6d 	bl	800fa18 <make_smap>
		make_route();										//a最短経路を更新
 800f53e:	f000 fe27 	bl	8010190 <make_route>
		r_cnt = 0;											//a経路カウンタを0に
 800f542:	4b02      	ldr	r3, [pc, #8]	; (800f54c <conf_route+0x30>)
 800f544:	2200      	movs	r2, #0
 800f546:	701a      	strb	r2, [r3, #0]
	}
}
 800f548:	bf00      	nop
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	200015d0 	.word	0x200015d0
 800f550:	20000c54 	.word	0x20000c54
 800f554:	200002c8 	.word	0x200002c8

0800f558 <map_Init>:
//map_Init
//aマップ格納配列map[][]の初期化をする
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 800f558:	b480      	push	{r7}
 800f55a:	b083      	sub	sp, #12
 800f55c:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数

	//====a初期化開始====
	//aマップのクリア
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800f55e:	2300      	movs	r3, #0
 800f560:	71bb      	strb	r3, [r7, #6]
 800f562:	e013      	b.n	800f58c <map_Init+0x34>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800f564:	2300      	movs	r3, #0
 800f566:	71fb      	strb	r3, [r7, #7]
 800f568:	e00a      	b.n	800f580 <map_Init+0x28>
			map[y][x] = 0xf0;								//a上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 800f56a:	79ba      	ldrb	r2, [r7, #6]
 800f56c:	79fb      	ldrb	r3, [r7, #7]
 800f56e:	492f      	ldr	r1, [pc, #188]	; (800f62c <map_Init+0xd4>)
 800f570:	0112      	lsls	r2, r2, #4
 800f572:	440a      	add	r2, r1
 800f574:	4413      	add	r3, r2
 800f576:	22f0      	movs	r2, #240	; 0xf0
 800f578:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800f57a:	79fb      	ldrb	r3, [r7, #7]
 800f57c:	3301      	adds	r3, #1
 800f57e:	71fb      	strb	r3, [r7, #7]
 800f580:	79fb      	ldrb	r3, [r7, #7]
 800f582:	2b0f      	cmp	r3, #15
 800f584:	d9f1      	bls.n	800f56a <map_Init+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800f586:	79bb      	ldrb	r3, [r7, #6]
 800f588:	3301      	adds	r3, #1
 800f58a:	71bb      	strb	r3, [r7, #6]
 800f58c:	79bb      	ldrb	r3, [r7, #6]
 800f58e:	2b0f      	cmp	r3, #15
 800f590:	d9e8      	bls.n	800f564 <map_Init+0xc>
		}
	}

	//a確定壁の配置
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800f592:	2300      	movs	r3, #0
 800f594:	71bb      	strb	r3, [r7, #6]
 800f596:	e020      	b.n	800f5da <map_Init+0x82>
		map[y][0] |= 0xf1;									//a最西に壁を配置
 800f598:	79bb      	ldrb	r3, [r7, #6]
 800f59a:	4a24      	ldr	r2, [pc, #144]	; (800f62c <map_Init+0xd4>)
 800f59c:	011b      	lsls	r3, r3, #4
 800f59e:	4413      	add	r3, r2
 800f5a0:	781a      	ldrb	r2, [r3, #0]
 800f5a2:	79bb      	ldrb	r3, [r7, #6]
 800f5a4:	f062 020e 	orn	r2, r2, #14
 800f5a8:	b2d1      	uxtb	r1, r2
 800f5aa:	4a20      	ldr	r2, [pc, #128]	; (800f62c <map_Init+0xd4>)
 800f5ac:	011b      	lsls	r3, r3, #4
 800f5ae:	4413      	add	r3, r2
 800f5b0:	460a      	mov	r2, r1
 800f5b2:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//a最東に壁を配置
 800f5b4:	79bb      	ldrb	r3, [r7, #6]
 800f5b6:	4a1d      	ldr	r2, [pc, #116]	; (800f62c <map_Init+0xd4>)
 800f5b8:	011b      	lsls	r3, r3, #4
 800f5ba:	4413      	add	r3, r2
 800f5bc:	330f      	adds	r3, #15
 800f5be:	781a      	ldrb	r2, [r3, #0]
 800f5c0:	79bb      	ldrb	r3, [r7, #6]
 800f5c2:	f062 020b 	orn	r2, r2, #11
 800f5c6:	b2d1      	uxtb	r1, r2
 800f5c8:	4a18      	ldr	r2, [pc, #96]	; (800f62c <map_Init+0xd4>)
 800f5ca:	011b      	lsls	r3, r3, #4
 800f5cc:	4413      	add	r3, r2
 800f5ce:	330f      	adds	r3, #15
 800f5d0:	460a      	mov	r2, r1
 800f5d2:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800f5d4:	79bb      	ldrb	r3, [r7, #6]
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	71bb      	strb	r3, [r7, #6]
 800f5da:	79bb      	ldrb	r3, [r7, #6]
 800f5dc:	2b0f      	cmp	r3, #15
 800f5de:	d9db      	bls.n	800f598 <map_Init+0x40>
	}
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	71fb      	strb	r3, [r7, #7]
 800f5e4:	e019      	b.n	800f61a <map_Init+0xc2>
		map[0][x] |= 0xf2;									//a最南に壁を配置
 800f5e6:	79fb      	ldrb	r3, [r7, #7]
 800f5e8:	4a10      	ldr	r2, [pc, #64]	; (800f62c <map_Init+0xd4>)
 800f5ea:	5cd2      	ldrb	r2, [r2, r3]
 800f5ec:	79fb      	ldrb	r3, [r7, #7]
 800f5ee:	f062 020d 	orn	r2, r2, #13
 800f5f2:	b2d1      	uxtb	r1, r2
 800f5f4:	4a0d      	ldr	r2, [pc, #52]	; (800f62c <map_Init+0xd4>)
 800f5f6:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//a最北に壁を配置
 800f5f8:	79fb      	ldrb	r3, [r7, #7]
 800f5fa:	4a0c      	ldr	r2, [pc, #48]	; (800f62c <map_Init+0xd4>)
 800f5fc:	4413      	add	r3, r2
 800f5fe:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 800f602:	79fb      	ldrb	r3, [r7, #7]
 800f604:	f062 0207 	orn	r2, r2, #7
 800f608:	b2d1      	uxtb	r1, r2
 800f60a:	4a08      	ldr	r2, [pc, #32]	; (800f62c <map_Init+0xd4>)
 800f60c:	4413      	add	r3, r2
 800f60e:	460a      	mov	r2, r1
 800f610:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800f614:	79fb      	ldrb	r3, [r7, #7]
 800f616:	3301      	adds	r3, #1
 800f618:	71fb      	strb	r3, [r7, #7]
 800f61a:	79fb      	ldrb	r3, [r7, #7]
 800f61c:	2b0f      	cmp	r3, #15
 800f61e:	d9e2      	bls.n	800f5e6 <map_Init+0x8e>
	}
}
 800f620:	bf00      	nop
 800f622:	370c      	adds	r7, #12
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr
 800f62c:	200001ac 	.word	0x200001ac

0800f630 <write_map>:
//write_map
//aマップデータを書き込む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 800f630:	b490      	push	{r4, r7}
 800f632:	b082      	sub	sp, #8
 800f634:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t m_temp;											//a向きを補正した壁情報

	//====a壁情報の補正格納====
	m_temp = (wall_info >> mouse.dir) & 0x0f;				//aセンサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 800f636:	4b8f      	ldr	r3, [pc, #572]	; (800f874 <write_map+0x244>)
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	461a      	mov	r2, r3
 800f63c:	4b8e      	ldr	r3, [pc, #568]	; (800f878 <write_map+0x248>)
 800f63e:	789b      	ldrb	r3, [r3, #2]
 800f640:	b2db      	uxtb	r3, r3
 800f642:	fa42 f303 	asr.w	r3, r2, r3
 800f646:	b2db      	uxtb	r3, r3
 800f648:	f003 030f 	and.w	r3, r3, #15
 800f64c:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//a上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 800f64e:	79fb      	ldrb	r3, [r7, #7]
 800f650:	011b      	lsls	r3, r3, #4
 800f652:	b25a      	sxtb	r2, r3
 800f654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f658:	4313      	orrs	r3, r2
 800f65a:	b25b      	sxtb	r3, r3
 800f65c:	71fb      	strb	r3, [r7, #7]

	//====aデータの書き込み====
	map[mouse.y][mouse.x] = m_temp; 						//a現在地に壁情報書き込み
 800f65e:	4b86      	ldr	r3, [pc, #536]	; (800f878 <write_map+0x248>)
 800f660:	785b      	ldrb	r3, [r3, #1]
 800f662:	b2db      	uxtb	r3, r3
 800f664:	4618      	mov	r0, r3
 800f666:	4b84      	ldr	r3, [pc, #528]	; (800f878 <write_map+0x248>)
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	b2db      	uxtb	r3, r3
 800f66c:	4619      	mov	r1, r3
 800f66e:	4a83      	ldr	r2, [pc, #524]	; (800f87c <write_map+0x24c>)
 800f670:	0103      	lsls	r3, r0, #4
 800f672:	4413      	add	r3, r2
 800f674:	440b      	add	r3, r1
 800f676:	79fa      	ldrb	r2, [r7, #7]
 800f678:	701a      	strb	r2, [r3, #0]
	//----a周辺に書き込む----
	//a北側について
	if(mouse.y != 15){										//a現在最北端でないとき
 800f67a:	4b7f      	ldr	r3, [pc, #508]	; (800f878 <write_map+0x248>)
 800f67c:	785b      	ldrb	r3, [r3, #1]
 800f67e:	b2db      	uxtb	r3, r3
 800f680:	2b0f      	cmp	r3, #15
 800f682:	d039      	beq.n	800f6f8 <write_map+0xc8>
		if(m_temp & 0x88){									//a北壁がある場合
 800f684:	79fb      	ldrb	r3, [r7, #7]
 800f686:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d01a      	beq.n	800f6c4 <write_map+0x94>
			map[mouse.y + 1][mouse.x] |= 0x22;				//a北側の区画から見て南壁ありを書き込む
 800f68e:	4b7a      	ldr	r3, [pc, #488]	; (800f878 <write_map+0x248>)
 800f690:	785b      	ldrb	r3, [r3, #1]
 800f692:	b2d8      	uxtb	r0, r3
 800f694:	4603      	mov	r3, r0
 800f696:	3301      	adds	r3, #1
 800f698:	4a77      	ldr	r2, [pc, #476]	; (800f878 <write_map+0x248>)
 800f69a:	7812      	ldrb	r2, [r2, #0]
 800f69c:	b2d1      	uxtb	r1, r2
 800f69e:	460c      	mov	r4, r1
 800f6a0:	4a76      	ldr	r2, [pc, #472]	; (800f87c <write_map+0x24c>)
 800f6a2:	011b      	lsls	r3, r3, #4
 800f6a4:	4413      	add	r3, r2
 800f6a6:	4423      	add	r3, r4
 800f6a8:	781a      	ldrb	r2, [r3, #0]
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	4608      	mov	r0, r1
 800f6b0:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 800f6b4:	b2d1      	uxtb	r1, r2
 800f6b6:	4a71      	ldr	r2, [pc, #452]	; (800f87c <write_map+0x24c>)
 800f6b8:	011b      	lsls	r3, r3, #4
 800f6ba:	4413      	add	r3, r2
 800f6bc:	4403      	add	r3, r0
 800f6be:	460a      	mov	r2, r1
 800f6c0:	701a      	strb	r2, [r3, #0]
 800f6c2:	e019      	b.n	800f6f8 <write_map+0xc8>
		}else{												//a北壁がない場合
			map[mouse.y + 1][mouse.x] &= 0xDD;				//a北側の区画から見て南壁なしを書き込む
 800f6c4:	4b6c      	ldr	r3, [pc, #432]	; (800f878 <write_map+0x248>)
 800f6c6:	785b      	ldrb	r3, [r3, #1]
 800f6c8:	b2d8      	uxtb	r0, r3
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	3301      	adds	r3, #1
 800f6ce:	4a6a      	ldr	r2, [pc, #424]	; (800f878 <write_map+0x248>)
 800f6d0:	7812      	ldrb	r2, [r2, #0]
 800f6d2:	b2d1      	uxtb	r1, r2
 800f6d4:	460c      	mov	r4, r1
 800f6d6:	4a69      	ldr	r2, [pc, #420]	; (800f87c <write_map+0x24c>)
 800f6d8:	011b      	lsls	r3, r3, #4
 800f6da:	4413      	add	r3, r2
 800f6dc:	4423      	add	r3, r4
 800f6de:	781a      	ldrb	r2, [r3, #0]
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	4608      	mov	r0, r1
 800f6e6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800f6ea:	b2d1      	uxtb	r1, r2
 800f6ec:	4a63      	ldr	r2, [pc, #396]	; (800f87c <write_map+0x24c>)
 800f6ee:	011b      	lsls	r3, r3, #4
 800f6f0:	4413      	add	r3, r2
 800f6f2:	4403      	add	r3, r0
 800f6f4:	460a      	mov	r2, r1
 800f6f6:	701a      	strb	r2, [r3, #0]
		}
	}
	//a東側について
	if(mouse.x != 15){										//a現在最東端でないとき
 800f6f8:	4b5f      	ldr	r3, [pc, #380]	; (800f878 <write_map+0x248>)
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	b2db      	uxtb	r3, r3
 800f6fe:	2b0f      	cmp	r3, #15
 800f700:	d037      	beq.n	800f772 <write_map+0x142>
		if(m_temp & 0x44){									//a東壁がある場合
 800f702:	79fb      	ldrb	r3, [r7, #7]
 800f704:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d019      	beq.n	800f740 <write_map+0x110>
			map[mouse.y][mouse.x + 1] |= 0x11;				//a東側の区画から見て西壁ありを書き込む
 800f70c:	4b5a      	ldr	r3, [pc, #360]	; (800f878 <write_map+0x248>)
 800f70e:	785b      	ldrb	r3, [r3, #1]
 800f710:	b2dc      	uxtb	r4, r3
 800f712:	4622      	mov	r2, r4
 800f714:	4b58      	ldr	r3, [pc, #352]	; (800f878 <write_map+0x248>)
 800f716:	781b      	ldrb	r3, [r3, #0]
 800f718:	b2d8      	uxtb	r0, r3
 800f71a:	4603      	mov	r3, r0
 800f71c:	3301      	adds	r3, #1
 800f71e:	4957      	ldr	r1, [pc, #348]	; (800f87c <write_map+0x24c>)
 800f720:	0112      	lsls	r2, r2, #4
 800f722:	440a      	add	r2, r1
 800f724:	4413      	add	r3, r2
 800f726:	781a      	ldrb	r2, [r3, #0]
 800f728:	4603      	mov	r3, r0
 800f72a:	3301      	adds	r3, #1
 800f72c:	f042 0211 	orr.w	r2, r2, #17
 800f730:	b2d0      	uxtb	r0, r2
 800f732:	4952      	ldr	r1, [pc, #328]	; (800f87c <write_map+0x24c>)
 800f734:	0122      	lsls	r2, r4, #4
 800f736:	440a      	add	r2, r1
 800f738:	4413      	add	r3, r2
 800f73a:	4602      	mov	r2, r0
 800f73c:	701a      	strb	r2, [r3, #0]
 800f73e:	e018      	b.n	800f772 <write_map+0x142>
		}else{												//a北壁がない場合
			map[mouse.y][mouse.x + 1] &= 0xEE;				//a東側の区画から見て西壁なしを書き込む
 800f740:	4b4d      	ldr	r3, [pc, #308]	; (800f878 <write_map+0x248>)
 800f742:	785b      	ldrb	r3, [r3, #1]
 800f744:	b2dc      	uxtb	r4, r3
 800f746:	4622      	mov	r2, r4
 800f748:	4b4b      	ldr	r3, [pc, #300]	; (800f878 <write_map+0x248>)
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	b2d8      	uxtb	r0, r3
 800f74e:	4603      	mov	r3, r0
 800f750:	3301      	adds	r3, #1
 800f752:	494a      	ldr	r1, [pc, #296]	; (800f87c <write_map+0x24c>)
 800f754:	0112      	lsls	r2, r2, #4
 800f756:	440a      	add	r2, r1
 800f758:	4413      	add	r3, r2
 800f75a:	781a      	ldrb	r2, [r3, #0]
 800f75c:	4603      	mov	r3, r0
 800f75e:	3301      	adds	r3, #1
 800f760:	f022 0211 	bic.w	r2, r2, #17
 800f764:	b2d0      	uxtb	r0, r2
 800f766:	4945      	ldr	r1, [pc, #276]	; (800f87c <write_map+0x24c>)
 800f768:	0122      	lsls	r2, r4, #4
 800f76a:	440a      	add	r2, r1
 800f76c:	4413      	add	r3, r2
 800f76e:	4602      	mov	r2, r0
 800f770:	701a      	strb	r2, [r3, #0]
		}
	}
	//a南壁について
	if(mouse.y != 0){										//a現在最南端でないとき
 800f772:	4b41      	ldr	r3, [pc, #260]	; (800f878 <write_map+0x248>)
 800f774:	785b      	ldrb	r3, [r3, #1]
 800f776:	b2db      	uxtb	r3, r3
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d039      	beq.n	800f7f0 <write_map+0x1c0>
		if(m_temp & 0x22){									//a南壁がある場合
 800f77c:	79fb      	ldrb	r3, [r7, #7]
 800f77e:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800f782:	2b00      	cmp	r3, #0
 800f784:	d01a      	beq.n	800f7bc <write_map+0x18c>
			map[mouse.y - 1][mouse.x] |= 0x88;				//a南側の区画から見て北壁ありを書き込む
 800f786:	4b3c      	ldr	r3, [pc, #240]	; (800f878 <write_map+0x248>)
 800f788:	785b      	ldrb	r3, [r3, #1]
 800f78a:	b2d8      	uxtb	r0, r3
 800f78c:	4603      	mov	r3, r0
 800f78e:	3b01      	subs	r3, #1
 800f790:	4a39      	ldr	r2, [pc, #228]	; (800f878 <write_map+0x248>)
 800f792:	7812      	ldrb	r2, [r2, #0]
 800f794:	b2d1      	uxtb	r1, r2
 800f796:	460c      	mov	r4, r1
 800f798:	4a38      	ldr	r2, [pc, #224]	; (800f87c <write_map+0x24c>)
 800f79a:	011b      	lsls	r3, r3, #4
 800f79c:	4413      	add	r3, r2
 800f79e:	4423      	add	r3, r4
 800f7a0:	781a      	ldrb	r2, [r3, #0]
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	3b01      	subs	r3, #1
 800f7a6:	4608      	mov	r0, r1
 800f7a8:	f062 0277 	orn	r2, r2, #119	; 0x77
 800f7ac:	b2d1      	uxtb	r1, r2
 800f7ae:	4a33      	ldr	r2, [pc, #204]	; (800f87c <write_map+0x24c>)
 800f7b0:	011b      	lsls	r3, r3, #4
 800f7b2:	4413      	add	r3, r2
 800f7b4:	4403      	add	r3, r0
 800f7b6:	460a      	mov	r2, r1
 800f7b8:	701a      	strb	r2, [r3, #0]
 800f7ba:	e019      	b.n	800f7f0 <write_map+0x1c0>
		}else{												//a南壁がない場合
			map[mouse.y - 1][mouse.x] &= 0x77;				//a南側の区画から見て北壁なしを書き込む
 800f7bc:	4b2e      	ldr	r3, [pc, #184]	; (800f878 <write_map+0x248>)
 800f7be:	785b      	ldrb	r3, [r3, #1]
 800f7c0:	b2d8      	uxtb	r0, r3
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	3b01      	subs	r3, #1
 800f7c6:	4a2c      	ldr	r2, [pc, #176]	; (800f878 <write_map+0x248>)
 800f7c8:	7812      	ldrb	r2, [r2, #0]
 800f7ca:	b2d1      	uxtb	r1, r2
 800f7cc:	460c      	mov	r4, r1
 800f7ce:	4a2b      	ldr	r2, [pc, #172]	; (800f87c <write_map+0x24c>)
 800f7d0:	011b      	lsls	r3, r3, #4
 800f7d2:	4413      	add	r3, r2
 800f7d4:	4423      	add	r3, r4
 800f7d6:	781a      	ldrb	r2, [r3, #0]
 800f7d8:	4603      	mov	r3, r0
 800f7da:	3b01      	subs	r3, #1
 800f7dc:	4608      	mov	r0, r1
 800f7de:	f002 0277 	and.w	r2, r2, #119	; 0x77
 800f7e2:	b2d1      	uxtb	r1, r2
 800f7e4:	4a25      	ldr	r2, [pc, #148]	; (800f87c <write_map+0x24c>)
 800f7e6:	011b      	lsls	r3, r3, #4
 800f7e8:	4413      	add	r3, r2
 800f7ea:	4403      	add	r3, r0
 800f7ec:	460a      	mov	r2, r1
 800f7ee:	701a      	strb	r2, [r3, #0]
		}
	}
	//a西側について
	if(mouse.x != 0){										//a現在最西端でないとき
 800f7f0:	4b21      	ldr	r3, [pc, #132]	; (800f878 <write_map+0x248>)
 800f7f2:	781b      	ldrb	r3, [r3, #0]
 800f7f4:	b2db      	uxtb	r3, r3
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d037      	beq.n	800f86a <write_map+0x23a>
		if(m_temp & 0x11){									//a西壁がある場合
 800f7fa:	79fb      	ldrb	r3, [r7, #7]
 800f7fc:	f003 0311 	and.w	r3, r3, #17
 800f800:	2b00      	cmp	r3, #0
 800f802:	d019      	beq.n	800f838 <write_map+0x208>
			map[mouse.y][mouse.x - 1] |= 0x44;				//a西側の区画から見て東壁ありを書き込む
 800f804:	4b1c      	ldr	r3, [pc, #112]	; (800f878 <write_map+0x248>)
 800f806:	785b      	ldrb	r3, [r3, #1]
 800f808:	b2dc      	uxtb	r4, r3
 800f80a:	4622      	mov	r2, r4
 800f80c:	4b1a      	ldr	r3, [pc, #104]	; (800f878 <write_map+0x248>)
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	b2d8      	uxtb	r0, r3
 800f812:	4603      	mov	r3, r0
 800f814:	3b01      	subs	r3, #1
 800f816:	4919      	ldr	r1, [pc, #100]	; (800f87c <write_map+0x24c>)
 800f818:	0112      	lsls	r2, r2, #4
 800f81a:	440a      	add	r2, r1
 800f81c:	4413      	add	r3, r2
 800f81e:	781a      	ldrb	r2, [r3, #0]
 800f820:	4603      	mov	r3, r0
 800f822:	3b01      	subs	r3, #1
 800f824:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 800f828:	b2d0      	uxtb	r0, r2
 800f82a:	4914      	ldr	r1, [pc, #80]	; (800f87c <write_map+0x24c>)
 800f82c:	0122      	lsls	r2, r4, #4
 800f82e:	440a      	add	r2, r1
 800f830:	4413      	add	r3, r2
 800f832:	4602      	mov	r2, r0
 800f834:	701a      	strb	r2, [r3, #0]
		}else{												//a西壁がない場合
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
		}
	}
}
 800f836:	e018      	b.n	800f86a <write_map+0x23a>
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
 800f838:	4b0f      	ldr	r3, [pc, #60]	; (800f878 <write_map+0x248>)
 800f83a:	785b      	ldrb	r3, [r3, #1]
 800f83c:	b2dc      	uxtb	r4, r3
 800f83e:	4622      	mov	r2, r4
 800f840:	4b0d      	ldr	r3, [pc, #52]	; (800f878 <write_map+0x248>)
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	b2d8      	uxtb	r0, r3
 800f846:	4603      	mov	r3, r0
 800f848:	3b01      	subs	r3, #1
 800f84a:	490c      	ldr	r1, [pc, #48]	; (800f87c <write_map+0x24c>)
 800f84c:	0112      	lsls	r2, r2, #4
 800f84e:	440a      	add	r2, r1
 800f850:	4413      	add	r3, r2
 800f852:	781a      	ldrb	r2, [r3, #0]
 800f854:	4603      	mov	r3, r0
 800f856:	3b01      	subs	r3, #1
 800f858:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 800f85c:	b2d0      	uxtb	r0, r2
 800f85e:	4907      	ldr	r1, [pc, #28]	; (800f87c <write_map+0x24c>)
 800f860:	0122      	lsls	r2, r4, #4
 800f862:	440a      	add	r2, r1
 800f864:	4413      	add	r3, r2
 800f866:	4602      	mov	r2, r0
 800f868:	701a      	strb	r2, [r3, #0]
}
 800f86a:	bf00      	nop
 800f86c:	3708      	adds	r7, #8
 800f86e:	46bd      	mov	sp, r7
 800f870:	bc90      	pop	{r4, r7}
 800f872:	4770      	bx	lr
 800f874:	200002c8 	.word	0x200002c8
 800f878:	20000c0c 	.word	0x20000c0c
 800f87c:	200001ac 	.word	0x200001ac

0800f880 <turn_dir>:
//turn_dir
//aマウスの方向を変更する
//a引数1：t_pat …… 回転方向(search.hでマクロ定義)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat, uint8_t t_mode){
 800f880:	b480      	push	{r7}
 800f882:	b083      	sub	sp, #12
 800f884:	af00      	add	r7, sp, #0
 800f886:	4603      	mov	r3, r0
 800f888:	460a      	mov	r2, r1
 800f88a:	71fb      	strb	r3, [r7, #7]
 800f88c:	4613      	mov	r3, r2
 800f88e:	71bb      	strb	r3, [r7, #6]

	//====a方向を変更====
	if(t_mode < 2){												//4方位モード
 800f890:	79bb      	ldrb	r3, [r7, #6]
 800f892:	2b01      	cmp	r3, #1
 800f894:	d837      	bhi.n	800f906 <turn_dir+0x86>
		mouse.dir = (mouse.dir + t_pat) & 0x03;					//a指定された分mouse.dirを回転させる
 800f896:	4b5a      	ldr	r3, [pc, #360]	; (800fa00 <turn_dir+0x180>)
 800f898:	789b      	ldrb	r3, [r3, #2]
 800f89a:	b2da      	uxtb	r2, r3
 800f89c:	79fb      	ldrb	r3, [r7, #7]
 800f89e:	4413      	add	r3, r2
 800f8a0:	b2db      	uxtb	r3, r3
 800f8a2:	f003 0303 	and.w	r3, r3, #3
 800f8a6:	b2da      	uxtb	r2, r3
 800f8a8:	4b55      	ldr	r3, [pc, #340]	; (800fa00 <turn_dir+0x180>)
 800f8aa:	709a      	strb	r2, [r3, #2]
		if(t_mode == 1){
 800f8ac:	79bb      	ldrb	r3, [r7, #6]
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	f040 809f 	bne.w	800f9f2 <turn_dir+0x172>
			if(t_pat == 0x01) target_degree_z -= 90.5;			//a目標角度+右90度
 800f8b4:	79fb      	ldrb	r3, [r7, #7]
 800f8b6:	2b01      	cmp	r3, #1
 800f8b8:	d109      	bne.n	800f8ce <turn_dir+0x4e>
 800f8ba:	4b52      	ldr	r3, [pc, #328]	; (800fa04 <turn_dir+0x184>)
 800f8bc:	edd3 7a00 	vldr	s15, [r3]
 800f8c0:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800fa08 <turn_dir+0x188>
 800f8c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8c8:	4b4e      	ldr	r3, [pc, #312]	; (800fa04 <turn_dir+0x184>)
 800f8ca:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 90.5;			//a目標角度+左90度
 800f8ce:	79fb      	ldrb	r3, [r7, #7]
 800f8d0:	2bff      	cmp	r3, #255	; 0xff
 800f8d2:	d109      	bne.n	800f8e8 <turn_dir+0x68>
 800f8d4:	4b4b      	ldr	r3, [pc, #300]	; (800fa04 <turn_dir+0x184>)
 800f8d6:	edd3 7a00 	vldr	s15, [r3]
 800f8da:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800fa08 <turn_dir+0x188>
 800f8de:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f8e2:	4b48      	ldr	r3, [pc, #288]	; (800fa04 <turn_dir+0x184>)
 800f8e4:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 181;			//a目標角度+右180度
 800f8e8:	79fb      	ldrb	r3, [r7, #7]
 800f8ea:	2b02      	cmp	r3, #2
 800f8ec:	f040 8081 	bne.w	800f9f2 <turn_dir+0x172>
 800f8f0:	4b44      	ldr	r3, [pc, #272]	; (800fa04 <turn_dir+0x184>)
 800f8f2:	edd3 7a00 	vldr	s15, [r3]
 800f8f6:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800fa0c <turn_dir+0x18c>
 800f8fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8fe:	4b41      	ldr	r3, [pc, #260]	; (800fa04 <turn_dir+0x184>)
 800f900:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
		}
	}
}
 800f904:	e075      	b.n	800f9f2 <turn_dir+0x172>
		mouse.dir = (mouse.dir + t_pat) & 0x07;					//a指定された分mouse.dirを回転させる
 800f906:	4b3e      	ldr	r3, [pc, #248]	; (800fa00 <turn_dir+0x180>)
 800f908:	789b      	ldrb	r3, [r3, #2]
 800f90a:	b2da      	uxtb	r2, r3
 800f90c:	79fb      	ldrb	r3, [r7, #7]
 800f90e:	4413      	add	r3, r2
 800f910:	b2db      	uxtb	r3, r3
 800f912:	f003 0307 	and.w	r3, r3, #7
 800f916:	b2da      	uxtb	r2, r3
 800f918:	4b39      	ldr	r3, [pc, #228]	; (800fa00 <turn_dir+0x180>)
 800f91a:	709a      	strb	r2, [r3, #2]
		if(t_mode == 3){
 800f91c:	79bb      	ldrb	r3, [r7, #6]
 800f91e:	2b03      	cmp	r3, #3
 800f920:	d167      	bne.n	800f9f2 <turn_dir+0x172>
			if(t_pat == 0x01) target_degree_z -= 45.25;			//a目標角度+右90度
 800f922:	79fb      	ldrb	r3, [r7, #7]
 800f924:	2b01      	cmp	r3, #1
 800f926:	d109      	bne.n	800f93c <turn_dir+0xbc>
 800f928:	4b36      	ldr	r3, [pc, #216]	; (800fa04 <turn_dir+0x184>)
 800f92a:	edd3 7a00 	vldr	s15, [r3]
 800f92e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800fa10 <turn_dir+0x190>
 800f932:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f936:	4b33      	ldr	r3, [pc, #204]	; (800fa04 <turn_dir+0x184>)
 800f938:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 90.5;			//a目標角度+左90度
 800f93c:	79fb      	ldrb	r3, [r7, #7]
 800f93e:	2b02      	cmp	r3, #2
 800f940:	d109      	bne.n	800f956 <turn_dir+0xd6>
 800f942:	4b30      	ldr	r3, [pc, #192]	; (800fa04 <turn_dir+0x184>)
 800f944:	edd3 7a00 	vldr	s15, [r3]
 800f948:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800fa08 <turn_dir+0x188>
 800f94c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f950:	4b2c      	ldr	r3, [pc, #176]	; (800fa04 <turn_dir+0x184>)
 800f952:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x03) target_degree_z -= 135.75;		//a目標角度+右180度
 800f956:	79fb      	ldrb	r3, [r7, #7]
 800f958:	2b03      	cmp	r3, #3
 800f95a:	d109      	bne.n	800f970 <turn_dir+0xf0>
 800f95c:	4b29      	ldr	r3, [pc, #164]	; (800fa04 <turn_dir+0x184>)
 800f95e:	edd3 7a00 	vldr	s15, [r3]
 800f962:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800fa14 <turn_dir+0x194>
 800f966:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f96a:	4b26      	ldr	r3, [pc, #152]	; (800fa04 <turn_dir+0x184>)
 800f96c:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x04) target_degree_z -= 181;			//a目標角度+右180度
 800f970:	79fb      	ldrb	r3, [r7, #7]
 800f972:	2b04      	cmp	r3, #4
 800f974:	d109      	bne.n	800f98a <turn_dir+0x10a>
 800f976:	4b23      	ldr	r3, [pc, #140]	; (800fa04 <turn_dir+0x184>)
 800f978:	edd3 7a00 	vldr	s15, [r3]
 800f97c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800fa0c <turn_dir+0x18c>
 800f980:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f984:	4b1f      	ldr	r3, [pc, #124]	; (800fa04 <turn_dir+0x184>)
 800f986:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 45.25;			//a目標角度+右90度
 800f98a:	79fb      	ldrb	r3, [r7, #7]
 800f98c:	2bff      	cmp	r3, #255	; 0xff
 800f98e:	d109      	bne.n	800f9a4 <turn_dir+0x124>
 800f990:	4b1c      	ldr	r3, [pc, #112]	; (800fa04 <turn_dir+0x184>)
 800f992:	edd3 7a00 	vldr	s15, [r3]
 800f996:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800fa10 <turn_dir+0x190>
 800f99a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f99e:	4b19      	ldr	r3, [pc, #100]	; (800fa04 <turn_dir+0x184>)
 800f9a0:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
 800f9a4:	79fb      	ldrb	r3, [r7, #7]
 800f9a6:	2bfe      	cmp	r3, #254	; 0xfe
 800f9a8:	d109      	bne.n	800f9be <turn_dir+0x13e>
 800f9aa:	4b16      	ldr	r3, [pc, #88]	; (800fa04 <turn_dir+0x184>)
 800f9ac:	edd3 7a00 	vldr	s15, [r3]
 800f9b0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800fa08 <turn_dir+0x188>
 800f9b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f9b8:	4b12      	ldr	r3, [pc, #72]	; (800fa04 <turn_dir+0x184>)
 800f9ba:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
 800f9be:	79fb      	ldrb	r3, [r7, #7]
 800f9c0:	2bfd      	cmp	r3, #253	; 0xfd
 800f9c2:	d109      	bne.n	800f9d8 <turn_dir+0x158>
 800f9c4:	4b0f      	ldr	r3, [pc, #60]	; (800fa04 <turn_dir+0x184>)
 800f9c6:	edd3 7a00 	vldr	s15, [r3]
 800f9ca:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800fa14 <turn_dir+0x194>
 800f9ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f9d2:	4b0c      	ldr	r3, [pc, #48]	; (800fa04 <turn_dir+0x184>)
 800f9d4:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
 800f9d8:	79fb      	ldrb	r3, [r7, #7]
 800f9da:	2bfc      	cmp	r3, #252	; 0xfc
 800f9dc:	d109      	bne.n	800f9f2 <turn_dir+0x172>
 800f9de:	4b09      	ldr	r3, [pc, #36]	; (800fa04 <turn_dir+0x184>)
 800f9e0:	edd3 7a00 	vldr	s15, [r3]
 800f9e4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800fa0c <turn_dir+0x18c>
 800f9e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f9ec:	4b05      	ldr	r3, [pc, #20]	; (800fa04 <turn_dir+0x184>)
 800f9ee:	edc3 7a00 	vstr	s15, [r3]
}
 800f9f2:	bf00      	nop
 800f9f4:	370c      	adds	r7, #12
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fc:	4770      	bx	lr
 800f9fe:	bf00      	nop
 800fa00:	20000c0c 	.word	0x20000c0c
 800fa04:	20000bf8 	.word	0x20000bf8
 800fa08:	42b50000 	.word	0x42b50000
 800fa0c:	43350000 	.word	0x43350000
 800fa10:	42350000 	.word	0x42350000
 800fa14:	4307c000 	.word	0x4307c000

0800fa18 <make_smap>:
//make_smap
//a歩数マップを作成する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 800fa18:	b490      	push	{r4, r7}
 800fa1a:	b08e      	sub	sp, #56	; 0x38
 800fa1c:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数
	uint8_t m_temp_sample[16];

	//====a歩数マップのクリア====
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800fa1e:	2300      	movs	r3, #0
 800fa20:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800fa24:	e01c      	b.n	800fa60 <make_smap+0x48>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800fa26:	2300      	movs	r3, #0
 800fa28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fa2c:	e00f      	b.n	800fa4e <make_smap+0x36>
			smap[y][x] = 0x03e7;							//a未記入部分は歩数最大とする
 800fa2e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fa32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa36:	49bc      	ldr	r1, [pc, #752]	; (800fd28 <make_smap+0x310>)
 800fa38:	0112      	lsls	r2, r2, #4
 800fa3a:	4413      	add	r3, r2
 800fa3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800fa40:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800fa44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa48:	3301      	adds	r3, #1
 800fa4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fa4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa52:	2b0f      	cmp	r3, #15
 800fa54:	d9eb      	bls.n	800fa2e <make_smap+0x16>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800fa56:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800fa60:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fa64:	2b0f      	cmp	r3, #15
 800fa66:	d9de      	bls.n	800fa26 <make_smap+0xe>
		}
	}

	//====aゴール座標を0にする====
	m_step = 0;												//a歩数カウンタを0にする
 800fa68:	4bb0      	ldr	r3, [pc, #704]	; (800fd2c <make_smap+0x314>)
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	801a      	strh	r2, [r3, #0]

	for(int j=0; j<goal_mode; j++){
 800fa6e:	2300      	movs	r3, #0
 800fa70:	633b      	str	r3, [r7, #48]	; 0x30
 800fa72:	e01e      	b.n	800fab2 <make_smap+0x9a>
		for(int k=0; k<goal_mode; k++){
 800fa74:	2300      	movs	r3, #0
 800fa76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa78:	e012      	b.n	800faa0 <make_smap+0x88>
		smap[goal_y+j][goal_x+k] = 0;
 800fa7a:	4bad      	ldr	r3, [pc, #692]	; (800fd30 <make_smap+0x318>)
 800fa7c:	781b      	ldrb	r3, [r3, #0]
 800fa7e:	461a      	mov	r2, r3
 800fa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa82:	441a      	add	r2, r3
 800fa84:	4bab      	ldr	r3, [pc, #684]	; (800fd34 <make_smap+0x31c>)
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	4619      	mov	r1, r3
 800fa8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8c:	440b      	add	r3, r1
 800fa8e:	49a6      	ldr	r1, [pc, #664]	; (800fd28 <make_smap+0x310>)
 800fa90:	0112      	lsls	r2, r2, #4
 800fa92:	4413      	add	r3, r2
 800fa94:	2200      	movs	r2, #0
 800fa96:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int k=0; k<goal_mode; k++){
 800fa9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa9c:	3301      	adds	r3, #1
 800fa9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800faa0:	4ba5      	ldr	r3, [pc, #660]	; (800fd38 <make_smap+0x320>)
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	461a      	mov	r2, r3
 800faa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa8:	4293      	cmp	r3, r2
 800faaa:	dbe6      	blt.n	800fa7a <make_smap+0x62>
	for(int j=0; j<goal_mode; j++){
 800faac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faae:	3301      	adds	r3, #1
 800fab0:	633b      	str	r3, [r7, #48]	; 0x30
 800fab2:	4ba1      	ldr	r3, [pc, #644]	; (800fd38 <make_smap+0x320>)
 800fab4:	781b      	ldrb	r3, [r3, #0]
 800fab6:	461a      	mov	r2, r3
 800fab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faba:	4293      	cmp	r3, r2
 800fabc:	dbda      	blt.n	800fa74 <make_smap+0x5c>
	}

//	smap[goal_y][goal_x] = 0;

	//====a歩数カウンタの重みづけ====
	int straight = 3;
 800fabe:	2303      	movs	r3, #3
 800fac0:	617b      	str	r3, [r7, #20]
	int turn = 5;
 800fac2:	2305      	movs	r3, #5
 800fac4:	613b      	str	r3, [r7, #16]

	//====a自分の座標にたどり着くまでループ====
	do{
		//----aマップ全域を捜索----
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800fac6:	2300      	movs	r3, #0
 800fac8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800facc:	e333      	b.n	8010136 <make_smap+0x71e>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800face:	2300      	movs	r3, #0
 800fad0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fad4:	e325      	b.n	8010122 <make_smap+0x70a>
				//----a現在最大の歩数を発見したとき----
				if(smap[y][x] == m_step){					//a歩数カウンタm_stepの値が現在最大の歩数
 800fad6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fada:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fade:	4992      	ldr	r1, [pc, #584]	; (800fd28 <make_smap+0x310>)
 800fae0:	0112      	lsls	r2, r2, #4
 800fae2:	4413      	add	r3, r2
 800fae4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800fae8:	4b90      	ldr	r3, [pc, #576]	; (800fd2c <make_smap+0x314>)
 800faea:	881b      	ldrh	r3, [r3, #0]
 800faec:	429a      	cmp	r2, r3
 800faee:	f040 8313 	bne.w	8010118 <make_smap+0x700>
					uint8_t m_temp = map[y][x];				//map配列からマップデータを取り出す
 800faf2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800faf6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fafa:	4990      	ldr	r1, [pc, #576]	; (800fd3c <make_smap+0x324>)
 800fafc:	0112      	lsls	r2, r2, #4
 800fafe:	440a      	add	r2, r1
 800fb00:	4413      	add	r3, r2
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					if(MF.FLAG.SCND){						//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800fb08:	4b8d      	ldr	r3, [pc, #564]	; (800fd40 <make_smap+0x328>)
 800fb0a:	881b      	ldrh	r3, [r3, #0]
 800fb0c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fb10:	b2db      	uxtb	r3, r3
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d004      	beq.n	800fb20 <make_smap+0x108>
						m_temp >>= 4;						//a上位4bitを使うので4bit分右にシフトさせる
 800fb16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fb1a:	091b      	lsrs	r3, r3, #4
 800fb1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					}
					//----a北壁についての処理----
					if(!(m_temp & 0x08) && y != 15){		//a北壁がなく現在最北端でないとき
 800fb20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fb24:	f003 0308 	and.w	r3, r3, #8
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	f040 80b4 	bne.w	800fc96 <make_smap+0x27e>
 800fb2e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fb32:	2b0f      	cmp	r3, #15
 800fb34:	f000 80af 	beq.w	800fc96 <make_smap+0x27e>
						if(smap[y+1][x] >= (smap[y][x]+turn)){		//a北側が記入後より大きいなら
 800fb38:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fb3c:	1c5a      	adds	r2, r3, #1
 800fb3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb42:	4979      	ldr	r1, [pc, #484]	; (800fd28 <make_smap+0x310>)
 800fb44:	0112      	lsls	r2, r2, #4
 800fb46:	4413      	add	r3, r2
 800fb48:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fb52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb56:	4974      	ldr	r1, [pc, #464]	; (800fd28 <make_smap+0x310>)
 800fb58:	0112      	lsls	r2, r2, #4
 800fb5a:	4413      	add	r3, r2
 800fb5c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fb60:	461a      	mov	r2, r3
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	4413      	add	r3, r2
 800fb66:	4298      	cmp	r0, r3
 800fb68:	f2c0 8095 	blt.w	800fc96 <make_smap+0x27e>
							smap[y+1][x] = smap[y][x] + turn;		//a次の歩数を書き込む
 800fb6c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fb70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb74:	496c      	ldr	r1, [pc, #432]	; (800fd28 <make_smap+0x310>)
 800fb76:	0112      	lsls	r2, r2, #4
 800fb78:	4413      	add	r3, r2
 800fb7a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	b299      	uxth	r1, r3
 800fb82:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fb86:	1c5a      	adds	r2, r3, #1
 800fb88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb8c:	4401      	add	r1, r0
 800fb8e:	b288      	uxth	r0, r1
 800fb90:	4965      	ldr	r1, [pc, #404]	; (800fd28 <make_smap+0x310>)
 800fb92:	0112      	lsls	r2, r2, #4
 800fb94:	4413      	add	r3, r2
 800fb96:	4602      	mov	r2, r0
 800fb98:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800fb9c:	4b68      	ldr	r3, [pc, #416]	; (800fd40 <make_smap+0x328>)
 800fb9e:	881b      	ldrh	r3, [r3, #0]
 800fba0:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800fba4:	b2db      	uxtb	r3, r3
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d075      	beq.n	800fc96 <make_smap+0x27e>
								//----a直線優先処理----
								for(int k=1; k<16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800fbaa:	2301      	movs	r3, #1
 800fbac:	627b      	str	r3, [r7, #36]	; 0x24
 800fbae:	e06b      	b.n	800fc88 <make_smap+0x270>
									m_temp_sample[k] = map[y+k][x];				//map配列からマップデータを取り出す
 800fbb0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb6:	441a      	add	r2, r3
 800fbb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbbc:	495f      	ldr	r1, [pc, #380]	; (800fd3c <make_smap+0x324>)
 800fbbe:	0112      	lsls	r2, r2, #4
 800fbc0:	440a      	add	r2, r1
 800fbc2:	4413      	add	r3, r2
 800fbc4:	7819      	ldrb	r1, [r3, #0]
 800fbc6:	463a      	mov	r2, r7
 800fbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbca:	4413      	add	r3, r2
 800fbcc:	460a      	mov	r2, r1
 800fbce:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800fbd0:	4b5b      	ldr	r3, [pc, #364]	; (800fd40 <make_smap+0x328>)
 800fbd2:	881b      	ldrh	r3, [r3, #0]
 800fbd4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fbd8:	b2db      	uxtb	r3, r3
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d00a      	beq.n	800fbf4 <make_smap+0x1dc>
 800fbde:	463a      	mov	r2, r7
 800fbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe2:	4413      	add	r3, r2
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	091b      	lsrs	r3, r3, #4
 800fbe8:	b2d9      	uxtb	r1, r3
 800fbea:	463a      	mov	r2, r7
 800fbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbee:	4413      	add	r3, r2
 800fbf0:	460a      	mov	r2, r1
 800fbf2:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x08) && (y+k) != 15) {		//a北壁がなく現在最北端でないとき
 800fbf4:	463a      	mov	r2, r7
 800fbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf8:	4413      	add	r3, r2
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	f003 0308 	and.w	r3, r3, #8
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d148      	bne.n	800fc96 <make_smap+0x27e>
 800fc04:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc0a:	4413      	add	r3, r2
 800fc0c:	2b0f      	cmp	r3, #15
 800fc0e:	d042      	beq.n	800fc96 <make_smap+0x27e>
										if(smap[y+k+1][x] >= (smap[y+k][x]+straight)){		//a北側が記入後より大きいなら
 800fc10:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc16:	4413      	add	r3, r2
 800fc18:	1c5a      	adds	r2, r3, #1
 800fc1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc1e:	4942      	ldr	r1, [pc, #264]	; (800fd28 <make_smap+0x310>)
 800fc20:	0112      	lsls	r2, r2, #4
 800fc22:	4413      	add	r3, r2
 800fc24:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc30:	441a      	add	r2, r3
 800fc32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc36:	493c      	ldr	r1, [pc, #240]	; (800fd28 <make_smap+0x310>)
 800fc38:	0112      	lsls	r2, r2, #4
 800fc3a:	4413      	add	r3, r2
 800fc3c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fc40:	461a      	mov	r2, r3
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	4413      	add	r3, r2
 800fc46:	4298      	cmp	r0, r3
 800fc48:	db1b      	blt.n	800fc82 <make_smap+0x26a>
											smap[y+k+1][x] = smap[y+k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800fc4a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc50:	441a      	add	r2, r3
 800fc52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc56:	4934      	ldr	r1, [pc, #208]	; (800fd28 <make_smap+0x310>)
 800fc58:	0112      	lsls	r2, r2, #4
 800fc5a:	4413      	add	r3, r2
 800fc5c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	b299      	uxth	r1, r3
 800fc64:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6a:	4413      	add	r3, r2
 800fc6c:	1c5a      	adds	r2, r3, #1
 800fc6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc72:	4401      	add	r1, r0
 800fc74:	b288      	uxth	r0, r1
 800fc76:	492c      	ldr	r1, [pc, #176]	; (800fd28 <make_smap+0x310>)
 800fc78:	0112      	lsls	r2, r2, #4
 800fc7a:	4413      	add	r3, r2
 800fc7c:	4602      	mov	r2, r0
 800fc7e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800fc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc84:	3301      	adds	r3, #1
 800fc86:	627b      	str	r3, [r7, #36]	; 0x24
 800fc88:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fc8c:	f1c3 0310 	rsb	r3, r3, #16
 800fc90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc92:	429a      	cmp	r2, r3
 800fc94:	db8c      	blt.n	800fbb0 <make_smap+0x198>
								}
							}
						}
					}
					//----a東壁についての処理----
					if(!(m_temp & 0x04) && x != 15){		//a東壁がなく現在最東端でないとき
 800fc96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fc9a:	f003 0304 	and.w	r3, r3, #4
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	f040 80c3 	bne.w	800fe2a <make_smap+0x412>
 800fca4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fca8:	2b0f      	cmp	r3, #15
 800fcaa:	f000 80be 	beq.w	800fe2a <make_smap+0x412>
						if(smap[y][x+1] >= (smap[y][x]+turn)){	//a東側が記入後より大きいなら
 800fcae:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fcb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	491b      	ldr	r1, [pc, #108]	; (800fd28 <make_smap+0x310>)
 800fcba:	0112      	lsls	r2, r2, #4
 800fcbc:	4413      	add	r3, r2
 800fcbe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fcc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fccc:	4916      	ldr	r1, [pc, #88]	; (800fd28 <make_smap+0x310>)
 800fcce:	0112      	lsls	r2, r2, #4
 800fcd0:	4413      	add	r3, r2
 800fcd2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	4413      	add	r3, r2
 800fcdc:	4298      	cmp	r0, r3
 800fcde:	f2c0 80a4 	blt.w	800fe2a <make_smap+0x412>
							smap[y][x+1] = smap[y][x] + turn;	//a次の歩数を書き込む
 800fce2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fce6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fcea:	490f      	ldr	r1, [pc, #60]	; (800fd28 <make_smap+0x310>)
 800fcec:	0112      	lsls	r2, r2, #4
 800fcee:	4413      	add	r3, r2
 800fcf0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fcf4:	693b      	ldr	r3, [r7, #16]
 800fcf6:	b299      	uxth	r1, r3
 800fcf8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fcfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd00:	3301      	adds	r3, #1
 800fd02:	4401      	add	r1, r0
 800fd04:	b288      	uxth	r0, r1
 800fd06:	4908      	ldr	r1, [pc, #32]	; (800fd28 <make_smap+0x310>)
 800fd08:	0112      	lsls	r2, r2, #4
 800fd0a:	4413      	add	r3, r2
 800fd0c:	4602      	mov	r2, r0
 800fd0e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800fd12:	4b0b      	ldr	r3, [pc, #44]	; (800fd40 <make_smap+0x328>)
 800fd14:	881b      	ldrh	r3, [r3, #0]
 800fd16:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800fd1a:	b2db      	uxtb	r3, r3
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	f000 8084 	beq.w	800fe2a <make_smap+0x412>
								//----a直線優先処理----
								for(int k=1; k<16-x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800fd22:	2301      	movs	r3, #1
 800fd24:	623b      	str	r3, [r7, #32]
 800fd26:	e079      	b.n	800fe1c <make_smap+0x404>
 800fd28:	20000d60 	.word	0x20000d60
 800fd2c:	2000034e 	.word	0x2000034e
 800fd30:	20000b4c 	.word	0x20000b4c
 800fd34:	20000bb0 	.word	0x20000bb0
 800fd38:	20000bb1 	.word	0x20000bb1
 800fd3c:	200001ac 	.word	0x200001ac
 800fd40:	20000f68 	.word	0x20000f68
									m_temp_sample[k] = map[y][x+k];				//map配列からマップデータを取り出す
 800fd44:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fd48:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800fd4c:	6a3b      	ldr	r3, [r7, #32]
 800fd4e:	440b      	add	r3, r1
 800fd50:	49b6      	ldr	r1, [pc, #728]	; (801002c <make_smap+0x614>)
 800fd52:	0112      	lsls	r2, r2, #4
 800fd54:	440a      	add	r2, r1
 800fd56:	4413      	add	r3, r2
 800fd58:	7819      	ldrb	r1, [r3, #0]
 800fd5a:	463a      	mov	r2, r7
 800fd5c:	6a3b      	ldr	r3, [r7, #32]
 800fd5e:	4413      	add	r3, r2
 800fd60:	460a      	mov	r2, r1
 800fd62:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800fd64:	4bb2      	ldr	r3, [pc, #712]	; (8010030 <make_smap+0x618>)
 800fd66:	881b      	ldrh	r3, [r3, #0]
 800fd68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fd6c:	b2db      	uxtb	r3, r3
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d00a      	beq.n	800fd88 <make_smap+0x370>
 800fd72:	463a      	mov	r2, r7
 800fd74:	6a3b      	ldr	r3, [r7, #32]
 800fd76:	4413      	add	r3, r2
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	091b      	lsrs	r3, r3, #4
 800fd7c:	b2d9      	uxtb	r1, r3
 800fd7e:	463a      	mov	r2, r7
 800fd80:	6a3b      	ldr	r3, [r7, #32]
 800fd82:	4413      	add	r3, r2
 800fd84:	460a      	mov	r2, r1
 800fd86:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x04) && (x+k) != 15) {		//a東壁がなく現在最東端でないとき
 800fd88:	463a      	mov	r2, r7
 800fd8a:	6a3b      	ldr	r3, [r7, #32]
 800fd8c:	4413      	add	r3, r2
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	f003 0304 	and.w	r3, r3, #4
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d148      	bne.n	800fe2a <make_smap+0x412>
 800fd98:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fd9c:	6a3b      	ldr	r3, [r7, #32]
 800fd9e:	4413      	add	r3, r2
 800fda0:	2b0f      	cmp	r3, #15
 800fda2:	d042      	beq.n	800fe2a <make_smap+0x412>
										if(smap[y][x+k+1] >= (smap[y][x+k]+straight)){		//a東側が記入後より大きいなら
 800fda4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fda8:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800fdac:	6a3b      	ldr	r3, [r7, #32]
 800fdae:	440b      	add	r3, r1
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	49a0      	ldr	r1, [pc, #640]	; (8010034 <make_smap+0x61c>)
 800fdb4:	0112      	lsls	r2, r2, #4
 800fdb6:	4413      	add	r3, r2
 800fdb8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fdc2:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800fdc6:	6a3b      	ldr	r3, [r7, #32]
 800fdc8:	440b      	add	r3, r1
 800fdca:	499a      	ldr	r1, [pc, #616]	; (8010034 <make_smap+0x61c>)
 800fdcc:	0112      	lsls	r2, r2, #4
 800fdce:	4413      	add	r3, r2
 800fdd0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	4413      	add	r3, r2
 800fdda:	4298      	cmp	r0, r3
 800fddc:	db1b      	blt.n	800fe16 <make_smap+0x3fe>
											smap[y][x+k+1] = smap[y][x+k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800fdde:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fde2:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800fde6:	6a3b      	ldr	r3, [r7, #32]
 800fde8:	440b      	add	r3, r1
 800fdea:	4992      	ldr	r1, [pc, #584]	; (8010034 <make_smap+0x61c>)
 800fdec:	0112      	lsls	r2, r2, #4
 800fdee:	4413      	add	r3, r2
 800fdf0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	b299      	uxth	r1, r3
 800fdf8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fdfc:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800fe00:	6a3b      	ldr	r3, [r7, #32]
 800fe02:	4423      	add	r3, r4
 800fe04:	3301      	adds	r3, #1
 800fe06:	4401      	add	r1, r0
 800fe08:	b288      	uxth	r0, r1
 800fe0a:	498a      	ldr	r1, [pc, #552]	; (8010034 <make_smap+0x61c>)
 800fe0c:	0112      	lsls	r2, r2, #4
 800fe0e:	4413      	add	r3, r2
 800fe10:	4602      	mov	r2, r0
 800fe12:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<16-x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800fe16:	6a3b      	ldr	r3, [r7, #32]
 800fe18:	3301      	adds	r3, #1
 800fe1a:	623b      	str	r3, [r7, #32]
 800fe1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe20:	f1c3 0310 	rsb	r3, r3, #16
 800fe24:	6a3a      	ldr	r2, [r7, #32]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	db8c      	blt.n	800fd44 <make_smap+0x32c>
								}
							}
						}
					}
					//----a南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//a南壁がなく現在最南端でないとき
 800fe2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fe2e:	f003 0302 	and.w	r3, r3, #2
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	f040 80b1 	bne.w	800ff9a <make_smap+0x582>
 800fe38:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	f000 80ac 	beq.w	800ff9a <make_smap+0x582>
						if(smap[y-1][x] >= (smap[y][x]+turn)){	//a南側が記入後より大きいなら
 800fe42:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fe46:	1e5a      	subs	r2, r3, #1
 800fe48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe4c:	4979      	ldr	r1, [pc, #484]	; (8010034 <make_smap+0x61c>)
 800fe4e:	0112      	lsls	r2, r2, #4
 800fe50:	4413      	add	r3, r2
 800fe52:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fe56:	4618      	mov	r0, r3
 800fe58:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fe5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe60:	4974      	ldr	r1, [pc, #464]	; (8010034 <make_smap+0x61c>)
 800fe62:	0112      	lsls	r2, r2, #4
 800fe64:	4413      	add	r3, r2
 800fe66:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fe6a:	461a      	mov	r2, r3
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	4413      	add	r3, r2
 800fe70:	4298      	cmp	r0, r3
 800fe72:	f2c0 8092 	blt.w	800ff9a <make_smap+0x582>
							smap[y-1][x] = smap[y][x] + turn;	//a次の歩数を書き込む
 800fe76:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fe7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe7e:	496d      	ldr	r1, [pc, #436]	; (8010034 <make_smap+0x61c>)
 800fe80:	0112      	lsls	r2, r2, #4
 800fe82:	4413      	add	r3, r2
 800fe84:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	b299      	uxth	r1, r3
 800fe8c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fe90:	1e5a      	subs	r2, r3, #1
 800fe92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe96:	4401      	add	r1, r0
 800fe98:	b288      	uxth	r0, r1
 800fe9a:	4966      	ldr	r1, [pc, #408]	; (8010034 <make_smap+0x61c>)
 800fe9c:	0112      	lsls	r2, r2, #4
 800fe9e:	4413      	add	r3, r2
 800fea0:	4602      	mov	r2, r0
 800fea2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800fea6:	4b62      	ldr	r3, [pc, #392]	; (8010030 <make_smap+0x618>)
 800fea8:	881b      	ldrh	r3, [r3, #0]
 800feaa:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d072      	beq.n	800ff9a <make_smap+0x582>
								//----a直線優先処理----
								for(int k=1; k<y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800feb4:	2301      	movs	r3, #1
 800feb6:	61fb      	str	r3, [r7, #28]
 800feb8:	e06a      	b.n	800ff90 <make_smap+0x578>
									m_temp_sample[k] = map[y-k][x];				//map配列からマップデータを取り出す
 800feba:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800febe:	69fb      	ldr	r3, [r7, #28]
 800fec0:	1ad2      	subs	r2, r2, r3
 800fec2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fec6:	4959      	ldr	r1, [pc, #356]	; (801002c <make_smap+0x614>)
 800fec8:	0112      	lsls	r2, r2, #4
 800feca:	440a      	add	r2, r1
 800fecc:	4413      	add	r3, r2
 800fece:	7819      	ldrb	r1, [r3, #0]
 800fed0:	463a      	mov	r2, r7
 800fed2:	69fb      	ldr	r3, [r7, #28]
 800fed4:	4413      	add	r3, r2
 800fed6:	460a      	mov	r2, r1
 800fed8:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800feda:	4b55      	ldr	r3, [pc, #340]	; (8010030 <make_smap+0x618>)
 800fedc:	881b      	ldrh	r3, [r3, #0]
 800fede:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fee2:	b2db      	uxtb	r3, r3
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d00a      	beq.n	800fefe <make_smap+0x4e6>
 800fee8:	463a      	mov	r2, r7
 800feea:	69fb      	ldr	r3, [r7, #28]
 800feec:	4413      	add	r3, r2
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	091b      	lsrs	r3, r3, #4
 800fef2:	b2d9      	uxtb	r1, r3
 800fef4:	463a      	mov	r2, r7
 800fef6:	69fb      	ldr	r3, [r7, #28]
 800fef8:	4413      	add	r3, r2
 800fefa:	460a      	mov	r2, r1
 800fefc:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x02) && (y-k) != 0) {		//a南壁がなく現在最南端でないとき
 800fefe:	463a      	mov	r2, r7
 800ff00:	69fb      	ldr	r3, [r7, #28]
 800ff02:	4413      	add	r3, r2
 800ff04:	781b      	ldrb	r3, [r3, #0]
 800ff06:	f003 0302 	and.w	r3, r3, #2
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d145      	bne.n	800ff9a <make_smap+0x582>
 800ff0e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ff12:	69fa      	ldr	r2, [r7, #28]
 800ff14:	429a      	cmp	r2, r3
 800ff16:	d040      	beq.n	800ff9a <make_smap+0x582>
										if(smap[y-k-1][x] >= (smap[y-k][x]+straight)){		//a南側が記入後より大きいなら
 800ff18:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ff1c:	69fb      	ldr	r3, [r7, #28]
 800ff1e:	1ad3      	subs	r3, r2, r3
 800ff20:	1e5a      	subs	r2, r3, #1
 800ff22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff26:	4943      	ldr	r1, [pc, #268]	; (8010034 <make_smap+0x61c>)
 800ff28:	0112      	lsls	r2, r2, #4
 800ff2a:	4413      	add	r3, r2
 800ff2c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ff30:	4618      	mov	r0, r3
 800ff32:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ff36:	69fb      	ldr	r3, [r7, #28]
 800ff38:	1ad2      	subs	r2, r2, r3
 800ff3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff3e:	493d      	ldr	r1, [pc, #244]	; (8010034 <make_smap+0x61c>)
 800ff40:	0112      	lsls	r2, r2, #4
 800ff42:	4413      	add	r3, r2
 800ff44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ff48:	461a      	mov	r2, r3
 800ff4a:	697b      	ldr	r3, [r7, #20]
 800ff4c:	4413      	add	r3, r2
 800ff4e:	4298      	cmp	r0, r3
 800ff50:	db1b      	blt.n	800ff8a <make_smap+0x572>
											smap[y-k-1][x] = smap[y-k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800ff52:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ff56:	69fb      	ldr	r3, [r7, #28]
 800ff58:	1ad2      	subs	r2, r2, r3
 800ff5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff5e:	4935      	ldr	r1, [pc, #212]	; (8010034 <make_smap+0x61c>)
 800ff60:	0112      	lsls	r2, r2, #4
 800ff62:	4413      	add	r3, r2
 800ff64:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ff68:	697b      	ldr	r3, [r7, #20]
 800ff6a:	b299      	uxth	r1, r3
 800ff6c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	1ad3      	subs	r3, r2, r3
 800ff74:	1e5a      	subs	r2, r3, #1
 800ff76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff7a:	4401      	add	r1, r0
 800ff7c:	b288      	uxth	r0, r1
 800ff7e:	492d      	ldr	r1, [pc, #180]	; (8010034 <make_smap+0x61c>)
 800ff80:	0112      	lsls	r2, r2, #4
 800ff82:	4413      	add	r3, r2
 800ff84:	4602      	mov	r2, r0
 800ff86:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800ff8a:	69fb      	ldr	r3, [r7, #28]
 800ff8c:	3301      	adds	r3, #1
 800ff8e:	61fb      	str	r3, [r7, #28]
 800ff90:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ff94:	69fa      	ldr	r2, [r7, #28]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	db8f      	blt.n	800feba <make_smap+0x4a2>
								}
							}
						}
					}
					//----a西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//a西壁がなく現在最西端でないとき
 800ff9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ff9e:	f003 0301 	and.w	r3, r3, #1
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	f040 80b8 	bne.w	8010118 <make_smap+0x700>
 800ffa8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	f000 80b3 	beq.w	8010118 <make_smap+0x700>
						if(smap[y][x-1] >= (smap[y][x]+turn)){	//a西側が記入後より大きいなら
 800ffb2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ffb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ffba:	3b01      	subs	r3, #1
 800ffbc:	491d      	ldr	r1, [pc, #116]	; (8010034 <make_smap+0x61c>)
 800ffbe:	0112      	lsls	r2, r2, #4
 800ffc0:	4413      	add	r3, r2
 800ffc2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ffcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ffd0:	4918      	ldr	r1, [pc, #96]	; (8010034 <make_smap+0x61c>)
 800ffd2:	0112      	lsls	r2, r2, #4
 800ffd4:	4413      	add	r3, r2
 800ffd6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ffda:	461a      	mov	r2, r3
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	4413      	add	r3, r2
 800ffe0:	4298      	cmp	r0, r3
 800ffe2:	f2c0 8099 	blt.w	8010118 <make_smap+0x700>
							smap[y][x-1] = smap[y][x] + turn;	//a次の歩数を書き込む
 800ffe6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ffea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ffee:	4911      	ldr	r1, [pc, #68]	; (8010034 <make_smap+0x61c>)
 800fff0:	0112      	lsls	r2, r2, #4
 800fff2:	4413      	add	r3, r2
 800fff4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	b299      	uxth	r1, r3
 800fffc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010000:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010004:	3b01      	subs	r3, #1
 8010006:	4401      	add	r1, r0
 8010008:	b288      	uxth	r0, r1
 801000a:	490a      	ldr	r1, [pc, #40]	; (8010034 <make_smap+0x61c>)
 801000c:	0112      	lsls	r2, r2, #4
 801000e:	4413      	add	r3, r2
 8010010:	4602      	mov	r2, r0
 8010012:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 8010016:	4b06      	ldr	r3, [pc, #24]	; (8010030 <make_smap+0x618>)
 8010018:	881b      	ldrh	r3, [r3, #0]
 801001a:	f3c3 2380 	ubfx	r3, r3, #10, #1
 801001e:	b2db      	uxtb	r3, r3
 8010020:	2b00      	cmp	r3, #0
 8010022:	d079      	beq.n	8010118 <make_smap+0x700>
								//----a直線優先処理----
								for(int k=1; k<x; k++) {						//a現在座標から見て西のマスすべてにおいて
 8010024:	2301      	movs	r3, #1
 8010026:	61bb      	str	r3, [r7, #24]
 8010028:	e071      	b.n	801010e <make_smap+0x6f6>
 801002a:	bf00      	nop
 801002c:	200001ac 	.word	0x200001ac
 8010030:	20000f68 	.word	0x20000f68
 8010034:	20000d60 	.word	0x20000d60
									m_temp_sample[k] = map[y][x-k];				//map配列からマップデータを取り出す
 8010038:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801003c:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8010040:	69bb      	ldr	r3, [r7, #24]
 8010042:	1acb      	subs	r3, r1, r3
 8010044:	494d      	ldr	r1, [pc, #308]	; (801017c <make_smap+0x764>)
 8010046:	0112      	lsls	r2, r2, #4
 8010048:	440a      	add	r2, r1
 801004a:	4413      	add	r3, r2
 801004c:	7819      	ldrb	r1, [r3, #0]
 801004e:	463a      	mov	r2, r7
 8010050:	69bb      	ldr	r3, [r7, #24]
 8010052:	4413      	add	r3, r2
 8010054:	460a      	mov	r2, r1
 8010056:	701a      	strb	r2, [r3, #0]
									if(MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 8010058:	4b49      	ldr	r3, [pc, #292]	; (8010180 <make_smap+0x768>)
 801005a:	881b      	ldrh	r3, [r3, #0]
 801005c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010060:	b2db      	uxtb	r3, r3
 8010062:	2b00      	cmp	r3, #0
 8010064:	d00a      	beq.n	801007c <make_smap+0x664>
 8010066:	463a      	mov	r2, r7
 8010068:	69bb      	ldr	r3, [r7, #24]
 801006a:	4413      	add	r3, r2
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	091b      	lsrs	r3, r3, #4
 8010070:	b2d9      	uxtb	r1, r3
 8010072:	463a      	mov	r2, r7
 8010074:	69bb      	ldr	r3, [r7, #24]
 8010076:	4413      	add	r3, r2
 8010078:	460a      	mov	r2, r1
 801007a:	701a      	strb	r2, [r3, #0]
									if(!(m_temp_sample[k] & 0x01) && (x-k) != 0) {		//a西壁がなく現在最西端でないとき
 801007c:	463a      	mov	r2, r7
 801007e:	69bb      	ldr	r3, [r7, #24]
 8010080:	4413      	add	r3, r2
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	f003 0301 	and.w	r3, r3, #1
 8010088:	2b00      	cmp	r3, #0
 801008a:	d145      	bne.n	8010118 <make_smap+0x700>
 801008c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010090:	69ba      	ldr	r2, [r7, #24]
 8010092:	429a      	cmp	r2, r3
 8010094:	d040      	beq.n	8010118 <make_smap+0x700>
										if(smap[y][x-k-1] >= (smap[y][x-k]+straight)){		//a西側が記入後より大きいなら
 8010096:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801009a:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 801009e:	69bb      	ldr	r3, [r7, #24]
 80100a0:	1acb      	subs	r3, r1, r3
 80100a2:	3b01      	subs	r3, #1
 80100a4:	4937      	ldr	r1, [pc, #220]	; (8010184 <make_smap+0x76c>)
 80100a6:	0112      	lsls	r2, r2, #4
 80100a8:	4413      	add	r3, r2
 80100aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80100ae:	4618      	mov	r0, r3
 80100b0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80100b4:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80100b8:	69bb      	ldr	r3, [r7, #24]
 80100ba:	1acb      	subs	r3, r1, r3
 80100bc:	4931      	ldr	r1, [pc, #196]	; (8010184 <make_smap+0x76c>)
 80100be:	0112      	lsls	r2, r2, #4
 80100c0:	4413      	add	r3, r2
 80100c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80100c6:	461a      	mov	r2, r3
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	4413      	add	r3, r2
 80100cc:	4298      	cmp	r0, r3
 80100ce:	db1b      	blt.n	8010108 <make_smap+0x6f0>
											smap[y][x-k-1] = smap[y][x-k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 80100d0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80100d4:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80100d8:	69bb      	ldr	r3, [r7, #24]
 80100da:	1acb      	subs	r3, r1, r3
 80100dc:	4929      	ldr	r1, [pc, #164]	; (8010184 <make_smap+0x76c>)
 80100de:	0112      	lsls	r2, r2, #4
 80100e0:	4413      	add	r3, r2
 80100e2:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	b299      	uxth	r1, r3
 80100ea:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80100ee:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80100f2:	69bb      	ldr	r3, [r7, #24]
 80100f4:	1ae3      	subs	r3, r4, r3
 80100f6:	3b01      	subs	r3, #1
 80100f8:	4401      	add	r1, r0
 80100fa:	b288      	uxth	r0, r1
 80100fc:	4921      	ldr	r1, [pc, #132]	; (8010184 <make_smap+0x76c>)
 80100fe:	0112      	lsls	r2, r2, #4
 8010100:	4413      	add	r3, r2
 8010102:	4602      	mov	r2, r0
 8010104:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for(int k=1; k<x; k++) {						//a現在座標から見て西のマスすべてにおいて
 8010108:	69bb      	ldr	r3, [r7, #24]
 801010a:	3301      	adds	r3, #1
 801010c:	61bb      	str	r3, [r7, #24]
 801010e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010112:	69ba      	ldr	r2, [r7, #24]
 8010114:	429a      	cmp	r2, r3
 8010116:	db8f      	blt.n	8010038 <make_smap+0x620>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 8010118:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801011c:	3301      	adds	r3, #1
 801011e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010122:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010126:	2b0f      	cmp	r3, #15
 8010128:	f67f acd5 	bls.w	800fad6 <make_smap+0xbe>
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 801012c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010130:	3301      	adds	r3, #1
 8010132:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8010136:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801013a:	2b0f      	cmp	r3, #15
 801013c:	f67f acc7 	bls.w	800face <make_smap+0xb6>
					}
				}
			}
		}
		//====a歩数カウンタのインクリメント====
		m_step++;
 8010140:	4b11      	ldr	r3, [pc, #68]	; (8010188 <make_smap+0x770>)
 8010142:	881b      	ldrh	r3, [r3, #0]
 8010144:	3301      	adds	r3, #1
 8010146:	b29a      	uxth	r2, r3
 8010148:	4b0f      	ldr	r3, [pc, #60]	; (8010188 <make_smap+0x770>)
 801014a:	801a      	strh	r2, [r3, #0]
	}while(smap[mouse.y][mouse.x] == 0x03e7);					//a現在座標が未記入ではなくなるまで実行
 801014c:	4b0f      	ldr	r3, [pc, #60]	; (801018c <make_smap+0x774>)
 801014e:	785b      	ldrb	r3, [r3, #1]
 8010150:	b2db      	uxtb	r3, r3
 8010152:	4618      	mov	r0, r3
 8010154:	4b0d      	ldr	r3, [pc, #52]	; (801018c <make_smap+0x774>)
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	b2db      	uxtb	r3, r3
 801015a:	4619      	mov	r1, r3
 801015c:	4a09      	ldr	r2, [pc, #36]	; (8010184 <make_smap+0x76c>)
 801015e:	0103      	lsls	r3, r0, #4
 8010160:	440b      	add	r3, r1
 8010162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010166:	f240 32e7 	movw	r2, #999	; 0x3e7
 801016a:	4293      	cmp	r3, r2
 801016c:	f43f acab 	beq.w	800fac6 <make_smap+0xae>
}
 8010170:	bf00      	nop
 8010172:	3738      	adds	r7, #56	; 0x38
 8010174:	46bd      	mov	sp, r7
 8010176:	bc90      	pop	{r4, r7}
 8010178:	4770      	bx	lr
 801017a:	bf00      	nop
 801017c:	200001ac 	.word	0x200001ac
 8010180:	20000f68 	.word	0x20000f68
 8010184:	20000d60 	.word	0x20000d60
 8010188:	2000034e 	.word	0x2000034e
 801018c:	20000c0c 	.word	0x20000c0c

08010190 <make_route>:
//make_route
//a最短経路を導出する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 8010190:	b580      	push	{r7, lr}
 8010192:	b082      	sub	sp, #8
 8010194:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t x, y;												//X，Y座標
	uint8_t dir_temp =  mouse.dir;								//aマウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 8010196:	4ba2      	ldr	r3, [pc, #648]	; (8010420 <make_route+0x290>)
 8010198:	789b      	ldrb	r3, [r3, #2]
 801019a:	703b      	strb	r3, [r7, #0]

	//====a最短経路を初期化====
	uint16_t i;
	for(i = 0; i < 256; i++){
 801019c:	2300      	movs	r3, #0
 801019e:	80bb      	strh	r3, [r7, #4]
 80101a0:	e006      	b.n	80101b0 <make_route+0x20>
		route[i] = 0xff;										//routeを0xffで初期化
 80101a2:	88bb      	ldrh	r3, [r7, #4]
 80101a4:	4a9f      	ldr	r2, [pc, #636]	; (8010424 <make_route+0x294>)
 80101a6:	21ff      	movs	r1, #255	; 0xff
 80101a8:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 256; i++){
 80101aa:	88bb      	ldrh	r3, [r7, #4]
 80101ac:	3301      	adds	r3, #1
 80101ae:	80bb      	strh	r3, [r7, #4]
 80101b0:	88bb      	ldrh	r3, [r7, #4]
 80101b2:	2bff      	cmp	r3, #255	; 0xff
 80101b4:	d9f5      	bls.n	80101a2 <make_route+0x12>
	}

	//====a歩数カウンタをセット====
	uint16_t m_step = smap[mouse.y][mouse.x];					//a現在座標の歩数マップ値を取得
 80101b6:	4b9a      	ldr	r3, [pc, #616]	; (8010420 <make_route+0x290>)
 80101b8:	785b      	ldrb	r3, [r3, #1]
 80101ba:	b2db      	uxtb	r3, r3
 80101bc:	4618      	mov	r0, r3
 80101be:	4b98      	ldr	r3, [pc, #608]	; (8010420 <make_route+0x290>)
 80101c0:	781b      	ldrb	r3, [r3, #0]
 80101c2:	b2db      	uxtb	r3, r3
 80101c4:	4619      	mov	r1, r3
 80101c6:	4a98      	ldr	r2, [pc, #608]	; (8010428 <make_route+0x298>)
 80101c8:	0103      	lsls	r3, r0, #4
 80101ca:	440b      	add	r3, r1
 80101cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101d0:	807b      	strh	r3, [r7, #2]

	//====x, yに現在座標を書き込み====
	x = mouse.x;
 80101d2:	4b93      	ldr	r3, [pc, #588]	; (8010420 <make_route+0x290>)
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	71fb      	strb	r3, [r7, #7]
	y = mouse.y;
 80101d8:	4b91      	ldr	r3, [pc, #580]	; (8010420 <make_route+0x290>)
 80101da:	785b      	ldrb	r3, [r3, #1]
 80101dc:	71bb      	strb	r3, [r7, #6]

	//====a最短経路を導出====
	if(pass_mode == 4){
 80101de:	4b93      	ldr	r3, [pc, #588]	; (801042c <make_route+0x29c>)
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	2b04      	cmp	r3, #4
 80101e4:	d105      	bne.n	80101f2 <make_route+0x62>
		route[0] = 0x77;
 80101e6:	4b8f      	ldr	r3, [pc, #572]	; (8010424 <make_route+0x294>)
 80101e8:	2277      	movs	r2, #119	; 0x77
 80101ea:	701a      	strb	r2, [r3, #0]
		i = 1;
 80101ec:	2301      	movs	r3, #1
 80101ee:	80bb      	strh	r3, [r7, #4]
 80101f0:	e001      	b.n	80101f6 <make_route+0x66>
	}else{
		i = 0;
 80101f2:	2300      	movs	r3, #0
 80101f4:	80bb      	strh	r3, [r7, #4]
	}

	do{
		uint8_t m_temp = map[y][x];								//a比較用マップ情報の格納
 80101f6:	79ba      	ldrb	r2, [r7, #6]
 80101f8:	79fb      	ldrb	r3, [r7, #7]
 80101fa:	498d      	ldr	r1, [pc, #564]	; (8010430 <make_route+0x2a0>)
 80101fc:	0112      	lsls	r2, r2, #4
 80101fe:	440a      	add	r2, r1
 8010200:	4413      	add	r3, r2
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	707b      	strb	r3, [r7, #1]
		if(MF.FLAG.SCND){										//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 8010206:	4b8b      	ldr	r3, [pc, #556]	; (8010434 <make_route+0x2a4>)
 8010208:	881b      	ldrh	r3, [r3, #0]
 801020a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801020e:	b2db      	uxtb	r3, r3
 8010210:	2b00      	cmp	r3, #0
 8010212:	d002      	beq.n	801021a <make_route+0x8a>
			m_temp >>= 4;										//a上位4bitを使うので4bit分右にシフトさせる
 8010214:	787b      	ldrb	r3, [r7, #1]
 8010216:	091b      	lsrs	r3, r3, #4
 8010218:	707b      	strb	r3, [r7, #1]
		}
		//----a北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//a北側に壁が無く、現在地より小さい歩数マップ値であれば
 801021a:	787b      	ldrb	r3, [r7, #1]
 801021c:	f003 0308 	and.w	r3, r3, #8
 8010220:	2b00      	cmp	r3, #0
 8010222:	d122      	bne.n	801026a <make_route+0xda>
 8010224:	79bb      	ldrb	r3, [r7, #6]
 8010226:	1c5a      	adds	r2, r3, #1
 8010228:	79fb      	ldrb	r3, [r7, #7]
 801022a:	497f      	ldr	r1, [pc, #508]	; (8010428 <make_route+0x298>)
 801022c:	0112      	lsls	r2, r2, #4
 801022e:	4413      	add	r3, r2
 8010230:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010234:	887a      	ldrh	r2, [r7, #2]
 8010236:	429a      	cmp	r2, r3
 8010238:	d917      	bls.n	801026a <make_route+0xda>
			route[i] = (0x00 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 801023a:	4b79      	ldr	r3, [pc, #484]	; (8010420 <make_route+0x290>)
 801023c:	789b      	ldrb	r3, [r3, #2]
 801023e:	b2db      	uxtb	r3, r3
 8010240:	425b      	negs	r3, r3
 8010242:	b2da      	uxtb	r2, r3
 8010244:	88bb      	ldrh	r3, [r7, #4]
 8010246:	f002 0203 	and.w	r2, r2, #3
 801024a:	b2d1      	uxtb	r1, r2
 801024c:	4a75      	ldr	r2, [pc, #468]	; (8010424 <make_route+0x294>)
 801024e:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//a最大歩数マップ値を更新
 8010250:	79bb      	ldrb	r3, [r7, #6]
 8010252:	1c5a      	adds	r2, r3, #1
 8010254:	79fb      	ldrb	r3, [r7, #7]
 8010256:	4974      	ldr	r1, [pc, #464]	; (8010428 <make_route+0x298>)
 8010258:	0112      	lsls	r2, r2, #4
 801025a:	4413      	add	r3, r2
 801025c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010260:	807b      	strh	r3, [r7, #2]
			y++;												//a北に進んだのでY座標をインクリメント
 8010262:	79bb      	ldrb	r3, [r7, #6]
 8010264:	3301      	adds	r3, #1
 8010266:	71bb      	strb	r3, [r7, #6]
 8010268:	e079      	b.n	801035e <make_route+0x1ce>
		}
		//----a東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//a東側に壁が無く、現在地より小さい歩数マップ値であれば
 801026a:	787b      	ldrb	r3, [r7, #1]
 801026c:	f003 0304 	and.w	r3, r3, #4
 8010270:	2b00      	cmp	r3, #0
 8010272:	d123      	bne.n	80102bc <make_route+0x12c>
 8010274:	79ba      	ldrb	r2, [r7, #6]
 8010276:	79fb      	ldrb	r3, [r7, #7]
 8010278:	3301      	adds	r3, #1
 801027a:	496b      	ldr	r1, [pc, #428]	; (8010428 <make_route+0x298>)
 801027c:	0112      	lsls	r2, r2, #4
 801027e:	4413      	add	r3, r2
 8010280:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010284:	887a      	ldrh	r2, [r7, #2]
 8010286:	429a      	cmp	r2, r3
 8010288:	d918      	bls.n	80102bc <make_route+0x12c>
			route[i] = (0x01 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 801028a:	4b65      	ldr	r3, [pc, #404]	; (8010420 <make_route+0x290>)
 801028c:	789b      	ldrb	r3, [r3, #2]
 801028e:	b2db      	uxtb	r3, r3
 8010290:	f1c3 0301 	rsb	r3, r3, #1
 8010294:	b2da      	uxtb	r2, r3
 8010296:	88bb      	ldrh	r3, [r7, #4]
 8010298:	f002 0203 	and.w	r2, r2, #3
 801029c:	b2d1      	uxtb	r1, r2
 801029e:	4a61      	ldr	r2, [pc, #388]	; (8010424 <make_route+0x294>)
 80102a0:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//a最大歩数マップ値を更新
 80102a2:	79ba      	ldrb	r2, [r7, #6]
 80102a4:	79fb      	ldrb	r3, [r7, #7]
 80102a6:	3301      	adds	r3, #1
 80102a8:	495f      	ldr	r1, [pc, #380]	; (8010428 <make_route+0x298>)
 80102aa:	0112      	lsls	r2, r2, #4
 80102ac:	4413      	add	r3, r2
 80102ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80102b2:	807b      	strh	r3, [r7, #2]
			x++;												//a東に進んだのでX座標をインクリメント
 80102b4:	79fb      	ldrb	r3, [r7, #7]
 80102b6:	3301      	adds	r3, #1
 80102b8:	71fb      	strb	r3, [r7, #7]
 80102ba:	e050      	b.n	801035e <make_route+0x1ce>
		}
		//----a南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//a南側に壁が無く、現在地より小さい歩数マップ値であれば
 80102bc:	787b      	ldrb	r3, [r7, #1]
 80102be:	f003 0302 	and.w	r3, r3, #2
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d123      	bne.n	801030e <make_route+0x17e>
 80102c6:	79bb      	ldrb	r3, [r7, #6]
 80102c8:	1e5a      	subs	r2, r3, #1
 80102ca:	79fb      	ldrb	r3, [r7, #7]
 80102cc:	4956      	ldr	r1, [pc, #344]	; (8010428 <make_route+0x298>)
 80102ce:	0112      	lsls	r2, r2, #4
 80102d0:	4413      	add	r3, r2
 80102d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80102d6:	887a      	ldrh	r2, [r7, #2]
 80102d8:	429a      	cmp	r2, r3
 80102da:	d918      	bls.n	801030e <make_route+0x17e>
			route[i] = (0x02 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 80102dc:	4b50      	ldr	r3, [pc, #320]	; (8010420 <make_route+0x290>)
 80102de:	789b      	ldrb	r3, [r3, #2]
 80102e0:	b2db      	uxtb	r3, r3
 80102e2:	f1c3 0302 	rsb	r3, r3, #2
 80102e6:	b2da      	uxtb	r2, r3
 80102e8:	88bb      	ldrh	r3, [r7, #4]
 80102ea:	f002 0203 	and.w	r2, r2, #3
 80102ee:	b2d1      	uxtb	r1, r2
 80102f0:	4a4c      	ldr	r2, [pc, #304]	; (8010424 <make_route+0x294>)
 80102f2:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//a最大歩数マップ値を更新
 80102f4:	79bb      	ldrb	r3, [r7, #6]
 80102f6:	1e5a      	subs	r2, r3, #1
 80102f8:	79fb      	ldrb	r3, [r7, #7]
 80102fa:	494b      	ldr	r1, [pc, #300]	; (8010428 <make_route+0x298>)
 80102fc:	0112      	lsls	r2, r2, #4
 80102fe:	4413      	add	r3, r2
 8010300:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010304:	807b      	strh	r3, [r7, #2]
			y--;												//a南に進んだのでY座標をデクリメント
 8010306:	79bb      	ldrb	r3, [r7, #6]
 8010308:	3b01      	subs	r3, #1
 801030a:	71bb      	strb	r3, [r7, #6]
 801030c:	e027      	b.n	801035e <make_route+0x1ce>
		}
		//----a西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//a西側に壁が無く、現在地より小さい歩数マップ値であれば
 801030e:	787b      	ldrb	r3, [r7, #1]
 8010310:	f003 0301 	and.w	r3, r3, #1
 8010314:	2b00      	cmp	r3, #0
 8010316:	d122      	bne.n	801035e <make_route+0x1ce>
 8010318:	79ba      	ldrb	r2, [r7, #6]
 801031a:	79fb      	ldrb	r3, [r7, #7]
 801031c:	3b01      	subs	r3, #1
 801031e:	4942      	ldr	r1, [pc, #264]	; (8010428 <make_route+0x298>)
 8010320:	0112      	lsls	r2, r2, #4
 8010322:	4413      	add	r3, r2
 8010324:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010328:	887a      	ldrh	r2, [r7, #2]
 801032a:	429a      	cmp	r2, r3
 801032c:	d917      	bls.n	801035e <make_route+0x1ce>
			route[i] = (0x03 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 801032e:	4b3c      	ldr	r3, [pc, #240]	; (8010420 <make_route+0x290>)
 8010330:	789b      	ldrb	r3, [r3, #2]
 8010332:	b2db      	uxtb	r3, r3
 8010334:	f1c3 0303 	rsb	r3, r3, #3
 8010338:	b2da      	uxtb	r2, r3
 801033a:	88bb      	ldrh	r3, [r7, #4]
 801033c:	f002 0203 	and.w	r2, r2, #3
 8010340:	b2d1      	uxtb	r1, r2
 8010342:	4a38      	ldr	r2, [pc, #224]	; (8010424 <make_route+0x294>)
 8010344:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//a最大歩数マップ値を更新
 8010346:	79ba      	ldrb	r2, [r7, #6]
 8010348:	79fb      	ldrb	r3, [r7, #7]
 801034a:	3b01      	subs	r3, #1
 801034c:	4936      	ldr	r1, [pc, #216]	; (8010428 <make_route+0x298>)
 801034e:	0112      	lsls	r2, r2, #4
 8010350:	4413      	add	r3, r2
 8010352:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010356:	807b      	strh	r3, [r7, #2]
			x--;												//a西に進んだのでX座標をデクリメント
 8010358:	79fb      	ldrb	r3, [r7, #7]
 801035a:	3b01      	subs	r3, #1
 801035c:	71fb      	strb	r3, [r7, #7]
				y--;												//a南に進んだのでY座標をデクリメント
			}*/

		}
		//----a格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 801035e:	88bb      	ldrh	r3, [r7, #4]
 8010360:	4a30      	ldr	r2, [pc, #192]	; (8010424 <make_route+0x294>)
 8010362:	5cd3      	ldrb	r3, [r2, r3]
 8010364:	2b03      	cmp	r3, #3
 8010366:	d83c      	bhi.n	80103e2 <make_route+0x252>
 8010368:	a201      	add	r2, pc, #4	; (adr r2, 8010370 <make_route+0x1e0>)
 801036a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801036e:	bf00      	nop
 8010370:	08010381 	.word	0x08010381
 8010374:	080103ad 	.word	0x080103ad
 8010378:	080103bf 	.word	0x080103bf
 801037c:	080103d1 	.word	0x080103d1
		case 0x00:												//a前進する場合
			if(pass_mode < 3){
 8010380:	4b2a      	ldr	r3, [pc, #168]	; (801042c <make_route+0x29c>)
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	2b02      	cmp	r3, #2
 8010386:	d804      	bhi.n	8010392 <make_route+0x202>
				route[i] = 0x88;									//a格納データ形式を変更
 8010388:	88bb      	ldrh	r3, [r7, #4]
 801038a:	4a26      	ldr	r2, [pc, #152]	; (8010424 <make_route+0x294>)
 801038c:	2188      	movs	r1, #136	; 0x88
 801038e:	54d1      	strb	r1, [r2, r3]
			}else{
				route[i] = 0x77;
				route[i+1] = 0x77;
				i++;
			}
			break;
 8010390:	e02c      	b.n	80103ec <make_route+0x25c>
				route[i] = 0x77;
 8010392:	88bb      	ldrh	r3, [r7, #4]
 8010394:	4a23      	ldr	r2, [pc, #140]	; (8010424 <make_route+0x294>)
 8010396:	2177      	movs	r1, #119	; 0x77
 8010398:	54d1      	strb	r1, [r2, r3]
				route[i+1] = 0x77;
 801039a:	88bb      	ldrh	r3, [r7, #4]
 801039c:	3301      	adds	r3, #1
 801039e:	4a21      	ldr	r2, [pc, #132]	; (8010424 <make_route+0x294>)
 80103a0:	2177      	movs	r1, #119	; 0x77
 80103a2:	54d1      	strb	r1, [r2, r3]
				i++;
 80103a4:	88bb      	ldrh	r3, [r7, #4]
 80103a6:	3301      	adds	r3, #1
 80103a8:	80bb      	strh	r3, [r7, #4]
			break;
 80103aa:	e01f      	b.n	80103ec <make_route+0x25c>
		case 0x01:												//a右折する場合
			turn_dir(DIR_TURN_R90, 0);								//a内部情報の方向を90度右回転
 80103ac:	2100      	movs	r1, #0
 80103ae:	2001      	movs	r0, #1
 80103b0:	f7ff fa66 	bl	800f880 <turn_dir>
			route[i] = 0x44;									//a格納データ形式を変更
 80103b4:	88bb      	ldrh	r3, [r7, #4]
 80103b6:	4a1b      	ldr	r2, [pc, #108]	; (8010424 <make_route+0x294>)
 80103b8:	2144      	movs	r1, #68	; 0x44
 80103ba:	54d1      	strb	r1, [r2, r3]
			break;
 80103bc:	e016      	b.n	80103ec <make_route+0x25c>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180, 0);								//a内部情報の方向を180度回転
 80103be:	2100      	movs	r1, #0
 80103c0:	2002      	movs	r0, #2
 80103c2:	f7ff fa5d 	bl	800f880 <turn_dir>
			route[i] = 0x22;									//a格納データ形式を変更
 80103c6:	88bb      	ldrh	r3, [r7, #4]
 80103c8:	4a16      	ldr	r2, [pc, #88]	; (8010424 <make_route+0x294>)
 80103ca:	2122      	movs	r1, #34	; 0x22
 80103cc:	54d1      	strb	r1, [r2, r3]
			break;
 80103ce:	e00d      	b.n	80103ec <make_route+0x25c>
		case 0x03:												//a左折する場合
			turn_dir(DIR_TURN_L90, 0);								//a内部情報の方向を90度左回転
 80103d0:	2100      	movs	r1, #0
 80103d2:	20ff      	movs	r0, #255	; 0xff
 80103d4:	f7ff fa54 	bl	800f880 <turn_dir>
			route[i] = 0x11;									//a格納データ形式を変更
 80103d8:	88bb      	ldrh	r3, [r7, #4]
 80103da:	4a12      	ldr	r2, [pc, #72]	; (8010424 <make_route+0x294>)
 80103dc:	2111      	movs	r1, #17
 80103de:	54d1      	strb	r1, [r2, r3]
			break;
 80103e0:	e004      	b.n	80103ec <make_route+0x25c>
		default:												//aそれ以外の場合
			route[i] = 0x00;									//a格納データ形式を変更
 80103e2:	88bb      	ldrh	r3, [r7, #4]
 80103e4:	4a0f      	ldr	r2, [pc, #60]	; (8010424 <make_route+0x294>)
 80103e6:	2100      	movs	r1, #0
 80103e8:	54d1      	strb	r1, [r2, r3]
			break;
 80103ea:	bf00      	nop
		}
		i++;													//aカウンタをインクリメント
 80103ec:	88bb      	ldrh	r3, [r7, #4]
 80103ee:	3301      	adds	r3, #1
 80103f0:	80bb      	strh	r3, [r7, #4]
	}while(smap[y][x] != 0);									//a進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 80103f2:	79ba      	ldrb	r2, [r7, #6]
 80103f4:	79fb      	ldrb	r3, [r7, #7]
 80103f6:	490c      	ldr	r1, [pc, #48]	; (8010428 <make_route+0x298>)
 80103f8:	0112      	lsls	r2, r2, #4
 80103fa:	4413      	add	r3, r2
 80103fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010400:	2b00      	cmp	r3, #0
 8010402:	f47f aef8 	bne.w	80101f6 <make_route+0x66>
	goal_x = x;
 8010406:	4a0c      	ldr	r2, [pc, #48]	; (8010438 <make_route+0x2a8>)
 8010408:	79fb      	ldrb	r3, [r7, #7]
 801040a:	7013      	strb	r3, [r2, #0]
	goal_y = y;
 801040c:	4a0b      	ldr	r2, [pc, #44]	; (801043c <make_route+0x2ac>)
 801040e:	79bb      	ldrb	r3, [r7, #6]
 8010410:	7013      	strb	r3, [r2, #0]
	mouse.dir = dir_temp;										//dir_tempに退避させた値をmouse.dirにリストア
 8010412:	4a03      	ldr	r2, [pc, #12]	; (8010420 <make_route+0x290>)
 8010414:	783b      	ldrb	r3, [r7, #0]
 8010416:	7093      	strb	r3, [r2, #2]
}
 8010418:	bf00      	nop
 801041a:	3708      	adds	r7, #8
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}
 8010420:	20000c0c 	.word	0x20000c0c
 8010424:	20000c54 	.word	0x20000c54
 8010428:	20000d60 	.word	0x20000d60
 801042c:	20000457 	.word	0x20000457
 8010430:	200001ac 	.word	0x200001ac
 8010434:	20000f68 	.word	0x20000f68
 8010438:	20000bb0 	.word	0x20000bb0
 801043c:	20000b4c 	.word	0x20000b4c

08010440 <find_pregoal>:
//	未探索壁を含む＆現在座標から最も近いマス(=仮goal)を探す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void find_pregoal()
{
 8010440:	b480      	push	{r7}
 8010442:	b085      	sub	sp, #20
 8010444:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持
	//uint8_t m_temp_sample[16];
	uint8_t break_flag = 0;													//未知壁マスを見つけた時のループ脱出フラグ
 8010446:	2300      	movs	r3, #0
 8010448:	737b      	strb	r3, [r7, #13]

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 801044a:	2300      	movs	r3, #0
 801044c:	73bb      	strb	r3, [r7, #14]
 801044e:	e014      	b.n	801047a <find_pregoal+0x3a>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010450:	2300      	movs	r3, #0
 8010452:	73fb      	strb	r3, [r7, #15]
 8010454:	e00b      	b.n	801046e <find_pregoal+0x2e>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 8010456:	7bba      	ldrb	r2, [r7, #14]
 8010458:	7bfb      	ldrb	r3, [r7, #15]
 801045a:	49a0      	ldr	r1, [pc, #640]	; (80106dc <find_pregoal+0x29c>)
 801045c:	0112      	lsls	r2, r2, #4
 801045e:	4413      	add	r3, r2
 8010460:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010464:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010468:	7bfb      	ldrb	r3, [r7, #15]
 801046a:	3301      	adds	r3, #1
 801046c:	73fb      	strb	r3, [r7, #15]
 801046e:	7bfb      	ldrb	r3, [r7, #15]
 8010470:	2b0f      	cmp	r3, #15
 8010472:	d9f0      	bls.n	8010456 <find_pregoal+0x16>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8010474:	7bbb      	ldrb	r3, [r7, #14]
 8010476:	3301      	adds	r3, #1
 8010478:	73bb      	strb	r3, [r7, #14]
 801047a:	7bbb      	ldrb	r3, [r7, #14]
 801047c:	2b0f      	cmp	r3, #15
 801047e:	d9e7      	bls.n	8010450 <find_pregoal+0x10>
		}
	}

	//====探索完了フラグのクリア====
	MF2.FLAG.ALLMAP = 0;
 8010480:	4a97      	ldr	r2, [pc, #604]	; (80106e0 <find_pregoal+0x2a0>)
 8010482:	8813      	ldrh	r3, [r2, #0]
 8010484:	f36f 0382 	bfc	r3, #2, #1
 8010488:	8013      	strh	r3, [r2, #0]

	//====現在座標を0にする====
	smap[mouse.y][mouse.x] = 0;
 801048a:	4b96      	ldr	r3, [pc, #600]	; (80106e4 <find_pregoal+0x2a4>)
 801048c:	785b      	ldrb	r3, [r3, #1]
 801048e:	b2db      	uxtb	r3, r3
 8010490:	4618      	mov	r0, r3
 8010492:	4b94      	ldr	r3, [pc, #592]	; (80106e4 <find_pregoal+0x2a4>)
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	b2db      	uxtb	r3, r3
 8010498:	4619      	mov	r1, r3
 801049a:	4a90      	ldr	r2, [pc, #576]	; (80106dc <find_pregoal+0x29c>)
 801049c:	0103      	lsls	r3, r0, #4
 801049e:	440b      	add	r3, r1
 80104a0:	2100      	movs	r1, #0
 80104a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 80104a6:	4b90      	ldr	r3, [pc, #576]	; (80106e8 <find_pregoal+0x2a8>)
 80104a8:	2200      	movs	r2, #0
 80104aa:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 80104ac:	2303      	movs	r3, #3
 80104ae:	60bb      	str	r3, [r7, #8]
	int turn = 1;
 80104b0:	2301      	movs	r3, #1
 80104b2:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 80104b4:	2300      	movs	r3, #0
 80104b6:	73bb      	strb	r3, [r7, #14]
 80104b8:	e180      	b.n	80107bc <find_pregoal+0x37c>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 80104ba:	2300      	movs	r3, #0
 80104bc:	73fb      	strb	r3, [r7, #15]
 80104be:	e173      	b.n	80107a8 <find_pregoal+0x368>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 80104c0:	7bba      	ldrb	r2, [r7, #14]
 80104c2:	7bfb      	ldrb	r3, [r7, #15]
 80104c4:	4985      	ldr	r1, [pc, #532]	; (80106dc <find_pregoal+0x29c>)
 80104c6:	0112      	lsls	r2, r2, #4
 80104c8:	4413      	add	r3, r2
 80104ca:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80104ce:	4b86      	ldr	r3, [pc, #536]	; (80106e8 <find_pregoal+0x2a8>)
 80104d0:	881b      	ldrh	r3, [r3, #0]
 80104d2:	429a      	cmp	r2, r3
 80104d4:	f040 8165 	bne.w	80107a2 <find_pregoal+0x362>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 80104d8:	7bba      	ldrb	r2, [r7, #14]
 80104da:	7bfb      	ldrb	r3, [r7, #15]
 80104dc:	4983      	ldr	r1, [pc, #524]	; (80106ec <find_pregoal+0x2ac>)
 80104de:	0112      	lsls	r2, r2, #4
 80104e0:	440a      	add	r2, r1
 80104e2:	4413      	add	r3, r2
 80104e4:	781b      	ldrb	r3, [r3, #0]
 80104e6:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 80104e8:	78fb      	ldrb	r3, [r7, #3]
 80104ea:	f003 0308 	and.w	r3, r3, #8
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d14d      	bne.n	801058e <find_pregoal+0x14e>
 80104f2:	7bbb      	ldrb	r3, [r7, #14]
 80104f4:	2b0f      	cmp	r3, #15
 80104f6:	d04a      	beq.n	801058e <find_pregoal+0x14e>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 80104f8:	7bbb      	ldrb	r3, [r7, #14]
 80104fa:	1c5a      	adds	r2, r3, #1
 80104fc:	7bfb      	ldrb	r3, [r7, #15]
 80104fe:	4977      	ldr	r1, [pc, #476]	; (80106dc <find_pregoal+0x29c>)
 8010500:	0112      	lsls	r2, r2, #4
 8010502:	4413      	add	r3, r2
 8010504:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010508:	f240 32e7 	movw	r2, #999	; 0x3e7
 801050c:	4293      	cmp	r3, r2
 801050e:	d13e      	bne.n	801058e <find_pregoal+0x14e>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010510:	7bba      	ldrb	r2, [r7, #14]
 8010512:	7bfb      	ldrb	r3, [r7, #15]
 8010514:	4971      	ldr	r1, [pc, #452]	; (80106dc <find_pregoal+0x29c>)
 8010516:	0112      	lsls	r2, r2, #4
 8010518:	4413      	add	r3, r2
 801051a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	b299      	uxth	r1, r3
 8010522:	7bbb      	ldrb	r3, [r7, #14]
 8010524:	1c5a      	adds	r2, r3, #1
 8010526:	7bfb      	ldrb	r3, [r7, #15]
 8010528:	4401      	add	r1, r0
 801052a:	b288      	uxth	r0, r1
 801052c:	496b      	ldr	r1, [pc, #428]	; (80106dc <find_pregoal+0x29c>)
 801052e:	0112      	lsls	r2, r2, #4
 8010530:	4413      	add	r3, r2
 8010532:	4602      	mov	r2, r0
 8010534:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y + 1][x] & 0x0f ) << 4) != (map[y + 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8010538:	7bbb      	ldrb	r3, [r7, #14]
 801053a:	1c5a      	adds	r2, r3, #1
 801053c:	7bfb      	ldrb	r3, [r7, #15]
 801053e:	496b      	ldr	r1, [pc, #428]	; (80106ec <find_pregoal+0x2ac>)
 8010540:	0112      	lsls	r2, r2, #4
 8010542:	440a      	add	r2, r1
 8010544:	4413      	add	r3, r2
 8010546:	781b      	ldrb	r3, [r3, #0]
 8010548:	011b      	lsls	r3, r3, #4
 801054a:	b2da      	uxtb	r2, r3
 801054c:	7bbb      	ldrb	r3, [r7, #14]
 801054e:	1c59      	adds	r1, r3, #1
 8010550:	7bfb      	ldrb	r3, [r7, #15]
 8010552:	4866      	ldr	r0, [pc, #408]	; (80106ec <find_pregoal+0x2ac>)
 8010554:	0109      	lsls	r1, r1, #4
 8010556:	4401      	add	r1, r0
 8010558:	440b      	add	r3, r1
 801055a:	781b      	ldrb	r3, [r3, #0]
 801055c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010560:	429a      	cmp	r2, r3
 8010562:	d014      	beq.n	801058e <find_pregoal+0x14e>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8010564:	2301      	movs	r3, #1
 8010566:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y + 1][x];					//仮goalの歩数を記録
 8010568:	7bbb      	ldrb	r3, [r7, #14]
 801056a:	1c5a      	adds	r2, r3, #1
 801056c:	7bfb      	ldrb	r3, [r7, #15]
 801056e:	495b      	ldr	r1, [pc, #364]	; (80106dc <find_pregoal+0x29c>)
 8010570:	0112      	lsls	r2, r2, #4
 8010572:	4413      	add	r3, r2
 8010574:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8010578:	4b5d      	ldr	r3, [pc, #372]	; (80106f0 <find_pregoal+0x2b0>)
 801057a:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 801057c:	4a5d      	ldr	r2, [pc, #372]	; (80106f4 <find_pregoal+0x2b4>)
 801057e:	7bfb      	ldrb	r3, [r7, #15]
 8010580:	7013      	strb	r3, [r2, #0]
								pregoal_y = y + 1;							//仮goalの座標を記録
 8010582:	7bbb      	ldrb	r3, [r7, #14]
 8010584:	3301      	adds	r3, #1
 8010586:	b2da      	uxtb	r2, r3
 8010588:	4b5b      	ldr	r3, [pc, #364]	; (80106f8 <find_pregoal+0x2b8>)
 801058a:	701a      	strb	r2, [r3, #0]
								break;
 801058c:	e110      	b.n	80107b0 <find_pregoal+0x370>
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 801058e:	78fb      	ldrb	r3, [r7, #3]
 8010590:	f003 0304 	and.w	r3, r3, #4
 8010594:	2b00      	cmp	r3, #0
 8010596:	d14d      	bne.n	8010634 <find_pregoal+0x1f4>
 8010598:	7bfb      	ldrb	r3, [r7, #15]
 801059a:	2b0f      	cmp	r3, #15
 801059c:	d04a      	beq.n	8010634 <find_pregoal+0x1f4>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 801059e:	7bba      	ldrb	r2, [r7, #14]
 80105a0:	7bfb      	ldrb	r3, [r7, #15]
 80105a2:	3301      	adds	r3, #1
 80105a4:	494d      	ldr	r1, [pc, #308]	; (80106dc <find_pregoal+0x29c>)
 80105a6:	0112      	lsls	r2, r2, #4
 80105a8:	4413      	add	r3, r2
 80105aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80105ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80105b2:	4293      	cmp	r3, r2
 80105b4:	d13e      	bne.n	8010634 <find_pregoal+0x1f4>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 80105b6:	7bba      	ldrb	r2, [r7, #14]
 80105b8:	7bfb      	ldrb	r3, [r7, #15]
 80105ba:	4948      	ldr	r1, [pc, #288]	; (80106dc <find_pregoal+0x29c>)
 80105bc:	0112      	lsls	r2, r2, #4
 80105be:	4413      	add	r3, r2
 80105c0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	b299      	uxth	r1, r3
 80105c8:	7bba      	ldrb	r2, [r7, #14]
 80105ca:	7bfb      	ldrb	r3, [r7, #15]
 80105cc:	3301      	adds	r3, #1
 80105ce:	4401      	add	r1, r0
 80105d0:	b288      	uxth	r0, r1
 80105d2:	4942      	ldr	r1, [pc, #264]	; (80106dc <find_pregoal+0x29c>)
 80105d4:	0112      	lsls	r2, r2, #4
 80105d6:	4413      	add	r3, r2
 80105d8:	4602      	mov	r2, r0
 80105da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x + 1] & 0x0f) << 4) != (map[y][x + 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 80105de:	7bba      	ldrb	r2, [r7, #14]
 80105e0:	7bfb      	ldrb	r3, [r7, #15]
 80105e2:	3301      	adds	r3, #1
 80105e4:	4941      	ldr	r1, [pc, #260]	; (80106ec <find_pregoal+0x2ac>)
 80105e6:	0112      	lsls	r2, r2, #4
 80105e8:	440a      	add	r2, r1
 80105ea:	4413      	add	r3, r2
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	011b      	lsls	r3, r3, #4
 80105f0:	b2da      	uxtb	r2, r3
 80105f2:	7bb9      	ldrb	r1, [r7, #14]
 80105f4:	7bfb      	ldrb	r3, [r7, #15]
 80105f6:	3301      	adds	r3, #1
 80105f8:	483c      	ldr	r0, [pc, #240]	; (80106ec <find_pregoal+0x2ac>)
 80105fa:	0109      	lsls	r1, r1, #4
 80105fc:	4401      	add	r1, r0
 80105fe:	440b      	add	r3, r1
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010606:	429a      	cmp	r2, r3
 8010608:	d014      	beq.n	8010634 <find_pregoal+0x1f4>
								break_flag = 1;								//for文を抜けるフラグを立てて
 801060a:	2301      	movs	r3, #1
 801060c:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x + 1];					//仮ゴールの歩数を記録
 801060e:	7bba      	ldrb	r2, [r7, #14]
 8010610:	7bfb      	ldrb	r3, [r7, #15]
 8010612:	3301      	adds	r3, #1
 8010614:	4931      	ldr	r1, [pc, #196]	; (80106dc <find_pregoal+0x29c>)
 8010616:	0112      	lsls	r2, r2, #4
 8010618:	4413      	add	r3, r2
 801061a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 801061e:	4b34      	ldr	r3, [pc, #208]	; (80106f0 <find_pregoal+0x2b0>)
 8010620:	801a      	strh	r2, [r3, #0]
								pregoal_x = x + 1;
 8010622:	7bfb      	ldrb	r3, [r7, #15]
 8010624:	3301      	adds	r3, #1
 8010626:	b2da      	uxtb	r2, r3
 8010628:	4b32      	ldr	r3, [pc, #200]	; (80106f4 <find_pregoal+0x2b4>)
 801062a:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 801062c:	4a32      	ldr	r2, [pc, #200]	; (80106f8 <find_pregoal+0x2b8>)
 801062e:	7bbb      	ldrb	r3, [r7, #14]
 8010630:	7013      	strb	r3, [r2, #0]
								break;
 8010632:	e0bd      	b.n	80107b0 <find_pregoal+0x370>
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 8010634:	78fb      	ldrb	r3, [r7, #3]
 8010636:	f003 0302 	and.w	r3, r3, #2
 801063a:	2b00      	cmp	r3, #0
 801063c:	d15e      	bne.n	80106fc <find_pregoal+0x2bc>
 801063e:	7bbb      	ldrb	r3, [r7, #14]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d05b      	beq.n	80106fc <find_pregoal+0x2bc>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 8010644:	7bbb      	ldrb	r3, [r7, #14]
 8010646:	1e5a      	subs	r2, r3, #1
 8010648:	7bfb      	ldrb	r3, [r7, #15]
 801064a:	4924      	ldr	r1, [pc, #144]	; (80106dc <find_pregoal+0x29c>)
 801064c:	0112      	lsls	r2, r2, #4
 801064e:	4413      	add	r3, r2
 8010650:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010654:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010658:	4293      	cmp	r3, r2
 801065a:	d14f      	bne.n	80106fc <find_pregoal+0x2bc>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 801065c:	7bba      	ldrb	r2, [r7, #14]
 801065e:	7bfb      	ldrb	r3, [r7, #15]
 8010660:	491e      	ldr	r1, [pc, #120]	; (80106dc <find_pregoal+0x29c>)
 8010662:	0112      	lsls	r2, r2, #4
 8010664:	4413      	add	r3, r2
 8010666:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	b299      	uxth	r1, r3
 801066e:	7bbb      	ldrb	r3, [r7, #14]
 8010670:	1e5a      	subs	r2, r3, #1
 8010672:	7bfb      	ldrb	r3, [r7, #15]
 8010674:	4401      	add	r1, r0
 8010676:	b288      	uxth	r0, r1
 8010678:	4918      	ldr	r1, [pc, #96]	; (80106dc <find_pregoal+0x29c>)
 801067a:	0112      	lsls	r2, r2, #4
 801067c:	4413      	add	r3, r2
 801067e:	4602      	mov	r2, r0
 8010680:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y - 1][x] & 0x0f) << 4) != (map[y - 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8010684:	7bbb      	ldrb	r3, [r7, #14]
 8010686:	1e5a      	subs	r2, r3, #1
 8010688:	7bfb      	ldrb	r3, [r7, #15]
 801068a:	4918      	ldr	r1, [pc, #96]	; (80106ec <find_pregoal+0x2ac>)
 801068c:	0112      	lsls	r2, r2, #4
 801068e:	440a      	add	r2, r1
 8010690:	4413      	add	r3, r2
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	011b      	lsls	r3, r3, #4
 8010696:	b2da      	uxtb	r2, r3
 8010698:	7bbb      	ldrb	r3, [r7, #14]
 801069a:	1e59      	subs	r1, r3, #1
 801069c:	7bfb      	ldrb	r3, [r7, #15]
 801069e:	4813      	ldr	r0, [pc, #76]	; (80106ec <find_pregoal+0x2ac>)
 80106a0:	0109      	lsls	r1, r1, #4
 80106a2:	4401      	add	r1, r0
 80106a4:	440b      	add	r3, r1
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d025      	beq.n	80106fc <find_pregoal+0x2bc>
								break_flag = 1;								//for文を抜けるフラグを立てて
 80106b0:	2301      	movs	r3, #1
 80106b2:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y - 1][x];					//仮ゴールの歩数を記録
 80106b4:	7bbb      	ldrb	r3, [r7, #14]
 80106b6:	1e5a      	subs	r2, r3, #1
 80106b8:	7bfb      	ldrb	r3, [r7, #15]
 80106ba:	4908      	ldr	r1, [pc, #32]	; (80106dc <find_pregoal+0x29c>)
 80106bc:	0112      	lsls	r2, r2, #4
 80106be:	4413      	add	r3, r2
 80106c0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80106c4:	4b0a      	ldr	r3, [pc, #40]	; (80106f0 <find_pregoal+0x2b0>)
 80106c6:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 80106c8:	4a0a      	ldr	r2, [pc, #40]	; (80106f4 <find_pregoal+0x2b4>)
 80106ca:	7bfb      	ldrb	r3, [r7, #15]
 80106cc:	7013      	strb	r3, [r2, #0]
								pregoal_y = y - 1;							//仮goalの座標を記録
 80106ce:	7bbb      	ldrb	r3, [r7, #14]
 80106d0:	3b01      	subs	r3, #1
 80106d2:	b2da      	uxtb	r2, r3
 80106d4:	4b08      	ldr	r3, [pc, #32]	; (80106f8 <find_pregoal+0x2b8>)
 80106d6:	701a      	strb	r2, [r3, #0]
								break;
 80106d8:	e06a      	b.n	80107b0 <find_pregoal+0x370>
 80106da:	bf00      	nop
 80106dc:	20000d60 	.word	0x20000d60
 80106e0:	20000f64 	.word	0x20000f64
 80106e4:	20000c0c 	.word	0x20000c0c
 80106e8:	2000034e 	.word	0x2000034e
 80106ec:	200001ac 	.word	0x200001ac
 80106f0:	20000c04 	.word	0x20000c04
 80106f4:	20000d5c 	.word	0x20000d5c
 80106f8:	200012a1 	.word	0x200012a1
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 80106fc:	78fb      	ldrb	r3, [r7, #3]
 80106fe:	f003 0301 	and.w	r3, r3, #1
 8010702:	2b00      	cmp	r3, #0
 8010704:	d14d      	bne.n	80107a2 <find_pregoal+0x362>
 8010706:	7bfb      	ldrb	r3, [r7, #15]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d04a      	beq.n	80107a2 <find_pregoal+0x362>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 801070c:	7bba      	ldrb	r2, [r7, #14]
 801070e:	7bfb      	ldrb	r3, [r7, #15]
 8010710:	3b01      	subs	r3, #1
 8010712:	493e      	ldr	r1, [pc, #248]	; (801080c <find_pregoal+0x3cc>)
 8010714:	0112      	lsls	r2, r2, #4
 8010716:	4413      	add	r3, r2
 8010718:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801071c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010720:	4293      	cmp	r3, r2
 8010722:	d13e      	bne.n	80107a2 <find_pregoal+0x362>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 8010724:	7bba      	ldrb	r2, [r7, #14]
 8010726:	7bfb      	ldrb	r3, [r7, #15]
 8010728:	4938      	ldr	r1, [pc, #224]	; (801080c <find_pregoal+0x3cc>)
 801072a:	0112      	lsls	r2, r2, #4
 801072c:	4413      	add	r3, r2
 801072e:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	b299      	uxth	r1, r3
 8010736:	7bba      	ldrb	r2, [r7, #14]
 8010738:	7bfb      	ldrb	r3, [r7, #15]
 801073a:	3b01      	subs	r3, #1
 801073c:	4401      	add	r1, r0
 801073e:	b288      	uxth	r0, r1
 8010740:	4932      	ldr	r1, [pc, #200]	; (801080c <find_pregoal+0x3cc>)
 8010742:	0112      	lsls	r2, r2, #4
 8010744:	4413      	add	r3, r2
 8010746:	4602      	mov	r2, r0
 8010748:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x - 1] & 0x0f) << 4) != (map[y][x - 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 801074c:	7bba      	ldrb	r2, [r7, #14]
 801074e:	7bfb      	ldrb	r3, [r7, #15]
 8010750:	3b01      	subs	r3, #1
 8010752:	492f      	ldr	r1, [pc, #188]	; (8010810 <find_pregoal+0x3d0>)
 8010754:	0112      	lsls	r2, r2, #4
 8010756:	440a      	add	r2, r1
 8010758:	4413      	add	r3, r2
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	011b      	lsls	r3, r3, #4
 801075e:	b2da      	uxtb	r2, r3
 8010760:	7bb9      	ldrb	r1, [r7, #14]
 8010762:	7bfb      	ldrb	r3, [r7, #15]
 8010764:	3b01      	subs	r3, #1
 8010766:	482a      	ldr	r0, [pc, #168]	; (8010810 <find_pregoal+0x3d0>)
 8010768:	0109      	lsls	r1, r1, #4
 801076a:	4401      	add	r1, r0
 801076c:	440b      	add	r3, r1
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010774:	429a      	cmp	r2, r3
 8010776:	d014      	beq.n	80107a2 <find_pregoal+0x362>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8010778:	2301      	movs	r3, #1
 801077a:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x - 1];					//仮ゴールの歩数を記録
 801077c:	7bba      	ldrb	r2, [r7, #14]
 801077e:	7bfb      	ldrb	r3, [r7, #15]
 8010780:	3b01      	subs	r3, #1
 8010782:	4922      	ldr	r1, [pc, #136]	; (801080c <find_pregoal+0x3cc>)
 8010784:	0112      	lsls	r2, r2, #4
 8010786:	4413      	add	r3, r2
 8010788:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 801078c:	4b21      	ldr	r3, [pc, #132]	; (8010814 <find_pregoal+0x3d4>)
 801078e:	801a      	strh	r2, [r3, #0]
								pregoal_x = x - 1;
 8010790:	7bfb      	ldrb	r3, [r7, #15]
 8010792:	3b01      	subs	r3, #1
 8010794:	b2da      	uxtb	r2, r3
 8010796:	4b20      	ldr	r3, [pc, #128]	; (8010818 <find_pregoal+0x3d8>)
 8010798:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 801079a:	4a20      	ldr	r2, [pc, #128]	; (801081c <find_pregoal+0x3dc>)
 801079c:	7bbb      	ldrb	r3, [r7, #14]
 801079e:	7013      	strb	r3, [r2, #0]
								break;							}
 80107a0:	e006      	b.n	80107b0 <find_pregoal+0x370>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 80107a2:	7bfb      	ldrb	r3, [r7, #15]
 80107a4:	3301      	adds	r3, #1
 80107a6:	73fb      	strb	r3, [r7, #15]
 80107a8:	7bfb      	ldrb	r3, [r7, #15]
 80107aa:	2b0f      	cmp	r3, #15
 80107ac:	f67f ae88 	bls.w	80104c0 <find_pregoal+0x80>
						}
					}
				}
			}
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 80107b0:	7b7b      	ldrb	r3, [r7, #13]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d107      	bne.n	80107c6 <find_pregoal+0x386>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 80107b6:	7bbb      	ldrb	r3, [r7, #14]
 80107b8:	3301      	adds	r3, #1
 80107ba:	73bb      	strb	r3, [r7, #14]
 80107bc:	7bbb      	ldrb	r3, [r7, #14]
 80107be:	2b0f      	cmp	r3, #15
 80107c0:	f67f ae7b 	bls.w	80104ba <find_pregoal+0x7a>
 80107c4:	e000      	b.n	80107c8 <find_pregoal+0x388>
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 80107c6:	bf00      	nop
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 80107c8:	4b15      	ldr	r3, [pc, #84]	; (8010820 <find_pregoal+0x3e0>)
 80107ca:	881b      	ldrh	r3, [r3, #0]
 80107cc:	3301      	adds	r3, #1
 80107ce:	b29a      	uxth	r2, r3
 80107d0:	4b13      	ldr	r3, [pc, #76]	; (8010820 <find_pregoal+0x3e0>)
 80107d2:	801a      	strh	r2, [r3, #0]
		if(m_step > 500) MF2.FLAG.ALLMAP = 1;
 80107d4:	4b12      	ldr	r3, [pc, #72]	; (8010820 <find_pregoal+0x3e0>)
 80107d6:	881b      	ldrh	r3, [r3, #0]
 80107d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80107dc:	d904      	bls.n	80107e8 <find_pregoal+0x3a8>
 80107de:	4a11      	ldr	r2, [pc, #68]	; (8010824 <find_pregoal+0x3e4>)
 80107e0:	8813      	ldrh	r3, [r2, #0]
 80107e2:	f043 0304 	orr.w	r3, r3, #4
 80107e6:	8013      	strh	r3, [r2, #0]
	} while(break_flag == 0 && MF2.FLAG.ALLMAP != 1);		//未探索壁ありマスを見つけるまで実行
 80107e8:	7b7b      	ldrb	r3, [r7, #13]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d107      	bne.n	80107fe <find_pregoal+0x3be>
 80107ee:	4b0d      	ldr	r3, [pc, #52]	; (8010824 <find_pregoal+0x3e4>)
 80107f0:	881b      	ldrh	r3, [r3, #0]
 80107f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80107f6:	b2db      	uxtb	r3, r3
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	f47f ae5b 	bne.w	80104b4 <find_pregoal+0x74>
}
 80107fe:	bf00      	nop
 8010800:	3714      	adds	r7, #20
 8010802:	46bd      	mov	sp, r7
 8010804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010808:	4770      	bx	lr
 801080a:	bf00      	nop
 801080c:	20000d60 	.word	0x20000d60
 8010810:	200001ac 	.word	0x200001ac
 8010814:	20000c04 	.word	0x20000c04
 8010818:	20000d5c 	.word	0x20000d5c
 801081c:	200012a1 	.word	0x200012a1
 8010820:	2000034e 	.word	0x2000034e
 8010824:	20000f64 	.word	0x20000f64

08010828 <make_smap2>:
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap2()
{
 8010828:	b480      	push	{r7}
 801082a:	b085      	sub	sp, #20
 801082c:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 801082e:	2300      	movs	r3, #0
 8010830:	73bb      	strb	r3, [r7, #14]
 8010832:	e014      	b.n	801085e <make_smap2+0x36>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8010834:	2300      	movs	r3, #0
 8010836:	73fb      	strb	r3, [r7, #15]
 8010838:	e00b      	b.n	8010852 <make_smap2+0x2a>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 801083a:	7bba      	ldrb	r2, [r7, #14]
 801083c:	7bfb      	ldrb	r3, [r7, #15]
 801083e:	4986      	ldr	r1, [pc, #536]	; (8010a58 <make_smap2+0x230>)
 8010840:	0112      	lsls	r2, r2, #4
 8010842:	4413      	add	r3, r2
 8010844:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010848:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 801084c:	7bfb      	ldrb	r3, [r7, #15]
 801084e:	3301      	adds	r3, #1
 8010850:	73fb      	strb	r3, [r7, #15]
 8010852:	7bfb      	ldrb	r3, [r7, #15]
 8010854:	2b0f      	cmp	r3, #15
 8010856:	d9f0      	bls.n	801083a <make_smap2+0x12>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8010858:	7bbb      	ldrb	r3, [r7, #14]
 801085a:	3301      	adds	r3, #1
 801085c:	73bb      	strb	r3, [r7, #14]
 801085e:	7bbb      	ldrb	r3, [r7, #14]
 8010860:	2b0f      	cmp	r3, #15
 8010862:	d9e7      	bls.n	8010834 <make_smap2+0xc>
		}
	}

	//====仮ゴール座標を0にする====
	smap[pregoal_y][pregoal_x] = 0;
 8010864:	4b7d      	ldr	r3, [pc, #500]	; (8010a5c <make_smap2+0x234>)
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	4618      	mov	r0, r3
 801086a:	4b7d      	ldr	r3, [pc, #500]	; (8010a60 <make_smap2+0x238>)
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	4619      	mov	r1, r3
 8010870:	4a79      	ldr	r2, [pc, #484]	; (8010a58 <make_smap2+0x230>)
 8010872:	0103      	lsls	r3, r0, #4
 8010874:	440b      	add	r3, r1
 8010876:	2100      	movs	r1, #0
 8010878:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 801087c:	4b79      	ldr	r3, [pc, #484]	; (8010a64 <make_smap2+0x23c>)
 801087e:	2200      	movs	r2, #0
 8010880:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 8010882:	2303      	movs	r3, #3
 8010884:	60bb      	str	r3, [r7, #8]
	int turn = 5;
 8010886:	2305      	movs	r3, #5
 8010888:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 801088a:	2300      	movs	r3, #0
 801088c:	73bb      	strb	r3, [r7, #14]
 801088e:	e0c0      	b.n	8010a12 <make_smap2+0x1ea>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8010890:	2300      	movs	r3, #0
 8010892:	73fb      	strb	r3, [r7, #15]
 8010894:	e0b6      	b.n	8010a04 <make_smap2+0x1dc>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 8010896:	7bba      	ldrb	r2, [r7, #14]
 8010898:	7bfb      	ldrb	r3, [r7, #15]
 801089a:	496f      	ldr	r1, [pc, #444]	; (8010a58 <make_smap2+0x230>)
 801089c:	0112      	lsls	r2, r2, #4
 801089e:	4413      	add	r3, r2
 80108a0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80108a4:	4b6f      	ldr	r3, [pc, #444]	; (8010a64 <make_smap2+0x23c>)
 80108a6:	881b      	ldrh	r3, [r3, #0]
 80108a8:	429a      	cmp	r2, r3
 80108aa:	f040 80a8 	bne.w	80109fe <make_smap2+0x1d6>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 80108ae:	7bba      	ldrb	r2, [r7, #14]
 80108b0:	7bfb      	ldrb	r3, [r7, #15]
 80108b2:	496d      	ldr	r1, [pc, #436]	; (8010a68 <make_smap2+0x240>)
 80108b4:	0112      	lsls	r2, r2, #4
 80108b6:	440a      	add	r2, r1
 80108b8:	4413      	add	r3, r2
 80108ba:	781b      	ldrb	r3, [r3, #0]
 80108bc:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 80108be:	78fb      	ldrb	r3, [r7, #3]
 80108c0:	f003 0308 	and.w	r3, r3, #8
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d122      	bne.n	801090e <make_smap2+0xe6>
 80108c8:	7bbb      	ldrb	r3, [r7, #14]
 80108ca:	2b0f      	cmp	r3, #15
 80108cc:	d01f      	beq.n	801090e <make_smap2+0xe6>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 80108ce:	7bbb      	ldrb	r3, [r7, #14]
 80108d0:	1c5a      	adds	r2, r3, #1
 80108d2:	7bfb      	ldrb	r3, [r7, #15]
 80108d4:	4960      	ldr	r1, [pc, #384]	; (8010a58 <make_smap2+0x230>)
 80108d6:	0112      	lsls	r2, r2, #4
 80108d8:	4413      	add	r3, r2
 80108da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80108de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80108e2:	4293      	cmp	r3, r2
 80108e4:	d113      	bne.n	801090e <make_smap2+0xe6>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 80108e6:	7bba      	ldrb	r2, [r7, #14]
 80108e8:	7bfb      	ldrb	r3, [r7, #15]
 80108ea:	495b      	ldr	r1, [pc, #364]	; (8010a58 <make_smap2+0x230>)
 80108ec:	0112      	lsls	r2, r2, #4
 80108ee:	4413      	add	r3, r2
 80108f0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	b299      	uxth	r1, r3
 80108f8:	7bbb      	ldrb	r3, [r7, #14]
 80108fa:	1c5a      	adds	r2, r3, #1
 80108fc:	7bfb      	ldrb	r3, [r7, #15]
 80108fe:	4401      	add	r1, r0
 8010900:	b288      	uxth	r0, r1
 8010902:	4955      	ldr	r1, [pc, #340]	; (8010a58 <make_smap2+0x230>)
 8010904:	0112      	lsls	r2, r2, #4
 8010906:	4413      	add	r3, r2
 8010908:	4602      	mov	r2, r0
 801090a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 801090e:	78fb      	ldrb	r3, [r7, #3]
 8010910:	f003 0304 	and.w	r3, r3, #4
 8010914:	2b00      	cmp	r3, #0
 8010916:	d122      	bne.n	801095e <make_smap2+0x136>
 8010918:	7bfb      	ldrb	r3, [r7, #15]
 801091a:	2b0f      	cmp	r3, #15
 801091c:	d01f      	beq.n	801095e <make_smap2+0x136>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 801091e:	7bba      	ldrb	r2, [r7, #14]
 8010920:	7bfb      	ldrb	r3, [r7, #15]
 8010922:	3301      	adds	r3, #1
 8010924:	494c      	ldr	r1, [pc, #304]	; (8010a58 <make_smap2+0x230>)
 8010926:	0112      	lsls	r2, r2, #4
 8010928:	4413      	add	r3, r2
 801092a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801092e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010932:	4293      	cmp	r3, r2
 8010934:	d113      	bne.n	801095e <make_smap2+0x136>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010936:	7bba      	ldrb	r2, [r7, #14]
 8010938:	7bfb      	ldrb	r3, [r7, #15]
 801093a:	4947      	ldr	r1, [pc, #284]	; (8010a58 <make_smap2+0x230>)
 801093c:	0112      	lsls	r2, r2, #4
 801093e:	4413      	add	r3, r2
 8010940:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	b299      	uxth	r1, r3
 8010948:	7bba      	ldrb	r2, [r7, #14]
 801094a:	7bfb      	ldrb	r3, [r7, #15]
 801094c:	3301      	adds	r3, #1
 801094e:	4401      	add	r1, r0
 8010950:	b288      	uxth	r0, r1
 8010952:	4941      	ldr	r1, [pc, #260]	; (8010a58 <make_smap2+0x230>)
 8010954:	0112      	lsls	r2, r2, #4
 8010956:	4413      	add	r3, r2
 8010958:	4602      	mov	r2, r0
 801095a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 801095e:	78fb      	ldrb	r3, [r7, #3]
 8010960:	f003 0302 	and.w	r3, r3, #2
 8010964:	2b00      	cmp	r3, #0
 8010966:	d122      	bne.n	80109ae <make_smap2+0x186>
 8010968:	7bbb      	ldrb	r3, [r7, #14]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d01f      	beq.n	80109ae <make_smap2+0x186>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 801096e:	7bbb      	ldrb	r3, [r7, #14]
 8010970:	1e5a      	subs	r2, r3, #1
 8010972:	7bfb      	ldrb	r3, [r7, #15]
 8010974:	4938      	ldr	r1, [pc, #224]	; (8010a58 <make_smap2+0x230>)
 8010976:	0112      	lsls	r2, r2, #4
 8010978:	4413      	add	r3, r2
 801097a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801097e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010982:	4293      	cmp	r3, r2
 8010984:	d113      	bne.n	80109ae <make_smap2+0x186>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8010986:	7bba      	ldrb	r2, [r7, #14]
 8010988:	7bfb      	ldrb	r3, [r7, #15]
 801098a:	4933      	ldr	r1, [pc, #204]	; (8010a58 <make_smap2+0x230>)
 801098c:	0112      	lsls	r2, r2, #4
 801098e:	4413      	add	r3, r2
 8010990:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	b299      	uxth	r1, r3
 8010998:	7bbb      	ldrb	r3, [r7, #14]
 801099a:	1e5a      	subs	r2, r3, #1
 801099c:	7bfb      	ldrb	r3, [r7, #15]
 801099e:	4401      	add	r1, r0
 80109a0:	b288      	uxth	r0, r1
 80109a2:	492d      	ldr	r1, [pc, #180]	; (8010a58 <make_smap2+0x230>)
 80109a4:	0112      	lsls	r2, r2, #4
 80109a6:	4413      	add	r3, r2
 80109a8:	4602      	mov	r2, r0
 80109aa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 80109ae:	78fb      	ldrb	r3, [r7, #3]
 80109b0:	f003 0301 	and.w	r3, r3, #1
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d122      	bne.n	80109fe <make_smap2+0x1d6>
 80109b8:	7bfb      	ldrb	r3, [r7, #15]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d01f      	beq.n	80109fe <make_smap2+0x1d6>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 80109be:	7bba      	ldrb	r2, [r7, #14]
 80109c0:	7bfb      	ldrb	r3, [r7, #15]
 80109c2:	3b01      	subs	r3, #1
 80109c4:	4924      	ldr	r1, [pc, #144]	; (8010a58 <make_smap2+0x230>)
 80109c6:	0112      	lsls	r2, r2, #4
 80109c8:	4413      	add	r3, r2
 80109ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80109ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80109d2:	4293      	cmp	r3, r2
 80109d4:	d113      	bne.n	80109fe <make_smap2+0x1d6>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 80109d6:	7bba      	ldrb	r2, [r7, #14]
 80109d8:	7bfb      	ldrb	r3, [r7, #15]
 80109da:	491f      	ldr	r1, [pc, #124]	; (8010a58 <make_smap2+0x230>)
 80109dc:	0112      	lsls	r2, r2, #4
 80109de:	4413      	add	r3, r2
 80109e0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	b299      	uxth	r1, r3
 80109e8:	7bba      	ldrb	r2, [r7, #14]
 80109ea:	7bfb      	ldrb	r3, [r7, #15]
 80109ec:	3b01      	subs	r3, #1
 80109ee:	4401      	add	r1, r0
 80109f0:	b288      	uxth	r0, r1
 80109f2:	4919      	ldr	r1, [pc, #100]	; (8010a58 <make_smap2+0x230>)
 80109f4:	0112      	lsls	r2, r2, #4
 80109f6:	4413      	add	r3, r2
 80109f8:	4602      	mov	r2, r0
 80109fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 80109fe:	7bfb      	ldrb	r3, [r7, #15]
 8010a00:	3301      	adds	r3, #1
 8010a02:	73fb      	strb	r3, [r7, #15]
 8010a04:	7bfb      	ldrb	r3, [r7, #15]
 8010a06:	2b0f      	cmp	r3, #15
 8010a08:	f67f af45 	bls.w	8010896 <make_smap2+0x6e>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 8010a0c:	7bbb      	ldrb	r3, [r7, #14]
 8010a0e:	3301      	adds	r3, #1
 8010a10:	73bb      	strb	r3, [r7, #14]
 8010a12:	7bbb      	ldrb	r3, [r7, #14]
 8010a14:	2b0f      	cmp	r3, #15
 8010a16:	f67f af3b 	bls.w	8010890 <make_smap2+0x68>
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 8010a1a:	4b12      	ldr	r3, [pc, #72]	; (8010a64 <make_smap2+0x23c>)
 8010a1c:	881b      	ldrh	r3, [r3, #0]
 8010a1e:	3301      	adds	r3, #1
 8010a20:	b29a      	uxth	r2, r3
 8010a22:	4b10      	ldr	r3, [pc, #64]	; (8010a64 <make_smap2+0x23c>)
 8010a24:	801a      	strh	r2, [r3, #0]
	} while (smap[mouse.y][mouse.x] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
 8010a26:	4b11      	ldr	r3, [pc, #68]	; (8010a6c <make_smap2+0x244>)
 8010a28:	785b      	ldrb	r3, [r3, #1]
 8010a2a:	b2db      	uxtb	r3, r3
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	4b0f      	ldr	r3, [pc, #60]	; (8010a6c <make_smap2+0x244>)
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	b2db      	uxtb	r3, r3
 8010a34:	4619      	mov	r1, r3
 8010a36:	4a08      	ldr	r2, [pc, #32]	; (8010a58 <make_smap2+0x230>)
 8010a38:	0103      	lsls	r3, r0, #4
 8010a3a:	440b      	add	r3, r1
 8010a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010a44:	4293      	cmp	r3, r2
 8010a46:	f43f af20 	beq.w	801088a <make_smap2+0x62>
}
 8010a4a:	bf00      	nop
 8010a4c:	3714      	adds	r7, #20
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a54:	4770      	bx	lr
 8010a56:	bf00      	nop
 8010a58:	20000d60 	.word	0x20000d60
 8010a5c:	200012a1 	.word	0x200012a1
 8010a60:	20000d5c 	.word	0x20000d5c
 8010a64:	2000034e 	.word	0x2000034e
 8010a68:	200001ac 	.word	0x200001ac
 8010a6c:	20000c0c 	.word	0x20000c0c

08010a70 <pass_route2>:
//pass_route2
// route配列をpass圧縮する(半区画ベース)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route2(void){
 8010a70:	b480      	push	{r7}
 8010a72:	b083      	sub	sp, #12
 8010a74:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 8010a76:	2300      	movs	r3, #0
 8010a78:	70fb      	strb	r3, [r7, #3]
	for(i = 0; i < 256; i++){
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	607b      	str	r3, [r7, #4]
 8010a7e:	e007      	b.n	8010a90 <pass_route2+0x20>
		pass[i] = 0;								//pass配列の初期化
 8010a80:	4a83      	ldr	r2, [pc, #524]	; (8010c90 <pass_route2+0x220>)
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	4413      	add	r3, r2
 8010a86:	2200      	movs	r2, #0
 8010a88:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	3301      	adds	r3, #1
 8010a8e:	607b      	str	r3, [r7, #4]
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2bff      	cmp	r3, #255	; 0xff
 8010a94:	ddf4      	ble.n	8010a80 <pass_route2+0x10>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 8010a96:	2300      	movs	r3, #0
 8010a98:	70bb      	strb	r3, [r7, #2]
	i = 0;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 8010aa2:	e0e8      	b.n	8010c76 <pass_route2+0x206>
		s = 0;
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x44){
 8010aa8:	4a7a      	ldr	r2, [pc, #488]	; (8010c94 <pass_route2+0x224>)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	4413      	add	r3, r2
 8010aae:	781b      	ldrb	r3, [r3, #0]
 8010ab0:	2b44      	cmp	r3, #68	; 0x44
 8010ab2:	d107      	bne.n	8010ac4 <pass_route2+0x54>
			pass[p] = -1;							//a右スラローム
 8010ab4:	78bb      	ldrb	r3, [r7, #2]
 8010ab6:	4a76      	ldr	r2, [pc, #472]	; (8010c90 <pass_route2+0x220>)
 8010ab8:	21ff      	movs	r1, #255	; 0xff
 8010aba:	54d1      	strb	r1, [r2, r3]
			i++;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	3301      	adds	r3, #1
 8010ac0:	607b      	str	r3, [r7, #4]
 8010ac2:	e0d5      	b.n	8010c70 <pass_route2+0x200>
		}else if(route[i] == 0x11){
 8010ac4:	4a73      	ldr	r2, [pc, #460]	; (8010c94 <pass_route2+0x224>)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	4413      	add	r3, r2
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	2b11      	cmp	r3, #17
 8010ace:	d107      	bne.n	8010ae0 <pass_route2+0x70>
			pass[p] = -2;							//a左スラローム
 8010ad0:	78bb      	ldrb	r3, [r7, #2]
 8010ad2:	4a6f      	ldr	r2, [pc, #444]	; (8010c90 <pass_route2+0x220>)
 8010ad4:	21fe      	movs	r1, #254	; 0xfe
 8010ad6:	54d1      	strb	r1, [r2, r3]
			i++;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	3301      	adds	r3, #1
 8010adc:	607b      	str	r3, [r7, #4]
 8010ade:	e0c7      	b.n	8010c70 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 8010ae0:	4a6c      	ldr	r2, [pc, #432]	; (8010c94 <pass_route2+0x224>)
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	4413      	add	r3, r2
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	2b77      	cmp	r3, #119	; 0x77
 8010aea:	d115      	bne.n	8010b18 <pass_route2+0xa8>
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	3301      	adds	r3, #1
 8010af0:	4a68      	ldr	r2, [pc, #416]	; (8010c94 <pass_route2+0x224>)
 8010af2:	5cd3      	ldrb	r3, [r2, r3]
 8010af4:	2b44      	cmp	r3, #68	; 0x44
 8010af6:	d10f      	bne.n	8010b18 <pass_route2+0xa8>
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	3302      	adds	r3, #2
 8010afc:	4a65      	ldr	r2, [pc, #404]	; (8010c94 <pass_route2+0x224>)
 8010afe:	5cd3      	ldrb	r3, [r2, r3]
 8010b00:	2b77      	cmp	r3, #119	; 0x77
 8010b02:	d109      	bne.n	8010b18 <pass_route2+0xa8>
			s_flag = 0;
 8010b04:	2300      	movs	r3, #0
 8010b06:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右スラローム
 8010b08:	78bb      	ldrb	r3, [r7, #2]
 8010b0a:	4a61      	ldr	r2, [pc, #388]	; (8010c90 <pass_route2+0x220>)
 8010b0c:	21fd      	movs	r1, #253	; 0xfd
 8010b0e:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	3303      	adds	r3, #3
 8010b14:	607b      	str	r3, [r7, #4]
 8010b16:	e0ab      	b.n	8010c70 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 8010b18:	4a5e      	ldr	r2, [pc, #376]	; (8010c94 <pass_route2+0x224>)
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	4413      	add	r3, r2
 8010b1e:	781b      	ldrb	r3, [r3, #0]
 8010b20:	2b77      	cmp	r3, #119	; 0x77
 8010b22:	d115      	bne.n	8010b50 <pass_route2+0xe0>
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	3301      	adds	r3, #1
 8010b28:	4a5a      	ldr	r2, [pc, #360]	; (8010c94 <pass_route2+0x224>)
 8010b2a:	5cd3      	ldrb	r3, [r2, r3]
 8010b2c:	2b11      	cmp	r3, #17
 8010b2e:	d10f      	bne.n	8010b50 <pass_route2+0xe0>
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	3302      	adds	r3, #2
 8010b34:	4a57      	ldr	r2, [pc, #348]	; (8010c94 <pass_route2+0x224>)
 8010b36:	5cd3      	ldrb	r3, [r2, r3]
 8010b38:	2b77      	cmp	r3, #119	; 0x77
 8010b3a:	d109      	bne.n	8010b50 <pass_route2+0xe0>
			s_flag = 0;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左スラローム
 8010b40:	78bb      	ldrb	r3, [r7, #2]
 8010b42:	4a53      	ldr	r2, [pc, #332]	; (8010c90 <pass_route2+0x220>)
 8010b44:	21fc      	movs	r1, #252	; 0xfc
 8010b46:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	3303      	adds	r3, #3
 8010b4c:	607b      	str	r3, [r7, #4]
 8010b4e:	e08f      	b.n	8010c70 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 8010b50:	4a50      	ldr	r2, [pc, #320]	; (8010c94 <pass_route2+0x224>)
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	4413      	add	r3, r2
 8010b56:	781b      	ldrb	r3, [r3, #0]
 8010b58:	2b77      	cmp	r3, #119	; 0x77
 8010b5a:	d11b      	bne.n	8010b94 <pass_route2+0x124>
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	3301      	adds	r3, #1
 8010b60:	4a4c      	ldr	r2, [pc, #304]	; (8010c94 <pass_route2+0x224>)
 8010b62:	5cd3      	ldrb	r3, [r2, r3]
 8010b64:	2b44      	cmp	r3, #68	; 0x44
 8010b66:	d115      	bne.n	8010b94 <pass_route2+0x124>
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	3302      	adds	r3, #2
 8010b6c:	4a49      	ldr	r2, [pc, #292]	; (8010c94 <pass_route2+0x224>)
 8010b6e:	5cd3      	ldrb	r3, [r2, r3]
 8010b70:	2b44      	cmp	r3, #68	; 0x44
 8010b72:	d10f      	bne.n	8010b94 <pass_route2+0x124>
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	3303      	adds	r3, #3
 8010b78:	4a46      	ldr	r2, [pc, #280]	; (8010c94 <pass_route2+0x224>)
 8010b7a:	5cd3      	ldrb	r3, [r2, r3]
 8010b7c:	2b77      	cmp	r3, #119	; 0x77
 8010b7e:	d109      	bne.n	8010b94 <pass_route2+0x124>
			s_flag = 0;
 8010b80:	2300      	movs	r3, #0
 8010b82:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180スラローム
 8010b84:	78bb      	ldrb	r3, [r7, #2]
 8010b86:	4a42      	ldr	r2, [pc, #264]	; (8010c90 <pass_route2+0x220>)
 8010b88:	21fb      	movs	r1, #251	; 0xfb
 8010b8a:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	3304      	adds	r3, #4
 8010b90:	607b      	str	r3, [r7, #4]
 8010b92:	e06d      	b.n	8010c70 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 8010b94:	4a3f      	ldr	r2, [pc, #252]	; (8010c94 <pass_route2+0x224>)
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	4413      	add	r3, r2
 8010b9a:	781b      	ldrb	r3, [r3, #0]
 8010b9c:	2b77      	cmp	r3, #119	; 0x77
 8010b9e:	d11b      	bne.n	8010bd8 <pass_route2+0x168>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	4a3b      	ldr	r2, [pc, #236]	; (8010c94 <pass_route2+0x224>)
 8010ba6:	5cd3      	ldrb	r3, [r2, r3]
 8010ba8:	2b11      	cmp	r3, #17
 8010baa:	d115      	bne.n	8010bd8 <pass_route2+0x168>
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	3302      	adds	r3, #2
 8010bb0:	4a38      	ldr	r2, [pc, #224]	; (8010c94 <pass_route2+0x224>)
 8010bb2:	5cd3      	ldrb	r3, [r2, r3]
 8010bb4:	2b11      	cmp	r3, #17
 8010bb6:	d10f      	bne.n	8010bd8 <pass_route2+0x168>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	3303      	adds	r3, #3
 8010bbc:	4a35      	ldr	r2, [pc, #212]	; (8010c94 <pass_route2+0x224>)
 8010bbe:	5cd3      	ldrb	r3, [r2, r3]
 8010bc0:	2b77      	cmp	r3, #119	; 0x77
 8010bc2:	d109      	bne.n	8010bd8 <pass_route2+0x168>
			s_flag = 0;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180スラローム
 8010bc8:	78bb      	ldrb	r3, [r7, #2]
 8010bca:	4a31      	ldr	r2, [pc, #196]	; (8010c90 <pass_route2+0x220>)
 8010bcc:	21fa      	movs	r1, #250	; 0xfa
 8010bce:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	3304      	adds	r3, #4
 8010bd4:	607b      	str	r3, [r7, #4]
 8010bd6:	e04b      	b.n	8010c70 <pass_route2+0x200>
		}else if(route[i] == 0xff){
 8010bd8:	4a2e      	ldr	r2, [pc, #184]	; (8010c94 <pass_route2+0x224>)
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	4413      	add	r3, r2
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	2bff      	cmp	r3, #255	; 0xff
 8010be2:	d107      	bne.n	8010bf4 <pass_route2+0x184>
			pass[p] = -114;							//a終了条件用
 8010be4:	78bb      	ldrb	r3, [r7, #2]
 8010be6:	4a2a      	ldr	r2, [pc, #168]	; (8010c90 <pass_route2+0x220>)
 8010be8:	218e      	movs	r1, #142	; 0x8e
 8010bea:	54d1      	strb	r1, [r2, r3]
			i++;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	3301      	adds	r3, #1
 8010bf0:	607b      	str	r3, [r7, #4]
 8010bf2:	e03d      	b.n	8010c70 <pass_route2+0x200>
		}else if(route[i] == 0x77){
 8010bf4:	4a27      	ldr	r2, [pc, #156]	; (8010c94 <pass_route2+0x224>)
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	4413      	add	r3, r2
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	2b77      	cmp	r3, #119	; 0x77
 8010bfe:	d137      	bne.n	8010c70 <pass_route2+0x200>
			if(s_flag){
 8010c00:	78fb      	ldrb	r3, [r7, #3]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d012      	beq.n	8010c2c <pass_route2+0x1bc>
				pass[p-1]++;
 8010c06:	78bb      	ldrb	r3, [r7, #2]
 8010c08:	3b01      	subs	r3, #1
 8010c0a:	4a21      	ldr	r2, [pc, #132]	; (8010c90 <pass_route2+0x220>)
 8010c0c:	56d2      	ldrsb	r2, [r2, r3]
 8010c0e:	b2d2      	uxtb	r2, r2
 8010c10:	3201      	adds	r2, #1
 8010c12:	b2d2      	uxtb	r2, r2
 8010c14:	b251      	sxtb	r1, r2
 8010c16:	4a1e      	ldr	r2, [pc, #120]	; (8010c90 <pass_route2+0x220>)
 8010c18:	54d1      	strb	r1, [r2, r3]
				p--;
 8010c1a:	78bb      	ldrb	r3, [r7, #2]
 8010c1c:	3b01      	subs	r3, #1
 8010c1e:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 8010c20:	2300      	movs	r3, #0
 8010c22:	70fb      	strb	r3, [r7, #3]
				i++;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	3301      	adds	r3, #1
 8010c28:	607b      	str	r3, [r7, #4]
 8010c2a:	e021      	b.n	8010c70 <pass_route2+0x200>
			}else{
				s++;
 8010c2c:	787b      	ldrb	r3, [r7, #1]
 8010c2e:	3301      	adds	r3, #1
 8010c30:	707b      	strb	r3, [r7, #1]
				pass[p] = s;
 8010c32:	78bb      	ldrb	r3, [r7, #2]
 8010c34:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8010c38:	4a15      	ldr	r2, [pc, #84]	; (8010c90 <pass_route2+0x220>)
 8010c3a:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 8010c3c:	e00c      	b.n	8010c58 <pass_route2+0x1e8>
					s_flag = 1;
 8010c3e:	2301      	movs	r3, #1
 8010c40:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;
 8010c42:	78bb      	ldrb	r3, [r7, #2]
 8010c44:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8010c48:	4a11      	ldr	r2, [pc, #68]	; (8010c90 <pass_route2+0x220>)
 8010c4a:	54d1      	strb	r1, [r2, r3]
					i++;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	3301      	adds	r3, #1
 8010c50:	607b      	str	r3, [r7, #4]
					s++;
 8010c52:	787b      	ldrb	r3, [r7, #1]
 8010c54:	3301      	adds	r3, #1
 8010c56:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	3301      	adds	r3, #1
 8010c5c:	4a0d      	ldr	r2, [pc, #52]	; (8010c94 <pass_route2+0x224>)
 8010c5e:	5cd3      	ldrb	r3, [r2, r3]
 8010c60:	2b77      	cmp	r3, #119	; 0x77
 8010c62:	d0ec      	beq.n	8010c3e <pass_route2+0x1ce>
				}
				if(!s_flag){
 8010c64:	78fb      	ldrb	r3, [r7, #3]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d102      	bne.n	8010c70 <pass_route2+0x200>
					i++;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 8010c70:	78bb      	ldrb	r3, [r7, #2]
 8010c72:	3301      	adds	r3, #1
 8010c74:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	3b01      	subs	r3, #1
 8010c7a:	4a06      	ldr	r2, [pc, #24]	; (8010c94 <pass_route2+0x224>)
 8010c7c:	5cd3      	ldrb	r3, [r2, r3]
 8010c7e:	2bff      	cmp	r3, #255	; 0xff
 8010c80:	f47f af10 	bne.w	8010aa4 <pass_route2+0x34>
	}
}
 8010c84:	bf00      	nop
 8010c86:	370c      	adds	r7, #12
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8e:	4770      	bx	lr
 8010c90:	20000350 	.word	0x20000350
 8010c94:	20000c54 	.word	0x20000c54

08010c98 <pass_route3>:
//pass_route3
// route配列をpass圧縮する(半区画ベース+斜めあり)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route3(void){
 8010c98:	b480      	push	{r7}
 8010c9a:	b083      	sub	sp, #12
 8010c9c:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	70fb      	strb	r3, [r7, #3]
	MF2.FLAG.V = 0;										//a斜めフラグの初期化
 8010ca2:	4a98      	ldr	r2, [pc, #608]	; (8010f04 <pass_route3+0x26c>)
 8010ca4:	8813      	ldrh	r3, [r2, #0]
 8010ca6:	f36f 03c3 	bfc	r3, #3, #1
 8010caa:	8013      	strh	r3, [r2, #0]
	for(i = 0; i < 256; i++){
 8010cac:	2300      	movs	r3, #0
 8010cae:	607b      	str	r3, [r7, #4]
 8010cb0:	e007      	b.n	8010cc2 <pass_route3+0x2a>
		pass[i] = 0;								//pass配列の初期化
 8010cb2:	4a95      	ldr	r2, [pc, #596]	; (8010f08 <pass_route3+0x270>)
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	4413      	add	r3, r2
 8010cb8:	2200      	movs	r2, #0
 8010cba:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	3301      	adds	r3, #1
 8010cc0:	607b      	str	r3, [r7, #4]
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2bff      	cmp	r3, #255	; 0xff
 8010cc6:	ddf4      	ble.n	8010cb2 <pass_route3+0x1a>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 8010cc8:	2300      	movs	r3, #0
 8010cca:	70bb      	strb	r3, [r7, #2]
	i = 0;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 8010cd4:	e324      	b.n	8011320 <pass_route3+0x688>
		s = 0;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 8010cda:	4a8c      	ldr	r2, [pc, #560]	; (8010f0c <pass_route3+0x274>)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	4413      	add	r3, r2
 8010ce0:	781b      	ldrb	r3, [r3, #0]
 8010ce2:	2b77      	cmp	r3, #119	; 0x77
 8010ce4:	d11b      	bne.n	8010d1e <pass_route3+0x86>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	3301      	adds	r3, #1
 8010cea:	4a88      	ldr	r2, [pc, #544]	; (8010f0c <pass_route3+0x274>)
 8010cec:	5cd3      	ldrb	r3, [r2, r3]
 8010cee:	2b44      	cmp	r3, #68	; 0x44
 8010cf0:	d115      	bne.n	8010d1e <pass_route3+0x86>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	3302      	adds	r3, #2
 8010cf6:	4a85      	ldr	r2, [pc, #532]	; (8010f0c <pass_route3+0x274>)
 8010cf8:	5cd3      	ldrb	r3, [r2, r3]
 8010cfa:	2b77      	cmp	r3, #119	; 0x77
 8010cfc:	d10f      	bne.n	8010d1e <pass_route3+0x86>
			s_flag = 0;
 8010cfe:	2300      	movs	r3, #0
 8010d00:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右90
 8010d02:	78bb      	ldrb	r3, [r7, #2]
 8010d04:	4a80      	ldr	r2, [pc, #512]	; (8010f08 <pass_route3+0x270>)
 8010d06:	21fd      	movs	r1, #253	; 0xfd
 8010d08:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d102      	bne.n	8010d16 <pass_route3+0x7e>
				start_mode = 2;
 8010d10:	4b7f      	ldr	r3, [pc, #508]	; (8010f10 <pass_route3+0x278>)
 8010d12:	2202      	movs	r2, #2
 8010d14:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	3303      	adds	r3, #3
 8010d1a:	607b      	str	r3, [r7, #4]
 8010d1c:	e2fd      	b.n	801131a <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 8010d1e:	4a7b      	ldr	r2, [pc, #492]	; (8010f0c <pass_route3+0x274>)
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	4413      	add	r3, r2
 8010d24:	781b      	ldrb	r3, [r3, #0]
 8010d26:	2b77      	cmp	r3, #119	; 0x77
 8010d28:	d11b      	bne.n	8010d62 <pass_route3+0xca>
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	4a77      	ldr	r2, [pc, #476]	; (8010f0c <pass_route3+0x274>)
 8010d30:	5cd3      	ldrb	r3, [r2, r3]
 8010d32:	2b11      	cmp	r3, #17
 8010d34:	d115      	bne.n	8010d62 <pass_route3+0xca>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	3302      	adds	r3, #2
 8010d3a:	4a74      	ldr	r2, [pc, #464]	; (8010f0c <pass_route3+0x274>)
 8010d3c:	5cd3      	ldrb	r3, [r2, r3]
 8010d3e:	2b77      	cmp	r3, #119	; 0x77
 8010d40:	d10f      	bne.n	8010d62 <pass_route3+0xca>
			s_flag = 0;
 8010d42:	2300      	movs	r3, #0
 8010d44:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左90
 8010d46:	78bb      	ldrb	r3, [r7, #2]
 8010d48:	4a6f      	ldr	r2, [pc, #444]	; (8010f08 <pass_route3+0x270>)
 8010d4a:	21fc      	movs	r1, #252	; 0xfc
 8010d4c:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d102      	bne.n	8010d5a <pass_route3+0xc2>
				start_mode = 2;
 8010d54:	4b6e      	ldr	r3, [pc, #440]	; (8010f10 <pass_route3+0x278>)
 8010d56:	2202      	movs	r2, #2
 8010d58:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	3303      	adds	r3, #3
 8010d5e:	607b      	str	r3, [r7, #4]
 8010d60:	e2db      	b.n	801131a <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 8010d62:	4a6a      	ldr	r2, [pc, #424]	; (8010f0c <pass_route3+0x274>)
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	4413      	add	r3, r2
 8010d68:	781b      	ldrb	r3, [r3, #0]
 8010d6a:	2b77      	cmp	r3, #119	; 0x77
 8010d6c:	d11b      	bne.n	8010da6 <pass_route3+0x10e>
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	3301      	adds	r3, #1
 8010d72:	4a66      	ldr	r2, [pc, #408]	; (8010f0c <pass_route3+0x274>)
 8010d74:	5cd3      	ldrb	r3, [r2, r3]
 8010d76:	2b44      	cmp	r3, #68	; 0x44
 8010d78:	d115      	bne.n	8010da6 <pass_route3+0x10e>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	3302      	adds	r3, #2
 8010d7e:	4a63      	ldr	r2, [pc, #396]	; (8010f0c <pass_route3+0x274>)
 8010d80:	5cd3      	ldrb	r3, [r2, r3]
 8010d82:	2b44      	cmp	r3, #68	; 0x44
 8010d84:	d10f      	bne.n	8010da6 <pass_route3+0x10e>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	3303      	adds	r3, #3
 8010d8a:	4a60      	ldr	r2, [pc, #384]	; (8010f0c <pass_route3+0x274>)
 8010d8c:	5cd3      	ldrb	r3, [r2, r3]
 8010d8e:	2b77      	cmp	r3, #119	; 0x77
 8010d90:	d109      	bne.n	8010da6 <pass_route3+0x10e>
			s_flag = 0;
 8010d92:	2300      	movs	r3, #0
 8010d94:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180
 8010d96:	78bb      	ldrb	r3, [r7, #2]
 8010d98:	4a5b      	ldr	r2, [pc, #364]	; (8010f08 <pass_route3+0x270>)
 8010d9a:	21fb      	movs	r1, #251	; 0xfb
 8010d9c:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	3304      	adds	r3, #4
 8010da2:	607b      	str	r3, [r7, #4]
 8010da4:	e2b9      	b.n	801131a <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 8010da6:	4a59      	ldr	r2, [pc, #356]	; (8010f0c <pass_route3+0x274>)
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	4413      	add	r3, r2
 8010dac:	781b      	ldrb	r3, [r3, #0]
 8010dae:	2b77      	cmp	r3, #119	; 0x77
 8010db0:	d11b      	bne.n	8010dea <pass_route3+0x152>
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	3301      	adds	r3, #1
 8010db6:	4a55      	ldr	r2, [pc, #340]	; (8010f0c <pass_route3+0x274>)
 8010db8:	5cd3      	ldrb	r3, [r2, r3]
 8010dba:	2b11      	cmp	r3, #17
 8010dbc:	d115      	bne.n	8010dea <pass_route3+0x152>
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	3302      	adds	r3, #2
 8010dc2:	4a52      	ldr	r2, [pc, #328]	; (8010f0c <pass_route3+0x274>)
 8010dc4:	5cd3      	ldrb	r3, [r2, r3]
 8010dc6:	2b11      	cmp	r3, #17
 8010dc8:	d10f      	bne.n	8010dea <pass_route3+0x152>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	3303      	adds	r3, #3
 8010dce:	4a4f      	ldr	r2, [pc, #316]	; (8010f0c <pass_route3+0x274>)
 8010dd0:	5cd3      	ldrb	r3, [r2, r3]
 8010dd2:	2b77      	cmp	r3, #119	; 0x77
 8010dd4:	d109      	bne.n	8010dea <pass_route3+0x152>
			s_flag = 0;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180
 8010dda:	78bb      	ldrb	r3, [r7, #2]
 8010ddc:	4a4a      	ldr	r2, [pc, #296]	; (8010f08 <pass_route3+0x270>)
 8010dde:	21fa      	movs	r1, #250	; 0xfa
 8010de0:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	3304      	adds	r3, #4
 8010de6:	607b      	str	r3, [r7, #4]
 8010de8:	e297      	b.n	801131a <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x11){
 8010dea:	4a48      	ldr	r2, [pc, #288]	; (8010f0c <pass_route3+0x274>)
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	4413      	add	r3, r2
 8010df0:	781b      	ldrb	r3, [r3, #0]
 8010df2:	2b77      	cmp	r3, #119	; 0x77
 8010df4:	d120      	bne.n	8010e38 <pass_route3+0x1a0>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	3301      	adds	r3, #1
 8010dfa:	4a44      	ldr	r2, [pc, #272]	; (8010f0c <pass_route3+0x274>)
 8010dfc:	5cd3      	ldrb	r3, [r2, r3]
 8010dfe:	2b44      	cmp	r3, #68	; 0x44
 8010e00:	d11a      	bne.n	8010e38 <pass_route3+0x1a0>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	3302      	adds	r3, #2
 8010e06:	4a41      	ldr	r2, [pc, #260]	; (8010f0c <pass_route3+0x274>)
 8010e08:	5cd3      	ldrb	r3, [r2, r3]
 8010e0a:	2b11      	cmp	r3, #17
 8010e0c:	d114      	bne.n	8010e38 <pass_route3+0x1a0>
			s_flag = 0;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45in
 8010e12:	78bb      	ldrb	r3, [r7, #2]
 8010e14:	4a3c      	ldr	r2, [pc, #240]	; (8010f08 <pass_route3+0x270>)
 8010e16:	21f9      	movs	r1, #249	; 0xf9
 8010e18:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8010e1a:	4a3a      	ldr	r2, [pc, #232]	; (8010f04 <pass_route3+0x26c>)
 8010e1c:	8813      	ldrh	r3, [r2, #0]
 8010e1e:	f043 0308 	orr.w	r3, r3, #8
 8010e22:	8013      	strh	r3, [r2, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d102      	bne.n	8010e30 <pass_route3+0x198>
				start_mode = 2;
 8010e2a:	4b39      	ldr	r3, [pc, #228]	; (8010f10 <pass_route3+0x278>)
 8010e2c:	2202      	movs	r2, #2
 8010e2e:	701a      	strb	r2, [r3, #0]
			}
			i = i + 2;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	3302      	adds	r3, #2
 8010e34:	607b      	str	r3, [r7, #4]
 8010e36:	e270      	b.n	801131a <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x77){
 8010e38:	4b32      	ldr	r3, [pc, #200]	; (8010f04 <pass_route3+0x26c>)
 8010e3a:	881b      	ldrh	r3, [r3, #0]
 8010e3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010e40:	b2db      	uxtb	r3, r3
 8010e42:	2b01      	cmp	r3, #1
 8010e44:	d11a      	bne.n	8010e7c <pass_route3+0x1e4>
 8010e46:	4a31      	ldr	r2, [pc, #196]	; (8010f0c <pass_route3+0x274>)
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	4413      	add	r3, r2
 8010e4c:	781b      	ldrb	r3, [r3, #0]
 8010e4e:	2b44      	cmp	r3, #68	; 0x44
 8010e50:	d114      	bne.n	8010e7c <pass_route3+0x1e4>
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	3301      	adds	r3, #1
 8010e56:	4a2d      	ldr	r2, [pc, #180]	; (8010f0c <pass_route3+0x274>)
 8010e58:	5cd3      	ldrb	r3, [r2, r3]
 8010e5a:	2b77      	cmp	r3, #119	; 0x77
 8010e5c:	d10e      	bne.n	8010e7c <pass_route3+0x1e4>
			s_flag = 0;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45out
 8010e62:	78bb      	ldrb	r3, [r7, #2]
 8010e64:	4a28      	ldr	r2, [pc, #160]	; (8010f08 <pass_route3+0x270>)
 8010e66:	21f9      	movs	r1, #249	; 0xf9
 8010e68:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 8010e6a:	4a26      	ldr	r2, [pc, #152]	; (8010f04 <pass_route3+0x26c>)
 8010e6c:	8813      	ldrh	r3, [r2, #0]
 8010e6e:	f36f 03c3 	bfc	r3, #3, #1
 8010e72:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	3302      	adds	r3, #2
 8010e78:	607b      	str	r3, [r7, #4]
 8010e7a:	e24e      	b.n	801131a <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x44){
 8010e7c:	4a23      	ldr	r2, [pc, #140]	; (8010f0c <pass_route3+0x274>)
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	4413      	add	r3, r2
 8010e82:	781b      	ldrb	r3, [r3, #0]
 8010e84:	2b77      	cmp	r3, #119	; 0x77
 8010e86:	d11a      	bne.n	8010ebe <pass_route3+0x226>
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	4a1f      	ldr	r2, [pc, #124]	; (8010f0c <pass_route3+0x274>)
 8010e8e:	5cd3      	ldrb	r3, [r2, r3]
 8010e90:	2b11      	cmp	r3, #17
 8010e92:	d114      	bne.n	8010ebe <pass_route3+0x226>
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	3302      	adds	r3, #2
 8010e98:	4a1c      	ldr	r2, [pc, #112]	; (8010f0c <pass_route3+0x274>)
 8010e9a:	5cd3      	ldrb	r3, [r2, r3]
 8010e9c:	2b44      	cmp	r3, #68	; 0x44
 8010e9e:	d10e      	bne.n	8010ebe <pass_route3+0x226>
			s_flag = 0;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45in
 8010ea4:	78bb      	ldrb	r3, [r7, #2]
 8010ea6:	4a18      	ldr	r2, [pc, #96]	; (8010f08 <pass_route3+0x270>)
 8010ea8:	21f8      	movs	r1, #248	; 0xf8
 8010eaa:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8010eac:	4a15      	ldr	r2, [pc, #84]	; (8010f04 <pass_route3+0x26c>)
 8010eae:	8813      	ldrh	r3, [r2, #0]
 8010eb0:	f043 0308 	orr.w	r3, r3, #8
 8010eb4:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	3302      	adds	r3, #2
 8010eba:	607b      	str	r3, [r7, #4]
 8010ebc:	e22d      	b.n	801131a <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x77){
 8010ebe:	4b11      	ldr	r3, [pc, #68]	; (8010f04 <pass_route3+0x26c>)
 8010ec0:	881b      	ldrh	r3, [r3, #0]
 8010ec2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010ec6:	b2db      	uxtb	r3, r3
 8010ec8:	2b01      	cmp	r3, #1
 8010eca:	d123      	bne.n	8010f14 <pass_route3+0x27c>
 8010ecc:	4a0f      	ldr	r2, [pc, #60]	; (8010f0c <pass_route3+0x274>)
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	4413      	add	r3, r2
 8010ed2:	781b      	ldrb	r3, [r3, #0]
 8010ed4:	2b11      	cmp	r3, #17
 8010ed6:	d11d      	bne.n	8010f14 <pass_route3+0x27c>
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	3301      	adds	r3, #1
 8010edc:	4a0b      	ldr	r2, [pc, #44]	; (8010f0c <pass_route3+0x274>)
 8010ede:	5cd3      	ldrb	r3, [r2, r3]
 8010ee0:	2b77      	cmp	r3, #119	; 0x77
 8010ee2:	d117      	bne.n	8010f14 <pass_route3+0x27c>
			s_flag = 0;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45out
 8010ee8:	78bb      	ldrb	r3, [r7, #2]
 8010eea:	4a07      	ldr	r2, [pc, #28]	; (8010f08 <pass_route3+0x270>)
 8010eec:	21f8      	movs	r1, #248	; 0xf8
 8010eee:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 8010ef0:	4a04      	ldr	r2, [pc, #16]	; (8010f04 <pass_route3+0x26c>)
 8010ef2:	8813      	ldrh	r3, [r2, #0]
 8010ef4:	f36f 03c3 	bfc	r3, #3, #1
 8010ef8:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	3302      	adds	r3, #2
 8010efe:	607b      	str	r3, [r7, #4]
 8010f00:	e20b      	b.n	801131a <pass_route3+0x682>
 8010f02:	bf00      	nop
 8010f04:	20000f64 	.word	0x20000f64
 8010f08:	20000350 	.word	0x20000350
 8010f0c:	20000c54 	.word	0x20000c54
 8010f10:	200015c8 	.word	0x200015c8
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x11){
 8010f14:	4b99      	ldr	r3, [pc, #612]	; (801117c <pass_route3+0x4e4>)
 8010f16:	881b      	ldrh	r3, [r3, #0]
 8010f18:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010f1c:	b2db      	uxtb	r3, r3
 8010f1e:	2b01      	cmp	r3, #1
 8010f20:	d120      	bne.n	8010f64 <pass_route3+0x2cc>
 8010f22:	4a97      	ldr	r2, [pc, #604]	; (8011180 <pass_route3+0x4e8>)
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	4413      	add	r3, r2
 8010f28:	781b      	ldrb	r3, [r3, #0]
 8010f2a:	2b44      	cmp	r3, #68	; 0x44
 8010f2c:	d11a      	bne.n	8010f64 <pass_route3+0x2cc>
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	3301      	adds	r3, #1
 8010f32:	4a93      	ldr	r2, [pc, #588]	; (8011180 <pass_route3+0x4e8>)
 8010f34:	5cd3      	ldrb	r3, [r2, r3]
 8010f36:	2b44      	cmp	r3, #68	; 0x44
 8010f38:	d114      	bne.n	8010f64 <pass_route3+0x2cc>
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	3302      	adds	r3, #2
 8010f3e:	4a90      	ldr	r2, [pc, #576]	; (8011180 <pass_route3+0x4e8>)
 8010f40:	5cd3      	ldrb	r3, [r2, r3]
 8010f42:	2b11      	cmp	r3, #17
 8010f44:	d10e      	bne.n	8010f64 <pass_route3+0x2cc>
			s_flag = 0;
 8010f46:	2300      	movs	r3, #0
 8010f48:	70fb      	strb	r3, [r7, #3]
			pass[p] = -9;							//a斜め右V90
 8010f4a:	78bb      	ldrb	r3, [r7, #2]
 8010f4c:	4a8d      	ldr	r2, [pc, #564]	; (8011184 <pass_route3+0x4ec>)
 8010f4e:	21f7      	movs	r1, #247	; 0xf7
 8010f50:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8010f52:	4a8a      	ldr	r2, [pc, #552]	; (801117c <pass_route3+0x4e4>)
 8010f54:	8813      	ldrh	r3, [r2, #0]
 8010f56:	f043 0308 	orr.w	r3, r3, #8
 8010f5a:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	3302      	adds	r3, #2
 8010f60:	607b      	str	r3, [r7, #4]
 8010f62:	e1da      	b.n	801131a <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x44){
 8010f64:	4b85      	ldr	r3, [pc, #532]	; (801117c <pass_route3+0x4e4>)
 8010f66:	881b      	ldrh	r3, [r3, #0]
 8010f68:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010f6c:	b2db      	uxtb	r3, r3
 8010f6e:	2b01      	cmp	r3, #1
 8010f70:	d120      	bne.n	8010fb4 <pass_route3+0x31c>
 8010f72:	4a83      	ldr	r2, [pc, #524]	; (8011180 <pass_route3+0x4e8>)
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	4413      	add	r3, r2
 8010f78:	781b      	ldrb	r3, [r3, #0]
 8010f7a:	2b11      	cmp	r3, #17
 8010f7c:	d11a      	bne.n	8010fb4 <pass_route3+0x31c>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	3301      	adds	r3, #1
 8010f82:	4a7f      	ldr	r2, [pc, #508]	; (8011180 <pass_route3+0x4e8>)
 8010f84:	5cd3      	ldrb	r3, [r2, r3]
 8010f86:	2b11      	cmp	r3, #17
 8010f88:	d114      	bne.n	8010fb4 <pass_route3+0x31c>
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	3302      	adds	r3, #2
 8010f8e:	4a7c      	ldr	r2, [pc, #496]	; (8011180 <pass_route3+0x4e8>)
 8010f90:	5cd3      	ldrb	r3, [r2, r3]
 8010f92:	2b44      	cmp	r3, #68	; 0x44
 8010f94:	d10e      	bne.n	8010fb4 <pass_route3+0x31c>
			s_flag = 0;
 8010f96:	2300      	movs	r3, #0
 8010f98:	70fb      	strb	r3, [r7, #3]
			pass[p] = -10;							//a斜め左V90
 8010f9a:	78bb      	ldrb	r3, [r7, #2]
 8010f9c:	4a79      	ldr	r2, [pc, #484]	; (8011184 <pass_route3+0x4ec>)
 8010f9e:	21f6      	movs	r1, #246	; 0xf6
 8010fa0:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8010fa2:	4a76      	ldr	r2, [pc, #472]	; (801117c <pass_route3+0x4e4>)
 8010fa4:	8813      	ldrh	r3, [r2, #0]
 8010fa6:	f043 0308 	orr.w	r3, r3, #8
 8010faa:	8013      	strh	r3, [r2, #0]
			i = i + 2;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	3302      	adds	r3, #2
 8010fb0:	607b      	str	r3, [r7, #4]
 8010fb2:	e1b2      	b.n	801131a <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x11){
 8010fb4:	4a72      	ldr	r2, [pc, #456]	; (8011180 <pass_route3+0x4e8>)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	4413      	add	r3, r2
 8010fba:	781b      	ldrb	r3, [r3, #0]
 8010fbc:	2b77      	cmp	r3, #119	; 0x77
 8010fbe:	d126      	bne.n	801100e <pass_route3+0x376>
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	3301      	adds	r3, #1
 8010fc4:	4a6e      	ldr	r2, [pc, #440]	; (8011180 <pass_route3+0x4e8>)
 8010fc6:	5cd3      	ldrb	r3, [r2, r3]
 8010fc8:	2b44      	cmp	r3, #68	; 0x44
 8010fca:	d120      	bne.n	801100e <pass_route3+0x376>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	3302      	adds	r3, #2
 8010fd0:	4a6b      	ldr	r2, [pc, #428]	; (8011180 <pass_route3+0x4e8>)
 8010fd2:	5cd3      	ldrb	r3, [r2, r3]
 8010fd4:	2b44      	cmp	r3, #68	; 0x44
 8010fd6:	d11a      	bne.n	801100e <pass_route3+0x376>
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	3303      	adds	r3, #3
 8010fdc:	4a68      	ldr	r2, [pc, #416]	; (8011180 <pass_route3+0x4e8>)
 8010fde:	5cd3      	ldrb	r3, [r2, r3]
 8010fe0:	2b11      	cmp	r3, #17
 8010fe2:	d114      	bne.n	801100e <pass_route3+0x376>
			s_flag = 0;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135in
 8010fe8:	78bb      	ldrb	r3, [r7, #2]
 8010fea:	4a66      	ldr	r2, [pc, #408]	; (8011184 <pass_route3+0x4ec>)
 8010fec:	21f5      	movs	r1, #245	; 0xf5
 8010fee:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8010ff0:	4a62      	ldr	r2, [pc, #392]	; (801117c <pass_route3+0x4e4>)
 8010ff2:	8813      	ldrh	r3, [r2, #0]
 8010ff4:	f043 0308 	orr.w	r3, r3, #8
 8010ff8:	8013      	strh	r3, [r2, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d102      	bne.n	8011006 <pass_route3+0x36e>
				start_mode = 2;
 8011000:	4b61      	ldr	r3, [pc, #388]	; (8011188 <pass_route3+0x4f0>)
 8011002:	2202      	movs	r2, #2
 8011004:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	3303      	adds	r3, #3
 801100a:	607b      	str	r3, [r7, #4]
 801100c:	e185      	b.n	801131a <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x77){
 801100e:	4b5b      	ldr	r3, [pc, #364]	; (801117c <pass_route3+0x4e4>)
 8011010:	881b      	ldrh	r3, [r3, #0]
 8011012:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011016:	b2db      	uxtb	r3, r3
 8011018:	2b01      	cmp	r3, #1
 801101a:	d120      	bne.n	801105e <pass_route3+0x3c6>
 801101c:	4a58      	ldr	r2, [pc, #352]	; (8011180 <pass_route3+0x4e8>)
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	4413      	add	r3, r2
 8011022:	781b      	ldrb	r3, [r3, #0]
 8011024:	2b44      	cmp	r3, #68	; 0x44
 8011026:	d11a      	bne.n	801105e <pass_route3+0x3c6>
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	3301      	adds	r3, #1
 801102c:	4a54      	ldr	r2, [pc, #336]	; (8011180 <pass_route3+0x4e8>)
 801102e:	5cd3      	ldrb	r3, [r2, r3]
 8011030:	2b44      	cmp	r3, #68	; 0x44
 8011032:	d114      	bne.n	801105e <pass_route3+0x3c6>
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	3302      	adds	r3, #2
 8011038:	4a51      	ldr	r2, [pc, #324]	; (8011180 <pass_route3+0x4e8>)
 801103a:	5cd3      	ldrb	r3, [r2, r3]
 801103c:	2b77      	cmp	r3, #119	; 0x77
 801103e:	d10e      	bne.n	801105e <pass_route3+0x3c6>
			s_flag = 0;
 8011040:	2300      	movs	r3, #0
 8011042:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135out
 8011044:	78bb      	ldrb	r3, [r7, #2]
 8011046:	4a4f      	ldr	r2, [pc, #316]	; (8011184 <pass_route3+0x4ec>)
 8011048:	21f5      	movs	r1, #245	; 0xf5
 801104a:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 801104c:	4a4b      	ldr	r2, [pc, #300]	; (801117c <pass_route3+0x4e4>)
 801104e:	8813      	ldrh	r3, [r2, #0]
 8011050:	f36f 03c3 	bfc	r3, #3, #1
 8011054:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	3303      	adds	r3, #3
 801105a:	607b      	str	r3, [r7, #4]
 801105c:	e15d      	b.n	801131a <pass_route3+0x682>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x44){
 801105e:	4a48      	ldr	r2, [pc, #288]	; (8011180 <pass_route3+0x4e8>)
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	4413      	add	r3, r2
 8011064:	781b      	ldrb	r3, [r3, #0]
 8011066:	2b77      	cmp	r3, #119	; 0x77
 8011068:	d120      	bne.n	80110ac <pass_route3+0x414>
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	3301      	adds	r3, #1
 801106e:	4a44      	ldr	r2, [pc, #272]	; (8011180 <pass_route3+0x4e8>)
 8011070:	5cd3      	ldrb	r3, [r2, r3]
 8011072:	2b11      	cmp	r3, #17
 8011074:	d11a      	bne.n	80110ac <pass_route3+0x414>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	3302      	adds	r3, #2
 801107a:	4a41      	ldr	r2, [pc, #260]	; (8011180 <pass_route3+0x4e8>)
 801107c:	5cd3      	ldrb	r3, [r2, r3]
 801107e:	2b11      	cmp	r3, #17
 8011080:	d114      	bne.n	80110ac <pass_route3+0x414>
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	3303      	adds	r3, #3
 8011086:	4a3e      	ldr	r2, [pc, #248]	; (8011180 <pass_route3+0x4e8>)
 8011088:	5cd3      	ldrb	r3, [r2, r3]
 801108a:	2b44      	cmp	r3, #68	; 0x44
 801108c:	d10e      	bne.n	80110ac <pass_route3+0x414>
			s_flag = 0;
 801108e:	2300      	movs	r3, #0
 8011090:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135in
 8011092:	78bb      	ldrb	r3, [r7, #2]
 8011094:	4a3b      	ldr	r2, [pc, #236]	; (8011184 <pass_route3+0x4ec>)
 8011096:	21f4      	movs	r1, #244	; 0xf4
 8011098:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 801109a:	4a38      	ldr	r2, [pc, #224]	; (801117c <pass_route3+0x4e4>)
 801109c:	8813      	ldrh	r3, [r2, #0]
 801109e:	f043 0308 	orr.w	r3, r3, #8
 80110a2:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	3303      	adds	r3, #3
 80110a8:	607b      	str	r3, [r7, #4]
 80110aa:	e136      	b.n	801131a <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x77){
 80110ac:	4b33      	ldr	r3, [pc, #204]	; (801117c <pass_route3+0x4e4>)
 80110ae:	881b      	ldrh	r3, [r3, #0]
 80110b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80110b4:	b2db      	uxtb	r3, r3
 80110b6:	2b01      	cmp	r3, #1
 80110b8:	d120      	bne.n	80110fc <pass_route3+0x464>
 80110ba:	4a31      	ldr	r2, [pc, #196]	; (8011180 <pass_route3+0x4e8>)
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	4413      	add	r3, r2
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	2b11      	cmp	r3, #17
 80110c4:	d11a      	bne.n	80110fc <pass_route3+0x464>
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	3301      	adds	r3, #1
 80110ca:	4a2d      	ldr	r2, [pc, #180]	; (8011180 <pass_route3+0x4e8>)
 80110cc:	5cd3      	ldrb	r3, [r2, r3]
 80110ce:	2b11      	cmp	r3, #17
 80110d0:	d114      	bne.n	80110fc <pass_route3+0x464>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	3302      	adds	r3, #2
 80110d6:	4a2a      	ldr	r2, [pc, #168]	; (8011180 <pass_route3+0x4e8>)
 80110d8:	5cd3      	ldrb	r3, [r2, r3]
 80110da:	2b77      	cmp	r3, #119	; 0x77
 80110dc:	d10e      	bne.n	80110fc <pass_route3+0x464>
			s_flag = 0;
 80110de:	2300      	movs	r3, #0
 80110e0:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135out
 80110e2:	78bb      	ldrb	r3, [r7, #2]
 80110e4:	4a27      	ldr	r2, [pc, #156]	; (8011184 <pass_route3+0x4ec>)
 80110e6:	21f4      	movs	r1, #244	; 0xf4
 80110e8:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 0;
 80110ea:	4a24      	ldr	r2, [pc, #144]	; (801117c <pass_route3+0x4e4>)
 80110ec:	8813      	ldrh	r3, [r2, #0]
 80110ee:	f36f 03c3 	bfc	r3, #3, #1
 80110f2:	8013      	strh	r3, [r2, #0]
			i = i + 3;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	3303      	adds	r3, #3
 80110f8:	607b      	str	r3, [r7, #4]
 80110fa:	e10e      	b.n	801131a <pass_route3+0x682>
		}else if(route[i] == 0xff){
 80110fc:	4a20      	ldr	r2, [pc, #128]	; (8011180 <pass_route3+0x4e8>)
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	4413      	add	r3, r2
 8011102:	781b      	ldrb	r3, [r3, #0]
 8011104:	2bff      	cmp	r3, #255	; 0xff
 8011106:	d16a      	bne.n	80111de <pass_route3+0x546>
			if(MF2.FLAG.V == 1){
 8011108:	4b1c      	ldr	r3, [pc, #112]	; (801117c <pass_route3+0x4e4>)
 801110a:	881b      	ldrh	r3, [r3, #0]
 801110c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011110:	b2db      	uxtb	r3, r3
 8011112:	2b01      	cmp	r3, #1
 8011114:	d15b      	bne.n	80111ce <pass_route3+0x536>
				if(pass[p-1] == -1 && pass[p-2] == -1){
 8011116:	78bb      	ldrb	r3, [r7, #2]
 8011118:	3b01      	subs	r3, #1
 801111a:	4a1a      	ldr	r2, [pc, #104]	; (8011184 <pass_route3+0x4ec>)
 801111c:	56d3      	ldrsb	r3, [r2, r3]
 801111e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011122:	d111      	bne.n	8011148 <pass_route3+0x4b0>
 8011124:	78bb      	ldrb	r3, [r7, #2]
 8011126:	3b02      	subs	r3, #2
 8011128:	4a16      	ldr	r2, [pc, #88]	; (8011184 <pass_route3+0x4ec>)
 801112a:	56d3      	ldrsb	r3, [r2, r3]
 801112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011130:	d10a      	bne.n	8011148 <pass_route3+0x4b0>
					pass[p-2] = -15;
 8011132:	78bb      	ldrb	r3, [r7, #2]
 8011134:	3b02      	subs	r3, #2
 8011136:	4a13      	ldr	r2, [pc, #76]	; (8011184 <pass_route3+0x4ec>)
 8011138:	21f1      	movs	r1, #241	; 0xf1
 801113a:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 801113c:	78bb      	ldrb	r3, [r7, #2]
 801113e:	3b01      	subs	r3, #1
 8011140:	4a10      	ldr	r2, [pc, #64]	; (8011184 <pass_route3+0x4ec>)
 8011142:	218e      	movs	r1, #142	; 0x8e
 8011144:	54d1      	strb	r1, [r2, r3]
 8011146:	e042      	b.n	80111ce <pass_route3+0x536>
				}else if(pass[p-1] == -2 && pass[p-2] == -2){
 8011148:	78bb      	ldrb	r3, [r7, #2]
 801114a:	3b01      	subs	r3, #1
 801114c:	4a0d      	ldr	r2, [pc, #52]	; (8011184 <pass_route3+0x4ec>)
 801114e:	56d3      	ldrsb	r3, [r2, r3]
 8011150:	f113 0f02 	cmn.w	r3, #2
 8011154:	d11a      	bne.n	801118c <pass_route3+0x4f4>
 8011156:	78bb      	ldrb	r3, [r7, #2]
 8011158:	3b02      	subs	r3, #2
 801115a:	4a0a      	ldr	r2, [pc, #40]	; (8011184 <pass_route3+0x4ec>)
 801115c:	56d3      	ldrsb	r3, [r2, r3]
 801115e:	f113 0f02 	cmn.w	r3, #2
 8011162:	d113      	bne.n	801118c <pass_route3+0x4f4>
					pass[p-2] = -16;
 8011164:	78bb      	ldrb	r3, [r7, #2]
 8011166:	3b02      	subs	r3, #2
 8011168:	4a06      	ldr	r2, [pc, #24]	; (8011184 <pass_route3+0x4ec>)
 801116a:	21f0      	movs	r1, #240	; 0xf0
 801116c:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 801116e:	78bb      	ldrb	r3, [r7, #2]
 8011170:	3b01      	subs	r3, #1
 8011172:	4a04      	ldr	r2, [pc, #16]	; (8011184 <pass_route3+0x4ec>)
 8011174:	218e      	movs	r1, #142	; 0x8e
 8011176:	54d1      	strb	r1, [r2, r3]
 8011178:	e029      	b.n	80111ce <pass_route3+0x536>
 801117a:	bf00      	nop
 801117c:	20000f64 	.word	0x20000f64
 8011180:	20000c54 	.word	0x20000c54
 8011184:	20000350 	.word	0x20000350
 8011188:	200015c8 	.word	0x200015c8
				}else if(pass[p-1] == -1){
 801118c:	78bb      	ldrb	r3, [r7, #2]
 801118e:	3b01      	subs	r3, #1
 8011190:	4a6a      	ldr	r2, [pc, #424]	; (801133c <pass_route3+0x6a4>)
 8011192:	56d3      	ldrsb	r3, [r2, r3]
 8011194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011198:	d109      	bne.n	80111ae <pass_route3+0x516>
					pass[p-1] = -13;
 801119a:	78bb      	ldrb	r3, [r7, #2]
 801119c:	3b01      	subs	r3, #1
 801119e:	4a67      	ldr	r2, [pc, #412]	; (801133c <pass_route3+0x6a4>)
 80111a0:	21f3      	movs	r1, #243	; 0xf3
 80111a2:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 80111a4:	78bb      	ldrb	r3, [r7, #2]
 80111a6:	4a65      	ldr	r2, [pc, #404]	; (801133c <pass_route3+0x6a4>)
 80111a8:	218e      	movs	r1, #142	; 0x8e
 80111aa:	54d1      	strb	r1, [r2, r3]
 80111ac:	e00f      	b.n	80111ce <pass_route3+0x536>
				}else if(pass[p-1] == -2){
 80111ae:	78bb      	ldrb	r3, [r7, #2]
 80111b0:	3b01      	subs	r3, #1
 80111b2:	4a62      	ldr	r2, [pc, #392]	; (801133c <pass_route3+0x6a4>)
 80111b4:	56d3      	ldrsb	r3, [r2, r3]
 80111b6:	f113 0f02 	cmn.w	r3, #2
 80111ba:	d108      	bne.n	80111ce <pass_route3+0x536>
					pass[p-1] = -14;
 80111bc:	78bb      	ldrb	r3, [r7, #2]
 80111be:	3b01      	subs	r3, #1
 80111c0:	4a5e      	ldr	r2, [pc, #376]	; (801133c <pass_route3+0x6a4>)
 80111c2:	21f2      	movs	r1, #242	; 0xf2
 80111c4:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 80111c6:	78bb      	ldrb	r3, [r7, #2]
 80111c8:	4a5c      	ldr	r2, [pc, #368]	; (801133c <pass_route3+0x6a4>)
 80111ca:	218e      	movs	r1, #142	; 0x8e
 80111cc:	54d1      	strb	r1, [r2, r3]
				}
			}
			pass[p] = -114;							//a終了用配列
 80111ce:	78bb      	ldrb	r3, [r7, #2]
 80111d0:	4a5a      	ldr	r2, [pc, #360]	; (801133c <pass_route3+0x6a4>)
 80111d2:	218e      	movs	r1, #142	; 0x8e
 80111d4:	54d1      	strb	r1, [r2, r3]
			i++;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	3301      	adds	r3, #1
 80111da:	607b      	str	r3, [r7, #4]
 80111dc:	e09d      	b.n	801131a <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x44 && route[i+1] == 0x11){
 80111de:	4b58      	ldr	r3, [pc, #352]	; (8011340 <pass_route3+0x6a8>)
 80111e0:	881b      	ldrh	r3, [r3, #0]
 80111e2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80111e6:	b2db      	uxtb	r3, r3
 80111e8:	2b01      	cmp	r3, #1
 80111ea:	d11a      	bne.n	8011222 <pass_route3+0x58a>
 80111ec:	4a55      	ldr	r2, [pc, #340]	; (8011344 <pass_route3+0x6ac>)
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	4413      	add	r3, r2
 80111f2:	781b      	ldrb	r3, [r3, #0]
 80111f4:	2b44      	cmp	r3, #68	; 0x44
 80111f6:	d114      	bne.n	8011222 <pass_route3+0x58a>
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	3301      	adds	r3, #1
 80111fc:	4a51      	ldr	r2, [pc, #324]	; (8011344 <pass_route3+0x6ac>)
 80111fe:	5cd3      	ldrb	r3, [r2, r3]
 8011200:	2b11      	cmp	r3, #17
 8011202:	d10e      	bne.n	8011222 <pass_route3+0x58a>
			s_flag = 0;
 8011204:	2300      	movs	r3, #0
 8011206:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 8011208:	78bb      	ldrb	r3, [r7, #2]
 801120a:	4a4c      	ldr	r2, [pc, #304]	; (801133c <pass_route3+0x6a4>)
 801120c:	2140      	movs	r1, #64	; 0x40
 801120e:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011210:	4a4b      	ldr	r2, [pc, #300]	; (8011340 <pass_route3+0x6a8>)
 8011212:	8813      	ldrh	r3, [r2, #0]
 8011214:	f043 0308 	orr.w	r3, r3, #8
 8011218:	8013      	strh	r3, [r2, #0]
			i++;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	3301      	adds	r3, #1
 801121e:	607b      	str	r3, [r7, #4]
 8011220:	e07b      	b.n	801131a <pass_route3+0x682>
		}else if(MF2.FLAG.V == 1 && route[i] == 0x11 && route[i+1] == 0x44){
 8011222:	4b47      	ldr	r3, [pc, #284]	; (8011340 <pass_route3+0x6a8>)
 8011224:	881b      	ldrh	r3, [r3, #0]
 8011226:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801122a:	b2db      	uxtb	r3, r3
 801122c:	2b01      	cmp	r3, #1
 801122e:	d11a      	bne.n	8011266 <pass_route3+0x5ce>
 8011230:	4a44      	ldr	r2, [pc, #272]	; (8011344 <pass_route3+0x6ac>)
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	4413      	add	r3, r2
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	2b11      	cmp	r3, #17
 801123a:	d114      	bne.n	8011266 <pass_route3+0x5ce>
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	3301      	adds	r3, #1
 8011240:	4a40      	ldr	r2, [pc, #256]	; (8011344 <pass_route3+0x6ac>)
 8011242:	5cd3      	ldrb	r3, [r2, r3]
 8011244:	2b44      	cmp	r3, #68	; 0x44
 8011246:	d10e      	bne.n	8011266 <pass_route3+0x5ce>
			s_flag = 0;
 8011248:	2300      	movs	r3, #0
 801124a:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 801124c:	78bb      	ldrb	r3, [r7, #2]
 801124e:	4a3b      	ldr	r2, [pc, #236]	; (801133c <pass_route3+0x6a4>)
 8011250:	2140      	movs	r1, #64	; 0x40
 8011252:	54d1      	strb	r1, [r2, r3]
			MF2.FLAG.V = 1;
 8011254:	4a3a      	ldr	r2, [pc, #232]	; (8011340 <pass_route3+0x6a8>)
 8011256:	8813      	ldrh	r3, [r2, #0]
 8011258:	f043 0308 	orr.w	r3, r3, #8
 801125c:	8013      	strh	r3, [r2, #0]
			i++;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	3301      	adds	r3, #1
 8011262:	607b      	str	r3, [r7, #4]
 8011264:	e059      	b.n	801131a <pass_route3+0x682>
		}else if(route[i] == 0x44){
 8011266:	4a37      	ldr	r2, [pc, #220]	; (8011344 <pass_route3+0x6ac>)
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	4413      	add	r3, r2
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	2b44      	cmp	r3, #68	; 0x44
 8011270:	d107      	bne.n	8011282 <pass_route3+0x5ea>
			pass[p] = -1;							//a右スラローム
 8011272:	78bb      	ldrb	r3, [r7, #2]
 8011274:	4a31      	ldr	r2, [pc, #196]	; (801133c <pass_route3+0x6a4>)
 8011276:	21ff      	movs	r1, #255	; 0xff
 8011278:	54d1      	strb	r1, [r2, r3]
			i++;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	3301      	adds	r3, #1
 801127e:	607b      	str	r3, [r7, #4]
 8011280:	e04b      	b.n	801131a <pass_route3+0x682>
		}else if(route[i] == 0x11){
 8011282:	4a30      	ldr	r2, [pc, #192]	; (8011344 <pass_route3+0x6ac>)
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	4413      	add	r3, r2
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	2b11      	cmp	r3, #17
 801128c:	d107      	bne.n	801129e <pass_route3+0x606>
			pass[p] = -2;							//a左スラローム
 801128e:	78bb      	ldrb	r3, [r7, #2]
 8011290:	4a2a      	ldr	r2, [pc, #168]	; (801133c <pass_route3+0x6a4>)
 8011292:	21fe      	movs	r1, #254	; 0xfe
 8011294:	54d1      	strb	r1, [r2, r3]
			i++;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	3301      	adds	r3, #1
 801129a:	607b      	str	r3, [r7, #4]
 801129c:	e03d      	b.n	801131a <pass_route3+0x682>
		}else if(route[i] == 0x77){
 801129e:	4a29      	ldr	r2, [pc, #164]	; (8011344 <pass_route3+0x6ac>)
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	4413      	add	r3, r2
 80112a4:	781b      	ldrb	r3, [r3, #0]
 80112a6:	2b77      	cmp	r3, #119	; 0x77
 80112a8:	d137      	bne.n	801131a <pass_route3+0x682>
			if(s_flag){
 80112aa:	78fb      	ldrb	r3, [r7, #3]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d012      	beq.n	80112d6 <pass_route3+0x63e>
				pass[p-1]++;						//aスラローム前半直線追加
 80112b0:	78bb      	ldrb	r3, [r7, #2]
 80112b2:	3b01      	subs	r3, #1
 80112b4:	4a21      	ldr	r2, [pc, #132]	; (801133c <pass_route3+0x6a4>)
 80112b6:	56d2      	ldrsb	r2, [r2, r3]
 80112b8:	b2d2      	uxtb	r2, r2
 80112ba:	3201      	adds	r2, #1
 80112bc:	b2d2      	uxtb	r2, r2
 80112be:	b251      	sxtb	r1, r2
 80112c0:	4a1e      	ldr	r2, [pc, #120]	; (801133c <pass_route3+0x6a4>)
 80112c2:	54d1      	strb	r1, [r2, r3]
				p--;
 80112c4:	78bb      	ldrb	r3, [r7, #2]
 80112c6:	3b01      	subs	r3, #1
 80112c8:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 80112ca:	2300      	movs	r3, #0
 80112cc:	70fb      	strb	r3, [r7, #3]
				i++;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	3301      	adds	r3, #1
 80112d2:	607b      	str	r3, [r7, #4]
 80112d4:	e021      	b.n	801131a <pass_route3+0x682>
			}else{
				s++;
 80112d6:	787b      	ldrb	r3, [r7, #1]
 80112d8:	3301      	adds	r3, #1
 80112da:	707b      	strb	r3, [r7, #1]
				pass[p] = s;						//aもし半直線1つだけの場合whileには入らない
 80112dc:	78bb      	ldrb	r3, [r7, #2]
 80112de:	f997 1001 	ldrsb.w	r1, [r7, #1]
 80112e2:	4a16      	ldr	r2, [pc, #88]	; (801133c <pass_route3+0x6a4>)
 80112e4:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 80112e6:	e00c      	b.n	8011302 <pass_route3+0x66a>
					s_flag = 1;
 80112e8:	2301      	movs	r3, #1
 80112ea:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;					//a半直線2つ以上続く場合、最後半直線は大回り用に残す
 80112ec:	78bb      	ldrb	r3, [r7, #2]
 80112ee:	f997 1001 	ldrsb.w	r1, [r7, #1]
 80112f2:	4a12      	ldr	r2, [pc, #72]	; (801133c <pass_route3+0x6a4>)
 80112f4:	54d1      	strb	r1, [r2, r3]
					i++;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	3301      	adds	r3, #1
 80112fa:	607b      	str	r3, [r7, #4]
					s++;
 80112fc:	787b      	ldrb	r3, [r7, #1]
 80112fe:	3301      	adds	r3, #1
 8011300:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	3301      	adds	r3, #1
 8011306:	4a0f      	ldr	r2, [pc, #60]	; (8011344 <pass_route3+0x6ac>)
 8011308:	5cd3      	ldrb	r3, [r2, r3]
 801130a:	2b77      	cmp	r3, #119	; 0x77
 801130c:	d0ec      	beq.n	80112e8 <pass_route3+0x650>
				}
				if(!s_flag){
 801130e:	78fb      	ldrb	r3, [r7, #3]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d102      	bne.n	801131a <pass_route3+0x682>
					i++;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	3301      	adds	r3, #1
 8011318:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 801131a:	78bb      	ldrb	r3, [r7, #2]
 801131c:	3301      	adds	r3, #1
 801131e:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	3b01      	subs	r3, #1
 8011324:	4a07      	ldr	r2, [pc, #28]	; (8011344 <pass_route3+0x6ac>)
 8011326:	5cd3      	ldrb	r3, [r2, r3]
 8011328:	2bff      	cmp	r3, #255	; 0xff
 801132a:	f47f acd4 	bne.w	8010cd6 <pass_route3+0x3e>
	}
}
 801132e:	bf00      	nop
 8011330:	370c      	adds	r7, #12
 8011332:	46bd      	mov	sp, r7
 8011334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011338:	4770      	bx	lr
 801133a:	bf00      	nop
 801133c:	20000350 	.word	0x20000350
 8011340:	20000f64 	.word	0x20000f64
 8011344:	20000c54 	.word	0x20000c54

08011348 <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 8011348:	b580      	push	{r7, lr}
 801134a:	b082      	sub	sp, #8
 801134c:	af00      	add	r7, sp, #0
	printf("eprom func start \n");
 801134e:	4818      	ldr	r0, [pc, #96]	; (80113b0 <store_map_in_eeprom+0x68>)
 8011350:	f000 ff28 	bl	80121a4 <puts>
	eeprom_enable_write();
 8011354:	f7fa fd2e 	bl	800bdb4 <eeprom_enable_write>
	printf("eprom enable_write fin \n");
 8011358:	4816      	ldr	r0, [pc, #88]	; (80113b4 <store_map_in_eeprom+0x6c>)
 801135a:	f000 ff23 	bl	80121a4 <puts>
	int i;
	for(i = 0; i < 16; i++){
 801135e:	2300      	movs	r3, #0
 8011360:	607b      	str	r3, [r7, #4]
 8011362:	e01b      	b.n	801139c <store_map_in_eeprom+0x54>
		int j;
		for(j = 0; j < 16; j++){
 8011364:	2300      	movs	r3, #0
 8011366:	603b      	str	r3, [r7, #0]
 8011368:	e012      	b.n	8011390 <store_map_in_eeprom+0x48>
			eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	011a      	lsls	r2, r3, #4
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	4413      	add	r3, r2
 8011372:	4618      	mov	r0, r3
 8011374:	4a10      	ldr	r2, [pc, #64]	; (80113b8 <store_map_in_eeprom+0x70>)
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	011b      	lsls	r3, r3, #4
 801137a:	441a      	add	r2, r3
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	4413      	add	r3, r2
 8011380:	781b      	ldrb	r3, [r3, #0]
 8011382:	b29b      	uxth	r3, r3
 8011384:	4619      	mov	r1, r3
 8011386:	f7fa fd40 	bl	800be0a <eeprom_write_halfword>
		for(j = 0; j < 16; j++){
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	3301      	adds	r3, #1
 801138e:	603b      	str	r3, [r7, #0]
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	2b0f      	cmp	r3, #15
 8011394:	dde9      	ble.n	801136a <store_map_in_eeprom+0x22>
	for(i = 0; i < 16; i++){
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	3301      	adds	r3, #1
 801139a:	607b      	str	r3, [r7, #4]
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2b0f      	cmp	r3, #15
 80113a0:	dde0      	ble.n	8011364 <store_map_in_eeprom+0x1c>
		}
	}
	eeprom_disable_write();
 80113a2:	f7fa fd2b 	bl	800bdfc <eeprom_disable_write>
}
 80113a6:	bf00      	nop
 80113a8:	3708      	adds	r7, #8
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}
 80113ae:	bf00      	nop
 80113b0:	0801372c 	.word	0x0801372c
 80113b4:	08013740 	.word	0x08013740
 80113b8:	200001ac 	.word	0x200001ac

080113bc <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 80113bc:	b580      	push	{r7, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 16; i++){
 80113c2:	2300      	movs	r3, #0
 80113c4:	607b      	str	r3, [r7, #4]
 80113c6:	e01c      	b.n	8011402 <load_map_from_eeprom+0x46>
		int j;
		for(j = 0; j < 16; j++){
 80113c8:	2300      	movs	r3, #0
 80113ca:	603b      	str	r3, [r7, #0]
 80113cc:	e013      	b.n	80113f6 <load_map_from_eeprom+0x3a>
			map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	011a      	lsls	r2, r3, #4
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	4413      	add	r3, r2
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7fa fd34 	bl	800be44 <eeprom_read_halfword>
 80113dc:	4603      	mov	r3, r0
 80113de:	b2d9      	uxtb	r1, r3
 80113e0:	4a0b      	ldr	r2, [pc, #44]	; (8011410 <load_map_from_eeprom+0x54>)
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	011b      	lsls	r3, r3, #4
 80113e6:	441a      	add	r2, r3
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	4413      	add	r3, r2
 80113ec:	460a      	mov	r2, r1
 80113ee:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 16; j++){
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	3301      	adds	r3, #1
 80113f4:	603b      	str	r3, [r7, #0]
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	2b0f      	cmp	r3, #15
 80113fa:	dde8      	ble.n	80113ce <load_map_from_eeprom+0x12>
	for(i = 0; i < 16; i++){
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	3301      	adds	r3, #1
 8011400:	607b      	str	r3, [r7, #4]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2b0f      	cmp	r3, #15
 8011406:	dddf      	ble.n	80113c8 <load_map_from_eeprom+0xc>
		}
	}
}
 8011408:	bf00      	nop
 801140a:	3708      	adds	r7, #8
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}
 8011410:	200001ac 	.word	0x200001ac

08011414 <sensor_init>:

#include "global.h"


void sensor_init(void){
 8011414:	b480      	push	{r7}
 8011416:	af00      	add	r7, sp, #0
	tp = 0;
 8011418:	4b0e      	ldr	r3, [pc, #56]	; (8011454 <sensor_init+0x40>)
 801141a:	2200      	movs	r2, #0
 801141c:	701a      	strb	r2, [r3, #0]
	ad_l = ad_r = ad_fr = ad_fl = 0;
 801141e:	4b0e      	ldr	r3, [pc, #56]	; (8011458 <sensor_init+0x44>)
 8011420:	2200      	movs	r2, #0
 8011422:	601a      	str	r2, [r3, #0]
 8011424:	4b0c      	ldr	r3, [pc, #48]	; (8011458 <sensor_init+0x44>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	4a0c      	ldr	r2, [pc, #48]	; (801145c <sensor_init+0x48>)
 801142a:	6013      	str	r3, [r2, #0]
 801142c:	4b0b      	ldr	r3, [pc, #44]	; (801145c <sensor_init+0x48>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	4a0b      	ldr	r2, [pc, #44]	; (8011460 <sensor_init+0x4c>)
 8011432:	6013      	str	r3, [r2, #0]
 8011434:	4b0a      	ldr	r3, [pc, #40]	; (8011460 <sensor_init+0x4c>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	4a0a      	ldr	r2, [pc, #40]	; (8011464 <sensor_init+0x50>)
 801143a:	6013      	str	r3, [r2, #0]
	base_l = base_r = 0;
 801143c:	4b0a      	ldr	r3, [pc, #40]	; (8011468 <sensor_init+0x54>)
 801143e:	2200      	movs	r2, #0
 8011440:	801a      	strh	r2, [r3, #0]
 8011442:	4b09      	ldr	r3, [pc, #36]	; (8011468 <sensor_init+0x54>)
 8011444:	881a      	ldrh	r2, [r3, #0]
 8011446:	4b09      	ldr	r3, [pc, #36]	; (801146c <sensor_init+0x58>)
 8011448:	801a      	strh	r2, [r3, #0]
}
 801144a:	bf00      	nop
 801144c:	46bd      	mov	sp, r7
 801144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011452:	4770      	bx	lr
 8011454:	200012a0 	.word	0x200012a0
 8011458:	20000d54 	.word	0x20000d54
 801145c:	20000c00 	.word	0x20000c00
 8011460:	20000f60 	.word	0x20000f60
 8011464:	20000afc 	.word	0x20000afc
 8011468:	200002c0 	.word	0x200002c0
 801146c:	2000034c 	.word	0x2000034c

08011470 <get_base>:


uint8_t get_base(){
 8011470:	b480      	push	{r7}
 8011472:	b083      	sub	sp, #12
 8011474:	af00      	add	r7, sp, #0
	uint8_t res = 1;									//for return
 8011476:	2301      	movs	r3, #1
 8011478:	71fb      	strb	r3, [r7, #7]

	base_l = ad_l;										//sensor value base L
 801147a:	4b08      	ldr	r3, [pc, #32]	; (801149c <get_base+0x2c>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	b29a      	uxth	r2, r3
 8011480:	4b07      	ldr	r3, [pc, #28]	; (80114a0 <get_base+0x30>)
 8011482:	801a      	strh	r2, [r3, #0]
	base_r = ad_r;										//sensor value base R
 8011484:	4b07      	ldr	r3, [pc, #28]	; (80114a4 <get_base+0x34>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	b29a      	uxth	r2, r3
 801148a:	4b07      	ldr	r3, [pc, #28]	; (80114a8 <get_base+0x38>)
 801148c:	801a      	strh	r2, [r3, #0]

	return res;											//
 801148e:	79fb      	ldrb	r3, [r7, #7]
}
 8011490:	4618      	mov	r0, r3
 8011492:	370c      	adds	r7, #12
 8011494:	46bd      	mov	sp, r7
 8011496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149a:	4770      	bx	lr
 801149c:	20000afc 	.word	0x20000afc
 80114a0:	2000034c 	.word	0x2000034c
 80114a4:	20000f60 	.word	0x20000f60
 80114a8:	200002c0 	.word	0x200002c0

080114ac <get_wall_info>:


void get_wall_info(){
 80114ac:	b480      	push	{r7}
 80114ae:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 80114b0:	4b16      	ldr	r3, [pc, #88]	; (801150c <get_wall_info+0x60>)
 80114b2:	2200      	movs	r2, #0
 80114b4:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 80114b6:	4b16      	ldr	r3, [pc, #88]	; (8011510 <get_wall_info+0x64>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	2b78      	cmp	r3, #120	; 0x78
 80114bc:	d803      	bhi.n	80114c6 <get_wall_info+0x1a>
 80114be:	4b15      	ldr	r3, [pc, #84]	; (8011514 <get_wall_info+0x68>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	2bc8      	cmp	r3, #200	; 0xc8
 80114c4:	d906      	bls.n	80114d4 <get_wall_info+0x28>
		wall_info |= 0x88;								//forward check
 80114c6:	4b11      	ldr	r3, [pc, #68]	; (801150c <get_wall_info+0x60>)
 80114c8:	781b      	ldrb	r3, [r3, #0]
 80114ca:	f063 0377 	orn	r3, r3, #119	; 0x77
 80114ce:	b2da      	uxtb	r2, r3
 80114d0:	4b0e      	ldr	r3, [pc, #56]	; (801150c <get_wall_info+0x60>)
 80114d2:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 80114d4:	4b10      	ldr	r3, [pc, #64]	; (8011518 <get_wall_info+0x6c>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	2b78      	cmp	r3, #120	; 0x78
 80114da:	d906      	bls.n	80114ea <get_wall_info+0x3e>
		wall_info |= 0x44;								//right check
 80114dc:	4b0b      	ldr	r3, [pc, #44]	; (801150c <get_wall_info+0x60>)
 80114de:	781b      	ldrb	r3, [r3, #0]
 80114e0:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80114e4:	b2da      	uxtb	r2, r3
 80114e6:	4b09      	ldr	r3, [pc, #36]	; (801150c <get_wall_info+0x60>)
 80114e8:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 80114ea:	4b0c      	ldr	r3, [pc, #48]	; (801151c <get_wall_info+0x70>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	2b8c      	cmp	r3, #140	; 0x8c
 80114f0:	d906      	bls.n	8011500 <get_wall_info+0x54>
		wall_info |= 0x11;								//light check
 80114f2:	4b06      	ldr	r3, [pc, #24]	; (801150c <get_wall_info+0x60>)
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	f043 0311 	orr.w	r3, r3, #17
 80114fa:	b2da      	uxtb	r2, r3
 80114fc:	4b03      	ldr	r3, [pc, #12]	; (801150c <get_wall_info+0x60>)
 80114fe:	701a      	strb	r2, [r3, #0]
	}
}
 8011500:	bf00      	nop
 8011502:	46bd      	mov	sp, r7
 8011504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011508:	4770      	bx	lr
 801150a:	bf00      	nop
 801150c:	200002c8 	.word	0x200002c8
 8011510:	20000c00 	.word	0x20000c00
 8011514:	20000d54 	.word	0x20000d54
 8011518:	20000f60 	.word	0x20000f60
 801151c:	20000afc 	.word	0x20000afc

08011520 <led_write>:
//led_write
//aモード選択用LEDのON-OFF
//a引数：led1(0=>OFF, 1=>ON), led2(0=>OFF, 1=>ON), led3(0=>OFF, 1=>ON)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write(uint8_t led1, uint8_t led2, uint8_t led3){
 8011520:	b580      	push	{r7, lr}
 8011522:	b082      	sub	sp, #8
 8011524:	af00      	add	r7, sp, #0
 8011526:	4603      	mov	r3, r0
 8011528:	71fb      	strb	r3, [r7, #7]
 801152a:	460b      	mov	r3, r1
 801152c:	71bb      	strb	r3, [r7, #6]
 801152e:	4613      	mov	r3, r2
 8011530:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8011532:	79fb      	ldrb	r3, [r7, #7]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d005      	beq.n	8011544 <led_write+0x24>
 8011538:	2201      	movs	r2, #1
 801153a:	2110      	movs	r1, #16
 801153c:	4814      	ldr	r0, [pc, #80]	; (8011590 <led_write+0x70>)
 801153e:	f7f0 fee1 	bl	8002304 <HAL_GPIO_WritePin>
 8011542:	e004      	b.n	801154e <led_write+0x2e>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8011544:	2200      	movs	r2, #0
 8011546:	2110      	movs	r1, #16
 8011548:	4811      	ldr	r0, [pc, #68]	; (8011590 <led_write+0x70>)
 801154a:	f7f0 fedb 	bl	8002304 <HAL_GPIO_WritePin>

	if(led2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 801154e:	79bb      	ldrb	r3, [r7, #6]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d005      	beq.n	8011560 <led_write+0x40>
 8011554:	2201      	movs	r2, #1
 8011556:	2140      	movs	r1, #64	; 0x40
 8011558:	480d      	ldr	r0, [pc, #52]	; (8011590 <led_write+0x70>)
 801155a:	f7f0 fed3 	bl	8002304 <HAL_GPIO_WritePin>
 801155e:	e004      	b.n	801156a <led_write+0x4a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8011560:	2200      	movs	r2, #0
 8011562:	2140      	movs	r1, #64	; 0x40
 8011564:	480a      	ldr	r0, [pc, #40]	; (8011590 <led_write+0x70>)
 8011566:	f7f0 fecd 	bl	8002304 <HAL_GPIO_WritePin>

	if(led3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 801156a:	797b      	ldrb	r3, [r7, #5]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d005      	beq.n	801157c <led_write+0x5c>
 8011570:	2201      	movs	r2, #1
 8011572:	2180      	movs	r1, #128	; 0x80
 8011574:	4806      	ldr	r0, [pc, #24]	; (8011590 <led_write+0x70>)
 8011576:	f7f0 fec5 	bl	8002304 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 801157a:	e004      	b.n	8011586 <led_write+0x66>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 801157c:	2200      	movs	r2, #0
 801157e:	2180      	movs	r1, #128	; 0x80
 8011580:	4803      	ldr	r0, [pc, #12]	; (8011590 <led_write+0x70>)
 8011582:	f7f0 febf 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011586:	bf00      	nop
 8011588:	3708      	adds	r7, #8
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}
 801158e:	bf00      	nop
 8011590:	40020000 	.word	0x40020000

08011594 <full_led_write>:
//full_led_write
//aフルカラーLEDの色選択
//a引数：fulled(0=>OFF, 1=>a赤, 2=>緑, 3=>青, 4=>青緑, 5=>紫, 6=>黄, 7=>白)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void full_led_write(uint8_t fulled){
 8011594:	b580      	push	{r7, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	af00      	add	r7, sp, #0
 801159a:	4603      	mov	r3, r0
 801159c:	71fb      	strb	r3, [r7, #7]
	if(fulled == 0){
 801159e:	79fb      	ldrb	r3, [r7, #7]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d112      	bne.n	80115ca <full_led_write+0x36>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80115a4:	2201      	movs	r2, #1
 80115a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80115aa:	4856      	ldr	r0, [pc, #344]	; (8011704 <full_led_write+0x170>)
 80115ac:	f7f0 feaa 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80115b0:	2201      	movs	r2, #1
 80115b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80115b6:	4853      	ldr	r0, [pc, #332]	; (8011704 <full_led_write+0x170>)
 80115b8:	f7f0 fea4 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80115bc:	2201      	movs	r2, #1
 80115be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80115c2:	4851      	ldr	r0, [pc, #324]	; (8011708 <full_led_write+0x174>)
 80115c4:	f7f0 fe9e 	bl	8002304 <HAL_GPIO_WritePin>
	else if(fulled == 7){
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 80115c8:	e098      	b.n	80116fc <full_led_write+0x168>
	else if(fulled == 1){
 80115ca:	79fb      	ldrb	r3, [r7, #7]
 80115cc:	2b01      	cmp	r3, #1
 80115ce:	d112      	bne.n	80115f6 <full_led_write+0x62>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80115d0:	2201      	movs	r2, #1
 80115d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80115d6:	484b      	ldr	r0, [pc, #300]	; (8011704 <full_led_write+0x170>)
 80115d8:	f7f0 fe94 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80115dc:	2201      	movs	r2, #1
 80115de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80115e2:	4848      	ldr	r0, [pc, #288]	; (8011704 <full_led_write+0x170>)
 80115e4:	f7f0 fe8e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80115e8:	2200      	movs	r2, #0
 80115ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80115ee:	4846      	ldr	r0, [pc, #280]	; (8011708 <full_led_write+0x174>)
 80115f0:	f7f0 fe88 	bl	8002304 <HAL_GPIO_WritePin>
}
 80115f4:	e082      	b.n	80116fc <full_led_write+0x168>
	else if(fulled == 2){
 80115f6:	79fb      	ldrb	r3, [r7, #7]
 80115f8:	2b02      	cmp	r3, #2
 80115fa:	d112      	bne.n	8011622 <full_led_write+0x8e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80115fc:	2201      	movs	r2, #1
 80115fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011602:	4840      	ldr	r0, [pc, #256]	; (8011704 <full_led_write+0x170>)
 8011604:	f7f0 fe7e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8011608:	2200      	movs	r2, #0
 801160a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801160e:	483d      	ldr	r0, [pc, #244]	; (8011704 <full_led_write+0x170>)
 8011610:	f7f0 fe78 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8011614:	2201      	movs	r2, #1
 8011616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801161a:	483b      	ldr	r0, [pc, #236]	; (8011708 <full_led_write+0x174>)
 801161c:	f7f0 fe72 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011620:	e06c      	b.n	80116fc <full_led_write+0x168>
	else if(fulled == 3){
 8011622:	79fb      	ldrb	r3, [r7, #7]
 8011624:	2b03      	cmp	r3, #3
 8011626:	d112      	bne.n	801164e <full_led_write+0xba>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8011628:	2200      	movs	r2, #0
 801162a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801162e:	4835      	ldr	r0, [pc, #212]	; (8011704 <full_led_write+0x170>)
 8011630:	f7f0 fe68 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8011634:	2201      	movs	r2, #1
 8011636:	f44f 7100 	mov.w	r1, #512	; 0x200
 801163a:	4832      	ldr	r0, [pc, #200]	; (8011704 <full_led_write+0x170>)
 801163c:	f7f0 fe62 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8011640:	2201      	movs	r2, #1
 8011642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011646:	4830      	ldr	r0, [pc, #192]	; (8011708 <full_led_write+0x174>)
 8011648:	f7f0 fe5c 	bl	8002304 <HAL_GPIO_WritePin>
}
 801164c:	e056      	b.n	80116fc <full_led_write+0x168>
	else if(fulled == 4){
 801164e:	79fb      	ldrb	r3, [r7, #7]
 8011650:	2b04      	cmp	r3, #4
 8011652:	d112      	bne.n	801167a <full_led_write+0xe6>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8011654:	2200      	movs	r2, #0
 8011656:	f44f 7180 	mov.w	r1, #256	; 0x100
 801165a:	482a      	ldr	r0, [pc, #168]	; (8011704 <full_led_write+0x170>)
 801165c:	f7f0 fe52 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8011660:	2200      	movs	r2, #0
 8011662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011666:	4827      	ldr	r0, [pc, #156]	; (8011704 <full_led_write+0x170>)
 8011668:	f7f0 fe4c 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801166c:	2201      	movs	r2, #1
 801166e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011672:	4825      	ldr	r0, [pc, #148]	; (8011708 <full_led_write+0x174>)
 8011674:	f7f0 fe46 	bl	8002304 <HAL_GPIO_WritePin>
}
 8011678:	e040      	b.n	80116fc <full_led_write+0x168>
	else if(fulled == 5){
 801167a:	79fb      	ldrb	r3, [r7, #7]
 801167c:	2b05      	cmp	r3, #5
 801167e:	d112      	bne.n	80116a6 <full_led_write+0x112>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8011680:	2200      	movs	r2, #0
 8011682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011686:	481f      	ldr	r0, [pc, #124]	; (8011704 <full_led_write+0x170>)
 8011688:	f7f0 fe3c 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 801168c:	2201      	movs	r2, #1
 801168e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011692:	481c      	ldr	r0, [pc, #112]	; (8011704 <full_led_write+0x170>)
 8011694:	f7f0 fe36 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8011698:	2200      	movs	r2, #0
 801169a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801169e:	481a      	ldr	r0, [pc, #104]	; (8011708 <full_led_write+0x174>)
 80116a0:	f7f0 fe30 	bl	8002304 <HAL_GPIO_WritePin>
}
 80116a4:	e02a      	b.n	80116fc <full_led_write+0x168>
	else if(fulled == 6){
 80116a6:	79fb      	ldrb	r3, [r7, #7]
 80116a8:	2b06      	cmp	r3, #6
 80116aa:	d112      	bne.n	80116d2 <full_led_write+0x13e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80116ac:	2201      	movs	r2, #1
 80116ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80116b2:	4814      	ldr	r0, [pc, #80]	; (8011704 <full_led_write+0x170>)
 80116b4:	f7f0 fe26 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80116b8:	2200      	movs	r2, #0
 80116ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80116be:	4811      	ldr	r0, [pc, #68]	; (8011704 <full_led_write+0x170>)
 80116c0:	f7f0 fe20 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80116c4:	2200      	movs	r2, #0
 80116c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80116ca:	480f      	ldr	r0, [pc, #60]	; (8011708 <full_led_write+0x174>)
 80116cc:	f7f0 fe1a 	bl	8002304 <HAL_GPIO_WritePin>
}
 80116d0:	e014      	b.n	80116fc <full_led_write+0x168>
	else if(fulled == 7){
 80116d2:	79fb      	ldrb	r3, [r7, #7]
 80116d4:	2b07      	cmp	r3, #7
 80116d6:	d111      	bne.n	80116fc <full_led_write+0x168>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80116d8:	2200      	movs	r2, #0
 80116da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80116de:	4809      	ldr	r0, [pc, #36]	; (8011704 <full_led_write+0x170>)
 80116e0:	f7f0 fe10 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80116e4:	2200      	movs	r2, #0
 80116e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80116ea:	4806      	ldr	r0, [pc, #24]	; (8011704 <full_led_write+0x170>)
 80116ec:	f7f0 fe0a 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80116f0:	2200      	movs	r2, #0
 80116f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80116f6:	4804      	ldr	r0, [pc, #16]	; (8011708 <full_led_write+0x174>)
 80116f8:	f7f0 fe04 	bl	8002304 <HAL_GPIO_WritePin>
}
 80116fc:	bf00      	nop
 80116fe:	3708      	adds	r7, #8
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}
 8011704:	40020400 	.word	0x40020400
 8011708:	40020800 	.word	0x40020800

0801170c <sensor_test>:
//sensor_test
//a壁センサーとジャイロセンサーの値確認
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_test(){
 801170c:	b580      	push	{r7, lr}
 801170e:	b08c      	sub	sp, #48	; 0x30
 8011710:	af02      	add	r7, sp, #8

	int mode = 0;
 8011712:	2300      	movs	r3, #0
 8011714:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Mode : %d\n", mode);
 8011716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011718:	4881      	ldr	r0, [pc, #516]	; (8011920 <sensor_test+0x214>)
 801171a:	f000 fccf 	bl	80120bc <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 801171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011720:	b2db      	uxtb	r3, r3
 8011722:	f003 0301 	and.w	r3, r3, #1
 8011726:	b2d8      	uxtb	r0, r3
 8011728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801172a:	b2db      	uxtb	r3, r3
 801172c:	f003 0302 	and.w	r3, r3, #2
 8011730:	b2d9      	uxtb	r1, r3
 8011732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011734:	b2db      	uxtb	r3, r3
 8011736:	f003 0304 	and.w	r3, r3, #4
 801173a:	b2db      	uxtb	r3, r3
 801173c:	461a      	mov	r2, r3
 801173e:	f7ff feef 	bl	8011520 <led_write>
		  if(dist_r >= 20){
 8011742:	4b78      	ldr	r3, [pc, #480]	; (8011924 <sensor_test+0x218>)
 8011744:	edd3 7a00 	vldr	s15, [r3]
 8011748:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 801174c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011754:	db0f      	blt.n	8011776 <sensor_test+0x6a>
			  mode++;
 8011756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011758:	3301      	adds	r3, #1
 801175a:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 801175c:	4b71      	ldr	r3, [pc, #452]	; (8011924 <sensor_test+0x218>)
 801175e:	f04f 0200 	mov.w	r2, #0
 8011762:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8011764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011766:	2b07      	cmp	r3, #7
 8011768:	dd01      	ble.n	801176e <sensor_test+0x62>
				  mode = 0;
 801176a:	2300      	movs	r3, #0
 801176c:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 801176e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011770:	486b      	ldr	r0, [pc, #428]	; (8011920 <sensor_test+0x214>)
 8011772:	f000 fca3 	bl	80120bc <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8011776:	4b6b      	ldr	r3, [pc, #428]	; (8011924 <sensor_test+0x218>)
 8011778:	edd3 7a00 	vldr	s15, [r3]
 801177c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8011780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011788:	d80f      	bhi.n	80117aa <sensor_test+0x9e>
			  mode--;
 801178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801178c:	3b01      	subs	r3, #1
 801178e:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8011790:	4b64      	ldr	r3, [pc, #400]	; (8011924 <sensor_test+0x218>)
 8011792:	f04f 0200 	mov.w	r2, #0
 8011796:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8011798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801179a:	2b00      	cmp	r3, #0
 801179c:	da01      	bge.n	80117a2 <sensor_test+0x96>
				  mode = 7;
 801179e:	2307      	movs	r3, #7
 80117a0:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 80117a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80117a4:	485e      	ldr	r0, [pc, #376]	; (8011920 <sensor_test+0x214>)
 80117a6:	f000 fc89 	bl	80120bc <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80117aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80117ae:	485e      	ldr	r0, [pc, #376]	; (8011928 <sensor_test+0x21c>)
 80117b0:	f7f0 fd90 	bl	80022d4 <HAL_GPIO_ReadPin>
 80117b4:	4603      	mov	r3, r0
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d1b1      	bne.n	801171e <sensor_test+0x12>
			  HAL_Delay(50);
 80117ba:	2032      	movs	r0, #50	; 0x32
 80117bc:	f7ef fc2e 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80117c0:	bf00      	nop
 80117c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80117c6:	4858      	ldr	r0, [pc, #352]	; (8011928 <sensor_test+0x21c>)
 80117c8:	f7f0 fd84 	bl	80022d4 <HAL_GPIO_ReadPin>
 80117cc:	4603      	mov	r3, r0
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d0f7      	beq.n	80117c2 <sensor_test+0xb6>

			  drive_ready();
 80117d2:	f7f3 fa55 	bl	8004c80 <drive_ready>

			  switch(mode){
 80117d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d8:	2b07      	cmp	r3, #7
 80117da:	d8a0      	bhi.n	801171e <sensor_test+0x12>
 80117dc:	a201      	add	r2, pc, #4	; (adr r2, 80117e4 <sensor_test+0xd8>)
 80117de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117e2:	bf00      	nop
 80117e4:	08011805 	.word	0x08011805
 80117e8:	0801180b 	.word	0x0801180b
 80117ec:	0801185d 	.word	0x0801185d
 80117f0:	0801171f 	.word	0x0801171f
 80117f4:	0801171f 	.word	0x0801171f
 80117f8:	0801171f 	.word	0x0801171f
 80117fc:	0801171f 	.word	0x0801171f
 8011800:	0801171f 	.word	0x0801171f
				case 0:
					get_base();
 8011804:	f7ff fe34 	bl	8011470 <get_base>
					break;
 8011808:	e089      	b.n	801191e <sensor_test+0x212>
				case 1:
			  		  //----Wall sensor check----
			  		  printf("Wall Sensor Check.\n");
 801180a:	4848      	ldr	r0, [pc, #288]	; (801192c <sensor_test+0x220>)
 801180c:	f000 fcca 	bl	80121a4 <puts>
			  		  while(1){
			  			  get_wall_info();
 8011810:	f7ff fe4c 	bl	80114ac <get_wall_info>
			  			  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 8011814:	4b46      	ldr	r3, [pc, #280]	; (8011930 <sensor_test+0x224>)
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	f003 0311 	and.w	r3, r3, #17
 801181c:	b2d8      	uxtb	r0, r3
 801181e:	4b44      	ldr	r3, [pc, #272]	; (8011930 <sensor_test+0x224>)
 8011820:	781b      	ldrb	r3, [r3, #0]
 8011822:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8011826:	b2d9      	uxtb	r1, r3
 8011828:	4b41      	ldr	r3, [pc, #260]	; (8011930 <sensor_test+0x224>)
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011830:	b2db      	uxtb	r3, r3
 8011832:	461a      	mov	r2, r3
 8011834:	f7ff fe74 	bl	8011520 <led_write>
			  			  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 8011838:	4b3e      	ldr	r3, [pc, #248]	; (8011934 <sensor_test+0x228>)
 801183a:	6819      	ldr	r1, [r3, #0]
 801183c:	4b3e      	ldr	r3, [pc, #248]	; (8011938 <sensor_test+0x22c>)
 801183e:	681a      	ldr	r2, [r3, #0]
 8011840:	4b3e      	ldr	r3, [pc, #248]	; (801193c <sensor_test+0x230>)
 8011842:	6818      	ldr	r0, [r3, #0]
 8011844:	4b3e      	ldr	r3, [pc, #248]	; (8011940 <sensor_test+0x234>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	9300      	str	r3, [sp, #0]
 801184a:	4603      	mov	r3, r0
 801184c:	483d      	ldr	r0, [pc, #244]	; (8011944 <sensor_test+0x238>)
 801184e:	f000 fc35 	bl	80120bc <iprintf>
			  			  HAL_Delay(333);
 8011852:	f240 104d 	movw	r0, #333	; 0x14d
 8011856:	f7ef fbe1 	bl	800101c <HAL_Delay>
			  			  get_wall_info();
 801185a:	e7d9      	b.n	8011810 <sensor_test+0x104>
						}
					break;
				case 2:
					//----Gyro sensor check----
					printf("Gyro Sensor Check.\n");
 801185c:	483a      	ldr	r0, [pc, #232]	; (8011948 <sensor_test+0x23c>)
 801185e:	f000 fca1 	bl	80121a4 <puts>
					int accel_x, accel_y, accel_z;
					int gyro_x, gyro_y, gyro_z;
					int deg_x, deg_y, deg_z;
			  		  while(1){
			  			  accel_x = accel_read_x();
 8011862:	f7fa fb97 	bl	800bf94 <accel_read_x>
 8011866:	eef0 7a40 	vmov.f32	s15, s0
 801186a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801186e:	ee17 3a90 	vmov	r3, s15
 8011872:	623b      	str	r3, [r7, #32]
			  			  accel_y = accel_read_y();
 8011874:	f7fa fbb4 	bl	800bfe0 <accel_read_y>
 8011878:	eef0 7a40 	vmov.f32	s15, s0
 801187c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011880:	ee17 3a90 	vmov	r3, s15
 8011884:	61fb      	str	r3, [r7, #28]
			  			  accel_z = accel_read_z();
 8011886:	f7fa fbd1 	bl	800c02c <accel_read_z>
 801188a:	eef0 7a40 	vmov.f32	s15, s0
 801188e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011892:	ee17 3a90 	vmov	r3, s15
 8011896:	61bb      	str	r3, [r7, #24]
			  			  gyro_x = gyro_read_x();
 8011898:	f7fa fbf2 	bl	800c080 <gyro_read_x>
 801189c:	eef0 7a40 	vmov.f32	s15, s0
 80118a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118a4:	ee17 3a90 	vmov	r3, s15
 80118a8:	617b      	str	r3, [r7, #20]
			  			  gyro_y = gyro_read_y();
 80118aa:	f7fa fc25 	bl	800c0f8 <gyro_read_y>
 80118ae:	eef0 7a40 	vmov.f32	s15, s0
 80118b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118b6:	ee17 3a90 	vmov	r3, s15
 80118ba:	613b      	str	r3, [r7, #16]
			  			  gyro_z = gyro_read_z();
 80118bc:	f7fa fc58 	bl	800c170 <gyro_read_z>
 80118c0:	eef0 7a40 	vmov.f32	s15, s0
 80118c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118c8:	ee17 3a90 	vmov	r3, s15
 80118cc:	60fb      	str	r3, [r7, #12]
			  			  deg_x = degree_x;
 80118ce:	4b1f      	ldr	r3, [pc, #124]	; (801194c <sensor_test+0x240>)
 80118d0:	edd3 7a00 	vldr	s15, [r3]
 80118d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118d8:	ee17 3a90 	vmov	r3, s15
 80118dc:	60bb      	str	r3, [r7, #8]
			  			  deg_y = degree_y;
 80118de:	4b1c      	ldr	r3, [pc, #112]	; (8011950 <sensor_test+0x244>)
 80118e0:	edd3 7a00 	vldr	s15, [r3]
 80118e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118e8:	ee17 3a90 	vmov	r3, s15
 80118ec:	607b      	str	r3, [r7, #4]
			  			  deg_z = degree_z;
 80118ee:	4b19      	ldr	r3, [pc, #100]	; (8011954 <sensor_test+0x248>)
 80118f0:	edd3 7a00 	vldr	s15, [r3]
 80118f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118f8:	ee17 3a90 	vmov	r3, s15
 80118fc:	603b      	str	r3, [r7, #0]

			  			  //printf("Accel x: %3d, y: %3d, z: %3d\n", accel_x, accel_y, accel_z);
			  			  printf("Gyro  x: %3d, y: %3d, z: %3d\n", gyro_x, gyro_y, gyro_z);
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	693a      	ldr	r2, [r7, #16]
 8011902:	6979      	ldr	r1, [r7, #20]
 8011904:	4814      	ldr	r0, [pc, #80]	; (8011958 <sensor_test+0x24c>)
 8011906:	f000 fbd9 	bl	80120bc <iprintf>
			  			  printf("Deg   x: %3d, y: %3d, z: %3d\n", deg_x, deg_y, deg_z);
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	687a      	ldr	r2, [r7, #4]
 801190e:	68b9      	ldr	r1, [r7, #8]
 8011910:	4812      	ldr	r0, [pc, #72]	; (801195c <sensor_test+0x250>)
 8011912:	f000 fbd3 	bl	80120bc <iprintf>
			  			  HAL_Delay(111);
 8011916:	206f      	movs	r0, #111	; 0x6f
 8011918:	f7ef fb80 	bl	800101c <HAL_Delay>
			  			  accel_x = accel_read_x();
 801191c:	e7a1      	b.n	8011862 <sensor_test+0x156>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 801191e:	e6fe      	b.n	801171e <sensor_test+0x12>
 8011920:	08013758 	.word	0x08013758
 8011924:	20000aec 	.word	0x20000aec
 8011928:	40020000 	.word	0x40020000
 801192c:	08013764 	.word	0x08013764
 8011930:	200002c8 	.word	0x200002c8
 8011934:	20000afc 	.word	0x20000afc
 8011938:	20000d54 	.word	0x20000d54
 801193c:	20000c00 	.word	0x20000c00
 8011940:	20000f60 	.word	0x20000f60
 8011944:	08013778 	.word	0x08013778
 8011948:	080137a8 	.word	0x080137a8
 801194c:	20000450 	.word	0x20000450
 8011950:	20000f70 	.word	0x20000f70
 8011954:	20000b5c 	.word	0x20000b5c
 8011958:	080137bc 	.word	0x080137bc
 801195c:	080137dc 	.word	0x080137dc

08011960 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011960:	b480      	push	{r7}
 8011962:	b083      	sub	sp, #12
 8011964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011966:	2300      	movs	r3, #0
 8011968:	607b      	str	r3, [r7, #4]
 801196a:	4b10      	ldr	r3, [pc, #64]	; (80119ac <HAL_MspInit+0x4c>)
 801196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801196e:	4a0f      	ldr	r2, [pc, #60]	; (80119ac <HAL_MspInit+0x4c>)
 8011970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011974:	6453      	str	r3, [r2, #68]	; 0x44
 8011976:	4b0d      	ldr	r3, [pc, #52]	; (80119ac <HAL_MspInit+0x4c>)
 8011978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801197e:	607b      	str	r3, [r7, #4]
 8011980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011982:	2300      	movs	r3, #0
 8011984:	603b      	str	r3, [r7, #0]
 8011986:	4b09      	ldr	r3, [pc, #36]	; (80119ac <HAL_MspInit+0x4c>)
 8011988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801198a:	4a08      	ldr	r2, [pc, #32]	; (80119ac <HAL_MspInit+0x4c>)
 801198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011990:	6413      	str	r3, [r2, #64]	; 0x40
 8011992:	4b06      	ldr	r3, [pc, #24]	; (80119ac <HAL_MspInit+0x4c>)
 8011994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801199a:	603b      	str	r3, [r7, #0]
 801199c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801199e:	bf00      	nop
 80119a0:	370c      	adds	r7, #12
 80119a2:	46bd      	mov	sp, r7
 80119a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a8:	4770      	bx	lr
 80119aa:	bf00      	nop
 80119ac:	40023800 	.word	0x40023800

080119b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b08a      	sub	sp, #40	; 0x28
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80119b8:	f107 0314 	add.w	r3, r7, #20
 80119bc:	2200      	movs	r2, #0
 80119be:	601a      	str	r2, [r3, #0]
 80119c0:	605a      	str	r2, [r3, #4]
 80119c2:	609a      	str	r2, [r3, #8]
 80119c4:	60da      	str	r2, [r3, #12]
 80119c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	4a17      	ldr	r2, [pc, #92]	; (8011a2c <HAL_ADC_MspInit+0x7c>)
 80119ce:	4293      	cmp	r3, r2
 80119d0:	d127      	bne.n	8011a22 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80119d2:	2300      	movs	r3, #0
 80119d4:	613b      	str	r3, [r7, #16]
 80119d6:	4b16      	ldr	r3, [pc, #88]	; (8011a30 <HAL_ADC_MspInit+0x80>)
 80119d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119da:	4a15      	ldr	r2, [pc, #84]	; (8011a30 <HAL_ADC_MspInit+0x80>)
 80119dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80119e0:	6453      	str	r3, [r2, #68]	; 0x44
 80119e2:	4b13      	ldr	r3, [pc, #76]	; (8011a30 <HAL_ADC_MspInit+0x80>)
 80119e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80119ea:	613b      	str	r3, [r7, #16]
 80119ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80119ee:	2300      	movs	r3, #0
 80119f0:	60fb      	str	r3, [r7, #12]
 80119f2:	4b0f      	ldr	r3, [pc, #60]	; (8011a30 <HAL_ADC_MspInit+0x80>)
 80119f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119f6:	4a0e      	ldr	r2, [pc, #56]	; (8011a30 <HAL_ADC_MspInit+0x80>)
 80119f8:	f043 0301 	orr.w	r3, r3, #1
 80119fc:	6313      	str	r3, [r2, #48]	; 0x30
 80119fe:	4b0c      	ldr	r3, [pc, #48]	; (8011a30 <HAL_ADC_MspInit+0x80>)
 8011a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a02:	f003 0301 	and.w	r3, r3, #1
 8011a06:	60fb      	str	r3, [r7, #12]
 8011a08:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8011a0a:	230f      	movs	r3, #15
 8011a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011a0e:	2303      	movs	r3, #3
 8011a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a12:	2300      	movs	r3, #0
 8011a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011a16:	f107 0314 	add.w	r3, r7, #20
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	4805      	ldr	r0, [pc, #20]	; (8011a34 <HAL_ADC_MspInit+0x84>)
 8011a1e:	f7f0 fabf 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8011a22:	bf00      	nop
 8011a24:	3728      	adds	r7, #40	; 0x28
 8011a26:	46bd      	mov	sp, r7
 8011a28:	bd80      	pop	{r7, pc}
 8011a2a:	bf00      	nop
 8011a2c:	40012000 	.word	0x40012000
 8011a30:	40023800 	.word	0x40023800
 8011a34:	40020000 	.word	0x40020000

08011a38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b08a      	sub	sp, #40	; 0x28
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011a40:	f107 0314 	add.w	r3, r7, #20
 8011a44:	2200      	movs	r2, #0
 8011a46:	601a      	str	r2, [r3, #0]
 8011a48:	605a      	str	r2, [r3, #4]
 8011a4a:	609a      	str	r2, [r3, #8]
 8011a4c:	60da      	str	r2, [r3, #12]
 8011a4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	4a19      	ldr	r2, [pc, #100]	; (8011abc <HAL_SPI_MspInit+0x84>)
 8011a56:	4293      	cmp	r3, r2
 8011a58:	d12c      	bne.n	8011ab4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	613b      	str	r3, [r7, #16]
 8011a5e:	4b18      	ldr	r3, [pc, #96]	; (8011ac0 <HAL_SPI_MspInit+0x88>)
 8011a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a62:	4a17      	ldr	r2, [pc, #92]	; (8011ac0 <HAL_SPI_MspInit+0x88>)
 8011a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011a68:	6413      	str	r3, [r2, #64]	; 0x40
 8011a6a:	4b15      	ldr	r3, [pc, #84]	; (8011ac0 <HAL_SPI_MspInit+0x88>)
 8011a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011a72:	613b      	str	r3, [r7, #16]
 8011a74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011a76:	2300      	movs	r3, #0
 8011a78:	60fb      	str	r3, [r7, #12]
 8011a7a:	4b11      	ldr	r3, [pc, #68]	; (8011ac0 <HAL_SPI_MspInit+0x88>)
 8011a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a7e:	4a10      	ldr	r2, [pc, #64]	; (8011ac0 <HAL_SPI_MspInit+0x88>)
 8011a80:	f043 0304 	orr.w	r3, r3, #4
 8011a84:	6313      	str	r3, [r2, #48]	; 0x30
 8011a86:	4b0e      	ldr	r3, [pc, #56]	; (8011ac0 <HAL_SPI_MspInit+0x88>)
 8011a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a8a:	f003 0304 	and.w	r3, r3, #4
 8011a8e:	60fb      	str	r3, [r7, #12]
 8011a90:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8011a92:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8011a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a98:	2302      	movs	r3, #2
 8011a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011aa0:	2303      	movs	r3, #3
 8011aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8011aa4:	2306      	movs	r3, #6
 8011aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011aa8:	f107 0314 	add.w	r3, r7, #20
 8011aac:	4619      	mov	r1, r3
 8011aae:	4805      	ldr	r0, [pc, #20]	; (8011ac4 <HAL_SPI_MspInit+0x8c>)
 8011ab0:	f7f0 fa76 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8011ab4:	bf00      	nop
 8011ab6:	3728      	adds	r7, #40	; 0x28
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}
 8011abc:	40003c00 	.word	0x40003c00
 8011ac0:	40023800 	.word	0x40023800
 8011ac4:	40020800 	.word	0x40020800

08011ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b086      	sub	sp, #24
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011ad8:	d10e      	bne.n	8011af8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8011ada:	2300      	movs	r3, #0
 8011adc:	617b      	str	r3, [r7, #20]
 8011ade:	4b20      	ldr	r3, [pc, #128]	; (8011b60 <HAL_TIM_Base_MspInit+0x98>)
 8011ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ae2:	4a1f      	ldr	r2, [pc, #124]	; (8011b60 <HAL_TIM_Base_MspInit+0x98>)
 8011ae4:	f043 0301 	orr.w	r3, r3, #1
 8011ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8011aea:	4b1d      	ldr	r3, [pc, #116]	; (8011b60 <HAL_TIM_Base_MspInit+0x98>)
 8011aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011aee:	f003 0301 	and.w	r3, r3, #1
 8011af2:	617b      	str	r3, [r7, #20]
 8011af4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8011af6:	e02e      	b.n	8011b56 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	4a19      	ldr	r2, [pc, #100]	; (8011b64 <HAL_TIM_Base_MspInit+0x9c>)
 8011afe:	4293      	cmp	r3, r2
 8011b00:	d10e      	bne.n	8011b20 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8011b02:	2300      	movs	r3, #0
 8011b04:	613b      	str	r3, [r7, #16]
 8011b06:	4b16      	ldr	r3, [pc, #88]	; (8011b60 <HAL_TIM_Base_MspInit+0x98>)
 8011b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b0a:	4a15      	ldr	r2, [pc, #84]	; (8011b60 <HAL_TIM_Base_MspInit+0x98>)
 8011b0c:	f043 0302 	orr.w	r3, r3, #2
 8011b10:	6413      	str	r3, [r2, #64]	; 0x40
 8011b12:	4b13      	ldr	r3, [pc, #76]	; (8011b60 <HAL_TIM_Base_MspInit+0x98>)
 8011b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b16:	f003 0302 	and.w	r3, r3, #2
 8011b1a:	613b      	str	r3, [r7, #16]
 8011b1c:	693b      	ldr	r3, [r7, #16]
}
 8011b1e:	e01a      	b.n	8011b56 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	4a10      	ldr	r2, [pc, #64]	; (8011b68 <HAL_TIM_Base_MspInit+0xa0>)
 8011b26:	4293      	cmp	r3, r2
 8011b28:	d115      	bne.n	8011b56 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	60fb      	str	r3, [r7, #12]
 8011b2e:	4b0c      	ldr	r3, [pc, #48]	; (8011b60 <HAL_TIM_Base_MspInit+0x98>)
 8011b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b32:	4a0b      	ldr	r2, [pc, #44]	; (8011b60 <HAL_TIM_Base_MspInit+0x98>)
 8011b34:	f043 0310 	orr.w	r3, r3, #16
 8011b38:	6413      	str	r3, [r2, #64]	; 0x40
 8011b3a:	4b09      	ldr	r3, [pc, #36]	; (8011b60 <HAL_TIM_Base_MspInit+0x98>)
 8011b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b3e:	f003 0310 	and.w	r3, r3, #16
 8011b42:	60fb      	str	r3, [r7, #12]
 8011b44:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8011b46:	2200      	movs	r2, #0
 8011b48:	2100      	movs	r1, #0
 8011b4a:	2036      	movs	r0, #54	; 0x36
 8011b4c:	f7ef ff1d 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8011b50:	2036      	movs	r0, #54	; 0x36
 8011b52:	f7ef ff36 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 8011b56:	bf00      	nop
 8011b58:	3718      	adds	r7, #24
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd80      	pop	{r7, pc}
 8011b5e:	bf00      	nop
 8011b60:	40023800 	.word	0x40023800
 8011b64:	40000400 	.word	0x40000400
 8011b68:	40001000 	.word	0x40001000

08011b6c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b08c      	sub	sp, #48	; 0x30
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011b74:	f107 031c 	add.w	r3, r7, #28
 8011b78:	2200      	movs	r2, #0
 8011b7a:	601a      	str	r2, [r3, #0]
 8011b7c:	605a      	str	r2, [r3, #4]
 8011b7e:	609a      	str	r2, [r3, #8]
 8011b80:	60da      	str	r2, [r3, #12]
 8011b82:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	4a32      	ldr	r2, [pc, #200]	; (8011c54 <HAL_TIM_Encoder_MspInit+0xe8>)
 8011b8a:	4293      	cmp	r3, r2
 8011b8c:	d12c      	bne.n	8011be8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8011b8e:	2300      	movs	r3, #0
 8011b90:	61bb      	str	r3, [r7, #24]
 8011b92:	4b31      	ldr	r3, [pc, #196]	; (8011c58 <HAL_TIM_Encoder_MspInit+0xec>)
 8011b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b96:	4a30      	ldr	r2, [pc, #192]	; (8011c58 <HAL_TIM_Encoder_MspInit+0xec>)
 8011b98:	f043 0304 	orr.w	r3, r3, #4
 8011b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8011b9e:	4b2e      	ldr	r3, [pc, #184]	; (8011c58 <HAL_TIM_Encoder_MspInit+0xec>)
 8011ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ba2:	f003 0304 	and.w	r3, r3, #4
 8011ba6:	61bb      	str	r3, [r7, #24]
 8011ba8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011baa:	2300      	movs	r3, #0
 8011bac:	617b      	str	r3, [r7, #20]
 8011bae:	4b2a      	ldr	r3, [pc, #168]	; (8011c58 <HAL_TIM_Encoder_MspInit+0xec>)
 8011bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bb2:	4a29      	ldr	r2, [pc, #164]	; (8011c58 <HAL_TIM_Encoder_MspInit+0xec>)
 8011bb4:	f043 0302 	orr.w	r3, r3, #2
 8011bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8011bba:	4b27      	ldr	r3, [pc, #156]	; (8011c58 <HAL_TIM_Encoder_MspInit+0xec>)
 8011bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bbe:	f003 0302 	and.w	r3, r3, #2
 8011bc2:	617b      	str	r3, [r7, #20]
 8011bc4:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8011bc6:	23c0      	movs	r3, #192	; 0xc0
 8011bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011bca:	2302      	movs	r3, #2
 8011bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8011bd6:	2302      	movs	r3, #2
 8011bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011bda:	f107 031c 	add.w	r3, r7, #28
 8011bde:	4619      	mov	r1, r3
 8011be0:	481e      	ldr	r0, [pc, #120]	; (8011c5c <HAL_TIM_Encoder_MspInit+0xf0>)
 8011be2:	f7f0 f9dd 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8011be6:	e030      	b.n	8011c4a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	4a1c      	ldr	r2, [pc, #112]	; (8011c60 <HAL_TIM_Encoder_MspInit+0xf4>)
 8011bee:	4293      	cmp	r3, r2
 8011bf0:	d12b      	bne.n	8011c4a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	613b      	str	r3, [r7, #16]
 8011bf6:	4b18      	ldr	r3, [pc, #96]	; (8011c58 <HAL_TIM_Encoder_MspInit+0xec>)
 8011bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bfa:	4a17      	ldr	r2, [pc, #92]	; (8011c58 <HAL_TIM_Encoder_MspInit+0xec>)
 8011bfc:	f043 0302 	orr.w	r3, r3, #2
 8011c00:	6453      	str	r3, [r2, #68]	; 0x44
 8011c02:	4b15      	ldr	r3, [pc, #84]	; (8011c58 <HAL_TIM_Encoder_MspInit+0xec>)
 8011c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c06:	f003 0302 	and.w	r3, r3, #2
 8011c0a:	613b      	str	r3, [r7, #16]
 8011c0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011c0e:	2300      	movs	r3, #0
 8011c10:	60fb      	str	r3, [r7, #12]
 8011c12:	4b11      	ldr	r3, [pc, #68]	; (8011c58 <HAL_TIM_Encoder_MspInit+0xec>)
 8011c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c16:	4a10      	ldr	r2, [pc, #64]	; (8011c58 <HAL_TIM_Encoder_MspInit+0xec>)
 8011c18:	f043 0304 	orr.w	r3, r3, #4
 8011c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8011c1e:	4b0e      	ldr	r3, [pc, #56]	; (8011c58 <HAL_TIM_Encoder_MspInit+0xec>)
 8011c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c22:	f003 0304 	and.w	r3, r3, #4
 8011c26:	60fb      	str	r3, [r7, #12]
 8011c28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8011c2a:	23c0      	movs	r3, #192	; 0xc0
 8011c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c2e:	2302      	movs	r3, #2
 8011c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c32:	2300      	movs	r3, #0
 8011c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011c36:	2300      	movs	r3, #0
 8011c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8011c3a:	2303      	movs	r3, #3
 8011c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011c3e:	f107 031c 	add.w	r3, r7, #28
 8011c42:	4619      	mov	r1, r3
 8011c44:	4807      	ldr	r0, [pc, #28]	; (8011c64 <HAL_TIM_Encoder_MspInit+0xf8>)
 8011c46:	f7f0 f9ab 	bl	8001fa0 <HAL_GPIO_Init>
}
 8011c4a:	bf00      	nop
 8011c4c:	3730      	adds	r7, #48	; 0x30
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}
 8011c52:	bf00      	nop
 8011c54:	40000800 	.word	0x40000800
 8011c58:	40023800 	.word	0x40023800
 8011c5c:	40020400 	.word	0x40020400
 8011c60:	40010400 	.word	0x40010400
 8011c64:	40020800 	.word	0x40020800

08011c68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b08a      	sub	sp, #40	; 0x28
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011c70:	f107 0314 	add.w	r3, r7, #20
 8011c74:	2200      	movs	r2, #0
 8011c76:	601a      	str	r2, [r3, #0]
 8011c78:	605a      	str	r2, [r3, #4]
 8011c7a:	609a      	str	r2, [r3, #8]
 8011c7c:	60da      	str	r2, [r3, #12]
 8011c7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011c88:	d13d      	bne.n	8011d06 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	613b      	str	r3, [r7, #16]
 8011c8e:	4b31      	ldr	r3, [pc, #196]	; (8011d54 <HAL_TIM_MspPostInit+0xec>)
 8011c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c92:	4a30      	ldr	r2, [pc, #192]	; (8011d54 <HAL_TIM_MspPostInit+0xec>)
 8011c94:	f043 0301 	orr.w	r3, r3, #1
 8011c98:	6313      	str	r3, [r2, #48]	; 0x30
 8011c9a:	4b2e      	ldr	r3, [pc, #184]	; (8011d54 <HAL_TIM_MspPostInit+0xec>)
 8011c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c9e:	f003 0301 	and.w	r3, r3, #1
 8011ca2:	613b      	str	r3, [r7, #16]
 8011ca4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	60fb      	str	r3, [r7, #12]
 8011caa:	4b2a      	ldr	r3, [pc, #168]	; (8011d54 <HAL_TIM_MspPostInit+0xec>)
 8011cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cae:	4a29      	ldr	r2, [pc, #164]	; (8011d54 <HAL_TIM_MspPostInit+0xec>)
 8011cb0:	f043 0302 	orr.w	r3, r3, #2
 8011cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8011cb6:	4b27      	ldr	r3, [pc, #156]	; (8011d54 <HAL_TIM_MspPostInit+0xec>)
 8011cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cba:	f003 0302 	and.w	r3, r3, #2
 8011cbe:	60fb      	str	r3, [r7, #12]
 8011cc0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8011cc2:	2320      	movs	r3, #32
 8011cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011cc6:	2302      	movs	r3, #2
 8011cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011cd6:	f107 0314 	add.w	r3, r7, #20
 8011cda:	4619      	mov	r1, r3
 8011cdc:	481e      	ldr	r0, [pc, #120]	; (8011d58 <HAL_TIM_MspPostInit+0xf0>)
 8011cde:	f7f0 f95f 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8011ce2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ce8:	2302      	movs	r3, #2
 8011cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cec:	2300      	movs	r3, #0
 8011cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011cf8:	f107 0314 	add.w	r3, r7, #20
 8011cfc:	4619      	mov	r1, r3
 8011cfe:	4817      	ldr	r0, [pc, #92]	; (8011d5c <HAL_TIM_MspPostInit+0xf4>)
 8011d00:	f7f0 f94e 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8011d04:	e022      	b.n	8011d4c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	4a15      	ldr	r2, [pc, #84]	; (8011d60 <HAL_TIM_MspPostInit+0xf8>)
 8011d0c:	4293      	cmp	r3, r2
 8011d0e:	d11d      	bne.n	8011d4c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011d10:	2300      	movs	r3, #0
 8011d12:	60bb      	str	r3, [r7, #8]
 8011d14:	4b0f      	ldr	r3, [pc, #60]	; (8011d54 <HAL_TIM_MspPostInit+0xec>)
 8011d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d18:	4a0e      	ldr	r2, [pc, #56]	; (8011d54 <HAL_TIM_MspPostInit+0xec>)
 8011d1a:	f043 0302 	orr.w	r3, r3, #2
 8011d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8011d20:	4b0c      	ldr	r3, [pc, #48]	; (8011d54 <HAL_TIM_MspPostInit+0xec>)
 8011d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d24:	f003 0302 	and.w	r3, r3, #2
 8011d28:	60bb      	str	r3, [r7, #8]
 8011d2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8011d2c:	2320      	movs	r3, #32
 8011d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d30:	2302      	movs	r3, #2
 8011d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d34:	2300      	movs	r3, #0
 8011d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d38:	2300      	movs	r3, #0
 8011d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8011d3c:	2302      	movs	r3, #2
 8011d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011d40:	f107 0314 	add.w	r3, r7, #20
 8011d44:	4619      	mov	r1, r3
 8011d46:	4805      	ldr	r0, [pc, #20]	; (8011d5c <HAL_TIM_MspPostInit+0xf4>)
 8011d48:	f7f0 f92a 	bl	8001fa0 <HAL_GPIO_Init>
}
 8011d4c:	bf00      	nop
 8011d4e:	3728      	adds	r7, #40	; 0x28
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}
 8011d54:	40023800 	.word	0x40023800
 8011d58:	40020000 	.word	0x40020000
 8011d5c:	40020400 	.word	0x40020400
 8011d60:	40000400 	.word	0x40000400

08011d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b08a      	sub	sp, #40	; 0x28
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011d6c:	f107 0314 	add.w	r3, r7, #20
 8011d70:	2200      	movs	r2, #0
 8011d72:	601a      	str	r2, [r3, #0]
 8011d74:	605a      	str	r2, [r3, #4]
 8011d76:	609a      	str	r2, [r3, #8]
 8011d78:	60da      	str	r2, [r3, #12]
 8011d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	4a19      	ldr	r2, [pc, #100]	; (8011de8 <HAL_UART_MspInit+0x84>)
 8011d82:	4293      	cmp	r3, r2
 8011d84:	d12c      	bne.n	8011de0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8011d86:	2300      	movs	r3, #0
 8011d88:	613b      	str	r3, [r7, #16]
 8011d8a:	4b18      	ldr	r3, [pc, #96]	; (8011dec <HAL_UART_MspInit+0x88>)
 8011d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d8e:	4a17      	ldr	r2, [pc, #92]	; (8011dec <HAL_UART_MspInit+0x88>)
 8011d90:	f043 0310 	orr.w	r3, r3, #16
 8011d94:	6453      	str	r3, [r2, #68]	; 0x44
 8011d96:	4b15      	ldr	r3, [pc, #84]	; (8011dec <HAL_UART_MspInit+0x88>)
 8011d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d9a:	f003 0310 	and.w	r3, r3, #16
 8011d9e:	613b      	str	r3, [r7, #16]
 8011da0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011da2:	2300      	movs	r3, #0
 8011da4:	60fb      	str	r3, [r7, #12]
 8011da6:	4b11      	ldr	r3, [pc, #68]	; (8011dec <HAL_UART_MspInit+0x88>)
 8011da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011daa:	4a10      	ldr	r2, [pc, #64]	; (8011dec <HAL_UART_MspInit+0x88>)
 8011dac:	f043 0301 	orr.w	r3, r3, #1
 8011db0:	6313      	str	r3, [r2, #48]	; 0x30
 8011db2:	4b0e      	ldr	r3, [pc, #56]	; (8011dec <HAL_UART_MspInit+0x88>)
 8011db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011db6:	f003 0301 	and.w	r3, r3, #1
 8011dba:	60fb      	str	r3, [r7, #12]
 8011dbc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8011dbe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8011dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011dc4:	2302      	movs	r3, #2
 8011dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011dc8:	2301      	movs	r3, #1
 8011dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011dcc:	2303      	movs	r3, #3
 8011dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8011dd0:	2307      	movs	r3, #7
 8011dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011dd4:	f107 0314 	add.w	r3, r7, #20
 8011dd8:	4619      	mov	r1, r3
 8011dda:	4805      	ldr	r0, [pc, #20]	; (8011df0 <HAL_UART_MspInit+0x8c>)
 8011ddc:	f7f0 f8e0 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8011de0:	bf00      	nop
 8011de2:	3728      	adds	r7, #40	; 0x28
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}
 8011de8:	40011000 	.word	0x40011000
 8011dec:	40023800 	.word	0x40023800
 8011df0:	40020000 	.word	0x40020000

08011df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011df4:	b480      	push	{r7}
 8011df6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8011df8:	bf00      	nop
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e00:	4770      	bx	lr

08011e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011e02:	b480      	push	{r7}
 8011e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011e06:	e7fe      	b.n	8011e06 <HardFault_Handler+0x4>

08011e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011e08:	b480      	push	{r7}
 8011e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011e0c:	e7fe      	b.n	8011e0c <MemManage_Handler+0x4>

08011e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011e0e:	b480      	push	{r7}
 8011e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8011e12:	e7fe      	b.n	8011e12 <BusFault_Handler+0x4>

08011e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011e14:	b480      	push	{r7}
 8011e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011e18:	e7fe      	b.n	8011e18 <UsageFault_Handler+0x4>

08011e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8011e1a:	b480      	push	{r7}
 8011e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8011e1e:	bf00      	nop
 8011e20:	46bd      	mov	sp, r7
 8011e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e26:	4770      	bx	lr

08011e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011e28:	b480      	push	{r7}
 8011e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011e2c:	bf00      	nop
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e34:	4770      	bx	lr

08011e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8011e36:	b480      	push	{r7}
 8011e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8011e3a:	bf00      	nop
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e42:	4770      	bx	lr

08011e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011e48:	f7ef f8c8 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8011e4c:	bf00      	nop
 8011e4e:	bd80      	pop	{r7, pc}

08011e50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8011e54:	4802      	ldr	r0, [pc, #8]	; (8011e60 <TIM6_DAC_IRQHandler+0x10>)
 8011e56:	f7f1 fdb0 	bl	80039ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8011e5a:	bf00      	nop
 8011e5c:	bd80      	pop	{r7, pc}
 8011e5e:	bf00      	nop
 8011e60:	20000bb4 	.word	0x20000bb4

08011e64 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b086      	sub	sp, #24
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	60f8      	str	r0, [r7, #12]
 8011e6c:	60b9      	str	r1, [r7, #8]
 8011e6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011e70:	2300      	movs	r3, #0
 8011e72:	617b      	str	r3, [r7, #20]
 8011e74:	e00a      	b.n	8011e8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8011e76:	f3af 8000 	nop.w
 8011e7a:	4601      	mov	r1, r0
 8011e7c:	68bb      	ldr	r3, [r7, #8]
 8011e7e:	1c5a      	adds	r2, r3, #1
 8011e80:	60ba      	str	r2, [r7, #8]
 8011e82:	b2ca      	uxtb	r2, r1
 8011e84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	3301      	adds	r3, #1
 8011e8a:	617b      	str	r3, [r7, #20]
 8011e8c:	697a      	ldr	r2, [r7, #20]
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	429a      	cmp	r2, r3
 8011e92:	dbf0      	blt.n	8011e76 <_read+0x12>
	}

return len;
 8011e94:	687b      	ldr	r3, [r7, #4]
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3718      	adds	r7, #24
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}

08011e9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8011e9e:	b580      	push	{r7, lr}
 8011ea0:	b086      	sub	sp, #24
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	60f8      	str	r0, [r7, #12]
 8011ea6:	60b9      	str	r1, [r7, #8]
 8011ea8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011eaa:	2300      	movs	r3, #0
 8011eac:	617b      	str	r3, [r7, #20]
 8011eae:	e009      	b.n	8011ec4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8011eb0:	68bb      	ldr	r3, [r7, #8]
 8011eb2:	1c5a      	adds	r2, r3, #1
 8011eb4:	60ba      	str	r2, [r7, #8]
 8011eb6:	781b      	ldrb	r3, [r3, #0]
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f7fa f99b 	bl	800c1f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011ebe:	697b      	ldr	r3, [r7, #20]
 8011ec0:	3301      	adds	r3, #1
 8011ec2:	617b      	str	r3, [r7, #20]
 8011ec4:	697a      	ldr	r2, [r7, #20]
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	dbf1      	blt.n	8011eb0 <_write+0x12>
	}
	return len;
 8011ecc:	687b      	ldr	r3, [r7, #4]
}
 8011ece:	4618      	mov	r0, r3
 8011ed0:	3718      	adds	r7, #24
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	bd80      	pop	{r7, pc}

08011ed6 <_close>:

int _close(int file)
{
 8011ed6:	b480      	push	{r7}
 8011ed8:	b083      	sub	sp, #12
 8011eda:	af00      	add	r7, sp, #0
 8011edc:	6078      	str	r0, [r7, #4]
	return -1;
 8011ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	370c      	adds	r7, #12
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eec:	4770      	bx	lr

08011eee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8011eee:	b480      	push	{r7}
 8011ef0:	b083      	sub	sp, #12
 8011ef2:	af00      	add	r7, sp, #0
 8011ef4:	6078      	str	r0, [r7, #4]
 8011ef6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011efe:	605a      	str	r2, [r3, #4]
	return 0;
 8011f00:	2300      	movs	r3, #0
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	370c      	adds	r7, #12
 8011f06:	46bd      	mov	sp, r7
 8011f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0c:	4770      	bx	lr

08011f0e <_isatty>:

int _isatty(int file)
{
 8011f0e:	b480      	push	{r7}
 8011f10:	b083      	sub	sp, #12
 8011f12:	af00      	add	r7, sp, #0
 8011f14:	6078      	str	r0, [r7, #4]
	return 1;
 8011f16:	2301      	movs	r3, #1
}
 8011f18:	4618      	mov	r0, r3
 8011f1a:	370c      	adds	r7, #12
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f22:	4770      	bx	lr

08011f24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011f24:	b480      	push	{r7}
 8011f26:	b085      	sub	sp, #20
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	60b9      	str	r1, [r7, #8]
 8011f2e:	607a      	str	r2, [r7, #4]
	return 0;
 8011f30:	2300      	movs	r3, #0
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	3714      	adds	r7, #20
 8011f36:	46bd      	mov	sp, r7
 8011f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3c:	4770      	bx	lr
	...

08011f40 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b084      	sub	sp, #16
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8011f48:	4b11      	ldr	r3, [pc, #68]	; (8011f90 <_sbrk+0x50>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d102      	bne.n	8011f56 <_sbrk+0x16>
		heap_end = &end;
 8011f50:	4b0f      	ldr	r3, [pc, #60]	; (8011f90 <_sbrk+0x50>)
 8011f52:	4a10      	ldr	r2, [pc, #64]	; (8011f94 <_sbrk+0x54>)
 8011f54:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8011f56:	4b0e      	ldr	r3, [pc, #56]	; (8011f90 <_sbrk+0x50>)
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8011f5c:	4b0c      	ldr	r3, [pc, #48]	; (8011f90 <_sbrk+0x50>)
 8011f5e:	681a      	ldr	r2, [r3, #0]
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	4413      	add	r3, r2
 8011f64:	466a      	mov	r2, sp
 8011f66:	4293      	cmp	r3, r2
 8011f68:	d907      	bls.n	8011f7a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8011f6a:	f000 f875 	bl	8012058 <__errno>
 8011f6e:	4602      	mov	r2, r0
 8011f70:	230c      	movs	r3, #12
 8011f72:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8011f74:	f04f 33ff 	mov.w	r3, #4294967295
 8011f78:	e006      	b.n	8011f88 <_sbrk+0x48>
	}

	heap_end += incr;
 8011f7a:	4b05      	ldr	r3, [pc, #20]	; (8011f90 <_sbrk+0x50>)
 8011f7c:	681a      	ldr	r2, [r3, #0]
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	4413      	add	r3, r2
 8011f82:	4a03      	ldr	r2, [pc, #12]	; (8011f90 <_sbrk+0x50>)
 8011f84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8011f86:	68fb      	ldr	r3, [r7, #12]
}
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3710      	adds	r7, #16
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}
 8011f90:	20000114 	.word	0x20000114
 8011f94:	200015e0 	.word	0x200015e0

08011f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8011f98:	b480      	push	{r7}
 8011f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011f9c:	4b16      	ldr	r3, [pc, #88]	; (8011ff8 <SystemInit+0x60>)
 8011f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011fa2:	4a15      	ldr	r2, [pc, #84]	; (8011ff8 <SystemInit+0x60>)
 8011fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8011fac:	4b13      	ldr	r3, [pc, #76]	; (8011ffc <SystemInit+0x64>)
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	4a12      	ldr	r2, [pc, #72]	; (8011ffc <SystemInit+0x64>)
 8011fb2:	f043 0301 	orr.w	r3, r3, #1
 8011fb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011fb8:	4b10      	ldr	r3, [pc, #64]	; (8011ffc <SystemInit+0x64>)
 8011fba:	2200      	movs	r2, #0
 8011fbc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8011fbe:	4b0f      	ldr	r3, [pc, #60]	; (8011ffc <SystemInit+0x64>)
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	4a0e      	ldr	r2, [pc, #56]	; (8011ffc <SystemInit+0x64>)
 8011fc4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8011fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011fcc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8011fce:	4b0b      	ldr	r3, [pc, #44]	; (8011ffc <SystemInit+0x64>)
 8011fd0:	4a0b      	ldr	r2, [pc, #44]	; (8012000 <SystemInit+0x68>)
 8011fd2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8011fd4:	4b09      	ldr	r3, [pc, #36]	; (8011ffc <SystemInit+0x64>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	4a08      	ldr	r2, [pc, #32]	; (8011ffc <SystemInit+0x64>)
 8011fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011fde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8011fe0:	4b06      	ldr	r3, [pc, #24]	; (8011ffc <SystemInit+0x64>)
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011fe6:	4b04      	ldr	r3, [pc, #16]	; (8011ff8 <SystemInit+0x60>)
 8011fe8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011fec:	609a      	str	r2, [r3, #8]
#endif
}
 8011fee:	bf00      	nop
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff6:	4770      	bx	lr
 8011ff8:	e000ed00 	.word	0xe000ed00
 8011ffc:	40023800 	.word	0x40023800
 8012000:	24003010 	.word	0x24003010

08012004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8012004:	f8df d034 	ldr.w	sp, [pc, #52]	; 801203c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8012008:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801200a:	e003      	b.n	8012014 <LoopCopyDataInit>

0801200c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801200c:	4b0c      	ldr	r3, [pc, #48]	; (8012040 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801200e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8012010:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8012012:	3104      	adds	r1, #4

08012014 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8012014:	480b      	ldr	r0, [pc, #44]	; (8012044 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8012016:	4b0c      	ldr	r3, [pc, #48]	; (8012048 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8012018:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801201a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801201c:	d3f6      	bcc.n	801200c <CopyDataInit>
  ldr  r2, =_sbss
 801201e:	4a0b      	ldr	r2, [pc, #44]	; (801204c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8012020:	e002      	b.n	8012028 <LoopFillZerobss>

08012022 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8012022:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8012024:	f842 3b04 	str.w	r3, [r2], #4

08012028 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8012028:	4b09      	ldr	r3, [pc, #36]	; (8012050 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801202a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801202c:	d3f9      	bcc.n	8012022 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801202e:	f7ff ffb3 	bl	8011f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8012032:	f000 f817 	bl	8012064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012036:	f7fb fbff 	bl	800d838 <main>
  bx  lr    
 801203a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 801203c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8012040:	080138c0 	.word	0x080138c0
  ldr  r0, =_sdata
 8012044:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8012048:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 801204c:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 8012050:	200015dc 	.word	0x200015dc

08012054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012054:	e7fe      	b.n	8012054 <ADC_IRQHandler>
	...

08012058 <__errno>:
 8012058:	4b01      	ldr	r3, [pc, #4]	; (8012060 <__errno+0x8>)
 801205a:	6818      	ldr	r0, [r3, #0]
 801205c:	4770      	bx	lr
 801205e:	bf00      	nop
 8012060:	20000084 	.word	0x20000084

08012064 <__libc_init_array>:
 8012064:	b570      	push	{r4, r5, r6, lr}
 8012066:	4e0d      	ldr	r6, [pc, #52]	; (801209c <__libc_init_array+0x38>)
 8012068:	4c0d      	ldr	r4, [pc, #52]	; (80120a0 <__libc_init_array+0x3c>)
 801206a:	1ba4      	subs	r4, r4, r6
 801206c:	10a4      	asrs	r4, r4, #2
 801206e:	2500      	movs	r5, #0
 8012070:	42a5      	cmp	r5, r4
 8012072:	d109      	bne.n	8012088 <__libc_init_array+0x24>
 8012074:	4e0b      	ldr	r6, [pc, #44]	; (80120a4 <__libc_init_array+0x40>)
 8012076:	4c0c      	ldr	r4, [pc, #48]	; (80120a8 <__libc_init_array+0x44>)
 8012078:	f001 f932 	bl	80132e0 <_init>
 801207c:	1ba4      	subs	r4, r4, r6
 801207e:	10a4      	asrs	r4, r4, #2
 8012080:	2500      	movs	r5, #0
 8012082:	42a5      	cmp	r5, r4
 8012084:	d105      	bne.n	8012092 <__libc_init_array+0x2e>
 8012086:	bd70      	pop	{r4, r5, r6, pc}
 8012088:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801208c:	4798      	blx	r3
 801208e:	3501      	adds	r5, #1
 8012090:	e7ee      	b.n	8012070 <__libc_init_array+0xc>
 8012092:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012096:	4798      	blx	r3
 8012098:	3501      	adds	r5, #1
 801209a:	e7f2      	b.n	8012082 <__libc_init_array+0x1e>
 801209c:	080138b8 	.word	0x080138b8
 80120a0:	080138b8 	.word	0x080138b8
 80120a4:	080138b8 	.word	0x080138b8
 80120a8:	080138bc 	.word	0x080138bc

080120ac <memset>:
 80120ac:	4402      	add	r2, r0
 80120ae:	4603      	mov	r3, r0
 80120b0:	4293      	cmp	r3, r2
 80120b2:	d100      	bne.n	80120b6 <memset+0xa>
 80120b4:	4770      	bx	lr
 80120b6:	f803 1b01 	strb.w	r1, [r3], #1
 80120ba:	e7f9      	b.n	80120b0 <memset+0x4>

080120bc <iprintf>:
 80120bc:	b40f      	push	{r0, r1, r2, r3}
 80120be:	4b0a      	ldr	r3, [pc, #40]	; (80120e8 <iprintf+0x2c>)
 80120c0:	b513      	push	{r0, r1, r4, lr}
 80120c2:	681c      	ldr	r4, [r3, #0]
 80120c4:	b124      	cbz	r4, 80120d0 <iprintf+0x14>
 80120c6:	69a3      	ldr	r3, [r4, #24]
 80120c8:	b913      	cbnz	r3, 80120d0 <iprintf+0x14>
 80120ca:	4620      	mov	r0, r4
 80120cc:	f000 fad8 	bl	8012680 <__sinit>
 80120d0:	ab05      	add	r3, sp, #20
 80120d2:	9a04      	ldr	r2, [sp, #16]
 80120d4:	68a1      	ldr	r1, [r4, #8]
 80120d6:	9301      	str	r3, [sp, #4]
 80120d8:	4620      	mov	r0, r4
 80120da:	f000 fc99 	bl	8012a10 <_vfiprintf_r>
 80120de:	b002      	add	sp, #8
 80120e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120e4:	b004      	add	sp, #16
 80120e6:	4770      	bx	lr
 80120e8:	20000084 	.word	0x20000084

080120ec <_puts_r>:
 80120ec:	b570      	push	{r4, r5, r6, lr}
 80120ee:	460e      	mov	r6, r1
 80120f0:	4605      	mov	r5, r0
 80120f2:	b118      	cbz	r0, 80120fc <_puts_r+0x10>
 80120f4:	6983      	ldr	r3, [r0, #24]
 80120f6:	b90b      	cbnz	r3, 80120fc <_puts_r+0x10>
 80120f8:	f000 fac2 	bl	8012680 <__sinit>
 80120fc:	69ab      	ldr	r3, [r5, #24]
 80120fe:	68ac      	ldr	r4, [r5, #8]
 8012100:	b913      	cbnz	r3, 8012108 <_puts_r+0x1c>
 8012102:	4628      	mov	r0, r5
 8012104:	f000 fabc 	bl	8012680 <__sinit>
 8012108:	4b23      	ldr	r3, [pc, #140]	; (8012198 <_puts_r+0xac>)
 801210a:	429c      	cmp	r4, r3
 801210c:	d117      	bne.n	801213e <_puts_r+0x52>
 801210e:	686c      	ldr	r4, [r5, #4]
 8012110:	89a3      	ldrh	r3, [r4, #12]
 8012112:	071b      	lsls	r3, r3, #28
 8012114:	d51d      	bpl.n	8012152 <_puts_r+0x66>
 8012116:	6923      	ldr	r3, [r4, #16]
 8012118:	b1db      	cbz	r3, 8012152 <_puts_r+0x66>
 801211a:	3e01      	subs	r6, #1
 801211c:	68a3      	ldr	r3, [r4, #8]
 801211e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012122:	3b01      	subs	r3, #1
 8012124:	60a3      	str	r3, [r4, #8]
 8012126:	b9e9      	cbnz	r1, 8012164 <_puts_r+0x78>
 8012128:	2b00      	cmp	r3, #0
 801212a:	da2e      	bge.n	801218a <_puts_r+0x9e>
 801212c:	4622      	mov	r2, r4
 801212e:	210a      	movs	r1, #10
 8012130:	4628      	mov	r0, r5
 8012132:	f000 f8f5 	bl	8012320 <__swbuf_r>
 8012136:	3001      	adds	r0, #1
 8012138:	d011      	beq.n	801215e <_puts_r+0x72>
 801213a:	200a      	movs	r0, #10
 801213c:	e011      	b.n	8012162 <_puts_r+0x76>
 801213e:	4b17      	ldr	r3, [pc, #92]	; (801219c <_puts_r+0xb0>)
 8012140:	429c      	cmp	r4, r3
 8012142:	d101      	bne.n	8012148 <_puts_r+0x5c>
 8012144:	68ac      	ldr	r4, [r5, #8]
 8012146:	e7e3      	b.n	8012110 <_puts_r+0x24>
 8012148:	4b15      	ldr	r3, [pc, #84]	; (80121a0 <_puts_r+0xb4>)
 801214a:	429c      	cmp	r4, r3
 801214c:	bf08      	it	eq
 801214e:	68ec      	ldreq	r4, [r5, #12]
 8012150:	e7de      	b.n	8012110 <_puts_r+0x24>
 8012152:	4621      	mov	r1, r4
 8012154:	4628      	mov	r0, r5
 8012156:	f000 f935 	bl	80123c4 <__swsetup_r>
 801215a:	2800      	cmp	r0, #0
 801215c:	d0dd      	beq.n	801211a <_puts_r+0x2e>
 801215e:	f04f 30ff 	mov.w	r0, #4294967295
 8012162:	bd70      	pop	{r4, r5, r6, pc}
 8012164:	2b00      	cmp	r3, #0
 8012166:	da04      	bge.n	8012172 <_puts_r+0x86>
 8012168:	69a2      	ldr	r2, [r4, #24]
 801216a:	429a      	cmp	r2, r3
 801216c:	dc06      	bgt.n	801217c <_puts_r+0x90>
 801216e:	290a      	cmp	r1, #10
 8012170:	d004      	beq.n	801217c <_puts_r+0x90>
 8012172:	6823      	ldr	r3, [r4, #0]
 8012174:	1c5a      	adds	r2, r3, #1
 8012176:	6022      	str	r2, [r4, #0]
 8012178:	7019      	strb	r1, [r3, #0]
 801217a:	e7cf      	b.n	801211c <_puts_r+0x30>
 801217c:	4622      	mov	r2, r4
 801217e:	4628      	mov	r0, r5
 8012180:	f000 f8ce 	bl	8012320 <__swbuf_r>
 8012184:	3001      	adds	r0, #1
 8012186:	d1c9      	bne.n	801211c <_puts_r+0x30>
 8012188:	e7e9      	b.n	801215e <_puts_r+0x72>
 801218a:	6823      	ldr	r3, [r4, #0]
 801218c:	200a      	movs	r0, #10
 801218e:	1c5a      	adds	r2, r3, #1
 8012190:	6022      	str	r2, [r4, #0]
 8012192:	7018      	strb	r0, [r3, #0]
 8012194:	e7e5      	b.n	8012162 <_puts_r+0x76>
 8012196:	bf00      	nop
 8012198:	08013838 	.word	0x08013838
 801219c:	08013858 	.word	0x08013858
 80121a0:	08013818 	.word	0x08013818

080121a4 <puts>:
 80121a4:	4b02      	ldr	r3, [pc, #8]	; (80121b0 <puts+0xc>)
 80121a6:	4601      	mov	r1, r0
 80121a8:	6818      	ldr	r0, [r3, #0]
 80121aa:	f7ff bf9f 	b.w	80120ec <_puts_r>
 80121ae:	bf00      	nop
 80121b0:	20000084 	.word	0x20000084

080121b4 <setbuf>:
 80121b4:	2900      	cmp	r1, #0
 80121b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121ba:	bf0c      	ite	eq
 80121bc:	2202      	moveq	r2, #2
 80121be:	2200      	movne	r2, #0
 80121c0:	f000 b800 	b.w	80121c4 <setvbuf>

080121c4 <setvbuf>:
 80121c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80121c8:	461d      	mov	r5, r3
 80121ca:	4b51      	ldr	r3, [pc, #324]	; (8012310 <setvbuf+0x14c>)
 80121cc:	681e      	ldr	r6, [r3, #0]
 80121ce:	4604      	mov	r4, r0
 80121d0:	460f      	mov	r7, r1
 80121d2:	4690      	mov	r8, r2
 80121d4:	b126      	cbz	r6, 80121e0 <setvbuf+0x1c>
 80121d6:	69b3      	ldr	r3, [r6, #24]
 80121d8:	b913      	cbnz	r3, 80121e0 <setvbuf+0x1c>
 80121da:	4630      	mov	r0, r6
 80121dc:	f000 fa50 	bl	8012680 <__sinit>
 80121e0:	4b4c      	ldr	r3, [pc, #304]	; (8012314 <setvbuf+0x150>)
 80121e2:	429c      	cmp	r4, r3
 80121e4:	d152      	bne.n	801228c <setvbuf+0xc8>
 80121e6:	6874      	ldr	r4, [r6, #4]
 80121e8:	f1b8 0f02 	cmp.w	r8, #2
 80121ec:	d006      	beq.n	80121fc <setvbuf+0x38>
 80121ee:	f1b8 0f01 	cmp.w	r8, #1
 80121f2:	f200 8089 	bhi.w	8012308 <setvbuf+0x144>
 80121f6:	2d00      	cmp	r5, #0
 80121f8:	f2c0 8086 	blt.w	8012308 <setvbuf+0x144>
 80121fc:	4621      	mov	r1, r4
 80121fe:	4630      	mov	r0, r6
 8012200:	f000 f9d4 	bl	80125ac <_fflush_r>
 8012204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012206:	b141      	cbz	r1, 801221a <setvbuf+0x56>
 8012208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801220c:	4299      	cmp	r1, r3
 801220e:	d002      	beq.n	8012216 <setvbuf+0x52>
 8012210:	4630      	mov	r0, r6
 8012212:	f000 fb2b 	bl	801286c <_free_r>
 8012216:	2300      	movs	r3, #0
 8012218:	6363      	str	r3, [r4, #52]	; 0x34
 801221a:	2300      	movs	r3, #0
 801221c:	61a3      	str	r3, [r4, #24]
 801221e:	6063      	str	r3, [r4, #4]
 8012220:	89a3      	ldrh	r3, [r4, #12]
 8012222:	061b      	lsls	r3, r3, #24
 8012224:	d503      	bpl.n	801222e <setvbuf+0x6a>
 8012226:	6921      	ldr	r1, [r4, #16]
 8012228:	4630      	mov	r0, r6
 801222a:	f000 fb1f 	bl	801286c <_free_r>
 801222e:	89a3      	ldrh	r3, [r4, #12]
 8012230:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8012234:	f023 0303 	bic.w	r3, r3, #3
 8012238:	f1b8 0f02 	cmp.w	r8, #2
 801223c:	81a3      	strh	r3, [r4, #12]
 801223e:	d05d      	beq.n	80122fc <setvbuf+0x138>
 8012240:	ab01      	add	r3, sp, #4
 8012242:	466a      	mov	r2, sp
 8012244:	4621      	mov	r1, r4
 8012246:	4630      	mov	r0, r6
 8012248:	f000 faa4 	bl	8012794 <__swhatbuf_r>
 801224c:	89a3      	ldrh	r3, [r4, #12]
 801224e:	4318      	orrs	r0, r3
 8012250:	81a0      	strh	r0, [r4, #12]
 8012252:	bb2d      	cbnz	r5, 80122a0 <setvbuf+0xdc>
 8012254:	9d00      	ldr	r5, [sp, #0]
 8012256:	4628      	mov	r0, r5
 8012258:	f000 fb00 	bl	801285c <malloc>
 801225c:	4607      	mov	r7, r0
 801225e:	2800      	cmp	r0, #0
 8012260:	d14e      	bne.n	8012300 <setvbuf+0x13c>
 8012262:	f8dd 9000 	ldr.w	r9, [sp]
 8012266:	45a9      	cmp	r9, r5
 8012268:	d13c      	bne.n	80122e4 <setvbuf+0x120>
 801226a:	f04f 30ff 	mov.w	r0, #4294967295
 801226e:	89a3      	ldrh	r3, [r4, #12]
 8012270:	f043 0302 	orr.w	r3, r3, #2
 8012274:	81a3      	strh	r3, [r4, #12]
 8012276:	2300      	movs	r3, #0
 8012278:	60a3      	str	r3, [r4, #8]
 801227a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801227e:	6023      	str	r3, [r4, #0]
 8012280:	6123      	str	r3, [r4, #16]
 8012282:	2301      	movs	r3, #1
 8012284:	6163      	str	r3, [r4, #20]
 8012286:	b003      	add	sp, #12
 8012288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801228c:	4b22      	ldr	r3, [pc, #136]	; (8012318 <setvbuf+0x154>)
 801228e:	429c      	cmp	r4, r3
 8012290:	d101      	bne.n	8012296 <setvbuf+0xd2>
 8012292:	68b4      	ldr	r4, [r6, #8]
 8012294:	e7a8      	b.n	80121e8 <setvbuf+0x24>
 8012296:	4b21      	ldr	r3, [pc, #132]	; (801231c <setvbuf+0x158>)
 8012298:	429c      	cmp	r4, r3
 801229a:	bf08      	it	eq
 801229c:	68f4      	ldreq	r4, [r6, #12]
 801229e:	e7a3      	b.n	80121e8 <setvbuf+0x24>
 80122a0:	2f00      	cmp	r7, #0
 80122a2:	d0d8      	beq.n	8012256 <setvbuf+0x92>
 80122a4:	69b3      	ldr	r3, [r6, #24]
 80122a6:	b913      	cbnz	r3, 80122ae <setvbuf+0xea>
 80122a8:	4630      	mov	r0, r6
 80122aa:	f000 f9e9 	bl	8012680 <__sinit>
 80122ae:	f1b8 0f01 	cmp.w	r8, #1
 80122b2:	bf08      	it	eq
 80122b4:	89a3      	ldrheq	r3, [r4, #12]
 80122b6:	6027      	str	r7, [r4, #0]
 80122b8:	bf04      	itt	eq
 80122ba:	f043 0301 	orreq.w	r3, r3, #1
 80122be:	81a3      	strheq	r3, [r4, #12]
 80122c0:	89a3      	ldrh	r3, [r4, #12]
 80122c2:	f013 0008 	ands.w	r0, r3, #8
 80122c6:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80122ca:	d01b      	beq.n	8012304 <setvbuf+0x140>
 80122cc:	f013 0001 	ands.w	r0, r3, #1
 80122d0:	bf18      	it	ne
 80122d2:	426d      	negne	r5, r5
 80122d4:	f04f 0300 	mov.w	r3, #0
 80122d8:	bf1d      	ittte	ne
 80122da:	60a3      	strne	r3, [r4, #8]
 80122dc:	61a5      	strne	r5, [r4, #24]
 80122de:	4618      	movne	r0, r3
 80122e0:	60a5      	streq	r5, [r4, #8]
 80122e2:	e7d0      	b.n	8012286 <setvbuf+0xc2>
 80122e4:	4648      	mov	r0, r9
 80122e6:	f000 fab9 	bl	801285c <malloc>
 80122ea:	4607      	mov	r7, r0
 80122ec:	2800      	cmp	r0, #0
 80122ee:	d0bc      	beq.n	801226a <setvbuf+0xa6>
 80122f0:	89a3      	ldrh	r3, [r4, #12]
 80122f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122f6:	81a3      	strh	r3, [r4, #12]
 80122f8:	464d      	mov	r5, r9
 80122fa:	e7d3      	b.n	80122a4 <setvbuf+0xe0>
 80122fc:	2000      	movs	r0, #0
 80122fe:	e7b6      	b.n	801226e <setvbuf+0xaa>
 8012300:	46a9      	mov	r9, r5
 8012302:	e7f5      	b.n	80122f0 <setvbuf+0x12c>
 8012304:	60a0      	str	r0, [r4, #8]
 8012306:	e7be      	b.n	8012286 <setvbuf+0xc2>
 8012308:	f04f 30ff 	mov.w	r0, #4294967295
 801230c:	e7bb      	b.n	8012286 <setvbuf+0xc2>
 801230e:	bf00      	nop
 8012310:	20000084 	.word	0x20000084
 8012314:	08013838 	.word	0x08013838
 8012318:	08013858 	.word	0x08013858
 801231c:	08013818 	.word	0x08013818

08012320 <__swbuf_r>:
 8012320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012322:	460e      	mov	r6, r1
 8012324:	4614      	mov	r4, r2
 8012326:	4605      	mov	r5, r0
 8012328:	b118      	cbz	r0, 8012332 <__swbuf_r+0x12>
 801232a:	6983      	ldr	r3, [r0, #24]
 801232c:	b90b      	cbnz	r3, 8012332 <__swbuf_r+0x12>
 801232e:	f000 f9a7 	bl	8012680 <__sinit>
 8012332:	4b21      	ldr	r3, [pc, #132]	; (80123b8 <__swbuf_r+0x98>)
 8012334:	429c      	cmp	r4, r3
 8012336:	d12a      	bne.n	801238e <__swbuf_r+0x6e>
 8012338:	686c      	ldr	r4, [r5, #4]
 801233a:	69a3      	ldr	r3, [r4, #24]
 801233c:	60a3      	str	r3, [r4, #8]
 801233e:	89a3      	ldrh	r3, [r4, #12]
 8012340:	071a      	lsls	r2, r3, #28
 8012342:	d52e      	bpl.n	80123a2 <__swbuf_r+0x82>
 8012344:	6923      	ldr	r3, [r4, #16]
 8012346:	b363      	cbz	r3, 80123a2 <__swbuf_r+0x82>
 8012348:	6923      	ldr	r3, [r4, #16]
 801234a:	6820      	ldr	r0, [r4, #0]
 801234c:	1ac0      	subs	r0, r0, r3
 801234e:	6963      	ldr	r3, [r4, #20]
 8012350:	b2f6      	uxtb	r6, r6
 8012352:	4283      	cmp	r3, r0
 8012354:	4637      	mov	r7, r6
 8012356:	dc04      	bgt.n	8012362 <__swbuf_r+0x42>
 8012358:	4621      	mov	r1, r4
 801235a:	4628      	mov	r0, r5
 801235c:	f000 f926 	bl	80125ac <_fflush_r>
 8012360:	bb28      	cbnz	r0, 80123ae <__swbuf_r+0x8e>
 8012362:	68a3      	ldr	r3, [r4, #8]
 8012364:	3b01      	subs	r3, #1
 8012366:	60a3      	str	r3, [r4, #8]
 8012368:	6823      	ldr	r3, [r4, #0]
 801236a:	1c5a      	adds	r2, r3, #1
 801236c:	6022      	str	r2, [r4, #0]
 801236e:	701e      	strb	r6, [r3, #0]
 8012370:	6963      	ldr	r3, [r4, #20]
 8012372:	3001      	adds	r0, #1
 8012374:	4283      	cmp	r3, r0
 8012376:	d004      	beq.n	8012382 <__swbuf_r+0x62>
 8012378:	89a3      	ldrh	r3, [r4, #12]
 801237a:	07db      	lsls	r3, r3, #31
 801237c:	d519      	bpl.n	80123b2 <__swbuf_r+0x92>
 801237e:	2e0a      	cmp	r6, #10
 8012380:	d117      	bne.n	80123b2 <__swbuf_r+0x92>
 8012382:	4621      	mov	r1, r4
 8012384:	4628      	mov	r0, r5
 8012386:	f000 f911 	bl	80125ac <_fflush_r>
 801238a:	b190      	cbz	r0, 80123b2 <__swbuf_r+0x92>
 801238c:	e00f      	b.n	80123ae <__swbuf_r+0x8e>
 801238e:	4b0b      	ldr	r3, [pc, #44]	; (80123bc <__swbuf_r+0x9c>)
 8012390:	429c      	cmp	r4, r3
 8012392:	d101      	bne.n	8012398 <__swbuf_r+0x78>
 8012394:	68ac      	ldr	r4, [r5, #8]
 8012396:	e7d0      	b.n	801233a <__swbuf_r+0x1a>
 8012398:	4b09      	ldr	r3, [pc, #36]	; (80123c0 <__swbuf_r+0xa0>)
 801239a:	429c      	cmp	r4, r3
 801239c:	bf08      	it	eq
 801239e:	68ec      	ldreq	r4, [r5, #12]
 80123a0:	e7cb      	b.n	801233a <__swbuf_r+0x1a>
 80123a2:	4621      	mov	r1, r4
 80123a4:	4628      	mov	r0, r5
 80123a6:	f000 f80d 	bl	80123c4 <__swsetup_r>
 80123aa:	2800      	cmp	r0, #0
 80123ac:	d0cc      	beq.n	8012348 <__swbuf_r+0x28>
 80123ae:	f04f 37ff 	mov.w	r7, #4294967295
 80123b2:	4638      	mov	r0, r7
 80123b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123b6:	bf00      	nop
 80123b8:	08013838 	.word	0x08013838
 80123bc:	08013858 	.word	0x08013858
 80123c0:	08013818 	.word	0x08013818

080123c4 <__swsetup_r>:
 80123c4:	4b32      	ldr	r3, [pc, #200]	; (8012490 <__swsetup_r+0xcc>)
 80123c6:	b570      	push	{r4, r5, r6, lr}
 80123c8:	681d      	ldr	r5, [r3, #0]
 80123ca:	4606      	mov	r6, r0
 80123cc:	460c      	mov	r4, r1
 80123ce:	b125      	cbz	r5, 80123da <__swsetup_r+0x16>
 80123d0:	69ab      	ldr	r3, [r5, #24]
 80123d2:	b913      	cbnz	r3, 80123da <__swsetup_r+0x16>
 80123d4:	4628      	mov	r0, r5
 80123d6:	f000 f953 	bl	8012680 <__sinit>
 80123da:	4b2e      	ldr	r3, [pc, #184]	; (8012494 <__swsetup_r+0xd0>)
 80123dc:	429c      	cmp	r4, r3
 80123de:	d10f      	bne.n	8012400 <__swsetup_r+0x3c>
 80123e0:	686c      	ldr	r4, [r5, #4]
 80123e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123e6:	b29a      	uxth	r2, r3
 80123e8:	0715      	lsls	r5, r2, #28
 80123ea:	d42c      	bmi.n	8012446 <__swsetup_r+0x82>
 80123ec:	06d0      	lsls	r0, r2, #27
 80123ee:	d411      	bmi.n	8012414 <__swsetup_r+0x50>
 80123f0:	2209      	movs	r2, #9
 80123f2:	6032      	str	r2, [r6, #0]
 80123f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123f8:	81a3      	strh	r3, [r4, #12]
 80123fa:	f04f 30ff 	mov.w	r0, #4294967295
 80123fe:	e03e      	b.n	801247e <__swsetup_r+0xba>
 8012400:	4b25      	ldr	r3, [pc, #148]	; (8012498 <__swsetup_r+0xd4>)
 8012402:	429c      	cmp	r4, r3
 8012404:	d101      	bne.n	801240a <__swsetup_r+0x46>
 8012406:	68ac      	ldr	r4, [r5, #8]
 8012408:	e7eb      	b.n	80123e2 <__swsetup_r+0x1e>
 801240a:	4b24      	ldr	r3, [pc, #144]	; (801249c <__swsetup_r+0xd8>)
 801240c:	429c      	cmp	r4, r3
 801240e:	bf08      	it	eq
 8012410:	68ec      	ldreq	r4, [r5, #12]
 8012412:	e7e6      	b.n	80123e2 <__swsetup_r+0x1e>
 8012414:	0751      	lsls	r1, r2, #29
 8012416:	d512      	bpl.n	801243e <__swsetup_r+0x7a>
 8012418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801241a:	b141      	cbz	r1, 801242e <__swsetup_r+0x6a>
 801241c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012420:	4299      	cmp	r1, r3
 8012422:	d002      	beq.n	801242a <__swsetup_r+0x66>
 8012424:	4630      	mov	r0, r6
 8012426:	f000 fa21 	bl	801286c <_free_r>
 801242a:	2300      	movs	r3, #0
 801242c:	6363      	str	r3, [r4, #52]	; 0x34
 801242e:	89a3      	ldrh	r3, [r4, #12]
 8012430:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012434:	81a3      	strh	r3, [r4, #12]
 8012436:	2300      	movs	r3, #0
 8012438:	6063      	str	r3, [r4, #4]
 801243a:	6923      	ldr	r3, [r4, #16]
 801243c:	6023      	str	r3, [r4, #0]
 801243e:	89a3      	ldrh	r3, [r4, #12]
 8012440:	f043 0308 	orr.w	r3, r3, #8
 8012444:	81a3      	strh	r3, [r4, #12]
 8012446:	6923      	ldr	r3, [r4, #16]
 8012448:	b94b      	cbnz	r3, 801245e <__swsetup_r+0x9a>
 801244a:	89a3      	ldrh	r3, [r4, #12]
 801244c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012454:	d003      	beq.n	801245e <__swsetup_r+0x9a>
 8012456:	4621      	mov	r1, r4
 8012458:	4630      	mov	r0, r6
 801245a:	f000 f9bf 	bl	80127dc <__smakebuf_r>
 801245e:	89a2      	ldrh	r2, [r4, #12]
 8012460:	f012 0301 	ands.w	r3, r2, #1
 8012464:	d00c      	beq.n	8012480 <__swsetup_r+0xbc>
 8012466:	2300      	movs	r3, #0
 8012468:	60a3      	str	r3, [r4, #8]
 801246a:	6963      	ldr	r3, [r4, #20]
 801246c:	425b      	negs	r3, r3
 801246e:	61a3      	str	r3, [r4, #24]
 8012470:	6923      	ldr	r3, [r4, #16]
 8012472:	b953      	cbnz	r3, 801248a <__swsetup_r+0xc6>
 8012474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012478:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801247c:	d1ba      	bne.n	80123f4 <__swsetup_r+0x30>
 801247e:	bd70      	pop	{r4, r5, r6, pc}
 8012480:	0792      	lsls	r2, r2, #30
 8012482:	bf58      	it	pl
 8012484:	6963      	ldrpl	r3, [r4, #20]
 8012486:	60a3      	str	r3, [r4, #8]
 8012488:	e7f2      	b.n	8012470 <__swsetup_r+0xac>
 801248a:	2000      	movs	r0, #0
 801248c:	e7f7      	b.n	801247e <__swsetup_r+0xba>
 801248e:	bf00      	nop
 8012490:	20000084 	.word	0x20000084
 8012494:	08013838 	.word	0x08013838
 8012498:	08013858 	.word	0x08013858
 801249c:	08013818 	.word	0x08013818

080124a0 <__sflush_r>:
 80124a0:	898a      	ldrh	r2, [r1, #12]
 80124a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124a6:	4605      	mov	r5, r0
 80124a8:	0710      	lsls	r0, r2, #28
 80124aa:	460c      	mov	r4, r1
 80124ac:	d458      	bmi.n	8012560 <__sflush_r+0xc0>
 80124ae:	684b      	ldr	r3, [r1, #4]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	dc05      	bgt.n	80124c0 <__sflush_r+0x20>
 80124b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	dc02      	bgt.n	80124c0 <__sflush_r+0x20>
 80124ba:	2000      	movs	r0, #0
 80124bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80124c2:	2e00      	cmp	r6, #0
 80124c4:	d0f9      	beq.n	80124ba <__sflush_r+0x1a>
 80124c6:	2300      	movs	r3, #0
 80124c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80124cc:	682f      	ldr	r7, [r5, #0]
 80124ce:	6a21      	ldr	r1, [r4, #32]
 80124d0:	602b      	str	r3, [r5, #0]
 80124d2:	d032      	beq.n	801253a <__sflush_r+0x9a>
 80124d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80124d6:	89a3      	ldrh	r3, [r4, #12]
 80124d8:	075a      	lsls	r2, r3, #29
 80124da:	d505      	bpl.n	80124e8 <__sflush_r+0x48>
 80124dc:	6863      	ldr	r3, [r4, #4]
 80124de:	1ac0      	subs	r0, r0, r3
 80124e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80124e2:	b10b      	cbz	r3, 80124e8 <__sflush_r+0x48>
 80124e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80124e6:	1ac0      	subs	r0, r0, r3
 80124e8:	2300      	movs	r3, #0
 80124ea:	4602      	mov	r2, r0
 80124ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80124ee:	6a21      	ldr	r1, [r4, #32]
 80124f0:	4628      	mov	r0, r5
 80124f2:	47b0      	blx	r6
 80124f4:	1c43      	adds	r3, r0, #1
 80124f6:	89a3      	ldrh	r3, [r4, #12]
 80124f8:	d106      	bne.n	8012508 <__sflush_r+0x68>
 80124fa:	6829      	ldr	r1, [r5, #0]
 80124fc:	291d      	cmp	r1, #29
 80124fe:	d848      	bhi.n	8012592 <__sflush_r+0xf2>
 8012500:	4a29      	ldr	r2, [pc, #164]	; (80125a8 <__sflush_r+0x108>)
 8012502:	40ca      	lsrs	r2, r1
 8012504:	07d6      	lsls	r6, r2, #31
 8012506:	d544      	bpl.n	8012592 <__sflush_r+0xf2>
 8012508:	2200      	movs	r2, #0
 801250a:	6062      	str	r2, [r4, #4]
 801250c:	04d9      	lsls	r1, r3, #19
 801250e:	6922      	ldr	r2, [r4, #16]
 8012510:	6022      	str	r2, [r4, #0]
 8012512:	d504      	bpl.n	801251e <__sflush_r+0x7e>
 8012514:	1c42      	adds	r2, r0, #1
 8012516:	d101      	bne.n	801251c <__sflush_r+0x7c>
 8012518:	682b      	ldr	r3, [r5, #0]
 801251a:	b903      	cbnz	r3, 801251e <__sflush_r+0x7e>
 801251c:	6560      	str	r0, [r4, #84]	; 0x54
 801251e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012520:	602f      	str	r7, [r5, #0]
 8012522:	2900      	cmp	r1, #0
 8012524:	d0c9      	beq.n	80124ba <__sflush_r+0x1a>
 8012526:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801252a:	4299      	cmp	r1, r3
 801252c:	d002      	beq.n	8012534 <__sflush_r+0x94>
 801252e:	4628      	mov	r0, r5
 8012530:	f000 f99c 	bl	801286c <_free_r>
 8012534:	2000      	movs	r0, #0
 8012536:	6360      	str	r0, [r4, #52]	; 0x34
 8012538:	e7c0      	b.n	80124bc <__sflush_r+0x1c>
 801253a:	2301      	movs	r3, #1
 801253c:	4628      	mov	r0, r5
 801253e:	47b0      	blx	r6
 8012540:	1c41      	adds	r1, r0, #1
 8012542:	d1c8      	bne.n	80124d6 <__sflush_r+0x36>
 8012544:	682b      	ldr	r3, [r5, #0]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d0c5      	beq.n	80124d6 <__sflush_r+0x36>
 801254a:	2b1d      	cmp	r3, #29
 801254c:	d001      	beq.n	8012552 <__sflush_r+0xb2>
 801254e:	2b16      	cmp	r3, #22
 8012550:	d101      	bne.n	8012556 <__sflush_r+0xb6>
 8012552:	602f      	str	r7, [r5, #0]
 8012554:	e7b1      	b.n	80124ba <__sflush_r+0x1a>
 8012556:	89a3      	ldrh	r3, [r4, #12]
 8012558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801255c:	81a3      	strh	r3, [r4, #12]
 801255e:	e7ad      	b.n	80124bc <__sflush_r+0x1c>
 8012560:	690f      	ldr	r7, [r1, #16]
 8012562:	2f00      	cmp	r7, #0
 8012564:	d0a9      	beq.n	80124ba <__sflush_r+0x1a>
 8012566:	0793      	lsls	r3, r2, #30
 8012568:	680e      	ldr	r6, [r1, #0]
 801256a:	bf08      	it	eq
 801256c:	694b      	ldreq	r3, [r1, #20]
 801256e:	600f      	str	r7, [r1, #0]
 8012570:	bf18      	it	ne
 8012572:	2300      	movne	r3, #0
 8012574:	eba6 0807 	sub.w	r8, r6, r7
 8012578:	608b      	str	r3, [r1, #8]
 801257a:	f1b8 0f00 	cmp.w	r8, #0
 801257e:	dd9c      	ble.n	80124ba <__sflush_r+0x1a>
 8012580:	4643      	mov	r3, r8
 8012582:	463a      	mov	r2, r7
 8012584:	6a21      	ldr	r1, [r4, #32]
 8012586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012588:	4628      	mov	r0, r5
 801258a:	47b0      	blx	r6
 801258c:	2800      	cmp	r0, #0
 801258e:	dc06      	bgt.n	801259e <__sflush_r+0xfe>
 8012590:	89a3      	ldrh	r3, [r4, #12]
 8012592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012596:	81a3      	strh	r3, [r4, #12]
 8012598:	f04f 30ff 	mov.w	r0, #4294967295
 801259c:	e78e      	b.n	80124bc <__sflush_r+0x1c>
 801259e:	4407      	add	r7, r0
 80125a0:	eba8 0800 	sub.w	r8, r8, r0
 80125a4:	e7e9      	b.n	801257a <__sflush_r+0xda>
 80125a6:	bf00      	nop
 80125a8:	20400001 	.word	0x20400001

080125ac <_fflush_r>:
 80125ac:	b538      	push	{r3, r4, r5, lr}
 80125ae:	690b      	ldr	r3, [r1, #16]
 80125b0:	4605      	mov	r5, r0
 80125b2:	460c      	mov	r4, r1
 80125b4:	b1db      	cbz	r3, 80125ee <_fflush_r+0x42>
 80125b6:	b118      	cbz	r0, 80125c0 <_fflush_r+0x14>
 80125b8:	6983      	ldr	r3, [r0, #24]
 80125ba:	b90b      	cbnz	r3, 80125c0 <_fflush_r+0x14>
 80125bc:	f000 f860 	bl	8012680 <__sinit>
 80125c0:	4b0c      	ldr	r3, [pc, #48]	; (80125f4 <_fflush_r+0x48>)
 80125c2:	429c      	cmp	r4, r3
 80125c4:	d109      	bne.n	80125da <_fflush_r+0x2e>
 80125c6:	686c      	ldr	r4, [r5, #4]
 80125c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125cc:	b17b      	cbz	r3, 80125ee <_fflush_r+0x42>
 80125ce:	4621      	mov	r1, r4
 80125d0:	4628      	mov	r0, r5
 80125d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125d6:	f7ff bf63 	b.w	80124a0 <__sflush_r>
 80125da:	4b07      	ldr	r3, [pc, #28]	; (80125f8 <_fflush_r+0x4c>)
 80125dc:	429c      	cmp	r4, r3
 80125de:	d101      	bne.n	80125e4 <_fflush_r+0x38>
 80125e0:	68ac      	ldr	r4, [r5, #8]
 80125e2:	e7f1      	b.n	80125c8 <_fflush_r+0x1c>
 80125e4:	4b05      	ldr	r3, [pc, #20]	; (80125fc <_fflush_r+0x50>)
 80125e6:	429c      	cmp	r4, r3
 80125e8:	bf08      	it	eq
 80125ea:	68ec      	ldreq	r4, [r5, #12]
 80125ec:	e7ec      	b.n	80125c8 <_fflush_r+0x1c>
 80125ee:	2000      	movs	r0, #0
 80125f0:	bd38      	pop	{r3, r4, r5, pc}
 80125f2:	bf00      	nop
 80125f4:	08013838 	.word	0x08013838
 80125f8:	08013858 	.word	0x08013858
 80125fc:	08013818 	.word	0x08013818

08012600 <std>:
 8012600:	2300      	movs	r3, #0
 8012602:	b510      	push	{r4, lr}
 8012604:	4604      	mov	r4, r0
 8012606:	e9c0 3300 	strd	r3, r3, [r0]
 801260a:	6083      	str	r3, [r0, #8]
 801260c:	8181      	strh	r1, [r0, #12]
 801260e:	6643      	str	r3, [r0, #100]	; 0x64
 8012610:	81c2      	strh	r2, [r0, #14]
 8012612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012616:	6183      	str	r3, [r0, #24]
 8012618:	4619      	mov	r1, r3
 801261a:	2208      	movs	r2, #8
 801261c:	305c      	adds	r0, #92	; 0x5c
 801261e:	f7ff fd45 	bl	80120ac <memset>
 8012622:	4b05      	ldr	r3, [pc, #20]	; (8012638 <std+0x38>)
 8012624:	6263      	str	r3, [r4, #36]	; 0x24
 8012626:	4b05      	ldr	r3, [pc, #20]	; (801263c <std+0x3c>)
 8012628:	62a3      	str	r3, [r4, #40]	; 0x28
 801262a:	4b05      	ldr	r3, [pc, #20]	; (8012640 <std+0x40>)
 801262c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801262e:	4b05      	ldr	r3, [pc, #20]	; (8012644 <std+0x44>)
 8012630:	6224      	str	r4, [r4, #32]
 8012632:	6323      	str	r3, [r4, #48]	; 0x30
 8012634:	bd10      	pop	{r4, pc}
 8012636:	bf00      	nop
 8012638:	08012f6d 	.word	0x08012f6d
 801263c:	08012f8f 	.word	0x08012f8f
 8012640:	08012fc7 	.word	0x08012fc7
 8012644:	08012feb 	.word	0x08012feb

08012648 <_cleanup_r>:
 8012648:	4901      	ldr	r1, [pc, #4]	; (8012650 <_cleanup_r+0x8>)
 801264a:	f000 b885 	b.w	8012758 <_fwalk_reent>
 801264e:	bf00      	nop
 8012650:	080125ad 	.word	0x080125ad

08012654 <__sfmoreglue>:
 8012654:	b570      	push	{r4, r5, r6, lr}
 8012656:	1e4a      	subs	r2, r1, #1
 8012658:	2568      	movs	r5, #104	; 0x68
 801265a:	4355      	muls	r5, r2
 801265c:	460e      	mov	r6, r1
 801265e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012662:	f000 f951 	bl	8012908 <_malloc_r>
 8012666:	4604      	mov	r4, r0
 8012668:	b140      	cbz	r0, 801267c <__sfmoreglue+0x28>
 801266a:	2100      	movs	r1, #0
 801266c:	e9c0 1600 	strd	r1, r6, [r0]
 8012670:	300c      	adds	r0, #12
 8012672:	60a0      	str	r0, [r4, #8]
 8012674:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012678:	f7ff fd18 	bl	80120ac <memset>
 801267c:	4620      	mov	r0, r4
 801267e:	bd70      	pop	{r4, r5, r6, pc}

08012680 <__sinit>:
 8012680:	6983      	ldr	r3, [r0, #24]
 8012682:	b510      	push	{r4, lr}
 8012684:	4604      	mov	r4, r0
 8012686:	bb33      	cbnz	r3, 80126d6 <__sinit+0x56>
 8012688:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801268c:	6503      	str	r3, [r0, #80]	; 0x50
 801268e:	4b12      	ldr	r3, [pc, #72]	; (80126d8 <__sinit+0x58>)
 8012690:	4a12      	ldr	r2, [pc, #72]	; (80126dc <__sinit+0x5c>)
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	6282      	str	r2, [r0, #40]	; 0x28
 8012696:	4298      	cmp	r0, r3
 8012698:	bf04      	itt	eq
 801269a:	2301      	moveq	r3, #1
 801269c:	6183      	streq	r3, [r0, #24]
 801269e:	f000 f81f 	bl	80126e0 <__sfp>
 80126a2:	6060      	str	r0, [r4, #4]
 80126a4:	4620      	mov	r0, r4
 80126a6:	f000 f81b 	bl	80126e0 <__sfp>
 80126aa:	60a0      	str	r0, [r4, #8]
 80126ac:	4620      	mov	r0, r4
 80126ae:	f000 f817 	bl	80126e0 <__sfp>
 80126b2:	2200      	movs	r2, #0
 80126b4:	60e0      	str	r0, [r4, #12]
 80126b6:	2104      	movs	r1, #4
 80126b8:	6860      	ldr	r0, [r4, #4]
 80126ba:	f7ff ffa1 	bl	8012600 <std>
 80126be:	2201      	movs	r2, #1
 80126c0:	2109      	movs	r1, #9
 80126c2:	68a0      	ldr	r0, [r4, #8]
 80126c4:	f7ff ff9c 	bl	8012600 <std>
 80126c8:	2202      	movs	r2, #2
 80126ca:	2112      	movs	r1, #18
 80126cc:	68e0      	ldr	r0, [r4, #12]
 80126ce:	f7ff ff97 	bl	8012600 <std>
 80126d2:	2301      	movs	r3, #1
 80126d4:	61a3      	str	r3, [r4, #24]
 80126d6:	bd10      	pop	{r4, pc}
 80126d8:	08013814 	.word	0x08013814
 80126dc:	08012649 	.word	0x08012649

080126e0 <__sfp>:
 80126e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126e2:	4b1b      	ldr	r3, [pc, #108]	; (8012750 <__sfp+0x70>)
 80126e4:	681e      	ldr	r6, [r3, #0]
 80126e6:	69b3      	ldr	r3, [r6, #24]
 80126e8:	4607      	mov	r7, r0
 80126ea:	b913      	cbnz	r3, 80126f2 <__sfp+0x12>
 80126ec:	4630      	mov	r0, r6
 80126ee:	f7ff ffc7 	bl	8012680 <__sinit>
 80126f2:	3648      	adds	r6, #72	; 0x48
 80126f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80126f8:	3b01      	subs	r3, #1
 80126fa:	d503      	bpl.n	8012704 <__sfp+0x24>
 80126fc:	6833      	ldr	r3, [r6, #0]
 80126fe:	b133      	cbz	r3, 801270e <__sfp+0x2e>
 8012700:	6836      	ldr	r6, [r6, #0]
 8012702:	e7f7      	b.n	80126f4 <__sfp+0x14>
 8012704:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012708:	b16d      	cbz	r5, 8012726 <__sfp+0x46>
 801270a:	3468      	adds	r4, #104	; 0x68
 801270c:	e7f4      	b.n	80126f8 <__sfp+0x18>
 801270e:	2104      	movs	r1, #4
 8012710:	4638      	mov	r0, r7
 8012712:	f7ff ff9f 	bl	8012654 <__sfmoreglue>
 8012716:	6030      	str	r0, [r6, #0]
 8012718:	2800      	cmp	r0, #0
 801271a:	d1f1      	bne.n	8012700 <__sfp+0x20>
 801271c:	230c      	movs	r3, #12
 801271e:	603b      	str	r3, [r7, #0]
 8012720:	4604      	mov	r4, r0
 8012722:	4620      	mov	r0, r4
 8012724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012726:	4b0b      	ldr	r3, [pc, #44]	; (8012754 <__sfp+0x74>)
 8012728:	6665      	str	r5, [r4, #100]	; 0x64
 801272a:	e9c4 5500 	strd	r5, r5, [r4]
 801272e:	60a5      	str	r5, [r4, #8]
 8012730:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012734:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012738:	2208      	movs	r2, #8
 801273a:	4629      	mov	r1, r5
 801273c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012740:	f7ff fcb4 	bl	80120ac <memset>
 8012744:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012748:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801274c:	e7e9      	b.n	8012722 <__sfp+0x42>
 801274e:	bf00      	nop
 8012750:	08013814 	.word	0x08013814
 8012754:	ffff0001 	.word	0xffff0001

08012758 <_fwalk_reent>:
 8012758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801275c:	4680      	mov	r8, r0
 801275e:	4689      	mov	r9, r1
 8012760:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012764:	2600      	movs	r6, #0
 8012766:	b914      	cbnz	r4, 801276e <_fwalk_reent+0x16>
 8012768:	4630      	mov	r0, r6
 801276a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801276e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012772:	3f01      	subs	r7, #1
 8012774:	d501      	bpl.n	801277a <_fwalk_reent+0x22>
 8012776:	6824      	ldr	r4, [r4, #0]
 8012778:	e7f5      	b.n	8012766 <_fwalk_reent+0xe>
 801277a:	89ab      	ldrh	r3, [r5, #12]
 801277c:	2b01      	cmp	r3, #1
 801277e:	d907      	bls.n	8012790 <_fwalk_reent+0x38>
 8012780:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012784:	3301      	adds	r3, #1
 8012786:	d003      	beq.n	8012790 <_fwalk_reent+0x38>
 8012788:	4629      	mov	r1, r5
 801278a:	4640      	mov	r0, r8
 801278c:	47c8      	blx	r9
 801278e:	4306      	orrs	r6, r0
 8012790:	3568      	adds	r5, #104	; 0x68
 8012792:	e7ee      	b.n	8012772 <_fwalk_reent+0x1a>

08012794 <__swhatbuf_r>:
 8012794:	b570      	push	{r4, r5, r6, lr}
 8012796:	460e      	mov	r6, r1
 8012798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801279c:	2900      	cmp	r1, #0
 801279e:	b096      	sub	sp, #88	; 0x58
 80127a0:	4614      	mov	r4, r2
 80127a2:	461d      	mov	r5, r3
 80127a4:	da07      	bge.n	80127b6 <__swhatbuf_r+0x22>
 80127a6:	2300      	movs	r3, #0
 80127a8:	602b      	str	r3, [r5, #0]
 80127aa:	89b3      	ldrh	r3, [r6, #12]
 80127ac:	061a      	lsls	r2, r3, #24
 80127ae:	d410      	bmi.n	80127d2 <__swhatbuf_r+0x3e>
 80127b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80127b4:	e00e      	b.n	80127d4 <__swhatbuf_r+0x40>
 80127b6:	466a      	mov	r2, sp
 80127b8:	f000 fc3e 	bl	8013038 <_fstat_r>
 80127bc:	2800      	cmp	r0, #0
 80127be:	dbf2      	blt.n	80127a6 <__swhatbuf_r+0x12>
 80127c0:	9a01      	ldr	r2, [sp, #4]
 80127c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80127c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80127ca:	425a      	negs	r2, r3
 80127cc:	415a      	adcs	r2, r3
 80127ce:	602a      	str	r2, [r5, #0]
 80127d0:	e7ee      	b.n	80127b0 <__swhatbuf_r+0x1c>
 80127d2:	2340      	movs	r3, #64	; 0x40
 80127d4:	2000      	movs	r0, #0
 80127d6:	6023      	str	r3, [r4, #0]
 80127d8:	b016      	add	sp, #88	; 0x58
 80127da:	bd70      	pop	{r4, r5, r6, pc}

080127dc <__smakebuf_r>:
 80127dc:	898b      	ldrh	r3, [r1, #12]
 80127de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80127e0:	079d      	lsls	r5, r3, #30
 80127e2:	4606      	mov	r6, r0
 80127e4:	460c      	mov	r4, r1
 80127e6:	d507      	bpl.n	80127f8 <__smakebuf_r+0x1c>
 80127e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80127ec:	6023      	str	r3, [r4, #0]
 80127ee:	6123      	str	r3, [r4, #16]
 80127f0:	2301      	movs	r3, #1
 80127f2:	6163      	str	r3, [r4, #20]
 80127f4:	b002      	add	sp, #8
 80127f6:	bd70      	pop	{r4, r5, r6, pc}
 80127f8:	ab01      	add	r3, sp, #4
 80127fa:	466a      	mov	r2, sp
 80127fc:	f7ff ffca 	bl	8012794 <__swhatbuf_r>
 8012800:	9900      	ldr	r1, [sp, #0]
 8012802:	4605      	mov	r5, r0
 8012804:	4630      	mov	r0, r6
 8012806:	f000 f87f 	bl	8012908 <_malloc_r>
 801280a:	b948      	cbnz	r0, 8012820 <__smakebuf_r+0x44>
 801280c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012810:	059a      	lsls	r2, r3, #22
 8012812:	d4ef      	bmi.n	80127f4 <__smakebuf_r+0x18>
 8012814:	f023 0303 	bic.w	r3, r3, #3
 8012818:	f043 0302 	orr.w	r3, r3, #2
 801281c:	81a3      	strh	r3, [r4, #12]
 801281e:	e7e3      	b.n	80127e8 <__smakebuf_r+0xc>
 8012820:	4b0d      	ldr	r3, [pc, #52]	; (8012858 <__smakebuf_r+0x7c>)
 8012822:	62b3      	str	r3, [r6, #40]	; 0x28
 8012824:	89a3      	ldrh	r3, [r4, #12]
 8012826:	6020      	str	r0, [r4, #0]
 8012828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801282c:	81a3      	strh	r3, [r4, #12]
 801282e:	9b00      	ldr	r3, [sp, #0]
 8012830:	6163      	str	r3, [r4, #20]
 8012832:	9b01      	ldr	r3, [sp, #4]
 8012834:	6120      	str	r0, [r4, #16]
 8012836:	b15b      	cbz	r3, 8012850 <__smakebuf_r+0x74>
 8012838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801283c:	4630      	mov	r0, r6
 801283e:	f000 fc0d 	bl	801305c <_isatty_r>
 8012842:	b128      	cbz	r0, 8012850 <__smakebuf_r+0x74>
 8012844:	89a3      	ldrh	r3, [r4, #12]
 8012846:	f023 0303 	bic.w	r3, r3, #3
 801284a:	f043 0301 	orr.w	r3, r3, #1
 801284e:	81a3      	strh	r3, [r4, #12]
 8012850:	89a3      	ldrh	r3, [r4, #12]
 8012852:	431d      	orrs	r5, r3
 8012854:	81a5      	strh	r5, [r4, #12]
 8012856:	e7cd      	b.n	80127f4 <__smakebuf_r+0x18>
 8012858:	08012649 	.word	0x08012649

0801285c <malloc>:
 801285c:	4b02      	ldr	r3, [pc, #8]	; (8012868 <malloc+0xc>)
 801285e:	4601      	mov	r1, r0
 8012860:	6818      	ldr	r0, [r3, #0]
 8012862:	f000 b851 	b.w	8012908 <_malloc_r>
 8012866:	bf00      	nop
 8012868:	20000084 	.word	0x20000084

0801286c <_free_r>:
 801286c:	b538      	push	{r3, r4, r5, lr}
 801286e:	4605      	mov	r5, r0
 8012870:	2900      	cmp	r1, #0
 8012872:	d045      	beq.n	8012900 <_free_r+0x94>
 8012874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012878:	1f0c      	subs	r4, r1, #4
 801287a:	2b00      	cmp	r3, #0
 801287c:	bfb8      	it	lt
 801287e:	18e4      	addlt	r4, r4, r3
 8012880:	f000 fc0e 	bl	80130a0 <__malloc_lock>
 8012884:	4a1f      	ldr	r2, [pc, #124]	; (8012904 <_free_r+0x98>)
 8012886:	6813      	ldr	r3, [r2, #0]
 8012888:	4610      	mov	r0, r2
 801288a:	b933      	cbnz	r3, 801289a <_free_r+0x2e>
 801288c:	6063      	str	r3, [r4, #4]
 801288e:	6014      	str	r4, [r2, #0]
 8012890:	4628      	mov	r0, r5
 8012892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012896:	f000 bc04 	b.w	80130a2 <__malloc_unlock>
 801289a:	42a3      	cmp	r3, r4
 801289c:	d90c      	bls.n	80128b8 <_free_r+0x4c>
 801289e:	6821      	ldr	r1, [r4, #0]
 80128a0:	1862      	adds	r2, r4, r1
 80128a2:	4293      	cmp	r3, r2
 80128a4:	bf04      	itt	eq
 80128a6:	681a      	ldreq	r2, [r3, #0]
 80128a8:	685b      	ldreq	r3, [r3, #4]
 80128aa:	6063      	str	r3, [r4, #4]
 80128ac:	bf04      	itt	eq
 80128ae:	1852      	addeq	r2, r2, r1
 80128b0:	6022      	streq	r2, [r4, #0]
 80128b2:	6004      	str	r4, [r0, #0]
 80128b4:	e7ec      	b.n	8012890 <_free_r+0x24>
 80128b6:	4613      	mov	r3, r2
 80128b8:	685a      	ldr	r2, [r3, #4]
 80128ba:	b10a      	cbz	r2, 80128c0 <_free_r+0x54>
 80128bc:	42a2      	cmp	r2, r4
 80128be:	d9fa      	bls.n	80128b6 <_free_r+0x4a>
 80128c0:	6819      	ldr	r1, [r3, #0]
 80128c2:	1858      	adds	r0, r3, r1
 80128c4:	42a0      	cmp	r0, r4
 80128c6:	d10b      	bne.n	80128e0 <_free_r+0x74>
 80128c8:	6820      	ldr	r0, [r4, #0]
 80128ca:	4401      	add	r1, r0
 80128cc:	1858      	adds	r0, r3, r1
 80128ce:	4282      	cmp	r2, r0
 80128d0:	6019      	str	r1, [r3, #0]
 80128d2:	d1dd      	bne.n	8012890 <_free_r+0x24>
 80128d4:	6810      	ldr	r0, [r2, #0]
 80128d6:	6852      	ldr	r2, [r2, #4]
 80128d8:	605a      	str	r2, [r3, #4]
 80128da:	4401      	add	r1, r0
 80128dc:	6019      	str	r1, [r3, #0]
 80128de:	e7d7      	b.n	8012890 <_free_r+0x24>
 80128e0:	d902      	bls.n	80128e8 <_free_r+0x7c>
 80128e2:	230c      	movs	r3, #12
 80128e4:	602b      	str	r3, [r5, #0]
 80128e6:	e7d3      	b.n	8012890 <_free_r+0x24>
 80128e8:	6820      	ldr	r0, [r4, #0]
 80128ea:	1821      	adds	r1, r4, r0
 80128ec:	428a      	cmp	r2, r1
 80128ee:	bf04      	itt	eq
 80128f0:	6811      	ldreq	r1, [r2, #0]
 80128f2:	6852      	ldreq	r2, [r2, #4]
 80128f4:	6062      	str	r2, [r4, #4]
 80128f6:	bf04      	itt	eq
 80128f8:	1809      	addeq	r1, r1, r0
 80128fa:	6021      	streq	r1, [r4, #0]
 80128fc:	605c      	str	r4, [r3, #4]
 80128fe:	e7c7      	b.n	8012890 <_free_r+0x24>
 8012900:	bd38      	pop	{r3, r4, r5, pc}
 8012902:	bf00      	nop
 8012904:	20000118 	.word	0x20000118

08012908 <_malloc_r>:
 8012908:	b570      	push	{r4, r5, r6, lr}
 801290a:	1ccd      	adds	r5, r1, #3
 801290c:	f025 0503 	bic.w	r5, r5, #3
 8012910:	3508      	adds	r5, #8
 8012912:	2d0c      	cmp	r5, #12
 8012914:	bf38      	it	cc
 8012916:	250c      	movcc	r5, #12
 8012918:	2d00      	cmp	r5, #0
 801291a:	4606      	mov	r6, r0
 801291c:	db01      	blt.n	8012922 <_malloc_r+0x1a>
 801291e:	42a9      	cmp	r1, r5
 8012920:	d903      	bls.n	801292a <_malloc_r+0x22>
 8012922:	230c      	movs	r3, #12
 8012924:	6033      	str	r3, [r6, #0]
 8012926:	2000      	movs	r0, #0
 8012928:	bd70      	pop	{r4, r5, r6, pc}
 801292a:	f000 fbb9 	bl	80130a0 <__malloc_lock>
 801292e:	4a21      	ldr	r2, [pc, #132]	; (80129b4 <_malloc_r+0xac>)
 8012930:	6814      	ldr	r4, [r2, #0]
 8012932:	4621      	mov	r1, r4
 8012934:	b991      	cbnz	r1, 801295c <_malloc_r+0x54>
 8012936:	4c20      	ldr	r4, [pc, #128]	; (80129b8 <_malloc_r+0xb0>)
 8012938:	6823      	ldr	r3, [r4, #0]
 801293a:	b91b      	cbnz	r3, 8012944 <_malloc_r+0x3c>
 801293c:	4630      	mov	r0, r6
 801293e:	f000 fb05 	bl	8012f4c <_sbrk_r>
 8012942:	6020      	str	r0, [r4, #0]
 8012944:	4629      	mov	r1, r5
 8012946:	4630      	mov	r0, r6
 8012948:	f000 fb00 	bl	8012f4c <_sbrk_r>
 801294c:	1c43      	adds	r3, r0, #1
 801294e:	d124      	bne.n	801299a <_malloc_r+0x92>
 8012950:	230c      	movs	r3, #12
 8012952:	6033      	str	r3, [r6, #0]
 8012954:	4630      	mov	r0, r6
 8012956:	f000 fba4 	bl	80130a2 <__malloc_unlock>
 801295a:	e7e4      	b.n	8012926 <_malloc_r+0x1e>
 801295c:	680b      	ldr	r3, [r1, #0]
 801295e:	1b5b      	subs	r3, r3, r5
 8012960:	d418      	bmi.n	8012994 <_malloc_r+0x8c>
 8012962:	2b0b      	cmp	r3, #11
 8012964:	d90f      	bls.n	8012986 <_malloc_r+0x7e>
 8012966:	600b      	str	r3, [r1, #0]
 8012968:	50cd      	str	r5, [r1, r3]
 801296a:	18cc      	adds	r4, r1, r3
 801296c:	4630      	mov	r0, r6
 801296e:	f000 fb98 	bl	80130a2 <__malloc_unlock>
 8012972:	f104 000b 	add.w	r0, r4, #11
 8012976:	1d23      	adds	r3, r4, #4
 8012978:	f020 0007 	bic.w	r0, r0, #7
 801297c:	1ac3      	subs	r3, r0, r3
 801297e:	d0d3      	beq.n	8012928 <_malloc_r+0x20>
 8012980:	425a      	negs	r2, r3
 8012982:	50e2      	str	r2, [r4, r3]
 8012984:	e7d0      	b.n	8012928 <_malloc_r+0x20>
 8012986:	428c      	cmp	r4, r1
 8012988:	684b      	ldr	r3, [r1, #4]
 801298a:	bf16      	itet	ne
 801298c:	6063      	strne	r3, [r4, #4]
 801298e:	6013      	streq	r3, [r2, #0]
 8012990:	460c      	movne	r4, r1
 8012992:	e7eb      	b.n	801296c <_malloc_r+0x64>
 8012994:	460c      	mov	r4, r1
 8012996:	6849      	ldr	r1, [r1, #4]
 8012998:	e7cc      	b.n	8012934 <_malloc_r+0x2c>
 801299a:	1cc4      	adds	r4, r0, #3
 801299c:	f024 0403 	bic.w	r4, r4, #3
 80129a0:	42a0      	cmp	r0, r4
 80129a2:	d005      	beq.n	80129b0 <_malloc_r+0xa8>
 80129a4:	1a21      	subs	r1, r4, r0
 80129a6:	4630      	mov	r0, r6
 80129a8:	f000 fad0 	bl	8012f4c <_sbrk_r>
 80129ac:	3001      	adds	r0, #1
 80129ae:	d0cf      	beq.n	8012950 <_malloc_r+0x48>
 80129b0:	6025      	str	r5, [r4, #0]
 80129b2:	e7db      	b.n	801296c <_malloc_r+0x64>
 80129b4:	20000118 	.word	0x20000118
 80129b8:	2000011c 	.word	0x2000011c

080129bc <__sfputc_r>:
 80129bc:	6893      	ldr	r3, [r2, #8]
 80129be:	3b01      	subs	r3, #1
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	b410      	push	{r4}
 80129c4:	6093      	str	r3, [r2, #8]
 80129c6:	da08      	bge.n	80129da <__sfputc_r+0x1e>
 80129c8:	6994      	ldr	r4, [r2, #24]
 80129ca:	42a3      	cmp	r3, r4
 80129cc:	db01      	blt.n	80129d2 <__sfputc_r+0x16>
 80129ce:	290a      	cmp	r1, #10
 80129d0:	d103      	bne.n	80129da <__sfputc_r+0x1e>
 80129d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129d6:	f7ff bca3 	b.w	8012320 <__swbuf_r>
 80129da:	6813      	ldr	r3, [r2, #0]
 80129dc:	1c58      	adds	r0, r3, #1
 80129de:	6010      	str	r0, [r2, #0]
 80129e0:	7019      	strb	r1, [r3, #0]
 80129e2:	4608      	mov	r0, r1
 80129e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129e8:	4770      	bx	lr

080129ea <__sfputs_r>:
 80129ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ec:	4606      	mov	r6, r0
 80129ee:	460f      	mov	r7, r1
 80129f0:	4614      	mov	r4, r2
 80129f2:	18d5      	adds	r5, r2, r3
 80129f4:	42ac      	cmp	r4, r5
 80129f6:	d101      	bne.n	80129fc <__sfputs_r+0x12>
 80129f8:	2000      	movs	r0, #0
 80129fa:	e007      	b.n	8012a0c <__sfputs_r+0x22>
 80129fc:	463a      	mov	r2, r7
 80129fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a02:	4630      	mov	r0, r6
 8012a04:	f7ff ffda 	bl	80129bc <__sfputc_r>
 8012a08:	1c43      	adds	r3, r0, #1
 8012a0a:	d1f3      	bne.n	80129f4 <__sfputs_r+0xa>
 8012a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012a10 <_vfiprintf_r>:
 8012a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a14:	460c      	mov	r4, r1
 8012a16:	b09d      	sub	sp, #116	; 0x74
 8012a18:	4617      	mov	r7, r2
 8012a1a:	461d      	mov	r5, r3
 8012a1c:	4606      	mov	r6, r0
 8012a1e:	b118      	cbz	r0, 8012a28 <_vfiprintf_r+0x18>
 8012a20:	6983      	ldr	r3, [r0, #24]
 8012a22:	b90b      	cbnz	r3, 8012a28 <_vfiprintf_r+0x18>
 8012a24:	f7ff fe2c 	bl	8012680 <__sinit>
 8012a28:	4b7c      	ldr	r3, [pc, #496]	; (8012c1c <_vfiprintf_r+0x20c>)
 8012a2a:	429c      	cmp	r4, r3
 8012a2c:	d158      	bne.n	8012ae0 <_vfiprintf_r+0xd0>
 8012a2e:	6874      	ldr	r4, [r6, #4]
 8012a30:	89a3      	ldrh	r3, [r4, #12]
 8012a32:	0718      	lsls	r0, r3, #28
 8012a34:	d55e      	bpl.n	8012af4 <_vfiprintf_r+0xe4>
 8012a36:	6923      	ldr	r3, [r4, #16]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d05b      	beq.n	8012af4 <_vfiprintf_r+0xe4>
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8012a40:	2320      	movs	r3, #32
 8012a42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a46:	2330      	movs	r3, #48	; 0x30
 8012a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a4c:	9503      	str	r5, [sp, #12]
 8012a4e:	f04f 0b01 	mov.w	fp, #1
 8012a52:	46b8      	mov	r8, r7
 8012a54:	4645      	mov	r5, r8
 8012a56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012a5a:	b10b      	cbz	r3, 8012a60 <_vfiprintf_r+0x50>
 8012a5c:	2b25      	cmp	r3, #37	; 0x25
 8012a5e:	d154      	bne.n	8012b0a <_vfiprintf_r+0xfa>
 8012a60:	ebb8 0a07 	subs.w	sl, r8, r7
 8012a64:	d00b      	beq.n	8012a7e <_vfiprintf_r+0x6e>
 8012a66:	4653      	mov	r3, sl
 8012a68:	463a      	mov	r2, r7
 8012a6a:	4621      	mov	r1, r4
 8012a6c:	4630      	mov	r0, r6
 8012a6e:	f7ff ffbc 	bl	80129ea <__sfputs_r>
 8012a72:	3001      	adds	r0, #1
 8012a74:	f000 80c2 	beq.w	8012bfc <_vfiprintf_r+0x1ec>
 8012a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a7a:	4453      	add	r3, sl
 8012a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8012a7e:	f898 3000 	ldrb.w	r3, [r8]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	f000 80ba 	beq.w	8012bfc <_vfiprintf_r+0x1ec>
 8012a88:	2300      	movs	r3, #0
 8012a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8012a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a92:	9304      	str	r3, [sp, #16]
 8012a94:	9307      	str	r3, [sp, #28]
 8012a96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012a9a:	931a      	str	r3, [sp, #104]	; 0x68
 8012a9c:	46a8      	mov	r8, r5
 8012a9e:	2205      	movs	r2, #5
 8012aa0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012aa4:	485e      	ldr	r0, [pc, #376]	; (8012c20 <_vfiprintf_r+0x210>)
 8012aa6:	f7ed fb93 	bl	80001d0 <memchr>
 8012aaa:	9b04      	ldr	r3, [sp, #16]
 8012aac:	bb78      	cbnz	r0, 8012b0e <_vfiprintf_r+0xfe>
 8012aae:	06d9      	lsls	r1, r3, #27
 8012ab0:	bf44      	itt	mi
 8012ab2:	2220      	movmi	r2, #32
 8012ab4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012ab8:	071a      	lsls	r2, r3, #28
 8012aba:	bf44      	itt	mi
 8012abc:	222b      	movmi	r2, #43	; 0x2b
 8012abe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012ac2:	782a      	ldrb	r2, [r5, #0]
 8012ac4:	2a2a      	cmp	r2, #42	; 0x2a
 8012ac6:	d02a      	beq.n	8012b1e <_vfiprintf_r+0x10e>
 8012ac8:	9a07      	ldr	r2, [sp, #28]
 8012aca:	46a8      	mov	r8, r5
 8012acc:	2000      	movs	r0, #0
 8012ace:	250a      	movs	r5, #10
 8012ad0:	4641      	mov	r1, r8
 8012ad2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ad6:	3b30      	subs	r3, #48	; 0x30
 8012ad8:	2b09      	cmp	r3, #9
 8012ada:	d969      	bls.n	8012bb0 <_vfiprintf_r+0x1a0>
 8012adc:	b360      	cbz	r0, 8012b38 <_vfiprintf_r+0x128>
 8012ade:	e024      	b.n	8012b2a <_vfiprintf_r+0x11a>
 8012ae0:	4b50      	ldr	r3, [pc, #320]	; (8012c24 <_vfiprintf_r+0x214>)
 8012ae2:	429c      	cmp	r4, r3
 8012ae4:	d101      	bne.n	8012aea <_vfiprintf_r+0xda>
 8012ae6:	68b4      	ldr	r4, [r6, #8]
 8012ae8:	e7a2      	b.n	8012a30 <_vfiprintf_r+0x20>
 8012aea:	4b4f      	ldr	r3, [pc, #316]	; (8012c28 <_vfiprintf_r+0x218>)
 8012aec:	429c      	cmp	r4, r3
 8012aee:	bf08      	it	eq
 8012af0:	68f4      	ldreq	r4, [r6, #12]
 8012af2:	e79d      	b.n	8012a30 <_vfiprintf_r+0x20>
 8012af4:	4621      	mov	r1, r4
 8012af6:	4630      	mov	r0, r6
 8012af8:	f7ff fc64 	bl	80123c4 <__swsetup_r>
 8012afc:	2800      	cmp	r0, #0
 8012afe:	d09d      	beq.n	8012a3c <_vfiprintf_r+0x2c>
 8012b00:	f04f 30ff 	mov.w	r0, #4294967295
 8012b04:	b01d      	add	sp, #116	; 0x74
 8012b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b0a:	46a8      	mov	r8, r5
 8012b0c:	e7a2      	b.n	8012a54 <_vfiprintf_r+0x44>
 8012b0e:	4a44      	ldr	r2, [pc, #272]	; (8012c20 <_vfiprintf_r+0x210>)
 8012b10:	1a80      	subs	r0, r0, r2
 8012b12:	fa0b f000 	lsl.w	r0, fp, r0
 8012b16:	4318      	orrs	r0, r3
 8012b18:	9004      	str	r0, [sp, #16]
 8012b1a:	4645      	mov	r5, r8
 8012b1c:	e7be      	b.n	8012a9c <_vfiprintf_r+0x8c>
 8012b1e:	9a03      	ldr	r2, [sp, #12]
 8012b20:	1d11      	adds	r1, r2, #4
 8012b22:	6812      	ldr	r2, [r2, #0]
 8012b24:	9103      	str	r1, [sp, #12]
 8012b26:	2a00      	cmp	r2, #0
 8012b28:	db01      	blt.n	8012b2e <_vfiprintf_r+0x11e>
 8012b2a:	9207      	str	r2, [sp, #28]
 8012b2c:	e004      	b.n	8012b38 <_vfiprintf_r+0x128>
 8012b2e:	4252      	negs	r2, r2
 8012b30:	f043 0302 	orr.w	r3, r3, #2
 8012b34:	9207      	str	r2, [sp, #28]
 8012b36:	9304      	str	r3, [sp, #16]
 8012b38:	f898 3000 	ldrb.w	r3, [r8]
 8012b3c:	2b2e      	cmp	r3, #46	; 0x2e
 8012b3e:	d10e      	bne.n	8012b5e <_vfiprintf_r+0x14e>
 8012b40:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012b44:	2b2a      	cmp	r3, #42	; 0x2a
 8012b46:	d138      	bne.n	8012bba <_vfiprintf_r+0x1aa>
 8012b48:	9b03      	ldr	r3, [sp, #12]
 8012b4a:	1d1a      	adds	r2, r3, #4
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	9203      	str	r2, [sp, #12]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	bfb8      	it	lt
 8012b54:	f04f 33ff 	movlt.w	r3, #4294967295
 8012b58:	f108 0802 	add.w	r8, r8, #2
 8012b5c:	9305      	str	r3, [sp, #20]
 8012b5e:	4d33      	ldr	r5, [pc, #204]	; (8012c2c <_vfiprintf_r+0x21c>)
 8012b60:	f898 1000 	ldrb.w	r1, [r8]
 8012b64:	2203      	movs	r2, #3
 8012b66:	4628      	mov	r0, r5
 8012b68:	f7ed fb32 	bl	80001d0 <memchr>
 8012b6c:	b140      	cbz	r0, 8012b80 <_vfiprintf_r+0x170>
 8012b6e:	2340      	movs	r3, #64	; 0x40
 8012b70:	1b40      	subs	r0, r0, r5
 8012b72:	fa03 f000 	lsl.w	r0, r3, r0
 8012b76:	9b04      	ldr	r3, [sp, #16]
 8012b78:	4303      	orrs	r3, r0
 8012b7a:	f108 0801 	add.w	r8, r8, #1
 8012b7e:	9304      	str	r3, [sp, #16]
 8012b80:	f898 1000 	ldrb.w	r1, [r8]
 8012b84:	482a      	ldr	r0, [pc, #168]	; (8012c30 <_vfiprintf_r+0x220>)
 8012b86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b8a:	2206      	movs	r2, #6
 8012b8c:	f108 0701 	add.w	r7, r8, #1
 8012b90:	f7ed fb1e 	bl	80001d0 <memchr>
 8012b94:	2800      	cmp	r0, #0
 8012b96:	d037      	beq.n	8012c08 <_vfiprintf_r+0x1f8>
 8012b98:	4b26      	ldr	r3, [pc, #152]	; (8012c34 <_vfiprintf_r+0x224>)
 8012b9a:	bb1b      	cbnz	r3, 8012be4 <_vfiprintf_r+0x1d4>
 8012b9c:	9b03      	ldr	r3, [sp, #12]
 8012b9e:	3307      	adds	r3, #7
 8012ba0:	f023 0307 	bic.w	r3, r3, #7
 8012ba4:	3308      	adds	r3, #8
 8012ba6:	9303      	str	r3, [sp, #12]
 8012ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012baa:	444b      	add	r3, r9
 8012bac:	9309      	str	r3, [sp, #36]	; 0x24
 8012bae:	e750      	b.n	8012a52 <_vfiprintf_r+0x42>
 8012bb0:	fb05 3202 	mla	r2, r5, r2, r3
 8012bb4:	2001      	movs	r0, #1
 8012bb6:	4688      	mov	r8, r1
 8012bb8:	e78a      	b.n	8012ad0 <_vfiprintf_r+0xc0>
 8012bba:	2300      	movs	r3, #0
 8012bbc:	f108 0801 	add.w	r8, r8, #1
 8012bc0:	9305      	str	r3, [sp, #20]
 8012bc2:	4619      	mov	r1, r3
 8012bc4:	250a      	movs	r5, #10
 8012bc6:	4640      	mov	r0, r8
 8012bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012bcc:	3a30      	subs	r2, #48	; 0x30
 8012bce:	2a09      	cmp	r2, #9
 8012bd0:	d903      	bls.n	8012bda <_vfiprintf_r+0x1ca>
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d0c3      	beq.n	8012b5e <_vfiprintf_r+0x14e>
 8012bd6:	9105      	str	r1, [sp, #20]
 8012bd8:	e7c1      	b.n	8012b5e <_vfiprintf_r+0x14e>
 8012bda:	fb05 2101 	mla	r1, r5, r1, r2
 8012bde:	2301      	movs	r3, #1
 8012be0:	4680      	mov	r8, r0
 8012be2:	e7f0      	b.n	8012bc6 <_vfiprintf_r+0x1b6>
 8012be4:	ab03      	add	r3, sp, #12
 8012be6:	9300      	str	r3, [sp, #0]
 8012be8:	4622      	mov	r2, r4
 8012bea:	4b13      	ldr	r3, [pc, #76]	; (8012c38 <_vfiprintf_r+0x228>)
 8012bec:	a904      	add	r1, sp, #16
 8012bee:	4630      	mov	r0, r6
 8012bf0:	f3af 8000 	nop.w
 8012bf4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012bf8:	4681      	mov	r9, r0
 8012bfa:	d1d5      	bne.n	8012ba8 <_vfiprintf_r+0x198>
 8012bfc:	89a3      	ldrh	r3, [r4, #12]
 8012bfe:	065b      	lsls	r3, r3, #25
 8012c00:	f53f af7e 	bmi.w	8012b00 <_vfiprintf_r+0xf0>
 8012c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c06:	e77d      	b.n	8012b04 <_vfiprintf_r+0xf4>
 8012c08:	ab03      	add	r3, sp, #12
 8012c0a:	9300      	str	r3, [sp, #0]
 8012c0c:	4622      	mov	r2, r4
 8012c0e:	4b0a      	ldr	r3, [pc, #40]	; (8012c38 <_vfiprintf_r+0x228>)
 8012c10:	a904      	add	r1, sp, #16
 8012c12:	4630      	mov	r0, r6
 8012c14:	f000 f888 	bl	8012d28 <_printf_i>
 8012c18:	e7ec      	b.n	8012bf4 <_vfiprintf_r+0x1e4>
 8012c1a:	bf00      	nop
 8012c1c:	08013838 	.word	0x08013838
 8012c20:	08013878 	.word	0x08013878
 8012c24:	08013858 	.word	0x08013858
 8012c28:	08013818 	.word	0x08013818
 8012c2c:	0801387e 	.word	0x0801387e
 8012c30:	08013882 	.word	0x08013882
 8012c34:	00000000 	.word	0x00000000
 8012c38:	080129eb 	.word	0x080129eb

08012c3c <_printf_common>:
 8012c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c40:	4691      	mov	r9, r2
 8012c42:	461f      	mov	r7, r3
 8012c44:	688a      	ldr	r2, [r1, #8]
 8012c46:	690b      	ldr	r3, [r1, #16]
 8012c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012c4c:	4293      	cmp	r3, r2
 8012c4e:	bfb8      	it	lt
 8012c50:	4613      	movlt	r3, r2
 8012c52:	f8c9 3000 	str.w	r3, [r9]
 8012c56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012c5a:	4606      	mov	r6, r0
 8012c5c:	460c      	mov	r4, r1
 8012c5e:	b112      	cbz	r2, 8012c66 <_printf_common+0x2a>
 8012c60:	3301      	adds	r3, #1
 8012c62:	f8c9 3000 	str.w	r3, [r9]
 8012c66:	6823      	ldr	r3, [r4, #0]
 8012c68:	0699      	lsls	r1, r3, #26
 8012c6a:	bf42      	ittt	mi
 8012c6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012c70:	3302      	addmi	r3, #2
 8012c72:	f8c9 3000 	strmi.w	r3, [r9]
 8012c76:	6825      	ldr	r5, [r4, #0]
 8012c78:	f015 0506 	ands.w	r5, r5, #6
 8012c7c:	d107      	bne.n	8012c8e <_printf_common+0x52>
 8012c7e:	f104 0a19 	add.w	sl, r4, #25
 8012c82:	68e3      	ldr	r3, [r4, #12]
 8012c84:	f8d9 2000 	ldr.w	r2, [r9]
 8012c88:	1a9b      	subs	r3, r3, r2
 8012c8a:	42ab      	cmp	r3, r5
 8012c8c:	dc28      	bgt.n	8012ce0 <_printf_common+0xa4>
 8012c8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012c92:	6822      	ldr	r2, [r4, #0]
 8012c94:	3300      	adds	r3, #0
 8012c96:	bf18      	it	ne
 8012c98:	2301      	movne	r3, #1
 8012c9a:	0692      	lsls	r2, r2, #26
 8012c9c:	d42d      	bmi.n	8012cfa <_printf_common+0xbe>
 8012c9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012ca2:	4639      	mov	r1, r7
 8012ca4:	4630      	mov	r0, r6
 8012ca6:	47c0      	blx	r8
 8012ca8:	3001      	adds	r0, #1
 8012caa:	d020      	beq.n	8012cee <_printf_common+0xb2>
 8012cac:	6823      	ldr	r3, [r4, #0]
 8012cae:	68e5      	ldr	r5, [r4, #12]
 8012cb0:	f8d9 2000 	ldr.w	r2, [r9]
 8012cb4:	f003 0306 	and.w	r3, r3, #6
 8012cb8:	2b04      	cmp	r3, #4
 8012cba:	bf08      	it	eq
 8012cbc:	1aad      	subeq	r5, r5, r2
 8012cbe:	68a3      	ldr	r3, [r4, #8]
 8012cc0:	6922      	ldr	r2, [r4, #16]
 8012cc2:	bf0c      	ite	eq
 8012cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012cc8:	2500      	movne	r5, #0
 8012cca:	4293      	cmp	r3, r2
 8012ccc:	bfc4      	itt	gt
 8012cce:	1a9b      	subgt	r3, r3, r2
 8012cd0:	18ed      	addgt	r5, r5, r3
 8012cd2:	f04f 0900 	mov.w	r9, #0
 8012cd6:	341a      	adds	r4, #26
 8012cd8:	454d      	cmp	r5, r9
 8012cda:	d11a      	bne.n	8012d12 <_printf_common+0xd6>
 8012cdc:	2000      	movs	r0, #0
 8012cde:	e008      	b.n	8012cf2 <_printf_common+0xb6>
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	4652      	mov	r2, sl
 8012ce4:	4639      	mov	r1, r7
 8012ce6:	4630      	mov	r0, r6
 8012ce8:	47c0      	blx	r8
 8012cea:	3001      	adds	r0, #1
 8012cec:	d103      	bne.n	8012cf6 <_printf_common+0xba>
 8012cee:	f04f 30ff 	mov.w	r0, #4294967295
 8012cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cf6:	3501      	adds	r5, #1
 8012cf8:	e7c3      	b.n	8012c82 <_printf_common+0x46>
 8012cfa:	18e1      	adds	r1, r4, r3
 8012cfc:	1c5a      	adds	r2, r3, #1
 8012cfe:	2030      	movs	r0, #48	; 0x30
 8012d00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012d04:	4422      	add	r2, r4
 8012d06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012d0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012d0e:	3302      	adds	r3, #2
 8012d10:	e7c5      	b.n	8012c9e <_printf_common+0x62>
 8012d12:	2301      	movs	r3, #1
 8012d14:	4622      	mov	r2, r4
 8012d16:	4639      	mov	r1, r7
 8012d18:	4630      	mov	r0, r6
 8012d1a:	47c0      	blx	r8
 8012d1c:	3001      	adds	r0, #1
 8012d1e:	d0e6      	beq.n	8012cee <_printf_common+0xb2>
 8012d20:	f109 0901 	add.w	r9, r9, #1
 8012d24:	e7d8      	b.n	8012cd8 <_printf_common+0x9c>
	...

08012d28 <_printf_i>:
 8012d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012d30:	460c      	mov	r4, r1
 8012d32:	7e09      	ldrb	r1, [r1, #24]
 8012d34:	b085      	sub	sp, #20
 8012d36:	296e      	cmp	r1, #110	; 0x6e
 8012d38:	4617      	mov	r7, r2
 8012d3a:	4606      	mov	r6, r0
 8012d3c:	4698      	mov	r8, r3
 8012d3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012d40:	f000 80b3 	beq.w	8012eaa <_printf_i+0x182>
 8012d44:	d822      	bhi.n	8012d8c <_printf_i+0x64>
 8012d46:	2963      	cmp	r1, #99	; 0x63
 8012d48:	d036      	beq.n	8012db8 <_printf_i+0x90>
 8012d4a:	d80a      	bhi.n	8012d62 <_printf_i+0x3a>
 8012d4c:	2900      	cmp	r1, #0
 8012d4e:	f000 80b9 	beq.w	8012ec4 <_printf_i+0x19c>
 8012d52:	2958      	cmp	r1, #88	; 0x58
 8012d54:	f000 8083 	beq.w	8012e5e <_printf_i+0x136>
 8012d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012d60:	e032      	b.n	8012dc8 <_printf_i+0xa0>
 8012d62:	2964      	cmp	r1, #100	; 0x64
 8012d64:	d001      	beq.n	8012d6a <_printf_i+0x42>
 8012d66:	2969      	cmp	r1, #105	; 0x69
 8012d68:	d1f6      	bne.n	8012d58 <_printf_i+0x30>
 8012d6a:	6820      	ldr	r0, [r4, #0]
 8012d6c:	6813      	ldr	r3, [r2, #0]
 8012d6e:	0605      	lsls	r5, r0, #24
 8012d70:	f103 0104 	add.w	r1, r3, #4
 8012d74:	d52a      	bpl.n	8012dcc <_printf_i+0xa4>
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	6011      	str	r1, [r2, #0]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	da03      	bge.n	8012d86 <_printf_i+0x5e>
 8012d7e:	222d      	movs	r2, #45	; 0x2d
 8012d80:	425b      	negs	r3, r3
 8012d82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012d86:	486f      	ldr	r0, [pc, #444]	; (8012f44 <_printf_i+0x21c>)
 8012d88:	220a      	movs	r2, #10
 8012d8a:	e039      	b.n	8012e00 <_printf_i+0xd8>
 8012d8c:	2973      	cmp	r1, #115	; 0x73
 8012d8e:	f000 809d 	beq.w	8012ecc <_printf_i+0x1a4>
 8012d92:	d808      	bhi.n	8012da6 <_printf_i+0x7e>
 8012d94:	296f      	cmp	r1, #111	; 0x6f
 8012d96:	d020      	beq.n	8012dda <_printf_i+0xb2>
 8012d98:	2970      	cmp	r1, #112	; 0x70
 8012d9a:	d1dd      	bne.n	8012d58 <_printf_i+0x30>
 8012d9c:	6823      	ldr	r3, [r4, #0]
 8012d9e:	f043 0320 	orr.w	r3, r3, #32
 8012da2:	6023      	str	r3, [r4, #0]
 8012da4:	e003      	b.n	8012dae <_printf_i+0x86>
 8012da6:	2975      	cmp	r1, #117	; 0x75
 8012da8:	d017      	beq.n	8012dda <_printf_i+0xb2>
 8012daa:	2978      	cmp	r1, #120	; 0x78
 8012dac:	d1d4      	bne.n	8012d58 <_printf_i+0x30>
 8012dae:	2378      	movs	r3, #120	; 0x78
 8012db0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012db4:	4864      	ldr	r0, [pc, #400]	; (8012f48 <_printf_i+0x220>)
 8012db6:	e055      	b.n	8012e64 <_printf_i+0x13c>
 8012db8:	6813      	ldr	r3, [r2, #0]
 8012dba:	1d19      	adds	r1, r3, #4
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	6011      	str	r1, [r2, #0]
 8012dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012dc8:	2301      	movs	r3, #1
 8012dca:	e08c      	b.n	8012ee6 <_printf_i+0x1be>
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	6011      	str	r1, [r2, #0]
 8012dd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012dd4:	bf18      	it	ne
 8012dd6:	b21b      	sxthne	r3, r3
 8012dd8:	e7cf      	b.n	8012d7a <_printf_i+0x52>
 8012dda:	6813      	ldr	r3, [r2, #0]
 8012ddc:	6825      	ldr	r5, [r4, #0]
 8012dde:	1d18      	adds	r0, r3, #4
 8012de0:	6010      	str	r0, [r2, #0]
 8012de2:	0628      	lsls	r0, r5, #24
 8012de4:	d501      	bpl.n	8012dea <_printf_i+0xc2>
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	e002      	b.n	8012df0 <_printf_i+0xc8>
 8012dea:	0668      	lsls	r0, r5, #25
 8012dec:	d5fb      	bpl.n	8012de6 <_printf_i+0xbe>
 8012dee:	881b      	ldrh	r3, [r3, #0]
 8012df0:	4854      	ldr	r0, [pc, #336]	; (8012f44 <_printf_i+0x21c>)
 8012df2:	296f      	cmp	r1, #111	; 0x6f
 8012df4:	bf14      	ite	ne
 8012df6:	220a      	movne	r2, #10
 8012df8:	2208      	moveq	r2, #8
 8012dfa:	2100      	movs	r1, #0
 8012dfc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012e00:	6865      	ldr	r5, [r4, #4]
 8012e02:	60a5      	str	r5, [r4, #8]
 8012e04:	2d00      	cmp	r5, #0
 8012e06:	f2c0 8095 	blt.w	8012f34 <_printf_i+0x20c>
 8012e0a:	6821      	ldr	r1, [r4, #0]
 8012e0c:	f021 0104 	bic.w	r1, r1, #4
 8012e10:	6021      	str	r1, [r4, #0]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d13d      	bne.n	8012e92 <_printf_i+0x16a>
 8012e16:	2d00      	cmp	r5, #0
 8012e18:	f040 808e 	bne.w	8012f38 <_printf_i+0x210>
 8012e1c:	4665      	mov	r5, ip
 8012e1e:	2a08      	cmp	r2, #8
 8012e20:	d10b      	bne.n	8012e3a <_printf_i+0x112>
 8012e22:	6823      	ldr	r3, [r4, #0]
 8012e24:	07db      	lsls	r3, r3, #31
 8012e26:	d508      	bpl.n	8012e3a <_printf_i+0x112>
 8012e28:	6923      	ldr	r3, [r4, #16]
 8012e2a:	6862      	ldr	r2, [r4, #4]
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	bfde      	ittt	le
 8012e30:	2330      	movle	r3, #48	; 0x30
 8012e32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012e36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012e3a:	ebac 0305 	sub.w	r3, ip, r5
 8012e3e:	6123      	str	r3, [r4, #16]
 8012e40:	f8cd 8000 	str.w	r8, [sp]
 8012e44:	463b      	mov	r3, r7
 8012e46:	aa03      	add	r2, sp, #12
 8012e48:	4621      	mov	r1, r4
 8012e4a:	4630      	mov	r0, r6
 8012e4c:	f7ff fef6 	bl	8012c3c <_printf_common>
 8012e50:	3001      	adds	r0, #1
 8012e52:	d14d      	bne.n	8012ef0 <_printf_i+0x1c8>
 8012e54:	f04f 30ff 	mov.w	r0, #4294967295
 8012e58:	b005      	add	sp, #20
 8012e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e5e:	4839      	ldr	r0, [pc, #228]	; (8012f44 <_printf_i+0x21c>)
 8012e60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012e64:	6813      	ldr	r3, [r2, #0]
 8012e66:	6821      	ldr	r1, [r4, #0]
 8012e68:	1d1d      	adds	r5, r3, #4
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	6015      	str	r5, [r2, #0]
 8012e6e:	060a      	lsls	r2, r1, #24
 8012e70:	d50b      	bpl.n	8012e8a <_printf_i+0x162>
 8012e72:	07ca      	lsls	r2, r1, #31
 8012e74:	bf44      	itt	mi
 8012e76:	f041 0120 	orrmi.w	r1, r1, #32
 8012e7a:	6021      	strmi	r1, [r4, #0]
 8012e7c:	b91b      	cbnz	r3, 8012e86 <_printf_i+0x15e>
 8012e7e:	6822      	ldr	r2, [r4, #0]
 8012e80:	f022 0220 	bic.w	r2, r2, #32
 8012e84:	6022      	str	r2, [r4, #0]
 8012e86:	2210      	movs	r2, #16
 8012e88:	e7b7      	b.n	8012dfa <_printf_i+0xd2>
 8012e8a:	064d      	lsls	r5, r1, #25
 8012e8c:	bf48      	it	mi
 8012e8e:	b29b      	uxthmi	r3, r3
 8012e90:	e7ef      	b.n	8012e72 <_printf_i+0x14a>
 8012e92:	4665      	mov	r5, ip
 8012e94:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e98:	fb02 3311 	mls	r3, r2, r1, r3
 8012e9c:	5cc3      	ldrb	r3, [r0, r3]
 8012e9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012ea2:	460b      	mov	r3, r1
 8012ea4:	2900      	cmp	r1, #0
 8012ea6:	d1f5      	bne.n	8012e94 <_printf_i+0x16c>
 8012ea8:	e7b9      	b.n	8012e1e <_printf_i+0xf6>
 8012eaa:	6813      	ldr	r3, [r2, #0]
 8012eac:	6825      	ldr	r5, [r4, #0]
 8012eae:	6961      	ldr	r1, [r4, #20]
 8012eb0:	1d18      	adds	r0, r3, #4
 8012eb2:	6010      	str	r0, [r2, #0]
 8012eb4:	0628      	lsls	r0, r5, #24
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	d501      	bpl.n	8012ebe <_printf_i+0x196>
 8012eba:	6019      	str	r1, [r3, #0]
 8012ebc:	e002      	b.n	8012ec4 <_printf_i+0x19c>
 8012ebe:	066a      	lsls	r2, r5, #25
 8012ec0:	d5fb      	bpl.n	8012eba <_printf_i+0x192>
 8012ec2:	8019      	strh	r1, [r3, #0]
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	6123      	str	r3, [r4, #16]
 8012ec8:	4665      	mov	r5, ip
 8012eca:	e7b9      	b.n	8012e40 <_printf_i+0x118>
 8012ecc:	6813      	ldr	r3, [r2, #0]
 8012ece:	1d19      	adds	r1, r3, #4
 8012ed0:	6011      	str	r1, [r2, #0]
 8012ed2:	681d      	ldr	r5, [r3, #0]
 8012ed4:	6862      	ldr	r2, [r4, #4]
 8012ed6:	2100      	movs	r1, #0
 8012ed8:	4628      	mov	r0, r5
 8012eda:	f7ed f979 	bl	80001d0 <memchr>
 8012ede:	b108      	cbz	r0, 8012ee4 <_printf_i+0x1bc>
 8012ee0:	1b40      	subs	r0, r0, r5
 8012ee2:	6060      	str	r0, [r4, #4]
 8012ee4:	6863      	ldr	r3, [r4, #4]
 8012ee6:	6123      	str	r3, [r4, #16]
 8012ee8:	2300      	movs	r3, #0
 8012eea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012eee:	e7a7      	b.n	8012e40 <_printf_i+0x118>
 8012ef0:	6923      	ldr	r3, [r4, #16]
 8012ef2:	462a      	mov	r2, r5
 8012ef4:	4639      	mov	r1, r7
 8012ef6:	4630      	mov	r0, r6
 8012ef8:	47c0      	blx	r8
 8012efa:	3001      	adds	r0, #1
 8012efc:	d0aa      	beq.n	8012e54 <_printf_i+0x12c>
 8012efe:	6823      	ldr	r3, [r4, #0]
 8012f00:	079b      	lsls	r3, r3, #30
 8012f02:	d413      	bmi.n	8012f2c <_printf_i+0x204>
 8012f04:	68e0      	ldr	r0, [r4, #12]
 8012f06:	9b03      	ldr	r3, [sp, #12]
 8012f08:	4298      	cmp	r0, r3
 8012f0a:	bfb8      	it	lt
 8012f0c:	4618      	movlt	r0, r3
 8012f0e:	e7a3      	b.n	8012e58 <_printf_i+0x130>
 8012f10:	2301      	movs	r3, #1
 8012f12:	464a      	mov	r2, r9
 8012f14:	4639      	mov	r1, r7
 8012f16:	4630      	mov	r0, r6
 8012f18:	47c0      	blx	r8
 8012f1a:	3001      	adds	r0, #1
 8012f1c:	d09a      	beq.n	8012e54 <_printf_i+0x12c>
 8012f1e:	3501      	adds	r5, #1
 8012f20:	68e3      	ldr	r3, [r4, #12]
 8012f22:	9a03      	ldr	r2, [sp, #12]
 8012f24:	1a9b      	subs	r3, r3, r2
 8012f26:	42ab      	cmp	r3, r5
 8012f28:	dcf2      	bgt.n	8012f10 <_printf_i+0x1e8>
 8012f2a:	e7eb      	b.n	8012f04 <_printf_i+0x1dc>
 8012f2c:	2500      	movs	r5, #0
 8012f2e:	f104 0919 	add.w	r9, r4, #25
 8012f32:	e7f5      	b.n	8012f20 <_printf_i+0x1f8>
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d1ac      	bne.n	8012e92 <_printf_i+0x16a>
 8012f38:	7803      	ldrb	r3, [r0, #0]
 8012f3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f42:	e76c      	b.n	8012e1e <_printf_i+0xf6>
 8012f44:	08013889 	.word	0x08013889
 8012f48:	0801389a 	.word	0x0801389a

08012f4c <_sbrk_r>:
 8012f4c:	b538      	push	{r3, r4, r5, lr}
 8012f4e:	4c06      	ldr	r4, [pc, #24]	; (8012f68 <_sbrk_r+0x1c>)
 8012f50:	2300      	movs	r3, #0
 8012f52:	4605      	mov	r5, r0
 8012f54:	4608      	mov	r0, r1
 8012f56:	6023      	str	r3, [r4, #0]
 8012f58:	f7fe fff2 	bl	8011f40 <_sbrk>
 8012f5c:	1c43      	adds	r3, r0, #1
 8012f5e:	d102      	bne.n	8012f66 <_sbrk_r+0x1a>
 8012f60:	6823      	ldr	r3, [r4, #0]
 8012f62:	b103      	cbz	r3, 8012f66 <_sbrk_r+0x1a>
 8012f64:	602b      	str	r3, [r5, #0]
 8012f66:	bd38      	pop	{r3, r4, r5, pc}
 8012f68:	200015d8 	.word	0x200015d8

08012f6c <__sread>:
 8012f6c:	b510      	push	{r4, lr}
 8012f6e:	460c      	mov	r4, r1
 8012f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f74:	f000 f896 	bl	80130a4 <_read_r>
 8012f78:	2800      	cmp	r0, #0
 8012f7a:	bfab      	itete	ge
 8012f7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8012f80:	181b      	addge	r3, r3, r0
 8012f82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012f86:	bfac      	ite	ge
 8012f88:	6563      	strge	r3, [r4, #84]	; 0x54
 8012f8a:	81a3      	strhlt	r3, [r4, #12]
 8012f8c:	bd10      	pop	{r4, pc}

08012f8e <__swrite>:
 8012f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f92:	461f      	mov	r7, r3
 8012f94:	898b      	ldrh	r3, [r1, #12]
 8012f96:	05db      	lsls	r3, r3, #23
 8012f98:	4605      	mov	r5, r0
 8012f9a:	460c      	mov	r4, r1
 8012f9c:	4616      	mov	r6, r2
 8012f9e:	d505      	bpl.n	8012fac <__swrite+0x1e>
 8012fa0:	2302      	movs	r3, #2
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fa8:	f000 f868 	bl	801307c <_lseek_r>
 8012fac:	89a3      	ldrh	r3, [r4, #12]
 8012fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012fb6:	81a3      	strh	r3, [r4, #12]
 8012fb8:	4632      	mov	r2, r6
 8012fba:	463b      	mov	r3, r7
 8012fbc:	4628      	mov	r0, r5
 8012fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fc2:	f000 b817 	b.w	8012ff4 <_write_r>

08012fc6 <__sseek>:
 8012fc6:	b510      	push	{r4, lr}
 8012fc8:	460c      	mov	r4, r1
 8012fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fce:	f000 f855 	bl	801307c <_lseek_r>
 8012fd2:	1c43      	adds	r3, r0, #1
 8012fd4:	89a3      	ldrh	r3, [r4, #12]
 8012fd6:	bf15      	itete	ne
 8012fd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8012fda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012fde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012fe2:	81a3      	strheq	r3, [r4, #12]
 8012fe4:	bf18      	it	ne
 8012fe6:	81a3      	strhne	r3, [r4, #12]
 8012fe8:	bd10      	pop	{r4, pc}

08012fea <__sclose>:
 8012fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fee:	f000 b813 	b.w	8013018 <_close_r>
	...

08012ff4 <_write_r>:
 8012ff4:	b538      	push	{r3, r4, r5, lr}
 8012ff6:	4c07      	ldr	r4, [pc, #28]	; (8013014 <_write_r+0x20>)
 8012ff8:	4605      	mov	r5, r0
 8012ffa:	4608      	mov	r0, r1
 8012ffc:	4611      	mov	r1, r2
 8012ffe:	2200      	movs	r2, #0
 8013000:	6022      	str	r2, [r4, #0]
 8013002:	461a      	mov	r2, r3
 8013004:	f7fe ff4b 	bl	8011e9e <_write>
 8013008:	1c43      	adds	r3, r0, #1
 801300a:	d102      	bne.n	8013012 <_write_r+0x1e>
 801300c:	6823      	ldr	r3, [r4, #0]
 801300e:	b103      	cbz	r3, 8013012 <_write_r+0x1e>
 8013010:	602b      	str	r3, [r5, #0]
 8013012:	bd38      	pop	{r3, r4, r5, pc}
 8013014:	200015d8 	.word	0x200015d8

08013018 <_close_r>:
 8013018:	b538      	push	{r3, r4, r5, lr}
 801301a:	4c06      	ldr	r4, [pc, #24]	; (8013034 <_close_r+0x1c>)
 801301c:	2300      	movs	r3, #0
 801301e:	4605      	mov	r5, r0
 8013020:	4608      	mov	r0, r1
 8013022:	6023      	str	r3, [r4, #0]
 8013024:	f7fe ff57 	bl	8011ed6 <_close>
 8013028:	1c43      	adds	r3, r0, #1
 801302a:	d102      	bne.n	8013032 <_close_r+0x1a>
 801302c:	6823      	ldr	r3, [r4, #0]
 801302e:	b103      	cbz	r3, 8013032 <_close_r+0x1a>
 8013030:	602b      	str	r3, [r5, #0]
 8013032:	bd38      	pop	{r3, r4, r5, pc}
 8013034:	200015d8 	.word	0x200015d8

08013038 <_fstat_r>:
 8013038:	b538      	push	{r3, r4, r5, lr}
 801303a:	4c07      	ldr	r4, [pc, #28]	; (8013058 <_fstat_r+0x20>)
 801303c:	2300      	movs	r3, #0
 801303e:	4605      	mov	r5, r0
 8013040:	4608      	mov	r0, r1
 8013042:	4611      	mov	r1, r2
 8013044:	6023      	str	r3, [r4, #0]
 8013046:	f7fe ff52 	bl	8011eee <_fstat>
 801304a:	1c43      	adds	r3, r0, #1
 801304c:	d102      	bne.n	8013054 <_fstat_r+0x1c>
 801304e:	6823      	ldr	r3, [r4, #0]
 8013050:	b103      	cbz	r3, 8013054 <_fstat_r+0x1c>
 8013052:	602b      	str	r3, [r5, #0]
 8013054:	bd38      	pop	{r3, r4, r5, pc}
 8013056:	bf00      	nop
 8013058:	200015d8 	.word	0x200015d8

0801305c <_isatty_r>:
 801305c:	b538      	push	{r3, r4, r5, lr}
 801305e:	4c06      	ldr	r4, [pc, #24]	; (8013078 <_isatty_r+0x1c>)
 8013060:	2300      	movs	r3, #0
 8013062:	4605      	mov	r5, r0
 8013064:	4608      	mov	r0, r1
 8013066:	6023      	str	r3, [r4, #0]
 8013068:	f7fe ff51 	bl	8011f0e <_isatty>
 801306c:	1c43      	adds	r3, r0, #1
 801306e:	d102      	bne.n	8013076 <_isatty_r+0x1a>
 8013070:	6823      	ldr	r3, [r4, #0]
 8013072:	b103      	cbz	r3, 8013076 <_isatty_r+0x1a>
 8013074:	602b      	str	r3, [r5, #0]
 8013076:	bd38      	pop	{r3, r4, r5, pc}
 8013078:	200015d8 	.word	0x200015d8

0801307c <_lseek_r>:
 801307c:	b538      	push	{r3, r4, r5, lr}
 801307e:	4c07      	ldr	r4, [pc, #28]	; (801309c <_lseek_r+0x20>)
 8013080:	4605      	mov	r5, r0
 8013082:	4608      	mov	r0, r1
 8013084:	4611      	mov	r1, r2
 8013086:	2200      	movs	r2, #0
 8013088:	6022      	str	r2, [r4, #0]
 801308a:	461a      	mov	r2, r3
 801308c:	f7fe ff4a 	bl	8011f24 <_lseek>
 8013090:	1c43      	adds	r3, r0, #1
 8013092:	d102      	bne.n	801309a <_lseek_r+0x1e>
 8013094:	6823      	ldr	r3, [r4, #0]
 8013096:	b103      	cbz	r3, 801309a <_lseek_r+0x1e>
 8013098:	602b      	str	r3, [r5, #0]
 801309a:	bd38      	pop	{r3, r4, r5, pc}
 801309c:	200015d8 	.word	0x200015d8

080130a0 <__malloc_lock>:
 80130a0:	4770      	bx	lr

080130a2 <__malloc_unlock>:
 80130a2:	4770      	bx	lr

080130a4 <_read_r>:
 80130a4:	b538      	push	{r3, r4, r5, lr}
 80130a6:	4c07      	ldr	r4, [pc, #28]	; (80130c4 <_read_r+0x20>)
 80130a8:	4605      	mov	r5, r0
 80130aa:	4608      	mov	r0, r1
 80130ac:	4611      	mov	r1, r2
 80130ae:	2200      	movs	r2, #0
 80130b0:	6022      	str	r2, [r4, #0]
 80130b2:	461a      	mov	r2, r3
 80130b4:	f7fe fed6 	bl	8011e64 <_read>
 80130b8:	1c43      	adds	r3, r0, #1
 80130ba:	d102      	bne.n	80130c2 <_read_r+0x1e>
 80130bc:	6823      	ldr	r3, [r4, #0]
 80130be:	b103      	cbz	r3, 80130c2 <_read_r+0x1e>
 80130c0:	602b      	str	r3, [r5, #0]
 80130c2:	bd38      	pop	{r3, r4, r5, pc}
 80130c4:	200015d8 	.word	0x200015d8

080130c8 <sqrt>:
 80130c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80130cc:	ed2d 8b02 	vpush	{d8}
 80130d0:	b08b      	sub	sp, #44	; 0x2c
 80130d2:	ec55 4b10 	vmov	r4, r5, d0
 80130d6:	f000 f851 	bl	801317c <__ieee754_sqrt>
 80130da:	4b26      	ldr	r3, [pc, #152]	; (8013174 <sqrt+0xac>)
 80130dc:	eeb0 8a40 	vmov.f32	s16, s0
 80130e0:	eef0 8a60 	vmov.f32	s17, s1
 80130e4:	f993 6000 	ldrsb.w	r6, [r3]
 80130e8:	1c73      	adds	r3, r6, #1
 80130ea:	d02a      	beq.n	8013142 <sqrt+0x7a>
 80130ec:	4622      	mov	r2, r4
 80130ee:	462b      	mov	r3, r5
 80130f0:	4620      	mov	r0, r4
 80130f2:	4629      	mov	r1, r5
 80130f4:	f7ed fd12 	bl	8000b1c <__aeabi_dcmpun>
 80130f8:	4607      	mov	r7, r0
 80130fa:	bb10      	cbnz	r0, 8013142 <sqrt+0x7a>
 80130fc:	f04f 0800 	mov.w	r8, #0
 8013100:	f04f 0900 	mov.w	r9, #0
 8013104:	4642      	mov	r2, r8
 8013106:	464b      	mov	r3, r9
 8013108:	4620      	mov	r0, r4
 801310a:	4629      	mov	r1, r5
 801310c:	f7ed fcde 	bl	8000acc <__aeabi_dcmplt>
 8013110:	b1b8      	cbz	r0, 8013142 <sqrt+0x7a>
 8013112:	2301      	movs	r3, #1
 8013114:	9300      	str	r3, [sp, #0]
 8013116:	4b18      	ldr	r3, [pc, #96]	; (8013178 <sqrt+0xb0>)
 8013118:	9301      	str	r3, [sp, #4]
 801311a:	9708      	str	r7, [sp, #32]
 801311c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8013120:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8013124:	b9b6      	cbnz	r6, 8013154 <sqrt+0x8c>
 8013126:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801312a:	4668      	mov	r0, sp
 801312c:	f000 f8d6 	bl	80132dc <matherr>
 8013130:	b1d0      	cbz	r0, 8013168 <sqrt+0xa0>
 8013132:	9b08      	ldr	r3, [sp, #32]
 8013134:	b11b      	cbz	r3, 801313e <sqrt+0x76>
 8013136:	f7fe ff8f 	bl	8012058 <__errno>
 801313a:	9b08      	ldr	r3, [sp, #32]
 801313c:	6003      	str	r3, [r0, #0]
 801313e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8013142:	eeb0 0a48 	vmov.f32	s0, s16
 8013146:	eef0 0a68 	vmov.f32	s1, s17
 801314a:	b00b      	add	sp, #44	; 0x2c
 801314c:	ecbd 8b02 	vpop	{d8}
 8013150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013154:	4642      	mov	r2, r8
 8013156:	464b      	mov	r3, r9
 8013158:	4640      	mov	r0, r8
 801315a:	4649      	mov	r1, r9
 801315c:	f7ed fb6e 	bl	800083c <__aeabi_ddiv>
 8013160:	2e02      	cmp	r6, #2
 8013162:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013166:	d1e0      	bne.n	801312a <sqrt+0x62>
 8013168:	f7fe ff76 	bl	8012058 <__errno>
 801316c:	2321      	movs	r3, #33	; 0x21
 801316e:	6003      	str	r3, [r0, #0]
 8013170:	e7df      	b.n	8013132 <sqrt+0x6a>
 8013172:	bf00      	nop
 8013174:	200000e8 	.word	0x200000e8
 8013178:	080138ab 	.word	0x080138ab

0801317c <__ieee754_sqrt>:
 801317c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013180:	4955      	ldr	r1, [pc, #340]	; (80132d8 <__ieee754_sqrt+0x15c>)
 8013182:	ec55 4b10 	vmov	r4, r5, d0
 8013186:	43a9      	bics	r1, r5
 8013188:	462b      	mov	r3, r5
 801318a:	462a      	mov	r2, r5
 801318c:	d112      	bne.n	80131b4 <__ieee754_sqrt+0x38>
 801318e:	ee10 2a10 	vmov	r2, s0
 8013192:	ee10 0a10 	vmov	r0, s0
 8013196:	4629      	mov	r1, r5
 8013198:	f7ed fa26 	bl	80005e8 <__aeabi_dmul>
 801319c:	4602      	mov	r2, r0
 801319e:	460b      	mov	r3, r1
 80131a0:	4620      	mov	r0, r4
 80131a2:	4629      	mov	r1, r5
 80131a4:	f7ed f86a 	bl	800027c <__adddf3>
 80131a8:	4604      	mov	r4, r0
 80131aa:	460d      	mov	r5, r1
 80131ac:	ec45 4b10 	vmov	d0, r4, r5
 80131b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131b4:	2d00      	cmp	r5, #0
 80131b6:	ee10 0a10 	vmov	r0, s0
 80131ba:	4621      	mov	r1, r4
 80131bc:	dc0f      	bgt.n	80131de <__ieee754_sqrt+0x62>
 80131be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80131c2:	4330      	orrs	r0, r6
 80131c4:	d0f2      	beq.n	80131ac <__ieee754_sqrt+0x30>
 80131c6:	b155      	cbz	r5, 80131de <__ieee754_sqrt+0x62>
 80131c8:	ee10 2a10 	vmov	r2, s0
 80131cc:	4620      	mov	r0, r4
 80131ce:	4629      	mov	r1, r5
 80131d0:	f7ed f852 	bl	8000278 <__aeabi_dsub>
 80131d4:	4602      	mov	r2, r0
 80131d6:	460b      	mov	r3, r1
 80131d8:	f7ed fb30 	bl	800083c <__aeabi_ddiv>
 80131dc:	e7e4      	b.n	80131a8 <__ieee754_sqrt+0x2c>
 80131de:	151b      	asrs	r3, r3, #20
 80131e0:	d073      	beq.n	80132ca <__ieee754_sqrt+0x14e>
 80131e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80131e6:	07dd      	lsls	r5, r3, #31
 80131e8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80131ec:	bf48      	it	mi
 80131ee:	0fc8      	lsrmi	r0, r1, #31
 80131f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80131f4:	bf44      	itt	mi
 80131f6:	0049      	lslmi	r1, r1, #1
 80131f8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80131fc:	2500      	movs	r5, #0
 80131fe:	1058      	asrs	r0, r3, #1
 8013200:	0fcb      	lsrs	r3, r1, #31
 8013202:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8013206:	0049      	lsls	r1, r1, #1
 8013208:	2316      	movs	r3, #22
 801320a:	462c      	mov	r4, r5
 801320c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8013210:	19a7      	adds	r7, r4, r6
 8013212:	4297      	cmp	r7, r2
 8013214:	bfde      	ittt	le
 8013216:	19bc      	addle	r4, r7, r6
 8013218:	1bd2      	suble	r2, r2, r7
 801321a:	19ad      	addle	r5, r5, r6
 801321c:	0fcf      	lsrs	r7, r1, #31
 801321e:	3b01      	subs	r3, #1
 8013220:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8013224:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013228:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801322c:	d1f0      	bne.n	8013210 <__ieee754_sqrt+0x94>
 801322e:	f04f 0c20 	mov.w	ip, #32
 8013232:	469e      	mov	lr, r3
 8013234:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013238:	42a2      	cmp	r2, r4
 801323a:	eb06 070e 	add.w	r7, r6, lr
 801323e:	dc02      	bgt.n	8013246 <__ieee754_sqrt+0xca>
 8013240:	d112      	bne.n	8013268 <__ieee754_sqrt+0xec>
 8013242:	428f      	cmp	r7, r1
 8013244:	d810      	bhi.n	8013268 <__ieee754_sqrt+0xec>
 8013246:	2f00      	cmp	r7, #0
 8013248:	eb07 0e06 	add.w	lr, r7, r6
 801324c:	da42      	bge.n	80132d4 <__ieee754_sqrt+0x158>
 801324e:	f1be 0f00 	cmp.w	lr, #0
 8013252:	db3f      	blt.n	80132d4 <__ieee754_sqrt+0x158>
 8013254:	f104 0801 	add.w	r8, r4, #1
 8013258:	1b12      	subs	r2, r2, r4
 801325a:	428f      	cmp	r7, r1
 801325c:	bf88      	it	hi
 801325e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8013262:	1bc9      	subs	r1, r1, r7
 8013264:	4433      	add	r3, r6
 8013266:	4644      	mov	r4, r8
 8013268:	0052      	lsls	r2, r2, #1
 801326a:	f1bc 0c01 	subs.w	ip, ip, #1
 801326e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8013272:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013276:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801327a:	d1dd      	bne.n	8013238 <__ieee754_sqrt+0xbc>
 801327c:	430a      	orrs	r2, r1
 801327e:	d006      	beq.n	801328e <__ieee754_sqrt+0x112>
 8013280:	1c5c      	adds	r4, r3, #1
 8013282:	bf13      	iteet	ne
 8013284:	3301      	addne	r3, #1
 8013286:	3501      	addeq	r5, #1
 8013288:	4663      	moveq	r3, ip
 801328a:	f023 0301 	bicne.w	r3, r3, #1
 801328e:	106a      	asrs	r2, r5, #1
 8013290:	085b      	lsrs	r3, r3, #1
 8013292:	07e9      	lsls	r1, r5, #31
 8013294:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013298:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801329c:	bf48      	it	mi
 801329e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80132a2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80132a6:	461c      	mov	r4, r3
 80132a8:	e780      	b.n	80131ac <__ieee754_sqrt+0x30>
 80132aa:	0aca      	lsrs	r2, r1, #11
 80132ac:	3815      	subs	r0, #21
 80132ae:	0549      	lsls	r1, r1, #21
 80132b0:	2a00      	cmp	r2, #0
 80132b2:	d0fa      	beq.n	80132aa <__ieee754_sqrt+0x12e>
 80132b4:	02d6      	lsls	r6, r2, #11
 80132b6:	d50a      	bpl.n	80132ce <__ieee754_sqrt+0x152>
 80132b8:	f1c3 0420 	rsb	r4, r3, #32
 80132bc:	fa21 f404 	lsr.w	r4, r1, r4
 80132c0:	1e5d      	subs	r5, r3, #1
 80132c2:	4099      	lsls	r1, r3
 80132c4:	4322      	orrs	r2, r4
 80132c6:	1b43      	subs	r3, r0, r5
 80132c8:	e78b      	b.n	80131e2 <__ieee754_sqrt+0x66>
 80132ca:	4618      	mov	r0, r3
 80132cc:	e7f0      	b.n	80132b0 <__ieee754_sqrt+0x134>
 80132ce:	0052      	lsls	r2, r2, #1
 80132d0:	3301      	adds	r3, #1
 80132d2:	e7ef      	b.n	80132b4 <__ieee754_sqrt+0x138>
 80132d4:	46a0      	mov	r8, r4
 80132d6:	e7bf      	b.n	8013258 <__ieee754_sqrt+0xdc>
 80132d8:	7ff00000 	.word	0x7ff00000

080132dc <matherr>:
 80132dc:	2000      	movs	r0, #0
 80132de:	4770      	bx	lr

080132e0 <_init>:
 80132e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132e2:	bf00      	nop
 80132e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132e6:	bc08      	pop	{r3}
 80132e8:	469e      	mov	lr, r3
 80132ea:	4770      	bx	lr

080132ec <_fini>:
 80132ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ee:	bf00      	nop
 80132f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132f2:	bc08      	pop	{r3}
 80132f4:	469e      	mov	lr, r3
 80132f6:	4770      	bx	lr
