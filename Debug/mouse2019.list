
mouse2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000694  08010eac  08010eac  00020eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011540  08011540  00030124  2**0
                  CONTENTS
  4 .ARM          00000008  08011540  08011540  00021540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011548  08011548  00030124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011548  08011548  00021548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801154c  0801154c  0002154c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08011550  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014fc  20000124  08011674  00030124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001620  08011674  00031620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001688d  00000000  00000000  00030154  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003094  00000000  00000000  000469e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001400  00000000  00000000  00049a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b0  00000000  00000000  0004ae78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002286c  00000000  00000000  0004c128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010b47  00000000  00000000  0006e994  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7cd1  00000000  00000000  0007f4db  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001471ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d88  00000000  00000000  00147228  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000124 	.word	0x20000124
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010e94 	.word	0x08010e94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000128 	.word	0x20000128
 80001cc:	08010e94 	.word	0x08010e94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_Init+0x40>)
 8000f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_Init+0x40>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x40>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 fd07 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f00e fad2 	bl	800f514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fd1f 	bl	80019de <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 fce7 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200000b8 	.word	0x200000b8
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004
 8001000:	20000158 	.word	0x20000158

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000158 	.word	0x20000158

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_Delay+0x40>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e033      	b.n	80010de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f00e fa70 	bl	800f564 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d118      	bne.n	80010d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a6:	f023 0302 	bic.w	r3, r3, #2
 80010aa:	f043 0202 	orr.w	r2, r3, #2
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fa92 	bl	80015dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
 80010ce:	e001      	b.n	80010d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Start+0x1a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e0a5      	b.n	800124e <HAL_ADC_Start+0x166>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d018      	beq.n	800114a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001128:	4b4c      	ldr	r3, [pc, #304]	; (800125c <HAL_ADC_Start+0x174>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_ADC_Start+0x178>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9a      	lsrs	r2, r3, #18
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800113c:	e002      	b.n	8001144 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3b01      	subs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d179      	bne.n	800124c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001182:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001196:	d106      	bne.n	80011a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f023 0206 	bic.w	r2, r3, #6
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d12a      	bne.n	8001224 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_ADC_Start+0x180>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d015      	beq.n	8001204 <HAL_ADC_Start+0x11c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_ADC_Start+0x184>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d105      	bne.n	80011ee <HAL_ADC_Start+0x106>
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00a      	beq.n	8001204 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_ADC_Start+0x188>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d129      	bne.n	800124c <HAL_ADC_Start+0x164>
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d823      	bhi.n	800124c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11c      	bne.n	800124c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	e013      	b.n	800124c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_ADC_Start+0x180>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_ADC_Start+0x164>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800124a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200000b8 	.word	0x200000b8
 8001260:	431bde83 	.word	0x431bde83
 8001264:	40012300 	.word	0x40012300
 8001268:	40012000 	.word	0x40012000
 800126c:	40012100 	.word	0x40012100
 8001270:	40012200 	.word	0x40012200

08001274 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001290:	d113      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a0:	d10b      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0220 	orr.w	r2, r3, #32
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e05c      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012ba:	f7ff fea3 	bl	8001004 <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012c0:	e01a      	b.n	80012f8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d016      	beq.n	80012f8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <HAL_ADC_PollForConversion+0x6c>
 80012d0:	f7ff fe98 	bl	8001004 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d20b      	bcs.n	80012f8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f043 0204 	orr.w	r2, r3, #4
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e03d      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b02      	cmp	r3, #2
 8001304:	d1dd      	bne.n	80012c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0212 	mvn.w	r2, #18
 800130e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d123      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800132e:	2b00      	cmp	r3, #0
 8001330:	d11f      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134a:	2b00      	cmp	r3, #0
 800134c:	d111      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e105      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x228>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d925      	bls.n	8001410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3b1e      	subs	r3, #30
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43da      	mvns	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	400a      	ands	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	3b1e      	subs	r3, #30
 8001404:	409a      	lsls	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e022      	b.n	8001456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	2207      	movs	r2, #7
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6919      	ldr	r1, [r3, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4403      	add	r3, r0
 800144c:	409a      	lsls	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b06      	cmp	r3, #6
 800145c:	d824      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b05      	subs	r3, #5
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b05      	subs	r3, #5
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
 80014a6:	e04c      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d824      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b23      	subs	r3, #35	; 0x23
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43da      	mvns	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b23      	subs	r3, #35	; 0x23
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e023      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b41      	subs	r3, #65	; 0x41
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_ADC_ConfigChannel+0x234>)
 8001544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d109      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d105      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d123      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d003      	beq.n	800157e <HAL_ADC_ConfigChannel+0x1e6>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b11      	cmp	r3, #17
 800157c:	d11b      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_ADC_ConfigChannel+0x240>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9a      	lsrs	r2, r3, #18
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	40012000 	.word	0x40012000
 80015d4:	200000b8 	.word	0x200000b8
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <ADC_Init+0x1f0>)
 80015e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <ADC_Init+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e00f      	b.n	80016da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0202 	bic.w	r2, r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
 80016f4:	005a      	lsls	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001716:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	035a      	lsls	r2, r3, #13
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e007      	b.n	8001750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	3b01      	subs	r3, #1
 800176c:	051a      	lsls	r2, r3, #20
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001792:	025a      	lsls	r2, r3, #9
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	029a      	lsls	r2, r3, #10
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a0c:	7e1b      	ldrb	r3, [r3, #24]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_FLASH_Program+0x1e>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e03b      	b.n	8001a8e <HAL_FLASH_Program+0x96>
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a20:	f000 f870 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d12b      	bne.n	8001a86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a34:	783b      	ldrb	r3, [r7, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	68b8      	ldr	r0, [r7, #8]
 8001a3a:	f000 f917 	bl	8001c6c <FLASH_Program_Byte>
 8001a3e:	e016      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	68b8      	ldr	r0, [r7, #8]
 8001a4c:	f000 f8ea 	bl	8001c24 <FLASH_Program_HalfWord>
 8001a50:	e00d      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d105      	bne.n	8001a64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68b8      	ldr	r0, [r7, #8]
 8001a5e:	f000 f8bf 	bl	8001be0 <FLASH_Program_Word>
 8001a62:	e004      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f000 f88b 	bl	8001b84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a72:	f000 f847 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a76:	4603      	mov	r3, r0
 8001a78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000015c 	.word	0x2000015c
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da0b      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_FLASH_Unlock+0x3c>)
 8001ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_FLASH_Unlock+0x40>)
 8001abc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da01      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	45670123 	.word	0x45670123
 8001ae0:	cdef89ab 	.word	0xcdef89ab

08001ae4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001af2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <FLASH_WaitForLastOperation+0x78>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b16:	f7ff fa75 	bl	8001004 <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b1c:	e010      	b.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d00c      	beq.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <FLASH_WaitForLastOperation+0x38>
 8001b2c:	f7ff fa6a 	bl	8001004 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d201      	bcs.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e019      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e8      	bne.n	8001b1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b6a:	f000 f8a1 	bl	8001cb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
  
}  
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	2000015c 	.word	0x2000015c
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b84:	b490      	push	{r4, r7}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001ba2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	f04f 0400 	mov.w	r4, #0
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	2400      	movs	r4, #0
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	3204      	adds	r2, #4
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc90      	pop	{r4, r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	801a      	strh	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cce:	2210      	movs	r2, #16
 8001cd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cec:	2220      	movs	r2, #32
 8001cee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	f043 0320 	orr.w	r3, r3, #32
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	60da      	str	r2, [r3, #12]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023c00 	.word	0x40023c00
 8001d58:	2000015c 	.word	0x2000015c

08001d5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d70:	7e1b      	ldrb	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_FLASHEx_Erase+0x1e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e058      	b.n	8001e2c <HAL_FLASHEx_Erase+0xd0>
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d84:	f7ff febe 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d148      	bne.n	8001e24 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d115      	bne.n	8001dce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f844 	bl	8001e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db8:	f7ff fea4 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6113      	str	r3, [r2, #16]
 8001dcc:	e028      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	e01c      	b.n	8001e10 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68b8      	ldr	r0, [r7, #8]
 8001de0:	f000 f850 	bl	8001e84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de8:	f7ff fe8c 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dfa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	601a      	str	r2, [r3, #0]
          break;
 8001e08:	e00a      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3da      	bcc.n	8001dd6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001e20:	f000 f878 	bl	8001f14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	761a      	strb	r2, [r3, #24]

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	2000015c 	.word	0x2000015c
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6113      	str	r3, [r2, #16]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e010      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e009      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d103      	bne.n	8001ebc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e002      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	490f      	ldr	r1, [pc, #60]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ee4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6113      	str	r3, [r2, #16]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
  }
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e16b      	b.n	8002294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 815a 	bne.w	800228e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x4a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d123      	bne.n	8002032 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0203 	and.w	r2, r3, #3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00b      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207a:	2b11      	cmp	r3, #17
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b12      	cmp	r3, #18
 8002084:	d130      	bne.n	80020e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 0201 	and.w	r2, r3, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80b4 	beq.w	800228e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x308>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_GPIO_Init+0x30c>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02b      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d025      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d019      	beq.n	80021ba <HAL_GPIO_Init+0x21a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x216>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00d      	beq.n	80021b2 <HAL_GPIO_Init+0x212>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_GPIO_Init+0x328>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x32c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_GPIO_Init+0x20a>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e00e      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00c      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ae:	2306      	movs	r3, #6
 80021b0:	e00a      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c6:	2300      	movs	r3, #0
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d8:	4934      	ldr	r1, [pc, #208]	; (80022ac <HAL_GPIO_Init+0x30c>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_GPIO_Init+0x330>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220a:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f67f ae90 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3724      	adds	r7, #36	; 0x24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e22d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b9d      	ldr	r3, [pc, #628]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e208      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe08 	bl	8001004 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fe04 	bl	8001004 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1cd      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fdf4 	bl	8001004 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fdf0 	bl	8001004 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1b9      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e18d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fda9 	bl	8001004 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fda5 	bl	8001004 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e16e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd88 	bl	8001004 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fd84 	bl	8001004 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e14d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fd68 	bl	8001004 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fd64 	bl	8001004 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e12d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fd51 	bl	8001004 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fd4d 	bl	8001004 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e116      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a0 	beq.w	80026d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fd13 	bl	8001004 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e011      	b.n	8002606 <HAL_RCC_OscConfig+0x2ce>
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
 80025f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fd06 	bl	8001004 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0cf      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2f0>
 800261a:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 8002630:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a5c      	ldr	r2, [pc, #368]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fccb 	bl	8001004 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fcc7 	bl	8001004 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e08e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x33a>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fcb5 	bl	8001004 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fcb1 	bl	8001004 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e078      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d064      	beq.n	80027a4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d05c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d141      	bne.n	8002772 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc86 	bl	8001004 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fc82 	bl	8001004 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04b      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	3b01      	subs	r3, #1
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	491d      	ldr	r1, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fc5b 	bl	8001004 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fc57 	bl	8001004 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e020      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x41a>
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fc44 	bl	8001004 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fc40 	bl	8001004 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x448>
 800279e:	e001      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000
 80027b4:	40023800 	.word	0x40023800
 80027b8:	42470060 	.word	0x42470060

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0ca      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d90c      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b6      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002810:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002828:	4b52      	ldr	r3, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	494c      	ldr	r1, [pc, #304]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d119      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d003      	beq.n	800287a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e065      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4933      	ldr	r1, [pc, #204]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fbaa 	bl	8001004 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fba6 	bl	8001004 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20c      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e030      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4915      	ldr	r1, [pc, #84]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	490d      	ldr	r1, [pc, #52]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002942:	f000 f81d 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002946:	4601      	mov	r1, r0
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	fa21 f303 	lsr.w	r3, r1, r3
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe fb0c 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	0801148c 	.word	0x0801148c
 800297c:	200000b8 	.word	0x200000b8

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d007      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x32>
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d008      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x38>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 808d 	bne.w	8002ac6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 80029ae:	60bb      	str	r3, [r7, #8]
       break;
 80029b0:	e08c      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029b4:	60bb      	str	r3, [r7, #8]
      break;
 80029b6:	e089      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b8:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d023      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	f04f 0400 	mov.w	r4, #0
 80029d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	ea03 0501 	and.w	r5, r3, r1
 80029e4:	ea04 0602 	and.w	r6, r4, r2
 80029e8:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ea:	fb02 f106 	mul.w	r1, r2, r6
 80029ee:	2200      	movs	r2, #0
 80029f0:	fb02 f205 	mul.w	r2, r2, r5
 80029f4:	440a      	add	r2, r1
 80029f6:	493a      	ldr	r1, [pc, #232]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f8:	fba5 0101 	umull	r0, r1, r5, r1
 80029fc:	1853      	adds	r3, r2, r1
 80029fe:	4619      	mov	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4623      	mov	r3, r4
 8002a0a:	f7fe f915 	bl	8000c38 <__aeabi_uldivmod>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e049      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	099b      	lsrs	r3, r3, #6
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	ea03 0501 	and.w	r5, r3, r1
 8002a2c:	ea04 0602 	and.w	r6, r4, r2
 8002a30:	4629      	mov	r1, r5
 8002a32:	4632      	mov	r2, r6
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	0154      	lsls	r4, r2, #5
 8002a3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a42:	014b      	lsls	r3, r1, #5
 8002a44:	4619      	mov	r1, r3
 8002a46:	4622      	mov	r2, r4
 8002a48:	1b49      	subs	r1, r1, r5
 8002a4a:	eb62 0206 	sbc.w	r2, r2, r6
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	f04f 0400 	mov.w	r4, #0
 8002a56:	0194      	lsls	r4, r2, #6
 8002a58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a5c:	018b      	lsls	r3, r1, #6
 8002a5e:	1a5b      	subs	r3, r3, r1
 8002a60:	eb64 0402 	sbc.w	r4, r4, r2
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	00e2      	lsls	r2, r4, #3
 8002a6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a72:	00d9      	lsls	r1, r3, #3
 8002a74:	460b      	mov	r3, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	195b      	adds	r3, r3, r5
 8002a7a:	eb44 0406 	adc.w	r4, r4, r6
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	02a2      	lsls	r2, r4, #10
 8002a88:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a8c:	0299      	lsls	r1, r3, #10
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4614      	mov	r4, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	4621      	mov	r1, r4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f04f 0400 	mov.w	r4, #0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	f7fe f8ca 	bl	8000c38 <__aeabi_uldivmod>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	60bb      	str	r3, [r7, #8]
      break;
 8002ac4:	e002      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ac8:	60bb      	str	r3, [r7, #8]
      break;
 8002aca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002acc:	68bb      	ldr	r3, [r7, #8]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	017d7840 	.word	0x017d7840

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	200000b8 	.word	0x200000b8

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b04:	4601      	mov	r1, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	0801149c 	.word	0x0801149c

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffdc 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0b5b      	lsrs	r3, r3, #13
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	0801149c 	.word	0x0801149c

08002b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e056      	b.n	8002c0c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f00c fd37 	bl	800f5ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	f003 0104 	and.w	r1, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_SPI_Transmit+0x22>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e11e      	b.n	8002e74 <HAL_SPI_Transmit+0x260>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c3e:	f7fe f9e1 	bl	8001004 <HAL_GetTick>
 8002c42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
 8002c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c58:	e103      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_SPI_Transmit+0x52>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c6a:	e0fa      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb2:	d107      	bne.n	8002cc4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d007      	beq.n	8002ce2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cea:	d14b      	bne.n	8002d84 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Transmit+0xe6>
 8002cf4:	8afb      	ldrh	r3, [r7, #22]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d13e      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d1e:	e02b      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d112      	bne.n	8002d54 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	1c9a      	adds	r2, r3, #2
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d52:	e011      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d54:	f7fe f956 	bl	8001004 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d803      	bhi.n	8002d6c <HAL_SPI_Transmit+0x158>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d102      	bne.n	8002d72 <HAL_SPI_Transmit+0x15e>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d76:	e074      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ce      	bne.n	8002d20 <HAL_SPI_Transmit+0x10c>
 8002d82:	e04c      	b.n	8002e1e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Transmit+0x17e>
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d140      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002db8:	e02c      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d113      	bne.n	8002df0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dee:	e011      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df0:	f7fe f908 	bl	8001004 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d803      	bhi.n	8002e08 <HAL_SPI_Transmit+0x1f4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_Transmit+0x1fa>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e12:	e026      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1cd      	bne.n	8002dba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fba4 	bl	8003570 <SPI_EndRxTxTransaction>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e000      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e98:	d112      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8e9 	bl	800308e <HAL_SPI_TransmitReceive>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	e0e2      	b.n	8003086 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Receive+0x52>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0db      	b.n	8003086 <HAL_SPI_Receive+0x20a>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed6:	f7fe f895 	bl	8001004 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eec:	e0c2      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_SPI_Receive+0x7e>
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002efe:	e0b9      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2204      	movs	r2, #4
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f46:	d107      	bne.n	8002f58 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d007      	beq.n	8002f76 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d162      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f7e:	e02e      	b.n	8002fde <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d115      	bne.n	8002fba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f103 020c 	add.w	r2, r3, #12
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fb8:	e011      	b.n	8002fde <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fba:	f7fe f823 	bl	8001004 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d803      	bhi.n	8002fd2 <HAL_SPI_Receive+0x156>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d102      	bne.n	8002fd8 <HAL_SPI_Receive+0x15c>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fdc:	e04a      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1cb      	bne.n	8002f80 <HAL_SPI_Receive+0x104>
 8002fe8:	e031      	b.n	800304e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d113      	bne.n	8003020 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	b292      	uxth	r2, r2
 8003004:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800301e:	e011      	b.n	8003044 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003020:	f7fd fff0 	bl	8001004 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d803      	bhi.n	8003038 <HAL_SPI_Receive+0x1bc>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d102      	bne.n	800303e <HAL_SPI_Receive+0x1c2>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003042:	e017      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1cd      	bne.n	8002fea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa27 	bl	80034a6 <SPI_EndRxTransaction>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
 8003070:	e000      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003072:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b08c      	sub	sp, #48	; 0x30
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800309c:	2301      	movs	r3, #1
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x26>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e18a      	b.n	80033ca <HAL_SPI_TransmitReceive+0x33c>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030bc:	f7fd ffa2 	bl	8001004 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d00f      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e4:	d107      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
 80030ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d003      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030fc:	e15b      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003116:	e14e      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b04      	cmp	r3, #4
 8003122:	d003      	beq.n	800312c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2205      	movs	r2, #5
 8003128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	887a      	ldrh	r2, [r7, #2]
 8003142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d007      	beq.n	8003180 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003188:	d178      	bne.n	800327c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x10a>
 8003192:	8b7b      	ldrh	r3, [r7, #26]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d166      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	e053      	b.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11b      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d113      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d119      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d014      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	b292      	uxth	r2, r2
 8003228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003242:	2301      	movs	r3, #1
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003246:	f7fd fedd 	bl	8001004 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003252:	429a      	cmp	r2, r3
 8003254:	d807      	bhi.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d003      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003264:	e0a7      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1a6      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1a1      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 800327a:	e07c      	b.n	8003376 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_TransmitReceive+0x1fc>
 8003284:	8b7b      	ldrh	r3, [r7, #26]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d16b      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b0:	e057      	b.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d11c      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d114      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d119      	bne.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d014      	beq.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003338:	2301      	movs	r3, #1
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800333c:	f7fd fe62 	bl	8001004 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003348:	429a      	cmp	r2, r3
 800334a:	d803      	bhi.n	8003354 <HAL_SPI_TransmitReceive+0x2c6>
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d102      	bne.n	800335a <HAL_SPI_TransmitReceive+0x2cc>
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003360:	e029      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1a2      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d19d      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8f8 	bl	8003570 <SPI_EndRxTxTransaction>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003392:	e010      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	e000      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033e2:	e04c      	b.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d048      	beq.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033ec:	f7fd fe0a 	bl	8001004 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d902      	bls.n	8003402 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d13d      	bne.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003410:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341a:	d111      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d004      	beq.n	8003430 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d107      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d10f      	bne.n	800346a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d1a3      	bne.n	80033e4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d111      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	d004      	beq.n	80034d0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d107      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e8:	d12a      	bne.n	8003540 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f2:	d012      	beq.n	800351a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff67 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02d      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e026      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	2101      	movs	r1, #1
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff54 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e013      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	2101      	movs	r1, #1
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff41 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e000      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <SPI_EndRxTxTransaction+0x7c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <SPI_EndRxTxTransaction+0x80>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0d5b      	lsrs	r3, r3, #21
 8003588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359a:	d112      	bne.n	80035c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2180      	movs	r1, #128	; 0x80
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff13 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e00f      	b.n	80035e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d0f2      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x52>
 80035dc:	e000      	b.n	80035e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80035de:	bf00      	nop
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200000b8 	.word	0x200000b8
 80035f0:	165e9f81 	.word	0x165e9f81

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e01d      	b.n	8003642 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f00c f82e 	bl	800f67c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 fc70 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d007      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e01d      	b.n	80036e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f815 	bl	80036e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f000 fc21 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 feec 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <HAL_TIM_PWM_Start+0x74>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_TIM_PWM_Start+0x2c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_TIM_PWM_Start+0x78>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d101      	bne.n	800372c <HAL_TIM_PWM_Start+0x30>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_TIM_PWM_Start+0x32>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b06      	cmp	r3, #6
 8003752:	d007      	beq.n	8003764 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000
 8003774:	40010400 	.word	0x40010400

08003778 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 feae 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_TIM_PWM_Stop+0xa8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_PWM_Stop+0x2c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_TIM_PWM_Stop+0xac>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_PWM_Stop+0x30>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_TIM_PWM_Stop+0x32>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d017      	beq.n	80037de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	f240 4344 	movw	r3, #1092	; 0x444
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	f240 4344 	movw	r3, #1092	; 0x444
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40010000 	.word	0x40010000
 8003824:	40010400 	.word	0x40010400

08003828 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e083      	b.n	8003944 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f00b ff65 	bl	800f720 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386c:	f023 0307 	bic.w	r3, r3, #7
 8003870:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f000 fb4b 	bl	8003f18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	4313      	orrs	r3, r2
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038c8:	f023 030c 	bic.w	r3, r3, #12
 80038cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	4313      	orrs	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	011a      	lsls	r2, r3, #4
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	4313      	orrs	r3, r2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003906:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4313      	orrs	r3, r2
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_TIM_Encoder_Start+0x16>
 800395c:	2b04      	cmp	r3, #4
 800395e:	d008      	beq.n	8003972 <HAL_TIM_Encoder_Start+0x26>
 8003960:	e00f      	b.n	8003982 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fdbe 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003970:	e016      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	2104      	movs	r1, #4
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fdb6 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003980:	e00e      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fdae 	bl	80044ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2201      	movs	r2, #1
 8003996:	2104      	movs	r1, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fda7 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 800399e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d122      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d11b      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f06f 0202 	mvn.w	r2, #2
 80039e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fa6c 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a02:	e005      	b.n	8003a10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa5e 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fa6f 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d122      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d11b      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0204 	mvn.w	r2, #4
 8003a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fa42 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a56:	e005      	b.n	8003a64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa34 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa45 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d122      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d11b      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0208 	mvn.w	r2, #8
 8003a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2204      	movs	r2, #4
 8003a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa18 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003aaa:	e005      	b.n	8003ab8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa0a 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa1b 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d122      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d11b      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f06f 0210 	mvn.w	r2, #16
 8003ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f9ee 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003afe:	e005      	b.n	8003b0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f9e0 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9f1 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10e      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0201 	mvn.w	r2, #1
 8003b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f006 fc89 	bl	800a450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d10e      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	d107      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fd35 	bl	80045d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d10e      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9b6 	bl	8003f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d107      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f06f 0220 	mvn.w	r2, #32
 8003bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fcff 	bl	80045c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e0b4      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b0c      	cmp	r3, #12
 8003bfa:	f200 809f 	bhi.w	8003d3c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c39 	.word	0x08003c39
 8003c08:	08003d3d 	.word	0x08003d3d
 8003c0c:	08003d3d 	.word	0x08003d3d
 8003c10:	08003d3d 	.word	0x08003d3d
 8003c14:	08003c79 	.word	0x08003c79
 8003c18:	08003d3d 	.word	0x08003d3d
 8003c1c:	08003d3d 	.word	0x08003d3d
 8003c20:	08003d3d 	.word	0x08003d3d
 8003c24:	08003cbb 	.word	0x08003cbb
 8003c28:	08003d3d 	.word	0x08003d3d
 8003c2c:	08003d3d 	.word	0x08003d3d
 8003c30:	08003d3d 	.word	0x08003d3d
 8003c34:	08003cfb 	.word	0x08003cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fa0a 	bl	8004058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0208 	orr.w	r2, r2, #8
 8003c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0204 	bic.w	r2, r2, #4
 8003c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6999      	ldr	r1, [r3, #24]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	619a      	str	r2, [r3, #24]
      break;
 8003c76:	e062      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fa5a 	bl	8004138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	021a      	lsls	r2, r3, #8
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	619a      	str	r2, [r3, #24]
      break;
 8003cb8:	e041      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 faaf 	bl	8004224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0208 	orr.w	r2, r2, #8
 8003cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0204 	bic.w	r2, r2, #4
 8003ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69d9      	ldr	r1, [r3, #28]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	61da      	str	r2, [r3, #28]
      break;
 8003cf8:	e021      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fb03 	bl	800430c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	021a      	lsls	r2, r3, #8
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	61da      	str	r2, [r3, #28]
      break;
 8003d3a:	e000      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIM_ConfigClockSource+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e0a6      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x166>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d067      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0x120>
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d80b      	bhi.n	8003dc4 <HAL_TIM_ConfigClockSource+0x6c>
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d073      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d802      	bhi.n	8003dba <HAL_TIM_ConfigClockSource+0x62>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d06f      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003db8:	e078      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d06c      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003dbe:	2b30      	cmp	r3, #48	; 0x30
 8003dc0:	d06a      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dc2:	e073      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dc4:	2b70      	cmp	r3, #112	; 0x70
 8003dc6:	d00d      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x8c>
 8003dc8:	2b70      	cmp	r3, #112	; 0x70
 8003dca:	d804      	bhi.n	8003dd6 <HAL_TIM_ConfigClockSource+0x7e>
 8003dcc:	2b50      	cmp	r3, #80	; 0x50
 8003dce:	d033      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0xe0>
 8003dd0:	2b60      	cmp	r3, #96	; 0x60
 8003dd2:	d041      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dd4:	e06a      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d066      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x152>
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d017      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003de2:	e063      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6899      	ldr	r1, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f000 fb5a 	bl	80044ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	609a      	str	r2, [r3, #8]
      break;
 8003e10:	e04c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6899      	ldr	r1, [r3, #8]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f000 fb43 	bl	80044ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e34:	609a      	str	r2, [r3, #8]
      break;
 8003e36:	e039      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f000 fab7 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2150      	movs	r1, #80	; 0x50
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fb10 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e56:	e029      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f000 fad6 	bl	8004416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2160      	movs	r1, #96	; 0x60
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fb00 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e76:	e019      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f000 fa97 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2140      	movs	r1, #64	; 0x40
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 faf0 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e96:	e009      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fae7 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e000      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a40      	ldr	r2, [pc, #256]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d027      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d023      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d017      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a28      	ldr	r2, [pc, #160]	; (8004040 <TIM_Base_SetConfig+0x128>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a27      	ldr	r2, [pc, #156]	; (8004044 <TIM_Base_SetConfig+0x12c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a26      	ldr	r2, [pc, #152]	; (8004048 <TIM_Base_SetConfig+0x130>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_Base_SetConfig+0x134>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <TIM_Base_SetConfig+0x138>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <TIM_Base_SetConfig+0x13c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0xf8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d103      	bne.n	8004018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	615a      	str	r2, [r3, #20]
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800
 800404c:	40001800 	.word	0x40001800
 8004050:	40001c00 	.word	0x40001c00
 8004054:	40002000 	.word	0x40002000

08004058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f023 0302 	bic.w	r3, r3, #2
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a20      	ldr	r2, [pc, #128]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC1_SetConfig+0x64>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10c      	bne.n	80040d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0308 	bic.w	r3, r3, #8
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a15      	ldr	r2, [pc, #84]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_OC1_SetConfig+0x8e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d111      	bne.n	800410a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40010000 	.word	0x40010000
 8004134:	40010400 	.word	0x40010400

08004138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0210 	bic.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0320 	bic.w	r3, r3, #32
 8004182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a22      	ldr	r2, [pc, #136]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC2_SetConfig+0x68>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10d      	bne.n	80041bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC2_SetConfig+0x94>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d113      	bne.n	80041f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40010400 	.word	0x40010400

08004224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800426c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_OC3_SetConfig+0x66>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10d      	bne.n	80042a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a16      	ldr	r2, [pc, #88]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_OC3_SetConfig+0x92>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d113      	bne.n	80042de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40010000 	.word	0x40010000
 8004308:	40010400 	.word	0x40010400

0800430c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	031b      	lsls	r3, r3, #12
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <TIM_OC4_SetConfig+0xa4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_OC4_SetConfig+0x68>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <TIM_OC4_SetConfig+0xa8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d109      	bne.n	8004388 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40010400 	.word	0x40010400

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	f043 0307 	orr.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2201      	movs	r2, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1a      	ldr	r2, [r3, #32]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800454a:	2302      	movs	r3, #2
 800454c:	e032      	b.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004586:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e03f      	b.n	800467a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f00b f982 	bl	800f918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2224      	movs	r2, #36	; 0x24
 8004618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f90b 	bl	8004848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af02      	add	r7, sp, #8
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b20      	cmp	r3, #32
 80046a0:	f040 8083 	bne.w	80047aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Transmit+0x2e>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e07b      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_UART_Transmit+0x40>
 80046be:	2302      	movs	r3, #2
 80046c0:	e074      	b.n	80047ac <HAL_UART_Transmit+0x12a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2221      	movs	r2, #33	; 0x21
 80046d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046d8:	f7fc fc94 	bl	8001004 <HAL_GetTick>
 80046dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ea:	e042      	b.n	8004772 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	d122      	bne.n	800474a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f850 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e046      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004730:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3302      	adds	r3, #2
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	e017      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3301      	adds	r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	e013      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f82d 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e023      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	60ba      	str	r2, [r7, #8]
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1b7      	bne.n	80046ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2200      	movs	r2, #0
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f814 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e00a      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c4:	e02c      	b.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d028      	beq.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d4:	f7fc fc16 	bl	8001004 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d21d      	bcs.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e00f      	b.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	d0c3      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004848:	b5b0      	push	{r4, r5, r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004888:	f023 030c 	bic.w	r3, r3, #12
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	430b      	orrs	r3, r1
 8004894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b4:	f040 80e4 	bne.w	8004a80 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4aab      	ldr	r2, [pc, #684]	; (8004b6c <UART_SetConfig+0x324>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <UART_SetConfig+0x84>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4aaa      	ldr	r2, [pc, #680]	; (8004b70 <UART_SetConfig+0x328>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d16c      	bne.n	80049a6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80048cc:	f7fe f92a 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009a      	lsls	r2, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	4aa3      	ldr	r2, [pc, #652]	; (8004b74 <UART_SetConfig+0x32c>)
 80048e8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	011c      	lsls	r4, r3, #4
 80048f0:	f7fe f918 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009a      	lsls	r2, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fbb2 f5f3 	udiv	r5, r2, r3
 800490a:	f7fe f90b 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800490e:	4602      	mov	r2, r0
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009a      	lsls	r2, r3, #2
 8004918:	441a      	add	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	4a93      	ldr	r2, [pc, #588]	; (8004b74 <UART_SetConfig+0x32c>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	2264      	movs	r2, #100	; 0x64
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	1aeb      	subs	r3, r5, r3
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	3332      	adds	r3, #50	; 0x32
 8004938:	4a8e      	ldr	r2, [pc, #568]	; (8004b74 <UART_SetConfig+0x32c>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004946:	441c      	add	r4, r3
 8004948:	f7fe f8ec 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800494c:	4602      	mov	r2, r0
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009a      	lsls	r2, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004962:	f7fe f8df 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004966:	4602      	mov	r2, r0
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	009a      	lsls	r2, r3, #2
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	4a7d      	ldr	r2, [pc, #500]	; (8004b74 <UART_SetConfig+0x32c>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2264      	movs	r2, #100	; 0x64
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	1aeb      	subs	r3, r5, r3
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	3332      	adds	r3, #50	; 0x32
 8004990:	4a78      	ldr	r2, [pc, #480]	; (8004b74 <UART_SetConfig+0x32c>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	f003 0207 	and.w	r2, r3, #7
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4422      	add	r2, r4
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	e154      	b.n	8004c50 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80049a6:	f7fe f8a9 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009a      	lsls	r2, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	4a6c      	ldr	r2, [pc, #432]	; (8004b74 <UART_SetConfig+0x32c>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	011c      	lsls	r4, r3, #4
 80049ca:	f7fe f897 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	009a      	lsls	r2, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80049e4:	f7fe f88a 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	009a      	lsls	r2, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	4a5d      	ldr	r2, [pc, #372]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	2264      	movs	r2, #100	; 0x64
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	1aeb      	subs	r3, r5, r3
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	3332      	adds	r3, #50	; 0x32
 8004a12:	4a58      	ldr	r2, [pc, #352]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a20:	441c      	add	r4, r3
 8004a22:	f7fe f86b 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009a      	lsls	r2, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a3c:	f7fe f85e 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009a      	lsls	r2, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	4a47      	ldr	r2, [pc, #284]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2264      	movs	r2, #100	; 0x64
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	1aeb      	subs	r3, r5, r3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	4a42      	ldr	r2, [pc, #264]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 0207 	and.w	r2, r3, #7
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4422      	add	r2, r4
 8004a7c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004a7e:	e0e7      	b.n	8004c50 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a39      	ldr	r2, [pc, #228]	; (8004b6c <UART_SetConfig+0x324>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <UART_SetConfig+0x24c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a38      	ldr	r2, [pc, #224]	; (8004b70 <UART_SetConfig+0x328>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d171      	bne.n	8004b78 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a94:	f7fe f846 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009a      	lsls	r2, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <UART_SetConfig+0x32c>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	011c      	lsls	r4, r3, #4
 8004ab8:	f7fe f834 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009a      	lsls	r2, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ad2:	f7fe f827 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <UART_SetConfig+0x32c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2264      	movs	r2, #100	; 0x64
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	1aeb      	subs	r3, r5, r3
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	3332      	adds	r3, #50	; 0x32
 8004b00:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0c:	441c      	add	r4, r3
 8004b0e:	f7fe f809 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b28:	f7fd fffc 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	009a      	lsls	r2, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	2264      	movs	r2, #100	; 0x64
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	1aeb      	subs	r3, r5, r3
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	3332      	adds	r3, #50	; 0x32
 8004b56:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4422      	add	r2, r4
 8004b68:	609a      	str	r2, [r3, #8]
 8004b6a:	e071      	b.n	8004c50 <UART_SetConfig+0x408>
 8004b6c:	40011000 	.word	0x40011000
 8004b70:	40011400 	.word	0x40011400
 8004b74:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b78:	f7fd ffc0 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009a      	lsls	r2, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	4a31      	ldr	r2, [pc, #196]	; (8004c58 <UART_SetConfig+0x410>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	011c      	lsls	r4, r3, #4
 8004b9c:	f7fd ffae 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009a      	lsls	r2, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bb6:	f7fd ffa1 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009a      	lsls	r2, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <UART_SetConfig+0x410>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2264      	movs	r2, #100	; 0x64
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	1aeb      	subs	r3, r5, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <UART_SetConfig+0x410>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	441c      	add	r4, r3
 8004bf2:	f7fd ff83 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009a      	lsls	r2, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c0c:	f7fd ff76 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009a      	lsls	r2, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <UART_SetConfig+0x410>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	2264      	movs	r2, #100	; 0x64
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
 8004c34:	1aeb      	subs	r3, r5, r3
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	3332      	adds	r3, #50	; 0x32
 8004c3a:	4a07      	ldr	r2, [pc, #28]	; (8004c58 <UART_SetConfig+0x410>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	f003 020f 	and.w	r2, r3, #15
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4422      	add	r2, r4
 8004c4c:	609a      	str	r2, [r3, #8]
}
 8004c4e:	e7ff      	b.n	8004c50 <UART_SetConfig+0x408>
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bdb0      	pop	{r4, r5, r7, pc}
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <drive_init>:
//drive_init
// 走行系の変数の初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
	MF.FLAGS = 0;
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <drive_init+0x14>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	801a      	strh	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	20000fac 	.word	0x20000fac

08004c74 <drive_ready>:
//drive_ready
// 走行前のLED点滅&ジャイロのドリフト計算
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_ready(void){
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
	  while(ad_fl <= WALL_BASE_FL){
 8004c78:	e00f      	b.n	8004c9a <drive_ready+0x26>
		  led_write(1, 1, 1);
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	2001      	movs	r0, #1
 8004c80:	f00a fa28 	bl	800f0d4 <led_write>
		  HAL_Delay(200);
 8004c84:	20c8      	movs	r0, #200	; 0xc8
 8004c86:	f7fc f9c9 	bl	800101c <HAL_Delay>
		  led_write(0, 0, 0);
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	2000      	movs	r0, #0
 8004c90:	f00a fa20 	bl	800f0d4 <led_write>
		  HAL_Delay(200);
 8004c94:	20c8      	movs	r0, #200	; 0xc8
 8004c96:	f7fc f9c1 	bl	800101c <HAL_Delay>
	  while(ad_fl <= WALL_BASE_FL){
 8004c9a:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <drive_ready+0x48>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2bc8      	cmp	r3, #200	; 0xc8
 8004ca0:	d9eb      	bls.n	8004c7a <drive_ready+0x6>
	  }
	  gyro_drift_flag = 1;
 8004ca2:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <drive_ready+0x4c>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(2000);
 8004ca8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004cac:	f7fc f9b6 	bl	800101c <HAL_Delay>
	  degree_z = 0;
 8004cb0:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <drive_ready+0x50>)
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
}
 8004cb8:	bf00      	nop
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20000d9c 	.word	0x20000d9c
 8004cc0:	20000adc 	.word	0x20000adc
 8004cc4:	20000b9c 	.word	0x20000b9c

08004cc8 <drive_start>:
//drive_start
// 走行開始前に走行距離と機体角度を初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//走行距離の初期化
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	4a0e      	ldr	r2, [pc, #56]	; (8004d0c <drive_start+0x44>)
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	4a0e      	ldr	r2, [pc, #56]	; (8004d10 <drive_start+0x48>)
 8004cd6:	6013      	str	r3, [r2, #0]
	if(H_accel_flag == 0) target_speed_l = target_speed_r = 0;		//モータ出力の初期化
 8004cd8:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <drive_start+0x4c>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d105      	bne.n	8004cec <drive_start+0x24>
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	4a0c      	ldr	r2, [pc, #48]	; (8004d18 <drive_start+0x50>)
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	4a0c      	ldr	r2, [pc, #48]	; (8004d1c <drive_start+0x54>)
 8004cea:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8004cec:	4a0c      	ldr	r2, [pc, #48]	; (8004d20 <drive_start+0x58>)
 8004cee:	8813      	ldrh	r3, [r2, #0]
 8004cf0:	f043 0302 	orr.w	r3, r3, #2
 8004cf4:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8004cf6:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <drive_start+0x58>)
 8004cf8:	8813      	ldrh	r3, [r2, #0]
 8004cfa:	f043 0304 	orr.w	r3, r3, #4
 8004cfe:	8013      	strh	r3, [r2, #0]
}
 8004d00:	bf00      	nop
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20000b2c 	.word	0x20000b2c
 8004d10:	20001608 	.word	0x20001608
 8004d14:	20000301 	.word	0x20000301
 8004d18:	200001d8 	.word	0x200001d8
 8004d1c:	20000c44 	.word	0x20000c44
 8004d20:	20000fac 	.word	0x20000fac

08004d24 <drive_stop>:
//drive_stop
// 走行を終了する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <drive_stop+0x3c>)
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4a0c      	ldr	r2, [pc, #48]	; (8004d64 <drive_stop+0x40>)
 8004d32:	6013      	str	r3, [r2, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	4a0b      	ldr	r2, [pc, #44]	; (8004d68 <drive_stop+0x44>)
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	4a0b      	ldr	r2, [pc, #44]	; (8004d6c <drive_stop+0x48>)
 8004d3e:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 0;
 8004d40:	4a0b      	ldr	r2, [pc, #44]	; (8004d70 <drive_stop+0x4c>)
 8004d42:	8813      	ldrh	r3, [r2, #0]
 8004d44:	f36f 0341 	bfc	r3, #1, #1
 8004d48:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 0;
 8004d4a:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <drive_stop+0x4c>)
 8004d4c:	8813      	ldrh	r3, [r2, #0]
 8004d4e:	f36f 0382 	bfc	r3, #2, #1
 8004d52:	8013      	strh	r3, [r2, #0]
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000b2c 	.word	0x20000b2c
 8004d64:	20001608 	.word	0x20001608
 8004d68:	200007b8 	.word	0x200007b8
 8004d6c:	20000be8 	.word	0x20000be8
 8004d70:	20000fac 	.word	0x20000fac

08004d74 <control_start>:
//control_start
// wallとgyroの姿勢制御を開始する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_start(){
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004d78:	4a07      	ldr	r2, [pc, #28]	; (8004d98 <control_start+0x24>)
 8004d7a:	8813      	ldrh	r3, [r2, #0]
 8004d7c:	f043 0308 	orr.w	r3, r3, #8
 8004d80:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004d82:	4a05      	ldr	r2, [pc, #20]	; (8004d98 <control_start+0x24>)
 8004d84:	8813      	ldrh	r3, [r2, #0]
 8004d86:	f043 0310 	orr.w	r3, r3, #16
 8004d8a:	8013      	strh	r3, [r2, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	20000fac 	.word	0x20000fac

08004d9c <control_stop>:
//control_stop
// wallとgyroの姿勢制御を停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_stop(){
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 0;										//wall制御を無効にする
 8004da0:	4a07      	ldr	r2, [pc, #28]	; (8004dc0 <control_stop+0x24>)
 8004da2:	8813      	ldrh	r3, [r2, #0]
 8004da4:	f36f 03c3 	bfc	r3, #3, #1
 8004da8:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 0;										//gyro制御を無効にする
 8004daa:	4a05      	ldr	r2, [pc, #20]	; (8004dc0 <control_stop+0x24>)
 8004dac:	8813      	ldrh	r3, [r2, #0]
 8004dae:	f36f 1304 	bfc	r3, #4, #1
 8004db2:	8013      	strh	r3, [r2, #0]
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000fac 	.word	0x20000fac

08004dc4 <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
// 引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
// 戻り値: なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	460a      	mov	r2, r1
 8004dce:	71fb      	strb	r3, [r7, #7]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d13e      	bne.n	8004e58 <drive_dir+0x94>
		if(dir == 0){
 8004dda:	79bb      	ldrb	r3, [r7, #6]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10f      	bne.n	8004e00 <drive_dir+0x3c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004de0:	2201      	movs	r2, #1
 8004de2:	2120      	movs	r1, #32
 8004de4:	483f      	ldr	r0, [pc, #252]	; (8004ee4 <drive_dir+0x120>)
 8004de6:	f7fd fa8d 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 8004dea:	2200      	movs	r2, #0
 8004dec:	2110      	movs	r1, #16
 8004dee:	483d      	ldr	r0, [pc, #244]	; (8004ee4 <drive_dir+0x120>)
 8004df0:	f7fd fa88 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004df4:	2201      	movs	r2, #1
 8004df6:	2101      	movs	r1, #1
 8004df8:	483b      	ldr	r0, [pc, #236]	; (8004ee8 <drive_dir+0x124>)
 8004dfa:	f7fd fa83 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
		}
	}
}
 8004dfe:	e06c      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 1){
 8004e00:	79bb      	ldrb	r3, [r7, #6]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d10f      	bne.n	8004e26 <drive_dir+0x62>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	//L_CW
 8004e06:	2200      	movs	r2, #0
 8004e08:	2120      	movs	r1, #32
 8004e0a:	4836      	ldr	r0, [pc, #216]	; (8004ee4 <drive_dir+0x120>)
 8004e0c:	f7fd fa7a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e10:	2201      	movs	r2, #1
 8004e12:	2110      	movs	r1, #16
 8004e14:	4833      	ldr	r0, [pc, #204]	; (8004ee4 <drive_dir+0x120>)
 8004e16:	f7fd fa75 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	4832      	ldr	r0, [pc, #200]	; (8004ee8 <drive_dir+0x124>)
 8004e20:	f7fd fa70 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e24:	e059      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 2){
 8004e26:	79bb      	ldrb	r3, [r7, #6]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d10f      	bne.n	8004e4c <drive_dir+0x88>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	2120      	movs	r1, #32
 8004e30:	482c      	ldr	r0, [pc, #176]	; (8004ee4 <drive_dir+0x120>)
 8004e32:	f7fd fa67 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e36:	2201      	movs	r2, #1
 8004e38:	2110      	movs	r1, #16
 8004e3a:	482a      	ldr	r0, [pc, #168]	; (8004ee4 <drive_dir+0x120>)
 8004e3c:	f7fd fa62 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e40:	2201      	movs	r2, #1
 8004e42:	2101      	movs	r1, #1
 8004e44:	4828      	ldr	r0, [pc, #160]	; (8004ee8 <drive_dir+0x124>)
 8004e46:	f7fd fa5d 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e4a:	e046      	b.n	8004eda <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4825      	ldr	r0, [pc, #148]	; (8004ee8 <drive_dir+0x124>)
 8004e52:	f7fd fa57 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e56:	e040      	b.n	8004eda <drive_dir+0x116>
		if(dir == 0){
 8004e58:	79bb      	ldrb	r3, [r7, #6]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d110      	bne.n	8004e80 <drive_dir+0xbc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004e5e:	2201      	movs	r2, #1
 8004e60:	2102      	movs	r1, #2
 8004e62:	4821      	ldr	r0, [pc, #132]	; (8004ee8 <drive_dir+0x124>)
 8004e64:	f7fd fa4e 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e6e:	481e      	ldr	r0, [pc, #120]	; (8004ee8 <drive_dir+0x124>)
 8004e70:	f7fd fa48 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e74:	2201      	movs	r2, #1
 8004e76:	2101      	movs	r1, #1
 8004e78:	481b      	ldr	r0, [pc, #108]	; (8004ee8 <drive_dir+0x124>)
 8004e7a:	f7fd fa43 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e7e:	e02c      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 1){
 8004e80:	79bb      	ldrb	r3, [r7, #6]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d110      	bne.n	8004ea8 <drive_dir+0xe4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	//R_CW
 8004e86:	2200      	movs	r2, #0
 8004e88:	2102      	movs	r1, #2
 8004e8a:	4817      	ldr	r0, [pc, #92]	; (8004ee8 <drive_dir+0x124>)
 8004e8c:	f7fd fa3a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004e90:	2201      	movs	r2, #1
 8004e92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e96:	4814      	ldr	r0, [pc, #80]	; (8004ee8 <drive_dir+0x124>)
 8004e98:	f7fd fa34 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	4811      	ldr	r0, [pc, #68]	; (8004ee8 <drive_dir+0x124>)
 8004ea2:	f7fd fa2f 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ea6:	e018      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 2){
 8004ea8:	79bb      	ldrb	r3, [r7, #6]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d110      	bne.n	8004ed0 <drive_dir+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004eae:	2201      	movs	r2, #1
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	480d      	ldr	r0, [pc, #52]	; (8004ee8 <drive_dir+0x124>)
 8004eb4:	f7fd fa26 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ebe:	480a      	ldr	r0, [pc, #40]	; (8004ee8 <drive_dir+0x124>)
 8004ec0:	f7fd fa20 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4807      	ldr	r0, [pc, #28]	; (8004ee8 <drive_dir+0x124>)
 8004eca:	f7fd fa1b 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ece:	e004      	b.n	8004eda <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	4804      	ldr	r0, [pc, #16]	; (8004ee8 <drive_dir+0x124>)
 8004ed6:	f7fd fa15 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40020800 	.word	0x40020800
 8004ee8:	40020400 	.word	0x40020400

08004eec <driveA>:
//driveA
// 指定距離、指定加速度で加速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4623      	mov	r3, r4
 8004efc:	80fb      	strh	r3, [r7, #6]
 8004efe:	4603      	mov	r3, r0
 8004f00:	80bb      	strh	r3, [r7, #4]
 8004f02:	460b      	mov	r3, r1
 8004f04:	807b      	strh	r3, [r7, #2]
 8004f06:	4613      	mov	r3, r2
 8004f08:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 8004f0a:	88bb      	ldrh	r3, [r7, #4]
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f14:	4b25      	ldr	r3, [pc, #148]	; (8004fac <driveA+0xc0>)
 8004f16:	edc3 7a00 	vstr	s15, [r3]
 8004f1a:	4b25      	ldr	r3, [pc, #148]	; (8004fb0 <driveA+0xc4>)
 8004f1c:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8004f20:	887b      	ldrh	r3, [r7, #2]
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2a:	4b22      	ldr	r3, [pc, #136]	; (8004fb4 <driveA+0xc8>)
 8004f2c:	edc3 7a00 	vstr	s15, [r3]
 8004f30:	4b21      	ldr	r3, [pc, #132]	; (8004fb8 <driveA+0xcc>)
 8004f32:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	ee07 3a90 	vmov	s15, r3
 8004f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f40:	4b1e      	ldr	r3, [pc, #120]	; (8004fbc <driveA+0xd0>)
 8004f42:	edc3 7a00 	vstr	s15, [r3]
 8004f46:	4b1e      	ldr	r3, [pc, #120]	; (8004fc0 <driveA+0xd4>)
 8004f48:	edc3 7a00 	vstr	s15, [r3]
	if(H_accel_flag == 1)target_speed_l = target_speed_r = speed_min_p;
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <driveA+0xd8>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d10a      	bne.n	8004f6a <driveA+0x7e>
 8004f54:	88bb      	ldrh	r3, [r7, #4]
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5e:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <driveA+0xdc>)
 8004f60:	edc3 7a00 	vstr	s15, [r3]
 8004f64:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <driveA+0xe0>)
 8004f66:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//走行開始
 8004f6a:	f7ff fead 	bl	8004cc8 <drive_start>

	//----走行----
	while((dist_l < dist) || (dist_r < dist));				//左右のモータが指定距離以上進むまで待機
 8004f6e:	bf00      	nop
 8004f70:	883b      	ldrh	r3, [r7, #0]
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f7a:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <driveA+0xe4>)
 8004f7c:	edd3 7a00 	vldr	s15, [r3]
 8004f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f88:	dcf2      	bgt.n	8004f70 <driveA+0x84>
 8004f8a:	883b      	ldrh	r3, [r7, #0]
 8004f8c:	ee07 3a90 	vmov	s15, r3
 8004f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f94:	4b0f      	ldr	r3, [pc, #60]	; (8004fd4 <driveA+0xe8>)
 8004f96:	edd3 7a00 	vldr	s15, [r3]
 8004f9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa2:	dce5      	bgt.n	8004f70 <driveA+0x84>

//	drive_stop();
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd90      	pop	{r4, r7, pc}
 8004fac:	20000fb0 	.word	0x20000fb0
 8004fb0:	20000b94 	.word	0x20000b94
 8004fb4:	200001dc 	.word	0x200001dc
 8004fb8:	200007b4 	.word	0x200007b4
 8004fbc:	20000b20 	.word	0x20000b20
 8004fc0:	20000da0 	.word	0x20000da0
 8004fc4:	20000301 	.word	0x20000301
 8004fc8:	200001d8 	.word	0x200001d8
 8004fcc:	20000c44 	.word	0x20000c44
 8004fd0:	20001608 	.word	0x20001608
 8004fd4:	20000b2c 	.word	0x20000b2c

08004fd8 <driveD>:
//driveD
// 指定距離、指定減速度で減速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004fd8:	b590      	push	{r4, r7, lr}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4604      	mov	r4, r0
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4623      	mov	r3, r4
 8004fe8:	80fb      	strh	r3, [r7, #6]
 8004fea:	4603      	mov	r3, r0
 8004fec:	80bb      	strh	r3, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	807b      	strh	r3, [r7, #2]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	803b      	strh	r3, [r7, #0]

	float speed_0 = (speed_l + speed_r) / 2;								//等速走行距離を計算するためにmain.cより参照
 8004ff6:	4b58      	ldr	r3, [pc, #352]	; (8005158 <driveD+0x180>)
 8004ff8:	ed93 7a00 	vldr	s14, [r3]
 8004ffc:	4b57      	ldr	r3, [pc, #348]	; (800515c <driveD+0x184>)
 8004ffe:	edd3 7a00 	vldr	s15, [r3]
 8005002:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005006:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800500a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800500e:	edc7 7a03 	vstr	s15, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 8005012:	88bb      	ldrh	r3, [r7, #4]
 8005014:	ee07 3a90 	vmov	s15, r3
 8005018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501c:	4b50      	ldr	r3, [pc, #320]	; (8005160 <driveD+0x188>)
 800501e:	edc3 7a00 	vstr	s15, [r3]
 8005022:	4b50      	ldr	r3, [pc, #320]	; (8005164 <driveD+0x18c>)
 8005024:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8005028:	887b      	ldrh	r3, [r7, #2]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	4b4d      	ldr	r3, [pc, #308]	; (8005168 <driveD+0x190>)
 8005034:	edc3 7a00 	vstr	s15, [r3]
 8005038:	4b4c      	ldr	r3, [pc, #304]	; (800516c <driveD+0x194>)
 800503a:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 800503e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800504a:	4b49      	ldr	r3, [pc, #292]	; (8005170 <driveD+0x198>)
 800504c:	edc3 7a00 	vstr	s15, [r3]
 8005050:	4b48      	ldr	r3, [pc, #288]	; (8005174 <driveD+0x19c>)
 8005052:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//等速走行距離 = 総距離 - 減速に必要な距離
 8005056:	883b      	ldrh	r3, [r7, #0]
 8005058:	ee07 3a90 	vmov	s15, r3
 800505c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005060:	4b40      	ldr	r3, [pc, #256]	; (8005164 <driveD+0x18c>)
 8005062:	edd3 6a00 	vldr	s13, [r3]
 8005066:	4b3f      	ldr	r3, [pc, #252]	; (8005164 <driveD+0x18c>)
 8005068:	edd3 7a00 	vldr	s15, [r3]
 800506c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005070:	ed97 6a03 	vldr	s12, [r7, #12]
 8005074:	edd7 7a03 	vldr	s15, [r7, #12]
 8005078:	ee66 7a27 	vmul.f32	s15, s12, s15
 800507c:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005080:	4b3c      	ldr	r3, [pc, #240]	; (8005174 <driveD+0x19c>)
 8005082:	edd3 7a00 	vldr	s15, [r3]
 8005086:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800508a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800508e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005096:	ee17 3a90 	vmov	r3, s15
 800509a:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 800509c:	f04f 0300 	mov.w	r3, #0
 80050a0:	4a33      	ldr	r2, [pc, #204]	; (8005170 <driveD+0x198>)
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	4a33      	ldr	r2, [pc, #204]	; (8005174 <driveD+0x19c>)
 80050a6:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	4a32      	ldr	r2, [pc, #200]	; (8005178 <driveD+0x1a0>)
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	4a32      	ldr	r2, [pc, #200]	; (800517c <driveD+0x1a4>)
 80050b2:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 80050b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	dd1c      	ble.n	80050f6 <driveD+0x11e>
		//----等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));	//a左右のモータが等速分の距離以上進むまで待機
 80050bc:	bf00      	nop
 80050be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050ca:	4b2c      	ldr	r3, [pc, #176]	; (800517c <driveD+0x1a4>)
 80050cc:	edd3 7a00 	vldr	s15, [r3]
 80050d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d8:	dcf1      	bgt.n	80050be <driveD+0xe6>
 80050da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050e6:	4b24      	ldr	r3, [pc, #144]	; (8005178 <driveD+0x1a0>)
 80050e8:	edd3 7a00 	vldr	s15, [r3]
 80050ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f4:	dce3      	bgt.n	80050be <driveD+0xe6>
	}
	accel_l = accel_r = accel_p;
 80050f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005102:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <driveD+0x198>)
 8005104:	edc3 7a00 	vstr	s15, [r3]
 8005108:	4b1a      	ldr	r3, [pc, #104]	; (8005174 <driveD+0x19c>)
 800510a:	edc3 7a00 	vstr	s15, [r3]
	//----減速走行----
	while((dist_l < dist) || (dist_r < dist));			//a左右のモータが減速分の距離以上進むまで待機
 800510e:	bf00      	nop
 8005110:	883b      	ldrh	r3, [r7, #0]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800511a:	4b18      	ldr	r3, [pc, #96]	; (800517c <driveD+0x1a4>)
 800511c:	edd3 7a00 	vldr	s15, [r3]
 8005120:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005128:	dcf2      	bgt.n	8005110 <driveD+0x138>
 800512a:	883b      	ldrh	r3, [r7, #0]
 800512c:	ee07 3a90 	vmov	s15, r3
 8005130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005134:	4b10      	ldr	r3, [pc, #64]	; (8005178 <driveD+0x1a0>)
 8005136:	edd3 7a00 	vldr	s15, [r3]
 800513a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800513e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005142:	dce5      	bgt.n	8005110 <driveD+0x138>

	if(H_accel_flag != 1)drive_stop();											//走行停止
 8005144:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <driveD+0x1a8>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d001      	beq.n	8005150 <driveD+0x178>
 800514c:	f7ff fdea 	bl	8004d24 <drive_stop>
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	bd90      	pop	{r4, r7, pc}
 8005158:	20000b30 	.word	0x20000b30
 800515c:	200002f4 	.word	0x200002f4
 8005160:	20000fb0 	.word	0x20000fb0
 8005164:	20000b94 	.word	0x20000b94
 8005168:	200001dc 	.word	0x200001dc
 800516c:	200007b4 	.word	0x200007b4
 8005170:	20000b20 	.word	0x20000b20
 8005174:	20000da0 	.word	0x20000da0
 8005178:	20000b2c 	.word	0x20000b2c
 800517c:	20001608 	.word	0x20001608
 8005180:	20000301 	.word	0x20000301

08005184 <driveU>:
//driveU
// 指定距離分等速走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	4603      	mov	r3, r0
 800518c:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;									//等速走行のため加速度は0
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	4a28      	ldr	r2, [pc, #160]	; (8005234 <driveU+0xb0>)
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	4a28      	ldr	r2, [pc, #160]	; (8005238 <driveU+0xb4>)
 8005198:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	4a27      	ldr	r2, [pc, #156]	; (800523c <driveU+0xb8>)
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	4a27      	ldr	r2, [pc, #156]	; (8005240 <driveU+0xbc>)
 80051a4:	6013      	str	r3, [r2, #0]

	//----走行----
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 80051a6:	e024      	b.n	80051f2 <driveU+0x6e>
		if(MF.FLAG.WEDGE == 1){
 80051a8:	4b26      	ldr	r3, [pc, #152]	; (8005244 <driveU+0xc0>)
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d11d      	bne.n	80051f2 <driveU+0x6e>
			if(ad_l < WALL_BASE_L-30 || ad_r < WALL_BASE_R-10){
 80051b6:	4b24      	ldr	r3, [pc, #144]	; (8005248 <driveU+0xc4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b6d      	cmp	r3, #109	; 0x6d
 80051bc:	d903      	bls.n	80051c6 <driveU+0x42>
 80051be:	4b23      	ldr	r3, [pc, #140]	; (800524c <driveU+0xc8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b6d      	cmp	r3, #109	; 0x6d
 80051c4:	d815      	bhi.n	80051f2 <driveU+0x6e>
				while((dist_l < W_DIST) || (dist_r < W_DIST));	//左右のモータが壁切れ用指定距離以上進むまで待機
 80051c6:	bf00      	nop
 80051c8:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <driveU+0xbc>)
 80051ca:	edd3 7a00 	vldr	s15, [r3]
 80051ce:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005250 <driveU+0xcc>
 80051d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051da:	d4f5      	bmi.n	80051c8 <driveU+0x44>
 80051dc:	4b17      	ldr	r3, [pc, #92]	; (800523c <driveU+0xb8>)
 80051de:	edd3 7a00 	vldr	s15, [r3]
 80051e2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005250 <driveU+0xcc>
 80051e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ee:	d4eb      	bmi.n	80051c8 <driveU+0x44>
			break;
 80051f0:	e019      	b.n	8005226 <driveU+0xa2>
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	ee07 3a90 	vmov	s15, r3
 80051f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051fc:	4b10      	ldr	r3, [pc, #64]	; (8005240 <driveU+0xbc>)
 80051fe:	edd3 7a00 	vldr	s15, [r3]
 8005202:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520a:	dccd      	bgt.n	80051a8 <driveU+0x24>
 800520c:	88fb      	ldrh	r3, [r7, #6]
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005216:	4b09      	ldr	r3, [pc, #36]	; (800523c <driveU+0xb8>)
 8005218:	edd3 7a00 	vldr	s15, [r3]
 800521c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005224:	dcc0      	bgt.n	80051a8 <driveU+0x24>
			}
		}
	}
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	20000b20 	.word	0x20000b20
 8005238:	20000da0 	.word	0x20000da0
 800523c:	20000b2c 	.word	0x20000b2c
 8005240:	20001608 	.word	0x20001608
 8005244:	20000fac 	.word	0x20000fac
 8005248:	20000b3c 	.word	0x20000b3c
 800524c:	20000fa8 	.word	0x20000fa8
 8005250:	428c0000 	.word	0x428c0000

08005254 <driveC>:
//driveC
// 指定距離分デフォルト速度で走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	4603      	mov	r3, r0
 800525c:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 800525e:	4b19      	ldr	r3, [pc, #100]	; (80052c4 <driveC+0x70>)
 8005260:	4a19      	ldr	r2, [pc, #100]	; (80052c8 <driveC+0x74>)
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	4a19      	ldr	r2, [pc, #100]	; (80052cc <driveC+0x78>)
 8005266:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 150;
 8005268:	4b16      	ldr	r3, [pc, #88]	; (80052c4 <driveC+0x70>)
 800526a:	4a19      	ldr	r2, [pc, #100]	; (80052d0 <driveC+0x7c>)
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	4a19      	ldr	r2, [pc, #100]	; (80052d4 <driveC+0x80>)
 8005270:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;												//等速走行のため加速度は0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	4a18      	ldr	r2, [pc, #96]	; (80052d8 <driveC+0x84>)
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	4a18      	ldr	r2, [pc, #96]	; (80052dc <driveC+0x88>)
 800527c:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 800527e:	f7ff fd23 	bl	8004cc8 <drive_start>
	//====回転====
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが定速分の距離以上進むまで待機
 8005282:	bf00      	nop
 8005284:	88fb      	ldrh	r3, [r7, #6]
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800528e:	4b14      	ldr	r3, [pc, #80]	; (80052e0 <driveC+0x8c>)
 8005290:	edd3 7a00 	vldr	s15, [r3]
 8005294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529c:	dcf2      	bgt.n	8005284 <driveC+0x30>
 800529e:	88fb      	ldrh	r3, [r7, #6]
 80052a0:	ee07 3a90 	vmov	s15, r3
 80052a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052a8:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <driveC+0x90>)
 80052aa:	edd3 7a00 	vldr	s15, [r3]
 80052ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b6:	dce5      	bgt.n	8005284 <driveC+0x30>

	drive_stop();											//走行停止
 80052b8:	f7ff fd34 	bl	8004d24 <drive_stop>
}
 80052bc:	bf00      	nop
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	43160000 	.word	0x43160000
 80052c8:	20000fb0 	.word	0x20000fb0
 80052cc:	20000b94 	.word	0x20000b94
 80052d0:	200001dc 	.word	0x200001dc
 80052d4:	200007b4 	.word	0x200007b4
 80052d8:	20000b20 	.word	0x20000b20
 80052dc:	20000da0 	.word	0x20000da0
 80052e0:	20001608 	.word	0x20001608
 80052e4:	20000b2c 	.word	0x20000b2c

080052e8 <driveC2>:
//driveC2
//a指定距離分デフォルト逆回転速度で走行して停止する
//a引数1：dist …… 走行距離
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC2(uint16_t dist){
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = -250;
 80052f2:	4b1a      	ldr	r3, [pc, #104]	; (800535c <driveC2+0x74>)
 80052f4:	4a1a      	ldr	r2, [pc, #104]	; (8005360 <driveC2+0x78>)
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	4a1a      	ldr	r2, [pc, #104]	; (8005364 <driveC2+0x7c>)
 80052fa:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = -250;
 80052fc:	4b17      	ldr	r3, [pc, #92]	; (800535c <driveC2+0x74>)
 80052fe:	4a1a      	ldr	r2, [pc, #104]	; (8005368 <driveC2+0x80>)
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	4a1a      	ldr	r2, [pc, #104]	; (800536c <driveC2+0x84>)
 8005304:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;									//a等速走行のため加速度は0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	4a19      	ldr	r2, [pc, #100]	; (8005370 <driveC2+0x88>)
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	4a19      	ldr	r2, [pc, #100]	; (8005374 <driveC2+0x8c>)
 8005310:	6013      	str	r3, [r2, #0]

	drive_start();											//a走行開始
 8005312:	f7ff fcd9 	bl	8004cc8 <drive_start>
	//====a回転====
	while((dist_l > (-1*dist)) || (dist_r > (-1*dist)));	//a左右のモータが定速分の逆走距離以上進むまで待機
 8005316:	bf00      	nop
 8005318:	88fb      	ldrh	r3, [r7, #6]
 800531a:	425b      	negs	r3, r3
 800531c:	ee07 3a90 	vmov	s15, r3
 8005320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005324:	4b14      	ldr	r3, [pc, #80]	; (8005378 <driveC2+0x90>)
 8005326:	edd3 7a00 	vldr	s15, [r3]
 800532a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800532e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005332:	d4f1      	bmi.n	8005318 <driveC2+0x30>
 8005334:	88fb      	ldrh	r3, [r7, #6]
 8005336:	425b      	negs	r3, r3
 8005338:	ee07 3a90 	vmov	s15, r3
 800533c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005340:	4b0e      	ldr	r3, [pc, #56]	; (800537c <driveC2+0x94>)
 8005342:	edd3 7a00 	vldr	s15, [r3]
 8005346:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800534a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534e:	d4e3      	bmi.n	8005318 <driveC2+0x30>

	drive_stop();											//a走行停止
 8005350:	f7ff fce8 	bl	8004d24 <drive_stop>
}
 8005354:	bf00      	nop
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	c37a0000 	.word	0xc37a0000
 8005360:	20000fb0 	.word	0x20000fb0
 8005364:	20000b94 	.word	0x20000b94
 8005368:	200001dc 	.word	0x200001dc
 800536c:	200007b4 	.word	0x200007b4
 8005370:	20000b20 	.word	0x20000b20
 8005374:	20000da0 	.word	0x20000da0
 8005378:	20001608 	.word	0x20001608
 800537c:	20000b2c 	.word	0x20000b2c

08005380 <slalomF>:
//slalomF
//aスラロームの前オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomF(int16_t accel_p, int16_t speed_p, uint8_t dist_p, uint16_t wall_fl, uint16_t wall_fr){
 8005380:	b590      	push	{r4, r7, lr}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	4604      	mov	r4, r0
 8005388:	4608      	mov	r0, r1
 800538a:	4611      	mov	r1, r2
 800538c:	461a      	mov	r2, r3
 800538e:	4623      	mov	r3, r4
 8005390:	80fb      	strh	r3, [r7, #6]
 8005392:	4603      	mov	r3, r0
 8005394:	80bb      	strh	r3, [r7, #4]
 8005396:	460b      	mov	r3, r1
 8005398:	70fb      	strb	r3, [r7, #3]
 800539a:	4613      	mov	r3, r2
 800539c:	803b      	strh	r3, [r7, #0]
	MF.FLAG.GYRO = 0;
 800539e:	4a2d      	ldr	r2, [pc, #180]	; (8005454 <slalomF+0xd4>)
 80053a0:	8813      	ldrh	r3, [r2, #0]
 80053a2:	f36f 2308 	bfc	r3, #8, #1
 80053a6:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80053a8:	4a2a      	ldr	r2, [pc, #168]	; (8005454 <slalomF+0xd4>)
 80053aa:	8813      	ldrh	r3, [r2, #0]
 80053ac:	f043 0304 	orr.w	r3, r3, #4
 80053b0:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 80053b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053be:	4b26      	ldr	r3, [pc, #152]	; (8005458 <slalomF+0xd8>)
 80053c0:	edc3 7a00 	vstr	s15, [r3]
 80053c4:	4b25      	ldr	r3, [pc, #148]	; (800545c <slalomF+0xdc>)
 80053c6:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 80053ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053d6:	4b22      	ldr	r3, [pc, #136]	; (8005460 <slalomF+0xe0>)
 80053d8:	edc3 7a00 	vstr	s15, [r3]
 80053dc:	4b21      	ldr	r3, [pc, #132]	; (8005464 <slalomF+0xe4>)
 80053de:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 80053e2:	f7ff fcc7 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	4a1f      	ldr	r2, [pc, #124]	; (8005468 <slalomF+0xe8>)
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	4a1f      	ldr	r2, [pc, #124]	; (800546c <slalomF+0xec>)
 80053f0:	6013      	str	r3, [r2, #0]
//	while(dist_l < SLALOM_H_OFFSET_F && dist_r < SLALOM_H_OFFSET_F);
	while(dist_l < dist_p && dist_r < dist_p){
 80053f2:	e00d      	b.n	8005410 <slalomF+0x90>
		if(ad_fl > wall_fl && ad_fr > wall_fr){
 80053f4:	883a      	ldrh	r2, [r7, #0]
 80053f6:	4b1e      	ldr	r3, [pc, #120]	; (8005470 <slalomF+0xf0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d208      	bcs.n	8005410 <slalomF+0x90>
 80053fe:	8b3a      	ldrh	r2, [r7, #24]
 8005400:	4b1c      	ldr	r3, [pc, #112]	; (8005474 <slalomF+0xf4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d203      	bcs.n	8005410 <slalomF+0x90>
			full_led_write(RED);
 8005408:	2001      	movs	r0, #1
 800540a:	f009 fe9d 	bl	800f148 <full_led_write>
			break;
 800540e:	e019      	b.n	8005444 <slalomF+0xc4>
	while(dist_l < dist_p && dist_r < dist_p){
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800541a:	4b14      	ldr	r3, [pc, #80]	; (800546c <slalomF+0xec>)
 800541c:	edd3 7a00 	vldr	s15, [r3]
 8005420:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005428:	dd0c      	ble.n	8005444 <slalomF+0xc4>
 800542a:	78fb      	ldrb	r3, [r7, #3]
 800542c:	ee07 3a90 	vmov	s15, r3
 8005430:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005434:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <slalomF+0xe8>)
 8005436:	edd3 7a00 	vldr	s15, [r3]
 800543a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800543e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005442:	dcd7      	bgt.n	80053f4 <slalomF+0x74>
		}
	}
	drive_stop();
 8005444:	f7ff fc6e 	bl	8004d24 <drive_stop>
	control_stop();
 8005448:	f7ff fca8 	bl	8004d9c <control_stop>
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	bd90      	pop	{r4, r7, pc}
 8005454:	20000fac 	.word	0x20000fac
 8005458:	20000b20 	.word	0x20000b20
 800545c:	20000da0 	.word	0x20000da0
 8005460:	200001dc 	.word	0x200001dc
 8005464:	200007b4 	.word	0x200007b4
 8005468:	20000b2c 	.word	0x20000b2c
 800546c:	20001608 	.word	0x20001608
 8005470:	20000d9c 	.word	0x20000d9c
 8005474:	20000c48 	.word	0x20000c48

08005478 <slalomR>:
//slalomR
//aスラロームの旋回部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomR(int16_t degaccel_p, int16_t omega_p, int16_t degree_p, int16_t speed_p){
 8005478:	b490      	push	{r4, r7}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	4604      	mov	r4, r0
 8005480:	4608      	mov	r0, r1
 8005482:	4611      	mov	r1, r2
 8005484:	461a      	mov	r2, r3
 8005486:	4623      	mov	r3, r4
 8005488:	80fb      	strh	r3, [r7, #6]
 800548a:	4603      	mov	r3, r0
 800548c:	80bb      	strh	r3, [r7, #4]
 800548e:	460b      	mov	r3, r1
 8005490:	807b      	strh	r3, [r7, #2]
 8005492:	4613      	mov	r3, r2
 8005494:	803b      	strh	r3, [r7, #0]
	MF.FLAG.GYRO = 1;
 8005496:	4a82      	ldr	r2, [pc, #520]	; (80056a0 <slalomR+0x228>)
 8005498:	8813      	ldrh	r3, [r2, #0]
 800549a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549e:	8013      	strh	r3, [r2, #0]
	target_degaccel_z = degaccel_p;
 80054a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054a4:	ee07 3a90 	vmov	s15, r3
 80054a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054ac:	4b7d      	ldr	r3, [pc, #500]	; (80056a4 <slalomR+0x22c>)
 80054ae:	edc3 7a00 	vstr	s15, [r3]
	target_omega_z = 0;
 80054b2:	4b7d      	ldr	r3, [pc, #500]	; (80056a8 <slalomR+0x230>)
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
	speed_G = speed_p;
 80054ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054c6:	4b79      	ldr	r3, [pc, #484]	; (80056ac <slalomR+0x234>)
 80054c8:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_degree;

	if(omega_p < 0){
 80054cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	da1f      	bge.n	8005514 <slalomR+0x9c>
		omega_min = omega_p;
 80054d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054d8:	ee07 3a90 	vmov	s15, r3
 80054dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054e0:	4b73      	ldr	r3, [pc, #460]	; (80056b0 <slalomR+0x238>)
 80054e2:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_min * omega_min / target_degaccel_z / 2;
 80054e6:	4b72      	ldr	r3, [pc, #456]	; (80056b0 <slalomR+0x238>)
 80054e8:	ed93 7a00 	vldr	s14, [r3]
 80054ec:	4b70      	ldr	r3, [pc, #448]	; (80056b0 <slalomR+0x238>)
 80054ee:	edd3 7a00 	vldr	s15, [r3]
 80054f2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80054f6:	4b6b      	ldr	r3, [pc, #428]	; (80056a4 <slalomR+0x22c>)
 80054f8:	edd3 7a00 	vldr	s15, [r3]
 80054fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005500:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005504:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800550c:	ee17 3a90 	vmov	r3, s15
 8005510:	81fb      	strh	r3, [r7, #14]
 8005512:	e01e      	b.n	8005552 <slalomR+0xda>
	}else{
		omega_max = omega_p;
 8005514:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005518:	ee07 3a90 	vmov	s15, r3
 800551c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005520:	4b64      	ldr	r3, [pc, #400]	; (80056b4 <slalomR+0x23c>)
 8005522:	edc3 7a00 	vstr	s15, [r3]
		c_degree =  omega_max * omega_max / target_degaccel_z / 2;
 8005526:	4b63      	ldr	r3, [pc, #396]	; (80056b4 <slalomR+0x23c>)
 8005528:	ed93 7a00 	vldr	s14, [r3]
 800552c:	4b61      	ldr	r3, [pc, #388]	; (80056b4 <slalomR+0x23c>)
 800552e:	edd3 7a00 	vldr	s15, [r3]
 8005532:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005536:	4b5b      	ldr	r3, [pc, #364]	; (80056a4 <slalomR+0x22c>)
 8005538:	edd3 7a00 	vldr	s15, [r3]
 800553c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005540:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005544:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005548:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800554c:	ee17 3a90 	vmov	r3, s15
 8005550:	81fb      	strh	r3, [r7, #14]
	}

	MF.FLAG.DRV = 1;
 8005552:	4a53      	ldr	r2, [pc, #332]	; (80056a0 <slalomR+0x228>)
 8005554:	8813      	ldrh	r3, [r2, #0]
 8005556:	f043 0302 	orr.w	r3, r3, #2
 800555a:	8013      	strh	r3, [r2, #0]
	if(omega_p < 0){
 800555c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	da14      	bge.n	800558e <slalomR+0x116>
		while(degree_z > target_degree_z+c_degree);
 8005564:	bf00      	nop
 8005566:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005572:	4b51      	ldr	r3, [pc, #324]	; (80056b8 <slalomR+0x240>)
 8005574:	edd3 7a00 	vldr	s15, [r3]
 8005578:	ee37 7a27 	vadd.f32	s14, s14, s15
 800557c:	4b4f      	ldr	r3, [pc, #316]	; (80056bc <slalomR+0x244>)
 800557e:	edd3 7a00 	vldr	s15, [r3]
 8005582:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800558a:	d4ec      	bmi.n	8005566 <slalomR+0xee>
 800558c:	e013      	b.n	80055b6 <slalomR+0x13e>
	}else{
		while(degree_z < target_degree_z+c_degree);
 800558e:	bf00      	nop
 8005590:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005594:	ee07 3a90 	vmov	s15, r3
 8005598:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800559c:	4b46      	ldr	r3, [pc, #280]	; (80056b8 <slalomR+0x240>)
 800559e:	edd3 7a00 	vldr	s15, [r3]
 80055a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055a6:	4b45      	ldr	r3, [pc, #276]	; (80056bc <slalomR+0x244>)
 80055a8:	edd3 7a00 	vldr	s15, [r3]
 80055ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b4:	dcec      	bgt.n	8005590 <slalomR+0x118>
	}

	target_degaccel_z = 0;
 80055b6:	4b3b      	ldr	r3, [pc, #236]	; (80056a4 <slalomR+0x22c>)
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]

	if(omega_p < 0){
 80055be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	da18      	bge.n	80055f8 <slalomR+0x180>
		while(degree_z > target_degree_z+(degree_p-c_degree-4));
 80055c6:	bf00      	nop
 80055c8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80055cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	3b04      	subs	r3, #4
 80055d4:	ee07 3a90 	vmov	s15, r3
 80055d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055dc:	4b36      	ldr	r3, [pc, #216]	; (80056b8 <slalomR+0x240>)
 80055de:	edd3 7a00 	vldr	s15, [r3]
 80055e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055e6:	4b35      	ldr	r3, [pc, #212]	; (80056bc <slalomR+0x244>)
 80055e8:	edd3 7a00 	vldr	s15, [r3]
 80055ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f4:	d4e8      	bmi.n	80055c8 <slalomR+0x150>
 80055f6:	e017      	b.n	8005628 <slalomR+0x1b0>
	}else{
		while(degree_z < target_degree_z+(degree_p-c_degree+4));
 80055f8:	bf00      	nop
 80055fa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80055fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	3304      	adds	r3, #4
 8005606:	ee07 3a90 	vmov	s15, r3
 800560a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800560e:	4b2a      	ldr	r3, [pc, #168]	; (80056b8 <slalomR+0x240>)
 8005610:	edd3 7a00 	vldr	s15, [r3]
 8005614:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005618:	4b28      	ldr	r3, [pc, #160]	; (80056bc <slalomR+0x244>)
 800561a:	edd3 7a00 	vldr	s15, [r3]
 800561e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005626:	dce8      	bgt.n	80055fa <slalomR+0x182>
	}

	target_degaccel_z = -degaccel_p;
 8005628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800562c:	425b      	negs	r3, r3
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005636:	4b1b      	ldr	r3, [pc, #108]	; (80056a4 <slalomR+0x22c>)
 8005638:	edc3 7a00 	vstr	s15, [r3]

	if(omega_p < 0){
 800563c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	da14      	bge.n	800566e <slalomR+0x1f6>
		while(degree_z > target_degree_z+degree_p);
 8005644:	bf00      	nop
 8005646:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800564a:	ee07 3a90 	vmov	s15, r3
 800564e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005652:	4b19      	ldr	r3, [pc, #100]	; (80056b8 <slalomR+0x240>)
 8005654:	edd3 7a00 	vldr	s15, [r3]
 8005658:	ee37 7a27 	vadd.f32	s14, s14, s15
 800565c:	4b17      	ldr	r3, [pc, #92]	; (80056bc <slalomR+0x244>)
 800565e:	edd3 7a00 	vldr	s15, [r3]
 8005662:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566a:	d4ec      	bmi.n	8005646 <slalomR+0x1ce>
	}else{
		while(degree_z < target_degree_z+degree_p);
	}
}
 800566c:	e013      	b.n	8005696 <slalomR+0x21e>
		while(degree_z < target_degree_z+degree_p);
 800566e:	bf00      	nop
 8005670:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005674:	ee07 3a90 	vmov	s15, r3
 8005678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800567c:	4b0e      	ldr	r3, [pc, #56]	; (80056b8 <slalomR+0x240>)
 800567e:	edd3 7a00 	vldr	s15, [r3]
 8005682:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005686:	4b0d      	ldr	r3, [pc, #52]	; (80056bc <slalomR+0x244>)
 8005688:	edd3 7a00 	vldr	s15, [r3]
 800568c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005694:	dcec      	bgt.n	8005670 <slalomR+0x1f8>
}
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bc90      	pop	{r4, r7}
 800569e:	4770      	bx	lr
 80056a0:	20000fac 	.word	0x20000fac
 80056a4:	20000b98 	.word	0x20000b98
 80056a8:	200001e0 	.word	0x200001e0
 80056ac:	20000b34 	.word	0x20000b34
 80056b0:	200002f0 	.word	0x200002f0
 80056b4:	20000b24 	.word	0x20000b24
 80056b8:	20000c40 	.word	0x20000c40
 80056bc:	20000b9c 	.word	0x20000b9c

080056c0 <slalomB>:
//slalomB
//aスラロームの後オフセット部分
//a引数1：
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalomB(int16_t accel_p, int16_t speed_p, uint8_t dist_p){
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	4603      	mov	r3, r0
 80056c8:	80fb      	strh	r3, [r7, #6]
 80056ca:	460b      	mov	r3, r1
 80056cc:	80bb      	strh	r3, [r7, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	70fb      	strb	r3, [r7, #3]
	MF.FLAG.GYRO = 0;
 80056d2:	4a25      	ldr	r2, [pc, #148]	; (8005768 <slalomB+0xa8>)
 80056d4:	8813      	ldrh	r3, [r2, #0]
 80056d6:	f36f 2308 	bfc	r3, #8, #1
 80056da:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80056dc:	4a22      	ldr	r2, [pc, #136]	; (8005768 <slalomB+0xa8>)
 80056de:	8813      	ldrh	r3, [r2, #0]
 80056e0:	f043 0304 	orr.w	r3, r3, #4
 80056e4:	8013      	strh	r3, [r2, #0]

	accel_l = accel_r = accel_p;
 80056e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056f2:	4b1e      	ldr	r3, [pc, #120]	; (800576c <slalomB+0xac>)
 80056f4:	edc3 7a00 	vstr	s15, [r3]
 80056f8:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <slalomB+0xb0>)
 80056fa:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_p;
 80056fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800570a:	4b1a      	ldr	r3, [pc, #104]	; (8005774 <slalomB+0xb4>)
 800570c:	edc3 7a00 	vstr	s15, [r3]
 8005710:	4b19      	ldr	r3, [pc, #100]	; (8005778 <slalomB+0xb8>)
 8005712:	edc3 7a00 	vstr	s15, [r3]

	control_start();
 8005716:	f7ff fb2d 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 800571a:	f04f 0300 	mov.w	r3, #0
 800571e:	4a17      	ldr	r2, [pc, #92]	; (800577c <slalomB+0xbc>)
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	4a17      	ldr	r2, [pc, #92]	; (8005780 <slalomB+0xc0>)
 8005724:	6013      	str	r3, [r2, #0]
	while(dist_l < dist_p && dist_r < dist_p);
 8005726:	bf00      	nop
 8005728:	78fb      	ldrb	r3, [r7, #3]
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005732:	4b13      	ldr	r3, [pc, #76]	; (8005780 <slalomB+0xc0>)
 8005734:	edd3 7a00 	vldr	s15, [r3]
 8005738:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800573c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005740:	dc00      	bgt.n	8005744 <slalomB+0x84>
}
 8005742:	e00c      	b.n	800575e <slalomB+0x9e>
	while(dist_l < dist_p && dist_r < dist_p);
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	ee07 3a90 	vmov	s15, r3
 800574a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800574e:	4b0b      	ldr	r3, [pc, #44]	; (800577c <slalomB+0xbc>)
 8005750:	edd3 7a00 	vldr	s15, [r3]
 8005754:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800575c:	dce4      	bgt.n	8005728 <slalomB+0x68>
}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000fac 	.word	0x20000fac
 800576c:	20000b20 	.word	0x20000b20
 8005770:	20000da0 	.word	0x20000da0
 8005774:	200001dc 	.word	0x200001dc
 8005778:	200007b4 	.word	0x200007b4
 800577c:	20000b2c 	.word	0x20000b2c
 8005780:	20001608 	.word	0x20001608

08005784 <set_position>:
//set_position
// 機体の尻を壁に当てて場所を区画中央に合わせる
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(){
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0

  driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8005788:	2064      	movs	r0, #100	; 0x64
 800578a:	f7ff fdad 	bl	80052e8 <driveC2>
  degree_z = target_degree_z;
 800578e:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <set_position+0x20>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a05      	ldr	r2, [pc, #20]	; (80057a8 <set_position+0x24>)
 8005794:	6013      	str	r3, [r2, #0]
  start_flag = 0;
 8005796:	4b05      	ldr	r3, [pc, #20]	; (80057ac <set_position+0x28>)
 8005798:	2200      	movs	r2, #0
 800579a:	701a      	strb	r2, [r3, #0]
  start_sectionA();
 800579c:	f000 f808 	bl	80057b0 <start_sectionA>
  //driveC(SETPOS_SET);           //aデフォルト速度で区画中心になる分回転。回転後に停止する
}
 80057a0:	bf00      	nop
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20000c40 	.word	0x20000c40
 80057a8:	20000b9c 	.word	0x20000b9c
 80057ac:	2000160c 	.word	0x2000160c

080057b0 <start_sectionA>:
//start_sectionA
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA(void){
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0

	control_start();
 80057b4:	f7ff fade 	bl	8004d74 <control_start>
	if(run_mode == LOW){
 80057b8:	4b4c      	ldr	r3, [pc, #304]	; (80058ec <start_sectionA+0x13c>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d129      	bne.n	8005816 <start_sectionA+0x66>
		if(start_flag == 0){
 80057c2:	4b4b      	ldr	r3, [pc, #300]	; (80058f0 <start_sectionA+0x140>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d108      	bne.n	80057de <start_sectionA+0x2e>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 80057cc:	237d      	movs	r3, #125	; 0x7d
 80057ce:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80057d2:	2132      	movs	r1, #50	; 0x32
 80057d4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80057d8:	f7ff fb88 	bl	8004eec <driveA>
 80057dc:	e078      	b.n	80058d0 <start_sectionA+0x120>
		}else if(start_flag == 1){
 80057de:	4b44      	ldr	r3, [pc, #272]	; (80058f0 <start_sectionA+0x140>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d108      	bne.n	80057fa <start_sectionA+0x4a>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 80057e8:	235b      	movs	r3, #91	; 0x5b
 80057ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80057ee:	2132      	movs	r1, #50	; 0x32
 80057f0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80057f4:	f7ff fb7a 	bl	8004eec <driveA>
 80057f8:	e06a      	b.n	80058d0 <start_sectionA+0x120>
		}else if(start_flag == 2){
 80057fa:	4b3d      	ldr	r3, [pc, #244]	; (80058f0 <start_sectionA+0x140>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d165      	bne.n	80058d0 <start_sectionA+0x120>
			driveA(4000, SPEED_MIN, SPEED_LOW, SEC_START_HALF);				//aスタート半区画分加速しながら走行。走行後は停止しない
 8005804:	2323      	movs	r3, #35	; 0x23
 8005806:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800580a:	2132      	movs	r1, #50	; 0x32
 800580c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005810:	f7ff fb6c 	bl	8004eec <driveA>
 8005814:	e05c      	b.n	80058d0 <start_sectionA+0x120>
		}
	}else if(run_mode == MIDDLE){
 8005816:	4b35      	ldr	r3, [pc, #212]	; (80058ec <start_sectionA+0x13c>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d129      	bne.n	8005874 <start_sectionA+0xc4>
		if(start_flag == 0){
 8005820:	4b33      	ldr	r3, [pc, #204]	; (80058f0 <start_sectionA+0x140>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d108      	bne.n	800583c <start_sectionA+0x8c>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_START);				//aスタート区画分加速しながら走行。走行後は停止しない
 800582a:	237d      	movs	r3, #125	; 0x7d
 800582c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005830:	2132      	movs	r1, #50	; 0x32
 8005832:	f241 7070 	movw	r0, #6000	; 0x1770
 8005836:	f7ff fb59 	bl	8004eec <driveA>
 800583a:	e049      	b.n	80058d0 <start_sectionA+0x120>
		}else if(start_flag == 1){
 800583c:	4b2c      	ldr	r3, [pc, #176]	; (80058f0 <start_sectionA+0x140>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b01      	cmp	r3, #1
 8005844:	d108      	bne.n	8005858 <start_sectionA+0xa8>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);				//a半区画分加速しながら走行。走行後は停止しない
 8005846:	235b      	movs	r3, #91	; 0x5b
 8005848:	f44f 7216 	mov.w	r2, #600	; 0x258
 800584c:	2132      	movs	r1, #50	; 0x32
 800584e:	f241 7070 	movw	r0, #6000	; 0x1770
 8005852:	f7ff fb4b 	bl	8004eec <driveA>
 8005856:	e03b      	b.n	80058d0 <start_sectionA+0x120>
		}else if(start_flag == 2){
 8005858:	4b25      	ldr	r3, [pc, #148]	; (80058f0 <start_sectionA+0x140>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d136      	bne.n	80058d0 <start_sectionA+0x120>
			driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005862:	2323      	movs	r3, #35	; 0x23
 8005864:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005868:	2132      	movs	r1, #50	; 0x32
 800586a:	f241 7070 	movw	r0, #6000	; 0x1770
 800586e:	f7ff fb3d 	bl	8004eec <driveA>
 8005872:	e02d      	b.n	80058d0 <start_sectionA+0x120>
		}
	}else if(run_mode == HIGH){
 8005874:	4b1d      	ldr	r3, [pc, #116]	; (80058ec <start_sectionA+0x13c>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b03      	cmp	r3, #3
 800587c:	d128      	bne.n	80058d0 <start_sectionA+0x120>
		if(start_flag == 0){
 800587e:	4b1c      	ldr	r3, [pc, #112]	; (80058f0 <start_sectionA+0x140>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d108      	bne.n	800589a <start_sectionA+0xea>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 8005888:	237d      	movs	r3, #125	; 0x7d
 800588a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800588e:	2132      	movs	r1, #50	; 0x32
 8005890:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005894:	f7ff fb2a 	bl	8004eec <driveA>
 8005898:	e01a      	b.n	80058d0 <start_sectionA+0x120>
		}else if(start_flag == 1){
 800589a:	4b15      	ldr	r3, [pc, #84]	; (80058f0 <start_sectionA+0x140>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d108      	bne.n	80058b6 <start_sectionA+0x106>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 80058a4:	235b      	movs	r3, #91	; 0x5b
 80058a6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80058aa:	2132      	movs	r1, #50	; 0x32
 80058ac:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80058b0:	f7ff fb1c 	bl	8004eec <driveA>
 80058b4:	e00c      	b.n	80058d0 <start_sectionA+0x120>
		}else if(start_flag == 2){
 80058b6:	4b0e      	ldr	r3, [pc, #56]	; (80058f0 <start_sectionA+0x140>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d107      	bne.n	80058d0 <start_sectionA+0x120>
			driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 80058c0:	2323      	movs	r3, #35	; 0x23
 80058c2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80058c6:	2132      	movs	r1, #50	; 0x32
 80058c8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80058cc:	f7ff fb0e 	bl	8004eec <driveA>
		}
	}
	start_flag = 1;
 80058d0:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <start_sectionA+0x140>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 80058d6:	4b07      	ldr	r3, [pc, #28]	; (80058f4 <start_sectionA+0x144>)
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <start_sectionA+0x138>
 80058e4:	f009 fbbc 	bl	800f060 <get_wall_info>
}
 80058e8:	bf00      	nop
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	2000048e 	.word	0x2000048e
 80058f0:	2000160c 	.word	0x2000160c
 80058f4:	20000fac 	.word	0x20000fac

080058f8 <half_sectionA>:
//half_sectionA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0

	control_start();
 80058fc:	f7ff fa3a 	bl	8004d74 <control_start>
	if(run_mode == LOW){
 8005900:	4b19      	ldr	r3, [pc, #100]	; (8005968 <half_sectionA+0x70>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b01      	cmp	r3, #1
 8005908:	d108      	bne.n	800591c <half_sectionA+0x24>
		driveA(4000, SPEED_MIN, SPEED_LOW, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 800590a:	235b      	movs	r3, #91	; 0x5b
 800590c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005910:	2132      	movs	r1, #50	; 0x32
 8005912:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005916:	f7ff fae9 	bl	8004eec <driveA>
 800591a:	e01a      	b.n	8005952 <half_sectionA+0x5a>
	}else if(run_mode == MIDDLE){
 800591c:	4b12      	ldr	r3, [pc, #72]	; (8005968 <half_sectionA+0x70>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d108      	bne.n	8005938 <half_sectionA+0x40>
		driveA(6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分加速しながら走行。走行後は停止しない
 8005926:	235b      	movs	r3, #91	; 0x5b
 8005928:	f44f 7216 	mov.w	r2, #600	; 0x258
 800592c:	2132      	movs	r1, #50	; 0x32
 800592e:	f241 7070 	movw	r0, #6000	; 0x1770
 8005932:	f7ff fadb 	bl	8004eec <driveA>
 8005936:	e00c      	b.n	8005952 <half_sectionA+0x5a>
	}else if(run_mode == HIGH){
 8005938:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <half_sectionA+0x70>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b03      	cmp	r3, #3
 8005940:	d107      	bne.n	8005952 <half_sectionA+0x5a>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005942:	235b      	movs	r3, #91	; 0x5b
 8005944:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005948:	2132      	movs	r1, #50	; 0x32
 800594a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800594e:	f7ff facd 	bl	8004eec <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005952:	4b06      	ldr	r3, [pc, #24]	; (800596c <half_sectionA+0x74>)
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <half_sectionA+0x6c>
 8005960:	f009 fb7e 	bl	800f060 <get_wall_info>
}
 8005964:	bf00      	nop
 8005966:	bd80      	pop	{r7, pc}
 8005968:	2000048e 	.word	0x2000048e
 800596c:	20000fac 	.word	0x20000fac

08005970 <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0

	control_start();
 8005974:	f7ff f9fe 	bl	8004d74 <control_start>
	if(run_mode == LOW){
 8005978:	4b13      	ldr	r3, [pc, #76]	; (80059c8 <half_sectionD+0x58>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b01      	cmp	r3, #1
 8005980:	d107      	bne.n	8005992 <half_sectionD+0x22>
		driveD(-4000, SPEED_MIN, SPEED_LOW, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005982:	235b      	movs	r3, #91	; 0x5b
 8005984:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005988:	2132      	movs	r1, #50	; 0x32
 800598a:	4810      	ldr	r0, [pc, #64]	; (80059cc <half_sectionD+0x5c>)
 800598c:	f7ff fb24 	bl	8004fd8 <driveD>
	}else if(run_mode == MIDDLE){
		driveD(-6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分指定減速度で減速走行。走行後は停止する
	}else if(run_mode == HIGH){
		driveD(-8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
	}
}
 8005990:	e018      	b.n	80059c4 <half_sectionD+0x54>
	}else if(run_mode == MIDDLE){
 8005992:	4b0d      	ldr	r3, [pc, #52]	; (80059c8 <half_sectionD+0x58>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d107      	bne.n	80059ac <half_sectionD+0x3c>
		driveD(-6000, SPEED_MIN, SPEED_MIDDLE, SEC_HALF);					//半区画分指定減速度で減速走行。走行後は停止する
 800599c:	235b      	movs	r3, #91	; 0x5b
 800599e:	f44f 7216 	mov.w	r2, #600	; 0x258
 80059a2:	2132      	movs	r1, #50	; 0x32
 80059a4:	480a      	ldr	r0, [pc, #40]	; (80059d0 <half_sectionD+0x60>)
 80059a6:	f7ff fb17 	bl	8004fd8 <driveD>
}
 80059aa:	e00b      	b.n	80059c4 <half_sectionD+0x54>
	}else if(run_mode == HIGH){
 80059ac:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <half_sectionD+0x58>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d106      	bne.n	80059c4 <half_sectionD+0x54>
		driveD(-8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 80059b6:	235b      	movs	r3, #91	; 0x5b
 80059b8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80059bc:	2132      	movs	r1, #50	; 0x32
 80059be:	4805      	ldr	r0, [pc, #20]	; (80059d4 <half_sectionD+0x64>)
 80059c0:	f7ff fb0a 	bl	8004fd8 <driveD>
}
 80059c4:	bf00      	nop
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	2000048e 	.word	0x2000048e
 80059cc:	fffff060 	.word	0xfffff060
 80059d0:	ffffe890 	.word	0xffffe890
 80059d4:	ffffe0c0 	.word	0xffffe0c0

080059d8 <half_sectionA3>:
//half_sectionA3
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA3(void){
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
	control_start();
 80059dc:	f7ff f9ca 	bl	8004d74 <control_start>
	driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);				//半区画分加速しながら走行。走行後は停止しない
 80059e0:	235b      	movs	r3, #91	; 0x5b
 80059e2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80059e6:	2132      	movs	r1, #50	; 0x32
 80059e8:	f242 7010 	movw	r0, #10000	; 0x2710
 80059ec:	f7ff fa7e 	bl	8004eec <driveA>
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 80059f0:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <half_sectionA3+0x30>)
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <half_sectionA3+0x2a>
 80059fe:	f009 fb2f 	bl	800f060 <get_wall_info>
}
 8005a02:	bf00      	nop
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20000fac 	.word	0x20000fac

08005a0c <half_sectionD3>:
//half_sectionD3
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD3(void){
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
	control_start();
 8005a10:	f7ff f9b0 	bl	8004d74 <control_start>
	driveD(-10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005a14:	235b      	movs	r3, #91	; 0x5b
 8005a16:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005a1a:	2132      	movs	r1, #50	; 0x32
 8005a1c:	4802      	ldr	r0, [pc, #8]	; (8005a28 <half_sectionD3+0x1c>)
 8005a1e:	f7ff fadb 	bl	8004fd8 <driveD>
}
 8005a22:	bf00      	nop
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	ffffd8f0 	.word	0xffffd8f0

08005a2c <half_sectionU>:
//half_sectionU
// 等速で半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionU(void){
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005a30:	2007      	movs	r0, #7
 8005a32:	f009 fb89 	bl	800f148 <full_led_write>
	control_start();
 8005a36:	f7ff f99d 	bl	8004d74 <control_start>
	driveU(SEC_HALF);													//半区画分等速走行。走行後は停止しない
 8005a3a:	205b      	movs	r0, #91	; 0x5b
 8005a3c:	f7ff fba2 	bl	8005184 <driveU>
}
 8005a40:	bf00      	nop
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <half_sectionV>:
//half_sectionV
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionV(void){
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005a48:	2007      	movs	r0, #7
 8005a4a:	f009 fb7d 	bl	800f148 <full_led_write>
	control_start();
 8005a4e:	f7ff f991 	bl	8004d74 <control_start>
	driveU(SEC_HALF_V);													//半区画分等速走行。走行後は停止しない
 8005a52:	2082      	movs	r0, #130	; 0x82
 8005a54:	f7ff fb96 	bl	8005184 <driveU>
}
 8005a58:	bf00      	nop
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <one_section>:
//one_section
// 1区画分進んで停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_section(void){
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0

	half_sectionA();													//半区画分加速走行
 8005a60:	f7ff ff4a 	bl	80058f8 <half_sectionA>
	half_sectionD();													//半区画分減速走行のち停止
 8005a64:	f7ff ff84 	bl	8005970 <half_sectionD>
}
 8005a68:	bf00      	nop
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <one_sectionA>:
//one_sectionA
// 1区画分加速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA(void){
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8005a70:	2004      	movs	r0, #4
 8005a72:	f009 fb69 	bl	800f148 <full_led_write>
	control_start();
 8005a76:	f7ff f97d 	bl	8004d74 <control_start>
	if(run_mode == LOW){
 8005a7a:	4b21      	ldr	r3, [pc, #132]	; (8005b00 <one_sectionA+0x94>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d10d      	bne.n	8005aa0 <one_sectionA+0x34>
		driveA(accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005a84:	4b1f      	ldr	r3, [pc, #124]	; (8005b04 <one_sectionA+0x98>)
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	b21b      	sxth	r3, r3
 8005a8a:	b298      	uxth	r0, r3
 8005a8c:	4b1e      	ldr	r3, [pc, #120]	; (8005b08 <one_sectionA+0x9c>)
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	b21b      	sxth	r3, r3
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	23b6      	movs	r3, #182	; 0xb6
 8005a96:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005a9a:	f7ff fa27 	bl	8004eec <driveA>
 8005a9e:	e024      	b.n	8005aea <one_sectionA+0x7e>
	}else if(run_mode == MIDDLE){
 8005aa0:	4b17      	ldr	r3, [pc, #92]	; (8005b00 <one_sectionA+0x94>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d10d      	bne.n	8005ac6 <one_sectionA+0x5a>
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分加速走行。走行後は停止しない
 8005aaa:	4b16      	ldr	r3, [pc, #88]	; (8005b04 <one_sectionA+0x98>)
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b21b      	sxth	r3, r3
 8005ab0:	b298      	uxth	r0, r3
 8005ab2:	4b15      	ldr	r3, [pc, #84]	; (8005b08 <one_sectionA+0x9c>)
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	b21b      	sxth	r3, r3
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	23b6      	movs	r3, #182	; 0xb6
 8005abc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005ac0:	f7ff fa14 	bl	8004eec <driveA>
 8005ac4:	e011      	b.n	8005aea <one_sectionA+0x7e>
	}else if(run_mode == HIGH){
 8005ac6:	4b0e      	ldr	r3, [pc, #56]	; (8005b00 <one_sectionA+0x94>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d10c      	bne.n	8005aea <one_sectionA+0x7e>
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005ad0:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <one_sectionA+0x98>)
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	b21b      	sxth	r3, r3
 8005ad6:	b298      	uxth	r0, r3
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <one_sectionA+0x9c>)
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	b21b      	sxth	r3, r3
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	23b6      	movs	r3, #182	; 0xb6
 8005ae2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005ae6:	f7ff fa01 	bl	8004eec <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005aea:	4b08      	ldr	r3, [pc, #32]	; (8005b0c <one_sectionA+0xa0>)
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <one_sectionA+0x90>
 8005af8:	f009 fab2 	bl	800f060 <get_wall_info>
}
 8005afc:	bf00      	nop
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	2000048e 	.word	0x2000048e
 8005b04:	2000048c 	.word	0x2000048c
 8005b08:	20000fc0 	.word	0x20000fc0
 8005b0c:	20000fac 	.word	0x20000fac

08005b10 <one_sectionD>:
//one_sectionD
// 1区画分減速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD(void){
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005b14:	2003      	movs	r0, #3
 8005b16:	f009 fb17 	bl	800f148 <full_led_write>
	control_start();
 8005b1a:	f7ff f92b 	bl	8004d74 <control_start>
	if(run_mode == LOW){
 8005b1e:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <one_sectionD+0xa0>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d10f      	bne.n	8005b48 <one_sectionD+0x38>
		driveA(-accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF*2);				//1区画分減速走行。走行後は停止しない
 8005b28:	4b22      	ldr	r3, [pc, #136]	; (8005bb4 <one_sectionD+0xa4>)
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	b21b      	sxth	r3, r3
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	425b      	negs	r3, r3
 8005b32:	b298      	uxth	r0, r3
 8005b34:	4b20      	ldr	r3, [pc, #128]	; (8005bb8 <one_sectionD+0xa8>)
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b21b      	sxth	r3, r3
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	23b6      	movs	r3, #182	; 0xb6
 8005b3e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005b42:	f7ff f9d3 	bl	8004eec <driveA>
 8005b46:	e028      	b.n	8005b9a <one_sectionD+0x8a>
	}else if(run_mode == MIDDLE){
 8005b48:	4b19      	ldr	r3, [pc, #100]	; (8005bb0 <one_sectionD+0xa0>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d10f      	bne.n	8005b72 <one_sectionD+0x62>
		driveA(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005b52:	4b18      	ldr	r3, [pc, #96]	; (8005bb4 <one_sectionD+0xa4>)
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	b21b      	sxth	r3, r3
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	425b      	negs	r3, r3
 8005b5c:	b298      	uxth	r0, r3
 8005b5e:	4b16      	ldr	r3, [pc, #88]	; (8005bb8 <one_sectionD+0xa8>)
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	b21b      	sxth	r3, r3
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	23b6      	movs	r3, #182	; 0xb6
 8005b68:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005b6c:	f7ff f9be 	bl	8004eec <driveA>
 8005b70:	e013      	b.n	8005b9a <one_sectionD+0x8a>
	}else if(run_mode == HIGH){
 8005b72:	4b0f      	ldr	r3, [pc, #60]	; (8005bb0 <one_sectionD+0xa0>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d10e      	bne.n	8005b9a <one_sectionD+0x8a>
		driveA(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005b7c:	4b0d      	ldr	r3, [pc, #52]	; (8005bb4 <one_sectionD+0xa4>)
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b21b      	sxth	r3, r3
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	425b      	negs	r3, r3
 8005b86:	b298      	uxth	r0, r3
 8005b88:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <one_sectionD+0xa8>)
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b21b      	sxth	r3, r3
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	23b6      	movs	r3, #182	; 0xb6
 8005b92:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005b96:	f7ff f9a9 	bl	8004eec <driveA>
	}
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005b9a:	4b08      	ldr	r3, [pc, #32]	; (8005bbc <one_sectionD+0xac>)
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <one_sectionD+0x9c>
 8005ba8:	f009 fa5a 	bl	800f060 <get_wall_info>
}
 8005bac:	bf00      	nop
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	2000048e 	.word	0x2000048e
 8005bb4:	2000048c 	.word	0x2000048c
 8005bb8:	20000fc0 	.word	0x20000fc0
 8005bbc:	20000fac 	.word	0x20000fac

08005bc0 <one_sectionVA>:
//one_sectionVA
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVA(void){
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8005bc4:	2004      	movs	r0, #4
 8005bc6:	f009 fabf 	bl	800f148 <full_led_write>
	control_start();
 8005bca:	f7ff f8d3 	bl	8004d74 <control_start>
	if(run_mode == LOW){
 8005bce:	4b1e      	ldr	r3, [pc, #120]	; (8005c48 <one_sectionVA+0x88>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d10e      	bne.n	8005bf6 <one_sectionVA+0x36>
		driveA(accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005bd8:	4b1c      	ldr	r3, [pc, #112]	; (8005c4c <one_sectionVA+0x8c>)
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	b21b      	sxth	r3, r3
 8005bde:	b298      	uxth	r0, r3
 8005be0:	4b1b      	ldr	r3, [pc, #108]	; (8005c50 <one_sectionVA+0x90>)
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b21b      	sxth	r3, r3
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005bec:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005bf0:	f7ff f97c 	bl	8004eec <driveA>
	}else if(run_mode == MIDDLE){
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}else if(run_mode == HIGH){
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
	}
}
 8005bf4:	e026      	b.n	8005c44 <one_sectionVA+0x84>
	}else if(run_mode == MIDDLE){
 8005bf6:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <one_sectionVA+0x88>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d10e      	bne.n	8005c1e <one_sectionVA+0x5e>
		driveA(accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005c00:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <one_sectionVA+0x8c>)
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b21b      	sxth	r3, r3
 8005c06:	b298      	uxth	r0, r3
 8005c08:	4b11      	ldr	r3, [pc, #68]	; (8005c50 <one_sectionVA+0x90>)
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b21b      	sxth	r3, r3
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005c14:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005c18:	f7ff f968 	bl	8004eec <driveA>
}
 8005c1c:	e012      	b.n	8005c44 <one_sectionVA+0x84>
	}else if(run_mode == HIGH){
 8005c1e:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <one_sectionVA+0x88>)
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d10d      	bne.n	8005c44 <one_sectionVA+0x84>
		driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005c28:	4b08      	ldr	r3, [pc, #32]	; (8005c4c <one_sectionVA+0x8c>)
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	b21b      	sxth	r3, r3
 8005c2e:	b298      	uxth	r0, r3
 8005c30:	4b07      	ldr	r3, [pc, #28]	; (8005c50 <one_sectionVA+0x90>)
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b21b      	sxth	r3, r3
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005c3c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005c40:	f7ff f954 	bl	8004eec <driveA>
}
 8005c44:	bf00      	nop
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	2000048e 	.word	0x2000048e
 8005c4c:	2000048c 	.word	0x2000048c
 8005c50:	20000fc0 	.word	0x20000fc0

08005c54 <one_sectionVD>:
//one_sectionVD
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVD(void){
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005c58:	2003      	movs	r0, #3
 8005c5a:	f009 fa75 	bl	800f148 <full_led_write>
	control_start();
 8005c5e:	f7ff f889 	bl	8004d74 <control_start>
	if(run_mode == LOW){
 8005c62:	4b21      	ldr	r3, [pc, #132]	; (8005ce8 <one_sectionVD+0x94>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d110      	bne.n	8005c8e <one_sectionVD+0x3a>
		driveA(-accel_hs, SPEED_LOW, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8005c6c:	4b1f      	ldr	r3, [pc, #124]	; (8005cec <one_sectionVD+0x98>)
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	b21b      	sxth	r3, r3
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	425b      	negs	r3, r3
 8005c76:	b298      	uxth	r0, r3
 8005c78:	4b1d      	ldr	r3, [pc, #116]	; (8005cf0 <one_sectionVD+0x9c>)
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	b21b      	sxth	r3, r3
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005c84:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005c88:	f7ff f930 	bl	8004eec <driveA>
	}else if(run_mode == MIDDLE){
		driveA(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);			//1区画分減速走行。走行後は停止しない
	}else if(run_mode == HIGH){
		driveA(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
	}
}
 8005c8c:	e02a      	b.n	8005ce4 <one_sectionVD+0x90>
	}else if(run_mode == MIDDLE){
 8005c8e:	4b16      	ldr	r3, [pc, #88]	; (8005ce8 <one_sectionVD+0x94>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d110      	bne.n	8005cba <one_sectionVD+0x66>
		driveA(-accel_hs, SPEED_MIDDLE, speed_max_hs, SEC_HALF_V*2);			//1区画分減速走行。走行後は停止しない
 8005c98:	4b14      	ldr	r3, [pc, #80]	; (8005cec <one_sectionVD+0x98>)
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b21b      	sxth	r3, r3
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	425b      	negs	r3, r3
 8005ca2:	b298      	uxth	r0, r3
 8005ca4:	4b12      	ldr	r3, [pc, #72]	; (8005cf0 <one_sectionVD+0x9c>)
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b21b      	sxth	r3, r3
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005cb0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005cb4:	f7ff f91a 	bl	8004eec <driveA>
}
 8005cb8:	e014      	b.n	8005ce4 <one_sectionVD+0x90>
	}else if(run_mode == HIGH){
 8005cba:	4b0b      	ldr	r3, [pc, #44]	; (8005ce8 <one_sectionVD+0x94>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d10f      	bne.n	8005ce4 <one_sectionVD+0x90>
		driveA(-accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分減速走行。走行後は停止しない
 8005cc4:	4b09      	ldr	r3, [pc, #36]	; (8005cec <one_sectionVD+0x98>)
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	b21b      	sxth	r3, r3
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	425b      	negs	r3, r3
 8005cce:	b298      	uxth	r0, r3
 8005cd0:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <one_sectionVD+0x9c>)
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	b21b      	sxth	r3, r3
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005cdc:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005ce0:	f7ff f904 	bl	8004eec <driveA>
}
 8005ce4:	bf00      	nop
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	2000048e 	.word	0x2000048e
 8005cec:	2000048c 	.word	0x2000048c
 8005cf0:	20000fc0 	.word	0x20000fc0

08005cf4 <one_sectionU>:
//one_sectionU
// 等速で1区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 8005cf8:	2007      	movs	r0, #7
 8005cfa:	f009 fa25 	bl	800f148 <full_led_write>
	control_start();
 8005cfe:	f7ff f839 	bl	8004d74 <control_start>
	driveU(SEC_HALF*2);													//1区画分等速走行。走行後は停止しない
 8005d02:	20b6      	movs	r0, #182	; 0xb6
 8005d04:	f7ff fa3e 	bl	8005184 <driveU>
	if(!MF.FLAG.SCND)get_wall_info();								//壁情報を取得
 8005d08:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <one_sectionU+0x2c>)
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <one_sectionU+0x26>
 8005d16:	f009 f9a3 	bl	800f060 <get_wall_info>
}
 8005d1a:	bf00      	nop
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	20000fac 	.word	0x20000fac
 8005d24:	00000000 	.word	0x00000000

08005d28 <rotate_R90>:
//rotate_R90
// 右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 8005d28:	b598      	push	{r3, r4, r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 8005d2c:	4b56      	ldr	r3, [pc, #344]	; (8005e88 <rotate_R90+0x160>)
 8005d2e:	4a57      	ldr	r2, [pc, #348]	; (8005e8c <rotate_R90+0x164>)
 8005d30:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 8005d32:	4b57      	ldr	r3, [pc, #348]	; (8005e90 <rotate_R90+0x168>)
 8005d34:	4a57      	ldr	r2, [pc, #348]	; (8005e94 <rotate_R90+0x16c>)
 8005d36:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8005d38:	4b57      	ldr	r3, [pc, #348]	; (8005e98 <rotate_R90+0x170>)
 8005d3a:	4a58      	ldr	r2, [pc, #352]	; (8005e9c <rotate_R90+0x174>)
 8005d3c:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 8005d3e:	4b52      	ldr	r3, [pc, #328]	; (8005e88 <rotate_R90+0x160>)
 8005d40:	edd3 7a00 	vldr	s15, [r3]
 8005d44:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005ea0 <rotate_R90+0x178>
 8005d48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d4c:	ee16 0a90 	vmov	r0, s13
 8005d50:	f7fa fbf2 	bl	8000538 <__aeabi_f2d>
 8005d54:	a34a      	add	r3, pc, #296	; (adr r3, 8005e80 <rotate_R90+0x158>)
 8005d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5a:	f7fa fc45 	bl	80005e8 <__aeabi_dmul>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	460c      	mov	r4, r1
 8005d62:	4618      	mov	r0, r3
 8005d64:	4621      	mov	r1, r4
 8005d66:	f04f 0200 	mov.w	r2, #0
 8005d6a:	4b4e      	ldr	r3, [pc, #312]	; (8005ea4 <rotate_R90+0x17c>)
 8005d6c:	f7fa fc3c 	bl	80005e8 <__aeabi_dmul>
 8005d70:	4603      	mov	r3, r0
 8005d72:	460c      	mov	r4, r1
 8005d74:	4618      	mov	r0, r3
 8005d76:	4621      	mov	r1, r4
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d80:	f7fa fd5c 	bl	800083c <__aeabi_ddiv>
 8005d84:	4603      	mov	r3, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	4618      	mov	r0, r3
 8005d8a:	4621      	mov	r1, r4
 8005d8c:	f7fa ff04 	bl	8000b98 <__aeabi_d2f>
 8005d90:	4602      	mov	r2, r0
 8005d92:	4b45      	ldr	r3, [pc, #276]	; (8005ea8 <rotate_R90+0x180>)
 8005d94:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 8005d96:	4b3c      	ldr	r3, [pc, #240]	; (8005e88 <rotate_R90+0x160>)
 8005d98:	edd3 7a00 	vldr	s15, [r3]
 8005d9c:	eef1 7a67 	vneg.f32	s15, s15
 8005da0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005ea0 <rotate_R90+0x178>
 8005da4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005da8:	ee16 0a90 	vmov	r0, s13
 8005dac:	f7fa fbc4 	bl	8000538 <__aeabi_f2d>
 8005db0:	a333      	add	r3, pc, #204	; (adr r3, 8005e80 <rotate_R90+0x158>)
 8005db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db6:	f7fa fc17 	bl	80005e8 <__aeabi_dmul>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	4b37      	ldr	r3, [pc, #220]	; (8005ea4 <rotate_R90+0x17c>)
 8005dc8:	f7fa fc0e 	bl	80005e8 <__aeabi_dmul>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	460c      	mov	r4, r1
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ddc:	f7fa fd2e 	bl	800083c <__aeabi_ddiv>
 8005de0:	4603      	mov	r3, r0
 8005de2:	460c      	mov	r4, r1
 8005de4:	4618      	mov	r0, r3
 8005de6:	4621      	mov	r1, r4
 8005de8:	f7fa fed6 	bl	8000b98 <__aeabi_d2f>
 8005dec:	4602      	mov	r2, r0
 8005dee:	4b2f      	ldr	r3, [pc, #188]	; (8005eac <rotate_R90+0x184>)
 8005df0:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005df2:	f7fe ff69 	bl	8004cc8 <drive_start>
	control_stop();
 8005df6:	f7fe ffd1 	bl	8004d9c <control_stop>
	while(degree_z > target_degree_z-80);
 8005dfa:	bf00      	nop
 8005dfc:	4b2c      	ldr	r3, [pc, #176]	; (8005eb0 <rotate_R90+0x188>)
 8005dfe:	edd3 7a00 	vldr	s15, [r3]
 8005e02:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005eb4 <rotate_R90+0x18c>
 8005e06:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005e0a:	4b2b      	ldr	r3, [pc, #172]	; (8005eb8 <rotate_R90+0x190>)
 8005e0c:	edd3 7a00 	vldr	s15, [r3]
 8005e10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e18:	d4f0      	bmi.n	8005dfc <rotate_R90+0xd4>

	accel_l = -30000;
 8005e1a:	4b1d      	ldr	r3, [pc, #116]	; (8005e90 <rotate_R90+0x168>)
 8005e1c:	4a27      	ldr	r2, [pc, #156]	; (8005ebc <rotate_R90+0x194>)
 8005e1e:	601a      	str	r2, [r3, #0]
	accel_r = 30000;
 8005e20:	4b1d      	ldr	r3, [pc, #116]	; (8005e98 <rotate_R90+0x170>)
 8005e22:	4a27      	ldr	r2, [pc, #156]	; (8005ec0 <rotate_R90+0x198>)
 8005e24:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 8005e26:	4b27      	ldr	r3, [pc, #156]	; (8005ec4 <rotate_R90+0x19c>)
 8005e28:	4a27      	ldr	r2, [pc, #156]	; (8005ec8 <rotate_R90+0x1a0>)
 8005e2a:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 8005e2c:	4b27      	ldr	r3, [pc, #156]	; (8005ecc <rotate_R90+0x1a4>)
 8005e2e:	4a28      	ldr	r2, [pc, #160]	; (8005ed0 <rotate_R90+0x1a8>)
 8005e30:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 8005e32:	bf00      	nop
 8005e34:	4b1e      	ldr	r3, [pc, #120]	; (8005eb0 <rotate_R90+0x188>)
 8005e36:	edd3 7a00 	vldr	s15, [r3]
 8005e3a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005ed4 <rotate_R90+0x1ac>
 8005e3e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005e42:	4b1d      	ldr	r3, [pc, #116]	; (8005eb8 <rotate_R90+0x190>)
 8005e44:	edd3 7a00 	vldr	s15, [r3]
 8005e48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e50:	d4f0      	bmi.n	8005e34 <rotate_R90+0x10c>

	if(!MF.FLAG.XDIR){
 8005e52:	4b21      	ldr	r3, [pc, #132]	; (8005ed8 <rotate_R90+0x1b0>)
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d104      	bne.n	8005e6a <rotate_R90+0x142>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8005e60:	2101      	movs	r1, #1
 8005e62:	2001      	movs	r0, #1
 8005e64:	f007 fba0 	bl	800d5a8 <turn_dir>
 8005e68:	e003      	b.n	8005e72 <rotate_R90+0x14a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8005e6a:	2103      	movs	r1, #3
 8005e6c:	2002      	movs	r0, #2
 8005e6e:	f007 fb9b 	bl	800d5a8 <turn_dir>
	}
	drive_stop();
 8005e72:	f7fe ff57 	bl	8004d24 <drive_stop>
}
 8005e76:	bf00      	nop
 8005e78:	bd98      	pop	{r3, r4, r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	f3af 8000 	nop.w
 8005e80:	54442d18 	.word	0x54442d18
 8005e84:	400921fb 	.word	0x400921fb
 8005e88:	200001e0 	.word	0x200001e0
 8005e8c:	44480000 	.word	0x44480000
 8005e90:	20000da0 	.word	0x20000da0
 8005e94:	453b8000 	.word	0x453b8000
 8005e98:	20000b20 	.word	0x20000b20
 8005e9c:	c53b8000 	.word	0xc53b8000
 8005ea0:	43340000 	.word	0x43340000
 8005ea4:	40508000 	.word	0x40508000
 8005ea8:	200007b4 	.word	0x200007b4
 8005eac:	20000fb0 	.word	0x20000fb0
 8005eb0:	20000c40 	.word	0x20000c40
 8005eb4:	42a00000 	.word	0x42a00000
 8005eb8:	20000b9c 	.word	0x20000b9c
 8005ebc:	c6ea6000 	.word	0xc6ea6000
 8005ec0:	46ea6000 	.word	0x46ea6000
 8005ec4:	20000b94 	.word	0x20000b94
 8005ec8:	42c80000 	.word	0x42c80000
 8005ecc:	200001dc 	.word	0x200001dc
 8005ed0:	c2c80000 	.word	0xc2c80000
 8005ed4:	42b40000 	.word	0x42b40000
 8005ed8:	20000fac 	.word	0x20000fac
 8005edc:	00000000 	.word	0x00000000

08005ee0 <rotate_L90>:
//rotate_L90
// 左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 8005ee0:	b598      	push	{r3, r4, r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 8005ee4:	4b56      	ldr	r3, [pc, #344]	; (8006040 <rotate_L90+0x160>)
 8005ee6:	4a57      	ldr	r2, [pc, #348]	; (8006044 <rotate_L90+0x164>)
 8005ee8:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 8005eea:	4b57      	ldr	r3, [pc, #348]	; (8006048 <rotate_L90+0x168>)
 8005eec:	4a57      	ldr	r2, [pc, #348]	; (800604c <rotate_L90+0x16c>)
 8005eee:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8005ef0:	4b57      	ldr	r3, [pc, #348]	; (8006050 <rotate_L90+0x170>)
 8005ef2:	4a58      	ldr	r2, [pc, #352]	; (8006054 <rotate_L90+0x174>)
 8005ef4:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 8005ef6:	4b52      	ldr	r3, [pc, #328]	; (8006040 <rotate_L90+0x160>)
 8005ef8:	edd3 7a00 	vldr	s15, [r3]
 8005efc:	eef1 7a67 	vneg.f32	s15, s15
 8005f00:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006058 <rotate_L90+0x178>
 8005f04:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f08:	ee16 0a90 	vmov	r0, s13
 8005f0c:	f7fa fb14 	bl	8000538 <__aeabi_f2d>
 8005f10:	a349      	add	r3, pc, #292	; (adr r3, 8006038 <rotate_L90+0x158>)
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f7fa fb67 	bl	80005e8 <__aeabi_dmul>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	4618      	mov	r0, r3
 8005f20:	4621      	mov	r1, r4
 8005f22:	f04f 0200 	mov.w	r2, #0
 8005f26:	4b4d      	ldr	r3, [pc, #308]	; (800605c <rotate_L90+0x17c>)
 8005f28:	f7fa fb5e 	bl	80005e8 <__aeabi_dmul>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	4618      	mov	r0, r3
 8005f32:	4621      	mov	r1, r4
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f3c:	f7fa fc7e 	bl	800083c <__aeabi_ddiv>
 8005f40:	4603      	mov	r3, r0
 8005f42:	460c      	mov	r4, r1
 8005f44:	4618      	mov	r0, r3
 8005f46:	4621      	mov	r1, r4
 8005f48:	f7fa fe26 	bl	8000b98 <__aeabi_d2f>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	4b44      	ldr	r3, [pc, #272]	; (8006060 <rotate_L90+0x180>)
 8005f50:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 8005f52:	4b3b      	ldr	r3, [pc, #236]	; (8006040 <rotate_L90+0x160>)
 8005f54:	edd3 7a00 	vldr	s15, [r3]
 8005f58:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006058 <rotate_L90+0x178>
 8005f5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f60:	ee16 0a90 	vmov	r0, s13
 8005f64:	f7fa fae8 	bl	8000538 <__aeabi_f2d>
 8005f68:	a333      	add	r3, pc, #204	; (adr r3, 8006038 <rotate_L90+0x158>)
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	f7fa fb3b 	bl	80005e8 <__aeabi_dmul>
 8005f72:	4603      	mov	r3, r0
 8005f74:	460c      	mov	r4, r1
 8005f76:	4618      	mov	r0, r3
 8005f78:	4621      	mov	r1, r4
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	4b37      	ldr	r3, [pc, #220]	; (800605c <rotate_L90+0x17c>)
 8005f80:	f7fa fb32 	bl	80005e8 <__aeabi_dmul>
 8005f84:	4603      	mov	r3, r0
 8005f86:	460c      	mov	r4, r1
 8005f88:	4618      	mov	r0, r3
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f94:	f7fa fc52 	bl	800083c <__aeabi_ddiv>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	f7fa fdfa 	bl	8000b98 <__aeabi_d2f>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	4b2f      	ldr	r3, [pc, #188]	; (8006064 <rotate_L90+0x184>)
 8005fa8:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005faa:	f7fe fe8d 	bl	8004cc8 <drive_start>
	control_stop();
 8005fae:	f7fe fef5 	bl	8004d9c <control_stop>
	while(degree_z < target_degree_z+80);
 8005fb2:	bf00      	nop
 8005fb4:	4b2c      	ldr	r3, [pc, #176]	; (8006068 <rotate_L90+0x188>)
 8005fb6:	edd3 7a00 	vldr	s15, [r3]
 8005fba:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800606c <rotate_L90+0x18c>
 8005fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fc2:	4b2b      	ldr	r3, [pc, #172]	; (8006070 <rotate_L90+0x190>)
 8005fc4:	edd3 7a00 	vldr	s15, [r3]
 8005fc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fd0:	dcf0      	bgt.n	8005fb4 <rotate_L90+0xd4>

	accel_l = 30000;
 8005fd2:	4b1d      	ldr	r3, [pc, #116]	; (8006048 <rotate_L90+0x168>)
 8005fd4:	4a27      	ldr	r2, [pc, #156]	; (8006074 <rotate_L90+0x194>)
 8005fd6:	601a      	str	r2, [r3, #0]
	accel_r = -30000;
 8005fd8:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <rotate_L90+0x170>)
 8005fda:	4a27      	ldr	r2, [pc, #156]	; (8006078 <rotate_L90+0x198>)
 8005fdc:	601a      	str	r2, [r3, #0]
	speed_max_l = -100;
 8005fde:	4b27      	ldr	r3, [pc, #156]	; (800607c <rotate_L90+0x19c>)
 8005fe0:	4a27      	ldr	r2, [pc, #156]	; (8006080 <rotate_L90+0x1a0>)
 8005fe2:	601a      	str	r2, [r3, #0]
	speed_min_r = 100;
 8005fe4:	4b27      	ldr	r3, [pc, #156]	; (8006084 <rotate_L90+0x1a4>)
 8005fe6:	4a28      	ldr	r2, [pc, #160]	; (8006088 <rotate_L90+0x1a8>)
 8005fe8:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 8005fea:	bf00      	nop
 8005fec:	4b1e      	ldr	r3, [pc, #120]	; (8006068 <rotate_L90+0x188>)
 8005fee:	edd3 7a00 	vldr	s15, [r3]
 8005ff2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800608c <rotate_L90+0x1ac>
 8005ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ffa:	4b1d      	ldr	r3, [pc, #116]	; (8006070 <rotate_L90+0x190>)
 8005ffc:	edd3 7a00 	vldr	s15, [r3]
 8006000:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006008:	dcf0      	bgt.n	8005fec <rotate_L90+0x10c>

	if(!MF.FLAG.XDIR){
 800600a:	4b21      	ldr	r3, [pc, #132]	; (8006090 <rotate_L90+0x1b0>)
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d104      	bne.n	8006022 <rotate_L90+0x142>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 8006018:	2101      	movs	r1, #1
 800601a:	20ff      	movs	r0, #255	; 0xff
 800601c:	f007 fac4 	bl	800d5a8 <turn_dir>
 8006020:	e003      	b.n	800602a <rotate_L90+0x14a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 8006022:	2103      	movs	r1, #3
 8006024:	20fe      	movs	r0, #254	; 0xfe
 8006026:	f007 fabf 	bl	800d5a8 <turn_dir>
	}
	drive_stop();
 800602a:	f7fe fe7b 	bl	8004d24 <drive_stop>
}
 800602e:	bf00      	nop
 8006030:	bd98      	pop	{r3, r4, r7, pc}
 8006032:	bf00      	nop
 8006034:	f3af 8000 	nop.w
 8006038:	54442d18 	.word	0x54442d18
 800603c:	400921fb 	.word	0x400921fb
 8006040:	200001e0 	.word	0x200001e0
 8006044:	44480000 	.word	0x44480000
 8006048:	20000da0 	.word	0x20000da0
 800604c:	c53b8000 	.word	0xc53b8000
 8006050:	20000b20 	.word	0x20000b20
 8006054:	453b8000 	.word	0x453b8000
 8006058:	43340000 	.word	0x43340000
 800605c:	40508000 	.word	0x40508000
 8006060:	20000b94 	.word	0x20000b94
 8006064:	200001dc 	.word	0x200001dc
 8006068:	20000c40 	.word	0x20000c40
 800606c:	42a00000 	.word	0x42a00000
 8006070:	20000b9c 	.word	0x20000b9c
 8006074:	46ea6000 	.word	0x46ea6000
 8006078:	c6ea6000 	.word	0xc6ea6000
 800607c:	200007b4 	.word	0x200007b4
 8006080:	c2c80000 	.word	0xc2c80000
 8006084:	20000fb0 	.word	0x20000fb0
 8006088:	42c80000 	.word	0x42c80000
 800608c:	42b40000 	.word	0x42b40000
 8006090:	20000fac 	.word	0x20000fac
 8006094:	00000000 	.word	0x00000000

08006098 <rotate_180>:
//rotate_180
// 180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 8006098:	b598      	push	{r3, r4, r7, lr}
 800609a:	af00      	add	r7, sp, #0

	full_led_write(GREEN);
 800609c:	2002      	movs	r0, #2
 800609e:	f009 f853 	bl	800f148 <full_led_write>
	target_omega_z = 800;
 80060a2:	4b55      	ldr	r3, [pc, #340]	; (80061f8 <rotate_180+0x160>)
 80060a4:	4a55      	ldr	r2, [pc, #340]	; (80061fc <rotate_180+0x164>)
 80060a6:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 80060a8:	4b55      	ldr	r3, [pc, #340]	; (8006200 <rotate_180+0x168>)
 80060aa:	4a56      	ldr	r2, [pc, #344]	; (8006204 <rotate_180+0x16c>)
 80060ac:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 80060ae:	4b56      	ldr	r3, [pc, #344]	; (8006208 <rotate_180+0x170>)
 80060b0:	4a56      	ldr	r2, [pc, #344]	; (800620c <rotate_180+0x174>)
 80060b2:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 80060b4:	4b50      	ldr	r3, [pc, #320]	; (80061f8 <rotate_180+0x160>)
 80060b6:	edd3 7a00 	vldr	s15, [r3]
 80060ba:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006210 <rotate_180+0x178>
 80060be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80060c2:	ee16 0a90 	vmov	r0, s13
 80060c6:	f7fa fa37 	bl	8000538 <__aeabi_f2d>
 80060ca:	a349      	add	r3, pc, #292	; (adr r3, 80061f0 <rotate_180+0x158>)
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	f7fa fa8a 	bl	80005e8 <__aeabi_dmul>
 80060d4:	4603      	mov	r3, r0
 80060d6:	460c      	mov	r4, r1
 80060d8:	4618      	mov	r0, r3
 80060da:	4621      	mov	r1, r4
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	4b4c      	ldr	r3, [pc, #304]	; (8006214 <rotate_180+0x17c>)
 80060e2:	f7fa fa81 	bl	80005e8 <__aeabi_dmul>
 80060e6:	4603      	mov	r3, r0
 80060e8:	460c      	mov	r4, r1
 80060ea:	4618      	mov	r0, r3
 80060ec:	4621      	mov	r1, r4
 80060ee:	f04f 0200 	mov.w	r2, #0
 80060f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060f6:	f7fa fba1 	bl	800083c <__aeabi_ddiv>
 80060fa:	4603      	mov	r3, r0
 80060fc:	460c      	mov	r4, r1
 80060fe:	4618      	mov	r0, r3
 8006100:	4621      	mov	r1, r4
 8006102:	f7fa fd49 	bl	8000b98 <__aeabi_d2f>
 8006106:	4602      	mov	r2, r0
 8006108:	4b43      	ldr	r3, [pc, #268]	; (8006218 <rotate_180+0x180>)
 800610a:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 800610c:	4b3a      	ldr	r3, [pc, #232]	; (80061f8 <rotate_180+0x160>)
 800610e:	edd3 7a00 	vldr	s15, [r3]
 8006112:	eef1 7a67 	vneg.f32	s15, s15
 8006116:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8006210 <rotate_180+0x178>
 800611a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800611e:	ee16 0a90 	vmov	r0, s13
 8006122:	f7fa fa09 	bl	8000538 <__aeabi_f2d>
 8006126:	a332      	add	r3, pc, #200	; (adr r3, 80061f0 <rotate_180+0x158>)
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	f7fa fa5c 	bl	80005e8 <__aeabi_dmul>
 8006130:	4603      	mov	r3, r0
 8006132:	460c      	mov	r4, r1
 8006134:	4618      	mov	r0, r3
 8006136:	4621      	mov	r1, r4
 8006138:	f04f 0200 	mov.w	r2, #0
 800613c:	4b35      	ldr	r3, [pc, #212]	; (8006214 <rotate_180+0x17c>)
 800613e:	f7fa fa53 	bl	80005e8 <__aeabi_dmul>
 8006142:	4603      	mov	r3, r0
 8006144:	460c      	mov	r4, r1
 8006146:	4618      	mov	r0, r3
 8006148:	4621      	mov	r1, r4
 800614a:	f04f 0200 	mov.w	r2, #0
 800614e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006152:	f7fa fb73 	bl	800083c <__aeabi_ddiv>
 8006156:	4603      	mov	r3, r0
 8006158:	460c      	mov	r4, r1
 800615a:	4618      	mov	r0, r3
 800615c:	4621      	mov	r1, r4
 800615e:	f7fa fd1b 	bl	8000b98 <__aeabi_d2f>
 8006162:	4602      	mov	r2, r0
 8006164:	4b2d      	ldr	r3, [pc, #180]	; (800621c <rotate_180+0x184>)
 8006166:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8006168:	f7fe fdae 	bl	8004cc8 <drive_start>
	control_stop();
 800616c:	f7fe fe16 	bl	8004d9c <control_stop>
	while(degree_z > target_degree_z-170);
 8006170:	bf00      	nop
 8006172:	4b2b      	ldr	r3, [pc, #172]	; (8006220 <rotate_180+0x188>)
 8006174:	edd3 7a00 	vldr	s15, [r3]
 8006178:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006224 <rotate_180+0x18c>
 800617c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006180:	4b29      	ldr	r3, [pc, #164]	; (8006228 <rotate_180+0x190>)
 8006182:	edd3 7a00 	vldr	s15, [r3]
 8006186:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800618a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800618e:	d4f0      	bmi.n	8006172 <rotate_180+0xda>

	accel_l = -30000;
 8006190:	4b1b      	ldr	r3, [pc, #108]	; (8006200 <rotate_180+0x168>)
 8006192:	4a26      	ldr	r2, [pc, #152]	; (800622c <rotate_180+0x194>)
 8006194:	601a      	str	r2, [r3, #0]
	accel_r = 30000;
 8006196:	4b1c      	ldr	r3, [pc, #112]	; (8006208 <rotate_180+0x170>)
 8006198:	4a25      	ldr	r2, [pc, #148]	; (8006230 <rotate_180+0x198>)
 800619a:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 800619c:	4b25      	ldr	r3, [pc, #148]	; (8006234 <rotate_180+0x19c>)
 800619e:	4a26      	ldr	r2, [pc, #152]	; (8006238 <rotate_180+0x1a0>)
 80061a0:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 80061a2:	4b26      	ldr	r3, [pc, #152]	; (800623c <rotate_180+0x1a4>)
 80061a4:	4a26      	ldr	r2, [pc, #152]	; (8006240 <rotate_180+0x1a8>)
 80061a6:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 80061a8:	bf00      	nop
 80061aa:	4b1d      	ldr	r3, [pc, #116]	; (8006220 <rotate_180+0x188>)
 80061ac:	edd3 7a00 	vldr	s15, [r3]
 80061b0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006210 <rotate_180+0x178>
 80061b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80061b8:	4b1b      	ldr	r3, [pc, #108]	; (8006228 <rotate_180+0x190>)
 80061ba:	edd3 7a00 	vldr	s15, [r3]
 80061be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c6:	d4f0      	bmi.n	80061aa <rotate_180+0x112>

	if(!MF.FLAG.XDIR){
 80061c8:	4b1e      	ldr	r3, [pc, #120]	; (8006244 <rotate_180+0x1ac>)
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d104      	bne.n	80061e0 <rotate_180+0x148>
		turn_dir(DIR_TURN_180, 1);									//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 80061d6:	2101      	movs	r1, #1
 80061d8:	2002      	movs	r0, #2
 80061da:	f007 f9e5 	bl	800d5a8 <turn_dir>
 80061de:	e003      	b.n	80061e8 <rotate_180+0x150>
	}else{
		turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 80061e0:	2103      	movs	r1, #3
 80061e2:	2004      	movs	r0, #4
 80061e4:	f007 f9e0 	bl	800d5a8 <turn_dir>
	}
	drive_stop();
 80061e8:	f7fe fd9c 	bl	8004d24 <drive_stop>

}
 80061ec:	bf00      	nop
 80061ee:	bd98      	pop	{r3, r4, r7, pc}
 80061f0:	54442d18 	.word	0x54442d18
 80061f4:	400921fb 	.word	0x400921fb
 80061f8:	200001e0 	.word	0x200001e0
 80061fc:	44480000 	.word	0x44480000
 8006200:	20000da0 	.word	0x20000da0
 8006204:	453b8000 	.word	0x453b8000
 8006208:	20000b20 	.word	0x20000b20
 800620c:	c53b8000 	.word	0xc53b8000
 8006210:	43340000 	.word	0x43340000
 8006214:	40508000 	.word	0x40508000
 8006218:	200007b4 	.word	0x200007b4
 800621c:	20000fb0 	.word	0x20000fb0
 8006220:	20000c40 	.word	0x20000c40
 8006224:	432a0000 	.word	0x432a0000
 8006228:	20000b9c 	.word	0x20000b9c
 800622c:	c6ea6000 	.word	0xc6ea6000
 8006230:	46ea6000 	.word	0x46ea6000
 8006234:	20000b94 	.word	0x20000b94
 8006238:	42c80000 	.word	0x42c80000
 800623c:	200001dc 	.word	0x200001dc
 8006240:	c2c80000 	.word	0xc2c80000
 8006244:	20000fac 	.word	0x20000fac

08006248 <slalom_R90>:
//slalom_R90
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 800624e:	2005      	movs	r0, #5
 8006250:	f008 ff7a 	bl	800f148 <full_led_write>
	if(run_mode == LOW){
 8006254:	4b4e      	ldr	r3, [pc, #312]	; (8006390 <slalom_R90+0x148>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b01      	cmp	r3, #1
 800625c:	d12a      	bne.n	80062b4 <slalom_R90+0x6c>
		slalomF(10000, SPEED_LOW, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 800625e:	23fa      	movs	r3, #250	; 0xfa
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006266:	2219      	movs	r2, #25
 8006268:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800626c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006270:	f7ff f886 	bl	8005380 <slalomF>
		slalomR(-SLALOM_DEGACCEL, -SLALOM_OMEGA, -90, SPEED_LOW);
 8006274:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006278:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800627c:	4945      	ldr	r1, [pc, #276]	; (8006394 <slalom_R90+0x14c>)
 800627e:	4846      	ldr	r0, [pc, #280]	; (8006398 <slalom_R90+0x150>)
 8006280:	f7ff f8fa 	bl	8005478 <slalomR>

		if(!MF.FLAG.XDIR){
 8006284:	4b45      	ldr	r3, [pc, #276]	; (800639c <slalom_R90+0x154>)
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d104      	bne.n	800629c <slalom_R90+0x54>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006292:	2101      	movs	r1, #1
 8006294:	2001      	movs	r0, #1
 8006296:	f007 f987 	bl	800d5a8 <turn_dir>
 800629a:	e003      	b.n	80062a4 <slalom_R90+0x5c>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800629c:	2103      	movs	r1, #3
 800629e:	2002      	movs	r0, #2
 80062a0:	f007 f982 	bl	800d5a8 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, SLALOM_OFFSET_B);
 80062a4:	2219      	movs	r2, #25
 80062a6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80062aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80062ae:	f7ff fa07 	bl	80056c0 <slalomB>
 80062b2:	e060      	b.n	8006376 <slalom_R90+0x12e>
	}else if(run_mode == MIDDLE){
 80062b4:	4b36      	ldr	r3, [pc, #216]	; (8006390 <slalom_R90+0x148>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d12b      	bne.n	8006316 <slalom_R90+0xce>
		slalomF(10000, SPEED_MIDDLE, SLALOM_M_OFFSET_F, SLALOM_M_WALL_FL, SLALOM_M_WALL_FR);
 80062be:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80062c8:	221c      	movs	r2, #28
 80062ca:	f44f 7116 	mov.w	r1, #600	; 0x258
 80062ce:	f242 7010 	movw	r0, #10000	; 0x2710
 80062d2:	f7ff f855 	bl	8005380 <slalomF>
		slalomR(-SLALOM_M_DEGACCEL, -SLALOM_M_OMEGA, -90, SPEED_MIDDLE);
 80062d6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80062da:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80062de:	4930      	ldr	r1, [pc, #192]	; (80063a0 <slalom_R90+0x158>)
 80062e0:	4830      	ldr	r0, [pc, #192]	; (80063a4 <slalom_R90+0x15c>)
 80062e2:	f7ff f8c9 	bl	8005478 <slalomR>

		if(!MF.FLAG.XDIR){
 80062e6:	4b2d      	ldr	r3, [pc, #180]	; (800639c <slalom_R90+0x154>)
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d104      	bne.n	80062fe <slalom_R90+0xb6>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80062f4:	2101      	movs	r1, #1
 80062f6:	2001      	movs	r0, #1
 80062f8:	f007 f956 	bl	800d5a8 <turn_dir>
 80062fc:	e003      	b.n	8006306 <slalom_R90+0xbe>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80062fe:	2103      	movs	r1, #3
 8006300:	2002      	movs	r0, #2
 8006302:	f007 f951 	bl	800d5a8 <turn_dir>
		}
		slalomB(10000, SPEED_MIDDLE, SLALOM_M_OFFSET_B);
 8006306:	2232      	movs	r2, #50	; 0x32
 8006308:	f44f 7116 	mov.w	r1, #600	; 0x258
 800630c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006310:	f7ff f9d6 	bl	80056c0 <slalomB>
 8006314:	e02f      	b.n	8006376 <slalom_R90+0x12e>
	}else if(run_mode == HIGH){
 8006316:	4b1e      	ldr	r3, [pc, #120]	; (8006390 <slalom_R90+0x148>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b03      	cmp	r3, #3
 800631e:	d12a      	bne.n	8006376 <slalom_R90+0x12e>
		slalomF(10000, SPEED_HIGH, SLALOM_H_OFFSET_F, SLALOM_H_WALL_FL, SLALOM_H_WALL_FR);
 8006320:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	f44f 7348 	mov.w	r3, #800	; 0x320
 800632a:	220a      	movs	r2, #10
 800632c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006330:	f242 7010 	movw	r0, #10000	; 0x2710
 8006334:	f7ff f824 	bl	8005380 <slalomF>
		slalomR(-SLALOM_H_DEGACCEL, -SLALOM_H_OMEGA, -90, SPEED_HIGH);
 8006338:	f44f 7348 	mov.w	r3, #800	; 0x320
 800633c:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006340:	4919      	ldr	r1, [pc, #100]	; (80063a8 <slalom_R90+0x160>)
 8006342:	481a      	ldr	r0, [pc, #104]	; (80063ac <slalom_R90+0x164>)
 8006344:	f7ff f898 	bl	8005478 <slalomR>

		if(!MF.FLAG.XDIR){
 8006348:	4b14      	ldr	r3, [pc, #80]	; (800639c <slalom_R90+0x154>)
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d104      	bne.n	8006360 <slalom_R90+0x118>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006356:	2101      	movs	r1, #1
 8006358:	2001      	movs	r0, #1
 800635a:	f007 f925 	bl	800d5a8 <turn_dir>
 800635e:	e003      	b.n	8006368 <slalom_R90+0x120>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006360:	2103      	movs	r1, #3
 8006362:	2002      	movs	r0, #2
 8006364:	f007 f920 	bl	800d5a8 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH, SLALOM_H_OFFSET_B);
 8006368:	2234      	movs	r2, #52	; 0x34
 800636a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800636e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006372:	f7ff f9a5 	bl	80056c0 <slalomB>
	}
	if(!MF.FLAG.SCND)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006376:	4b09      	ldr	r3, [pc, #36]	; (800639c <slalom_R90+0x154>)
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <slalom_R90+0x140>
 8006384:	f008 fe6c 	bl	800f060 <get_wall_info>
}
 8006388:	bf00      	nop
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	2000048e 	.word	0x2000048e
 8006394:	fffffdda 	.word	0xfffffdda
 8006398:	fffff060 	.word	0xfffff060
 800639c:	20000fac 	.word	0x20000fac
 80063a0:	fffffc7c 	.word	0xfffffc7c
 80063a4:	ffffd120 	.word	0xffffd120
 80063a8:	fffffce0 	.word	0xfffffce0
 80063ac:	ffffb1e0 	.word	0xffffb1e0

080063b0 <slalom_L90>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80063b6:	2006      	movs	r0, #6
 80063b8:	f008 fec6 	bl	800f148 <full_led_write>
	if(run_mode == LOW){
 80063bc:	4b4f      	ldr	r3, [pc, #316]	; (80064fc <slalom_L90+0x14c>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d12b      	bne.n	800641e <slalom_L90+0x6e>
		slalomF(10000, SPEED_LOW, SLALOM_OFFSET_F, SLALOM_WALL_FL, SLALOM_WALL_FR);
 80063c6:	23fa      	movs	r3, #250	; 0xfa
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80063ce:	2219      	movs	r2, #25
 80063d0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80063d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80063d8:	f7fe ffd2 	bl	8005380 <slalomF>
		slalomR(SLALOM_DEGACCEL, SLALOM_OMEGA, 90, SPEED_LOW);
 80063dc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80063e0:	225a      	movs	r2, #90	; 0x5a
 80063e2:	f240 2126 	movw	r1, #550	; 0x226
 80063e6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80063ea:	f7ff f845 	bl	8005478 <slalomR>

		if(!MF.FLAG.XDIR){
 80063ee:	4b44      	ldr	r3, [pc, #272]	; (8006500 <slalom_L90+0x150>)
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d104      	bne.n	8006406 <slalom_L90+0x56>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80063fc:	2101      	movs	r1, #1
 80063fe:	20ff      	movs	r0, #255	; 0xff
 8006400:	f007 f8d2 	bl	800d5a8 <turn_dir>
 8006404:	e003      	b.n	800640e <slalom_L90+0x5e>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006406:	2103      	movs	r1, #3
 8006408:	20fe      	movs	r0, #254	; 0xfe
 800640a:	f007 f8cd 	bl	800d5a8 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, SLALOM_OFFSET_B);
 800640e:	2219      	movs	r2, #25
 8006410:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006414:	f242 7010 	movw	r0, #10000	; 0x2710
 8006418:	f7ff f952 	bl	80056c0 <slalomB>
 800641c:	e062      	b.n	80064e4 <slalom_L90+0x134>
	}else if(run_mode == MIDDLE){
 800641e:	4b37      	ldr	r3, [pc, #220]	; (80064fc <slalom_L90+0x14c>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d12c      	bne.n	8006482 <slalom_L90+0xd2>
		slalomF(10000, SPEED_MIDDLE, SLALOM_M_OFFSET_F, SLALOM_M_WALL_FL, SLALOM_M_WALL_FR);
 8006428:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006432:	221c      	movs	r2, #28
 8006434:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006438:	f242 7010 	movw	r0, #10000	; 0x2710
 800643c:	f7fe ffa0 	bl	8005380 <slalomF>
		slalomR(SLALOM_M_DEGACCEL, SLALOM_M_OMEGA, 90, SPEED_MIDDLE);
 8006440:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006444:	225a      	movs	r2, #90	; 0x5a
 8006446:	f44f 7161 	mov.w	r1, #900	; 0x384
 800644a:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 800644e:	f7ff f813 	bl	8005478 <slalomR>

		if(!MF.FLAG.XDIR){
 8006452:	4b2b      	ldr	r3, [pc, #172]	; (8006500 <slalom_L90+0x150>)
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d104      	bne.n	800646a <slalom_L90+0xba>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8006460:	2101      	movs	r1, #1
 8006462:	20ff      	movs	r0, #255	; 0xff
 8006464:	f007 f8a0 	bl	800d5a8 <turn_dir>
 8006468:	e003      	b.n	8006472 <slalom_L90+0xc2>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800646a:	2103      	movs	r1, #3
 800646c:	20fe      	movs	r0, #254	; 0xfe
 800646e:	f007 f89b 	bl	800d5a8 <turn_dir>
		}
		slalomB(10000, SPEED_MIDDLE, SLALOM_M_OFFSET_B);
 8006472:	2232      	movs	r2, #50	; 0x32
 8006474:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006478:	f242 7010 	movw	r0, #10000	; 0x2710
 800647c:	f7ff f920 	bl	80056c0 <slalomB>
 8006480:	e030      	b.n	80064e4 <slalom_L90+0x134>
	}else if(run_mode == HIGH){
 8006482:	4b1e      	ldr	r3, [pc, #120]	; (80064fc <slalom_L90+0x14c>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b03      	cmp	r3, #3
 800648a:	d12b      	bne.n	80064e4 <slalom_L90+0x134>
		slalomF(10000, SPEED_HIGH, SLALOM_H_OFFSET_F, SLALOM_H_WALL_FL, SLALOM_H_WALL_FR);
 800648c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006496:	220a      	movs	r2, #10
 8006498:	f44f 7148 	mov.w	r1, #800	; 0x320
 800649c:	f242 7010 	movw	r0, #10000	; 0x2710
 80064a0:	f7fe ff6e 	bl	8005380 <slalomF>
		slalomR(SLALOM_H_DEGACCEL, SLALOM_H_OMEGA, 90, SPEED_HIGH);
 80064a4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80064a8:	225a      	movs	r2, #90	; 0x5a
 80064aa:	f44f 7148 	mov.w	r1, #800	; 0x320
 80064ae:	f644 6020 	movw	r0, #20000	; 0x4e20
 80064b2:	f7fe ffe1 	bl	8005478 <slalomR>

		if(!MF.FLAG.XDIR){
 80064b6:	4b12      	ldr	r3, [pc, #72]	; (8006500 <slalom_L90+0x150>)
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d104      	bne.n	80064ce <slalom_L90+0x11e>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80064c4:	2101      	movs	r1, #1
 80064c6:	20ff      	movs	r0, #255	; 0xff
 80064c8:	f007 f86e 	bl	800d5a8 <turn_dir>
 80064cc:	e003      	b.n	80064d6 <slalom_L90+0x126>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80064ce:	2103      	movs	r1, #3
 80064d0:	20fe      	movs	r0, #254	; 0xfe
 80064d2:	f007 f869 	bl	800d5a8 <turn_dir>
		}
		slalomB(10000, SPEED_HIGH, SLALOM_H_OFFSET_B);
 80064d6:	2234      	movs	r2, #52	; 0x34
 80064d8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80064dc:	f242 7010 	movw	r0, #10000	; 0x2710
 80064e0:	f7ff f8ee 	bl	80056c0 <slalomB>
	}
	if(!MF.FLAG.SCND)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 80064e4:	4b06      	ldr	r3, [pc, #24]	; (8006500 <slalom_L90+0x150>)
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <slalom_L90+0x146>
 80064f2:	f008 fdb5 	bl	800f060 <get_wall_info>
}
 80064f6:	bf00      	nop
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	2000048e 	.word	0x2000048e
 8006500:	20000fac 	.word	0x20000fac

08006504 <Lslalom_R90>:
//Lslalom_R90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R90(void){
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 800650a:	2005      	movs	r0, #5
 800650c:	f008 fe1c 	bl	800f148 <full_led_write>
	if(run_mode == LOW){
 8006510:	4b32      	ldr	r3, [pc, #200]	; (80065dc <Lslalom_R90+0xd8>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b01      	cmp	r3, #1
 8006518:	d12c      	bne.n	8006574 <Lslalom_R90+0x70>
		slalomF(10000, SPEED_LOW, LSLALOM_OFFSET_F, NO_WALL, NO_WALL);
 800651a:	f241 3388 	movw	r3, #5000	; 0x1388
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	f241 3388 	movw	r3, #5000	; 0x1388
 8006524:	2232      	movs	r2, #50	; 0x32
 8006526:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800652a:	f242 7010 	movw	r0, #10000	; 0x2710
 800652e:	f7fe ff27 	bl	8005380 <slalomF>
		slalomR(-LSLALOM_DEGACCEL, -LSLALOM_OMEGA, -90, SPEED_LOW);
 8006532:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006536:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800653a:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 800653e:	4828      	ldr	r0, [pc, #160]	; (80065e0 <Lslalom_R90+0xdc>)
 8006540:	f7fe ff9a 	bl	8005478 <slalomR>

		if(!MF.FLAG.XDIR){
 8006544:	4b27      	ldr	r3, [pc, #156]	; (80065e4 <Lslalom_R90+0xe0>)
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d104      	bne.n	800655c <Lslalom_R90+0x58>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006552:	2101      	movs	r1, #1
 8006554:	2001      	movs	r0, #1
 8006556:	f007 f827 	bl	800d5a8 <turn_dir>
 800655a:	e003      	b.n	8006564 <Lslalom_R90+0x60>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800655c:	2103      	movs	r1, #3
 800655e:	2002      	movs	r0, #2
 8006560:	f007 f822 	bl	800d5a8 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LSLALOM_OFFSET_B);
 8006564:	2232      	movs	r2, #50	; 0x32
 8006566:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800656a:	f242 7010 	movw	r0, #10000	; 0x2710
 800656e:	f7ff f8a7 	bl	80056c0 <slalomB>
		}else{
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_HIGH, LSLALOM_H_OFFSET_B);
	}
}
 8006572:	e02f      	b.n	80065d4 <Lslalom_R90+0xd0>
	}else if(run_mode == HIGH){
 8006574:	4b19      	ldr	r3, [pc, #100]	; (80065dc <Lslalom_R90+0xd8>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b03      	cmp	r3, #3
 800657c:	d12a      	bne.n	80065d4 <Lslalom_R90+0xd0>
		slalomF(10000, SPEED_HIGH, LSLALOM_H_OFFSET_F, NO_WALL, NO_WALL);
 800657e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	f241 3388 	movw	r3, #5000	; 0x1388
 8006588:	223c      	movs	r2, #60	; 0x3c
 800658a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800658e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006592:	f7fe fef5 	bl	8005380 <slalomF>
		slalomR(-LSLALOM_H_DEGACCEL, -LSLALOM_H_OMEGA, -90, SPEED_HIGH);
 8006596:	f44f 7348 	mov.w	r3, #800	; 0x320
 800659a:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800659e:	4912      	ldr	r1, [pc, #72]	; (80065e8 <Lslalom_R90+0xe4>)
 80065a0:	4812      	ldr	r0, [pc, #72]	; (80065ec <Lslalom_R90+0xe8>)
 80065a2:	f7fe ff69 	bl	8005478 <slalomR>
		if(!MF.FLAG.XDIR){
 80065a6:	4b0f      	ldr	r3, [pc, #60]	; (80065e4 <Lslalom_R90+0xe0>)
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <Lslalom_R90+0xba>
			turn_dir(DIR_TURN_R90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80065b4:	2101      	movs	r1, #1
 80065b6:	2001      	movs	r0, #1
 80065b8:	f006 fff6 	bl	800d5a8 <turn_dir>
 80065bc:	e003      	b.n	80065c6 <Lslalom_R90+0xc2>
			turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80065be:	2103      	movs	r1, #3
 80065c0:	2002      	movs	r0, #2
 80065c2:	f006 fff1 	bl	800d5a8 <turn_dir>
		slalomB(10000, SPEED_HIGH, LSLALOM_H_OFFSET_B);
 80065c6:	223c      	movs	r2, #60	; 0x3c
 80065c8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80065cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80065d0:	f7ff f876 	bl	80056c0 <slalomB>
}
 80065d4:	bf00      	nop
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	2000048e 	.word	0x2000048e
 80065e0:	fffff830 	.word	0xfffff830
 80065e4:	20000fac 	.word	0x20000fac
 80065e8:	fffffda8 	.word	0xfffffda8
 80065ec:	ffffee6c 	.word	0xffffee6c

080065f0 <Lslalom_L90>:
//Lslalom_L90
// 大回りスラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L90(void){
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80065f6:	2006      	movs	r0, #6
 80065f8:	f008 fda6 	bl	800f148 <full_led_write>
	if(run_mode == LOW){
 80065fc:	4b32      	ldr	r3, [pc, #200]	; (80066c8 <Lslalom_L90+0xd8>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b01      	cmp	r3, #1
 8006604:	d12b      	bne.n	800665e <Lslalom_L90+0x6e>
		slalomF(10000, SPEED_LOW, LSLALOM_OFFSET_F, NO_WALL, NO_WALL);
 8006606:	f241 3388 	movw	r3, #5000	; 0x1388
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006610:	2232      	movs	r2, #50	; 0x32
 8006612:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006616:	f242 7010 	movw	r0, #10000	; 0x2710
 800661a:	f7fe feb1 	bl	8005380 <slalomF>
		slalomR(LSLALOM_DEGACCEL, LSLALOM_OMEGA, 90, SPEED_LOW);
 800661e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006622:	225a      	movs	r2, #90	; 0x5a
 8006624:	21c8      	movs	r1, #200	; 0xc8
 8006626:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800662a:	f7fe ff25 	bl	8005478 <slalomR>

		if(!MF.FLAG.XDIR){
 800662e:	4b27      	ldr	r3, [pc, #156]	; (80066cc <Lslalom_L90+0xdc>)
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d104      	bne.n	8006646 <Lslalom_L90+0x56>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800663c:	2101      	movs	r1, #1
 800663e:	20ff      	movs	r0, #255	; 0xff
 8006640:	f006 ffb2 	bl	800d5a8 <turn_dir>
 8006644:	e003      	b.n	800664e <Lslalom_L90+0x5e>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006646:	2103      	movs	r1, #3
 8006648:	20fe      	movs	r0, #254	; 0xfe
 800664a:	f006 ffad 	bl	800d5a8 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LSLALOM_OFFSET_B);
 800664e:	2232      	movs	r2, #50	; 0x32
 8006650:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006654:	f242 7010 	movw	r0, #10000	; 0x2710
 8006658:	f7ff f832 	bl	80056c0 <slalomB>
		}else{
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_HIGH, LSLALOM_H_OFFSET_B);
	}
}
 800665c:	e030      	b.n	80066c0 <Lslalom_L90+0xd0>
	}else if(run_mode == HIGH){
 800665e:	4b1a      	ldr	r3, [pc, #104]	; (80066c8 <Lslalom_L90+0xd8>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b03      	cmp	r3, #3
 8006666:	d12b      	bne.n	80066c0 <Lslalom_L90+0xd0>
		slalomF(10000, SPEED_HIGH, LSLALOM_H_OFFSET_F, NO_WALL, NO_WALL);
 8006668:	f241 3388 	movw	r3, #5000	; 0x1388
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006672:	223c      	movs	r2, #60	; 0x3c
 8006674:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006678:	f242 7010 	movw	r0, #10000	; 0x2710
 800667c:	f7fe fe80 	bl	8005380 <slalomF>
		slalomR(LSLALOM_H_DEGACCEL, LSLALOM_H_OMEGA, 90, SPEED_HIGH);
 8006680:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006684:	225a      	movs	r2, #90	; 0x5a
 8006686:	f44f 7116 	mov.w	r1, #600	; 0x258
 800668a:	f241 1094 	movw	r0, #4500	; 0x1194
 800668e:	f7fe fef3 	bl	8005478 <slalomR>
		if(!MF.FLAG.XDIR){
 8006692:	4b0e      	ldr	r3, [pc, #56]	; (80066cc <Lslalom_L90+0xdc>)
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d104      	bne.n	80066aa <Lslalom_L90+0xba>
			turn_dir(DIR_TURN_L90, 1);										//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80066a0:	2101      	movs	r1, #1
 80066a2:	20ff      	movs	r0, #255	; 0xff
 80066a4:	f006 ff80 	bl	800d5a8 <turn_dir>
 80066a8:	e003      	b.n	80066b2 <Lslalom_L90+0xc2>
			turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80066aa:	2103      	movs	r1, #3
 80066ac:	20fe      	movs	r0, #254	; 0xfe
 80066ae:	f006 ff7b 	bl	800d5a8 <turn_dir>
		slalomB(10000, SPEED_HIGH, LSLALOM_H_OFFSET_B);
 80066b2:	223c      	movs	r2, #60	; 0x3c
 80066b4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80066b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80066bc:	f7ff f800 	bl	80056c0 <slalomB>
}
 80066c0:	bf00      	nop
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	2000048e 	.word	0x2000048e
 80066cc:	20000fac 	.word	0x20000fac

080066d0 <Lslalom_R903>:
//Lslalom_R903
// スラロームで右に90度回転する High High Speed
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R903(void){
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 80066d6:	2005      	movs	r0, #5
 80066d8:	f008 fd36 	bl	800f148 <full_led_write>
	slalomF(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_F, NO_WALL, NO_WALL);
 80066dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80066e6:	222a      	movs	r2, #42	; 0x2a
 80066e8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80066ec:	f242 7010 	movw	r0, #10000	; 0x2710
 80066f0:	f7fe fe46 	bl	8005380 <slalomF>

	slalomR(-LSLALOM_H_H_DEGACCEL, -LSLALOM_H_H_OMEGA, -90, SPEED_HIGH_HIGH);
 80066f4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80066f8:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80066fc:	490e      	ldr	r1, [pc, #56]	; (8006738 <Lslalom_R903+0x68>)
 80066fe:	480f      	ldr	r0, [pc, #60]	; (800673c <Lslalom_R903+0x6c>)
 8006700:	f7fe feba 	bl	8005478 <slalomR>

	if(!MF.FLAG.XDIR){
 8006704:	4b0e      	ldr	r3, [pc, #56]	; (8006740 <Lslalom_R903+0x70>)
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d104      	bne.n	800671c <Lslalom_R903+0x4c>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006712:	2101      	movs	r1, #1
 8006714:	2001      	movs	r0, #1
 8006716:	f006 ff47 	bl	800d5a8 <turn_dir>
 800671a:	e003      	b.n	8006724 <Lslalom_R903+0x54>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800671c:	2103      	movs	r1, #3
 800671e:	2002      	movs	r0, #2
 8006720:	f006 ff42 	bl	800d5a8 <turn_dir>
	}

	slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_B);
 8006724:	222a      	movs	r2, #42	; 0x2a
 8006726:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800672a:	f242 7010 	movw	r0, #10000	; 0x2710
 800672e:	f7fe ffc7 	bl	80056c0 <slalomB>
}
 8006732:	bf00      	nop
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	fffffce0 	.word	0xfffffce0
 800673c:	ffffd8f0 	.word	0xffffd8f0
 8006740:	20000fac 	.word	0x20000fac

08006744 <Lslalom_L903>:
//Lslalom_L903
// 大回りスラロームで右に90度回転する High High Speed
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L903(void){
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 800674a:	2006      	movs	r0, #6
 800674c:	f008 fcfc 	bl	800f148 <full_led_write>
	slalomF(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_F, NO_WALL, NO_WALL);
 8006750:	f241 3388 	movw	r3, #5000	; 0x1388
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	f241 3388 	movw	r3, #5000	; 0x1388
 800675a:	222a      	movs	r2, #42	; 0x2a
 800675c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8006760:	f242 7010 	movw	r0, #10000	; 0x2710
 8006764:	f7fe fe0c 	bl	8005380 <slalomF>

	slalomR(LSLALOM_H_H_DEGACCEL, LSLALOM_H_H_OMEGA, 90, SPEED_HIGH_HIGH);
 8006768:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800676c:	225a      	movs	r2, #90	; 0x5a
 800676e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006772:	f242 7010 	movw	r0, #10000	; 0x2710
 8006776:	f7fe fe7f 	bl	8005478 <slalomR>

	if(!MF.FLAG.XDIR){
 800677a:	4b0d      	ldr	r3, [pc, #52]	; (80067b0 <Lslalom_L903+0x6c>)
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	d104      	bne.n	8006792 <Lslalom_L903+0x4e>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006788:	2101      	movs	r1, #1
 800678a:	20ff      	movs	r0, #255	; 0xff
 800678c:	f006 ff0c 	bl	800d5a8 <turn_dir>
 8006790:	e003      	b.n	800679a <Lslalom_L903+0x56>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006792:	2103      	movs	r1, #3
 8006794:	20fe      	movs	r0, #254	; 0xfe
 8006796:	f006 ff07 	bl	800d5a8 <turn_dir>
	}

	slalomB(10000, SPEED_HIGH_HIGH, LSLALOM_H_H_OFFSET_B);
 800679a:	222a      	movs	r2, #42	; 0x2a
 800679c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80067a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80067a4:	f7fe ff8c 	bl	80056c0 <slalomB>
}
 80067a8:	bf00      	nop
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20000fac 	.word	0x20000fac

080067b4 <Lslalom_R180>:
//Lslalom_R180
// スラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R180(void){
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af02      	add	r7, sp, #8
	full_led_write(GREEN);
 80067ba:	2002      	movs	r0, #2
 80067bc:	f008 fcc4 	bl	800f148 <full_led_write>
	if(run_mode == LOW){
 80067c0:	4b35      	ldr	r3, [pc, #212]	; (8006898 <Lslalom_R180+0xe4>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d12f      	bne.n	800682a <Lslalom_R180+0x76>
		slalomF(10000, SPEED_LOW, LROTATE_OFFSET_F, NO_WALL, NO_WALL);
 80067ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80067d4:	223c      	movs	r2, #60	; 0x3c
 80067d6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80067da:	f242 7010 	movw	r0, #10000	; 0x2710
 80067de:	f7fe fdcf 	bl	8005380 <slalomF>
		slalomR(-LROTATE_DEGACCEL, -LROTATE_OMEGA, -180, SPEED_LOW);
 80067e2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80067e6:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 80067ea:	492c      	ldr	r1, [pc, #176]	; (800689c <Lslalom_R180+0xe8>)
 80067ec:	482c      	ldr	r0, [pc, #176]	; (80068a0 <Lslalom_R180+0xec>)
 80067ee:	f7fe fe43 	bl	8005478 <slalomR>

		if(!MF.FLAG.XDIR){
 80067f2:	4b2c      	ldr	r3, [pc, #176]	; (80068a4 <Lslalom_R180+0xf0>)
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d108      	bne.n	8006812 <Lslalom_R180+0x5e>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006800:	2101      	movs	r1, #1
 8006802:	2001      	movs	r0, #1
 8006804:	f006 fed0 	bl	800d5a8 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006808:	2101      	movs	r1, #1
 800680a:	2001      	movs	r0, #1
 800680c:	f006 fecc 	bl	800d5a8 <turn_dir>
 8006810:	e003      	b.n	800681a <Lslalom_R180+0x66>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006812:	2103      	movs	r1, #3
 8006814:	2004      	movs	r0, #4
 8006816:	f006 fec7 	bl	800d5a8 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LROTATE_OFFSET_B);
 800681a:	223c      	movs	r2, #60	; 0x3c
 800681c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006820:	f242 7010 	movw	r0, #10000	; 0x2710
 8006824:	f7fe ff4c 	bl	80056c0 <slalomB>
		}else{
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_HIGH, LROTATE_H_OFFSET_B);
	}
}
 8006828:	e033      	b.n	8006892 <Lslalom_R180+0xde>
	}else if(run_mode == HIGH){
 800682a:	4b1b      	ldr	r3, [pc, #108]	; (8006898 <Lslalom_R180+0xe4>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b03      	cmp	r3, #3
 8006832:	d12e      	bne.n	8006892 <Lslalom_R180+0xde>
		slalomF(10000, SPEED_HIGH, LROTATE_H_OFFSET_F, NO_WALL, NO_WALL);
 8006834:	f241 3388 	movw	r3, #5000	; 0x1388
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	f241 3388 	movw	r3, #5000	; 0x1388
 800683e:	221e      	movs	r2, #30
 8006840:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006844:	f242 7010 	movw	r0, #10000	; 0x2710
 8006848:	f7fe fd9a 	bl	8005380 <slalomF>
		slalomR(-LROTATE_H_DEGACCEL, -LROTATE_H_OMEGA, -180, SPEED_HIGH);
 800684c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006850:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8006854:	4914      	ldr	r1, [pc, #80]	; (80068a8 <Lslalom_R180+0xf4>)
 8006856:	4815      	ldr	r0, [pc, #84]	; (80068ac <Lslalom_R180+0xf8>)
 8006858:	f7fe fe0e 	bl	8005478 <slalomR>
		if(!MF.FLAG.XDIR){
 800685c:	4b11      	ldr	r3, [pc, #68]	; (80068a4 <Lslalom_R180+0xf0>)
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d108      	bne.n	800687c <Lslalom_R180+0xc8>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800686a:	2101      	movs	r1, #1
 800686c:	2001      	movs	r0, #1
 800686e:	f006 fe9b 	bl	800d5a8 <turn_dir>
			turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006872:	2101      	movs	r1, #1
 8006874:	2001      	movs	r0, #1
 8006876:	f006 fe97 	bl	800d5a8 <turn_dir>
 800687a:	e003      	b.n	8006884 <Lslalom_R180+0xd0>
			turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800687c:	2103      	movs	r1, #3
 800687e:	2004      	movs	r0, #4
 8006880:	f006 fe92 	bl	800d5a8 <turn_dir>
		slalomB(10000, SPEED_HIGH, LROTATE_H_OFFSET_B);
 8006884:	221e      	movs	r2, #30
 8006886:	f44f 7148 	mov.w	r1, #800	; 0x320
 800688a:	f242 7010 	movw	r0, #10000	; 0x2710
 800688e:	f7fe ff17 	bl	80056c0 <slalomB>
}
 8006892:	bf00      	nop
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	2000048e 	.word	0x2000048e
 800689c:	fffffefc 	.word	0xfffffefc
 80068a0:	fffff830 	.word	0xfffff830
 80068a4:	20000fac 	.word	0x20000fac
 80068a8:	fffffda8 	.word	0xfffffda8
 80068ac:	fffff448 	.word	0xfffff448

080068b0 <Lslalom_L180>:
//Lslalom_L180
// 大回りスラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L180(void){
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af02      	add	r7, sp, #8
	full_led_write(GREEN);
 80068b6:	2002      	movs	r0, #2
 80068b8:	f008 fc46 	bl	800f148 <full_led_write>
	if(run_mode == LOW){
 80068bc:	4b36      	ldr	r3, [pc, #216]	; (8006998 <Lslalom_L180+0xe8>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d130      	bne.n	8006928 <Lslalom_L180+0x78>
		slalomF(10000, SPEED_LOW, LROTATE_OFFSET_F, NO_WALL, NO_WALL);
 80068c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80068d0:	223c      	movs	r2, #60	; 0x3c
 80068d2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80068d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80068da:	f7fe fd51 	bl	8005380 <slalomF>
		slalomR(LROTATE_DEGACCEL, LROTATE_OMEGA, 180, SPEED_LOW);
 80068de:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80068e2:	22b4      	movs	r2, #180	; 0xb4
 80068e4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80068e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80068ec:	f7fe fdc4 	bl	8005478 <slalomR>

		if(!MF.FLAG.XDIR){
 80068f0:	4b2a      	ldr	r3, [pc, #168]	; (800699c <Lslalom_L180+0xec>)
 80068f2:	881b      	ldrh	r3, [r3, #0]
 80068f4:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d108      	bne.n	8006910 <Lslalom_L180+0x60>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80068fe:	2101      	movs	r1, #1
 8006900:	20ff      	movs	r0, #255	; 0xff
 8006902:	f006 fe51 	bl	800d5a8 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006906:	2101      	movs	r1, #1
 8006908:	20ff      	movs	r0, #255	; 0xff
 800690a:	f006 fe4d 	bl	800d5a8 <turn_dir>
 800690e:	e003      	b.n	8006918 <Lslalom_L180+0x68>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006910:	2103      	movs	r1, #3
 8006912:	20fc      	movs	r0, #252	; 0xfc
 8006914:	f006 fe48 	bl	800d5a8 <turn_dir>
		}
		slalomB(10000, SPEED_LOW, LROTATE_OFFSET_B);
 8006918:	223c      	movs	r2, #60	; 0x3c
 800691a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800691e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006922:	f7fe fecd 	bl	80056c0 <slalomB>
		}else{
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
		}
		slalomB(10000, SPEED_HIGH, LROTATE_H_OFFSET_B);
	}
}
 8006926:	e034      	b.n	8006992 <Lslalom_L180+0xe2>
	}else if(run_mode == HIGH){
 8006928:	4b1b      	ldr	r3, [pc, #108]	; (8006998 <Lslalom_L180+0xe8>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b03      	cmp	r3, #3
 8006930:	d12f      	bne.n	8006992 <Lslalom_L180+0xe2>
		slalomF(10000, SPEED_HIGH, LROTATE_H_OFFSET_F, NO_WALL, NO_WALL);
 8006932:	f241 3388 	movw	r3, #5000	; 0x1388
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	f241 3388 	movw	r3, #5000	; 0x1388
 800693c:	221e      	movs	r2, #30
 800693e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006942:	f242 7010 	movw	r0, #10000	; 0x2710
 8006946:	f7fe fd1b 	bl	8005380 <slalomF>
		slalomR(LROTATE_H_DEGACCEL, LROTATE_H_OMEGA, 180, SPEED_HIGH);
 800694a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800694e:	22b4      	movs	r2, #180	; 0xb4
 8006950:	f44f 7116 	mov.w	r1, #600	; 0x258
 8006954:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006958:	f7fe fd8e 	bl	8005478 <slalomR>
		if(!MF.FLAG.XDIR){
 800695c:	4b0f      	ldr	r3, [pc, #60]	; (800699c <Lslalom_L180+0xec>)
 800695e:	881b      	ldrh	r3, [r3, #0]
 8006960:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d108      	bne.n	800697c <Lslalom_L180+0xcc>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800696a:	2101      	movs	r1, #1
 800696c:	20ff      	movs	r0, #255	; 0xff
 800696e:	f006 fe1b 	bl	800d5a8 <turn_dir>
			turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006972:	2101      	movs	r1, #1
 8006974:	20ff      	movs	r0, #255	; 0xff
 8006976:	f006 fe17 	bl	800d5a8 <turn_dir>
 800697a:	e003      	b.n	8006984 <Lslalom_L180+0xd4>
			turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800697c:	2103      	movs	r1, #3
 800697e:	20fc      	movs	r0, #252	; 0xfc
 8006980:	f006 fe12 	bl	800d5a8 <turn_dir>
		slalomB(10000, SPEED_HIGH, LROTATE_H_OFFSET_B);
 8006984:	221e      	movs	r2, #30
 8006986:	f44f 7148 	mov.w	r1, #800	; 0x320
 800698a:	f242 7010 	movw	r0, #10000	; 0x2710
 800698e:	f7fe fe97 	bl	80056c0 <slalomB>
}
 8006992:	bf00      	nop
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	2000048e 	.word	0x2000048e
 800699c:	20000fac 	.word	0x20000fac

080069a0 <v_R45>:
//v_R45
// 区画中心から右に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45(void){
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 80069a6:	2005      	movs	r0, #5
 80069a8:	f008 fbce 	bl	800f148 <full_led_write>
	if(run_mode == LOW){
 80069ac:	4b4d      	ldr	r3, [pc, #308]	; (8006ae4 <v_R45+0x144>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d147      	bne.n	8006a46 <v_R45+0xa6>
		if(!v_flag){
 80069b6:	4b4c      	ldr	r3, [pc, #304]	; (8006ae8 <v_R45+0x148>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10c      	bne.n	80069d8 <v_R45+0x38>
			slalomF(10000, SPEED_LOW, V_OFFSET_F, NO_WALL, NO_WALL);
 80069be:	f241 3388 	movw	r3, #5000	; 0x1388
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80069c8:	2228      	movs	r2, #40	; 0x28
 80069ca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80069ce:	f242 7010 	movw	r0, #10000	; 0x2710
 80069d2:	f7fe fcd5 	bl	8005380 <slalomF>
 80069d6:	e00b      	b.n	80069f0 <v_R45+0x50>
		}else{
			slalomF(10000, SPEED_LOW, V_OFFSET_B, NO_WALL, NO_WALL);
 80069d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	f241 3388 	movw	r3, #5000	; 0x1388
 80069e2:	2250      	movs	r2, #80	; 0x50
 80069e4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80069e8:	f242 7010 	movw	r0, #10000	; 0x2710
 80069ec:	f7fe fcc8 	bl	8005380 <slalomF>
		}
		slalomR(-V_DEGACCEL, -V_OMEGA, -45, SPEED_LOW);
 80069f0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80069f4:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 80069f8:	493c      	ldr	r1, [pc, #240]	; (8006aec <v_R45+0x14c>)
 80069fa:	483d      	ldr	r0, [pc, #244]	; (8006af0 <v_R45+0x150>)
 80069fc:	f7fe fd3c 	bl	8005478 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8006a00:	2103      	movs	r1, #3
 8006a02:	2001      	movs	r0, #1
 8006a04:	f006 fdd0 	bl	800d5a8 <turn_dir>
		v_flag = (v_flag+1)%2;
 8006a08:	4b37      	ldr	r3, [pc, #220]	; (8006ae8 <v_R45+0x148>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	bfb8      	it	lt
 8006a16:	425b      	neglt	r3, r3
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	4b33      	ldr	r3, [pc, #204]	; (8006ae8 <v_R45+0x148>)
 8006a1c:	701a      	strb	r2, [r3, #0]

		if(!v_flag){
 8006a1e:	4b32      	ldr	r3, [pc, #200]	; (8006ae8 <v_R45+0x148>)
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d107      	bne.n	8006a36 <v_R45+0x96>
			slalomB(10000, SPEED_LOW, V_OFFSET_F);
 8006a26:	2228      	movs	r2, #40	; 0x28
 8006a28:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006a2c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a30:	f7fe fe46 	bl	80056c0 <slalomB>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_F+10);
		}else{
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B);
		}
	}
}
 8006a34:	e053      	b.n	8006ade <v_R45+0x13e>
			slalomB(10000, SPEED_LOW, V_OFFSET_B);
 8006a36:	2250      	movs	r2, #80	; 0x50
 8006a38:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006a3c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a40:	f7fe fe3e 	bl	80056c0 <slalomB>
}
 8006a44:	e04b      	b.n	8006ade <v_R45+0x13e>
	}else if(run_mode == HIGH){
 8006a46:	4b27      	ldr	r3, [pc, #156]	; (8006ae4 <v_R45+0x144>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d146      	bne.n	8006ade <v_R45+0x13e>
		if(!v_flag){
 8006a50:	4b25      	ldr	r3, [pc, #148]	; (8006ae8 <v_R45+0x148>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10c      	bne.n	8006a72 <v_R45+0xd2>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_F, NO_WALL, NO_WALL);
 8006a58:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a62:	2217      	movs	r2, #23
 8006a64:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006a68:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a6c:	f7fe fc88 	bl	8005380 <slalomF>
 8006a70:	e00b      	b.n	8006a8a <v_R45+0xea>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_B-18, NO_WALL, NO_WALL);
 8006a72:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a7c:	223e      	movs	r2, #62	; 0x3e
 8006a7e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006a82:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a86:	f7fe fc7b 	bl	8005380 <slalomF>
		slalomR(-V_H_DEGACCEL, -V_H_OMEGA, -45, SPEED_HIGH);
 8006a8a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006a8e:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8006a92:	4918      	ldr	r1, [pc, #96]	; (8006af4 <v_R45+0x154>)
 8006a94:	4818      	ldr	r0, [pc, #96]	; (8006af8 <v_R45+0x158>)
 8006a96:	f7fe fcef 	bl	8005478 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8006a9a:	2103      	movs	r1, #3
 8006a9c:	2001      	movs	r0, #1
 8006a9e:	f006 fd83 	bl	800d5a8 <turn_dir>
		v_flag = (v_flag+1)%2;
 8006aa2:	4b11      	ldr	r3, [pc, #68]	; (8006ae8 <v_R45+0x148>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	bfb8      	it	lt
 8006ab0:	425b      	neglt	r3, r3
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	4b0c      	ldr	r3, [pc, #48]	; (8006ae8 <v_R45+0x148>)
 8006ab6:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 8006ab8:	4b0b      	ldr	r3, [pc, #44]	; (8006ae8 <v_R45+0x148>)
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d107      	bne.n	8006ad0 <v_R45+0x130>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_F+10);
 8006ac0:	2221      	movs	r2, #33	; 0x21
 8006ac2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006ac6:	f242 7010 	movw	r0, #10000	; 0x2710
 8006aca:	f7fe fdf9 	bl	80056c0 <slalomB>
}
 8006ace:	e006      	b.n	8006ade <v_R45+0x13e>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B);
 8006ad0:	2250      	movs	r2, #80	; 0x50
 8006ad2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006ad6:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ada:	f7fe fdf1 	bl	80056c0 <slalomB>
}
 8006ade:	bf00      	nop
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	2000048e 	.word	0x2000048e
 8006ae8:	20000b28 	.word	0x20000b28
 8006aec:	fffffed4 	.word	0xfffffed4
 8006af0:	fffff448 	.word	0xfffff448
 8006af4:	fffffe70 	.word	0xfffffe70
 8006af8:	ffffe0c0 	.word	0xffffe0c0

08006afc <v_L45>:
//v_L45
// 区画中心から左に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45(void){
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8006b02:	2006      	movs	r0, #6
 8006b04:	f008 fb20 	bl	800f148 <full_led_write>
	if(run_mode == LOW){
 8006b08:	4b4e      	ldr	r3, [pc, #312]	; (8006c44 <v_L45+0x148>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d148      	bne.n	8006ba4 <v_L45+0xa8>
		if(!v_flag){
 8006b12:	4b4d      	ldr	r3, [pc, #308]	; (8006c48 <v_L45+0x14c>)
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10c      	bne.n	8006b34 <v_L45+0x38>
			slalomF(10000, SPEED_LOW, V_OFFSET_F+15, NO_WALL, NO_WALL);
 8006b1a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	f241 3388 	movw	r3, #5000	; 0x1388
 8006b24:	2237      	movs	r2, #55	; 0x37
 8006b26:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006b2a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b2e:	f7fe fc27 	bl	8005380 <slalomF>
 8006b32:	e00b      	b.n	8006b4c <v_L45+0x50>
		}else{
			slalomF(10000, SPEED_LOW, V_OFFSET_B+5, NO_WALL, NO_WALL);
 8006b34:	f241 3388 	movw	r3, #5000	; 0x1388
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006b3e:	2255      	movs	r2, #85	; 0x55
 8006b40:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006b44:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b48:	f7fe fc1a 	bl	8005380 <slalomF>
		}
		slalomR(V_DEGACCEL, V_OMEGA, 55, SPEED_LOW);
 8006b4c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006b50:	2237      	movs	r2, #55	; 0x37
 8006b52:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006b56:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006b5a:	f7fe fc8d 	bl	8005478 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8006b5e:	2103      	movs	r1, #3
 8006b60:	20ff      	movs	r0, #255	; 0xff
 8006b62:	f006 fd21 	bl	800d5a8 <turn_dir>
		v_flag = (v_flag+1)%2;
 8006b66:	4b38      	ldr	r3, [pc, #224]	; (8006c48 <v_L45+0x14c>)
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	bfb8      	it	lt
 8006b74:	425b      	neglt	r3, r3
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	4b33      	ldr	r3, [pc, #204]	; (8006c48 <v_L45+0x14c>)
 8006b7a:	701a      	strb	r2, [r3, #0]

		if(!v_flag){
 8006b7c:	4b32      	ldr	r3, [pc, #200]	; (8006c48 <v_L45+0x14c>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d107      	bne.n	8006b94 <v_L45+0x98>
			slalomB(10000, SPEED_LOW, V_OFFSET_F+15);
 8006b84:	2237      	movs	r2, #55	; 0x37
 8006b86:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006b8a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b8e:	f7fe fd97 	bl	80056c0 <slalomB>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_F+35);
		}else{
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B+20);
		}
	}
}
 8006b92:	e054      	b.n	8006c3e <v_L45+0x142>
			slalomB(10000, SPEED_LOW, V_OFFSET_B+5);
 8006b94:	2255      	movs	r2, #85	; 0x55
 8006b96:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006b9a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b9e:	f7fe fd8f 	bl	80056c0 <slalomB>
}
 8006ba2:	e04c      	b.n	8006c3e <v_L45+0x142>
	}else if(run_mode == HIGH){
 8006ba4:	4b27      	ldr	r3, [pc, #156]	; (8006c44 <v_L45+0x148>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b03      	cmp	r3, #3
 8006bac:	d147      	bne.n	8006c3e <v_L45+0x142>
		if(!v_flag){
 8006bae:	4b26      	ldr	r3, [pc, #152]	; (8006c48 <v_L45+0x14c>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10c      	bne.n	8006bd0 <v_L45+0xd4>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_F, NO_WALL, NO_WALL);
 8006bb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	f241 3388 	movw	r3, #5000	; 0x1388
 8006bc0:	2217      	movs	r2, #23
 8006bc2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006bc6:	f242 7010 	movw	r0, #10000	; 0x2710
 8006bca:	f7fe fbd9 	bl	8005380 <slalomF>
 8006bce:	e00b      	b.n	8006be8 <v_L45+0xec>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_B-12, NO_WALL, NO_WALL);
 8006bd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8006bda:	2244      	movs	r2, #68	; 0x44
 8006bdc:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006be0:	f242 7010 	movw	r0, #10000	; 0x2710
 8006be4:	f7fe fbcc 	bl	8005380 <slalomF>
		slalomR(V_H_DEGACCEL, V_H_OMEGA, 45, SPEED_HIGH);
 8006be8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006bec:	222d      	movs	r2, #45	; 0x2d
 8006bee:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006bf2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8006bf6:	f7fe fc3f 	bl	8005478 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8006bfa:	2103      	movs	r1, #3
 8006bfc:	20ff      	movs	r0, #255	; 0xff
 8006bfe:	f006 fcd3 	bl	800d5a8 <turn_dir>
		v_flag = (v_flag+1)%2;
 8006c02:	4b11      	ldr	r3, [pc, #68]	; (8006c48 <v_L45+0x14c>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	3301      	adds	r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	bfb8      	it	lt
 8006c10:	425b      	neglt	r3, r3
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	4b0c      	ldr	r3, [pc, #48]	; (8006c48 <v_L45+0x14c>)
 8006c16:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 8006c18:	4b0b      	ldr	r3, [pc, #44]	; (8006c48 <v_L45+0x14c>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d107      	bne.n	8006c30 <v_L45+0x134>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_F+35);
 8006c20:	223a      	movs	r2, #58	; 0x3a
 8006c22:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006c26:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c2a:	f7fe fd49 	bl	80056c0 <slalomB>
}
 8006c2e:	e006      	b.n	8006c3e <v_L45+0x142>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B+20);
 8006c30:	2264      	movs	r2, #100	; 0x64
 8006c32:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006c36:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c3a:	f7fe fd41 	bl	80056c0 <slalomB>
}
 8006c3e:	bf00      	nop
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	2000048e 	.word	0x2000048e
 8006c48:	20000b28 	.word	0x20000b28

08006c4c <v_R45D>:
//v_R45D
//a区画中心から右に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45D(void){
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8006c52:	2005      	movs	r0, #5
 8006c54:	f008 fa78 	bl	800f148 <full_led_write>
	if(run_mode == LOW){
 8006c58:	4b54      	ldr	r3, [pc, #336]	; (8006dac <v_R45D+0x160>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d14e      	bne.n	8006d00 <v_R45D+0xb4>
		if(!v_flag){
 8006c62:	4b53      	ldr	r3, [pc, #332]	; (8006db0 <v_R45D+0x164>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10c      	bne.n	8006c84 <v_R45D+0x38>
			slalomF(10000, SPEED_LOW, V_OFFSET_F, NO_WALL, NO_WALL);
 8006c6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	f241 3388 	movw	r3, #5000	; 0x1388
 8006c74:	2228      	movs	r2, #40	; 0x28
 8006c76:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006c7a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c7e:	f7fe fb7f 	bl	8005380 <slalomF>
 8006c82:	e00b      	b.n	8006c9c <v_R45D+0x50>
		}else{
			slalomF(10000, SPEED_LOW, V_OFFSET_B, NO_WALL, NO_WALL);
 8006c84:	f241 3388 	movw	r3, #5000	; 0x1388
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006c8e:	2250      	movs	r2, #80	; 0x50
 8006c90:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006c94:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c98:	f7fe fb72 	bl	8005380 <slalomF>
		}
		slalomR(-V_DEGACCEL, -V_OMEGA, -45, SPEED_LOW);
 8006c9c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006ca0:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8006ca4:	4943      	ldr	r1, [pc, #268]	; (8006db4 <v_R45D+0x168>)
 8006ca6:	4844      	ldr	r0, [pc, #272]	; (8006db8 <v_R45D+0x16c>)
 8006ca8:	f7fe fbe6 	bl	8005478 <slalomR>

		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8006cac:	2103      	movs	r1, #3
 8006cae:	2001      	movs	r0, #1
 8006cb0:	f006 fc7a 	bl	800d5a8 <turn_dir>
		v_flag = (v_flag+1)%2;
 8006cb4:	4b3e      	ldr	r3, [pc, #248]	; (8006db0 <v_R45D+0x164>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	bfb8      	it	lt
 8006cc2:	425b      	neglt	r3, r3
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	4b3a      	ldr	r3, [pc, #232]	; (8006db0 <v_R45D+0x164>)
 8006cc8:	701a      	strb	r2, [r3, #0]

		if(!v_flag){
 8006cca:	4b39      	ldr	r3, [pc, #228]	; (8006db0 <v_R45D+0x164>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d107      	bne.n	8006ce2 <v_R45D+0x96>
			slalomB(10000, SPEED_LOW, V_OFFSET_F-10);
 8006cd2:	221e      	movs	r2, #30
 8006cd4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006cd8:	f242 7010 	movw	r0, #10000	; 0x2710
 8006cdc:	f7fe fcf0 	bl	80056c0 <slalomB>
 8006ce0:	e006      	b.n	8006cf0 <v_R45D+0xa4>
		}else{
			slalomB(10000, SPEED_LOW, V_OFFSET_B-10);
 8006ce2:	2246      	movs	r2, #70	; 0x46
 8006ce4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006ce8:	f242 7010 	movw	r0, #10000	; 0x2710
 8006cec:	f7fe fce8 	bl	80056c0 <slalomB>
		}
		driveD(-10000, SPEED_MIN, SPEED_LOW, 10);
 8006cf0:	230a      	movs	r3, #10
 8006cf2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006cf6:	2132      	movs	r1, #50	; 0x32
 8006cf8:	4830      	ldr	r0, [pc, #192]	; (8006dbc <v_R45D+0x170>)
 8006cfa:	f7fe f96d 	bl	8004fd8 <driveD>
		}else{
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B-10);
		}
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
	}
}
 8006cfe:	e052      	b.n	8006da6 <v_R45D+0x15a>
	}else if(run_mode == HIGH){
 8006d00:	4b2a      	ldr	r3, [pc, #168]	; (8006dac <v_R45D+0x160>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d14d      	bne.n	8006da6 <v_R45D+0x15a>
		if(!v_flag){
 8006d0a:	4b29      	ldr	r3, [pc, #164]	; (8006db0 <v_R45D+0x164>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10c      	bne.n	8006d2c <v_R45D+0xe0>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_F, NO_WALL, NO_WALL);
 8006d12:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d1c:	2217      	movs	r2, #23
 8006d1e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006d22:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d26:	f7fe fb2b 	bl	8005380 <slalomF>
 8006d2a:	e00b      	b.n	8006d44 <v_R45D+0xf8>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_B-18, NO_WALL, NO_WALL);
 8006d2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d36:	223e      	movs	r2, #62	; 0x3e
 8006d38:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006d3c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d40:	f7fe fb1e 	bl	8005380 <slalomF>
		slalomR(-V_H_DEGACCEL, -V_H_OMEGA, -45, SPEED_HIGH);
 8006d44:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006d48:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8006d4c:	491c      	ldr	r1, [pc, #112]	; (8006dc0 <v_R45D+0x174>)
 8006d4e:	481d      	ldr	r0, [pc, #116]	; (8006dc4 <v_R45D+0x178>)
 8006d50:	f7fe fb92 	bl	8005478 <slalomR>
		turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8006d54:	2103      	movs	r1, #3
 8006d56:	2001      	movs	r0, #1
 8006d58:	f006 fc26 	bl	800d5a8 <turn_dir>
		v_flag = (v_flag+1)%2;
 8006d5c:	4b14      	ldr	r3, [pc, #80]	; (8006db0 <v_R45D+0x164>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	3301      	adds	r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	bfb8      	it	lt
 8006d6a:	425b      	neglt	r3, r3
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	4b10      	ldr	r3, [pc, #64]	; (8006db0 <v_R45D+0x164>)
 8006d70:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 8006d72:	4b0f      	ldr	r3, [pc, #60]	; (8006db0 <v_R45D+0x164>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d107      	bne.n	8006d8a <v_R45D+0x13e>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_F);
 8006d7a:	2217      	movs	r2, #23
 8006d7c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006d80:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d84:	f7fe fc9c 	bl	80056c0 <slalomB>
 8006d88:	e006      	b.n	8006d98 <v_R45D+0x14c>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B-10);
 8006d8a:	2246      	movs	r2, #70	; 0x46
 8006d8c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006d90:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d94:	f7fe fc94 	bl	80056c0 <slalomB>
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
 8006d98:	230a      	movs	r3, #10
 8006d9a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006d9e:	2132      	movs	r1, #50	; 0x32
 8006da0:	4806      	ldr	r0, [pc, #24]	; (8006dbc <v_R45D+0x170>)
 8006da2:	f7fe f919 	bl	8004fd8 <driveD>
}
 8006da6:	bf00      	nop
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	2000048e 	.word	0x2000048e
 8006db0:	20000b28 	.word	0x20000b28
 8006db4:	fffffed4 	.word	0xfffffed4
 8006db8:	fffff448 	.word	0xfffff448
 8006dbc:	ffffd8f0 	.word	0xffffd8f0
 8006dc0:	fffffe70 	.word	0xfffffe70
 8006dc4:	ffffe0c0 	.word	0xffffe0c0

08006dc8 <v_L45D>:
//v_L45D
//a区画中心から左に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45D(void){
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8006dce:	2006      	movs	r0, #6
 8006dd0:	f008 f9ba 	bl	800f148 <full_led_write>
	if(run_mode == LOW){
 8006dd4:	4b6a      	ldr	r3, [pc, #424]	; (8006f80 <v_L45D+0x1b8>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d179      	bne.n	8006ed2 <v_L45D+0x10a>
		if(!v_flag){
 8006dde:	4b69      	ldr	r3, [pc, #420]	; (8006f84 <v_L45D+0x1bc>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d121      	bne.n	8006e2a <v_L45D+0x62>
			while(dist_l < V_OFFSET_F+15 && dist_r < V_OFFSET_F+15);
 8006de6:	bf00      	nop
 8006de8:	4b67      	ldr	r3, [pc, #412]	; (8006f88 <v_L45D+0x1c0>)
 8006dea:	edd3 7a00 	vldr	s15, [r3]
 8006dee:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8006f8c <v_L45D+0x1c4>
 8006df2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dfa:	d509      	bpl.n	8006e10 <v_L45D+0x48>
 8006dfc:	4b64      	ldr	r3, [pc, #400]	; (8006f90 <v_L45D+0x1c8>)
 8006dfe:	edd3 7a00 	vldr	s15, [r3]
 8006e02:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8006f8c <v_L45D+0x1c4>
 8006e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e0e:	d4eb      	bmi.n	8006de8 <v_L45D+0x20>
			slalomF(10000, SPEED_LOW, V_OFFSET_F+15, NO_WALL, NO_WALL);
 8006e10:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e1a:	2237      	movs	r2, #55	; 0x37
 8006e1c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006e20:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e24:	f7fe faac 	bl	8005380 <slalomF>
 8006e28:	e020      	b.n	8006e6c <v_L45D+0xa4>
		}else{
			while(dist_l < V_OFFSET_B+5 && dist_r < V_OFFSET_B+5);
 8006e2a:	bf00      	nop
 8006e2c:	4b56      	ldr	r3, [pc, #344]	; (8006f88 <v_L45D+0x1c0>)
 8006e2e:	edd3 7a00 	vldr	s15, [r3]
 8006e32:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8006f94 <v_L45D+0x1cc>
 8006e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e3e:	d509      	bpl.n	8006e54 <v_L45D+0x8c>
 8006e40:	4b53      	ldr	r3, [pc, #332]	; (8006f90 <v_L45D+0x1c8>)
 8006e42:	edd3 7a00 	vldr	s15, [r3]
 8006e46:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8006f94 <v_L45D+0x1cc>
 8006e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e52:	d4eb      	bmi.n	8006e2c <v_L45D+0x64>
			slalomF(10000, SPEED_LOW, V_OFFSET_B+5, NO_WALL, NO_WALL);
 8006e54:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e5e:	2255      	movs	r2, #85	; 0x55
 8006e60:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006e64:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e68:	f7fe fa8a 	bl	8005380 <slalomF>
		}
		slalomR(V_DEGACCEL, V_OMEGA, 55, SPEED_LOW);
 8006e6c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006e70:	2237      	movs	r2, #55	; 0x37
 8006e72:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006e76:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006e7a:	f7fe fafd 	bl	8005478 <slalomR>

		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8006e7e:	2103      	movs	r1, #3
 8006e80:	20ff      	movs	r0, #255	; 0xff
 8006e82:	f006 fb91 	bl	800d5a8 <turn_dir>
		v_flag = (v_flag+1)%2;
 8006e86:	4b3f      	ldr	r3, [pc, #252]	; (8006f84 <v_L45D+0x1bc>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	bfb8      	it	lt
 8006e94:	425b      	neglt	r3, r3
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	4b3a      	ldr	r3, [pc, #232]	; (8006f84 <v_L45D+0x1bc>)
 8006e9a:	701a      	strb	r2, [r3, #0]

		if(!v_flag){
 8006e9c:	4b39      	ldr	r3, [pc, #228]	; (8006f84 <v_L45D+0x1bc>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d107      	bne.n	8006eb4 <v_L45D+0xec>
			slalomB(10000, SPEED_LOW, V_OFFSET_F+5);
 8006ea4:	222d      	movs	r2, #45	; 0x2d
 8006ea6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006eaa:	f242 7010 	movw	r0, #10000	; 0x2710
 8006eae:	f7fe fc07 	bl	80056c0 <slalomB>
 8006eb2:	e006      	b.n	8006ec2 <v_L45D+0xfa>
		}else{
			slalomB(10000, SPEED_LOW, V_OFFSET_B-5);
 8006eb4:	224b      	movs	r2, #75	; 0x4b
 8006eb6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006eba:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ebe:	f7fe fbff 	bl	80056c0 <slalomB>
		}
		driveD(-10000, SPEED_MIN, SPEED_LOW, 10);
 8006ec2:	230a      	movs	r3, #10
 8006ec4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006ec8:	2132      	movs	r1, #50	; 0x32
 8006eca:	4833      	ldr	r0, [pc, #204]	; (8006f98 <v_L45D+0x1d0>)
 8006ecc:	f7fe f884 	bl	8004fd8 <driveD>
		}else{
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B+10);
		}
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
	}
}
 8006ed0:	e053      	b.n	8006f7a <v_L45D+0x1b2>
	}else if(run_mode == HIGH){
 8006ed2:	4b2b      	ldr	r3, [pc, #172]	; (8006f80 <v_L45D+0x1b8>)
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d14e      	bne.n	8006f7a <v_L45D+0x1b2>
		if(!v_flag){
 8006edc:	4b29      	ldr	r3, [pc, #164]	; (8006f84 <v_L45D+0x1bc>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10c      	bne.n	8006efe <v_L45D+0x136>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_F, NO_WALL, NO_WALL);
 8006ee4:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	f241 3388 	movw	r3, #5000	; 0x1388
 8006eee:	2217      	movs	r2, #23
 8006ef0:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006ef4:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ef8:	f7fe fa42 	bl	8005380 <slalomF>
 8006efc:	e00b      	b.n	8006f16 <v_L45D+0x14e>
			slalomF(10000, SPEED_HIGH, V_H_OFFSET_B-12, NO_WALL, NO_WALL);
 8006efe:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f08:	2244      	movs	r2, #68	; 0x44
 8006f0a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006f0e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f12:	f7fe fa35 	bl	8005380 <slalomF>
		slalomR(V_H_DEGACCEL, V_H_OMEGA, 45, SPEED_HIGH);
 8006f16:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006f1a:	222d      	movs	r2, #45	; 0x2d
 8006f1c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006f20:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8006f24:	f7fe faa8 	bl	8005478 <slalomR>
		turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8006f28:	2103      	movs	r1, #3
 8006f2a:	20ff      	movs	r0, #255	; 0xff
 8006f2c:	f006 fb3c 	bl	800d5a8 <turn_dir>
		v_flag = (v_flag+1)%2;
 8006f30:	4b14      	ldr	r3, [pc, #80]	; (8006f84 <v_L45D+0x1bc>)
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	3301      	adds	r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	bfb8      	it	lt
 8006f3e:	425b      	neglt	r3, r3
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	4b10      	ldr	r3, [pc, #64]	; (8006f84 <v_L45D+0x1bc>)
 8006f44:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 8006f46:	4b0f      	ldr	r3, [pc, #60]	; (8006f84 <v_L45D+0x1bc>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d107      	bne.n	8006f5e <v_L45D+0x196>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_F+25);
 8006f4e:	2230      	movs	r2, #48	; 0x30
 8006f50:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006f54:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f58:	f7fe fbb2 	bl	80056c0 <slalomB>
 8006f5c:	e006      	b.n	8006f6c <v_L45D+0x1a4>
			slalomB(10000, SPEED_HIGH, V_H_OFFSET_B+10);
 8006f5e:	225a      	movs	r2, #90	; 0x5a
 8006f60:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006f64:	f242 7010 	movw	r0, #10000	; 0x2710
 8006f68:	f7fe fbaa 	bl	80056c0 <slalomB>
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
 8006f6c:	230a      	movs	r3, #10
 8006f6e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006f72:	2132      	movs	r1, #50	; 0x32
 8006f74:	4808      	ldr	r0, [pc, #32]	; (8006f98 <v_L45D+0x1d0>)
 8006f76:	f7fe f82f 	bl	8004fd8 <driveD>
}
 8006f7a:	bf00      	nop
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	2000048e 	.word	0x2000048e
 8006f84:	20000b28 	.word	0x20000b28
 8006f88:	20001608 	.word	0x20001608
 8006f8c:	425c0000 	.word	0x425c0000
 8006f90:	20000b2c 	.word	0x20000b2c
 8006f94:	42aa0000 	.word	0x42aa0000
 8006f98:	ffffd8f0 	.word	0xffffd8f0

08006f9c <v_R90>:
//v_R90
// 柱中心から右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R90(void){
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8006fa2:	2006      	movs	r0, #6
 8006fa4:	f008 f8d0 	bl	800f148 <full_led_write>
	if(run_mode == LOW){
 8006fa8:	4b25      	ldr	r3, [pc, #148]	; (8007040 <v_R90+0xa4>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d11f      	bne.n	8006ff2 <v_R90+0x56>
		slalomF(10000, SPEED_LOW, VV_OFFSET_F, NO_WALL, NO_WALL);
 8006fb2:	f241 3388 	movw	r3, #5000	; 0x1388
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	f241 3388 	movw	r3, #5000	; 0x1388
 8006fbc:	2232      	movs	r2, #50	; 0x32
 8006fbe:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006fc2:	f242 7010 	movw	r0, #10000	; 0x2710
 8006fc6:	f7fe f9db 	bl	8005380 <slalomF>
		slalomR(-VV_DEGACCEL, -VV_OMEGA, -90, SPEED_LOW);
 8006fca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006fce:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8006fd2:	491c      	ldr	r1, [pc, #112]	; (8007044 <v_R90+0xa8>)
 8006fd4:	481c      	ldr	r0, [pc, #112]	; (8007048 <v_R90+0xac>)
 8006fd6:	f7fe fa4f 	bl	8005478 <slalomR>

		turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8006fda:	2103      	movs	r1, #3
 8006fdc:	2002      	movs	r0, #2
 8006fde:	f006 fae3 	bl	800d5a8 <turn_dir>

		slalomB(10000, SPEED_LOW, VV_OFFSET_B);
 8006fe2:	2232      	movs	r2, #50	; 0x32
 8006fe4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006fe8:	f242 7010 	movw	r0, #10000	; 0x2710
 8006fec:	f7fe fb68 	bl	80056c0 <slalomB>

		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_HIGH, VV_H_OFFSET_B);
	}
}
 8006ff0:	e023      	b.n	800703a <v_R90+0x9e>
	}else if(run_mode == HIGH){
 8006ff2:	4b13      	ldr	r3, [pc, #76]	; (8007040 <v_R90+0xa4>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d11e      	bne.n	800703a <v_R90+0x9e>
		slalomF(10000, SPEED_HIGH, VV_H_OFFSET_F, NO_WALL, NO_WALL);
 8006ffc:	f241 3388 	movw	r3, #5000	; 0x1388
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	f241 3388 	movw	r3, #5000	; 0x1388
 8007006:	2223      	movs	r2, #35	; 0x23
 8007008:	f44f 7148 	mov.w	r1, #800	; 0x320
 800700c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007010:	f7fe f9b6 	bl	8005380 <slalomF>
		slalomR(-VV_H_DEGACCEL, -VV_H_OMEGA, -90, SPEED_HIGH);
 8007014:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007018:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800701c:	490b      	ldr	r1, [pc, #44]	; (800704c <v_R90+0xb0>)
 800701e:	480c      	ldr	r0, [pc, #48]	; (8007050 <v_R90+0xb4>)
 8007020:	f7fe fa2a 	bl	8005478 <slalomR>
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 8007024:	2103      	movs	r1, #3
 8007026:	2002      	movs	r0, #2
 8007028:	f006 fabe 	bl	800d5a8 <turn_dir>
		slalomB(10000, SPEED_HIGH, VV_H_OFFSET_B);
 800702c:	2241      	movs	r2, #65	; 0x41
 800702e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007032:	f242 7010 	movw	r0, #10000	; 0x2710
 8007036:	f7fe fb43 	bl	80056c0 <slalomB>
}
 800703a:	bf00      	nop
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	2000048e 	.word	0x2000048e
 8007044:	fffffea2 	.word	0xfffffea2
 8007048:	fffff254 	.word	0xfffff254
 800704c:	fffffce0 	.word	0xfffffce0
 8007050:	ffffd8f0 	.word	0xffffd8f0

08007054 <v_L90>:
//v_L90
// 柱中心から左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L90(void){
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 800705a:	2005      	movs	r0, #5
 800705c:	f008 f874 	bl	800f148 <full_led_write>
	if(run_mode == LOW){
 8007060:	4b26      	ldr	r3, [pc, #152]	; (80070fc <v_L90+0xa8>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b01      	cmp	r3, #1
 8007068:	d120      	bne.n	80070ac <v_L90+0x58>
		slalomF(10000, SPEED_LOW, VV_OFFSET_F, NO_WALL, NO_WALL);
 800706a:	f241 3388 	movw	r3, #5000	; 0x1388
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	f241 3388 	movw	r3, #5000	; 0x1388
 8007074:	2232      	movs	r2, #50	; 0x32
 8007076:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800707a:	f242 7010 	movw	r0, #10000	; 0x2710
 800707e:	f7fe f97f 	bl	8005380 <slalomF>
		slalomR(VV_DEGACCEL, VV_OMEGA, 90, SPEED_LOW);
 8007082:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007086:	225a      	movs	r2, #90	; 0x5a
 8007088:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800708c:	f640 50ac 	movw	r0, #3500	; 0xdac
 8007090:	f7fe f9f2 	bl	8005478 <slalomR>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007094:	2103      	movs	r1, #3
 8007096:	20fe      	movs	r0, #254	; 0xfe
 8007098:	f006 fa86 	bl	800d5a8 <turn_dir>

		slalomB(10000, SPEED_LOW, VV_OFFSET_B);
 800709c:	2232      	movs	r2, #50	; 0x32
 800709e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80070a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80070a6:	f7fe fb0b 	bl	80056c0 <slalomB>

		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理

		slalomB(10000, SPEED_HIGH, VV_H_OFFSET_B);
	}
}
 80070aa:	e024      	b.n	80070f6 <v_L90+0xa2>
	}else if(run_mode == HIGH){
 80070ac:	4b13      	ldr	r3, [pc, #76]	; (80070fc <v_L90+0xa8>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	d11f      	bne.n	80070f6 <v_L90+0xa2>
		slalomF(10000, SPEED_HIGH, VV_H_OFFSET_F, NO_WALL, NO_WALL);
 80070b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80070c0:	2223      	movs	r2, #35	; 0x23
 80070c2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80070c6:	f242 7010 	movw	r0, #10000	; 0x2710
 80070ca:	f7fe f959 	bl	8005380 <slalomF>
		slalomR(VV_H_DEGACCEL, VV_H_OMEGA, 90, SPEED_HIGH);
 80070ce:	f44f 7348 	mov.w	r3, #800	; 0x320
 80070d2:	225a      	movs	r2, #90	; 0x5a
 80070d4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80070d8:	f242 7010 	movw	r0, #10000	; 0x2710
 80070dc:	f7fe f9cc 	bl	8005478 <slalomR>
		turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80070e0:	2103      	movs	r1, #3
 80070e2:	20fe      	movs	r0, #254	; 0xfe
 80070e4:	f006 fa60 	bl	800d5a8 <turn_dir>
		slalomB(10000, SPEED_HIGH, VV_H_OFFSET_B);
 80070e8:	2241      	movs	r2, #65	; 0x41
 80070ea:	f44f 7148 	mov.w	r1, #800	; 0x320
 80070ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80070f2:	f7fe fae5 	bl	80056c0 <slalomB>
}
 80070f6:	bf00      	nop
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	2000048e 	.word	0x2000048e

08007100 <v_R135>:
//v_R135
// 区画中心から右に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135(void){
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 8007106:	2006      	movs	r0, #6
 8007108:	f008 f81e 	bl	800f148 <full_led_write>
	if(run_mode == LOW){
 800710c:	4b4d      	ldr	r3, [pc, #308]	; (8007244 <v_R135+0x144>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b01      	cmp	r3, #1
 8007114:	d147      	bne.n	80071a6 <v_R135+0xa6>
		if(!v_flag){
 8007116:	4b4c      	ldr	r3, [pc, #304]	; (8007248 <v_R135+0x148>)
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10c      	bne.n	8007138 <v_R135+0x38>
			slalomF(10000, SPEED_LOW, VVV_OFFSET_F, NO_WALL, NO_WALL);
 800711e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	f241 3388 	movw	r3, #5000	; 0x1388
 8007128:	2246      	movs	r2, #70	; 0x46
 800712a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800712e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007132:	f7fe f925 	bl	8005380 <slalomF>
 8007136:	e00b      	b.n	8007150 <v_R135+0x50>
		}else{
			slalomF(10000, SPEED_LOW, VVV_OFFSET_B, NO_WALL, NO_WALL);
 8007138:	f241 3388 	movw	r3, #5000	; 0x1388
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007142:	223a      	movs	r2, #58	; 0x3a
 8007144:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007148:	f242 7010 	movw	r0, #10000	; 0x2710
 800714c:	f7fe f918 	bl	8005380 <slalomF>
		}
		slalomR(-VVV_DEGACCEL, -VVV_OMEGA, -135, SPEED_LOW);
 8007150:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007154:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8007158:	493c      	ldr	r1, [pc, #240]	; (800724c <v_R135+0x14c>)
 800715a:	483d      	ldr	r0, [pc, #244]	; (8007250 <v_R135+0x150>)
 800715c:	f7fe f98c 	bl	8005478 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007160:	2103      	movs	r1, #3
 8007162:	2003      	movs	r0, #3
 8007164:	f006 fa20 	bl	800d5a8 <turn_dir>
		v_flag = (v_flag+1)%2;
 8007168:	4b37      	ldr	r3, [pc, #220]	; (8007248 <v_R135+0x148>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	3301      	adds	r3, #1
 800716e:	2b00      	cmp	r3, #0
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	bfb8      	it	lt
 8007176:	425b      	neglt	r3, r3
 8007178:	b2da      	uxtb	r2, r3
 800717a:	4b33      	ldr	r3, [pc, #204]	; (8007248 <v_R135+0x148>)
 800717c:	701a      	strb	r2, [r3, #0]

		if(!v_flag){
 800717e:	4b32      	ldr	r3, [pc, #200]	; (8007248 <v_R135+0x148>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d107      	bne.n	8007196 <v_R135+0x96>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_F);
 8007186:	2246      	movs	r2, #70	; 0x46
 8007188:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800718c:	f242 7010 	movw	r0, #10000	; 0x2710
 8007190:	f7fe fa96 	bl	80056c0 <slalomB>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F);
		}else{
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F);
		}
	}
}
 8007194:	e053      	b.n	800723e <v_R135+0x13e>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_B);
 8007196:	223a      	movs	r2, #58	; 0x3a
 8007198:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800719c:	f242 7010 	movw	r0, #10000	; 0x2710
 80071a0:	f7fe fa8e 	bl	80056c0 <slalomB>
}
 80071a4:	e04b      	b.n	800723e <v_R135+0x13e>
	}else if(run_mode == HIGH){
 80071a6:	4b27      	ldr	r3, [pc, #156]	; (8007244 <v_R135+0x144>)
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b03      	cmp	r3, #3
 80071ae:	d146      	bne.n	800723e <v_R135+0x13e>
		if(!v_flag){
 80071b0:	4b25      	ldr	r3, [pc, #148]	; (8007248 <v_R135+0x148>)
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10c      	bne.n	80071d2 <v_R135+0xd2>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_F, NO_WALL, NO_WALL);
 80071b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	f241 3388 	movw	r3, #5000	; 0x1388
 80071c2:	2278      	movs	r2, #120	; 0x78
 80071c4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80071c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80071cc:	f7fe f8d8 	bl	8005380 <slalomF>
 80071d0:	e00b      	b.n	80071ea <v_R135+0xea>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_B, NO_WALL, NO_WALL);
 80071d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80071dc:	2246      	movs	r2, #70	; 0x46
 80071de:	f44f 7148 	mov.w	r1, #800	; 0x320
 80071e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80071e6:	f7fe f8cb 	bl	8005380 <slalomF>
		slalomR(-VVV_H_DEGACCEL, -VVV_H_OMEGA, -135, SPEED_HIGH);
 80071ea:	f44f 7348 	mov.w	r3, #800	; 0x320
 80071ee:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80071f2:	4918      	ldr	r1, [pc, #96]	; (8007254 <v_R135+0x154>)
 80071f4:	4818      	ldr	r0, [pc, #96]	; (8007258 <v_R135+0x158>)
 80071f6:	f7fe f93f 	bl	8005478 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80071fa:	2103      	movs	r1, #3
 80071fc:	2003      	movs	r0, #3
 80071fe:	f006 f9d3 	bl	800d5a8 <turn_dir>
		v_flag = (v_flag+1)%2;
 8007202:	4b11      	ldr	r3, [pc, #68]	; (8007248 <v_R135+0x148>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	3301      	adds	r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	bfb8      	it	lt
 8007210:	425b      	neglt	r3, r3
 8007212:	b2da      	uxtb	r2, r3
 8007214:	4b0c      	ldr	r3, [pc, #48]	; (8007248 <v_R135+0x148>)
 8007216:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 8007218:	4b0b      	ldr	r3, [pc, #44]	; (8007248 <v_R135+0x148>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d107      	bne.n	8007230 <v_R135+0x130>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F);
 8007220:	2278      	movs	r2, #120	; 0x78
 8007222:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007226:	f242 7010 	movw	r0, #10000	; 0x2710
 800722a:	f7fe fa49 	bl	80056c0 <slalomB>
}
 800722e:	e006      	b.n	800723e <v_R135+0x13e>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F);
 8007230:	2278      	movs	r2, #120	; 0x78
 8007232:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007236:	f242 7010 	movw	r0, #10000	; 0x2710
 800723a:	f7fe fa41 	bl	80056c0 <slalomB>
}
 800723e:	bf00      	nop
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	2000048e 	.word	0x2000048e
 8007248:	20000b28 	.word	0x20000b28
 800724c:	fffffed4 	.word	0xfffffed4
 8007250:	fffff448 	.word	0xfffff448
 8007254:	fffffce0 	.word	0xfffffce0
 8007258:	ffffe0c0 	.word	0xffffe0c0

0800725c <v_L135>:
//v_L135
// 区画中心から左に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135(void){
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8007262:	2005      	movs	r0, #5
 8007264:	f007 ff70 	bl	800f148 <full_led_write>
	if(run_mode == LOW){
 8007268:	4b4e      	ldr	r3, [pc, #312]	; (80073a4 <v_L135+0x148>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b01      	cmp	r3, #1
 8007270:	d148      	bne.n	8007304 <v_L135+0xa8>
		if(!v_flag){
 8007272:	4b4d      	ldr	r3, [pc, #308]	; (80073a8 <v_L135+0x14c>)
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10c      	bne.n	8007294 <v_L135+0x38>
			slalomF(10000, SPEED_LOW, VVV_OFFSET_F, NO_WALL, NO_WALL);
 800727a:	f241 3388 	movw	r3, #5000	; 0x1388
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	f241 3388 	movw	r3, #5000	; 0x1388
 8007284:	2246      	movs	r2, #70	; 0x46
 8007286:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800728a:	f242 7010 	movw	r0, #10000	; 0x2710
 800728e:	f7fe f877 	bl	8005380 <slalomF>
 8007292:	e00b      	b.n	80072ac <v_L135+0x50>
		}else{
			slalomF(10000, SPEED_LOW, VVV_OFFSET_B, NO_WALL, NO_WALL);
 8007294:	f241 3388 	movw	r3, #5000	; 0x1388
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	f241 3388 	movw	r3, #5000	; 0x1388
 800729e:	223a      	movs	r2, #58	; 0x3a
 80072a0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80072a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80072a8:	f7fe f86a 	bl	8005380 <slalomF>
		}
		slalomR(VVV_DEGACCEL, VVV_OMEGA, 135, SPEED_LOW);
 80072ac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80072b0:	2287      	movs	r2, #135	; 0x87
 80072b2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80072b6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80072ba:	f7fe f8dd 	bl	8005478 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80072be:	2103      	movs	r1, #3
 80072c0:	20fd      	movs	r0, #253	; 0xfd
 80072c2:	f006 f971 	bl	800d5a8 <turn_dir>
		v_flag = (v_flag+1)%2;
 80072c6:	4b38      	ldr	r3, [pc, #224]	; (80073a8 <v_L135+0x14c>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	3301      	adds	r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	bfb8      	it	lt
 80072d4:	425b      	neglt	r3, r3
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	4b33      	ldr	r3, [pc, #204]	; (80073a8 <v_L135+0x14c>)
 80072da:	701a      	strb	r2, [r3, #0]

		if(!v_flag){
 80072dc:	4b32      	ldr	r3, [pc, #200]	; (80073a8 <v_L135+0x14c>)
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d107      	bne.n	80072f4 <v_L135+0x98>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_F);
 80072e4:	2246      	movs	r2, #70	; 0x46
 80072e6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80072ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80072ee:	f7fe f9e7 	bl	80056c0 <slalomB>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F);
		}else{
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F);
		}
	}
}
 80072f2:	e054      	b.n	800739e <v_L135+0x142>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_B);
 80072f4:	223a      	movs	r2, #58	; 0x3a
 80072f6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80072fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80072fe:	f7fe f9df 	bl	80056c0 <slalomB>
}
 8007302:	e04c      	b.n	800739e <v_L135+0x142>
	}else if(run_mode == HIGH){
 8007304:	4b27      	ldr	r3, [pc, #156]	; (80073a4 <v_L135+0x148>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b03      	cmp	r3, #3
 800730c:	d147      	bne.n	800739e <v_L135+0x142>
		if(!v_flag){
 800730e:	4b26      	ldr	r3, [pc, #152]	; (80073a8 <v_L135+0x14c>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10c      	bne.n	8007330 <v_L135+0xd4>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_F, NO_WALL, NO_WALL);
 8007316:	f241 3388 	movw	r3, #5000	; 0x1388
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007320:	2278      	movs	r2, #120	; 0x78
 8007322:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007326:	f242 7010 	movw	r0, #10000	; 0x2710
 800732a:	f7fe f829 	bl	8005380 <slalomF>
 800732e:	e00b      	b.n	8007348 <v_L135+0xec>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_B, NO_WALL, NO_WALL);
 8007330:	f241 3388 	movw	r3, #5000	; 0x1388
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	f241 3388 	movw	r3, #5000	; 0x1388
 800733a:	2246      	movs	r2, #70	; 0x46
 800733c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007340:	f242 7010 	movw	r0, #10000	; 0x2710
 8007344:	f7fe f81c 	bl	8005380 <slalomF>
		slalomR(VVV_H_DEGACCEL, VVV_H_OMEGA, 135, SPEED_HIGH);
 8007348:	f44f 7348 	mov.w	r3, #800	; 0x320
 800734c:	2287      	movs	r2, #135	; 0x87
 800734e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007352:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007356:	f7fe f88f 	bl	8005478 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800735a:	2103      	movs	r1, #3
 800735c:	20fd      	movs	r0, #253	; 0xfd
 800735e:	f006 f923 	bl	800d5a8 <turn_dir>
		v_flag = (v_flag+1)%2;
 8007362:	4b11      	ldr	r3, [pc, #68]	; (80073a8 <v_L135+0x14c>)
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	3301      	adds	r3, #1
 8007368:	2b00      	cmp	r3, #0
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	bfb8      	it	lt
 8007370:	425b      	neglt	r3, r3
 8007372:	b2da      	uxtb	r2, r3
 8007374:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <v_L135+0x14c>)
 8007376:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 8007378:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <v_L135+0x14c>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d107      	bne.n	8007390 <v_L135+0x134>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F);
 8007380:	2278      	movs	r2, #120	; 0x78
 8007382:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007386:	f242 7010 	movw	r0, #10000	; 0x2710
 800738a:	f7fe f999 	bl	80056c0 <slalomB>
}
 800738e:	e006      	b.n	800739e <v_L135+0x142>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F);
 8007390:	2278      	movs	r2, #120	; 0x78
 8007392:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007396:	f242 7010 	movw	r0, #10000	; 0x2710
 800739a:	f7fe f991 	bl	80056c0 <slalomB>
}
 800739e:	bf00      	nop
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	2000048e 	.word	0x2000048e
 80073a8:	20000b28 	.word	0x20000b28

080073ac <v_R135D>:
//v_R135D
// 区画中心から右に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135D(void){
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af02      	add	r7, sp, #8
	full_led_write(YELLOW);
 80073b2:	2006      	movs	r0, #6
 80073b4:	f007 fec8 	bl	800f148 <full_led_write>
	if(run_mode == LOW){
 80073b8:	4b69      	ldr	r3, [pc, #420]	; (8007560 <v_R135D+0x1b4>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d14e      	bne.n	8007460 <v_R135D+0xb4>
		if(!v_flag){
 80073c2:	4b68      	ldr	r3, [pc, #416]	; (8007564 <v_R135D+0x1b8>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10c      	bne.n	80073e4 <v_R135D+0x38>
			slalomF(10000, SPEED_LOW, VVV_OFFSET_F, NO_WALL, NO_WALL);
 80073ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80073d4:	2246      	movs	r2, #70	; 0x46
 80073d6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80073da:	f242 7010 	movw	r0, #10000	; 0x2710
 80073de:	f7fd ffcf 	bl	8005380 <slalomF>
 80073e2:	e00b      	b.n	80073fc <v_R135D+0x50>
		}else{
			slalomF(10000, SPEED_LOW, VVV_OFFSET_B, NO_WALL, NO_WALL);
 80073e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80073ee:	223a      	movs	r2, #58	; 0x3a
 80073f0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80073f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80073f8:	f7fd ffc2 	bl	8005380 <slalomF>
		}
		slalomR(-VVV_DEGACCEL, -VVV_OMEGA, -135, SPEED_LOW);
 80073fc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007400:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8007404:	4958      	ldr	r1, [pc, #352]	; (8007568 <v_R135D+0x1bc>)
 8007406:	4859      	ldr	r0, [pc, #356]	; (800756c <v_R135D+0x1c0>)
 8007408:	f7fe f836 	bl	8005478 <slalomR>

		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800740c:	2103      	movs	r1, #3
 800740e:	2003      	movs	r0, #3
 8007410:	f006 f8ca 	bl	800d5a8 <turn_dir>
		v_flag = (v_flag+1)%2;
 8007414:	4b53      	ldr	r3, [pc, #332]	; (8007564 <v_R135D+0x1b8>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	3301      	adds	r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	bfb8      	it	lt
 8007422:	425b      	neglt	r3, r3
 8007424:	b2da      	uxtb	r2, r3
 8007426:	4b4f      	ldr	r3, [pc, #316]	; (8007564 <v_R135D+0x1b8>)
 8007428:	701a      	strb	r2, [r3, #0]

		if(!v_flag){
 800742a:	4b4e      	ldr	r3, [pc, #312]	; (8007564 <v_R135D+0x1b8>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d107      	bne.n	8007442 <v_R135D+0x96>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_F-10);
 8007432:	223c      	movs	r2, #60	; 0x3c
 8007434:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007438:	f242 7010 	movw	r0, #10000	; 0x2710
 800743c:	f7fe f940 	bl	80056c0 <slalomB>
 8007440:	e006      	b.n	8007450 <v_R135D+0xa4>
		}else{
			slalomB(10000, SPEED_LOW, VVV_OFFSET_B-10);
 8007442:	2230      	movs	r2, #48	; 0x30
 8007444:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007448:	f242 7010 	movw	r0, #10000	; 0x2710
 800744c:	f7fe f938 	bl	80056c0 <slalomB>
		}
		driveD(-10000, SPEED_MIN, SPEED_LOW, 10);
 8007450:	230a      	movs	r3, #10
 8007452:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007456:	2132      	movs	r1, #50	; 0x32
 8007458:	4845      	ldr	r0, [pc, #276]	; (8007570 <v_R135D+0x1c4>)
 800745a:	f7fd fdbd 	bl	8004fd8 <driveD>
		}else{
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F-10);
		}
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
	}
}
 800745e:	e07c      	b.n	800755a <v_R135D+0x1ae>
	}else if(run_mode == HIGH){
 8007460:	4b3f      	ldr	r3, [pc, #252]	; (8007560 <v_R135D+0x1b4>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b03      	cmp	r3, #3
 8007468:	d177      	bne.n	800755a <v_R135D+0x1ae>
		if(!v_flag){
 800746a:	4b3e      	ldr	r3, [pc, #248]	; (8007564 <v_R135D+0x1b8>)
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d121      	bne.n	80074b6 <v_R135D+0x10a>
			while(dist_l < VVV_H_OFFSET_F && dist_r < VVV_H_OFFSET_F);
 8007472:	bf00      	nop
 8007474:	4b3f      	ldr	r3, [pc, #252]	; (8007574 <v_R135D+0x1c8>)
 8007476:	edd3 7a00 	vldr	s15, [r3]
 800747a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8007578 <v_R135D+0x1cc>
 800747e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007486:	d509      	bpl.n	800749c <v_R135D+0xf0>
 8007488:	4b3c      	ldr	r3, [pc, #240]	; (800757c <v_R135D+0x1d0>)
 800748a:	edd3 7a00 	vldr	s15, [r3]
 800748e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8007578 <v_R135D+0x1cc>
 8007492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800749a:	d4eb      	bmi.n	8007474 <v_R135D+0xc8>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_F, NO_WALL, NO_WALL);
 800749c:	f241 3388 	movw	r3, #5000	; 0x1388
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80074a6:	2278      	movs	r2, #120	; 0x78
 80074a8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80074ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80074b0:	f7fd ff66 	bl	8005380 <slalomF>
 80074b4:	e020      	b.n	80074f8 <v_R135D+0x14c>
			while(dist_l < VVV_H_OFFSET_B && dist_r < VVV_H_OFFSET_B);
 80074b6:	bf00      	nop
 80074b8:	4b2e      	ldr	r3, [pc, #184]	; (8007574 <v_R135D+0x1c8>)
 80074ba:	edd3 7a00 	vldr	s15, [r3]
 80074be:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007580 <v_R135D+0x1d4>
 80074c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ca:	d509      	bpl.n	80074e0 <v_R135D+0x134>
 80074cc:	4b2b      	ldr	r3, [pc, #172]	; (800757c <v_R135D+0x1d0>)
 80074ce:	edd3 7a00 	vldr	s15, [r3]
 80074d2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007580 <v_R135D+0x1d4>
 80074d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074de:	d4eb      	bmi.n	80074b8 <v_R135D+0x10c>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_B, NO_WALL, NO_WALL);
 80074e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80074ea:	2246      	movs	r2, #70	; 0x46
 80074ec:	f44f 7148 	mov.w	r1, #800	; 0x320
 80074f0:	f242 7010 	movw	r0, #10000	; 0x2710
 80074f4:	f7fd ff44 	bl	8005380 <slalomF>
		slalomR(-VVV_H_DEGACCEL, -VVV_H_OMEGA, -135, SPEED_HIGH);
 80074f8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80074fc:	f06f 0286 	mvn.w	r2, #134	; 0x86
 8007500:	4920      	ldr	r1, [pc, #128]	; (8007584 <v_R135D+0x1d8>)
 8007502:	4821      	ldr	r0, [pc, #132]	; (8007588 <v_R135D+0x1dc>)
 8007504:	f7fd ffb8 	bl	8005478 <slalomR>
		turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007508:	2103      	movs	r1, #3
 800750a:	2003      	movs	r0, #3
 800750c:	f006 f84c 	bl	800d5a8 <turn_dir>
		v_flag = (v_flag+1)%2;
 8007510:	4b14      	ldr	r3, [pc, #80]	; (8007564 <v_R135D+0x1b8>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	3301      	adds	r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	bfb8      	it	lt
 800751e:	425b      	neglt	r3, r3
 8007520:	b2da      	uxtb	r2, r3
 8007522:	4b10      	ldr	r3, [pc, #64]	; (8007564 <v_R135D+0x1b8>)
 8007524:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 8007526:	4b0f      	ldr	r3, [pc, #60]	; (8007564 <v_R135D+0x1b8>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d107      	bne.n	800753e <v_R135D+0x192>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F-10);
 800752e:	226e      	movs	r2, #110	; 0x6e
 8007530:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007534:	f242 7010 	movw	r0, #10000	; 0x2710
 8007538:	f7fe f8c2 	bl	80056c0 <slalomB>
 800753c:	e006      	b.n	800754c <v_R135D+0x1a0>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F-10);
 800753e:	226e      	movs	r2, #110	; 0x6e
 8007540:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007544:	f242 7010 	movw	r0, #10000	; 0x2710
 8007548:	f7fe f8ba 	bl	80056c0 <slalomB>
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
 800754c:	230a      	movs	r3, #10
 800754e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007552:	2132      	movs	r1, #50	; 0x32
 8007554:	4806      	ldr	r0, [pc, #24]	; (8007570 <v_R135D+0x1c4>)
 8007556:	f7fd fd3f 	bl	8004fd8 <driveD>
}
 800755a:	bf00      	nop
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	2000048e 	.word	0x2000048e
 8007564:	20000b28 	.word	0x20000b28
 8007568:	fffffed4 	.word	0xfffffed4
 800756c:	fffff448 	.word	0xfffff448
 8007570:	ffffd8f0 	.word	0xffffd8f0
 8007574:	20001608 	.word	0x20001608
 8007578:	42f00000 	.word	0x42f00000
 800757c:	20000b2c 	.word	0x20000b2c
 8007580:	428c0000 	.word	0x428c0000
 8007584:	fffffce0 	.word	0xfffffce0
 8007588:	ffffe0c0 	.word	0xffffe0c0

0800758c <v_L135D>:
//v_L135D
// 区画中心から左に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135D(void){
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af02      	add	r7, sp, #8
	full_led_write(PURPLE);
 8007592:	2005      	movs	r0, #5
 8007594:	f007 fdd8 	bl	800f148 <full_led_write>
	if(run_mode == LOW){
 8007598:	4b80      	ldr	r3, [pc, #512]	; (800779c <v_L135D+0x210>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d14f      	bne.n	8007642 <v_L135D+0xb6>
		if(!v_flag){
 80075a2:	4b7f      	ldr	r3, [pc, #508]	; (80077a0 <v_L135D+0x214>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10c      	bne.n	80075c4 <v_L135D+0x38>
			slalomF(10000, SPEED_LOW, VVV_OFFSET_F, NO_WALL, NO_WALL);
 80075aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80075b4:	2246      	movs	r2, #70	; 0x46
 80075b6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80075ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80075be:	f7fd fedf 	bl	8005380 <slalomF>
 80075c2:	e00b      	b.n	80075dc <v_L135D+0x50>
		}else{
			slalomF(10000, SPEED_LOW, VVV_OFFSET_B, NO_WALL, NO_WALL);
 80075c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80075ce:	223a      	movs	r2, #58	; 0x3a
 80075d0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80075d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80075d8:	f7fd fed2 	bl	8005380 <slalomF>
		}
		slalomR(VVV_DEGACCEL, VVV_OMEGA, 135, SPEED_LOW);
 80075dc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80075e0:	2287      	movs	r2, #135	; 0x87
 80075e2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80075e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80075ea:	f7fd ff45 	bl	8005478 <slalomR>

		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80075ee:	2103      	movs	r1, #3
 80075f0:	20fd      	movs	r0, #253	; 0xfd
 80075f2:	f005 ffd9 	bl	800d5a8 <turn_dir>
		v_flag = (v_flag+1)%2;
 80075f6:	4b6a      	ldr	r3, [pc, #424]	; (80077a0 <v_L135D+0x214>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	3301      	adds	r3, #1
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	bfb8      	it	lt
 8007604:	425b      	neglt	r3, r3
 8007606:	b2da      	uxtb	r2, r3
 8007608:	4b65      	ldr	r3, [pc, #404]	; (80077a0 <v_L135D+0x214>)
 800760a:	701a      	strb	r2, [r3, #0]

		if(!v_flag){
 800760c:	4b64      	ldr	r3, [pc, #400]	; (80077a0 <v_L135D+0x214>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d107      	bne.n	8007624 <v_L135D+0x98>
			slalomB(10000, SPEED_LOW, VVV_OFFSET_F-10);
 8007614:	223c      	movs	r2, #60	; 0x3c
 8007616:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800761a:	f242 7010 	movw	r0, #10000	; 0x2710
 800761e:	f7fe f84f 	bl	80056c0 <slalomB>
 8007622:	e006      	b.n	8007632 <v_L135D+0xa6>
		}else{
			slalomB(10000, SPEED_LOW, VVV_OFFSET_B-10);
 8007624:	2230      	movs	r2, #48	; 0x30
 8007626:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800762a:	f242 7010 	movw	r0, #10000	; 0x2710
 800762e:	f7fe f847 	bl	80056c0 <slalomB>
		}
		driveD(-10000, SPEED_MIN, SPEED_LOW, 10);
 8007632:	230a      	movs	r3, #10
 8007634:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007638:	2132      	movs	r1, #50	; 0x32
 800763a:	485a      	ldr	r0, [pc, #360]	; (80077a4 <v_L135D+0x218>)
 800763c:	f7fd fccc 	bl	8004fd8 <driveD>
			while(dist_l < VVV_H_OFFSET_B-10 && dist_r < VVV_H_OFFSET_B-10);
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_B-10);
		}
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
	}
}
 8007640:	e0a8      	b.n	8007794 <v_L135D+0x208>
	}else if(run_mode == HIGH){
 8007642:	4b56      	ldr	r3, [pc, #344]	; (800779c <v_L135D+0x210>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b03      	cmp	r3, #3
 800764a:	f040 80a3 	bne.w	8007794 <v_L135D+0x208>
		if(!v_flag){
 800764e:	4b54      	ldr	r3, [pc, #336]	; (80077a0 <v_L135D+0x214>)
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d121      	bne.n	800769a <v_L135D+0x10e>
			while(dist_l < VVV_H_OFFSET_F && dist_r < VVV_H_OFFSET_F);
 8007656:	bf00      	nop
 8007658:	4b53      	ldr	r3, [pc, #332]	; (80077a8 <v_L135D+0x21c>)
 800765a:	edd3 7a00 	vldr	s15, [r3]
 800765e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80077ac <v_L135D+0x220>
 8007662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800766a:	d509      	bpl.n	8007680 <v_L135D+0xf4>
 800766c:	4b50      	ldr	r3, [pc, #320]	; (80077b0 <v_L135D+0x224>)
 800766e:	edd3 7a00 	vldr	s15, [r3]
 8007672:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80077ac <v_L135D+0x220>
 8007676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800767a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800767e:	d4eb      	bmi.n	8007658 <v_L135D+0xcc>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_F, NO_WALL, NO_WALL);
 8007680:	f241 3388 	movw	r3, #5000	; 0x1388
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	f241 3388 	movw	r3, #5000	; 0x1388
 800768a:	2278      	movs	r2, #120	; 0x78
 800768c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007690:	f242 7010 	movw	r0, #10000	; 0x2710
 8007694:	f7fd fe74 	bl	8005380 <slalomF>
 8007698:	e020      	b.n	80076dc <v_L135D+0x150>
			while(dist_l < VVV_H_OFFSET_B && dist_r < VVV_H_OFFSET_B);
 800769a:	bf00      	nop
 800769c:	4b42      	ldr	r3, [pc, #264]	; (80077a8 <v_L135D+0x21c>)
 800769e:	edd3 7a00 	vldr	s15, [r3]
 80076a2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80077b4 <v_L135D+0x228>
 80076a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ae:	d509      	bpl.n	80076c4 <v_L135D+0x138>
 80076b0:	4b3f      	ldr	r3, [pc, #252]	; (80077b0 <v_L135D+0x224>)
 80076b2:	edd3 7a00 	vldr	s15, [r3]
 80076b6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80077b4 <v_L135D+0x228>
 80076ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c2:	d4eb      	bmi.n	800769c <v_L135D+0x110>
			slalomF(10000, SPEED_HIGH, VVV_H_OFFSET_B, NO_WALL, NO_WALL);
 80076c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80076ce:	2246      	movs	r2, #70	; 0x46
 80076d0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80076d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80076d8:	f7fd fe52 	bl	8005380 <slalomF>
		slalomR(VVV_H_DEGACCEL, VVV_H_OMEGA, 135, SPEED_HIGH);
 80076dc:	f44f 7348 	mov.w	r3, #800	; 0x320
 80076e0:	2287      	movs	r2, #135	; 0x87
 80076e2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80076e6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80076ea:	f7fd fec5 	bl	8005478 <slalomR>
		turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80076ee:	2103      	movs	r1, #3
 80076f0:	20fd      	movs	r0, #253	; 0xfd
 80076f2:	f005 ff59 	bl	800d5a8 <turn_dir>
		v_flag = (v_flag+1)%2;
 80076f6:	4b2a      	ldr	r3, [pc, #168]	; (80077a0 <v_L135D+0x214>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	3301      	adds	r3, #1
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	bfb8      	it	lt
 8007704:	425b      	neglt	r3, r3
 8007706:	b2da      	uxtb	r2, r3
 8007708:	4b25      	ldr	r3, [pc, #148]	; (80077a0 <v_L135D+0x214>)
 800770a:	701a      	strb	r2, [r3, #0]
		if(!v_flag){
 800770c:	4b24      	ldr	r3, [pc, #144]	; (80077a0 <v_L135D+0x214>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d11c      	bne.n	800774e <v_L135D+0x1c2>
			while(dist_l < VVV_H_OFFSET_F-10 && dist_r < VVV_H_OFFSET_F-10);
 8007714:	bf00      	nop
 8007716:	4b24      	ldr	r3, [pc, #144]	; (80077a8 <v_L135D+0x21c>)
 8007718:	edd3 7a00 	vldr	s15, [r3]
 800771c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80077b8 <v_L135D+0x22c>
 8007720:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007728:	d509      	bpl.n	800773e <v_L135D+0x1b2>
 800772a:	4b21      	ldr	r3, [pc, #132]	; (80077b0 <v_L135D+0x224>)
 800772c:	edd3 7a00 	vldr	s15, [r3]
 8007730:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80077b8 <v_L135D+0x22c>
 8007734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800773c:	d4eb      	bmi.n	8007716 <v_L135D+0x18a>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_F-10);
 800773e:	226e      	movs	r2, #110	; 0x6e
 8007740:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007744:	f242 7010 	movw	r0, #10000	; 0x2710
 8007748:	f7fd ffba 	bl	80056c0 <slalomB>
 800774c:	e01b      	b.n	8007786 <v_L135D+0x1fa>
			while(dist_l < VVV_H_OFFSET_B-10 && dist_r < VVV_H_OFFSET_B-10);
 800774e:	bf00      	nop
 8007750:	4b15      	ldr	r3, [pc, #84]	; (80077a8 <v_L135D+0x21c>)
 8007752:	edd3 7a00 	vldr	s15, [r3]
 8007756:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80077bc <v_L135D+0x230>
 800775a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800775e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007762:	d509      	bpl.n	8007778 <v_L135D+0x1ec>
 8007764:	4b12      	ldr	r3, [pc, #72]	; (80077b0 <v_L135D+0x224>)
 8007766:	edd3 7a00 	vldr	s15, [r3]
 800776a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80077bc <v_L135D+0x230>
 800776e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007776:	d4eb      	bmi.n	8007750 <v_L135D+0x1c4>
			slalomB(10000, SPEED_HIGH, VVV_H_OFFSET_B-10);
 8007778:	223c      	movs	r2, #60	; 0x3c
 800777a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800777e:	f242 7010 	movw	r0, #10000	; 0x2710
 8007782:	f7fd ff9d 	bl	80056c0 <slalomB>
		driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
 8007786:	230a      	movs	r3, #10
 8007788:	f44f 7248 	mov.w	r2, #800	; 0x320
 800778c:	2132      	movs	r1, #50	; 0x32
 800778e:	4805      	ldr	r0, [pc, #20]	; (80077a4 <v_L135D+0x218>)
 8007790:	f7fd fc22 	bl	8004fd8 <driveD>
}
 8007794:	bf00      	nop
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	2000048e 	.word	0x2000048e
 80077a0:	20000b28 	.word	0x20000b28
 80077a4:	ffffd8f0 	.word	0xffffd8f0
 80077a8:	20001608 	.word	0x20001608
 80077ac:	42f00000 	.word	0x42f00000
 80077b0:	20000b2c 	.word	0x20000b2c
 80077b4:	428c0000 	.word	0x428c0000
 80077b8:	42dc0000 	.word	0x42dc0000
 80077bc:	42700000 	.word	0x42700000

080077c0 <test_select>:
//test_select
// 走行系テスト選択
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void test_select(void){
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
	int mode = 0;
 80077c6:	2300      	movs	r3, #0
 80077c8:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 80077ca:	6879      	ldr	r1, [r7, #4]
 80077cc:	483b      	ldr	r0, [pc, #236]	; (80078bc <test_select+0xfc>)
 80077ce:	f008 fa4f 	bl	800fc70 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	b2d8      	uxtb	r0, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	b2d9      	uxtb	r1, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	f003 0304 	and.w	r3, r3, #4
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	f007 fc6f 	bl	800f0d4 <led_write>
		  if(dist_r >= 20){
 80077f6:	4b32      	ldr	r3, [pc, #200]	; (80078c0 <test_select+0x100>)
 80077f8:	edd3 7a00 	vldr	s15, [r3]
 80077fc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007808:	db0f      	blt.n	800782a <test_select+0x6a>
			  mode++;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3301      	adds	r3, #1
 800780e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8007810:	4b2b      	ldr	r3, [pc, #172]	; (80078c0 <test_select+0x100>)
 8007812:	f04f 0200 	mov.w	r2, #0
 8007816:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b07      	cmp	r3, #7
 800781c:	dd01      	ble.n	8007822 <test_select+0x62>
				  mode = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8007822:	6879      	ldr	r1, [r7, #4]
 8007824:	4827      	ldr	r0, [pc, #156]	; (80078c4 <test_select+0x104>)
 8007826:	f008 fa23 	bl	800fc70 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800782a:	4b25      	ldr	r3, [pc, #148]	; (80078c0 <test_select+0x100>)
 800782c:	edd3 7a00 	vldr	s15, [r3]
 8007830:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8007834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800783c:	d80f      	bhi.n	800785e <test_select+0x9e>
			  mode--;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	3b01      	subs	r3, #1
 8007842:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8007844:	4b1e      	ldr	r3, [pc, #120]	; (80078c0 <test_select+0x100>)
 8007846:	f04f 0200 	mov.w	r2, #0
 800784a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	da01      	bge.n	8007856 <test_select+0x96>
				  mode = 7;
 8007852:	2307      	movs	r3, #7
 8007854:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8007856:	6879      	ldr	r1, [r7, #4]
 8007858:	481a      	ldr	r0, [pc, #104]	; (80078c4 <test_select+0x104>)
 800785a:	f008 fa09 	bl	800fc70 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800785e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007862:	4819      	ldr	r0, [pc, #100]	; (80078c8 <test_select+0x108>)
 8007864:	f7fa fd36 	bl	80022d4 <HAL_GPIO_ReadPin>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1b1      	bne.n	80077d2 <test_select+0x12>
			  HAL_Delay(50);
 800786e:	2032      	movs	r0, #50	; 0x32
 8007870:	f7f9 fbd4 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8007874:	bf00      	nop
 8007876:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800787a:	4813      	ldr	r0, [pc, #76]	; (80078c8 <test_select+0x108>)
 800787c:	f7fa fd2a 	bl	80022d4 <HAL_GPIO_ReadPin>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0f7      	beq.n	8007876 <test_select+0xb6>
			  switch(mode){
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	3b01      	subs	r3, #1
 800788a:	2b03      	cmp	r3, #3
 800788c:	d8a1      	bhi.n	80077d2 <test_select+0x12>
 800788e:	a201      	add	r2, pc, #4	; (adr r2, 8007894 <test_select+0xd4>)
 8007890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007894:	080078a5 	.word	0x080078a5
 8007898:	080078ab 	.word	0x080078ab
 800789c:	080078b1 	.word	0x080078b1
 80078a0:	080078b7 	.word	0x080078b7
				case 1:
					init_test();
 80078a4:	f000 f812 	bl	80078cc <init_test>
					break;
 80078a8:	e007      	b.n	80078ba <test_select+0xfa>

				case 2:
					slalom_test();
 80078aa:	f000 f917 	bl	8007adc <slalom_test>
					break;
 80078ae:	e004      	b.n	80078ba <test_select+0xfa>

				case 3:
					sample_course_run();
 80078b0:	f001 fc0a 	bl	80090c8 <sample_course_run>
					break;
 80078b4:	e001      	b.n	80078ba <test_select+0xfa>
				case 4:
					v_test();
 80078b6:	f000 fbb5 	bl	8008024 <v_test>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80078ba:	e78a      	b.n	80077d2 <test_select+0x12>
 80078bc:	08010eac 	.word	0x08010eac
 80078c0:	20000b2c 	.word	0x20000b2c
 80078c4:	08010ec4 	.word	0x08010ec4
 80078c8:	40020000 	.word	0x40020000

080078cc <init_test>:
//init_test
// 初期基幹関数走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0

	int mode = 0;
 80078d2:	2300      	movs	r3, #0
 80078d4:	617b      	str	r3, [r7, #20]
	printf("Test Init Run, Mode : %d\n", mode);
 80078d6:	6979      	ldr	r1, [r7, #20]
 80078d8:	4871      	ldr	r0, [pc, #452]	; (8007aa0 <init_test+0x1d4>)
 80078da:	f008 f9c9 	bl	800fc70 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	b2d8      	uxtb	r0, r3
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	f003 0302 	and.w	r3, r3, #2
 80078f0:	b2d9      	uxtb	r1, r3
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	f003 0304 	and.w	r3, r3, #4
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	461a      	mov	r2, r3
 80078fe:	f007 fbe9 	bl	800f0d4 <led_write>
		  if(dist_r >= 20){
 8007902:	4b68      	ldr	r3, [pc, #416]	; (8007aa4 <init_test+0x1d8>)
 8007904:	edd3 7a00 	vldr	s15, [r3]
 8007908:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800790c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007914:	db0f      	blt.n	8007936 <init_test+0x6a>
			  mode++;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	3301      	adds	r3, #1
 800791a:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 800791c:	4b61      	ldr	r3, [pc, #388]	; (8007aa4 <init_test+0x1d8>)
 800791e:	f04f 0200 	mov.w	r2, #0
 8007922:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	2b07      	cmp	r3, #7
 8007928:	dd01      	ble.n	800792e <init_test+0x62>
				  mode = 0;
 800792a:	2300      	movs	r3, #0
 800792c:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 800792e:	6979      	ldr	r1, [r7, #20]
 8007930:	485d      	ldr	r0, [pc, #372]	; (8007aa8 <init_test+0x1dc>)
 8007932:	f008 f99d 	bl	800fc70 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8007936:	4b5b      	ldr	r3, [pc, #364]	; (8007aa4 <init_test+0x1d8>)
 8007938:	edd3 7a00 	vldr	s15, [r3]
 800793c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8007940:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007948:	d80f      	bhi.n	800796a <init_test+0x9e>
			  mode--;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	3b01      	subs	r3, #1
 800794e:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8007950:	4b54      	ldr	r3, [pc, #336]	; (8007aa4 <init_test+0x1d8>)
 8007952:	f04f 0200 	mov.w	r2, #0
 8007956:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	2b00      	cmp	r3, #0
 800795c:	da01      	bge.n	8007962 <init_test+0x96>
				  mode = 7;
 800795e:	2307      	movs	r3, #7
 8007960:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 8007962:	6979      	ldr	r1, [r7, #20]
 8007964:	4850      	ldr	r0, [pc, #320]	; (8007aa8 <init_test+0x1dc>)
 8007966:	f008 f983 	bl	800fc70 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800796a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800796e:	484f      	ldr	r0, [pc, #316]	; (8007aac <init_test+0x1e0>)
 8007970:	f7fa fcb0 	bl	80022d4 <HAL_GPIO_ReadPin>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1b1      	bne.n	80078de <init_test+0x12>
			  HAL_Delay(50);
 800797a:	2032      	movs	r0, #50	; 0x32
 800797c:	f7f9 fb4e 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8007980:	bf00      	nop
 8007982:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007986:	4849      	ldr	r0, [pc, #292]	; (8007aac <init_test+0x1e0>)
 8007988:	f7fa fca4 	bl	80022d4 <HAL_GPIO_ReadPin>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0f7      	beq.n	8007982 <init_test+0xb6>
			  drive_ready();
 8007992:	f7fd f96f 	bl	8004c74 <drive_ready>
			  get_base();
 8007996:	f007 fb45 	bl	800f024 <get_base>

			  switch(mode){
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	2b07      	cmp	r3, #7
 800799e:	d89e      	bhi.n	80078de <init_test+0x12>
 80079a0:	a201      	add	r2, pc, #4	; (adr r2, 80079a8 <init_test+0xdc>)
 80079a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a6:	bf00      	nop
 80079a8:	080079c9 	.word	0x080079c9
 80079ac:	080079cf 	.word	0x080079cf
 80079b0:	080079ef 	.word	0x080079ef
 80079b4:	08007a0d 	.word	0x08007a0d
 80079b8:	08007a2b 	.word	0x08007a2b
 80079bc:	08007a49 	.word	0x08007a49
 80079c0:	08007a73 	.word	0x08007a73
 80079c4:	08007a89 	.word	0x08007a89
				case 0:
					get_base();
 80079c8:	f007 fb2c 	bl	800f024 <get_base>
					break;
 80079cc:	e067      	b.n	8007a9e <init_test+0x1d2>
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 80079ce:	4838      	ldr	r0, [pc, #224]	; (8007ab0 <init_test+0x1e4>)
 80079d0:	f008 f9c2 	bl	800fd58 <puts>
					for(int i = 0; i < 1; i++){
 80079d4:	2300      	movs	r3, #0
 80079d6:	613b      	str	r3, [r7, #16]
 80079d8:	e005      	b.n	80079e6 <init_test+0x11a>
						driveC(SEC_HALF*2);	//一区画のパルス分デフォルトインターバルで走行
 80079da:	20b6      	movs	r0, #182	; 0xb6
 80079dc:	f7fd fc3a 	bl	8005254 <driveC>
					for(int i = 0; i < 1; i++){
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	3301      	adds	r3, #1
 80079e4:	613b      	str	r3, [r7, #16]
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	ddf6      	ble.n	80079da <init_test+0x10e>
					}
					break;
 80079ec:	e057      	b.n	8007a9e <init_test+0x1d2>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 80079ee:	4831      	ldr	r0, [pc, #196]	; (8007ab4 <init_test+0x1e8>)
 80079f0:	f008 f9b2 	bl	800fd58 <puts>
					for(int i = 0; i < 32; i++){
 80079f4:	2300      	movs	r3, #0
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	e004      	b.n	8007a04 <init_test+0x138>
						rotate_R90();				//16回右90度回転、つまり4周回転
 80079fa:	f7fe f995 	bl	8005d28 <rotate_R90>
					for(int i = 0; i < 32; i++){
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3301      	adds	r3, #1
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b1f      	cmp	r3, #31
 8007a08:	ddf7      	ble.n	80079fa <init_test+0x12e>
					}
					break;
 8007a0a:	e048      	b.n	8007a9e <init_test+0x1d2>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 8007a0c:	482a      	ldr	r0, [pc, #168]	; (8007ab8 <init_test+0x1ec>)
 8007a0e:	f008 f9a3 	bl	800fd58 <puts>
					for(int i = 0; i < 32; i++){
 8007a12:	2300      	movs	r3, #0
 8007a14:	60bb      	str	r3, [r7, #8]
 8007a16:	e004      	b.n	8007a22 <init_test+0x156>
						rotate_L90();				//16回左90度回転、つまり4周回転
 8007a18:	f7fe fa62 	bl	8005ee0 <rotate_L90>
					for(int i = 0; i < 32; i++){
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	60bb      	str	r3, [r7, #8]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2b1f      	cmp	r3, #31
 8007a26:	ddf7      	ble.n	8007a18 <init_test+0x14c>
					}
					break;
 8007a28:	e039      	b.n	8007a9e <init_test+0x1d2>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 8007a2a:	4824      	ldr	r0, [pc, #144]	; (8007abc <init_test+0x1f0>)
 8007a2c:	f008 f994 	bl	800fd58 <puts>
					for(int i = 0; i < 16; i++){
 8007a30:	2300      	movs	r3, #0
 8007a32:	607b      	str	r3, [r7, #4]
 8007a34:	e004      	b.n	8007a40 <init_test+0x174>
						rotate_180();				//8回右180度回転、つまり4周回転
 8007a36:	f7fe fb2f 	bl	8006098 <rotate_180>
					for(int i = 0; i < 16; i++){
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	607b      	str	r3, [r7, #4]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b0f      	cmp	r3, #15
 8007a44:	ddf7      	ble.n	8007a36 <init_test+0x16a>
					}
					break;
 8007a46:	e02a      	b.n	8007a9e <init_test+0x1d2>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 8007a48:	481d      	ldr	r0, [pc, #116]	; (8007ac0 <init_test+0x1f4>)
 8007a4a:	f008 f985 	bl	800fd58 <puts>
					get_base();
 8007a4e:	f007 fae9 	bl	800f024 <get_base>
					half_sectionA();				//半区画のパルス分加速しながら走行
 8007a52:	f7fd ff51 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 6-1; i++){
 8007a56:	2300      	movs	r3, #0
 8007a58:	603b      	str	r3, [r7, #0]
 8007a5a:	e004      	b.n	8007a66 <init_test+0x19a>
						one_sectionU();			//一区画のパルス分等速走行
 8007a5c:	f7fe f94a 	bl	8005cf4 <one_sectionU>
					for(int i = 0; i < 6-1; i++){
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	3301      	adds	r3, #1
 8007a64:	603b      	str	r3, [r7, #0]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	ddf7      	ble.n	8007a5c <init_test+0x190>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 8007a6c:	f7fd ff80 	bl	8005970 <half_sectionD>
					break;
 8007a70:	e015      	b.n	8007a9e <init_test+0x1d2>
				case 6:
					//----a宴会芸モード----
					target_degree_z = degree_z;
 8007a72:	4b14      	ldr	r3, [pc, #80]	; (8007ac4 <init_test+0x1f8>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a14      	ldr	r2, [pc, #80]	; (8007ac8 <init_test+0x1fc>)
 8007a78:	6013      	str	r3, [r2, #0]
					accel_l = 5000;
 8007a7a:	4b14      	ldr	r3, [pc, #80]	; (8007acc <init_test+0x200>)
 8007a7c:	4a14      	ldr	r2, [pc, #80]	; (8007ad0 <init_test+0x204>)
 8007a7e:	601a      	str	r2, [r3, #0]

					enkai_flag = 1;
 8007a80:	4b14      	ldr	r3, [pc, #80]	; (8007ad4 <init_test+0x208>)
 8007a82:	2201      	movs	r2, #1
 8007a84:	701a      	strb	r2, [r3, #0]

					while(1);
 8007a86:	e7fe      	b.n	8007a86 <init_test+0x1ba>
					break;
				case 7:
					//----a停止時前壁補正モード----
					MF.FLAG.FWALL = 1;
 8007a88:	4a13      	ldr	r2, [pc, #76]	; (8007ad8 <init_test+0x20c>)
 8007a8a:	8813      	ldrh	r3, [r2, #0]
 8007a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a90:	8013      	strh	r3, [r2, #0]
					MF.FLAG.DRV = 1;
 8007a92:	4a11      	ldr	r2, [pc, #68]	; (8007ad8 <init_test+0x20c>)
 8007a94:	8813      	ldrh	r3, [r2, #0]
 8007a96:	f043 0302 	orr.w	r3, r3, #2
 8007a9a:	8013      	strh	r3, [r2, #0]
					while(1);
 8007a9c:	e7fe      	b.n	8007a9c <init_test+0x1d0>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8007a9e:	e71e      	b.n	80078de <init_test+0x12>
 8007aa0:	08010ed0 	.word	0x08010ed0
 8007aa4:	20000b2c 	.word	0x20000b2c
 8007aa8:	08010ec4 	.word	0x08010ec4
 8007aac:	40020000 	.word	0x40020000
 8007ab0:	08010eec 	.word	0x08010eec
 8007ab4:	08010f10 	.word	0x08010f10
 8007ab8:	08010f1c 	.word	0x08010f1c
 8007abc:	08010f28 	.word	0x08010f28
 8007ac0:	08010f34 	.word	0x08010f34
 8007ac4:	20000b9c 	.word	0x20000b9c
 8007ac8:	20000c40 	.word	0x20000c40
 8007acc:	20000da0 	.word	0x20000da0
 8007ad0:	459c4000 	.word	0x459c4000
 8007ad4:	20000bf4 	.word	0x20000bf4
 8007ad8:	20000fac 	.word	0x20000fac

08007adc <slalom_test>:
//slalom_test
// スラローム走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b092      	sub	sp, #72	; 0x48
 8007ae0:	af00      	add	r7, sp, #0

	int mode = 0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	647b      	str	r3, [r7, #68]	; 0x44
	printf("Test Slalom Run, Mode : %d\n", mode);
 8007ae6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ae8:	48be      	ldr	r0, [pc, #760]	; (8007de4 <slalom_test+0x308>)
 8007aea:	f008 f8c1 	bl	800fc70 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8007aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	b2d8      	uxtb	r0, r3
 8007af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	b2d9      	uxtb	r1, r3
 8007b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	f003 0304 	and.w	r3, r3, #4
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	f007 fae1 	bl	800f0d4 <led_write>
		  if(dist_r >= 20){
 8007b12:	4bb5      	ldr	r3, [pc, #724]	; (8007de8 <slalom_test+0x30c>)
 8007b14:	edd3 7a00 	vldr	s15, [r3]
 8007b18:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007b1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b24:	db20      	blt.n	8007b68 <slalom_test+0x8c>
			  mode++;
 8007b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b28:	3301      	adds	r3, #1
 8007b2a:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 8007b2c:	4bae      	ldr	r3, [pc, #696]	; (8007de8 <slalom_test+0x30c>)
 8007b2e:	f04f 0200 	mov.w	r2, #0
 8007b32:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 8007b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b36:	2b07      	cmp	r3, #7
 8007b38:	dc03      	bgt.n	8007b42 <slalom_test+0x66>
				  full_led_write(WHITE);
 8007b3a:	2007      	movs	r0, #7
 8007b3c:	f007 fb04 	bl	800f148 <full_led_write>
 8007b40:	e009      	b.n	8007b56 <slalom_test+0x7a>
			  }else if(mode < 16){
 8007b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b44:	2b0f      	cmp	r3, #15
 8007b46:	dc03      	bgt.n	8007b50 <slalom_test+0x74>
				  full_led_write(BLUEGREEN);
 8007b48:	2004      	movs	r0, #4
 8007b4a:	f007 fafd 	bl	800f148 <full_led_write>
 8007b4e:	e002      	b.n	8007b56 <slalom_test+0x7a>
			  }else{
				  full_led_write(PURPLE);
 8007b50:	2005      	movs	r0, #5
 8007b52:	f007 faf9 	bl	800f148 <full_led_write>
			  }
			  if(mode > 23){
 8007b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b58:	2b17      	cmp	r3, #23
 8007b5a:	dd01      	ble.n	8007b60 <slalom_test+0x84>
				  mode = 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  printf("Mode : %d\n", mode);
 8007b60:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b62:	48a2      	ldr	r0, [pc, #648]	; (8007dec <slalom_test+0x310>)
 8007b64:	f008 f884 	bl	800fc70 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8007b68:	4b9f      	ldr	r3, [pc, #636]	; (8007de8 <slalom_test+0x30c>)
 8007b6a:	edd3 7a00 	vldr	s15, [r3]
 8007b6e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8007b72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b7a:	d820      	bhi.n	8007bbe <slalom_test+0xe2>
			  mode--;
 8007b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 8007b82:	4b99      	ldr	r3, [pc, #612]	; (8007de8 <slalom_test+0x30c>)
 8007b84:	f04f 0200 	mov.w	r2, #0
 8007b88:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 8007b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b8c:	2b07      	cmp	r3, #7
 8007b8e:	dc03      	bgt.n	8007b98 <slalom_test+0xbc>
				  full_led_write(WHITE);
 8007b90:	2007      	movs	r0, #7
 8007b92:	f007 fad9 	bl	800f148 <full_led_write>
 8007b96:	e009      	b.n	8007bac <slalom_test+0xd0>
			  }else if(mode < 16){
 8007b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b9a:	2b0f      	cmp	r3, #15
 8007b9c:	dc03      	bgt.n	8007ba6 <slalom_test+0xca>
				  full_led_write(BLUEGREEN);
 8007b9e:	2004      	movs	r0, #4
 8007ba0:	f007 fad2 	bl	800f148 <full_led_write>
 8007ba4:	e002      	b.n	8007bac <slalom_test+0xd0>
			  }else{
				  full_led_write(PURPLE);
 8007ba6:	2005      	movs	r0, #5
 8007ba8:	f007 face 	bl	800f148 <full_led_write>
			  }
			  if(mode < 0){
 8007bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	da01      	bge.n	8007bb6 <slalom_test+0xda>
				  mode = 23;
 8007bb2:	2317      	movs	r3, #23
 8007bb4:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  printf("Mode : %d\n", mode);
 8007bb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bb8:	488c      	ldr	r0, [pc, #560]	; (8007dec <slalom_test+0x310>)
 8007bba:	f008 f859 	bl	800fc70 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8007bbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bc2:	488b      	ldr	r0, [pc, #556]	; (8007df0 <slalom_test+0x314>)
 8007bc4:	f7fa fb86 	bl	80022d4 <HAL_GPIO_ReadPin>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d18f      	bne.n	8007aee <slalom_test+0x12>
			  HAL_Delay(50);
 8007bce:	2032      	movs	r0, #50	; 0x32
 8007bd0:	f7f9 fa24 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8007bd4:	bf00      	nop
 8007bd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bda:	4885      	ldr	r0, [pc, #532]	; (8007df0 <slalom_test+0x314>)
 8007bdc:	f7fa fb7a 	bl	80022d4 <HAL_GPIO_ReadPin>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0f7      	beq.n	8007bd6 <slalom_test+0xfa>
			  drive_ready();
 8007be6:	f7fd f845 	bl	8004c74 <drive_ready>
			  get_base();
 8007bea:	f007 fa1b 	bl	800f024 <get_base>

			  switch(mode){
 8007bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bf0:	2b10      	cmp	r3, #16
 8007bf2:	f200 8200 	bhi.w	8007ff6 <slalom_test+0x51a>
 8007bf6:	a201      	add	r2, pc, #4	; (adr r2, 8007bfc <slalom_test+0x120>)
 8007bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfc:	08007c41 	.word	0x08007c41
 8007c00:	08007c47 	.word	0x08007c47
 8007c04:	08007c77 	.word	0x08007c77
 8007c08:	08007ca7 	.word	0x08007ca7
 8007c0c:	08007cd3 	.word	0x08007cd3
 8007c10:	08007d13 	.word	0x08007d13
 8007c14:	08007d55 	.word	0x08007d55
 8007c18:	08007d97 	.word	0x08007d97
 8007c1c:	08007dcf 	.word	0x08007dcf
 8007c20:	08007e37 	.word	0x08007e37
 8007c24:	08007e6f 	.word	0x08007e6f
 8007c28:	08007ea7 	.word	0x08007ea7
 8007c2c:	08007edf 	.word	0x08007edf
 8007c30:	08007f17 	.word	0x08007f17
 8007c34:	08007f4f 	.word	0x08007f4f
 8007c38:	08007f87 	.word	0x08007f87
 8007c3c:	08007fbf 	.word	0x08007fbf
				case 0:
					get_base();
 8007c40:	f007 f9f0 	bl	800f024 <get_base>
					break;
 8007c44:	e1d7      	b.n	8007ff6 <slalom_test+0x51a>
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 8007c46:	486b      	ldr	r0, [pc, #428]	; (8007df4 <slalom_test+0x318>)
 8007c48:	f008 f886 	bl	800fd58 <puts>
					run_mode = LOW;
 8007c4c:	4b6a      	ldr	r3, [pc, #424]	; (8007df8 <slalom_test+0x31c>)
 8007c4e:	2201      	movs	r2, #1
 8007c50:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8007c52:	f7fd fe51 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 32; i++){
 8007c56:	2300      	movs	r3, #0
 8007c58:	643b      	str	r3, [r7, #64]	; 0x40
 8007c5a:	e006      	b.n	8007c6a <slalom_test+0x18e>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 8007c5c:	f7fe faf4 	bl	8006248 <slalom_R90>
						one_sectionU();
 8007c60:	f7fe f848 	bl	8005cf4 <one_sectionU>
					for(int i = 0; i < 32; i++){
 8007c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c66:	3301      	adds	r3, #1
 8007c68:	643b      	str	r3, [r7, #64]	; 0x40
 8007c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c6c:	2b1f      	cmp	r3, #31
 8007c6e:	ddf5      	ble.n	8007c5c <slalom_test+0x180>
					}
					half_sectionD();
 8007c70:	f7fd fe7e 	bl	8005970 <half_sectionD>
					break;
 8007c74:	e1bf      	b.n	8007ff6 <slalom_test+0x51a>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 8007c76:	4861      	ldr	r0, [pc, #388]	; (8007dfc <slalom_test+0x320>)
 8007c78:	f008 f86e 	bl	800fd58 <puts>
					run_mode = LOW;
 8007c7c:	4b5e      	ldr	r3, [pc, #376]	; (8007df8 <slalom_test+0x31c>)
 8007c7e:	2201      	movs	r2, #1
 8007c80:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8007c82:	f7fd fe39 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 32; i++){
 8007c86:	2300      	movs	r3, #0
 8007c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c8a:	e006      	b.n	8007c9a <slalom_test+0x1be>
						slalom_L90();				//16回右90度回転、つまり4周回転
 8007c8c:	f7fe fb90 	bl	80063b0 <slalom_L90>
						one_sectionU();
 8007c90:	f7fe f830 	bl	8005cf4 <one_sectionU>
					for(int i = 0; i < 32; i++){
 8007c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c96:	3301      	adds	r3, #1
 8007c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c9c:	2b1f      	cmp	r3, #31
 8007c9e:	ddf5      	ble.n	8007c8c <slalom_test+0x1b0>
					}
					half_sectionD();
 8007ca0:	f7fd fe66 	bl	8005970 <half_sectionD>
					break;
 8007ca4:	e1a7      	b.n	8007ff6 <slalom_test+0x51a>
				case 3:
					//----slalom右折----
					printf("slalom turn right .\n");
 8007ca6:	4853      	ldr	r0, [pc, #332]	; (8007df4 <slalom_test+0x318>)
 8007ca8:	f008 f856 	bl	800fd58 <puts>
					run_mode = LOW;
 8007cac:	4b52      	ldr	r3, [pc, #328]	; (8007df8 <slalom_test+0x31c>)
 8007cae:	2201      	movs	r2, #1
 8007cb0:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8007cb2:	f7fd fe21 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cba:	e004      	b.n	8007cc6 <slalom_test+0x1ea>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 8007cbc:	f7fe fac4 	bl	8006248 <slalom_R90>
					for(int i = 0; i < 1; i++){
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	ddf7      	ble.n	8007cbc <slalom_test+0x1e0>
					}
					half_sectionD();
 8007ccc:	f7fd fe50 	bl	8005970 <half_sectionD>
					break;
 8007cd0:	e191      	b.n	8007ff6 <slalom_test+0x51a>
				case 4:
					//----slalom左折----
					printf("slalom turn left .\n");
 8007cd2:	484a      	ldr	r0, [pc, #296]	; (8007dfc <slalom_test+0x320>)
 8007cd4:	f008 f840 	bl	800fd58 <puts>
					run_mode = LOW;
 8007cd8:	4b47      	ldr	r3, [pc, #284]	; (8007df8 <slalom_test+0x31c>)
 8007cda:	2201      	movs	r2, #1
 8007cdc:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8007cde:	f7fd fe0b 	bl	80058f8 <half_sectionA>
					MF.FLAG.LOG = 1;
 8007ce2:	4a47      	ldr	r2, [pc, #284]	; (8007e00 <slalom_test+0x324>)
 8007ce4:	8813      	ldrh	r3, [r2, #0]
 8007ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cea:	8013      	strh	r3, [r2, #0]
					for(int i = 0; i < 1; i++){
 8007cec:	2300      	movs	r3, #0
 8007cee:	637b      	str	r3, [r7, #52]	; 0x34
 8007cf0:	e004      	b.n	8007cfc <slalom_test+0x220>
						slalom_L90();				//16回右90度回転、つまり4周回転
 8007cf2:	f7fe fb5d 	bl	80063b0 <slalom_L90>
					for(int i = 0; i < 1; i++){
 8007cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8007cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	ddf7      	ble.n	8007cf2 <slalom_test+0x216>
					}
					MF.FLAG.LOG = 0;
 8007d02:	4a3f      	ldr	r2, [pc, #252]	; (8007e00 <slalom_test+0x324>)
 8007d04:	8813      	ldrh	r3, [r2, #0]
 8007d06:	f36f 1386 	bfc	r3, #6, #1
 8007d0a:	8013      	strh	r3, [r2, #0]
					half_sectionD();
 8007d0c:	f7fd fe30 	bl	8005970 <half_sectionD>
					printf("r start\n");
					for(int j = 0; j < log_allay; j++){
						printf("%d\n", get_speed_r[j]);
					}
					printf("r end\n");
*/					break;
 8007d10:	e171      	b.n	8007ff6 <slalom_test+0x51a>
				case 5:
					//----slalom2右折 High Speed----
					printf("slalom turn right High Speed .\n");
 8007d12:	483c      	ldr	r0, [pc, #240]	; (8007e04 <slalom_test+0x328>)
 8007d14:	f008 f820 	bl	800fd58 <puts>
					run_mode = HIGH;
 8007d18:	4b37      	ldr	r3, [pc, #220]	; (8007df8 <slalom_test+0x31c>)
 8007d1a:	2203      	movs	r2, #3
 8007d1c:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8007d1e:	f7fd fdeb 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8007d22:	2300      	movs	r3, #0
 8007d24:	633b      	str	r3, [r7, #48]	; 0x30
 8007d26:	e00c      	b.n	8007d42 <slalom_test+0x266>
						full_led_write(RED);
 8007d28:	2001      	movs	r0, #1
 8007d2a:	f007 fa0d 	bl	800f148 <full_led_write>
						slalom_R90();				//16回右90度回転、つまり4周回転
 8007d2e:	f7fe fa8b 	bl	8006248 <slalom_R90>
						full_led_write(GREEN);
 8007d32:	2002      	movs	r0, #2
 8007d34:	f007 fa08 	bl	800f148 <full_led_write>
						one_sectionU();
 8007d38:	f7fd ffdc 	bl	8005cf4 <one_sectionU>
					for(int i = 0; i < 1; i++){
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	3301      	adds	r3, #1
 8007d40:	633b      	str	r3, [r7, #48]	; 0x30
 8007d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	ddef      	ble.n	8007d28 <slalom_test+0x24c>
					}
					full_led_write(BLUE);
 8007d48:	2003      	movs	r0, #3
 8007d4a:	f007 f9fd 	bl	800f148 <full_led_write>
					half_sectionD();
 8007d4e:	f7fd fe0f 	bl	8005970 <half_sectionD>
					break;
 8007d52:	e150      	b.n	8007ff6 <slalom_test+0x51a>
				case 6:
					//----slalom2左折 High Speed----
					printf("slalom turn left High Speed .\n");
 8007d54:	482c      	ldr	r0, [pc, #176]	; (8007e08 <slalom_test+0x32c>)
 8007d56:	f007 ffff 	bl	800fd58 <puts>
					run_mode = HIGH;
 8007d5a:	4b27      	ldr	r3, [pc, #156]	; (8007df8 <slalom_test+0x31c>)
 8007d5c:	2203      	movs	r2, #3
 8007d5e:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8007d60:	f7fd fdca 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8007d64:	2300      	movs	r3, #0
 8007d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d68:	e00c      	b.n	8007d84 <slalom_test+0x2a8>
						full_led_write(RED);
 8007d6a:	2001      	movs	r0, #1
 8007d6c:	f007 f9ec 	bl	800f148 <full_led_write>
						slalom_L90();				//16回左90度回転、つまり4周回転
 8007d70:	f7fe fb1e 	bl	80063b0 <slalom_L90>
						full_led_write(GREEN);
 8007d74:	2002      	movs	r0, #2
 8007d76:	f007 f9e7 	bl	800f148 <full_led_write>
						one_sectionU();
 8007d7a:	f7fd ffbb 	bl	8005cf4 <one_sectionU>
					for(int i = 0; i < 1; i++){
 8007d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d80:	3301      	adds	r3, #1
 8007d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	ddef      	ble.n	8007d6a <slalom_test+0x28e>
					}
					full_led_write(BLUE);
 8007d8a:	2003      	movs	r0, #3
 8007d8c:	f007 f9dc 	bl	800f148 <full_led_write>
					half_sectionD();
 8007d90:	f7fd fdee 	bl	8005970 <half_sectionD>
					break;
 8007d94:	e12f      	b.n	8007ff6 <slalom_test+0x51a>
				case 7:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 8007d96:	481d      	ldr	r0, [pc, #116]	; (8007e0c <slalom_test+0x330>)
 8007d98:	f007 ffde 	bl	800fd58 <puts>
					run_mode = LOW;
 8007d9c:	4b16      	ldr	r3, [pc, #88]	; (8007df8 <slalom_test+0x31c>)
 8007d9e:	2201      	movs	r2, #1
 8007da0:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8007da2:	f7fd fda9 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8007da6:	2300      	movs	r3, #0
 8007da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007daa:	e007      	b.n	8007dbc <slalom_test+0x2e0>
						full_led_write(GREEN);
 8007dac:	2002      	movs	r0, #2
 8007dae:	f007 f9cb 	bl	800f148 <full_led_write>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 8007db2:	f7fe fba7 	bl	8006504 <Lslalom_R90>
					for(int i = 0; i < 1; i++){
 8007db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db8:	3301      	adds	r3, #1
 8007dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	ddf4      	ble.n	8007dac <slalom_test+0x2d0>
					}
					full_led_write(BLUE);
 8007dc2:	2003      	movs	r0, #3
 8007dc4:	f007 f9c0 	bl	800f148 <full_led_write>
					half_sectionD();
 8007dc8:	f7fd fdd2 	bl	8005970 <half_sectionD>
					break;
 8007dcc:	e113      	b.n	8007ff6 <slalom_test+0x51a>
				case 8:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 8007dce:	4810      	ldr	r0, [pc, #64]	; (8007e10 <slalom_test+0x334>)
 8007dd0:	f007 ffc2 	bl	800fd58 <puts>
					run_mode = LOW;
 8007dd4:	4b08      	ldr	r3, [pc, #32]	; (8007df8 <slalom_test+0x31c>)
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8007dda:	f7fd fd8d 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8007dde:	2300      	movs	r3, #0
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24
 8007de2:	e01f      	b.n	8007e24 <slalom_test+0x348>
 8007de4:	08010f54 	.word	0x08010f54
 8007de8:	20000b2c 	.word	0x20000b2c
 8007dec:	08010ec4 	.word	0x08010ec4
 8007df0:	40020000 	.word	0x40020000
 8007df4:	08010f70 	.word	0x08010f70
 8007df8:	2000048e 	.word	0x2000048e
 8007dfc:	08010f84 	.word	0x08010f84
 8007e00:	20000fac 	.word	0x20000fac
 8007e04:	08010f98 	.word	0x08010f98
 8007e08:	08010fb8 	.word	0x08010fb8
 8007e0c:	08010fd8 	.word	0x08010fd8
 8007e10:	08010ff0 	.word	0x08010ff0
						full_led_write(GREEN);
 8007e14:	2002      	movs	r0, #2
 8007e16:	f007 f997 	bl	800f148 <full_led_write>
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 8007e1a:	f7fe fbe9 	bl	80065f0 <Lslalom_L90>
					for(int i = 0; i < 1; i++){
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	3301      	adds	r3, #1
 8007e22:	627b      	str	r3, [r7, #36]	; 0x24
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	ddf4      	ble.n	8007e14 <slalom_test+0x338>
					}
					full_led_write(BLUE);
 8007e2a:	2003      	movs	r0, #3
 8007e2c:	f007 f98c 	bl	800f148 <full_led_write>
					half_sectionD();
 8007e30:	f7fd fd9e 	bl	8005970 <half_sectionD>
					break;
 8007e34:	e0df      	b.n	8007ff6 <slalom_test+0x51a>
				case 9:
					//----Lslalom2右折 High Speed----
					printf("Lslalom turn right High Speed .\n");
 8007e36:	4872      	ldr	r0, [pc, #456]	; (8008000 <slalom_test+0x524>)
 8007e38:	f007 ff8e 	bl	800fd58 <puts>
					run_mode = HIGH;
 8007e3c:	4b71      	ldr	r3, [pc, #452]	; (8008004 <slalom_test+0x528>)
 8007e3e:	2203      	movs	r2, #3
 8007e40:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8007e42:	f7fd fd59 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8007e46:	2300      	movs	r3, #0
 8007e48:	623b      	str	r3, [r7, #32]
 8007e4a:	e007      	b.n	8007e5c <slalom_test+0x380>
						full_led_write(GREEN);
 8007e4c:	2002      	movs	r0, #2
 8007e4e:	f007 f97b 	bl	800f148 <full_led_write>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 8007e52:	f7fe fb57 	bl	8006504 <Lslalom_R90>
					for(int i = 0; i < 1; i++){
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	623b      	str	r3, [r7, #32]
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	ddf4      	ble.n	8007e4c <slalom_test+0x370>
					}
					full_led_write(BLUE);
 8007e62:	2003      	movs	r0, #3
 8007e64:	f007 f970 	bl	800f148 <full_led_write>
					half_sectionD();
 8007e68:	f7fd fd82 	bl	8005970 <half_sectionD>
					break;
 8007e6c:	e0c3      	b.n	8007ff6 <slalom_test+0x51a>
				case 10:
					//----Lslalom2左折 High Speed----
					printf("Lslalom turn left High Speed .\n");
 8007e6e:	4866      	ldr	r0, [pc, #408]	; (8008008 <slalom_test+0x52c>)
 8007e70:	f007 ff72 	bl	800fd58 <puts>
					run_mode = HIGH;
 8007e74:	4b63      	ldr	r3, [pc, #396]	; (8008004 <slalom_test+0x528>)
 8007e76:	2203      	movs	r2, #3
 8007e78:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8007e7a:	f7fd fd3d 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8007e7e:	2300      	movs	r3, #0
 8007e80:	61fb      	str	r3, [r7, #28]
 8007e82:	e007      	b.n	8007e94 <slalom_test+0x3b8>
						full_led_write(GREEN);
 8007e84:	2002      	movs	r0, #2
 8007e86:	f007 f95f 	bl	800f148 <full_led_write>
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 8007e8a:	f7fe fbb1 	bl	80065f0 <Lslalom_L90>
					for(int i = 0; i < 1; i++){
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	3301      	adds	r3, #1
 8007e92:	61fb      	str	r3, [r7, #28]
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	ddf4      	ble.n	8007e84 <slalom_test+0x3a8>
					}
					full_led_write(BLUE);
 8007e9a:	2003      	movs	r0, #3
 8007e9c:	f007 f954 	bl	800f148 <full_led_write>
					half_sectionD();
 8007ea0:	f7fd fd66 	bl	8005970 <half_sectionD>
					break;
 8007ea4:	e0a7      	b.n	8007ff6 <slalom_test+0x51a>
				case 11:
					//----Lslalom3右折 High High Speed----
					printf("Lslalom turn right High High Speed .\n");
 8007ea6:	4859      	ldr	r0, [pc, #356]	; (800800c <slalom_test+0x530>)
 8007ea8:	f007 ff56 	bl	800fd58 <puts>
					run_mode = HIGH;
 8007eac:	4b55      	ldr	r3, [pc, #340]	; (8008004 <slalom_test+0x528>)
 8007eae:	2203      	movs	r2, #3
 8007eb0:	701a      	strb	r2, [r3, #0]
					half_sectionA3();
 8007eb2:	f7fd fd91 	bl	80059d8 <half_sectionA3>
					for(int i = 0; i < 1; i++){
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	61bb      	str	r3, [r7, #24]
 8007eba:	e007      	b.n	8007ecc <slalom_test+0x3f0>
						full_led_write(GREEN);
 8007ebc:	2002      	movs	r0, #2
 8007ebe:	f007 f943 	bl	800f148 <full_led_write>
						Lslalom_R903();				//16回右90度回転、つまり4周回転
 8007ec2:	f7fe fc05 	bl	80066d0 <Lslalom_R903>
					for(int i = 0; i < 1; i++){
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	61bb      	str	r3, [r7, #24]
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	ddf4      	ble.n	8007ebc <slalom_test+0x3e0>
					}
					full_led_write(BLUE);
 8007ed2:	2003      	movs	r0, #3
 8007ed4:	f007 f938 	bl	800f148 <full_led_write>
					half_sectionD3();
 8007ed8:	f7fd fd98 	bl	8005a0c <half_sectionD3>
					break;
 8007edc:	e08b      	b.n	8007ff6 <slalom_test+0x51a>
				case 12:
					//----Lslalom3左折 High High Speed----
					printf("Lslalom turn left High High Speed .\n");
 8007ede:	484c      	ldr	r0, [pc, #304]	; (8008010 <slalom_test+0x534>)
 8007ee0:	f007 ff3a 	bl	800fd58 <puts>
					run_mode = HIGH;
 8007ee4:	4b47      	ldr	r3, [pc, #284]	; (8008004 <slalom_test+0x528>)
 8007ee6:	2203      	movs	r2, #3
 8007ee8:	701a      	strb	r2, [r3, #0]
					half_sectionA3();
 8007eea:	f7fd fd75 	bl	80059d8 <half_sectionA3>
					for(int i = 0; i < 1; i++){
 8007eee:	2300      	movs	r3, #0
 8007ef0:	617b      	str	r3, [r7, #20]
 8007ef2:	e007      	b.n	8007f04 <slalom_test+0x428>
						full_led_write(GREEN);
 8007ef4:	2002      	movs	r0, #2
 8007ef6:	f007 f927 	bl	800f148 <full_led_write>
						Lslalom_L903();				//16回左90度回転、つまり4周回転
 8007efa:	f7fe fc23 	bl	8006744 <Lslalom_L903>
					for(int i = 0; i < 1; i++){
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	3301      	adds	r3, #1
 8007f02:	617b      	str	r3, [r7, #20]
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	ddf4      	ble.n	8007ef4 <slalom_test+0x418>
					}
					full_led_write(BLUE);
 8007f0a:	2003      	movs	r0, #3
 8007f0c:	f007 f91c 	bl	800f148 <full_led_write>
					half_sectionD3();
 8007f10:	f7fd fd7c 	bl	8005a0c <half_sectionD3>
					break;
 8007f14:	e06f      	b.n	8007ff6 <slalom_test+0x51a>
				case 13:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 8007f16:	483f      	ldr	r0, [pc, #252]	; (8008014 <slalom_test+0x538>)
 8007f18:	f007 ff1e 	bl	800fd58 <puts>
					run_mode = LOW;
 8007f1c:	4b39      	ldr	r3, [pc, #228]	; (8008004 <slalom_test+0x528>)
 8007f1e:	2201      	movs	r2, #1
 8007f20:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8007f22:	f7fd fce9 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8007f26:	2300      	movs	r3, #0
 8007f28:	613b      	str	r3, [r7, #16]
 8007f2a:	e007      	b.n	8007f3c <slalom_test+0x460>
						full_led_write(GREEN);
 8007f2c:	2002      	movs	r0, #2
 8007f2e:	f007 f90b 	bl	800f148 <full_led_write>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 8007f32:	f7fe fc3f 	bl	80067b4 <Lslalom_R180>
					for(int i = 0; i < 1; i++){
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	613b      	str	r3, [r7, #16]
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	ddf4      	ble.n	8007f2c <slalom_test+0x450>
					}
					full_led_write(BLUE);
 8007f42:	2003      	movs	r0, #3
 8007f44:	f007 f900 	bl	800f148 <full_led_write>
					half_sectionD();
 8007f48:	f7fd fd12 	bl	8005970 <half_sectionD>
					break;
 8007f4c:	e053      	b.n	8007ff6 <slalom_test+0x51a>
				case 14:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 8007f4e:	4832      	ldr	r0, [pc, #200]	; (8008018 <slalom_test+0x53c>)
 8007f50:	f007 ff02 	bl	800fd58 <puts>
					run_mode = LOW;
 8007f54:	4b2b      	ldr	r3, [pc, #172]	; (8008004 <slalom_test+0x528>)
 8007f56:	2201      	movs	r2, #1
 8007f58:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8007f5a:	f7fd fccd 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8007f5e:	2300      	movs	r3, #0
 8007f60:	60fb      	str	r3, [r7, #12]
 8007f62:	e007      	b.n	8007f74 <slalom_test+0x498>
						full_led_write(GREEN);
 8007f64:	2002      	movs	r0, #2
 8007f66:	f007 f8ef 	bl	800f148 <full_led_write>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 8007f6a:	f7fe fca1 	bl	80068b0 <Lslalom_L180>
					for(int i = 0; i < 1; i++){
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	3301      	adds	r3, #1
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	ddf4      	ble.n	8007f64 <slalom_test+0x488>
					}
					full_led_write(BLUE);
 8007f7a:	2003      	movs	r0, #3
 8007f7c:	f007 f8e4 	bl	800f148 <full_led_write>
					half_sectionD();
 8007f80:	f7fd fcf6 	bl	8005970 <half_sectionD>
					break;
 8007f84:	e037      	b.n	8007ff6 <slalom_test+0x51a>
				case 15:
					//----Lslalom右180 High Speed----
					printf("Lslalom turn right & right High Speed .\n");
 8007f86:	4825      	ldr	r0, [pc, #148]	; (800801c <slalom_test+0x540>)
 8007f88:	f007 fee6 	bl	800fd58 <puts>
					run_mode = HIGH;
 8007f8c:	4b1d      	ldr	r3, [pc, #116]	; (8008004 <slalom_test+0x528>)
 8007f8e:	2203      	movs	r2, #3
 8007f90:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8007f92:	f7fd fcb1 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8007f96:	2300      	movs	r3, #0
 8007f98:	60bb      	str	r3, [r7, #8]
 8007f9a:	e007      	b.n	8007fac <slalom_test+0x4d0>
						full_led_write(GREEN);
 8007f9c:	2002      	movs	r0, #2
 8007f9e:	f007 f8d3 	bl	800f148 <full_led_write>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 8007fa2:	f7fe fc07 	bl	80067b4 <Lslalom_R180>
					for(int i = 0; i < 1; i++){
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	60bb      	str	r3, [r7, #8]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	ddf4      	ble.n	8007f9c <slalom_test+0x4c0>
					}
					full_led_write(BLUE);
 8007fb2:	2003      	movs	r0, #3
 8007fb4:	f007 f8c8 	bl	800f148 <full_led_write>
					half_sectionD();
 8007fb8:	f7fd fcda 	bl	8005970 <half_sectionD>
					break;
 8007fbc:	e01b      	b.n	8007ff6 <slalom_test+0x51a>
				case 16:
					//----Lslalom左180 High Speed----
					printf("Lslalom turn left & left High Speed .\n");
 8007fbe:	4818      	ldr	r0, [pc, #96]	; (8008020 <slalom_test+0x544>)
 8007fc0:	f007 feca 	bl	800fd58 <puts>
					run_mode = HIGH;
 8007fc4:	4b0f      	ldr	r3, [pc, #60]	; (8008004 <slalom_test+0x528>)
 8007fc6:	2203      	movs	r2, #3
 8007fc8:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8007fca:	f7fd fc95 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8007fce:	2300      	movs	r3, #0
 8007fd0:	607b      	str	r3, [r7, #4]
 8007fd2:	e007      	b.n	8007fe4 <slalom_test+0x508>
						full_led_write(GREEN);
 8007fd4:	2002      	movs	r0, #2
 8007fd6:	f007 f8b7 	bl	800f148 <full_led_write>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 8007fda:	f7fe fc69 	bl	80068b0 <Lslalom_L180>
					for(int i = 0; i < 1; i++){
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	607b      	str	r3, [r7, #4]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	ddf4      	ble.n	8007fd4 <slalom_test+0x4f8>
					}
					full_led_write(BLUE);
 8007fea:	2003      	movs	r0, #3
 8007fec:	f007 f8ac 	bl	800f148 <full_led_write>
					half_sectionD();
 8007ff0:	f7fd fcbe 	bl	8005970 <half_sectionD>
					break;
 8007ff4:	bf00      	nop

			  }
			  full_led_write(RED);
 8007ff6:	2001      	movs	r0, #1
 8007ff8:	f007 f8a6 	bl	800f148 <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8007ffc:	e577      	b.n	8007aee <slalom_test+0x12>
 8007ffe:	bf00      	nop
 8008000:	08011004 	.word	0x08011004
 8008004:	2000048e 	.word	0x2000048e
 8008008:	08011024 	.word	0x08011024
 800800c:	08011044 	.word	0x08011044
 8008010:	0801106c 	.word	0x0801106c
 8008014:	08011090 	.word	0x08011090
 8008018:	080110b0 	.word	0x080110b0
 800801c:	080110cc 	.word	0x080110cc
 8008020:	080110f4 	.word	0x080110f4

08008024 <v_test>:
//v_test
// 斜め走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_test(void){
 8008024:	b580      	push	{r7, lr}
 8008026:	b096      	sub	sp, #88	; 0x58
 8008028:	af00      	add	r7, sp, #0

	int mode = 0;
 800802a:	2300      	movs	r3, #0
 800802c:	657b      	str	r3, [r7, #84]	; 0x54
	printf("Test V Run, Mode : %d\n", mode);
 800802e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008030:	48bf      	ldr	r0, [pc, #764]	; (8008330 <v_test+0x30c>)
 8008032:	f007 fe1d 	bl	800fc70 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008038:	b2db      	uxtb	r3, r3
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	b2d8      	uxtb	r0, r3
 8008040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008042:	b2db      	uxtb	r3, r3
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	b2d9      	uxtb	r1, r3
 800804a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800804c:	b2db      	uxtb	r3, r3
 800804e:	f003 0304 	and.w	r3, r3, #4
 8008052:	b2db      	uxtb	r3, r3
 8008054:	461a      	mov	r2, r3
 8008056:	f007 f83d 	bl	800f0d4 <led_write>
		  if(dist_r >= 20){
 800805a:	4bb6      	ldr	r3, [pc, #728]	; (8008334 <v_test+0x310>)
 800805c:	edd3 7a00 	vldr	s15, [r3]
 8008060:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800806c:	db20      	blt.n	80080b0 <v_test+0x8c>
			  mode++;
 800806e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008070:	3301      	adds	r3, #1
 8008072:	657b      	str	r3, [r7, #84]	; 0x54
			  dist_r = 0;
 8008074:	4baf      	ldr	r3, [pc, #700]	; (8008334 <v_test+0x310>)
 8008076:	f04f 0200 	mov.w	r2, #0
 800807a:	601a      	str	r2, [r3, #0]
			  if(mode > 23){
 800807c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800807e:	2b17      	cmp	r3, #23
 8008080:	dd01      	ble.n	8008086 <v_test+0x62>
				  mode = 0;
 8008082:	2300      	movs	r3, #0
 8008084:	657b      	str	r3, [r7, #84]	; 0x54
			  }
			  if(mode < 8){
 8008086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008088:	2b07      	cmp	r3, #7
 800808a:	dc03      	bgt.n	8008094 <v_test+0x70>
				  full_led_write(WHITE);
 800808c:	2007      	movs	r0, #7
 800808e:	f007 f85b 	bl	800f148 <full_led_write>
 8008092:	e009      	b.n	80080a8 <v_test+0x84>
			  }else if(mode < 16){
 8008094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008096:	2b0f      	cmp	r3, #15
 8008098:	dc03      	bgt.n	80080a2 <v_test+0x7e>
				  full_led_write(BLUEGREEN);
 800809a:	2004      	movs	r0, #4
 800809c:	f007 f854 	bl	800f148 <full_led_write>
 80080a0:	e002      	b.n	80080a8 <v_test+0x84>
			  }else{
				  full_led_write(PURPLE);
 80080a2:	2005      	movs	r0, #5
 80080a4:	f007 f850 	bl	800f148 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 80080a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80080aa:	48a3      	ldr	r0, [pc, #652]	; (8008338 <v_test+0x314>)
 80080ac:	f007 fde0 	bl	800fc70 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80080b0:	4ba0      	ldr	r3, [pc, #640]	; (8008334 <v_test+0x310>)
 80080b2:	edd3 7a00 	vldr	s15, [r3]
 80080b6:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80080ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c2:	d820      	bhi.n	8008106 <v_test+0xe2>
			  mode--;
 80080c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080c6:	3b01      	subs	r3, #1
 80080c8:	657b      	str	r3, [r7, #84]	; 0x54
			  dist_r = 0;
 80080ca:	4b9a      	ldr	r3, [pc, #616]	; (8008334 <v_test+0x310>)
 80080cc:	f04f 0200 	mov.w	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80080d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	da01      	bge.n	80080dc <v_test+0xb8>
				  mode = 23;
 80080d8:	2317      	movs	r3, #23
 80080da:	657b      	str	r3, [r7, #84]	; 0x54
			  }
			  if(mode < 8){
 80080dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080de:	2b07      	cmp	r3, #7
 80080e0:	dc03      	bgt.n	80080ea <v_test+0xc6>
				  full_led_write(WHITE);
 80080e2:	2007      	movs	r0, #7
 80080e4:	f007 f830 	bl	800f148 <full_led_write>
 80080e8:	e009      	b.n	80080fe <v_test+0xda>
			  }else if(mode < 16){
 80080ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ec:	2b0f      	cmp	r3, #15
 80080ee:	dc03      	bgt.n	80080f8 <v_test+0xd4>
				  full_led_write(BLUEGREEN);
 80080f0:	2004      	movs	r0, #4
 80080f2:	f007 f829 	bl	800f148 <full_led_write>
 80080f6:	e002      	b.n	80080fe <v_test+0xda>
			  }else{
				  full_led_write(PURPLE);
 80080f8:	2005      	movs	r0, #5
 80080fa:	f007 f825 	bl	800f148 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 80080fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008100:	488d      	ldr	r0, [pc, #564]	; (8008338 <v_test+0x314>)
 8008102:	f007 fdb5 	bl	800fc70 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8008106:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800810a:	488c      	ldr	r0, [pc, #560]	; (800833c <v_test+0x318>)
 800810c:	f7fa f8e2 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d18f      	bne.n	8008036 <v_test+0x12>
			  HAL_Delay(50);
 8008116:	2032      	movs	r0, #50	; 0x32
 8008118:	f7f8 ff80 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800811c:	bf00      	nop
 800811e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008122:	4886      	ldr	r0, [pc, #536]	; (800833c <v_test+0x318>)
 8008124:	f7fa f8d6 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d0f7      	beq.n	800811e <v_test+0xfa>
			  drive_ready();
 800812e:	f7fc fda1 	bl	8004c74 <drive_ready>

			  MF.FLAG.XDIR = 1;
 8008132:	4a83      	ldr	r2, [pc, #524]	; (8008340 <v_test+0x31c>)
 8008134:	8813      	ldrh	r3, [r2, #0]
 8008136:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800813a:	8013      	strh	r3, [r2, #0]
			  v_flag = 0;
 800813c:	4b81      	ldr	r3, [pc, #516]	; (8008344 <v_test+0x320>)
 800813e:	2200      	movs	r2, #0
 8008140:	701a      	strb	r2, [r3, #0]
			  get_base();
 8008142:	f006 ff6f 	bl	800f024 <get_base>

			  switch(mode){
 8008146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008148:	2b14      	cmp	r3, #20
 800814a:	f200 8247 	bhi.w	80085dc <v_test+0x5b8>
 800814e:	a201      	add	r2, pc, #4	; (adr r2, 8008154 <v_test+0x130>)
 8008150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008154:	080081a9 	.word	0x080081a9
 8008158:	080081af 	.word	0x080081af
 800815c:	080081e1 	.word	0x080081e1
 8008160:	08008213 	.word	0x08008213
 8008164:	0800824d 	.word	0x0800824d
 8008168:	08008287 	.word	0x08008287
 800816c:	080082b9 	.word	0x080082b9
 8008170:	080082eb 	.word	0x080082eb
 8008174:	08008319 	.word	0x08008319
 8008178:	0800837d 	.word	0x0800837d
 800817c:	080083af 	.word	0x080083af
 8008180:	080083e1 	.word	0x080083e1
 8008184:	08008413 	.word	0x08008413
 8008188:	08008445 	.word	0x08008445
 800818c:	0800847f 	.word	0x0800847f
 8008190:	080084b9 	.word	0x080084b9
 8008194:	080084eb 	.word	0x080084eb
 8008198:	0800851d 	.word	0x0800851d
 800819c:	0800854b 	.word	0x0800854b
 80081a0:	08008579 	.word	0x08008579
 80081a4:	080085ab 	.word	0x080085ab
				case 0:
					get_base();
 80081a8:	f006 ff3c 	bl	800f024 <get_base>
					break;
 80081ac:	e216      	b.n	80085dc <v_test+0x5b8>
				case 1:
					//----V右45----
					printf("V 45 right .\n");
 80081ae:	4866      	ldr	r0, [pc, #408]	; (8008348 <v_test+0x324>)
 80081b0:	f007 fdd2 	bl	800fd58 <puts>
					run_mode = LOW;
 80081b4:	4b65      	ldr	r3, [pc, #404]	; (800834c <v_test+0x328>)
 80081b6:	2201      	movs	r2, #1
 80081b8:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 80081ba:	f7fd fb9d 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 32; i++){
 80081be:	2300      	movs	r3, #0
 80081c0:	653b      	str	r3, [r7, #80]	; 0x50
 80081c2:	e004      	b.n	80081ce <v_test+0x1aa>
						v_R45();
 80081c4:	f7fe fbec 	bl	80069a0 <v_R45>
					for(int i = 0; i < 32; i++){
 80081c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081ca:	3301      	adds	r3, #1
 80081cc:	653b      	str	r3, [r7, #80]	; 0x50
 80081ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081d0:	2b1f      	cmp	r3, #31
 80081d2:	ddf7      	ble.n	80081c4 <v_test+0x1a0>
					}
					full_led_write(BLUE);
 80081d4:	2003      	movs	r0, #3
 80081d6:	f006 ffb7 	bl	800f148 <full_led_write>
					half_sectionD();
 80081da:	f7fd fbc9 	bl	8005970 <half_sectionD>
					break;
 80081de:	e1fd      	b.n	80085dc <v_test+0x5b8>
				case 2:
					//----V左45----
					printf("V 45 left .\n");
 80081e0:	485b      	ldr	r0, [pc, #364]	; (8008350 <v_test+0x32c>)
 80081e2:	f007 fdb9 	bl	800fd58 <puts>
					run_mode = LOW;
 80081e6:	4b59      	ldr	r3, [pc, #356]	; (800834c <v_test+0x328>)
 80081e8:	2201      	movs	r2, #1
 80081ea:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 80081ec:	f7fd fb84 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 32; i++){
 80081f0:	2300      	movs	r3, #0
 80081f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081f4:	e004      	b.n	8008200 <v_test+0x1dc>
						v_L45();
 80081f6:	f7fe fc81 	bl	8006afc <v_L45>
					for(int i = 0; i < 32; i++){
 80081fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081fc:	3301      	adds	r3, #1
 80081fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008202:	2b1f      	cmp	r3, #31
 8008204:	ddf7      	ble.n	80081f6 <v_test+0x1d2>
					}
					full_led_write(BLUE);
 8008206:	2003      	movs	r0, #3
 8008208:	f006 ff9e 	bl	800f148 <full_led_write>
					half_sectionD();
 800820c:	f7fd fbb0 	bl	8005970 <half_sectionD>
					break;
 8008210:	e1e4      	b.n	80085dc <v_test+0x5b8>
				case 3:
					//----V右90----
					printf("V 90 right .\n");
 8008212:	4850      	ldr	r0, [pc, #320]	; (8008354 <v_test+0x330>)
 8008214:	f007 fda0 	bl	800fd58 <puts>
					run_mode = LOW;
 8008218:	4b4c      	ldr	r3, [pc, #304]	; (800834c <v_test+0x328>)
 800821a:	2201      	movs	r2, #1
 800821c:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 800821e:	f7fd fb6b 	bl	80058f8 <half_sectionA>
					v_R45();
 8008222:	f7fe fbbd 	bl	80069a0 <v_R45>
					for(int i = 0; i < 1; i++){
 8008226:	2300      	movs	r3, #0
 8008228:	64bb      	str	r3, [r7, #72]	; 0x48
 800822a:	e004      	b.n	8008236 <v_test+0x212>
						v_R90();
 800822c:	f7fe feb6 	bl	8006f9c <v_R90>
					for(int i = 0; i < 1; i++){
 8008230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008232:	3301      	adds	r3, #1
 8008234:	64bb      	str	r3, [r7, #72]	; 0x48
 8008236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008238:	2b00      	cmp	r3, #0
 800823a:	ddf7      	ble.n	800822c <v_test+0x208>
					}
					v_R45();
 800823c:	f7fe fbb0 	bl	80069a0 <v_R45>
					full_led_write(BLUE);
 8008240:	2003      	movs	r0, #3
 8008242:	f006 ff81 	bl	800f148 <full_led_write>
					half_sectionD();
 8008246:	f7fd fb93 	bl	8005970 <half_sectionD>
					break;
 800824a:	e1c7      	b.n	80085dc <v_test+0x5b8>
				case 4:
					//----V左90----
					printf("V 90 left .\n");
 800824c:	4842      	ldr	r0, [pc, #264]	; (8008358 <v_test+0x334>)
 800824e:	f007 fd83 	bl	800fd58 <puts>
					run_mode = LOW;
 8008252:	4b3e      	ldr	r3, [pc, #248]	; (800834c <v_test+0x328>)
 8008254:	2201      	movs	r2, #1
 8008256:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008258:	f7fd fb4e 	bl	80058f8 <half_sectionA>
					v_L45();
 800825c:	f7fe fc4e 	bl	8006afc <v_L45>
					for(int i = 0; i < 1; i++){
 8008260:	2300      	movs	r3, #0
 8008262:	647b      	str	r3, [r7, #68]	; 0x44
 8008264:	e004      	b.n	8008270 <v_test+0x24c>
						v_L90();
 8008266:	f7fe fef5 	bl	8007054 <v_L90>
					for(int i = 0; i < 1; i++){
 800826a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800826c:	3301      	adds	r3, #1
 800826e:	647b      	str	r3, [r7, #68]	; 0x44
 8008270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008272:	2b00      	cmp	r3, #0
 8008274:	ddf7      	ble.n	8008266 <v_test+0x242>
					}
					v_L45();
 8008276:	f7fe fc41 	bl	8006afc <v_L45>
					full_led_write(BLUE);
 800827a:	2003      	movs	r0, #3
 800827c:	f006 ff64 	bl	800f148 <full_led_write>
					half_sectionD();
 8008280:	f7fd fb76 	bl	8005970 <half_sectionD>
					break;
 8008284:	e1aa      	b.n	80085dc <v_test+0x5b8>
				case 5:
					//----V右135----
					printf("V 135 right .\n");
 8008286:	4835      	ldr	r0, [pc, #212]	; (800835c <v_test+0x338>)
 8008288:	f007 fd66 	bl	800fd58 <puts>
					run_mode = LOW;
 800828c:	4b2f      	ldr	r3, [pc, #188]	; (800834c <v_test+0x328>)
 800828e:	2201      	movs	r2, #1
 8008290:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008292:	f7fd fb31 	bl	80058f8 <half_sectionA>
//					v_R45();
					for(int i = 0; i < 1; i++){
 8008296:	2300      	movs	r3, #0
 8008298:	643b      	str	r3, [r7, #64]	; 0x40
 800829a:	e004      	b.n	80082a6 <v_test+0x282>
						v_R135();
 800829c:	f7fe ff30 	bl	8007100 <v_R135>
					for(int i = 0; i < 1; i++){
 80082a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a2:	3301      	adds	r3, #1
 80082a4:	643b      	str	r3, [r7, #64]	; 0x40
 80082a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	ddf7      	ble.n	800829c <v_test+0x278>
					}
//					v_R45();
					full_led_write(BLUE);
 80082ac:	2003      	movs	r0, #3
 80082ae:	f006 ff4b 	bl	800f148 <full_led_write>
					half_sectionD();
 80082b2:	f7fd fb5d 	bl	8005970 <half_sectionD>
					break;
 80082b6:	e191      	b.n	80085dc <v_test+0x5b8>
				case 6:
					//----V左135----
					printf("V 135 left .\n");
 80082b8:	4829      	ldr	r0, [pc, #164]	; (8008360 <v_test+0x33c>)
 80082ba:	f007 fd4d 	bl	800fd58 <puts>
					run_mode = LOW;
 80082be:	4b23      	ldr	r3, [pc, #140]	; (800834c <v_test+0x328>)
 80082c0:	2201      	movs	r2, #1
 80082c2:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 80082c4:	f7fd fb18 	bl	80058f8 <half_sectionA>
//					v_L45();
					for(int i = 0; i < 1; i++){
 80082c8:	2300      	movs	r3, #0
 80082ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082cc:	e004      	b.n	80082d8 <v_test+0x2b4>
						v_L135();
 80082ce:	f7fe ffc5 	bl	800725c <v_L135>
					for(int i = 0; i < 1; i++){
 80082d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d4:	3301      	adds	r3, #1
 80082d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	ddf7      	ble.n	80082ce <v_test+0x2aa>
					}
//					v_L45();
					full_led_write(BLUE);
 80082de:	2003      	movs	r0, #3
 80082e0:	f006 ff32 	bl	800f148 <full_led_write>
					half_sectionD();
 80082e4:	f7fd fb44 	bl	8005970 <half_sectionD>
					break;
 80082e8:	e178      	b.n	80085dc <v_test+0x5b8>
				case 7:
					//----V右45D----
					printf("V 45 right .\n");
 80082ea:	4817      	ldr	r0, [pc, #92]	; (8008348 <v_test+0x324>)
 80082ec:	f007 fd34 	bl	800fd58 <puts>
					run_mode = LOW;
 80082f0:	4b16      	ldr	r3, [pc, #88]	; (800834c <v_test+0x328>)
 80082f2:	2201      	movs	r2, #1
 80082f4:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 80082f6:	f7fd faff 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 1; i++){
 80082fa:	2300      	movs	r3, #0
 80082fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80082fe:	e004      	b.n	800830a <v_test+0x2e6>
						v_R45D();
 8008300:	f7fe fca4 	bl	8006c4c <v_R45D>
					for(int i = 0; i < 1; i++){
 8008304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008306:	3301      	adds	r3, #1
 8008308:	63bb      	str	r3, [r7, #56]	; 0x38
 800830a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830c:	2b00      	cmp	r3, #0
 800830e:	ddf7      	ble.n	8008300 <v_test+0x2dc>
					}
					full_led_write(BLUE);
 8008310:	2003      	movs	r0, #3
 8008312:	f006 ff19 	bl	800f148 <full_led_write>
					break;
 8008316:	e161      	b.n	80085dc <v_test+0x5b8>
				case 8:
					//----V左45D----
					printf("V 45 left .\n");
 8008318:	480d      	ldr	r0, [pc, #52]	; (8008350 <v_test+0x32c>)
 800831a:	f007 fd1d 	bl	800fd58 <puts>
					run_mode = LOW;
 800831e:	4b0b      	ldr	r3, [pc, #44]	; (800834c <v_test+0x328>)
 8008320:	2201      	movs	r2, #1
 8008322:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008324:	f7fd fae8 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008328:	2300      	movs	r3, #0
 800832a:	637b      	str	r3, [r7, #52]	; 0x34
 800832c:	e01f      	b.n	800836e <v_test+0x34a>
 800832e:	bf00      	nop
 8008330:	0801111c 	.word	0x0801111c
 8008334:	20000b2c 	.word	0x20000b2c
 8008338:	08010ec4 	.word	0x08010ec4
 800833c:	40020000 	.word	0x40020000
 8008340:	20000fac 	.word	0x20000fac
 8008344:	20000b28 	.word	0x20000b28
 8008348:	08011134 	.word	0x08011134
 800834c:	2000048e 	.word	0x2000048e
 8008350:	08011144 	.word	0x08011144
 8008354:	08011150 	.word	0x08011150
 8008358:	08011160 	.word	0x08011160
 800835c:	0801116c 	.word	0x0801116c
 8008360:	0801117c 	.word	0x0801117c
						v_L45D();
 8008364:	f7fe fd30 	bl	8006dc8 <v_L45D>
					for(int i = 0; i < 1; i++){
 8008368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800836a:	3301      	adds	r3, #1
 800836c:	637b      	str	r3, [r7, #52]	; 0x34
 800836e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008370:	2b00      	cmp	r3, #0
 8008372:	ddf7      	ble.n	8008364 <v_test+0x340>
					}
					full_led_write(BLUE);
 8008374:	2003      	movs	r0, #3
 8008376:	f006 fee7 	bl	800f148 <full_led_write>
					break;
 800837a:	e12f      	b.n	80085dc <v_test+0x5b8>
				case 9:
					//----V右135D----
					printf("V 135 right .\n");
 800837c:	4899      	ldr	r0, [pc, #612]	; (80085e4 <v_test+0x5c0>)
 800837e:	f007 fceb 	bl	800fd58 <puts>
					run_mode = LOW;
 8008382:	4b99      	ldr	r3, [pc, #612]	; (80085e8 <v_test+0x5c4>)
 8008384:	2201      	movs	r2, #1
 8008386:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008388:	f7fd fab6 	bl	80058f8 <half_sectionA>
					v_R45();
 800838c:	f7fe fb08 	bl	80069a0 <v_R45>
					for(int i = 0; i < 1; i++){
 8008390:	2300      	movs	r3, #0
 8008392:	633b      	str	r3, [r7, #48]	; 0x30
 8008394:	e004      	b.n	80083a0 <v_test+0x37c>
						v_R135D();
 8008396:	f7ff f809 	bl	80073ac <v_R135D>
					for(int i = 0; i < 1; i++){
 800839a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839c:	3301      	adds	r3, #1
 800839e:	633b      	str	r3, [r7, #48]	; 0x30
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	ddf7      	ble.n	8008396 <v_test+0x372>
					}
					full_led_write(BLUE);
 80083a6:	2003      	movs	r0, #3
 80083a8:	f006 fece 	bl	800f148 <full_led_write>
					break;
 80083ac:	e116      	b.n	80085dc <v_test+0x5b8>
				case 10:
					//----V左135D----
					printf("V 135 left .\n");
 80083ae:	488f      	ldr	r0, [pc, #572]	; (80085ec <v_test+0x5c8>)
 80083b0:	f007 fcd2 	bl	800fd58 <puts>
					run_mode = LOW;
 80083b4:	4b8c      	ldr	r3, [pc, #560]	; (80085e8 <v_test+0x5c4>)
 80083b6:	2201      	movs	r2, #1
 80083b8:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 80083ba:	f7fd fa9d 	bl	80058f8 <half_sectionA>
					v_L45();
 80083be:	f7fe fb9d 	bl	8006afc <v_L45>
					for(int i = 0; i < 1; i++){
 80083c2:	2300      	movs	r3, #0
 80083c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083c6:	e004      	b.n	80083d2 <v_test+0x3ae>
						v_L135D();
 80083c8:	f7ff f8e0 	bl	800758c <v_L135D>
					for(int i = 0; i < 1; i++){
 80083cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ce:	3301      	adds	r3, #1
 80083d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	ddf7      	ble.n	80083c8 <v_test+0x3a4>
					}
					full_led_write(BLUE);
 80083d8:	2003      	movs	r0, #3
 80083da:	f006 feb5 	bl	800f148 <full_led_write>
					break;
 80083de:	e0fd      	b.n	80085dc <v_test+0x5b8>
				case 11:
					//----V右45 High Speed----
					printf("V 45 right .\n");
 80083e0:	4883      	ldr	r0, [pc, #524]	; (80085f0 <v_test+0x5cc>)
 80083e2:	f007 fcb9 	bl	800fd58 <puts>
					run_mode = HIGH;
 80083e6:	4b80      	ldr	r3, [pc, #512]	; (80085e8 <v_test+0x5c4>)
 80083e8:	2203      	movs	r2, #3
 80083ea:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 80083ec:	f7fd fa84 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 1; i++){
 80083f0:	2300      	movs	r3, #0
 80083f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80083f4:	e004      	b.n	8008400 <v_test+0x3dc>
						v_R45();
 80083f6:	f7fe fad3 	bl	80069a0 <v_R45>
					for(int i = 0; i < 1; i++){
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	3301      	adds	r3, #1
 80083fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008402:	2b00      	cmp	r3, #0
 8008404:	ddf7      	ble.n	80083f6 <v_test+0x3d2>
					}
					full_led_write(BLUE);
 8008406:	2003      	movs	r0, #3
 8008408:	f006 fe9e 	bl	800f148 <full_led_write>
					half_sectionD();
 800840c:	f7fd fab0 	bl	8005970 <half_sectionD>
					break;
 8008410:	e0e4      	b.n	80085dc <v_test+0x5b8>
				case 12:
					//----V左45 High Speed----
					printf("V 45 left .\n");
 8008412:	4878      	ldr	r0, [pc, #480]	; (80085f4 <v_test+0x5d0>)
 8008414:	f007 fca0 	bl	800fd58 <puts>
					run_mode = HIGH;
 8008418:	4b73      	ldr	r3, [pc, #460]	; (80085e8 <v_test+0x5c4>)
 800841a:	2203      	movs	r2, #3
 800841c:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 800841e:	f7fd fa6b 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8008422:	2300      	movs	r3, #0
 8008424:	627b      	str	r3, [r7, #36]	; 0x24
 8008426:	e004      	b.n	8008432 <v_test+0x40e>
						v_L45();
 8008428:	f7fe fb68 	bl	8006afc <v_L45>
					for(int i = 0; i < 1; i++){
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	3301      	adds	r3, #1
 8008430:	627b      	str	r3, [r7, #36]	; 0x24
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	2b00      	cmp	r3, #0
 8008436:	ddf7      	ble.n	8008428 <v_test+0x404>
					}
					full_led_write(BLUE);
 8008438:	2003      	movs	r0, #3
 800843a:	f006 fe85 	bl	800f148 <full_led_write>
					half_sectionD();
 800843e:	f7fd fa97 	bl	8005970 <half_sectionD>
					break;
 8008442:	e0cb      	b.n	80085dc <v_test+0x5b8>
				case 13:
					//----V右90 High Speed----
					printf("V 90 right .\n");
 8008444:	486c      	ldr	r0, [pc, #432]	; (80085f8 <v_test+0x5d4>)
 8008446:	f007 fc87 	bl	800fd58 <puts>
					run_mode = HIGH;
 800844a:	4b67      	ldr	r3, [pc, #412]	; (80085e8 <v_test+0x5c4>)
 800844c:	2203      	movs	r2, #3
 800844e:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008450:	f7fd fa52 	bl	80058f8 <half_sectionA>
					v_R45();
 8008454:	f7fe faa4 	bl	80069a0 <v_R45>
					for(int i = 0; i < 1; i++){
 8008458:	2300      	movs	r3, #0
 800845a:	623b      	str	r3, [r7, #32]
 800845c:	e004      	b.n	8008468 <v_test+0x444>
						v_R90();
 800845e:	f7fe fd9d 	bl	8006f9c <v_R90>
					for(int i = 0; i < 1; i++){
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	3301      	adds	r3, #1
 8008466:	623b      	str	r3, [r7, #32]
 8008468:	6a3b      	ldr	r3, [r7, #32]
 800846a:	2b00      	cmp	r3, #0
 800846c:	ddf7      	ble.n	800845e <v_test+0x43a>
					}
					v_R45();
 800846e:	f7fe fa97 	bl	80069a0 <v_R45>
					full_led_write(BLUE);
 8008472:	2003      	movs	r0, #3
 8008474:	f006 fe68 	bl	800f148 <full_led_write>
					half_sectionD();
 8008478:	f7fd fa7a 	bl	8005970 <half_sectionD>
					break;
 800847c:	e0ae      	b.n	80085dc <v_test+0x5b8>
				case 14:
					//----V左90 High Speed----
					printf("V 90 left .\n");
 800847e:	485f      	ldr	r0, [pc, #380]	; (80085fc <v_test+0x5d8>)
 8008480:	f007 fc6a 	bl	800fd58 <puts>
					run_mode = HIGH;
 8008484:	4b58      	ldr	r3, [pc, #352]	; (80085e8 <v_test+0x5c4>)
 8008486:	2203      	movs	r2, #3
 8008488:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 800848a:	f7fd fa35 	bl	80058f8 <half_sectionA>
					v_L45();
 800848e:	f7fe fb35 	bl	8006afc <v_L45>
					for(int i = 0; i < 1; i++){
 8008492:	2300      	movs	r3, #0
 8008494:	61fb      	str	r3, [r7, #28]
 8008496:	e004      	b.n	80084a2 <v_test+0x47e>
						v_L90();
 8008498:	f7fe fddc 	bl	8007054 <v_L90>
					for(int i = 0; i < 1; i++){
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	3301      	adds	r3, #1
 80084a0:	61fb      	str	r3, [r7, #28]
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	ddf7      	ble.n	8008498 <v_test+0x474>
					}
					v_L45();
 80084a8:	f7fe fb28 	bl	8006afc <v_L45>
					full_led_write(BLUE);
 80084ac:	2003      	movs	r0, #3
 80084ae:	f006 fe4b 	bl	800f148 <full_led_write>
					half_sectionD();
 80084b2:	f7fd fa5d 	bl	8005970 <half_sectionD>
					break;
 80084b6:	e091      	b.n	80085dc <v_test+0x5b8>
				case 15:
					//----V右135 High Speed----
					printf("V 135 right .\n");
 80084b8:	484a      	ldr	r0, [pc, #296]	; (80085e4 <v_test+0x5c0>)
 80084ba:	f007 fc4d 	bl	800fd58 <puts>
					run_mode = HIGH;
 80084be:	4b4a      	ldr	r3, [pc, #296]	; (80085e8 <v_test+0x5c4>)
 80084c0:	2203      	movs	r2, #3
 80084c2:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 80084c4:	f7fd fa18 	bl	80058f8 <half_sectionA>
//					v_R452();
					for(int i = 0; i < 1; i++){
 80084c8:	2300      	movs	r3, #0
 80084ca:	61bb      	str	r3, [r7, #24]
 80084cc:	e004      	b.n	80084d8 <v_test+0x4b4>
						v_R135();
 80084ce:	f7fe fe17 	bl	8007100 <v_R135>
					for(int i = 0; i < 1; i++){
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	3301      	adds	r3, #1
 80084d6:	61bb      	str	r3, [r7, #24]
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	ddf7      	ble.n	80084ce <v_test+0x4aa>
					}
//					v_R452();
					full_led_write(BLUE);
 80084de:	2003      	movs	r0, #3
 80084e0:	f006 fe32 	bl	800f148 <full_led_write>
					half_sectionD();
 80084e4:	f7fd fa44 	bl	8005970 <half_sectionD>
					break;
 80084e8:	e078      	b.n	80085dc <v_test+0x5b8>
				case 16:
					//----V左135 High Speed----
					printf("V 135 left .\n");
 80084ea:	4840      	ldr	r0, [pc, #256]	; (80085ec <v_test+0x5c8>)
 80084ec:	f007 fc34 	bl	800fd58 <puts>
					run_mode = HIGH;
 80084f0:	4b3d      	ldr	r3, [pc, #244]	; (80085e8 <v_test+0x5c4>)
 80084f2:	2203      	movs	r2, #3
 80084f4:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 80084f6:	f7fd f9ff 	bl	80058f8 <half_sectionA>
//					v_L452();
					for(int i = 0; i < 1; i++){
 80084fa:	2300      	movs	r3, #0
 80084fc:	617b      	str	r3, [r7, #20]
 80084fe:	e004      	b.n	800850a <v_test+0x4e6>
						v_L135();
 8008500:	f7fe feac 	bl	800725c <v_L135>
					for(int i = 0; i < 1; i++){
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	3301      	adds	r3, #1
 8008508:	617b      	str	r3, [r7, #20]
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2b00      	cmp	r3, #0
 800850e:	ddf7      	ble.n	8008500 <v_test+0x4dc>
					}
//					v_L452();
					full_led_write(BLUE);
 8008510:	2003      	movs	r0, #3
 8008512:	f006 fe19 	bl	800f148 <full_led_write>
					half_sectionD();
 8008516:	f7fd fa2b 	bl	8005970 <half_sectionD>
					break;
 800851a:	e05f      	b.n	80085dc <v_test+0x5b8>
				case 17:
					//----V右45D High Speed----
					printf("V 45 right .\n");
 800851c:	4834      	ldr	r0, [pc, #208]	; (80085f0 <v_test+0x5cc>)
 800851e:	f007 fc1b 	bl	800fd58 <puts>
					run_mode = HIGH;
 8008522:	4b31      	ldr	r3, [pc, #196]	; (80085e8 <v_test+0x5c4>)
 8008524:	2203      	movs	r2, #3
 8008526:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008528:	f7fd f9e6 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 1; i++){
 800852c:	2300      	movs	r3, #0
 800852e:	613b      	str	r3, [r7, #16]
 8008530:	e004      	b.n	800853c <v_test+0x518>
						v_R45D();
 8008532:	f7fe fb8b 	bl	8006c4c <v_R45D>
					for(int i = 0; i < 1; i++){
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	3301      	adds	r3, #1
 800853a:	613b      	str	r3, [r7, #16]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	2b00      	cmp	r3, #0
 8008540:	ddf7      	ble.n	8008532 <v_test+0x50e>
					}
					full_led_write(BLUE);
 8008542:	2003      	movs	r0, #3
 8008544:	f006 fe00 	bl	800f148 <full_led_write>
					break;
 8008548:	e048      	b.n	80085dc <v_test+0x5b8>
				case 18:
					//----V左45D High Speed----
					printf("V 45 left .\n");
 800854a:	482a      	ldr	r0, [pc, #168]	; (80085f4 <v_test+0x5d0>)
 800854c:	f007 fc04 	bl	800fd58 <puts>
					run_mode = HIGH;
 8008550:	4b25      	ldr	r3, [pc, #148]	; (80085e8 <v_test+0x5c4>)
 8008552:	2203      	movs	r2, #3
 8008554:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008556:	f7fd f9cf 	bl	80058f8 <half_sectionA>
					for(int i = 0; i < 1; i++){
 800855a:	2300      	movs	r3, #0
 800855c:	60fb      	str	r3, [r7, #12]
 800855e:	e004      	b.n	800856a <v_test+0x546>
						v_L45D();
 8008560:	f7fe fc32 	bl	8006dc8 <v_L45D>
					for(int i = 0; i < 1; i++){
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3301      	adds	r3, #1
 8008568:	60fb      	str	r3, [r7, #12]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b00      	cmp	r3, #0
 800856e:	ddf7      	ble.n	8008560 <v_test+0x53c>
					}
					full_led_write(BLUE);
 8008570:	2003      	movs	r0, #3
 8008572:	f006 fde9 	bl	800f148 <full_led_write>
					break;
 8008576:	e031      	b.n	80085dc <v_test+0x5b8>
				case 19:
					//----V右135D High Speed----
					printf("V 135 right .\n");
 8008578:	481a      	ldr	r0, [pc, #104]	; (80085e4 <v_test+0x5c0>)
 800857a:	f007 fbed 	bl	800fd58 <puts>
					run_mode = HIGH;
 800857e:	4b1a      	ldr	r3, [pc, #104]	; (80085e8 <v_test+0x5c4>)
 8008580:	2203      	movs	r2, #3
 8008582:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 8008584:	f7fd f9b8 	bl	80058f8 <half_sectionA>
					v_R45();
 8008588:	f7fe fa0a 	bl	80069a0 <v_R45>
					for(int i = 0; i < 1; i++){
 800858c:	2300      	movs	r3, #0
 800858e:	60bb      	str	r3, [r7, #8]
 8008590:	e004      	b.n	800859c <v_test+0x578>
						v_R135D();
 8008592:	f7fe ff0b 	bl	80073ac <v_R135D>
					for(int i = 0; i < 1; i++){
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	3301      	adds	r3, #1
 800859a:	60bb      	str	r3, [r7, #8]
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	ddf7      	ble.n	8008592 <v_test+0x56e>
					}
					full_led_write(BLUE);
 80085a2:	2003      	movs	r0, #3
 80085a4:	f006 fdd0 	bl	800f148 <full_led_write>
					break;
 80085a8:	e018      	b.n	80085dc <v_test+0x5b8>
				case 20:
					//----V左135D High Speed----
					printf("V 135 left .\n");
 80085aa:	4810      	ldr	r0, [pc, #64]	; (80085ec <v_test+0x5c8>)
 80085ac:	f007 fbd4 	bl	800fd58 <puts>
					run_mode = HIGH;
 80085b0:	4b0d      	ldr	r3, [pc, #52]	; (80085e8 <v_test+0x5c4>)
 80085b2:	2203      	movs	r2, #3
 80085b4:	701a      	strb	r2, [r3, #0]
					half_sectionA();
 80085b6:	f7fd f99f 	bl	80058f8 <half_sectionA>
					v_L45();
 80085ba:	f7fe fa9f 	bl	8006afc <v_L45>
					for(int i = 0; i < 1; i++){
 80085be:	2300      	movs	r3, #0
 80085c0:	607b      	str	r3, [r7, #4]
 80085c2:	e004      	b.n	80085ce <v_test+0x5aa>
						v_L135D();
 80085c4:	f7fe ffe2 	bl	800758c <v_L135D>
					for(int i = 0; i < 1; i++){
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3301      	adds	r3, #1
 80085cc:	607b      	str	r3, [r7, #4]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	ddf7      	ble.n	80085c4 <v_test+0x5a0>
					}
					full_led_write(BLUE);
 80085d4:	2003      	movs	r0, #3
 80085d6:	f006 fdb7 	bl	800f148 <full_led_write>
					break;
 80085da:	bf00      	nop
			}
		full_led_write(RED);
 80085dc:	2001      	movs	r0, #1
 80085de:	f006 fdb3 	bl	800f148 <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80085e2:	e528      	b.n	8008036 <v_test+0x12>
 80085e4:	0801116c 	.word	0x0801116c
 80085e8:	2000048e 	.word	0x2000048e
 80085ec:	0801117c 	.word	0x0801117c
 80085f0:	08011134 	.word	0x08011134
 80085f4:	08011144 	.word	0x08011144
 80085f8:	08011150 	.word	0x08011150
 80085fc:	08011160 	.word	0x08011160

08008600 <pass_test>:
//pass_test
// pass圧縮走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_test(void){
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0

	int mode = 0;
 8008606:	2300      	movs	r3, #0
 8008608:	607b      	str	r3, [r7, #4]
	printf("Test pass Run, Mode : %d\n", mode);
 800860a:	6879      	ldr	r1, [r7, #4]
 800860c:	48b3      	ldr	r0, [pc, #716]	; (80088dc <pass_test+0x2dc>)
 800860e:	f007 fb2f 	bl	800fc70 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	b2db      	uxtb	r3, r3
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	b2d8      	uxtb	r0, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	b2db      	uxtb	r3, r3
 8008620:	f003 0302 	and.w	r3, r3, #2
 8008624:	b2d9      	uxtb	r1, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	b2db      	uxtb	r3, r3
 800862a:	f003 0304 	and.w	r3, r3, #4
 800862e:	b2db      	uxtb	r3, r3
 8008630:	461a      	mov	r2, r3
 8008632:	f006 fd4f 	bl	800f0d4 <led_write>
		  if(dist_r >= 20){
 8008636:	4baa      	ldr	r3, [pc, #680]	; (80088e0 <pass_test+0x2e0>)
 8008638:	edd3 7a00 	vldr	s15, [r3]
 800863c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008648:	db0f      	blt.n	800866a <pass_test+0x6a>
			  mode++;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	3301      	adds	r3, #1
 800864e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8008650:	4ba3      	ldr	r3, [pc, #652]	; (80088e0 <pass_test+0x2e0>)
 8008652:	f04f 0200 	mov.w	r2, #0
 8008656:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b07      	cmp	r3, #7
 800865c:	dd01      	ble.n	8008662 <pass_test+0x62>
				  mode = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	489f      	ldr	r0, [pc, #636]	; (80088e4 <pass_test+0x2e4>)
 8008666:	f007 fb03 	bl	800fc70 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800866a:	4b9d      	ldr	r3, [pc, #628]	; (80088e0 <pass_test+0x2e0>)
 800866c:	edd3 7a00 	vldr	s15, [r3]
 8008670:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8008674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800867c:	d80f      	bhi.n	800869e <pass_test+0x9e>
			  mode--;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3b01      	subs	r3, #1
 8008682:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8008684:	4b96      	ldr	r3, [pc, #600]	; (80088e0 <pass_test+0x2e0>)
 8008686:	f04f 0200 	mov.w	r2, #0
 800868a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	da01      	bge.n	8008696 <pass_test+0x96>
				  mode = 7;
 8008692:	2307      	movs	r3, #7
 8008694:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8008696:	6879      	ldr	r1, [r7, #4]
 8008698:	4892      	ldr	r0, [pc, #584]	; (80088e4 <pass_test+0x2e4>)
 800869a:	f007 fae9 	bl	800fc70 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800869e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086a2:	4891      	ldr	r0, [pc, #580]	; (80088e8 <pass_test+0x2e8>)
 80086a4:	f7f9 fe16 	bl	80022d4 <HAL_GPIO_ReadPin>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1b1      	bne.n	8008612 <pass_test+0x12>
			  HAL_Delay(50);
 80086ae:	2032      	movs	r0, #50	; 0x32
 80086b0:	f7f8 fcb4 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80086b4:	bf00      	nop
 80086b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086ba:	488b      	ldr	r0, [pc, #556]	; (80088e8 <pass_test+0x2e8>)
 80086bc:	f7f9 fe0a 	bl	80022d4 <HAL_GPIO_ReadPin>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d0f7      	beq.n	80086b6 <pass_test+0xb6>
			  drive_ready();
 80086c6:	f7fc fad5 	bl	8004c74 <drive_ready>
			  v_flag = 0;
 80086ca:	4b88      	ldr	r3, [pc, #544]	; (80088ec <pass_test+0x2ec>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	701a      	strb	r2, [r3, #0]

			  switch(mode){
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b07      	cmp	r3, #7
 80086d4:	d89d      	bhi.n	8008612 <pass_test+0x12>
 80086d6:	a201      	add	r2, pc, #4	; (adr r2, 80086dc <pass_test+0xdc>)
 80086d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086dc:	080086fd 	.word	0x080086fd
 80086e0:	08008775 	.word	0x08008775
 80086e4:	080087ed 	.word	0x080087ed
 80086e8:	08008865 	.word	0x08008865
 80086ec:	08008921 	.word	0x08008921
 80086f0:	08008613 	.word	0x08008613
 80086f4:	08008613 	.word	0x08008613
 80086f8:	08008613 	.word	0x08008613
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 80086fc:	487c      	ldr	r0, [pc, #496]	; (80088f0 <pass_test+0x2f0>)
 80086fe:	f007 fb2b 	bl	800fd58 <puts>

					MF.FLAG.SCND = 0;
 8008702:	4a7c      	ldr	r2, [pc, #496]	; (80088f4 <pass_test+0x2f4>)
 8008704:	8813      	ldrh	r3, [r2, #0]
 8008706:	f36f 1345 	bfc	r3, #5, #1
 800870a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800870c:	4a79      	ldr	r2, [pc, #484]	; (80088f4 <pass_test+0x2f4>)
 800870e:	8813      	ldrh	r3, [r2, #0]
 8008710:	f36f 2349 	bfc	r3, #9, #1
 8008714:	8013      	strh	r3, [r2, #0]
					run_mode = MIDDLE;
 8008716:	4b78      	ldr	r3, [pc, #480]	; (80088f8 <pass_test+0x2f8>)
 8008718:	2202      	movs	r2, #2
 800871a:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800871c:	4b77      	ldr	r3, [pc, #476]	; (80088fc <pass_test+0x2fc>)
 800871e:	2200      	movs	r2, #0
 8008720:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8008722:	4b77      	ldr	r3, [pc, #476]	; (8008900 <pass_test+0x300>)
 8008724:	f241 3288 	movw	r2, #5000	; 0x1388
 8008728:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800872a:	4b76      	ldr	r3, [pc, #472]	; (8008904 <pass_test+0x304>)
 800872c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008730:	801a      	strh	r2, [r3, #0]
					start_flag = 0;
 8008732:	4b72      	ldr	r3, [pc, #456]	; (80088fc <pass_test+0x2fc>)
 8008734:	2200      	movs	r2, #0
 8008736:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8008738:	4b73      	ldr	r3, [pc, #460]	; (8008908 <pass_test+0x308>)
 800873a:	2209      	movs	r2, #9
 800873c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800873e:	4b73      	ldr	r3, [pc, #460]	; (800890c <pass_test+0x30c>)
 8008740:	2206      	movs	r2, #6
 8008742:	701a      	strb	r2, [r3, #0]

					get_base();
 8008744:	f006 fc6e 	bl	800f024 <get_base>

					searchC();
 8008748:	f003 ff64 	bl	800c614 <searchC>
					HAL_Delay(2000);
 800874c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008750:	f7f8 fc64 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008754:	4b6d      	ldr	r3, [pc, #436]	; (800890c <pass_test+0x30c>)
 8008756:	2200      	movs	r2, #0
 8008758:	701a      	strb	r2, [r3, #0]
 800875a:	4b6c      	ldr	r3, [pc, #432]	; (800890c <pass_test+0x30c>)
 800875c:	781a      	ldrb	r2, [r3, #0]
 800875e:	4b6a      	ldr	r3, [pc, #424]	; (8008908 <pass_test+0x308>)
 8008760:	701a      	strb	r2, [r3, #0]
					searchC();
 8008762:	f003 ff57 	bl	800c614 <searchC>

					goal_x = GOAL_X;
 8008766:	4b68      	ldr	r3, [pc, #416]	; (8008908 <pass_test+0x308>)
 8008768:	2209      	movs	r2, #9
 800876a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800876c:	4b67      	ldr	r3, [pc, #412]	; (800890c <pass_test+0x30c>)
 800876e:	2206      	movs	r2, #6
 8008770:	701a      	strb	r2, [r3, #0]
					break;
 8008772:	e111      	b.n	8008998 <pass_test+0x398>
				case 1:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 8008774:	4866      	ldr	r0, [pc, #408]	; (8008910 <pass_test+0x310>)
 8008776:	f007 faef 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 800877a:	4a5e      	ldr	r2, [pc, #376]	; (80088f4 <pass_test+0x2f4>)
 800877c:	8813      	ldrh	r3, [r2, #0]
 800877e:	f043 0320 	orr.w	r3, r3, #32
 8008782:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8008784:	4a5b      	ldr	r2, [pc, #364]	; (80088f4 <pass_test+0x2f4>)
 8008786:	8813      	ldrh	r3, [r2, #0]
 8008788:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800878c:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800878e:	4b5a      	ldr	r3, [pc, #360]	; (80088f8 <pass_test+0x2f8>)
 8008790:	2201      	movs	r2, #1
 8008792:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8008794:	4b59      	ldr	r3, [pc, #356]	; (80088fc <pass_test+0x2fc>)
 8008796:	2200      	movs	r2, #0
 8008798:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800879a:	4b59      	ldr	r3, [pc, #356]	; (8008900 <pass_test+0x300>)
 800879c:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 80087a2:	4b58      	ldr	r3, [pc, #352]	; (8008904 <pass_test+0x304>)
 80087a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80087a8:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 80087aa:	4b5a      	ldr	r3, [pc, #360]	; (8008914 <pass_test+0x314>)
 80087ac:	2203      	movs	r2, #3
 80087ae:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 80087b0:	4b55      	ldr	r3, [pc, #340]	; (8008908 <pass_test+0x308>)
 80087b2:	2209      	movs	r2, #9
 80087b4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80087b6:	4b55      	ldr	r3, [pc, #340]	; (800890c <pass_test+0x30c>)
 80087b8:	2206      	movs	r2, #6
 80087ba:	701a      	strb	r2, [r3, #0]

					get_base();
 80087bc:	f006 fc32 	bl	800f024 <get_base>

					searchF3();
 80087c0:	f004 f9f2 	bl	800cba8 <searchF3>
					HAL_Delay(2000);
 80087c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80087c8:	f7f8 fc28 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80087cc:	4b4f      	ldr	r3, [pc, #316]	; (800890c <pass_test+0x30c>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	701a      	strb	r2, [r3, #0]
 80087d2:	4b4e      	ldr	r3, [pc, #312]	; (800890c <pass_test+0x30c>)
 80087d4:	781a      	ldrb	r2, [r3, #0]
 80087d6:	4b4c      	ldr	r3, [pc, #304]	; (8008908 <pass_test+0x308>)
 80087d8:	701a      	strb	r2, [r3, #0]
					searchF3();
 80087da:	f004 f9e5 	bl	800cba8 <searchF3>

					goal_x = GOAL_X;
 80087de:	4b4a      	ldr	r3, [pc, #296]	; (8008908 <pass_test+0x308>)
 80087e0:	2209      	movs	r2, #9
 80087e2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80087e4:	4b49      	ldr	r3, [pc, #292]	; (800890c <pass_test+0x30c>)
 80087e6:	2206      	movs	r2, #6
 80087e8:	701a      	strb	r2, [r3, #0]
					break;
 80087ea:	e0d5      	b.n	8008998 <pass_test+0x398>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 80087ec:	484a      	ldr	r0, [pc, #296]	; (8008918 <pass_test+0x318>)
 80087ee:	f007 fab3 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 80087f2:	4a40      	ldr	r2, [pc, #256]	; (80088f4 <pass_test+0x2f4>)
 80087f4:	8813      	ldrh	r3, [r2, #0]
 80087f6:	f043 0320 	orr.w	r3, r3, #32
 80087fa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80087fc:	4a3d      	ldr	r2, [pc, #244]	; (80088f4 <pass_test+0x2f4>)
 80087fe:	8813      	ldrh	r3, [r2, #0]
 8008800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008804:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 8008806:	4b3c      	ldr	r3, [pc, #240]	; (80088f8 <pass_test+0x2f8>)
 8008808:	2203      	movs	r2, #3
 800880a:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800880c:	4b3b      	ldr	r3, [pc, #236]	; (80088fc <pass_test+0x2fc>)
 800880e:	2200      	movs	r2, #0
 8008810:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8008812:	4b3b      	ldr	r3, [pc, #236]	; (8008900 <pass_test+0x300>)
 8008814:	f241 3288 	movw	r2, #5000	; 0x1388
 8008818:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800881a:	4b3a      	ldr	r3, [pc, #232]	; (8008904 <pass_test+0x304>)
 800881c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8008820:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8008822:	4b3c      	ldr	r3, [pc, #240]	; (8008914 <pass_test+0x314>)
 8008824:	2203      	movs	r2, #3
 8008826:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8008828:	4b37      	ldr	r3, [pc, #220]	; (8008908 <pass_test+0x308>)
 800882a:	2209      	movs	r2, #9
 800882c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800882e:	4b37      	ldr	r3, [pc, #220]	; (800890c <pass_test+0x30c>)
 8008830:	2206      	movs	r2, #6
 8008832:	701a      	strb	r2, [r3, #0]

					get_base();
 8008834:	f006 fbf6 	bl	800f024 <get_base>

					searchF3();
 8008838:	f004 f9b6 	bl	800cba8 <searchF3>
					HAL_Delay(2000);
 800883c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008840:	f7f8 fbec 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008844:	4b31      	ldr	r3, [pc, #196]	; (800890c <pass_test+0x30c>)
 8008846:	2200      	movs	r2, #0
 8008848:	701a      	strb	r2, [r3, #0]
 800884a:	4b30      	ldr	r3, [pc, #192]	; (800890c <pass_test+0x30c>)
 800884c:	781a      	ldrb	r2, [r3, #0]
 800884e:	4b2e      	ldr	r3, [pc, #184]	; (8008908 <pass_test+0x308>)
 8008850:	701a      	strb	r2, [r3, #0]
					searchF3();
 8008852:	f004 f9a9 	bl	800cba8 <searchF3>

					goal_x = GOAL_X;
 8008856:	4b2c      	ldr	r3, [pc, #176]	; (8008908 <pass_test+0x308>)
 8008858:	2209      	movs	r2, #9
 800885a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800885c:	4b2b      	ldr	r3, [pc, #172]	; (800890c <pass_test+0x30c>)
 800885e:	2206      	movs	r2, #6
 8008860:	701a      	strb	r2, [r3, #0]
					break;
 8008862:	e099      	b.n	8008998 <pass_test+0x398>
				case 3:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 8008864:	482d      	ldr	r0, [pc, #180]	; (800891c <pass_test+0x31c>)
 8008866:	f007 fa77 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 800886a:	4a22      	ldr	r2, [pc, #136]	; (80088f4 <pass_test+0x2f4>)
 800886c:	8813      	ldrh	r3, [r2, #0]
 800886e:	f043 0320 	orr.w	r3, r3, #32
 8008872:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8008874:	4a1f      	ldr	r2, [pc, #124]	; (80088f4 <pass_test+0x2f4>)
 8008876:	8813      	ldrh	r3, [r2, #0]
 8008878:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800887c:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800887e:	4b1e      	ldr	r3, [pc, #120]	; (80088f8 <pass_test+0x2f8>)
 8008880:	2201      	movs	r2, #1
 8008882:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8008884:	4b1d      	ldr	r3, [pc, #116]	; (80088fc <pass_test+0x2fc>)
 8008886:	2200      	movs	r2, #0
 8008888:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800888a:	4b1d      	ldr	r3, [pc, #116]	; (8008900 <pass_test+0x300>)
 800888c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008890:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 8008892:	4b1c      	ldr	r3, [pc, #112]	; (8008904 <pass_test+0x304>)
 8008894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008898:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800889a:	4b1e      	ldr	r3, [pc, #120]	; (8008914 <pass_test+0x314>)
 800889c:	2204      	movs	r2, #4
 800889e:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 80088a0:	4b19      	ldr	r3, [pc, #100]	; (8008908 <pass_test+0x308>)
 80088a2:	2209      	movs	r2, #9
 80088a4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80088a6:	4b19      	ldr	r3, [pc, #100]	; (800890c <pass_test+0x30c>)
 80088a8:	2206      	movs	r2, #6
 80088aa:	701a      	strb	r2, [r3, #0]

					get_base();
 80088ac:	f006 fbba 	bl	800f024 <get_base>

					searchF4();
 80088b0:	f004 fa3e 	bl	800cd30 <searchF4>
					HAL_Delay(2000);
 80088b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80088b8:	f7f8 fbb0 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80088bc:	4b13      	ldr	r3, [pc, #76]	; (800890c <pass_test+0x30c>)
 80088be:	2200      	movs	r2, #0
 80088c0:	701a      	strb	r2, [r3, #0]
 80088c2:	4b12      	ldr	r3, [pc, #72]	; (800890c <pass_test+0x30c>)
 80088c4:	781a      	ldrb	r2, [r3, #0]
 80088c6:	4b10      	ldr	r3, [pc, #64]	; (8008908 <pass_test+0x308>)
 80088c8:	701a      	strb	r2, [r3, #0]
					searchF4();
 80088ca:	f004 fa31 	bl	800cd30 <searchF4>

					goal_x = GOAL_X;
 80088ce:	4b0e      	ldr	r3, [pc, #56]	; (8008908 <pass_test+0x308>)
 80088d0:	2209      	movs	r2, #9
 80088d2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80088d4:	4b0d      	ldr	r3, [pc, #52]	; (800890c <pass_test+0x30c>)
 80088d6:	2206      	movs	r2, #6
 80088d8:	701a      	strb	r2, [r3, #0]
					break;
 80088da:	e05d      	b.n	8008998 <pass_test+0x398>
 80088dc:	0801118c 	.word	0x0801118c
 80088e0:	20000b2c 	.word	0x20000b2c
 80088e4:	08010ec4 	.word	0x08010ec4
 80088e8:	40020000 	.word	0x40020000
 80088ec:	20000b28 	.word	0x20000b28
 80088f0:	080111a8 	.word	0x080111a8
 80088f4:	20000fac 	.word	0x20000fac
 80088f8:	2000048e 	.word	0x2000048e
 80088fc:	2000160c 	.word	0x2000160c
 8008900:	2000048c 	.word	0x2000048c
 8008904:	20000fc0 	.word	0x20000fc0
 8008908:	20000bf1 	.word	0x20000bf1
 800890c:	20000b8c 	.word	0x20000b8c
 8008910:	080111bc 	.word	0x080111bc
 8008914:	2000048f 	.word	0x2000048f
 8008918:	080111cc 	.word	0x080111cc
 800891c:	080111dc 	.word	0x080111dc
				case 4:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 8008920:	481e      	ldr	r0, [pc, #120]	; (800899c <pass_test+0x39c>)
 8008922:	f007 fa19 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 8008926:	4a1e      	ldr	r2, [pc, #120]	; (80089a0 <pass_test+0x3a0>)
 8008928:	8813      	ldrh	r3, [r2, #0]
 800892a:	f043 0320 	orr.w	r3, r3, #32
 800892e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8008930:	4a1b      	ldr	r2, [pc, #108]	; (80089a0 <pass_test+0x3a0>)
 8008932:	8813      	ldrh	r3, [r2, #0]
 8008934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008938:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800893a:	4b1a      	ldr	r3, [pc, #104]	; (80089a4 <pass_test+0x3a4>)
 800893c:	2203      	movs	r2, #3
 800893e:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8008940:	4b19      	ldr	r3, [pc, #100]	; (80089a8 <pass_test+0x3a8>)
 8008942:	2200      	movs	r2, #0
 8008944:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8008946:	4b19      	ldr	r3, [pc, #100]	; (80089ac <pass_test+0x3ac>)
 8008948:	f241 3288 	movw	r2, #5000	; 0x1388
 800894c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800894e:	4b18      	ldr	r3, [pc, #96]	; (80089b0 <pass_test+0x3b0>)
 8008950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008954:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 8008956:	4b17      	ldr	r3, [pc, #92]	; (80089b4 <pass_test+0x3b4>)
 8008958:	2204      	movs	r2, #4
 800895a:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800895c:	4b16      	ldr	r3, [pc, #88]	; (80089b8 <pass_test+0x3b8>)
 800895e:	2209      	movs	r2, #9
 8008960:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008962:	4b16      	ldr	r3, [pc, #88]	; (80089bc <pass_test+0x3bc>)
 8008964:	2206      	movs	r2, #6
 8008966:	701a      	strb	r2, [r3, #0]

					get_base();
 8008968:	f006 fb5c 	bl	800f024 <get_base>

					searchF4();
 800896c:	f004 f9e0 	bl	800cd30 <searchF4>
					HAL_Delay(2000);
 8008970:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008974:	f7f8 fb52 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008978:	4b10      	ldr	r3, [pc, #64]	; (80089bc <pass_test+0x3bc>)
 800897a:	2200      	movs	r2, #0
 800897c:	701a      	strb	r2, [r3, #0]
 800897e:	4b0f      	ldr	r3, [pc, #60]	; (80089bc <pass_test+0x3bc>)
 8008980:	781a      	ldrb	r2, [r3, #0]
 8008982:	4b0d      	ldr	r3, [pc, #52]	; (80089b8 <pass_test+0x3b8>)
 8008984:	701a      	strb	r2, [r3, #0]
					searchF4();
 8008986:	f004 f9d3 	bl	800cd30 <searchF4>

					goal_x = GOAL_X;
 800898a:	4b0b      	ldr	r3, [pc, #44]	; (80089b8 <pass_test+0x3b8>)
 800898c:	2209      	movs	r2, #9
 800898e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008990:	4b0a      	ldr	r3, [pc, #40]	; (80089bc <pass_test+0x3bc>)
 8008992:	2206      	movs	r2, #6
 8008994:	701a      	strb	r2, [r3, #0]
					break;
 8008996:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008998:	e63b      	b.n	8008612 <pass_test+0x12>
 800899a:	bf00      	nop
 800899c:	080111dc 	.word	0x080111dc
 80089a0:	20000fac 	.word	0x20000fac
 80089a4:	2000048e 	.word	0x2000048e
 80089a8:	2000160c 	.word	0x2000160c
 80089ac:	2000048c 	.word	0x2000048c
 80089b0:	20000fc0 	.word	0x20000fc0
 80089b4:	2000048f 	.word	0x2000048f
 80089b8:	20000bf1 	.word	0x20000bf1
 80089bc:	20000b8c 	.word	0x20000b8c

080089c0 <simple_run>:
//simple_run
// 超信地走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void simple_run(void){
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0

	int mode = 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	607b      	str	r3, [r7, #4]
	printf("Simple Run, Mode : %d\n", mode);
 80089ca:	6879      	ldr	r1, [r7, #4]
 80089cc:	4878      	ldr	r0, [pc, #480]	; (8008bb0 <simple_run+0x1f0>)
 80089ce:	f007 f94f 	bl	800fc70 <iprintf>

	while(1){

		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	b2d8      	uxtb	r0, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	f003 0302 	and.w	r3, r3, #2
 80089e4:	b2d9      	uxtb	r1, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	f003 0304 	and.w	r3, r3, #4
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	461a      	mov	r2, r3
 80089f2:	f006 fb6f 	bl	800f0d4 <led_write>
		  if(dist_r >= 20){
 80089f6:	4b6f      	ldr	r3, [pc, #444]	; (8008bb4 <simple_run+0x1f4>)
 80089f8:	edd3 7a00 	vldr	s15, [r3]
 80089fc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a08:	db0f      	blt.n	8008a2a <simple_run+0x6a>
			  mode++;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8008a10:	4b68      	ldr	r3, [pc, #416]	; (8008bb4 <simple_run+0x1f4>)
 8008a12:	f04f 0200 	mov.w	r2, #0
 8008a16:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b07      	cmp	r3, #7
 8008a1c:	dd01      	ble.n	8008a22 <simple_run+0x62>
				  mode = 0;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	4864      	ldr	r0, [pc, #400]	; (8008bb8 <simple_run+0x1f8>)
 8008a26:	f007 f923 	bl	800fc70 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8008a2a:	4b62      	ldr	r3, [pc, #392]	; (8008bb4 <simple_run+0x1f4>)
 8008a2c:	edd3 7a00 	vldr	s15, [r3]
 8008a30:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8008a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a3c:	d80f      	bhi.n	8008a5e <simple_run+0x9e>
			  mode--;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	3b01      	subs	r3, #1
 8008a42:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8008a44:	4b5b      	ldr	r3, [pc, #364]	; (8008bb4 <simple_run+0x1f4>)
 8008a46:	f04f 0200 	mov.w	r2, #0
 8008a4a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	da01      	bge.n	8008a56 <simple_run+0x96>
				  mode = 7;
 8008a52:	2307      	movs	r3, #7
 8008a54:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8008a56:	6879      	ldr	r1, [r7, #4]
 8008a58:	4857      	ldr	r0, [pc, #348]	; (8008bb8 <simple_run+0x1f8>)
 8008a5a:	f007 f909 	bl	800fc70 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8008a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008a62:	4856      	ldr	r0, [pc, #344]	; (8008bbc <simple_run+0x1fc>)
 8008a64:	f7f9 fc36 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1b1      	bne.n	80089d2 <simple_run+0x12>
			  HAL_Delay(50);
 8008a6e:	2032      	movs	r0, #50	; 0x32
 8008a70:	f7f8 fad4 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8008a74:	bf00      	nop
 8008a76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008a7a:	4850      	ldr	r0, [pc, #320]	; (8008bbc <simple_run+0x1fc>)
 8008a7c:	f7f9 fc2a 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0f7      	beq.n	8008a76 <simple_run+0xb6>
			  drive_ready();
 8008a86:	f7fc f8f5 	bl	8004c74 <drive_ready>

			  switch(mode){
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2b07      	cmp	r3, #7
 8008a8e:	d8a0      	bhi.n	80089d2 <simple_run+0x12>
 8008a90:	a201      	add	r2, pc, #4	; (adr r2, 8008a98 <simple_run+0xd8>)
 8008a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a96:	bf00      	nop
 8008a98:	080089d3 	.word	0x080089d3
 8008a9c:	08008ab9 	.word	0x08008ab9
 8008aa0:	08008b0b 	.word	0x08008b0b
 8008aa4:	08008b5d 	.word	0x08008b5d
 8008aa8:	080089d3 	.word	0x080089d3
 8008aac:	080089d3 	.word	0x080089d3
 8008ab0:	080089d3 	.word	0x080089d3
 8008ab4:	080089d3 	.word	0x080089d3

				case 0:
					break;
				case 1:
					//----一次探索走行----
					printf("First Run.\n");
 8008ab8:	4841      	ldr	r0, [pc, #260]	; (8008bc0 <simple_run+0x200>)
 8008aba:	f007 f94d 	bl	800fd58 <puts>

					MF.FLAG.SCND = 0;
 8008abe:	4a41      	ldr	r2, [pc, #260]	; (8008bc4 <simple_run+0x204>)
 8008ac0:	8813      	ldrh	r3, [r2, #0]
 8008ac2:	f36f 1345 	bfc	r3, #5, #1
 8008ac6:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8008ac8:	4b3f      	ldr	r3, [pc, #252]	; (8008bc8 <simple_run+0x208>)
 8008aca:	2201      	movs	r2, #1
 8008acc:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8008ace:	4b3f      	ldr	r3, [pc, #252]	; (8008bcc <simple_run+0x20c>)
 8008ad0:	2209      	movs	r2, #9
 8008ad2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008ad4:	4b3e      	ldr	r3, [pc, #248]	; (8008bd0 <simple_run+0x210>)
 8008ad6:	2206      	movs	r2, #6
 8008ad8:	701a      	strb	r2, [r3, #0]

					get_base();
 8008ada:	f006 faa3 	bl	800f024 <get_base>

					searchA();
 8008ade:	f003 fc8d 	bl	800c3fc <searchA>
					HAL_Delay(2000);
 8008ae2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008ae6:	f7f8 fa99 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008aea:	4b39      	ldr	r3, [pc, #228]	; (8008bd0 <simple_run+0x210>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	701a      	strb	r2, [r3, #0]
 8008af0:	4b37      	ldr	r3, [pc, #220]	; (8008bd0 <simple_run+0x210>)
 8008af2:	781a      	ldrb	r2, [r3, #0]
 8008af4:	4b35      	ldr	r3, [pc, #212]	; (8008bcc <simple_run+0x20c>)
 8008af6:	701a      	strb	r2, [r3, #0]
					searchA();
 8008af8:	f003 fc80 	bl	800c3fc <searchA>

					goal_x = GOAL_X;
 8008afc:	4b33      	ldr	r3, [pc, #204]	; (8008bcc <simple_run+0x20c>)
 8008afe:	2209      	movs	r2, #9
 8008b00:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008b02:	4b33      	ldr	r3, [pc, #204]	; (8008bd0 <simple_run+0x210>)
 8008b04:	2206      	movs	r2, #6
 8008b06:	701a      	strb	r2, [r3, #0]

					break;
 8008b08:	e051      	b.n	8008bae <simple_run+0x1ee>

				case 2:
					//----一次探索連続走行----
					printf("First Run. (Continuous)\n");
 8008b0a:	4832      	ldr	r0, [pc, #200]	; (8008bd4 <simple_run+0x214>)
 8008b0c:	f007 f924 	bl	800fd58 <puts>

					MF.FLAG.SCND = 0;
 8008b10:	4a2c      	ldr	r2, [pc, #176]	; (8008bc4 <simple_run+0x204>)
 8008b12:	8813      	ldrh	r3, [r2, #0]
 8008b14:	f36f 1345 	bfc	r3, #5, #1
 8008b18:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8008b1a:	4b2b      	ldr	r3, [pc, #172]	; (8008bc8 <simple_run+0x208>)
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8008b20:	4b2a      	ldr	r3, [pc, #168]	; (8008bcc <simple_run+0x20c>)
 8008b22:	2209      	movs	r2, #9
 8008b24:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008b26:	4b2a      	ldr	r3, [pc, #168]	; (8008bd0 <simple_run+0x210>)
 8008b28:	2206      	movs	r2, #6
 8008b2a:	701a      	strb	r2, [r3, #0]

					get_base();
 8008b2c:	f006 fa7a 	bl	800f024 <get_base>

					searchB();
 8008b30:	f003 fce6 	bl	800c500 <searchB>
					HAL_Delay(2000);
 8008b34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008b38:	f7f8 fa70 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008b3c:	4b24      	ldr	r3, [pc, #144]	; (8008bd0 <simple_run+0x210>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	701a      	strb	r2, [r3, #0]
 8008b42:	4b23      	ldr	r3, [pc, #140]	; (8008bd0 <simple_run+0x210>)
 8008b44:	781a      	ldrb	r2, [r3, #0]
 8008b46:	4b21      	ldr	r3, [pc, #132]	; (8008bcc <simple_run+0x20c>)
 8008b48:	701a      	strb	r2, [r3, #0]
					searchB();
 8008b4a:	f003 fcd9 	bl	800c500 <searchB>

					goal_x = GOAL_X;
 8008b4e:	4b1f      	ldr	r3, [pc, #124]	; (8008bcc <simple_run+0x20c>)
 8008b50:	2209      	movs	r2, #9
 8008b52:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008b54:	4b1e      	ldr	r3, [pc, #120]	; (8008bd0 <simple_run+0x210>)
 8008b56:	2206      	movs	r2, #6
 8008b58:	701a      	strb	r2, [r3, #0]

					break;
 8008b5a:	e028      	b.n	8008bae <simple_run+0x1ee>

				case 3:
					//----二次探索走行----
					printf("Second Run. (Continuous)\n");
 8008b5c:	481e      	ldr	r0, [pc, #120]	; (8008bd8 <simple_run+0x218>)
 8008b5e:	f007 f8fb 	bl	800fd58 <puts>

					MF.FLAG.SCND = 1;
 8008b62:	4a18      	ldr	r2, [pc, #96]	; (8008bc4 <simple_run+0x204>)
 8008b64:	8813      	ldrh	r3, [r2, #0]
 8008b66:	f043 0320 	orr.w	r3, r3, #32
 8008b6a:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8008b6c:	4b16      	ldr	r3, [pc, #88]	; (8008bc8 <simple_run+0x208>)
 8008b6e:	2201      	movs	r2, #1
 8008b70:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8008b72:	4b16      	ldr	r3, [pc, #88]	; (8008bcc <simple_run+0x20c>)
 8008b74:	2209      	movs	r2, #9
 8008b76:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008b78:	4b15      	ldr	r3, [pc, #84]	; (8008bd0 <simple_run+0x210>)
 8008b7a:	2206      	movs	r2, #6
 8008b7c:	701a      	strb	r2, [r3, #0]

					get_base();
 8008b7e:	f006 fa51 	bl	800f024 <get_base>

					searchB();
 8008b82:	f003 fcbd 	bl	800c500 <searchB>
					HAL_Delay(2000);
 8008b86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008b8a:	f7f8 fa47 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008b8e:	4b10      	ldr	r3, [pc, #64]	; (8008bd0 <simple_run+0x210>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	701a      	strb	r2, [r3, #0]
 8008b94:	4b0e      	ldr	r3, [pc, #56]	; (8008bd0 <simple_run+0x210>)
 8008b96:	781a      	ldrb	r2, [r3, #0]
 8008b98:	4b0c      	ldr	r3, [pc, #48]	; (8008bcc <simple_run+0x20c>)
 8008b9a:	701a      	strb	r2, [r3, #0]
					searchB();
 8008b9c:	f003 fcb0 	bl	800c500 <searchB>

					goal_x = GOAL_X;
 8008ba0:	4b0a      	ldr	r3, [pc, #40]	; (8008bcc <simple_run+0x20c>)
 8008ba2:	2209      	movs	r2, #9
 8008ba4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008ba6:	4b0a      	ldr	r3, [pc, #40]	; (8008bd0 <simple_run+0x210>)
 8008ba8:	2206      	movs	r2, #6
 8008baa:	701a      	strb	r2, [r3, #0]

					break;
 8008bac:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008bae:	e710      	b.n	80089d2 <simple_run+0x12>
 8008bb0:	080111ec 	.word	0x080111ec
 8008bb4:	20000b2c 	.word	0x20000b2c
 8008bb8:	08010ec4 	.word	0x08010ec4
 8008bbc:	40020000 	.word	0x40020000
 8008bc0:	08011204 	.word	0x08011204
 8008bc4:	20000fac 	.word	0x20000fac
 8008bc8:	2000048e 	.word	0x2000048e
 8008bcc:	20000bf1 	.word	0x20000bf1
 8008bd0:	20000b8c 	.word	0x20000b8c
 8008bd4:	08011210 	.word	0x08011210
 8008bd8:	08011228 	.word	0x08011228

08008bdc <slalom_run>:
//slalom_run
// スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_run(void){
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0

	int mode = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	607b      	str	r3, [r7, #4]
	printf("Slalom Run, Mode : %d\n", mode);
 8008be6:	6879      	ldr	r1, [r7, #4]
 8008be8:	48a6      	ldr	r0, [pc, #664]	; (8008e84 <slalom_run+0x2a8>)
 8008bea:	f007 f841 	bl	800fc70 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	b2d8      	uxtb	r0, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	f003 0302 	and.w	r3, r3, #2
 8008c00:	b2d9      	uxtb	r1, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	f003 0304 	and.w	r3, r3, #4
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	f006 fa61 	bl	800f0d4 <led_write>
		  if(dist_r >= 20){
 8008c12:	4b9d      	ldr	r3, [pc, #628]	; (8008e88 <slalom_run+0x2ac>)
 8008c14:	edd3 7a00 	vldr	s15, [r3]
 8008c18:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c24:	db0f      	blt.n	8008c46 <slalom_run+0x6a>
			  mode++;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8008c2c:	4b96      	ldr	r3, [pc, #600]	; (8008e88 <slalom_run+0x2ac>)
 8008c2e:	f04f 0200 	mov.w	r2, #0
 8008c32:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b07      	cmp	r3, #7
 8008c38:	dd01      	ble.n	8008c3e <slalom_run+0x62>
				  mode = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	4892      	ldr	r0, [pc, #584]	; (8008e8c <slalom_run+0x2b0>)
 8008c42:	f007 f815 	bl	800fc70 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8008c46:	4b90      	ldr	r3, [pc, #576]	; (8008e88 <slalom_run+0x2ac>)
 8008c48:	edd3 7a00 	vldr	s15, [r3]
 8008c4c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8008c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c58:	d80f      	bhi.n	8008c7a <slalom_run+0x9e>
			  mode--;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8008c60:	4b89      	ldr	r3, [pc, #548]	; (8008e88 <slalom_run+0x2ac>)
 8008c62:	f04f 0200 	mov.w	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	da01      	bge.n	8008c72 <slalom_run+0x96>
				  mode = 7;
 8008c6e:	2307      	movs	r3, #7
 8008c70:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8008c72:	6879      	ldr	r1, [r7, #4]
 8008c74:	4885      	ldr	r0, [pc, #532]	; (8008e8c <slalom_run+0x2b0>)
 8008c76:	f006 fffb 	bl	800fc70 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8008c7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008c7e:	4884      	ldr	r0, [pc, #528]	; (8008e90 <slalom_run+0x2b4>)
 8008c80:	f7f9 fb28 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1b1      	bne.n	8008bee <slalom_run+0x12>
			  HAL_Delay(50);
 8008c8a:	2032      	movs	r0, #50	; 0x32
 8008c8c:	f7f8 f9c6 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8008c90:	bf00      	nop
 8008c92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008c96:	487e      	ldr	r0, [pc, #504]	; (8008e90 <slalom_run+0x2b4>)
 8008c98:	f7f9 fb1c 	bl	80022d4 <HAL_GPIO_ReadPin>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0f7      	beq.n	8008c92 <slalom_run+0xb6>
			  drive_ready();
 8008ca2:	f7fb ffe7 	bl	8004c74 <drive_ready>

			  switch(mode){
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2b07      	cmp	r3, #7
 8008caa:	d8a0      	bhi.n	8008bee <slalom_run+0x12>
 8008cac:	a201      	add	r2, pc, #4	; (adr r2, 8008cb4 <slalom_run+0xd8>)
 8008cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb2:	bf00      	nop
 8008cb4:	08008cd5 	.word	0x08008cd5
 8008cb8:	08008d47 	.word	0x08008d47
 8008cbc:	08008d9f 	.word	0x08008d9f
 8008cc0:	08008e11 	.word	0x08008e11
 8008cc4:	08008ebd 	.word	0x08008ebd
 8008cc8:	08008f2f 	.word	0x08008f2f
 8008ccc:	08008f99 	.word	0x08008f99
 8008cd0:	0800901d 	.word	0x0800901d

			  case 0:
					//----一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 8008cd4:	486f      	ldr	r0, [pc, #444]	; (8008e94 <slalom_run+0x2b8>)
 8008cd6:	f007 f83f 	bl	800fd58 <puts>

					MF.FLAG.SCND = 0;
 8008cda:	4a6f      	ldr	r2, [pc, #444]	; (8008e98 <slalom_run+0x2bc>)
 8008cdc:	8813      	ldrh	r3, [r2, #0]
 8008cde:	f36f 1345 	bfc	r3, #5, #1
 8008ce2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 8008ce4:	4a6c      	ldr	r2, [pc, #432]	; (8008e98 <slalom_run+0x2bc>)
 8008ce6:	8813      	ldrh	r3, [r2, #0]
 8008ce8:	f36f 2349 	bfc	r3, #9, #1
 8008cec:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8008cee:	4b6b      	ldr	r3, [pc, #428]	; (8008e9c <slalom_run+0x2c0>)
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8008cf4:	4b6a      	ldr	r3, [pc, #424]	; (8008ea0 <slalom_run+0x2c4>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8008cfa:	4b6a      	ldr	r3, [pc, #424]	; (8008ea4 <slalom_run+0x2c8>)
 8008cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d00:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8008d02:	4b69      	ldr	r3, [pc, #420]	; (8008ea8 <slalom_run+0x2cc>)
 8008d04:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008d08:	801a      	strh	r2, [r3, #0]


					goal_x = GOAL_X;
 8008d0a:	4b68      	ldr	r3, [pc, #416]	; (8008eac <slalom_run+0x2d0>)
 8008d0c:	2209      	movs	r2, #9
 8008d0e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008d10:	4b67      	ldr	r3, [pc, #412]	; (8008eb0 <slalom_run+0x2d4>)
 8008d12:	2206      	movs	r2, #6
 8008d14:	701a      	strb	r2, [r3, #0]

					get_base();
 8008d16:	f006 f985 	bl	800f024 <get_base>

					searchC();
 8008d1a:	f003 fc7b 	bl	800c614 <searchC>
					HAL_Delay(2000);
 8008d1e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008d22:	f7f8 f97b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008d26:	4b62      	ldr	r3, [pc, #392]	; (8008eb0 <slalom_run+0x2d4>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	701a      	strb	r2, [r3, #0]
 8008d2c:	4b60      	ldr	r3, [pc, #384]	; (8008eb0 <slalom_run+0x2d4>)
 8008d2e:	781a      	ldrb	r2, [r3, #0]
 8008d30:	4b5e      	ldr	r3, [pc, #376]	; (8008eac <slalom_run+0x2d0>)
 8008d32:	701a      	strb	r2, [r3, #0]
					searchC();
 8008d34:	f003 fc6e 	bl	800c614 <searchC>

					goal_x = GOAL_X;
 8008d38:	4b5c      	ldr	r3, [pc, #368]	; (8008eac <slalom_run+0x2d0>)
 8008d3a:	2209      	movs	r2, #9
 8008d3c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008d3e:	4b5c      	ldr	r3, [pc, #368]	; (8008eb0 <slalom_run+0x2d4>)
 8008d40:	2206      	movs	r2, #6
 8008d42:	701a      	strb	r2, [r3, #0]
					break;
 8008d44:	e1ac      	b.n	80090a0 <slalom_run+0x4c4>

				case 1:
					//----二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 8008d46:	485b      	ldr	r0, [pc, #364]	; (8008eb4 <slalom_run+0x2d8>)
 8008d48:	f007 f806 	bl	800fd58 <puts>

					MF.FLAG.SCND = 1;
 8008d4c:	4a52      	ldr	r2, [pc, #328]	; (8008e98 <slalom_run+0x2bc>)
 8008d4e:	8813      	ldrh	r3, [r2, #0]
 8008d50:	f043 0320 	orr.w	r3, r3, #32
 8008d54:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8008d56:	4b51      	ldr	r3, [pc, #324]	; (8008e9c <slalom_run+0x2c0>)
 8008d58:	2201      	movs	r2, #1
 8008d5a:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8008d5c:	4b50      	ldr	r3, [pc, #320]	; (8008ea0 <slalom_run+0x2c4>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8008d62:	4b52      	ldr	r3, [pc, #328]	; (8008eac <slalom_run+0x2d0>)
 8008d64:	2209      	movs	r2, #9
 8008d66:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008d68:	4b51      	ldr	r3, [pc, #324]	; (8008eb0 <slalom_run+0x2d4>)
 8008d6a:	2206      	movs	r2, #6
 8008d6c:	701a      	strb	r2, [r3, #0]

					get_base();
 8008d6e:	f006 f959 	bl	800f024 <get_base>

					searchC();
 8008d72:	f003 fc4f 	bl	800c614 <searchC>
					HAL_Delay(2000);
 8008d76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008d7a:	f7f8 f94f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008d7e:	4b4c      	ldr	r3, [pc, #304]	; (8008eb0 <slalom_run+0x2d4>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	701a      	strb	r2, [r3, #0]
 8008d84:	4b4a      	ldr	r3, [pc, #296]	; (8008eb0 <slalom_run+0x2d4>)
 8008d86:	781a      	ldrb	r2, [r3, #0]
 8008d88:	4b48      	ldr	r3, [pc, #288]	; (8008eac <slalom_run+0x2d0>)
 8008d8a:	701a      	strb	r2, [r3, #0]
					searchC();
 8008d8c:	f003 fc42 	bl	800c614 <searchC>

					goal_x = GOAL_X;
 8008d90:	4b46      	ldr	r3, [pc, #280]	; (8008eac <slalom_run+0x2d0>)
 8008d92:	2209      	movs	r2, #9
 8008d94:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008d96:	4b46      	ldr	r3, [pc, #280]	; (8008eb0 <slalom_run+0x2d4>)
 8008d98:	2206      	movs	r2, #6
 8008d9a:	701a      	strb	r2, [r3, #0]
					break;
 8008d9c:	e180      	b.n	80090a0 <slalom_run+0x4c4>

				case 2:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8008d9e:	4846      	ldr	r0, [pc, #280]	; (8008eb8 <slalom_run+0x2dc>)
 8008da0:	f006 ffda 	bl	800fd58 <puts>

					MF.FLAG.SCND = 1;
 8008da4:	4a3c      	ldr	r2, [pc, #240]	; (8008e98 <slalom_run+0x2bc>)
 8008da6:	8813      	ldrh	r3, [r2, #0]
 8008da8:	f043 0320 	orr.w	r3, r3, #32
 8008dac:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8008dae:	4a3a      	ldr	r2, [pc, #232]	; (8008e98 <slalom_run+0x2bc>)
 8008db0:	8813      	ldrh	r3, [r2, #0]
 8008db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008db6:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8008db8:	4b38      	ldr	r3, [pc, #224]	; (8008e9c <slalom_run+0x2c0>)
 8008dba:	2201      	movs	r2, #1
 8008dbc:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8008dbe:	4b38      	ldr	r3, [pc, #224]	; (8008ea0 <slalom_run+0x2c4>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8008dc4:	4b37      	ldr	r3, [pc, #220]	; (8008ea4 <slalom_run+0x2c8>)
 8008dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dca:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 8008dcc:	4b36      	ldr	r3, [pc, #216]	; (8008ea8 <slalom_run+0x2cc>)
 8008dce:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008dd2:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8008dd4:	4b35      	ldr	r3, [pc, #212]	; (8008eac <slalom_run+0x2d0>)
 8008dd6:	2209      	movs	r2, #9
 8008dd8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008dda:	4b35      	ldr	r3, [pc, #212]	; (8008eb0 <slalom_run+0x2d4>)
 8008ddc:	2206      	movs	r2, #6
 8008dde:	701a      	strb	r2, [r3, #0]

					get_base();
 8008de0:	f006 f920 	bl	800f024 <get_base>

					searchD();
 8008de4:	f003 fd36 	bl	800c854 <searchD>
					HAL_Delay(2000);
 8008de8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008dec:	f7f8 f916 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008df0:	4b2f      	ldr	r3, [pc, #188]	; (8008eb0 <slalom_run+0x2d4>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	701a      	strb	r2, [r3, #0]
 8008df6:	4b2e      	ldr	r3, [pc, #184]	; (8008eb0 <slalom_run+0x2d4>)
 8008df8:	781a      	ldrb	r2, [r3, #0]
 8008dfa:	4b2c      	ldr	r3, [pc, #176]	; (8008eac <slalom_run+0x2d0>)
 8008dfc:	701a      	strb	r2, [r3, #0]
					searchD();
 8008dfe:	f003 fd29 	bl	800c854 <searchD>

					goal_x = GOAL_X;
 8008e02:	4b2a      	ldr	r3, [pc, #168]	; (8008eac <slalom_run+0x2d0>)
 8008e04:	2209      	movs	r2, #9
 8008e06:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008e08:	4b29      	ldr	r3, [pc, #164]	; (8008eb0 <slalom_run+0x2d4>)
 8008e0a:	2206      	movs	r2, #6
 8008e0c:	701a      	strb	r2, [r3, #0]
					break;
 8008e0e:	e147      	b.n	80090a0 <slalom_run+0x4c4>

				case 3:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8008e10:	4829      	ldr	r0, [pc, #164]	; (8008eb8 <slalom_run+0x2dc>)
 8008e12:	f006 ffa1 	bl	800fd58 <puts>

					MF.FLAG.SCND = 1;
 8008e16:	4a20      	ldr	r2, [pc, #128]	; (8008e98 <slalom_run+0x2bc>)
 8008e18:	8813      	ldrh	r3, [r2, #0]
 8008e1a:	f043 0320 	orr.w	r3, r3, #32
 8008e1e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8008e20:	4a1d      	ldr	r2, [pc, #116]	; (8008e98 <slalom_run+0x2bc>)
 8008e22:	8813      	ldrh	r3, [r2, #0]
 8008e24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e28:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8008e2a:	4b1c      	ldr	r3, [pc, #112]	; (8008e9c <slalom_run+0x2c0>)
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8008e30:	4b1b      	ldr	r3, [pc, #108]	; (8008ea0 <slalom_run+0x2c4>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8008e36:	4b1b      	ldr	r3, [pc, #108]	; (8008ea4 <slalom_run+0x2c8>)
 8008e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e3c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 8008e3e:	4b1a      	ldr	r3, [pc, #104]	; (8008ea8 <slalom_run+0x2cc>)
 8008e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e44:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8008e46:	4b19      	ldr	r3, [pc, #100]	; (8008eac <slalom_run+0x2d0>)
 8008e48:	2209      	movs	r2, #9
 8008e4a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008e4c:	4b18      	ldr	r3, [pc, #96]	; (8008eb0 <slalom_run+0x2d4>)
 8008e4e:	2206      	movs	r2, #6
 8008e50:	701a      	strb	r2, [r3, #0]

					get_base();
 8008e52:	f006 f8e7 	bl	800f024 <get_base>

					searchD();
 8008e56:	f003 fcfd 	bl	800c854 <searchD>
					HAL_Delay(2000);
 8008e5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008e5e:	f7f8 f8dd 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008e62:	4b13      	ldr	r3, [pc, #76]	; (8008eb0 <slalom_run+0x2d4>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	701a      	strb	r2, [r3, #0]
 8008e68:	4b11      	ldr	r3, [pc, #68]	; (8008eb0 <slalom_run+0x2d4>)
 8008e6a:	781a      	ldrb	r2, [r3, #0]
 8008e6c:	4b0f      	ldr	r3, [pc, #60]	; (8008eac <slalom_run+0x2d0>)
 8008e6e:	701a      	strb	r2, [r3, #0]
					searchD();
 8008e70:	f003 fcf0 	bl	800c854 <searchD>

					goal_x = GOAL_X;
 8008e74:	4b0d      	ldr	r3, [pc, #52]	; (8008eac <slalom_run+0x2d0>)
 8008e76:	2209      	movs	r2, #9
 8008e78:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008e7a:	4b0d      	ldr	r3, [pc, #52]	; (8008eb0 <slalom_run+0x2d4>)
 8008e7c:	2206      	movs	r2, #6
 8008e7e:	701a      	strb	r2, [r3, #0]
					break;
 8008e80:	e10e      	b.n	80090a0 <slalom_run+0x4c4>
 8008e82:	bf00      	nop
 8008e84:	08011244 	.word	0x08011244
 8008e88:	20000b2c 	.word	0x20000b2c
 8008e8c:	08010ec4 	.word	0x08010ec4
 8008e90:	40020000 	.word	0x40020000
 8008e94:	080111a8 	.word	0x080111a8
 8008e98:	20000fac 	.word	0x20000fac
 8008e9c:	2000048e 	.word	0x2000048e
 8008ea0:	2000160c 	.word	0x2000160c
 8008ea4:	2000048c 	.word	0x2000048c
 8008ea8:	20000fc0 	.word	0x20000fc0
 8008eac:	20000bf1 	.word	0x20000bf1
 8008eb0:	20000b8c 	.word	0x20000b8c
 8008eb4:	0801125c 	.word	0x0801125c
 8008eb8:	08011274 	.word	0x08011274

				case 4:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8008ebc:	4879      	ldr	r0, [pc, #484]	; (80090a4 <slalom_run+0x4c8>)
 8008ebe:	f006 ff4b 	bl	800fd58 <puts>

					MF.FLAG.SCND = 1;
 8008ec2:	4a79      	ldr	r2, [pc, #484]	; (80090a8 <slalom_run+0x4cc>)
 8008ec4:	8813      	ldrh	r3, [r2, #0]
 8008ec6:	f043 0320 	orr.w	r3, r3, #32
 8008eca:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8008ecc:	4a76      	ldr	r2, [pc, #472]	; (80090a8 <slalom_run+0x4cc>)
 8008ece:	8813      	ldrh	r3, [r2, #0]
 8008ed0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ed4:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8008ed6:	4b75      	ldr	r3, [pc, #468]	; (80090ac <slalom_run+0x4d0>)
 8008ed8:	2201      	movs	r2, #1
 8008eda:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8008edc:	4b74      	ldr	r3, [pc, #464]	; (80090b0 <slalom_run+0x4d4>)
 8008ede:	2200      	movs	r2, #0
 8008ee0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8008ee2:	4b74      	ldr	r3, [pc, #464]	; (80090b4 <slalom_run+0x4d8>)
 8008ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ee8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1500;
 8008eea:	4b73      	ldr	r3, [pc, #460]	; (80090b8 <slalom_run+0x4dc>)
 8008eec:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008ef0:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8008ef2:	4b72      	ldr	r3, [pc, #456]	; (80090bc <slalom_run+0x4e0>)
 8008ef4:	2209      	movs	r2, #9
 8008ef6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008ef8:	4b71      	ldr	r3, [pc, #452]	; (80090c0 <slalom_run+0x4e4>)
 8008efa:	2206      	movs	r2, #6
 8008efc:	701a      	strb	r2, [r3, #0]

					get_base();
 8008efe:	f006 f891 	bl	800f024 <get_base>

					searchD();
 8008f02:	f003 fca7 	bl	800c854 <searchD>
					HAL_Delay(2000);
 8008f06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008f0a:	f7f8 f887 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008f0e:	4b6c      	ldr	r3, [pc, #432]	; (80090c0 <slalom_run+0x4e4>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	701a      	strb	r2, [r3, #0]
 8008f14:	4b6a      	ldr	r3, [pc, #424]	; (80090c0 <slalom_run+0x4e4>)
 8008f16:	781a      	ldrb	r2, [r3, #0]
 8008f18:	4b68      	ldr	r3, [pc, #416]	; (80090bc <slalom_run+0x4e0>)
 8008f1a:	701a      	strb	r2, [r3, #0]
					searchD();
 8008f1c:	f003 fc9a 	bl	800c854 <searchD>

					goal_x = GOAL_X;
 8008f20:	4b66      	ldr	r3, [pc, #408]	; (80090bc <slalom_run+0x4e0>)
 8008f22:	2209      	movs	r2, #9
 8008f24:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008f26:	4b66      	ldr	r3, [pc, #408]	; (80090c0 <slalom_run+0x4e4>)
 8008f28:	2206      	movs	r2, #6
 8008f2a:	701a      	strb	r2, [r3, #0]
					break;
 8008f2c:	e0b8      	b.n	80090a0 <slalom_run+0x4c4>

				case 5:
					//----二次走行スラローム+直線優先----
					printf("High Speed Run. (Slalom)\n");
 8008f2e:	4865      	ldr	r0, [pc, #404]	; (80090c4 <slalom_run+0x4e8>)
 8008f30:	f006 ff12 	bl	800fd58 <puts>

					MF.FLAG.SCND = 1;
 8008f34:	4a5c      	ldr	r2, [pc, #368]	; (80090a8 <slalom_run+0x4cc>)
 8008f36:	8813      	ldrh	r3, [r2, #0]
 8008f38:	f043 0320 	orr.w	r3, r3, #32
 8008f3c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8008f3e:	4a5a      	ldr	r2, [pc, #360]	; (80090a8 <slalom_run+0x4cc>)
 8008f40:	8813      	ldrh	r3, [r2, #0]
 8008f42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008f46:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8008f48:	4b58      	ldr	r3, [pc, #352]	; (80090ac <slalom_run+0x4d0>)
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8008f4e:	4b58      	ldr	r3, [pc, #352]	; (80090b0 <slalom_run+0x4d4>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8008f54:	4b59      	ldr	r3, [pc, #356]	; (80090bc <slalom_run+0x4e0>)
 8008f56:	2209      	movs	r2, #9
 8008f58:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008f5a:	4b59      	ldr	r3, [pc, #356]	; (80090c0 <slalom_run+0x4e4>)
 8008f5c:	2206      	movs	r2, #6
 8008f5e:	701a      	strb	r2, [r3, #0]

					get_base();
 8008f60:	f006 f860 	bl	800f024 <get_base>

					HAL_Delay(5000);
 8008f64:	f241 3088 	movw	r0, #5000	; 0x1388
 8008f68:	f7f8 f858 	bl	800101c <HAL_Delay>
					searchC();
 8008f6c:	f003 fb52 	bl	800c614 <searchC>
					HAL_Delay(2000);
 8008f70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008f74:	f7f8 f852 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008f78:	4b51      	ldr	r3, [pc, #324]	; (80090c0 <slalom_run+0x4e4>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	701a      	strb	r2, [r3, #0]
 8008f7e:	4b50      	ldr	r3, [pc, #320]	; (80090c0 <slalom_run+0x4e4>)
 8008f80:	781a      	ldrb	r2, [r3, #0]
 8008f82:	4b4e      	ldr	r3, [pc, #312]	; (80090bc <slalom_run+0x4e0>)
 8008f84:	701a      	strb	r2, [r3, #0]
					searchC();
 8008f86:	f003 fb45 	bl	800c614 <searchC>

					goal_x = GOAL_X;
 8008f8a:	4b4c      	ldr	r3, [pc, #304]	; (80090bc <slalom_run+0x4e0>)
 8008f8c:	2209      	movs	r2, #9
 8008f8e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008f90:	4b4b      	ldr	r3, [pc, #300]	; (80090c0 <slalom_run+0x4e4>)
 8008f92:	2206      	movs	r2, #6
 8008f94:	701a      	strb	r2, [r3, #0]
					break;
 8008f96:	e083      	b.n	80090a0 <slalom_run+0x4c4>

				case 6:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 8008f98:	484a      	ldr	r0, [pc, #296]	; (80090c4 <slalom_run+0x4e8>)
 8008f9a:	f006 fedd 	bl	800fd58 <puts>

					MF.FLAG.SCND = 1;
 8008f9e:	4a42      	ldr	r2, [pc, #264]	; (80090a8 <slalom_run+0x4cc>)
 8008fa0:	8813      	ldrh	r3, [r2, #0]
 8008fa2:	f043 0320 	orr.w	r3, r3, #32
 8008fa6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8008fa8:	4a3f      	ldr	r2, [pc, #252]	; (80090a8 <slalom_run+0x4cc>)
 8008faa:	8813      	ldrh	r3, [r2, #0]
 8008fac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008fb0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8008fb2:	4a3d      	ldr	r2, [pc, #244]	; (80090a8 <slalom_run+0x4cc>)
 8008fb4:	8813      	ldrh	r3, [r2, #0]
 8008fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008fba:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 8008fbc:	4b3b      	ldr	r3, [pc, #236]	; (80090ac <slalom_run+0x4d0>)
 8008fbe:	2203      	movs	r2, #3
 8008fc0:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8008fc2:	4b3b      	ldr	r3, [pc, #236]	; (80090b0 <slalom_run+0x4d4>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8008fc8:	4b3a      	ldr	r3, [pc, #232]	; (80090b4 <slalom_run+0x4d8>)
 8008fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fce:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8008fd0:	4b39      	ldr	r3, [pc, #228]	; (80090b8 <slalom_run+0x4dc>)
 8008fd2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8008fd6:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8008fd8:	4b38      	ldr	r3, [pc, #224]	; (80090bc <slalom_run+0x4e0>)
 8008fda:	2209      	movs	r2, #9
 8008fdc:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8008fde:	4b38      	ldr	r3, [pc, #224]	; (80090c0 <slalom_run+0x4e4>)
 8008fe0:	2206      	movs	r2, #6
 8008fe2:	701a      	strb	r2, [r3, #0]

					get_base();
 8008fe4:	f006 f81e 	bl	800f024 <get_base>

					HAL_Delay(5000);
 8008fe8:	f241 3088 	movw	r0, #5000	; 0x1388
 8008fec:	f7f8 f816 	bl	800101c <HAL_Delay>
//					searchD2();
					searchD();
 8008ff0:	f003 fc30 	bl	800c854 <searchD>
					HAL_Delay(2000);
 8008ff4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008ff8:	f7f8 f810 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8008ffc:	4b30      	ldr	r3, [pc, #192]	; (80090c0 <slalom_run+0x4e4>)
 8008ffe:	2200      	movs	r2, #0
 8009000:	701a      	strb	r2, [r3, #0]
 8009002:	4b2f      	ldr	r3, [pc, #188]	; (80090c0 <slalom_run+0x4e4>)
 8009004:	781a      	ldrb	r2, [r3, #0]
 8009006:	4b2d      	ldr	r3, [pc, #180]	; (80090bc <slalom_run+0x4e0>)
 8009008:	701a      	strb	r2, [r3, #0]
//					searchD2();
					searchD();
 800900a:	f003 fc23 	bl	800c854 <searchD>

					goal_x = GOAL_X;
 800900e:	4b2b      	ldr	r3, [pc, #172]	; (80090bc <slalom_run+0x4e0>)
 8009010:	2209      	movs	r2, #9
 8009012:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009014:	4b2a      	ldr	r3, [pc, #168]	; (80090c0 <slalom_run+0x4e4>)
 8009016:	2206      	movs	r2, #6
 8009018:	701a      	strb	r2, [r3, #0]
					break;
 800901a:	e041      	b.n	80090a0 <slalom_run+0x4c4>

				case 7:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800901c:	4829      	ldr	r0, [pc, #164]	; (80090c4 <slalom_run+0x4e8>)
 800901e:	f006 fe9b 	bl	800fd58 <puts>

					MF.FLAG.SCND = 1;
 8009022:	4a21      	ldr	r2, [pc, #132]	; (80090a8 <slalom_run+0x4cc>)
 8009024:	8813      	ldrh	r3, [r2, #0]
 8009026:	f043 0320 	orr.w	r3, r3, #32
 800902a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800902c:	4a1e      	ldr	r2, [pc, #120]	; (80090a8 <slalom_run+0x4cc>)
 800902e:	8813      	ldrh	r3, [r2, #0]
 8009030:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009034:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009036:	4a1c      	ldr	r2, [pc, #112]	; (80090a8 <slalom_run+0x4cc>)
 8009038:	8813      	ldrh	r3, [r2, #0]
 800903a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800903e:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 8009040:	4b1a      	ldr	r3, [pc, #104]	; (80090ac <slalom_run+0x4d0>)
 8009042:	2203      	movs	r2, #3
 8009044:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8009046:	4b1a      	ldr	r3, [pc, #104]	; (80090b0 <slalom_run+0x4d4>)
 8009048:	2200      	movs	r2, #0
 800904a:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800904c:	4b19      	ldr	r3, [pc, #100]	; (80090b4 <slalom_run+0x4d8>)
 800904e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009052:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 8009054:	4b18      	ldr	r3, [pc, #96]	; (80090b8 <slalom_run+0x4dc>)
 8009056:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800905a:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800905c:	4b17      	ldr	r3, [pc, #92]	; (80090bc <slalom_run+0x4e0>)
 800905e:	2209      	movs	r2, #9
 8009060:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009062:	4b17      	ldr	r3, [pc, #92]	; (80090c0 <slalom_run+0x4e4>)
 8009064:	2206      	movs	r2, #6
 8009066:	701a      	strb	r2, [r3, #0]

					get_base();
 8009068:	f005 ffdc 	bl	800f024 <get_base>

					HAL_Delay(5000);
 800906c:	f241 3088 	movw	r0, #5000	; 0x1388
 8009070:	f7f7 ffd4 	bl	800101c <HAL_Delay>
//					searchD2();
					searchD();
 8009074:	f003 fbee 	bl	800c854 <searchD>
					HAL_Delay(2000);
 8009078:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800907c:	f7f7 ffce 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009080:	4b0f      	ldr	r3, [pc, #60]	; (80090c0 <slalom_run+0x4e4>)
 8009082:	2200      	movs	r2, #0
 8009084:	701a      	strb	r2, [r3, #0]
 8009086:	4b0e      	ldr	r3, [pc, #56]	; (80090c0 <slalom_run+0x4e4>)
 8009088:	781a      	ldrb	r2, [r3, #0]
 800908a:	4b0c      	ldr	r3, [pc, #48]	; (80090bc <slalom_run+0x4e0>)
 800908c:	701a      	strb	r2, [r3, #0]
//					searchD2();
					searchD();
 800908e:	f003 fbe1 	bl	800c854 <searchD>

					goal_x = GOAL_X;
 8009092:	4b0a      	ldr	r3, [pc, #40]	; (80090bc <slalom_run+0x4e0>)
 8009094:	2209      	movs	r2, #9
 8009096:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009098:	4b09      	ldr	r3, [pc, #36]	; (80090c0 <slalom_run+0x4e4>)
 800909a:	2206      	movs	r2, #6
 800909c:	701a      	strb	r2, [r3, #0]
					break;
 800909e:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80090a0:	e5a5      	b.n	8008bee <slalom_run+0x12>
 80090a2:	bf00      	nop
 80090a4:	08011274 	.word	0x08011274
 80090a8:	20000fac 	.word	0x20000fac
 80090ac:	2000048e 	.word	0x2000048e
 80090b0:	2000160c 	.word	0x2000160c
 80090b4:	2000048c 	.word	0x2000048c
 80090b8:	20000fc0 	.word	0x20000fc0
 80090bc:	20000bf1 	.word	0x20000bf1
 80090c0:	20000b8c 	.word	0x20000b8c
 80090c4:	08011290 	.word	0x08011290

080090c8 <sample_course_run>:
//sample_course_run
// 試験走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sample_course_run(void){
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0

	int mode = 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	607b      	str	r3, [r7, #4]
	printf("Sample Course Run, Mode : %d\n", mode);
 80090d2:	6879      	ldr	r1, [r7, #4]
 80090d4:	488f      	ldr	r0, [pc, #572]	; (8009314 <sample_course_run+0x24c>)
 80090d6:	f006 fdcb 	bl	800fc70 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	b2d8      	uxtb	r0, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	f003 0302 	and.w	r3, r3, #2
 80090ec:	b2d9      	uxtb	r1, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	f003 0304 	and.w	r3, r3, #4
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	461a      	mov	r2, r3
 80090fa:	f005 ffeb 	bl	800f0d4 <led_write>
		  if(dist_r >= 20){
 80090fe:	4b86      	ldr	r3, [pc, #536]	; (8009318 <sample_course_run+0x250>)
 8009100:	edd3 7a00 	vldr	s15, [r3]
 8009104:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800910c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009110:	db0f      	blt.n	8009132 <sample_course_run+0x6a>
			  mode++;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	3301      	adds	r3, #1
 8009116:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009118:	4b7f      	ldr	r3, [pc, #508]	; (8009318 <sample_course_run+0x250>)
 800911a:	f04f 0200 	mov.w	r2, #0
 800911e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b07      	cmp	r3, #7
 8009124:	dd01      	ble.n	800912a <sample_course_run+0x62>
				  mode = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800912a:	6879      	ldr	r1, [r7, #4]
 800912c:	487b      	ldr	r0, [pc, #492]	; (800931c <sample_course_run+0x254>)
 800912e:	f006 fd9f 	bl	800fc70 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8009132:	4b79      	ldr	r3, [pc, #484]	; (8009318 <sample_course_run+0x250>)
 8009134:	edd3 7a00 	vldr	s15, [r3]
 8009138:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800913c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009144:	d80f      	bhi.n	8009166 <sample_course_run+0x9e>
			  mode--;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	3b01      	subs	r3, #1
 800914a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800914c:	4b72      	ldr	r3, [pc, #456]	; (8009318 <sample_course_run+0x250>)
 800914e:	f04f 0200 	mov.w	r2, #0
 8009152:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	da01      	bge.n	800915e <sample_course_run+0x96>
				  mode = 7;
 800915a:	2307      	movs	r3, #7
 800915c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800915e:	6879      	ldr	r1, [r7, #4]
 8009160:	486e      	ldr	r0, [pc, #440]	; (800931c <sample_course_run+0x254>)
 8009162:	f006 fd85 	bl	800fc70 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009166:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800916a:	486d      	ldr	r0, [pc, #436]	; (8009320 <sample_course_run+0x258>)
 800916c:	f7f9 f8b2 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1b1      	bne.n	80090da <sample_course_run+0x12>
			  HAL_Delay(50);
 8009176:	2032      	movs	r0, #50	; 0x32
 8009178:	f7f7 ff50 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800917c:	bf00      	nop
 800917e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009182:	4867      	ldr	r0, [pc, #412]	; (8009320 <sample_course_run+0x258>)
 8009184:	f7f9 f8a6 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d0f7      	beq.n	800917e <sample_course_run+0xb6>
			  drive_ready();
 800918e:	f7fb fd71 	bl	8004c74 <drive_ready>

			  switch(mode){
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2b07      	cmp	r3, #7
 8009196:	d8a0      	bhi.n	80090da <sample_course_run+0x12>
 8009198:	a201      	add	r2, pc, #4	; (adr r2, 80091a0 <sample_course_run+0xd8>)
 800919a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919e:	bf00      	nop
 80091a0:	080091c1 	.word	0x080091c1
 80091a4:	080091c7 	.word	0x080091c7
 80091a8:	080091e9 	.word	0x080091e9
 80091ac:	0800920b 	.word	0x0800920b
 80091b0:	080090db 	.word	0x080090db
 80091b4:	0800921d 	.word	0x0800921d
 80091b8:	08009297 	.word	0x08009297
 80091bc:	080090db 	.word	0x080090db
				case 0:
					get_base();
 80091c0:	f005 ff30 	bl	800f024 <get_base>
					break;
 80091c4:	e0a4      	b.n	8009310 <sample_course_run+0x248>

				case 1:
					//----サンプルコース1　超信地----
					half_sectionA();
 80091c6:	f7fc fb97 	bl	80058f8 <half_sectionA>
					half_sectionD();
 80091ca:	f7fc fbd1 	bl	8005970 <half_sectionD>
					rotate_R90();
 80091ce:	f7fc fdab 	bl	8005d28 <rotate_R90>
					half_sectionA();
 80091d2:	f7fc fb91 	bl	80058f8 <half_sectionA>
					half_sectionD();
 80091d6:	f7fc fbcb 	bl	8005970 <half_sectionD>
					rotate_R90();
 80091da:	f7fc fda5 	bl	8005d28 <rotate_R90>
					half_sectionA();
 80091de:	f7fc fb8b 	bl	80058f8 <half_sectionA>
					half_sectionD();
 80091e2:	f7fc fbc5 	bl	8005970 <half_sectionD>
					break;
 80091e6:	e093      	b.n	8009310 <sample_course_run+0x248>

				case 2:
					//----サンプルコース1　超信地----
					half_sectionA();
 80091e8:	f7fc fb86 	bl	80058f8 <half_sectionA>
					half_sectionD();
 80091ec:	f7fc fbc0 	bl	8005970 <half_sectionD>
					rotate_L90();
 80091f0:	f7fc fe76 	bl	8005ee0 <rotate_L90>
					half_sectionA();
 80091f4:	f7fc fb80 	bl	80058f8 <half_sectionA>
					half_sectionD();
 80091f8:	f7fc fbba 	bl	8005970 <half_sectionD>
					rotate_L90();
 80091fc:	f7fc fe70 	bl	8005ee0 <rotate_L90>
					half_sectionA();
 8009200:	f7fc fb7a 	bl	80058f8 <half_sectionA>
					half_sectionD();
 8009204:	f7fc fbb4 	bl	8005970 <half_sectionD>
					break;
 8009208:	e082      	b.n	8009310 <sample_course_run+0x248>

				case 3:
					//---サンプルコース2　スラローム----
					half_sectionA();
 800920a:	f7fc fb75 	bl	80058f8 <half_sectionA>
					slalom_R90();
 800920e:	f7fd f81b 	bl	8006248 <slalom_R90>
					slalom_R90();
 8009212:	f7fd f819 	bl	8006248 <slalom_R90>
					half_sectionD();
 8009216:	f7fc fbab 	bl	8005970 <half_sectionD>
					break;
 800921a:	e079      	b.n	8009310 <sample_course_run+0x248>
					goal_y = GOAL_Y;
*/					break;

				case 5:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800921c:	4841      	ldr	r0, [pc, #260]	; (8009324 <sample_course_run+0x25c>)
 800921e:	f006 fd9b 	bl	800fd58 <puts>

					MF.FLAG.SCND = 0;
 8009222:	4a41      	ldr	r2, [pc, #260]	; (8009328 <sample_course_run+0x260>)
 8009224:	8813      	ldrh	r3, [r2, #0]
 8009226:	f36f 1345 	bfc	r3, #5, #1
 800922a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800922c:	4a3e      	ldr	r2, [pc, #248]	; (8009328 <sample_course_run+0x260>)
 800922e:	8813      	ldrh	r3, [r2, #0]
 8009230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009234:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009236:	4a3c      	ldr	r2, [pc, #240]	; (8009328 <sample_course_run+0x260>)
 8009238:	8813      	ldrh	r3, [r2, #0]
 800923a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800923e:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8009240:	4b3a      	ldr	r3, [pc, #232]	; (800932c <sample_course_run+0x264>)
 8009242:	2200      	movs	r2, #0
 8009244:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009246:	4b3a      	ldr	r3, [pc, #232]	; (8009330 <sample_course_run+0x268>)
 8009248:	f241 3288 	movw	r2, #5000	; 0x1388
 800924c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800924e:	4b39      	ldr	r3, [pc, #228]	; (8009334 <sample_course_run+0x26c>)
 8009250:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009254:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 8009256:	4b38      	ldr	r3, [pc, #224]	; (8009338 <sample_course_run+0x270>)
 8009258:	2209      	movs	r2, #9
 800925a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800925c:	4b37      	ldr	r3, [pc, #220]	; (800933c <sample_course_run+0x274>)
 800925e:	2206      	movs	r2, #6
 8009260:	701a      	strb	r2, [r3, #0]

					get_base();
 8009262:	f005 fedf 	bl	800f024 <get_base>

					searchC();
 8009266:	f003 f9d5 	bl	800c614 <searchC>
					HAL_Delay(2000);
 800926a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800926e:	f7f7 fed5 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009272:	4b32      	ldr	r3, [pc, #200]	; (800933c <sample_course_run+0x274>)
 8009274:	2200      	movs	r2, #0
 8009276:	701a      	strb	r2, [r3, #0]
 8009278:	4b30      	ldr	r3, [pc, #192]	; (800933c <sample_course_run+0x274>)
 800927a:	781a      	ldrb	r2, [r3, #0]
 800927c:	4b2e      	ldr	r3, [pc, #184]	; (8009338 <sample_course_run+0x270>)
 800927e:	701a      	strb	r2, [r3, #0]
					searchE();
 8009280:	f003 fbea 	bl	800ca58 <searchE>

					searchC();
 8009284:	f003 f9c6 	bl	800c614 <searchC>
					goal_x = GOAL_X;
 8009288:	4b2b      	ldr	r3, [pc, #172]	; (8009338 <sample_course_run+0x270>)
 800928a:	2209      	movs	r2, #9
 800928c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800928e:	4b2b      	ldr	r3, [pc, #172]	; (800933c <sample_course_run+0x274>)
 8009290:	2206      	movs	r2, #6
 8009292:	701a      	strb	r2, [r3, #0]

					break;
 8009294:	e03c      	b.n	8009310 <sample_course_run+0x248>

				case 6:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 8009296:	4823      	ldr	r0, [pc, #140]	; (8009324 <sample_course_run+0x25c>)
 8009298:	f006 fd5e 	bl	800fd58 <puts>

					MF.FLAG.SCND = 0;
 800929c:	4a22      	ldr	r2, [pc, #136]	; (8009328 <sample_course_run+0x260>)
 800929e:	8813      	ldrh	r3, [r2, #0]
 80092a0:	f36f 1345 	bfc	r3, #5, #1
 80092a4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80092a6:	4a20      	ldr	r2, [pc, #128]	; (8009328 <sample_course_run+0x260>)
 80092a8:	8813      	ldrh	r3, [r2, #0]
 80092aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092ae:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80092b0:	4a1d      	ldr	r2, [pc, #116]	; (8009328 <sample_course_run+0x260>)
 80092b2:	8813      	ldrh	r3, [r2, #0]
 80092b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80092b8:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 80092ba:	4b1c      	ldr	r3, [pc, #112]	; (800932c <sample_course_run+0x264>)
 80092bc:	2200      	movs	r2, #0
 80092be:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 80092c0:	4b1b      	ldr	r3, [pc, #108]	; (8009330 <sample_course_run+0x268>)
 80092c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80092c6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 80092c8:	4b1a      	ldr	r3, [pc, #104]	; (8009334 <sample_course_run+0x26c>)
 80092ca:	f44f 7248 	mov.w	r2, #800	; 0x320
 80092ce:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 80092d0:	4b19      	ldr	r3, [pc, #100]	; (8009338 <sample_course_run+0x270>)
 80092d2:	2207      	movs	r2, #7
 80092d4:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80092d6:	4b19      	ldr	r3, [pc, #100]	; (800933c <sample_course_run+0x274>)
 80092d8:	2207      	movs	r2, #7
 80092da:	701a      	strb	r2, [r3, #0]

					get_base();
 80092dc:	f005 fea2 	bl	800f024 <get_base>

					searchC();
 80092e0:	f003 f998 	bl	800c614 <searchC>
					HAL_Delay(2000);
 80092e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80092e8:	f7f7 fe98 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80092ec:	4b13      	ldr	r3, [pc, #76]	; (800933c <sample_course_run+0x274>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	701a      	strb	r2, [r3, #0]
 80092f2:	4b12      	ldr	r3, [pc, #72]	; (800933c <sample_course_run+0x274>)
 80092f4:	781a      	ldrb	r2, [r3, #0]
 80092f6:	4b10      	ldr	r3, [pc, #64]	; (8009338 <sample_course_run+0x270>)
 80092f8:	701a      	strb	r2, [r3, #0]
					searchE();
 80092fa:	f003 fbad 	bl	800ca58 <searchE>

					searchC();
 80092fe:	f003 f989 	bl	800c614 <searchC>
					goal_x = 7;
 8009302:	4b0d      	ldr	r3, [pc, #52]	; (8009338 <sample_course_run+0x270>)
 8009304:	2207      	movs	r2, #7
 8009306:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009308:	4b0c      	ldr	r3, [pc, #48]	; (800933c <sample_course_run+0x274>)
 800930a:	2207      	movs	r2, #7
 800930c:	701a      	strb	r2, [r3, #0]

					break;
 800930e:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009310:	e6e3      	b.n	80090da <sample_course_run+0x12>
 8009312:	bf00      	nop
 8009314:	080112ac 	.word	0x080112ac
 8009318:	20000b2c 	.word	0x20000b2c
 800931c:	08010ec4 	.word	0x08010ec4
 8009320:	40020000 	.word	0x40020000
 8009324:	080112cc 	.word	0x080112cc
 8009328:	20000fac 	.word	0x20000fac
 800932c:	2000160c 	.word	0x2000160c
 8009330:	2000048c 	.word	0x2000048c
 8009334:	20000fc0 	.word	0x20000fc0
 8009338:	20000bf1 	.word	0x20000bf1
 800933c:	20000b8c 	.word	0x20000b8c

08009340 <perfect_slalom>:
//perfect_slalom
// 本番用スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_slalom(void){
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0

	int mode = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	607b      	str	r3, [r7, #4]
	printf("Perfect Slalom, Mode : %d\n", mode);
 800934a:	6879      	ldr	r1, [r7, #4]
 800934c:	48b0      	ldr	r0, [pc, #704]	; (8009610 <perfect_slalom+0x2d0>)
 800934e:	f006 fc8f 	bl	800fc70 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	b2db      	uxtb	r3, r3
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	b2d8      	uxtb	r0, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	b2db      	uxtb	r3, r3
 8009360:	f003 0302 	and.w	r3, r3, #2
 8009364:	b2d9      	uxtb	r1, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	b2db      	uxtb	r3, r3
 800936a:	f003 0304 	and.w	r3, r3, #4
 800936e:	b2db      	uxtb	r3, r3
 8009370:	461a      	mov	r2, r3
 8009372:	f005 feaf 	bl	800f0d4 <led_write>
		  if(dist_r >= 20){
 8009376:	4ba7      	ldr	r3, [pc, #668]	; (8009614 <perfect_slalom+0x2d4>)
 8009378:	edd3 7a00 	vldr	s15, [r3]
 800937c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009388:	db0f      	blt.n	80093aa <perfect_slalom+0x6a>
			  mode++;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	3301      	adds	r3, #1
 800938e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8009390:	4ba0      	ldr	r3, [pc, #640]	; (8009614 <perfect_slalom+0x2d4>)
 8009392:	f04f 0200 	mov.w	r2, #0
 8009396:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b07      	cmp	r3, #7
 800939c:	dd01      	ble.n	80093a2 <perfect_slalom+0x62>
				  mode = 0;
 800939e:	2300      	movs	r3, #0
 80093a0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80093a2:	6879      	ldr	r1, [r7, #4]
 80093a4:	489c      	ldr	r0, [pc, #624]	; (8009618 <perfect_slalom+0x2d8>)
 80093a6:	f006 fc63 	bl	800fc70 <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(dist_r <= -20){
 80093aa:	4b9a      	ldr	r3, [pc, #616]	; (8009614 <perfect_slalom+0x2d4>)
 80093ac:	edd3 7a00 	vldr	s15, [r3]
 80093b0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80093b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093bc:	d80f      	bhi.n	80093de <perfect_slalom+0x9e>
			  mode--;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	3b01      	subs	r3, #1
 80093c2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80093c4:	4b93      	ldr	r3, [pc, #588]	; (8009614 <perfect_slalom+0x2d4>)
 80093c6:	f04f 0200 	mov.w	r2, #0
 80093ca:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	da01      	bge.n	80093d6 <perfect_slalom+0x96>
				  mode = 7;
 80093d2:	2307      	movs	r3, #7
 80093d4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80093d6:	6879      	ldr	r1, [r7, #4]
 80093d8:	488f      	ldr	r0, [pc, #572]	; (8009618 <perfect_slalom+0x2d8>)
 80093da:	f006 fc49 	bl	800fc70 <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80093de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80093e2:	488e      	ldr	r0, [pc, #568]	; (800961c <perfect_slalom+0x2dc>)
 80093e4:	f7f8 ff76 	bl	80022d4 <HAL_GPIO_ReadPin>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1b1      	bne.n	8009352 <perfect_slalom+0x12>
			  HAL_Delay(50);
 80093ee:	2032      	movs	r0, #50	; 0x32
 80093f0:	f7f7 fe14 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80093f4:	bf00      	nop
 80093f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80093fa:	4888      	ldr	r0, [pc, #544]	; (800961c <perfect_slalom+0x2dc>)
 80093fc:	f7f8 ff6a 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d0f7      	beq.n	80093f6 <perfect_slalom+0xb6>
/*			  for(int i=0; i<m_ok; i++){
	  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
	  		  }
*/
			  drive_ready();
 8009406:	f7fb fc35 	bl	8004c74 <drive_ready>
/*	  		  for(int i=0; i<m_start; i++){
	  			  buzzer(mario_start[i][0], mario_start[i][1]);
	  			  full_led_write(RED);
	  		  }
*/
			  switch(mode){
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b07      	cmp	r3, #7
 800940e:	d8a0      	bhi.n	8009352 <perfect_slalom+0x12>
 8009410:	a201      	add	r2, pc, #4	; (adr r2, 8009418 <perfect_slalom+0xd8>)
 8009412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009416:	bf00      	nop
 8009418:	08009353 	.word	0x08009353
 800941c:	08009439 	.word	0x08009439
 8009420:	080094ab 	.word	0x080094ab
 8009424:	08009527 	.word	0x08009527
 8009428:	08009593 	.word	0x08009593
 800942c:	08009649 	.word	0x08009649
 8009430:	080096c5 	.word	0x080096c5
 8009434:	08009741 	.word	0x08009741
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 8009438:	4879      	ldr	r0, [pc, #484]	; (8009620 <perfect_slalom+0x2e0>)
 800943a:	f006 fc8d 	bl	800fd58 <puts>
					MF.FLAG.SCND = 0;
 800943e:	4a79      	ldr	r2, [pc, #484]	; (8009624 <perfect_slalom+0x2e4>)
 8009440:	8813      	ldrh	r3, [r2, #0]
 8009442:	f36f 1345 	bfc	r3, #5, #1
 8009446:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009448:	4a76      	ldr	r2, [pc, #472]	; (8009624 <perfect_slalom+0x2e4>)
 800944a:	8813      	ldrh	r3, [r2, #0]
 800944c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009450:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009452:	4b75      	ldr	r3, [pc, #468]	; (8009628 <perfect_slalom+0x2e8>)
 8009454:	2201      	movs	r2, #1
 8009456:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8009458:	4b74      	ldr	r3, [pc, #464]	; (800962c <perfect_slalom+0x2ec>)
 800945a:	2200      	movs	r2, #0
 800945c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800945e:	4b74      	ldr	r3, [pc, #464]	; (8009630 <perfect_slalom+0x2f0>)
 8009460:	f241 3288 	movw	r2, #5000	; 0x1388
 8009464:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8009466:	4b73      	ldr	r3, [pc, #460]	; (8009634 <perfect_slalom+0x2f4>)
 8009468:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800946c:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 800946e:	4b72      	ldr	r3, [pc, #456]	; (8009638 <perfect_slalom+0x2f8>)
 8009470:	2207      	movs	r2, #7
 8009472:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009474:	4b71      	ldr	r3, [pc, #452]	; (800963c <perfect_slalom+0x2fc>)
 8009476:	2207      	movs	r2, #7
 8009478:	701a      	strb	r2, [r3, #0]

					get_base();
 800947a:	f005 fdd3 	bl	800f024 <get_base>

					searchC();
 800947e:	f003 f8c9 	bl	800c614 <searchC>
					HAL_Delay(2000);
 8009482:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009486:	f7f7 fdc9 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800948a:	4b6c      	ldr	r3, [pc, #432]	; (800963c <perfect_slalom+0x2fc>)
 800948c:	2200      	movs	r2, #0
 800948e:	701a      	strb	r2, [r3, #0]
 8009490:	4b6a      	ldr	r3, [pc, #424]	; (800963c <perfect_slalom+0x2fc>)
 8009492:	781a      	ldrb	r2, [r3, #0]
 8009494:	4b68      	ldr	r3, [pc, #416]	; (8009638 <perfect_slalom+0x2f8>)
 8009496:	701a      	strb	r2, [r3, #0]
					searchC();
 8009498:	f003 f8bc 	bl	800c614 <searchC>

					goal_x = 7;
 800949c:	4b66      	ldr	r3, [pc, #408]	; (8009638 <perfect_slalom+0x2f8>)
 800949e:	2207      	movs	r2, #7
 80094a0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80094a2:	4b66      	ldr	r3, [pc, #408]	; (800963c <perfect_slalom+0x2fc>)
 80094a4:	2207      	movs	r2, #7
 80094a6:	701a      	strb	r2, [r3, #0]
					break;
 80094a8:	e14d      	b.n	8009746 <perfect_slalom+0x406>

				case 2:
					//----a二次走行スラローム+既知区間加速走行 speed1----
					printf("First Run. (Continuous)\n");
 80094aa:	4865      	ldr	r0, [pc, #404]	; (8009640 <perfect_slalom+0x300>)
 80094ac:	f006 fc54 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 80094b0:	4a5c      	ldr	r2, [pc, #368]	; (8009624 <perfect_slalom+0x2e4>)
 80094b2:	8813      	ldrh	r3, [r2, #0]
 80094b4:	f043 0320 	orr.w	r3, r3, #32
 80094b8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80094ba:	4a5a      	ldr	r2, [pc, #360]	; (8009624 <perfect_slalom+0x2e4>)
 80094bc:	8813      	ldrh	r3, [r2, #0]
 80094be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094c2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80094c4:	4a57      	ldr	r2, [pc, #348]	; (8009624 <perfect_slalom+0x2e4>)
 80094c6:	8813      	ldrh	r3, [r2, #0]
 80094c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80094cc:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 80094ce:	4b56      	ldr	r3, [pc, #344]	; (8009628 <perfect_slalom+0x2e8>)
 80094d0:	2201      	movs	r2, #1
 80094d2:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 80094d4:	4b55      	ldr	r3, [pc, #340]	; (800962c <perfect_slalom+0x2ec>)
 80094d6:	2200      	movs	r2, #0
 80094d8:	701a      	strb	r2, [r3, #0]

					accel_hs = 5000;
 80094da:	4b55      	ldr	r3, [pc, #340]	; (8009630 <perfect_slalom+0x2f0>)
 80094dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80094e0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 80094e2:	4b54      	ldr	r3, [pc, #336]	; (8009634 <perfect_slalom+0x2f4>)
 80094e4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80094e8:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 80094ea:	4b53      	ldr	r3, [pc, #332]	; (8009638 <perfect_slalom+0x2f8>)
 80094ec:	2207      	movs	r2, #7
 80094ee:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80094f0:	4b52      	ldr	r3, [pc, #328]	; (800963c <perfect_slalom+0x2fc>)
 80094f2:	2207      	movs	r2, #7
 80094f4:	701a      	strb	r2, [r3, #0]

					get_base();
 80094f6:	f005 fd95 	bl	800f024 <get_base>

					searchD();
 80094fa:	f003 f9ab 	bl	800c854 <searchD>
					HAL_Delay(2000);
 80094fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009502:	f7f7 fd8b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009506:	4b4d      	ldr	r3, [pc, #308]	; (800963c <perfect_slalom+0x2fc>)
 8009508:	2200      	movs	r2, #0
 800950a:	701a      	strb	r2, [r3, #0]
 800950c:	4b4b      	ldr	r3, [pc, #300]	; (800963c <perfect_slalom+0x2fc>)
 800950e:	781a      	ldrb	r2, [r3, #0]
 8009510:	4b49      	ldr	r3, [pc, #292]	; (8009638 <perfect_slalom+0x2f8>)
 8009512:	701a      	strb	r2, [r3, #0]
					searchD();
 8009514:	f003 f99e 	bl	800c854 <searchD>

					goal_x = 7;
 8009518:	4b47      	ldr	r3, [pc, #284]	; (8009638 <perfect_slalom+0x2f8>)
 800951a:	2207      	movs	r2, #7
 800951c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800951e:	4b47      	ldr	r3, [pc, #284]	; (800963c <perfect_slalom+0x2fc>)
 8009520:	2207      	movs	r2, #7
 8009522:	701a      	strb	r2, [r3, #0]
					break;
 8009524:	e10f      	b.n	8009746 <perfect_slalom+0x406>

				case 3:
					//----a二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 8009526:	4847      	ldr	r0, [pc, #284]	; (8009644 <perfect_slalom+0x304>)
 8009528:	f006 fc16 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 800952c:	4a3d      	ldr	r2, [pc, #244]	; (8009624 <perfect_slalom+0x2e4>)
 800952e:	8813      	ldrh	r3, [r2, #0]
 8009530:	f043 0320 	orr.w	r3, r3, #32
 8009534:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 8009536:	4a3b      	ldr	r2, [pc, #236]	; (8009624 <perfect_slalom+0x2e4>)
 8009538:	8813      	ldrh	r3, [r2, #0]
 800953a:	f36f 2349 	bfc	r3, #9, #1
 800953e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009540:	4a38      	ldr	r2, [pc, #224]	; (8009624 <perfect_slalom+0x2e4>)
 8009542:	8813      	ldrh	r3, [r2, #0]
 8009544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009548:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800954a:	4b37      	ldr	r3, [pc, #220]	; (8009628 <perfect_slalom+0x2e8>)
 800954c:	2203      	movs	r2, #3
 800954e:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8009550:	4b36      	ldr	r3, [pc, #216]	; (800962c <perfect_slalom+0x2ec>)
 8009552:	2200      	movs	r2, #0
 8009554:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 8009556:	4b38      	ldr	r3, [pc, #224]	; (8009638 <perfect_slalom+0x2f8>)
 8009558:	2207      	movs	r2, #7
 800955a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800955c:	4b37      	ldr	r3, [pc, #220]	; (800963c <perfect_slalom+0x2fc>)
 800955e:	2207      	movs	r2, #7
 8009560:	701a      	strb	r2, [r3, #0]

					get_base();
 8009562:	f005 fd5f 	bl	800f024 <get_base>

//					searchC2();
					searchC();
 8009566:	f003 f855 	bl	800c614 <searchC>
					HAL_Delay(2000);
 800956a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800956e:	f7f7 fd55 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009572:	4b32      	ldr	r3, [pc, #200]	; (800963c <perfect_slalom+0x2fc>)
 8009574:	2200      	movs	r2, #0
 8009576:	701a      	strb	r2, [r3, #0]
 8009578:	4b30      	ldr	r3, [pc, #192]	; (800963c <perfect_slalom+0x2fc>)
 800957a:	781a      	ldrb	r2, [r3, #0]
 800957c:	4b2e      	ldr	r3, [pc, #184]	; (8009638 <perfect_slalom+0x2f8>)
 800957e:	701a      	strb	r2, [r3, #0]
//					searchC2();
					searchC();
 8009580:	f003 f848 	bl	800c614 <searchC>
					goal_x = 7;
 8009584:	4b2c      	ldr	r3, [pc, #176]	; (8009638 <perfect_slalom+0x2f8>)
 8009586:	2207      	movs	r2, #7
 8009588:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800958a:	4b2c      	ldr	r3, [pc, #176]	; (800963c <perfect_slalom+0x2fc>)
 800958c:	2207      	movs	r2, #7
 800958e:	701a      	strb	r2, [r3, #0]
					break;
 8009590:	e0d9      	b.n	8009746 <perfect_slalom+0x406>

				case 4:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 8009592:	482c      	ldr	r0, [pc, #176]	; (8009644 <perfect_slalom+0x304>)
 8009594:	f006 fbe0 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 8009598:	4a22      	ldr	r2, [pc, #136]	; (8009624 <perfect_slalom+0x2e4>)
 800959a:	8813      	ldrh	r3, [r2, #0]
 800959c:	f043 0320 	orr.w	r3, r3, #32
 80095a0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80095a2:	4a20      	ldr	r2, [pc, #128]	; (8009624 <perfect_slalom+0x2e4>)
 80095a4:	8813      	ldrh	r3, [r2, #0]
 80095a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80095aa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80095ac:	4a1d      	ldr	r2, [pc, #116]	; (8009624 <perfect_slalom+0x2e4>)
 80095ae:	8813      	ldrh	r3, [r2, #0]
 80095b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80095b4:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 80095b6:	4b1c      	ldr	r3, [pc, #112]	; (8009628 <perfect_slalom+0x2e8>)
 80095b8:	2203      	movs	r2, #3
 80095ba:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 80095bc:	4b1b      	ldr	r3, [pc, #108]	; (800962c <perfect_slalom+0x2ec>)
 80095be:	2200      	movs	r2, #0
 80095c0:	701a      	strb	r2, [r3, #0]

					accel_hs = 3000;
 80095c2:	4b1b      	ldr	r3, [pc, #108]	; (8009630 <perfect_slalom+0x2f0>)
 80095c4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80095c8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 80095ca:	4b1a      	ldr	r3, [pc, #104]	; (8009634 <perfect_slalom+0x2f4>)
 80095cc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80095d0:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 80095d2:	4b19      	ldr	r3, [pc, #100]	; (8009638 <perfect_slalom+0x2f8>)
 80095d4:	2207      	movs	r2, #7
 80095d6:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80095d8:	4b18      	ldr	r3, [pc, #96]	; (800963c <perfect_slalom+0x2fc>)
 80095da:	2207      	movs	r2, #7
 80095dc:	701a      	strb	r2, [r3, #0]

					get_base();
 80095de:	f005 fd21 	bl	800f024 <get_base>

//					searchD2();
					searchD();
 80095e2:	f003 f937 	bl	800c854 <searchD>
					HAL_Delay(2000);
 80095e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80095ea:	f7f7 fd17 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80095ee:	4b13      	ldr	r3, [pc, #76]	; (800963c <perfect_slalom+0x2fc>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	701a      	strb	r2, [r3, #0]
 80095f4:	4b11      	ldr	r3, [pc, #68]	; (800963c <perfect_slalom+0x2fc>)
 80095f6:	781a      	ldrb	r2, [r3, #0]
 80095f8:	4b0f      	ldr	r3, [pc, #60]	; (8009638 <perfect_slalom+0x2f8>)
 80095fa:	701a      	strb	r2, [r3, #0]
//					searchD2();
					searchD();
 80095fc:	f003 f92a 	bl	800c854 <searchD>

					goal_x = 7;
 8009600:	4b0d      	ldr	r3, [pc, #52]	; (8009638 <perfect_slalom+0x2f8>)
 8009602:	2207      	movs	r2, #7
 8009604:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009606:	4b0d      	ldr	r3, [pc, #52]	; (800963c <perfect_slalom+0x2fc>)
 8009608:	2207      	movs	r2, #7
 800960a:	701a      	strb	r2, [r3, #0]
					break;
 800960c:	e09b      	b.n	8009746 <perfect_slalom+0x406>
 800960e:	bf00      	nop
 8009610:	08011300 	.word	0x08011300
 8009614:	20000b2c 	.word	0x20000b2c
 8009618:	08010ec4 	.word	0x08010ec4
 800961c:	40020000 	.word	0x40020000
 8009620:	08011204 	.word	0x08011204
 8009624:	20000fac 	.word	0x20000fac
 8009628:	2000048e 	.word	0x2000048e
 800962c:	2000160c 	.word	0x2000160c
 8009630:	2000048c 	.word	0x2000048c
 8009634:	20000fc0 	.word	0x20000fc0
 8009638:	20000bf1 	.word	0x20000bf1
 800963c:	20000b8c 	.word	0x20000b8c
 8009640:	08011210 	.word	0x08011210
 8009644:	0801125c 	.word	0x0801125c

				case 5:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 8009648:	483f      	ldr	r0, [pc, #252]	; (8009748 <perfect_slalom+0x408>)
 800964a:	f006 fb85 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 800964e:	4a3f      	ldr	r2, [pc, #252]	; (800974c <perfect_slalom+0x40c>)
 8009650:	8813      	ldrh	r3, [r2, #0]
 8009652:	f043 0320 	orr.w	r3, r3, #32
 8009656:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009658:	4a3c      	ldr	r2, [pc, #240]	; (800974c <perfect_slalom+0x40c>)
 800965a:	8813      	ldrh	r3, [r2, #0]
 800965c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009660:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009662:	4a3a      	ldr	r2, [pc, #232]	; (800974c <perfect_slalom+0x40c>)
 8009664:	8813      	ldrh	r3, [r2, #0]
 8009666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800966a:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 800966c:	4b38      	ldr	r3, [pc, #224]	; (8009750 <perfect_slalom+0x410>)
 800966e:	2203      	movs	r2, #3
 8009670:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8009672:	4b38      	ldr	r3, [pc, #224]	; (8009754 <perfect_slalom+0x414>)
 8009674:	2200      	movs	r2, #0
 8009676:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 8009678:	4b37      	ldr	r3, [pc, #220]	; (8009758 <perfect_slalom+0x418>)
 800967a:	f242 7210 	movw	r2, #10000	; 0x2710
 800967e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 8009680:	4b36      	ldr	r3, [pc, #216]	; (800975c <perfect_slalom+0x41c>)
 8009682:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009686:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 8009688:	4b35      	ldr	r3, [pc, #212]	; (8009760 <perfect_slalom+0x420>)
 800968a:	2207      	movs	r2, #7
 800968c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800968e:	4b35      	ldr	r3, [pc, #212]	; (8009764 <perfect_slalom+0x424>)
 8009690:	2207      	movs	r2, #7
 8009692:	701a      	strb	r2, [r3, #0]

					get_base();
 8009694:	f005 fcc6 	bl	800f024 <get_base>

//					searchD2();
					searchD();
 8009698:	f003 f8dc 	bl	800c854 <searchD>
					HAL_Delay(2000);
 800969c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80096a0:	f7f7 fcbc 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80096a4:	4b2f      	ldr	r3, [pc, #188]	; (8009764 <perfect_slalom+0x424>)
 80096a6:	2200      	movs	r2, #0
 80096a8:	701a      	strb	r2, [r3, #0]
 80096aa:	4b2e      	ldr	r3, [pc, #184]	; (8009764 <perfect_slalom+0x424>)
 80096ac:	781a      	ldrb	r2, [r3, #0]
 80096ae:	4b2c      	ldr	r3, [pc, #176]	; (8009760 <perfect_slalom+0x420>)
 80096b0:	701a      	strb	r2, [r3, #0]
//					searchD2();
					searchD();
 80096b2:	f003 f8cf 	bl	800c854 <searchD>

					goal_x = 7;
 80096b6:	4b2a      	ldr	r3, [pc, #168]	; (8009760 <perfect_slalom+0x420>)
 80096b8:	2207      	movs	r2, #7
 80096ba:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80096bc:	4b29      	ldr	r3, [pc, #164]	; (8009764 <perfect_slalom+0x424>)
 80096be:	2207      	movs	r2, #7
 80096c0:	701a      	strb	r2, [r3, #0]
					break;
 80096c2:	e040      	b.n	8009746 <perfect_slalom+0x406>

				case 6:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 80096c4:	4820      	ldr	r0, [pc, #128]	; (8009748 <perfect_slalom+0x408>)
 80096c6:	f006 fb47 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 80096ca:	4a20      	ldr	r2, [pc, #128]	; (800974c <perfect_slalom+0x40c>)
 80096cc:	8813      	ldrh	r3, [r2, #0]
 80096ce:	f043 0320 	orr.w	r3, r3, #32
 80096d2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80096d4:	4a1d      	ldr	r2, [pc, #116]	; (800974c <perfect_slalom+0x40c>)
 80096d6:	8813      	ldrh	r3, [r2, #0]
 80096d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80096dc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80096de:	4a1b      	ldr	r2, [pc, #108]	; (800974c <perfect_slalom+0x40c>)
 80096e0:	8813      	ldrh	r3, [r2, #0]
 80096e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80096e6:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 80096e8:	4b19      	ldr	r3, [pc, #100]	; (8009750 <perfect_slalom+0x410>)
 80096ea:	2203      	movs	r2, #3
 80096ec:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 80096ee:	4b19      	ldr	r3, [pc, #100]	; (8009754 <perfect_slalom+0x414>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 80096f4:	4b18      	ldr	r3, [pc, #96]	; (8009758 <perfect_slalom+0x418>)
 80096f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80096fa:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 80096fc:	4b17      	ldr	r3, [pc, #92]	; (800975c <perfect_slalom+0x41c>)
 80096fe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009702:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 8009704:	4b16      	ldr	r3, [pc, #88]	; (8009760 <perfect_slalom+0x420>)
 8009706:	2207      	movs	r2, #7
 8009708:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800970a:	4b16      	ldr	r3, [pc, #88]	; (8009764 <perfect_slalom+0x424>)
 800970c:	2207      	movs	r2, #7
 800970e:	701a      	strb	r2, [r3, #0]

					get_base();
 8009710:	f005 fc88 	bl	800f024 <get_base>

//					searchD2();
					searchD();
 8009714:	f003 f89e 	bl	800c854 <searchD>
					HAL_Delay(2000);
 8009718:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800971c:	f7f7 fc7e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009720:	4b10      	ldr	r3, [pc, #64]	; (8009764 <perfect_slalom+0x424>)
 8009722:	2200      	movs	r2, #0
 8009724:	701a      	strb	r2, [r3, #0]
 8009726:	4b0f      	ldr	r3, [pc, #60]	; (8009764 <perfect_slalom+0x424>)
 8009728:	781a      	ldrb	r2, [r3, #0]
 800972a:	4b0d      	ldr	r3, [pc, #52]	; (8009760 <perfect_slalom+0x420>)
 800972c:	701a      	strb	r2, [r3, #0]
//					searchD2();
					searchD();
 800972e:	f003 f891 	bl	800c854 <searchD>

					goal_x = 7;
 8009732:	4b0b      	ldr	r3, [pc, #44]	; (8009760 <perfect_slalom+0x420>)
 8009734:	2207      	movs	r2, #7
 8009736:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009738:	4b0a      	ldr	r3, [pc, #40]	; (8009764 <perfect_slalom+0x424>)
 800973a:	2207      	movs	r2, #7
 800973c:	701a      	strb	r2, [r3, #0]
					break;
 800973e:	e002      	b.n	8009746 <perfect_slalom+0x406>

				case 7:
					perfect_pass();
 8009740:	f000 f812 	bl	8009768 <perfect_pass>
					break;
 8009744:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009746:	e604      	b.n	8009352 <perfect_slalom+0x12>
 8009748:	0801125c 	.word	0x0801125c
 800974c:	20000fac 	.word	0x20000fac
 8009750:	2000048e 	.word	0x2000048e
 8009754:	2000160c 	.word	0x2000160c
 8009758:	2000048c 	.word	0x2000048c
 800975c:	20000fc0 	.word	0x20000fc0
 8009760:	20000bf1 	.word	0x20000bf1
 8009764:	20000b8c 	.word	0x20000b8c

08009768 <perfect_pass>:
//perfect_pass
// a本番用pass圧縮走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_pass(void){
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0

	int mode = 0;
 800976e:	2300      	movs	r3, #0
 8009770:	60fb      	str	r3, [r7, #12]
	printf("Perfect Pass Press, Mode : %d\n", mode);
 8009772:	68f9      	ldr	r1, [r7, #12]
 8009774:	4898      	ldr	r0, [pc, #608]	; (80099d8 <perfect_pass+0x270>)
 8009776:	f006 fa7b 	bl	800fc70 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	b2db      	uxtb	r3, r3
 800977e:	f003 0301 	and.w	r3, r3, #1
 8009782:	b2d8      	uxtb	r0, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	b2db      	uxtb	r3, r3
 8009788:	f003 0302 	and.w	r3, r3, #2
 800978c:	b2d9      	uxtb	r1, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	b2db      	uxtb	r3, r3
 8009792:	f003 0304 	and.w	r3, r3, #4
 8009796:	b2db      	uxtb	r3, r3
 8009798:	461a      	mov	r2, r3
 800979a:	f005 fc9b 	bl	800f0d4 <led_write>
		  if(dist_r >= 20){
 800979e:	4b8f      	ldr	r3, [pc, #572]	; (80099dc <perfect_pass+0x274>)
 80097a0:	edd3 7a00 	vldr	s15, [r3]
 80097a4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80097a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b0:	db0f      	blt.n	80097d2 <perfect_pass+0x6a>
			  mode++;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3301      	adds	r3, #1
 80097b6:	60fb      	str	r3, [r7, #12]
			  dist_r = 0;
 80097b8:	4b88      	ldr	r3, [pc, #544]	; (80099dc <perfect_pass+0x274>)
 80097ba:	f04f 0200 	mov.w	r2, #0
 80097be:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b07      	cmp	r3, #7
 80097c4:	dd01      	ble.n	80097ca <perfect_pass+0x62>
				  mode = 0;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60fb      	str	r3, [r7, #12]
			  }
			  printf("Mode : %d\n", mode);
 80097ca:	68f9      	ldr	r1, [r7, #12]
 80097cc:	4884      	ldr	r0, [pc, #528]	; (80099e0 <perfect_pass+0x278>)
 80097ce:	f006 fa4f 	bl	800fc70 <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(dist_r <= -20){
 80097d2:	4b82      	ldr	r3, [pc, #520]	; (80099dc <perfect_pass+0x274>)
 80097d4:	edd3 7a00 	vldr	s15, [r3]
 80097d8:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80097dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097e4:	d80f      	bhi.n	8009806 <perfect_pass+0x9e>
			  mode--;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	3b01      	subs	r3, #1
 80097ea:	60fb      	str	r3, [r7, #12]
			  dist_r = 0;
 80097ec:	4b7b      	ldr	r3, [pc, #492]	; (80099dc <perfect_pass+0x274>)
 80097ee:	f04f 0200 	mov.w	r2, #0
 80097f2:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	da01      	bge.n	80097fe <perfect_pass+0x96>
				  mode = 7;
 80097fa:	2307      	movs	r3, #7
 80097fc:	60fb      	str	r3, [r7, #12]
			  }
			  printf("Mode : %d\n", mode);
 80097fe:	68f9      	ldr	r1, [r7, #12]
 8009800:	4877      	ldr	r0, [pc, #476]	; (80099e0 <perfect_pass+0x278>)
 8009802:	f006 fa35 	bl	800fc70 <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8009806:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800980a:	4876      	ldr	r0, [pc, #472]	; (80099e4 <perfect_pass+0x27c>)
 800980c:	f7f8 fd62 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1b1      	bne.n	800977a <perfect_pass+0x12>
			  HAL_Delay(50);
 8009816:	2032      	movs	r0, #50	; 0x32
 8009818:	f7f7 fc00 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800981c:	bf00      	nop
 800981e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009822:	4870      	ldr	r0, [pc, #448]	; (80099e4 <perfect_pass+0x27c>)
 8009824:	f7f8 fd56 	bl	80022d4 <HAL_GPIO_ReadPin>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d0f7      	beq.n	800981e <perfect_pass+0xb6>
/*			  for(int i=0; i<m_ok; i++){
	  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
	  		  }
*/
			  drive_ready();
 800982e:	f7fb fa21 	bl	8004c74 <drive_ready>
/*	  		  for(int i=0; i<m_start; i++){
	  			  buzzer(mario_start[i][0], mario_start[i][1]);
	  			  full_led_write(RED);
	  		  }
*/
			  switch(mode){
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2b07      	cmp	r3, #7
 8009836:	d8a0      	bhi.n	800977a <perfect_pass+0x12>
 8009838:	a201      	add	r2, pc, #4	; (adr r2, 8009840 <perfect_pass+0xd8>)
 800983a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983e:	bf00      	nop
 8009840:	0800977b 	.word	0x0800977b
 8009844:	08009861 	.word	0x08009861
 8009848:	080098d3 	.word	0x080098d3
 800984c:	08009955 	.word	0x08009955
 8009850:	08009a15 	.word	0x08009a15
 8009854:	0800977b 	.word	0x0800977b
 8009858:	08009a97 	.word	0x08009a97
 800985c:	08009d39 	.word	0x08009d39
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 8009860:	4861      	ldr	r0, [pc, #388]	; (80099e8 <perfect_pass+0x280>)
 8009862:	f006 fa79 	bl	800fd58 <puts>
					MF.FLAG.SCND = 0;
 8009866:	4a61      	ldr	r2, [pc, #388]	; (80099ec <perfect_pass+0x284>)
 8009868:	8813      	ldrh	r3, [r2, #0]
 800986a:	f36f 1345 	bfc	r3, #5, #1
 800986e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009870:	4a5e      	ldr	r2, [pc, #376]	; (80099ec <perfect_pass+0x284>)
 8009872:	8813      	ldrh	r3, [r2, #0]
 8009874:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009878:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 800987a:	4b5d      	ldr	r3, [pc, #372]	; (80099f0 <perfect_pass+0x288>)
 800987c:	2201      	movs	r2, #1
 800987e:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8009880:	4b5c      	ldr	r3, [pc, #368]	; (80099f4 <perfect_pass+0x28c>)
 8009882:	2200      	movs	r2, #0
 8009884:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009886:	4b5c      	ldr	r3, [pc, #368]	; (80099f8 <perfect_pass+0x290>)
 8009888:	f241 3288 	movw	r2, #5000	; 0x1388
 800988c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800988e:	4b5b      	ldr	r3, [pc, #364]	; (80099fc <perfect_pass+0x294>)
 8009890:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009894:	801a      	strh	r2, [r3, #0]

					goal_x = 7;
 8009896:	4b5a      	ldr	r3, [pc, #360]	; (8009a00 <perfect_pass+0x298>)
 8009898:	2207      	movs	r2, #7
 800989a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800989c:	4b59      	ldr	r3, [pc, #356]	; (8009a04 <perfect_pass+0x29c>)
 800989e:	2207      	movs	r2, #7
 80098a0:	701a      	strb	r2, [r3, #0]

					get_base();
 80098a2:	f005 fbbf 	bl	800f024 <get_base>

					searchC();
 80098a6:	f002 feb5 	bl	800c614 <searchC>
					HAL_Delay(2000);
 80098aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80098ae:	f7f7 fbb5 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80098b2:	4b54      	ldr	r3, [pc, #336]	; (8009a04 <perfect_pass+0x29c>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	701a      	strb	r2, [r3, #0]
 80098b8:	4b52      	ldr	r3, [pc, #328]	; (8009a04 <perfect_pass+0x29c>)
 80098ba:	781a      	ldrb	r2, [r3, #0]
 80098bc:	4b50      	ldr	r3, [pc, #320]	; (8009a00 <perfect_pass+0x298>)
 80098be:	701a      	strb	r2, [r3, #0]
					searchC();
 80098c0:	f002 fea8 	bl	800c614 <searchC>

					goal_x = 7;
 80098c4:	4b4e      	ldr	r3, [pc, #312]	; (8009a00 <perfect_pass+0x298>)
 80098c6:	2207      	movs	r2, #7
 80098c8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80098ca:	4b4e      	ldr	r3, [pc, #312]	; (8009a04 <perfect_pass+0x29c>)
 80098cc:	2207      	movs	r2, #7
 80098ce:	701a      	strb	r2, [r3, #0]
					break;
 80098d0:	e366      	b.n	8009fa0 <perfect_pass+0x838>

				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 80098d2:	484d      	ldr	r0, [pc, #308]	; (8009a08 <perfect_pass+0x2a0>)
 80098d4:	f006 fa40 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 80098d8:	4a44      	ldr	r2, [pc, #272]	; (80099ec <perfect_pass+0x284>)
 80098da:	8813      	ldrh	r3, [r2, #0]
 80098dc:	f043 0320 	orr.w	r3, r3, #32
 80098e0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80098e2:	4a42      	ldr	r2, [pc, #264]	; (80099ec <perfect_pass+0x284>)
 80098e4:	8813      	ldrh	r3, [r2, #0]
 80098e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80098ea:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 80098ec:	4a3f      	ldr	r2, [pc, #252]	; (80099ec <perfect_pass+0x284>)
 80098ee:	8813      	ldrh	r3, [r2, #0]
 80098f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098f4:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 80098f6:	4b3e      	ldr	r3, [pc, #248]	; (80099f0 <perfect_pass+0x288>)
 80098f8:	2201      	movs	r2, #1
 80098fa:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 80098fc:	4b3d      	ldr	r3, [pc, #244]	; (80099f4 <perfect_pass+0x28c>)
 80098fe:	2200      	movs	r2, #0
 8009900:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009902:	4b3d      	ldr	r3, [pc, #244]	; (80099f8 <perfect_pass+0x290>)
 8009904:	f241 3288 	movw	r2, #5000	; 0x1388
 8009908:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800990a:	4b3c      	ldr	r3, [pc, #240]	; (80099fc <perfect_pass+0x294>)
 800990c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009910:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8009912:	4b3e      	ldr	r3, [pc, #248]	; (8009a0c <perfect_pass+0x2a4>)
 8009914:	2203      	movs	r2, #3
 8009916:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 8009918:	4b39      	ldr	r3, [pc, #228]	; (8009a00 <perfect_pass+0x298>)
 800991a:	2207      	movs	r2, #7
 800991c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800991e:	4b39      	ldr	r3, [pc, #228]	; (8009a04 <perfect_pass+0x29c>)
 8009920:	2207      	movs	r2, #7
 8009922:	701a      	strb	r2, [r3, #0]

					get_base();
 8009924:	f005 fb7e 	bl	800f024 <get_base>

					searchF3();
 8009928:	f003 f93e 	bl	800cba8 <searchF3>
					HAL_Delay(2000);
 800992c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009930:	f7f7 fb74 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009934:	4b33      	ldr	r3, [pc, #204]	; (8009a04 <perfect_pass+0x29c>)
 8009936:	2200      	movs	r2, #0
 8009938:	701a      	strb	r2, [r3, #0]
 800993a:	4b32      	ldr	r3, [pc, #200]	; (8009a04 <perfect_pass+0x29c>)
 800993c:	781a      	ldrb	r2, [r3, #0]
 800993e:	4b30      	ldr	r3, [pc, #192]	; (8009a00 <perfect_pass+0x298>)
 8009940:	701a      	strb	r2, [r3, #0]
					searchF3();
 8009942:	f003 f931 	bl	800cba8 <searchF3>

					goal_x = 7;
 8009946:	4b2e      	ldr	r3, [pc, #184]	; (8009a00 <perfect_pass+0x298>)
 8009948:	2207      	movs	r2, #7
 800994a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800994c:	4b2d      	ldr	r3, [pc, #180]	; (8009a04 <perfect_pass+0x29c>)
 800994e:	2207      	movs	r2, #7
 8009950:	701a      	strb	r2, [r3, #0]
					break;
 8009952:	e325      	b.n	8009fa0 <perfect_pass+0x838>
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 8009954:	482e      	ldr	r0, [pc, #184]	; (8009a10 <perfect_pass+0x2a8>)
 8009956:	f006 f9ff 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 800995a:	4a24      	ldr	r2, [pc, #144]	; (80099ec <perfect_pass+0x284>)
 800995c:	8813      	ldrh	r3, [r2, #0]
 800995e:	f043 0320 	orr.w	r3, r3, #32
 8009962:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009964:	4a21      	ldr	r2, [pc, #132]	; (80099ec <perfect_pass+0x284>)
 8009966:	8813      	ldrh	r3, [r2, #0]
 8009968:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800996c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800996e:	4a1f      	ldr	r2, [pc, #124]	; (80099ec <perfect_pass+0x284>)
 8009970:	8813      	ldrh	r3, [r2, #0]
 8009972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009976:	8013      	strh	r3, [r2, #0]
					run_mode = HIGH;
 8009978:	4b1d      	ldr	r3, [pc, #116]	; (80099f0 <perfect_pass+0x288>)
 800997a:	2203      	movs	r2, #3
 800997c:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 800997e:	4b1d      	ldr	r3, [pc, #116]	; (80099f4 <perfect_pass+0x28c>)
 8009980:	2200      	movs	r2, #0
 8009982:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009984:	4b1c      	ldr	r3, [pc, #112]	; (80099f8 <perfect_pass+0x290>)
 8009986:	f241 3288 	movw	r2, #5000	; 0x1388
 800998a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800998c:	4b1b      	ldr	r3, [pc, #108]	; (80099fc <perfect_pass+0x294>)
 800998e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009992:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 8009994:	4b1d      	ldr	r3, [pc, #116]	; (8009a0c <perfect_pass+0x2a4>)
 8009996:	2203      	movs	r2, #3
 8009998:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800999a:	4b19      	ldr	r3, [pc, #100]	; (8009a00 <perfect_pass+0x298>)
 800999c:	2207      	movs	r2, #7
 800999e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80099a0:	4b18      	ldr	r3, [pc, #96]	; (8009a04 <perfect_pass+0x29c>)
 80099a2:	2207      	movs	r2, #7
 80099a4:	701a      	strb	r2, [r3, #0]

					get_base();
 80099a6:	f005 fb3d 	bl	800f024 <get_base>

//					searchF32();
					searchF3();
 80099aa:	f003 f8fd 	bl	800cba8 <searchF3>
					HAL_Delay(2000);
 80099ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80099b2:	f7f7 fb33 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 80099b6:	4b13      	ldr	r3, [pc, #76]	; (8009a04 <perfect_pass+0x29c>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	701a      	strb	r2, [r3, #0]
 80099bc:	4b11      	ldr	r3, [pc, #68]	; (8009a04 <perfect_pass+0x29c>)
 80099be:	781a      	ldrb	r2, [r3, #0]
 80099c0:	4b0f      	ldr	r3, [pc, #60]	; (8009a00 <perfect_pass+0x298>)
 80099c2:	701a      	strb	r2, [r3, #0]
//					searchF32();
					searchF3();
 80099c4:	f003 f8f0 	bl	800cba8 <searchF3>

					goal_x = 7;
 80099c8:	4b0d      	ldr	r3, [pc, #52]	; (8009a00 <perfect_pass+0x298>)
 80099ca:	2207      	movs	r2, #7
 80099cc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80099ce:	4b0d      	ldr	r3, [pc, #52]	; (8009a04 <perfect_pass+0x29c>)
 80099d0:	2207      	movs	r2, #7
 80099d2:	701a      	strb	r2, [r3, #0]
					break;
 80099d4:	e2e4      	b.n	8009fa0 <perfect_pass+0x838>
 80099d6:	bf00      	nop
 80099d8:	0801131c 	.word	0x0801131c
 80099dc:	20000b2c 	.word	0x20000b2c
 80099e0:	08010ec4 	.word	0x08010ec4
 80099e4:	40020000 	.word	0x40020000
 80099e8:	08011204 	.word	0x08011204
 80099ec:	20000fac 	.word	0x20000fac
 80099f0:	2000048e 	.word	0x2000048e
 80099f4:	2000160c 	.word	0x2000160c
 80099f8:	2000048c 	.word	0x2000048c
 80099fc:	20000fc0 	.word	0x20000fc0
 8009a00:	20000bf1 	.word	0x20000bf1
 8009a04:	20000b8c 	.word	0x20000b8c
 8009a08:	080111bc 	.word	0x080111bc
 8009a0c:	2000048f 	.word	0x2000048f
 8009a10:	080111cc 	.word	0x080111cc
				case 4:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 8009a14:	48af      	ldr	r0, [pc, #700]	; (8009cd4 <perfect_pass+0x56c>)
 8009a16:	f006 f99f 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 8009a1a:	4aaf      	ldr	r2, [pc, #700]	; (8009cd8 <perfect_pass+0x570>)
 8009a1c:	8813      	ldrh	r3, [r2, #0]
 8009a1e:	f043 0320 	orr.w	r3, r3, #32
 8009a22:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009a24:	4aac      	ldr	r2, [pc, #688]	; (8009cd8 <perfect_pass+0x570>)
 8009a26:	8813      	ldrh	r3, [r2, #0]
 8009a28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a2c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009a2e:	4aaa      	ldr	r2, [pc, #680]	; (8009cd8 <perfect_pass+0x570>)
 8009a30:	8813      	ldrh	r3, [r2, #0]
 8009a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a36:	8013      	strh	r3, [r2, #0]
					run_mode = LOW;
 8009a38:	4ba8      	ldr	r3, [pc, #672]	; (8009cdc <perfect_pass+0x574>)
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	701a      	strb	r2, [r3, #0]
					start_flag = 0;
 8009a3e:	4ba8      	ldr	r3, [pc, #672]	; (8009ce0 <perfect_pass+0x578>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8009a44:	4ba7      	ldr	r3, [pc, #668]	; (8009ce4 <perfect_pass+0x57c>)
 8009a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a4a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8009a4c:	4ba6      	ldr	r3, [pc, #664]	; (8009ce8 <perfect_pass+0x580>)
 8009a4e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009a52:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 8009a54:	4ba5      	ldr	r3, [pc, #660]	; (8009cec <perfect_pass+0x584>)
 8009a56:	2204      	movs	r2, #4
 8009a58:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 8009a5a:	4ba5      	ldr	r3, [pc, #660]	; (8009cf0 <perfect_pass+0x588>)
 8009a5c:	2207      	movs	r2, #7
 8009a5e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009a60:	4ba4      	ldr	r3, [pc, #656]	; (8009cf4 <perfect_pass+0x58c>)
 8009a62:	2207      	movs	r2, #7
 8009a64:	701a      	strb	r2, [r3, #0]

					get_base();
 8009a66:	f005 fadd 	bl	800f024 <get_base>

					searchF4();
 8009a6a:	f003 f961 	bl	800cd30 <searchF4>
					HAL_Delay(2000);
 8009a6e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009a72:	f7f7 fad3 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009a76:	4b9f      	ldr	r3, [pc, #636]	; (8009cf4 <perfect_pass+0x58c>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	701a      	strb	r2, [r3, #0]
 8009a7c:	4b9d      	ldr	r3, [pc, #628]	; (8009cf4 <perfect_pass+0x58c>)
 8009a7e:	781a      	ldrb	r2, [r3, #0]
 8009a80:	4b9b      	ldr	r3, [pc, #620]	; (8009cf0 <perfect_pass+0x588>)
 8009a82:	701a      	strb	r2, [r3, #0]
					searchF4();
 8009a84:	f003 f954 	bl	800cd30 <searchF4>

					goal_x = 7;
 8009a88:	4b99      	ldr	r3, [pc, #612]	; (8009cf0 <perfect_pass+0x588>)
 8009a8a:	2207      	movs	r2, #7
 8009a8c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009a8e:	4b99      	ldr	r3, [pc, #612]	; (8009cf4 <perfect_pass+0x58c>)
 8009a90:	2207      	movs	r2, #7
 8009a92:	701a      	strb	r2, [r3, #0]
					break;
 8009a94:	e284      	b.n	8009fa0 <perfect_pass+0x838>

				case 5:
					break;
				case 6:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 8009a96:	4898      	ldr	r0, [pc, #608]	; (8009cf8 <perfect_pass+0x590>)
 8009a98:	f006 f95e 	bl	800fd58 <puts>
					MF.FLAG.SCND = 0;
 8009a9c:	4a8e      	ldr	r2, [pc, #568]	; (8009cd8 <perfect_pass+0x570>)
 8009a9e:	8813      	ldrh	r3, [r2, #0]
 8009aa0:	f36f 1345 	bfc	r3, #5, #1
 8009aa4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 8009aa6:	4a8c      	ldr	r2, [pc, #560]	; (8009cd8 <perfect_pass+0x570>)
 8009aa8:	8813      	ldrh	r3, [r2, #0]
 8009aaa:	f36f 2349 	bfc	r3, #9, #1
 8009aae:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8009ab0:	4b8b      	ldr	r3, [pc, #556]	; (8009ce0 <perfect_pass+0x578>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 8009ab6:	4b8e      	ldr	r3, [pc, #568]	; (8009cf0 <perfect_pass+0x588>)
 8009ab8:	2209      	movs	r2, #9
 8009aba:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009abc:	4b8d      	ldr	r3, [pc, #564]	; (8009cf4 <perfect_pass+0x58c>)
 8009abe:	2206      	movs	r2, #6
 8009ac0:	701a      	strb	r2, [r3, #0]

					get_base();
 8009ac2:	f005 faaf 	bl	800f024 <get_base>

					searchC();
 8009ac6:	f002 fda5 	bl	800c614 <searchC>
					HAL_Delay(2000);
 8009aca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009ace:	f7f7 faa5 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009ad2:	4b88      	ldr	r3, [pc, #544]	; (8009cf4 <perfect_pass+0x58c>)
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	701a      	strb	r2, [r3, #0]
 8009ad8:	4b86      	ldr	r3, [pc, #536]	; (8009cf4 <perfect_pass+0x58c>)
 8009ada:	781a      	ldrb	r2, [r3, #0]
 8009adc:	4b84      	ldr	r3, [pc, #528]	; (8009cf0 <perfect_pass+0x588>)
 8009ade:	701a      	strb	r2, [r3, #0]
					searchC();
 8009ae0:	f002 fd98 	bl	800c614 <searchC>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8009ae4:	2064      	movs	r0, #100	; 0x64
 8009ae6:	f7fb fbff 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 8009aea:	4b84      	ldr	r3, [pc, #528]	; (8009cfc <perfect_pass+0x594>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a84      	ldr	r2, [pc, #528]	; (8009d00 <perfect_pass+0x598>)
 8009af0:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 8009af2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009af6:	f7f7 fa91 	bl	800101c <HAL_Delay>



					//----a二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 8009afa:	4882      	ldr	r0, [pc, #520]	; (8009d04 <perfect_pass+0x59c>)
 8009afc:	f006 f92c 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 8009b00:	4a75      	ldr	r2, [pc, #468]	; (8009cd8 <perfect_pass+0x570>)
 8009b02:	8813      	ldrh	r3, [r2, #0]
 8009b04:	f043 0320 	orr.w	r3, r3, #32
 8009b08:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009b0a:	4a73      	ldr	r2, [pc, #460]	; (8009cd8 <perfect_pass+0x570>)
 8009b0c:	8813      	ldrh	r3, [r2, #0]
 8009b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b12:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009b14:	4a70      	ldr	r2, [pc, #448]	; (8009cd8 <perfect_pass+0x570>)
 8009b16:	8813      	ldrh	r3, [r2, #0]
 8009b18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009b1c:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8009b1e:	4b70      	ldr	r3, [pc, #448]	; (8009ce0 <perfect_pass+0x578>)
 8009b20:	2200      	movs	r2, #0
 8009b22:	701a      	strb	r2, [r3, #0]

					accel_hs = 5000;
 8009b24:	4b6f      	ldr	r3, [pc, #444]	; (8009ce4 <perfect_pass+0x57c>)
 8009b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b2a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8009b2c:	4b6e      	ldr	r3, [pc, #440]	; (8009ce8 <perfect_pass+0x580>)
 8009b2e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009b32:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8009b34:	4b6e      	ldr	r3, [pc, #440]	; (8009cf0 <perfect_pass+0x588>)
 8009b36:	2209      	movs	r2, #9
 8009b38:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009b3a:	4b6e      	ldr	r3, [pc, #440]	; (8009cf4 <perfect_pass+0x58c>)
 8009b3c:	2206      	movs	r2, #6
 8009b3e:	701a      	strb	r2, [r3, #0]

//					get_base();

					searchD();
 8009b40:	f002 fe88 	bl	800c854 <searchD>
					HAL_Delay(2000);
 8009b44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009b48:	f7f7 fa68 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009b4c:	4b69      	ldr	r3, [pc, #420]	; (8009cf4 <perfect_pass+0x58c>)
 8009b4e:	2200      	movs	r2, #0
 8009b50:	701a      	strb	r2, [r3, #0]
 8009b52:	4b68      	ldr	r3, [pc, #416]	; (8009cf4 <perfect_pass+0x58c>)
 8009b54:	781a      	ldrb	r2, [r3, #0]
 8009b56:	4b66      	ldr	r3, [pc, #408]	; (8009cf0 <perfect_pass+0x588>)
 8009b58:	701a      	strb	r2, [r3, #0]
					searchD();
 8009b5a:	f002 fe7b 	bl	800c854 <searchD>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8009b5e:	2064      	movs	r0, #100	; 0x64
 8009b60:	f7fb fbc2 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 8009b64:	4b65      	ldr	r3, [pc, #404]	; (8009cfc <perfect_pass+0x594>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a65      	ldr	r2, [pc, #404]	; (8009d00 <perfect_pass+0x598>)
 8009b6a:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 8009b6c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009b70:	f7f7 fa54 	bl	800101c <HAL_Delay>
					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
					degree_z = target_degree_z;
					HAL_Delay(2000);

*/					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 8009b74:	4864      	ldr	r0, [pc, #400]	; (8009d08 <perfect_pass+0x5a0>)
 8009b76:	f006 f8ef 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 8009b7a:	4a57      	ldr	r2, [pc, #348]	; (8009cd8 <perfect_pass+0x570>)
 8009b7c:	8813      	ldrh	r3, [r2, #0]
 8009b7e:	f043 0320 	orr.w	r3, r3, #32
 8009b82:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009b84:	4a54      	ldr	r2, [pc, #336]	; (8009cd8 <perfect_pass+0x570>)
 8009b86:	8813      	ldrh	r3, [r2, #0]
 8009b88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b8c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009b8e:	4a52      	ldr	r2, [pc, #328]	; (8009cd8 <perfect_pass+0x570>)
 8009b90:	8813      	ldrh	r3, [r2, #0]
 8009b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009b96:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8009b98:	4b51      	ldr	r3, [pc, #324]	; (8009ce0 <perfect_pass+0x578>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 8009b9e:	4b51      	ldr	r3, [pc, #324]	; (8009ce4 <perfect_pass+0x57c>)
 8009ba0:	f242 7210 	movw	r2, #10000	; 0x2710
 8009ba4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 8009ba6:	4b50      	ldr	r3, [pc, #320]	; (8009ce8 <perfect_pass+0x580>)
 8009ba8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009bac:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8009bae:	4b50      	ldr	r3, [pc, #320]	; (8009cf0 <perfect_pass+0x588>)
 8009bb0:	2209      	movs	r2, #9
 8009bb2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009bb4:	4b4f      	ldr	r3, [pc, #316]	; (8009cf4 <perfect_pass+0x58c>)
 8009bb6:	2206      	movs	r2, #6
 8009bb8:	701a      	strb	r2, [r3, #0]

//					get_base();

//					searchD2();
					searchD();
 8009bba:	f002 fe4b 	bl	800c854 <searchD>
					HAL_Delay(2000);
 8009bbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009bc2:	f7f7 fa2b 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009bc6:	4b4b      	ldr	r3, [pc, #300]	; (8009cf4 <perfect_pass+0x58c>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	701a      	strb	r2, [r3, #0]
 8009bcc:	4b49      	ldr	r3, [pc, #292]	; (8009cf4 <perfect_pass+0x58c>)
 8009bce:	781a      	ldrb	r2, [r3, #0]
 8009bd0:	4b47      	ldr	r3, [pc, #284]	; (8009cf0 <perfect_pass+0x588>)
 8009bd2:	701a      	strb	r2, [r3, #0]
//					searchD2();
					searchD();
 8009bd4:	f002 fe3e 	bl	800c854 <searchD>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8009bd8:	2064      	movs	r0, #100	; 0x64
 8009bda:	f7fb fb85 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 8009bde:	4b47      	ldr	r3, [pc, #284]	; (8009cfc <perfect_pass+0x594>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a47      	ldr	r2, [pc, #284]	; (8009d00 <perfect_pass+0x598>)
 8009be4:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 8009be6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009bea:	f7f7 fa17 	bl	800101c <HAL_Delay>



					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed2----
					printf("Second Run. (Slalom)\n");
 8009bee:	4846      	ldr	r0, [pc, #280]	; (8009d08 <perfect_pass+0x5a0>)
 8009bf0:	f006 f8b2 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 8009bf4:	4a38      	ldr	r2, [pc, #224]	; (8009cd8 <perfect_pass+0x570>)
 8009bf6:	8813      	ldrh	r3, [r2, #0]
 8009bf8:	f043 0320 	orr.w	r3, r3, #32
 8009bfc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009bfe:	4a36      	ldr	r2, [pc, #216]	; (8009cd8 <perfect_pass+0x570>)
 8009c00:	8813      	ldrh	r3, [r2, #0]
 8009c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c06:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009c08:	4a33      	ldr	r2, [pc, #204]	; (8009cd8 <perfect_pass+0x570>)
 8009c0a:	8813      	ldrh	r3, [r2, #0]
 8009c0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c10:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8009c12:	4b33      	ldr	r3, [pc, #204]	; (8009ce0 <perfect_pass+0x578>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 8009c18:	4b32      	ldr	r3, [pc, #200]	; (8009ce4 <perfect_pass+0x57c>)
 8009c1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8009c1e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 8009c20:	4b31      	ldr	r3, [pc, #196]	; (8009ce8 <perfect_pass+0x580>)
 8009c22:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009c26:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8009c28:	4b31      	ldr	r3, [pc, #196]	; (8009cf0 <perfect_pass+0x588>)
 8009c2a:	2209      	movs	r2, #9
 8009c2c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009c2e:	4b31      	ldr	r3, [pc, #196]	; (8009cf4 <perfect_pass+0x58c>)
 8009c30:	2206      	movs	r2, #6
 8009c32:	701a      	strb	r2, [r3, #0]

//					get_base();

//					searchD2();
					searchD();
 8009c34:	f002 fe0e 	bl	800c854 <searchD>
					HAL_Delay(2000);
 8009c38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009c3c:	f7f7 f9ee 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009c40:	4b2c      	ldr	r3, [pc, #176]	; (8009cf4 <perfect_pass+0x58c>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	701a      	strb	r2, [r3, #0]
 8009c46:	4b2b      	ldr	r3, [pc, #172]	; (8009cf4 <perfect_pass+0x58c>)
 8009c48:	781a      	ldrb	r2, [r3, #0]
 8009c4a:	4b29      	ldr	r3, [pc, #164]	; (8009cf0 <perfect_pass+0x588>)
 8009c4c:	701a      	strb	r2, [r3, #0]
//					searchD2();
					searchD();
 8009c4e:	f002 fe01 	bl	800c854 <searchD>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8009c52:	2064      	movs	r0, #100	; 0x64
 8009c54:	f7fb fb48 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 8009c58:	4b28      	ldr	r3, [pc, #160]	; (8009cfc <perfect_pass+0x594>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a28      	ldr	r2, [pc, #160]	; (8009d00 <perfect_pass+0x598>)
 8009c5e:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 8009c60:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009c64:	f7f7 f9da 	bl	800101c <HAL_Delay>



					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed3----
					printf("Second Run. (Slalom)\n");
 8009c68:	4827      	ldr	r0, [pc, #156]	; (8009d08 <perfect_pass+0x5a0>)
 8009c6a:	f006 f875 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 8009c6e:	4a1a      	ldr	r2, [pc, #104]	; (8009cd8 <perfect_pass+0x570>)
 8009c70:	8813      	ldrh	r3, [r2, #0]
 8009c72:	f043 0320 	orr.w	r3, r3, #32
 8009c76:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009c78:	4a17      	ldr	r2, [pc, #92]	; (8009cd8 <perfect_pass+0x570>)
 8009c7a:	8813      	ldrh	r3, [r2, #0]
 8009c7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c80:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009c82:	4a15      	ldr	r2, [pc, #84]	; (8009cd8 <perfect_pass+0x570>)
 8009c84:	8813      	ldrh	r3, [r2, #0]
 8009c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c8a:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8009c8c:	4b14      	ldr	r3, [pc, #80]	; (8009ce0 <perfect_pass+0x578>)
 8009c8e:	2200      	movs	r2, #0
 8009c90:	701a      	strb	r2, [r3, #0]

					accel_hs = 20000;
 8009c92:	4b14      	ldr	r3, [pc, #80]	; (8009ce4 <perfect_pass+0x57c>)
 8009c94:	f644 6220 	movw	r2, #20000	; 0x4e20
 8009c98:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2500;
 8009c9a:	4b13      	ldr	r3, [pc, #76]	; (8009ce8 <perfect_pass+0x580>)
 8009c9c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009ca0:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8009ca2:	4b13      	ldr	r3, [pc, #76]	; (8009cf0 <perfect_pass+0x588>)
 8009ca4:	2209      	movs	r2, #9
 8009ca6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8009ca8:	4b12      	ldr	r3, [pc, #72]	; (8009cf4 <perfect_pass+0x58c>)
 8009caa:	2206      	movs	r2, #6
 8009cac:	701a      	strb	r2, [r3, #0]

//					get_base();

//					searchD2();
					searchD();
 8009cae:	f002 fdd1 	bl	800c854 <searchD>
					HAL_Delay(2000);
 8009cb2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009cb6:	f7f7 f9b1 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009cba:	4b0e      	ldr	r3, [pc, #56]	; (8009cf4 <perfect_pass+0x58c>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	701a      	strb	r2, [r3, #0]
 8009cc0:	4b0c      	ldr	r3, [pc, #48]	; (8009cf4 <perfect_pass+0x58c>)
 8009cc2:	781a      	ldrb	r2, [r3, #0]
 8009cc4:	4b0a      	ldr	r3, [pc, #40]	; (8009cf0 <perfect_pass+0x588>)
 8009cc6:	701a      	strb	r2, [r3, #0]
//					searchD2();
					searchD();
 8009cc8:	f002 fdc4 	bl	800c854 <searchD>


					for(int i=0; i<m_goal; i++){
 8009ccc:	2300      	movs	r3, #0
 8009cce:	60bb      	str	r3, [r7, #8]
 8009cd0:	e02e      	b.n	8009d30 <perfect_pass+0x5c8>
 8009cd2:	bf00      	nop
 8009cd4:	080111dc 	.word	0x080111dc
 8009cd8:	20000fac 	.word	0x20000fac
 8009cdc:	2000048e 	.word	0x2000048e
 8009ce0:	2000160c 	.word	0x2000160c
 8009ce4:	2000048c 	.word	0x2000048c
 8009ce8:	20000fc0 	.word	0x20000fc0
 8009cec:	2000048f 	.word	0x2000048f
 8009cf0:	20000bf1 	.word	0x20000bf1
 8009cf4:	20000b8c 	.word	0x20000b8c
 8009cf8:	08011204 	.word	0x08011204
 8009cfc:	20000c40 	.word	0x20000c40
 8009d00:	20000b9c 	.word	0x20000b9c
 8009d04:	08011228 	.word	0x08011228
 8009d08:	0801125c 	.word	0x0801125c
					  buzzer(mario_goal[i][0], mario_goal[i][1]);
 8009d0c:	4aa5      	ldr	r2, [pc, #660]	; (8009fa4 <perfect_pass+0x83c>)
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8009d14:	4aa3      	ldr	r2, [pc, #652]	; (8009fa4 <perfect_pass+0x83c>)
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	00db      	lsls	r3, r3, #3
 8009d1a:	4413      	add	r3, r2
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	f002 fae0 	bl	800c2e4 <buzzer>
					  full_led_write(RED);
 8009d24:	2001      	movs	r0, #1
 8009d26:	f005 fa0f 	bl	800f148 <full_led_write>
					for(int i=0; i<m_goal; i++){
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	60bb      	str	r3, [r7, #8]
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	2b0e      	cmp	r3, #14
 8009d34:	ddea      	ble.n	8009d0c <perfect_pass+0x5a4>
					searchF4();

					goal_x = 7;
					goal_y = 7;

*/					break;
 8009d36:	e133      	b.n	8009fa0 <perfect_pass+0x838>

					break;
				case 7:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 8009d38:	489b      	ldr	r0, [pc, #620]	; (8009fa8 <perfect_pass+0x840>)
 8009d3a:	f006 f80d 	bl	800fd58 <puts>
					MF.FLAG.SCND = 0;
 8009d3e:	4a9b      	ldr	r2, [pc, #620]	; (8009fac <perfect_pass+0x844>)
 8009d40:	8813      	ldrh	r3, [r2, #0]
 8009d42:	f36f 1345 	bfc	r3, #5, #1
 8009d46:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 8009d48:	4a98      	ldr	r2, [pc, #608]	; (8009fac <perfect_pass+0x844>)
 8009d4a:	8813      	ldrh	r3, [r2, #0]
 8009d4c:	f36f 2349 	bfc	r3, #9, #1
 8009d50:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8009d52:	4b97      	ldr	r3, [pc, #604]	; (8009fb0 <perfect_pass+0x848>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 8009d58:	4b96      	ldr	r3, [pc, #600]	; (8009fb4 <perfect_pass+0x84c>)
 8009d5a:	2207      	movs	r2, #7
 8009d5c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009d5e:	4b96      	ldr	r3, [pc, #600]	; (8009fb8 <perfect_pass+0x850>)
 8009d60:	2207      	movs	r2, #7
 8009d62:	701a      	strb	r2, [r3, #0]

					get_base();
 8009d64:	f005 f95e 	bl	800f024 <get_base>

					searchC();
 8009d68:	f002 fc54 	bl	800c614 <searchC>
					HAL_Delay(2000);
 8009d6c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009d70:	f7f7 f954 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009d74:	4b90      	ldr	r3, [pc, #576]	; (8009fb8 <perfect_pass+0x850>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	701a      	strb	r2, [r3, #0]
 8009d7a:	4b8f      	ldr	r3, [pc, #572]	; (8009fb8 <perfect_pass+0x850>)
 8009d7c:	781a      	ldrb	r2, [r3, #0]
 8009d7e:	4b8d      	ldr	r3, [pc, #564]	; (8009fb4 <perfect_pass+0x84c>)
 8009d80:	701a      	strb	r2, [r3, #0]
					searchC();
 8009d82:	f002 fc47 	bl	800c614 <searchC>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8009d86:	2064      	movs	r0, #100	; 0x64
 8009d88:	f7fb faae 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 8009d8c:	4b8b      	ldr	r3, [pc, #556]	; (8009fbc <perfect_pass+0x854>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a8b      	ldr	r2, [pc, #556]	; (8009fc0 <perfect_pass+0x858>)
 8009d92:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 8009d94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009d98:	f7f7 f940 	bl	800101c <HAL_Delay>



					//----a二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 8009d9c:	4889      	ldr	r0, [pc, #548]	; (8009fc4 <perfect_pass+0x85c>)
 8009d9e:	f005 ffdb 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 8009da2:	4a82      	ldr	r2, [pc, #520]	; (8009fac <perfect_pass+0x844>)
 8009da4:	8813      	ldrh	r3, [r2, #0]
 8009da6:	f043 0320 	orr.w	r3, r3, #32
 8009daa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009dac:	4a7f      	ldr	r2, [pc, #508]	; (8009fac <perfect_pass+0x844>)
 8009dae:	8813      	ldrh	r3, [r2, #0]
 8009db0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009db4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009db6:	4a7d      	ldr	r2, [pc, #500]	; (8009fac <perfect_pass+0x844>)
 8009db8:	8813      	ldrh	r3, [r2, #0]
 8009dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009dbe:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8009dc0:	4b7b      	ldr	r3, [pc, #492]	; (8009fb0 <perfect_pass+0x848>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	701a      	strb	r2, [r3, #0]

					accel_hs = 5000;
 8009dc6:	4b80      	ldr	r3, [pc, #512]	; (8009fc8 <perfect_pass+0x860>)
 8009dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dcc:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 8009dce:	4b7f      	ldr	r3, [pc, #508]	; (8009fcc <perfect_pass+0x864>)
 8009dd0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8009dd4:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 8009dd6:	4b77      	ldr	r3, [pc, #476]	; (8009fb4 <perfect_pass+0x84c>)
 8009dd8:	2207      	movs	r2, #7
 8009dda:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009ddc:	4b76      	ldr	r3, [pc, #472]	; (8009fb8 <perfect_pass+0x850>)
 8009dde:	2207      	movs	r2, #7
 8009de0:	701a      	strb	r2, [r3, #0]

//					get_base();

					searchD();
 8009de2:	f002 fd37 	bl	800c854 <searchD>
					HAL_Delay(2000);
 8009de6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009dea:	f7f7 f917 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009dee:	4b72      	ldr	r3, [pc, #456]	; (8009fb8 <perfect_pass+0x850>)
 8009df0:	2200      	movs	r2, #0
 8009df2:	701a      	strb	r2, [r3, #0]
 8009df4:	4b70      	ldr	r3, [pc, #448]	; (8009fb8 <perfect_pass+0x850>)
 8009df6:	781a      	ldrb	r2, [r3, #0]
 8009df8:	4b6e      	ldr	r3, [pc, #440]	; (8009fb4 <perfect_pass+0x84c>)
 8009dfa:	701a      	strb	r2, [r3, #0]
					searchD();
 8009dfc:	f002 fd2a 	bl	800c854 <searchD>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8009e00:	2064      	movs	r0, #100	; 0x64
 8009e02:	f7fb fa71 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 8009e06:	4b6d      	ldr	r3, [pc, #436]	; (8009fbc <perfect_pass+0x854>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a6d      	ldr	r2, [pc, #436]	; (8009fc0 <perfect_pass+0x858>)
 8009e0c:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 8009e0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009e12:	f7f7 f903 	bl	800101c <HAL_Delay>
					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
					degree_z = target_degree_z;
					HAL_Delay(2000);

*/					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 8009e16:	486e      	ldr	r0, [pc, #440]	; (8009fd0 <perfect_pass+0x868>)
 8009e18:	f005 ff9e 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 8009e1c:	4a63      	ldr	r2, [pc, #396]	; (8009fac <perfect_pass+0x844>)
 8009e1e:	8813      	ldrh	r3, [r2, #0]
 8009e20:	f043 0320 	orr.w	r3, r3, #32
 8009e24:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009e26:	4a61      	ldr	r2, [pc, #388]	; (8009fac <perfect_pass+0x844>)
 8009e28:	8813      	ldrh	r3, [r2, #0]
 8009e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e2e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009e30:	4a5e      	ldr	r2, [pc, #376]	; (8009fac <perfect_pass+0x844>)
 8009e32:	8813      	ldrh	r3, [r2, #0]
 8009e34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e38:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8009e3a:	4b5d      	ldr	r3, [pc, #372]	; (8009fb0 <perfect_pass+0x848>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 8009e40:	4b61      	ldr	r3, [pc, #388]	; (8009fc8 <perfect_pass+0x860>)
 8009e42:	f242 7210 	movw	r2, #10000	; 0x2710
 8009e46:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 8009e48:	4b60      	ldr	r3, [pc, #384]	; (8009fcc <perfect_pass+0x864>)
 8009e4a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009e4e:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 8009e50:	4b58      	ldr	r3, [pc, #352]	; (8009fb4 <perfect_pass+0x84c>)
 8009e52:	2207      	movs	r2, #7
 8009e54:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009e56:	4b58      	ldr	r3, [pc, #352]	; (8009fb8 <perfect_pass+0x850>)
 8009e58:	2207      	movs	r2, #7
 8009e5a:	701a      	strb	r2, [r3, #0]

//					get_base();

//					searchD2();
					searchD();
 8009e5c:	f002 fcfa 	bl	800c854 <searchD>
					HAL_Delay(2000);
 8009e60:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009e64:	f7f7 f8da 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009e68:	4b53      	ldr	r3, [pc, #332]	; (8009fb8 <perfect_pass+0x850>)
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	701a      	strb	r2, [r3, #0]
 8009e6e:	4b52      	ldr	r3, [pc, #328]	; (8009fb8 <perfect_pass+0x850>)
 8009e70:	781a      	ldrb	r2, [r3, #0]
 8009e72:	4b50      	ldr	r3, [pc, #320]	; (8009fb4 <perfect_pass+0x84c>)
 8009e74:	701a      	strb	r2, [r3, #0]
//					searchD2();
					searchD();
 8009e76:	f002 fced 	bl	800c854 <searchD>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8009e7a:	2064      	movs	r0, #100	; 0x64
 8009e7c:	f7fb fa34 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 8009e80:	4b4e      	ldr	r3, [pc, #312]	; (8009fbc <perfect_pass+0x854>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a4e      	ldr	r2, [pc, #312]	; (8009fc0 <perfect_pass+0x858>)
 8009e86:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 8009e88:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009e8c:	f7f7 f8c6 	bl	800101c <HAL_Delay>



					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed2----
					printf("Second Run. (Slalom)\n");
 8009e90:	484f      	ldr	r0, [pc, #316]	; (8009fd0 <perfect_pass+0x868>)
 8009e92:	f005 ff61 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 8009e96:	4a45      	ldr	r2, [pc, #276]	; (8009fac <perfect_pass+0x844>)
 8009e98:	8813      	ldrh	r3, [r2, #0]
 8009e9a:	f043 0320 	orr.w	r3, r3, #32
 8009e9e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009ea0:	4a42      	ldr	r2, [pc, #264]	; (8009fac <perfect_pass+0x844>)
 8009ea2:	8813      	ldrh	r3, [r2, #0]
 8009ea4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ea8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009eaa:	4a40      	ldr	r2, [pc, #256]	; (8009fac <perfect_pass+0x844>)
 8009eac:	8813      	ldrh	r3, [r2, #0]
 8009eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009eb2:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8009eb4:	4b3e      	ldr	r3, [pc, #248]	; (8009fb0 <perfect_pass+0x848>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 8009eba:	4b43      	ldr	r3, [pc, #268]	; (8009fc8 <perfect_pass+0x860>)
 8009ebc:	f242 7210 	movw	r2, #10000	; 0x2710
 8009ec0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 8009ec2:	4b42      	ldr	r3, [pc, #264]	; (8009fcc <perfect_pass+0x864>)
 8009ec4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009ec8:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 8009eca:	4b3a      	ldr	r3, [pc, #232]	; (8009fb4 <perfect_pass+0x84c>)
 8009ecc:	2207      	movs	r2, #7
 8009ece:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009ed0:	4b39      	ldr	r3, [pc, #228]	; (8009fb8 <perfect_pass+0x850>)
 8009ed2:	2207      	movs	r2, #7
 8009ed4:	701a      	strb	r2, [r3, #0]

//					get_base();

//					searchD2();
					searchD();
 8009ed6:	f002 fcbd 	bl	800c854 <searchD>
					HAL_Delay(2000);
 8009eda:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009ede:	f7f7 f89d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009ee2:	4b35      	ldr	r3, [pc, #212]	; (8009fb8 <perfect_pass+0x850>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	701a      	strb	r2, [r3, #0]
 8009ee8:	4b33      	ldr	r3, [pc, #204]	; (8009fb8 <perfect_pass+0x850>)
 8009eea:	781a      	ldrb	r2, [r3, #0]
 8009eec:	4b31      	ldr	r3, [pc, #196]	; (8009fb4 <perfect_pass+0x84c>)
 8009eee:	701a      	strb	r2, [r3, #0]
//					searchD2();
					searchD();
 8009ef0:	f002 fcb0 	bl	800c854 <searchD>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8009ef4:	2064      	movs	r0, #100	; 0x64
 8009ef6:	f7fb f9f7 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 8009efa:	4b30      	ldr	r3, [pc, #192]	; (8009fbc <perfect_pass+0x854>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a30      	ldr	r2, [pc, #192]	; (8009fc0 <perfect_pass+0x858>)
 8009f00:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 8009f02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009f06:	f7f7 f889 	bl	800101c <HAL_Delay>



					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed3----
					printf("Second Run. (Slalom)\n");
 8009f0a:	4831      	ldr	r0, [pc, #196]	; (8009fd0 <perfect_pass+0x868>)
 8009f0c:	f005 ff24 	bl	800fd58 <puts>
					MF.FLAG.SCND = 1;
 8009f10:	4a26      	ldr	r2, [pc, #152]	; (8009fac <perfect_pass+0x844>)
 8009f12:	8813      	ldrh	r3, [r2, #0]
 8009f14:	f043 0320 	orr.w	r3, r3, #32
 8009f18:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8009f1a:	4a24      	ldr	r2, [pc, #144]	; (8009fac <perfect_pass+0x844>)
 8009f1c:	8813      	ldrh	r3, [r2, #0]
 8009f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f22:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8009f24:	4a21      	ldr	r2, [pc, #132]	; (8009fac <perfect_pass+0x844>)
 8009f26:	8813      	ldrh	r3, [r2, #0]
 8009f28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009f2c:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8009f2e:	4b20      	ldr	r3, [pc, #128]	; (8009fb0 <perfect_pass+0x848>)
 8009f30:	2200      	movs	r2, #0
 8009f32:	701a      	strb	r2, [r3, #0]

					accel_hs = 20000;
 8009f34:	4b24      	ldr	r3, [pc, #144]	; (8009fc8 <perfect_pass+0x860>)
 8009f36:	f644 6220 	movw	r2, #20000	; 0x4e20
 8009f3a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2500;
 8009f3c:	4b23      	ldr	r3, [pc, #140]	; (8009fcc <perfect_pass+0x864>)
 8009f3e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009f42:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 8009f44:	4b1b      	ldr	r3, [pc, #108]	; (8009fb4 <perfect_pass+0x84c>)
 8009f46:	2207      	movs	r2, #7
 8009f48:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8009f4a:	4b1b      	ldr	r3, [pc, #108]	; (8009fb8 <perfect_pass+0x850>)
 8009f4c:	2207      	movs	r2, #7
 8009f4e:	701a      	strb	r2, [r3, #0]

//					get_base();

//					searchD2();
					searchD();
 8009f50:	f002 fc80 	bl	800c854 <searchD>
					HAL_Delay(2000);
 8009f54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009f58:	f7f7 f860 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 8009f5c:	4b16      	ldr	r3, [pc, #88]	; (8009fb8 <perfect_pass+0x850>)
 8009f5e:	2200      	movs	r2, #0
 8009f60:	701a      	strb	r2, [r3, #0]
 8009f62:	4b15      	ldr	r3, [pc, #84]	; (8009fb8 <perfect_pass+0x850>)
 8009f64:	781a      	ldrb	r2, [r3, #0]
 8009f66:	4b13      	ldr	r3, [pc, #76]	; (8009fb4 <perfect_pass+0x84c>)
 8009f68:	701a      	strb	r2, [r3, #0]
//					searchD2();
					searchD();
 8009f6a:	f002 fc73 	bl	800c854 <searchD>


					for(int i=0; i<m_start; i++){
 8009f6e:	2300      	movs	r3, #0
 8009f70:	607b      	str	r3, [r7, #4]
 8009f72:	e011      	b.n	8009f98 <perfect_pass+0x830>
					  buzzer(mario_start[i][0], mario_start[i][1]);
 8009f74:	4a17      	ldr	r2, [pc, #92]	; (8009fd4 <perfect_pass+0x86c>)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8009f7c:	4a15      	ldr	r2, [pc, #84]	; (8009fd4 <perfect_pass+0x86c>)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	00db      	lsls	r3, r3, #3
 8009f82:	4413      	add	r3, r2
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	4619      	mov	r1, r3
 8009f88:	f002 f9ac 	bl	800c2e4 <buzzer>
					  full_led_write(RED);
 8009f8c:	2001      	movs	r0, #1
 8009f8e:	f005 f8db 	bl	800f148 <full_led_write>
					for(int i=0; i<m_start; i++){
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	3301      	adds	r3, #1
 8009f96:	607b      	str	r3, [r7, #4]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b06      	cmp	r3, #6
 8009f9c:	ddea      	ble.n	8009f74 <perfect_pass+0x80c>
					searchF4();

					goal_x = 7;
					goal_y = 7;

*/					break;
 8009f9e:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8009fa0:	f7ff bbeb 	b.w	800977a <perfect_pass+0x12>
 8009fa4:	20000040 	.word	0x20000040
 8009fa8:	08011204 	.word	0x08011204
 8009fac:	20000fac 	.word	0x20000fac
 8009fb0:	2000160c 	.word	0x2000160c
 8009fb4:	20000bf1 	.word	0x20000bf1
 8009fb8:	20000b8c 	.word	0x20000b8c
 8009fbc:	20000c40 	.word	0x20000c40
 8009fc0:	20000b9c 	.word	0x20000b9c
 8009fc4:	08011228 	.word	0x08011228
 8009fc8:	2000048c 	.word	0x2000048c
 8009fcc:	20000fc0 	.word	0x20000fc0
 8009fd0:	0801125c 	.word	0x0801125c
 8009fd4:	20000008 	.word	0x20000008

08009fd8 <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b088      	sub	sp, #32
 8009fdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 8009fe6:	230b      	movs	r3, #11
 8009fe8:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 8009fea:	2301      	movs	r3, #1
 8009fec:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8009fee:	2302      	movs	r3, #2
 8009ff0:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 8009ff2:	f7f7 fd55 	bl	8001aa0 <HAL_FLASH_Unlock>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 8009ffa:	7ffb      	ldrb	r3, [r7, #31]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d001      	beq.n	800a004 <eeprom_enable_write+0x2c>
 800a000:	7ffb      	ldrb	r3, [r7, #31]
 800a002:	e009      	b.n	800a018 <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800a004:	1d3a      	adds	r2, r7, #4
 800a006:	f107 0308 	add.w	r3, r7, #8
 800a00a:	4611      	mov	r1, r2
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7f7 fea5 	bl	8001d5c <HAL_FLASHEx_Erase>
 800a012:	4603      	mov	r3, r0
 800a014:	77fb      	strb	r3, [r7, #31]
  return status;
 800a016:	7ffb      	ldrb	r3, [r7, #31]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3720      	adds	r7, #32
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 800a020:	b580      	push	{r7, lr}
 800a022:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 800a024:	f7f7 fd5e 	bl	8001ae4 <HAL_FLASH_Lock>
 800a028:	4603      	mov	r3, r0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 800a02e:	b590      	push	{r4, r7, lr}
 800a030:	b085      	sub	sp, #20
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	460b      	mov	r3, r1
 800a038:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + EEPROM_START_ADDRESS;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800a040:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800a044:	005b      	lsls	r3, r3, #1
 800a046:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 800a048:	887b      	ldrh	r3, [r7, #2]
 800a04a:	f04f 0400 	mov.w	r4, #0
 800a04e:	461a      	mov	r2, r3
 800a050:	4623      	mov	r3, r4
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	2001      	movs	r0, #1
 800a056:	f7f7 fccf 	bl	80019f8 <HAL_FLASH_Program>
 800a05a:	4603      	mov	r3, r0
 800a05c:	73fb      	strb	r3, [r7, #15]
  return status;
 800a05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3714      	adds	r7, #20
 800a064:	46bd      	mov	sp, r7
 800a066:	bd90      	pop	{r4, r7, pc}

0800a068 <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 800a070:	2300      	movs	r3, #0
 800a072:	81fb      	strh	r3, [r7, #14]
  address = address*2 + EEPROM_START_ADDRESS;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800a07a:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800a07e:	005b      	lsls	r3, r3, #1
 800a080:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	881b      	ldrh	r3, [r3, #0]
 800a086:	81fb      	strh	r3, [r7, #14]
  return val;
 800a088:	89fb      	ldrh	r3, [r7, #14]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
	...

0800a098 <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); 					// wait start up
 800a09e:	2064      	movs	r0, #100	; 0x64
 800a0a0:	f7f6 ffbc 	bl	800101c <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); 	// 1. read who am i
 800a0a4:	2075      	movs	r0, #117	; 0x75
 800a0a6:	f000 f82f 	bl	800a108 <read_byte>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); 		// 2. check who am i value
 800a0ae:	79fb      	ldrb	r3, [r7, #7]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	4813      	ldr	r0, [pc, #76]	; (800a100 <gyro_init+0x68>)
 800a0b4:	f005 fddc 	bl	800fc70 <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 800a0b8:	79fb      	ldrb	r3, [r7, #7]
 800a0ba:	2b98      	cmp	r3, #152	; 0x98
 800a0bc:	d003      	beq.n	800a0c6 <gyro_init+0x2e>
    while(1){
      printf("gyro_error\r");
 800a0be:	4811      	ldr	r0, [pc, #68]	; (800a104 <gyro_init+0x6c>)
 800a0c0:	f005 fdd6 	bl	800fc70 <iprintf>
 800a0c4:	e7fb      	b.n	800a0be <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 800a0c6:	2032      	movs	r0, #50	; 0x32
 800a0c8:	f7f6 ffa8 	bl	800101c <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); 	// 3. set pwr_might
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	206b      	movs	r0, #107	; 0x6b
 800a0d0:	f000 f846 	bl	800a160 <write_byte>

  HAL_Delay(50);
 800a0d4:	2032      	movs	r0, #50	; 0x32
 800a0d6:	f7f6 ffa1 	bl	800101c <HAL_Delay>
  write_byte(CONFIG, 0x00); 		// 4. set config
 800a0da:	2100      	movs	r1, #0
 800a0dc:	201a      	movs	r0, #26
 800a0de:	f000 f83f 	bl	800a160 <write_byte>

  HAL_Delay(50);
 800a0e2:	2032      	movs	r0, #50	; 0x32
 800a0e4:	f7f6 ff9a 	bl	800101c <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); 	// 5. set gyro config
 800a0e8:	2118      	movs	r1, #24
 800a0ea:	201b      	movs	r0, #27
 800a0ec:	f000 f838 	bl	800a160 <write_byte>

  HAL_Delay(50);
 800a0f0:	2032      	movs	r0, #50	; 0x32
 800a0f2:	f7f6 ff93 	bl	800101c <HAL_Delay>
}
 800a0f6:	bf00      	nop
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	0801133c 	.word	0x0801133c
 800a104:	08011344 	.word	0x08011344

0800a108 <read_byte>:


uint8_t read_byte(uint8_t reg){
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	4603      	mov	r3, r0
 800a110:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET ); 	//cs = Low;
 800a112:	2200      	movs	r2, #0
 800a114:	2104      	movs	r1, #4
 800a116:	4810      	ldr	r0, [pc, #64]	; (800a158 <read_byte+0x50>)
 800a118:	f7f8 f8f4 	bl	8002304 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 800a11c:	79fb      	ldrb	r3, [r7, #7]
 800a11e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a122:	b2db      	uxtb	r3, r3
 800a124:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800a126:	f107 010f 	add.w	r1, r7, #15
 800a12a:	2364      	movs	r3, #100	; 0x64
 800a12c:	2201      	movs	r2, #1
 800a12e:	480b      	ldr	r0, [pc, #44]	; (800a15c <read_byte+0x54>)
 800a130:	f7f8 fd70 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); 						// read 1byte(read data)
 800a134:	f107 010e 	add.w	r1, r7, #14
 800a138:	2364      	movs	r3, #100	; 0x64
 800a13a:	2201      	movs	r2, #1
 800a13c:	4807      	ldr	r0, [pc, #28]	; (800a15c <read_byte+0x54>)
 800a13e:	f7f8 fe9d 	bl	8002e7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET );  	//cs = High;
 800a142:	2201      	movs	r2, #1
 800a144:	2104      	movs	r1, #4
 800a146:	4804      	ldr	r0, [pc, #16]	; (800a158 <read_byte+0x50>)
 800a148:	f7f8 f8dc 	bl	8002304 <HAL_GPIO_WritePin>
  return val;
 800a14c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	40020c00 	.word	0x40020c00
 800a15c:	2000017c 	.word	0x2000017c

0800a160 <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	4603      	mov	r3, r0
 800a168:	460a      	mov	r2, r1
 800a16a:	71fb      	strb	r3, [r7, #7]
 800a16c:	4613      	mov	r3, r2
 800a16e:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 800a170:	79fb      	ldrb	r3, [r7, #7]
 800a172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a176:	b2db      	uxtb	r3, r3
 800a178:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); 	// cs = Low;
 800a17a:	2200      	movs	r2, #0
 800a17c:	2104      	movs	r1, #4
 800a17e:	480c      	ldr	r0, [pc, #48]	; (800a1b0 <write_byte+0x50>)
 800a180:	f7f8 f8c0 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800a184:	f107 010f 	add.w	r1, r7, #15
 800a188:	2364      	movs	r3, #100	; 0x64
 800a18a:	2201      	movs	r2, #1
 800a18c:	4809      	ldr	r0, [pc, #36]	; (800a1b4 <write_byte+0x54>)
 800a18e:	f7f8 fd41 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); 					// read 1byte(write data)
 800a192:	1db9      	adds	r1, r7, #6
 800a194:	2364      	movs	r3, #100	; 0x64
 800a196:	2201      	movs	r2, #1
 800a198:	4806      	ldr	r0, [pc, #24]	; (800a1b4 <write_byte+0x54>)
 800a19a:	f7f8 fd3b 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); 		// cs = High;
 800a19e:	2201      	movs	r2, #1
 800a1a0:	2104      	movs	r1, #4
 800a1a2:	4803      	ldr	r0, [pc, #12]	; (800a1b0 <write_byte+0x50>)
 800a1a4:	f7f8 f8ae 	bl	8002304 <HAL_GPIO_WritePin>
}
 800a1a8:	bf00      	nop
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	40020c00 	.word	0x40020c00
 800a1b4:	2000017c 	.word	0x2000017c

0800a1b8 <accel_read_x>:


float accel_read_x(void){
 800a1b8:	b590      	push	{r4, r7, lr}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
  int16_t accel_x;
  float accel;

  // H:8bit shift, Link h and l
  accel_x = (int16_t)((int16_t)(read_byte(ACCEL_XOUT_H) << 8) | read_byte(ACCEL_XOUT_L));
 800a1be:	203b      	movs	r0, #59	; 0x3b
 800a1c0:	f7ff ffa2 	bl	800a108 <read_byte>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	021b      	lsls	r3, r3, #8
 800a1c8:	b21c      	sxth	r4, r3
 800a1ca:	203c      	movs	r0, #60	; 0x3c
 800a1cc:	f7ff ff9c 	bl	800a108 <read_byte>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	b21b      	sxth	r3, r3
 800a1d4:	4323      	orrs	r3, r4
 800a1d6:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_x / ACCEL_FACTOR); // dps to accel
 800a1d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	da01      	bge.n	800a1e4 <accel_read_x+0x2c>
 800a1e0:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800a1e4:	12db      	asrs	r3, r3, #11
 800a1e6:	b21b      	sxth	r3, r3
 800a1e8:	ee07 3a90 	vmov	s15, r3
 800a1ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1f0:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	ee07 3a90 	vmov	s15, r3
}
 800a1fa:	eeb0 0a67 	vmov.f32	s0, s15
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	bd90      	pop	{r4, r7, pc}

0800a204 <accel_read_y>:


float accel_read_y(void){
 800a204:	b590      	push	{r4, r7, lr}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
  int16_t accel_y;
  float accel;

  // H:8bit shift, Link h and l
  accel_y = (int16_t)((int16_t)(read_byte(ACCEL_YOUT_H) << 8) | read_byte(ACCEL_YOUT_L));
 800a20a:	203d      	movs	r0, #61	; 0x3d
 800a20c:	f7ff ff7c 	bl	800a108 <read_byte>
 800a210:	4603      	mov	r3, r0
 800a212:	021b      	lsls	r3, r3, #8
 800a214:	b21c      	sxth	r4, r3
 800a216:	203e      	movs	r0, #62	; 0x3e
 800a218:	f7ff ff76 	bl	800a108 <read_byte>
 800a21c:	4603      	mov	r3, r0
 800a21e:	b21b      	sxth	r3, r3
 800a220:	4323      	orrs	r3, r4
 800a222:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_y / ACCEL_FACTOR); // dps to accel
 800a224:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	da01      	bge.n	800a230 <accel_read_y+0x2c>
 800a22c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800a230:	12db      	asrs	r3, r3, #11
 800a232:	b21b      	sxth	r3, r3
 800a234:	ee07 3a90 	vmov	s15, r3
 800a238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a23c:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	ee07 3a90 	vmov	s15, r3
}
 800a246:	eeb0 0a67 	vmov.f32	s0, s15
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd90      	pop	{r4, r7, pc}

0800a250 <accel_read_z>:


float accel_read_z(void){
 800a250:	b590      	push	{r4, r7, lr}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
  int16_t accel_z;
  float accel;

  // H:8bit shift, Link h and l
  accel_z = (int16_t)((int16_t)(read_byte(ACCEL_ZOUT_H) << 8) | read_byte(ACCEL_ZOUT_L));
 800a256:	203f      	movs	r0, #63	; 0x3f
 800a258:	f7ff ff56 	bl	800a108 <read_byte>
 800a25c:	4603      	mov	r3, r0
 800a25e:	021b      	lsls	r3, r3, #8
 800a260:	b21c      	sxth	r4, r3
 800a262:	2040      	movs	r0, #64	; 0x40
 800a264:	f7ff ff50 	bl	800a108 <read_byte>
 800a268:	4603      	mov	r3, r0
 800a26a:	b21b      	sxth	r3, r3
 800a26c:	4323      	orrs	r3, r4
 800a26e:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_z / ACCEL_FACTOR-7); // dps to accel
 800a270:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a274:	2b00      	cmp	r3, #0
 800a276:	da01      	bge.n	800a27c <accel_read_z+0x2c>
 800a278:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800a27c:	12db      	asrs	r3, r3, #11
 800a27e:	b21b      	sxth	r3, r3
 800a280:	3b07      	subs	r3, #7
 800a282:	ee07 3a90 	vmov	s15, r3
 800a286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a28a:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	ee07 3a90 	vmov	s15, r3
}
 800a294:	eeb0 0a67 	vmov.f32	s0, s15
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd90      	pop	{r4, r7, pc}
	...

0800a2a0 <gyro_read_x>:


float gyro_read_x(void){
 800a2a0:	b590      	push	{r4, r7, lr}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
  int16_t gyro_x;
  float omega;

  // H:8bit shift, Link h and l
  gyro_x = (int16_t)((int16_t)(read_byte(GYRO_XOUT_H) << 8) | read_byte(GYRO_XOUT_L));
 800a2a6:	2043      	movs	r0, #67	; 0x43
 800a2a8:	f7ff ff2e 	bl	800a108 <read_byte>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	021b      	lsls	r3, r3, #8
 800a2b0:	b21c      	sxth	r4, r3
 800a2b2:	2044      	movs	r0, #68	; 0x44
 800a2b4:	f7ff ff28 	bl	800a108 <read_byte>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	b21b      	sxth	r3, r3
 800a2bc:	4323      	orrs	r3, r4
 800a2be:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_x / GYRO_FACTOR+1.4); // dps to deg/sec
 800a2c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7f6 f925 	bl	8000514 <__aeabi_i2d>
 800a2ca:	a30f      	add	r3, pc, #60	; (adr r3, 800a308 <gyro_read_x+0x68>)
 800a2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d0:	f7f6 fab4 	bl	800083c <__aeabi_ddiv>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	460c      	mov	r4, r1
 800a2d8:	4618      	mov	r0, r3
 800a2da:	4621      	mov	r1, r4
 800a2dc:	a30c      	add	r3, pc, #48	; (adr r3, 800a310 <gyro_read_x+0x70>)
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	f7f5 ffcb 	bl	800027c <__adddf3>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	460c      	mov	r4, r1
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	4621      	mov	r1, r4
 800a2ee:	f7f6 fc53 	bl	8000b98 <__aeabi_d2f>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	603b      	str	r3, [r7, #0]
  return omega;
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	ee07 3a90 	vmov	s15, r3
}
 800a2fc:	eeb0 0a67 	vmov.f32	s0, s15
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	bd90      	pop	{r4, r7, pc}
 800a306:	bf00      	nop
 800a308:	66666666 	.word	0x66666666
 800a30c:	40306666 	.word	0x40306666
 800a310:	66666666 	.word	0x66666666
 800a314:	3ff66666 	.word	0x3ff66666

0800a318 <gyro_read_y>:


float gyro_read_y(void){
 800a318:	b590      	push	{r4, r7, lr}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
  int16_t gyro_y;
  float omega;

  // H:8bit shift, Link h and l
  gyro_y = (int16_t)((int16_t)(read_byte(GYRO_YOUT_H) << 8) | read_byte(GYRO_YOUT_L));
 800a31e:	2045      	movs	r0, #69	; 0x45
 800a320:	f7ff fef2 	bl	800a108 <read_byte>
 800a324:	4603      	mov	r3, r0
 800a326:	021b      	lsls	r3, r3, #8
 800a328:	b21c      	sxth	r4, r3
 800a32a:	2046      	movs	r0, #70	; 0x46
 800a32c:	f7ff feec 	bl	800a108 <read_byte>
 800a330:	4603      	mov	r3, r0
 800a332:	b21b      	sxth	r3, r3
 800a334:	4323      	orrs	r3, r4
 800a336:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_y / GYRO_FACTOR-0.75); // dps to deg/sec
 800a338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7f6 f8e9 	bl	8000514 <__aeabi_i2d>
 800a342:	a310      	add	r3, pc, #64	; (adr r3, 800a384 <gyro_read_y+0x6c>)
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	f7f6 fa78 	bl	800083c <__aeabi_ddiv>
 800a34c:	4603      	mov	r3, r0
 800a34e:	460c      	mov	r4, r1
 800a350:	4618      	mov	r0, r3
 800a352:	4621      	mov	r1, r4
 800a354:	f04f 0200 	mov.w	r2, #0
 800a358:	4b09      	ldr	r3, [pc, #36]	; (800a380 <gyro_read_y+0x68>)
 800a35a:	f7f5 ff8d 	bl	8000278 <__aeabi_dsub>
 800a35e:	4603      	mov	r3, r0
 800a360:	460c      	mov	r4, r1
 800a362:	4618      	mov	r0, r3
 800a364:	4621      	mov	r1, r4
 800a366:	f7f6 fc17 	bl	8000b98 <__aeabi_d2f>
 800a36a:	4603      	mov	r3, r0
 800a36c:	603b      	str	r3, [r7, #0]
  return omega;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	ee07 3a90 	vmov	s15, r3
}
 800a374:	eeb0 0a67 	vmov.f32	s0, s15
 800a378:	370c      	adds	r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd90      	pop	{r4, r7, pc}
 800a37e:	bf00      	nop
 800a380:	3fe80000 	.word	0x3fe80000
 800a384:	66666666 	.word	0x66666666
 800a388:	40306666 	.word	0x40306666
 800a38c:	00000000 	.word	0x00000000

0800a390 <gyro_read_z>:


float gyro_read_z(void){
 800a390:	b5b0      	push	{r4, r5, r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 800a396:	2047      	movs	r0, #71	; 0x47
 800a398:	f7ff feb6 	bl	800a108 <read_byte>
 800a39c:	4603      	mov	r3, r0
 800a39e:	021b      	lsls	r3, r3, #8
 800a3a0:	b21c      	sxth	r4, r3
 800a3a2:	2048      	movs	r0, #72	; 0x48
 800a3a4:	f7ff feb0 	bl	800a108 <read_byte>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	b21b      	sxth	r3, r3
 800a3ac:	4323      	orrs	r3, r4
 800a3ae:	80fb      	strh	r3, [r7, #6]

//  omega = (float)(gyro_z / GYRO_FACTOR+1.15); // dps to deg/sec
  omega = (float)(gyro_z / GYRO_FACTOR-gyro_drift_value); // dps to deg/sec
 800a3b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7f6 f8ad 	bl	8000514 <__aeabi_i2d>
 800a3ba:	a314      	add	r3, pc, #80	; (adr r3, 800a40c <gyro_read_z+0x7c>)
 800a3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c0:	f7f6 fa3c 	bl	800083c <__aeabi_ddiv>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	4625      	mov	r5, r4
 800a3ca:	461c      	mov	r4, r3
 800a3cc:	4b0e      	ldr	r3, [pc, #56]	; (800a408 <gyro_read_z+0x78>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7f6 f8b1 	bl	8000538 <__aeabi_f2d>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	460b      	mov	r3, r1
 800a3da:	4620      	mov	r0, r4
 800a3dc:	4629      	mov	r1, r5
 800a3de:	f7f5 ff4b 	bl	8000278 <__aeabi_dsub>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	f7f6 fbd5 	bl	8000b98 <__aeabi_d2f>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	603b      	str	r3, [r7, #0]
  return omega;
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	ee07 3a90 	vmov	s15, r3
}
 800a3f8:	eeb0 0a67 	vmov.f32	s0, s15
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bdb0      	pop	{r4, r5, r7, pc}
 800a402:	bf00      	nop
 800a404:	f3af 8000 	nop.w
 800a408:	20000c38 	.word	0x20000c38
 800a40c:	66666666 	.word	0x66666666
 800a410:	40306666 	.word	0x40306666

0800a414 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int c) {
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2b0a      	cmp	r3, #10
 800a420:	d108      	bne.n	800a434 <__io_putchar+0x20>
    int _c = '\r';
 800a422:	230d      	movs	r3, #13
 800a424:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 800a426:	f107 010c 	add.w	r1, r7, #12
 800a42a:	2301      	movs	r3, #1
 800a42c:	2201      	movs	r2, #1
 800a42e:	4807      	ldr	r0, [pc, #28]	; (800a44c <__io_putchar+0x38>)
 800a430:	f7fa f927 	bl	8004682 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 800a434:	1d39      	adds	r1, r7, #4
 800a436:	2301      	movs	r3, #1
 800a438:	2201      	movs	r2, #1
 800a43a:	4804      	ldr	r0, [pc, #16]	; (800a44c <__io_putchar+0x38>)
 800a43c:	f7fa f921 	bl	8004682 <HAL_UART_Transmit>
  return 0;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	20000ba4 	.word	0x20000ba4

0800a450 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a450:	b5b0      	push	{r4, r5, r7, lr}
 800a452:	ed2d 8b02 	vpush	{d8}
 800a456:	b08c      	sub	sp, #48	; 0x30
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a45c:	2360      	movs	r3, #96	; 0x60
 800a45e:	60bb      	str	r3, [r7, #8]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a460:	2300      	movs	r3, #0
 800a462:	613b      	str	r3, [r7, #16]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a464:	2300      	movs	r3, #0
 800a466:	61bb      	str	r3, [r7, #24]

	if(htim == &htim6){
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4ab5      	ldr	r2, [pc, #724]	; (800a740 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	f041 8243 	bne.w	800b8f8 <HAL_TIM_PeriodElapsedCallback+0x14a8>
		cnt_l = TIM4 -> CNT;
 800a472:	4bb4      	ldr	r3, [pc, #720]	; (800a744 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800a474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a476:	ee07 3a90 	vmov	s15, r3
 800a47a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a47e:	4bb2      	ldr	r3, [pc, #712]	; (800a748 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800a480:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 800a484:	4bb1      	ldr	r3, [pc, #708]	; (800a74c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a488:	ee07 3a90 	vmov	s15, r3
 800a48c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a490:	4baf      	ldr	r3, [pc, #700]	; (800a750 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800a492:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;		//0=>65505の値飛び検出用
 800a496:	4bac      	ldr	r3, [pc, #688]	; (800a748 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800a498:	edd3 7a00 	vldr	s15, [r3]
 800a49c:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800a754 <HAL_TIM_PeriodElapsedCallback+0x304>
 800a4a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4a8:	dd09      	ble.n	800a4be <HAL_TIM_PeriodElapsedCallback+0x6e>
 800a4aa:	4ba7      	ldr	r3, [pc, #668]	; (800a748 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800a4ac:	edd3 7a00 	vldr	s15, [r3]
 800a4b0:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800a758 <HAL_TIM_PeriodElapsedCallback+0x308>
 800a4b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a4b8:	4ba3      	ldr	r3, [pc, #652]	; (800a748 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800a4ba:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;		//0=>65505の値飛び検出用
 800a4be:	4ba4      	ldr	r3, [pc, #656]	; (800a750 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800a4c0:	edd3 7a00 	vldr	s15, [r3]
 800a4c4:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800a754 <HAL_TIM_PeriodElapsedCallback+0x304>
 800a4c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4d0:	dd09      	ble.n	800a4e6 <HAL_TIM_PeriodElapsedCallback+0x96>
 800a4d2:	4b9f      	ldr	r3, [pc, #636]	; (800a750 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800a4d4:	edd3 7a00 	vldr	s15, [r3]
 800a4d8:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800a758 <HAL_TIM_PeriodElapsedCallback+0x308>
 800a4dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a4e0:	4b9b      	ldr	r3, [pc, #620]	; (800a750 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800a4e2:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;								//a回転方向合わせ
 800a4e6:	4b9a      	ldr	r3, [pc, #616]	; (800a750 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800a4e8:	edd3 7a00 	vldr	s15, [r3]
 800a4ec:	eef1 7a67 	vneg.f32	s15, s15
 800a4f0:	4b97      	ldr	r3, [pc, #604]	; (800a750 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800a4f2:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800a4f6:	4b99      	ldr	r3, [pc, #612]	; (800a75c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7f6 f81c 	bl	8000538 <__aeabi_f2d>
 800a500:	4604      	mov	r4, r0
 800a502:	460d      	mov	r5, r1
 800a504:	4b90      	ldr	r3, [pc, #576]	; (800a748 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4618      	mov	r0, r3
 800a50a:	f7f6 f815 	bl	8000538 <__aeabi_f2d>
 800a50e:	a388      	add	r3, pc, #544	; (adr r3, 800a730 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	f7f6 f868 	bl	80005e8 <__aeabi_dmul>
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	4620      	mov	r0, r4
 800a51e:	4629      	mov	r1, r5
 800a520:	f7f5 feac 	bl	800027c <__adddf3>
 800a524:	4603      	mov	r3, r0
 800a526:	460c      	mov	r4, r1
 800a528:	4618      	mov	r0, r3
 800a52a:	4621      	mov	r1, r4
 800a52c:	f7f6 fb34 	bl	8000b98 <__aeabi_d2f>
 800a530:	4602      	mov	r2, r0
 800a532:	4b8a      	ldr	r3, [pc, #552]	; (800a75c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800a534:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800a536:	4b8a      	ldr	r3, [pc, #552]	; (800a760 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7f5 fffc 	bl	8000538 <__aeabi_f2d>
 800a540:	4604      	mov	r4, r0
 800a542:	460d      	mov	r5, r1
 800a544:	4b82      	ldr	r3, [pc, #520]	; (800a750 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4618      	mov	r0, r3
 800a54a:	f7f5 fff5 	bl	8000538 <__aeabi_f2d>
 800a54e:	a378      	add	r3, pc, #480	; (adr r3, 800a730 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800a550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a554:	f7f6 f848 	bl	80005e8 <__aeabi_dmul>
 800a558:	4602      	mov	r2, r0
 800a55a:	460b      	mov	r3, r1
 800a55c:	4620      	mov	r0, r4
 800a55e:	4629      	mov	r1, r5
 800a560:	f7f5 fe8c 	bl	800027c <__adddf3>
 800a564:	4603      	mov	r3, r0
 800a566:	460c      	mov	r4, r1
 800a568:	4618      	mov	r0, r3
 800a56a:	4621      	mov	r1, r4
 800a56c:	f7f6 fb14 	bl	8000b98 <__aeabi_d2f>
 800a570:	4602      	mov	r2, r0
 800a572:	4b7b      	ldr	r3, [pc, #492]	; (800a760 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800a574:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800a576:	4b74      	ldr	r3, [pc, #464]	; (800a748 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7f5 ffdc 	bl	8000538 <__aeabi_f2d>
 800a580:	a36b      	add	r3, pc, #428	; (adr r3, 800a730 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a586:	f7f6 f82f 	bl	80005e8 <__aeabi_dmul>
 800a58a:	4603      	mov	r3, r0
 800a58c:	460c      	mov	r4, r1
 800a58e:	4618      	mov	r0, r3
 800a590:	4621      	mov	r1, r4
 800a592:	a369      	add	r3, pc, #420	; (adr r3, 800a738 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	f7f6 f950 	bl	800083c <__aeabi_ddiv>
 800a59c:	4603      	mov	r3, r0
 800a59e:	460c      	mov	r4, r1
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	4621      	mov	r1, r4
 800a5a4:	f7f6 faf8 	bl	8000b98 <__aeabi_d2f>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	4b6e      	ldr	r3, [pc, #440]	; (800a764 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800a5ac:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800a5ae:	4b68      	ldr	r3, [pc, #416]	; (800a750 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7f5 ffc0 	bl	8000538 <__aeabi_f2d>
 800a5b8:	a35d      	add	r3, pc, #372	; (adr r3, 800a730 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800a5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5be:	f7f6 f813 	bl	80005e8 <__aeabi_dmul>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	460c      	mov	r4, r1
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	4621      	mov	r1, r4
 800a5ca:	a35b      	add	r3, pc, #364	; (adr r3, 800a738 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800a5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d0:	f7f6 f934 	bl	800083c <__aeabi_ddiv>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	4618      	mov	r0, r3
 800a5da:	4621      	mov	r1, r4
 800a5dc:	f7f6 fadc 	bl	8000b98 <__aeabi_d2f>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	4b61      	ldr	r3, [pc, #388]	; (800a768 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800a5e4:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 800a5e6:	4b57      	ldr	r3, [pc, #348]	; (800a744 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 800a5ec:	4b57      	ldr	r3, [pc, #348]	; (800a74c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.SPD){
 800a5f2:	4b5e      	ldr	r3, [pc, #376]	; (800a76c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800a5f4:	881b      	ldrh	r3, [r3, #0]
 800a5f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 80fe 	beq.w	800a7fe <HAL_TIM_PeriodElapsedCallback+0x3ae>
			target_speed_l += accel_l * 0.001;
 800a602:	4b5b      	ldr	r3, [pc, #364]	; (800a770 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4618      	mov	r0, r3
 800a608:	f7f5 ff96 	bl	8000538 <__aeabi_f2d>
 800a60c:	a34a      	add	r3, pc, #296	; (adr r3, 800a738 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	f7f5 ffe9 	bl	80005e8 <__aeabi_dmul>
 800a616:	4603      	mov	r3, r0
 800a618:	460c      	mov	r4, r1
 800a61a:	4625      	mov	r5, r4
 800a61c:	461c      	mov	r4, r3
 800a61e:	4b55      	ldr	r3, [pc, #340]	; (800a774 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4618      	mov	r0, r3
 800a624:	f7f5 ff88 	bl	8000538 <__aeabi_f2d>
 800a628:	4602      	mov	r2, r0
 800a62a:	460b      	mov	r3, r1
 800a62c:	4620      	mov	r0, r4
 800a62e:	4629      	mov	r1, r5
 800a630:	f7f5 fe24 	bl	800027c <__adddf3>
 800a634:	4603      	mov	r3, r0
 800a636:	460c      	mov	r4, r1
 800a638:	4618      	mov	r0, r3
 800a63a:	4621      	mov	r1, r4
 800a63c:	f7f6 faac 	bl	8000b98 <__aeabi_d2f>
 800a640:	4602      	mov	r2, r0
 800a642:	4b4c      	ldr	r3, [pc, #304]	; (800a774 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800a644:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 800a646:	4b4b      	ldr	r3, [pc, #300]	; (800a774 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800a648:	ed93 7a00 	vldr	s14, [r3]
 800a64c:	4b4a      	ldr	r3, [pc, #296]	; (800a778 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800a64e:	edd3 7a00 	vldr	s15, [r3]
 800a652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a65a:	dd03      	ble.n	800a664 <HAL_TIM_PeriodElapsedCallback+0x214>
 800a65c:	4b46      	ldr	r3, [pc, #280]	; (800a778 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800a65e:	edd3 7a00 	vldr	s15, [r3]
 800a662:	e002      	b.n	800a66a <HAL_TIM_PeriodElapsedCallback+0x21a>
 800a664:	4b43      	ldr	r3, [pc, #268]	; (800a774 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800a666:	edd3 7a00 	vldr	s15, [r3]
 800a66a:	4b44      	ldr	r3, [pc, #272]	; (800a77c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800a66c:	ed93 7a00 	vldr	s14, [r3]
 800a670:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a678:	dd10      	ble.n	800a69c <HAL_TIM_PeriodElapsedCallback+0x24c>
 800a67a:	4b3e      	ldr	r3, [pc, #248]	; (800a774 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800a67c:	ed93 7a00 	vldr	s14, [r3]
 800a680:	4b3d      	ldr	r3, [pc, #244]	; (800a778 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800a682:	edd3 7a00 	vldr	s15, [r3]
 800a686:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a68e:	dd02      	ble.n	800a696 <HAL_TIM_PeriodElapsedCallback+0x246>
 800a690:	4b39      	ldr	r3, [pc, #228]	; (800a778 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	e004      	b.n	800a6a0 <HAL_TIM_PeriodElapsedCallback+0x250>
 800a696:	4b37      	ldr	r3, [pc, #220]	; (800a774 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	e001      	b.n	800a6a0 <HAL_TIM_PeriodElapsedCallback+0x250>
 800a69c:	4b37      	ldr	r3, [pc, #220]	; (800a77c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a34      	ldr	r2, [pc, #208]	; (800a774 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800a6a2:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 800a6a4:	4b33      	ldr	r3, [pc, #204]	; (800a774 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800a6a6:	ed93 7a00 	vldr	s14, [r3]
 800a6aa:	4b2e      	ldr	r3, [pc, #184]	; (800a764 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800a6ac:	edd3 7a00 	vldr	s15, [r3]
 800a6b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6b4:	4b32      	ldr	r3, [pc, #200]	; (800a780 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800a6b6:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800a6ba:	4b31      	ldr	r3, [pc, #196]	; (800a780 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800a6bc:	edd3 7a00 	vldr	s15, [r3]
 800a6c0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800a6c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6c8:	4b2e      	ldr	r3, [pc, #184]	; (800a784 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800a6ca:	edc3 7a00 	vstr	s15, [r3]

			target_speed_r += accel_r * 0.001;
 800a6ce:	4b2e      	ldr	r3, [pc, #184]	; (800a788 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7f5 ff30 	bl	8000538 <__aeabi_f2d>
 800a6d8:	a317      	add	r3, pc, #92	; (adr r3, 800a738 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6de:	f7f5 ff83 	bl	80005e8 <__aeabi_dmul>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	460c      	mov	r4, r1
 800a6e6:	4625      	mov	r5, r4
 800a6e8:	461c      	mov	r4, r3
 800a6ea:	4b28      	ldr	r3, [pc, #160]	; (800a78c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7f5 ff22 	bl	8000538 <__aeabi_f2d>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	f7f5 fdbe 	bl	800027c <__adddf3>
 800a700:	4603      	mov	r3, r0
 800a702:	460c      	mov	r4, r1
 800a704:	4618      	mov	r0, r3
 800a706:	4621      	mov	r1, r4
 800a708:	f7f6 fa46 	bl	8000b98 <__aeabi_d2f>
 800a70c:	4602      	mov	r2, r0
 800a70e:	4b1f      	ldr	r3, [pc, #124]	; (800a78c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800a710:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 800a712:	4b1e      	ldr	r3, [pc, #120]	; (800a78c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800a714:	ed93 7a00 	vldr	s14, [r3]
 800a718:	4b1d      	ldr	r3, [pc, #116]	; (800a790 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800a71a:	edd3 7a00 	vldr	s15, [r3]
 800a71e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a726:	dd35      	ble.n	800a794 <HAL_TIM_PeriodElapsedCallback+0x344>
 800a728:	4b19      	ldr	r3, [pc, #100]	; (800a790 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800a72a:	edd3 7a00 	vldr	s15, [r3]
 800a72e:	e034      	b.n	800a79a <HAL_TIM_PeriodElapsedCallback+0x34a>
 800a730:	775e3793 	.word	0x775e3793
 800a734:	3f552a9e 	.word	0x3f552a9e
 800a738:	d2f1a9fc 	.word	0xd2f1a9fc
 800a73c:	3f50624d 	.word	0x3f50624d
 800a740:	20000bf8 	.word	0x20000bf8
 800a744:	40000800 	.word	0x40000800
 800a748:	200002e4 	.word	0x200002e4
 800a74c:	40010400 	.word	0x40010400
 800a750:	20000bec 	.word	0x20000bec
 800a754:	471c4000 	.word	0x471c4000
 800a758:	477fff00 	.word	0x477fff00
 800a75c:	20001608 	.word	0x20001608
 800a760:	20000b2c 	.word	0x20000b2c
 800a764:	20000b30 	.word	0x20000b30
 800a768:	200002f4 	.word	0x200002f4
 800a76c:	20000fac 	.word	0x20000fac
 800a770:	20000da0 	.word	0x20000da0
 800a774:	20000c44 	.word	0x20000c44
 800a778:	200007b4 	.word	0x200007b4
 800a77c:	20000b94 	.word	0x20000b94
 800a780:	20000ba0 	.word	0x20000ba0
 800a784:	20000be8 	.word	0x20000be8
 800a788:	20000b20 	.word	0x20000b20
 800a78c:	200001d8 	.word	0x200001d8
 800a790:	200001dc 	.word	0x200001dc
 800a794:	4ba0      	ldr	r3, [pc, #640]	; (800aa18 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800a796:	edd3 7a00 	vldr	s15, [r3]
 800a79a:	4ba0      	ldr	r3, [pc, #640]	; (800aa1c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800a79c:	ed93 7a00 	vldr	s14, [r3]
 800a7a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a8:	dd10      	ble.n	800a7cc <HAL_TIM_PeriodElapsedCallback+0x37c>
 800a7aa:	4b9b      	ldr	r3, [pc, #620]	; (800aa18 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800a7ac:	ed93 7a00 	vldr	s14, [r3]
 800a7b0:	4b9b      	ldr	r3, [pc, #620]	; (800aa20 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800a7b2:	edd3 7a00 	vldr	s15, [r3]
 800a7b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7be:	dd02      	ble.n	800a7c6 <HAL_TIM_PeriodElapsedCallback+0x376>
 800a7c0:	4b97      	ldr	r3, [pc, #604]	; (800aa20 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	e004      	b.n	800a7d0 <HAL_TIM_PeriodElapsedCallback+0x380>
 800a7c6:	4b94      	ldr	r3, [pc, #592]	; (800aa18 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	e001      	b.n	800a7d0 <HAL_TIM_PeriodElapsedCallback+0x380>
 800a7cc:	4b93      	ldr	r3, [pc, #588]	; (800aa1c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a91      	ldr	r2, [pc, #580]	; (800aa18 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800a7d2:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 800a7d4:	4b90      	ldr	r3, [pc, #576]	; (800aa18 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800a7d6:	ed93 7a00 	vldr	s14, [r3]
 800a7da:	4b92      	ldr	r3, [pc, #584]	; (800aa24 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800a7dc:	edd3 7a00 	vldr	s15, [r3]
 800a7e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7e4:	4b90      	ldr	r3, [pc, #576]	; (800aa28 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800a7e6:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800a7ea:	4b8f      	ldr	r3, [pc, #572]	; (800aa28 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800a7ec:	edd3 7a00 	vldr	s15, [r3]
 800a7f0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800a7f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a7f8:	4b8c      	ldr	r3, [pc, #560]	; (800aa2c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800a7fa:	edc3 7a00 	vstr	s15, [r3]
		}

		log_cnt ++;
 800a7fe:	4b8c      	ldr	r3, [pc, #560]	; (800aa30 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	3301      	adds	r3, #1
 800a804:	4a8a      	ldr	r2, [pc, #552]	; (800aa30 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800a806:	6013      	str	r3, [r2, #0]

		if(log_cnt >= 5 && MF.FLAG.LOG){
 800a808:	4b89      	ldr	r3, [pc, #548]	; (800aa30 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2b04      	cmp	r3, #4
 800a80e:	dd37      	ble.n	800a880 <HAL_TIM_PeriodElapsedCallback+0x430>
 800a810:	4b88      	ldr	r3, [pc, #544]	; (800aa34 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800a812:	881b      	ldrh	r3, [r3, #0]
 800a814:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d030      	beq.n	800a880 <HAL_TIM_PeriodElapsedCallback+0x430>
			log_cnt = 0;
 800a81e:	4b84      	ldr	r3, [pc, #528]	; (800aa30 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800a820:	2200      	movs	r2, #0
 800a822:	601a      	str	r2, [r3, #0]
			if(get_cnt < log_allay){
 800a824:	4b84      	ldr	r3, [pc, #528]	; (800aa38 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2bc7      	cmp	r3, #199	; 0xc7
 800a82a:	dc29      	bgt.n	800a880 <HAL_TIM_PeriodElapsedCallback+0x430>
				get_speed_l[get_cnt] = speed_l;
 800a82c:	4b83      	ldr	r3, [pc, #524]	; (800aa3c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800a82e:	edd3 7a00 	vldr	s15, [r3]
 800a832:	4b81      	ldr	r3, [pc, #516]	; (800aa38 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a83a:	ee17 1a90 	vmov	r1, s15
 800a83e:	4a80      	ldr	r2, [pc, #512]	; (800aa40 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800a840:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_speed_r[get_cnt] = speed_r;
 800a844:	4b77      	ldr	r3, [pc, #476]	; (800aa24 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800a846:	edd3 7a00 	vldr	s15, [r3]
 800a84a:	4b7b      	ldr	r3, [pc, #492]	; (800aa38 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a852:	ee17 1a90 	vmov	r1, s15
 800a856:	4a7b      	ldr	r2, [pc, #492]	; (800aa44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800a858:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_omega[get_cnt] = gyro_read_z();
 800a85c:	f7ff fd98 	bl	800a390 <gyro_read_z>
 800a860:	eef0 7a40 	vmov.f32	s15, s0
 800a864:	4b74      	ldr	r3, [pc, #464]	; (800aa38 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a86c:	ee17 1a90 	vmov	r1, s15
 800a870:	4a75      	ldr	r2, [pc, #468]	; (800aa48 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800a872:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_cnt++;
 800a876:	4b70      	ldr	r3, [pc, #448]	; (800aa38 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	3301      	adds	r3, #1
 800a87c:	4a6e      	ldr	r2, [pc, #440]	; (800aa38 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800a87e:	6013      	str	r3, [r2, #0]
//		degree_x += accel_read_x() * 0.001;
//		degree_y += accel_read_y() * 0.001;
//		degree_z += accel_read_z() * 0.001;
//		degree_x += gyro_read_x() * 0.001;
//		degree_y += gyro_read_y() * 0.001;
		degree_z += gyro_read_z() * 0.001;
 800a880:	f7ff fd86 	bl	800a390 <gyro_read_z>
 800a884:	ee10 3a10 	vmov	r3, s0
 800a888:	4618      	mov	r0, r3
 800a88a:	f7f5 fe55 	bl	8000538 <__aeabi_f2d>
 800a88e:	a35e      	add	r3, pc, #376	; (adr r3, 800aa08 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800a890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a894:	f7f5 fea8 	bl	80005e8 <__aeabi_dmul>
 800a898:	4603      	mov	r3, r0
 800a89a:	460c      	mov	r4, r1
 800a89c:	4625      	mov	r5, r4
 800a89e:	461c      	mov	r4, r3
 800a8a0:	4b6a      	ldr	r3, [pc, #424]	; (800aa4c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7f5 fe47 	bl	8000538 <__aeabi_f2d>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	4629      	mov	r1, r5
 800a8b2:	f7f5 fce3 	bl	800027c <__adddf3>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	4621      	mov	r1, r4
 800a8be:	f7f6 f96b 	bl	8000b98 <__aeabi_d2f>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	4b61      	ldr	r3, [pc, #388]	; (800aa4c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800a8c6:	601a      	str	r2, [r3, #0]

		//gyro ドリフト量計算
		if(gyro_drift_flag){
 800a8c8:	4b61      	ldr	r3, [pc, #388]	; (800aa50 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d04b      	beq.n	800a96a <HAL_TIM_PeriodElapsedCallback+0x51a>
			gyro_cnt ++;
 800a8d2:	4b60      	ldr	r3, [pc, #384]	; (800aa54 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	4a5e      	ldr	r2, [pc, #376]	; (800aa54 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800a8da:	6013      	str	r3, [r2, #0]
			if(gyro_cnt >= 2)dif_omega_z += old_omega_z - gyro_read_z();
 800a8dc:	4b5d      	ldr	r3, [pc, #372]	; (800aa54 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	dd10      	ble.n	800a906 <HAL_TIM_PeriodElapsedCallback+0x4b6>
 800a8e4:	4b5c      	ldr	r3, [pc, #368]	; (800aa58 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800a8e6:	ed93 8a00 	vldr	s16, [r3]
 800a8ea:	f7ff fd51 	bl	800a390 <gyro_read_z>
 800a8ee:	eef0 7a40 	vmov.f32	s15, s0
 800a8f2:	ee38 7a67 	vsub.f32	s14, s16, s15
 800a8f6:	4b59      	ldr	r3, [pc, #356]	; (800aa5c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800a8f8:	edd3 7a00 	vldr	s15, [r3]
 800a8fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a900:	4b56      	ldr	r3, [pc, #344]	; (800aa5c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800a902:	edc3 7a00 	vstr	s15, [r3]
			old_omega_z = gyro_read_z();
 800a906:	f7ff fd43 	bl	800a390 <gyro_read_z>
 800a90a:	eef0 7a40 	vmov.f32	s15, s0
 800a90e:	4b52      	ldr	r3, [pc, #328]	; (800aa58 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800a910:	edc3 7a00 	vstr	s15, [r3]
			full_led_write(YELLOW);
 800a914:	2006      	movs	r0, #6
 800a916:	f004 fc17 	bl	800f148 <full_led_write>
			if(gyro_cnt >= 1001) {
 800a91a:	4b4e      	ldr	r3, [pc, #312]	; (800aa54 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a922:	dd1a      	ble.n	800a95a <HAL_TIM_PeriodElapsedCallback+0x50a>
				gyro_drift_flag = 0;
 800a924:	4b4a      	ldr	r3, [pc, #296]	; (800aa50 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800a926:	2200      	movs	r2, #0
 800a928:	701a      	strb	r2, [r3, #0]
				gyro_drift_value = dif_omega_z / gyro_cnt-1;
 800a92a:	4b4c      	ldr	r3, [pc, #304]	; (800aa5c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800a92c:	edd3 6a00 	vldr	s13, [r3]
 800a930:	4b48      	ldr	r3, [pc, #288]	; (800aa54 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	ee07 3a90 	vmov	s15, r3
 800a938:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a93c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a944:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a948:	4b45      	ldr	r3, [pc, #276]	; (800aa60 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800a94a:	edc3 7a00 	vstr	s15, [r3]
				gyro_cnt = 0;
 800a94e:	4b41      	ldr	r3, [pc, #260]	; (800aa54 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800a950:	2200      	movs	r2, #0
 800a952:	601a      	str	r2, [r3, #0]
				full_led_write(BLUEGREEN);
 800a954:	2004      	movs	r0, #4
 800a956:	f004 fbf7 	bl	800f148 <full_led_write>
			}
			degree_z = 0;
 800a95a:	4b3c      	ldr	r3, [pc, #240]	; (800aa4c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800a95c:	f04f 0200 	mov.w	r2, #0
 800a960:	601a      	str	r2, [r3, #0]
			target_degree_z = 0;
 800a962:	4b40      	ldr	r3, [pc, #256]	; (800aa64 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800a964:	f04f 0200 	mov.w	r2, #0
 800a968:	601a      	str	r2, [r3, #0]
		}


		if(enkai_flag){
 800a96a:	4b3f      	ldr	r3, [pc, #252]	; (800aa68 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	2b00      	cmp	r3, #0
 800a972:	f000 80d8 	beq.w	800ab26 <HAL_TIM_PeriodElapsedCallback+0x6d6>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 800a976:	4b35      	ldr	r3, [pc, #212]	; (800aa4c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800a978:	ed93 7a00 	vldr	s14, [r3]
 800a97c:	4b39      	ldr	r3, [pc, #228]	; (800aa64 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800a97e:	edd3 7a00 	vldr	s15, [r3]
 800a982:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a986:	ee17 0a90 	vmov	r0, s15
 800a98a:	f7f5 fdd5 	bl	8000538 <__aeabi_f2d>
 800a98e:	a320      	add	r3, pc, #128	; (adr r3, 800aa10 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800a990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a994:	f7f5 fe28 	bl	80005e8 <__aeabi_dmul>
 800a998:	4603      	mov	r3, r0
 800a99a:	460c      	mov	r4, r1
 800a99c:	4618      	mov	r0, r3
 800a99e:	4621      	mov	r1, r4
 800a9a0:	f7f6 f8fa 	bl	8000b98 <__aeabi_d2f>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	4b31      	ldr	r3, [pc, #196]	; (800aa6c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800a9a8:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 800a9aa:	4b30      	ldr	r3, [pc, #192]	; (800aa6c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800a9ac:	edd3 7a00 	vldr	s15, [r3]
 800a9b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9b8:	dd5e      	ble.n	800aa78 <HAL_TIM_PeriodElapsedCallback+0x628>
				target_speed_l = sqrt(2*accel_l*target_dist);
 800a9ba:	4b2d      	ldr	r3, [pc, #180]	; (800aa70 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800a9bc:	edd3 7a00 	vldr	s15, [r3]
 800a9c0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a9c4:	4b29      	ldr	r3, [pc, #164]	; (800aa6c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800a9c6:	edd3 7a00 	vldr	s15, [r3]
 800a9ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9ce:	ee17 0a90 	vmov	r0, s15
 800a9d2:	f7f5 fdb1 	bl	8000538 <__aeabi_f2d>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	460c      	mov	r4, r1
 800a9da:	ec44 3b10 	vmov	d0, r3, r4
 800a9de:	f006 f94d 	bl	8010c7c <sqrt>
 800a9e2:	ec54 3b10 	vmov	r3, r4, d0
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	f7f6 f8d5 	bl	8000b98 <__aeabi_d2f>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	4b20      	ldr	r3, [pc, #128]	; (800aa74 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800a9f2:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 800a9f4:	4b1f      	ldr	r3, [pc, #124]	; (800aa74 <HAL_TIM_PeriodElapsedCallback+0x624>)
 800a9f6:	edd3 7a00 	vldr	s15, [r3]
 800a9fa:	eef1 7a67 	vneg.f32	s15, s15
 800a9fe:	4b06      	ldr	r3, [pc, #24]	; (800aa18 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800aa00:	edc3 7a00 	vstr	s15, [r3]
 800aa04:	e065      	b.n	800aad2 <HAL_TIM_PeriodElapsedCallback+0x682>
 800aa06:	bf00      	nop
 800aa08:	d2f1a9fc 	.word	0xd2f1a9fc
 800aa0c:	3f50624d 	.word	0x3f50624d
 800aa10:	d7653223 	.word	0xd7653223
 800aa14:	3fe26e40 	.word	0x3fe26e40
 800aa18:	200001d8 	.word	0x200001d8
 800aa1c:	20000fb0 	.word	0x20000fb0
 800aa20:	200001dc 	.word	0x200001dc
 800aa24:	200002f4 	.word	0x200002f4
 800aa28:	20000c50 	.word	0x20000c50
 800aa2c:	200007b8 	.word	0x200007b8
 800aa30:	20000140 	.word	0x20000140
 800aa34:	20000fac 	.word	0x20000fac
 800aa38:	20000148 	.word	0x20000148
 800aa3c:	20000b30 	.word	0x20000b30
 800aa40:	200007bc 	.word	0x200007bc
 800aa44:	20000494 	.word	0x20000494
 800aa48:	200012e8 	.word	0x200012e8
 800aa4c:	20000b9c 	.word	0x20000b9c
 800aa50:	20000adc 	.word	0x20000adc
 800aa54:	20000144 	.word	0x20000144
 800aa58:	20001610 	.word	0x20001610
 800aa5c:	20000be4 	.word	0x20000be4
 800aa60:	20000c38 	.word	0x20000c38
 800aa64:	20000c40 	.word	0x20000c40
 800aa68:	20000bf4 	.word	0x20000bf4
 800aa6c:	20000fbc 	.word	0x20000fbc
 800aa70:	20000da0 	.word	0x20000da0
 800aa74:	20000c44 	.word	0x20000c44
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 800aa78:	4bab      	ldr	r3, [pc, #684]	; (800ad28 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 800aa7a:	edd3 7a00 	vldr	s15, [r3]
 800aa7e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800aa82:	4baa      	ldr	r3, [pc, #680]	; (800ad2c <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800aa84:	edd3 7a00 	vldr	s15, [r3]
 800aa88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa8c:	eef1 7a67 	vneg.f32	s15, s15
 800aa90:	ee17 3a90 	vmov	r3, s15
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7f5 fd4f 	bl	8000538 <__aeabi_f2d>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	460c      	mov	r4, r1
 800aa9e:	ec44 3b10 	vmov	d0, r3, r4
 800aaa2:	f006 f8eb 	bl	8010c7c <sqrt>
 800aaa6:	ec54 3b10 	vmov	r3, r4, d0
 800aaaa:	4618      	mov	r0, r3
 800aaac:	4621      	mov	r1, r4
 800aaae:	f7f6 f873 	bl	8000b98 <__aeabi_d2f>
 800aab2:	4603      	mov	r3, r0
 800aab4:	ee07 3a90 	vmov	s15, r3
 800aab8:	eef1 7a67 	vneg.f32	s15, s15
 800aabc:	4b9c      	ldr	r3, [pc, #624]	; (800ad30 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800aabe:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 800aac2:	4b9b      	ldr	r3, [pc, #620]	; (800ad30 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800aac4:	edd3 7a00 	vldr	s15, [r3]
 800aac8:	eef1 7a67 	vneg.f32	s15, s15
 800aacc:	4b99      	ldr	r3, [pc, #612]	; (800ad34 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800aace:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 800aad2:	4b97      	ldr	r3, [pc, #604]	; (800ad30 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800aad4:	ed93 7a00 	vldr	s14, [r3]
 800aad8:	4b97      	ldr	r3, [pc, #604]	; (800ad38 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800aada:	edd3 7a00 	vldr	s15, [r3]
 800aade:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aae2:	4b96      	ldr	r3, [pc, #600]	; (800ad3c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800aae4:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800aae8:	4b94      	ldr	r3, [pc, #592]	; (800ad3c <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800aaea:	edd3 7a00 	vldr	s15, [r3]
 800aaee:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800aaf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aaf6:	4b92      	ldr	r3, [pc, #584]	; (800ad40 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800aaf8:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800aafc:	4b8d      	ldr	r3, [pc, #564]	; (800ad34 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800aafe:	ed93 7a00 	vldr	s14, [r3]
 800ab02:	4b90      	ldr	r3, [pc, #576]	; (800ad44 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800ab04:	edd3 7a00 	vldr	s15, [r3]
 800ab08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab0c:	4b8e      	ldr	r3, [pc, #568]	; (800ad48 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800ab0e:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800ab12:	4b8d      	ldr	r3, [pc, #564]	; (800ad48 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800ab14:	edd3 7a00 	vldr	s15, [r3]
 800ab18:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800ab1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab20:	4b8a      	ldr	r3, [pc, #552]	; (800ad4c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ab22:	edc3 7a00 	vstr	s15, [r3]
		}


		if(MF.FLAG.FWALL){
 800ab26:	4b8a      	ldr	r3, [pc, #552]	; (800ad50 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800ab28:	881b      	ldrh	r3, [r3, #0]
 800ab2a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f000 8096 	beq.w	800ac62 <HAL_TIM_PeriodElapsedCallback+0x812>
			pulse_l = (OFFSET_FWALL_L - ad_fl) * 0.04;
 800ab36:	4b87      	ldr	r3, [pc, #540]	; (800ad54 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7f5 fcd8 	bl	80004f4 <__aeabi_ui2d>
 800ab44:	a372      	add	r3, pc, #456	; (adr r3, 800ad10 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800ab46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4a:	f7f5 fd4d 	bl	80005e8 <__aeabi_dmul>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	460c      	mov	r4, r1
 800ab52:	4618      	mov	r0, r3
 800ab54:	4621      	mov	r1, r4
 800ab56:	f7f6 f81f 	bl	8000b98 <__aeabi_d2f>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	4b78      	ldr	r3, [pc, #480]	; (800ad40 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800ab5e:	601a      	str	r2, [r3, #0]
			pulse_r = (OFFSET_FWALL_R - ad_fr) * 0.08;
 800ab60:	4b7d      	ldr	r3, [pc, #500]	; (800ad58 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7f5 fcc3 	bl	80004f4 <__aeabi_ui2d>
 800ab6e:	a36a      	add	r3, pc, #424	; (adr r3, 800ad18 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 800ab70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab74:	f7f5 fd38 	bl	80005e8 <__aeabi_dmul>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	4621      	mov	r1, r4
 800ab80:	f7f6 f80a 	bl	8000b98 <__aeabi_d2f>
 800ab84:	4602      	mov	r2, r0
 800ab86:	4b71      	ldr	r3, [pc, #452]	; (800ad4c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ab88:	601a      	str	r2, [r3, #0]
			pulse_l = min(max(pulse_l, -100), 100);
 800ab8a:	4b6d      	ldr	r3, [pc, #436]	; (800ad40 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800ab8c:	edd3 7a00 	vldr	s15, [r3]
 800ab90:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800ad5c <HAL_TIM_PeriodElapsedCallback+0x90c>
 800ab94:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab9c:	bfcc      	ite	gt
 800ab9e:	2301      	movgt	r3, #1
 800aba0:	2300      	movle	r3, #0
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	f083 0301 	eor.w	r3, r3, #1
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d111      	bne.n	800abd2 <HAL_TIM_PeriodElapsedCallback+0x782>
 800abae:	4b64      	ldr	r3, [pc, #400]	; (800ad40 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800abb0:	edd3 7a00 	vldr	s15, [r3]
 800abb4:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800ad60 <HAL_TIM_PeriodElapsedCallback+0x910>
 800abb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc0:	bfcc      	ite	gt
 800abc2:	2301      	movgt	r3, #1
 800abc4:	2300      	movle	r3, #0
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	f083 0301 	eor.w	r3, r3, #1
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d00e      	beq.n	800abf0 <HAL_TIM_PeriodElapsedCallback+0x7a0>
 800abd2:	4b5b      	ldr	r3, [pc, #364]	; (800ad40 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800abd4:	edd3 7a00 	vldr	s15, [r3]
 800abd8:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800ad5c <HAL_TIM_PeriodElapsedCallback+0x90c>
 800abdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abe4:	dd02      	ble.n	800abec <HAL_TIM_PeriodElapsedCallback+0x79c>
 800abe6:	4b56      	ldr	r3, [pc, #344]	; (800ad40 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	e002      	b.n	800abf2 <HAL_TIM_PeriodElapsedCallback+0x7a2>
 800abec:	4b5d      	ldr	r3, [pc, #372]	; (800ad64 <HAL_TIM_PeriodElapsedCallback+0x914>)
 800abee:	e000      	b.n	800abf2 <HAL_TIM_PeriodElapsedCallback+0x7a2>
 800abf0:	4b5d      	ldr	r3, [pc, #372]	; (800ad68 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800abf2:	4a53      	ldr	r2, [pc, #332]	; (800ad40 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800abf4:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -100), 100);
 800abf6:	4b55      	ldr	r3, [pc, #340]	; (800ad4c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800abf8:	edd3 7a00 	vldr	s15, [r3]
 800abfc:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800ad5c <HAL_TIM_PeriodElapsedCallback+0x90c>
 800ac00:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac08:	bfcc      	ite	gt
 800ac0a:	2301      	movgt	r3, #1
 800ac0c:	2300      	movle	r3, #0
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	f083 0301 	eor.w	r3, r3, #1
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d111      	bne.n	800ac3e <HAL_TIM_PeriodElapsedCallback+0x7ee>
 800ac1a:	4b4c      	ldr	r3, [pc, #304]	; (800ad4c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ac1c:	edd3 7a00 	vldr	s15, [r3]
 800ac20:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800ad60 <HAL_TIM_PeriodElapsedCallback+0x910>
 800ac24:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac2c:	bfcc      	ite	gt
 800ac2e:	2301      	movgt	r3, #1
 800ac30:	2300      	movle	r3, #0
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	f083 0301 	eor.w	r3, r3, #1
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00e      	beq.n	800ac5c <HAL_TIM_PeriodElapsedCallback+0x80c>
 800ac3e:	4b43      	ldr	r3, [pc, #268]	; (800ad4c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ac40:	edd3 7a00 	vldr	s15, [r3]
 800ac44:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800ad5c <HAL_TIM_PeriodElapsedCallback+0x90c>
 800ac48:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac50:	dd02      	ble.n	800ac58 <HAL_TIM_PeriodElapsedCallback+0x808>
 800ac52:	4b3e      	ldr	r3, [pc, #248]	; (800ad4c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	e002      	b.n	800ac5e <HAL_TIM_PeriodElapsedCallback+0x80e>
 800ac58:	4b42      	ldr	r3, [pc, #264]	; (800ad64 <HAL_TIM_PeriodElapsedCallback+0x914>)
 800ac5a:	e000      	b.n	800ac5e <HAL_TIM_PeriodElapsedCallback+0x80e>
 800ac5c:	4b42      	ldr	r3, [pc, #264]	; (800ad68 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800ac5e:	4a3b      	ldr	r2, [pc, #236]	; (800ad4c <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800ac60:	6013      	str	r3, [r2, #0]

		}


		if(MF.FLAG.GYRO){
 800ac62:	4b3b      	ldr	r3, [pc, #236]	; (800ad50 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800ac64:	881b      	ldrh	r3, [r3, #0]
 800ac66:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f000 8143 	beq.w	800aef8 <HAL_TIM_PeriodElapsedCallback+0xaa8>
			target_omega_z += target_degaccel_z * 0.001;
 800ac72:	4b3e      	ldr	r3, [pc, #248]	; (800ad6c <HAL_TIM_PeriodElapsedCallback+0x91c>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7f5 fc5e 	bl	8000538 <__aeabi_f2d>
 800ac7c:	a328      	add	r3, pc, #160	; (adr r3, 800ad20 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 800ac7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac82:	f7f5 fcb1 	bl	80005e8 <__aeabi_dmul>
 800ac86:	4603      	mov	r3, r0
 800ac88:	460c      	mov	r4, r1
 800ac8a:	4625      	mov	r5, r4
 800ac8c:	461c      	mov	r4, r3
 800ac8e:	4b38      	ldr	r3, [pc, #224]	; (800ad70 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7f5 fc50 	bl	8000538 <__aeabi_f2d>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	4629      	mov	r1, r5
 800aca0:	f7f5 faec 	bl	800027c <__adddf3>
 800aca4:	4603      	mov	r3, r0
 800aca6:	460c      	mov	r4, r1
 800aca8:	4618      	mov	r0, r3
 800acaa:	4621      	mov	r1, r4
 800acac:	f7f5 ff74 	bl	8000b98 <__aeabi_d2f>
 800acb0:	4602      	mov	r2, r0
 800acb2:	4b2f      	ldr	r3, [pc, #188]	; (800ad70 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800acb4:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 800acb6:	4b2e      	ldr	r3, [pc, #184]	; (800ad70 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800acb8:	ed93 7a00 	vldr	s14, [r3]
 800acbc:	4b2d      	ldr	r3, [pc, #180]	; (800ad74 <HAL_TIM_PeriodElapsedCallback+0x924>)
 800acbe:	edd3 7a00 	vldr	s15, [r3]
 800acc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800acc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acca:	dd03      	ble.n	800acd4 <HAL_TIM_PeriodElapsedCallback+0x884>
 800accc:	4b29      	ldr	r3, [pc, #164]	; (800ad74 <HAL_TIM_PeriodElapsedCallback+0x924>)
 800acce:	edd3 7a00 	vldr	s15, [r3]
 800acd2:	e002      	b.n	800acda <HAL_TIM_PeriodElapsedCallback+0x88a>
 800acd4:	4b26      	ldr	r3, [pc, #152]	; (800ad70 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800acd6:	edd3 7a00 	vldr	s15, [r3]
 800acda:	4b27      	ldr	r3, [pc, #156]	; (800ad78 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800acdc:	ed93 7a00 	vldr	s14, [r3]
 800ace0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ace4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ace8:	dd48      	ble.n	800ad7c <HAL_TIM_PeriodElapsedCallback+0x92c>
 800acea:	4b21      	ldr	r3, [pc, #132]	; (800ad70 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800acec:	ed93 7a00 	vldr	s14, [r3]
 800acf0:	4b20      	ldr	r3, [pc, #128]	; (800ad74 <HAL_TIM_PeriodElapsedCallback+0x924>)
 800acf2:	edd3 7a00 	vldr	s15, [r3]
 800acf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800acfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acfe:	dd02      	ble.n	800ad06 <HAL_TIM_PeriodElapsedCallback+0x8b6>
 800ad00:	4b1c      	ldr	r3, [pc, #112]	; (800ad74 <HAL_TIM_PeriodElapsedCallback+0x924>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	e03c      	b.n	800ad80 <HAL_TIM_PeriodElapsedCallback+0x930>
 800ad06:	4b1a      	ldr	r3, [pc, #104]	; (800ad70 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	e039      	b.n	800ad80 <HAL_TIM_PeriodElapsedCallback+0x930>
 800ad0c:	f3af 8000 	nop.w
 800ad10:	47ae147b 	.word	0x47ae147b
 800ad14:	3fa47ae1 	.word	0x3fa47ae1
 800ad18:	47ae147b 	.word	0x47ae147b
 800ad1c:	3fb47ae1 	.word	0x3fb47ae1
 800ad20:	d2f1a9fc 	.word	0xd2f1a9fc
 800ad24:	3f50624d 	.word	0x3f50624d
 800ad28:	20000da0 	.word	0x20000da0
 800ad2c:	20000fbc 	.word	0x20000fbc
 800ad30:	20000c44 	.word	0x20000c44
 800ad34:	200001d8 	.word	0x200001d8
 800ad38:	20000b30 	.word	0x20000b30
 800ad3c:	20000ba0 	.word	0x20000ba0
 800ad40:	20000be8 	.word	0x20000be8
 800ad44:	200002f4 	.word	0x200002f4
 800ad48:	20000c50 	.word	0x20000c50
 800ad4c:	200007b8 	.word	0x200007b8
 800ad50:	20000fac 	.word	0x20000fac
 800ad54:	20000d9c 	.word	0x20000d9c
 800ad58:	20000c48 	.word	0x20000c48
 800ad5c:	c2c80000 	.word	0xc2c80000
 800ad60:	42c80000 	.word	0x42c80000
 800ad64:	c2c80000 	.word	0xc2c80000
 800ad68:	42c80000 	.word	0x42c80000
 800ad6c:	20000b98 	.word	0x20000b98
 800ad70:	200001e0 	.word	0x200001e0
 800ad74:	20000b24 	.word	0x20000b24
 800ad78:	200002f0 	.word	0x200002f0
 800ad7c:	4bac      	ldr	r3, [pc, #688]	; (800b030 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4aac      	ldr	r2, [pc, #688]	; (800b034 <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 800ad82:	6013      	str	r3, [r2, #0]

			epsilon_omega = target_omega_z - gyro_read_z();
 800ad84:	4bab      	ldr	r3, [pc, #684]	; (800b034 <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 800ad86:	ed93 8a00 	vldr	s16, [r3]
 800ad8a:	f7ff fb01 	bl	800a390 <gyro_read_z>
 800ad8e:	eef0 7a40 	vmov.f32	s15, s0
 800ad92:	ee78 7a67 	vsub.f32	s15, s16, s15
 800ad96:	4ba8      	ldr	r3, [pc, #672]	; (800b038 <HAL_TIM_PeriodElapsedCallback+0xbe8>)
 800ad98:	edc3 7a00 	vstr	s15, [r3]

			target_speed_l = speed_G - (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800ad9c:	4ba7      	ldr	r3, [pc, #668]	; (800b03c <HAL_TIM_PeriodElapsedCallback+0xbec>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7f5 fbc9 	bl	8000538 <__aeabi_f2d>
 800ada6:	4604      	mov	r4, r0
 800ada8:	460d      	mov	r5, r1
 800adaa:	4ba3      	ldr	r3, [pc, #652]	; (800b038 <HAL_TIM_PeriodElapsedCallback+0xbe8>)
 800adac:	edd3 7a00 	vldr	s15, [r3]
 800adb0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800adb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800adb8:	4b9e      	ldr	r3, [pc, #632]	; (800b034 <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 800adba:	edd3 7a00 	vldr	s15, [r3]
 800adbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adc2:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800b040 <HAL_TIM_PeriodElapsedCallback+0xbf0>
 800adc6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800adca:	ee16 0a90 	vmov	r0, s13
 800adce:	f7f5 fbb3 	bl	8000538 <__aeabi_f2d>
 800add2:	a395      	add	r3, pc, #596	; (adr r3, 800b028 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 800add4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add8:	f7f5 fc06 	bl	80005e8 <__aeabi_dmul>
 800addc:	4602      	mov	r2, r0
 800adde:	460b      	mov	r3, r1
 800ade0:	4610      	mov	r0, r2
 800ade2:	4619      	mov	r1, r3
 800ade4:	f04f 0200 	mov.w	r2, #0
 800ade8:	4b96      	ldr	r3, [pc, #600]	; (800b044 <HAL_TIM_PeriodElapsedCallback+0xbf4>)
 800adea:	f7f5 fbfd 	bl	80005e8 <__aeabi_dmul>
 800adee:	4602      	mov	r2, r0
 800adf0:	460b      	mov	r3, r1
 800adf2:	4610      	mov	r0, r2
 800adf4:	4619      	mov	r1, r3
 800adf6:	f04f 0200 	mov.w	r2, #0
 800adfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800adfe:	f7f5 fd1d 	bl	800083c <__aeabi_ddiv>
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	4620      	mov	r0, r4
 800ae08:	4629      	mov	r1, r5
 800ae0a:	f7f5 fa35 	bl	8000278 <__aeabi_dsub>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	460c      	mov	r4, r1
 800ae12:	4618      	mov	r0, r3
 800ae14:	4621      	mov	r1, r4
 800ae16:	f7f5 febf 	bl	8000b98 <__aeabi_d2f>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	4b8a      	ldr	r3, [pc, #552]	; (800b048 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
 800ae1e:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G + (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800ae20:	4b86      	ldr	r3, [pc, #536]	; (800b03c <HAL_TIM_PeriodElapsedCallback+0xbec>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7f5 fb87 	bl	8000538 <__aeabi_f2d>
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	460d      	mov	r5, r1
 800ae2e:	4b82      	ldr	r3, [pc, #520]	; (800b038 <HAL_TIM_PeriodElapsedCallback+0xbe8>)
 800ae30:	edd3 7a00 	vldr	s15, [r3]
 800ae34:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800ae38:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ae3c:	4b7d      	ldr	r3, [pc, #500]	; (800b034 <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 800ae3e:	edd3 7a00 	vldr	s15, [r3]
 800ae42:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae46:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800b040 <HAL_TIM_PeriodElapsedCallback+0xbf0>
 800ae4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ae4e:	ee16 0a90 	vmov	r0, s13
 800ae52:	f7f5 fb71 	bl	8000538 <__aeabi_f2d>
 800ae56:	a374      	add	r3, pc, #464	; (adr r3, 800b028 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 800ae58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5c:	f7f5 fbc4 	bl	80005e8 <__aeabi_dmul>
 800ae60:	4602      	mov	r2, r0
 800ae62:	460b      	mov	r3, r1
 800ae64:	4610      	mov	r0, r2
 800ae66:	4619      	mov	r1, r3
 800ae68:	f04f 0200 	mov.w	r2, #0
 800ae6c:	4b75      	ldr	r3, [pc, #468]	; (800b044 <HAL_TIM_PeriodElapsedCallback+0xbf4>)
 800ae6e:	f7f5 fbbb 	bl	80005e8 <__aeabi_dmul>
 800ae72:	4602      	mov	r2, r0
 800ae74:	460b      	mov	r3, r1
 800ae76:	4610      	mov	r0, r2
 800ae78:	4619      	mov	r1, r3
 800ae7a:	f04f 0200 	mov.w	r2, #0
 800ae7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae82:	f7f5 fcdb 	bl	800083c <__aeabi_ddiv>
 800ae86:	4602      	mov	r2, r0
 800ae88:	460b      	mov	r3, r1
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	4629      	mov	r1, r5
 800ae8e:	f7f5 f9f5 	bl	800027c <__adddf3>
 800ae92:	4603      	mov	r3, r0
 800ae94:	460c      	mov	r4, r1
 800ae96:	4618      	mov	r0, r3
 800ae98:	4621      	mov	r1, r4
 800ae9a:	f7f5 fe7d 	bl	8000b98 <__aeabi_d2f>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	4b6a      	ldr	r3, [pc, #424]	; (800b04c <HAL_TIM_PeriodElapsedCallback+0xbfc>)
 800aea2:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 800aea4:	4b68      	ldr	r3, [pc, #416]	; (800b048 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
 800aea6:	ed93 7a00 	vldr	s14, [r3]
 800aeaa:	4b69      	ldr	r3, [pc, #420]	; (800b050 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 800aeac:	edd3 7a00 	vldr	s15, [r3]
 800aeb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aeb4:	4b67      	ldr	r3, [pc, #412]	; (800b054 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 800aeb6:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800aeba:	4b66      	ldr	r3, [pc, #408]	; (800b054 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 800aebc:	edd3 7a00 	vldr	s15, [r3]
 800aec0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800aec4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aec8:	4b63      	ldr	r3, [pc, #396]	; (800b058 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800aeca:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800aece:	4b5f      	ldr	r3, [pc, #380]	; (800b04c <HAL_TIM_PeriodElapsedCallback+0xbfc>)
 800aed0:	ed93 7a00 	vldr	s14, [r3]
 800aed4:	4b61      	ldr	r3, [pc, #388]	; (800b05c <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 800aed6:	edd3 7a00 	vldr	s15, [r3]
 800aeda:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aede:	4b60      	ldr	r3, [pc, #384]	; (800b060 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 800aee0:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800aee4:	4b5e      	ldr	r3, [pc, #376]	; (800b060 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 800aee6:	edd3 7a00 	vldr	s15, [r3]
 800aeea:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800aeee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aef2:	4b5c      	ldr	r3, [pc, #368]	; (800b064 <HAL_TIM_PeriodElapsedCallback+0xc14>)
 800aef4:	edc3 7a00 	vstr	s15, [r3]
		}


		//ADchange interrupt
		uint16_t delay;
		tp = (tp+1)%3;
 800aef8:	4b5b      	ldr	r3, [pc, #364]	; (800b068 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	1c5a      	adds	r2, r3, #1
 800aefe:	4b5b      	ldr	r3, [pc, #364]	; (800b06c <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 800af00:	fb83 3102 	smull	r3, r1, r3, r2
 800af04:	17d3      	asrs	r3, r2, #31
 800af06:	1ac9      	subs	r1, r1, r3
 800af08:	460b      	mov	r3, r1
 800af0a:	005b      	lsls	r3, r3, #1
 800af0c:	440b      	add	r3, r1
 800af0e:	1ad1      	subs	r1, r2, r3
 800af10:	b2ca      	uxtb	r2, r1
 800af12:	4b55      	ldr	r3, [pc, #340]	; (800b068 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 800af14:	701a      	strb	r2, [r3, #0]

		switch(tp){
 800af16:	4b54      	ldr	r3, [pc, #336]	; (800b068 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d044      	beq.n	800afa8 <HAL_TIM_PeriodElapsedCallback+0xb58>
 800af1e:	2b02      	cmp	r3, #2
 800af20:	f000 80b4 	beq.w	800b08c <HAL_TIM_PeriodElapsedCallback+0xc3c>
 800af24:	2b00      	cmp	r3, #0
 800af26:	f040 82cd 	bne.w	800b4c4 <HAL_TIM_PeriodElapsedCallback+0x1074>
		  case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); 	//L
 800af2a:	2201      	movs	r2, #1
 800af2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800af30:	484f      	ldr	r0, [pc, #316]	; (800b070 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800af32:	f7f7 f9e7 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800af36:	2300      	movs	r3, #0
 800af38:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800af3a:	e002      	b.n	800af42 <HAL_TIM_PeriodElapsedCallback+0xaf2>
 800af3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af3e:	3301      	adds	r3, #1
 800af40:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800af42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af44:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800af48:	4293      	cmp	r3, r2
 800af4a:	d9f7      	bls.n	800af3c <HAL_TIM_PeriodElapsedCallback+0xaec>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_3);			//L
 800af4c:	2103      	movs	r1, #3
 800af4e:	4849      	ldr	r0, [pc, #292]	; (800b074 <HAL_TIM_PeriodElapsedCallback+0xc24>)
 800af50:	f001 fa08 	bl	800c364 <get_adc_value>
 800af54:	4603      	mov	r3, r0
 800af56:	461a      	mov	r2, r3
 800af58:	4b47      	ldr	r3, [pc, #284]	; (800b078 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800af5a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800af5c:	2200      	movs	r2, #0
 800af5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800af62:	4843      	ldr	r0, [pc, #268]	; (800b070 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800af64:	f7f7 f9ce 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  	//R
 800af68:	2201      	movs	r2, #1
 800af6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af6e:	4843      	ldr	r0, [pc, #268]	; (800b07c <HAL_TIM_PeriodElapsedCallback+0xc2c>)
 800af70:	f7f7 f9c8 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800af74:	2300      	movs	r3, #0
 800af76:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800af78:	e002      	b.n	800af80 <HAL_TIM_PeriodElapsedCallback+0xb30>
 800af7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af7c:	3301      	adds	r3, #1
 800af7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800af80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af82:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800af86:	4293      	cmp	r3, r2
 800af88:	d9f7      	bls.n	800af7a <HAL_TIM_PeriodElapsedCallback+0xb2a>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_1);			//R
 800af8a:	2101      	movs	r1, #1
 800af8c:	4839      	ldr	r0, [pc, #228]	; (800b074 <HAL_TIM_PeriodElapsedCallback+0xc24>)
 800af8e:	f001 f9e9 	bl	800c364 <get_adc_value>
 800af92:	4603      	mov	r3, r0
 800af94:	461a      	mov	r2, r3
 800af96:	4b3a      	ldr	r3, [pc, #232]	; (800b080 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800af98:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800af9a:	2200      	movs	r2, #0
 800af9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800afa0:	4836      	ldr	r0, [pc, #216]	; (800b07c <HAL_TIM_PeriodElapsedCallback+0xc2c>)
 800afa2:	f7f7 f9af 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800afa6:	e28d      	b.n	800b4c4 <HAL_TIM_PeriodElapsedCallback+0x1074>

		  case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); 	//FL
 800afa8:	2201      	movs	r2, #1
 800afaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800afae:	4830      	ldr	r0, [pc, #192]	; (800b070 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800afb0:	f7f7 f9a8 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800afb4:	2300      	movs	r3, #0
 800afb6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800afb8:	e002      	b.n	800afc0 <HAL_TIM_PeriodElapsedCallback+0xb70>
 800afba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800afbc:	3301      	adds	r3, #1
 800afbe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800afc0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800afc2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d9f7      	bls.n	800afba <HAL_TIM_PeriodElapsedCallback+0xb6a>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_2);			//FL
 800afca:	2102      	movs	r1, #2
 800afcc:	4829      	ldr	r0, [pc, #164]	; (800b074 <HAL_TIM_PeriodElapsedCallback+0xc24>)
 800afce:	f001 f9c9 	bl	800c364 <get_adc_value>
 800afd2:	4603      	mov	r3, r0
 800afd4:	461a      	mov	r2, r3
 800afd6:	4b2b      	ldr	r3, [pc, #172]	; (800b084 <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800afd8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800afda:	2200      	movs	r2, #0
 800afdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800afe0:	4823      	ldr	r0, [pc, #140]	; (800b070 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800afe2:	f7f7 f98f 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   	//FR
 800afe6:	2201      	movs	r2, #1
 800afe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800afec:	4820      	ldr	r0, [pc, #128]	; (800b070 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800afee:	f7f7 f989 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800aff2:	2300      	movs	r3, #0
 800aff4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800aff6:	e002      	b.n	800affe <HAL_TIM_PeriodElapsedCallback+0xbae>
 800aff8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800affa:	3301      	adds	r3, #1
 800affc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800affe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b000:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800b004:	4293      	cmp	r3, r2
 800b006:	d9f7      	bls.n	800aff8 <HAL_TIM_PeriodElapsedCallback+0xba8>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_0);			//FR
 800b008:	2100      	movs	r1, #0
 800b00a:	481a      	ldr	r0, [pc, #104]	; (800b074 <HAL_TIM_PeriodElapsedCallback+0xc24>)
 800b00c:	f001 f9aa 	bl	800c364 <get_adc_value>
 800b010:	4603      	mov	r3, r0
 800b012:	461a      	mov	r2, r3
 800b014:	4b1c      	ldr	r3, [pc, #112]	; (800b088 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 800b016:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b018:	2200      	movs	r2, #0
 800b01a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b01e:	4814      	ldr	r0, [pc, #80]	; (800b070 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800b020:	f7f7 f970 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800b024:	e24e      	b.n	800b4c4 <HAL_TIM_PeriodElapsedCallback+0x1074>
 800b026:	bf00      	nop
 800b028:	54442d18 	.word	0x54442d18
 800b02c:	400921fb 	.word	0x400921fb
 800b030:	200002f0 	.word	0x200002f0
 800b034:	200001e0 	.word	0x200001e0
 800b038:	20000490 	.word	0x20000490
 800b03c:	20000b34 	.word	0x20000b34
 800b040:	43340000 	.word	0x43340000
 800b044:	40508000 	.word	0x40508000
 800b048:	20000c44 	.word	0x20000c44
 800b04c:	200001d8 	.word	0x200001d8
 800b050:	20000b30 	.word	0x20000b30
 800b054:	20000ba0 	.word	0x20000ba0
 800b058:	20000be8 	.word	0x20000be8
 800b05c:	200002f4 	.word	0x200002f4
 800b060:	20000c50 	.word	0x20000c50
 800b064:	200007b8 	.word	0x200007b8
 800b068:	200012e4 	.word	0x200012e4
 800b06c:	55555556 	.word	0x55555556
 800b070:	40020800 	.word	0x40020800
 800b074:	20000b40 	.word	0x20000b40
 800b078:	20000b3c 	.word	0x20000b3c
 800b07c:	40020000 	.word	0x40020000
 800b080:	20000fa8 	.word	0x20000fa8
 800b084:	20000d9c 	.word	0x20000d9c
 800b088:	20000c48 	.word	0x20000c48

		  case 2:
				//
				if(MF.FLAG.WCTRL){
 800b08c:	4bc2      	ldr	r3, [pc, #776]	; (800b398 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 800b08e:	881b      	ldrh	r3, [r3, #0]
 800b090:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b094:	b2db      	uxtb	r3, r3
 800b096:	2b00      	cmp	r3, #0
 800b098:	f000 81c0 	beq.w	800b41c <HAL_TIM_PeriodElapsedCallback+0xfcc>
					if(!v_flag){
 800b09c:	4bbf      	ldr	r3, [pc, #764]	; (800b39c <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f040 80b7 	bne.w	800b214 <HAL_TIM_PeriodElapsedCallback+0xdc4>
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	857b      	strh	r3, [r7, #42]	; 0x2a
						dif_l = (int32_t) ad_l - base_l;
 800b0ae:	4bbc      	ldr	r3, [pc, #752]	; (800b3a0 <HAL_TIM_PeriodElapsedCallback+0xf50>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	b29a      	uxth	r2, r3
 800b0b4:	4bbb      	ldr	r3, [pc, #748]	; (800b3a4 <HAL_TIM_PeriodElapsedCallback+0xf54>)
 800b0b6:	881b      	ldrh	r3, [r3, #0]
 800b0b8:	1ad3      	subs	r3, r2, r3
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	b21a      	sxth	r2, r3
 800b0be:	4bba      	ldr	r3, [pc, #744]	; (800b3a8 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800b0c0:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_r - base_r;
 800b0c2:	4bba      	ldr	r3, [pc, #744]	; (800b3ac <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	4bb9      	ldr	r3, [pc, #740]	; (800b3b0 <HAL_TIM_PeriodElapsedCallback+0xf60>)
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	1ad3      	subs	r3, r2, r3
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	b21a      	sxth	r2, r3
 800b0d2:	4bb8      	ldr	r3, [pc, #736]	; (800b3b4 <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800b0d4:	801a      	strh	r2, [r3, #0]

						if(CTRL_BASE_L < dif_l || CTRL_BASE_R < dif_r){
 800b0d6:	4bb4      	ldr	r3, [pc, #720]	; (800b3a8 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800b0d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0dc:	2b23      	cmp	r3, #35	; 0x23
 800b0de:	dc04      	bgt.n	800b0ea <HAL_TIM_PeriodElapsedCallback+0xc9a>
 800b0e0:	4bb4      	ldr	r3, [pc, #720]	; (800b3b4 <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800b0e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0e6:	2b1e      	cmp	r3, #30
 800b0e8:	dd6e      	ble.n	800b1c8 <HAL_TIM_PeriodElapsedCallback+0xd78>
							if(CTRL_BASE_L < dif_l){
 800b0ea:	4baf      	ldr	r3, [pc, #700]	; (800b3a8 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800b0ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0f0:	2b23      	cmp	r3, #35	; 0x23
 800b0f2:	dd30      	ble.n	800b156 <HAL_TIM_PeriodElapsedCallback+0xd06>
								dwl_tmp += CTRL_CONT_W * dif_l;				//a比例制御値を決定
 800b0f4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800b0f8:	ee07 3a90 	vmov	s15, r3
 800b0fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b100:	4ba9      	ldr	r3, [pc, #676]	; (800b3a8 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800b102:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b106:	ee07 3a90 	vmov	s15, r3
 800b10a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b10e:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800b112:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b11a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b11e:	ee17 3a90 	vmov	r3, s15
 800b122:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += -1 * CTRL_CONT_W * dif_l;			//a比例制御値を決定
 800b124:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800b128:	ee07 3a90 	vmov	s15, r3
 800b12c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b130:	4b9d      	ldr	r3, [pc, #628]	; (800b3a8 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800b132:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b136:	ee07 3a90 	vmov	s15, r3
 800b13a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b13e:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800b142:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b14a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b14e:	ee17 3a90 	vmov	r3, s15
 800b152:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b154:	e034      	b.n	800b1c0 <HAL_TIM_PeriodElapsedCallback+0xd70>
							}
							else if(CTRL_BASE_R < dif_r){
 800b156:	4b97      	ldr	r3, [pc, #604]	; (800b3b4 <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800b158:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b15c:	2b1e      	cmp	r3, #30
 800b15e:	dd2f      	ble.n	800b1c0 <HAL_TIM_PeriodElapsedCallback+0xd70>
								dwl_tmp += -1 * CTRL_CONT_W * dif_r;				//a比例制御値を決定
 800b160:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800b164:	ee07 3a90 	vmov	s15, r3
 800b168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b16c:	4b91      	ldr	r3, [pc, #580]	; (800b3b4 <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800b16e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b172:	ee07 3a90 	vmov	s15, r3
 800b176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b17a:	eefe 6a08 	vmov.f32	s13, #232	; 0xbf400000 -0.750
 800b17e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b182:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b18a:	ee17 3a90 	vmov	r3, s15
 800b18e:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += CTRL_CONT_W * dif_r;						//a比例制御値を決定
 800b190:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800b194:	ee07 3a90 	vmov	s15, r3
 800b198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b19c:	4b85      	ldr	r3, [pc, #532]	; (800b3b4 <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800b19e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b1a2:	ee07 3a90 	vmov	s15, r3
 800b1a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1aa:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 800b1ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b1b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b1ba:	ee17 3a90 	vmov	r3, s15
 800b1be:	857b      	strh	r3, [r7, #42]	; 0x2a
							}
							W_G_flag = 1;
 800b1c0:	4b7d      	ldr	r3, [pc, #500]	; (800b3b8 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	701a      	strb	r2, [r3, #0]
 800b1c6:	e002      	b.n	800b1ce <HAL_TIM_PeriodElapsedCallback+0xd7e>
						}else{
							W_G_flag = 0;
 800b1c8:	4b7b      	ldr	r3, [pc, #492]	; (800b3b8 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	701a      	strb	r2, [r3, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800b1ce:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800b1d2:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800b1d6:	dd08      	ble.n	800b1ea <HAL_TIM_PeriodElapsedCallback+0xd9a>
 800b1d8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800b1dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b1e0:	bfa8      	it	ge
 800b1e2:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800b1e6:	b21b      	sxth	r3, r3
 800b1e8:	e000      	b.n	800b1ec <HAL_TIM_PeriodElapsedCallback+0xd9c>
 800b1ea:	4b74      	ldr	r3, [pc, #464]	; (800b3bc <HAL_TIM_PeriodElapsedCallback+0xf6c>)
 800b1ec:	4a74      	ldr	r2, [pc, #464]	; (800b3c0 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 800b1ee:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800b1f0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800b1f4:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800b1f8:	dd08      	ble.n	800b20c <HAL_TIM_PeriodElapsedCallback+0xdbc>
 800b1fa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800b1fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b202:	bfa8      	it	ge
 800b204:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800b208:	b21b      	sxth	r3, r3
 800b20a:	e000      	b.n	800b20e <HAL_TIM_PeriodElapsedCallback+0xdbe>
 800b20c:	4b6b      	ldr	r3, [pc, #428]	; (800b3bc <HAL_TIM_PeriodElapsedCallback+0xf6c>)
 800b20e:	4a6d      	ldr	r2, [pc, #436]	; (800b3c4 <HAL_TIM_PeriodElapsedCallback+0xf74>)
 800b210:	8013      	strh	r3, [r2, #0]
 800b212:	e10a      	b.n	800b42a <HAL_TIM_PeriodElapsedCallback+0xfda>
					}else{
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800b214:	2300      	movs	r3, #0
 800b216:	853b      	strh	r3, [r7, #40]	; 0x28
 800b218:	2300      	movs	r3, #0
 800b21a:	84fb      	strh	r3, [r7, #38]	; 0x26
						dif_l = (int32_t) ad_fl - BASE_FL;
 800b21c:	4b6a      	ldr	r3, [pc, #424]	; (800b3c8 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	b29b      	uxth	r3, r3
 800b222:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800b226:	b29b      	uxth	r3, r3
 800b228:	b21a      	sxth	r2, r3
 800b22a:	4b5f      	ldr	r3, [pc, #380]	; (800b3a8 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800b22c:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_fr - BASE_FR;
 800b22e:	4b67      	ldr	r3, [pc, #412]	; (800b3cc <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	b29b      	uxth	r3, r3
 800b234:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b238:	b29b      	uxth	r3, r3
 800b23a:	b21a      	sxth	r2, r3
 800b23c:	4b5d      	ldr	r3, [pc, #372]	; (800b3b4 <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800b23e:	801a      	strh	r2, [r3, #0]

						if(CTRL_BASE_FL < dif_l || CTRL_BASE_FR < dif_r){
 800b240:	4b59      	ldr	r3, [pc, #356]	; (800b3a8 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800b242:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b246:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800b24a:	dc05      	bgt.n	800b258 <HAL_TIM_PeriodElapsedCallback+0xe08>
 800b24c:	4b59      	ldr	r3, [pc, #356]	; (800b3b4 <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800b24e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b252:	2bc8      	cmp	r3, #200	; 0xc8
 800b254:	f340 80bc 	ble.w	800b3d0 <HAL_TIM_PeriodElapsedCallback+0xf80>
							if(CTRL_BASE_FL < dif_l){
 800b258:	4b53      	ldr	r3, [pc, #332]	; (800b3a8 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800b25a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b25e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800b262:	dd40      	ble.n	800b2e6 <HAL_TIM_PeriodElapsedCallback+0xe96>
								dwl_tmp += CTRL_CONT_W * 0.1 * dif_l;				//a比例制御値を決定
 800b264:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800b268:	4618      	mov	r0, r3
 800b26a:	f7f5 f953 	bl	8000514 <__aeabi_i2d>
 800b26e:	4604      	mov	r4, r0
 800b270:	460d      	mov	r5, r1
 800b272:	4b4d      	ldr	r3, [pc, #308]	; (800b3a8 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800b274:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b278:	4618      	mov	r0, r3
 800b27a:	f7f5 f94b 	bl	8000514 <__aeabi_i2d>
 800b27e:	a33e      	add	r3, pc, #248	; (adr r3, 800b378 <HAL_TIM_PeriodElapsedCallback+0xf28>)
 800b280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b284:	f7f5 f9b0 	bl	80005e8 <__aeabi_dmul>
 800b288:	4602      	mov	r2, r0
 800b28a:	460b      	mov	r3, r1
 800b28c:	4620      	mov	r0, r4
 800b28e:	4629      	mov	r1, r5
 800b290:	f7f4 fff4 	bl	800027c <__adddf3>
 800b294:	4603      	mov	r3, r0
 800b296:	460c      	mov	r4, r1
 800b298:	4618      	mov	r0, r3
 800b29a:	4621      	mov	r1, r4
 800b29c:	f7f5 fc54 	bl	8000b48 <__aeabi_d2iz>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += -1 * CTRL_CONT_W * 0.1 * dif_l;				//a比例制御値を決定
 800b2a4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7f5 f933 	bl	8000514 <__aeabi_i2d>
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	460d      	mov	r5, r1
 800b2b2:	4b3d      	ldr	r3, [pc, #244]	; (800b3a8 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 800b2b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7f5 f92b 	bl	8000514 <__aeabi_i2d>
 800b2be:	a330      	add	r3, pc, #192	; (adr r3, 800b380 <HAL_TIM_PeriodElapsedCallback+0xf30>)
 800b2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c4:	f7f5 f990 	bl	80005e8 <__aeabi_dmul>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	f7f4 ffd4 	bl	800027c <__adddf3>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	4618      	mov	r0, r3
 800b2da:	4621      	mov	r1, r4
 800b2dc:	f7f5 fc34 	bl	8000b48 <__aeabi_d2iz>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b2e4:	e044      	b.n	800b370 <HAL_TIM_PeriodElapsedCallback+0xf20>
							}
							else if(CTRL_BASE_FR < dif_r){
 800b2e6:	4b33      	ldr	r3, [pc, #204]	; (800b3b4 <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800b2e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2ec:	2bc8      	cmp	r3, #200	; 0xc8
 800b2ee:	dd3f      	ble.n	800b370 <HAL_TIM_PeriodElapsedCallback+0xf20>
								dwl_tmp += -1 * CTRL_CONT_W * 0.2 * dif_r;			//a比例制御値を決定
 800b2f0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7f5 f90d 	bl	8000514 <__aeabi_i2d>
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	460d      	mov	r5, r1
 800b2fe:	4b2d      	ldr	r3, [pc, #180]	; (800b3b4 <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800b300:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b304:	4618      	mov	r0, r3
 800b306:	f7f5 f905 	bl	8000514 <__aeabi_i2d>
 800b30a:	a31f      	add	r3, pc, #124	; (adr r3, 800b388 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 800b30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b310:	f7f5 f96a 	bl	80005e8 <__aeabi_dmul>
 800b314:	4602      	mov	r2, r0
 800b316:	460b      	mov	r3, r1
 800b318:	4620      	mov	r0, r4
 800b31a:	4629      	mov	r1, r5
 800b31c:	f7f4 ffae 	bl	800027c <__adddf3>
 800b320:	4603      	mov	r3, r0
 800b322:	460c      	mov	r4, r1
 800b324:	4618      	mov	r0, r3
 800b326:	4621      	mov	r1, r4
 800b328:	f7f5 fc0e 	bl	8000b48 <__aeabi_d2iz>
 800b32c:	4603      	mov	r3, r0
 800b32e:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += CTRL_CONT_W * 0.2 * dif_r;						//a比例制御値を決定
 800b330:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b334:	4618      	mov	r0, r3
 800b336:	f7f5 f8ed 	bl	8000514 <__aeabi_i2d>
 800b33a:	4604      	mov	r4, r0
 800b33c:	460d      	mov	r5, r1
 800b33e:	4b1d      	ldr	r3, [pc, #116]	; (800b3b4 <HAL_TIM_PeriodElapsedCallback+0xf64>)
 800b340:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b344:	4618      	mov	r0, r3
 800b346:	f7f5 f8e5 	bl	8000514 <__aeabi_i2d>
 800b34a:	a311      	add	r3, pc, #68	; (adr r3, 800b390 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 800b34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b350:	f7f5 f94a 	bl	80005e8 <__aeabi_dmul>
 800b354:	4602      	mov	r2, r0
 800b356:	460b      	mov	r3, r1
 800b358:	4620      	mov	r0, r4
 800b35a:	4629      	mov	r1, r5
 800b35c:	f7f4 ff8e 	bl	800027c <__adddf3>
 800b360:	4603      	mov	r3, r0
 800b362:	460c      	mov	r4, r1
 800b364:	4618      	mov	r0, r3
 800b366:	4621      	mov	r1, r4
 800b368:	f7f5 fbee 	bl	8000b48 <__aeabi_d2iz>
 800b36c:	4603      	mov	r3, r0
 800b36e:	84fb      	strh	r3, [r7, #38]	; 0x26
							}
							W_G_flag = 1;
 800b370:	4b11      	ldr	r3, [pc, #68]	; (800b3b8 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800b372:	2201      	movs	r2, #1
 800b374:	701a      	strb	r2, [r3, #0]
 800b376:	e02e      	b.n	800b3d6 <HAL_TIM_PeriodElapsedCallback+0xf86>
 800b378:	33333334 	.word	0x33333334
 800b37c:	3fb33333 	.word	0x3fb33333
 800b380:	33333334 	.word	0x33333334
 800b384:	bfb33333 	.word	0xbfb33333
 800b388:	33333334 	.word	0x33333334
 800b38c:	bfc33333 	.word	0xbfc33333
 800b390:	33333334 	.word	0x33333334
 800b394:	3fc33333 	.word	0x3fc33333
 800b398:	20000fac 	.word	0x20000fac
 800b39c:	20000b28 	.word	0x20000b28
 800b3a0:	20000b3c 	.word	0x20000b3c
 800b3a4:	20000384 	.word	0x20000384
 800b3a8:	20000b90 	.word	0x20000b90
 800b3ac:	20000fa8 	.word	0x20000fa8
 800b3b0:	200002f8 	.word	0x200002f8
 800b3b4:	20000bf2 	.word	0x20000bf2
 800b3b8:	20000c3c 	.word	0x20000c3c
 800b3bc:	fffffc18 	.word	0xfffffc18
 800b3c0:	20000b38 	.word	0x20000b38
 800b3c4:	20000fb8 	.word	0x20000fb8
 800b3c8:	20000d9c 	.word	0x20000d9c
 800b3cc:	20000c48 	.word	0x20000c48
						}else{
							W_G_flag = 0;
 800b3d0:	4bb0      	ldr	r3, [pc, #704]	; (800b694 <HAL_TIM_PeriodElapsedCallback+0x1244>)
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	701a      	strb	r2, [r3, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800b3d6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800b3da:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800b3de:	dd08      	ble.n	800b3f2 <HAL_TIM_PeriodElapsedCallback+0xfa2>
 800b3e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800b3e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3e8:	bfa8      	it	ge
 800b3ea:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800b3ee:	b21b      	sxth	r3, r3
 800b3f0:	e000      	b.n	800b3f4 <HAL_TIM_PeriodElapsedCallback+0xfa4>
 800b3f2:	4ba9      	ldr	r3, [pc, #676]	; (800b698 <HAL_TIM_PeriodElapsedCallback+0x1248>)
 800b3f4:	4aa9      	ldr	r2, [pc, #676]	; (800b69c <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800b3f6:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800b3f8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b3fc:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800b400:	dd08      	ble.n	800b414 <HAL_TIM_PeriodElapsedCallback+0xfc4>
 800b402:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b406:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b40a:	bfa8      	it	ge
 800b40c:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800b410:	b21b      	sxth	r3, r3
 800b412:	e000      	b.n	800b416 <HAL_TIM_PeriodElapsedCallback+0xfc6>
 800b414:	4ba0      	ldr	r3, [pc, #640]	; (800b698 <HAL_TIM_PeriodElapsedCallback+0x1248>)
 800b416:	4aa2      	ldr	r2, [pc, #648]	; (800b6a0 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 800b418:	8013      	strh	r3, [r2, #0]
 800b41a:	e006      	b.n	800b42a <HAL_TIM_PeriodElapsedCallback+0xfda>
					}
				}else{
					//a制御フラグがなければ壁制御値0
					dwl = dwr = 0;
 800b41c:	2100      	movs	r1, #0
 800b41e:	4ba0      	ldr	r3, [pc, #640]	; (800b6a0 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 800b420:	460a      	mov	r2, r1
 800b422:	801a      	strh	r2, [r3, #0]
 800b424:	4b9d      	ldr	r3, [pc, #628]	; (800b69c <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800b426:	460a      	mov	r2, r1
 800b428:	801a      	strh	r2, [r3, #0]
				}

				if(MF.FLAG.GCTRL){
 800b42a:	4b9e      	ldr	r3, [pc, #632]	; (800b6a4 <HAL_TIM_PeriodElapsedCallback+0x1254>)
 800b42c:	881b      	ldrh	r3, [r3, #0]
 800b42e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b432:	b2db      	uxtb	r3, r3
 800b434:	2b00      	cmp	r3, #0
 800b436:	d03d      	beq.n	800b4b4 <HAL_TIM_PeriodElapsedCallback+0x1064>
				}

					dg = CTRL_CONT_G * gyro_read_z();			//a角速度制御
					dg = CTRL_CONT_G * degree_z;				//a角度制御
*/
					dg = CTRL_CONT_G * (degree_z - target_degree_z);		//a角度制御(目標角度はスタートを0度とし、旋回量と対応付け)
 800b438:	4b9b      	ldr	r3, [pc, #620]	; (800b6a8 <HAL_TIM_PeriodElapsedCallback+0x1258>)
 800b43a:	ed93 7a00 	vldr	s14, [r3]
 800b43e:	4b9b      	ldr	r3, [pc, #620]	; (800b6ac <HAL_TIM_PeriodElapsedCallback+0x125c>)
 800b440:	edd3 7a00 	vldr	s15, [r3]
 800b444:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b448:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800b6b0 <HAL_TIM_PeriodElapsedCallback+0x1260>
 800b44c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b454:	ee17 3a90 	vmov	r3, s15
 800b458:	b21a      	sxth	r2, r3
 800b45a:	4b96      	ldr	r3, [pc, #600]	; (800b6b4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 800b45c:	801a      	strh	r2, [r3, #0]

					dg = max(min(CTRL_MAX_G, dg), -1 * CTRL_MAX_G);
 800b45e:	4b95      	ldr	r3, [pc, #596]	; (800b6b4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 800b460:	881b      	ldrh	r3, [r3, #0]
 800b462:	b21b      	sxth	r3, r3
 800b464:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b468:	da05      	bge.n	800b476 <HAL_TIM_PeriodElapsedCallback+0x1026>
 800b46a:	4b92      	ldr	r3, [pc, #584]	; (800b6b4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 800b46c:	881b      	ldrh	r3, [r3, #0]
 800b46e:	b21b      	sxth	r3, r3
 800b470:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800b474:	dd0c      	ble.n	800b490 <HAL_TIM_PeriodElapsedCallback+0x1040>
 800b476:	4b8f      	ldr	r3, [pc, #572]	; (800b6b4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 800b478:	881b      	ldrh	r3, [r3, #0]
 800b47a:	b21b      	sxth	r3, r3
 800b47c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b480:	da03      	bge.n	800b48a <HAL_TIM_PeriodElapsedCallback+0x103a>
 800b482:	4b8c      	ldr	r3, [pc, #560]	; (800b6b4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 800b484:	881b      	ldrh	r3, [r3, #0]
 800b486:	b21b      	sxth	r3, r3
 800b488:	e003      	b.n	800b492 <HAL_TIM_PeriodElapsedCallback+0x1042>
 800b48a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b48e:	e000      	b.n	800b492 <HAL_TIM_PeriodElapsedCallback+0x1042>
 800b490:	4b81      	ldr	r3, [pc, #516]	; (800b698 <HAL_TIM_PeriodElapsedCallback+0x1248>)
 800b492:	4a88      	ldr	r2, [pc, #544]	; (800b6b4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 800b494:	8013      	strh	r3, [r2, #0]
					dgl = dg;
 800b496:	4b87      	ldr	r3, [pc, #540]	; (800b6b4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 800b498:	881b      	ldrh	r3, [r3, #0]
 800b49a:	b21a      	sxth	r2, r3
 800b49c:	4b86      	ldr	r3, [pc, #536]	; (800b6b8 <HAL_TIM_PeriodElapsedCallback+0x1268>)
 800b49e:	801a      	strh	r2, [r3, #0]
					dgr = -1*dg;
 800b4a0:	4b84      	ldr	r3, [pc, #528]	; (800b6b4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 800b4a2:	881b      	ldrh	r3, [r3, #0]
 800b4a4:	b21b      	sxth	r3, r3
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	425b      	negs	r3, r3
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	b21a      	sxth	r2, r3
 800b4ae:	4b83      	ldr	r3, [pc, #524]	; (800b6bc <HAL_TIM_PeriodElapsedCallback+0x126c>)
 800b4b0:	801a      	strh	r2, [r3, #0]
				}else{
					//a制御フラグがなければ壁制御値0
					dgl = dgr = 0;
				}
				break;
 800b4b2:	e006      	b.n	800b4c2 <HAL_TIM_PeriodElapsedCallback+0x1072>
					dgl = dgr = 0;
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	4b81      	ldr	r3, [pc, #516]	; (800b6bc <HAL_TIM_PeriodElapsedCallback+0x126c>)
 800b4b8:	460a      	mov	r2, r1
 800b4ba:	801a      	strh	r2, [r3, #0]
 800b4bc:	4b7e      	ldr	r3, [pc, #504]	; (800b6b8 <HAL_TIM_PeriodElapsedCallback+0x1268>)
 800b4be:	460a      	mov	r2, r1
 800b4c0:	801a      	strh	r2, [r3, #0]
				break;
 800b4c2:	bf00      	nop
		}


		if(MF.FLAG.DRV){
 800b4c4:	4b77      	ldr	r3, [pc, #476]	; (800b6a4 <HAL_TIM_PeriodElapsedCallback+0x1254>)
 800b4c6:	881b      	ldrh	r3, [r3, #0]
 800b4c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f000 8198 	beq.w	800b804 <HAL_TIM_PeriodElapsedCallback+0x13b4>
			if(W_G_flag == 0){
 800b4d4:	4b6f      	ldr	r3, [pc, #444]	; (800b694 <HAL_TIM_PeriodElapsedCallback+0x1244>)
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d130      	bne.n	800b53e <HAL_TIM_PeriodElapsedCallback+0x10ee>
				pulse_l = pulse_l + dgl + dwl;
 800b4dc:	4b76      	ldr	r3, [pc, #472]	; (800b6b8 <HAL_TIM_PeriodElapsedCallback+0x1268>)
 800b4de:	881b      	ldrh	r3, [r3, #0]
 800b4e0:	b21b      	sxth	r3, r3
 800b4e2:	ee07 3a90 	vmov	s15, r3
 800b4e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b4ea:	4b75      	ldr	r3, [pc, #468]	; (800b6c0 <HAL_TIM_PeriodElapsedCallback+0x1270>)
 800b4ec:	edd3 7a00 	vldr	s15, [r3]
 800b4f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b4f4:	4b69      	ldr	r3, [pc, #420]	; (800b69c <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800b4f6:	881b      	ldrh	r3, [r3, #0]
 800b4f8:	b21b      	sxth	r3, r3
 800b4fa:	ee07 3a90 	vmov	s15, r3
 800b4fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b502:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b506:	4b6e      	ldr	r3, [pc, #440]	; (800b6c0 <HAL_TIM_PeriodElapsedCallback+0x1270>)
 800b508:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800b50c:	4b6b      	ldr	r3, [pc, #428]	; (800b6bc <HAL_TIM_PeriodElapsedCallback+0x126c>)
 800b50e:	881b      	ldrh	r3, [r3, #0]
 800b510:	b21b      	sxth	r3, r3
 800b512:	ee07 3a90 	vmov	s15, r3
 800b516:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b51a:	4b6a      	ldr	r3, [pc, #424]	; (800b6c4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 800b51c:	edd3 7a00 	vldr	s15, [r3]
 800b520:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b524:	4b5e      	ldr	r3, [pc, #376]	; (800b6a0 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 800b526:	881b      	ldrh	r3, [r3, #0]
 800b528:	b21b      	sxth	r3, r3
 800b52a:	ee07 3a90 	vmov	s15, r3
 800b52e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b532:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b536:	4b63      	ldr	r3, [pc, #396]	; (800b6c4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 800b538:	edc3 7a00 	vstr	s15, [r3]
 800b53c:	e01d      	b.n	800b57a <HAL_TIM_PeriodElapsedCallback+0x112a>
			}else{
				pulse_l = pulse_l + dwl;
 800b53e:	4b57      	ldr	r3, [pc, #348]	; (800b69c <HAL_TIM_PeriodElapsedCallback+0x124c>)
 800b540:	881b      	ldrh	r3, [r3, #0]
 800b542:	b21b      	sxth	r3, r3
 800b544:	ee07 3a90 	vmov	s15, r3
 800b548:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b54c:	4b5c      	ldr	r3, [pc, #368]	; (800b6c0 <HAL_TIM_PeriodElapsedCallback+0x1270>)
 800b54e:	edd3 7a00 	vldr	s15, [r3]
 800b552:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b556:	4b5a      	ldr	r3, [pc, #360]	; (800b6c0 <HAL_TIM_PeriodElapsedCallback+0x1270>)
 800b558:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dwr;
 800b55c:	4b50      	ldr	r3, [pc, #320]	; (800b6a0 <HAL_TIM_PeriodElapsedCallback+0x1250>)
 800b55e:	881b      	ldrh	r3, [r3, #0]
 800b560:	b21b      	sxth	r3, r3
 800b562:	ee07 3a90 	vmov	s15, r3
 800b566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b56a:	4b56      	ldr	r3, [pc, #344]	; (800b6c4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 800b56c:	edd3 7a00 	vldr	s15, [r3]
 800b570:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b574:	4b53      	ldr	r3, [pc, #332]	; (800b6c4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 800b576:	edc3 7a00 	vstr	s15, [r3]
			}
			pulse_l = min(max(pulse_l, -1000), 1000);
 800b57a:	4b51      	ldr	r3, [pc, #324]	; (800b6c0 <HAL_TIM_PeriodElapsedCallback+0x1270>)
 800b57c:	edd3 7a00 	vldr	s15, [r3]
 800b580:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800b6c8 <HAL_TIM_PeriodElapsedCallback+0x1278>
 800b584:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b58c:	bfcc      	ite	gt
 800b58e:	2301      	movgt	r3, #1
 800b590:	2300      	movle	r3, #0
 800b592:	b2db      	uxtb	r3, r3
 800b594:	f083 0301 	eor.w	r3, r3, #1
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d111      	bne.n	800b5c2 <HAL_TIM_PeriodElapsedCallback+0x1172>
 800b59e:	4b48      	ldr	r3, [pc, #288]	; (800b6c0 <HAL_TIM_PeriodElapsedCallback+0x1270>)
 800b5a0:	edd3 7a00 	vldr	s15, [r3]
 800b5a4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b6cc <HAL_TIM_PeriodElapsedCallback+0x127c>
 800b5a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5b0:	bfcc      	ite	gt
 800b5b2:	2301      	movgt	r3, #1
 800b5b4:	2300      	movle	r3, #0
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	f083 0301 	eor.w	r3, r3, #1
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d00e      	beq.n	800b5e0 <HAL_TIM_PeriodElapsedCallback+0x1190>
 800b5c2:	4b3f      	ldr	r3, [pc, #252]	; (800b6c0 <HAL_TIM_PeriodElapsedCallback+0x1270>)
 800b5c4:	edd3 7a00 	vldr	s15, [r3]
 800b5c8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800b6c8 <HAL_TIM_PeriodElapsedCallback+0x1278>
 800b5cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5d4:	dd02      	ble.n	800b5dc <HAL_TIM_PeriodElapsedCallback+0x118c>
 800b5d6:	4b3a      	ldr	r3, [pc, #232]	; (800b6c0 <HAL_TIM_PeriodElapsedCallback+0x1270>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	e002      	b.n	800b5e2 <HAL_TIM_PeriodElapsedCallback+0x1192>
 800b5dc:	4b3c      	ldr	r3, [pc, #240]	; (800b6d0 <HAL_TIM_PeriodElapsedCallback+0x1280>)
 800b5de:	e000      	b.n	800b5e2 <HAL_TIM_PeriodElapsedCallback+0x1192>
 800b5e0:	4b3c      	ldr	r3, [pc, #240]	; (800b6d4 <HAL_TIM_PeriodElapsedCallback+0x1284>)
 800b5e2:	4a37      	ldr	r2, [pc, #220]	; (800b6c0 <HAL_TIM_PeriodElapsedCallback+0x1270>)
 800b5e4:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -1000), 1000);
 800b5e6:	4b37      	ldr	r3, [pc, #220]	; (800b6c4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 800b5e8:	edd3 7a00 	vldr	s15, [r3]
 800b5ec:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b6c8 <HAL_TIM_PeriodElapsedCallback+0x1278>
 800b5f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f8:	bfcc      	ite	gt
 800b5fa:	2301      	movgt	r3, #1
 800b5fc:	2300      	movle	r3, #0
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	f083 0301 	eor.w	r3, r3, #1
 800b604:	b2db      	uxtb	r3, r3
 800b606:	2b00      	cmp	r3, #0
 800b608:	d111      	bne.n	800b62e <HAL_TIM_PeriodElapsedCallback+0x11de>
 800b60a:	4b2e      	ldr	r3, [pc, #184]	; (800b6c4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 800b60c:	edd3 7a00 	vldr	s15, [r3]
 800b610:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800b6cc <HAL_TIM_PeriodElapsedCallback+0x127c>
 800b614:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b61c:	bfcc      	ite	gt
 800b61e:	2301      	movgt	r3, #1
 800b620:	2300      	movle	r3, #0
 800b622:	b2db      	uxtb	r3, r3
 800b624:	f083 0301 	eor.w	r3, r3, #1
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00e      	beq.n	800b64c <HAL_TIM_PeriodElapsedCallback+0x11fc>
 800b62e:	4b25      	ldr	r3, [pc, #148]	; (800b6c4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 800b630:	edd3 7a00 	vldr	s15, [r3]
 800b634:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800b6c8 <HAL_TIM_PeriodElapsedCallback+0x1278>
 800b638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b640:	dd02      	ble.n	800b648 <HAL_TIM_PeriodElapsedCallback+0x11f8>
 800b642:	4b20      	ldr	r3, [pc, #128]	; (800b6c4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	e002      	b.n	800b64e <HAL_TIM_PeriodElapsedCallback+0x11fe>
 800b648:	4b21      	ldr	r3, [pc, #132]	; (800b6d0 <HAL_TIM_PeriodElapsedCallback+0x1280>)
 800b64a:	e000      	b.n	800b64e <HAL_TIM_PeriodElapsedCallback+0x11fe>
 800b64c:	4b21      	ldr	r3, [pc, #132]	; (800b6d4 <HAL_TIM_PeriodElapsedCallback+0x1284>)
 800b64e:	4a1d      	ldr	r2, [pc, #116]	; (800b6c4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 800b650:	6013      	str	r3, [r2, #0]

			if(pulse_l > 0){
 800b652:	4b1b      	ldr	r3, [pc, #108]	; (800b6c0 <HAL_TIM_PeriodElapsedCallback+0x1270>)
 800b654:	edd3 7a00 	vldr	s15, [r3]
 800b658:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b660:	dd3c      	ble.n	800b6dc <HAL_TIM_PeriodElapsedCallback+0x128c>
				drive_dir(0, 0);
 800b662:	2100      	movs	r1, #0
 800b664:	2000      	movs	r0, #0
 800b666:	f7f9 fbad 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = pulse_l;
 800b66a:	4b15      	ldr	r3, [pc, #84]	; (800b6c0 <HAL_TIM_PeriodElapsedCallback+0x1270>)
 800b66c:	edd3 7a00 	vldr	s15, [r3]
 800b670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b674:	ee17 3a90 	vmov	r3, s15
 800b678:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800b67a:	f107 0308 	add.w	r3, r7, #8
 800b67e:	2200      	movs	r2, #0
 800b680:	4619      	mov	r1, r3
 800b682:	4815      	ldr	r0, [pc, #84]	; (800b6d8 <HAL_TIM_PeriodElapsedCallback+0x1288>)
 800b684:	f7f8 faa2 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800b688:	2100      	movs	r1, #0
 800b68a:	4813      	ldr	r0, [pc, #76]	; (800b6d8 <HAL_TIM_PeriodElapsedCallback+0x1288>)
 800b68c:	f7f8 f836 	bl	80036fc <HAL_TIM_PWM_Start>
 800b690:	e045      	b.n	800b71e <HAL_TIM_PeriodElapsedCallback+0x12ce>
 800b692:	bf00      	nop
 800b694:	20000c3c 	.word	0x20000c3c
 800b698:	fffffc18 	.word	0xfffffc18
 800b69c:	20000b38 	.word	0x20000b38
 800b6a0:	20000fb8 	.word	0x20000fb8
 800b6a4:	20000fac 	.word	0x20000fac
 800b6a8:	20000b9c 	.word	0x20000b9c
 800b6ac:	20000c40 	.word	0x20000c40
 800b6b0:	42200000 	.word	0x42200000
 800b6b4:	20000c58 	.word	0x20000c58
 800b6b8:	200001d4 	.word	0x200001d4
 800b6bc:	20000b8e 	.word	0x20000b8e
 800b6c0:	20000be8 	.word	0x20000be8
 800b6c4:	200007b8 	.word	0x200007b8
 800b6c8:	c47a0000 	.word	0xc47a0000
 800b6cc:	447a0000 	.word	0x447a0000
 800b6d0:	c47a0000 	.word	0xc47a0000
 800b6d4:	447a0000 	.word	0x447a0000
 800b6d8:	20000c5c 	.word	0x20000c5c
			}
			else if(pulse_l < 0){
 800b6dc:	4b89      	ldr	r3, [pc, #548]	; (800b904 <HAL_TIM_PeriodElapsedCallback+0x14b4>)
 800b6de:	edd3 7a00 	vldr	s15, [r3]
 800b6e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ea:	d518      	bpl.n	800b71e <HAL_TIM_PeriodElapsedCallback+0x12ce>
				drive_dir(0, 1);
 800b6ec:	2101      	movs	r1, #1
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	f7f9 fb68 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 800b6f4:	4b83      	ldr	r3, [pc, #524]	; (800b904 <HAL_TIM_PeriodElapsedCallback+0x14b4>)
 800b6f6:	edd3 7a00 	vldr	s15, [r3]
 800b6fa:	eef1 7a67 	vneg.f32	s15, s15
 800b6fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b702:	ee17 3a90 	vmov	r3, s15
 800b706:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800b708:	f107 0308 	add.w	r3, r7, #8
 800b70c:	2200      	movs	r2, #0
 800b70e:	4619      	mov	r1, r3
 800b710:	487d      	ldr	r0, [pc, #500]	; (800b908 <HAL_TIM_PeriodElapsedCallback+0x14b8>)
 800b712:	f7f8 fa5b 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800b716:	2100      	movs	r1, #0
 800b718:	487b      	ldr	r0, [pc, #492]	; (800b908 <HAL_TIM_PeriodElapsedCallback+0x14b8>)
 800b71a:	f7f7 ffef 	bl	80036fc <HAL_TIM_PWM_Start>
			}

			if(pulse_r > 0){
 800b71e:	4b7b      	ldr	r3, [pc, #492]	; (800b90c <HAL_TIM_PeriodElapsedCallback+0x14bc>)
 800b720:	edd3 7a00 	vldr	s15, [r3]
 800b724:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b72c:	dd17      	ble.n	800b75e <HAL_TIM_PeriodElapsedCallback+0x130e>
				drive_dir(1, 0);
 800b72e:	2100      	movs	r1, #0
 800b730:	2001      	movs	r0, #1
 800b732:	f7f9 fb47 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = pulse_r;
 800b736:	4b75      	ldr	r3, [pc, #468]	; (800b90c <HAL_TIM_PeriodElapsedCallback+0x14bc>)
 800b738:	edd3 7a00 	vldr	s15, [r3]
 800b73c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b740:	ee17 3a90 	vmov	r3, s15
 800b744:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800b746:	f107 0308 	add.w	r3, r7, #8
 800b74a:	220c      	movs	r2, #12
 800b74c:	4619      	mov	r1, r3
 800b74e:	486e      	ldr	r0, [pc, #440]	; (800b908 <HAL_TIM_PeriodElapsedCallback+0x14b8>)
 800b750:	f7f8 fa3c 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800b754:	210c      	movs	r1, #12
 800b756:	486c      	ldr	r0, [pc, #432]	; (800b908 <HAL_TIM_PeriodElapsedCallback+0x14b8>)
 800b758:	f7f7 ffd0 	bl	80036fc <HAL_TIM_PWM_Start>
 800b75c:	e020      	b.n	800b7a0 <HAL_TIM_PeriodElapsedCallback+0x1350>
			}
			else if(pulse_r < 0){
 800b75e:	4b6b      	ldr	r3, [pc, #428]	; (800b90c <HAL_TIM_PeriodElapsedCallback+0x14bc>)
 800b760:	edd3 7a00 	vldr	s15, [r3]
 800b764:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b76c:	d518      	bpl.n	800b7a0 <HAL_TIM_PeriodElapsedCallback+0x1350>
				drive_dir(1, 1);
 800b76e:	2101      	movs	r1, #1
 800b770:	2001      	movs	r0, #1
 800b772:	f7f9 fb27 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 800b776:	4b65      	ldr	r3, [pc, #404]	; (800b90c <HAL_TIM_PeriodElapsedCallback+0x14bc>)
 800b778:	edd3 7a00 	vldr	s15, [r3]
 800b77c:	eef1 7a67 	vneg.f32	s15, s15
 800b780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b784:	ee17 3a90 	vmov	r3, s15
 800b788:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800b78a:	f107 0308 	add.w	r3, r7, #8
 800b78e:	220c      	movs	r2, #12
 800b790:	4619      	mov	r1, r3
 800b792:	485d      	ldr	r0, [pc, #372]	; (800b908 <HAL_TIM_PeriodElapsedCallback+0x14b8>)
 800b794:	f7f8 fa1a 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800b798:	210c      	movs	r1, #12
 800b79a:	485b      	ldr	r0, [pc, #364]	; (800b908 <HAL_TIM_PeriodElapsedCallback+0x14b8>)
 800b79c:	f7f7 ffae 	bl	80036fc <HAL_TIM_PWM_Start>
			}
			//wall check
			//----look forward----
			if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 800b7a0:	4b5b      	ldr	r3, [pc, #364]	; (800b910 <HAL_TIM_PeriodElapsedCallback+0x14c0>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2b5a      	cmp	r3, #90	; 0x5a
 800b7a6:	d803      	bhi.n	800b7b0 <HAL_TIM_PeriodElapsedCallback+0x1360>
 800b7a8:	4b5a      	ldr	r3, [pc, #360]	; (800b914 <HAL_TIM_PeriodElapsedCallback+0x14c4>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2bc8      	cmp	r3, #200	; 0xc8
 800b7ae:	d905      	bls.n	800b7bc <HAL_TIM_PeriodElapsedCallback+0x136c>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	2140      	movs	r1, #64	; 0x40
 800b7b4:	4858      	ldr	r0, [pc, #352]	; (800b918 <HAL_TIM_PeriodElapsedCallback+0x14c8>)
 800b7b6:	f7f6 fda5 	bl	8002304 <HAL_GPIO_WritePin>
 800b7ba:	e004      	b.n	800b7c6 <HAL_TIM_PeriodElapsedCallback+0x1376>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800b7bc:	2200      	movs	r2, #0
 800b7be:	2140      	movs	r1, #64	; 0x40
 800b7c0:	4855      	ldr	r0, [pc, #340]	; (800b918 <HAL_TIM_PeriodElapsedCallback+0x14c8>)
 800b7c2:	f7f6 fd9f 	bl	8002304 <HAL_GPIO_WritePin>
			}
			//----look forwardL----
			if(ad_fl > WALL_BASE_FL){
 800b7c6:	4b53      	ldr	r3, [pc, #332]	; (800b914 <HAL_TIM_PeriodElapsedCallback+0x14c4>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2bc8      	cmp	r3, #200	; 0xc8
 800b7cc:	d905      	bls.n	800b7da <HAL_TIM_PeriodElapsedCallback+0x138a>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	2110      	movs	r1, #16
 800b7d2:	4851      	ldr	r0, [pc, #324]	; (800b918 <HAL_TIM_PeriodElapsedCallback+0x14c8>)
 800b7d4:	f7f6 fd96 	bl	8002304 <HAL_GPIO_WritePin>
 800b7d8:	e004      	b.n	800b7e4 <HAL_TIM_PeriodElapsedCallback+0x1394>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800b7da:	2200      	movs	r2, #0
 800b7dc:	2110      	movs	r1, #16
 800b7de:	484e      	ldr	r0, [pc, #312]	; (800b918 <HAL_TIM_PeriodElapsedCallback+0x14c8>)
 800b7e0:	f7f6 fd90 	bl	8002304 <HAL_GPIO_WritePin>
			}
			//----look forward-R---
			if(ad_fr > WALL_BASE_FR){
 800b7e4:	4b4a      	ldr	r3, [pc, #296]	; (800b910 <HAL_TIM_PeriodElapsedCallback+0x14c0>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b5a      	cmp	r3, #90	; 0x5a
 800b7ea:	d905      	bls.n	800b7f8 <HAL_TIM_PeriodElapsedCallback+0x13a8>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	2180      	movs	r1, #128	; 0x80
 800b7f0:	4849      	ldr	r0, [pc, #292]	; (800b918 <HAL_TIM_PeriodElapsedCallback+0x14c8>)
 800b7f2:	f7f6 fd87 	bl	8002304 <HAL_GPIO_WritePin>
 800b7f6:	e00d      	b.n	800b814 <HAL_TIM_PeriodElapsedCallback+0x13c4>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	2180      	movs	r1, #128	; 0x80
 800b7fc:	4846      	ldr	r0, [pc, #280]	; (800b918 <HAL_TIM_PeriodElapsedCallback+0x14c8>)
 800b7fe:	f7f6 fd81 	bl	8002304 <HAL_GPIO_WritePin>
 800b802:	e007      	b.n	800b814 <HAL_TIM_PeriodElapsedCallback+0x13c4>
			}
		}else{
			drive_dir(0, 2);
 800b804:	2102      	movs	r1, #2
 800b806:	2000      	movs	r0, #0
 800b808:	f7f9 fadc 	bl	8004dc4 <drive_dir>
			drive_dir(1, 2);
 800b80c:	2102      	movs	r1, #2
 800b80e:	2001      	movs	r0, #1
 800b810:	f7f9 fad8 	bl	8004dc4 <drive_dir>
		}


		//wall check
		//----look right----
		if(ad_r > WALL_BASE_R){
 800b814:	4b41      	ldr	r3, [pc, #260]	; (800b91c <HAL_TIM_PeriodElapsedCallback+0x14cc>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2b78      	cmp	r3, #120	; 0x78
 800b81a:	d906      	bls.n	800b82a <HAL_TIM_PeriodElapsedCallback+0x13da>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800b81c:	2201      	movs	r2, #1
 800b81e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b822:	483f      	ldr	r0, [pc, #252]	; (800b920 <HAL_TIM_PeriodElapsedCallback+0x14d0>)
 800b824:	f7f6 fd6e 	bl	8002304 <HAL_GPIO_WritePin>
 800b828:	e005      	b.n	800b836 <HAL_TIM_PeriodElapsedCallback+0x13e6>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800b82a:	2200      	movs	r2, #0
 800b82c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b830:	483b      	ldr	r0, [pc, #236]	; (800b920 <HAL_TIM_PeriodElapsedCallback+0x14d0>)
 800b832:	f7f6 fd67 	bl	8002304 <HAL_GPIO_WritePin>
		}
		//----look left----
		if(ad_l > WALL_BASE_L){
 800b836:	4b3b      	ldr	r3, [pc, #236]	; (800b924 <HAL_TIM_PeriodElapsedCallback+0x14d4>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2b8c      	cmp	r3, #140	; 0x8c
 800b83c:	d905      	bls.n	800b84a <HAL_TIM_PeriodElapsedCallback+0x13fa>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800b83e:	2201      	movs	r2, #1
 800b840:	2104      	movs	r1, #4
 800b842:	4839      	ldr	r0, [pc, #228]	; (800b928 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 800b844:	f7f6 fd5e 	bl	8002304 <HAL_GPIO_WritePin>
 800b848:	e004      	b.n	800b854 <HAL_TIM_PeriodElapsedCallback+0x1404>
		}else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800b84a:	2200      	movs	r2, #0
 800b84c:	2104      	movs	r1, #4
 800b84e:	4836      	ldr	r0, [pc, #216]	; (800b928 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 800b850:	f7f6 fd58 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//battery check
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {	//2.1V以下で赤ランプ点灯=>LiPoが約7Vを下回るとランプ点灯
 800b854:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b858:	4831      	ldr	r0, [pc, #196]	; (800b920 <HAL_TIM_PeriodElapsedCallback+0x14d0>)
 800b85a:	f7f6 fd3b 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d105      	bne.n	800b870 <HAL_TIM_PeriodElapsedCallback+0x1420>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800b864:	2201      	movs	r2, #1
 800b866:	2108      	movs	r1, #8
 800b868:	482f      	ldr	r0, [pc, #188]	; (800b928 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 800b86a:	f7f6 fd4b 	bl	8002304 <HAL_GPIO_WritePin>
 800b86e:	e004      	b.n	800b87a <HAL_TIM_PeriodElapsedCallback+0x142a>
		} else {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800b870:	2200      	movs	r2, #0
 800b872:	2108      	movs	r1, #8
 800b874:	482c      	ldr	r0, [pc, #176]	; (800b928 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 800b876:	f7f6 fd45 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//fail safe
		if(degree_z >= target_degree_z+360 || degree_z <= target_degree_z-360 || dist_r > 360*2 || dist_l > 360*2){	//360度以上回転発生でFail Safe
 800b87a:	4b2c      	ldr	r3, [pc, #176]	; (800b92c <HAL_TIM_PeriodElapsedCallback+0x14dc>)
 800b87c:	edd3 7a00 	vldr	s15, [r3]
 800b880:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800b930 <HAL_TIM_PeriodElapsedCallback+0x14e0>
 800b884:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b888:	4b2a      	ldr	r3, [pc, #168]	; (800b934 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 800b88a:	edd3 7a00 	vldr	s15, [r3]
 800b88e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b896:	d923      	bls.n	800b8e0 <HAL_TIM_PeriodElapsedCallback+0x1490>
 800b898:	4b24      	ldr	r3, [pc, #144]	; (800b92c <HAL_TIM_PeriodElapsedCallback+0x14dc>)
 800b89a:	edd3 7a00 	vldr	s15, [r3]
 800b89e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800b930 <HAL_TIM_PeriodElapsedCallback+0x14e0>
 800b8a2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b8a6:	4b23      	ldr	r3, [pc, #140]	; (800b934 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 800b8a8:	edd3 7a00 	vldr	s15, [r3]
 800b8ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b4:	da14      	bge.n	800b8e0 <HAL_TIM_PeriodElapsedCallback+0x1490>
 800b8b6:	4b20      	ldr	r3, [pc, #128]	; (800b938 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 800b8b8:	edd3 7a00 	vldr	s15, [r3]
 800b8bc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b93c <HAL_TIM_PeriodElapsedCallback+0x14ec>
 800b8c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c8:	dc0a      	bgt.n	800b8e0 <HAL_TIM_PeriodElapsedCallback+0x1490>
 800b8ca:	4b1d      	ldr	r3, [pc, #116]	; (800b940 <HAL_TIM_PeriodElapsedCallback+0x14f0>)
 800b8cc:	edd3 7a00 	vldr	s15, [r3]
 800b8d0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800b93c <HAL_TIM_PeriodElapsedCallback+0x14ec>
 800b8d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8dc:	dc00      	bgt.n	800b8e0 <HAL_TIM_PeriodElapsedCallback+0x1490>
			   drive_dir(1, 2);
			   full_led_write(RED);
		   }
		}
	}
}
 800b8de:	e00b      	b.n	800b8f8 <HAL_TIM_PeriodElapsedCallback+0x14a8>
			   drive_dir(0, 2);
 800b8e0:	2102      	movs	r1, #2
 800b8e2:	2000      	movs	r0, #0
 800b8e4:	f7f9 fa6e 	bl	8004dc4 <drive_dir>
			   drive_dir(1, 2);
 800b8e8:	2102      	movs	r1, #2
 800b8ea:	2001      	movs	r0, #1
 800b8ec:	f7f9 fa6a 	bl	8004dc4 <drive_dir>
			   full_led_write(RED);
 800b8f0:	2001      	movs	r0, #1
 800b8f2:	f003 fc29 	bl	800f148 <full_led_write>
			   drive_dir(0, 2);
 800b8f6:	e7f3      	b.n	800b8e0 <HAL_TIM_PeriodElapsedCallback+0x1490>
}
 800b8f8:	bf00      	nop
 800b8fa:	3730      	adds	r7, #48	; 0x30
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	ecbd 8b02 	vpop	{d8}
 800b902:	bdb0      	pop	{r4, r5, r7, pc}
 800b904:	20000be8 	.word	0x20000be8
 800b908:	20000c5c 	.word	0x20000c5c
 800b90c:	200007b8 	.word	0x200007b8
 800b910:	20000c48 	.word	0x20000c48
 800b914:	20000d9c 	.word	0x20000d9c
 800b918:	40020000 	.word	0x40020000
 800b91c:	20000fa8 	.word	0x20000fa8
 800b920:	40020400 	.word	0x40020400
 800b924:	20000b3c 	.word	0x20000b3c
 800b928:	40020800 	.word	0x40020800
 800b92c:	20000c40 	.word	0x20000c40
 800b930:	43b40000 	.word	0x43b40000
 800b934:	20000b9c 	.word	0x20000b9c
 800b938:	20000b2c 	.word	0x20000b2c
 800b93c:	44340000 	.word	0x44340000
 800b940:	20001608 	.word	0x20001608

0800b944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b94a:	f7f5 faf5 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b94e:	f000 f917 	bl	800bb80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b952:	f000 fc09 	bl	800c168 <MX_GPIO_Init>
  MX_ADC1_Init();
 800b956:	f000 f97d 	bl	800bc54 <MX_ADC1_Init>
  MX_TIM2_Init();
 800b95a:	f000 fa03 	bl	800bd64 <MX_TIM2_Init>
  MX_TIM3_Init();
 800b95e:	f000 fa81 	bl	800be64 <MX_TIM3_Init>
  MX_TIM4_Init();
 800b962:	f000 faf5 	bl	800bf50 <MX_TIM4_Init>
  MX_TIM6_Init();
 800b966:	f000 fb47 	bl	800bff8 <MX_TIM6_Init>
  MX_TIM8_Init();
 800b96a:	f000 fb7b 	bl	800c064 <MX_TIM8_Init>
  MX_SPI3_Init();
 800b96e:	f000 f9c3 	bl	800bcf8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800b972:	f000 fbcf 	bl	800c114 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  drive_init();
 800b976:	f7f9 f971 	bl	8004c5c <drive_init>
  gyro_init();
 800b97a:	f7fe fb8d 	bl	800a098 <gyro_init>
  search_init();
 800b97e:	f000 fd21 	bl	800c3c4 <search_init>
  sensor_init();
 800b982:	f003 fb21 	bl	800efc8 <sensor_init>

  printf("*** Welcome to WMMC ! ***\n");
 800b986:	4870      	ldr	r0, [pc, #448]	; (800bb48 <main+0x204>)
 800b988:	f004 f9e6 	bl	800fd58 <puts>

  setbuf(stdout, NULL);
 800b98c:	4b6f      	ldr	r3, [pc, #444]	; (800bb4c <main+0x208>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	2100      	movs	r1, #0
 800b994:	4618      	mov	r0, r3
 800b996:	f004 f9e7 	bl	800fd68 <setbuf>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800b99a:	213c      	movs	r1, #60	; 0x3c
 800b99c:	486c      	ldr	r0, [pc, #432]	; (800bb50 <main+0x20c>)
 800b99e:	f7f7 ffd5 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800b9a2:	213c      	movs	r1, #60	; 0x3c
 800b9a4:	486b      	ldr	r0, [pc, #428]	; (800bb54 <main+0x210>)
 800b9a6:	f7f7 ffd1 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800b9aa:	486b      	ldr	r0, [pc, #428]	; (800bb58 <main+0x214>)
 800b9ac:	f7f7 fe4d 	bl	800364a <HAL_TIM_Base_Start_IT>

  int mode = 0;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	607b      	str	r3, [r7, #4]
  printf("Mode : %d\n", mode);
 800b9b4:	6879      	ldr	r1, [r7, #4]
 800b9b6:	4869      	ldr	r0, [pc, #420]	; (800bb5c <main+0x218>)
 800b9b8:	f004 f95a 	bl	800fc70 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	f003 0301 	and.w	r3, r3, #1
 800b9c4:	b2d8      	uxtb	r0, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	f003 0302 	and.w	r3, r3, #2
 800b9ce:	b2d9      	uxtb	r1, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	f003 0304 	and.w	r3, r3, #4
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	461a      	mov	r2, r3
 800b9dc:	f003 fb7a 	bl	800f0d4 <led_write>
	  if(dist_r >= 20){
 800b9e0:	4b5f      	ldr	r3, [pc, #380]	; (800bb60 <main+0x21c>)
 800b9e2:	edd3 7a00 	vldr	s15, [r3]
 800b9e6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b9ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9f2:	db0f      	blt.n	800ba14 <main+0xd0>
		  mode++;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800b9fa:	4b59      	ldr	r3, [pc, #356]	; (800bb60 <main+0x21c>)
 800b9fc:	f04f 0200 	mov.w	r2, #0
 800ba00:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2b07      	cmp	r3, #7
 800ba06:	dd01      	ble.n	800ba0c <main+0xc8>
			  mode = 0;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800ba0c:	6879      	ldr	r1, [r7, #4]
 800ba0e:	4853      	ldr	r0, [pc, #332]	; (800bb5c <main+0x218>)
 800ba10:	f004 f92e 	bl	800fc70 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(dist_r <= -20){
 800ba14:	4b52      	ldr	r3, [pc, #328]	; (800bb60 <main+0x21c>)
 800ba16:	edd3 7a00 	vldr	s15, [r3]
 800ba1a:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800ba1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba26:	d80f      	bhi.n	800ba48 <main+0x104>
		  mode--;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800ba2e:	4b4c      	ldr	r3, [pc, #304]	; (800bb60 <main+0x21c>)
 800ba30:	f04f 0200 	mov.w	r2, #0
 800ba34:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	da01      	bge.n	800ba40 <main+0xfc>
			  mode = 7;
 800ba3c:	2307      	movs	r3, #7
 800ba3e:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800ba40:	6879      	ldr	r1, [r7, #4]
 800ba42:	4846      	ldr	r0, [pc, #280]	; (800bb5c <main+0x218>)
 800ba44:	f004 f914 	bl	800fc70 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800ba48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ba4c:	4845      	ldr	r0, [pc, #276]	; (800bb64 <main+0x220>)
 800ba4e:	f7f6 fc41 	bl	80022d4 <HAL_GPIO_ReadPin>
 800ba52:	4603      	mov	r3, r0
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d1b1      	bne.n	800b9bc <main+0x78>
		  HAL_Delay(50);
 800ba58:	2032      	movs	r0, #50	; 0x32
 800ba5a:	f7f5 fadf 	bl	800101c <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800ba5e:	bf00      	nop
 800ba60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ba64:	483f      	ldr	r0, [pc, #252]	; (800bb64 <main+0x220>)
 800ba66:	f7f6 fc35 	bl	80022d4 <HAL_GPIO_ReadPin>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d0f7      	beq.n	800ba60 <main+0x11c>
		  switch(mode){
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2b07      	cmp	r3, #7
 800ba74:	d8a2      	bhi.n	800b9bc <main+0x78>
 800ba76:	a201      	add	r2, pc, #4	; (adr r2, 800ba7c <main+0x138>)
 800ba78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba7c:	0800ba9d 	.word	0x0800ba9d
 800ba80:	0800baa7 	.word	0x0800baa7
 800ba84:	0800bab3 	.word	0x0800bab3
 800ba88:	0800babf 	.word	0x0800babf
 800ba8c:	0800bacb 	.word	0x0800bacb
 800ba90:	0800bad1 	.word	0x0800bad1
 800ba94:	0800bafd 	.word	0x0800bafd
 800ba98:	0800bb3f 	.word	0x0800bb3f

		  	  case 0:
		  		  HAL_Delay(5000);
 800ba9c:	f241 3088 	movw	r0, #5000	; 0x1388
 800baa0:	f7f5 fabc 	bl	800101c <HAL_Delay>
		  		  break;
 800baa4:	e04e      	b.n	800bb44 <main+0x200>

		  	  case 1:
		  		  //----a超新地走行----
		  		  printf("Simple Run.\n");
 800baa6:	4830      	ldr	r0, [pc, #192]	; (800bb68 <main+0x224>)
 800baa8:	f004 f956 	bl	800fd58 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  simple_run();
 800baac:	f7fc ff88 	bl	80089c0 <simple_run>
		  		  break;
 800bab0:	e048      	b.n	800bb44 <main+0x200>

		  	  case 2:
		  		  //----aスラローム走行----
		  		  printf("slalom Run.\n");
 800bab2:	482e      	ldr	r0, [pc, #184]	; (800bb6c <main+0x228>)
 800bab4:	f004 f950 	bl	800fd58 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  slalom_run();
 800bab8:	f7fd f890 	bl	8008bdc <slalom_run>
		  		  break;
 800babc:	e042      	b.n	800bb44 <main+0x200>

		  	  case 3:
		  		  //----aスラローム走行&pass圧縮----
				  printf("First Run. (Slalom)\n");
 800babe:	482c      	ldr	r0, [pc, #176]	; (800bb70 <main+0x22c>)
 800bac0:	f004 f94a 	bl	800fd58 <puts>
		  		  pass_test();
 800bac4:	f7fc fd9c 	bl	8008600 <pass_test>
		  		  break;
 800bac8:	e03c      	b.n	800bb44 <main+0x200>

		  	  case 4:
		  		  //----aテストモード選択----
		  		  test_select();
 800baca:	f7fb fe79 	bl	80077c0 <test_select>
		  		  break;
 800bace:	e039      	b.n	800bb44 <main+0x200>

		  	  case 5:
		  		  //----sensor check----
		  		  printf("Sensor Check.\n");
 800bad0:	4828      	ldr	r0, [pc, #160]	; (800bb74 <main+0x230>)
 800bad2:	f004 f941 	bl	800fd58 <puts>
		  		  sensor_test();
 800bad6:	f003 fbf3 	bl	800f2c0 <sensor_test>
		  		  break;
 800bada:	e033      	b.n	800bb44 <main+0x200>

		  	  case 6:
		  		  //----pitagola sound----
				  while(ad_fl <= WALL_BASE_FL){
					  led_write(1, 1, 1);
 800badc:	2201      	movs	r2, #1
 800bade:	2101      	movs	r1, #1
 800bae0:	2001      	movs	r0, #1
 800bae2:	f003 faf7 	bl	800f0d4 <led_write>
					  HAL_Delay(200);
 800bae6:	20c8      	movs	r0, #200	; 0xc8
 800bae8:	f7f5 fa98 	bl	800101c <HAL_Delay>
					  led_write(0, 0, 0);
 800baec:	2200      	movs	r2, #0
 800baee:	2100      	movs	r1, #0
 800baf0:	2000      	movs	r0, #0
 800baf2:	f003 faef 	bl	800f0d4 <led_write>
					  HAL_Delay(200);
 800baf6:	20c8      	movs	r0, #200	; 0xc8
 800baf8:	f7f5 fa90 	bl	800101c <HAL_Delay>
				  while(ad_fl <= WALL_BASE_FL){
 800bafc:	4b1e      	ldr	r3, [pc, #120]	; (800bb78 <main+0x234>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2bc8      	cmp	r3, #200	; 0xc8
 800bb02:	d9eb      	bls.n	800badc <main+0x198>
				  }
				  HAL_Delay(200);
 800bb04:	20c8      	movs	r0, #200	; 0xc8
 800bb06:	f7f5 fa89 	bl	800101c <HAL_Delay>
		  		  }
				  HAL_Delay(2000);
				  for(int i=0; i<m_ok; i++){
		  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
		  		  }
*/				  HAL_Delay(2000);
 800bb0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bb0e:	f7f5 fa85 	bl	800101c <HAL_Delay>
				  for(int i=0; i<m_goal; i++){
 800bb12:	2300      	movs	r3, #0
 800bb14:	603b      	str	r3, [r7, #0]
 800bb16:	e00e      	b.n	800bb36 <main+0x1f2>
		  			  buzzer(mario_goal[i][0], mario_goal[i][1]);
 800bb18:	4a18      	ldr	r2, [pc, #96]	; (800bb7c <main+0x238>)
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bb20:	4a16      	ldr	r2, [pc, #88]	; (800bb7c <main+0x238>)
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	00db      	lsls	r3, r3, #3
 800bb26:	4413      	add	r3, r2
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	f000 fbda 	bl	800c2e4 <buzzer>
				  for(int i=0; i<m_goal; i++){
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	3301      	adds	r3, #1
 800bb34:	603b      	str	r3, [r7, #0]
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	2b0e      	cmp	r3, #14
 800bb3a:	dded      	ble.n	800bb18 <main+0x1d4>
		  		  }
		  		  break;
 800bb3c:	e002      	b.n	800bb44 <main+0x200>
		  		  //MF.FLAG.WEDGE = 1;
/*		  		  for(int i=0; i<m_select; i++){
		  			  buzzer(mario_select[i][0], mario_select[i][1]);
		  		  }
*///		  		  perfect_run();
		  		  perfect_slalom();
 800bb3e:	f7fd fbff 	bl	8009340 <perfect_slalom>
		  		  break;
 800bb42:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800bb44:	e73a      	b.n	800b9bc <main+0x78>
 800bb46:	bf00      	nop
 800bb48:	08011350 	.word	0x08011350
 800bb4c:	200000bc 	.word	0x200000bc
 800bb50:	20000344 	.word	0x20000344
 800bb54:	20000304 	.word	0x20000304
 800bb58:	20000bf8 	.word	0x20000bf8
 800bb5c:	0801136c 	.word	0x0801136c
 800bb60:	20000b2c 	.word	0x20000b2c
 800bb64:	40020000 	.word	0x40020000
 800bb68:	08011378 	.word	0x08011378
 800bb6c:	08011384 	.word	0x08011384
 800bb70:	08011390 	.word	0x08011390
 800bb74:	080113a4 	.word	0x080113a4
 800bb78:	20000d9c 	.word	0x20000d9c
 800bb7c:	20000040 	.word	0x20000040

0800bb80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b094      	sub	sp, #80	; 0x50
 800bb84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800bb86:	f107 0320 	add.w	r3, r7, #32
 800bb8a:	2230      	movs	r2, #48	; 0x30
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f004 f866 	bl	800fc60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800bb94:	f107 030c 	add.w	r3, r7, #12
 800bb98:	2200      	movs	r2, #0
 800bb9a:	601a      	str	r2, [r3, #0]
 800bb9c:	605a      	str	r2, [r3, #4]
 800bb9e:	609a      	str	r2, [r3, #8]
 800bba0:	60da      	str	r2, [r3, #12]
 800bba2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800bba4:	2300      	movs	r3, #0
 800bba6:	60bb      	str	r3, [r7, #8]
 800bba8:	4b28      	ldr	r3, [pc, #160]	; (800bc4c <SystemClock_Config+0xcc>)
 800bbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbac:	4a27      	ldr	r2, [pc, #156]	; (800bc4c <SystemClock_Config+0xcc>)
 800bbae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbb2:	6413      	str	r3, [r2, #64]	; 0x40
 800bbb4:	4b25      	ldr	r3, [pc, #148]	; (800bc4c <SystemClock_Config+0xcc>)
 800bbb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbbc:	60bb      	str	r3, [r7, #8]
 800bbbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	607b      	str	r3, [r7, #4]
 800bbc4:	4b22      	ldr	r3, [pc, #136]	; (800bc50 <SystemClock_Config+0xd0>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a21      	ldr	r2, [pc, #132]	; (800bc50 <SystemClock_Config+0xd0>)
 800bbca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bbce:	6013      	str	r3, [r2, #0]
 800bbd0:	4b1f      	ldr	r3, [pc, #124]	; (800bc50 <SystemClock_Config+0xd0>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbd8:	607b      	str	r3, [r7, #4]
 800bbda:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800bbdc:	2302      	movs	r3, #2
 800bbde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800bbe4:	2310      	movs	r3, #16
 800bbe6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bbe8:	2302      	movs	r3, #2
 800bbea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800bbec:	2300      	movs	r3, #0
 800bbee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800bbf0:	2308      	movs	r3, #8
 800bbf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800bbf4:	23a8      	movs	r3, #168	; 0xa8
 800bbf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800bbf8:	2302      	movs	r3, #2
 800bbfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800bbfc:	2304      	movs	r3, #4
 800bbfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bc00:	f107 0320 	add.w	r3, r7, #32
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7f6 fb97 	bl	8002338 <HAL_RCC_OscConfig>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d001      	beq.n	800bc14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800bc10:	f000 fbd1 	bl	800c3b6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bc14:	230f      	movs	r3, #15
 800bc16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bc18:	2302      	movs	r3, #2
 800bc1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800bc20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800bc24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800bc26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800bc2c:	f107 030c 	add.w	r3, r7, #12
 800bc30:	2105      	movs	r1, #5
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7f6 fdc2 	bl	80027bc <HAL_RCC_ClockConfig>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d001      	beq.n	800bc42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800bc3e:	f000 fbba 	bl	800c3b6 <Error_Handler>
  }
}
 800bc42:	bf00      	nop
 800bc44:	3750      	adds	r7, #80	; 0x50
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	40023800 	.word	0x40023800
 800bc50:	40007000 	.word	0x40007000

0800bc54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800bc5a:	463b      	mov	r3, r7
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	601a      	str	r2, [r3, #0]
 800bc60:	605a      	str	r2, [r3, #4]
 800bc62:	609a      	str	r2, [r3, #8]
 800bc64:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800bc66:	4b21      	ldr	r3, [pc, #132]	; (800bcec <MX_ADC1_Init+0x98>)
 800bc68:	4a21      	ldr	r2, [pc, #132]	; (800bcf0 <MX_ADC1_Init+0x9c>)
 800bc6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800bc6c:	4b1f      	ldr	r3, [pc, #124]	; (800bcec <MX_ADC1_Init+0x98>)
 800bc6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bc72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800bc74:	4b1d      	ldr	r3, [pc, #116]	; (800bcec <MX_ADC1_Init+0x98>)
 800bc76:	2200      	movs	r2, #0
 800bc78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800bc7a:	4b1c      	ldr	r3, [pc, #112]	; (800bcec <MX_ADC1_Init+0x98>)
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800bc80:	4b1a      	ldr	r3, [pc, #104]	; (800bcec <MX_ADC1_Init+0x98>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800bc86:	4b19      	ldr	r3, [pc, #100]	; (800bcec <MX_ADC1_Init+0x98>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800bc8e:	4b17      	ldr	r3, [pc, #92]	; (800bcec <MX_ADC1_Init+0x98>)
 800bc90:	2200      	movs	r2, #0
 800bc92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bc94:	4b15      	ldr	r3, [pc, #84]	; (800bcec <MX_ADC1_Init+0x98>)
 800bc96:	4a17      	ldr	r2, [pc, #92]	; (800bcf4 <MX_ADC1_Init+0xa0>)
 800bc98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800bc9a:	4b14      	ldr	r3, [pc, #80]	; (800bcec <MX_ADC1_Init+0x98>)
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800bca0:	4b12      	ldr	r3, [pc, #72]	; (800bcec <MX_ADC1_Init+0x98>)
 800bca2:	2201      	movs	r2, #1
 800bca4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800bca6:	4b11      	ldr	r3, [pc, #68]	; (800bcec <MX_ADC1_Init+0x98>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800bcae:	4b0f      	ldr	r3, [pc, #60]	; (800bcec <MX_ADC1_Init+0x98>)
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800bcb4:	480d      	ldr	r0, [pc, #52]	; (800bcec <MX_ADC1_Init+0x98>)
 800bcb6:	f7f5 f9d3 	bl	8001060 <HAL_ADC_Init>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d001      	beq.n	800bcc4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800bcc0:	f000 fb79 	bl	800c3b6 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800bccc:	2300      	movs	r3, #0
 800bcce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800bcd0:	463b      	mov	r3, r7
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	4805      	ldr	r0, [pc, #20]	; (800bcec <MX_ADC1_Init+0x98>)
 800bcd6:	f7f5 fb5f 	bl	8001398 <HAL_ADC_ConfigChannel>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d001      	beq.n	800bce4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800bce0:	f000 fb69 	bl	800c3b6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800bce4:	bf00      	nop
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	20000b40 	.word	0x20000b40
 800bcf0:	40012000 	.word	0x40012000
 800bcf4:	0f000001 	.word	0x0f000001

0800bcf8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800bcfc:	4b17      	ldr	r3, [pc, #92]	; (800bd5c <MX_SPI3_Init+0x64>)
 800bcfe:	4a18      	ldr	r2, [pc, #96]	; (800bd60 <MX_SPI3_Init+0x68>)
 800bd00:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800bd02:	4b16      	ldr	r3, [pc, #88]	; (800bd5c <MX_SPI3_Init+0x64>)
 800bd04:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bd08:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800bd0a:	4b14      	ldr	r3, [pc, #80]	; (800bd5c <MX_SPI3_Init+0x64>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800bd10:	4b12      	ldr	r3, [pc, #72]	; (800bd5c <MX_SPI3_Init+0x64>)
 800bd12:	2200      	movs	r2, #0
 800bd14:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bd16:	4b11      	ldr	r3, [pc, #68]	; (800bd5c <MX_SPI3_Init+0x64>)
 800bd18:	2200      	movs	r2, #0
 800bd1a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800bd1c:	4b0f      	ldr	r3, [pc, #60]	; (800bd5c <MX_SPI3_Init+0x64>)
 800bd1e:	2200      	movs	r2, #0
 800bd20:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800bd22:	4b0e      	ldr	r3, [pc, #56]	; (800bd5c <MX_SPI3_Init+0x64>)
 800bd24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd28:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800bd2a:	4b0c      	ldr	r3, [pc, #48]	; (800bd5c <MX_SPI3_Init+0x64>)
 800bd2c:	2218      	movs	r2, #24
 800bd2e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bd30:	4b0a      	ldr	r3, [pc, #40]	; (800bd5c <MX_SPI3_Init+0x64>)
 800bd32:	2200      	movs	r2, #0
 800bd34:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800bd36:	4b09      	ldr	r3, [pc, #36]	; (800bd5c <MX_SPI3_Init+0x64>)
 800bd38:	2200      	movs	r2, #0
 800bd3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd3c:	4b07      	ldr	r3, [pc, #28]	; (800bd5c <MX_SPI3_Init+0x64>)
 800bd3e:	2200      	movs	r2, #0
 800bd40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800bd42:	4b06      	ldr	r3, [pc, #24]	; (800bd5c <MX_SPI3_Init+0x64>)
 800bd44:	220a      	movs	r2, #10
 800bd46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800bd48:	4804      	ldr	r0, [pc, #16]	; (800bd5c <MX_SPI3_Init+0x64>)
 800bd4a:	f7f6 feff 	bl	8002b4c <HAL_SPI_Init>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d001      	beq.n	800bd58 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800bd54:	f000 fb2f 	bl	800c3b6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800bd58:	bf00      	nop
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	2000017c 	.word	0x2000017c
 800bd60:	40003c00 	.word	0x40003c00

0800bd64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b08e      	sub	sp, #56	; 0x38
 800bd68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bd6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bd6e:	2200      	movs	r2, #0
 800bd70:	601a      	str	r2, [r3, #0]
 800bd72:	605a      	str	r2, [r3, #4]
 800bd74:	609a      	str	r2, [r3, #8]
 800bd76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bd78:	f107 0320 	add.w	r3, r7, #32
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	601a      	str	r2, [r3, #0]
 800bd80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800bd82:	1d3b      	adds	r3, r7, #4
 800bd84:	2200      	movs	r2, #0
 800bd86:	601a      	str	r2, [r3, #0]
 800bd88:	605a      	str	r2, [r3, #4]
 800bd8a:	609a      	str	r2, [r3, #8]
 800bd8c:	60da      	str	r2, [r3, #12]
 800bd8e:	611a      	str	r2, [r3, #16]
 800bd90:	615a      	str	r2, [r3, #20]
 800bd92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800bd94:	4b32      	ldr	r3, [pc, #200]	; (800be60 <MX_TIM2_Init+0xfc>)
 800bd96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800bd9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800bd9c:	4b30      	ldr	r3, [pc, #192]	; (800be60 <MX_TIM2_Init+0xfc>)
 800bd9e:	2200      	movs	r2, #0
 800bda0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bda2:	4b2f      	ldr	r3, [pc, #188]	; (800be60 <MX_TIM2_Init+0xfc>)
 800bda4:	2200      	movs	r2, #0
 800bda6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800bda8:	4b2d      	ldr	r3, [pc, #180]	; (800be60 <MX_TIM2_Init+0xfc>)
 800bdaa:	f240 32e7 	movw	r2, #999	; 0x3e7
 800bdae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bdb0:	4b2b      	ldr	r3, [pc, #172]	; (800be60 <MX_TIM2_Init+0xfc>)
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bdb6:	4b2a      	ldr	r3, [pc, #168]	; (800be60 <MX_TIM2_Init+0xfc>)
 800bdb8:	2200      	movs	r2, #0
 800bdba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800bdbc:	4828      	ldr	r0, [pc, #160]	; (800be60 <MX_TIM2_Init+0xfc>)
 800bdbe:	f7f7 fc19 	bl	80035f4 <HAL_TIM_Base_Init>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d001      	beq.n	800bdcc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800bdc8:	f000 faf5 	bl	800c3b6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bdcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdd0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800bdd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	4821      	ldr	r0, [pc, #132]	; (800be60 <MX_TIM2_Init+0xfc>)
 800bdda:	f7f7 ffbd 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800bdde:	4603      	mov	r3, r0
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d001      	beq.n	800bde8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800bde4:	f000 fae7 	bl	800c3b6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800bde8:	481d      	ldr	r0, [pc, #116]	; (800be60 <MX_TIM2_Init+0xfc>)
 800bdea:	f7f7 fc52 	bl	8003692 <HAL_TIM_PWM_Init>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d001      	beq.n	800bdf8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800bdf4:	f000 fadf 	bl	800c3b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800be00:	f107 0320 	add.w	r3, r7, #32
 800be04:	4619      	mov	r1, r3
 800be06:	4816      	ldr	r0, [pc, #88]	; (800be60 <MX_TIM2_Init+0xfc>)
 800be08:	f7f8 fb95 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d001      	beq.n	800be16 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800be12:	f000 fad0 	bl	800c3b6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800be16:	2360      	movs	r3, #96	; 0x60
 800be18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800be1a:	2300      	movs	r3, #0
 800be1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800be1e:	2300      	movs	r3, #0
 800be20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800be22:	2300      	movs	r3, #0
 800be24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800be26:	1d3b      	adds	r3, r7, #4
 800be28:	2200      	movs	r2, #0
 800be2a:	4619      	mov	r1, r3
 800be2c:	480c      	ldr	r0, [pc, #48]	; (800be60 <MX_TIM2_Init+0xfc>)
 800be2e:	f7f7 fecd 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d001      	beq.n	800be3c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800be38:	f000 fabd 	bl	800c3b6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800be3c:	1d3b      	adds	r3, r7, #4
 800be3e:	220c      	movs	r2, #12
 800be40:	4619      	mov	r1, r3
 800be42:	4807      	ldr	r0, [pc, #28]	; (800be60 <MX_TIM2_Init+0xfc>)
 800be44:	f7f7 fec2 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800be4e:	f000 fab2 	bl	800c3b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800be52:	4803      	ldr	r0, [pc, #12]	; (800be60 <MX_TIM2_Init+0xfc>)
 800be54:	f003 fce2 	bl	800f81c <HAL_TIM_MspPostInit>

}
 800be58:	bf00      	nop
 800be5a:	3738      	adds	r7, #56	; 0x38
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	20000c5c 	.word	0x20000c5c

0800be64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b08e      	sub	sp, #56	; 0x38
 800be68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800be6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be6e:	2200      	movs	r2, #0
 800be70:	601a      	str	r2, [r3, #0]
 800be72:	605a      	str	r2, [r3, #4]
 800be74:	609a      	str	r2, [r3, #8]
 800be76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800be78:	f107 0320 	add.w	r3, r7, #32
 800be7c:	2200      	movs	r2, #0
 800be7e:	601a      	str	r2, [r3, #0]
 800be80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800be82:	1d3b      	adds	r3, r7, #4
 800be84:	2200      	movs	r2, #0
 800be86:	601a      	str	r2, [r3, #0]
 800be88:	605a      	str	r2, [r3, #4]
 800be8a:	609a      	str	r2, [r3, #8]
 800be8c:	60da      	str	r2, [r3, #12]
 800be8e:	611a      	str	r2, [r3, #16]
 800be90:	615a      	str	r2, [r3, #20]
 800be92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800be94:	4b2c      	ldr	r3, [pc, #176]	; (800bf48 <MX_TIM3_Init+0xe4>)
 800be96:	4a2d      	ldr	r2, [pc, #180]	; (800bf4c <MX_TIM3_Init+0xe8>)
 800be98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800be9a:	4b2b      	ldr	r3, [pc, #172]	; (800bf48 <MX_TIM3_Init+0xe4>)
 800be9c:	223f      	movs	r2, #63	; 0x3f
 800be9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bea0:	4b29      	ldr	r3, [pc, #164]	; (800bf48 <MX_TIM3_Init+0xe4>)
 800bea2:	2200      	movs	r2, #0
 800bea4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800bea6:	4b28      	ldr	r3, [pc, #160]	; (800bf48 <MX_TIM3_Init+0xe4>)
 800bea8:	2200      	movs	r2, #0
 800beaa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800beac:	4b26      	ldr	r3, [pc, #152]	; (800bf48 <MX_TIM3_Init+0xe4>)
 800beae:	2200      	movs	r2, #0
 800beb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800beb2:	4b25      	ldr	r3, [pc, #148]	; (800bf48 <MX_TIM3_Init+0xe4>)
 800beb4:	2200      	movs	r2, #0
 800beb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800beb8:	4823      	ldr	r0, [pc, #140]	; (800bf48 <MX_TIM3_Init+0xe4>)
 800beba:	f7f7 fb9b 	bl	80035f4 <HAL_TIM_Base_Init>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d001      	beq.n	800bec8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800bec4:	f000 fa77 	bl	800c3b6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800becc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800bece:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bed2:	4619      	mov	r1, r3
 800bed4:	481c      	ldr	r0, [pc, #112]	; (800bf48 <MX_TIM3_Init+0xe4>)
 800bed6:	f7f7 ff3f 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d001      	beq.n	800bee4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800bee0:	f000 fa69 	bl	800c3b6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800bee4:	4818      	ldr	r0, [pc, #96]	; (800bf48 <MX_TIM3_Init+0xe4>)
 800bee6:	f7f7 fbd4 	bl	8003692 <HAL_TIM_PWM_Init>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d001      	beq.n	800bef4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800bef0:	f000 fa61 	bl	800c3b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bef4:	2300      	movs	r3, #0
 800bef6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bef8:	2300      	movs	r3, #0
 800befa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800befc:	f107 0320 	add.w	r3, r7, #32
 800bf00:	4619      	mov	r1, r3
 800bf02:	4811      	ldr	r0, [pc, #68]	; (800bf48 <MX_TIM3_Init+0xe4>)
 800bf04:	f7f8 fb17 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d001      	beq.n	800bf12 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800bf0e:	f000 fa52 	bl	800c3b6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800bf12:	2360      	movs	r3, #96	; 0x60
 800bf14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800bf16:	2300      	movs	r3, #0
 800bf18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800bf22:	1d3b      	adds	r3, r7, #4
 800bf24:	2204      	movs	r2, #4
 800bf26:	4619      	mov	r1, r3
 800bf28:	4807      	ldr	r0, [pc, #28]	; (800bf48 <MX_TIM3_Init+0xe4>)
 800bf2a:	f7f7 fe4f 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d001      	beq.n	800bf38 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800bf34:	f000 fa3f 	bl	800c3b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800bf38:	4803      	ldr	r0, [pc, #12]	; (800bf48 <MX_TIM3_Init+0xe4>)
 800bf3a:	f003 fc6f 	bl	800f81c <HAL_TIM_MspPostInit>

}
 800bf3e:	bf00      	nop
 800bf40:	3738      	adds	r7, #56	; 0x38
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	20000ae0 	.word	0x20000ae0
 800bf4c:	40000400 	.word	0x40000400

0800bf50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b08c      	sub	sp, #48	; 0x30
 800bf54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800bf56:	f107 030c 	add.w	r3, r7, #12
 800bf5a:	2224      	movs	r2, #36	; 0x24
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f003 fe7e 	bl	800fc60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bf64:	1d3b      	adds	r3, r7, #4
 800bf66:	2200      	movs	r2, #0
 800bf68:	601a      	str	r2, [r3, #0]
 800bf6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800bf6c:	4b20      	ldr	r3, [pc, #128]	; (800bff0 <MX_TIM4_Init+0xa0>)
 800bf6e:	4a21      	ldr	r2, [pc, #132]	; (800bff4 <MX_TIM4_Init+0xa4>)
 800bf70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800bf72:	4b1f      	ldr	r3, [pc, #124]	; (800bff0 <MX_TIM4_Init+0xa0>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bf78:	4b1d      	ldr	r3, [pc, #116]	; (800bff0 <MX_TIM4_Init+0xa0>)
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800bf7e:	4b1c      	ldr	r3, [pc, #112]	; (800bff0 <MX_TIM4_Init+0xa0>)
 800bf80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bf86:	4b1a      	ldr	r3, [pc, #104]	; (800bff0 <MX_TIM4_Init+0xa0>)
 800bf88:	2200      	movs	r2, #0
 800bf8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bf8c:	4b18      	ldr	r3, [pc, #96]	; (800bff0 <MX_TIM4_Init+0xa0>)
 800bf8e:	2200      	movs	r2, #0
 800bf90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800bf92:	2303      	movs	r3, #3
 800bf94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800bf96:	2300      	movs	r3, #0
 800bf98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800bfb6:	f107 030c 	add.w	r3, r7, #12
 800bfba:	4619      	mov	r1, r3
 800bfbc:	480c      	ldr	r0, [pc, #48]	; (800bff0 <MX_TIM4_Init+0xa0>)
 800bfbe:	f7f7 fc33 	bl	8003828 <HAL_TIM_Encoder_Init>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d001      	beq.n	800bfcc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800bfc8:	f000 f9f5 	bl	800c3b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800bfd4:	1d3b      	adds	r3, r7, #4
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	4805      	ldr	r0, [pc, #20]	; (800bff0 <MX_TIM4_Init+0xa0>)
 800bfda:	f7f8 faac 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d001      	beq.n	800bfe8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800bfe4:	f000 f9e7 	bl	800c3b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800bfe8:	bf00      	nop
 800bfea:	3730      	adds	r7, #48	; 0x30
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	20000344 	.word	0x20000344
 800bff4:	40000800 	.word	0x40000800

0800bff8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b082      	sub	sp, #8
 800bffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bffe:	463b      	mov	r3, r7
 800c000:	2200      	movs	r2, #0
 800c002:	601a      	str	r2, [r3, #0]
 800c004:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800c006:	4b15      	ldr	r3, [pc, #84]	; (800c05c <MX_TIM6_Init+0x64>)
 800c008:	4a15      	ldr	r2, [pc, #84]	; (800c060 <MX_TIM6_Init+0x68>)
 800c00a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800c00c:	4b13      	ldr	r3, [pc, #76]	; (800c05c <MX_TIM6_Init+0x64>)
 800c00e:	2253      	movs	r2, #83	; 0x53
 800c010:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c012:	4b12      	ldr	r3, [pc, #72]	; (800c05c <MX_TIM6_Init+0x64>)
 800c014:	2200      	movs	r2, #0
 800c016:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800c018:	4b10      	ldr	r3, [pc, #64]	; (800c05c <MX_TIM6_Init+0x64>)
 800c01a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c01e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c020:	4b0e      	ldr	r3, [pc, #56]	; (800c05c <MX_TIM6_Init+0x64>)
 800c022:	2200      	movs	r2, #0
 800c024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800c026:	480d      	ldr	r0, [pc, #52]	; (800c05c <MX_TIM6_Init+0x64>)
 800c028:	f7f7 fae4 	bl	80035f4 <HAL_TIM_Base_Init>
 800c02c:	4603      	mov	r3, r0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d001      	beq.n	800c036 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800c032:	f000 f9c0 	bl	800c3b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c036:	2300      	movs	r3, #0
 800c038:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c03a:	2300      	movs	r3, #0
 800c03c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800c03e:	463b      	mov	r3, r7
 800c040:	4619      	mov	r1, r3
 800c042:	4806      	ldr	r0, [pc, #24]	; (800c05c <MX_TIM6_Init+0x64>)
 800c044:	f7f8 fa77 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d001      	beq.n	800c052 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800c04e:	f000 f9b2 	bl	800c3b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800c052:	bf00      	nop
 800c054:	3708      	adds	r7, #8
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	20000bf8 	.word	0x20000bf8
 800c060:	40001000 	.word	0x40001000

0800c064 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b08c      	sub	sp, #48	; 0x30
 800c068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800c06a:	f107 030c 	add.w	r3, r7, #12
 800c06e:	2224      	movs	r2, #36	; 0x24
 800c070:	2100      	movs	r1, #0
 800c072:	4618      	mov	r0, r3
 800c074:	f003 fdf4 	bl	800fc60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c078:	1d3b      	adds	r3, r7, #4
 800c07a:	2200      	movs	r2, #0
 800c07c:	601a      	str	r2, [r3, #0]
 800c07e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800c080:	4b22      	ldr	r3, [pc, #136]	; (800c10c <MX_TIM8_Init+0xa8>)
 800c082:	4a23      	ldr	r2, [pc, #140]	; (800c110 <MX_TIM8_Init+0xac>)
 800c084:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800c086:	4b21      	ldr	r3, [pc, #132]	; (800c10c <MX_TIM8_Init+0xa8>)
 800c088:	2200      	movs	r2, #0
 800c08a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c08c:	4b1f      	ldr	r3, [pc, #124]	; (800c10c <MX_TIM8_Init+0xa8>)
 800c08e:	2200      	movs	r2, #0
 800c090:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800c092:	4b1e      	ldr	r3, [pc, #120]	; (800c10c <MX_TIM8_Init+0xa8>)
 800c094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c098:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c09a:	4b1c      	ldr	r3, [pc, #112]	; (800c10c <MX_TIM8_Init+0xa8>)
 800c09c:	2200      	movs	r2, #0
 800c09e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800c0a0:	4b1a      	ldr	r3, [pc, #104]	; (800c10c <MX_TIM8_Init+0xa8>)
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c0a6:	4b19      	ldr	r3, [pc, #100]	; (800c10c <MX_TIM8_Init+0xa8>)
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800c0ac:	2303      	movs	r3, #3
 800c0ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800c0d0:	f107 030c 	add.w	r3, r7, #12
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	480d      	ldr	r0, [pc, #52]	; (800c10c <MX_TIM8_Init+0xa8>)
 800c0d8:	f7f7 fba6 	bl	8003828 <HAL_TIM_Encoder_Init>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d001      	beq.n	800c0e6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800c0e2:	f000 f968 	bl	800c3b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800c0ee:	1d3b      	adds	r3, r7, #4
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	4806      	ldr	r0, [pc, #24]	; (800c10c <MX_TIM8_Init+0xa8>)
 800c0f4:	f7f8 fa1f 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d001      	beq.n	800c102 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800c0fe:	f000 f95a 	bl	800c3b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800c102:	bf00      	nop
 800c104:	3730      	adds	r7, #48	; 0x30
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	20000304 	.word	0x20000304
 800c110:	40010400 	.word	0x40010400

0800c114 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c118:	4b11      	ldr	r3, [pc, #68]	; (800c160 <MX_USART1_UART_Init+0x4c>)
 800c11a:	4a12      	ldr	r2, [pc, #72]	; (800c164 <MX_USART1_UART_Init+0x50>)
 800c11c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800c11e:	4b10      	ldr	r3, [pc, #64]	; (800c160 <MX_USART1_UART_Init+0x4c>)
 800c120:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800c124:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c126:	4b0e      	ldr	r3, [pc, #56]	; (800c160 <MX_USART1_UART_Init+0x4c>)
 800c128:	2200      	movs	r2, #0
 800c12a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c12c:	4b0c      	ldr	r3, [pc, #48]	; (800c160 <MX_USART1_UART_Init+0x4c>)
 800c12e:	2200      	movs	r2, #0
 800c130:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c132:	4b0b      	ldr	r3, [pc, #44]	; (800c160 <MX_USART1_UART_Init+0x4c>)
 800c134:	2200      	movs	r2, #0
 800c136:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c138:	4b09      	ldr	r3, [pc, #36]	; (800c160 <MX_USART1_UART_Init+0x4c>)
 800c13a:	220c      	movs	r2, #12
 800c13c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c13e:	4b08      	ldr	r3, [pc, #32]	; (800c160 <MX_USART1_UART_Init+0x4c>)
 800c140:	2200      	movs	r2, #0
 800c142:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c144:	4b06      	ldr	r3, [pc, #24]	; (800c160 <MX_USART1_UART_Init+0x4c>)
 800c146:	2200      	movs	r2, #0
 800c148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c14a:	4805      	ldr	r0, [pc, #20]	; (800c160 <MX_USART1_UART_Init+0x4c>)
 800c14c:	f7f8 fa4c 	bl	80045e8 <HAL_UART_Init>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d001      	beq.n	800c15a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c156:	f000 f92e 	bl	800c3b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c15a:	bf00      	nop
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	20000ba4 	.word	0x20000ba4
 800c164:	40011000 	.word	0x40011000

0800c168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b08a      	sub	sp, #40	; 0x28
 800c16c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c16e:	f107 0314 	add.w	r3, r7, #20
 800c172:	2200      	movs	r2, #0
 800c174:	601a      	str	r2, [r3, #0]
 800c176:	605a      	str	r2, [r3, #4]
 800c178:	609a      	str	r2, [r3, #8]
 800c17a:	60da      	str	r2, [r3, #12]
 800c17c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c17e:	2300      	movs	r3, #0
 800c180:	613b      	str	r3, [r7, #16]
 800c182:	4b53      	ldr	r3, [pc, #332]	; (800c2d0 <MX_GPIO_Init+0x168>)
 800c184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c186:	4a52      	ldr	r2, [pc, #328]	; (800c2d0 <MX_GPIO_Init+0x168>)
 800c188:	f043 0304 	orr.w	r3, r3, #4
 800c18c:	6313      	str	r3, [r2, #48]	; 0x30
 800c18e:	4b50      	ldr	r3, [pc, #320]	; (800c2d0 <MX_GPIO_Init+0x168>)
 800c190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c192:	f003 0304 	and.w	r3, r3, #4
 800c196:	613b      	str	r3, [r7, #16]
 800c198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c19a:	2300      	movs	r3, #0
 800c19c:	60fb      	str	r3, [r7, #12]
 800c19e:	4b4c      	ldr	r3, [pc, #304]	; (800c2d0 <MX_GPIO_Init+0x168>)
 800c1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1a2:	4a4b      	ldr	r2, [pc, #300]	; (800c2d0 <MX_GPIO_Init+0x168>)
 800c1a4:	f043 0301 	orr.w	r3, r3, #1
 800c1a8:	6313      	str	r3, [r2, #48]	; 0x30
 800c1aa:	4b49      	ldr	r3, [pc, #292]	; (800c2d0 <MX_GPIO_Init+0x168>)
 800c1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ae:	f003 0301 	and.w	r3, r3, #1
 800c1b2:	60fb      	str	r3, [r7, #12]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	60bb      	str	r3, [r7, #8]
 800c1ba:	4b45      	ldr	r3, [pc, #276]	; (800c2d0 <MX_GPIO_Init+0x168>)
 800c1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1be:	4a44      	ldr	r2, [pc, #272]	; (800c2d0 <MX_GPIO_Init+0x168>)
 800c1c0:	f043 0302 	orr.w	r3, r3, #2
 800c1c4:	6313      	str	r3, [r2, #48]	; 0x30
 800c1c6:	4b42      	ldr	r3, [pc, #264]	; (800c2d0 <MX_GPIO_Init+0x168>)
 800c1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ca:	f003 0302 	and.w	r3, r3, #2
 800c1ce:	60bb      	str	r3, [r7, #8]
 800c1d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	607b      	str	r3, [r7, #4]
 800c1d6:	4b3e      	ldr	r3, [pc, #248]	; (800c2d0 <MX_GPIO_Init+0x168>)
 800c1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1da:	4a3d      	ldr	r2, [pc, #244]	; (800c2d0 <MX_GPIO_Init+0x168>)
 800c1dc:	f043 0308 	orr.w	r3, r3, #8
 800c1e0:	6313      	str	r3, [r2, #48]	; 0x30
 800c1e2:	4b3b      	ldr	r3, [pc, #236]	; (800c2d0 <MX_GPIO_Init+0x168>)
 800c1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1e6:	f003 0308 	and.w	r3, r3, #8
 800c1ea:	607b      	str	r3, [r7, #4]
 800c1ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f24e 213c 	movw	r1, #57916	; 0xe23c
 800c1f4:	4837      	ldr	r0, [pc, #220]	; (800c2d4 <MX_GPIO_Init+0x16c>)
 800c1f6:	f7f6 f885 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800c200:	4835      	ldr	r0, [pc, #212]	; (800c2d8 <MX_GPIO_Init+0x170>)
 800c202:	f7f6 f87f 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800c206:	2200      	movs	r2, #0
 800c208:	f242 7103 	movw	r1, #9987	; 0x2703
 800c20c:	4833      	ldr	r0, [pc, #204]	; (800c2dc <MX_GPIO_Init+0x174>)
 800c20e:	f7f6 f879 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800c212:	2200      	movs	r2, #0
 800c214:	2104      	movs	r1, #4
 800c216:	4832      	ldr	r0, [pc, #200]	; (800c2e0 <MX_GPIO_Init+0x178>)
 800c218:	f7f6 f874 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800c21c:	f24e 233c 	movw	r3, #57916	; 0xe23c
 800c220:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c222:	2301      	movs	r3, #1
 800c224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c226:	2300      	movs	r3, #0
 800c228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c22a:	2300      	movs	r3, #0
 800c22c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c22e:	f107 0314 	add.w	r3, r7, #20
 800c232:	4619      	mov	r1, r3
 800c234:	4827      	ldr	r0, [pc, #156]	; (800c2d4 <MX_GPIO_Init+0x16c>)
 800c236:	f7f5 feb3 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800c23a:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800c23e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c240:	2301      	movs	r3, #1
 800c242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c244:	2300      	movs	r3, #0
 800c246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c248:	2300      	movs	r3, #0
 800c24a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c24c:	f107 0314 	add.w	r3, r7, #20
 800c250:	4619      	mov	r1, r3
 800c252:	4821      	ldr	r0, [pc, #132]	; (800c2d8 <MX_GPIO_Init+0x170>)
 800c254:	f7f5 fea4 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800c258:	f242 7303 	movw	r3, #9987	; 0x2703
 800c25c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c25e:	2301      	movs	r3, #1
 800c260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c262:	2300      	movs	r3, #0
 800c264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c266:	2300      	movs	r3, #0
 800c268:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c26a:	f107 0314 	add.w	r3, r7, #20
 800c26e:	4619      	mov	r1, r3
 800c270:	481a      	ldr	r0, [pc, #104]	; (800c2dc <MX_GPIO_Init+0x174>)
 800c272:	f7f5 fe95 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800c276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c27a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c27c:	2300      	movs	r3, #0
 800c27e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c280:	2301      	movs	r3, #1
 800c282:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c284:	f107 0314 	add.w	r3, r7, #20
 800c288:	4619      	mov	r1, r3
 800c28a:	4814      	ldr	r0, [pc, #80]	; (800c2dc <MX_GPIO_Init+0x174>)
 800c28c:	f7f5 fe88 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800c290:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c296:	2300      	movs	r3, #0
 800c298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c29a:	2300      	movs	r3, #0
 800c29c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c29e:	f107 0314 	add.w	r3, r7, #20
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	480c      	ldr	r0, [pc, #48]	; (800c2d8 <MX_GPIO_Init+0x170>)
 800c2a6:	f7f5 fe7b 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c2aa:	2304      	movs	r3, #4
 800c2ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c2ba:	f107 0314 	add.w	r3, r7, #20
 800c2be:	4619      	mov	r1, r3
 800c2c0:	4807      	ldr	r0, [pc, #28]	; (800c2e0 <MX_GPIO_Init+0x178>)
 800c2c2:	f7f5 fe6d 	bl	8001fa0 <HAL_GPIO_Init>

}
 800c2c6:	bf00      	nop
 800c2c8:	3728      	adds	r7, #40	; 0x28
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	40023800 	.word	0x40023800
 800c2d4:	40020800 	.word	0x40020800
 800c2d8:	40020000 	.word	0x40020000
 800c2dc:	40020400 	.word	0x40020400
 800c2e0:	40020c00 	.word	0x40020c00

0800c2e4 <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b08a      	sub	sp, #40	; 0x28
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c2ee:	2360      	movs	r3, #96	; 0x60
 800c2f0:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 800c2fa:	4a15      	ldr	r2, [pc, #84]	; (800c350 <buzzer+0x6c>)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	fb92 f3f3 	sdiv	r3, r2, r3
 800c302:	4a14      	ldr	r2, [pc, #80]	; (800c354 <buzzer+0x70>)
 800c304:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 800c306:	4b13      	ldr	r3, [pc, #76]	; (800c354 <buzzer+0x70>)
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	4b13      	ldr	r3, [pc, #76]	; (800c358 <buzzer+0x74>)
 800c30c:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 10;
 800c30e:	4b11      	ldr	r3, [pc, #68]	; (800c354 <buzzer+0x70>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a12      	ldr	r2, [pc, #72]	; (800c35c <buzzer+0x78>)
 800c314:	fb82 1203 	smull	r1, r2, r2, r3
 800c318:	1092      	asrs	r2, r2, #2
 800c31a:	17db      	asrs	r3, r3, #31
 800c31c:	1ad3      	subs	r3, r2, r3
 800c31e:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_2);
 800c320:	f107 030c 	add.w	r3, r7, #12
 800c324:	2204      	movs	r2, #4
 800c326:	4619      	mov	r1, r3
 800c328:	480d      	ldr	r0, [pc, #52]	; (800c360 <buzzer+0x7c>)
 800c32a:	f7f7 fc4f 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800c32e:	2104      	movs	r1, #4
 800c330:	480b      	ldr	r0, [pc, #44]	; (800c360 <buzzer+0x7c>)
 800c332:	f7f7 f9e3 	bl	80036fc <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	4618      	mov	r0, r3
 800c33a:	f7f4 fe6f 	bl	800101c <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800c33e:	2104      	movs	r1, #4
 800c340:	4807      	ldr	r0, [pc, #28]	; (800c360 <buzzer+0x7c>)
 800c342:	f7f7 fa19 	bl	8003778 <HAL_TIM_PWM_Stop>
}
 800c346:	bf00      	nop
 800c348:	3728      	adds	r7, #40	; 0x28
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	000f4240 	.word	0x000f4240
 800c354:	200002fc 	.word	0x200002fc
 800c358:	40000400 	.word	0x40000400
 800c35c:	66666667 	.word	0x66666667
 800c360:	20000ae0 	.word	0x20000ae0

0800c364 <get_adc_value>:


int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 800c364:	b580      	push	{r7, lr}
 800c366:	b086      	sub	sp, #24
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 800c36e:	f107 0308 	add.w	r3, r7, #8
 800c372:	2200      	movs	r2, #0
 800c374:	601a      	str	r2, [r3, #0]
 800c376:	605a      	str	r2, [r3, #4]
 800c378:	609a      	str	r2, [r3, #8]
 800c37a:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 800c380:	2301      	movs	r3, #1
 800c382:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800c384:	2300      	movs	r3, #0
 800c386:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800c388:	2300      	movs	r3, #0
 800c38a:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 800c38c:	f107 0308 	add.w	r3, r7, #8
 800c390:	4619      	mov	r1, r3
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f7f5 f800 	bl	8001398 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f7f4 fea5 	bl	80010e8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 800c39e:	2164      	movs	r1, #100	; 0x64
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f7f4 ff67 	bl	8001274 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f7f4 ffe8 	bl	800137c <HAL_ADC_GetValue>
 800c3ac:	4603      	mov	r3, r0
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3718      	adds	r7, #24
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c3b6:	b480      	push	{r7}
 800c3b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c3ba:	bf00      	nop
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <search_init>:

#include "global.h"

void search_init(void){
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	af00      	add	r7, sp, #0

	//----a探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 800c3c8:	4b09      	ldr	r3, [pc, #36]	; (800c3f0 <search_init+0x2c>)
 800c3ca:	2209      	movs	r2, #9
 800c3cc:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 800c3ce:	4b09      	ldr	r3, [pc, #36]	; (800c3f4 <search_init+0x30>)
 800c3d0:	2206      	movs	r2, #6
 800c3d2:	701a      	strb	r2, [r3, #0]
	map_Init();						//aマップの初期化
 800c3d4:	f000 ff54 	bl	800d280 <map_Init>
	mouse.x = 0;
 800c3d8:	4b07      	ldr	r3, [pc, #28]	; (800c3f8 <search_init+0x34>)
 800c3da:	2200      	movs	r2, #0
 800c3dc:	701a      	strb	r2, [r3, #0]
	mouse.y = 0;					//a現在地の初期化
 800c3de:	4b06      	ldr	r3, [pc, #24]	; (800c3f8 <search_init+0x34>)
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	705a      	strb	r2, [r3, #1]
	mouse.dir = 0;					//aマウスの向きの初期化
 800c3e4:	4b04      	ldr	r3, [pc, #16]	; (800c3f8 <search_init+0x34>)
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	709a      	strb	r2, [r3, #2]
}
 800c3ea:	bf00      	nop
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	20000bf1 	.word	0x20000bf1
 800c3f4:	20000b8c 	.word	0x20000b8c
 800c3f8:	20000c54 	.word	0x20000c54

0800c3fc <searchA>:
//searchA
//a1区画走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchA(){
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800c400:	4b37      	ldr	r3, [pc, #220]	; (800c4e0 <searchA+0xe4>)
 800c402:	881b      	ldrh	r3, [r3, #0]
 800c404:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d001      	beq.n	800c412 <searchA+0x16>
		load_map_from_eeprom();
 800c40e:	f002 fdaf 	bl	800ef70 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800c412:	f002 fe25 	bl	800f060 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800c416:	4b33      	ldr	r3, [pc, #204]	; (800c4e4 <searchA+0xe8>)
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800c41e:	b2da      	uxtb	r2, r3
 800c420:	4b30      	ldr	r3, [pc, #192]	; (800c4e4 <searchA+0xe8>)
 800c422:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800c424:	f000 ff98 	bl	800d358 <write_map>

	//====a歩数マップ・経路作成====
	r_cnt = 0;												//a経路カウンタの初期化
 800c428:	4b2f      	ldr	r3, [pc, #188]	; (800c4e8 <searchA+0xec>)
 800c42a:	2200      	movs	r2, #0
 800c42c:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800c42e:	f001 f993 	bl	800d758 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800c432:	f001 fccf 	bl	800ddd4 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800c436:	4b2c      	ldr	r3, [pc, #176]	; (800c4e8 <searchA+0xec>)
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	1c5a      	adds	r2, r3, #1
 800c43c:	b2d1      	uxtb	r1, r2
 800c43e:	4a2a      	ldr	r2, [pc, #168]	; (800c4e8 <searchA+0xec>)
 800c440:	7011      	strb	r1, [r2, #0]
 800c442:	461a      	mov	r2, r3
 800c444:	4b29      	ldr	r3, [pc, #164]	; (800c4ec <searchA+0xf0>)
 800c446:	5c9b      	ldrb	r3, [r3, r2]
 800c448:	2b22      	cmp	r3, #34	; 0x22
 800c44a:	d00b      	beq.n	800c464 <searchA+0x68>
 800c44c:	2b22      	cmp	r3, #34	; 0x22
 800c44e:	dc02      	bgt.n	800c456 <searchA+0x5a>
 800c450:	2b11      	cmp	r3, #17
 800c452:	d012      	beq.n	800c47a <searchA+0x7e>
 800c454:	e015      	b.n	800c482 <searchA+0x86>
 800c456:	2b44      	cmp	r3, #68	; 0x44
 800c458:	d001      	beq.n	800c45e <searchA+0x62>
 800c45a:	2b88      	cmp	r3, #136	; 0x88
			//----a前進----
			case 0x88:
				break;
 800c45c:	e011      	b.n	800c482 <searchA+0x86>
			//----a右折----
			case 0x44:
				rotate_R90();								//a右回転
 800c45e:	f7f9 fc63 	bl	8005d28 <rotate_R90>
				break;
 800c462:	e00e      	b.n	800c482 <searchA+0x86>
			//----180回転----
			case 0x22:
				rotate_180();								//180度回転
 800c464:	f7f9 fe18 	bl	8006098 <rotate_180>
				if(wall_info & 0x88){
 800c468:	4b1e      	ldr	r3, [pc, #120]	; (800c4e4 <searchA+0xe8>)
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800c470:	2b00      	cmp	r3, #0
 800c472:	d005      	beq.n	800c480 <searchA+0x84>
					set_position();
 800c474:	f7f9 f986 	bl	8005784 <set_position>
				}
				break;
 800c478:	e002      	b.n	800c480 <searchA+0x84>
			//----a左折----
			case 0x11:
				rotate_L90();								//a左回転
 800c47a:	f7f9 fd31 	bl	8005ee0 <rotate_L90>
				break;
 800c47e:	e000      	b.n	800c482 <searchA+0x86>
				break;
 800c480:	bf00      	nop
		}

		drive_wait();
 800c482:	2032      	movs	r0, #50	; 0x32
 800c484:	f7f4 fdca 	bl	800101c <HAL_Delay>
		one_section();										//a前進する
 800c488:	f7f9 fae8 	bl	8005a5c <one_section>
		drive_wait();
 800c48c:	2032      	movs	r0, #50	; 0x32
 800c48e:	f7f4 fdc5 	bl	800101c <HAL_Delay>

		adv_pos();											//aマイクロマウス内部位置情報でも前進処理
 800c492:	f000 fe9d 	bl	800d1d0 <adv_pos>
		conf_route();										//a最短経路で進行可能か判定
 800c496:	f000 fed5 	bl	800d244 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));		//a現在座標とgoal座標が等しくなるまで実行
 800c49a:	4b15      	ldr	r3, [pc, #84]	; (800c4f0 <searchA+0xf4>)
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	b2da      	uxtb	r2, r3
 800c4a0:	4b14      	ldr	r3, [pc, #80]	; (800c4f4 <searchA+0xf8>)
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d1c6      	bne.n	800c436 <searchA+0x3a>
 800c4a8:	4b11      	ldr	r3, [pc, #68]	; (800c4f0 <searchA+0xf4>)
 800c4aa:	785b      	ldrb	r3, [r3, #1]
 800c4ac:	b2da      	uxtb	r2, r3
 800c4ae:	4b12      	ldr	r3, [pc, #72]	; (800c4f8 <searchA+0xfc>)
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d1bf      	bne.n	800c436 <searchA+0x3a>

	printf("goal\n");
 800c4b6:	4811      	ldr	r0, [pc, #68]	; (800c4fc <searchA+0x100>)
 800c4b8:	f003 fc4e 	bl	800fd58 <puts>
	HAL_Delay(500);										//aスタートでは***2秒以上***停止しなくてはならない
 800c4bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c4c0:	f7f4 fdac 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800c4c4:	f7f9 fde8 	bl	8006098 <rotate_180>

	if(!MF.FLAG.SCND){
 800c4c8:	4b05      	ldr	r3, [pc, #20]	; (800c4e0 <searchA+0xe4>)
 800c4ca:	881b      	ldrh	r3, [r3, #0]
 800c4cc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d101      	bne.n	800c4da <searchA+0xde>
		store_map_in_eeprom();
 800c4d6:	f002 fd11 	bl	800eefc <store_map_in_eeprom>
	}
}
 800c4da:	bf00      	nop
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	20000fac 	.word	0x20000fac
 800c4e4:	20000300 	.word	0x20000300
 800c4e8:	20001614 	.word	0x20001614
 800c4ec:	20000c9c 	.word	0x20000c9c
 800c4f0:	20000c54 	.word	0x20000c54
 800c4f4:	20000bf1 	.word	0x20000bf1
 800c4f8:	20000b8c 	.word	0x20000b8c
 800c4fc:	080113b4 	.word	0x080113b4

0800c500 <searchB>:
//searchB
//a連続走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchB(){
 800c500:	b580      	push	{r7, lr}
 800c502:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800c504:	4b3c      	ldr	r3, [pc, #240]	; (800c5f8 <searchB+0xf8>)
 800c506:	881b      	ldrh	r3, [r3, #0]
 800c508:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d001      	beq.n	800c516 <searchB+0x16>
		load_map_from_eeprom();
 800c512:	f002 fd2d 	bl	800ef70 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800c516:	f002 fda3 	bl	800f060 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800c51a:	4b38      	ldr	r3, [pc, #224]	; (800c5fc <searchB+0xfc>)
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800c522:	b2da      	uxtb	r2, r3
 800c524:	4b35      	ldr	r3, [pc, #212]	; (800c5fc <searchB+0xfc>)
 800c526:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800c528:	f000 ff16 	bl	800d358 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800c52c:	f7f9 f940 	bl	80057b0 <start_sectionA>
	adv_pos();
 800c530:	f000 fe4e 	bl	800d1d0 <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 800c534:	f000 ff10 	bl	800d358 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800c538:	4b31      	ldr	r3, [pc, #196]	; (800c600 <searchB+0x100>)
 800c53a:	2200      	movs	r2, #0
 800c53c:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800c53e:	f001 f90b 	bl	800d758 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800c542:	f001 fc47 	bl	800ddd4 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800c546:	4b2e      	ldr	r3, [pc, #184]	; (800c600 <searchB+0x100>)
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	1c5a      	adds	r2, r3, #1
 800c54c:	b2d1      	uxtb	r1, r2
 800c54e:	4a2c      	ldr	r2, [pc, #176]	; (800c600 <searchB+0x100>)
 800c550:	7011      	strb	r1, [r2, #0]
 800c552:	461a      	mov	r2, r3
 800c554:	4b2b      	ldr	r3, [pc, #172]	; (800c604 <searchB+0x104>)
 800c556:	5c9b      	ldrb	r3, [r3, r2]
 800c558:	2b22      	cmp	r3, #34	; 0x22
 800c55a:	d012      	beq.n	800c582 <searchB+0x82>
 800c55c:	2b22      	cmp	r3, #34	; 0x22
 800c55e:	dc02      	bgt.n	800c566 <searchB+0x66>
 800c560:	2b11      	cmp	r3, #17
 800c562:	d01d      	beq.n	800c5a0 <searchB+0xa0>
 800c564:	e023      	b.n	800c5ae <searchB+0xae>
 800c566:	2b44      	cmp	r3, #68	; 0x44
 800c568:	d004      	beq.n	800c574 <searchB+0x74>
 800c56a:	2b88      	cmp	r3, #136	; 0x88
 800c56c:	d11f      	bne.n	800c5ae <searchB+0xae>
			//----a前進----
			case 0x88:
				one_sectionU();
 800c56e:	f7f9 fbc1 	bl	8005cf4 <one_sectionU>
				break;
 800c572:	e01c      	b.n	800c5ae <searchB+0xae>
			//----a右折----
			case 0x44:
				half_sectionD();
 800c574:	f7f9 f9fc 	bl	8005970 <half_sectionD>
				rotate_R90();
 800c578:	f7f9 fbd6 	bl	8005d28 <rotate_R90>
				half_sectionA();
 800c57c:	f7f9 f9bc 	bl	80058f8 <half_sectionA>
				break;
 800c580:	e015      	b.n	800c5ae <searchB+0xae>
			//----180回転----
			case 0x22:
				half_sectionD();
 800c582:	f7f9 f9f5 	bl	8005970 <half_sectionD>
				rotate_180();
 800c586:	f7f9 fd87 	bl	8006098 <rotate_180>
				if(wall_info & 0x88){
 800c58a:	4b1c      	ldr	r3, [pc, #112]	; (800c5fc <searchB+0xfc>)
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800c592:	2b00      	cmp	r3, #0
 800c594:	d001      	beq.n	800c59a <searchB+0x9a>
					set_position();
 800c596:	f7f9 f8f5 	bl	8005784 <set_position>
				}
				half_sectionA();
 800c59a:	f7f9 f9ad 	bl	80058f8 <half_sectionA>
				break;
 800c59e:	e006      	b.n	800c5ae <searchB+0xae>
			//----a左折----
			case 0x11:
				half_sectionD();
 800c5a0:	f7f9 f9e6 	bl	8005970 <half_sectionD>
				rotate_L90();
 800c5a4:	f7f9 fc9c 	bl	8005ee0 <rotate_L90>
				half_sectionA();
 800c5a8:	f7f9 f9a6 	bl	80058f8 <half_sectionA>
				break;
 800c5ac:	bf00      	nop
		}
		adv_pos();
 800c5ae:	f000 fe0f 	bl	800d1d0 <adv_pos>
		conf_route();
 800c5b2:	f000 fe47 	bl	800d244 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800c5b6:	4b14      	ldr	r3, [pc, #80]	; (800c608 <searchB+0x108>)
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	b2da      	uxtb	r2, r3
 800c5bc:	4b13      	ldr	r3, [pc, #76]	; (800c60c <searchB+0x10c>)
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d1c0      	bne.n	800c546 <searchB+0x46>
 800c5c4:	4b10      	ldr	r3, [pc, #64]	; (800c608 <searchB+0x108>)
 800c5c6:	785b      	ldrb	r3, [r3, #1]
 800c5c8:	b2da      	uxtb	r2, r3
 800c5ca:	4b11      	ldr	r3, [pc, #68]	; (800c610 <searchB+0x110>)
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d1b9      	bne.n	800c546 <searchB+0x46>

	half_sectionD();
 800c5d2:	f7f9 f9cd 	bl	8005970 <half_sectionD>

	HAL_Delay(500);
 800c5d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c5da:	f7f4 fd1f 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800c5de:	f7f9 fd5b 	bl	8006098 <rotate_180>

	if(!MF.FLAG.SCND){
 800c5e2:	4b05      	ldr	r3, [pc, #20]	; (800c5f8 <searchB+0xf8>)
 800c5e4:	881b      	ldrh	r3, [r3, #0]
 800c5e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d101      	bne.n	800c5f4 <searchB+0xf4>
		store_map_in_eeprom();
 800c5f0:	f002 fc84 	bl	800eefc <store_map_in_eeprom>
	}
}
 800c5f4:	bf00      	nop
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	20000fac 	.word	0x20000fac
 800c5fc:	20000300 	.word	0x20000300
 800c600:	20001614 	.word	0x20001614
 800c604:	20000c9c 	.word	0x20000c9c
 800c608:	20000c54 	.word	0x20000c54
 800c60c:	20000bf1 	.word	0x20000bf1
 800c610:	20000b8c 	.word	0x20000b8c

0800c614 <searchC>:
//searchC
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC(){
 800c614:	b590      	push	{r4, r7, lr}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800c61a:	4b82      	ldr	r3, [pc, #520]	; (800c824 <searchC+0x210>)
 800c61c:	881b      	ldrh	r3, [r3, #0]
 800c61e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c622:	b2db      	uxtb	r3, r3
 800c624:	2b00      	cmp	r3, #0
 800c626:	d001      	beq.n	800c62c <searchC+0x18>
		load_map_from_eeprom();
 800c628:	f002 fca2 	bl	800ef70 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800c62c:	4b7d      	ldr	r3, [pc, #500]	; (800c824 <searchC+0x210>)
 800c62e:	881b      	ldrh	r3, [r3, #0]
 800c630:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c634:	b2db      	uxtb	r3, r3
 800c636:	2b00      	cmp	r3, #0
 800c638:	d101      	bne.n	800c63e <searchC+0x2a>
 800c63a:	f002 fd11 	bl	800f060 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800c63e:	4b79      	ldr	r3, [pc, #484]	; (800c824 <searchC+0x210>)
 800c640:	881b      	ldrh	r3, [r3, #0]
 800c642:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c646:	b2db      	uxtb	r3, r3
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d106      	bne.n	800c65a <searchC+0x46>
 800c64c:	4b76      	ldr	r3, [pc, #472]	; (800c828 <searchC+0x214>)
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800c654:	b2da      	uxtb	r2, r3
 800c656:	4b74      	ldr	r3, [pc, #464]	; (800c828 <searchC+0x214>)
 800c658:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800c65a:	4b72      	ldr	r3, [pc, #456]	; (800c824 <searchC+0x210>)
 800c65c:	881b      	ldrh	r3, [r3, #0]
 800c65e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c662:	b2db      	uxtb	r3, r3
 800c664:	2b00      	cmp	r3, #0
 800c666:	d101      	bne.n	800c66c <searchC+0x58>
 800c668:	f000 fe76 	bl	800d358 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800c66c:	f7f9 f8a0 	bl	80057b0 <start_sectionA>
	adv_pos();
 800c670:	f000 fdae 	bl	800d1d0 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800c674:	4b6b      	ldr	r3, [pc, #428]	; (800c824 <searchC+0x210>)
 800c676:	881b      	ldrh	r3, [r3, #0]
 800c678:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d101      	bne.n	800c686 <searchC+0x72>
 800c682:	f000 fe69 	bl	800d358 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800c686:	4b69      	ldr	r3, [pc, #420]	; (800c82c <searchC+0x218>)
 800c688:	2200      	movs	r2, #0
 800c68a:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800c68c:	f001 f864 	bl	800d758 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800c690:	f001 fba0 	bl	800ddd4 <make_route>
	uint8_t x, y;											//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800c694:	4b65      	ldr	r3, [pc, #404]	; (800c82c <searchC+0x218>)
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	1c5a      	adds	r2, r3, #1
 800c69a:	b2d1      	uxtb	r1, r2
 800c69c:	4a63      	ldr	r2, [pc, #396]	; (800c82c <searchC+0x218>)
 800c69e:	7011      	strb	r1, [r2, #0]
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	4b63      	ldr	r3, [pc, #396]	; (800c830 <searchC+0x21c>)
 800c6a4:	5c9b      	ldrb	r3, [r3, r2]
 800c6a6:	2b22      	cmp	r3, #34	; 0x22
 800c6a8:	d06e      	beq.n	800c788 <searchC+0x174>
 800c6aa:	2b22      	cmp	r3, #34	; 0x22
 800c6ac:	dc02      	bgt.n	800c6b4 <searchC+0xa0>
 800c6ae:	2b11      	cmp	r3, #17
 800c6b0:	d07a      	beq.n	800c7a8 <searchC+0x194>
 800c6b2:	e07c      	b.n	800c7ae <searchC+0x19a>
 800c6b4:	2b44      	cmp	r3, #68	; 0x44
 800c6b6:	d064      	beq.n	800c782 <searchC+0x16e>
 800c6b8:	2b88      	cmp	r3, #136	; 0x88
 800c6ba:	d178      	bne.n	800c7ae <searchC+0x19a>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800c6bc:	4b5b      	ldr	r3, [pc, #364]	; (800c82c <searchC+0x218>)
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	4b5b      	ldr	r3, [pc, #364]	; (800c830 <searchC+0x21c>)
 800c6c4:	5c9b      	ldrb	r3, [r3, r2]
 800c6c6:	2b88      	cmp	r3, #136	; 0x88
 800c6c8:	d14e      	bne.n	800c768 <searchC+0x154>
 800c6ca:	4b56      	ldr	r3, [pc, #344]	; (800c824 <searchC+0x210>)
 800c6cc:	881b      	ldrh	r3, [r3, #0]
 800c6ce:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d047      	beq.n	800c768 <searchC+0x154>
					x = mouse.x;
 800c6d8:	4b56      	ldr	r3, [pc, #344]	; (800c834 <searchC+0x220>)
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	71fb      	strb	r3, [r7, #7]
					y = mouse.y;
 800c6de:	4b55      	ldr	r3, [pc, #340]	; (800c834 <searchC+0x220>)
 800c6e0:	785b      	ldrb	r3, [r3, #1]
 800c6e2:	71bb      	strb	r3, [r7, #6]
					adv_pos();
 800c6e4:	f000 fd74 	bl	800d1d0 <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800c6e8:	4b52      	ldr	r3, [pc, #328]	; (800c834 <searchC+0x220>)
 800c6ea:	785b      	ldrb	r3, [r3, #1]
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	4b50      	ldr	r3, [pc, #320]	; (800c834 <searchC+0x220>)
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	4a4f      	ldr	r2, [pc, #316]	; (800c838 <searchC+0x224>)
 800c6fa:	0103      	lsls	r3, r0, #4
 800c6fc:	4413      	add	r3, r2
 800c6fe:	440b      	add	r3, r1
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	f003 030f 	and.w	r3, r3, #15
 800c706:	4a4b      	ldr	r2, [pc, #300]	; (800c834 <searchC+0x220>)
 800c708:	7852      	ldrb	r2, [r2, #1]
 800c70a:	b2d2      	uxtb	r2, r2
 800c70c:	4614      	mov	r4, r2
 800c70e:	4a49      	ldr	r2, [pc, #292]	; (800c834 <searchC+0x220>)
 800c710:	7812      	ldrb	r2, [r2, #0]
 800c712:	b2d2      	uxtb	r2, r2
 800c714:	4610      	mov	r0, r2
 800c716:	4948      	ldr	r1, [pc, #288]	; (800c838 <searchC+0x224>)
 800c718:	0122      	lsls	r2, r4, #4
 800c71a:	440a      	add	r2, r1
 800c71c:	4402      	add	r2, r0
 800c71e:	7812      	ldrb	r2, [r2, #0]
 800c720:	0912      	lsrs	r2, r2, #4
 800c722:	b2d2      	uxtb	r2, r2
 800c724:	4293      	cmp	r3, r2
 800c726:	d10c      	bne.n	800c742 <searchC+0x12e>
						if(!H_accel_flag){
 800c728:	4b44      	ldr	r3, [pc, #272]	; (800c83c <searchC+0x228>)
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d105      	bne.n	800c73c <searchC+0x128>
							one_sectionA();
 800c730:	f7f9 f99c 	bl	8005a6c <one_sectionA>
							H_accel_flag = 1;
 800c734:	4b41      	ldr	r3, [pc, #260]	; (800c83c <searchC+0x228>)
 800c736:	2201      	movs	r2, #1
 800c738:	701a      	strb	r2, [r3, #0]
 800c73a:	e00e      	b.n	800c75a <searchC+0x146>
						}else{
							one_sectionU();
 800c73c:	f7f9 fada 	bl	8005cf4 <one_sectionU>
 800c740:	e00b      	b.n	800c75a <searchC+0x146>
						}
					}else if(H_accel_flag){
 800c742:	4b3e      	ldr	r3, [pc, #248]	; (800c83c <searchC+0x228>)
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d005      	beq.n	800c756 <searchC+0x142>
						one_sectionD();
 800c74a:	f7f9 f9e1 	bl	8005b10 <one_sectionD>
						H_accel_flag = 0;
 800c74e:	4b3b      	ldr	r3, [pc, #236]	; (800c83c <searchC+0x228>)
 800c750:	2200      	movs	r2, #0
 800c752:	701a      	strb	r2, [r3, #0]
 800c754:	e001      	b.n	800c75a <searchC+0x146>
					}else{
						one_sectionU();
 800c756:	f7f9 facd 	bl	8005cf4 <one_sectionU>
					}
					mouse.x = x;
 800c75a:	4a36      	ldr	r2, [pc, #216]	; (800c834 <searchC+0x220>)
 800c75c:	79fb      	ldrb	r3, [r7, #7]
 800c75e:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800c760:	4a34      	ldr	r2, [pc, #208]	; (800c834 <searchC+0x220>)
 800c762:	79bb      	ldrb	r3, [r7, #6]
 800c764:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					H_accel_flag = 0;
				}else{
					one_sectionU();
				}
				break;
 800c766:	e022      	b.n	800c7ae <searchC+0x19a>
				}else if(H_accel_flag){
 800c768:	4b34      	ldr	r3, [pc, #208]	; (800c83c <searchC+0x228>)
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d005      	beq.n	800c77c <searchC+0x168>
					one_sectionD();
 800c770:	f7f9 f9ce 	bl	8005b10 <one_sectionD>
					H_accel_flag = 0;
 800c774:	4b31      	ldr	r3, [pc, #196]	; (800c83c <searchC+0x228>)
 800c776:	2200      	movs	r2, #0
 800c778:	701a      	strb	r2, [r3, #0]
				break;
 800c77a:	e018      	b.n	800c7ae <searchC+0x19a>
					one_sectionU();
 800c77c:	f7f9 faba 	bl	8005cf4 <one_sectionU>
				break;
 800c780:	e015      	b.n	800c7ae <searchC+0x19a>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800c782:	f7f9 fd61 	bl	8006248 <slalom_R90>
				break;
 800c786:	e012      	b.n	800c7ae <searchC+0x19a>
			//----180回転----
			case 0x22:
				half_sectionD();
 800c788:	f7f9 f8f2 	bl	8005970 <half_sectionD>
				rotate_180();
 800c78c:	f7f9 fc84 	bl	8006098 <rotate_180>
				if(wall_info & 0x88){
 800c790:	4b25      	ldr	r3, [pc, #148]	; (800c828 <searchC+0x214>)
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d002      	beq.n	800c7a2 <searchC+0x18e>
					set_position();
 800c79c:	f7f8 fff2 	bl	8005784 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800c7a0:	e005      	b.n	800c7ae <searchC+0x19a>
					half_sectionA();
 800c7a2:	f7f9 f8a9 	bl	80058f8 <half_sectionA>
				break;
 800c7a6:	e002      	b.n	800c7ae <searchC+0x19a>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800c7a8:	f7f9 fe02 	bl	80063b0 <slalom_L90>
				break;
 800c7ac:	bf00      	nop
		}
		adv_pos();
 800c7ae:	f000 fd0f 	bl	800d1d0 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800c7b2:	4b1c      	ldr	r3, [pc, #112]	; (800c824 <searchC+0x210>)
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d101      	bne.n	800c7c4 <searchC+0x1b0>
 800c7c0:	f000 fd40 	bl	800d244 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800c7c4:	4b1b      	ldr	r3, [pc, #108]	; (800c834 <searchC+0x220>)
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	b2da      	uxtb	r2, r3
 800c7ca:	4b1d      	ldr	r3, [pc, #116]	; (800c840 <searchC+0x22c>)
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	f47f af60 	bne.w	800c694 <searchC+0x80>
 800c7d4:	4b17      	ldr	r3, [pc, #92]	; (800c834 <searchC+0x220>)
 800c7d6:	785b      	ldrb	r3, [r3, #1]
 800c7d8:	b2da      	uxtb	r2, r3
 800c7da:	4b1a      	ldr	r3, [pc, #104]	; (800c844 <searchC+0x230>)
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	f47f af58 	bne.w	800c694 <searchC+0x80>

	half_sectionD();
 800c7e4:	f7f9 f8c4 	bl	8005970 <half_sectionD>

	HAL_Delay(500);
 800c7e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c7ec:	f7f4 fc16 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800c7f0:	f7f9 fc52 	bl	8006098 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c7f4:	2064      	movs	r0, #100	; 0x64
 800c7f6:	f7f8 fd77 	bl	80052e8 <driveC2>
	degree_z = target_degree_z;
 800c7fa:	4b13      	ldr	r3, [pc, #76]	; (800c848 <searchC+0x234>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4a13      	ldr	r2, [pc, #76]	; (800c84c <searchC+0x238>)
 800c800:	6013      	str	r3, [r2, #0]
	start_flag = 0;
 800c802:	4b13      	ldr	r3, [pc, #76]	; (800c850 <searchC+0x23c>)
 800c804:	2200      	movs	r2, #0
 800c806:	701a      	strb	r2, [r3, #0]

	if(!MF.FLAG.SCND){
 800c808:	4b06      	ldr	r3, [pc, #24]	; (800c824 <searchC+0x210>)
 800c80a:	881b      	ldrh	r3, [r3, #0]
 800c80c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c810:	b2db      	uxtb	r3, r3
 800c812:	2b00      	cmp	r3, #0
 800c814:	d101      	bne.n	800c81a <searchC+0x206>
		store_map_in_eeprom();
 800c816:	f002 fb71 	bl	800eefc <store_map_in_eeprom>
	}
}
 800c81a:	bf00      	nop
 800c81c:	370c      	adds	r7, #12
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd90      	pop	{r4, r7, pc}
 800c822:	bf00      	nop
 800c824:	20000fac 	.word	0x20000fac
 800c828:	20000300 	.word	0x20000300
 800c82c:	20001614 	.word	0x20001614
 800c830:	20000c9c 	.word	0x20000c9c
 800c834:	20000c54 	.word	0x20000c54
 800c838:	200001e4 	.word	0x200001e4
 800c83c:	20000301 	.word	0x20000301
 800c840:	20000bf1 	.word	0x20000bf1
 800c844:	20000b8c 	.word	0x20000b8c
 800c848:	20000c40 	.word	0x20000c40
 800c84c:	20000b9c 	.word	0x20000b9c
 800c850:	2000160c 	.word	0x2000160c

0800c854 <searchD>:
//searchD
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD(){
 800c854:	b580      	push	{r7, lr}
 800c856:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800c858:	4b74      	ldr	r3, [pc, #464]	; (800ca2c <searchD+0x1d8>)
 800c85a:	881b      	ldrh	r3, [r3, #0]
 800c85c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c860:	b2db      	uxtb	r3, r3
 800c862:	2b00      	cmp	r3, #0
 800c864:	d001      	beq.n	800c86a <searchD+0x16>
		load_map_from_eeprom();
 800c866:	f002 fb83 	bl	800ef70 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800c86a:	4b70      	ldr	r3, [pc, #448]	; (800ca2c <searchD+0x1d8>)
 800c86c:	881b      	ldrh	r3, [r3, #0]
 800c86e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c872:	b2db      	uxtb	r3, r3
 800c874:	2b00      	cmp	r3, #0
 800c876:	d101      	bne.n	800c87c <searchD+0x28>
 800c878:	f002 fbf2 	bl	800f060 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800c87c:	4b6b      	ldr	r3, [pc, #428]	; (800ca2c <searchD+0x1d8>)
 800c87e:	881b      	ldrh	r3, [r3, #0]
 800c880:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c884:	b2db      	uxtb	r3, r3
 800c886:	2b00      	cmp	r3, #0
 800c888:	d106      	bne.n	800c898 <searchD+0x44>
 800c88a:	4b69      	ldr	r3, [pc, #420]	; (800ca30 <searchD+0x1dc>)
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800c892:	b2da      	uxtb	r2, r3
 800c894:	4b66      	ldr	r3, [pc, #408]	; (800ca30 <searchD+0x1dc>)
 800c896:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800c898:	4b64      	ldr	r3, [pc, #400]	; (800ca2c <searchD+0x1d8>)
 800c89a:	881b      	ldrh	r3, [r3, #0]
 800c89c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d101      	bne.n	800c8aa <searchD+0x56>
 800c8a6:	f000 fd57 	bl	800d358 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800c8aa:	f7f8 ff81 	bl	80057b0 <start_sectionA>
	adv_pos();
 800c8ae:	f000 fc8f 	bl	800d1d0 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800c8b2:	4b5e      	ldr	r3, [pc, #376]	; (800ca2c <searchD+0x1d8>)
 800c8b4:	881b      	ldrh	r3, [r3, #0]
 800c8b6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d101      	bne.n	800c8c4 <searchD+0x70>
 800c8c0:	f000 fd4a 	bl	800d358 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800c8c4:	4b5b      	ldr	r3, [pc, #364]	; (800ca34 <searchD+0x1e0>)
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800c8ca:	f000 ff45 	bl	800d758 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800c8ce:	f001 fa81 	bl	800ddd4 <make_route>

	H_accel_flag = 0;
 800c8d2:	4b59      	ldr	r3, [pc, #356]	; (800ca38 <searchD+0x1e4>)
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800c8d8:	4b56      	ldr	r3, [pc, #344]	; (800ca34 <searchD+0x1e0>)
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	1c5a      	adds	r2, r3, #1
 800c8de:	b2d1      	uxtb	r1, r2
 800c8e0:	4a54      	ldr	r2, [pc, #336]	; (800ca34 <searchD+0x1e0>)
 800c8e2:	7011      	strb	r1, [r2, #0]
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	4b55      	ldr	r3, [pc, #340]	; (800ca3c <searchD+0x1e8>)
 800c8e8:	5c9b      	ldrb	r3, [r3, r2]
 800c8ea:	2b22      	cmp	r3, #34	; 0x22
 800c8ec:	d053      	beq.n	800c996 <searchD+0x142>
 800c8ee:	2b22      	cmp	r3, #34	; 0x22
 800c8f0:	dc02      	bgt.n	800c8f8 <searchD+0xa4>
 800c8f2:	2b11      	cmp	r3, #17
 800c8f4:	d05f      	beq.n	800c9b6 <searchD+0x162>
 800c8f6:	e061      	b.n	800c9bc <searchD+0x168>
 800c8f8:	2b44      	cmp	r3, #68	; 0x44
 800c8fa:	d049      	beq.n	800c990 <searchD+0x13c>
 800c8fc:	2b88      	cmp	r3, #136	; 0x88
 800c8fe:	d15d      	bne.n	800c9bc <searchD+0x168>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND == 1 && MF.FLAG.ACCL2 == 1){
 800c900:	4b4a      	ldr	r3, [pc, #296]	; (800ca2c <searchD+0x1d8>)
 800c902:	881b      	ldrh	r3, [r3, #0]
 800c904:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d13c      	bne.n	800c988 <searchD+0x134>
 800c90e:	4b47      	ldr	r3, [pc, #284]	; (800ca2c <searchD+0x1d8>)
 800c910:	881b      	ldrh	r3, [r3, #0]
 800c912:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800c916:	b2db      	uxtb	r3, r3
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d135      	bne.n	800c988 <searchD+0x134>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800c91c:	4b45      	ldr	r3, [pc, #276]	; (800ca34 <searchD+0x1e0>)
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	3b01      	subs	r3, #1
 800c922:	4a46      	ldr	r2, [pc, #280]	; (800ca3c <searchD+0x1e8>)
 800c924:	5cd2      	ldrb	r2, [r2, r3]
 800c926:	4b43      	ldr	r3, [pc, #268]	; (800ca34 <searchD+0x1e0>)
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	4619      	mov	r1, r3
 800c92c:	4b43      	ldr	r3, [pc, #268]	; (800ca3c <searchD+0x1e8>)
 800c92e:	5c5b      	ldrb	r3, [r3, r1]
 800c930:	4013      	ands	r3, r2
 800c932:	b2db      	uxtb	r3, r3
 800c934:	2b88      	cmp	r3, #136	; 0x88
 800c936:	d110      	bne.n	800c95a <searchD+0x106>
 800c938:	4b3e      	ldr	r3, [pc, #248]	; (800ca34 <searchD+0x1e0>)
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	461a      	mov	r2, r3
 800c93e:	4b3f      	ldr	r3, [pc, #252]	; (800ca3c <searchD+0x1e8>)
 800c940:	5c9b      	ldrb	r3, [r3, r2]
 800c942:	2bff      	cmp	r3, #255	; 0xff
 800c944:	d009      	beq.n	800c95a <searchD+0x106>
 800c946:	4b3c      	ldr	r3, [pc, #240]	; (800ca38 <searchD+0x1e4>)
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d105      	bne.n	800c95a <searchD+0x106>
						one_sectionA();
 800c94e:	f7f9 f88d 	bl	8005a6c <one_sectionA>
						H_accel_flag = 1;
 800c952:	4b39      	ldr	r3, [pc, #228]	; (800ca38 <searchD+0x1e4>)
 800c954:	2201      	movs	r2, #1
 800c956:	701a      	strb	r2, [r3, #0]
 800c958:	e015      	b.n	800c986 <searchD+0x132>
					}
					else if((route[r_cnt] & 0x55) && (H_accel_flag == 1)){
 800c95a:	4b36      	ldr	r3, [pc, #216]	; (800ca34 <searchD+0x1e0>)
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	461a      	mov	r2, r3
 800c960:	4b36      	ldr	r3, [pc, #216]	; (800ca3c <searchD+0x1e8>)
 800c962:	5c9b      	ldrb	r3, [r3, r2]
 800c964:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d009      	beq.n	800c980 <searchD+0x12c>
 800c96c:	4b32      	ldr	r3, [pc, #200]	; (800ca38 <searchD+0x1e4>)
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	2b01      	cmp	r3, #1
 800c972:	d105      	bne.n	800c980 <searchD+0x12c>
						one_sectionD();
 800c974:	f7f9 f8cc 	bl	8005b10 <one_sectionD>
						H_accel_flag = 0;
 800c978:	4b2f      	ldr	r3, [pc, #188]	; (800ca38 <searchD+0x1e4>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	701a      	strb	r2, [r3, #0]
 800c97e:	e002      	b.n	800c986 <searchD+0x132>
					}else{
						one_sectionU();
 800c980:	f7f9 f9b8 	bl	8005cf4 <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800c984:	e003      	b.n	800c98e <searchD+0x13a>
 800c986:	e002      	b.n	800c98e <searchD+0x13a>
					}
				}else{
					one_sectionU();
 800c988:	f7f9 f9b4 	bl	8005cf4 <one_sectionU>
				}
				break;
 800c98c:	e016      	b.n	800c9bc <searchD+0x168>
 800c98e:	e015      	b.n	800c9bc <searchD+0x168>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800c990:	f7f9 fc5a 	bl	8006248 <slalom_R90>
				break;
 800c994:	e012      	b.n	800c9bc <searchD+0x168>
			//----180回転----
			case 0x22:
				half_sectionD();
 800c996:	f7f8 ffeb 	bl	8005970 <half_sectionD>
				rotate_180();
 800c99a:	f7f9 fb7d 	bl	8006098 <rotate_180>
				if(wall_info & 0x88){
 800c99e:	4b24      	ldr	r3, [pc, #144]	; (800ca30 <searchD+0x1dc>)
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d002      	beq.n	800c9b0 <searchD+0x15c>
					set_position();
 800c9aa:	f7f8 feeb 	bl	8005784 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800c9ae:	e005      	b.n	800c9bc <searchD+0x168>
					half_sectionA();
 800c9b0:	f7f8 ffa2 	bl	80058f8 <half_sectionA>
				break;
 800c9b4:	e002      	b.n	800c9bc <searchD+0x168>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800c9b6:	f7f9 fcfb 	bl	80063b0 <slalom_L90>
				break;
 800c9ba:	bf00      	nop
		}
		adv_pos();
 800c9bc:	f000 fc08 	bl	800d1d0 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800c9c0:	4b1a      	ldr	r3, [pc, #104]	; (800ca2c <searchD+0x1d8>)
 800c9c2:	881b      	ldrh	r3, [r3, #0]
 800c9c4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d101      	bne.n	800c9d2 <searchD+0x17e>
 800c9ce:	f000 fc39 	bl	800d244 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800c9d2:	4b1b      	ldr	r3, [pc, #108]	; (800ca40 <searchD+0x1ec>)
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	b2da      	uxtb	r2, r3
 800c9d8:	4b1a      	ldr	r3, [pc, #104]	; (800ca44 <searchD+0x1f0>)
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	f47f af7b 	bne.w	800c8d8 <searchD+0x84>
 800c9e2:	4b17      	ldr	r3, [pc, #92]	; (800ca40 <searchD+0x1ec>)
 800c9e4:	785b      	ldrb	r3, [r3, #1]
 800c9e6:	b2da      	uxtb	r2, r3
 800c9e8:	4b17      	ldr	r3, [pc, #92]	; (800ca48 <searchD+0x1f4>)
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	f47f af73 	bne.w	800c8d8 <searchD+0x84>

	half_sectionD();
 800c9f2:	f7f8 ffbd 	bl	8005970 <half_sectionD>

	HAL_Delay(500);
 800c9f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c9fa:	f7f4 fb0f 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800c9fe:	f7f9 fb4b 	bl	8006098 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800ca02:	2064      	movs	r0, #100	; 0x64
 800ca04:	f7f8 fc70 	bl	80052e8 <driveC2>
	degree_z = target_degree_z;
 800ca08:	4b10      	ldr	r3, [pc, #64]	; (800ca4c <searchD+0x1f8>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a10      	ldr	r2, [pc, #64]	; (800ca50 <searchD+0x1fc>)
 800ca0e:	6013      	str	r3, [r2, #0]
	start_flag = 0;
 800ca10:	4b10      	ldr	r3, [pc, #64]	; (800ca54 <searchD+0x200>)
 800ca12:	2200      	movs	r2, #0
 800ca14:	701a      	strb	r2, [r3, #0]

	if(!MF.FLAG.SCND){
 800ca16:	4b05      	ldr	r3, [pc, #20]	; (800ca2c <searchD+0x1d8>)
 800ca18:	881b      	ldrh	r3, [r3, #0]
 800ca1a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d101      	bne.n	800ca28 <searchD+0x1d4>
		store_map_in_eeprom();
 800ca24:	f002 fa6a 	bl	800eefc <store_map_in_eeprom>
	}
}
 800ca28:	bf00      	nop
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	20000fac 	.word	0x20000fac
 800ca30:	20000300 	.word	0x20000300
 800ca34:	20001614 	.word	0x20001614
 800ca38:	20000301 	.word	0x20000301
 800ca3c:	20000c9c 	.word	0x20000c9c
 800ca40:	20000c54 	.word	0x20000c54
 800ca44:	20000bf1 	.word	0x20000bf1
 800ca48:	20000b8c 	.word	0x20000b8c
 800ca4c:	20000c40 	.word	0x20000c40
 800ca50:	20000b9c 	.word	0x20000b9c
 800ca54:	2000160c 	.word	0x2000160c

0800ca58 <searchE>:
//searchE
//a未知壁を含むマスを仮goal座標とし、スラローム連続走行で全マスに進む。仮goalを連続的に変化させる。全面探索終了後は半区画減速
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchE(){
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0

	int i = 0;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	607b      	str	r3, [r7, #4]
	int j = 0;
 800ca62:	2300      	movs	r3, #0
 800ca64:	603b      	str	r3, [r7, #0]
	do {
		if(i == 0){
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d111      	bne.n	800ca90 <searchE+0x38>
			//====a前に壁が無い想定で問答無用で前進====
			half_sectionA();
 800ca6c:	f7f8 ff44 	bl	80058f8 <half_sectionA>
			adv_pos();
 800ca70:	f000 fbae 	bl	800d1d0 <adv_pos>
			write_map();														//地図の初期化
 800ca74:	f000 fc70 	bl	800d358 <write_map>

			//====a歩数等初期化====
			m_step = r_cnt = 0;													//歩数と経路カウンタの初期化
 800ca78:	4b42      	ldr	r3, [pc, #264]	; (800cb84 <searchE+0x12c>)
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	701a      	strb	r2, [r3, #0]
 800ca7e:	4b42      	ldr	r3, [pc, #264]	; (800cb88 <searchE+0x130>)
 800ca80:	2200      	movs	r2, #0
 800ca82:	801a      	strh	r2, [r3, #0]
			find_pregoal();														//仮goalまでの歩数マップの初期化
 800ca84:	f001 faf4 	bl	800e070 <find_pregoal>
			make_smap2();
 800ca88:	f001 fcde 	bl	800e448 <make_smap2>
			make_route();														//最短経路探索(route配列に動作が格納される)
 800ca8c:	f001 f9a2 	bl	800ddd4 <make_route>
		}

		//====a探索走行====
		do {
			//----a進行----
			switch (route[r_cnt++]) {										//route配列によって進行を決定。経路カウンタを進める
 800ca90:	4b3c      	ldr	r3, [pc, #240]	; (800cb84 <searchE+0x12c>)
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	1c5a      	adds	r2, r3, #1
 800ca96:	b2d1      	uxtb	r1, r2
 800ca98:	4a3a      	ldr	r2, [pc, #232]	; (800cb84 <searchE+0x12c>)
 800ca9a:	7011      	strb	r1, [r2, #0]
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	4b3b      	ldr	r3, [pc, #236]	; (800cb8c <searchE+0x134>)
 800caa0:	5c9b      	ldrb	r3, [r3, r2]
 800caa2:	2b22      	cmp	r3, #34	; 0x22
 800caa4:	d00e      	beq.n	800cac4 <searchE+0x6c>
 800caa6:	2b22      	cmp	r3, #34	; 0x22
 800caa8:	dc02      	bgt.n	800cab0 <searchE+0x58>
 800caaa:	2b11      	cmp	r3, #17
 800caac:	d01a      	beq.n	800cae4 <searchE+0x8c>
 800caae:	e01c      	b.n	800caea <searchE+0x92>
 800cab0:	2b44      	cmp	r3, #68	; 0x44
 800cab2:	d004      	beq.n	800cabe <searchE+0x66>
 800cab4:	2b88      	cmp	r3, #136	; 0x88
 800cab6:	d118      	bne.n	800caea <searchE+0x92>
				//----a前進----
			case 0x88:
				one_sectionU();
 800cab8:	f7f9 f91c 	bl	8005cf4 <one_sectionU>
				break;
 800cabc:	e015      	b.n	800caea <searchE+0x92>
				//----a右折----
			case 0x44:
				slalom_R90();
 800cabe:	f7f9 fbc3 	bl	8006248 <slalom_R90>
				break;
 800cac2:	e012      	b.n	800caea <searchE+0x92>
				//----180回転----
			case 0x22:
				half_sectionD();
 800cac4:	f7f8 ff54 	bl	8005970 <half_sectionD>
				rotate_180();
 800cac8:	f7f9 fae6 	bl	8006098 <rotate_180>
				if(wall_info & 0x88){
 800cacc:	4b30      	ldr	r3, [pc, #192]	; (800cb90 <searchE+0x138>)
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d002      	beq.n	800cade <searchE+0x86>
					set_position();
 800cad8:	f7f8 fe54 	bl	8005784 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800cadc:	e005      	b.n	800caea <searchE+0x92>
					half_sectionA();
 800cade:	f7f8 ff0b 	bl	80058f8 <half_sectionA>
				break;
 800cae2:	e002      	b.n	800caea <searchE+0x92>
				//----a左折----
			case 0x11:
				slalom_L90();
 800cae4:	f7f9 fc64 	bl	80063b0 <slalom_L90>
				break;
 800cae8:	bf00      	nop
			}
			adv_pos();														//aマイクロマウス内部位置情報でも前進処理
 800caea:	f000 fb71 	bl	800d1d0 <adv_pos>
			j++;
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	3301      	adds	r3, #1
 800caf2:	603b      	str	r3, [r7, #0]
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	2b96      	cmp	r3, #150	; 0x96
 800caf8:	dc0e      	bgt.n	800cb18 <searchE+0xc0>

		} while ((mouse.x != pregoal_x) || (mouse.y != pregoal_y));			//a現在座標と仮goal座標が等しくなるまで実行
 800cafa:	4b26      	ldr	r3, [pc, #152]	; (800cb94 <searchE+0x13c>)
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	b2da      	uxtb	r2, r3
 800cb00:	4b25      	ldr	r3, [pc, #148]	; (800cb98 <searchE+0x140>)
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d1c3      	bne.n	800ca90 <searchE+0x38>
 800cb08:	4b22      	ldr	r3, [pc, #136]	; (800cb94 <searchE+0x13c>)
 800cb0a:	785b      	ldrb	r3, [r3, #1]
 800cb0c:	b2da      	uxtb	r2, r3
 800cb0e:	4b23      	ldr	r3, [pc, #140]	; (800cb9c <searchE+0x144>)
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d1bc      	bne.n	800ca90 <searchE+0x38>
 800cb16:	e000      	b.n	800cb1a <searchE+0xc2>
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800cb18:	bf00      	nop

		get_wall_info();													//a壁情報の初期化, 後壁はなくなる
 800cb1a:	f002 faa1 	bl	800f060 <get_wall_info>
		write_map();														//a地図の初期化
 800cb1e:	f000 fc1b 	bl	800d358 <write_map>
		//printf("get pregoal, x = %d, y = %d\n", mouse.x, mouse.y);

		//====a歩数等初期化====
		m_step = r_cnt = 0;													//a歩数と経路カウンタの初期化
 800cb22:	4b18      	ldr	r3, [pc, #96]	; (800cb84 <searchE+0x12c>)
 800cb24:	2200      	movs	r2, #0
 800cb26:	701a      	strb	r2, [r3, #0]
 800cb28:	4b17      	ldr	r3, [pc, #92]	; (800cb88 <searchE+0x130>)
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	801a      	strh	r2, [r3, #0]

		find_pregoal();														//a仮goalまでの歩数マップの初期化
 800cb2e:	f001 fa9f 	bl	800e070 <find_pregoal>
		if (allmap_comp_flag) {
 800cb32:	4b1b      	ldr	r3, [pc, #108]	; (800cba0 <searchE+0x148>)
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d002      	beq.n	800cb40 <searchE+0xe8>
			//printf("get allmap_comp_flag\n");
			half_sectionD();
 800cb3a:	f7f8 ff19 	bl	8005970 <half_sectionD>
			break;
 800cb3e:	e00e      	b.n	800cb5e <searchE+0x106>
		}
		make_smap2();
 800cb40:	f001 fc82 	bl	800e448 <make_smap2>
		make_route();														//a最短経路探索(route配列に動作が格納される)
 800cb44:	f001 f946 	bl	800ddd4 <make_route>

		if (j > 150) {
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	2b96      	cmp	r3, #150	; 0x96
 800cb4c:	dc06      	bgt.n	800cb5c <searchE+0x104>
			//printf("j = %d\n", j);
			break;															//a移動マス数が250以上になった場合全面探索を中止
		}
		i++;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	3301      	adds	r3, #1
 800cb52:	607b      	str	r3, [r7, #4]
		//printf("i = %d\n", i);

	} while (i < 150);														//a仮goalへの到着が130回以上になった場合全面探索を中止
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2b95      	cmp	r3, #149	; 0x95
 800cb58:	dd85      	ble.n	800ca66 <searchE+0xe>
 800cb5a:	e000      	b.n	800cb5e <searchE+0x106>
			break;															//a移動マス数が250以上になった場合全面探索を中止
 800cb5c:	bf00      	nop
	//printf("i = %d\n", i);
	//printf("fin\n");

	HAL_Delay(500);
 800cb5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800cb62:	f7f4 fa5b 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800cb66:	f7f9 fa97 	bl	8006098 <rotate_180>

	if(!MF.FLAG.SCND){
 800cb6a:	4b0e      	ldr	r3, [pc, #56]	; (800cba4 <searchE+0x14c>)
 800cb6c:	881b      	ldrh	r3, [r3, #0]
 800cb6e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d101      	bne.n	800cb7c <searchE+0x124>
		store_map_in_eeprom();
 800cb78:	f002 f9c0 	bl	800eefc <store_map_in_eeprom>
	}
}
 800cb7c:	bf00      	nop
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	20001614 	.word	0x20001614
 800cb88:	20000386 	.word	0x20000386
 800cb8c:	20000c9c 	.word	0x20000c9c
 800cb90:	20000300 	.word	0x20000300
 800cb94:	20000c54 	.word	0x20000c54
 800cb98:	20000da4 	.word	0x20000da4
 800cb9c:	200012e5 	.word	0x200012e5
 800cba0:	20000bf0 	.word	0x20000bf0
 800cba4:	20000fac 	.word	0x20000fac

0800cba8 <searchF3>:
//searchF3
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベースでgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF3(){
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800cbae:	4b56      	ldr	r3, [pc, #344]	; (800cd08 <searchF3+0x160>)
 800cbb0:	881b      	ldrh	r3, [r3, #0]
 800cbb2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800cbb6:	b2db      	uxtb	r3, r3
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d001      	beq.n	800cbc0 <searchF3+0x18>
		load_map_from_eeprom();
 800cbbc:	f002 f9d8 	bl	800ef70 <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 800cbc0:	f000 fb06 	bl	800d1d0 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 800cbc4:	f000 fdc8 	bl	800d758 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800cbc8:	f001 f904 	bl	800ddd4 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800cbcc:	4b4f      	ldr	r3, [pc, #316]	; (800cd0c <searchF3+0x164>)
 800cbce:	2200      	movs	r2, #0
 800cbd0:	701a      	strb	r2, [r3, #0]
	pass_route2();
 800cbd2:	f001 fd5d 	bl	800e690 <pass_route2>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800cbd6:	f7f8 fdeb 	bl	80057b0 <start_sectionA>

	H_accel_flag = 0;
 800cbda:	4b4d      	ldr	r3, [pc, #308]	; (800cd10 <searchF3+0x168>)
 800cbdc:	2200      	movs	r2, #0
 800cbde:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800cbe0:	4b4a      	ldr	r3, [pc, #296]	; (800cd0c <searchF3+0x164>)
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	1c5a      	adds	r2, r3, #1
 800cbe6:	b2d1      	uxtb	r1, r2
 800cbe8:	4a48      	ldr	r2, [pc, #288]	; (800cd0c <searchF3+0x164>)
 800cbea:	7011      	strb	r1, [r2, #0]
 800cbec:	461a      	mov	r2, r3
 800cbee:	4b49      	ldr	r3, [pc, #292]	; (800cd14 <searchF3+0x16c>)
 800cbf0:	569b      	ldrsb	r3, [r3, r2]
 800cbf2:	f113 0f04 	cmn.w	r3, #4
 800cbf6:	d01e      	beq.n	800cc36 <searchF3+0x8e>
 800cbf8:	f113 0f04 	cmn.w	r3, #4
 800cbfc:	dc09      	bgt.n	800cc12 <searchF3+0x6a>
 800cbfe:	f113 0f06 	cmn.w	r3, #6
 800cc02:	d01e      	beq.n	800cc42 <searchF3+0x9a>
 800cc04:	f113 0f06 	cmn.w	r3, #6
 800cc08:	dc18      	bgt.n	800cc3c <searchF3+0x94>
 800cc0a:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800cc0e:	d01b      	beq.n	800cc48 <searchF3+0xa0>
 800cc10:	e01f      	b.n	800cc52 <searchF3+0xaa>
 800cc12:	f113 0f02 	cmn.w	r3, #2
 800cc16:	d008      	beq.n	800cc2a <searchF3+0x82>
 800cc18:	f113 0f02 	cmn.w	r3, #2
 800cc1c:	db08      	blt.n	800cc30 <searchF3+0x88>
 800cc1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc22:	d116      	bne.n	800cc52 <searchF3+0xaa>
			//----a右スラローム----
			case -1:
				slalom_R90();
 800cc24:	f7f9 fb10 	bl	8006248 <slalom_R90>
				break;
 800cc28:	e048      	b.n	800ccbc <searchF3+0x114>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800cc2a:	f7f9 fbc1 	bl	80063b0 <slalom_L90>
				break;
 800cc2e:	e045      	b.n	800ccbc <searchF3+0x114>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800cc30:	f7f9 fc68 	bl	8006504 <Lslalom_R90>
				break;
 800cc34:	e042      	b.n	800ccbc <searchF3+0x114>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800cc36:	f7f9 fcdb 	bl	80065f0 <Lslalom_L90>
				break;
 800cc3a:	e03f      	b.n	800ccbc <searchF3+0x114>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800cc3c:	f7f9 fdba 	bl	80067b4 <Lslalom_R180>
				break;
 800cc40:	e03c      	b.n	800ccbc <searchF3+0x114>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800cc42:	f7f9 fe35 	bl	80068b0 <Lslalom_L180>
				break;
 800cc46:	e039      	b.n	800ccbc <searchF3+0x114>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800cc48:	f7f9 fa26 	bl	8006098 <rotate_180>
				rotate_180();
 800cc4c:	f7f9 fa24 	bl	8006098 <rotate_180>
				while(1);
 800cc50:	e7fe      	b.n	800cc50 <searchF3+0xa8>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800cc52:	4b2e      	ldr	r3, [pc, #184]	; (800cd0c <searchF3+0x164>)
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	3b01      	subs	r3, #1
 800cc58:	4a2e      	ldr	r2, [pc, #184]	; (800cd14 <searchF3+0x16c>)
 800cc5a:	56d3      	ldrsb	r3, [r2, r3]
 800cc5c:	2b03      	cmp	r3, #3
 800cc5e:	dc11      	bgt.n	800cc84 <searchF3+0xdc>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800cc60:	2300      	movs	r3, #0
 800cc62:	607b      	str	r3, [r7, #4]
 800cc64:	e004      	b.n	800cc70 <searchF3+0xc8>
						half_sectionU();
 800cc66:	f7f8 fee1 	bl	8005a2c <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	607b      	str	r3, [r7, #4]
 800cc70:	4b26      	ldr	r3, [pc, #152]	; (800cd0c <searchF3+0x164>)
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	3b01      	subs	r3, #1
 800cc76:	4a27      	ldr	r2, [pc, #156]	; (800cd14 <searchF3+0x16c>)
 800cc78:	56d3      	ldrsb	r3, [r2, r3]
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	dbf1      	blt.n	800cc66 <searchF3+0xbe>
						half_sectionU();
					}
					one_sectionD();
					H_accel_flag = 0;
				}
				break;
 800cc82:	e01a      	b.n	800ccba <searchF3+0x112>
					one_sectionA();
 800cc84:	f7f8 fef2 	bl	8005a6c <one_sectionA>
					H_accel_flag = 1;
 800cc88:	4b21      	ldr	r3, [pc, #132]	; (800cd10 <searchF3+0x168>)
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	701a      	strb	r2, [r3, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800cc8e:	2300      	movs	r3, #0
 800cc90:	603b      	str	r3, [r7, #0]
 800cc92:	e004      	b.n	800cc9e <searchF3+0xf6>
						half_sectionU();
 800cc94:	f7f8 feca 	bl	8005a2c <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	603b      	str	r3, [r7, #0]
 800cc9e:	4b1b      	ldr	r3, [pc, #108]	; (800cd0c <searchF3+0x164>)
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	3b01      	subs	r3, #1
 800cca4:	4a1b      	ldr	r2, [pc, #108]	; (800cd14 <searchF3+0x16c>)
 800cca6:	56d3      	ldrsb	r3, [r2, r3]
 800cca8:	3b04      	subs	r3, #4
 800ccaa:	683a      	ldr	r2, [r7, #0]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	dbf1      	blt.n	800cc94 <searchF3+0xec>
					one_sectionD();
 800ccb0:	f7f8 ff2e 	bl	8005b10 <one_sectionD>
					H_accel_flag = 0;
 800ccb4:	4b16      	ldr	r3, [pc, #88]	; (800cd10 <searchF3+0x168>)
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	701a      	strb	r2, [r3, #0]
				break;
 800ccba:	bf00      	nop
		}
//		adv_pos2(pass[p_cnt-1]);

	}while(pass[p_cnt] != -114);
 800ccbc:	4b13      	ldr	r3, [pc, #76]	; (800cd0c <searchF3+0x164>)
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	4b14      	ldr	r3, [pc, #80]	; (800cd14 <searchF3+0x16c>)
 800ccc4:	569b      	ldrsb	r3, [r3, r2]
 800ccc6:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800ccca:	d189      	bne.n	800cbe0 <searchF3+0x38>

	mouse.x = goal_x;
 800cccc:	4b12      	ldr	r3, [pc, #72]	; (800cd18 <searchF3+0x170>)
 800ccce:	781a      	ldrb	r2, [r3, #0]
 800ccd0:	4b12      	ldr	r3, [pc, #72]	; (800cd1c <searchF3+0x174>)
 800ccd2:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800ccd4:	4b12      	ldr	r3, [pc, #72]	; (800cd20 <searchF3+0x178>)
 800ccd6:	781a      	ldrb	r2, [r3, #0]
 800ccd8:	4b10      	ldr	r3, [pc, #64]	; (800cd1c <searchF3+0x174>)
 800ccda:	705a      	strb	r2, [r3, #1]

	half_sectionD();
 800ccdc:	f7f8 fe48 	bl	8005970 <half_sectionD>

	HAL_Delay(500);
 800cce0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800cce4:	f7f4 f99a 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800cce8:	f7f9 f9d6 	bl	8006098 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800ccec:	2064      	movs	r0, #100	; 0x64
 800ccee:	f7f8 fafb 	bl	80052e8 <driveC2>
	degree_z = target_degree_z;
 800ccf2:	4b0c      	ldr	r3, [pc, #48]	; (800cd24 <searchF3+0x17c>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a0c      	ldr	r2, [pc, #48]	; (800cd28 <searchF3+0x180>)
 800ccf8:	6013      	str	r3, [r2, #0]
	start_flag = 0;
 800ccfa:	4b0c      	ldr	r3, [pc, #48]	; (800cd2c <searchF3+0x184>)
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	701a      	strb	r2, [r3, #0]

}
 800cd00:	bf00      	nop
 800cd02:	3708      	adds	r7, #8
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	20000fac 	.word	0x20000fac
 800cd0c:	200002e8 	.word	0x200002e8
 800cd10:	20000301 	.word	0x20000301
 800cd14:	20000388 	.word	0x20000388
 800cd18:	20000bf1 	.word	0x20000bf1
 800cd1c:	20000c54 	.word	0x20000c54
 800cd20:	20000b8c 	.word	0x20000b8c
 800cd24:	20000c40 	.word	0x20000c40
 800cd28:	20000b9c 	.word	0x20000b9c
 800cd2c:	2000160c 	.word	0x2000160c

0800cd30 <searchF4>:
//searchF4
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベース+斜め走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF4(){
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800cd36:	4bcc      	ldr	r3, [pc, #816]	; (800d068 <searchF4+0x338>)
 800cd38:	881b      	ldrh	r3, [r3, #0]
 800cd3a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d001      	beq.n	800cd48 <searchF4+0x18>
		load_map_from_eeprom();
 800cd44:	f002 f914 	bl	800ef70 <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 800cd48:	f000 fa42 	bl	800d1d0 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 800cd4c:	f000 fd04 	bl	800d758 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800cd50:	f001 f840 	bl	800ddd4 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 800cd54:	4bc5      	ldr	r3, [pc, #788]	; (800d06c <searchF4+0x33c>)
 800cd56:	2200      	movs	r2, #0
 800cd58:	701a      	strb	r2, [r3, #0]
	pass_route3();
 800cd5a:	f001 fdad 	bl	800e8b8 <pass_route3>

	if(start_flag == 0 || start_flag == 1){									//a大回りではない場合、先頭の半区画直進をスキップ
 800cd5e:	4bc4      	ldr	r3, [pc, #784]	; (800d070 <searchF4+0x340>)
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d004      	beq.n	800cd72 <searchF4+0x42>
 800cd68:	4bc1      	ldr	r3, [pc, #772]	; (800d070 <searchF4+0x340>)
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	d109      	bne.n	800cd86 <searchF4+0x56>
		pass[p_cnt]--;
 800cd72:	4bbe      	ldr	r3, [pc, #760]	; (800d06c <searchF4+0x33c>)
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	4abf      	ldr	r2, [pc, #764]	; (800d074 <searchF4+0x344>)
 800cd78:	56d2      	ldrsb	r2, [r2, r3]
 800cd7a:	b2d2      	uxtb	r2, r2
 800cd7c:	3a01      	subs	r2, #1
 800cd7e:	b2d2      	uxtb	r2, r2
 800cd80:	b251      	sxtb	r1, r2
 800cd82:	4abc      	ldr	r2, [pc, #752]	; (800d074 <searchF4+0x344>)
 800cd84:	54d1      	strb	r1, [r2, r3]
	}

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800cd86:	f7f8 fd13 	bl	80057b0 <start_sectionA>

	H_accel_flag = 0;
 800cd8a:	4bbb      	ldr	r3, [pc, #748]	; (800d078 <searchF4+0x348>)
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	701a      	strb	r2, [r3, #0]
	MF.FLAG.XDIR = 1;
 800cd90:	4ab5      	ldr	r2, [pc, #724]	; (800d068 <searchF4+0x338>)
 800cd92:	8813      	ldrh	r3, [r2, #0]
 800cd94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cd98:	8013      	strh	r3, [r2, #0]
	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800cd9a:	4bb4      	ldr	r3, [pc, #720]	; (800d06c <searchF4+0x33c>)
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	1c5a      	adds	r2, r3, #1
 800cda0:	b2d1      	uxtb	r1, r2
 800cda2:	4ab2      	ldr	r2, [pc, #712]	; (800d06c <searchF4+0x33c>)
 800cda4:	7011      	strb	r1, [r2, #0]
 800cda6:	461a      	mov	r2, r3
 800cda8:	4bb2      	ldr	r3, [pc, #712]	; (800d074 <searchF4+0x344>)
 800cdaa:	569b      	ldrsb	r3, [r3, r2]
 800cdac:	3372      	adds	r3, #114	; 0x72
 800cdae:	2b71      	cmp	r3, #113	; 0x71
 800cdb0:	f200 811d 	bhi.w	800cfee <searchF4+0x2be>
 800cdb4:	a201      	add	r2, pc, #4	; (adr r2, 800cdbc <searchF4+0x8c>)
 800cdb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdba:	bf00      	nop
 800cdbc:	0800cfe5 	.word	0x0800cfe5
 800cdc0:	0800cfef 	.word	0x0800cfef
 800cdc4:	0800cfef 	.word	0x0800cfef
 800cdc8:	0800cfef 	.word	0x0800cfef
 800cdcc:	0800cfef 	.word	0x0800cfef
 800cdd0:	0800cfef 	.word	0x0800cfef
 800cdd4:	0800cfef 	.word	0x0800cfef
 800cdd8:	0800cfef 	.word	0x0800cfef
 800cddc:	0800cfef 	.word	0x0800cfef
 800cde0:	0800cfef 	.word	0x0800cfef
 800cde4:	0800cfef 	.word	0x0800cfef
 800cde8:	0800cfef 	.word	0x0800cfef
 800cdec:	0800cfef 	.word	0x0800cfef
 800cdf0:	0800cfef 	.word	0x0800cfef
 800cdf4:	0800cfef 	.word	0x0800cfef
 800cdf8:	0800cfef 	.word	0x0800cfef
 800cdfc:	0800cfef 	.word	0x0800cfef
 800ce00:	0800cfef 	.word	0x0800cfef
 800ce04:	0800cfef 	.word	0x0800cfef
 800ce08:	0800cfef 	.word	0x0800cfef
 800ce0c:	0800cfef 	.word	0x0800cfef
 800ce10:	0800cfef 	.word	0x0800cfef
 800ce14:	0800cfef 	.word	0x0800cfef
 800ce18:	0800cfef 	.word	0x0800cfef
 800ce1c:	0800cfef 	.word	0x0800cfef
 800ce20:	0800cfef 	.word	0x0800cfef
 800ce24:	0800cfef 	.word	0x0800cfef
 800ce28:	0800cfef 	.word	0x0800cfef
 800ce2c:	0800cfef 	.word	0x0800cfef
 800ce30:	0800cfef 	.word	0x0800cfef
 800ce34:	0800cfef 	.word	0x0800cfef
 800ce38:	0800cfef 	.word	0x0800cfef
 800ce3c:	0800cfef 	.word	0x0800cfef
 800ce40:	0800cfef 	.word	0x0800cfef
 800ce44:	0800cfef 	.word	0x0800cfef
 800ce48:	0800cfef 	.word	0x0800cfef
 800ce4c:	0800cfef 	.word	0x0800cfef
 800ce50:	0800cfef 	.word	0x0800cfef
 800ce54:	0800cfef 	.word	0x0800cfef
 800ce58:	0800cfef 	.word	0x0800cfef
 800ce5c:	0800cfef 	.word	0x0800cfef
 800ce60:	0800cfef 	.word	0x0800cfef
 800ce64:	0800cfef 	.word	0x0800cfef
 800ce68:	0800cfef 	.word	0x0800cfef
 800ce6c:	0800cfef 	.word	0x0800cfef
 800ce70:	0800cfef 	.word	0x0800cfef
 800ce74:	0800cfef 	.word	0x0800cfef
 800ce78:	0800cfef 	.word	0x0800cfef
 800ce7c:	0800cfef 	.word	0x0800cfef
 800ce80:	0800cfef 	.word	0x0800cfef
 800ce84:	0800cfef 	.word	0x0800cfef
 800ce88:	0800cfef 	.word	0x0800cfef
 800ce8c:	0800cfef 	.word	0x0800cfef
 800ce90:	0800cfef 	.word	0x0800cfef
 800ce94:	0800cfef 	.word	0x0800cfef
 800ce98:	0800cfef 	.word	0x0800cfef
 800ce9c:	0800cfef 	.word	0x0800cfef
 800cea0:	0800cfef 	.word	0x0800cfef
 800cea4:	0800cfef 	.word	0x0800cfef
 800cea8:	0800cfef 	.word	0x0800cfef
 800ceac:	0800cfef 	.word	0x0800cfef
 800ceb0:	0800cfef 	.word	0x0800cfef
 800ceb4:	0800cfef 	.word	0x0800cfef
 800ceb8:	0800cfef 	.word	0x0800cfef
 800cebc:	0800cfef 	.word	0x0800cfef
 800cec0:	0800cfef 	.word	0x0800cfef
 800cec4:	0800cfef 	.word	0x0800cfef
 800cec8:	0800cfef 	.word	0x0800cfef
 800cecc:	0800cfef 	.word	0x0800cfef
 800ced0:	0800cfef 	.word	0x0800cfef
 800ced4:	0800cfef 	.word	0x0800cfef
 800ced8:	0800cfef 	.word	0x0800cfef
 800cedc:	0800cfef 	.word	0x0800cfef
 800cee0:	0800cfef 	.word	0x0800cfef
 800cee4:	0800cfef 	.word	0x0800cfef
 800cee8:	0800cfef 	.word	0x0800cfef
 800ceec:	0800cfef 	.word	0x0800cfef
 800cef0:	0800cfef 	.word	0x0800cfef
 800cef4:	0800cfef 	.word	0x0800cfef
 800cef8:	0800cfef 	.word	0x0800cfef
 800cefc:	0800cfef 	.word	0x0800cfef
 800cf00:	0800cfef 	.word	0x0800cfef
 800cf04:	0800cfef 	.word	0x0800cfef
 800cf08:	0800cfef 	.word	0x0800cfef
 800cf0c:	0800cfef 	.word	0x0800cfef
 800cf10:	0800cfef 	.word	0x0800cfef
 800cf14:	0800cfef 	.word	0x0800cfef
 800cf18:	0800cfef 	.word	0x0800cfef
 800cf1c:	0800cfef 	.word	0x0800cfef
 800cf20:	0800cfef 	.word	0x0800cfef
 800cf24:	0800cfef 	.word	0x0800cfef
 800cf28:	0800cfef 	.word	0x0800cfef
 800cf2c:	0800cfef 	.word	0x0800cfef
 800cf30:	0800cfef 	.word	0x0800cfef
 800cf34:	0800cfef 	.word	0x0800cfef
 800cf38:	0800cfef 	.word	0x0800cfef
 800cf3c:	0800cfef 	.word	0x0800cfef
 800cf40:	0800cfef 	.word	0x0800cfef
 800cf44:	0800cfdf 	.word	0x0800cfdf
 800cf48:	0800cfd9 	.word	0x0800cfd9
 800cf4c:	0800cfd3 	.word	0x0800cfd3
 800cf50:	0800cfcd 	.word	0x0800cfcd
 800cf54:	0800cfc7 	.word	0x0800cfc7
 800cf58:	0800cfc1 	.word	0x0800cfc1
 800cf5c:	0800cfbb 	.word	0x0800cfbb
 800cf60:	0800cfb5 	.word	0x0800cfb5
 800cf64:	0800cfaf 	.word	0x0800cfaf
 800cf68:	0800cfa9 	.word	0x0800cfa9
 800cf6c:	0800cfa3 	.word	0x0800cfa3
 800cf70:	0800cf9d 	.word	0x0800cf9d
 800cf74:	0800cf97 	.word	0x0800cf97
 800cf78:	0800cf91 	.word	0x0800cf91
 800cf7c:	0800cf8b 	.word	0x0800cf8b
 800cf80:	0800cf85 	.word	0x0800cf85
			//----a右スラローム----
			case -1:
				slalom_R90();
 800cf84:	f7f9 f960 	bl	8006248 <slalom_R90>
				break;
 800cf88:	e0bf      	b.n	800d10a <searchF4+0x3da>

			//----a左スラローム----
			case -2:
				slalom_L90();
 800cf8a:	f7f9 fa11 	bl	80063b0 <slalom_L90>
				break;
 800cf8e:	e0bc      	b.n	800d10a <searchF4+0x3da>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 800cf90:	f7f9 fab8 	bl	8006504 <Lslalom_R90>
				break;
 800cf94:	e0b9      	b.n	800d10a <searchF4+0x3da>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 800cf96:	f7f9 fb2b 	bl	80065f0 <Lslalom_L90>
				break;
 800cf9a:	e0b6      	b.n	800d10a <searchF4+0x3da>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 800cf9c:	f7f9 fc0a 	bl	80067b4 <Lslalom_R180>
				break;
 800cfa0:	e0b3      	b.n	800d10a <searchF4+0x3da>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 800cfa2:	f7f9 fc85 	bl	80068b0 <Lslalom_L180>
				break;
 800cfa6:	e0b0      	b.n	800d10a <searchF4+0x3da>

			//----a斜め右V45----
			case -7:
				v_R45();
 800cfa8:	f7f9 fcfa 	bl	80069a0 <v_R45>
				break;
 800cfac:	e0ad      	b.n	800d10a <searchF4+0x3da>

			//----a斜め左V45----
			case -8:
				v_L45();
 800cfae:	f7f9 fda5 	bl	8006afc <v_L45>
				break;
 800cfb2:	e0aa      	b.n	800d10a <searchF4+0x3da>

			//----a斜め右V90----
			case -9:
				v_R90();
 800cfb4:	f7f9 fff2 	bl	8006f9c <v_R90>
				break;
 800cfb8:	e0a7      	b.n	800d10a <searchF4+0x3da>

			//----a斜め左V90----
			case -10:
				v_L90();
 800cfba:	f7fa f84b 	bl	8007054 <v_L90>
				break;
 800cfbe:	e0a4      	b.n	800d10a <searchF4+0x3da>

			//----a斜め右V135----
			case -11:
				v_R135();
 800cfc0:	f7fa f89e 	bl	8007100 <v_R135>
				break;
 800cfc4:	e0a1      	b.n	800d10a <searchF4+0x3da>

			//----a斜め左V135----
			case -12:
				v_L135();
 800cfc6:	f7fa f949 	bl	800725c <v_L135>
				break;
 800cfca:	e09e      	b.n	800d10a <searchF4+0x3da>

			//----a斜め右V45Goal----
			case -13:
				v_R45D();
 800cfcc:	f7f9 fe3e 	bl	8006c4c <v_R45D>
				break;
 800cfd0:	e09b      	b.n	800d10a <searchF4+0x3da>

			//----a斜め左V45Goal----
			case -14:
				v_L45D();
 800cfd2:	f7f9 fef9 	bl	8006dc8 <v_L45D>
				break;
 800cfd6:	e098      	b.n	800d10a <searchF4+0x3da>

			//----a斜め右V135Goal----
			case -15:
				v_R135D();
 800cfd8:	f7fa f9e8 	bl	80073ac <v_R135D>
				break;
 800cfdc:	e095      	b.n	800d10a <searchF4+0x3da>

			//----a斜め左V135Goal----
			case -16:
				v_L135D();
 800cfde:	f7fa fad5 	bl	800758c <v_L135D>
				break;
 800cfe2:	e092      	b.n	800d10a <searchF4+0x3da>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 800cfe4:	f7f9 f858 	bl	8006098 <rotate_180>
				rotate_180();
 800cfe8:	f7f9 f856 	bl	8006098 <rotate_180>
				while(1);
 800cfec:	e7fe      	b.n	800cfec <searchF4+0x2bc>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 800cfee:	4b1f      	ldr	r3, [pc, #124]	; (800d06c <searchF4+0x33c>)
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	3b01      	subs	r3, #1
 800cff4:	4a1f      	ldr	r2, [pc, #124]	; (800d074 <searchF4+0x344>)
 800cff6:	56d3      	ldrsb	r3, [r2, r3]
 800cff8:	2b03      	cmp	r3, #3
 800cffa:	dc11      	bgt.n	800d020 <searchF4+0x2f0>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800cffc:	2300      	movs	r3, #0
 800cffe:	607b      	str	r3, [r7, #4]
 800d000:	e004      	b.n	800d00c <searchF4+0x2dc>
						half_sectionU();
 800d002:	f7f8 fd13 	bl	8005a2c <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	3301      	adds	r3, #1
 800d00a:	607b      	str	r3, [r7, #4]
 800d00c:	4b17      	ldr	r3, [pc, #92]	; (800d06c <searchF4+0x33c>)
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	3b01      	subs	r3, #1
 800d012:	4a18      	ldr	r2, [pc, #96]	; (800d074 <searchF4+0x344>)
 800d014:	56d3      	ldrsb	r3, [r2, r3]
 800d016:	461a      	mov	r2, r3
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4293      	cmp	r3, r2
 800d01c:	dbf1      	blt.n	800d002 <searchF4+0x2d2>
					}else{
						half_sectionV();
					}
//					half_sectionV();
				}
				break;
 800d01e:	e073      	b.n	800d108 <searchF4+0x3d8>
				}else if(pass[p_cnt-1] < 64){
 800d020:	4b12      	ldr	r3, [pc, #72]	; (800d06c <searchF4+0x33c>)
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	3b01      	subs	r3, #1
 800d026:	4a13      	ldr	r2, [pc, #76]	; (800d074 <searchF4+0x344>)
 800d028:	56d3      	ldrsb	r3, [r2, r3]
 800d02a:	2b3f      	cmp	r3, #63	; 0x3f
 800d02c:	dc26      	bgt.n	800d07c <searchF4+0x34c>
					one_sectionA();
 800d02e:	f7f8 fd1d 	bl	8005a6c <one_sectionA>
					H_accel_flag = 1;
 800d032:	4b11      	ldr	r3, [pc, #68]	; (800d078 <searchF4+0x348>)
 800d034:	2201      	movs	r2, #1
 800d036:	701a      	strb	r2, [r3, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800d038:	2300      	movs	r3, #0
 800d03a:	603b      	str	r3, [r7, #0]
 800d03c:	e004      	b.n	800d048 <searchF4+0x318>
						half_sectionU();
 800d03e:	f7f8 fcf5 	bl	8005a2c <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	3301      	adds	r3, #1
 800d046:	603b      	str	r3, [r7, #0]
 800d048:	4b08      	ldr	r3, [pc, #32]	; (800d06c <searchF4+0x33c>)
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	3b01      	subs	r3, #1
 800d04e:	4a09      	ldr	r2, [pc, #36]	; (800d074 <searchF4+0x344>)
 800d050:	56d3      	ldrsb	r3, [r2, r3]
 800d052:	3b04      	subs	r3, #4
 800d054:	683a      	ldr	r2, [r7, #0]
 800d056:	429a      	cmp	r2, r3
 800d058:	dbf1      	blt.n	800d03e <searchF4+0x30e>
					one_sectionD();
 800d05a:	f7f8 fd59 	bl	8005b10 <one_sectionD>
					H_accel_flag = 0;
 800d05e:	4b06      	ldr	r3, [pc, #24]	; (800d078 <searchF4+0x348>)
 800d060:	2200      	movs	r2, #0
 800d062:	701a      	strb	r2, [r3, #0]
				break;
 800d064:	e050      	b.n	800d108 <searchF4+0x3d8>
 800d066:	bf00      	nop
 800d068:	20000fac 	.word	0x20000fac
 800d06c:	200002e8 	.word	0x200002e8
 800d070:	2000160c 	.word	0x2000160c
 800d074:	20000388 	.word	0x20000388
 800d078:	20000301 	.word	0x20000301
					if((pass[p_cnt] == 64) && (pass[p_cnt+1] == 64) && (pass[p_cnt+2] == 64) && (H_accel_flag == 0)){
 800d07c:	4b4b      	ldr	r3, [pc, #300]	; (800d1ac <searchF4+0x47c>)
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	461a      	mov	r2, r3
 800d082:	4b4b      	ldr	r3, [pc, #300]	; (800d1b0 <searchF4+0x480>)
 800d084:	569b      	ldrsb	r3, [r3, r2]
 800d086:	2b40      	cmp	r3, #64	; 0x40
 800d088:	d11d      	bne.n	800d0c6 <searchF4+0x396>
 800d08a:	4b48      	ldr	r3, [pc, #288]	; (800d1ac <searchF4+0x47c>)
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	3301      	adds	r3, #1
 800d090:	4a47      	ldr	r2, [pc, #284]	; (800d1b0 <searchF4+0x480>)
 800d092:	56d3      	ldrsb	r3, [r2, r3]
 800d094:	2b40      	cmp	r3, #64	; 0x40
 800d096:	d116      	bne.n	800d0c6 <searchF4+0x396>
 800d098:	4b44      	ldr	r3, [pc, #272]	; (800d1ac <searchF4+0x47c>)
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	3302      	adds	r3, #2
 800d09e:	4a44      	ldr	r2, [pc, #272]	; (800d1b0 <searchF4+0x480>)
 800d0a0:	56d3      	ldrsb	r3, [r2, r3]
 800d0a2:	2b40      	cmp	r3, #64	; 0x40
 800d0a4:	d10f      	bne.n	800d0c6 <searchF4+0x396>
 800d0a6:	4b43      	ldr	r3, [pc, #268]	; (800d1b4 <searchF4+0x484>)
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d10b      	bne.n	800d0c6 <searchF4+0x396>
						one_sectionVA();
 800d0ae:	f7f8 fd87 	bl	8005bc0 <one_sectionVA>
						H_accel_flag = 1;
 800d0b2:	4b40      	ldr	r3, [pc, #256]	; (800d1b4 <searchF4+0x484>)
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	701a      	strb	r2, [r3, #0]
						p_cnt++;
 800d0b8:	4b3c      	ldr	r3, [pc, #240]	; (800d1ac <searchF4+0x47c>)
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	b2da      	uxtb	r2, r3
 800d0c0:	4b3a      	ldr	r3, [pc, #232]	; (800d1ac <searchF4+0x47c>)
 800d0c2:	701a      	strb	r2, [r3, #0]
 800d0c4:	e020      	b.n	800d108 <searchF4+0x3d8>
					else if((pass[p_cnt] == 64) && (pass[p_cnt+1] != 64) && (H_accel_flag == 1)){
 800d0c6:	4b39      	ldr	r3, [pc, #228]	; (800d1ac <searchF4+0x47c>)
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	4b38      	ldr	r3, [pc, #224]	; (800d1b0 <searchF4+0x480>)
 800d0ce:	569b      	ldrsb	r3, [r3, r2]
 800d0d0:	2b40      	cmp	r3, #64	; 0x40
 800d0d2:	d116      	bne.n	800d102 <searchF4+0x3d2>
 800d0d4:	4b35      	ldr	r3, [pc, #212]	; (800d1ac <searchF4+0x47c>)
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	3301      	adds	r3, #1
 800d0da:	4a35      	ldr	r2, [pc, #212]	; (800d1b0 <searchF4+0x480>)
 800d0dc:	56d3      	ldrsb	r3, [r2, r3]
 800d0de:	2b40      	cmp	r3, #64	; 0x40
 800d0e0:	d00f      	beq.n	800d102 <searchF4+0x3d2>
 800d0e2:	4b34      	ldr	r3, [pc, #208]	; (800d1b4 <searchF4+0x484>)
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d10b      	bne.n	800d102 <searchF4+0x3d2>
						one_sectionVD();
 800d0ea:	f7f8 fdb3 	bl	8005c54 <one_sectionVD>
						H_accel_flag = 0;
 800d0ee:	4b31      	ldr	r3, [pc, #196]	; (800d1b4 <searchF4+0x484>)
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	701a      	strb	r2, [r3, #0]
						p_cnt++;
 800d0f4:	4b2d      	ldr	r3, [pc, #180]	; (800d1ac <searchF4+0x47c>)
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	b2da      	uxtb	r2, r3
 800d0fc:	4b2b      	ldr	r3, [pc, #172]	; (800d1ac <searchF4+0x47c>)
 800d0fe:	701a      	strb	r2, [r3, #0]
 800d100:	e002      	b.n	800d108 <searchF4+0x3d8>
						half_sectionV();
 800d102:	f7f8 fc9f 	bl	8005a44 <half_sectionV>
				break;
 800d106:	e7ff      	b.n	800d108 <searchF4+0x3d8>
 800d108:	bf00      	nop
		}

	}while(pass[p_cnt] != -114);
 800d10a:	4b28      	ldr	r3, [pc, #160]	; (800d1ac <searchF4+0x47c>)
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	461a      	mov	r2, r3
 800d110:	4b27      	ldr	r3, [pc, #156]	; (800d1b0 <searchF4+0x480>)
 800d112:	569b      	ldrsb	r3, [r3, r2]
 800d114:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800d118:	f47f ae3f 	bne.w	800cd9a <searchF4+0x6a>

	mouse.x = goal_x;
 800d11c:	4b26      	ldr	r3, [pc, #152]	; (800d1b8 <searchF4+0x488>)
 800d11e:	781a      	ldrb	r2, [r3, #0]
 800d120:	4b26      	ldr	r3, [pc, #152]	; (800d1bc <searchF4+0x48c>)
 800d122:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 800d124:	4b26      	ldr	r3, [pc, #152]	; (800d1c0 <searchF4+0x490>)
 800d126:	781a      	ldrb	r2, [r3, #0]
 800d128:	4b24      	ldr	r3, [pc, #144]	; (800d1bc <searchF4+0x48c>)
 800d12a:	705a      	strb	r2, [r3, #1]

	if(pass[p_cnt-1] != -13 && pass[p_cnt-1] != -14 && pass[p_cnt-1] != -15 && pass[p_cnt-1] != -16){
 800d12c:	4b1f      	ldr	r3, [pc, #124]	; (800d1ac <searchF4+0x47c>)
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	3b01      	subs	r3, #1
 800d132:	4a1f      	ldr	r2, [pc, #124]	; (800d1b0 <searchF4+0x480>)
 800d134:	56d3      	ldrsb	r3, [r2, r3]
 800d136:	f113 0f0d 	cmn.w	r3, #13
 800d13a:	d01c      	beq.n	800d176 <searchF4+0x446>
 800d13c:	4b1b      	ldr	r3, [pc, #108]	; (800d1ac <searchF4+0x47c>)
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	3b01      	subs	r3, #1
 800d142:	4a1b      	ldr	r2, [pc, #108]	; (800d1b0 <searchF4+0x480>)
 800d144:	56d3      	ldrsb	r3, [r2, r3]
 800d146:	f113 0f0e 	cmn.w	r3, #14
 800d14a:	d014      	beq.n	800d176 <searchF4+0x446>
 800d14c:	4b17      	ldr	r3, [pc, #92]	; (800d1ac <searchF4+0x47c>)
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	3b01      	subs	r3, #1
 800d152:	4a17      	ldr	r2, [pc, #92]	; (800d1b0 <searchF4+0x480>)
 800d154:	56d3      	ldrsb	r3, [r2, r3]
 800d156:	f113 0f0f 	cmn.w	r3, #15
 800d15a:	d00c      	beq.n	800d176 <searchF4+0x446>
 800d15c:	4b13      	ldr	r3, [pc, #76]	; (800d1ac <searchF4+0x47c>)
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	3b01      	subs	r3, #1
 800d162:	4a13      	ldr	r2, [pc, #76]	; (800d1b0 <searchF4+0x480>)
 800d164:	56d3      	ldrsb	r3, [r2, r3]
 800d166:	f113 0f10 	cmn.w	r3, #16
 800d16a:	d004      	beq.n	800d176 <searchF4+0x446>
		half_sectionD();
 800d16c:	f7f8 fc00 	bl	8005970 <half_sectionD>
		full_led_write(BLUE);
 800d170:	2003      	movs	r0, #3
 800d172:	f001 ffe9 	bl	800f148 <full_led_write>
	}

	HAL_Delay(500);
 800d176:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d17a:	f7f3 ff4f 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800d17e:	f7f8 ff8b 	bl	8006098 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800d182:	2064      	movs	r0, #100	; 0x64
 800d184:	f7f8 f8b0 	bl	80052e8 <driveC2>
	degree_z = target_degree_z;
 800d188:	4b0e      	ldr	r3, [pc, #56]	; (800d1c4 <searchF4+0x494>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a0e      	ldr	r2, [pc, #56]	; (800d1c8 <searchF4+0x498>)
 800d18e:	6013      	str	r3, [r2, #0]
	start_flag = 0;
 800d190:	4b0e      	ldr	r3, [pc, #56]	; (800d1cc <searchF4+0x49c>)
 800d192:	2200      	movs	r2, #0
 800d194:	701a      	strb	r2, [r3, #0]

	mouse.dir = mouse.dir / 2;
 800d196:	4b09      	ldr	r3, [pc, #36]	; (800d1bc <searchF4+0x48c>)
 800d198:	789b      	ldrb	r3, [r3, #2]
 800d19a:	b2db      	uxtb	r3, r3
 800d19c:	085b      	lsrs	r3, r3, #1
 800d19e:	b2da      	uxtb	r2, r3
 800d1a0:	4b06      	ldr	r3, [pc, #24]	; (800d1bc <searchF4+0x48c>)
 800d1a2:	709a      	strb	r2, [r3, #2]

}
 800d1a4:	bf00      	nop
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	200002e8 	.word	0x200002e8
 800d1b0:	20000388 	.word	0x20000388
 800d1b4:	20000301 	.word	0x20000301
 800d1b8:	20000bf1 	.word	0x20000bf1
 800d1bc:	20000c54 	.word	0x20000c54
 800d1c0:	20000b8c 	.word	0x20000b8c
 800d1c4:	20000c40 	.word	0x20000c40
 800d1c8:	20000b9c 	.word	0x20000b9c
 800d1cc:	2000160c 	.word	0x2000160c

0800d1d0 <adv_pos>:
//adv_pos
//aマイクロマウス内部位置情報で前進させる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 800d1d0:	b480      	push	{r7}
 800d1d2:	af00      	add	r7, sp, #0

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 800d1d4:	4b1a      	ldr	r3, [pc, #104]	; (800d240 <adv_pos+0x70>)
 800d1d6:	789b      	ldrb	r3, [r3, #2]
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	2b03      	cmp	r3, #3
 800d1dc:	d82a      	bhi.n	800d234 <adv_pos+0x64>
 800d1de:	a201      	add	r2, pc, #4	; (adr r2, 800d1e4 <adv_pos+0x14>)
 800d1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e4:	0800d1f5 	.word	0x0800d1f5
 800d1e8:	0800d205 	.word	0x0800d205
 800d1ec:	0800d215 	.word	0x0800d215
 800d1f0:	0800d225 	.word	0x0800d225
	case 0x00:												//a北方向に向いている場合
		mouse.y++;											//Y座標をインクリメント
 800d1f4:	4b12      	ldr	r3, [pc, #72]	; (800d240 <adv_pos+0x70>)
 800d1f6:	785b      	ldrb	r3, [r3, #1]
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	b2da      	uxtb	r2, r3
 800d1fe:	4b10      	ldr	r3, [pc, #64]	; (800d240 <adv_pos+0x70>)
 800d200:	705a      	strb	r2, [r3, #1]
		break;
 800d202:	e017      	b.n	800d234 <adv_pos+0x64>
	case 0x01:												//a東方向に向いている場合
		mouse.x++;											//X座標をインクリメント
 800d204:	4b0e      	ldr	r3, [pc, #56]	; (800d240 <adv_pos+0x70>)
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	3301      	adds	r3, #1
 800d20c:	b2da      	uxtb	r2, r3
 800d20e:	4b0c      	ldr	r3, [pc, #48]	; (800d240 <adv_pos+0x70>)
 800d210:	701a      	strb	r2, [r3, #0]
		break;
 800d212:	e00f      	b.n	800d234 <adv_pos+0x64>
	case 0x02:												//a南方向に向いている場合
		mouse.y--;											//Y座標をデクリメント
 800d214:	4b0a      	ldr	r3, [pc, #40]	; (800d240 <adv_pos+0x70>)
 800d216:	785b      	ldrb	r3, [r3, #1]
 800d218:	b2db      	uxtb	r3, r3
 800d21a:	3b01      	subs	r3, #1
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	4b08      	ldr	r3, [pc, #32]	; (800d240 <adv_pos+0x70>)
 800d220:	705a      	strb	r2, [r3, #1]
		break;
 800d222:	e007      	b.n	800d234 <adv_pos+0x64>
	case 0x03:												//a西方向に向いている場合
		mouse.x--;											//X座標をデクリメント
 800d224:	4b06      	ldr	r3, [pc, #24]	; (800d240 <adv_pos+0x70>)
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	3b01      	subs	r3, #1
 800d22c:	b2da      	uxtb	r2, r3
 800d22e:	4b04      	ldr	r3, [pc, #16]	; (800d240 <adv_pos+0x70>)
 800d230:	701a      	strb	r2, [r3, #0]
		break;
 800d232:	bf00      	nop
	}
}
 800d234:	bf00      	nop
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	20000c54 	.word	0x20000c54

0800d244 <conf_route>:
//conf_route
//a進路を判定する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 800d244:	b580      	push	{r7, lr}
 800d246:	af00      	add	r7, sp, #0

	//----a壁情報書き込み----
	write_map();
 800d248:	f000 f886 	bl	800d358 <write_map>

	//----a最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 800d24c:	4b09      	ldr	r3, [pc, #36]	; (800d274 <conf_route+0x30>)
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	461a      	mov	r2, r3
 800d252:	4b09      	ldr	r3, [pc, #36]	; (800d278 <conf_route+0x34>)
 800d254:	5c9a      	ldrb	r2, [r3, r2]
 800d256:	4b09      	ldr	r3, [pc, #36]	; (800d27c <conf_route+0x38>)
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	4013      	ands	r3, r2
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d006      	beq.n	800d270 <conf_route+0x2c>
		make_smap();										//a歩数マップを更新
 800d262:	f000 fa79 	bl	800d758 <make_smap>
		make_route();										//a最短経路を更新
 800d266:	f000 fdb5 	bl	800ddd4 <make_route>
		r_cnt = 0;											//a経路カウンタを0に
 800d26a:	4b02      	ldr	r3, [pc, #8]	; (800d274 <conf_route+0x30>)
 800d26c:	2200      	movs	r2, #0
 800d26e:	701a      	strb	r2, [r3, #0]
	}
}
 800d270:	bf00      	nop
 800d272:	bd80      	pop	{r7, pc}
 800d274:	20001614 	.word	0x20001614
 800d278:	20000c9c 	.word	0x20000c9c
 800d27c:	20000300 	.word	0x20000300

0800d280 <map_Init>:
//map_Init
//aマップ格納配列map[][]の初期化をする
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 800d280:	b480      	push	{r7}
 800d282:	b083      	sub	sp, #12
 800d284:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数

	//====a初期化開始====
	//aマップのクリア
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800d286:	2300      	movs	r3, #0
 800d288:	71bb      	strb	r3, [r7, #6]
 800d28a:	e013      	b.n	800d2b4 <map_Init+0x34>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800d28c:	2300      	movs	r3, #0
 800d28e:	71fb      	strb	r3, [r7, #7]
 800d290:	e00a      	b.n	800d2a8 <map_Init+0x28>
			map[y][x] = 0xf0;								//a上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 800d292:	79ba      	ldrb	r2, [r7, #6]
 800d294:	79fb      	ldrb	r3, [r7, #7]
 800d296:	492f      	ldr	r1, [pc, #188]	; (800d354 <map_Init+0xd4>)
 800d298:	0112      	lsls	r2, r2, #4
 800d29a:	440a      	add	r2, r1
 800d29c:	4413      	add	r3, r2
 800d29e:	22f0      	movs	r2, #240	; 0xf0
 800d2a0:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800d2a2:	79fb      	ldrb	r3, [r7, #7]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	71fb      	strb	r3, [r7, #7]
 800d2a8:	79fb      	ldrb	r3, [r7, #7]
 800d2aa:	2b0f      	cmp	r3, #15
 800d2ac:	d9f1      	bls.n	800d292 <map_Init+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800d2ae:	79bb      	ldrb	r3, [r7, #6]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	71bb      	strb	r3, [r7, #6]
 800d2b4:	79bb      	ldrb	r3, [r7, #6]
 800d2b6:	2b0f      	cmp	r3, #15
 800d2b8:	d9e8      	bls.n	800d28c <map_Init+0xc>
		}
	}

	//a確定壁の配置
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	71bb      	strb	r3, [r7, #6]
 800d2be:	e020      	b.n	800d302 <map_Init+0x82>
		map[y][0] |= 0xf1;									//a最西に壁を配置
 800d2c0:	79bb      	ldrb	r3, [r7, #6]
 800d2c2:	4a24      	ldr	r2, [pc, #144]	; (800d354 <map_Init+0xd4>)
 800d2c4:	011b      	lsls	r3, r3, #4
 800d2c6:	4413      	add	r3, r2
 800d2c8:	781a      	ldrb	r2, [r3, #0]
 800d2ca:	79bb      	ldrb	r3, [r7, #6]
 800d2cc:	f062 020e 	orn	r2, r2, #14
 800d2d0:	b2d1      	uxtb	r1, r2
 800d2d2:	4a20      	ldr	r2, [pc, #128]	; (800d354 <map_Init+0xd4>)
 800d2d4:	011b      	lsls	r3, r3, #4
 800d2d6:	4413      	add	r3, r2
 800d2d8:	460a      	mov	r2, r1
 800d2da:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//a最東に壁を配置
 800d2dc:	79bb      	ldrb	r3, [r7, #6]
 800d2de:	4a1d      	ldr	r2, [pc, #116]	; (800d354 <map_Init+0xd4>)
 800d2e0:	011b      	lsls	r3, r3, #4
 800d2e2:	4413      	add	r3, r2
 800d2e4:	330f      	adds	r3, #15
 800d2e6:	781a      	ldrb	r2, [r3, #0]
 800d2e8:	79bb      	ldrb	r3, [r7, #6]
 800d2ea:	f062 020b 	orn	r2, r2, #11
 800d2ee:	b2d1      	uxtb	r1, r2
 800d2f0:	4a18      	ldr	r2, [pc, #96]	; (800d354 <map_Init+0xd4>)
 800d2f2:	011b      	lsls	r3, r3, #4
 800d2f4:	4413      	add	r3, r2
 800d2f6:	330f      	adds	r3, #15
 800d2f8:	460a      	mov	r2, r1
 800d2fa:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800d2fc:	79bb      	ldrb	r3, [r7, #6]
 800d2fe:	3301      	adds	r3, #1
 800d300:	71bb      	strb	r3, [r7, #6]
 800d302:	79bb      	ldrb	r3, [r7, #6]
 800d304:	2b0f      	cmp	r3, #15
 800d306:	d9db      	bls.n	800d2c0 <map_Init+0x40>
	}
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800d308:	2300      	movs	r3, #0
 800d30a:	71fb      	strb	r3, [r7, #7]
 800d30c:	e019      	b.n	800d342 <map_Init+0xc2>
		map[0][x] |= 0xf2;									//a最南に壁を配置
 800d30e:	79fb      	ldrb	r3, [r7, #7]
 800d310:	4a10      	ldr	r2, [pc, #64]	; (800d354 <map_Init+0xd4>)
 800d312:	5cd2      	ldrb	r2, [r2, r3]
 800d314:	79fb      	ldrb	r3, [r7, #7]
 800d316:	f062 020d 	orn	r2, r2, #13
 800d31a:	b2d1      	uxtb	r1, r2
 800d31c:	4a0d      	ldr	r2, [pc, #52]	; (800d354 <map_Init+0xd4>)
 800d31e:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//a最北に壁を配置
 800d320:	79fb      	ldrb	r3, [r7, #7]
 800d322:	4a0c      	ldr	r2, [pc, #48]	; (800d354 <map_Init+0xd4>)
 800d324:	4413      	add	r3, r2
 800d326:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 800d32a:	79fb      	ldrb	r3, [r7, #7]
 800d32c:	f062 0207 	orn	r2, r2, #7
 800d330:	b2d1      	uxtb	r1, r2
 800d332:	4a08      	ldr	r2, [pc, #32]	; (800d354 <map_Init+0xd4>)
 800d334:	4413      	add	r3, r2
 800d336:	460a      	mov	r2, r1
 800d338:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 800d33c:	79fb      	ldrb	r3, [r7, #7]
 800d33e:	3301      	adds	r3, #1
 800d340:	71fb      	strb	r3, [r7, #7]
 800d342:	79fb      	ldrb	r3, [r7, #7]
 800d344:	2b0f      	cmp	r3, #15
 800d346:	d9e2      	bls.n	800d30e <map_Init+0x8e>
	}
}
 800d348:	bf00      	nop
 800d34a:	370c      	adds	r7, #12
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr
 800d354:	200001e4 	.word	0x200001e4

0800d358 <write_map>:
//write_map
//aマップデータを書き込む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 800d358:	b490      	push	{r4, r7}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t m_temp;											//a向きを補正した壁情報

	//====a壁情報の補正格納====
	m_temp = (wall_info >> mouse.dir) & 0x0f;				//aセンサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 800d35e:	4b8f      	ldr	r3, [pc, #572]	; (800d59c <write_map+0x244>)
 800d360:	781b      	ldrb	r3, [r3, #0]
 800d362:	461a      	mov	r2, r3
 800d364:	4b8e      	ldr	r3, [pc, #568]	; (800d5a0 <write_map+0x248>)
 800d366:	789b      	ldrb	r3, [r3, #2]
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	fa42 f303 	asr.w	r3, r2, r3
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	f003 030f 	and.w	r3, r3, #15
 800d374:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//a上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 800d376:	79fb      	ldrb	r3, [r7, #7]
 800d378:	011b      	lsls	r3, r3, #4
 800d37a:	b25a      	sxtb	r2, r3
 800d37c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d380:	4313      	orrs	r3, r2
 800d382:	b25b      	sxtb	r3, r3
 800d384:	71fb      	strb	r3, [r7, #7]

	//====aデータの書き込み====
	map[mouse.y][mouse.x] = m_temp; 						//a現在地に壁情報書き込み
 800d386:	4b86      	ldr	r3, [pc, #536]	; (800d5a0 <write_map+0x248>)
 800d388:	785b      	ldrb	r3, [r3, #1]
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	4618      	mov	r0, r3
 800d38e:	4b84      	ldr	r3, [pc, #528]	; (800d5a0 <write_map+0x248>)
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	b2db      	uxtb	r3, r3
 800d394:	4619      	mov	r1, r3
 800d396:	4a83      	ldr	r2, [pc, #524]	; (800d5a4 <write_map+0x24c>)
 800d398:	0103      	lsls	r3, r0, #4
 800d39a:	4413      	add	r3, r2
 800d39c:	440b      	add	r3, r1
 800d39e:	79fa      	ldrb	r2, [r7, #7]
 800d3a0:	701a      	strb	r2, [r3, #0]
	//----a周辺に書き込む----
	//a北側について
	if(mouse.y != 15){										//a現在最北端でないとき
 800d3a2:	4b7f      	ldr	r3, [pc, #508]	; (800d5a0 <write_map+0x248>)
 800d3a4:	785b      	ldrb	r3, [r3, #1]
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	2b0f      	cmp	r3, #15
 800d3aa:	d039      	beq.n	800d420 <write_map+0xc8>
		if(m_temp & 0x88){									//a北壁がある場合
 800d3ac:	79fb      	ldrb	r3, [r7, #7]
 800d3ae:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d01a      	beq.n	800d3ec <write_map+0x94>
			map[mouse.y + 1][mouse.x] |= 0x22;				//a北側の区画から見て南壁ありを書き込む
 800d3b6:	4b7a      	ldr	r3, [pc, #488]	; (800d5a0 <write_map+0x248>)
 800d3b8:	785b      	ldrb	r3, [r3, #1]
 800d3ba:	b2d8      	uxtb	r0, r3
 800d3bc:	4603      	mov	r3, r0
 800d3be:	3301      	adds	r3, #1
 800d3c0:	4a77      	ldr	r2, [pc, #476]	; (800d5a0 <write_map+0x248>)
 800d3c2:	7812      	ldrb	r2, [r2, #0]
 800d3c4:	b2d1      	uxtb	r1, r2
 800d3c6:	460c      	mov	r4, r1
 800d3c8:	4a76      	ldr	r2, [pc, #472]	; (800d5a4 <write_map+0x24c>)
 800d3ca:	011b      	lsls	r3, r3, #4
 800d3cc:	4413      	add	r3, r2
 800d3ce:	4423      	add	r3, r4
 800d3d0:	781a      	ldrb	r2, [r3, #0]
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	4608      	mov	r0, r1
 800d3d8:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 800d3dc:	b2d1      	uxtb	r1, r2
 800d3de:	4a71      	ldr	r2, [pc, #452]	; (800d5a4 <write_map+0x24c>)
 800d3e0:	011b      	lsls	r3, r3, #4
 800d3e2:	4413      	add	r3, r2
 800d3e4:	4403      	add	r3, r0
 800d3e6:	460a      	mov	r2, r1
 800d3e8:	701a      	strb	r2, [r3, #0]
 800d3ea:	e019      	b.n	800d420 <write_map+0xc8>
		}else{												//a北壁がない場合
			map[mouse.y + 1][mouse.x] &= 0xDD;				//a北側の区画から見て南壁なしを書き込む
 800d3ec:	4b6c      	ldr	r3, [pc, #432]	; (800d5a0 <write_map+0x248>)
 800d3ee:	785b      	ldrb	r3, [r3, #1]
 800d3f0:	b2d8      	uxtb	r0, r3
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	4a6a      	ldr	r2, [pc, #424]	; (800d5a0 <write_map+0x248>)
 800d3f8:	7812      	ldrb	r2, [r2, #0]
 800d3fa:	b2d1      	uxtb	r1, r2
 800d3fc:	460c      	mov	r4, r1
 800d3fe:	4a69      	ldr	r2, [pc, #420]	; (800d5a4 <write_map+0x24c>)
 800d400:	011b      	lsls	r3, r3, #4
 800d402:	4413      	add	r3, r2
 800d404:	4423      	add	r3, r4
 800d406:	781a      	ldrb	r2, [r3, #0]
 800d408:	4603      	mov	r3, r0
 800d40a:	3301      	adds	r3, #1
 800d40c:	4608      	mov	r0, r1
 800d40e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800d412:	b2d1      	uxtb	r1, r2
 800d414:	4a63      	ldr	r2, [pc, #396]	; (800d5a4 <write_map+0x24c>)
 800d416:	011b      	lsls	r3, r3, #4
 800d418:	4413      	add	r3, r2
 800d41a:	4403      	add	r3, r0
 800d41c:	460a      	mov	r2, r1
 800d41e:	701a      	strb	r2, [r3, #0]
		}
	}
	//a東側について
	if(mouse.x != 15){										//a現在最東端でないとき
 800d420:	4b5f      	ldr	r3, [pc, #380]	; (800d5a0 <write_map+0x248>)
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	b2db      	uxtb	r3, r3
 800d426:	2b0f      	cmp	r3, #15
 800d428:	d037      	beq.n	800d49a <write_map+0x142>
		if(m_temp & 0x44){									//a東壁がある場合
 800d42a:	79fb      	ldrb	r3, [r7, #7]
 800d42c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d430:	2b00      	cmp	r3, #0
 800d432:	d019      	beq.n	800d468 <write_map+0x110>
			map[mouse.y][mouse.x + 1] |= 0x11;				//a東側の区画から見て西壁ありを書き込む
 800d434:	4b5a      	ldr	r3, [pc, #360]	; (800d5a0 <write_map+0x248>)
 800d436:	785b      	ldrb	r3, [r3, #1]
 800d438:	b2dc      	uxtb	r4, r3
 800d43a:	4622      	mov	r2, r4
 800d43c:	4b58      	ldr	r3, [pc, #352]	; (800d5a0 <write_map+0x248>)
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	b2d8      	uxtb	r0, r3
 800d442:	4603      	mov	r3, r0
 800d444:	3301      	adds	r3, #1
 800d446:	4957      	ldr	r1, [pc, #348]	; (800d5a4 <write_map+0x24c>)
 800d448:	0112      	lsls	r2, r2, #4
 800d44a:	440a      	add	r2, r1
 800d44c:	4413      	add	r3, r2
 800d44e:	781a      	ldrb	r2, [r3, #0]
 800d450:	4603      	mov	r3, r0
 800d452:	3301      	adds	r3, #1
 800d454:	f042 0211 	orr.w	r2, r2, #17
 800d458:	b2d0      	uxtb	r0, r2
 800d45a:	4952      	ldr	r1, [pc, #328]	; (800d5a4 <write_map+0x24c>)
 800d45c:	0122      	lsls	r2, r4, #4
 800d45e:	440a      	add	r2, r1
 800d460:	4413      	add	r3, r2
 800d462:	4602      	mov	r2, r0
 800d464:	701a      	strb	r2, [r3, #0]
 800d466:	e018      	b.n	800d49a <write_map+0x142>
		}else{												//a北壁がない場合
			map[mouse.y][mouse.x + 1] &= 0xEE;				//a東側の区画から見て西壁なしを書き込む
 800d468:	4b4d      	ldr	r3, [pc, #308]	; (800d5a0 <write_map+0x248>)
 800d46a:	785b      	ldrb	r3, [r3, #1]
 800d46c:	b2dc      	uxtb	r4, r3
 800d46e:	4622      	mov	r2, r4
 800d470:	4b4b      	ldr	r3, [pc, #300]	; (800d5a0 <write_map+0x248>)
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	b2d8      	uxtb	r0, r3
 800d476:	4603      	mov	r3, r0
 800d478:	3301      	adds	r3, #1
 800d47a:	494a      	ldr	r1, [pc, #296]	; (800d5a4 <write_map+0x24c>)
 800d47c:	0112      	lsls	r2, r2, #4
 800d47e:	440a      	add	r2, r1
 800d480:	4413      	add	r3, r2
 800d482:	781a      	ldrb	r2, [r3, #0]
 800d484:	4603      	mov	r3, r0
 800d486:	3301      	adds	r3, #1
 800d488:	f022 0211 	bic.w	r2, r2, #17
 800d48c:	b2d0      	uxtb	r0, r2
 800d48e:	4945      	ldr	r1, [pc, #276]	; (800d5a4 <write_map+0x24c>)
 800d490:	0122      	lsls	r2, r4, #4
 800d492:	440a      	add	r2, r1
 800d494:	4413      	add	r3, r2
 800d496:	4602      	mov	r2, r0
 800d498:	701a      	strb	r2, [r3, #0]
		}
	}
	//a南壁について
	if(mouse.y != 0){										//a現在最南端でないとき
 800d49a:	4b41      	ldr	r3, [pc, #260]	; (800d5a0 <write_map+0x248>)
 800d49c:	785b      	ldrb	r3, [r3, #1]
 800d49e:	b2db      	uxtb	r3, r3
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d039      	beq.n	800d518 <write_map+0x1c0>
		if(m_temp & 0x22){									//a南壁がある場合
 800d4a4:	79fb      	ldrb	r3, [r7, #7]
 800d4a6:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d01a      	beq.n	800d4e4 <write_map+0x18c>
			map[mouse.y - 1][mouse.x] |= 0x88;				//a南側の区画から見て北壁ありを書き込む
 800d4ae:	4b3c      	ldr	r3, [pc, #240]	; (800d5a0 <write_map+0x248>)
 800d4b0:	785b      	ldrb	r3, [r3, #1]
 800d4b2:	b2d8      	uxtb	r0, r3
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	3b01      	subs	r3, #1
 800d4b8:	4a39      	ldr	r2, [pc, #228]	; (800d5a0 <write_map+0x248>)
 800d4ba:	7812      	ldrb	r2, [r2, #0]
 800d4bc:	b2d1      	uxtb	r1, r2
 800d4be:	460c      	mov	r4, r1
 800d4c0:	4a38      	ldr	r2, [pc, #224]	; (800d5a4 <write_map+0x24c>)
 800d4c2:	011b      	lsls	r3, r3, #4
 800d4c4:	4413      	add	r3, r2
 800d4c6:	4423      	add	r3, r4
 800d4c8:	781a      	ldrb	r2, [r3, #0]
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	3b01      	subs	r3, #1
 800d4ce:	4608      	mov	r0, r1
 800d4d0:	f062 0277 	orn	r2, r2, #119	; 0x77
 800d4d4:	b2d1      	uxtb	r1, r2
 800d4d6:	4a33      	ldr	r2, [pc, #204]	; (800d5a4 <write_map+0x24c>)
 800d4d8:	011b      	lsls	r3, r3, #4
 800d4da:	4413      	add	r3, r2
 800d4dc:	4403      	add	r3, r0
 800d4de:	460a      	mov	r2, r1
 800d4e0:	701a      	strb	r2, [r3, #0]
 800d4e2:	e019      	b.n	800d518 <write_map+0x1c0>
		}else{												//a南壁がない場合
			map[mouse.y - 1][mouse.x] &= 0x77;				//a南側の区画から見て北壁なしを書き込む
 800d4e4:	4b2e      	ldr	r3, [pc, #184]	; (800d5a0 <write_map+0x248>)
 800d4e6:	785b      	ldrb	r3, [r3, #1]
 800d4e8:	b2d8      	uxtb	r0, r3
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	3b01      	subs	r3, #1
 800d4ee:	4a2c      	ldr	r2, [pc, #176]	; (800d5a0 <write_map+0x248>)
 800d4f0:	7812      	ldrb	r2, [r2, #0]
 800d4f2:	b2d1      	uxtb	r1, r2
 800d4f4:	460c      	mov	r4, r1
 800d4f6:	4a2b      	ldr	r2, [pc, #172]	; (800d5a4 <write_map+0x24c>)
 800d4f8:	011b      	lsls	r3, r3, #4
 800d4fa:	4413      	add	r3, r2
 800d4fc:	4423      	add	r3, r4
 800d4fe:	781a      	ldrb	r2, [r3, #0]
 800d500:	4603      	mov	r3, r0
 800d502:	3b01      	subs	r3, #1
 800d504:	4608      	mov	r0, r1
 800d506:	f002 0277 	and.w	r2, r2, #119	; 0x77
 800d50a:	b2d1      	uxtb	r1, r2
 800d50c:	4a25      	ldr	r2, [pc, #148]	; (800d5a4 <write_map+0x24c>)
 800d50e:	011b      	lsls	r3, r3, #4
 800d510:	4413      	add	r3, r2
 800d512:	4403      	add	r3, r0
 800d514:	460a      	mov	r2, r1
 800d516:	701a      	strb	r2, [r3, #0]
		}
	}
	//a西側について
	if(mouse.x != 0){										//a現在最西端でないとき
 800d518:	4b21      	ldr	r3, [pc, #132]	; (800d5a0 <write_map+0x248>)
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d037      	beq.n	800d592 <write_map+0x23a>
		if(m_temp & 0x11){									//a西壁がある場合
 800d522:	79fb      	ldrb	r3, [r7, #7]
 800d524:	f003 0311 	and.w	r3, r3, #17
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d019      	beq.n	800d560 <write_map+0x208>
			map[mouse.y][mouse.x - 1] |= 0x44;				//a西側の区画から見て東壁ありを書き込む
 800d52c:	4b1c      	ldr	r3, [pc, #112]	; (800d5a0 <write_map+0x248>)
 800d52e:	785b      	ldrb	r3, [r3, #1]
 800d530:	b2dc      	uxtb	r4, r3
 800d532:	4622      	mov	r2, r4
 800d534:	4b1a      	ldr	r3, [pc, #104]	; (800d5a0 <write_map+0x248>)
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	b2d8      	uxtb	r0, r3
 800d53a:	4603      	mov	r3, r0
 800d53c:	3b01      	subs	r3, #1
 800d53e:	4919      	ldr	r1, [pc, #100]	; (800d5a4 <write_map+0x24c>)
 800d540:	0112      	lsls	r2, r2, #4
 800d542:	440a      	add	r2, r1
 800d544:	4413      	add	r3, r2
 800d546:	781a      	ldrb	r2, [r3, #0]
 800d548:	4603      	mov	r3, r0
 800d54a:	3b01      	subs	r3, #1
 800d54c:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 800d550:	b2d0      	uxtb	r0, r2
 800d552:	4914      	ldr	r1, [pc, #80]	; (800d5a4 <write_map+0x24c>)
 800d554:	0122      	lsls	r2, r4, #4
 800d556:	440a      	add	r2, r1
 800d558:	4413      	add	r3, r2
 800d55a:	4602      	mov	r2, r0
 800d55c:	701a      	strb	r2, [r3, #0]
		}else{												//a西壁がない場合
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
		}
	}
}
 800d55e:	e018      	b.n	800d592 <write_map+0x23a>
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
 800d560:	4b0f      	ldr	r3, [pc, #60]	; (800d5a0 <write_map+0x248>)
 800d562:	785b      	ldrb	r3, [r3, #1]
 800d564:	b2dc      	uxtb	r4, r3
 800d566:	4622      	mov	r2, r4
 800d568:	4b0d      	ldr	r3, [pc, #52]	; (800d5a0 <write_map+0x248>)
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	b2d8      	uxtb	r0, r3
 800d56e:	4603      	mov	r3, r0
 800d570:	3b01      	subs	r3, #1
 800d572:	490c      	ldr	r1, [pc, #48]	; (800d5a4 <write_map+0x24c>)
 800d574:	0112      	lsls	r2, r2, #4
 800d576:	440a      	add	r2, r1
 800d578:	4413      	add	r3, r2
 800d57a:	781a      	ldrb	r2, [r3, #0]
 800d57c:	4603      	mov	r3, r0
 800d57e:	3b01      	subs	r3, #1
 800d580:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 800d584:	b2d0      	uxtb	r0, r2
 800d586:	4907      	ldr	r1, [pc, #28]	; (800d5a4 <write_map+0x24c>)
 800d588:	0122      	lsls	r2, r4, #4
 800d58a:	440a      	add	r2, r1
 800d58c:	4413      	add	r3, r2
 800d58e:	4602      	mov	r2, r0
 800d590:	701a      	strb	r2, [r3, #0]
}
 800d592:	bf00      	nop
 800d594:	3708      	adds	r7, #8
 800d596:	46bd      	mov	sp, r7
 800d598:	bc90      	pop	{r4, r7}
 800d59a:	4770      	bx	lr
 800d59c:	20000300 	.word	0x20000300
 800d5a0:	20000c54 	.word	0x20000c54
 800d5a4:	200001e4 	.word	0x200001e4

0800d5a8 <turn_dir>:
//turn_dir
//aマウスの方向を変更する
//a引数1：t_pat …… 回転方向(search.hでマクロ定義)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat, uint8_t t_mode){
 800d5a8:	b590      	push	{r4, r7, lr}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	460a      	mov	r2, r1
 800d5b2:	71fb      	strb	r3, [r7, #7]
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	71bb      	strb	r3, [r7, #6]

	//====a方向を変更====
	if(t_mode < 2){												//4方位モード
 800d5b8:	79bb      	ldrb	r3, [r7, #6]
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	d840      	bhi.n	800d640 <turn_dir+0x98>
		mouse.dir = (mouse.dir + t_pat) & 0x03;					//a指定された分mouse.dirを回転させる
 800d5be:	4b60      	ldr	r3, [pc, #384]	; (800d740 <turn_dir+0x198>)
 800d5c0:	789b      	ldrb	r3, [r3, #2]
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	79fb      	ldrb	r3, [r7, #7]
 800d5c6:	4413      	add	r3, r2
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	f003 0303 	and.w	r3, r3, #3
 800d5ce:	b2da      	uxtb	r2, r3
 800d5d0:	4b5b      	ldr	r3, [pc, #364]	; (800d740 <turn_dir+0x198>)
 800d5d2:	709a      	strb	r2, [r3, #2]
		if(t_mode == 1){
 800d5d4:	79bb      	ldrb	r3, [r7, #6]
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	f040 80a8 	bne.w	800d72c <turn_dir+0x184>
			if(t_pat == 0x01) target_degree_z -= 90.5;			//a目標角度+右90度
 800d5dc:	79fb      	ldrb	r3, [r7, #7]
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d109      	bne.n	800d5f6 <turn_dir+0x4e>
 800d5e2:	4b58      	ldr	r3, [pc, #352]	; (800d744 <turn_dir+0x19c>)
 800d5e4:	edd3 7a00 	vldr	s15, [r3]
 800d5e8:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800d748 <turn_dir+0x1a0>
 800d5ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d5f0:	4b54      	ldr	r3, [pc, #336]	; (800d744 <turn_dir+0x19c>)
 800d5f2:	edc3 7a00 	vstr	s15, [r3]
//			if(t_pat == 0xff) target_degree_z += 90.5;			//a目標角度+左90度
			if(t_pat == 0xff) target_degree_z += 90.3;			//a目標角度+左90度
 800d5f6:	79fb      	ldrb	r3, [r7, #7]
 800d5f8:	2bff      	cmp	r3, #255	; 0xff
 800d5fa:	d112      	bne.n	800d622 <turn_dir+0x7a>
 800d5fc:	4b51      	ldr	r3, [pc, #324]	; (800d744 <turn_dir+0x19c>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4618      	mov	r0, r3
 800d602:	f7f2 ff99 	bl	8000538 <__aeabi_f2d>
 800d606:	a34c      	add	r3, pc, #304	; (adr r3, 800d738 <turn_dir+0x190>)
 800d608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60c:	f7f2 fe36 	bl	800027c <__adddf3>
 800d610:	4603      	mov	r3, r0
 800d612:	460c      	mov	r4, r1
 800d614:	4618      	mov	r0, r3
 800d616:	4621      	mov	r1, r4
 800d618:	f7f3 fabe 	bl	8000b98 <__aeabi_d2f>
 800d61c:	4602      	mov	r2, r0
 800d61e:	4b49      	ldr	r3, [pc, #292]	; (800d744 <turn_dir+0x19c>)
 800d620:	601a      	str	r2, [r3, #0]
			if(t_pat == 0x02) target_degree_z -= 181;			//a目標角度+右180度
 800d622:	79fb      	ldrb	r3, [r7, #7]
 800d624:	2b02      	cmp	r3, #2
 800d626:	f040 8081 	bne.w	800d72c <turn_dir+0x184>
 800d62a:	4b46      	ldr	r3, [pc, #280]	; (800d744 <turn_dir+0x19c>)
 800d62c:	edd3 7a00 	vldr	s15, [r3]
 800d630:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800d74c <turn_dir+0x1a4>
 800d634:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d638:	4b42      	ldr	r3, [pc, #264]	; (800d744 <turn_dir+0x19c>)
 800d63a:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
		}
	}
}
 800d63e:	e075      	b.n	800d72c <turn_dir+0x184>
		mouse.dir = (mouse.dir + t_pat) & 0x07;					//a指定された分mouse.dirを回転させる
 800d640:	4b3f      	ldr	r3, [pc, #252]	; (800d740 <turn_dir+0x198>)
 800d642:	789b      	ldrb	r3, [r3, #2]
 800d644:	b2da      	uxtb	r2, r3
 800d646:	79fb      	ldrb	r3, [r7, #7]
 800d648:	4413      	add	r3, r2
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	f003 0307 	and.w	r3, r3, #7
 800d650:	b2da      	uxtb	r2, r3
 800d652:	4b3b      	ldr	r3, [pc, #236]	; (800d740 <turn_dir+0x198>)
 800d654:	709a      	strb	r2, [r3, #2]
		if(t_mode == 3){
 800d656:	79bb      	ldrb	r3, [r7, #6]
 800d658:	2b03      	cmp	r3, #3
 800d65a:	d167      	bne.n	800d72c <turn_dir+0x184>
			if(t_pat == 0x01) target_degree_z -= 45.25;			//a目標角度+右90度
 800d65c:	79fb      	ldrb	r3, [r7, #7]
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d109      	bne.n	800d676 <turn_dir+0xce>
 800d662:	4b38      	ldr	r3, [pc, #224]	; (800d744 <turn_dir+0x19c>)
 800d664:	edd3 7a00 	vldr	s15, [r3]
 800d668:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800d750 <turn_dir+0x1a8>
 800d66c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d670:	4b34      	ldr	r3, [pc, #208]	; (800d744 <turn_dir+0x19c>)
 800d672:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 90.5;			//a目標角度+左90度
 800d676:	79fb      	ldrb	r3, [r7, #7]
 800d678:	2b02      	cmp	r3, #2
 800d67a:	d109      	bne.n	800d690 <turn_dir+0xe8>
 800d67c:	4b31      	ldr	r3, [pc, #196]	; (800d744 <turn_dir+0x19c>)
 800d67e:	edd3 7a00 	vldr	s15, [r3]
 800d682:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800d748 <turn_dir+0x1a0>
 800d686:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d68a:	4b2e      	ldr	r3, [pc, #184]	; (800d744 <turn_dir+0x19c>)
 800d68c:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x03) target_degree_z -= 135.75;		//a目標角度+右180度
 800d690:	79fb      	ldrb	r3, [r7, #7]
 800d692:	2b03      	cmp	r3, #3
 800d694:	d109      	bne.n	800d6aa <turn_dir+0x102>
 800d696:	4b2b      	ldr	r3, [pc, #172]	; (800d744 <turn_dir+0x19c>)
 800d698:	edd3 7a00 	vldr	s15, [r3]
 800d69c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800d754 <turn_dir+0x1ac>
 800d6a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d6a4:	4b27      	ldr	r3, [pc, #156]	; (800d744 <turn_dir+0x19c>)
 800d6a6:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x04) target_degree_z -= 181;			//a目標角度+右180度
 800d6aa:	79fb      	ldrb	r3, [r7, #7]
 800d6ac:	2b04      	cmp	r3, #4
 800d6ae:	d109      	bne.n	800d6c4 <turn_dir+0x11c>
 800d6b0:	4b24      	ldr	r3, [pc, #144]	; (800d744 <turn_dir+0x19c>)
 800d6b2:	edd3 7a00 	vldr	s15, [r3]
 800d6b6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800d74c <turn_dir+0x1a4>
 800d6ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d6be:	4b21      	ldr	r3, [pc, #132]	; (800d744 <turn_dir+0x19c>)
 800d6c0:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 45.25;			//a目標角度+右90度
 800d6c4:	79fb      	ldrb	r3, [r7, #7]
 800d6c6:	2bff      	cmp	r3, #255	; 0xff
 800d6c8:	d109      	bne.n	800d6de <turn_dir+0x136>
 800d6ca:	4b1e      	ldr	r3, [pc, #120]	; (800d744 <turn_dir+0x19c>)
 800d6cc:	edd3 7a00 	vldr	s15, [r3]
 800d6d0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d750 <turn_dir+0x1a8>
 800d6d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d6d8:	4b1a      	ldr	r3, [pc, #104]	; (800d744 <turn_dir+0x19c>)
 800d6da:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
 800d6de:	79fb      	ldrb	r3, [r7, #7]
 800d6e0:	2bfe      	cmp	r3, #254	; 0xfe
 800d6e2:	d109      	bne.n	800d6f8 <turn_dir+0x150>
 800d6e4:	4b17      	ldr	r3, [pc, #92]	; (800d744 <turn_dir+0x19c>)
 800d6e6:	edd3 7a00 	vldr	s15, [r3]
 800d6ea:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800d748 <turn_dir+0x1a0>
 800d6ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d6f2:	4b14      	ldr	r3, [pc, #80]	; (800d744 <turn_dir+0x19c>)
 800d6f4:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
 800d6f8:	79fb      	ldrb	r3, [r7, #7]
 800d6fa:	2bfd      	cmp	r3, #253	; 0xfd
 800d6fc:	d109      	bne.n	800d712 <turn_dir+0x16a>
 800d6fe:	4b11      	ldr	r3, [pc, #68]	; (800d744 <turn_dir+0x19c>)
 800d700:	edd3 7a00 	vldr	s15, [r3]
 800d704:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800d754 <turn_dir+0x1ac>
 800d708:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d70c:	4b0d      	ldr	r3, [pc, #52]	; (800d744 <turn_dir+0x19c>)
 800d70e:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
 800d712:	79fb      	ldrb	r3, [r7, #7]
 800d714:	2bfc      	cmp	r3, #252	; 0xfc
 800d716:	d109      	bne.n	800d72c <turn_dir+0x184>
 800d718:	4b0a      	ldr	r3, [pc, #40]	; (800d744 <turn_dir+0x19c>)
 800d71a:	edd3 7a00 	vldr	s15, [r3]
 800d71e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800d74c <turn_dir+0x1a4>
 800d722:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d726:	4b07      	ldr	r3, [pc, #28]	; (800d744 <turn_dir+0x19c>)
 800d728:	edc3 7a00 	vstr	s15, [r3]
}
 800d72c:	bf00      	nop
 800d72e:	370c      	adds	r7, #12
 800d730:	46bd      	mov	sp, r7
 800d732:	bd90      	pop	{r4, r7, pc}
 800d734:	f3af 8000 	nop.w
 800d738:	33333333 	.word	0x33333333
 800d73c:	40569333 	.word	0x40569333
 800d740:	20000c54 	.word	0x20000c54
 800d744:	20000c40 	.word	0x20000c40
 800d748:	42b50000 	.word	0x42b50000
 800d74c:	43350000 	.word	0x43350000
 800d750:	42350000 	.word	0x42350000
 800d754:	4307c000 	.word	0x4307c000

0800d758 <make_smap>:
//make_smap
//a歩数マップを作成する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 800d758:	b490      	push	{r4, r7}
 800d75a:	b08c      	sub	sp, #48	; 0x30
 800d75c:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数
	uint8_t m_temp_sample[16];

	//====a歩数マップのクリア====
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800d75e:	2300      	movs	r3, #0
 800d760:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800d764:	e01c      	b.n	800d7a0 <make_smap+0x48>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800d766:	2300      	movs	r3, #0
 800d768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d76c:	e00f      	b.n	800d78e <make_smap+0x36>
			smap[y][x] = 0x03e7;							//a未記入部分は歩数最大とする
 800d76e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d776:	499c      	ldr	r1, [pc, #624]	; (800d9e8 <make_smap+0x290>)
 800d778:	0112      	lsls	r2, r2, #4
 800d77a:	4413      	add	r3, r2
 800d77c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d780:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800d784:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d788:	3301      	adds	r3, #1
 800d78a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d78e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d792:	2b0f      	cmp	r3, #15
 800d794:	d9eb      	bls.n	800d76e <make_smap+0x16>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800d796:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d79a:	3301      	adds	r3, #1
 800d79c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800d7a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d7a4:	2b0f      	cmp	r3, #15
 800d7a6:	d9de      	bls.n	800d766 <make_smap+0xe>
		}
	}

	//====aゴール座標を0にする====
	m_step = 0;												//a歩数カウンタを0にする
 800d7a8:	4b90      	ldr	r3, [pc, #576]	; (800d9ec <make_smap+0x294>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	801a      	strh	r2, [r3, #0]
	smap[goal_y][goal_x] = 0;
 800d7ae:	4b90      	ldr	r3, [pc, #576]	; (800d9f0 <make_smap+0x298>)
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	4b8f      	ldr	r3, [pc, #572]	; (800d9f4 <make_smap+0x29c>)
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	4a8b      	ldr	r2, [pc, #556]	; (800d9e8 <make_smap+0x290>)
 800d7bc:	0103      	lsls	r3, r0, #4
 800d7be:	440b      	add	r3, r1
 800d7c0:	2100      	movs	r1, #0
 800d7c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====a歩数カウンタの重みづけ====
	int straight = 1;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	61bb      	str	r3, [r7, #24]
	int turn = 10;
 800d7ca:	230a      	movs	r3, #10
 800d7cc:	617b      	str	r3, [r7, #20]

	//====a自分の座標にたどり着くまでループ====
	do{
		//----aマップ全域を捜索----
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800d7d4:	e2d1      	b.n	800dd7a <make_smap+0x622>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d7dc:	e2c3      	b.n	800dd66 <make_smap+0x60e>
				//----a現在最大の歩数を発見したとき----
				if(smap[y][x] == m_step){					//a歩数カウンタm_stepの値が現在最大の歩数
 800d7de:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d7e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7e6:	4980      	ldr	r1, [pc, #512]	; (800d9e8 <make_smap+0x290>)
 800d7e8:	0112      	lsls	r2, r2, #4
 800d7ea:	4413      	add	r3, r2
 800d7ec:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800d7f0:	4b7e      	ldr	r3, [pc, #504]	; (800d9ec <make_smap+0x294>)
 800d7f2:	881b      	ldrh	r3, [r3, #0]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	f040 82b1 	bne.w	800dd5c <make_smap+0x604>
					uint8_t m_temp = map[y][x];				//map配列からマップデータを取り出す
 800d7fa:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d7fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d802:	497d      	ldr	r1, [pc, #500]	; (800d9f8 <make_smap+0x2a0>)
 800d804:	0112      	lsls	r2, r2, #4
 800d806:	440a      	add	r2, r1
 800d808:	4413      	add	r3, r2
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(MF.FLAG.SCND){						//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800d810:	4b7a      	ldr	r3, [pc, #488]	; (800d9fc <make_smap+0x2a4>)
 800d812:	881b      	ldrh	r3, [r3, #0]
 800d814:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d818:	b2db      	uxtb	r3, r3
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d004      	beq.n	800d828 <make_smap+0xd0>
						m_temp >>= 4;						//a上位4bitを使うので4bit分右にシフトさせる
 800d81e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d822:	091b      	lsrs	r3, r3, #4
 800d824:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					}
					//----a北壁についての処理----
					if(!(m_temp & 0x08) && y != 15){		//a北壁がなく現在最北端でないとき
 800d828:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d82c:	f003 0308 	and.w	r3, r3, #8
 800d830:	2b00      	cmp	r3, #0
 800d832:	f040 809c 	bne.w	800d96e <make_smap+0x216>
 800d836:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d83a:	2b0f      	cmp	r3, #15
 800d83c:	f000 8097 	beq.w	800d96e <make_smap+0x216>
						if(smap[y+1][x] == 0x03e7){			//a北側が未記入なら
 800d840:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d844:	1c5a      	adds	r2, r3, #1
 800d846:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d84a:	4967      	ldr	r1, [pc, #412]	; (800d9e8 <make_smap+0x290>)
 800d84c:	0112      	lsls	r2, r2, #4
 800d84e:	4413      	add	r3, r2
 800d850:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d854:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d858:	4293      	cmp	r3, r2
 800d85a:	f040 8088 	bne.w	800d96e <make_smap+0x216>
							smap[y+1][x] = smap[y][x] + turn;		//a次の歩数を書き込む
 800d85e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d866:	4960      	ldr	r1, [pc, #384]	; (800d9e8 <make_smap+0x290>)
 800d868:	0112      	lsls	r2, r2, #4
 800d86a:	4413      	add	r3, r2
 800d86c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	b299      	uxth	r1, r3
 800d874:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d878:	1c5a      	adds	r2, r3, #1
 800d87a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d87e:	4401      	add	r1, r0
 800d880:	b288      	uxth	r0, r1
 800d882:	4959      	ldr	r1, [pc, #356]	; (800d9e8 <make_smap+0x290>)
 800d884:	0112      	lsls	r2, r2, #4
 800d886:	4413      	add	r3, r2
 800d888:	4602      	mov	r2, r0
 800d88a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800d88e:	4b5b      	ldr	r3, [pc, #364]	; (800d9fc <make_smap+0x2a4>)
 800d890:	881b      	ldrh	r3, [r3, #0]
 800d892:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800d896:	b2db      	uxtb	r3, r3
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d068      	beq.n	800d96e <make_smap+0x216>
								//----a直線優先処理----
								for (int k = 1; k < 16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800d89c:	2301      	movs	r3, #1
 800d89e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d8a0:	e05e      	b.n	800d960 <make_smap+0x208>
									m_temp_sample[k] = map[y + k][x];				//map配列からマップデータを取り出す
 800d8a2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a8:	441a      	add	r2, r3
 800d8aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8ae:	4952      	ldr	r1, [pc, #328]	; (800d9f8 <make_smap+0x2a0>)
 800d8b0:	0112      	lsls	r2, r2, #4
 800d8b2:	440a      	add	r2, r1
 800d8b4:	4413      	add	r3, r2
 800d8b6:	7819      	ldrb	r1, [r3, #0]
 800d8b8:	1d3a      	adds	r2, r7, #4
 800d8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8bc:	4413      	add	r3, r2
 800d8be:	460a      	mov	r2, r1
 800d8c0:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800d8c2:	4b4e      	ldr	r3, [pc, #312]	; (800d9fc <make_smap+0x2a4>)
 800d8c4:	881b      	ldrh	r3, [r3, #0]
 800d8c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00a      	beq.n	800d8e6 <make_smap+0x18e>
 800d8d0:	1d3a      	adds	r2, r7, #4
 800d8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d4:	4413      	add	r3, r2
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	091b      	lsrs	r3, r3, #4
 800d8da:	b2d9      	uxtb	r1, r3
 800d8dc:	1d3a      	adds	r2, r7, #4
 800d8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e0:	4413      	add	r3, r2
 800d8e2:	460a      	mov	r2, r1
 800d8e4:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x08) && (y + k) != 0x0f) {		//a北壁がなく現在最北端でないとき
 800d8e6:	1d3a      	adds	r2, r7, #4
 800d8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ea:	4413      	add	r3, r2
 800d8ec:	781b      	ldrb	r3, [r3, #0]
 800d8ee:	f003 0308 	and.w	r3, r3, #8
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d13b      	bne.n	800d96e <make_smap+0x216>
 800d8f6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fc:	4413      	add	r3, r2
 800d8fe:	2b0f      	cmp	r3, #15
 800d900:	d035      	beq.n	800d96e <make_smap+0x216>
										if (smap[y + k + 1][x] == 0x03e7) {						//a北側が未記入なら
 800d902:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d908:	4413      	add	r3, r2
 800d90a:	1c5a      	adds	r2, r3, #1
 800d90c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d910:	4935      	ldr	r1, [pc, #212]	; (800d9e8 <make_smap+0x290>)
 800d912:	0112      	lsls	r2, r2, #4
 800d914:	4413      	add	r3, r2
 800d916:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d91a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d91e:	4293      	cmp	r3, r2
 800d920:	d11b      	bne.n	800d95a <make_smap+0x202>
											smap[y + k + 1][x] = smap[y + k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800d922:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d928:	441a      	add	r2, r3
 800d92a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d92e:	492e      	ldr	r1, [pc, #184]	; (800d9e8 <make_smap+0x290>)
 800d930:	0112      	lsls	r2, r2, #4
 800d932:	4413      	add	r3, r2
 800d934:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	b299      	uxth	r1, r3
 800d93c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d942:	4413      	add	r3, r2
 800d944:	1c5a      	adds	r2, r3, #1
 800d946:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d94a:	4401      	add	r1, r0
 800d94c:	b288      	uxth	r0, r1
 800d94e:	4926      	ldr	r1, [pc, #152]	; (800d9e8 <make_smap+0x290>)
 800d950:	0112      	lsls	r2, r2, #4
 800d952:	4413      	add	r3, r2
 800d954:	4602      	mov	r2, r0
 800d956:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < 16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800d95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95c:	3301      	adds	r3, #1
 800d95e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d960:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d964:	f1c3 0310 	rsb	r3, r3, #16
 800d968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d96a:	429a      	cmp	r2, r3
 800d96c:	db99      	blt.n	800d8a2 <make_smap+0x14a>
								}
							}
						}
					}
					//----a東壁についての処理----
					if(!(m_temp & 0x04) && x != 15){		//a東壁がなく現在最東端でないとき
 800d96e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d972:	f003 0304 	and.w	r3, r3, #4
 800d976:	2b00      	cmp	r3, #0
 800d978:	f040 80a8 	bne.w	800dacc <make_smap+0x374>
 800d97c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d980:	2b0f      	cmp	r3, #15
 800d982:	f000 80a3 	beq.w	800dacc <make_smap+0x374>
						if(smap[y][x+1] == 0x03e7){			//a東側が未記入なら
 800d986:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d98a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d98e:	3301      	adds	r3, #1
 800d990:	4915      	ldr	r1, [pc, #84]	; (800d9e8 <make_smap+0x290>)
 800d992:	0112      	lsls	r2, r2, #4
 800d994:	4413      	add	r3, r2
 800d996:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d99a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	f040 8094 	bne.w	800dacc <make_smap+0x374>
							smap[y][x+1] = smap[y][x] + turn;	//a次の歩数を書き込む
 800d9a4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d9a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d9ac:	490e      	ldr	r1, [pc, #56]	; (800d9e8 <make_smap+0x290>)
 800d9ae:	0112      	lsls	r2, r2, #4
 800d9b0:	4413      	add	r3, r2
 800d9b2:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	b299      	uxth	r1, r3
 800d9ba:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d9be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	4401      	add	r1, r0
 800d9c6:	b288      	uxth	r0, r1
 800d9c8:	4907      	ldr	r1, [pc, #28]	; (800d9e8 <make_smap+0x290>)
 800d9ca:	0112      	lsls	r2, r2, #4
 800d9cc:	4413      	add	r3, r2
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800d9d4:	4b09      	ldr	r3, [pc, #36]	; (800d9fc <make_smap+0x2a4>)
 800d9d6:	881b      	ldrh	r3, [r3, #0]
 800d9d8:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d074      	beq.n	800dacc <make_smap+0x374>
								//----a直線優先処理----
								for (int k = 1; k < 16 - x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	627b      	str	r3, [r7, #36]	; 0x24
 800d9e6:	e06a      	b.n	800dabe <make_smap+0x366>
 800d9e8:	20000da8 	.word	0x20000da8
 800d9ec:	20000386 	.word	0x20000386
 800d9f0:	20000b8c 	.word	0x20000b8c
 800d9f4:	20000bf1 	.word	0x20000bf1
 800d9f8:	200001e4 	.word	0x200001e4
 800d9fc:	20000fac 	.word	0x20000fac
									m_temp_sample[k] = map[y][x + k];				//map配列からマップデータを取り出す
 800da00:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800da04:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800da08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0a:	440b      	add	r3, r1
 800da0c:	499e      	ldr	r1, [pc, #632]	; (800dc88 <make_smap+0x530>)
 800da0e:	0112      	lsls	r2, r2, #4
 800da10:	440a      	add	r2, r1
 800da12:	4413      	add	r3, r2
 800da14:	7819      	ldrb	r1, [r3, #0]
 800da16:	1d3a      	adds	r2, r7, #4
 800da18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1a:	4413      	add	r3, r2
 800da1c:	460a      	mov	r2, r1
 800da1e:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800da20:	4b9a      	ldr	r3, [pc, #616]	; (800dc8c <make_smap+0x534>)
 800da22:	881b      	ldrh	r3, [r3, #0]
 800da24:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00a      	beq.n	800da44 <make_smap+0x2ec>
 800da2e:	1d3a      	adds	r2, r7, #4
 800da30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da32:	4413      	add	r3, r2
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	091b      	lsrs	r3, r3, #4
 800da38:	b2d9      	uxtb	r1, r3
 800da3a:	1d3a      	adds	r2, r7, #4
 800da3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3e:	4413      	add	r3, r2
 800da40:	460a      	mov	r2, r1
 800da42:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x04) && (x + k) != 0x0f) {		//a東壁がなく現在最東端でないとき
 800da44:	1d3a      	adds	r2, r7, #4
 800da46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da48:	4413      	add	r3, r2
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	f003 0304 	and.w	r3, r3, #4
 800da50:	2b00      	cmp	r3, #0
 800da52:	d13b      	bne.n	800dacc <make_smap+0x374>
 800da54:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800da58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5a:	4413      	add	r3, r2
 800da5c:	2b0f      	cmp	r3, #15
 800da5e:	d035      	beq.n	800dacc <make_smap+0x374>
										if (smap[y][x + k + 1] == 0x03e7) {						//a東側が未記入なら
 800da60:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800da64:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800da68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6a:	440b      	add	r3, r1
 800da6c:	3301      	adds	r3, #1
 800da6e:	4988      	ldr	r1, [pc, #544]	; (800dc90 <make_smap+0x538>)
 800da70:	0112      	lsls	r2, r2, #4
 800da72:	4413      	add	r3, r2
 800da74:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800da78:	f240 32e7 	movw	r2, #999	; 0x3e7
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d11b      	bne.n	800dab8 <make_smap+0x360>
											smap[y][x + k + 1] = smap[y][x + k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800da80:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800da84:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800da88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8a:	440b      	add	r3, r1
 800da8c:	4980      	ldr	r1, [pc, #512]	; (800dc90 <make_smap+0x538>)
 800da8e:	0112      	lsls	r2, r2, #4
 800da90:	4413      	add	r3, r2
 800da92:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	b299      	uxth	r1, r3
 800da9a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800da9e:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800daa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa4:	4423      	add	r3, r4
 800daa6:	3301      	adds	r3, #1
 800daa8:	4401      	add	r1, r0
 800daaa:	b288      	uxth	r0, r1
 800daac:	4978      	ldr	r1, [pc, #480]	; (800dc90 <make_smap+0x538>)
 800daae:	0112      	lsls	r2, r2, #4
 800dab0:	4413      	add	r3, r2
 800dab2:	4602      	mov	r2, r0
 800dab4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < 16 - x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800dab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daba:	3301      	adds	r3, #1
 800dabc:	627b      	str	r3, [r7, #36]	; 0x24
 800dabe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dac2:	f1c3 0310 	rsb	r3, r3, #16
 800dac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dac8:	429a      	cmp	r2, r3
 800daca:	db99      	blt.n	800da00 <make_smap+0x2a8>
								}
							}
						}
					}
					//----a南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//a南壁がなく現在最南端でないとき
 800dacc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dad0:	f003 0302 	and.w	r3, r3, #2
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f040 809a 	bne.w	800dc0e <make_smap+0x4b6>
 800dada:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dade:	2b00      	cmp	r3, #0
 800dae0:	f000 8095 	beq.w	800dc0e <make_smap+0x4b6>
						if(smap[y-1][x] == 0x03e7){			//a南側が未記入なら
 800dae4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dae8:	1e5a      	subs	r2, r3, #1
 800daea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800daee:	4968      	ldr	r1, [pc, #416]	; (800dc90 <make_smap+0x538>)
 800daf0:	0112      	lsls	r2, r2, #4
 800daf2:	4413      	add	r3, r2
 800daf4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800daf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800dafc:	4293      	cmp	r3, r2
 800dafe:	f040 8086 	bne.w	800dc0e <make_smap+0x4b6>
							smap[y-1][x] = smap[y][x] + turn;	//a次の歩数を書き込む
 800db02:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800db06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db0a:	4961      	ldr	r1, [pc, #388]	; (800dc90 <make_smap+0x538>)
 800db0c:	0112      	lsls	r2, r2, #4
 800db0e:	4413      	add	r3, r2
 800db10:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	b299      	uxth	r1, r3
 800db18:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800db1c:	1e5a      	subs	r2, r3, #1
 800db1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db22:	4401      	add	r1, r0
 800db24:	b288      	uxth	r0, r1
 800db26:	495a      	ldr	r1, [pc, #360]	; (800dc90 <make_smap+0x538>)
 800db28:	0112      	lsls	r2, r2, #4
 800db2a:	4413      	add	r3, r2
 800db2c:	4602      	mov	r2, r0
 800db2e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800db32:	4b56      	ldr	r3, [pc, #344]	; (800dc8c <make_smap+0x534>)
 800db34:	881b      	ldrh	r3, [r3, #0]
 800db36:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800db3a:	b2db      	uxtb	r3, r3
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d066      	beq.n	800dc0e <make_smap+0x4b6>
								//----a直線優先処理----
								for (int k = 1; k < y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800db40:	2301      	movs	r3, #1
 800db42:	623b      	str	r3, [r7, #32]
 800db44:	e05e      	b.n	800dc04 <make_smap+0x4ac>
									m_temp_sample[k] = map[y - k][x];				//map配列からマップデータを取り出す
 800db46:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800db4a:	6a3b      	ldr	r3, [r7, #32]
 800db4c:	1ad2      	subs	r2, r2, r3
 800db4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db52:	494d      	ldr	r1, [pc, #308]	; (800dc88 <make_smap+0x530>)
 800db54:	0112      	lsls	r2, r2, #4
 800db56:	440a      	add	r2, r1
 800db58:	4413      	add	r3, r2
 800db5a:	7819      	ldrb	r1, [r3, #0]
 800db5c:	1d3a      	adds	r2, r7, #4
 800db5e:	6a3b      	ldr	r3, [r7, #32]
 800db60:	4413      	add	r3, r2
 800db62:	460a      	mov	r2, r1
 800db64:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800db66:	4b49      	ldr	r3, [pc, #292]	; (800dc8c <make_smap+0x534>)
 800db68:	881b      	ldrh	r3, [r3, #0]
 800db6a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800db6e:	b2db      	uxtb	r3, r3
 800db70:	2b00      	cmp	r3, #0
 800db72:	d00a      	beq.n	800db8a <make_smap+0x432>
 800db74:	1d3a      	adds	r2, r7, #4
 800db76:	6a3b      	ldr	r3, [r7, #32]
 800db78:	4413      	add	r3, r2
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	091b      	lsrs	r3, r3, #4
 800db7e:	b2d9      	uxtb	r1, r3
 800db80:	1d3a      	adds	r2, r7, #4
 800db82:	6a3b      	ldr	r3, [r7, #32]
 800db84:	4413      	add	r3, r2
 800db86:	460a      	mov	r2, r1
 800db88:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x02) && (y - k) != 0x0f) {		//a南壁がなく現在最南端でないとき
 800db8a:	1d3a      	adds	r2, r7, #4
 800db8c:	6a3b      	ldr	r3, [r7, #32]
 800db8e:	4413      	add	r3, r2
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	f003 0302 	and.w	r3, r3, #2
 800db96:	2b00      	cmp	r3, #0
 800db98:	d139      	bne.n	800dc0e <make_smap+0x4b6>
 800db9a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800db9e:	6a3b      	ldr	r3, [r7, #32]
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	2b0f      	cmp	r3, #15
 800dba4:	d033      	beq.n	800dc0e <make_smap+0x4b6>
										if (smap[y - k - 1][x] == 0x03e7) {						//a南側が未記入なら
 800dba6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800dbaa:	6a3b      	ldr	r3, [r7, #32]
 800dbac:	1ad3      	subs	r3, r2, r3
 800dbae:	1e5a      	subs	r2, r3, #1
 800dbb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dbb4:	4936      	ldr	r1, [pc, #216]	; (800dc90 <make_smap+0x538>)
 800dbb6:	0112      	lsls	r2, r2, #4
 800dbb8:	4413      	add	r3, r2
 800dbba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800dbbe:	f240 32e7 	movw	r2, #999	; 0x3e7
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d11b      	bne.n	800dbfe <make_smap+0x4a6>
											smap[y - k - 1][x] = smap[y - k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800dbc6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800dbca:	6a3b      	ldr	r3, [r7, #32]
 800dbcc:	1ad2      	subs	r2, r2, r3
 800dbce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dbd2:	492f      	ldr	r1, [pc, #188]	; (800dc90 <make_smap+0x538>)
 800dbd4:	0112      	lsls	r2, r2, #4
 800dbd6:	4413      	add	r3, r2
 800dbd8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800dbdc:	69bb      	ldr	r3, [r7, #24]
 800dbde:	b299      	uxth	r1, r3
 800dbe0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800dbe4:	6a3b      	ldr	r3, [r7, #32]
 800dbe6:	1ad3      	subs	r3, r2, r3
 800dbe8:	1e5a      	subs	r2, r3, #1
 800dbea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dbee:	4401      	add	r1, r0
 800dbf0:	b288      	uxth	r0, r1
 800dbf2:	4927      	ldr	r1, [pc, #156]	; (800dc90 <make_smap+0x538>)
 800dbf4:	0112      	lsls	r2, r2, #4
 800dbf6:	4413      	add	r3, r2
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800dbfe:	6a3b      	ldr	r3, [r7, #32]
 800dc00:	3301      	adds	r3, #1
 800dc02:	623b      	str	r3, [r7, #32]
 800dc04:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dc08:	6a3a      	ldr	r2, [r7, #32]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	db9b      	blt.n	800db46 <make_smap+0x3ee>
								}
							}
						}
					}
					//----a西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//a西壁がなく現在最西端でないとき
 800dc0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dc12:	f003 0301 	and.w	r3, r3, #1
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f040 80a0 	bne.w	800dd5c <make_smap+0x604>
 800dc1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	f000 809b 	beq.w	800dd5c <make_smap+0x604>
						if(smap[y][x-1] == 0x03e7){			//a西側が未記入なら
 800dc26:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800dc2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc2e:	3b01      	subs	r3, #1
 800dc30:	4917      	ldr	r1, [pc, #92]	; (800dc90 <make_smap+0x538>)
 800dc32:	0112      	lsls	r2, r2, #4
 800dc34:	4413      	add	r3, r2
 800dc36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800dc3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	f040 808c 	bne.w	800dd5c <make_smap+0x604>
							smap[y][x-1] = smap[y][x] + turn;	//a次の歩数を書き込む
 800dc44:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800dc48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc4c:	4910      	ldr	r1, [pc, #64]	; (800dc90 <make_smap+0x538>)
 800dc4e:	0112      	lsls	r2, r2, #4
 800dc50:	4413      	add	r3, r2
 800dc52:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	b299      	uxth	r1, r3
 800dc5a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800dc5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc62:	3b01      	subs	r3, #1
 800dc64:	4401      	add	r1, r0
 800dc66:	b288      	uxth	r0, r1
 800dc68:	4909      	ldr	r1, [pc, #36]	; (800dc90 <make_smap+0x538>)
 800dc6a:	0112      	lsls	r2, r2, #4
 800dc6c:	4413      	add	r3, r2
 800dc6e:	4602      	mov	r2, r0
 800dc70:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800dc74:	4b05      	ldr	r3, [pc, #20]	; (800dc8c <make_smap+0x534>)
 800dc76:	881b      	ldrh	r3, [r3, #0]
 800dc78:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d06c      	beq.n	800dd5c <make_smap+0x604>
								//----a直線優先処理----
								for (int k = 1; k < x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800dc82:	2301      	movs	r3, #1
 800dc84:	61fb      	str	r3, [r7, #28]
 800dc86:	e064      	b.n	800dd52 <make_smap+0x5fa>
 800dc88:	200001e4 	.word	0x200001e4
 800dc8c:	20000fac 	.word	0x20000fac
 800dc90:	20000da8 	.word	0x20000da8
									m_temp_sample[k] = map[y][x - k];				//map配列からマップデータを取り出す
 800dc94:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800dc98:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800dc9c:	69fb      	ldr	r3, [r7, #28]
 800dc9e:	1acb      	subs	r3, r1, r3
 800dca0:	4947      	ldr	r1, [pc, #284]	; (800ddc0 <make_smap+0x668>)
 800dca2:	0112      	lsls	r2, r2, #4
 800dca4:	440a      	add	r2, r1
 800dca6:	4413      	add	r3, r2
 800dca8:	7819      	ldrb	r1, [r3, #0]
 800dcaa:	1d3a      	adds	r2, r7, #4
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	4413      	add	r3, r2
 800dcb0:	460a      	mov	r2, r1
 800dcb2:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800dcb4:	4b43      	ldr	r3, [pc, #268]	; (800ddc4 <make_smap+0x66c>)
 800dcb6:	881b      	ldrh	r3, [r3, #0]
 800dcb8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d00a      	beq.n	800dcd8 <make_smap+0x580>
 800dcc2:	1d3a      	adds	r2, r7, #4
 800dcc4:	69fb      	ldr	r3, [r7, #28]
 800dcc6:	4413      	add	r3, r2
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	091b      	lsrs	r3, r3, #4
 800dccc:	b2d9      	uxtb	r1, r3
 800dcce:	1d3a      	adds	r2, r7, #4
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	460a      	mov	r2, r1
 800dcd6:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x01) && (x - k) != 0x0f) {		//a西壁がなく現在最西端でないとき
 800dcd8:	1d3a      	adds	r2, r7, #4
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	4413      	add	r3, r2
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	f003 0301 	and.w	r3, r3, #1
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d139      	bne.n	800dd5c <make_smap+0x604>
 800dce8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	1ad3      	subs	r3, r2, r3
 800dcf0:	2b0f      	cmp	r3, #15
 800dcf2:	d033      	beq.n	800dd5c <make_smap+0x604>
										if (smap[y][x - k - 1] == 0x03e7) {						//a西側が未記入なら
 800dcf4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800dcf8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	1acb      	subs	r3, r1, r3
 800dd00:	3b01      	subs	r3, #1
 800dd02:	4931      	ldr	r1, [pc, #196]	; (800ddc8 <make_smap+0x670>)
 800dd04:	0112      	lsls	r2, r2, #4
 800dd06:	4413      	add	r3, r2
 800dd08:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800dd0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d11b      	bne.n	800dd4c <make_smap+0x5f4>
											smap[y][x - k - 1] = smap[y][x - k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800dd14:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800dd18:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	1acb      	subs	r3, r1, r3
 800dd20:	4929      	ldr	r1, [pc, #164]	; (800ddc8 <make_smap+0x670>)
 800dd22:	0112      	lsls	r2, r2, #4
 800dd24:	4413      	add	r3, r2
 800dd26:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	b299      	uxth	r1, r3
 800dd2e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800dd32:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800dd36:	69fb      	ldr	r3, [r7, #28]
 800dd38:	1ae3      	subs	r3, r4, r3
 800dd3a:	3b01      	subs	r3, #1
 800dd3c:	4401      	add	r1, r0
 800dd3e:	b288      	uxth	r0, r1
 800dd40:	4921      	ldr	r1, [pc, #132]	; (800ddc8 <make_smap+0x670>)
 800dd42:	0112      	lsls	r2, r2, #4
 800dd44:	4413      	add	r3, r2
 800dd46:	4602      	mov	r2, r0
 800dd48:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	3301      	adds	r3, #1
 800dd50:	61fb      	str	r3, [r7, #28]
 800dd52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd56:	69fa      	ldr	r2, [r7, #28]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	db9b      	blt.n	800dc94 <make_smap+0x53c>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800dd5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd60:	3301      	adds	r3, #1
 800dd62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800dd66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd6a:	2b0f      	cmp	r3, #15
 800dd6c:	f67f ad37 	bls.w	800d7de <make_smap+0x86>
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800dd70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dd74:	3301      	adds	r3, #1
 800dd76:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800dd7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800dd7e:	2b0f      	cmp	r3, #15
 800dd80:	f67f ad29 	bls.w	800d7d6 <make_smap+0x7e>
					}
				}
			}
		}
		//====a歩数カウンタのインクリメント====
		m_step++;
 800dd84:	4b11      	ldr	r3, [pc, #68]	; (800ddcc <make_smap+0x674>)
 800dd86:	881b      	ldrh	r3, [r3, #0]
 800dd88:	3301      	adds	r3, #1
 800dd8a:	b29a      	uxth	r2, r3
 800dd8c:	4b0f      	ldr	r3, [pc, #60]	; (800ddcc <make_smap+0x674>)
 800dd8e:	801a      	strh	r2, [r3, #0]
	}while(smap[mouse.y][mouse.x] == 0x03e7);					//a現在座標が未記入ではなくなるまで実行
 800dd90:	4b0f      	ldr	r3, [pc, #60]	; (800ddd0 <make_smap+0x678>)
 800dd92:	785b      	ldrb	r3, [r3, #1]
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	4618      	mov	r0, r3
 800dd98:	4b0d      	ldr	r3, [pc, #52]	; (800ddd0 <make_smap+0x678>)
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	b2db      	uxtb	r3, r3
 800dd9e:	4619      	mov	r1, r3
 800dda0:	4a09      	ldr	r2, [pc, #36]	; (800ddc8 <make_smap+0x670>)
 800dda2:	0103      	lsls	r3, r0, #4
 800dda4:	440b      	add	r3, r1
 800dda6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddaa:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	f43f ad0d 	beq.w	800d7ce <make_smap+0x76>
}
 800ddb4:	bf00      	nop
 800ddb6:	3730      	adds	r7, #48	; 0x30
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bc90      	pop	{r4, r7}
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop
 800ddc0:	200001e4 	.word	0x200001e4
 800ddc4:	20000fac 	.word	0x20000fac
 800ddc8:	20000da8 	.word	0x20000da8
 800ddcc:	20000386 	.word	0x20000386
 800ddd0:	20000c54 	.word	0x20000c54

0800ddd4 <make_route>:
//make_route
//a最短経路を導出する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t x, y;												//X，Y座標
	uint8_t dir_temp =  mouse.dir;								//aマウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 800ddda:	4b9f      	ldr	r3, [pc, #636]	; (800e058 <make_route+0x284>)
 800dddc:	789b      	ldrb	r3, [r3, #2]
 800ddde:	703b      	strb	r3, [r7, #0]

	//====a最短経路を初期化====
	uint16_t i;
	for(i = 0; i < 256; i++){
 800dde0:	2300      	movs	r3, #0
 800dde2:	80bb      	strh	r3, [r7, #4]
 800dde4:	e006      	b.n	800ddf4 <make_route+0x20>
		route[i] = 0xff;										//routeを0xffで初期化
 800dde6:	88bb      	ldrh	r3, [r7, #4]
 800dde8:	4a9c      	ldr	r2, [pc, #624]	; (800e05c <make_route+0x288>)
 800ddea:	21ff      	movs	r1, #255	; 0xff
 800ddec:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 256; i++){
 800ddee:	88bb      	ldrh	r3, [r7, #4]
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	80bb      	strh	r3, [r7, #4]
 800ddf4:	88bb      	ldrh	r3, [r7, #4]
 800ddf6:	2bff      	cmp	r3, #255	; 0xff
 800ddf8:	d9f5      	bls.n	800dde6 <make_route+0x12>
	}


	//====a歩数カウンタをセット====
	uint16_t m_step = smap[mouse.y][mouse.x];					//a現在座標の歩数マップ値を取得
 800ddfa:	4b97      	ldr	r3, [pc, #604]	; (800e058 <make_route+0x284>)
 800ddfc:	785b      	ldrb	r3, [r3, #1]
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	4618      	mov	r0, r3
 800de02:	4b95      	ldr	r3, [pc, #596]	; (800e058 <make_route+0x284>)
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	b2db      	uxtb	r3, r3
 800de08:	4619      	mov	r1, r3
 800de0a:	4a95      	ldr	r2, [pc, #596]	; (800e060 <make_route+0x28c>)
 800de0c:	0103      	lsls	r3, r0, #4
 800de0e:	440b      	add	r3, r1
 800de10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de14:	807b      	strh	r3, [r7, #2]

	//====x, yに現在座標を書き込み====
	x = mouse.x;
 800de16:	4b90      	ldr	r3, [pc, #576]	; (800e058 <make_route+0x284>)
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	71fb      	strb	r3, [r7, #7]
	y = mouse.y;
 800de1c:	4b8e      	ldr	r3, [pc, #568]	; (800e058 <make_route+0x284>)
 800de1e:	785b      	ldrb	r3, [r3, #1]
 800de20:	71bb      	strb	r3, [r7, #6]

	//====a最短経路を導出====
	if(pass_mode == 4){
 800de22:	4b90      	ldr	r3, [pc, #576]	; (800e064 <make_route+0x290>)
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	2b04      	cmp	r3, #4
 800de28:	d105      	bne.n	800de36 <make_route+0x62>
		route[0] = 0x77;
 800de2a:	4b8c      	ldr	r3, [pc, #560]	; (800e05c <make_route+0x288>)
 800de2c:	2277      	movs	r2, #119	; 0x77
 800de2e:	701a      	strb	r2, [r3, #0]
		i = 1;
 800de30:	2301      	movs	r3, #1
 800de32:	80bb      	strh	r3, [r7, #4]
 800de34:	e001      	b.n	800de3a <make_route+0x66>
	}else{
		i = 0;
 800de36:	2300      	movs	r3, #0
 800de38:	80bb      	strh	r3, [r7, #4]
	}

	do{
		uint8_t m_temp = map[y][x];								//a比較用マップ情報の格納
 800de3a:	79ba      	ldrb	r2, [r7, #6]
 800de3c:	79fb      	ldrb	r3, [r7, #7]
 800de3e:	498a      	ldr	r1, [pc, #552]	; (800e068 <make_route+0x294>)
 800de40:	0112      	lsls	r2, r2, #4
 800de42:	440a      	add	r2, r1
 800de44:	4413      	add	r3, r2
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	707b      	strb	r3, [r7, #1]
		if(MF.FLAG.SCND){										//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800de4a:	4b88      	ldr	r3, [pc, #544]	; (800e06c <make_route+0x298>)
 800de4c:	881b      	ldrh	r3, [r3, #0]
 800de4e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800de52:	b2db      	uxtb	r3, r3
 800de54:	2b00      	cmp	r3, #0
 800de56:	d002      	beq.n	800de5e <make_route+0x8a>
			m_temp >>= 4;										//a上位4bitを使うので4bit分右にシフトさせる
 800de58:	787b      	ldrb	r3, [r7, #1]
 800de5a:	091b      	lsrs	r3, r3, #4
 800de5c:	707b      	strb	r3, [r7, #1]
		}
		//----a北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//a北側に壁が無く、現在地より小さい歩数マップ値であれば
 800de5e:	787b      	ldrb	r3, [r7, #1]
 800de60:	f003 0308 	and.w	r3, r3, #8
 800de64:	2b00      	cmp	r3, #0
 800de66:	d122      	bne.n	800deae <make_route+0xda>
 800de68:	79bb      	ldrb	r3, [r7, #6]
 800de6a:	1c5a      	adds	r2, r3, #1
 800de6c:	79fb      	ldrb	r3, [r7, #7]
 800de6e:	497c      	ldr	r1, [pc, #496]	; (800e060 <make_route+0x28c>)
 800de70:	0112      	lsls	r2, r2, #4
 800de72:	4413      	add	r3, r2
 800de74:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800de78:	887a      	ldrh	r2, [r7, #2]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d917      	bls.n	800deae <make_route+0xda>
			route[i] = (0x00 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800de7e:	4b76      	ldr	r3, [pc, #472]	; (800e058 <make_route+0x284>)
 800de80:	789b      	ldrb	r3, [r3, #2]
 800de82:	b2db      	uxtb	r3, r3
 800de84:	425b      	negs	r3, r3
 800de86:	b2da      	uxtb	r2, r3
 800de88:	88bb      	ldrh	r3, [r7, #4]
 800de8a:	f002 0203 	and.w	r2, r2, #3
 800de8e:	b2d1      	uxtb	r1, r2
 800de90:	4a72      	ldr	r2, [pc, #456]	; (800e05c <make_route+0x288>)
 800de92:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//a最大歩数マップ値を更新
 800de94:	79bb      	ldrb	r3, [r7, #6]
 800de96:	1c5a      	adds	r2, r3, #1
 800de98:	79fb      	ldrb	r3, [r7, #7]
 800de9a:	4971      	ldr	r1, [pc, #452]	; (800e060 <make_route+0x28c>)
 800de9c:	0112      	lsls	r2, r2, #4
 800de9e:	4413      	add	r3, r2
 800dea0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800dea4:	807b      	strh	r3, [r7, #2]
			y++;												//a北に進んだのでY座標をインクリメント
 800dea6:	79bb      	ldrb	r3, [r7, #6]
 800dea8:	3301      	adds	r3, #1
 800deaa:	71bb      	strb	r3, [r7, #6]
 800deac:	e079      	b.n	800dfa2 <make_route+0x1ce>
		}
		//----a東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//a東側に壁が無く、現在地より小さい歩数マップ値であれば
 800deae:	787b      	ldrb	r3, [r7, #1]
 800deb0:	f003 0304 	and.w	r3, r3, #4
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d123      	bne.n	800df00 <make_route+0x12c>
 800deb8:	79ba      	ldrb	r2, [r7, #6]
 800deba:	79fb      	ldrb	r3, [r7, #7]
 800debc:	3301      	adds	r3, #1
 800debe:	4968      	ldr	r1, [pc, #416]	; (800e060 <make_route+0x28c>)
 800dec0:	0112      	lsls	r2, r2, #4
 800dec2:	4413      	add	r3, r2
 800dec4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800dec8:	887a      	ldrh	r2, [r7, #2]
 800deca:	429a      	cmp	r2, r3
 800decc:	d918      	bls.n	800df00 <make_route+0x12c>
			route[i] = (0x01 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800dece:	4b62      	ldr	r3, [pc, #392]	; (800e058 <make_route+0x284>)
 800ded0:	789b      	ldrb	r3, [r3, #2]
 800ded2:	b2db      	uxtb	r3, r3
 800ded4:	f1c3 0301 	rsb	r3, r3, #1
 800ded8:	b2da      	uxtb	r2, r3
 800deda:	88bb      	ldrh	r3, [r7, #4]
 800dedc:	f002 0203 	and.w	r2, r2, #3
 800dee0:	b2d1      	uxtb	r1, r2
 800dee2:	4a5e      	ldr	r2, [pc, #376]	; (800e05c <make_route+0x288>)
 800dee4:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//a最大歩数マップ値を更新
 800dee6:	79ba      	ldrb	r2, [r7, #6]
 800dee8:	79fb      	ldrb	r3, [r7, #7]
 800deea:	3301      	adds	r3, #1
 800deec:	495c      	ldr	r1, [pc, #368]	; (800e060 <make_route+0x28c>)
 800deee:	0112      	lsls	r2, r2, #4
 800def0:	4413      	add	r3, r2
 800def2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800def6:	807b      	strh	r3, [r7, #2]
			x++;												//a東に進んだのでX座標をインクリメント
 800def8:	79fb      	ldrb	r3, [r7, #7]
 800defa:	3301      	adds	r3, #1
 800defc:	71fb      	strb	r3, [r7, #7]
 800defe:	e050      	b.n	800dfa2 <make_route+0x1ce>
		}
		//----a南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//a南側に壁が無く、現在地より小さい歩数マップ値であれば
 800df00:	787b      	ldrb	r3, [r7, #1]
 800df02:	f003 0302 	and.w	r3, r3, #2
 800df06:	2b00      	cmp	r3, #0
 800df08:	d123      	bne.n	800df52 <make_route+0x17e>
 800df0a:	79bb      	ldrb	r3, [r7, #6]
 800df0c:	1e5a      	subs	r2, r3, #1
 800df0e:	79fb      	ldrb	r3, [r7, #7]
 800df10:	4953      	ldr	r1, [pc, #332]	; (800e060 <make_route+0x28c>)
 800df12:	0112      	lsls	r2, r2, #4
 800df14:	4413      	add	r3, r2
 800df16:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800df1a:	887a      	ldrh	r2, [r7, #2]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d918      	bls.n	800df52 <make_route+0x17e>
			route[i] = (0x02 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800df20:	4b4d      	ldr	r3, [pc, #308]	; (800e058 <make_route+0x284>)
 800df22:	789b      	ldrb	r3, [r3, #2]
 800df24:	b2db      	uxtb	r3, r3
 800df26:	f1c3 0302 	rsb	r3, r3, #2
 800df2a:	b2da      	uxtb	r2, r3
 800df2c:	88bb      	ldrh	r3, [r7, #4]
 800df2e:	f002 0203 	and.w	r2, r2, #3
 800df32:	b2d1      	uxtb	r1, r2
 800df34:	4a49      	ldr	r2, [pc, #292]	; (800e05c <make_route+0x288>)
 800df36:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//a最大歩数マップ値を更新
 800df38:	79bb      	ldrb	r3, [r7, #6]
 800df3a:	1e5a      	subs	r2, r3, #1
 800df3c:	79fb      	ldrb	r3, [r7, #7]
 800df3e:	4948      	ldr	r1, [pc, #288]	; (800e060 <make_route+0x28c>)
 800df40:	0112      	lsls	r2, r2, #4
 800df42:	4413      	add	r3, r2
 800df44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800df48:	807b      	strh	r3, [r7, #2]
			y--;												//a南に進んだのでY座標をデクリメント
 800df4a:	79bb      	ldrb	r3, [r7, #6]
 800df4c:	3b01      	subs	r3, #1
 800df4e:	71bb      	strb	r3, [r7, #6]
 800df50:	e027      	b.n	800dfa2 <make_route+0x1ce>
		}
		//----a西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//a西側に壁が無く、現在地より小さい歩数マップ値であれば
 800df52:	787b      	ldrb	r3, [r7, #1]
 800df54:	f003 0301 	and.w	r3, r3, #1
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d122      	bne.n	800dfa2 <make_route+0x1ce>
 800df5c:	79ba      	ldrb	r2, [r7, #6]
 800df5e:	79fb      	ldrb	r3, [r7, #7]
 800df60:	3b01      	subs	r3, #1
 800df62:	493f      	ldr	r1, [pc, #252]	; (800e060 <make_route+0x28c>)
 800df64:	0112      	lsls	r2, r2, #4
 800df66:	4413      	add	r3, r2
 800df68:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800df6c:	887a      	ldrh	r2, [r7, #2]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d917      	bls.n	800dfa2 <make_route+0x1ce>
			route[i] = (0x03 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800df72:	4b39      	ldr	r3, [pc, #228]	; (800e058 <make_route+0x284>)
 800df74:	789b      	ldrb	r3, [r3, #2]
 800df76:	b2db      	uxtb	r3, r3
 800df78:	f1c3 0303 	rsb	r3, r3, #3
 800df7c:	b2da      	uxtb	r2, r3
 800df7e:	88bb      	ldrh	r3, [r7, #4]
 800df80:	f002 0203 	and.w	r2, r2, #3
 800df84:	b2d1      	uxtb	r1, r2
 800df86:	4a35      	ldr	r2, [pc, #212]	; (800e05c <make_route+0x288>)
 800df88:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//a最大歩数マップ値を更新
 800df8a:	79ba      	ldrb	r2, [r7, #6]
 800df8c:	79fb      	ldrb	r3, [r7, #7]
 800df8e:	3b01      	subs	r3, #1
 800df90:	4933      	ldr	r1, [pc, #204]	; (800e060 <make_route+0x28c>)
 800df92:	0112      	lsls	r2, r2, #4
 800df94:	4413      	add	r3, r2
 800df96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800df9a:	807b      	strh	r3, [r7, #2]
			x--;												//a西に進んだのでX座標をデクリメント
 800df9c:	79fb      	ldrb	r3, [r7, #7]
 800df9e:	3b01      	subs	r3, #1
 800dfa0:	71fb      	strb	r3, [r7, #7]
				y--;												//a南に進んだのでY座標をデクリメント
			}*/

		}
		//----a格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 800dfa2:	88bb      	ldrh	r3, [r7, #4]
 800dfa4:	4a2d      	ldr	r2, [pc, #180]	; (800e05c <make_route+0x288>)
 800dfa6:	5cd3      	ldrb	r3, [r2, r3]
 800dfa8:	2b03      	cmp	r3, #3
 800dfaa:	d83c      	bhi.n	800e026 <make_route+0x252>
 800dfac:	a201      	add	r2, pc, #4	; (adr r2, 800dfb4 <make_route+0x1e0>)
 800dfae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb2:	bf00      	nop
 800dfb4:	0800dfc5 	.word	0x0800dfc5
 800dfb8:	0800dff1 	.word	0x0800dff1
 800dfbc:	0800e003 	.word	0x0800e003
 800dfc0:	0800e015 	.word	0x0800e015
		case 0x00:												//a前進する場合
			if(pass_mode < 3){
 800dfc4:	4b27      	ldr	r3, [pc, #156]	; (800e064 <make_route+0x290>)
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	2b02      	cmp	r3, #2
 800dfca:	d804      	bhi.n	800dfd6 <make_route+0x202>
				route[i] = 0x88;									//a格納データ形式を変更
 800dfcc:	88bb      	ldrh	r3, [r7, #4]
 800dfce:	4a23      	ldr	r2, [pc, #140]	; (800e05c <make_route+0x288>)
 800dfd0:	2188      	movs	r1, #136	; 0x88
 800dfd2:	54d1      	strb	r1, [r2, r3]
			}else{
				route[i] = 0x77;
				route[i+1] = 0x77;
				i++;
			}
			break;
 800dfd4:	e02c      	b.n	800e030 <make_route+0x25c>
				route[i] = 0x77;
 800dfd6:	88bb      	ldrh	r3, [r7, #4]
 800dfd8:	4a20      	ldr	r2, [pc, #128]	; (800e05c <make_route+0x288>)
 800dfda:	2177      	movs	r1, #119	; 0x77
 800dfdc:	54d1      	strb	r1, [r2, r3]
				route[i+1] = 0x77;
 800dfde:	88bb      	ldrh	r3, [r7, #4]
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	4a1e      	ldr	r2, [pc, #120]	; (800e05c <make_route+0x288>)
 800dfe4:	2177      	movs	r1, #119	; 0x77
 800dfe6:	54d1      	strb	r1, [r2, r3]
				i++;
 800dfe8:	88bb      	ldrh	r3, [r7, #4]
 800dfea:	3301      	adds	r3, #1
 800dfec:	80bb      	strh	r3, [r7, #4]
			break;
 800dfee:	e01f      	b.n	800e030 <make_route+0x25c>
		case 0x01:												//a右折する場合
			turn_dir(DIR_TURN_R90, 0);								//a内部情報の方向を90度右回転
 800dff0:	2100      	movs	r1, #0
 800dff2:	2001      	movs	r0, #1
 800dff4:	f7ff fad8 	bl	800d5a8 <turn_dir>
			route[i] = 0x44;									//a格納データ形式を変更
 800dff8:	88bb      	ldrh	r3, [r7, #4]
 800dffa:	4a18      	ldr	r2, [pc, #96]	; (800e05c <make_route+0x288>)
 800dffc:	2144      	movs	r1, #68	; 0x44
 800dffe:	54d1      	strb	r1, [r2, r3]
			break;
 800e000:	e016      	b.n	800e030 <make_route+0x25c>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180, 0);								//a内部情報の方向を180度回転
 800e002:	2100      	movs	r1, #0
 800e004:	2002      	movs	r0, #2
 800e006:	f7ff facf 	bl	800d5a8 <turn_dir>
			route[i] = 0x22;									//a格納データ形式を変更
 800e00a:	88bb      	ldrh	r3, [r7, #4]
 800e00c:	4a13      	ldr	r2, [pc, #76]	; (800e05c <make_route+0x288>)
 800e00e:	2122      	movs	r1, #34	; 0x22
 800e010:	54d1      	strb	r1, [r2, r3]
			break;
 800e012:	e00d      	b.n	800e030 <make_route+0x25c>
		case 0x03:												//a左折する場合
			turn_dir(DIR_TURN_L90, 0);								//a内部情報の方向を90度左回転
 800e014:	2100      	movs	r1, #0
 800e016:	20ff      	movs	r0, #255	; 0xff
 800e018:	f7ff fac6 	bl	800d5a8 <turn_dir>
			route[i] = 0x11;									//a格納データ形式を変更
 800e01c:	88bb      	ldrh	r3, [r7, #4]
 800e01e:	4a0f      	ldr	r2, [pc, #60]	; (800e05c <make_route+0x288>)
 800e020:	2111      	movs	r1, #17
 800e022:	54d1      	strb	r1, [r2, r3]
			break;
 800e024:	e004      	b.n	800e030 <make_route+0x25c>
		default:												//aそれ以外の場合
			route[i] = 0x00;									//a格納データ形式を変更
 800e026:	88bb      	ldrh	r3, [r7, #4]
 800e028:	4a0c      	ldr	r2, [pc, #48]	; (800e05c <make_route+0x288>)
 800e02a:	2100      	movs	r1, #0
 800e02c:	54d1      	strb	r1, [r2, r3]
			break;
 800e02e:	bf00      	nop
		}
		i++;													//aカウンタをインクリメント
 800e030:	88bb      	ldrh	r3, [r7, #4]
 800e032:	3301      	adds	r3, #1
 800e034:	80bb      	strh	r3, [r7, #4]
	}while(smap[y][x] != 0);									//a進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 800e036:	79ba      	ldrb	r2, [r7, #6]
 800e038:	79fb      	ldrb	r3, [r7, #7]
 800e03a:	4909      	ldr	r1, [pc, #36]	; (800e060 <make_route+0x28c>)
 800e03c:	0112      	lsls	r2, r2, #4
 800e03e:	4413      	add	r3, r2
 800e040:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e044:	2b00      	cmp	r3, #0
 800e046:	f47f aef8 	bne.w	800de3a <make_route+0x66>
	mouse.dir = dir_temp;										//dir_tempに退避させた値をmouse.dirにリストア
 800e04a:	4a03      	ldr	r2, [pc, #12]	; (800e058 <make_route+0x284>)
 800e04c:	783b      	ldrb	r3, [r7, #0]
 800e04e:	7093      	strb	r3, [r2, #2]
}
 800e050:	bf00      	nop
 800e052:	3708      	adds	r7, #8
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	20000c54 	.word	0x20000c54
 800e05c:	20000c9c 	.word	0x20000c9c
 800e060:	20000da8 	.word	0x20000da8
 800e064:	2000048f 	.word	0x2000048f
 800e068:	200001e4 	.word	0x200001e4
 800e06c:	20000fac 	.word	0x20000fac

0800e070 <find_pregoal>:
//	未探索壁を含む＆現在座標から最も近いマス(=仮goal)を探す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void find_pregoal()
{
 800e070:	b480      	push	{r7}
 800e072:	b085      	sub	sp, #20
 800e074:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持
	//uint8_t m_temp_sample[16];
	uint8_t break_flag = 0;													//未知壁マスを見つけた時のループ脱出フラグ
 800e076:	2300      	movs	r3, #0
 800e078:	737b      	strb	r3, [r7, #13]

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800e07a:	2300      	movs	r3, #0
 800e07c:	73bb      	strb	r3, [r7, #14]
 800e07e:	e014      	b.n	800e0aa <find_pregoal+0x3a>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800e080:	2300      	movs	r3, #0
 800e082:	73fb      	strb	r3, [r7, #15]
 800e084:	e00b      	b.n	800e09e <find_pregoal+0x2e>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 800e086:	7bba      	ldrb	r2, [r7, #14]
 800e088:	7bfb      	ldrb	r3, [r7, #15]
 800e08a:	499f      	ldr	r1, [pc, #636]	; (800e308 <find_pregoal+0x298>)
 800e08c:	0112      	lsls	r2, r2, #4
 800e08e:	4413      	add	r3, r2
 800e090:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e094:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800e098:	7bfb      	ldrb	r3, [r7, #15]
 800e09a:	3301      	adds	r3, #1
 800e09c:	73fb      	strb	r3, [r7, #15]
 800e09e:	7bfb      	ldrb	r3, [r7, #15]
 800e0a0:	2b0f      	cmp	r3, #15
 800e0a2:	d9f0      	bls.n	800e086 <find_pregoal+0x16>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800e0a4:	7bbb      	ldrb	r3, [r7, #14]
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	73bb      	strb	r3, [r7, #14]
 800e0aa:	7bbb      	ldrb	r3, [r7, #14]
 800e0ac:	2b0f      	cmp	r3, #15
 800e0ae:	d9e7      	bls.n	800e080 <find_pregoal+0x10>
		}
	}

	//====探索完了フラグのクリア====
	allmap_comp_flag = 0;
 800e0b0:	4b96      	ldr	r3, [pc, #600]	; (800e30c <find_pregoal+0x29c>)
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	701a      	strb	r2, [r3, #0]

	//====現在座標を0にする====
	smap[mouse.y][mouse.x] = 0;
 800e0b6:	4b96      	ldr	r3, [pc, #600]	; (800e310 <find_pregoal+0x2a0>)
 800e0b8:	785b      	ldrb	r3, [r3, #1]
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	4618      	mov	r0, r3
 800e0be:	4b94      	ldr	r3, [pc, #592]	; (800e310 <find_pregoal+0x2a0>)
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	4a90      	ldr	r2, [pc, #576]	; (800e308 <find_pregoal+0x298>)
 800e0c8:	0103      	lsls	r3, r0, #4
 800e0ca:	440b      	add	r3, r1
 800e0cc:	2100      	movs	r1, #0
 800e0ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 800e0d2:	4b90      	ldr	r3, [pc, #576]	; (800e314 <find_pregoal+0x2a4>)
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 800e0d8:	2303      	movs	r3, #3
 800e0da:	60bb      	str	r3, [r7, #8]
	int turn = 1;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	73bb      	strb	r3, [r7, #14]
 800e0e4:	e180      	b.n	800e3e8 <find_pregoal+0x378>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	73fb      	strb	r3, [r7, #15]
 800e0ea:	e173      	b.n	800e3d4 <find_pregoal+0x364>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 800e0ec:	7bba      	ldrb	r2, [r7, #14]
 800e0ee:	7bfb      	ldrb	r3, [r7, #15]
 800e0f0:	4985      	ldr	r1, [pc, #532]	; (800e308 <find_pregoal+0x298>)
 800e0f2:	0112      	lsls	r2, r2, #4
 800e0f4:	4413      	add	r3, r2
 800e0f6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800e0fa:	4b86      	ldr	r3, [pc, #536]	; (800e314 <find_pregoal+0x2a4>)
 800e0fc:	881b      	ldrh	r3, [r3, #0]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	f040 8165 	bne.w	800e3ce <find_pregoal+0x35e>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 800e104:	7bba      	ldrb	r2, [r7, #14]
 800e106:	7bfb      	ldrb	r3, [r7, #15]
 800e108:	4983      	ldr	r1, [pc, #524]	; (800e318 <find_pregoal+0x2a8>)
 800e10a:	0112      	lsls	r2, r2, #4
 800e10c:	440a      	add	r2, r1
 800e10e:	4413      	add	r3, r2
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 800e114:	78fb      	ldrb	r3, [r7, #3]
 800e116:	f003 0308 	and.w	r3, r3, #8
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d14d      	bne.n	800e1ba <find_pregoal+0x14a>
 800e11e:	7bbb      	ldrb	r3, [r7, #14]
 800e120:	2b0f      	cmp	r3, #15
 800e122:	d04a      	beq.n	800e1ba <find_pregoal+0x14a>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 800e124:	7bbb      	ldrb	r3, [r7, #14]
 800e126:	1c5a      	adds	r2, r3, #1
 800e128:	7bfb      	ldrb	r3, [r7, #15]
 800e12a:	4977      	ldr	r1, [pc, #476]	; (800e308 <find_pregoal+0x298>)
 800e12c:	0112      	lsls	r2, r2, #4
 800e12e:	4413      	add	r3, r2
 800e130:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e134:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e138:	4293      	cmp	r3, r2
 800e13a:	d13e      	bne.n	800e1ba <find_pregoal+0x14a>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800e13c:	7bba      	ldrb	r2, [r7, #14]
 800e13e:	7bfb      	ldrb	r3, [r7, #15]
 800e140:	4971      	ldr	r1, [pc, #452]	; (800e308 <find_pregoal+0x298>)
 800e142:	0112      	lsls	r2, r2, #4
 800e144:	4413      	add	r3, r2
 800e146:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	b299      	uxth	r1, r3
 800e14e:	7bbb      	ldrb	r3, [r7, #14]
 800e150:	1c5a      	adds	r2, r3, #1
 800e152:	7bfb      	ldrb	r3, [r7, #15]
 800e154:	4401      	add	r1, r0
 800e156:	b288      	uxth	r0, r1
 800e158:	496b      	ldr	r1, [pc, #428]	; (800e308 <find_pregoal+0x298>)
 800e15a:	0112      	lsls	r2, r2, #4
 800e15c:	4413      	add	r3, r2
 800e15e:	4602      	mov	r2, r0
 800e160:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y + 1][x] & 0x0f ) << 4) != (map[y + 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800e164:	7bbb      	ldrb	r3, [r7, #14]
 800e166:	1c5a      	adds	r2, r3, #1
 800e168:	7bfb      	ldrb	r3, [r7, #15]
 800e16a:	496b      	ldr	r1, [pc, #428]	; (800e318 <find_pregoal+0x2a8>)
 800e16c:	0112      	lsls	r2, r2, #4
 800e16e:	440a      	add	r2, r1
 800e170:	4413      	add	r3, r2
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	011b      	lsls	r3, r3, #4
 800e176:	b2da      	uxtb	r2, r3
 800e178:	7bbb      	ldrb	r3, [r7, #14]
 800e17a:	1c59      	adds	r1, r3, #1
 800e17c:	7bfb      	ldrb	r3, [r7, #15]
 800e17e:	4866      	ldr	r0, [pc, #408]	; (800e318 <find_pregoal+0x2a8>)
 800e180:	0109      	lsls	r1, r1, #4
 800e182:	4401      	add	r1, r0
 800e184:	440b      	add	r3, r1
 800e186:	781b      	ldrb	r3, [r3, #0]
 800e188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d014      	beq.n	800e1ba <find_pregoal+0x14a>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800e190:	2301      	movs	r3, #1
 800e192:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y + 1][x];					//仮goalの歩数を記録
 800e194:	7bbb      	ldrb	r3, [r7, #14]
 800e196:	1c5a      	adds	r2, r3, #1
 800e198:	7bfb      	ldrb	r3, [r7, #15]
 800e19a:	495b      	ldr	r1, [pc, #364]	; (800e308 <find_pregoal+0x298>)
 800e19c:	0112      	lsls	r2, r2, #4
 800e19e:	4413      	add	r3, r2
 800e1a0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800e1a4:	4b5d      	ldr	r3, [pc, #372]	; (800e31c <find_pregoal+0x2ac>)
 800e1a6:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 800e1a8:	4a5d      	ldr	r2, [pc, #372]	; (800e320 <find_pregoal+0x2b0>)
 800e1aa:	7bfb      	ldrb	r3, [r7, #15]
 800e1ac:	7013      	strb	r3, [r2, #0]
								pregoal_y = y + 1;							//仮goalの座標を記録
 800e1ae:	7bbb      	ldrb	r3, [r7, #14]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	b2da      	uxtb	r2, r3
 800e1b4:	4b5b      	ldr	r3, [pc, #364]	; (800e324 <find_pregoal+0x2b4>)
 800e1b6:	701a      	strb	r2, [r3, #0]
								break;
 800e1b8:	e110      	b.n	800e3dc <find_pregoal+0x36c>
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 800e1ba:	78fb      	ldrb	r3, [r7, #3]
 800e1bc:	f003 0304 	and.w	r3, r3, #4
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d14d      	bne.n	800e260 <find_pregoal+0x1f0>
 800e1c4:	7bfb      	ldrb	r3, [r7, #15]
 800e1c6:	2b0f      	cmp	r3, #15
 800e1c8:	d04a      	beq.n	800e260 <find_pregoal+0x1f0>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 800e1ca:	7bba      	ldrb	r2, [r7, #14]
 800e1cc:	7bfb      	ldrb	r3, [r7, #15]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	494d      	ldr	r1, [pc, #308]	; (800e308 <find_pregoal+0x298>)
 800e1d2:	0112      	lsls	r2, r2, #4
 800e1d4:	4413      	add	r3, r2
 800e1d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e1da:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d13e      	bne.n	800e260 <find_pregoal+0x1f0>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800e1e2:	7bba      	ldrb	r2, [r7, #14]
 800e1e4:	7bfb      	ldrb	r3, [r7, #15]
 800e1e6:	4948      	ldr	r1, [pc, #288]	; (800e308 <find_pregoal+0x298>)
 800e1e8:	0112      	lsls	r2, r2, #4
 800e1ea:	4413      	add	r3, r2
 800e1ec:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	b299      	uxth	r1, r3
 800e1f4:	7bba      	ldrb	r2, [r7, #14]
 800e1f6:	7bfb      	ldrb	r3, [r7, #15]
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	4401      	add	r1, r0
 800e1fc:	b288      	uxth	r0, r1
 800e1fe:	4942      	ldr	r1, [pc, #264]	; (800e308 <find_pregoal+0x298>)
 800e200:	0112      	lsls	r2, r2, #4
 800e202:	4413      	add	r3, r2
 800e204:	4602      	mov	r2, r0
 800e206:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x + 1] & 0x0f) << 4) != (map[y][x + 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800e20a:	7bba      	ldrb	r2, [r7, #14]
 800e20c:	7bfb      	ldrb	r3, [r7, #15]
 800e20e:	3301      	adds	r3, #1
 800e210:	4941      	ldr	r1, [pc, #260]	; (800e318 <find_pregoal+0x2a8>)
 800e212:	0112      	lsls	r2, r2, #4
 800e214:	440a      	add	r2, r1
 800e216:	4413      	add	r3, r2
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	011b      	lsls	r3, r3, #4
 800e21c:	b2da      	uxtb	r2, r3
 800e21e:	7bb9      	ldrb	r1, [r7, #14]
 800e220:	7bfb      	ldrb	r3, [r7, #15]
 800e222:	3301      	adds	r3, #1
 800e224:	483c      	ldr	r0, [pc, #240]	; (800e318 <find_pregoal+0x2a8>)
 800e226:	0109      	lsls	r1, r1, #4
 800e228:	4401      	add	r1, r0
 800e22a:	440b      	add	r3, r1
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e232:	429a      	cmp	r2, r3
 800e234:	d014      	beq.n	800e260 <find_pregoal+0x1f0>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800e236:	2301      	movs	r3, #1
 800e238:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x + 1];					//仮ゴールの歩数を記録
 800e23a:	7bba      	ldrb	r2, [r7, #14]
 800e23c:	7bfb      	ldrb	r3, [r7, #15]
 800e23e:	3301      	adds	r3, #1
 800e240:	4931      	ldr	r1, [pc, #196]	; (800e308 <find_pregoal+0x298>)
 800e242:	0112      	lsls	r2, r2, #4
 800e244:	4413      	add	r3, r2
 800e246:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800e24a:	4b34      	ldr	r3, [pc, #208]	; (800e31c <find_pregoal+0x2ac>)
 800e24c:	801a      	strh	r2, [r3, #0]
								pregoal_x = x + 1;
 800e24e:	7bfb      	ldrb	r3, [r7, #15]
 800e250:	3301      	adds	r3, #1
 800e252:	b2da      	uxtb	r2, r3
 800e254:	4b32      	ldr	r3, [pc, #200]	; (800e320 <find_pregoal+0x2b0>)
 800e256:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 800e258:	4a32      	ldr	r2, [pc, #200]	; (800e324 <find_pregoal+0x2b4>)
 800e25a:	7bbb      	ldrb	r3, [r7, #14]
 800e25c:	7013      	strb	r3, [r2, #0]
								break;
 800e25e:	e0bd      	b.n	800e3dc <find_pregoal+0x36c>
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 800e260:	78fb      	ldrb	r3, [r7, #3]
 800e262:	f003 0302 	and.w	r3, r3, #2
 800e266:	2b00      	cmp	r3, #0
 800e268:	d15e      	bne.n	800e328 <find_pregoal+0x2b8>
 800e26a:	7bbb      	ldrb	r3, [r7, #14]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d05b      	beq.n	800e328 <find_pregoal+0x2b8>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 800e270:	7bbb      	ldrb	r3, [r7, #14]
 800e272:	1e5a      	subs	r2, r3, #1
 800e274:	7bfb      	ldrb	r3, [r7, #15]
 800e276:	4924      	ldr	r1, [pc, #144]	; (800e308 <find_pregoal+0x298>)
 800e278:	0112      	lsls	r2, r2, #4
 800e27a:	4413      	add	r3, r2
 800e27c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e280:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e284:	4293      	cmp	r3, r2
 800e286:	d14f      	bne.n	800e328 <find_pregoal+0x2b8>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800e288:	7bba      	ldrb	r2, [r7, #14]
 800e28a:	7bfb      	ldrb	r3, [r7, #15]
 800e28c:	491e      	ldr	r1, [pc, #120]	; (800e308 <find_pregoal+0x298>)
 800e28e:	0112      	lsls	r2, r2, #4
 800e290:	4413      	add	r3, r2
 800e292:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	b299      	uxth	r1, r3
 800e29a:	7bbb      	ldrb	r3, [r7, #14]
 800e29c:	1e5a      	subs	r2, r3, #1
 800e29e:	7bfb      	ldrb	r3, [r7, #15]
 800e2a0:	4401      	add	r1, r0
 800e2a2:	b288      	uxth	r0, r1
 800e2a4:	4918      	ldr	r1, [pc, #96]	; (800e308 <find_pregoal+0x298>)
 800e2a6:	0112      	lsls	r2, r2, #4
 800e2a8:	4413      	add	r3, r2
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y - 1][x] & 0x0f) << 4) != (map[y - 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800e2b0:	7bbb      	ldrb	r3, [r7, #14]
 800e2b2:	1e5a      	subs	r2, r3, #1
 800e2b4:	7bfb      	ldrb	r3, [r7, #15]
 800e2b6:	4918      	ldr	r1, [pc, #96]	; (800e318 <find_pregoal+0x2a8>)
 800e2b8:	0112      	lsls	r2, r2, #4
 800e2ba:	440a      	add	r2, r1
 800e2bc:	4413      	add	r3, r2
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	011b      	lsls	r3, r3, #4
 800e2c2:	b2da      	uxtb	r2, r3
 800e2c4:	7bbb      	ldrb	r3, [r7, #14]
 800e2c6:	1e59      	subs	r1, r3, #1
 800e2c8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ca:	4813      	ldr	r0, [pc, #76]	; (800e318 <find_pregoal+0x2a8>)
 800e2cc:	0109      	lsls	r1, r1, #4
 800e2ce:	4401      	add	r1, r0
 800e2d0:	440b      	add	r3, r1
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d025      	beq.n	800e328 <find_pregoal+0x2b8>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800e2dc:	2301      	movs	r3, #1
 800e2de:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y - 1][x];					//仮ゴールの歩数を記録
 800e2e0:	7bbb      	ldrb	r3, [r7, #14]
 800e2e2:	1e5a      	subs	r2, r3, #1
 800e2e4:	7bfb      	ldrb	r3, [r7, #15]
 800e2e6:	4908      	ldr	r1, [pc, #32]	; (800e308 <find_pregoal+0x298>)
 800e2e8:	0112      	lsls	r2, r2, #4
 800e2ea:	4413      	add	r3, r2
 800e2ec:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800e2f0:	4b0a      	ldr	r3, [pc, #40]	; (800e31c <find_pregoal+0x2ac>)
 800e2f2:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 800e2f4:	4a0a      	ldr	r2, [pc, #40]	; (800e320 <find_pregoal+0x2b0>)
 800e2f6:	7bfb      	ldrb	r3, [r7, #15]
 800e2f8:	7013      	strb	r3, [r2, #0]
								pregoal_y = y - 1;							//仮goalの座標を記録
 800e2fa:	7bbb      	ldrb	r3, [r7, #14]
 800e2fc:	3b01      	subs	r3, #1
 800e2fe:	b2da      	uxtb	r2, r3
 800e300:	4b08      	ldr	r3, [pc, #32]	; (800e324 <find_pregoal+0x2b4>)
 800e302:	701a      	strb	r2, [r3, #0]
								break;
 800e304:	e06a      	b.n	800e3dc <find_pregoal+0x36c>
 800e306:	bf00      	nop
 800e308:	20000da8 	.word	0x20000da8
 800e30c:	20000bf0 	.word	0x20000bf0
 800e310:	20000c54 	.word	0x20000c54
 800e314:	20000386 	.word	0x20000386
 800e318:	200001e4 	.word	0x200001e4
 800e31c:	20000c4c 	.word	0x20000c4c
 800e320:	20000da4 	.word	0x20000da4
 800e324:	200012e5 	.word	0x200012e5
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 800e328:	78fb      	ldrb	r3, [r7, #3]
 800e32a:	f003 0301 	and.w	r3, r3, #1
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d14d      	bne.n	800e3ce <find_pregoal+0x35e>
 800e332:	7bfb      	ldrb	r3, [r7, #15]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d04a      	beq.n	800e3ce <find_pregoal+0x35e>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 800e338:	7bba      	ldrb	r2, [r7, #14]
 800e33a:	7bfb      	ldrb	r3, [r7, #15]
 800e33c:	3b01      	subs	r3, #1
 800e33e:	493b      	ldr	r1, [pc, #236]	; (800e42c <find_pregoal+0x3bc>)
 800e340:	0112      	lsls	r2, r2, #4
 800e342:	4413      	add	r3, r2
 800e344:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e348:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d13e      	bne.n	800e3ce <find_pregoal+0x35e>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 800e350:	7bba      	ldrb	r2, [r7, #14]
 800e352:	7bfb      	ldrb	r3, [r7, #15]
 800e354:	4935      	ldr	r1, [pc, #212]	; (800e42c <find_pregoal+0x3bc>)
 800e356:	0112      	lsls	r2, r2, #4
 800e358:	4413      	add	r3, r2
 800e35a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	b299      	uxth	r1, r3
 800e362:	7bba      	ldrb	r2, [r7, #14]
 800e364:	7bfb      	ldrb	r3, [r7, #15]
 800e366:	3b01      	subs	r3, #1
 800e368:	4401      	add	r1, r0
 800e36a:	b288      	uxth	r0, r1
 800e36c:	492f      	ldr	r1, [pc, #188]	; (800e42c <find_pregoal+0x3bc>)
 800e36e:	0112      	lsls	r2, r2, #4
 800e370:	4413      	add	r3, r2
 800e372:	4602      	mov	r2, r0
 800e374:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x - 1] & 0x0f) << 4) != (map[y][x - 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800e378:	7bba      	ldrb	r2, [r7, #14]
 800e37a:	7bfb      	ldrb	r3, [r7, #15]
 800e37c:	3b01      	subs	r3, #1
 800e37e:	492c      	ldr	r1, [pc, #176]	; (800e430 <find_pregoal+0x3c0>)
 800e380:	0112      	lsls	r2, r2, #4
 800e382:	440a      	add	r2, r1
 800e384:	4413      	add	r3, r2
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	011b      	lsls	r3, r3, #4
 800e38a:	b2da      	uxtb	r2, r3
 800e38c:	7bb9      	ldrb	r1, [r7, #14]
 800e38e:	7bfb      	ldrb	r3, [r7, #15]
 800e390:	3b01      	subs	r3, #1
 800e392:	4827      	ldr	r0, [pc, #156]	; (800e430 <find_pregoal+0x3c0>)
 800e394:	0109      	lsls	r1, r1, #4
 800e396:	4401      	add	r1, r0
 800e398:	440b      	add	r3, r1
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d014      	beq.n	800e3ce <find_pregoal+0x35e>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x - 1];					//仮ゴールの歩数を記録
 800e3a8:	7bba      	ldrb	r2, [r7, #14]
 800e3aa:	7bfb      	ldrb	r3, [r7, #15]
 800e3ac:	3b01      	subs	r3, #1
 800e3ae:	491f      	ldr	r1, [pc, #124]	; (800e42c <find_pregoal+0x3bc>)
 800e3b0:	0112      	lsls	r2, r2, #4
 800e3b2:	4413      	add	r3, r2
 800e3b4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800e3b8:	4b1e      	ldr	r3, [pc, #120]	; (800e434 <find_pregoal+0x3c4>)
 800e3ba:	801a      	strh	r2, [r3, #0]
								pregoal_x = x - 1;
 800e3bc:	7bfb      	ldrb	r3, [r7, #15]
 800e3be:	3b01      	subs	r3, #1
 800e3c0:	b2da      	uxtb	r2, r3
 800e3c2:	4b1d      	ldr	r3, [pc, #116]	; (800e438 <find_pregoal+0x3c8>)
 800e3c4:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 800e3c6:	4a1d      	ldr	r2, [pc, #116]	; (800e43c <find_pregoal+0x3cc>)
 800e3c8:	7bbb      	ldrb	r3, [r7, #14]
 800e3ca:	7013      	strb	r3, [r2, #0]
								break;							}
 800e3cc:	e006      	b.n	800e3dc <find_pregoal+0x36c>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800e3ce:	7bfb      	ldrb	r3, [r7, #15]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	73fb      	strb	r3, [r7, #15]
 800e3d4:	7bfb      	ldrb	r3, [r7, #15]
 800e3d6:	2b0f      	cmp	r3, #15
 800e3d8:	f67f ae88 	bls.w	800e0ec <find_pregoal+0x7c>
						}
					}
				}
			}
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 800e3dc:	7b7b      	ldrb	r3, [r7, #13]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d107      	bne.n	800e3f2 <find_pregoal+0x382>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800e3e2:	7bbb      	ldrb	r3, [r7, #14]
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	73bb      	strb	r3, [r7, #14]
 800e3e8:	7bbb      	ldrb	r3, [r7, #14]
 800e3ea:	2b0f      	cmp	r3, #15
 800e3ec:	f67f ae7b 	bls.w	800e0e6 <find_pregoal+0x76>
 800e3f0:	e000      	b.n	800e3f4 <find_pregoal+0x384>
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 800e3f2:	bf00      	nop
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 800e3f4:	4b12      	ldr	r3, [pc, #72]	; (800e440 <find_pregoal+0x3d0>)
 800e3f6:	881b      	ldrh	r3, [r3, #0]
 800e3f8:	3301      	adds	r3, #1
 800e3fa:	b29a      	uxth	r2, r3
 800e3fc:	4b10      	ldr	r3, [pc, #64]	; (800e440 <find_pregoal+0x3d0>)
 800e3fe:	801a      	strh	r2, [r3, #0]
		if (m_step > 500) allmap_comp_flag = 1;
 800e400:	4b0f      	ldr	r3, [pc, #60]	; (800e440 <find_pregoal+0x3d0>)
 800e402:	881b      	ldrh	r3, [r3, #0]
 800e404:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e408:	d902      	bls.n	800e410 <find_pregoal+0x3a0>
 800e40a:	4b0e      	ldr	r3, [pc, #56]	; (800e444 <find_pregoal+0x3d4>)
 800e40c:	2201      	movs	r2, #1
 800e40e:	701a      	strb	r2, [r3, #0]
	} while (break_flag == 0 && allmap_comp_flag != 1);		//未探索壁ありマスを見つけるまで実行
 800e410:	7b7b      	ldrb	r3, [r7, #13]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d104      	bne.n	800e420 <find_pregoal+0x3b0>
 800e416:	4b0b      	ldr	r3, [pc, #44]	; (800e444 <find_pregoal+0x3d4>)
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	f47f ae60 	bne.w	800e0e0 <find_pregoal+0x70>
}
 800e420:	bf00      	nop
 800e422:	3714      	adds	r7, #20
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr
 800e42c:	20000da8 	.word	0x20000da8
 800e430:	200001e4 	.word	0x200001e4
 800e434:	20000c4c 	.word	0x20000c4c
 800e438:	20000da4 	.word	0x20000da4
 800e43c:	200012e5 	.word	0x200012e5
 800e440:	20000386 	.word	0x20000386
 800e444:	20000bf0 	.word	0x20000bf0

0800e448 <make_smap2>:
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap2()
{
 800e448:	b480      	push	{r7}
 800e44a:	b085      	sub	sp, #20
 800e44c:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800e44e:	2300      	movs	r3, #0
 800e450:	73bb      	strb	r3, [r7, #14]
 800e452:	e014      	b.n	800e47e <make_smap2+0x36>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800e454:	2300      	movs	r3, #0
 800e456:	73fb      	strb	r3, [r7, #15]
 800e458:	e00b      	b.n	800e472 <make_smap2+0x2a>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 800e45a:	7bba      	ldrb	r2, [r7, #14]
 800e45c:	7bfb      	ldrb	r3, [r7, #15]
 800e45e:	4986      	ldr	r1, [pc, #536]	; (800e678 <make_smap2+0x230>)
 800e460:	0112      	lsls	r2, r2, #4
 800e462:	4413      	add	r3, r2
 800e464:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e468:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800e46c:	7bfb      	ldrb	r3, [r7, #15]
 800e46e:	3301      	adds	r3, #1
 800e470:	73fb      	strb	r3, [r7, #15]
 800e472:	7bfb      	ldrb	r3, [r7, #15]
 800e474:	2b0f      	cmp	r3, #15
 800e476:	d9f0      	bls.n	800e45a <make_smap2+0x12>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800e478:	7bbb      	ldrb	r3, [r7, #14]
 800e47a:	3301      	adds	r3, #1
 800e47c:	73bb      	strb	r3, [r7, #14]
 800e47e:	7bbb      	ldrb	r3, [r7, #14]
 800e480:	2b0f      	cmp	r3, #15
 800e482:	d9e7      	bls.n	800e454 <make_smap2+0xc>
		}
	}

	//====仮ゴール座標を0にする====
	smap[pregoal_y][pregoal_x] = 0;
 800e484:	4b7d      	ldr	r3, [pc, #500]	; (800e67c <make_smap2+0x234>)
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	4618      	mov	r0, r3
 800e48a:	4b7d      	ldr	r3, [pc, #500]	; (800e680 <make_smap2+0x238>)
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	4619      	mov	r1, r3
 800e490:	4a79      	ldr	r2, [pc, #484]	; (800e678 <make_smap2+0x230>)
 800e492:	0103      	lsls	r3, r0, #4
 800e494:	440b      	add	r3, r1
 800e496:	2100      	movs	r1, #0
 800e498:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 800e49c:	4b79      	ldr	r3, [pc, #484]	; (800e684 <make_smap2+0x23c>)
 800e49e:	2200      	movs	r2, #0
 800e4a0:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 800e4a2:	2303      	movs	r3, #3
 800e4a4:	60bb      	str	r3, [r7, #8]
	int turn = 5;
 800e4a6:	2305      	movs	r3, #5
 800e4a8:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	73bb      	strb	r3, [r7, #14]
 800e4ae:	e0c0      	b.n	800e632 <make_smap2+0x1ea>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	73fb      	strb	r3, [r7, #15]
 800e4b4:	e0b6      	b.n	800e624 <make_smap2+0x1dc>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 800e4b6:	7bba      	ldrb	r2, [r7, #14]
 800e4b8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ba:	496f      	ldr	r1, [pc, #444]	; (800e678 <make_smap2+0x230>)
 800e4bc:	0112      	lsls	r2, r2, #4
 800e4be:	4413      	add	r3, r2
 800e4c0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800e4c4:	4b6f      	ldr	r3, [pc, #444]	; (800e684 <make_smap2+0x23c>)
 800e4c6:	881b      	ldrh	r3, [r3, #0]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	f040 80a8 	bne.w	800e61e <make_smap2+0x1d6>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 800e4ce:	7bba      	ldrb	r2, [r7, #14]
 800e4d0:	7bfb      	ldrb	r3, [r7, #15]
 800e4d2:	496d      	ldr	r1, [pc, #436]	; (800e688 <make_smap2+0x240>)
 800e4d4:	0112      	lsls	r2, r2, #4
 800e4d6:	440a      	add	r2, r1
 800e4d8:	4413      	add	r3, r2
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 800e4de:	78fb      	ldrb	r3, [r7, #3]
 800e4e0:	f003 0308 	and.w	r3, r3, #8
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d122      	bne.n	800e52e <make_smap2+0xe6>
 800e4e8:	7bbb      	ldrb	r3, [r7, #14]
 800e4ea:	2b0f      	cmp	r3, #15
 800e4ec:	d01f      	beq.n	800e52e <make_smap2+0xe6>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 800e4ee:	7bbb      	ldrb	r3, [r7, #14]
 800e4f0:	1c5a      	adds	r2, r3, #1
 800e4f2:	7bfb      	ldrb	r3, [r7, #15]
 800e4f4:	4960      	ldr	r1, [pc, #384]	; (800e678 <make_smap2+0x230>)
 800e4f6:	0112      	lsls	r2, r2, #4
 800e4f8:	4413      	add	r3, r2
 800e4fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e4fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e502:	4293      	cmp	r3, r2
 800e504:	d113      	bne.n	800e52e <make_smap2+0xe6>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800e506:	7bba      	ldrb	r2, [r7, #14]
 800e508:	7bfb      	ldrb	r3, [r7, #15]
 800e50a:	495b      	ldr	r1, [pc, #364]	; (800e678 <make_smap2+0x230>)
 800e50c:	0112      	lsls	r2, r2, #4
 800e50e:	4413      	add	r3, r2
 800e510:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	b299      	uxth	r1, r3
 800e518:	7bbb      	ldrb	r3, [r7, #14]
 800e51a:	1c5a      	adds	r2, r3, #1
 800e51c:	7bfb      	ldrb	r3, [r7, #15]
 800e51e:	4401      	add	r1, r0
 800e520:	b288      	uxth	r0, r1
 800e522:	4955      	ldr	r1, [pc, #340]	; (800e678 <make_smap2+0x230>)
 800e524:	0112      	lsls	r2, r2, #4
 800e526:	4413      	add	r3, r2
 800e528:	4602      	mov	r2, r0
 800e52a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 800e52e:	78fb      	ldrb	r3, [r7, #3]
 800e530:	f003 0304 	and.w	r3, r3, #4
 800e534:	2b00      	cmp	r3, #0
 800e536:	d122      	bne.n	800e57e <make_smap2+0x136>
 800e538:	7bfb      	ldrb	r3, [r7, #15]
 800e53a:	2b0f      	cmp	r3, #15
 800e53c:	d01f      	beq.n	800e57e <make_smap2+0x136>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 800e53e:	7bba      	ldrb	r2, [r7, #14]
 800e540:	7bfb      	ldrb	r3, [r7, #15]
 800e542:	3301      	adds	r3, #1
 800e544:	494c      	ldr	r1, [pc, #304]	; (800e678 <make_smap2+0x230>)
 800e546:	0112      	lsls	r2, r2, #4
 800e548:	4413      	add	r3, r2
 800e54a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e54e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e552:	4293      	cmp	r3, r2
 800e554:	d113      	bne.n	800e57e <make_smap2+0x136>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800e556:	7bba      	ldrb	r2, [r7, #14]
 800e558:	7bfb      	ldrb	r3, [r7, #15]
 800e55a:	4947      	ldr	r1, [pc, #284]	; (800e678 <make_smap2+0x230>)
 800e55c:	0112      	lsls	r2, r2, #4
 800e55e:	4413      	add	r3, r2
 800e560:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	b299      	uxth	r1, r3
 800e568:	7bba      	ldrb	r2, [r7, #14]
 800e56a:	7bfb      	ldrb	r3, [r7, #15]
 800e56c:	3301      	adds	r3, #1
 800e56e:	4401      	add	r1, r0
 800e570:	b288      	uxth	r0, r1
 800e572:	4941      	ldr	r1, [pc, #260]	; (800e678 <make_smap2+0x230>)
 800e574:	0112      	lsls	r2, r2, #4
 800e576:	4413      	add	r3, r2
 800e578:	4602      	mov	r2, r0
 800e57a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 800e57e:	78fb      	ldrb	r3, [r7, #3]
 800e580:	f003 0302 	and.w	r3, r3, #2
 800e584:	2b00      	cmp	r3, #0
 800e586:	d122      	bne.n	800e5ce <make_smap2+0x186>
 800e588:	7bbb      	ldrb	r3, [r7, #14]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d01f      	beq.n	800e5ce <make_smap2+0x186>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 800e58e:	7bbb      	ldrb	r3, [r7, #14]
 800e590:	1e5a      	subs	r2, r3, #1
 800e592:	7bfb      	ldrb	r3, [r7, #15]
 800e594:	4938      	ldr	r1, [pc, #224]	; (800e678 <make_smap2+0x230>)
 800e596:	0112      	lsls	r2, r2, #4
 800e598:	4413      	add	r3, r2
 800e59a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e59e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d113      	bne.n	800e5ce <make_smap2+0x186>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800e5a6:	7bba      	ldrb	r2, [r7, #14]
 800e5a8:	7bfb      	ldrb	r3, [r7, #15]
 800e5aa:	4933      	ldr	r1, [pc, #204]	; (800e678 <make_smap2+0x230>)
 800e5ac:	0112      	lsls	r2, r2, #4
 800e5ae:	4413      	add	r3, r2
 800e5b0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	b299      	uxth	r1, r3
 800e5b8:	7bbb      	ldrb	r3, [r7, #14]
 800e5ba:	1e5a      	subs	r2, r3, #1
 800e5bc:	7bfb      	ldrb	r3, [r7, #15]
 800e5be:	4401      	add	r1, r0
 800e5c0:	b288      	uxth	r0, r1
 800e5c2:	492d      	ldr	r1, [pc, #180]	; (800e678 <make_smap2+0x230>)
 800e5c4:	0112      	lsls	r2, r2, #4
 800e5c6:	4413      	add	r3, r2
 800e5c8:	4602      	mov	r2, r0
 800e5ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 800e5ce:	78fb      	ldrb	r3, [r7, #3]
 800e5d0:	f003 0301 	and.w	r3, r3, #1
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d122      	bne.n	800e61e <make_smap2+0x1d6>
 800e5d8:	7bfb      	ldrb	r3, [r7, #15]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d01f      	beq.n	800e61e <make_smap2+0x1d6>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 800e5de:	7bba      	ldrb	r2, [r7, #14]
 800e5e0:	7bfb      	ldrb	r3, [r7, #15]
 800e5e2:	3b01      	subs	r3, #1
 800e5e4:	4924      	ldr	r1, [pc, #144]	; (800e678 <make_smap2+0x230>)
 800e5e6:	0112      	lsls	r2, r2, #4
 800e5e8:	4413      	add	r3, r2
 800e5ea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e5ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	d113      	bne.n	800e61e <make_smap2+0x1d6>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 800e5f6:	7bba      	ldrb	r2, [r7, #14]
 800e5f8:	7bfb      	ldrb	r3, [r7, #15]
 800e5fa:	491f      	ldr	r1, [pc, #124]	; (800e678 <make_smap2+0x230>)
 800e5fc:	0112      	lsls	r2, r2, #4
 800e5fe:	4413      	add	r3, r2
 800e600:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	b299      	uxth	r1, r3
 800e608:	7bba      	ldrb	r2, [r7, #14]
 800e60a:	7bfb      	ldrb	r3, [r7, #15]
 800e60c:	3b01      	subs	r3, #1
 800e60e:	4401      	add	r1, r0
 800e610:	b288      	uxth	r0, r1
 800e612:	4919      	ldr	r1, [pc, #100]	; (800e678 <make_smap2+0x230>)
 800e614:	0112      	lsls	r2, r2, #4
 800e616:	4413      	add	r3, r2
 800e618:	4602      	mov	r2, r0
 800e61a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800e61e:	7bfb      	ldrb	r3, [r7, #15]
 800e620:	3301      	adds	r3, #1
 800e622:	73fb      	strb	r3, [r7, #15]
 800e624:	7bfb      	ldrb	r3, [r7, #15]
 800e626:	2b0f      	cmp	r3, #15
 800e628:	f67f af45 	bls.w	800e4b6 <make_smap2+0x6e>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800e62c:	7bbb      	ldrb	r3, [r7, #14]
 800e62e:	3301      	adds	r3, #1
 800e630:	73bb      	strb	r3, [r7, #14]
 800e632:	7bbb      	ldrb	r3, [r7, #14]
 800e634:	2b0f      	cmp	r3, #15
 800e636:	f67f af3b 	bls.w	800e4b0 <make_smap2+0x68>
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 800e63a:	4b12      	ldr	r3, [pc, #72]	; (800e684 <make_smap2+0x23c>)
 800e63c:	881b      	ldrh	r3, [r3, #0]
 800e63e:	3301      	adds	r3, #1
 800e640:	b29a      	uxth	r2, r3
 800e642:	4b10      	ldr	r3, [pc, #64]	; (800e684 <make_smap2+0x23c>)
 800e644:	801a      	strh	r2, [r3, #0]
	} while (smap[mouse.y][mouse.x] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
 800e646:	4b11      	ldr	r3, [pc, #68]	; (800e68c <make_smap2+0x244>)
 800e648:	785b      	ldrb	r3, [r3, #1]
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	4618      	mov	r0, r3
 800e64e:	4b0f      	ldr	r3, [pc, #60]	; (800e68c <make_smap2+0x244>)
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	b2db      	uxtb	r3, r3
 800e654:	4619      	mov	r1, r3
 800e656:	4a08      	ldr	r2, [pc, #32]	; (800e678 <make_smap2+0x230>)
 800e658:	0103      	lsls	r3, r0, #4
 800e65a:	440b      	add	r3, r1
 800e65c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e660:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e664:	4293      	cmp	r3, r2
 800e666:	f43f af20 	beq.w	800e4aa <make_smap2+0x62>
}
 800e66a:	bf00      	nop
 800e66c:	3714      	adds	r7, #20
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr
 800e676:	bf00      	nop
 800e678:	20000da8 	.word	0x20000da8
 800e67c:	200012e5 	.word	0x200012e5
 800e680:	20000da4 	.word	0x20000da4
 800e684:	20000386 	.word	0x20000386
 800e688:	200001e4 	.word	0x200001e4
 800e68c:	20000c54 	.word	0x20000c54

0800e690 <pass_route2>:
//pass_route2
// route配列をpass圧縮する(半区画ベース)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route2(void){
 800e690:	b480      	push	{r7}
 800e692:	b083      	sub	sp, #12
 800e694:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 800e696:	2300      	movs	r3, #0
 800e698:	70fb      	strb	r3, [r7, #3]
	for(i = 0; i < 256; i++){
 800e69a:	2300      	movs	r3, #0
 800e69c:	607b      	str	r3, [r7, #4]
 800e69e:	e007      	b.n	800e6b0 <pass_route2+0x20>
		pass[i] = 0;								//pass配列の初期化
 800e6a0:	4a83      	ldr	r2, [pc, #524]	; (800e8b0 <pass_route2+0x220>)
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	4413      	add	r3, r2
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	607b      	str	r3, [r7, #4]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2bff      	cmp	r3, #255	; 0xff
 800e6b4:	ddf4      	ble.n	800e6a0 <pass_route2+0x10>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	70bb      	strb	r3, [r7, #2]
	i = 0;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 800e6be:	2300      	movs	r3, #0
 800e6c0:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 800e6c2:	e0e8      	b.n	800e896 <pass_route2+0x206>
		s = 0;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x44){
 800e6c8:	4a7a      	ldr	r2, [pc, #488]	; (800e8b4 <pass_route2+0x224>)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	4413      	add	r3, r2
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	2b44      	cmp	r3, #68	; 0x44
 800e6d2:	d107      	bne.n	800e6e4 <pass_route2+0x54>
			pass[p] = -1;
 800e6d4:	78bb      	ldrb	r3, [r7, #2]
 800e6d6:	4a76      	ldr	r2, [pc, #472]	; (800e8b0 <pass_route2+0x220>)
 800e6d8:	21ff      	movs	r1, #255	; 0xff
 800e6da:	54d1      	strb	r1, [r2, r3]
			i++;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	3301      	adds	r3, #1
 800e6e0:	607b      	str	r3, [r7, #4]
 800e6e2:	e0d5      	b.n	800e890 <pass_route2+0x200>
		}else if(route[i] == 0x11){
 800e6e4:	4a73      	ldr	r2, [pc, #460]	; (800e8b4 <pass_route2+0x224>)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	4413      	add	r3, r2
 800e6ea:	781b      	ldrb	r3, [r3, #0]
 800e6ec:	2b11      	cmp	r3, #17
 800e6ee:	d107      	bne.n	800e700 <pass_route2+0x70>
			pass[p] = -2;
 800e6f0:	78bb      	ldrb	r3, [r7, #2]
 800e6f2:	4a6f      	ldr	r2, [pc, #444]	; (800e8b0 <pass_route2+0x220>)
 800e6f4:	21fe      	movs	r1, #254	; 0xfe
 800e6f6:	54d1      	strb	r1, [r2, r3]
			i++;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	607b      	str	r3, [r7, #4]
 800e6fe:	e0c7      	b.n	800e890 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 800e700:	4a6c      	ldr	r2, [pc, #432]	; (800e8b4 <pass_route2+0x224>)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	4413      	add	r3, r2
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	2b77      	cmp	r3, #119	; 0x77
 800e70a:	d115      	bne.n	800e738 <pass_route2+0xa8>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	3301      	adds	r3, #1
 800e710:	4a68      	ldr	r2, [pc, #416]	; (800e8b4 <pass_route2+0x224>)
 800e712:	5cd3      	ldrb	r3, [r2, r3]
 800e714:	2b44      	cmp	r3, #68	; 0x44
 800e716:	d10f      	bne.n	800e738 <pass_route2+0xa8>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	3302      	adds	r3, #2
 800e71c:	4a65      	ldr	r2, [pc, #404]	; (800e8b4 <pass_route2+0x224>)
 800e71e:	5cd3      	ldrb	r3, [r2, r3]
 800e720:	2b77      	cmp	r3, #119	; 0x77
 800e722:	d109      	bne.n	800e738 <pass_route2+0xa8>
			s_flag = 0;
 800e724:	2300      	movs	r3, #0
 800e726:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;
 800e728:	78bb      	ldrb	r3, [r7, #2]
 800e72a:	4a61      	ldr	r2, [pc, #388]	; (800e8b0 <pass_route2+0x220>)
 800e72c:	21fd      	movs	r1, #253	; 0xfd
 800e72e:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	3303      	adds	r3, #3
 800e734:	607b      	str	r3, [r7, #4]
 800e736:	e0ab      	b.n	800e890 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 800e738:	4a5e      	ldr	r2, [pc, #376]	; (800e8b4 <pass_route2+0x224>)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	4413      	add	r3, r2
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	2b77      	cmp	r3, #119	; 0x77
 800e742:	d115      	bne.n	800e770 <pass_route2+0xe0>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	3301      	adds	r3, #1
 800e748:	4a5a      	ldr	r2, [pc, #360]	; (800e8b4 <pass_route2+0x224>)
 800e74a:	5cd3      	ldrb	r3, [r2, r3]
 800e74c:	2b11      	cmp	r3, #17
 800e74e:	d10f      	bne.n	800e770 <pass_route2+0xe0>
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	3302      	adds	r3, #2
 800e754:	4a57      	ldr	r2, [pc, #348]	; (800e8b4 <pass_route2+0x224>)
 800e756:	5cd3      	ldrb	r3, [r2, r3]
 800e758:	2b77      	cmp	r3, #119	; 0x77
 800e75a:	d109      	bne.n	800e770 <pass_route2+0xe0>
			s_flag = 0;
 800e75c:	2300      	movs	r3, #0
 800e75e:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;
 800e760:	78bb      	ldrb	r3, [r7, #2]
 800e762:	4a53      	ldr	r2, [pc, #332]	; (800e8b0 <pass_route2+0x220>)
 800e764:	21fc      	movs	r1, #252	; 0xfc
 800e766:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	3303      	adds	r3, #3
 800e76c:	607b      	str	r3, [r7, #4]
 800e76e:	e08f      	b.n	800e890 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 800e770:	4a50      	ldr	r2, [pc, #320]	; (800e8b4 <pass_route2+0x224>)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	4413      	add	r3, r2
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	2b77      	cmp	r3, #119	; 0x77
 800e77a:	d11b      	bne.n	800e7b4 <pass_route2+0x124>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	3301      	adds	r3, #1
 800e780:	4a4c      	ldr	r2, [pc, #304]	; (800e8b4 <pass_route2+0x224>)
 800e782:	5cd3      	ldrb	r3, [r2, r3]
 800e784:	2b44      	cmp	r3, #68	; 0x44
 800e786:	d115      	bne.n	800e7b4 <pass_route2+0x124>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	3302      	adds	r3, #2
 800e78c:	4a49      	ldr	r2, [pc, #292]	; (800e8b4 <pass_route2+0x224>)
 800e78e:	5cd3      	ldrb	r3, [r2, r3]
 800e790:	2b44      	cmp	r3, #68	; 0x44
 800e792:	d10f      	bne.n	800e7b4 <pass_route2+0x124>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	3303      	adds	r3, #3
 800e798:	4a46      	ldr	r2, [pc, #280]	; (800e8b4 <pass_route2+0x224>)
 800e79a:	5cd3      	ldrb	r3, [r2, r3]
 800e79c:	2b77      	cmp	r3, #119	; 0x77
 800e79e:	d109      	bne.n	800e7b4 <pass_route2+0x124>
			s_flag = 0;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;
 800e7a4:	78bb      	ldrb	r3, [r7, #2]
 800e7a6:	4a42      	ldr	r2, [pc, #264]	; (800e8b0 <pass_route2+0x220>)
 800e7a8:	21fb      	movs	r1, #251	; 0xfb
 800e7aa:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	3304      	adds	r3, #4
 800e7b0:	607b      	str	r3, [r7, #4]
 800e7b2:	e06d      	b.n	800e890 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 800e7b4:	4a3f      	ldr	r2, [pc, #252]	; (800e8b4 <pass_route2+0x224>)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	781b      	ldrb	r3, [r3, #0]
 800e7bc:	2b77      	cmp	r3, #119	; 0x77
 800e7be:	d11b      	bne.n	800e7f8 <pass_route2+0x168>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	4a3b      	ldr	r2, [pc, #236]	; (800e8b4 <pass_route2+0x224>)
 800e7c6:	5cd3      	ldrb	r3, [r2, r3]
 800e7c8:	2b11      	cmp	r3, #17
 800e7ca:	d115      	bne.n	800e7f8 <pass_route2+0x168>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	3302      	adds	r3, #2
 800e7d0:	4a38      	ldr	r2, [pc, #224]	; (800e8b4 <pass_route2+0x224>)
 800e7d2:	5cd3      	ldrb	r3, [r2, r3]
 800e7d4:	2b11      	cmp	r3, #17
 800e7d6:	d10f      	bne.n	800e7f8 <pass_route2+0x168>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	3303      	adds	r3, #3
 800e7dc:	4a35      	ldr	r2, [pc, #212]	; (800e8b4 <pass_route2+0x224>)
 800e7de:	5cd3      	ldrb	r3, [r2, r3]
 800e7e0:	2b77      	cmp	r3, #119	; 0x77
 800e7e2:	d109      	bne.n	800e7f8 <pass_route2+0x168>
			s_flag = 0;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;
 800e7e8:	78bb      	ldrb	r3, [r7, #2]
 800e7ea:	4a31      	ldr	r2, [pc, #196]	; (800e8b0 <pass_route2+0x220>)
 800e7ec:	21fa      	movs	r1, #250	; 0xfa
 800e7ee:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	3304      	adds	r3, #4
 800e7f4:	607b      	str	r3, [r7, #4]
 800e7f6:	e04b      	b.n	800e890 <pass_route2+0x200>
		}else if(route[i] == 0xff){
 800e7f8:	4a2e      	ldr	r2, [pc, #184]	; (800e8b4 <pass_route2+0x224>)
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	4413      	add	r3, r2
 800e7fe:	781b      	ldrb	r3, [r3, #0]
 800e800:	2bff      	cmp	r3, #255	; 0xff
 800e802:	d107      	bne.n	800e814 <pass_route2+0x184>
			pass[p] = -114;
 800e804:	78bb      	ldrb	r3, [r7, #2]
 800e806:	4a2a      	ldr	r2, [pc, #168]	; (800e8b0 <pass_route2+0x220>)
 800e808:	218e      	movs	r1, #142	; 0x8e
 800e80a:	54d1      	strb	r1, [r2, r3]
			i++;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	3301      	adds	r3, #1
 800e810:	607b      	str	r3, [r7, #4]
 800e812:	e03d      	b.n	800e890 <pass_route2+0x200>
		}else if(route[i] == 0x77){
 800e814:	4a27      	ldr	r2, [pc, #156]	; (800e8b4 <pass_route2+0x224>)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	4413      	add	r3, r2
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	2b77      	cmp	r3, #119	; 0x77
 800e81e:	d137      	bne.n	800e890 <pass_route2+0x200>
			if(s_flag){
 800e820:	78fb      	ldrb	r3, [r7, #3]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d012      	beq.n	800e84c <pass_route2+0x1bc>
				pass[p-1]++;
 800e826:	78bb      	ldrb	r3, [r7, #2]
 800e828:	3b01      	subs	r3, #1
 800e82a:	4a21      	ldr	r2, [pc, #132]	; (800e8b0 <pass_route2+0x220>)
 800e82c:	56d2      	ldrsb	r2, [r2, r3]
 800e82e:	b2d2      	uxtb	r2, r2
 800e830:	3201      	adds	r2, #1
 800e832:	b2d2      	uxtb	r2, r2
 800e834:	b251      	sxtb	r1, r2
 800e836:	4a1e      	ldr	r2, [pc, #120]	; (800e8b0 <pass_route2+0x220>)
 800e838:	54d1      	strb	r1, [r2, r3]
				p--;
 800e83a:	78bb      	ldrb	r3, [r7, #2]
 800e83c:	3b01      	subs	r3, #1
 800e83e:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 800e840:	2300      	movs	r3, #0
 800e842:	70fb      	strb	r3, [r7, #3]
				i++;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	3301      	adds	r3, #1
 800e848:	607b      	str	r3, [r7, #4]
 800e84a:	e021      	b.n	800e890 <pass_route2+0x200>
			}else{
				s++;
 800e84c:	787b      	ldrb	r3, [r7, #1]
 800e84e:	3301      	adds	r3, #1
 800e850:	707b      	strb	r3, [r7, #1]
				pass[p] = s;
 800e852:	78bb      	ldrb	r3, [r7, #2]
 800e854:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800e858:	4a15      	ldr	r2, [pc, #84]	; (800e8b0 <pass_route2+0x220>)
 800e85a:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 800e85c:	e00c      	b.n	800e878 <pass_route2+0x1e8>
					s_flag = 1;
 800e85e:	2301      	movs	r3, #1
 800e860:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;
 800e862:	78bb      	ldrb	r3, [r7, #2]
 800e864:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800e868:	4a11      	ldr	r2, [pc, #68]	; (800e8b0 <pass_route2+0x220>)
 800e86a:	54d1      	strb	r1, [r2, r3]
					i++;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	3301      	adds	r3, #1
 800e870:	607b      	str	r3, [r7, #4]
					s++;
 800e872:	787b      	ldrb	r3, [r7, #1]
 800e874:	3301      	adds	r3, #1
 800e876:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	3301      	adds	r3, #1
 800e87c:	4a0d      	ldr	r2, [pc, #52]	; (800e8b4 <pass_route2+0x224>)
 800e87e:	5cd3      	ldrb	r3, [r2, r3]
 800e880:	2b77      	cmp	r3, #119	; 0x77
 800e882:	d0ec      	beq.n	800e85e <pass_route2+0x1ce>
				}
				if(!s_flag){
 800e884:	78fb      	ldrb	r3, [r7, #3]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d102      	bne.n	800e890 <pass_route2+0x200>
					i++;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	3301      	adds	r3, #1
 800e88e:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 800e890:	78bb      	ldrb	r3, [r7, #2]
 800e892:	3301      	adds	r3, #1
 800e894:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	3b01      	subs	r3, #1
 800e89a:	4a06      	ldr	r2, [pc, #24]	; (800e8b4 <pass_route2+0x224>)
 800e89c:	5cd3      	ldrb	r3, [r2, r3]
 800e89e:	2bff      	cmp	r3, #255	; 0xff
 800e8a0:	f47f af10 	bne.w	800e6c4 <pass_route2+0x34>
	}
}
 800e8a4:	bf00      	nop
 800e8a6:	370c      	adds	r7, #12
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr
 800e8b0:	20000388 	.word	0x20000388
 800e8b4:	20000c9c 	.word	0x20000c9c

0800e8b8 <pass_route3>:
//pass_route3
// route配列をpass圧縮する(半区画ベース+斜めあり)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route3(void){
 800e8b8:	b480      	push	{r7}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	70fb      	strb	r3, [r7, #3]
	v_flag = 0;										//a斜めフラグの初期化
 800e8c2:	4b90      	ldr	r3, [pc, #576]	; (800eb04 <pass_route3+0x24c>)
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	607b      	str	r3, [r7, #4]
 800e8cc:	e007      	b.n	800e8de <pass_route3+0x26>
		pass[i] = 0;								//pass配列の初期化
 800e8ce:	4a8e      	ldr	r2, [pc, #568]	; (800eb08 <pass_route3+0x250>)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	4413      	add	r3, r2
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	3301      	adds	r3, #1
 800e8dc:	607b      	str	r3, [r7, #4]
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2bff      	cmp	r3, #255	; 0xff
 800e8e2:	ddf4      	ble.n	800e8ce <pass_route3+0x16>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	70bb      	strb	r3, [r7, #2]
	i = 0;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 800e8f0:	e2f1      	b.n	800eed6 <pass_route3+0x61e>
		s = 0;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 800e8f6:	4a85      	ldr	r2, [pc, #532]	; (800eb0c <pass_route3+0x254>)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4413      	add	r3, r2
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	2b77      	cmp	r3, #119	; 0x77
 800e900:	d11b      	bne.n	800e93a <pass_route3+0x82>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	3301      	adds	r3, #1
 800e906:	4a81      	ldr	r2, [pc, #516]	; (800eb0c <pass_route3+0x254>)
 800e908:	5cd3      	ldrb	r3, [r2, r3]
 800e90a:	2b44      	cmp	r3, #68	; 0x44
 800e90c:	d115      	bne.n	800e93a <pass_route3+0x82>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	3302      	adds	r3, #2
 800e912:	4a7e      	ldr	r2, [pc, #504]	; (800eb0c <pass_route3+0x254>)
 800e914:	5cd3      	ldrb	r3, [r2, r3]
 800e916:	2b77      	cmp	r3, #119	; 0x77
 800e918:	d10f      	bne.n	800e93a <pass_route3+0x82>
			s_flag = 0;
 800e91a:	2300      	movs	r3, #0
 800e91c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右90
 800e91e:	78bb      	ldrb	r3, [r7, #2]
 800e920:	4a79      	ldr	r2, [pc, #484]	; (800eb08 <pass_route3+0x250>)
 800e922:	21fd      	movs	r1, #253	; 0xfd
 800e924:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d102      	bne.n	800e932 <pass_route3+0x7a>
				start_flag = 2;
 800e92c:	4b78      	ldr	r3, [pc, #480]	; (800eb10 <pass_route3+0x258>)
 800e92e:	2202      	movs	r2, #2
 800e930:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	3303      	adds	r3, #3
 800e936:	607b      	str	r3, [r7, #4]
 800e938:	e2ca      	b.n	800eed0 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 800e93a:	4a74      	ldr	r2, [pc, #464]	; (800eb0c <pass_route3+0x254>)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	4413      	add	r3, r2
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	2b77      	cmp	r3, #119	; 0x77
 800e944:	d11b      	bne.n	800e97e <pass_route3+0xc6>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	3301      	adds	r3, #1
 800e94a:	4a70      	ldr	r2, [pc, #448]	; (800eb0c <pass_route3+0x254>)
 800e94c:	5cd3      	ldrb	r3, [r2, r3]
 800e94e:	2b11      	cmp	r3, #17
 800e950:	d115      	bne.n	800e97e <pass_route3+0xc6>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	3302      	adds	r3, #2
 800e956:	4a6d      	ldr	r2, [pc, #436]	; (800eb0c <pass_route3+0x254>)
 800e958:	5cd3      	ldrb	r3, [r2, r3]
 800e95a:	2b77      	cmp	r3, #119	; 0x77
 800e95c:	d10f      	bne.n	800e97e <pass_route3+0xc6>
			s_flag = 0;
 800e95e:	2300      	movs	r3, #0
 800e960:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左90
 800e962:	78bb      	ldrb	r3, [r7, #2]
 800e964:	4a68      	ldr	r2, [pc, #416]	; (800eb08 <pass_route3+0x250>)
 800e966:	21fc      	movs	r1, #252	; 0xfc
 800e968:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d102      	bne.n	800e976 <pass_route3+0xbe>
				start_flag = 2;
 800e970:	4b67      	ldr	r3, [pc, #412]	; (800eb10 <pass_route3+0x258>)
 800e972:	2202      	movs	r2, #2
 800e974:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	3303      	adds	r3, #3
 800e97a:	607b      	str	r3, [r7, #4]
 800e97c:	e2a8      	b.n	800eed0 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 800e97e:	4a63      	ldr	r2, [pc, #396]	; (800eb0c <pass_route3+0x254>)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	4413      	add	r3, r2
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	2b77      	cmp	r3, #119	; 0x77
 800e988:	d11b      	bne.n	800e9c2 <pass_route3+0x10a>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	3301      	adds	r3, #1
 800e98e:	4a5f      	ldr	r2, [pc, #380]	; (800eb0c <pass_route3+0x254>)
 800e990:	5cd3      	ldrb	r3, [r2, r3]
 800e992:	2b44      	cmp	r3, #68	; 0x44
 800e994:	d115      	bne.n	800e9c2 <pass_route3+0x10a>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	3302      	adds	r3, #2
 800e99a:	4a5c      	ldr	r2, [pc, #368]	; (800eb0c <pass_route3+0x254>)
 800e99c:	5cd3      	ldrb	r3, [r2, r3]
 800e99e:	2b44      	cmp	r3, #68	; 0x44
 800e9a0:	d10f      	bne.n	800e9c2 <pass_route3+0x10a>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	3303      	adds	r3, #3
 800e9a6:	4a59      	ldr	r2, [pc, #356]	; (800eb0c <pass_route3+0x254>)
 800e9a8:	5cd3      	ldrb	r3, [r2, r3]
 800e9aa:	2b77      	cmp	r3, #119	; 0x77
 800e9ac:	d109      	bne.n	800e9c2 <pass_route3+0x10a>
			s_flag = 0;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180
 800e9b2:	78bb      	ldrb	r3, [r7, #2]
 800e9b4:	4a54      	ldr	r2, [pc, #336]	; (800eb08 <pass_route3+0x250>)
 800e9b6:	21fb      	movs	r1, #251	; 0xfb
 800e9b8:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	3304      	adds	r3, #4
 800e9be:	607b      	str	r3, [r7, #4]
 800e9c0:	e286      	b.n	800eed0 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 800e9c2:	4a52      	ldr	r2, [pc, #328]	; (800eb0c <pass_route3+0x254>)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	4413      	add	r3, r2
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	2b77      	cmp	r3, #119	; 0x77
 800e9cc:	d11b      	bne.n	800ea06 <pass_route3+0x14e>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	4a4e      	ldr	r2, [pc, #312]	; (800eb0c <pass_route3+0x254>)
 800e9d4:	5cd3      	ldrb	r3, [r2, r3]
 800e9d6:	2b11      	cmp	r3, #17
 800e9d8:	d115      	bne.n	800ea06 <pass_route3+0x14e>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	3302      	adds	r3, #2
 800e9de:	4a4b      	ldr	r2, [pc, #300]	; (800eb0c <pass_route3+0x254>)
 800e9e0:	5cd3      	ldrb	r3, [r2, r3]
 800e9e2:	2b11      	cmp	r3, #17
 800e9e4:	d10f      	bne.n	800ea06 <pass_route3+0x14e>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	3303      	adds	r3, #3
 800e9ea:	4a48      	ldr	r2, [pc, #288]	; (800eb0c <pass_route3+0x254>)
 800e9ec:	5cd3      	ldrb	r3, [r2, r3]
 800e9ee:	2b77      	cmp	r3, #119	; 0x77
 800e9f0:	d109      	bne.n	800ea06 <pass_route3+0x14e>
			s_flag = 0;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180
 800e9f6:	78bb      	ldrb	r3, [r7, #2]
 800e9f8:	4a43      	ldr	r2, [pc, #268]	; (800eb08 <pass_route3+0x250>)
 800e9fa:	21fa      	movs	r1, #250	; 0xfa
 800e9fc:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	3304      	adds	r3, #4
 800ea02:	607b      	str	r3, [r7, #4]
 800ea04:	e264      	b.n	800eed0 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x11){
 800ea06:	4a41      	ldr	r2, [pc, #260]	; (800eb0c <pass_route3+0x254>)
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	4413      	add	r3, r2
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	2b77      	cmp	r3, #119	; 0x77
 800ea10:	d11e      	bne.n	800ea50 <pass_route3+0x198>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	3301      	adds	r3, #1
 800ea16:	4a3d      	ldr	r2, [pc, #244]	; (800eb0c <pass_route3+0x254>)
 800ea18:	5cd3      	ldrb	r3, [r2, r3]
 800ea1a:	2b44      	cmp	r3, #68	; 0x44
 800ea1c:	d118      	bne.n	800ea50 <pass_route3+0x198>
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	3302      	adds	r3, #2
 800ea22:	4a3a      	ldr	r2, [pc, #232]	; (800eb0c <pass_route3+0x254>)
 800ea24:	5cd3      	ldrb	r3, [r2, r3]
 800ea26:	2b11      	cmp	r3, #17
 800ea28:	d112      	bne.n	800ea50 <pass_route3+0x198>
			s_flag = 0;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45in
 800ea2e:	78bb      	ldrb	r3, [r7, #2]
 800ea30:	4a35      	ldr	r2, [pc, #212]	; (800eb08 <pass_route3+0x250>)
 800ea32:	21f9      	movs	r1, #249	; 0xf9
 800ea34:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 800ea36:	4b33      	ldr	r3, [pc, #204]	; (800eb04 <pass_route3+0x24c>)
 800ea38:	2201      	movs	r2, #1
 800ea3a:	701a      	strb	r2, [r3, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d102      	bne.n	800ea48 <pass_route3+0x190>
				start_flag = 2;
 800ea42:	4b33      	ldr	r3, [pc, #204]	; (800eb10 <pass_route3+0x258>)
 800ea44:	2202      	movs	r2, #2
 800ea46:	701a      	strb	r2, [r3, #0]
			}
			i = i + 2;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	3302      	adds	r3, #2
 800ea4c:	607b      	str	r3, [r7, #4]
 800ea4e:	e23f      	b.n	800eed0 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x44 && route[i+1] == 0x77){
 800ea50:	4b2c      	ldr	r3, [pc, #176]	; (800eb04 <pass_route3+0x24c>)
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d118      	bne.n	800ea8a <pass_route3+0x1d2>
 800ea58:	4a2c      	ldr	r2, [pc, #176]	; (800eb0c <pass_route3+0x254>)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	4413      	add	r3, r2
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	2b44      	cmp	r3, #68	; 0x44
 800ea62:	d112      	bne.n	800ea8a <pass_route3+0x1d2>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	3301      	adds	r3, #1
 800ea68:	4a28      	ldr	r2, [pc, #160]	; (800eb0c <pass_route3+0x254>)
 800ea6a:	5cd3      	ldrb	r3, [r2, r3]
 800ea6c:	2b77      	cmp	r3, #119	; 0x77
 800ea6e:	d10c      	bne.n	800ea8a <pass_route3+0x1d2>
			s_flag = 0;
 800ea70:	2300      	movs	r3, #0
 800ea72:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45out
 800ea74:	78bb      	ldrb	r3, [r7, #2]
 800ea76:	4a24      	ldr	r2, [pc, #144]	; (800eb08 <pass_route3+0x250>)
 800ea78:	21f9      	movs	r1, #249	; 0xf9
 800ea7a:	54d1      	strb	r1, [r2, r3]
			v_flag = 0;
 800ea7c:	4b21      	ldr	r3, [pc, #132]	; (800eb04 <pass_route3+0x24c>)
 800ea7e:	2200      	movs	r2, #0
 800ea80:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	3302      	adds	r3, #2
 800ea86:	607b      	str	r3, [r7, #4]
 800ea88:	e222      	b.n	800eed0 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x44){
 800ea8a:	4a20      	ldr	r2, [pc, #128]	; (800eb0c <pass_route3+0x254>)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	4413      	add	r3, r2
 800ea90:	781b      	ldrb	r3, [r3, #0]
 800ea92:	2b77      	cmp	r3, #119	; 0x77
 800ea94:	d118      	bne.n	800eac8 <pass_route3+0x210>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	3301      	adds	r3, #1
 800ea9a:	4a1c      	ldr	r2, [pc, #112]	; (800eb0c <pass_route3+0x254>)
 800ea9c:	5cd3      	ldrb	r3, [r2, r3]
 800ea9e:	2b11      	cmp	r3, #17
 800eaa0:	d112      	bne.n	800eac8 <pass_route3+0x210>
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	3302      	adds	r3, #2
 800eaa6:	4a19      	ldr	r2, [pc, #100]	; (800eb0c <pass_route3+0x254>)
 800eaa8:	5cd3      	ldrb	r3, [r2, r3]
 800eaaa:	2b44      	cmp	r3, #68	; 0x44
 800eaac:	d10c      	bne.n	800eac8 <pass_route3+0x210>
			s_flag = 0;
 800eaae:	2300      	movs	r3, #0
 800eab0:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45in
 800eab2:	78bb      	ldrb	r3, [r7, #2]
 800eab4:	4a14      	ldr	r2, [pc, #80]	; (800eb08 <pass_route3+0x250>)
 800eab6:	21f8      	movs	r1, #248	; 0xf8
 800eab8:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 800eaba:	4b12      	ldr	r3, [pc, #72]	; (800eb04 <pass_route3+0x24c>)
 800eabc:	2201      	movs	r2, #1
 800eabe:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	3302      	adds	r3, #2
 800eac4:	607b      	str	r3, [r7, #4]
 800eac6:	e203      	b.n	800eed0 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x11 && route[i+1] == 0x77){
 800eac8:	4b0e      	ldr	r3, [pc, #56]	; (800eb04 <pass_route3+0x24c>)
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d121      	bne.n	800eb14 <pass_route3+0x25c>
 800ead0:	4a0e      	ldr	r2, [pc, #56]	; (800eb0c <pass_route3+0x254>)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	4413      	add	r3, r2
 800ead6:	781b      	ldrb	r3, [r3, #0]
 800ead8:	2b11      	cmp	r3, #17
 800eada:	d11b      	bne.n	800eb14 <pass_route3+0x25c>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	3301      	adds	r3, #1
 800eae0:	4a0a      	ldr	r2, [pc, #40]	; (800eb0c <pass_route3+0x254>)
 800eae2:	5cd3      	ldrb	r3, [r2, r3]
 800eae4:	2b77      	cmp	r3, #119	; 0x77
 800eae6:	d115      	bne.n	800eb14 <pass_route3+0x25c>
			s_flag = 0;
 800eae8:	2300      	movs	r3, #0
 800eaea:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45out
 800eaec:	78bb      	ldrb	r3, [r7, #2]
 800eaee:	4a06      	ldr	r2, [pc, #24]	; (800eb08 <pass_route3+0x250>)
 800eaf0:	21f8      	movs	r1, #248	; 0xf8
 800eaf2:	54d1      	strb	r1, [r2, r3]
			v_flag = 0;
 800eaf4:	4b03      	ldr	r3, [pc, #12]	; (800eb04 <pass_route3+0x24c>)
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	3302      	adds	r3, #2
 800eafe:	607b      	str	r3, [r7, #4]
 800eb00:	e1e6      	b.n	800eed0 <pass_route3+0x618>
 800eb02:	bf00      	nop
 800eb04:	20000b28 	.word	0x20000b28
 800eb08:	20000388 	.word	0x20000388
 800eb0c:	20000c9c 	.word	0x20000c9c
 800eb10:	2000160c 	.word	0x2000160c
		}else if(v_flag == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x11){
 800eb14:	4ba0      	ldr	r3, [pc, #640]	; (800ed98 <pass_route3+0x4e0>)
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d11e      	bne.n	800eb5a <pass_route3+0x2a2>
 800eb1c:	4a9f      	ldr	r2, [pc, #636]	; (800ed9c <pass_route3+0x4e4>)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	4413      	add	r3, r2
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	2b44      	cmp	r3, #68	; 0x44
 800eb26:	d118      	bne.n	800eb5a <pass_route3+0x2a2>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	3301      	adds	r3, #1
 800eb2c:	4a9b      	ldr	r2, [pc, #620]	; (800ed9c <pass_route3+0x4e4>)
 800eb2e:	5cd3      	ldrb	r3, [r2, r3]
 800eb30:	2b44      	cmp	r3, #68	; 0x44
 800eb32:	d112      	bne.n	800eb5a <pass_route3+0x2a2>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	3302      	adds	r3, #2
 800eb38:	4a98      	ldr	r2, [pc, #608]	; (800ed9c <pass_route3+0x4e4>)
 800eb3a:	5cd3      	ldrb	r3, [r2, r3]
 800eb3c:	2b11      	cmp	r3, #17
 800eb3e:	d10c      	bne.n	800eb5a <pass_route3+0x2a2>
			s_flag = 0;
 800eb40:	2300      	movs	r3, #0
 800eb42:	70fb      	strb	r3, [r7, #3]
			pass[p] = -9;							//a斜め右V90
 800eb44:	78bb      	ldrb	r3, [r7, #2]
 800eb46:	4a96      	ldr	r2, [pc, #600]	; (800eda0 <pass_route3+0x4e8>)
 800eb48:	21f7      	movs	r1, #247	; 0xf7
 800eb4a:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 800eb4c:	4b92      	ldr	r3, [pc, #584]	; (800ed98 <pass_route3+0x4e0>)
 800eb4e:	2201      	movs	r2, #1
 800eb50:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	3302      	adds	r3, #2
 800eb56:	607b      	str	r3, [r7, #4]
 800eb58:	e1ba      	b.n	800eed0 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x44){
 800eb5a:	4b8f      	ldr	r3, [pc, #572]	; (800ed98 <pass_route3+0x4e0>)
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	2b01      	cmp	r3, #1
 800eb60:	d11e      	bne.n	800eba0 <pass_route3+0x2e8>
 800eb62:	4a8e      	ldr	r2, [pc, #568]	; (800ed9c <pass_route3+0x4e4>)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	4413      	add	r3, r2
 800eb68:	781b      	ldrb	r3, [r3, #0]
 800eb6a:	2b11      	cmp	r3, #17
 800eb6c:	d118      	bne.n	800eba0 <pass_route3+0x2e8>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	3301      	adds	r3, #1
 800eb72:	4a8a      	ldr	r2, [pc, #552]	; (800ed9c <pass_route3+0x4e4>)
 800eb74:	5cd3      	ldrb	r3, [r2, r3]
 800eb76:	2b11      	cmp	r3, #17
 800eb78:	d112      	bne.n	800eba0 <pass_route3+0x2e8>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	3302      	adds	r3, #2
 800eb7e:	4a87      	ldr	r2, [pc, #540]	; (800ed9c <pass_route3+0x4e4>)
 800eb80:	5cd3      	ldrb	r3, [r2, r3]
 800eb82:	2b44      	cmp	r3, #68	; 0x44
 800eb84:	d10c      	bne.n	800eba0 <pass_route3+0x2e8>
			s_flag = 0;
 800eb86:	2300      	movs	r3, #0
 800eb88:	70fb      	strb	r3, [r7, #3]
			pass[p] = -10;							//a斜め左V90
 800eb8a:	78bb      	ldrb	r3, [r7, #2]
 800eb8c:	4a84      	ldr	r2, [pc, #528]	; (800eda0 <pass_route3+0x4e8>)
 800eb8e:	21f6      	movs	r1, #246	; 0xf6
 800eb90:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 800eb92:	4b81      	ldr	r3, [pc, #516]	; (800ed98 <pass_route3+0x4e0>)
 800eb94:	2201      	movs	r2, #1
 800eb96:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	3302      	adds	r3, #2
 800eb9c:	607b      	str	r3, [r7, #4]
 800eb9e:	e197      	b.n	800eed0 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x11){
 800eba0:	4a7e      	ldr	r2, [pc, #504]	; (800ed9c <pass_route3+0x4e4>)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4413      	add	r3, r2
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	2b77      	cmp	r3, #119	; 0x77
 800ebaa:	d124      	bne.n	800ebf6 <pass_route3+0x33e>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	3301      	adds	r3, #1
 800ebb0:	4a7a      	ldr	r2, [pc, #488]	; (800ed9c <pass_route3+0x4e4>)
 800ebb2:	5cd3      	ldrb	r3, [r2, r3]
 800ebb4:	2b44      	cmp	r3, #68	; 0x44
 800ebb6:	d11e      	bne.n	800ebf6 <pass_route3+0x33e>
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	3302      	adds	r3, #2
 800ebbc:	4a77      	ldr	r2, [pc, #476]	; (800ed9c <pass_route3+0x4e4>)
 800ebbe:	5cd3      	ldrb	r3, [r2, r3]
 800ebc0:	2b44      	cmp	r3, #68	; 0x44
 800ebc2:	d118      	bne.n	800ebf6 <pass_route3+0x33e>
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	3303      	adds	r3, #3
 800ebc8:	4a74      	ldr	r2, [pc, #464]	; (800ed9c <pass_route3+0x4e4>)
 800ebca:	5cd3      	ldrb	r3, [r2, r3]
 800ebcc:	2b11      	cmp	r3, #17
 800ebce:	d112      	bne.n	800ebf6 <pass_route3+0x33e>
			s_flag = 0;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135in
 800ebd4:	78bb      	ldrb	r3, [r7, #2]
 800ebd6:	4a72      	ldr	r2, [pc, #456]	; (800eda0 <pass_route3+0x4e8>)
 800ebd8:	21f5      	movs	r1, #245	; 0xf5
 800ebda:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 800ebdc:	4b6e      	ldr	r3, [pc, #440]	; (800ed98 <pass_route3+0x4e0>)
 800ebde:	2201      	movs	r2, #1
 800ebe0:	701a      	strb	r2, [r3, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d102      	bne.n	800ebee <pass_route3+0x336>
				start_flag = 2;
 800ebe8:	4b6e      	ldr	r3, [pc, #440]	; (800eda4 <pass_route3+0x4ec>)
 800ebea:	2202      	movs	r2, #2
 800ebec:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	3303      	adds	r3, #3
 800ebf2:	607b      	str	r3, [r7, #4]
 800ebf4:	e16c      	b.n	800eed0 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x77){
 800ebf6:	4b68      	ldr	r3, [pc, #416]	; (800ed98 <pass_route3+0x4e0>)
 800ebf8:	781b      	ldrb	r3, [r3, #0]
 800ebfa:	2b01      	cmp	r3, #1
 800ebfc:	d11e      	bne.n	800ec3c <pass_route3+0x384>
 800ebfe:	4a67      	ldr	r2, [pc, #412]	; (800ed9c <pass_route3+0x4e4>)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	4413      	add	r3, r2
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	2b44      	cmp	r3, #68	; 0x44
 800ec08:	d118      	bne.n	800ec3c <pass_route3+0x384>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	4a63      	ldr	r2, [pc, #396]	; (800ed9c <pass_route3+0x4e4>)
 800ec10:	5cd3      	ldrb	r3, [r2, r3]
 800ec12:	2b44      	cmp	r3, #68	; 0x44
 800ec14:	d112      	bne.n	800ec3c <pass_route3+0x384>
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	3302      	adds	r3, #2
 800ec1a:	4a60      	ldr	r2, [pc, #384]	; (800ed9c <pass_route3+0x4e4>)
 800ec1c:	5cd3      	ldrb	r3, [r2, r3]
 800ec1e:	2b77      	cmp	r3, #119	; 0x77
 800ec20:	d10c      	bne.n	800ec3c <pass_route3+0x384>
			s_flag = 0;
 800ec22:	2300      	movs	r3, #0
 800ec24:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135out
 800ec26:	78bb      	ldrb	r3, [r7, #2]
 800ec28:	4a5d      	ldr	r2, [pc, #372]	; (800eda0 <pass_route3+0x4e8>)
 800ec2a:	21f5      	movs	r1, #245	; 0xf5
 800ec2c:	54d1      	strb	r1, [r2, r3]
			v_flag = 0;
 800ec2e:	4b5a      	ldr	r3, [pc, #360]	; (800ed98 <pass_route3+0x4e0>)
 800ec30:	2200      	movs	r2, #0
 800ec32:	701a      	strb	r2, [r3, #0]
			i = i + 3;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	3303      	adds	r3, #3
 800ec38:	607b      	str	r3, [r7, #4]
 800ec3a:	e149      	b.n	800eed0 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x44){
 800ec3c:	4a57      	ldr	r2, [pc, #348]	; (800ed9c <pass_route3+0x4e4>)
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	4413      	add	r3, r2
 800ec42:	781b      	ldrb	r3, [r3, #0]
 800ec44:	2b77      	cmp	r3, #119	; 0x77
 800ec46:	d11e      	bne.n	800ec86 <pass_route3+0x3ce>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	4a53      	ldr	r2, [pc, #332]	; (800ed9c <pass_route3+0x4e4>)
 800ec4e:	5cd3      	ldrb	r3, [r2, r3]
 800ec50:	2b11      	cmp	r3, #17
 800ec52:	d118      	bne.n	800ec86 <pass_route3+0x3ce>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	3302      	adds	r3, #2
 800ec58:	4a50      	ldr	r2, [pc, #320]	; (800ed9c <pass_route3+0x4e4>)
 800ec5a:	5cd3      	ldrb	r3, [r2, r3]
 800ec5c:	2b11      	cmp	r3, #17
 800ec5e:	d112      	bne.n	800ec86 <pass_route3+0x3ce>
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	3303      	adds	r3, #3
 800ec64:	4a4d      	ldr	r2, [pc, #308]	; (800ed9c <pass_route3+0x4e4>)
 800ec66:	5cd3      	ldrb	r3, [r2, r3]
 800ec68:	2b44      	cmp	r3, #68	; 0x44
 800ec6a:	d10c      	bne.n	800ec86 <pass_route3+0x3ce>
			s_flag = 0;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135in
 800ec70:	78bb      	ldrb	r3, [r7, #2]
 800ec72:	4a4b      	ldr	r2, [pc, #300]	; (800eda0 <pass_route3+0x4e8>)
 800ec74:	21f4      	movs	r1, #244	; 0xf4
 800ec76:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 800ec78:	4b47      	ldr	r3, [pc, #284]	; (800ed98 <pass_route3+0x4e0>)
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	701a      	strb	r2, [r3, #0]
			i = i + 3;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	3303      	adds	r3, #3
 800ec82:	607b      	str	r3, [r7, #4]
 800ec84:	e124      	b.n	800eed0 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x77){
 800ec86:	4b44      	ldr	r3, [pc, #272]	; (800ed98 <pass_route3+0x4e0>)
 800ec88:	781b      	ldrb	r3, [r3, #0]
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	d11e      	bne.n	800eccc <pass_route3+0x414>
 800ec8e:	4a43      	ldr	r2, [pc, #268]	; (800ed9c <pass_route3+0x4e4>)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	4413      	add	r3, r2
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	2b11      	cmp	r3, #17
 800ec98:	d118      	bne.n	800eccc <pass_route3+0x414>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	4a3f      	ldr	r2, [pc, #252]	; (800ed9c <pass_route3+0x4e4>)
 800eca0:	5cd3      	ldrb	r3, [r2, r3]
 800eca2:	2b11      	cmp	r3, #17
 800eca4:	d112      	bne.n	800eccc <pass_route3+0x414>
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	3302      	adds	r3, #2
 800ecaa:	4a3c      	ldr	r2, [pc, #240]	; (800ed9c <pass_route3+0x4e4>)
 800ecac:	5cd3      	ldrb	r3, [r2, r3]
 800ecae:	2b77      	cmp	r3, #119	; 0x77
 800ecb0:	d10c      	bne.n	800eccc <pass_route3+0x414>
			s_flag = 0;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135out
 800ecb6:	78bb      	ldrb	r3, [r7, #2]
 800ecb8:	4a39      	ldr	r2, [pc, #228]	; (800eda0 <pass_route3+0x4e8>)
 800ecba:	21f4      	movs	r1, #244	; 0xf4
 800ecbc:	54d1      	strb	r1, [r2, r3]
			v_flag = 0;
 800ecbe:	4b36      	ldr	r3, [pc, #216]	; (800ed98 <pass_route3+0x4e0>)
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	701a      	strb	r2, [r3, #0]
			i = i + 3;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	3303      	adds	r3, #3
 800ecc8:	607b      	str	r3, [r7, #4]
 800ecca:	e101      	b.n	800eed0 <pass_route3+0x618>
		}else if(route[i] == 0xff){
 800eccc:	4a33      	ldr	r2, [pc, #204]	; (800ed9c <pass_route3+0x4e4>)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	4413      	add	r3, r2
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	2bff      	cmp	r3, #255	; 0xff
 800ecd6:	d167      	bne.n	800eda8 <pass_route3+0x4f0>
			if(v_flag == 1){
 800ecd8:	4b2f      	ldr	r3, [pc, #188]	; (800ed98 <pass_route3+0x4e0>)
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d152      	bne.n	800ed86 <pass_route3+0x4ce>
				if(pass[p-1] == -1 && pass[p-2] == -1){
 800ece0:	78bb      	ldrb	r3, [r7, #2]
 800ece2:	3b01      	subs	r3, #1
 800ece4:	4a2e      	ldr	r2, [pc, #184]	; (800eda0 <pass_route3+0x4e8>)
 800ece6:	56d3      	ldrsb	r3, [r2, r3]
 800ece8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecec:	d111      	bne.n	800ed12 <pass_route3+0x45a>
 800ecee:	78bb      	ldrb	r3, [r7, #2]
 800ecf0:	3b02      	subs	r3, #2
 800ecf2:	4a2b      	ldr	r2, [pc, #172]	; (800eda0 <pass_route3+0x4e8>)
 800ecf4:	56d3      	ldrsb	r3, [r2, r3]
 800ecf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecfa:	d10a      	bne.n	800ed12 <pass_route3+0x45a>
					pass[p-2] = -15;
 800ecfc:	78bb      	ldrb	r3, [r7, #2]
 800ecfe:	3b02      	subs	r3, #2
 800ed00:	4a27      	ldr	r2, [pc, #156]	; (800eda0 <pass_route3+0x4e8>)
 800ed02:	21f1      	movs	r1, #241	; 0xf1
 800ed04:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 800ed06:	78bb      	ldrb	r3, [r7, #2]
 800ed08:	3b01      	subs	r3, #1
 800ed0a:	4a25      	ldr	r2, [pc, #148]	; (800eda0 <pass_route3+0x4e8>)
 800ed0c:	218e      	movs	r1, #142	; 0x8e
 800ed0e:	54d1      	strb	r1, [r2, r3]
 800ed10:	e039      	b.n	800ed86 <pass_route3+0x4ce>
				}else if(pass[p-1] == -2 && pass[p-2] == -2){
 800ed12:	78bb      	ldrb	r3, [r7, #2]
 800ed14:	3b01      	subs	r3, #1
 800ed16:	4a22      	ldr	r2, [pc, #136]	; (800eda0 <pass_route3+0x4e8>)
 800ed18:	56d3      	ldrsb	r3, [r2, r3]
 800ed1a:	f113 0f02 	cmn.w	r3, #2
 800ed1e:	d111      	bne.n	800ed44 <pass_route3+0x48c>
 800ed20:	78bb      	ldrb	r3, [r7, #2]
 800ed22:	3b02      	subs	r3, #2
 800ed24:	4a1e      	ldr	r2, [pc, #120]	; (800eda0 <pass_route3+0x4e8>)
 800ed26:	56d3      	ldrsb	r3, [r2, r3]
 800ed28:	f113 0f02 	cmn.w	r3, #2
 800ed2c:	d10a      	bne.n	800ed44 <pass_route3+0x48c>
					pass[p-2] = -16;
 800ed2e:	78bb      	ldrb	r3, [r7, #2]
 800ed30:	3b02      	subs	r3, #2
 800ed32:	4a1b      	ldr	r2, [pc, #108]	; (800eda0 <pass_route3+0x4e8>)
 800ed34:	21f0      	movs	r1, #240	; 0xf0
 800ed36:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 800ed38:	78bb      	ldrb	r3, [r7, #2]
 800ed3a:	3b01      	subs	r3, #1
 800ed3c:	4a18      	ldr	r2, [pc, #96]	; (800eda0 <pass_route3+0x4e8>)
 800ed3e:	218e      	movs	r1, #142	; 0x8e
 800ed40:	54d1      	strb	r1, [r2, r3]
 800ed42:	e020      	b.n	800ed86 <pass_route3+0x4ce>
				}else if(pass[p-1] == -1){
 800ed44:	78bb      	ldrb	r3, [r7, #2]
 800ed46:	3b01      	subs	r3, #1
 800ed48:	4a15      	ldr	r2, [pc, #84]	; (800eda0 <pass_route3+0x4e8>)
 800ed4a:	56d3      	ldrsb	r3, [r2, r3]
 800ed4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed50:	d109      	bne.n	800ed66 <pass_route3+0x4ae>
					pass[p-1] = -13;
 800ed52:	78bb      	ldrb	r3, [r7, #2]
 800ed54:	3b01      	subs	r3, #1
 800ed56:	4a12      	ldr	r2, [pc, #72]	; (800eda0 <pass_route3+0x4e8>)
 800ed58:	21f3      	movs	r1, #243	; 0xf3
 800ed5a:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 800ed5c:	78bb      	ldrb	r3, [r7, #2]
 800ed5e:	4a10      	ldr	r2, [pc, #64]	; (800eda0 <pass_route3+0x4e8>)
 800ed60:	218e      	movs	r1, #142	; 0x8e
 800ed62:	54d1      	strb	r1, [r2, r3]
 800ed64:	e00f      	b.n	800ed86 <pass_route3+0x4ce>
				}else if(pass[p-1] == -2){
 800ed66:	78bb      	ldrb	r3, [r7, #2]
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	4a0d      	ldr	r2, [pc, #52]	; (800eda0 <pass_route3+0x4e8>)
 800ed6c:	56d3      	ldrsb	r3, [r2, r3]
 800ed6e:	f113 0f02 	cmn.w	r3, #2
 800ed72:	d108      	bne.n	800ed86 <pass_route3+0x4ce>
					pass[p-1] = -14;
 800ed74:	78bb      	ldrb	r3, [r7, #2]
 800ed76:	3b01      	subs	r3, #1
 800ed78:	4a09      	ldr	r2, [pc, #36]	; (800eda0 <pass_route3+0x4e8>)
 800ed7a:	21f2      	movs	r1, #242	; 0xf2
 800ed7c:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 800ed7e:	78bb      	ldrb	r3, [r7, #2]
 800ed80:	4a07      	ldr	r2, [pc, #28]	; (800eda0 <pass_route3+0x4e8>)
 800ed82:	218e      	movs	r1, #142	; 0x8e
 800ed84:	54d1      	strb	r1, [r2, r3]
				}
			}
			pass[p] = -114;							//a終了用配列
 800ed86:	78bb      	ldrb	r3, [r7, #2]
 800ed88:	4a05      	ldr	r2, [pc, #20]	; (800eda0 <pass_route3+0x4e8>)
 800ed8a:	218e      	movs	r1, #142	; 0x8e
 800ed8c:	54d1      	strb	r1, [r2, r3]
			i++;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	3301      	adds	r3, #1
 800ed92:	607b      	str	r3, [r7, #4]
 800ed94:	e09c      	b.n	800eed0 <pass_route3+0x618>
 800ed96:	bf00      	nop
 800ed98:	20000b28 	.word	0x20000b28
 800ed9c:	20000c9c 	.word	0x20000c9c
 800eda0:	20000388 	.word	0x20000388
 800eda4:	2000160c 	.word	0x2000160c
		}else if(v_flag == 1 && route[i] == 0x44 && route[i+1] == 0x11){
 800eda8:	4b51      	ldr	r3, [pc, #324]	; (800eef0 <pass_route3+0x638>)
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	2b01      	cmp	r3, #1
 800edae:	d118      	bne.n	800ede2 <pass_route3+0x52a>
 800edb0:	4a50      	ldr	r2, [pc, #320]	; (800eef4 <pass_route3+0x63c>)
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	4413      	add	r3, r2
 800edb6:	781b      	ldrb	r3, [r3, #0]
 800edb8:	2b44      	cmp	r3, #68	; 0x44
 800edba:	d112      	bne.n	800ede2 <pass_route3+0x52a>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	3301      	adds	r3, #1
 800edc0:	4a4c      	ldr	r2, [pc, #304]	; (800eef4 <pass_route3+0x63c>)
 800edc2:	5cd3      	ldrb	r3, [r2, r3]
 800edc4:	2b11      	cmp	r3, #17
 800edc6:	d10c      	bne.n	800ede2 <pass_route3+0x52a>
			s_flag = 0;
 800edc8:	2300      	movs	r3, #0
 800edca:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 800edcc:	78bb      	ldrb	r3, [r7, #2]
 800edce:	4a4a      	ldr	r2, [pc, #296]	; (800eef8 <pass_route3+0x640>)
 800edd0:	2140      	movs	r1, #64	; 0x40
 800edd2:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 800edd4:	4b46      	ldr	r3, [pc, #280]	; (800eef0 <pass_route3+0x638>)
 800edd6:	2201      	movs	r2, #1
 800edd8:	701a      	strb	r2, [r3, #0]
			i++;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	3301      	adds	r3, #1
 800edde:	607b      	str	r3, [r7, #4]
 800ede0:	e076      	b.n	800eed0 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x11 && route[i+1] == 0x44){
 800ede2:	4b43      	ldr	r3, [pc, #268]	; (800eef0 <pass_route3+0x638>)
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d118      	bne.n	800ee1c <pass_route3+0x564>
 800edea:	4a42      	ldr	r2, [pc, #264]	; (800eef4 <pass_route3+0x63c>)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	4413      	add	r3, r2
 800edf0:	781b      	ldrb	r3, [r3, #0]
 800edf2:	2b11      	cmp	r3, #17
 800edf4:	d112      	bne.n	800ee1c <pass_route3+0x564>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	3301      	adds	r3, #1
 800edfa:	4a3e      	ldr	r2, [pc, #248]	; (800eef4 <pass_route3+0x63c>)
 800edfc:	5cd3      	ldrb	r3, [r2, r3]
 800edfe:	2b44      	cmp	r3, #68	; 0x44
 800ee00:	d10c      	bne.n	800ee1c <pass_route3+0x564>
			s_flag = 0;
 800ee02:	2300      	movs	r3, #0
 800ee04:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 800ee06:	78bb      	ldrb	r3, [r7, #2]
 800ee08:	4a3b      	ldr	r2, [pc, #236]	; (800eef8 <pass_route3+0x640>)
 800ee0a:	2140      	movs	r1, #64	; 0x40
 800ee0c:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 800ee0e:	4b38      	ldr	r3, [pc, #224]	; (800eef0 <pass_route3+0x638>)
 800ee10:	2201      	movs	r2, #1
 800ee12:	701a      	strb	r2, [r3, #0]
			i++;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	3301      	adds	r3, #1
 800ee18:	607b      	str	r3, [r7, #4]
 800ee1a:	e059      	b.n	800eed0 <pass_route3+0x618>
		}else if(route[i] == 0x44){
 800ee1c:	4a35      	ldr	r2, [pc, #212]	; (800eef4 <pass_route3+0x63c>)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	4413      	add	r3, r2
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	2b44      	cmp	r3, #68	; 0x44
 800ee26:	d107      	bne.n	800ee38 <pass_route3+0x580>
			pass[p] = -1;							//a右スラローム
 800ee28:	78bb      	ldrb	r3, [r7, #2]
 800ee2a:	4a33      	ldr	r2, [pc, #204]	; (800eef8 <pass_route3+0x640>)
 800ee2c:	21ff      	movs	r1, #255	; 0xff
 800ee2e:	54d1      	strb	r1, [r2, r3]
			i++;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	3301      	adds	r3, #1
 800ee34:	607b      	str	r3, [r7, #4]
 800ee36:	e04b      	b.n	800eed0 <pass_route3+0x618>
		}else if(route[i] == 0x11){
 800ee38:	4a2e      	ldr	r2, [pc, #184]	; (800eef4 <pass_route3+0x63c>)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	4413      	add	r3, r2
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	2b11      	cmp	r3, #17
 800ee42:	d107      	bne.n	800ee54 <pass_route3+0x59c>
			pass[p] = -2;							//a左スラローム
 800ee44:	78bb      	ldrb	r3, [r7, #2]
 800ee46:	4a2c      	ldr	r2, [pc, #176]	; (800eef8 <pass_route3+0x640>)
 800ee48:	21fe      	movs	r1, #254	; 0xfe
 800ee4a:	54d1      	strb	r1, [r2, r3]
			i++;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	3301      	adds	r3, #1
 800ee50:	607b      	str	r3, [r7, #4]
 800ee52:	e03d      	b.n	800eed0 <pass_route3+0x618>
		}else if(route[i] == 0x77){
 800ee54:	4a27      	ldr	r2, [pc, #156]	; (800eef4 <pass_route3+0x63c>)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	4413      	add	r3, r2
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	2b77      	cmp	r3, #119	; 0x77
 800ee5e:	d137      	bne.n	800eed0 <pass_route3+0x618>
			if(s_flag){
 800ee60:	78fb      	ldrb	r3, [r7, #3]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d012      	beq.n	800ee8c <pass_route3+0x5d4>
				pass[p-1]++;						//aスラローム前半直線追加
 800ee66:	78bb      	ldrb	r3, [r7, #2]
 800ee68:	3b01      	subs	r3, #1
 800ee6a:	4a23      	ldr	r2, [pc, #140]	; (800eef8 <pass_route3+0x640>)
 800ee6c:	56d2      	ldrsb	r2, [r2, r3]
 800ee6e:	b2d2      	uxtb	r2, r2
 800ee70:	3201      	adds	r2, #1
 800ee72:	b2d2      	uxtb	r2, r2
 800ee74:	b251      	sxtb	r1, r2
 800ee76:	4a20      	ldr	r2, [pc, #128]	; (800eef8 <pass_route3+0x640>)
 800ee78:	54d1      	strb	r1, [r2, r3]
				p--;
 800ee7a:	78bb      	ldrb	r3, [r7, #2]
 800ee7c:	3b01      	subs	r3, #1
 800ee7e:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 800ee80:	2300      	movs	r3, #0
 800ee82:	70fb      	strb	r3, [r7, #3]
				i++;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	3301      	adds	r3, #1
 800ee88:	607b      	str	r3, [r7, #4]
 800ee8a:	e021      	b.n	800eed0 <pass_route3+0x618>
			}else{
				s++;
 800ee8c:	787b      	ldrb	r3, [r7, #1]
 800ee8e:	3301      	adds	r3, #1
 800ee90:	707b      	strb	r3, [r7, #1]
				pass[p] = s;						//aもし半直線1つだけの場合whileには入らない
 800ee92:	78bb      	ldrb	r3, [r7, #2]
 800ee94:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800ee98:	4a17      	ldr	r2, [pc, #92]	; (800eef8 <pass_route3+0x640>)
 800ee9a:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 800ee9c:	e00c      	b.n	800eeb8 <pass_route3+0x600>
					s_flag = 1;
 800ee9e:	2301      	movs	r3, #1
 800eea0:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;					//a半直線2つ以上続く場合、最後半直線は大回り用に残す
 800eea2:	78bb      	ldrb	r3, [r7, #2]
 800eea4:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800eea8:	4a13      	ldr	r2, [pc, #76]	; (800eef8 <pass_route3+0x640>)
 800eeaa:	54d1      	strb	r1, [r2, r3]
					i++;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	3301      	adds	r3, #1
 800eeb0:	607b      	str	r3, [r7, #4]
					s++;
 800eeb2:	787b      	ldrb	r3, [r7, #1]
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	3301      	adds	r3, #1
 800eebc:	4a0d      	ldr	r2, [pc, #52]	; (800eef4 <pass_route3+0x63c>)
 800eebe:	5cd3      	ldrb	r3, [r2, r3]
 800eec0:	2b77      	cmp	r3, #119	; 0x77
 800eec2:	d0ec      	beq.n	800ee9e <pass_route3+0x5e6>
				}
				if(!s_flag){
 800eec4:	78fb      	ldrb	r3, [r7, #3]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d102      	bne.n	800eed0 <pass_route3+0x618>
					i++;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	3301      	adds	r3, #1
 800eece:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 800eed0:	78bb      	ldrb	r3, [r7, #2]
 800eed2:	3301      	adds	r3, #1
 800eed4:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	3b01      	subs	r3, #1
 800eeda:	4a06      	ldr	r2, [pc, #24]	; (800eef4 <pass_route3+0x63c>)
 800eedc:	5cd3      	ldrb	r3, [r2, r3]
 800eede:	2bff      	cmp	r3, #255	; 0xff
 800eee0:	f47f ad07 	bne.w	800e8f2 <pass_route3+0x3a>
	}
}
 800eee4:	bf00      	nop
 800eee6:	370c      	adds	r7, #12
 800eee8:	46bd      	mov	sp, r7
 800eeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeee:	4770      	bx	lr
 800eef0:	20000b28 	.word	0x20000b28
 800eef4:	20000c9c 	.word	0x20000c9c
 800eef8:	20000388 	.word	0x20000388

0800eefc <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b082      	sub	sp, #8
 800ef00:	af00      	add	r7, sp, #0
	printf("eprom func start \n");
 800ef02:	4818      	ldr	r0, [pc, #96]	; (800ef64 <store_map_in_eeprom+0x68>)
 800ef04:	f000 ff28 	bl	800fd58 <puts>
	eeprom_enable_write();
 800ef08:	f7fb f866 	bl	8009fd8 <eeprom_enable_write>
	printf("eprom enable_write fin \n");
 800ef0c:	4816      	ldr	r0, [pc, #88]	; (800ef68 <store_map_in_eeprom+0x6c>)
 800ef0e:	f000 ff23 	bl	800fd58 <puts>
	int i;
	for(i = 0; i < 16; i++){
 800ef12:	2300      	movs	r3, #0
 800ef14:	607b      	str	r3, [r7, #4]
 800ef16:	e01b      	b.n	800ef50 <store_map_in_eeprom+0x54>
		int j;
		for(j = 0; j < 16; j++){
 800ef18:	2300      	movs	r3, #0
 800ef1a:	603b      	str	r3, [r7, #0]
 800ef1c:	e012      	b.n	800ef44 <store_map_in_eeprom+0x48>
			eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	011a      	lsls	r2, r3, #4
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	4413      	add	r3, r2
 800ef26:	4618      	mov	r0, r3
 800ef28:	4a10      	ldr	r2, [pc, #64]	; (800ef6c <store_map_in_eeprom+0x70>)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	011b      	lsls	r3, r3, #4
 800ef2e:	441a      	add	r2, r3
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	4413      	add	r3, r2
 800ef34:	781b      	ldrb	r3, [r3, #0]
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	4619      	mov	r1, r3
 800ef3a:	f7fb f878 	bl	800a02e <eeprom_write_halfword>
		for(j = 0; j < 16; j++){
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	3301      	adds	r3, #1
 800ef42:	603b      	str	r3, [r7, #0]
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	2b0f      	cmp	r3, #15
 800ef48:	dde9      	ble.n	800ef1e <store_map_in_eeprom+0x22>
	for(i = 0; i < 16; i++){
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	607b      	str	r3, [r7, #4]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2b0f      	cmp	r3, #15
 800ef54:	dde0      	ble.n	800ef18 <store_map_in_eeprom+0x1c>
		}
	}
	eeprom_disable_write();
 800ef56:	f7fb f863 	bl	800a020 <eeprom_disable_write>
}
 800ef5a:	bf00      	nop
 800ef5c:	3708      	adds	r7, #8
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	080113bc 	.word	0x080113bc
 800ef68:	080113d0 	.word	0x080113d0
 800ef6c:	200001e4 	.word	0x200001e4

0800ef70 <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 16; i++){
 800ef76:	2300      	movs	r3, #0
 800ef78:	607b      	str	r3, [r7, #4]
 800ef7a:	e01c      	b.n	800efb6 <load_map_from_eeprom+0x46>
		int j;
		for(j = 0; j < 16; j++){
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	603b      	str	r3, [r7, #0]
 800ef80:	e013      	b.n	800efaa <load_map_from_eeprom+0x3a>
			map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	011a      	lsls	r2, r3, #4
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	4413      	add	r3, r2
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7fb f86c 	bl	800a068 <eeprom_read_halfword>
 800ef90:	4603      	mov	r3, r0
 800ef92:	b2d9      	uxtb	r1, r3
 800ef94:	4a0b      	ldr	r2, [pc, #44]	; (800efc4 <load_map_from_eeprom+0x54>)
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	011b      	lsls	r3, r3, #4
 800ef9a:	441a      	add	r2, r3
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	4413      	add	r3, r2
 800efa0:	460a      	mov	r2, r1
 800efa2:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 16; j++){
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	3301      	adds	r3, #1
 800efa8:	603b      	str	r3, [r7, #0]
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	2b0f      	cmp	r3, #15
 800efae:	dde8      	ble.n	800ef82 <load_map_from_eeprom+0x12>
	for(i = 0; i < 16; i++){
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	3301      	adds	r3, #1
 800efb4:	607b      	str	r3, [r7, #4]
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2b0f      	cmp	r3, #15
 800efba:	dddf      	ble.n	800ef7c <load_map_from_eeprom+0xc>
		}
	}
}
 800efbc:	bf00      	nop
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	200001e4 	.word	0x200001e4

0800efc8 <sensor_init>:

#include "global.h"


void sensor_init(void){
 800efc8:	b480      	push	{r7}
 800efca:	af00      	add	r7, sp, #0
	tp = 0;
 800efcc:	4b0e      	ldr	r3, [pc, #56]	; (800f008 <sensor_init+0x40>)
 800efce:	2200      	movs	r2, #0
 800efd0:	701a      	strb	r2, [r3, #0]
	ad_l = ad_r = ad_fr = ad_fl = 0;
 800efd2:	4b0e      	ldr	r3, [pc, #56]	; (800f00c <sensor_init+0x44>)
 800efd4:	2200      	movs	r2, #0
 800efd6:	601a      	str	r2, [r3, #0]
 800efd8:	4b0c      	ldr	r3, [pc, #48]	; (800f00c <sensor_init+0x44>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4a0c      	ldr	r2, [pc, #48]	; (800f010 <sensor_init+0x48>)
 800efde:	6013      	str	r3, [r2, #0]
 800efe0:	4b0b      	ldr	r3, [pc, #44]	; (800f010 <sensor_init+0x48>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4a0b      	ldr	r2, [pc, #44]	; (800f014 <sensor_init+0x4c>)
 800efe6:	6013      	str	r3, [r2, #0]
 800efe8:	4b0a      	ldr	r3, [pc, #40]	; (800f014 <sensor_init+0x4c>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	4a0a      	ldr	r2, [pc, #40]	; (800f018 <sensor_init+0x50>)
 800efee:	6013      	str	r3, [r2, #0]
	base_l = base_r = 0;
 800eff0:	4b0a      	ldr	r3, [pc, #40]	; (800f01c <sensor_init+0x54>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	801a      	strh	r2, [r3, #0]
 800eff6:	4b09      	ldr	r3, [pc, #36]	; (800f01c <sensor_init+0x54>)
 800eff8:	881a      	ldrh	r2, [r3, #0]
 800effa:	4b09      	ldr	r3, [pc, #36]	; (800f020 <sensor_init+0x58>)
 800effc:	801a      	strh	r2, [r3, #0]
}
 800effe:	bf00      	nop
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr
 800f008:	200012e4 	.word	0x200012e4
 800f00c:	20000d9c 	.word	0x20000d9c
 800f010:	20000c48 	.word	0x20000c48
 800f014:	20000fa8 	.word	0x20000fa8
 800f018:	20000b3c 	.word	0x20000b3c
 800f01c:	200002f8 	.word	0x200002f8
 800f020:	20000384 	.word	0x20000384

0800f024 <get_base>:


uint8_t get_base(){
 800f024:	b480      	push	{r7}
 800f026:	b083      	sub	sp, #12
 800f028:	af00      	add	r7, sp, #0
	uint8_t res = 1;									//for return
 800f02a:	2301      	movs	r3, #1
 800f02c:	71fb      	strb	r3, [r7, #7]

	base_l = ad_l;										//sensor value base L
 800f02e:	4b08      	ldr	r3, [pc, #32]	; (800f050 <get_base+0x2c>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	b29a      	uxth	r2, r3
 800f034:	4b07      	ldr	r3, [pc, #28]	; (800f054 <get_base+0x30>)
 800f036:	801a      	strh	r2, [r3, #0]
	base_r = ad_r;										//sensor value base R
 800f038:	4b07      	ldr	r3, [pc, #28]	; (800f058 <get_base+0x34>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	b29a      	uxth	r2, r3
 800f03e:	4b07      	ldr	r3, [pc, #28]	; (800f05c <get_base+0x38>)
 800f040:	801a      	strh	r2, [r3, #0]

	return res;											//
 800f042:	79fb      	ldrb	r3, [r7, #7]
}
 800f044:	4618      	mov	r0, r3
 800f046:	370c      	adds	r7, #12
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr
 800f050:	20000b3c 	.word	0x20000b3c
 800f054:	20000384 	.word	0x20000384
 800f058:	20000fa8 	.word	0x20000fa8
 800f05c:	200002f8 	.word	0x200002f8

0800f060 <get_wall_info>:


void get_wall_info(){
 800f060:	b480      	push	{r7}
 800f062:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 800f064:	4b16      	ldr	r3, [pc, #88]	; (800f0c0 <get_wall_info+0x60>)
 800f066:	2200      	movs	r2, #0
 800f068:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 800f06a:	4b16      	ldr	r3, [pc, #88]	; (800f0c4 <get_wall_info+0x64>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2b5a      	cmp	r3, #90	; 0x5a
 800f070:	d803      	bhi.n	800f07a <get_wall_info+0x1a>
 800f072:	4b15      	ldr	r3, [pc, #84]	; (800f0c8 <get_wall_info+0x68>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	2bc8      	cmp	r3, #200	; 0xc8
 800f078:	d906      	bls.n	800f088 <get_wall_info+0x28>
		wall_info |= 0x88;								//forward check
 800f07a:	4b11      	ldr	r3, [pc, #68]	; (800f0c0 <get_wall_info+0x60>)
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	f063 0377 	orn	r3, r3, #119	; 0x77
 800f082:	b2da      	uxtb	r2, r3
 800f084:	4b0e      	ldr	r3, [pc, #56]	; (800f0c0 <get_wall_info+0x60>)
 800f086:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 800f088:	4b10      	ldr	r3, [pc, #64]	; (800f0cc <get_wall_info+0x6c>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	2b78      	cmp	r3, #120	; 0x78
 800f08e:	d906      	bls.n	800f09e <get_wall_info+0x3e>
		wall_info |= 0x44;								//right check
 800f090:	4b0b      	ldr	r3, [pc, #44]	; (800f0c0 <get_wall_info+0x60>)
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800f098:	b2da      	uxtb	r2, r3
 800f09a:	4b09      	ldr	r3, [pc, #36]	; (800f0c0 <get_wall_info+0x60>)
 800f09c:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 800f09e:	4b0c      	ldr	r3, [pc, #48]	; (800f0d0 <get_wall_info+0x70>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	2b8c      	cmp	r3, #140	; 0x8c
 800f0a4:	d906      	bls.n	800f0b4 <get_wall_info+0x54>
		wall_info |= 0x11;								//light check
 800f0a6:	4b06      	ldr	r3, [pc, #24]	; (800f0c0 <get_wall_info+0x60>)
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	f043 0311 	orr.w	r3, r3, #17
 800f0ae:	b2da      	uxtb	r2, r3
 800f0b0:	4b03      	ldr	r3, [pc, #12]	; (800f0c0 <get_wall_info+0x60>)
 800f0b2:	701a      	strb	r2, [r3, #0]
	}
}
 800f0b4:	bf00      	nop
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr
 800f0be:	bf00      	nop
 800f0c0:	20000300 	.word	0x20000300
 800f0c4:	20000c48 	.word	0x20000c48
 800f0c8:	20000d9c 	.word	0x20000d9c
 800f0cc:	20000fa8 	.word	0x20000fa8
 800f0d0:	20000b3c 	.word	0x20000b3c

0800f0d4 <led_write>:
//led_write
//aモード選択用LEDのON-OFF
//a引数：led1(0=>OFF, 1=>ON), led2(0=>OFF, 1=>ON), led3(0=>OFF, 1=>ON)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write(uint8_t led1, uint8_t led2, uint8_t led3){
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b082      	sub	sp, #8
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	4603      	mov	r3, r0
 800f0dc:	71fb      	strb	r3, [r7, #7]
 800f0de:	460b      	mov	r3, r1
 800f0e0:	71bb      	strb	r3, [r7, #6]
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800f0e6:	79fb      	ldrb	r3, [r7, #7]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d005      	beq.n	800f0f8 <led_write+0x24>
 800f0ec:	2201      	movs	r2, #1
 800f0ee:	2110      	movs	r1, #16
 800f0f0:	4814      	ldr	r0, [pc, #80]	; (800f144 <led_write+0x70>)
 800f0f2:	f7f3 f907 	bl	8002304 <HAL_GPIO_WritePin>
 800f0f6:	e004      	b.n	800f102 <led_write+0x2e>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	2110      	movs	r1, #16
 800f0fc:	4811      	ldr	r0, [pc, #68]	; (800f144 <led_write+0x70>)
 800f0fe:	f7f3 f901 	bl	8002304 <HAL_GPIO_WritePin>

	if(led2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800f102:	79bb      	ldrb	r3, [r7, #6]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d005      	beq.n	800f114 <led_write+0x40>
 800f108:	2201      	movs	r2, #1
 800f10a:	2140      	movs	r1, #64	; 0x40
 800f10c:	480d      	ldr	r0, [pc, #52]	; (800f144 <led_write+0x70>)
 800f10e:	f7f3 f8f9 	bl	8002304 <HAL_GPIO_WritePin>
 800f112:	e004      	b.n	800f11e <led_write+0x4a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800f114:	2200      	movs	r2, #0
 800f116:	2140      	movs	r1, #64	; 0x40
 800f118:	480a      	ldr	r0, [pc, #40]	; (800f144 <led_write+0x70>)
 800f11a:	f7f3 f8f3 	bl	8002304 <HAL_GPIO_WritePin>

	if(led3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800f11e:	797b      	ldrb	r3, [r7, #5]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d005      	beq.n	800f130 <led_write+0x5c>
 800f124:	2201      	movs	r2, #1
 800f126:	2180      	movs	r1, #128	; 0x80
 800f128:	4806      	ldr	r0, [pc, #24]	; (800f144 <led_write+0x70>)
 800f12a:	f7f3 f8eb 	bl	8002304 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 800f12e:	e004      	b.n	800f13a <led_write+0x66>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800f130:	2200      	movs	r2, #0
 800f132:	2180      	movs	r1, #128	; 0x80
 800f134:	4803      	ldr	r0, [pc, #12]	; (800f144 <led_write+0x70>)
 800f136:	f7f3 f8e5 	bl	8002304 <HAL_GPIO_WritePin>
}
 800f13a:	bf00      	nop
 800f13c:	3708      	adds	r7, #8
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	40020000 	.word	0x40020000

0800f148 <full_led_write>:
//full_led_write
//aフルカラーLEDの色選択
//a引数：fulled(0=>OFF, 1=>a赤, 2=>緑, 3=>青, 4=>青緑, 5=>紫, 6=>黄, 7=>白)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void full_led_write(uint8_t fulled){
 800f148:	b580      	push	{r7, lr}
 800f14a:	b082      	sub	sp, #8
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	4603      	mov	r3, r0
 800f150:	71fb      	strb	r3, [r7, #7]
	if(fulled == 0){
 800f152:	79fb      	ldrb	r3, [r7, #7]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d112      	bne.n	800f17e <full_led_write+0x36>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800f158:	2201      	movs	r2, #1
 800f15a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f15e:	4856      	ldr	r0, [pc, #344]	; (800f2b8 <full_led_write+0x170>)
 800f160:	f7f3 f8d0 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f164:	2201      	movs	r2, #1
 800f166:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f16a:	4853      	ldr	r0, [pc, #332]	; (800f2b8 <full_led_write+0x170>)
 800f16c:	f7f3 f8ca 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800f170:	2201      	movs	r2, #1
 800f172:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f176:	4851      	ldr	r0, [pc, #324]	; (800f2bc <full_led_write+0x174>)
 800f178:	f7f3 f8c4 	bl	8002304 <HAL_GPIO_WritePin>
	else if(fulled == 7){
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 800f17c:	e098      	b.n	800f2b0 <full_led_write+0x168>
	else if(fulled == 1){
 800f17e:	79fb      	ldrb	r3, [r7, #7]
 800f180:	2b01      	cmp	r3, #1
 800f182:	d112      	bne.n	800f1aa <full_led_write+0x62>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800f184:	2201      	movs	r2, #1
 800f186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f18a:	484b      	ldr	r0, [pc, #300]	; (800f2b8 <full_led_write+0x170>)
 800f18c:	f7f3 f8ba 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f190:	2201      	movs	r2, #1
 800f192:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f196:	4848      	ldr	r0, [pc, #288]	; (800f2b8 <full_led_write+0x170>)
 800f198:	f7f3 f8b4 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800f19c:	2200      	movs	r2, #0
 800f19e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f1a2:	4846      	ldr	r0, [pc, #280]	; (800f2bc <full_led_write+0x174>)
 800f1a4:	f7f3 f8ae 	bl	8002304 <HAL_GPIO_WritePin>
}
 800f1a8:	e082      	b.n	800f2b0 <full_led_write+0x168>
	else if(fulled == 2){
 800f1aa:	79fb      	ldrb	r3, [r7, #7]
 800f1ac:	2b02      	cmp	r3, #2
 800f1ae:	d112      	bne.n	800f1d6 <full_led_write+0x8e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800f1b0:	2201      	movs	r2, #1
 800f1b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f1b6:	4840      	ldr	r0, [pc, #256]	; (800f2b8 <full_led_write+0x170>)
 800f1b8:	f7f3 f8a4 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f1bc:	2200      	movs	r2, #0
 800f1be:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1c2:	483d      	ldr	r0, [pc, #244]	; (800f2b8 <full_led_write+0x170>)
 800f1c4:	f7f3 f89e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800f1c8:	2201      	movs	r2, #1
 800f1ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f1ce:	483b      	ldr	r0, [pc, #236]	; (800f2bc <full_led_write+0x174>)
 800f1d0:	f7f3 f898 	bl	8002304 <HAL_GPIO_WritePin>
}
 800f1d4:	e06c      	b.n	800f2b0 <full_led_write+0x168>
	else if(fulled == 3){
 800f1d6:	79fb      	ldrb	r3, [r7, #7]
 800f1d8:	2b03      	cmp	r3, #3
 800f1da:	d112      	bne.n	800f202 <full_led_write+0xba>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800f1dc:	2200      	movs	r2, #0
 800f1de:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f1e2:	4835      	ldr	r0, [pc, #212]	; (800f2b8 <full_led_write+0x170>)
 800f1e4:	f7f3 f88e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f1e8:	2201      	movs	r2, #1
 800f1ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1ee:	4832      	ldr	r0, [pc, #200]	; (800f2b8 <full_led_write+0x170>)
 800f1f0:	f7f3 f888 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800f1f4:	2201      	movs	r2, #1
 800f1f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f1fa:	4830      	ldr	r0, [pc, #192]	; (800f2bc <full_led_write+0x174>)
 800f1fc:	f7f3 f882 	bl	8002304 <HAL_GPIO_WritePin>
}
 800f200:	e056      	b.n	800f2b0 <full_led_write+0x168>
	else if(fulled == 4){
 800f202:	79fb      	ldrb	r3, [r7, #7]
 800f204:	2b04      	cmp	r3, #4
 800f206:	d112      	bne.n	800f22e <full_led_write+0xe6>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800f208:	2200      	movs	r2, #0
 800f20a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f20e:	482a      	ldr	r0, [pc, #168]	; (800f2b8 <full_led_write+0x170>)
 800f210:	f7f3 f878 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f214:	2200      	movs	r2, #0
 800f216:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f21a:	4827      	ldr	r0, [pc, #156]	; (800f2b8 <full_led_write+0x170>)
 800f21c:	f7f3 f872 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800f220:	2201      	movs	r2, #1
 800f222:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f226:	4825      	ldr	r0, [pc, #148]	; (800f2bc <full_led_write+0x174>)
 800f228:	f7f3 f86c 	bl	8002304 <HAL_GPIO_WritePin>
}
 800f22c:	e040      	b.n	800f2b0 <full_led_write+0x168>
	else if(fulled == 5){
 800f22e:	79fb      	ldrb	r3, [r7, #7]
 800f230:	2b05      	cmp	r3, #5
 800f232:	d112      	bne.n	800f25a <full_led_write+0x112>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800f234:	2200      	movs	r2, #0
 800f236:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f23a:	481f      	ldr	r0, [pc, #124]	; (800f2b8 <full_led_write+0x170>)
 800f23c:	f7f3 f862 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800f240:	2201      	movs	r2, #1
 800f242:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f246:	481c      	ldr	r0, [pc, #112]	; (800f2b8 <full_led_write+0x170>)
 800f248:	f7f3 f85c 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800f24c:	2200      	movs	r2, #0
 800f24e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f252:	481a      	ldr	r0, [pc, #104]	; (800f2bc <full_led_write+0x174>)
 800f254:	f7f3 f856 	bl	8002304 <HAL_GPIO_WritePin>
}
 800f258:	e02a      	b.n	800f2b0 <full_led_write+0x168>
	else if(fulled == 6){
 800f25a:	79fb      	ldrb	r3, [r7, #7]
 800f25c:	2b06      	cmp	r3, #6
 800f25e:	d112      	bne.n	800f286 <full_led_write+0x13e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800f260:	2201      	movs	r2, #1
 800f262:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f266:	4814      	ldr	r0, [pc, #80]	; (800f2b8 <full_led_write+0x170>)
 800f268:	f7f3 f84c 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f26c:	2200      	movs	r2, #0
 800f26e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f272:	4811      	ldr	r0, [pc, #68]	; (800f2b8 <full_led_write+0x170>)
 800f274:	f7f3 f846 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800f278:	2200      	movs	r2, #0
 800f27a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f27e:	480f      	ldr	r0, [pc, #60]	; (800f2bc <full_led_write+0x174>)
 800f280:	f7f3 f840 	bl	8002304 <HAL_GPIO_WritePin>
}
 800f284:	e014      	b.n	800f2b0 <full_led_write+0x168>
	else if(fulled == 7){
 800f286:	79fb      	ldrb	r3, [r7, #7]
 800f288:	2b07      	cmp	r3, #7
 800f28a:	d111      	bne.n	800f2b0 <full_led_write+0x168>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800f28c:	2200      	movs	r2, #0
 800f28e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f292:	4809      	ldr	r0, [pc, #36]	; (800f2b8 <full_led_write+0x170>)
 800f294:	f7f3 f836 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800f298:	2200      	movs	r2, #0
 800f29a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f29e:	4806      	ldr	r0, [pc, #24]	; (800f2b8 <full_led_write+0x170>)
 800f2a0:	f7f3 f830 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f2aa:	4804      	ldr	r0, [pc, #16]	; (800f2bc <full_led_write+0x174>)
 800f2ac:	f7f3 f82a 	bl	8002304 <HAL_GPIO_WritePin>
}
 800f2b0:	bf00      	nop
 800f2b2:	3708      	adds	r7, #8
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	40020400 	.word	0x40020400
 800f2bc:	40020800 	.word	0x40020800

0800f2c0 <sensor_test>:
//sensor_test
//a壁センサーとジャイロセンサーの値確認
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_test(){
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b08c      	sub	sp, #48	; 0x30
 800f2c4:	af02      	add	r7, sp, #8

	int mode = 0;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Mode : %d\n", mode);
 800f2ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f2cc:	4881      	ldr	r0, [pc, #516]	; (800f4d4 <sensor_test+0x214>)
 800f2ce:	f000 fccf 	bl	800fc70 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800f2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d4:	b2db      	uxtb	r3, r3
 800f2d6:	f003 0301 	and.w	r3, r3, #1
 800f2da:	b2d8      	uxtb	r0, r3
 800f2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2de:	b2db      	uxtb	r3, r3
 800f2e0:	f003 0302 	and.w	r3, r3, #2
 800f2e4:	b2d9      	uxtb	r1, r3
 800f2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e8:	b2db      	uxtb	r3, r3
 800f2ea:	f003 0304 	and.w	r3, r3, #4
 800f2ee:	b2db      	uxtb	r3, r3
 800f2f0:	461a      	mov	r2, r3
 800f2f2:	f7ff feef 	bl	800f0d4 <led_write>
		  if(dist_r >= 20){
 800f2f6:	4b78      	ldr	r3, [pc, #480]	; (800f4d8 <sensor_test+0x218>)
 800f2f8:	edd3 7a00 	vldr	s15, [r3]
 800f2fc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800f300:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f308:	db0f      	blt.n	800f32a <sensor_test+0x6a>
			  mode++;
 800f30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30c:	3301      	adds	r3, #1
 800f30e:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 800f310:	4b71      	ldr	r3, [pc, #452]	; (800f4d8 <sensor_test+0x218>)
 800f312:	f04f 0200 	mov.w	r2, #0
 800f316:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800f318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f31a:	2b07      	cmp	r3, #7
 800f31c:	dd01      	ble.n	800f322 <sensor_test+0x62>
				  mode = 0;
 800f31e:	2300      	movs	r3, #0
 800f320:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 800f322:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f324:	486b      	ldr	r0, [pc, #428]	; (800f4d4 <sensor_test+0x214>)
 800f326:	f000 fca3 	bl	800fc70 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800f32a:	4b6b      	ldr	r3, [pc, #428]	; (800f4d8 <sensor_test+0x218>)
 800f32c:	edd3 7a00 	vldr	s15, [r3]
 800f330:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800f334:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f33c:	d80f      	bhi.n	800f35e <sensor_test+0x9e>
			  mode--;
 800f33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f340:	3b01      	subs	r3, #1
 800f342:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 800f344:	4b64      	ldr	r3, [pc, #400]	; (800f4d8 <sensor_test+0x218>)
 800f346:	f04f 0200 	mov.w	r2, #0
 800f34a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800f34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34e:	2b00      	cmp	r3, #0
 800f350:	da01      	bge.n	800f356 <sensor_test+0x96>
				  mode = 7;
 800f352:	2307      	movs	r3, #7
 800f354:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 800f356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f358:	485e      	ldr	r0, [pc, #376]	; (800f4d4 <sensor_test+0x214>)
 800f35a:	f000 fc89 	bl	800fc70 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800f35e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f362:	485e      	ldr	r0, [pc, #376]	; (800f4dc <sensor_test+0x21c>)
 800f364:	f7f2 ffb6 	bl	80022d4 <HAL_GPIO_ReadPin>
 800f368:	4603      	mov	r3, r0
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d1b1      	bne.n	800f2d2 <sensor_test+0x12>
			  HAL_Delay(50);
 800f36e:	2032      	movs	r0, #50	; 0x32
 800f370:	f7f1 fe54 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800f374:	bf00      	nop
 800f376:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f37a:	4858      	ldr	r0, [pc, #352]	; (800f4dc <sensor_test+0x21c>)
 800f37c:	f7f2 ffaa 	bl	80022d4 <HAL_GPIO_ReadPin>
 800f380:	4603      	mov	r3, r0
 800f382:	2b00      	cmp	r3, #0
 800f384:	d0f7      	beq.n	800f376 <sensor_test+0xb6>

			  drive_ready();
 800f386:	f7f5 fc75 	bl	8004c74 <drive_ready>

			  switch(mode){
 800f38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38c:	2b07      	cmp	r3, #7
 800f38e:	d8a0      	bhi.n	800f2d2 <sensor_test+0x12>
 800f390:	a201      	add	r2, pc, #4	; (adr r2, 800f398 <sensor_test+0xd8>)
 800f392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f396:	bf00      	nop
 800f398:	0800f3b9 	.word	0x0800f3b9
 800f39c:	0800f3bf 	.word	0x0800f3bf
 800f3a0:	0800f411 	.word	0x0800f411
 800f3a4:	0800f2d3 	.word	0x0800f2d3
 800f3a8:	0800f2d3 	.word	0x0800f2d3
 800f3ac:	0800f2d3 	.word	0x0800f2d3
 800f3b0:	0800f2d3 	.word	0x0800f2d3
 800f3b4:	0800f2d3 	.word	0x0800f2d3
				case 0:
					get_base();
 800f3b8:	f7ff fe34 	bl	800f024 <get_base>
					break;
 800f3bc:	e089      	b.n	800f4d2 <sensor_test+0x212>
				case 1:
			  		  //----Wall sensor check----
			  		  printf("Wall Sensor Check.\n");
 800f3be:	4848      	ldr	r0, [pc, #288]	; (800f4e0 <sensor_test+0x220>)
 800f3c0:	f000 fcca 	bl	800fd58 <puts>
			  		  while(1){
			  			  get_wall_info();
 800f3c4:	f7ff fe4c 	bl	800f060 <get_wall_info>
			  			  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 800f3c8:	4b46      	ldr	r3, [pc, #280]	; (800f4e4 <sensor_test+0x224>)
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	f003 0311 	and.w	r3, r3, #17
 800f3d0:	b2d8      	uxtb	r0, r3
 800f3d2:	4b44      	ldr	r3, [pc, #272]	; (800f4e4 <sensor_test+0x224>)
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f3da:	b2d9      	uxtb	r1, r3
 800f3dc:	4b41      	ldr	r3, [pc, #260]	; (800f4e4 <sensor_test+0x224>)
 800f3de:	781b      	ldrb	r3, [r3, #0]
 800f3e0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	f7ff fe74 	bl	800f0d4 <led_write>
			  			  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 800f3ec:	4b3e      	ldr	r3, [pc, #248]	; (800f4e8 <sensor_test+0x228>)
 800f3ee:	6819      	ldr	r1, [r3, #0]
 800f3f0:	4b3e      	ldr	r3, [pc, #248]	; (800f4ec <sensor_test+0x22c>)
 800f3f2:	681a      	ldr	r2, [r3, #0]
 800f3f4:	4b3e      	ldr	r3, [pc, #248]	; (800f4f0 <sensor_test+0x230>)
 800f3f6:	6818      	ldr	r0, [r3, #0]
 800f3f8:	4b3e      	ldr	r3, [pc, #248]	; (800f4f4 <sensor_test+0x234>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	9300      	str	r3, [sp, #0]
 800f3fe:	4603      	mov	r3, r0
 800f400:	483d      	ldr	r0, [pc, #244]	; (800f4f8 <sensor_test+0x238>)
 800f402:	f000 fc35 	bl	800fc70 <iprintf>
			  			  HAL_Delay(333);
 800f406:	f240 104d 	movw	r0, #333	; 0x14d
 800f40a:	f7f1 fe07 	bl	800101c <HAL_Delay>
			  			  get_wall_info();
 800f40e:	e7d9      	b.n	800f3c4 <sensor_test+0x104>
						}
					break;
				case 2:
					//----Gyro sensor check----
					printf("Gyro Sensor Check.\n");
 800f410:	483a      	ldr	r0, [pc, #232]	; (800f4fc <sensor_test+0x23c>)
 800f412:	f000 fca1 	bl	800fd58 <puts>
					int accel_x, accel_y, accel_z;
					int gyro_x, gyro_y, gyro_z;
					int deg_x, deg_y, deg_z;
			  		  while(1){
			  			  accel_x = accel_read_x();
 800f416:	f7fa fecf 	bl	800a1b8 <accel_read_x>
 800f41a:	eef0 7a40 	vmov.f32	s15, s0
 800f41e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f422:	ee17 3a90 	vmov	r3, s15
 800f426:	623b      	str	r3, [r7, #32]
			  			  accel_y = accel_read_y();
 800f428:	f7fa feec 	bl	800a204 <accel_read_y>
 800f42c:	eef0 7a40 	vmov.f32	s15, s0
 800f430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f434:	ee17 3a90 	vmov	r3, s15
 800f438:	61fb      	str	r3, [r7, #28]
			  			  accel_z = accel_read_z();
 800f43a:	f7fa ff09 	bl	800a250 <accel_read_z>
 800f43e:	eef0 7a40 	vmov.f32	s15, s0
 800f442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f446:	ee17 3a90 	vmov	r3, s15
 800f44a:	61bb      	str	r3, [r7, #24]
			  			  gyro_x = gyro_read_x();
 800f44c:	f7fa ff28 	bl	800a2a0 <gyro_read_x>
 800f450:	eef0 7a40 	vmov.f32	s15, s0
 800f454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f458:	ee17 3a90 	vmov	r3, s15
 800f45c:	617b      	str	r3, [r7, #20]
			  			  gyro_y = gyro_read_y();
 800f45e:	f7fa ff5b 	bl	800a318 <gyro_read_y>
 800f462:	eef0 7a40 	vmov.f32	s15, s0
 800f466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f46a:	ee17 3a90 	vmov	r3, s15
 800f46e:	613b      	str	r3, [r7, #16]
			  			  gyro_z = gyro_read_z();
 800f470:	f7fa ff8e 	bl	800a390 <gyro_read_z>
 800f474:	eef0 7a40 	vmov.f32	s15, s0
 800f478:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f47c:	ee17 3a90 	vmov	r3, s15
 800f480:	60fb      	str	r3, [r7, #12]
			  			  deg_x = degree_x;
 800f482:	4b1f      	ldr	r3, [pc, #124]	; (800f500 <sensor_test+0x240>)
 800f484:	edd3 7a00 	vldr	s15, [r3]
 800f488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f48c:	ee17 3a90 	vmov	r3, s15
 800f490:	60bb      	str	r3, [r7, #8]
			  			  deg_y = degree_y;
 800f492:	4b1c      	ldr	r3, [pc, #112]	; (800f504 <sensor_test+0x244>)
 800f494:	edd3 7a00 	vldr	s15, [r3]
 800f498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f49c:	ee17 3a90 	vmov	r3, s15
 800f4a0:	607b      	str	r3, [r7, #4]
			  			  deg_z = degree_z;
 800f4a2:	4b19      	ldr	r3, [pc, #100]	; (800f508 <sensor_test+0x248>)
 800f4a4:	edd3 7a00 	vldr	s15, [r3]
 800f4a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f4ac:	ee17 3a90 	vmov	r3, s15
 800f4b0:	603b      	str	r3, [r7, #0]

			  			  //printf("Accel x: %3d, y: %3d, z: %3d\n", accel_x, accel_y, accel_z);
			  			  printf("Gyro  x: %3d, y: %3d, z: %3d\n", gyro_x, gyro_y, gyro_z);
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	693a      	ldr	r2, [r7, #16]
 800f4b6:	6979      	ldr	r1, [r7, #20]
 800f4b8:	4814      	ldr	r0, [pc, #80]	; (800f50c <sensor_test+0x24c>)
 800f4ba:	f000 fbd9 	bl	800fc70 <iprintf>
			  			  printf("Deg   x: %3d, y: %3d, z: %3d\n", deg_x, deg_y, deg_z);
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	68b9      	ldr	r1, [r7, #8]
 800f4c4:	4812      	ldr	r0, [pc, #72]	; (800f510 <sensor_test+0x250>)
 800f4c6:	f000 fbd3 	bl	800fc70 <iprintf>
			  			  HAL_Delay(111);
 800f4ca:	206f      	movs	r0, #111	; 0x6f
 800f4cc:	f7f1 fda6 	bl	800101c <HAL_Delay>
			  			  accel_x = accel_read_x();
 800f4d0:	e7a1      	b.n	800f416 <sensor_test+0x156>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800f4d2:	e6fe      	b.n	800f2d2 <sensor_test+0x12>
 800f4d4:	080113e8 	.word	0x080113e8
 800f4d8:	20000b2c 	.word	0x20000b2c
 800f4dc:	40020000 	.word	0x40020000
 800f4e0:	080113f4 	.word	0x080113f4
 800f4e4:	20000300 	.word	0x20000300
 800f4e8:	20000b3c 	.word	0x20000b3c
 800f4ec:	20000d9c 	.word	0x20000d9c
 800f4f0:	20000c48 	.word	0x20000c48
 800f4f4:	20000fa8 	.word	0x20000fa8
 800f4f8:	08011408 	.word	0x08011408
 800f4fc:	08011438 	.word	0x08011438
 800f500:	20000488 	.word	0x20000488
 800f504:	20000fb4 	.word	0x20000fb4
 800f508:	20000b9c 	.word	0x20000b9c
 800f50c:	0801144c 	.word	0x0801144c
 800f510:	0801146c 	.word	0x0801146c

0800f514 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f514:	b480      	push	{r7}
 800f516:	b083      	sub	sp, #12
 800f518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f51a:	2300      	movs	r3, #0
 800f51c:	607b      	str	r3, [r7, #4]
 800f51e:	4b10      	ldr	r3, [pc, #64]	; (800f560 <HAL_MspInit+0x4c>)
 800f520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f522:	4a0f      	ldr	r2, [pc, #60]	; (800f560 <HAL_MspInit+0x4c>)
 800f524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f528:	6453      	str	r3, [r2, #68]	; 0x44
 800f52a:	4b0d      	ldr	r3, [pc, #52]	; (800f560 <HAL_MspInit+0x4c>)
 800f52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f52e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f532:	607b      	str	r3, [r7, #4]
 800f534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f536:	2300      	movs	r3, #0
 800f538:	603b      	str	r3, [r7, #0]
 800f53a:	4b09      	ldr	r3, [pc, #36]	; (800f560 <HAL_MspInit+0x4c>)
 800f53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f53e:	4a08      	ldr	r2, [pc, #32]	; (800f560 <HAL_MspInit+0x4c>)
 800f540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f544:	6413      	str	r3, [r2, #64]	; 0x40
 800f546:	4b06      	ldr	r3, [pc, #24]	; (800f560 <HAL_MspInit+0x4c>)
 800f548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f54a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f54e:	603b      	str	r3, [r7, #0]
 800f550:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f552:	bf00      	nop
 800f554:	370c      	adds	r7, #12
 800f556:	46bd      	mov	sp, r7
 800f558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55c:	4770      	bx	lr
 800f55e:	bf00      	nop
 800f560:	40023800 	.word	0x40023800

0800f564 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b08a      	sub	sp, #40	; 0x28
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f56c:	f107 0314 	add.w	r3, r7, #20
 800f570:	2200      	movs	r2, #0
 800f572:	601a      	str	r2, [r3, #0]
 800f574:	605a      	str	r2, [r3, #4]
 800f576:	609a      	str	r2, [r3, #8]
 800f578:	60da      	str	r2, [r3, #12]
 800f57a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	4a17      	ldr	r2, [pc, #92]	; (800f5e0 <HAL_ADC_MspInit+0x7c>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d127      	bne.n	800f5d6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800f586:	2300      	movs	r3, #0
 800f588:	613b      	str	r3, [r7, #16]
 800f58a:	4b16      	ldr	r3, [pc, #88]	; (800f5e4 <HAL_ADC_MspInit+0x80>)
 800f58c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f58e:	4a15      	ldr	r2, [pc, #84]	; (800f5e4 <HAL_ADC_MspInit+0x80>)
 800f590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f594:	6453      	str	r3, [r2, #68]	; 0x44
 800f596:	4b13      	ldr	r3, [pc, #76]	; (800f5e4 <HAL_ADC_MspInit+0x80>)
 800f598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f59a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f59e:	613b      	str	r3, [r7, #16]
 800f5a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	60fb      	str	r3, [r7, #12]
 800f5a6:	4b0f      	ldr	r3, [pc, #60]	; (800f5e4 <HAL_ADC_MspInit+0x80>)
 800f5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5aa:	4a0e      	ldr	r2, [pc, #56]	; (800f5e4 <HAL_ADC_MspInit+0x80>)
 800f5ac:	f043 0301 	orr.w	r3, r3, #1
 800f5b0:	6313      	str	r3, [r2, #48]	; 0x30
 800f5b2:	4b0c      	ldr	r3, [pc, #48]	; (800f5e4 <HAL_ADC_MspInit+0x80>)
 800f5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5b6:	f003 0301 	and.w	r3, r3, #1
 800f5ba:	60fb      	str	r3, [r7, #12]
 800f5bc:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800f5be:	230f      	movs	r3, #15
 800f5c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f5c2:	2303      	movs	r3, #3
 800f5c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f5ca:	f107 0314 	add.w	r3, r7, #20
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	4805      	ldr	r0, [pc, #20]	; (800f5e8 <HAL_ADC_MspInit+0x84>)
 800f5d2:	f7f2 fce5 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800f5d6:	bf00      	nop
 800f5d8:	3728      	adds	r7, #40	; 0x28
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}
 800f5de:	bf00      	nop
 800f5e0:	40012000 	.word	0x40012000
 800f5e4:	40023800 	.word	0x40023800
 800f5e8:	40020000 	.word	0x40020000

0800f5ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b08a      	sub	sp, #40	; 0x28
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f5f4:	f107 0314 	add.w	r3, r7, #20
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	601a      	str	r2, [r3, #0]
 800f5fc:	605a      	str	r2, [r3, #4]
 800f5fe:	609a      	str	r2, [r3, #8]
 800f600:	60da      	str	r2, [r3, #12]
 800f602:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	4a19      	ldr	r2, [pc, #100]	; (800f670 <HAL_SPI_MspInit+0x84>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d12c      	bne.n	800f668 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800f60e:	2300      	movs	r3, #0
 800f610:	613b      	str	r3, [r7, #16]
 800f612:	4b18      	ldr	r3, [pc, #96]	; (800f674 <HAL_SPI_MspInit+0x88>)
 800f614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f616:	4a17      	ldr	r2, [pc, #92]	; (800f674 <HAL_SPI_MspInit+0x88>)
 800f618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f61c:	6413      	str	r3, [r2, #64]	; 0x40
 800f61e:	4b15      	ldr	r3, [pc, #84]	; (800f674 <HAL_SPI_MspInit+0x88>)
 800f620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f626:	613b      	str	r3, [r7, #16]
 800f628:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f62a:	2300      	movs	r3, #0
 800f62c:	60fb      	str	r3, [r7, #12]
 800f62e:	4b11      	ldr	r3, [pc, #68]	; (800f674 <HAL_SPI_MspInit+0x88>)
 800f630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f632:	4a10      	ldr	r2, [pc, #64]	; (800f674 <HAL_SPI_MspInit+0x88>)
 800f634:	f043 0304 	orr.w	r3, r3, #4
 800f638:	6313      	str	r3, [r2, #48]	; 0x30
 800f63a:	4b0e      	ldr	r3, [pc, #56]	; (800f674 <HAL_SPI_MspInit+0x88>)
 800f63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f63e:	f003 0304 	and.w	r3, r3, #4
 800f642:	60fb      	str	r3, [r7, #12]
 800f644:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800f646:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f64a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f64c:	2302      	movs	r3, #2
 800f64e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f650:	2300      	movs	r3, #0
 800f652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f654:	2303      	movs	r3, #3
 800f656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800f658:	2306      	movs	r3, #6
 800f65a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f65c:	f107 0314 	add.w	r3, r7, #20
 800f660:	4619      	mov	r1, r3
 800f662:	4805      	ldr	r0, [pc, #20]	; (800f678 <HAL_SPI_MspInit+0x8c>)
 800f664:	f7f2 fc9c 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800f668:	bf00      	nop
 800f66a:	3728      	adds	r7, #40	; 0x28
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	40003c00 	.word	0x40003c00
 800f674:	40023800 	.word	0x40023800
 800f678:	40020800 	.word	0x40020800

0800f67c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b086      	sub	sp, #24
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f68c:	d10e      	bne.n	800f6ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800f68e:	2300      	movs	r3, #0
 800f690:	617b      	str	r3, [r7, #20]
 800f692:	4b20      	ldr	r3, [pc, #128]	; (800f714 <HAL_TIM_Base_MspInit+0x98>)
 800f694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f696:	4a1f      	ldr	r2, [pc, #124]	; (800f714 <HAL_TIM_Base_MspInit+0x98>)
 800f698:	f043 0301 	orr.w	r3, r3, #1
 800f69c:	6413      	str	r3, [r2, #64]	; 0x40
 800f69e:	4b1d      	ldr	r3, [pc, #116]	; (800f714 <HAL_TIM_Base_MspInit+0x98>)
 800f6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6a2:	f003 0301 	and.w	r3, r3, #1
 800f6a6:	617b      	str	r3, [r7, #20]
 800f6a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800f6aa:	e02e      	b.n	800f70a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	4a19      	ldr	r2, [pc, #100]	; (800f718 <HAL_TIM_Base_MspInit+0x9c>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d10e      	bne.n	800f6d4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	613b      	str	r3, [r7, #16]
 800f6ba:	4b16      	ldr	r3, [pc, #88]	; (800f714 <HAL_TIM_Base_MspInit+0x98>)
 800f6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6be:	4a15      	ldr	r2, [pc, #84]	; (800f714 <HAL_TIM_Base_MspInit+0x98>)
 800f6c0:	f043 0302 	orr.w	r3, r3, #2
 800f6c4:	6413      	str	r3, [r2, #64]	; 0x40
 800f6c6:	4b13      	ldr	r3, [pc, #76]	; (800f714 <HAL_TIM_Base_MspInit+0x98>)
 800f6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6ca:	f003 0302 	and.w	r3, r3, #2
 800f6ce:	613b      	str	r3, [r7, #16]
 800f6d0:	693b      	ldr	r3, [r7, #16]
}
 800f6d2:	e01a      	b.n	800f70a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	4a10      	ldr	r2, [pc, #64]	; (800f71c <HAL_TIM_Base_MspInit+0xa0>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d115      	bne.n	800f70a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800f6de:	2300      	movs	r3, #0
 800f6e0:	60fb      	str	r3, [r7, #12]
 800f6e2:	4b0c      	ldr	r3, [pc, #48]	; (800f714 <HAL_TIM_Base_MspInit+0x98>)
 800f6e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6e6:	4a0b      	ldr	r2, [pc, #44]	; (800f714 <HAL_TIM_Base_MspInit+0x98>)
 800f6e8:	f043 0310 	orr.w	r3, r3, #16
 800f6ec:	6413      	str	r3, [r2, #64]	; 0x40
 800f6ee:	4b09      	ldr	r3, [pc, #36]	; (800f714 <HAL_TIM_Base_MspInit+0x98>)
 800f6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6f2:	f003 0310 	and.w	r3, r3, #16
 800f6f6:	60fb      	str	r3, [r7, #12]
 800f6f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	2100      	movs	r1, #0
 800f6fe:	2036      	movs	r0, #54	; 0x36
 800f700:	f7f2 f943 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800f704:	2036      	movs	r0, #54	; 0x36
 800f706:	f7f2 f95c 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 800f70a:	bf00      	nop
 800f70c:	3718      	adds	r7, #24
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	40023800 	.word	0x40023800
 800f718:	40000400 	.word	0x40000400
 800f71c:	40001000 	.word	0x40001000

0800f720 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b08c      	sub	sp, #48	; 0x30
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f728:	f107 031c 	add.w	r3, r7, #28
 800f72c:	2200      	movs	r2, #0
 800f72e:	601a      	str	r2, [r3, #0]
 800f730:	605a      	str	r2, [r3, #4]
 800f732:	609a      	str	r2, [r3, #8]
 800f734:	60da      	str	r2, [r3, #12]
 800f736:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4a32      	ldr	r2, [pc, #200]	; (800f808 <HAL_TIM_Encoder_MspInit+0xe8>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d12c      	bne.n	800f79c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800f742:	2300      	movs	r3, #0
 800f744:	61bb      	str	r3, [r7, #24]
 800f746:	4b31      	ldr	r3, [pc, #196]	; (800f80c <HAL_TIM_Encoder_MspInit+0xec>)
 800f748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f74a:	4a30      	ldr	r2, [pc, #192]	; (800f80c <HAL_TIM_Encoder_MspInit+0xec>)
 800f74c:	f043 0304 	orr.w	r3, r3, #4
 800f750:	6413      	str	r3, [r2, #64]	; 0x40
 800f752:	4b2e      	ldr	r3, [pc, #184]	; (800f80c <HAL_TIM_Encoder_MspInit+0xec>)
 800f754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f756:	f003 0304 	and.w	r3, r3, #4
 800f75a:	61bb      	str	r3, [r7, #24]
 800f75c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f75e:	2300      	movs	r3, #0
 800f760:	617b      	str	r3, [r7, #20]
 800f762:	4b2a      	ldr	r3, [pc, #168]	; (800f80c <HAL_TIM_Encoder_MspInit+0xec>)
 800f764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f766:	4a29      	ldr	r2, [pc, #164]	; (800f80c <HAL_TIM_Encoder_MspInit+0xec>)
 800f768:	f043 0302 	orr.w	r3, r3, #2
 800f76c:	6313      	str	r3, [r2, #48]	; 0x30
 800f76e:	4b27      	ldr	r3, [pc, #156]	; (800f80c <HAL_TIM_Encoder_MspInit+0xec>)
 800f770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f772:	f003 0302 	and.w	r3, r3, #2
 800f776:	617b      	str	r3, [r7, #20]
 800f778:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f77a:	23c0      	movs	r3, #192	; 0xc0
 800f77c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f77e:	2302      	movs	r3, #2
 800f780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f782:	2300      	movs	r3, #0
 800f784:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f786:	2300      	movs	r3, #0
 800f788:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800f78a:	2302      	movs	r3, #2
 800f78c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f78e:	f107 031c 	add.w	r3, r7, #28
 800f792:	4619      	mov	r1, r3
 800f794:	481e      	ldr	r0, [pc, #120]	; (800f810 <HAL_TIM_Encoder_MspInit+0xf0>)
 800f796:	f7f2 fc03 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800f79a:	e030      	b.n	800f7fe <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4a1c      	ldr	r2, [pc, #112]	; (800f814 <HAL_TIM_Encoder_MspInit+0xf4>)
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	d12b      	bne.n	800f7fe <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	613b      	str	r3, [r7, #16]
 800f7aa:	4b18      	ldr	r3, [pc, #96]	; (800f80c <HAL_TIM_Encoder_MspInit+0xec>)
 800f7ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7ae:	4a17      	ldr	r2, [pc, #92]	; (800f80c <HAL_TIM_Encoder_MspInit+0xec>)
 800f7b0:	f043 0302 	orr.w	r3, r3, #2
 800f7b4:	6453      	str	r3, [r2, #68]	; 0x44
 800f7b6:	4b15      	ldr	r3, [pc, #84]	; (800f80c <HAL_TIM_Encoder_MspInit+0xec>)
 800f7b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7ba:	f003 0302 	and.w	r3, r3, #2
 800f7be:	613b      	str	r3, [r7, #16]
 800f7c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	60fb      	str	r3, [r7, #12]
 800f7c6:	4b11      	ldr	r3, [pc, #68]	; (800f80c <HAL_TIM_Encoder_MspInit+0xec>)
 800f7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7ca:	4a10      	ldr	r2, [pc, #64]	; (800f80c <HAL_TIM_Encoder_MspInit+0xec>)
 800f7cc:	f043 0304 	orr.w	r3, r3, #4
 800f7d0:	6313      	str	r3, [r2, #48]	; 0x30
 800f7d2:	4b0e      	ldr	r3, [pc, #56]	; (800f80c <HAL_TIM_Encoder_MspInit+0xec>)
 800f7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7d6:	f003 0304 	and.w	r3, r3, #4
 800f7da:	60fb      	str	r3, [r7, #12]
 800f7dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f7de:	23c0      	movs	r3, #192	; 0xc0
 800f7e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7e2:	2302      	movs	r3, #2
 800f7e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800f7ee:	2303      	movs	r3, #3
 800f7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f7f2:	f107 031c 	add.w	r3, r7, #28
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	4807      	ldr	r0, [pc, #28]	; (800f818 <HAL_TIM_Encoder_MspInit+0xf8>)
 800f7fa:	f7f2 fbd1 	bl	8001fa0 <HAL_GPIO_Init>
}
 800f7fe:	bf00      	nop
 800f800:	3730      	adds	r7, #48	; 0x30
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	40000800 	.word	0x40000800
 800f80c:	40023800 	.word	0x40023800
 800f810:	40020400 	.word	0x40020400
 800f814:	40010400 	.word	0x40010400
 800f818:	40020800 	.word	0x40020800

0800f81c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b08a      	sub	sp, #40	; 0x28
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f824:	f107 0314 	add.w	r3, r7, #20
 800f828:	2200      	movs	r2, #0
 800f82a:	601a      	str	r2, [r3, #0]
 800f82c:	605a      	str	r2, [r3, #4]
 800f82e:	609a      	str	r2, [r3, #8]
 800f830:	60da      	str	r2, [r3, #12]
 800f832:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f83c:	d13d      	bne.n	800f8ba <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f83e:	2300      	movs	r3, #0
 800f840:	613b      	str	r3, [r7, #16]
 800f842:	4b31      	ldr	r3, [pc, #196]	; (800f908 <HAL_TIM_MspPostInit+0xec>)
 800f844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f846:	4a30      	ldr	r2, [pc, #192]	; (800f908 <HAL_TIM_MspPostInit+0xec>)
 800f848:	f043 0301 	orr.w	r3, r3, #1
 800f84c:	6313      	str	r3, [r2, #48]	; 0x30
 800f84e:	4b2e      	ldr	r3, [pc, #184]	; (800f908 <HAL_TIM_MspPostInit+0xec>)
 800f850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f852:	f003 0301 	and.w	r3, r3, #1
 800f856:	613b      	str	r3, [r7, #16]
 800f858:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f85a:	2300      	movs	r3, #0
 800f85c:	60fb      	str	r3, [r7, #12]
 800f85e:	4b2a      	ldr	r3, [pc, #168]	; (800f908 <HAL_TIM_MspPostInit+0xec>)
 800f860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f862:	4a29      	ldr	r2, [pc, #164]	; (800f908 <HAL_TIM_MspPostInit+0xec>)
 800f864:	f043 0302 	orr.w	r3, r3, #2
 800f868:	6313      	str	r3, [r2, #48]	; 0x30
 800f86a:	4b27      	ldr	r3, [pc, #156]	; (800f908 <HAL_TIM_MspPostInit+0xec>)
 800f86c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f86e:	f003 0302 	and.w	r3, r3, #2
 800f872:	60fb      	str	r3, [r7, #12]
 800f874:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800f876:	2320      	movs	r3, #32
 800f878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f87a:	2302      	movs	r3, #2
 800f87c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f87e:	2300      	movs	r3, #0
 800f880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f882:	2300      	movs	r3, #0
 800f884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800f886:	2301      	movs	r3, #1
 800f888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f88a:	f107 0314 	add.w	r3, r7, #20
 800f88e:	4619      	mov	r1, r3
 800f890:	481e      	ldr	r0, [pc, #120]	; (800f90c <HAL_TIM_MspPostInit+0xf0>)
 800f892:	f7f2 fb85 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800f896:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f89a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f89c:	2302      	movs	r3, #2
 800f89e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f8ac:	f107 0314 	add.w	r3, r7, #20
 800f8b0:	4619      	mov	r1, r3
 800f8b2:	4817      	ldr	r0, [pc, #92]	; (800f910 <HAL_TIM_MspPostInit+0xf4>)
 800f8b4:	f7f2 fb74 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800f8b8:	e022      	b.n	800f900 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	4a15      	ldr	r2, [pc, #84]	; (800f914 <HAL_TIM_MspPostInit+0xf8>)
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d11d      	bne.n	800f900 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	60bb      	str	r3, [r7, #8]
 800f8c8:	4b0f      	ldr	r3, [pc, #60]	; (800f908 <HAL_TIM_MspPostInit+0xec>)
 800f8ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8cc:	4a0e      	ldr	r2, [pc, #56]	; (800f908 <HAL_TIM_MspPostInit+0xec>)
 800f8ce:	f043 0302 	orr.w	r3, r3, #2
 800f8d2:	6313      	str	r3, [r2, #48]	; 0x30
 800f8d4:	4b0c      	ldr	r3, [pc, #48]	; (800f908 <HAL_TIM_MspPostInit+0xec>)
 800f8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8d8:	f003 0302 	and.w	r3, r3, #2
 800f8dc:	60bb      	str	r3, [r7, #8]
 800f8de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800f8e0:	2320      	movs	r3, #32
 800f8e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8e4:	2302      	movs	r3, #2
 800f8e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800f8f0:	2302      	movs	r3, #2
 800f8f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f8f4:	f107 0314 	add.w	r3, r7, #20
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	4805      	ldr	r0, [pc, #20]	; (800f910 <HAL_TIM_MspPostInit+0xf4>)
 800f8fc:	f7f2 fb50 	bl	8001fa0 <HAL_GPIO_Init>
}
 800f900:	bf00      	nop
 800f902:	3728      	adds	r7, #40	; 0x28
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}
 800f908:	40023800 	.word	0x40023800
 800f90c:	40020000 	.word	0x40020000
 800f910:	40020400 	.word	0x40020400
 800f914:	40000400 	.word	0x40000400

0800f918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b08a      	sub	sp, #40	; 0x28
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f920:	f107 0314 	add.w	r3, r7, #20
 800f924:	2200      	movs	r2, #0
 800f926:	601a      	str	r2, [r3, #0]
 800f928:	605a      	str	r2, [r3, #4]
 800f92a:	609a      	str	r2, [r3, #8]
 800f92c:	60da      	str	r2, [r3, #12]
 800f92e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	4a19      	ldr	r2, [pc, #100]	; (800f99c <HAL_UART_MspInit+0x84>)
 800f936:	4293      	cmp	r3, r2
 800f938:	d12c      	bne.n	800f994 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800f93a:	2300      	movs	r3, #0
 800f93c:	613b      	str	r3, [r7, #16]
 800f93e:	4b18      	ldr	r3, [pc, #96]	; (800f9a0 <HAL_UART_MspInit+0x88>)
 800f940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f942:	4a17      	ldr	r2, [pc, #92]	; (800f9a0 <HAL_UART_MspInit+0x88>)
 800f944:	f043 0310 	orr.w	r3, r3, #16
 800f948:	6453      	str	r3, [r2, #68]	; 0x44
 800f94a:	4b15      	ldr	r3, [pc, #84]	; (800f9a0 <HAL_UART_MspInit+0x88>)
 800f94c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f94e:	f003 0310 	and.w	r3, r3, #16
 800f952:	613b      	str	r3, [r7, #16]
 800f954:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f956:	2300      	movs	r3, #0
 800f958:	60fb      	str	r3, [r7, #12]
 800f95a:	4b11      	ldr	r3, [pc, #68]	; (800f9a0 <HAL_UART_MspInit+0x88>)
 800f95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f95e:	4a10      	ldr	r2, [pc, #64]	; (800f9a0 <HAL_UART_MspInit+0x88>)
 800f960:	f043 0301 	orr.w	r3, r3, #1
 800f964:	6313      	str	r3, [r2, #48]	; 0x30
 800f966:	4b0e      	ldr	r3, [pc, #56]	; (800f9a0 <HAL_UART_MspInit+0x88>)
 800f968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f96a:	f003 0301 	and.w	r3, r3, #1
 800f96e:	60fb      	str	r3, [r7, #12]
 800f970:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800f972:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800f976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f978:	2302      	movs	r3, #2
 800f97a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f97c:	2301      	movs	r3, #1
 800f97e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f980:	2303      	movs	r3, #3
 800f982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f984:	2307      	movs	r3, #7
 800f986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f988:	f107 0314 	add.w	r3, r7, #20
 800f98c:	4619      	mov	r1, r3
 800f98e:	4805      	ldr	r0, [pc, #20]	; (800f9a4 <HAL_UART_MspInit+0x8c>)
 800f990:	f7f2 fb06 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800f994:	bf00      	nop
 800f996:	3728      	adds	r7, #40	; 0x28
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}
 800f99c:	40011000 	.word	0x40011000
 800f9a0:	40023800 	.word	0x40023800
 800f9a4:	40020000 	.word	0x40020000

0800f9a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800f9ac:	bf00      	nop
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b4:	4770      	bx	lr

0800f9b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f9b6:	b480      	push	{r7}
 800f9b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f9ba:	e7fe      	b.n	800f9ba <HardFault_Handler+0x4>

0800f9bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f9c0:	e7fe      	b.n	800f9c0 <MemManage_Handler+0x4>

0800f9c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f9c2:	b480      	push	{r7}
 800f9c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f9c6:	e7fe      	b.n	800f9c6 <BusFault_Handler+0x4>

0800f9c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f9cc:	e7fe      	b.n	800f9cc <UsageFault_Handler+0x4>

0800f9ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800f9ce:	b480      	push	{r7}
 800f9d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800f9d2:	bf00      	nop
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr

0800f9dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f9dc:	b480      	push	{r7}
 800f9de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f9e0:	bf00      	nop
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e8:	4770      	bx	lr

0800f9ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800f9ea:	b480      	push	{r7}
 800f9ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800f9ee:	bf00      	nop
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr

0800f9f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800f9fc:	f7f1 faee 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800fa00:	bf00      	nop
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800fa08:	4802      	ldr	r0, [pc, #8]	; (800fa14 <TIM6_DAC_IRQHandler+0x10>)
 800fa0a:	f7f3 ffd6 	bl	80039ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800fa0e:	bf00      	nop
 800fa10:	bd80      	pop	{r7, pc}
 800fa12:	bf00      	nop
 800fa14:	20000bf8 	.word	0x20000bf8

0800fa18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b086      	sub	sp, #24
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	60f8      	str	r0, [r7, #12]
 800fa20:	60b9      	str	r1, [r7, #8]
 800fa22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fa24:	2300      	movs	r3, #0
 800fa26:	617b      	str	r3, [r7, #20]
 800fa28:	e00a      	b.n	800fa40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800fa2a:	f3af 8000 	nop.w
 800fa2e:	4601      	mov	r1, r0
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	1c5a      	adds	r2, r3, #1
 800fa34:	60ba      	str	r2, [r7, #8]
 800fa36:	b2ca      	uxtb	r2, r1
 800fa38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	617b      	str	r3, [r7, #20]
 800fa40:	697a      	ldr	r2, [r7, #20]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	429a      	cmp	r2, r3
 800fa46:	dbf0      	blt.n	800fa2a <_read+0x12>
	}

return len;
 800fa48:	687b      	ldr	r3, [r7, #4]
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3718      	adds	r7, #24
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}

0800fa52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800fa52:	b580      	push	{r7, lr}
 800fa54:	b086      	sub	sp, #24
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	60f8      	str	r0, [r7, #12]
 800fa5a:	60b9      	str	r1, [r7, #8]
 800fa5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fa5e:	2300      	movs	r3, #0
 800fa60:	617b      	str	r3, [r7, #20]
 800fa62:	e009      	b.n	800fa78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	1c5a      	adds	r2, r3, #1
 800fa68:	60ba      	str	r2, [r7, #8]
 800fa6a:	781b      	ldrb	r3, [r3, #0]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7fa fcd1 	bl	800a414 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	3301      	adds	r3, #1
 800fa76:	617b      	str	r3, [r7, #20]
 800fa78:	697a      	ldr	r2, [r7, #20]
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	dbf1      	blt.n	800fa64 <_write+0x12>
	}
	return len;
 800fa80:	687b      	ldr	r3, [r7, #4]
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3718      	adds	r7, #24
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}

0800fa8a <_close>:

int _close(int file)
{
 800fa8a:	b480      	push	{r7}
 800fa8c:	b083      	sub	sp, #12
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
	return -1;
 800fa92:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	370c      	adds	r7, #12
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr

0800faa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800faa2:	b480      	push	{r7}
 800faa4:	b083      	sub	sp, #12
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
 800faaa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fab2:	605a      	str	r2, [r3, #4]
	return 0;
 800fab4:	2300      	movs	r3, #0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	370c      	adds	r7, #12
 800faba:	46bd      	mov	sp, r7
 800fabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac0:	4770      	bx	lr

0800fac2 <_isatty>:

int _isatty(int file)
{
 800fac2:	b480      	push	{r7}
 800fac4:	b083      	sub	sp, #12
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
	return 1;
 800faca:	2301      	movs	r3, #1
}
 800facc:	4618      	mov	r0, r3
 800face:	370c      	adds	r7, #12
 800fad0:	46bd      	mov	sp, r7
 800fad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad6:	4770      	bx	lr

0800fad8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800fad8:	b480      	push	{r7}
 800fada:	b085      	sub	sp, #20
 800fadc:	af00      	add	r7, sp, #0
 800fade:	60f8      	str	r0, [r7, #12]
 800fae0:	60b9      	str	r1, [r7, #8]
 800fae2:	607a      	str	r2, [r7, #4]
	return 0;
 800fae4:	2300      	movs	r3, #0
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3714      	adds	r7, #20
 800faea:	46bd      	mov	sp, r7
 800faec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf0:	4770      	bx	lr
	...

0800faf4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800fafc:	4b11      	ldr	r3, [pc, #68]	; (800fb44 <_sbrk+0x50>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d102      	bne.n	800fb0a <_sbrk+0x16>
		heap_end = &end;
 800fb04:	4b0f      	ldr	r3, [pc, #60]	; (800fb44 <_sbrk+0x50>)
 800fb06:	4a10      	ldr	r2, [pc, #64]	; (800fb48 <_sbrk+0x54>)
 800fb08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800fb0a:	4b0e      	ldr	r3, [pc, #56]	; (800fb44 <_sbrk+0x50>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800fb10:	4b0c      	ldr	r3, [pc, #48]	; (800fb44 <_sbrk+0x50>)
 800fb12:	681a      	ldr	r2, [r3, #0]
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	4413      	add	r3, r2
 800fb18:	466a      	mov	r2, sp
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d907      	bls.n	800fb2e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800fb1e:	f000 f875 	bl	800fc0c <__errno>
 800fb22:	4602      	mov	r2, r0
 800fb24:	230c      	movs	r3, #12
 800fb26:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800fb28:	f04f 33ff 	mov.w	r3, #4294967295
 800fb2c:	e006      	b.n	800fb3c <_sbrk+0x48>
	}

	heap_end += incr;
 800fb2e:	4b05      	ldr	r3, [pc, #20]	; (800fb44 <_sbrk+0x50>)
 800fb30:	681a      	ldr	r2, [r3, #0]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	4413      	add	r3, r2
 800fb36:	4a03      	ldr	r2, [pc, #12]	; (800fb44 <_sbrk+0x50>)
 800fb38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3710      	adds	r7, #16
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	2000014c 	.word	0x2000014c
 800fb48:	20001620 	.word	0x20001620

0800fb4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800fb50:	4b16      	ldr	r3, [pc, #88]	; (800fbac <SystemInit+0x60>)
 800fb52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb56:	4a15      	ldr	r2, [pc, #84]	; (800fbac <SystemInit+0x60>)
 800fb58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fb5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800fb60:	4b13      	ldr	r3, [pc, #76]	; (800fbb0 <SystemInit+0x64>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	4a12      	ldr	r2, [pc, #72]	; (800fbb0 <SystemInit+0x64>)
 800fb66:	f043 0301 	orr.w	r3, r3, #1
 800fb6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800fb6c:	4b10      	ldr	r3, [pc, #64]	; (800fbb0 <SystemInit+0x64>)
 800fb6e:	2200      	movs	r2, #0
 800fb70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800fb72:	4b0f      	ldr	r3, [pc, #60]	; (800fbb0 <SystemInit+0x64>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	4a0e      	ldr	r2, [pc, #56]	; (800fbb0 <SystemInit+0x64>)
 800fb78:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800fb7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fb80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800fb82:	4b0b      	ldr	r3, [pc, #44]	; (800fbb0 <SystemInit+0x64>)
 800fb84:	4a0b      	ldr	r2, [pc, #44]	; (800fbb4 <SystemInit+0x68>)
 800fb86:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800fb88:	4b09      	ldr	r3, [pc, #36]	; (800fbb0 <SystemInit+0x64>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	4a08      	ldr	r2, [pc, #32]	; (800fbb0 <SystemInit+0x64>)
 800fb8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fb92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800fb94:	4b06      	ldr	r3, [pc, #24]	; (800fbb0 <SystemInit+0x64>)
 800fb96:	2200      	movs	r2, #0
 800fb98:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800fb9a:	4b04      	ldr	r3, [pc, #16]	; (800fbac <SystemInit+0x60>)
 800fb9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800fba0:	609a      	str	r2, [r3, #8]
#endif
}
 800fba2:	bf00      	nop
 800fba4:	46bd      	mov	sp, r7
 800fba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbaa:	4770      	bx	lr
 800fbac:	e000ed00 	.word	0xe000ed00
 800fbb0:	40023800 	.word	0x40023800
 800fbb4:	24003010 	.word	0x24003010

0800fbb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800fbb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800fbf0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800fbbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800fbbe:	e003      	b.n	800fbc8 <LoopCopyDataInit>

0800fbc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800fbc0:	4b0c      	ldr	r3, [pc, #48]	; (800fbf4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800fbc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800fbc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800fbc6:	3104      	adds	r1, #4

0800fbc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800fbc8:	480b      	ldr	r0, [pc, #44]	; (800fbf8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800fbca:	4b0c      	ldr	r3, [pc, #48]	; (800fbfc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800fbcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800fbce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800fbd0:	d3f6      	bcc.n	800fbc0 <CopyDataInit>
  ldr  r2, =_sbss
 800fbd2:	4a0b      	ldr	r2, [pc, #44]	; (800fc00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800fbd4:	e002      	b.n	800fbdc <LoopFillZerobss>

0800fbd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800fbd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800fbd8:	f842 3b04 	str.w	r3, [r2], #4

0800fbdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800fbdc:	4b09      	ldr	r3, [pc, #36]	; (800fc04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800fbde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800fbe0:	d3f9      	bcc.n	800fbd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800fbe2:	f7ff ffb3 	bl	800fb4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800fbe6:	f000 f817 	bl	800fc18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800fbea:	f7fb feab 	bl	800b944 <main>
  bx  lr    
 800fbee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800fbf0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800fbf4:	08011550 	.word	0x08011550
  ldr  r0, =_sdata
 800fbf8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800fbfc:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 800fc00:	20000124 	.word	0x20000124
  ldr  r3, = _ebss
 800fc04:	20001620 	.word	0x20001620

0800fc08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800fc08:	e7fe      	b.n	800fc08 <ADC_IRQHandler>
	...

0800fc0c <__errno>:
 800fc0c:	4b01      	ldr	r3, [pc, #4]	; (800fc14 <__errno+0x8>)
 800fc0e:	6818      	ldr	r0, [r3, #0]
 800fc10:	4770      	bx	lr
 800fc12:	bf00      	nop
 800fc14:	200000bc 	.word	0x200000bc

0800fc18 <__libc_init_array>:
 800fc18:	b570      	push	{r4, r5, r6, lr}
 800fc1a:	4e0d      	ldr	r6, [pc, #52]	; (800fc50 <__libc_init_array+0x38>)
 800fc1c:	4c0d      	ldr	r4, [pc, #52]	; (800fc54 <__libc_init_array+0x3c>)
 800fc1e:	1ba4      	subs	r4, r4, r6
 800fc20:	10a4      	asrs	r4, r4, #2
 800fc22:	2500      	movs	r5, #0
 800fc24:	42a5      	cmp	r5, r4
 800fc26:	d109      	bne.n	800fc3c <__libc_init_array+0x24>
 800fc28:	4e0b      	ldr	r6, [pc, #44]	; (800fc58 <__libc_init_array+0x40>)
 800fc2a:	4c0c      	ldr	r4, [pc, #48]	; (800fc5c <__libc_init_array+0x44>)
 800fc2c:	f001 f932 	bl	8010e94 <_init>
 800fc30:	1ba4      	subs	r4, r4, r6
 800fc32:	10a4      	asrs	r4, r4, #2
 800fc34:	2500      	movs	r5, #0
 800fc36:	42a5      	cmp	r5, r4
 800fc38:	d105      	bne.n	800fc46 <__libc_init_array+0x2e>
 800fc3a:	bd70      	pop	{r4, r5, r6, pc}
 800fc3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fc40:	4798      	blx	r3
 800fc42:	3501      	adds	r5, #1
 800fc44:	e7ee      	b.n	800fc24 <__libc_init_array+0xc>
 800fc46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fc4a:	4798      	blx	r3
 800fc4c:	3501      	adds	r5, #1
 800fc4e:	e7f2      	b.n	800fc36 <__libc_init_array+0x1e>
 800fc50:	08011548 	.word	0x08011548
 800fc54:	08011548 	.word	0x08011548
 800fc58:	08011548 	.word	0x08011548
 800fc5c:	0801154c 	.word	0x0801154c

0800fc60 <memset>:
 800fc60:	4402      	add	r2, r0
 800fc62:	4603      	mov	r3, r0
 800fc64:	4293      	cmp	r3, r2
 800fc66:	d100      	bne.n	800fc6a <memset+0xa>
 800fc68:	4770      	bx	lr
 800fc6a:	f803 1b01 	strb.w	r1, [r3], #1
 800fc6e:	e7f9      	b.n	800fc64 <memset+0x4>

0800fc70 <iprintf>:
 800fc70:	b40f      	push	{r0, r1, r2, r3}
 800fc72:	4b0a      	ldr	r3, [pc, #40]	; (800fc9c <iprintf+0x2c>)
 800fc74:	b513      	push	{r0, r1, r4, lr}
 800fc76:	681c      	ldr	r4, [r3, #0]
 800fc78:	b124      	cbz	r4, 800fc84 <iprintf+0x14>
 800fc7a:	69a3      	ldr	r3, [r4, #24]
 800fc7c:	b913      	cbnz	r3, 800fc84 <iprintf+0x14>
 800fc7e:	4620      	mov	r0, r4
 800fc80:	f000 fad8 	bl	8010234 <__sinit>
 800fc84:	ab05      	add	r3, sp, #20
 800fc86:	9a04      	ldr	r2, [sp, #16]
 800fc88:	68a1      	ldr	r1, [r4, #8]
 800fc8a:	9301      	str	r3, [sp, #4]
 800fc8c:	4620      	mov	r0, r4
 800fc8e:	f000 fc99 	bl	80105c4 <_vfiprintf_r>
 800fc92:	b002      	add	sp, #8
 800fc94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc98:	b004      	add	sp, #16
 800fc9a:	4770      	bx	lr
 800fc9c:	200000bc 	.word	0x200000bc

0800fca0 <_puts_r>:
 800fca0:	b570      	push	{r4, r5, r6, lr}
 800fca2:	460e      	mov	r6, r1
 800fca4:	4605      	mov	r5, r0
 800fca6:	b118      	cbz	r0, 800fcb0 <_puts_r+0x10>
 800fca8:	6983      	ldr	r3, [r0, #24]
 800fcaa:	b90b      	cbnz	r3, 800fcb0 <_puts_r+0x10>
 800fcac:	f000 fac2 	bl	8010234 <__sinit>
 800fcb0:	69ab      	ldr	r3, [r5, #24]
 800fcb2:	68ac      	ldr	r4, [r5, #8]
 800fcb4:	b913      	cbnz	r3, 800fcbc <_puts_r+0x1c>
 800fcb6:	4628      	mov	r0, r5
 800fcb8:	f000 fabc 	bl	8010234 <__sinit>
 800fcbc:	4b23      	ldr	r3, [pc, #140]	; (800fd4c <_puts_r+0xac>)
 800fcbe:	429c      	cmp	r4, r3
 800fcc0:	d117      	bne.n	800fcf2 <_puts_r+0x52>
 800fcc2:	686c      	ldr	r4, [r5, #4]
 800fcc4:	89a3      	ldrh	r3, [r4, #12]
 800fcc6:	071b      	lsls	r3, r3, #28
 800fcc8:	d51d      	bpl.n	800fd06 <_puts_r+0x66>
 800fcca:	6923      	ldr	r3, [r4, #16]
 800fccc:	b1db      	cbz	r3, 800fd06 <_puts_r+0x66>
 800fcce:	3e01      	subs	r6, #1
 800fcd0:	68a3      	ldr	r3, [r4, #8]
 800fcd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fcd6:	3b01      	subs	r3, #1
 800fcd8:	60a3      	str	r3, [r4, #8]
 800fcda:	b9e9      	cbnz	r1, 800fd18 <_puts_r+0x78>
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	da2e      	bge.n	800fd3e <_puts_r+0x9e>
 800fce0:	4622      	mov	r2, r4
 800fce2:	210a      	movs	r1, #10
 800fce4:	4628      	mov	r0, r5
 800fce6:	f000 f8f5 	bl	800fed4 <__swbuf_r>
 800fcea:	3001      	adds	r0, #1
 800fcec:	d011      	beq.n	800fd12 <_puts_r+0x72>
 800fcee:	200a      	movs	r0, #10
 800fcf0:	e011      	b.n	800fd16 <_puts_r+0x76>
 800fcf2:	4b17      	ldr	r3, [pc, #92]	; (800fd50 <_puts_r+0xb0>)
 800fcf4:	429c      	cmp	r4, r3
 800fcf6:	d101      	bne.n	800fcfc <_puts_r+0x5c>
 800fcf8:	68ac      	ldr	r4, [r5, #8]
 800fcfa:	e7e3      	b.n	800fcc4 <_puts_r+0x24>
 800fcfc:	4b15      	ldr	r3, [pc, #84]	; (800fd54 <_puts_r+0xb4>)
 800fcfe:	429c      	cmp	r4, r3
 800fd00:	bf08      	it	eq
 800fd02:	68ec      	ldreq	r4, [r5, #12]
 800fd04:	e7de      	b.n	800fcc4 <_puts_r+0x24>
 800fd06:	4621      	mov	r1, r4
 800fd08:	4628      	mov	r0, r5
 800fd0a:	f000 f935 	bl	800ff78 <__swsetup_r>
 800fd0e:	2800      	cmp	r0, #0
 800fd10:	d0dd      	beq.n	800fcce <_puts_r+0x2e>
 800fd12:	f04f 30ff 	mov.w	r0, #4294967295
 800fd16:	bd70      	pop	{r4, r5, r6, pc}
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	da04      	bge.n	800fd26 <_puts_r+0x86>
 800fd1c:	69a2      	ldr	r2, [r4, #24]
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	dc06      	bgt.n	800fd30 <_puts_r+0x90>
 800fd22:	290a      	cmp	r1, #10
 800fd24:	d004      	beq.n	800fd30 <_puts_r+0x90>
 800fd26:	6823      	ldr	r3, [r4, #0]
 800fd28:	1c5a      	adds	r2, r3, #1
 800fd2a:	6022      	str	r2, [r4, #0]
 800fd2c:	7019      	strb	r1, [r3, #0]
 800fd2e:	e7cf      	b.n	800fcd0 <_puts_r+0x30>
 800fd30:	4622      	mov	r2, r4
 800fd32:	4628      	mov	r0, r5
 800fd34:	f000 f8ce 	bl	800fed4 <__swbuf_r>
 800fd38:	3001      	adds	r0, #1
 800fd3a:	d1c9      	bne.n	800fcd0 <_puts_r+0x30>
 800fd3c:	e7e9      	b.n	800fd12 <_puts_r+0x72>
 800fd3e:	6823      	ldr	r3, [r4, #0]
 800fd40:	200a      	movs	r0, #10
 800fd42:	1c5a      	adds	r2, r3, #1
 800fd44:	6022      	str	r2, [r4, #0]
 800fd46:	7018      	strb	r0, [r3, #0]
 800fd48:	e7e5      	b.n	800fd16 <_puts_r+0x76>
 800fd4a:	bf00      	nop
 800fd4c:	080114c8 	.word	0x080114c8
 800fd50:	080114e8 	.word	0x080114e8
 800fd54:	080114a8 	.word	0x080114a8

0800fd58 <puts>:
 800fd58:	4b02      	ldr	r3, [pc, #8]	; (800fd64 <puts+0xc>)
 800fd5a:	4601      	mov	r1, r0
 800fd5c:	6818      	ldr	r0, [r3, #0]
 800fd5e:	f7ff bf9f 	b.w	800fca0 <_puts_r>
 800fd62:	bf00      	nop
 800fd64:	200000bc 	.word	0x200000bc

0800fd68 <setbuf>:
 800fd68:	2900      	cmp	r1, #0
 800fd6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd6e:	bf0c      	ite	eq
 800fd70:	2202      	moveq	r2, #2
 800fd72:	2200      	movne	r2, #0
 800fd74:	f000 b800 	b.w	800fd78 <setvbuf>

0800fd78 <setvbuf>:
 800fd78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd7c:	461d      	mov	r5, r3
 800fd7e:	4b51      	ldr	r3, [pc, #324]	; (800fec4 <setvbuf+0x14c>)
 800fd80:	681e      	ldr	r6, [r3, #0]
 800fd82:	4604      	mov	r4, r0
 800fd84:	460f      	mov	r7, r1
 800fd86:	4690      	mov	r8, r2
 800fd88:	b126      	cbz	r6, 800fd94 <setvbuf+0x1c>
 800fd8a:	69b3      	ldr	r3, [r6, #24]
 800fd8c:	b913      	cbnz	r3, 800fd94 <setvbuf+0x1c>
 800fd8e:	4630      	mov	r0, r6
 800fd90:	f000 fa50 	bl	8010234 <__sinit>
 800fd94:	4b4c      	ldr	r3, [pc, #304]	; (800fec8 <setvbuf+0x150>)
 800fd96:	429c      	cmp	r4, r3
 800fd98:	d152      	bne.n	800fe40 <setvbuf+0xc8>
 800fd9a:	6874      	ldr	r4, [r6, #4]
 800fd9c:	f1b8 0f02 	cmp.w	r8, #2
 800fda0:	d006      	beq.n	800fdb0 <setvbuf+0x38>
 800fda2:	f1b8 0f01 	cmp.w	r8, #1
 800fda6:	f200 8089 	bhi.w	800febc <setvbuf+0x144>
 800fdaa:	2d00      	cmp	r5, #0
 800fdac:	f2c0 8086 	blt.w	800febc <setvbuf+0x144>
 800fdb0:	4621      	mov	r1, r4
 800fdb2:	4630      	mov	r0, r6
 800fdb4:	f000 f9d4 	bl	8010160 <_fflush_r>
 800fdb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fdba:	b141      	cbz	r1, 800fdce <setvbuf+0x56>
 800fdbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fdc0:	4299      	cmp	r1, r3
 800fdc2:	d002      	beq.n	800fdca <setvbuf+0x52>
 800fdc4:	4630      	mov	r0, r6
 800fdc6:	f000 fb2b 	bl	8010420 <_free_r>
 800fdca:	2300      	movs	r3, #0
 800fdcc:	6363      	str	r3, [r4, #52]	; 0x34
 800fdce:	2300      	movs	r3, #0
 800fdd0:	61a3      	str	r3, [r4, #24]
 800fdd2:	6063      	str	r3, [r4, #4]
 800fdd4:	89a3      	ldrh	r3, [r4, #12]
 800fdd6:	061b      	lsls	r3, r3, #24
 800fdd8:	d503      	bpl.n	800fde2 <setvbuf+0x6a>
 800fdda:	6921      	ldr	r1, [r4, #16]
 800fddc:	4630      	mov	r0, r6
 800fdde:	f000 fb1f 	bl	8010420 <_free_r>
 800fde2:	89a3      	ldrh	r3, [r4, #12]
 800fde4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800fde8:	f023 0303 	bic.w	r3, r3, #3
 800fdec:	f1b8 0f02 	cmp.w	r8, #2
 800fdf0:	81a3      	strh	r3, [r4, #12]
 800fdf2:	d05d      	beq.n	800feb0 <setvbuf+0x138>
 800fdf4:	ab01      	add	r3, sp, #4
 800fdf6:	466a      	mov	r2, sp
 800fdf8:	4621      	mov	r1, r4
 800fdfa:	4630      	mov	r0, r6
 800fdfc:	f000 faa4 	bl	8010348 <__swhatbuf_r>
 800fe00:	89a3      	ldrh	r3, [r4, #12]
 800fe02:	4318      	orrs	r0, r3
 800fe04:	81a0      	strh	r0, [r4, #12]
 800fe06:	bb2d      	cbnz	r5, 800fe54 <setvbuf+0xdc>
 800fe08:	9d00      	ldr	r5, [sp, #0]
 800fe0a:	4628      	mov	r0, r5
 800fe0c:	f000 fb00 	bl	8010410 <malloc>
 800fe10:	4607      	mov	r7, r0
 800fe12:	2800      	cmp	r0, #0
 800fe14:	d14e      	bne.n	800feb4 <setvbuf+0x13c>
 800fe16:	f8dd 9000 	ldr.w	r9, [sp]
 800fe1a:	45a9      	cmp	r9, r5
 800fe1c:	d13c      	bne.n	800fe98 <setvbuf+0x120>
 800fe1e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe22:	89a3      	ldrh	r3, [r4, #12]
 800fe24:	f043 0302 	orr.w	r3, r3, #2
 800fe28:	81a3      	strh	r3, [r4, #12]
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	60a3      	str	r3, [r4, #8]
 800fe2e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fe32:	6023      	str	r3, [r4, #0]
 800fe34:	6123      	str	r3, [r4, #16]
 800fe36:	2301      	movs	r3, #1
 800fe38:	6163      	str	r3, [r4, #20]
 800fe3a:	b003      	add	sp, #12
 800fe3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe40:	4b22      	ldr	r3, [pc, #136]	; (800fecc <setvbuf+0x154>)
 800fe42:	429c      	cmp	r4, r3
 800fe44:	d101      	bne.n	800fe4a <setvbuf+0xd2>
 800fe46:	68b4      	ldr	r4, [r6, #8]
 800fe48:	e7a8      	b.n	800fd9c <setvbuf+0x24>
 800fe4a:	4b21      	ldr	r3, [pc, #132]	; (800fed0 <setvbuf+0x158>)
 800fe4c:	429c      	cmp	r4, r3
 800fe4e:	bf08      	it	eq
 800fe50:	68f4      	ldreq	r4, [r6, #12]
 800fe52:	e7a3      	b.n	800fd9c <setvbuf+0x24>
 800fe54:	2f00      	cmp	r7, #0
 800fe56:	d0d8      	beq.n	800fe0a <setvbuf+0x92>
 800fe58:	69b3      	ldr	r3, [r6, #24]
 800fe5a:	b913      	cbnz	r3, 800fe62 <setvbuf+0xea>
 800fe5c:	4630      	mov	r0, r6
 800fe5e:	f000 f9e9 	bl	8010234 <__sinit>
 800fe62:	f1b8 0f01 	cmp.w	r8, #1
 800fe66:	bf08      	it	eq
 800fe68:	89a3      	ldrheq	r3, [r4, #12]
 800fe6a:	6027      	str	r7, [r4, #0]
 800fe6c:	bf04      	itt	eq
 800fe6e:	f043 0301 	orreq.w	r3, r3, #1
 800fe72:	81a3      	strheq	r3, [r4, #12]
 800fe74:	89a3      	ldrh	r3, [r4, #12]
 800fe76:	f013 0008 	ands.w	r0, r3, #8
 800fe7a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800fe7e:	d01b      	beq.n	800feb8 <setvbuf+0x140>
 800fe80:	f013 0001 	ands.w	r0, r3, #1
 800fe84:	bf18      	it	ne
 800fe86:	426d      	negne	r5, r5
 800fe88:	f04f 0300 	mov.w	r3, #0
 800fe8c:	bf1d      	ittte	ne
 800fe8e:	60a3      	strne	r3, [r4, #8]
 800fe90:	61a5      	strne	r5, [r4, #24]
 800fe92:	4618      	movne	r0, r3
 800fe94:	60a5      	streq	r5, [r4, #8]
 800fe96:	e7d0      	b.n	800fe3a <setvbuf+0xc2>
 800fe98:	4648      	mov	r0, r9
 800fe9a:	f000 fab9 	bl	8010410 <malloc>
 800fe9e:	4607      	mov	r7, r0
 800fea0:	2800      	cmp	r0, #0
 800fea2:	d0bc      	beq.n	800fe1e <setvbuf+0xa6>
 800fea4:	89a3      	ldrh	r3, [r4, #12]
 800fea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800feaa:	81a3      	strh	r3, [r4, #12]
 800feac:	464d      	mov	r5, r9
 800feae:	e7d3      	b.n	800fe58 <setvbuf+0xe0>
 800feb0:	2000      	movs	r0, #0
 800feb2:	e7b6      	b.n	800fe22 <setvbuf+0xaa>
 800feb4:	46a9      	mov	r9, r5
 800feb6:	e7f5      	b.n	800fea4 <setvbuf+0x12c>
 800feb8:	60a0      	str	r0, [r4, #8]
 800feba:	e7be      	b.n	800fe3a <setvbuf+0xc2>
 800febc:	f04f 30ff 	mov.w	r0, #4294967295
 800fec0:	e7bb      	b.n	800fe3a <setvbuf+0xc2>
 800fec2:	bf00      	nop
 800fec4:	200000bc 	.word	0x200000bc
 800fec8:	080114c8 	.word	0x080114c8
 800fecc:	080114e8 	.word	0x080114e8
 800fed0:	080114a8 	.word	0x080114a8

0800fed4 <__swbuf_r>:
 800fed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fed6:	460e      	mov	r6, r1
 800fed8:	4614      	mov	r4, r2
 800feda:	4605      	mov	r5, r0
 800fedc:	b118      	cbz	r0, 800fee6 <__swbuf_r+0x12>
 800fede:	6983      	ldr	r3, [r0, #24]
 800fee0:	b90b      	cbnz	r3, 800fee6 <__swbuf_r+0x12>
 800fee2:	f000 f9a7 	bl	8010234 <__sinit>
 800fee6:	4b21      	ldr	r3, [pc, #132]	; (800ff6c <__swbuf_r+0x98>)
 800fee8:	429c      	cmp	r4, r3
 800feea:	d12a      	bne.n	800ff42 <__swbuf_r+0x6e>
 800feec:	686c      	ldr	r4, [r5, #4]
 800feee:	69a3      	ldr	r3, [r4, #24]
 800fef0:	60a3      	str	r3, [r4, #8]
 800fef2:	89a3      	ldrh	r3, [r4, #12]
 800fef4:	071a      	lsls	r2, r3, #28
 800fef6:	d52e      	bpl.n	800ff56 <__swbuf_r+0x82>
 800fef8:	6923      	ldr	r3, [r4, #16]
 800fefa:	b363      	cbz	r3, 800ff56 <__swbuf_r+0x82>
 800fefc:	6923      	ldr	r3, [r4, #16]
 800fefe:	6820      	ldr	r0, [r4, #0]
 800ff00:	1ac0      	subs	r0, r0, r3
 800ff02:	6963      	ldr	r3, [r4, #20]
 800ff04:	b2f6      	uxtb	r6, r6
 800ff06:	4283      	cmp	r3, r0
 800ff08:	4637      	mov	r7, r6
 800ff0a:	dc04      	bgt.n	800ff16 <__swbuf_r+0x42>
 800ff0c:	4621      	mov	r1, r4
 800ff0e:	4628      	mov	r0, r5
 800ff10:	f000 f926 	bl	8010160 <_fflush_r>
 800ff14:	bb28      	cbnz	r0, 800ff62 <__swbuf_r+0x8e>
 800ff16:	68a3      	ldr	r3, [r4, #8]
 800ff18:	3b01      	subs	r3, #1
 800ff1a:	60a3      	str	r3, [r4, #8]
 800ff1c:	6823      	ldr	r3, [r4, #0]
 800ff1e:	1c5a      	adds	r2, r3, #1
 800ff20:	6022      	str	r2, [r4, #0]
 800ff22:	701e      	strb	r6, [r3, #0]
 800ff24:	6963      	ldr	r3, [r4, #20]
 800ff26:	3001      	adds	r0, #1
 800ff28:	4283      	cmp	r3, r0
 800ff2a:	d004      	beq.n	800ff36 <__swbuf_r+0x62>
 800ff2c:	89a3      	ldrh	r3, [r4, #12]
 800ff2e:	07db      	lsls	r3, r3, #31
 800ff30:	d519      	bpl.n	800ff66 <__swbuf_r+0x92>
 800ff32:	2e0a      	cmp	r6, #10
 800ff34:	d117      	bne.n	800ff66 <__swbuf_r+0x92>
 800ff36:	4621      	mov	r1, r4
 800ff38:	4628      	mov	r0, r5
 800ff3a:	f000 f911 	bl	8010160 <_fflush_r>
 800ff3e:	b190      	cbz	r0, 800ff66 <__swbuf_r+0x92>
 800ff40:	e00f      	b.n	800ff62 <__swbuf_r+0x8e>
 800ff42:	4b0b      	ldr	r3, [pc, #44]	; (800ff70 <__swbuf_r+0x9c>)
 800ff44:	429c      	cmp	r4, r3
 800ff46:	d101      	bne.n	800ff4c <__swbuf_r+0x78>
 800ff48:	68ac      	ldr	r4, [r5, #8]
 800ff4a:	e7d0      	b.n	800feee <__swbuf_r+0x1a>
 800ff4c:	4b09      	ldr	r3, [pc, #36]	; (800ff74 <__swbuf_r+0xa0>)
 800ff4e:	429c      	cmp	r4, r3
 800ff50:	bf08      	it	eq
 800ff52:	68ec      	ldreq	r4, [r5, #12]
 800ff54:	e7cb      	b.n	800feee <__swbuf_r+0x1a>
 800ff56:	4621      	mov	r1, r4
 800ff58:	4628      	mov	r0, r5
 800ff5a:	f000 f80d 	bl	800ff78 <__swsetup_r>
 800ff5e:	2800      	cmp	r0, #0
 800ff60:	d0cc      	beq.n	800fefc <__swbuf_r+0x28>
 800ff62:	f04f 37ff 	mov.w	r7, #4294967295
 800ff66:	4638      	mov	r0, r7
 800ff68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff6a:	bf00      	nop
 800ff6c:	080114c8 	.word	0x080114c8
 800ff70:	080114e8 	.word	0x080114e8
 800ff74:	080114a8 	.word	0x080114a8

0800ff78 <__swsetup_r>:
 800ff78:	4b32      	ldr	r3, [pc, #200]	; (8010044 <__swsetup_r+0xcc>)
 800ff7a:	b570      	push	{r4, r5, r6, lr}
 800ff7c:	681d      	ldr	r5, [r3, #0]
 800ff7e:	4606      	mov	r6, r0
 800ff80:	460c      	mov	r4, r1
 800ff82:	b125      	cbz	r5, 800ff8e <__swsetup_r+0x16>
 800ff84:	69ab      	ldr	r3, [r5, #24]
 800ff86:	b913      	cbnz	r3, 800ff8e <__swsetup_r+0x16>
 800ff88:	4628      	mov	r0, r5
 800ff8a:	f000 f953 	bl	8010234 <__sinit>
 800ff8e:	4b2e      	ldr	r3, [pc, #184]	; (8010048 <__swsetup_r+0xd0>)
 800ff90:	429c      	cmp	r4, r3
 800ff92:	d10f      	bne.n	800ffb4 <__swsetup_r+0x3c>
 800ff94:	686c      	ldr	r4, [r5, #4]
 800ff96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff9a:	b29a      	uxth	r2, r3
 800ff9c:	0715      	lsls	r5, r2, #28
 800ff9e:	d42c      	bmi.n	800fffa <__swsetup_r+0x82>
 800ffa0:	06d0      	lsls	r0, r2, #27
 800ffa2:	d411      	bmi.n	800ffc8 <__swsetup_r+0x50>
 800ffa4:	2209      	movs	r2, #9
 800ffa6:	6032      	str	r2, [r6, #0]
 800ffa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffac:	81a3      	strh	r3, [r4, #12]
 800ffae:	f04f 30ff 	mov.w	r0, #4294967295
 800ffb2:	e03e      	b.n	8010032 <__swsetup_r+0xba>
 800ffb4:	4b25      	ldr	r3, [pc, #148]	; (801004c <__swsetup_r+0xd4>)
 800ffb6:	429c      	cmp	r4, r3
 800ffb8:	d101      	bne.n	800ffbe <__swsetup_r+0x46>
 800ffba:	68ac      	ldr	r4, [r5, #8]
 800ffbc:	e7eb      	b.n	800ff96 <__swsetup_r+0x1e>
 800ffbe:	4b24      	ldr	r3, [pc, #144]	; (8010050 <__swsetup_r+0xd8>)
 800ffc0:	429c      	cmp	r4, r3
 800ffc2:	bf08      	it	eq
 800ffc4:	68ec      	ldreq	r4, [r5, #12]
 800ffc6:	e7e6      	b.n	800ff96 <__swsetup_r+0x1e>
 800ffc8:	0751      	lsls	r1, r2, #29
 800ffca:	d512      	bpl.n	800fff2 <__swsetup_r+0x7a>
 800ffcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffce:	b141      	cbz	r1, 800ffe2 <__swsetup_r+0x6a>
 800ffd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffd4:	4299      	cmp	r1, r3
 800ffd6:	d002      	beq.n	800ffde <__swsetup_r+0x66>
 800ffd8:	4630      	mov	r0, r6
 800ffda:	f000 fa21 	bl	8010420 <_free_r>
 800ffde:	2300      	movs	r3, #0
 800ffe0:	6363      	str	r3, [r4, #52]	; 0x34
 800ffe2:	89a3      	ldrh	r3, [r4, #12]
 800ffe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ffe8:	81a3      	strh	r3, [r4, #12]
 800ffea:	2300      	movs	r3, #0
 800ffec:	6063      	str	r3, [r4, #4]
 800ffee:	6923      	ldr	r3, [r4, #16]
 800fff0:	6023      	str	r3, [r4, #0]
 800fff2:	89a3      	ldrh	r3, [r4, #12]
 800fff4:	f043 0308 	orr.w	r3, r3, #8
 800fff8:	81a3      	strh	r3, [r4, #12]
 800fffa:	6923      	ldr	r3, [r4, #16]
 800fffc:	b94b      	cbnz	r3, 8010012 <__swsetup_r+0x9a>
 800fffe:	89a3      	ldrh	r3, [r4, #12]
 8010000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010008:	d003      	beq.n	8010012 <__swsetup_r+0x9a>
 801000a:	4621      	mov	r1, r4
 801000c:	4630      	mov	r0, r6
 801000e:	f000 f9bf 	bl	8010390 <__smakebuf_r>
 8010012:	89a2      	ldrh	r2, [r4, #12]
 8010014:	f012 0301 	ands.w	r3, r2, #1
 8010018:	d00c      	beq.n	8010034 <__swsetup_r+0xbc>
 801001a:	2300      	movs	r3, #0
 801001c:	60a3      	str	r3, [r4, #8]
 801001e:	6963      	ldr	r3, [r4, #20]
 8010020:	425b      	negs	r3, r3
 8010022:	61a3      	str	r3, [r4, #24]
 8010024:	6923      	ldr	r3, [r4, #16]
 8010026:	b953      	cbnz	r3, 801003e <__swsetup_r+0xc6>
 8010028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801002c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010030:	d1ba      	bne.n	800ffa8 <__swsetup_r+0x30>
 8010032:	bd70      	pop	{r4, r5, r6, pc}
 8010034:	0792      	lsls	r2, r2, #30
 8010036:	bf58      	it	pl
 8010038:	6963      	ldrpl	r3, [r4, #20]
 801003a:	60a3      	str	r3, [r4, #8]
 801003c:	e7f2      	b.n	8010024 <__swsetup_r+0xac>
 801003e:	2000      	movs	r0, #0
 8010040:	e7f7      	b.n	8010032 <__swsetup_r+0xba>
 8010042:	bf00      	nop
 8010044:	200000bc 	.word	0x200000bc
 8010048:	080114c8 	.word	0x080114c8
 801004c:	080114e8 	.word	0x080114e8
 8010050:	080114a8 	.word	0x080114a8

08010054 <__sflush_r>:
 8010054:	898a      	ldrh	r2, [r1, #12]
 8010056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801005a:	4605      	mov	r5, r0
 801005c:	0710      	lsls	r0, r2, #28
 801005e:	460c      	mov	r4, r1
 8010060:	d458      	bmi.n	8010114 <__sflush_r+0xc0>
 8010062:	684b      	ldr	r3, [r1, #4]
 8010064:	2b00      	cmp	r3, #0
 8010066:	dc05      	bgt.n	8010074 <__sflush_r+0x20>
 8010068:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801006a:	2b00      	cmp	r3, #0
 801006c:	dc02      	bgt.n	8010074 <__sflush_r+0x20>
 801006e:	2000      	movs	r0, #0
 8010070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010076:	2e00      	cmp	r6, #0
 8010078:	d0f9      	beq.n	801006e <__sflush_r+0x1a>
 801007a:	2300      	movs	r3, #0
 801007c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010080:	682f      	ldr	r7, [r5, #0]
 8010082:	6a21      	ldr	r1, [r4, #32]
 8010084:	602b      	str	r3, [r5, #0]
 8010086:	d032      	beq.n	80100ee <__sflush_r+0x9a>
 8010088:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801008a:	89a3      	ldrh	r3, [r4, #12]
 801008c:	075a      	lsls	r2, r3, #29
 801008e:	d505      	bpl.n	801009c <__sflush_r+0x48>
 8010090:	6863      	ldr	r3, [r4, #4]
 8010092:	1ac0      	subs	r0, r0, r3
 8010094:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010096:	b10b      	cbz	r3, 801009c <__sflush_r+0x48>
 8010098:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801009a:	1ac0      	subs	r0, r0, r3
 801009c:	2300      	movs	r3, #0
 801009e:	4602      	mov	r2, r0
 80100a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80100a2:	6a21      	ldr	r1, [r4, #32]
 80100a4:	4628      	mov	r0, r5
 80100a6:	47b0      	blx	r6
 80100a8:	1c43      	adds	r3, r0, #1
 80100aa:	89a3      	ldrh	r3, [r4, #12]
 80100ac:	d106      	bne.n	80100bc <__sflush_r+0x68>
 80100ae:	6829      	ldr	r1, [r5, #0]
 80100b0:	291d      	cmp	r1, #29
 80100b2:	d848      	bhi.n	8010146 <__sflush_r+0xf2>
 80100b4:	4a29      	ldr	r2, [pc, #164]	; (801015c <__sflush_r+0x108>)
 80100b6:	40ca      	lsrs	r2, r1
 80100b8:	07d6      	lsls	r6, r2, #31
 80100ba:	d544      	bpl.n	8010146 <__sflush_r+0xf2>
 80100bc:	2200      	movs	r2, #0
 80100be:	6062      	str	r2, [r4, #4]
 80100c0:	04d9      	lsls	r1, r3, #19
 80100c2:	6922      	ldr	r2, [r4, #16]
 80100c4:	6022      	str	r2, [r4, #0]
 80100c6:	d504      	bpl.n	80100d2 <__sflush_r+0x7e>
 80100c8:	1c42      	adds	r2, r0, #1
 80100ca:	d101      	bne.n	80100d0 <__sflush_r+0x7c>
 80100cc:	682b      	ldr	r3, [r5, #0]
 80100ce:	b903      	cbnz	r3, 80100d2 <__sflush_r+0x7e>
 80100d0:	6560      	str	r0, [r4, #84]	; 0x54
 80100d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100d4:	602f      	str	r7, [r5, #0]
 80100d6:	2900      	cmp	r1, #0
 80100d8:	d0c9      	beq.n	801006e <__sflush_r+0x1a>
 80100da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100de:	4299      	cmp	r1, r3
 80100e0:	d002      	beq.n	80100e8 <__sflush_r+0x94>
 80100e2:	4628      	mov	r0, r5
 80100e4:	f000 f99c 	bl	8010420 <_free_r>
 80100e8:	2000      	movs	r0, #0
 80100ea:	6360      	str	r0, [r4, #52]	; 0x34
 80100ec:	e7c0      	b.n	8010070 <__sflush_r+0x1c>
 80100ee:	2301      	movs	r3, #1
 80100f0:	4628      	mov	r0, r5
 80100f2:	47b0      	blx	r6
 80100f4:	1c41      	adds	r1, r0, #1
 80100f6:	d1c8      	bne.n	801008a <__sflush_r+0x36>
 80100f8:	682b      	ldr	r3, [r5, #0]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d0c5      	beq.n	801008a <__sflush_r+0x36>
 80100fe:	2b1d      	cmp	r3, #29
 8010100:	d001      	beq.n	8010106 <__sflush_r+0xb2>
 8010102:	2b16      	cmp	r3, #22
 8010104:	d101      	bne.n	801010a <__sflush_r+0xb6>
 8010106:	602f      	str	r7, [r5, #0]
 8010108:	e7b1      	b.n	801006e <__sflush_r+0x1a>
 801010a:	89a3      	ldrh	r3, [r4, #12]
 801010c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010110:	81a3      	strh	r3, [r4, #12]
 8010112:	e7ad      	b.n	8010070 <__sflush_r+0x1c>
 8010114:	690f      	ldr	r7, [r1, #16]
 8010116:	2f00      	cmp	r7, #0
 8010118:	d0a9      	beq.n	801006e <__sflush_r+0x1a>
 801011a:	0793      	lsls	r3, r2, #30
 801011c:	680e      	ldr	r6, [r1, #0]
 801011e:	bf08      	it	eq
 8010120:	694b      	ldreq	r3, [r1, #20]
 8010122:	600f      	str	r7, [r1, #0]
 8010124:	bf18      	it	ne
 8010126:	2300      	movne	r3, #0
 8010128:	eba6 0807 	sub.w	r8, r6, r7
 801012c:	608b      	str	r3, [r1, #8]
 801012e:	f1b8 0f00 	cmp.w	r8, #0
 8010132:	dd9c      	ble.n	801006e <__sflush_r+0x1a>
 8010134:	4643      	mov	r3, r8
 8010136:	463a      	mov	r2, r7
 8010138:	6a21      	ldr	r1, [r4, #32]
 801013a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801013c:	4628      	mov	r0, r5
 801013e:	47b0      	blx	r6
 8010140:	2800      	cmp	r0, #0
 8010142:	dc06      	bgt.n	8010152 <__sflush_r+0xfe>
 8010144:	89a3      	ldrh	r3, [r4, #12]
 8010146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801014a:	81a3      	strh	r3, [r4, #12]
 801014c:	f04f 30ff 	mov.w	r0, #4294967295
 8010150:	e78e      	b.n	8010070 <__sflush_r+0x1c>
 8010152:	4407      	add	r7, r0
 8010154:	eba8 0800 	sub.w	r8, r8, r0
 8010158:	e7e9      	b.n	801012e <__sflush_r+0xda>
 801015a:	bf00      	nop
 801015c:	20400001 	.word	0x20400001

08010160 <_fflush_r>:
 8010160:	b538      	push	{r3, r4, r5, lr}
 8010162:	690b      	ldr	r3, [r1, #16]
 8010164:	4605      	mov	r5, r0
 8010166:	460c      	mov	r4, r1
 8010168:	b1db      	cbz	r3, 80101a2 <_fflush_r+0x42>
 801016a:	b118      	cbz	r0, 8010174 <_fflush_r+0x14>
 801016c:	6983      	ldr	r3, [r0, #24]
 801016e:	b90b      	cbnz	r3, 8010174 <_fflush_r+0x14>
 8010170:	f000 f860 	bl	8010234 <__sinit>
 8010174:	4b0c      	ldr	r3, [pc, #48]	; (80101a8 <_fflush_r+0x48>)
 8010176:	429c      	cmp	r4, r3
 8010178:	d109      	bne.n	801018e <_fflush_r+0x2e>
 801017a:	686c      	ldr	r4, [r5, #4]
 801017c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010180:	b17b      	cbz	r3, 80101a2 <_fflush_r+0x42>
 8010182:	4621      	mov	r1, r4
 8010184:	4628      	mov	r0, r5
 8010186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801018a:	f7ff bf63 	b.w	8010054 <__sflush_r>
 801018e:	4b07      	ldr	r3, [pc, #28]	; (80101ac <_fflush_r+0x4c>)
 8010190:	429c      	cmp	r4, r3
 8010192:	d101      	bne.n	8010198 <_fflush_r+0x38>
 8010194:	68ac      	ldr	r4, [r5, #8]
 8010196:	e7f1      	b.n	801017c <_fflush_r+0x1c>
 8010198:	4b05      	ldr	r3, [pc, #20]	; (80101b0 <_fflush_r+0x50>)
 801019a:	429c      	cmp	r4, r3
 801019c:	bf08      	it	eq
 801019e:	68ec      	ldreq	r4, [r5, #12]
 80101a0:	e7ec      	b.n	801017c <_fflush_r+0x1c>
 80101a2:	2000      	movs	r0, #0
 80101a4:	bd38      	pop	{r3, r4, r5, pc}
 80101a6:	bf00      	nop
 80101a8:	080114c8 	.word	0x080114c8
 80101ac:	080114e8 	.word	0x080114e8
 80101b0:	080114a8 	.word	0x080114a8

080101b4 <std>:
 80101b4:	2300      	movs	r3, #0
 80101b6:	b510      	push	{r4, lr}
 80101b8:	4604      	mov	r4, r0
 80101ba:	e9c0 3300 	strd	r3, r3, [r0]
 80101be:	6083      	str	r3, [r0, #8]
 80101c0:	8181      	strh	r1, [r0, #12]
 80101c2:	6643      	str	r3, [r0, #100]	; 0x64
 80101c4:	81c2      	strh	r2, [r0, #14]
 80101c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80101ca:	6183      	str	r3, [r0, #24]
 80101cc:	4619      	mov	r1, r3
 80101ce:	2208      	movs	r2, #8
 80101d0:	305c      	adds	r0, #92	; 0x5c
 80101d2:	f7ff fd45 	bl	800fc60 <memset>
 80101d6:	4b05      	ldr	r3, [pc, #20]	; (80101ec <std+0x38>)
 80101d8:	6263      	str	r3, [r4, #36]	; 0x24
 80101da:	4b05      	ldr	r3, [pc, #20]	; (80101f0 <std+0x3c>)
 80101dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80101de:	4b05      	ldr	r3, [pc, #20]	; (80101f4 <std+0x40>)
 80101e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80101e2:	4b05      	ldr	r3, [pc, #20]	; (80101f8 <std+0x44>)
 80101e4:	6224      	str	r4, [r4, #32]
 80101e6:	6323      	str	r3, [r4, #48]	; 0x30
 80101e8:	bd10      	pop	{r4, pc}
 80101ea:	bf00      	nop
 80101ec:	08010b21 	.word	0x08010b21
 80101f0:	08010b43 	.word	0x08010b43
 80101f4:	08010b7b 	.word	0x08010b7b
 80101f8:	08010b9f 	.word	0x08010b9f

080101fc <_cleanup_r>:
 80101fc:	4901      	ldr	r1, [pc, #4]	; (8010204 <_cleanup_r+0x8>)
 80101fe:	f000 b885 	b.w	801030c <_fwalk_reent>
 8010202:	bf00      	nop
 8010204:	08010161 	.word	0x08010161

08010208 <__sfmoreglue>:
 8010208:	b570      	push	{r4, r5, r6, lr}
 801020a:	1e4a      	subs	r2, r1, #1
 801020c:	2568      	movs	r5, #104	; 0x68
 801020e:	4355      	muls	r5, r2
 8010210:	460e      	mov	r6, r1
 8010212:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010216:	f000 f951 	bl	80104bc <_malloc_r>
 801021a:	4604      	mov	r4, r0
 801021c:	b140      	cbz	r0, 8010230 <__sfmoreglue+0x28>
 801021e:	2100      	movs	r1, #0
 8010220:	e9c0 1600 	strd	r1, r6, [r0]
 8010224:	300c      	adds	r0, #12
 8010226:	60a0      	str	r0, [r4, #8]
 8010228:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801022c:	f7ff fd18 	bl	800fc60 <memset>
 8010230:	4620      	mov	r0, r4
 8010232:	bd70      	pop	{r4, r5, r6, pc}

08010234 <__sinit>:
 8010234:	6983      	ldr	r3, [r0, #24]
 8010236:	b510      	push	{r4, lr}
 8010238:	4604      	mov	r4, r0
 801023a:	bb33      	cbnz	r3, 801028a <__sinit+0x56>
 801023c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010240:	6503      	str	r3, [r0, #80]	; 0x50
 8010242:	4b12      	ldr	r3, [pc, #72]	; (801028c <__sinit+0x58>)
 8010244:	4a12      	ldr	r2, [pc, #72]	; (8010290 <__sinit+0x5c>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	6282      	str	r2, [r0, #40]	; 0x28
 801024a:	4298      	cmp	r0, r3
 801024c:	bf04      	itt	eq
 801024e:	2301      	moveq	r3, #1
 8010250:	6183      	streq	r3, [r0, #24]
 8010252:	f000 f81f 	bl	8010294 <__sfp>
 8010256:	6060      	str	r0, [r4, #4]
 8010258:	4620      	mov	r0, r4
 801025a:	f000 f81b 	bl	8010294 <__sfp>
 801025e:	60a0      	str	r0, [r4, #8]
 8010260:	4620      	mov	r0, r4
 8010262:	f000 f817 	bl	8010294 <__sfp>
 8010266:	2200      	movs	r2, #0
 8010268:	60e0      	str	r0, [r4, #12]
 801026a:	2104      	movs	r1, #4
 801026c:	6860      	ldr	r0, [r4, #4]
 801026e:	f7ff ffa1 	bl	80101b4 <std>
 8010272:	2201      	movs	r2, #1
 8010274:	2109      	movs	r1, #9
 8010276:	68a0      	ldr	r0, [r4, #8]
 8010278:	f7ff ff9c 	bl	80101b4 <std>
 801027c:	2202      	movs	r2, #2
 801027e:	2112      	movs	r1, #18
 8010280:	68e0      	ldr	r0, [r4, #12]
 8010282:	f7ff ff97 	bl	80101b4 <std>
 8010286:	2301      	movs	r3, #1
 8010288:	61a3      	str	r3, [r4, #24]
 801028a:	bd10      	pop	{r4, pc}
 801028c:	080114a4 	.word	0x080114a4
 8010290:	080101fd 	.word	0x080101fd

08010294 <__sfp>:
 8010294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010296:	4b1b      	ldr	r3, [pc, #108]	; (8010304 <__sfp+0x70>)
 8010298:	681e      	ldr	r6, [r3, #0]
 801029a:	69b3      	ldr	r3, [r6, #24]
 801029c:	4607      	mov	r7, r0
 801029e:	b913      	cbnz	r3, 80102a6 <__sfp+0x12>
 80102a0:	4630      	mov	r0, r6
 80102a2:	f7ff ffc7 	bl	8010234 <__sinit>
 80102a6:	3648      	adds	r6, #72	; 0x48
 80102a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80102ac:	3b01      	subs	r3, #1
 80102ae:	d503      	bpl.n	80102b8 <__sfp+0x24>
 80102b0:	6833      	ldr	r3, [r6, #0]
 80102b2:	b133      	cbz	r3, 80102c2 <__sfp+0x2e>
 80102b4:	6836      	ldr	r6, [r6, #0]
 80102b6:	e7f7      	b.n	80102a8 <__sfp+0x14>
 80102b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80102bc:	b16d      	cbz	r5, 80102da <__sfp+0x46>
 80102be:	3468      	adds	r4, #104	; 0x68
 80102c0:	e7f4      	b.n	80102ac <__sfp+0x18>
 80102c2:	2104      	movs	r1, #4
 80102c4:	4638      	mov	r0, r7
 80102c6:	f7ff ff9f 	bl	8010208 <__sfmoreglue>
 80102ca:	6030      	str	r0, [r6, #0]
 80102cc:	2800      	cmp	r0, #0
 80102ce:	d1f1      	bne.n	80102b4 <__sfp+0x20>
 80102d0:	230c      	movs	r3, #12
 80102d2:	603b      	str	r3, [r7, #0]
 80102d4:	4604      	mov	r4, r0
 80102d6:	4620      	mov	r0, r4
 80102d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102da:	4b0b      	ldr	r3, [pc, #44]	; (8010308 <__sfp+0x74>)
 80102dc:	6665      	str	r5, [r4, #100]	; 0x64
 80102de:	e9c4 5500 	strd	r5, r5, [r4]
 80102e2:	60a5      	str	r5, [r4, #8]
 80102e4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80102e8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80102ec:	2208      	movs	r2, #8
 80102ee:	4629      	mov	r1, r5
 80102f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80102f4:	f7ff fcb4 	bl	800fc60 <memset>
 80102f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80102fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010300:	e7e9      	b.n	80102d6 <__sfp+0x42>
 8010302:	bf00      	nop
 8010304:	080114a4 	.word	0x080114a4
 8010308:	ffff0001 	.word	0xffff0001

0801030c <_fwalk_reent>:
 801030c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010310:	4680      	mov	r8, r0
 8010312:	4689      	mov	r9, r1
 8010314:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010318:	2600      	movs	r6, #0
 801031a:	b914      	cbnz	r4, 8010322 <_fwalk_reent+0x16>
 801031c:	4630      	mov	r0, r6
 801031e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010322:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010326:	3f01      	subs	r7, #1
 8010328:	d501      	bpl.n	801032e <_fwalk_reent+0x22>
 801032a:	6824      	ldr	r4, [r4, #0]
 801032c:	e7f5      	b.n	801031a <_fwalk_reent+0xe>
 801032e:	89ab      	ldrh	r3, [r5, #12]
 8010330:	2b01      	cmp	r3, #1
 8010332:	d907      	bls.n	8010344 <_fwalk_reent+0x38>
 8010334:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010338:	3301      	adds	r3, #1
 801033a:	d003      	beq.n	8010344 <_fwalk_reent+0x38>
 801033c:	4629      	mov	r1, r5
 801033e:	4640      	mov	r0, r8
 8010340:	47c8      	blx	r9
 8010342:	4306      	orrs	r6, r0
 8010344:	3568      	adds	r5, #104	; 0x68
 8010346:	e7ee      	b.n	8010326 <_fwalk_reent+0x1a>

08010348 <__swhatbuf_r>:
 8010348:	b570      	push	{r4, r5, r6, lr}
 801034a:	460e      	mov	r6, r1
 801034c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010350:	2900      	cmp	r1, #0
 8010352:	b096      	sub	sp, #88	; 0x58
 8010354:	4614      	mov	r4, r2
 8010356:	461d      	mov	r5, r3
 8010358:	da07      	bge.n	801036a <__swhatbuf_r+0x22>
 801035a:	2300      	movs	r3, #0
 801035c:	602b      	str	r3, [r5, #0]
 801035e:	89b3      	ldrh	r3, [r6, #12]
 8010360:	061a      	lsls	r2, r3, #24
 8010362:	d410      	bmi.n	8010386 <__swhatbuf_r+0x3e>
 8010364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010368:	e00e      	b.n	8010388 <__swhatbuf_r+0x40>
 801036a:	466a      	mov	r2, sp
 801036c:	f000 fc3e 	bl	8010bec <_fstat_r>
 8010370:	2800      	cmp	r0, #0
 8010372:	dbf2      	blt.n	801035a <__swhatbuf_r+0x12>
 8010374:	9a01      	ldr	r2, [sp, #4]
 8010376:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801037a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801037e:	425a      	negs	r2, r3
 8010380:	415a      	adcs	r2, r3
 8010382:	602a      	str	r2, [r5, #0]
 8010384:	e7ee      	b.n	8010364 <__swhatbuf_r+0x1c>
 8010386:	2340      	movs	r3, #64	; 0x40
 8010388:	2000      	movs	r0, #0
 801038a:	6023      	str	r3, [r4, #0]
 801038c:	b016      	add	sp, #88	; 0x58
 801038e:	bd70      	pop	{r4, r5, r6, pc}

08010390 <__smakebuf_r>:
 8010390:	898b      	ldrh	r3, [r1, #12]
 8010392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010394:	079d      	lsls	r5, r3, #30
 8010396:	4606      	mov	r6, r0
 8010398:	460c      	mov	r4, r1
 801039a:	d507      	bpl.n	80103ac <__smakebuf_r+0x1c>
 801039c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80103a0:	6023      	str	r3, [r4, #0]
 80103a2:	6123      	str	r3, [r4, #16]
 80103a4:	2301      	movs	r3, #1
 80103a6:	6163      	str	r3, [r4, #20]
 80103a8:	b002      	add	sp, #8
 80103aa:	bd70      	pop	{r4, r5, r6, pc}
 80103ac:	ab01      	add	r3, sp, #4
 80103ae:	466a      	mov	r2, sp
 80103b0:	f7ff ffca 	bl	8010348 <__swhatbuf_r>
 80103b4:	9900      	ldr	r1, [sp, #0]
 80103b6:	4605      	mov	r5, r0
 80103b8:	4630      	mov	r0, r6
 80103ba:	f000 f87f 	bl	80104bc <_malloc_r>
 80103be:	b948      	cbnz	r0, 80103d4 <__smakebuf_r+0x44>
 80103c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103c4:	059a      	lsls	r2, r3, #22
 80103c6:	d4ef      	bmi.n	80103a8 <__smakebuf_r+0x18>
 80103c8:	f023 0303 	bic.w	r3, r3, #3
 80103cc:	f043 0302 	orr.w	r3, r3, #2
 80103d0:	81a3      	strh	r3, [r4, #12]
 80103d2:	e7e3      	b.n	801039c <__smakebuf_r+0xc>
 80103d4:	4b0d      	ldr	r3, [pc, #52]	; (801040c <__smakebuf_r+0x7c>)
 80103d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80103d8:	89a3      	ldrh	r3, [r4, #12]
 80103da:	6020      	str	r0, [r4, #0]
 80103dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103e0:	81a3      	strh	r3, [r4, #12]
 80103e2:	9b00      	ldr	r3, [sp, #0]
 80103e4:	6163      	str	r3, [r4, #20]
 80103e6:	9b01      	ldr	r3, [sp, #4]
 80103e8:	6120      	str	r0, [r4, #16]
 80103ea:	b15b      	cbz	r3, 8010404 <__smakebuf_r+0x74>
 80103ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103f0:	4630      	mov	r0, r6
 80103f2:	f000 fc0d 	bl	8010c10 <_isatty_r>
 80103f6:	b128      	cbz	r0, 8010404 <__smakebuf_r+0x74>
 80103f8:	89a3      	ldrh	r3, [r4, #12]
 80103fa:	f023 0303 	bic.w	r3, r3, #3
 80103fe:	f043 0301 	orr.w	r3, r3, #1
 8010402:	81a3      	strh	r3, [r4, #12]
 8010404:	89a3      	ldrh	r3, [r4, #12]
 8010406:	431d      	orrs	r5, r3
 8010408:	81a5      	strh	r5, [r4, #12]
 801040a:	e7cd      	b.n	80103a8 <__smakebuf_r+0x18>
 801040c:	080101fd 	.word	0x080101fd

08010410 <malloc>:
 8010410:	4b02      	ldr	r3, [pc, #8]	; (801041c <malloc+0xc>)
 8010412:	4601      	mov	r1, r0
 8010414:	6818      	ldr	r0, [r3, #0]
 8010416:	f000 b851 	b.w	80104bc <_malloc_r>
 801041a:	bf00      	nop
 801041c:	200000bc 	.word	0x200000bc

08010420 <_free_r>:
 8010420:	b538      	push	{r3, r4, r5, lr}
 8010422:	4605      	mov	r5, r0
 8010424:	2900      	cmp	r1, #0
 8010426:	d045      	beq.n	80104b4 <_free_r+0x94>
 8010428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801042c:	1f0c      	subs	r4, r1, #4
 801042e:	2b00      	cmp	r3, #0
 8010430:	bfb8      	it	lt
 8010432:	18e4      	addlt	r4, r4, r3
 8010434:	f000 fc0e 	bl	8010c54 <__malloc_lock>
 8010438:	4a1f      	ldr	r2, [pc, #124]	; (80104b8 <_free_r+0x98>)
 801043a:	6813      	ldr	r3, [r2, #0]
 801043c:	4610      	mov	r0, r2
 801043e:	b933      	cbnz	r3, 801044e <_free_r+0x2e>
 8010440:	6063      	str	r3, [r4, #4]
 8010442:	6014      	str	r4, [r2, #0]
 8010444:	4628      	mov	r0, r5
 8010446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801044a:	f000 bc04 	b.w	8010c56 <__malloc_unlock>
 801044e:	42a3      	cmp	r3, r4
 8010450:	d90c      	bls.n	801046c <_free_r+0x4c>
 8010452:	6821      	ldr	r1, [r4, #0]
 8010454:	1862      	adds	r2, r4, r1
 8010456:	4293      	cmp	r3, r2
 8010458:	bf04      	itt	eq
 801045a:	681a      	ldreq	r2, [r3, #0]
 801045c:	685b      	ldreq	r3, [r3, #4]
 801045e:	6063      	str	r3, [r4, #4]
 8010460:	bf04      	itt	eq
 8010462:	1852      	addeq	r2, r2, r1
 8010464:	6022      	streq	r2, [r4, #0]
 8010466:	6004      	str	r4, [r0, #0]
 8010468:	e7ec      	b.n	8010444 <_free_r+0x24>
 801046a:	4613      	mov	r3, r2
 801046c:	685a      	ldr	r2, [r3, #4]
 801046e:	b10a      	cbz	r2, 8010474 <_free_r+0x54>
 8010470:	42a2      	cmp	r2, r4
 8010472:	d9fa      	bls.n	801046a <_free_r+0x4a>
 8010474:	6819      	ldr	r1, [r3, #0]
 8010476:	1858      	adds	r0, r3, r1
 8010478:	42a0      	cmp	r0, r4
 801047a:	d10b      	bne.n	8010494 <_free_r+0x74>
 801047c:	6820      	ldr	r0, [r4, #0]
 801047e:	4401      	add	r1, r0
 8010480:	1858      	adds	r0, r3, r1
 8010482:	4282      	cmp	r2, r0
 8010484:	6019      	str	r1, [r3, #0]
 8010486:	d1dd      	bne.n	8010444 <_free_r+0x24>
 8010488:	6810      	ldr	r0, [r2, #0]
 801048a:	6852      	ldr	r2, [r2, #4]
 801048c:	605a      	str	r2, [r3, #4]
 801048e:	4401      	add	r1, r0
 8010490:	6019      	str	r1, [r3, #0]
 8010492:	e7d7      	b.n	8010444 <_free_r+0x24>
 8010494:	d902      	bls.n	801049c <_free_r+0x7c>
 8010496:	230c      	movs	r3, #12
 8010498:	602b      	str	r3, [r5, #0]
 801049a:	e7d3      	b.n	8010444 <_free_r+0x24>
 801049c:	6820      	ldr	r0, [r4, #0]
 801049e:	1821      	adds	r1, r4, r0
 80104a0:	428a      	cmp	r2, r1
 80104a2:	bf04      	itt	eq
 80104a4:	6811      	ldreq	r1, [r2, #0]
 80104a6:	6852      	ldreq	r2, [r2, #4]
 80104a8:	6062      	str	r2, [r4, #4]
 80104aa:	bf04      	itt	eq
 80104ac:	1809      	addeq	r1, r1, r0
 80104ae:	6021      	streq	r1, [r4, #0]
 80104b0:	605c      	str	r4, [r3, #4]
 80104b2:	e7c7      	b.n	8010444 <_free_r+0x24>
 80104b4:	bd38      	pop	{r3, r4, r5, pc}
 80104b6:	bf00      	nop
 80104b8:	20000150 	.word	0x20000150

080104bc <_malloc_r>:
 80104bc:	b570      	push	{r4, r5, r6, lr}
 80104be:	1ccd      	adds	r5, r1, #3
 80104c0:	f025 0503 	bic.w	r5, r5, #3
 80104c4:	3508      	adds	r5, #8
 80104c6:	2d0c      	cmp	r5, #12
 80104c8:	bf38      	it	cc
 80104ca:	250c      	movcc	r5, #12
 80104cc:	2d00      	cmp	r5, #0
 80104ce:	4606      	mov	r6, r0
 80104d0:	db01      	blt.n	80104d6 <_malloc_r+0x1a>
 80104d2:	42a9      	cmp	r1, r5
 80104d4:	d903      	bls.n	80104de <_malloc_r+0x22>
 80104d6:	230c      	movs	r3, #12
 80104d8:	6033      	str	r3, [r6, #0]
 80104da:	2000      	movs	r0, #0
 80104dc:	bd70      	pop	{r4, r5, r6, pc}
 80104de:	f000 fbb9 	bl	8010c54 <__malloc_lock>
 80104e2:	4a21      	ldr	r2, [pc, #132]	; (8010568 <_malloc_r+0xac>)
 80104e4:	6814      	ldr	r4, [r2, #0]
 80104e6:	4621      	mov	r1, r4
 80104e8:	b991      	cbnz	r1, 8010510 <_malloc_r+0x54>
 80104ea:	4c20      	ldr	r4, [pc, #128]	; (801056c <_malloc_r+0xb0>)
 80104ec:	6823      	ldr	r3, [r4, #0]
 80104ee:	b91b      	cbnz	r3, 80104f8 <_malloc_r+0x3c>
 80104f0:	4630      	mov	r0, r6
 80104f2:	f000 fb05 	bl	8010b00 <_sbrk_r>
 80104f6:	6020      	str	r0, [r4, #0]
 80104f8:	4629      	mov	r1, r5
 80104fa:	4630      	mov	r0, r6
 80104fc:	f000 fb00 	bl	8010b00 <_sbrk_r>
 8010500:	1c43      	adds	r3, r0, #1
 8010502:	d124      	bne.n	801054e <_malloc_r+0x92>
 8010504:	230c      	movs	r3, #12
 8010506:	6033      	str	r3, [r6, #0]
 8010508:	4630      	mov	r0, r6
 801050a:	f000 fba4 	bl	8010c56 <__malloc_unlock>
 801050e:	e7e4      	b.n	80104da <_malloc_r+0x1e>
 8010510:	680b      	ldr	r3, [r1, #0]
 8010512:	1b5b      	subs	r3, r3, r5
 8010514:	d418      	bmi.n	8010548 <_malloc_r+0x8c>
 8010516:	2b0b      	cmp	r3, #11
 8010518:	d90f      	bls.n	801053a <_malloc_r+0x7e>
 801051a:	600b      	str	r3, [r1, #0]
 801051c:	50cd      	str	r5, [r1, r3]
 801051e:	18cc      	adds	r4, r1, r3
 8010520:	4630      	mov	r0, r6
 8010522:	f000 fb98 	bl	8010c56 <__malloc_unlock>
 8010526:	f104 000b 	add.w	r0, r4, #11
 801052a:	1d23      	adds	r3, r4, #4
 801052c:	f020 0007 	bic.w	r0, r0, #7
 8010530:	1ac3      	subs	r3, r0, r3
 8010532:	d0d3      	beq.n	80104dc <_malloc_r+0x20>
 8010534:	425a      	negs	r2, r3
 8010536:	50e2      	str	r2, [r4, r3]
 8010538:	e7d0      	b.n	80104dc <_malloc_r+0x20>
 801053a:	428c      	cmp	r4, r1
 801053c:	684b      	ldr	r3, [r1, #4]
 801053e:	bf16      	itet	ne
 8010540:	6063      	strne	r3, [r4, #4]
 8010542:	6013      	streq	r3, [r2, #0]
 8010544:	460c      	movne	r4, r1
 8010546:	e7eb      	b.n	8010520 <_malloc_r+0x64>
 8010548:	460c      	mov	r4, r1
 801054a:	6849      	ldr	r1, [r1, #4]
 801054c:	e7cc      	b.n	80104e8 <_malloc_r+0x2c>
 801054e:	1cc4      	adds	r4, r0, #3
 8010550:	f024 0403 	bic.w	r4, r4, #3
 8010554:	42a0      	cmp	r0, r4
 8010556:	d005      	beq.n	8010564 <_malloc_r+0xa8>
 8010558:	1a21      	subs	r1, r4, r0
 801055a:	4630      	mov	r0, r6
 801055c:	f000 fad0 	bl	8010b00 <_sbrk_r>
 8010560:	3001      	adds	r0, #1
 8010562:	d0cf      	beq.n	8010504 <_malloc_r+0x48>
 8010564:	6025      	str	r5, [r4, #0]
 8010566:	e7db      	b.n	8010520 <_malloc_r+0x64>
 8010568:	20000150 	.word	0x20000150
 801056c:	20000154 	.word	0x20000154

08010570 <__sfputc_r>:
 8010570:	6893      	ldr	r3, [r2, #8]
 8010572:	3b01      	subs	r3, #1
 8010574:	2b00      	cmp	r3, #0
 8010576:	b410      	push	{r4}
 8010578:	6093      	str	r3, [r2, #8]
 801057a:	da08      	bge.n	801058e <__sfputc_r+0x1e>
 801057c:	6994      	ldr	r4, [r2, #24]
 801057e:	42a3      	cmp	r3, r4
 8010580:	db01      	blt.n	8010586 <__sfputc_r+0x16>
 8010582:	290a      	cmp	r1, #10
 8010584:	d103      	bne.n	801058e <__sfputc_r+0x1e>
 8010586:	f85d 4b04 	ldr.w	r4, [sp], #4
 801058a:	f7ff bca3 	b.w	800fed4 <__swbuf_r>
 801058e:	6813      	ldr	r3, [r2, #0]
 8010590:	1c58      	adds	r0, r3, #1
 8010592:	6010      	str	r0, [r2, #0]
 8010594:	7019      	strb	r1, [r3, #0]
 8010596:	4608      	mov	r0, r1
 8010598:	f85d 4b04 	ldr.w	r4, [sp], #4
 801059c:	4770      	bx	lr

0801059e <__sfputs_r>:
 801059e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105a0:	4606      	mov	r6, r0
 80105a2:	460f      	mov	r7, r1
 80105a4:	4614      	mov	r4, r2
 80105a6:	18d5      	adds	r5, r2, r3
 80105a8:	42ac      	cmp	r4, r5
 80105aa:	d101      	bne.n	80105b0 <__sfputs_r+0x12>
 80105ac:	2000      	movs	r0, #0
 80105ae:	e007      	b.n	80105c0 <__sfputs_r+0x22>
 80105b0:	463a      	mov	r2, r7
 80105b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105b6:	4630      	mov	r0, r6
 80105b8:	f7ff ffda 	bl	8010570 <__sfputc_r>
 80105bc:	1c43      	adds	r3, r0, #1
 80105be:	d1f3      	bne.n	80105a8 <__sfputs_r+0xa>
 80105c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080105c4 <_vfiprintf_r>:
 80105c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105c8:	460c      	mov	r4, r1
 80105ca:	b09d      	sub	sp, #116	; 0x74
 80105cc:	4617      	mov	r7, r2
 80105ce:	461d      	mov	r5, r3
 80105d0:	4606      	mov	r6, r0
 80105d2:	b118      	cbz	r0, 80105dc <_vfiprintf_r+0x18>
 80105d4:	6983      	ldr	r3, [r0, #24]
 80105d6:	b90b      	cbnz	r3, 80105dc <_vfiprintf_r+0x18>
 80105d8:	f7ff fe2c 	bl	8010234 <__sinit>
 80105dc:	4b7c      	ldr	r3, [pc, #496]	; (80107d0 <_vfiprintf_r+0x20c>)
 80105de:	429c      	cmp	r4, r3
 80105e0:	d158      	bne.n	8010694 <_vfiprintf_r+0xd0>
 80105e2:	6874      	ldr	r4, [r6, #4]
 80105e4:	89a3      	ldrh	r3, [r4, #12]
 80105e6:	0718      	lsls	r0, r3, #28
 80105e8:	d55e      	bpl.n	80106a8 <_vfiprintf_r+0xe4>
 80105ea:	6923      	ldr	r3, [r4, #16]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d05b      	beq.n	80106a8 <_vfiprintf_r+0xe4>
 80105f0:	2300      	movs	r3, #0
 80105f2:	9309      	str	r3, [sp, #36]	; 0x24
 80105f4:	2320      	movs	r3, #32
 80105f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80105fa:	2330      	movs	r3, #48	; 0x30
 80105fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010600:	9503      	str	r5, [sp, #12]
 8010602:	f04f 0b01 	mov.w	fp, #1
 8010606:	46b8      	mov	r8, r7
 8010608:	4645      	mov	r5, r8
 801060a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801060e:	b10b      	cbz	r3, 8010614 <_vfiprintf_r+0x50>
 8010610:	2b25      	cmp	r3, #37	; 0x25
 8010612:	d154      	bne.n	80106be <_vfiprintf_r+0xfa>
 8010614:	ebb8 0a07 	subs.w	sl, r8, r7
 8010618:	d00b      	beq.n	8010632 <_vfiprintf_r+0x6e>
 801061a:	4653      	mov	r3, sl
 801061c:	463a      	mov	r2, r7
 801061e:	4621      	mov	r1, r4
 8010620:	4630      	mov	r0, r6
 8010622:	f7ff ffbc 	bl	801059e <__sfputs_r>
 8010626:	3001      	adds	r0, #1
 8010628:	f000 80c2 	beq.w	80107b0 <_vfiprintf_r+0x1ec>
 801062c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801062e:	4453      	add	r3, sl
 8010630:	9309      	str	r3, [sp, #36]	; 0x24
 8010632:	f898 3000 	ldrb.w	r3, [r8]
 8010636:	2b00      	cmp	r3, #0
 8010638:	f000 80ba 	beq.w	80107b0 <_vfiprintf_r+0x1ec>
 801063c:	2300      	movs	r3, #0
 801063e:	f04f 32ff 	mov.w	r2, #4294967295
 8010642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010646:	9304      	str	r3, [sp, #16]
 8010648:	9307      	str	r3, [sp, #28]
 801064a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801064e:	931a      	str	r3, [sp, #104]	; 0x68
 8010650:	46a8      	mov	r8, r5
 8010652:	2205      	movs	r2, #5
 8010654:	f818 1b01 	ldrb.w	r1, [r8], #1
 8010658:	485e      	ldr	r0, [pc, #376]	; (80107d4 <_vfiprintf_r+0x210>)
 801065a:	f7ef fdb9 	bl	80001d0 <memchr>
 801065e:	9b04      	ldr	r3, [sp, #16]
 8010660:	bb78      	cbnz	r0, 80106c2 <_vfiprintf_r+0xfe>
 8010662:	06d9      	lsls	r1, r3, #27
 8010664:	bf44      	itt	mi
 8010666:	2220      	movmi	r2, #32
 8010668:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801066c:	071a      	lsls	r2, r3, #28
 801066e:	bf44      	itt	mi
 8010670:	222b      	movmi	r2, #43	; 0x2b
 8010672:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010676:	782a      	ldrb	r2, [r5, #0]
 8010678:	2a2a      	cmp	r2, #42	; 0x2a
 801067a:	d02a      	beq.n	80106d2 <_vfiprintf_r+0x10e>
 801067c:	9a07      	ldr	r2, [sp, #28]
 801067e:	46a8      	mov	r8, r5
 8010680:	2000      	movs	r0, #0
 8010682:	250a      	movs	r5, #10
 8010684:	4641      	mov	r1, r8
 8010686:	f811 3b01 	ldrb.w	r3, [r1], #1
 801068a:	3b30      	subs	r3, #48	; 0x30
 801068c:	2b09      	cmp	r3, #9
 801068e:	d969      	bls.n	8010764 <_vfiprintf_r+0x1a0>
 8010690:	b360      	cbz	r0, 80106ec <_vfiprintf_r+0x128>
 8010692:	e024      	b.n	80106de <_vfiprintf_r+0x11a>
 8010694:	4b50      	ldr	r3, [pc, #320]	; (80107d8 <_vfiprintf_r+0x214>)
 8010696:	429c      	cmp	r4, r3
 8010698:	d101      	bne.n	801069e <_vfiprintf_r+0xda>
 801069a:	68b4      	ldr	r4, [r6, #8]
 801069c:	e7a2      	b.n	80105e4 <_vfiprintf_r+0x20>
 801069e:	4b4f      	ldr	r3, [pc, #316]	; (80107dc <_vfiprintf_r+0x218>)
 80106a0:	429c      	cmp	r4, r3
 80106a2:	bf08      	it	eq
 80106a4:	68f4      	ldreq	r4, [r6, #12]
 80106a6:	e79d      	b.n	80105e4 <_vfiprintf_r+0x20>
 80106a8:	4621      	mov	r1, r4
 80106aa:	4630      	mov	r0, r6
 80106ac:	f7ff fc64 	bl	800ff78 <__swsetup_r>
 80106b0:	2800      	cmp	r0, #0
 80106b2:	d09d      	beq.n	80105f0 <_vfiprintf_r+0x2c>
 80106b4:	f04f 30ff 	mov.w	r0, #4294967295
 80106b8:	b01d      	add	sp, #116	; 0x74
 80106ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106be:	46a8      	mov	r8, r5
 80106c0:	e7a2      	b.n	8010608 <_vfiprintf_r+0x44>
 80106c2:	4a44      	ldr	r2, [pc, #272]	; (80107d4 <_vfiprintf_r+0x210>)
 80106c4:	1a80      	subs	r0, r0, r2
 80106c6:	fa0b f000 	lsl.w	r0, fp, r0
 80106ca:	4318      	orrs	r0, r3
 80106cc:	9004      	str	r0, [sp, #16]
 80106ce:	4645      	mov	r5, r8
 80106d0:	e7be      	b.n	8010650 <_vfiprintf_r+0x8c>
 80106d2:	9a03      	ldr	r2, [sp, #12]
 80106d4:	1d11      	adds	r1, r2, #4
 80106d6:	6812      	ldr	r2, [r2, #0]
 80106d8:	9103      	str	r1, [sp, #12]
 80106da:	2a00      	cmp	r2, #0
 80106dc:	db01      	blt.n	80106e2 <_vfiprintf_r+0x11e>
 80106de:	9207      	str	r2, [sp, #28]
 80106e0:	e004      	b.n	80106ec <_vfiprintf_r+0x128>
 80106e2:	4252      	negs	r2, r2
 80106e4:	f043 0302 	orr.w	r3, r3, #2
 80106e8:	9207      	str	r2, [sp, #28]
 80106ea:	9304      	str	r3, [sp, #16]
 80106ec:	f898 3000 	ldrb.w	r3, [r8]
 80106f0:	2b2e      	cmp	r3, #46	; 0x2e
 80106f2:	d10e      	bne.n	8010712 <_vfiprintf_r+0x14e>
 80106f4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80106f8:	2b2a      	cmp	r3, #42	; 0x2a
 80106fa:	d138      	bne.n	801076e <_vfiprintf_r+0x1aa>
 80106fc:	9b03      	ldr	r3, [sp, #12]
 80106fe:	1d1a      	adds	r2, r3, #4
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	9203      	str	r2, [sp, #12]
 8010704:	2b00      	cmp	r3, #0
 8010706:	bfb8      	it	lt
 8010708:	f04f 33ff 	movlt.w	r3, #4294967295
 801070c:	f108 0802 	add.w	r8, r8, #2
 8010710:	9305      	str	r3, [sp, #20]
 8010712:	4d33      	ldr	r5, [pc, #204]	; (80107e0 <_vfiprintf_r+0x21c>)
 8010714:	f898 1000 	ldrb.w	r1, [r8]
 8010718:	2203      	movs	r2, #3
 801071a:	4628      	mov	r0, r5
 801071c:	f7ef fd58 	bl	80001d0 <memchr>
 8010720:	b140      	cbz	r0, 8010734 <_vfiprintf_r+0x170>
 8010722:	2340      	movs	r3, #64	; 0x40
 8010724:	1b40      	subs	r0, r0, r5
 8010726:	fa03 f000 	lsl.w	r0, r3, r0
 801072a:	9b04      	ldr	r3, [sp, #16]
 801072c:	4303      	orrs	r3, r0
 801072e:	f108 0801 	add.w	r8, r8, #1
 8010732:	9304      	str	r3, [sp, #16]
 8010734:	f898 1000 	ldrb.w	r1, [r8]
 8010738:	482a      	ldr	r0, [pc, #168]	; (80107e4 <_vfiprintf_r+0x220>)
 801073a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801073e:	2206      	movs	r2, #6
 8010740:	f108 0701 	add.w	r7, r8, #1
 8010744:	f7ef fd44 	bl	80001d0 <memchr>
 8010748:	2800      	cmp	r0, #0
 801074a:	d037      	beq.n	80107bc <_vfiprintf_r+0x1f8>
 801074c:	4b26      	ldr	r3, [pc, #152]	; (80107e8 <_vfiprintf_r+0x224>)
 801074e:	bb1b      	cbnz	r3, 8010798 <_vfiprintf_r+0x1d4>
 8010750:	9b03      	ldr	r3, [sp, #12]
 8010752:	3307      	adds	r3, #7
 8010754:	f023 0307 	bic.w	r3, r3, #7
 8010758:	3308      	adds	r3, #8
 801075a:	9303      	str	r3, [sp, #12]
 801075c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801075e:	444b      	add	r3, r9
 8010760:	9309      	str	r3, [sp, #36]	; 0x24
 8010762:	e750      	b.n	8010606 <_vfiprintf_r+0x42>
 8010764:	fb05 3202 	mla	r2, r5, r2, r3
 8010768:	2001      	movs	r0, #1
 801076a:	4688      	mov	r8, r1
 801076c:	e78a      	b.n	8010684 <_vfiprintf_r+0xc0>
 801076e:	2300      	movs	r3, #0
 8010770:	f108 0801 	add.w	r8, r8, #1
 8010774:	9305      	str	r3, [sp, #20]
 8010776:	4619      	mov	r1, r3
 8010778:	250a      	movs	r5, #10
 801077a:	4640      	mov	r0, r8
 801077c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010780:	3a30      	subs	r2, #48	; 0x30
 8010782:	2a09      	cmp	r2, #9
 8010784:	d903      	bls.n	801078e <_vfiprintf_r+0x1ca>
 8010786:	2b00      	cmp	r3, #0
 8010788:	d0c3      	beq.n	8010712 <_vfiprintf_r+0x14e>
 801078a:	9105      	str	r1, [sp, #20]
 801078c:	e7c1      	b.n	8010712 <_vfiprintf_r+0x14e>
 801078e:	fb05 2101 	mla	r1, r5, r1, r2
 8010792:	2301      	movs	r3, #1
 8010794:	4680      	mov	r8, r0
 8010796:	e7f0      	b.n	801077a <_vfiprintf_r+0x1b6>
 8010798:	ab03      	add	r3, sp, #12
 801079a:	9300      	str	r3, [sp, #0]
 801079c:	4622      	mov	r2, r4
 801079e:	4b13      	ldr	r3, [pc, #76]	; (80107ec <_vfiprintf_r+0x228>)
 80107a0:	a904      	add	r1, sp, #16
 80107a2:	4630      	mov	r0, r6
 80107a4:	f3af 8000 	nop.w
 80107a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80107ac:	4681      	mov	r9, r0
 80107ae:	d1d5      	bne.n	801075c <_vfiprintf_r+0x198>
 80107b0:	89a3      	ldrh	r3, [r4, #12]
 80107b2:	065b      	lsls	r3, r3, #25
 80107b4:	f53f af7e 	bmi.w	80106b4 <_vfiprintf_r+0xf0>
 80107b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107ba:	e77d      	b.n	80106b8 <_vfiprintf_r+0xf4>
 80107bc:	ab03      	add	r3, sp, #12
 80107be:	9300      	str	r3, [sp, #0]
 80107c0:	4622      	mov	r2, r4
 80107c2:	4b0a      	ldr	r3, [pc, #40]	; (80107ec <_vfiprintf_r+0x228>)
 80107c4:	a904      	add	r1, sp, #16
 80107c6:	4630      	mov	r0, r6
 80107c8:	f000 f888 	bl	80108dc <_printf_i>
 80107cc:	e7ec      	b.n	80107a8 <_vfiprintf_r+0x1e4>
 80107ce:	bf00      	nop
 80107d0:	080114c8 	.word	0x080114c8
 80107d4:	08011508 	.word	0x08011508
 80107d8:	080114e8 	.word	0x080114e8
 80107dc:	080114a8 	.word	0x080114a8
 80107e0:	0801150e 	.word	0x0801150e
 80107e4:	08011512 	.word	0x08011512
 80107e8:	00000000 	.word	0x00000000
 80107ec:	0801059f 	.word	0x0801059f

080107f0 <_printf_common>:
 80107f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107f4:	4691      	mov	r9, r2
 80107f6:	461f      	mov	r7, r3
 80107f8:	688a      	ldr	r2, [r1, #8]
 80107fa:	690b      	ldr	r3, [r1, #16]
 80107fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010800:	4293      	cmp	r3, r2
 8010802:	bfb8      	it	lt
 8010804:	4613      	movlt	r3, r2
 8010806:	f8c9 3000 	str.w	r3, [r9]
 801080a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801080e:	4606      	mov	r6, r0
 8010810:	460c      	mov	r4, r1
 8010812:	b112      	cbz	r2, 801081a <_printf_common+0x2a>
 8010814:	3301      	adds	r3, #1
 8010816:	f8c9 3000 	str.w	r3, [r9]
 801081a:	6823      	ldr	r3, [r4, #0]
 801081c:	0699      	lsls	r1, r3, #26
 801081e:	bf42      	ittt	mi
 8010820:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010824:	3302      	addmi	r3, #2
 8010826:	f8c9 3000 	strmi.w	r3, [r9]
 801082a:	6825      	ldr	r5, [r4, #0]
 801082c:	f015 0506 	ands.w	r5, r5, #6
 8010830:	d107      	bne.n	8010842 <_printf_common+0x52>
 8010832:	f104 0a19 	add.w	sl, r4, #25
 8010836:	68e3      	ldr	r3, [r4, #12]
 8010838:	f8d9 2000 	ldr.w	r2, [r9]
 801083c:	1a9b      	subs	r3, r3, r2
 801083e:	42ab      	cmp	r3, r5
 8010840:	dc28      	bgt.n	8010894 <_printf_common+0xa4>
 8010842:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010846:	6822      	ldr	r2, [r4, #0]
 8010848:	3300      	adds	r3, #0
 801084a:	bf18      	it	ne
 801084c:	2301      	movne	r3, #1
 801084e:	0692      	lsls	r2, r2, #26
 8010850:	d42d      	bmi.n	80108ae <_printf_common+0xbe>
 8010852:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010856:	4639      	mov	r1, r7
 8010858:	4630      	mov	r0, r6
 801085a:	47c0      	blx	r8
 801085c:	3001      	adds	r0, #1
 801085e:	d020      	beq.n	80108a2 <_printf_common+0xb2>
 8010860:	6823      	ldr	r3, [r4, #0]
 8010862:	68e5      	ldr	r5, [r4, #12]
 8010864:	f8d9 2000 	ldr.w	r2, [r9]
 8010868:	f003 0306 	and.w	r3, r3, #6
 801086c:	2b04      	cmp	r3, #4
 801086e:	bf08      	it	eq
 8010870:	1aad      	subeq	r5, r5, r2
 8010872:	68a3      	ldr	r3, [r4, #8]
 8010874:	6922      	ldr	r2, [r4, #16]
 8010876:	bf0c      	ite	eq
 8010878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801087c:	2500      	movne	r5, #0
 801087e:	4293      	cmp	r3, r2
 8010880:	bfc4      	itt	gt
 8010882:	1a9b      	subgt	r3, r3, r2
 8010884:	18ed      	addgt	r5, r5, r3
 8010886:	f04f 0900 	mov.w	r9, #0
 801088a:	341a      	adds	r4, #26
 801088c:	454d      	cmp	r5, r9
 801088e:	d11a      	bne.n	80108c6 <_printf_common+0xd6>
 8010890:	2000      	movs	r0, #0
 8010892:	e008      	b.n	80108a6 <_printf_common+0xb6>
 8010894:	2301      	movs	r3, #1
 8010896:	4652      	mov	r2, sl
 8010898:	4639      	mov	r1, r7
 801089a:	4630      	mov	r0, r6
 801089c:	47c0      	blx	r8
 801089e:	3001      	adds	r0, #1
 80108a0:	d103      	bne.n	80108aa <_printf_common+0xba>
 80108a2:	f04f 30ff 	mov.w	r0, #4294967295
 80108a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108aa:	3501      	adds	r5, #1
 80108ac:	e7c3      	b.n	8010836 <_printf_common+0x46>
 80108ae:	18e1      	adds	r1, r4, r3
 80108b0:	1c5a      	adds	r2, r3, #1
 80108b2:	2030      	movs	r0, #48	; 0x30
 80108b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80108b8:	4422      	add	r2, r4
 80108ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80108be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80108c2:	3302      	adds	r3, #2
 80108c4:	e7c5      	b.n	8010852 <_printf_common+0x62>
 80108c6:	2301      	movs	r3, #1
 80108c8:	4622      	mov	r2, r4
 80108ca:	4639      	mov	r1, r7
 80108cc:	4630      	mov	r0, r6
 80108ce:	47c0      	blx	r8
 80108d0:	3001      	adds	r0, #1
 80108d2:	d0e6      	beq.n	80108a2 <_printf_common+0xb2>
 80108d4:	f109 0901 	add.w	r9, r9, #1
 80108d8:	e7d8      	b.n	801088c <_printf_common+0x9c>
	...

080108dc <_printf_i>:
 80108dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80108e4:	460c      	mov	r4, r1
 80108e6:	7e09      	ldrb	r1, [r1, #24]
 80108e8:	b085      	sub	sp, #20
 80108ea:	296e      	cmp	r1, #110	; 0x6e
 80108ec:	4617      	mov	r7, r2
 80108ee:	4606      	mov	r6, r0
 80108f0:	4698      	mov	r8, r3
 80108f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80108f4:	f000 80b3 	beq.w	8010a5e <_printf_i+0x182>
 80108f8:	d822      	bhi.n	8010940 <_printf_i+0x64>
 80108fa:	2963      	cmp	r1, #99	; 0x63
 80108fc:	d036      	beq.n	801096c <_printf_i+0x90>
 80108fe:	d80a      	bhi.n	8010916 <_printf_i+0x3a>
 8010900:	2900      	cmp	r1, #0
 8010902:	f000 80b9 	beq.w	8010a78 <_printf_i+0x19c>
 8010906:	2958      	cmp	r1, #88	; 0x58
 8010908:	f000 8083 	beq.w	8010a12 <_printf_i+0x136>
 801090c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010910:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010914:	e032      	b.n	801097c <_printf_i+0xa0>
 8010916:	2964      	cmp	r1, #100	; 0x64
 8010918:	d001      	beq.n	801091e <_printf_i+0x42>
 801091a:	2969      	cmp	r1, #105	; 0x69
 801091c:	d1f6      	bne.n	801090c <_printf_i+0x30>
 801091e:	6820      	ldr	r0, [r4, #0]
 8010920:	6813      	ldr	r3, [r2, #0]
 8010922:	0605      	lsls	r5, r0, #24
 8010924:	f103 0104 	add.w	r1, r3, #4
 8010928:	d52a      	bpl.n	8010980 <_printf_i+0xa4>
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	6011      	str	r1, [r2, #0]
 801092e:	2b00      	cmp	r3, #0
 8010930:	da03      	bge.n	801093a <_printf_i+0x5e>
 8010932:	222d      	movs	r2, #45	; 0x2d
 8010934:	425b      	negs	r3, r3
 8010936:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801093a:	486f      	ldr	r0, [pc, #444]	; (8010af8 <_printf_i+0x21c>)
 801093c:	220a      	movs	r2, #10
 801093e:	e039      	b.n	80109b4 <_printf_i+0xd8>
 8010940:	2973      	cmp	r1, #115	; 0x73
 8010942:	f000 809d 	beq.w	8010a80 <_printf_i+0x1a4>
 8010946:	d808      	bhi.n	801095a <_printf_i+0x7e>
 8010948:	296f      	cmp	r1, #111	; 0x6f
 801094a:	d020      	beq.n	801098e <_printf_i+0xb2>
 801094c:	2970      	cmp	r1, #112	; 0x70
 801094e:	d1dd      	bne.n	801090c <_printf_i+0x30>
 8010950:	6823      	ldr	r3, [r4, #0]
 8010952:	f043 0320 	orr.w	r3, r3, #32
 8010956:	6023      	str	r3, [r4, #0]
 8010958:	e003      	b.n	8010962 <_printf_i+0x86>
 801095a:	2975      	cmp	r1, #117	; 0x75
 801095c:	d017      	beq.n	801098e <_printf_i+0xb2>
 801095e:	2978      	cmp	r1, #120	; 0x78
 8010960:	d1d4      	bne.n	801090c <_printf_i+0x30>
 8010962:	2378      	movs	r3, #120	; 0x78
 8010964:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010968:	4864      	ldr	r0, [pc, #400]	; (8010afc <_printf_i+0x220>)
 801096a:	e055      	b.n	8010a18 <_printf_i+0x13c>
 801096c:	6813      	ldr	r3, [r2, #0]
 801096e:	1d19      	adds	r1, r3, #4
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	6011      	str	r1, [r2, #0]
 8010974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801097c:	2301      	movs	r3, #1
 801097e:	e08c      	b.n	8010a9a <_printf_i+0x1be>
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	6011      	str	r1, [r2, #0]
 8010984:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010988:	bf18      	it	ne
 801098a:	b21b      	sxthne	r3, r3
 801098c:	e7cf      	b.n	801092e <_printf_i+0x52>
 801098e:	6813      	ldr	r3, [r2, #0]
 8010990:	6825      	ldr	r5, [r4, #0]
 8010992:	1d18      	adds	r0, r3, #4
 8010994:	6010      	str	r0, [r2, #0]
 8010996:	0628      	lsls	r0, r5, #24
 8010998:	d501      	bpl.n	801099e <_printf_i+0xc2>
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	e002      	b.n	80109a4 <_printf_i+0xc8>
 801099e:	0668      	lsls	r0, r5, #25
 80109a0:	d5fb      	bpl.n	801099a <_printf_i+0xbe>
 80109a2:	881b      	ldrh	r3, [r3, #0]
 80109a4:	4854      	ldr	r0, [pc, #336]	; (8010af8 <_printf_i+0x21c>)
 80109a6:	296f      	cmp	r1, #111	; 0x6f
 80109a8:	bf14      	ite	ne
 80109aa:	220a      	movne	r2, #10
 80109ac:	2208      	moveq	r2, #8
 80109ae:	2100      	movs	r1, #0
 80109b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80109b4:	6865      	ldr	r5, [r4, #4]
 80109b6:	60a5      	str	r5, [r4, #8]
 80109b8:	2d00      	cmp	r5, #0
 80109ba:	f2c0 8095 	blt.w	8010ae8 <_printf_i+0x20c>
 80109be:	6821      	ldr	r1, [r4, #0]
 80109c0:	f021 0104 	bic.w	r1, r1, #4
 80109c4:	6021      	str	r1, [r4, #0]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d13d      	bne.n	8010a46 <_printf_i+0x16a>
 80109ca:	2d00      	cmp	r5, #0
 80109cc:	f040 808e 	bne.w	8010aec <_printf_i+0x210>
 80109d0:	4665      	mov	r5, ip
 80109d2:	2a08      	cmp	r2, #8
 80109d4:	d10b      	bne.n	80109ee <_printf_i+0x112>
 80109d6:	6823      	ldr	r3, [r4, #0]
 80109d8:	07db      	lsls	r3, r3, #31
 80109da:	d508      	bpl.n	80109ee <_printf_i+0x112>
 80109dc:	6923      	ldr	r3, [r4, #16]
 80109de:	6862      	ldr	r2, [r4, #4]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	bfde      	ittt	le
 80109e4:	2330      	movle	r3, #48	; 0x30
 80109e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80109ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80109ee:	ebac 0305 	sub.w	r3, ip, r5
 80109f2:	6123      	str	r3, [r4, #16]
 80109f4:	f8cd 8000 	str.w	r8, [sp]
 80109f8:	463b      	mov	r3, r7
 80109fa:	aa03      	add	r2, sp, #12
 80109fc:	4621      	mov	r1, r4
 80109fe:	4630      	mov	r0, r6
 8010a00:	f7ff fef6 	bl	80107f0 <_printf_common>
 8010a04:	3001      	adds	r0, #1
 8010a06:	d14d      	bne.n	8010aa4 <_printf_i+0x1c8>
 8010a08:	f04f 30ff 	mov.w	r0, #4294967295
 8010a0c:	b005      	add	sp, #20
 8010a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a12:	4839      	ldr	r0, [pc, #228]	; (8010af8 <_printf_i+0x21c>)
 8010a14:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010a18:	6813      	ldr	r3, [r2, #0]
 8010a1a:	6821      	ldr	r1, [r4, #0]
 8010a1c:	1d1d      	adds	r5, r3, #4
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	6015      	str	r5, [r2, #0]
 8010a22:	060a      	lsls	r2, r1, #24
 8010a24:	d50b      	bpl.n	8010a3e <_printf_i+0x162>
 8010a26:	07ca      	lsls	r2, r1, #31
 8010a28:	bf44      	itt	mi
 8010a2a:	f041 0120 	orrmi.w	r1, r1, #32
 8010a2e:	6021      	strmi	r1, [r4, #0]
 8010a30:	b91b      	cbnz	r3, 8010a3a <_printf_i+0x15e>
 8010a32:	6822      	ldr	r2, [r4, #0]
 8010a34:	f022 0220 	bic.w	r2, r2, #32
 8010a38:	6022      	str	r2, [r4, #0]
 8010a3a:	2210      	movs	r2, #16
 8010a3c:	e7b7      	b.n	80109ae <_printf_i+0xd2>
 8010a3e:	064d      	lsls	r5, r1, #25
 8010a40:	bf48      	it	mi
 8010a42:	b29b      	uxthmi	r3, r3
 8010a44:	e7ef      	b.n	8010a26 <_printf_i+0x14a>
 8010a46:	4665      	mov	r5, ip
 8010a48:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a4c:	fb02 3311 	mls	r3, r2, r1, r3
 8010a50:	5cc3      	ldrb	r3, [r0, r3]
 8010a52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010a56:	460b      	mov	r3, r1
 8010a58:	2900      	cmp	r1, #0
 8010a5a:	d1f5      	bne.n	8010a48 <_printf_i+0x16c>
 8010a5c:	e7b9      	b.n	80109d2 <_printf_i+0xf6>
 8010a5e:	6813      	ldr	r3, [r2, #0]
 8010a60:	6825      	ldr	r5, [r4, #0]
 8010a62:	6961      	ldr	r1, [r4, #20]
 8010a64:	1d18      	adds	r0, r3, #4
 8010a66:	6010      	str	r0, [r2, #0]
 8010a68:	0628      	lsls	r0, r5, #24
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	d501      	bpl.n	8010a72 <_printf_i+0x196>
 8010a6e:	6019      	str	r1, [r3, #0]
 8010a70:	e002      	b.n	8010a78 <_printf_i+0x19c>
 8010a72:	066a      	lsls	r2, r5, #25
 8010a74:	d5fb      	bpl.n	8010a6e <_printf_i+0x192>
 8010a76:	8019      	strh	r1, [r3, #0]
 8010a78:	2300      	movs	r3, #0
 8010a7a:	6123      	str	r3, [r4, #16]
 8010a7c:	4665      	mov	r5, ip
 8010a7e:	e7b9      	b.n	80109f4 <_printf_i+0x118>
 8010a80:	6813      	ldr	r3, [r2, #0]
 8010a82:	1d19      	adds	r1, r3, #4
 8010a84:	6011      	str	r1, [r2, #0]
 8010a86:	681d      	ldr	r5, [r3, #0]
 8010a88:	6862      	ldr	r2, [r4, #4]
 8010a8a:	2100      	movs	r1, #0
 8010a8c:	4628      	mov	r0, r5
 8010a8e:	f7ef fb9f 	bl	80001d0 <memchr>
 8010a92:	b108      	cbz	r0, 8010a98 <_printf_i+0x1bc>
 8010a94:	1b40      	subs	r0, r0, r5
 8010a96:	6060      	str	r0, [r4, #4]
 8010a98:	6863      	ldr	r3, [r4, #4]
 8010a9a:	6123      	str	r3, [r4, #16]
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010aa2:	e7a7      	b.n	80109f4 <_printf_i+0x118>
 8010aa4:	6923      	ldr	r3, [r4, #16]
 8010aa6:	462a      	mov	r2, r5
 8010aa8:	4639      	mov	r1, r7
 8010aaa:	4630      	mov	r0, r6
 8010aac:	47c0      	blx	r8
 8010aae:	3001      	adds	r0, #1
 8010ab0:	d0aa      	beq.n	8010a08 <_printf_i+0x12c>
 8010ab2:	6823      	ldr	r3, [r4, #0]
 8010ab4:	079b      	lsls	r3, r3, #30
 8010ab6:	d413      	bmi.n	8010ae0 <_printf_i+0x204>
 8010ab8:	68e0      	ldr	r0, [r4, #12]
 8010aba:	9b03      	ldr	r3, [sp, #12]
 8010abc:	4298      	cmp	r0, r3
 8010abe:	bfb8      	it	lt
 8010ac0:	4618      	movlt	r0, r3
 8010ac2:	e7a3      	b.n	8010a0c <_printf_i+0x130>
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	464a      	mov	r2, r9
 8010ac8:	4639      	mov	r1, r7
 8010aca:	4630      	mov	r0, r6
 8010acc:	47c0      	blx	r8
 8010ace:	3001      	adds	r0, #1
 8010ad0:	d09a      	beq.n	8010a08 <_printf_i+0x12c>
 8010ad2:	3501      	adds	r5, #1
 8010ad4:	68e3      	ldr	r3, [r4, #12]
 8010ad6:	9a03      	ldr	r2, [sp, #12]
 8010ad8:	1a9b      	subs	r3, r3, r2
 8010ada:	42ab      	cmp	r3, r5
 8010adc:	dcf2      	bgt.n	8010ac4 <_printf_i+0x1e8>
 8010ade:	e7eb      	b.n	8010ab8 <_printf_i+0x1dc>
 8010ae0:	2500      	movs	r5, #0
 8010ae2:	f104 0919 	add.w	r9, r4, #25
 8010ae6:	e7f5      	b.n	8010ad4 <_printf_i+0x1f8>
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d1ac      	bne.n	8010a46 <_printf_i+0x16a>
 8010aec:	7803      	ldrb	r3, [r0, #0]
 8010aee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010af2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010af6:	e76c      	b.n	80109d2 <_printf_i+0xf6>
 8010af8:	08011519 	.word	0x08011519
 8010afc:	0801152a 	.word	0x0801152a

08010b00 <_sbrk_r>:
 8010b00:	b538      	push	{r3, r4, r5, lr}
 8010b02:	4c06      	ldr	r4, [pc, #24]	; (8010b1c <_sbrk_r+0x1c>)
 8010b04:	2300      	movs	r3, #0
 8010b06:	4605      	mov	r5, r0
 8010b08:	4608      	mov	r0, r1
 8010b0a:	6023      	str	r3, [r4, #0]
 8010b0c:	f7fe fff2 	bl	800faf4 <_sbrk>
 8010b10:	1c43      	adds	r3, r0, #1
 8010b12:	d102      	bne.n	8010b1a <_sbrk_r+0x1a>
 8010b14:	6823      	ldr	r3, [r4, #0]
 8010b16:	b103      	cbz	r3, 8010b1a <_sbrk_r+0x1a>
 8010b18:	602b      	str	r3, [r5, #0]
 8010b1a:	bd38      	pop	{r3, r4, r5, pc}
 8010b1c:	2000161c 	.word	0x2000161c

08010b20 <__sread>:
 8010b20:	b510      	push	{r4, lr}
 8010b22:	460c      	mov	r4, r1
 8010b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b28:	f000 f896 	bl	8010c58 <_read_r>
 8010b2c:	2800      	cmp	r0, #0
 8010b2e:	bfab      	itete	ge
 8010b30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010b32:	89a3      	ldrhlt	r3, [r4, #12]
 8010b34:	181b      	addge	r3, r3, r0
 8010b36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010b3a:	bfac      	ite	ge
 8010b3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8010b3e:	81a3      	strhlt	r3, [r4, #12]
 8010b40:	bd10      	pop	{r4, pc}

08010b42 <__swrite>:
 8010b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b46:	461f      	mov	r7, r3
 8010b48:	898b      	ldrh	r3, [r1, #12]
 8010b4a:	05db      	lsls	r3, r3, #23
 8010b4c:	4605      	mov	r5, r0
 8010b4e:	460c      	mov	r4, r1
 8010b50:	4616      	mov	r6, r2
 8010b52:	d505      	bpl.n	8010b60 <__swrite+0x1e>
 8010b54:	2302      	movs	r3, #2
 8010b56:	2200      	movs	r2, #0
 8010b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b5c:	f000 f868 	bl	8010c30 <_lseek_r>
 8010b60:	89a3      	ldrh	r3, [r4, #12]
 8010b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010b6a:	81a3      	strh	r3, [r4, #12]
 8010b6c:	4632      	mov	r2, r6
 8010b6e:	463b      	mov	r3, r7
 8010b70:	4628      	mov	r0, r5
 8010b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b76:	f000 b817 	b.w	8010ba8 <_write_r>

08010b7a <__sseek>:
 8010b7a:	b510      	push	{r4, lr}
 8010b7c:	460c      	mov	r4, r1
 8010b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b82:	f000 f855 	bl	8010c30 <_lseek_r>
 8010b86:	1c43      	adds	r3, r0, #1
 8010b88:	89a3      	ldrh	r3, [r4, #12]
 8010b8a:	bf15      	itete	ne
 8010b8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8010b8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010b92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010b96:	81a3      	strheq	r3, [r4, #12]
 8010b98:	bf18      	it	ne
 8010b9a:	81a3      	strhne	r3, [r4, #12]
 8010b9c:	bd10      	pop	{r4, pc}

08010b9e <__sclose>:
 8010b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ba2:	f000 b813 	b.w	8010bcc <_close_r>
	...

08010ba8 <_write_r>:
 8010ba8:	b538      	push	{r3, r4, r5, lr}
 8010baa:	4c07      	ldr	r4, [pc, #28]	; (8010bc8 <_write_r+0x20>)
 8010bac:	4605      	mov	r5, r0
 8010bae:	4608      	mov	r0, r1
 8010bb0:	4611      	mov	r1, r2
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	6022      	str	r2, [r4, #0]
 8010bb6:	461a      	mov	r2, r3
 8010bb8:	f7fe ff4b 	bl	800fa52 <_write>
 8010bbc:	1c43      	adds	r3, r0, #1
 8010bbe:	d102      	bne.n	8010bc6 <_write_r+0x1e>
 8010bc0:	6823      	ldr	r3, [r4, #0]
 8010bc2:	b103      	cbz	r3, 8010bc6 <_write_r+0x1e>
 8010bc4:	602b      	str	r3, [r5, #0]
 8010bc6:	bd38      	pop	{r3, r4, r5, pc}
 8010bc8:	2000161c 	.word	0x2000161c

08010bcc <_close_r>:
 8010bcc:	b538      	push	{r3, r4, r5, lr}
 8010bce:	4c06      	ldr	r4, [pc, #24]	; (8010be8 <_close_r+0x1c>)
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	4605      	mov	r5, r0
 8010bd4:	4608      	mov	r0, r1
 8010bd6:	6023      	str	r3, [r4, #0]
 8010bd8:	f7fe ff57 	bl	800fa8a <_close>
 8010bdc:	1c43      	adds	r3, r0, #1
 8010bde:	d102      	bne.n	8010be6 <_close_r+0x1a>
 8010be0:	6823      	ldr	r3, [r4, #0]
 8010be2:	b103      	cbz	r3, 8010be6 <_close_r+0x1a>
 8010be4:	602b      	str	r3, [r5, #0]
 8010be6:	bd38      	pop	{r3, r4, r5, pc}
 8010be8:	2000161c 	.word	0x2000161c

08010bec <_fstat_r>:
 8010bec:	b538      	push	{r3, r4, r5, lr}
 8010bee:	4c07      	ldr	r4, [pc, #28]	; (8010c0c <_fstat_r+0x20>)
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	4605      	mov	r5, r0
 8010bf4:	4608      	mov	r0, r1
 8010bf6:	4611      	mov	r1, r2
 8010bf8:	6023      	str	r3, [r4, #0]
 8010bfa:	f7fe ff52 	bl	800faa2 <_fstat>
 8010bfe:	1c43      	adds	r3, r0, #1
 8010c00:	d102      	bne.n	8010c08 <_fstat_r+0x1c>
 8010c02:	6823      	ldr	r3, [r4, #0]
 8010c04:	b103      	cbz	r3, 8010c08 <_fstat_r+0x1c>
 8010c06:	602b      	str	r3, [r5, #0]
 8010c08:	bd38      	pop	{r3, r4, r5, pc}
 8010c0a:	bf00      	nop
 8010c0c:	2000161c 	.word	0x2000161c

08010c10 <_isatty_r>:
 8010c10:	b538      	push	{r3, r4, r5, lr}
 8010c12:	4c06      	ldr	r4, [pc, #24]	; (8010c2c <_isatty_r+0x1c>)
 8010c14:	2300      	movs	r3, #0
 8010c16:	4605      	mov	r5, r0
 8010c18:	4608      	mov	r0, r1
 8010c1a:	6023      	str	r3, [r4, #0]
 8010c1c:	f7fe ff51 	bl	800fac2 <_isatty>
 8010c20:	1c43      	adds	r3, r0, #1
 8010c22:	d102      	bne.n	8010c2a <_isatty_r+0x1a>
 8010c24:	6823      	ldr	r3, [r4, #0]
 8010c26:	b103      	cbz	r3, 8010c2a <_isatty_r+0x1a>
 8010c28:	602b      	str	r3, [r5, #0]
 8010c2a:	bd38      	pop	{r3, r4, r5, pc}
 8010c2c:	2000161c 	.word	0x2000161c

08010c30 <_lseek_r>:
 8010c30:	b538      	push	{r3, r4, r5, lr}
 8010c32:	4c07      	ldr	r4, [pc, #28]	; (8010c50 <_lseek_r+0x20>)
 8010c34:	4605      	mov	r5, r0
 8010c36:	4608      	mov	r0, r1
 8010c38:	4611      	mov	r1, r2
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	6022      	str	r2, [r4, #0]
 8010c3e:	461a      	mov	r2, r3
 8010c40:	f7fe ff4a 	bl	800fad8 <_lseek>
 8010c44:	1c43      	adds	r3, r0, #1
 8010c46:	d102      	bne.n	8010c4e <_lseek_r+0x1e>
 8010c48:	6823      	ldr	r3, [r4, #0]
 8010c4a:	b103      	cbz	r3, 8010c4e <_lseek_r+0x1e>
 8010c4c:	602b      	str	r3, [r5, #0]
 8010c4e:	bd38      	pop	{r3, r4, r5, pc}
 8010c50:	2000161c 	.word	0x2000161c

08010c54 <__malloc_lock>:
 8010c54:	4770      	bx	lr

08010c56 <__malloc_unlock>:
 8010c56:	4770      	bx	lr

08010c58 <_read_r>:
 8010c58:	b538      	push	{r3, r4, r5, lr}
 8010c5a:	4c07      	ldr	r4, [pc, #28]	; (8010c78 <_read_r+0x20>)
 8010c5c:	4605      	mov	r5, r0
 8010c5e:	4608      	mov	r0, r1
 8010c60:	4611      	mov	r1, r2
 8010c62:	2200      	movs	r2, #0
 8010c64:	6022      	str	r2, [r4, #0]
 8010c66:	461a      	mov	r2, r3
 8010c68:	f7fe fed6 	bl	800fa18 <_read>
 8010c6c:	1c43      	adds	r3, r0, #1
 8010c6e:	d102      	bne.n	8010c76 <_read_r+0x1e>
 8010c70:	6823      	ldr	r3, [r4, #0]
 8010c72:	b103      	cbz	r3, 8010c76 <_read_r+0x1e>
 8010c74:	602b      	str	r3, [r5, #0]
 8010c76:	bd38      	pop	{r3, r4, r5, pc}
 8010c78:	2000161c 	.word	0x2000161c

08010c7c <sqrt>:
 8010c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c80:	ed2d 8b02 	vpush	{d8}
 8010c84:	b08b      	sub	sp, #44	; 0x2c
 8010c86:	ec55 4b10 	vmov	r4, r5, d0
 8010c8a:	f000 f851 	bl	8010d30 <__ieee754_sqrt>
 8010c8e:	4b26      	ldr	r3, [pc, #152]	; (8010d28 <sqrt+0xac>)
 8010c90:	eeb0 8a40 	vmov.f32	s16, s0
 8010c94:	eef0 8a60 	vmov.f32	s17, s1
 8010c98:	f993 6000 	ldrsb.w	r6, [r3]
 8010c9c:	1c73      	adds	r3, r6, #1
 8010c9e:	d02a      	beq.n	8010cf6 <sqrt+0x7a>
 8010ca0:	4622      	mov	r2, r4
 8010ca2:	462b      	mov	r3, r5
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	4629      	mov	r1, r5
 8010ca8:	f7ef ff38 	bl	8000b1c <__aeabi_dcmpun>
 8010cac:	4607      	mov	r7, r0
 8010cae:	bb10      	cbnz	r0, 8010cf6 <sqrt+0x7a>
 8010cb0:	f04f 0800 	mov.w	r8, #0
 8010cb4:	f04f 0900 	mov.w	r9, #0
 8010cb8:	4642      	mov	r2, r8
 8010cba:	464b      	mov	r3, r9
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	4629      	mov	r1, r5
 8010cc0:	f7ef ff04 	bl	8000acc <__aeabi_dcmplt>
 8010cc4:	b1b8      	cbz	r0, 8010cf6 <sqrt+0x7a>
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	9300      	str	r3, [sp, #0]
 8010cca:	4b18      	ldr	r3, [pc, #96]	; (8010d2c <sqrt+0xb0>)
 8010ccc:	9301      	str	r3, [sp, #4]
 8010cce:	9708      	str	r7, [sp, #32]
 8010cd0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8010cd4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8010cd8:	b9b6      	cbnz	r6, 8010d08 <sqrt+0x8c>
 8010cda:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8010cde:	4668      	mov	r0, sp
 8010ce0:	f000 f8d6 	bl	8010e90 <matherr>
 8010ce4:	b1d0      	cbz	r0, 8010d1c <sqrt+0xa0>
 8010ce6:	9b08      	ldr	r3, [sp, #32]
 8010ce8:	b11b      	cbz	r3, 8010cf2 <sqrt+0x76>
 8010cea:	f7fe ff8f 	bl	800fc0c <__errno>
 8010cee:	9b08      	ldr	r3, [sp, #32]
 8010cf0:	6003      	str	r3, [r0, #0]
 8010cf2:	ed9d 8b06 	vldr	d8, [sp, #24]
 8010cf6:	eeb0 0a48 	vmov.f32	s0, s16
 8010cfa:	eef0 0a68 	vmov.f32	s1, s17
 8010cfe:	b00b      	add	sp, #44	; 0x2c
 8010d00:	ecbd 8b02 	vpop	{d8}
 8010d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d08:	4642      	mov	r2, r8
 8010d0a:	464b      	mov	r3, r9
 8010d0c:	4640      	mov	r0, r8
 8010d0e:	4649      	mov	r1, r9
 8010d10:	f7ef fd94 	bl	800083c <__aeabi_ddiv>
 8010d14:	2e02      	cmp	r6, #2
 8010d16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010d1a:	d1e0      	bne.n	8010cde <sqrt+0x62>
 8010d1c:	f7fe ff76 	bl	800fc0c <__errno>
 8010d20:	2321      	movs	r3, #33	; 0x21
 8010d22:	6003      	str	r3, [r0, #0]
 8010d24:	e7df      	b.n	8010ce6 <sqrt+0x6a>
 8010d26:	bf00      	nop
 8010d28:	20000120 	.word	0x20000120
 8010d2c:	0801153b 	.word	0x0801153b

08010d30 <__ieee754_sqrt>:
 8010d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d34:	4955      	ldr	r1, [pc, #340]	; (8010e8c <__ieee754_sqrt+0x15c>)
 8010d36:	ec55 4b10 	vmov	r4, r5, d0
 8010d3a:	43a9      	bics	r1, r5
 8010d3c:	462b      	mov	r3, r5
 8010d3e:	462a      	mov	r2, r5
 8010d40:	d112      	bne.n	8010d68 <__ieee754_sqrt+0x38>
 8010d42:	ee10 2a10 	vmov	r2, s0
 8010d46:	ee10 0a10 	vmov	r0, s0
 8010d4a:	4629      	mov	r1, r5
 8010d4c:	f7ef fc4c 	bl	80005e8 <__aeabi_dmul>
 8010d50:	4602      	mov	r2, r0
 8010d52:	460b      	mov	r3, r1
 8010d54:	4620      	mov	r0, r4
 8010d56:	4629      	mov	r1, r5
 8010d58:	f7ef fa90 	bl	800027c <__adddf3>
 8010d5c:	4604      	mov	r4, r0
 8010d5e:	460d      	mov	r5, r1
 8010d60:	ec45 4b10 	vmov	d0, r4, r5
 8010d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d68:	2d00      	cmp	r5, #0
 8010d6a:	ee10 0a10 	vmov	r0, s0
 8010d6e:	4621      	mov	r1, r4
 8010d70:	dc0f      	bgt.n	8010d92 <__ieee754_sqrt+0x62>
 8010d72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010d76:	4330      	orrs	r0, r6
 8010d78:	d0f2      	beq.n	8010d60 <__ieee754_sqrt+0x30>
 8010d7a:	b155      	cbz	r5, 8010d92 <__ieee754_sqrt+0x62>
 8010d7c:	ee10 2a10 	vmov	r2, s0
 8010d80:	4620      	mov	r0, r4
 8010d82:	4629      	mov	r1, r5
 8010d84:	f7ef fa78 	bl	8000278 <__aeabi_dsub>
 8010d88:	4602      	mov	r2, r0
 8010d8a:	460b      	mov	r3, r1
 8010d8c:	f7ef fd56 	bl	800083c <__aeabi_ddiv>
 8010d90:	e7e4      	b.n	8010d5c <__ieee754_sqrt+0x2c>
 8010d92:	151b      	asrs	r3, r3, #20
 8010d94:	d073      	beq.n	8010e7e <__ieee754_sqrt+0x14e>
 8010d96:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010d9a:	07dd      	lsls	r5, r3, #31
 8010d9c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8010da0:	bf48      	it	mi
 8010da2:	0fc8      	lsrmi	r0, r1, #31
 8010da4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8010da8:	bf44      	itt	mi
 8010daa:	0049      	lslmi	r1, r1, #1
 8010dac:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8010db0:	2500      	movs	r5, #0
 8010db2:	1058      	asrs	r0, r3, #1
 8010db4:	0fcb      	lsrs	r3, r1, #31
 8010db6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8010dba:	0049      	lsls	r1, r1, #1
 8010dbc:	2316      	movs	r3, #22
 8010dbe:	462c      	mov	r4, r5
 8010dc0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8010dc4:	19a7      	adds	r7, r4, r6
 8010dc6:	4297      	cmp	r7, r2
 8010dc8:	bfde      	ittt	le
 8010dca:	19bc      	addle	r4, r7, r6
 8010dcc:	1bd2      	suble	r2, r2, r7
 8010dce:	19ad      	addle	r5, r5, r6
 8010dd0:	0fcf      	lsrs	r7, r1, #31
 8010dd2:	3b01      	subs	r3, #1
 8010dd4:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8010dd8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010ddc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010de0:	d1f0      	bne.n	8010dc4 <__ieee754_sqrt+0x94>
 8010de2:	f04f 0c20 	mov.w	ip, #32
 8010de6:	469e      	mov	lr, r3
 8010de8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010dec:	42a2      	cmp	r2, r4
 8010dee:	eb06 070e 	add.w	r7, r6, lr
 8010df2:	dc02      	bgt.n	8010dfa <__ieee754_sqrt+0xca>
 8010df4:	d112      	bne.n	8010e1c <__ieee754_sqrt+0xec>
 8010df6:	428f      	cmp	r7, r1
 8010df8:	d810      	bhi.n	8010e1c <__ieee754_sqrt+0xec>
 8010dfa:	2f00      	cmp	r7, #0
 8010dfc:	eb07 0e06 	add.w	lr, r7, r6
 8010e00:	da42      	bge.n	8010e88 <__ieee754_sqrt+0x158>
 8010e02:	f1be 0f00 	cmp.w	lr, #0
 8010e06:	db3f      	blt.n	8010e88 <__ieee754_sqrt+0x158>
 8010e08:	f104 0801 	add.w	r8, r4, #1
 8010e0c:	1b12      	subs	r2, r2, r4
 8010e0e:	428f      	cmp	r7, r1
 8010e10:	bf88      	it	hi
 8010e12:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8010e16:	1bc9      	subs	r1, r1, r7
 8010e18:	4433      	add	r3, r6
 8010e1a:	4644      	mov	r4, r8
 8010e1c:	0052      	lsls	r2, r2, #1
 8010e1e:	f1bc 0c01 	subs.w	ip, ip, #1
 8010e22:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8010e26:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010e2a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010e2e:	d1dd      	bne.n	8010dec <__ieee754_sqrt+0xbc>
 8010e30:	430a      	orrs	r2, r1
 8010e32:	d006      	beq.n	8010e42 <__ieee754_sqrt+0x112>
 8010e34:	1c5c      	adds	r4, r3, #1
 8010e36:	bf13      	iteet	ne
 8010e38:	3301      	addne	r3, #1
 8010e3a:	3501      	addeq	r5, #1
 8010e3c:	4663      	moveq	r3, ip
 8010e3e:	f023 0301 	bicne.w	r3, r3, #1
 8010e42:	106a      	asrs	r2, r5, #1
 8010e44:	085b      	lsrs	r3, r3, #1
 8010e46:	07e9      	lsls	r1, r5, #31
 8010e48:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010e4c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8010e50:	bf48      	it	mi
 8010e52:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8010e56:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8010e5a:	461c      	mov	r4, r3
 8010e5c:	e780      	b.n	8010d60 <__ieee754_sqrt+0x30>
 8010e5e:	0aca      	lsrs	r2, r1, #11
 8010e60:	3815      	subs	r0, #21
 8010e62:	0549      	lsls	r1, r1, #21
 8010e64:	2a00      	cmp	r2, #0
 8010e66:	d0fa      	beq.n	8010e5e <__ieee754_sqrt+0x12e>
 8010e68:	02d6      	lsls	r6, r2, #11
 8010e6a:	d50a      	bpl.n	8010e82 <__ieee754_sqrt+0x152>
 8010e6c:	f1c3 0420 	rsb	r4, r3, #32
 8010e70:	fa21 f404 	lsr.w	r4, r1, r4
 8010e74:	1e5d      	subs	r5, r3, #1
 8010e76:	4099      	lsls	r1, r3
 8010e78:	4322      	orrs	r2, r4
 8010e7a:	1b43      	subs	r3, r0, r5
 8010e7c:	e78b      	b.n	8010d96 <__ieee754_sqrt+0x66>
 8010e7e:	4618      	mov	r0, r3
 8010e80:	e7f0      	b.n	8010e64 <__ieee754_sqrt+0x134>
 8010e82:	0052      	lsls	r2, r2, #1
 8010e84:	3301      	adds	r3, #1
 8010e86:	e7ef      	b.n	8010e68 <__ieee754_sqrt+0x138>
 8010e88:	46a0      	mov	r8, r4
 8010e8a:	e7bf      	b.n	8010e0c <__ieee754_sqrt+0xdc>
 8010e8c:	7ff00000 	.word	0x7ff00000

08010e90 <matherr>:
 8010e90:	2000      	movs	r0, #0
 8010e92:	4770      	bx	lr

08010e94 <_init>:
 8010e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e96:	bf00      	nop
 8010e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e9a:	bc08      	pop	{r3}
 8010e9c:	469e      	mov	lr, r3
 8010e9e:	4770      	bx	lr

08010ea0 <_fini>:
 8010ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ea2:	bf00      	nop
 8010ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ea6:	bc08      	pop	{r3}
 8010ea8:	469e      	mov	lr, r3
 8010eaa:	4770      	bx	lr
