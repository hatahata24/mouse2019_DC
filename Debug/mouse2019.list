
mouse2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800cee4  0800cee4  0001cee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d338  0800d338  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d338  0800d338  0001d338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d340  0800d340  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d340  0800d340  0001d340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d344  0800d344  0001d344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800d348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d98  200000cc  0800d414  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e64  0800d414  00020e64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a09  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003012  00000000  00000000  00035b05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001348  00000000  00000000  00038b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f8  00000000  00000000  00039e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000223e1  00000000  00000000  0003b058  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fd8e  00000000  00000000  0005d439  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6c93  00000000  00000000  0006d1c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00133e5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a8  00000000  00000000  00133ed8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cecc 	.word	0x0800cecc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	0800cecc 	.word	0x0800cecc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	; (8000f28 <HAL_Init+0x40>)
 8000ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_Init+0x40>)
 8000efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_Init+0x40>)
 8000f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 fd07 	bl	8001924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f000 f808 	bl	8000f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f1c:	f00a fb16 	bl	800b54c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023c00 	.word	0x40023c00

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x54>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x58>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fd1f 	bl	800198e <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00e      	b.n	8000f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80a      	bhi.n	8000f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f000 fce7 	bl	800193a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HAL_InitTick+0x5c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000060 	.word	0x20000060
 8000f84:	20000004 	.word	0x20000004
 8000f88:	20000000 	.word	0x20000000

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000004 	.word	0x20000004
 8000fb0:	200000fc 	.word	0x200000fc

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200000fc 	.word	0x200000fc

08000fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff ffee 	bl	8000fb4 <HAL_GetTick>
 8000fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe4:	d005      	beq.n	8000ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_Delay+0x40>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ffde 	bl	8000fb4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8f7      	bhi.n	8000ff4 <HAL_Delay+0x28>
  {
  }
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e033      	b.n	800108e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	2b00      	cmp	r3, #0
 800102c:	d109      	bne.n	8001042 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f00a fab4 	bl	800b59c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	d118      	bne.n	8001080 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001056:	f023 0302 	bic.w	r3, r3, #2
 800105a:	f043 0202 	orr.w	r2, r3, #2
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 fa92 	bl	800158c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f023 0303 	bic.w	r3, r3, #3
 8001076:	f043 0201 	orr.w	r2, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
 800107e:	e001      	b.n	8001084 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_Start+0x1a>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e0a5      	b.n	80011fe <HAL_ADC_Start+0x166>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d018      	beq.n	80010fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010d8:	4b4c      	ldr	r3, [pc, #304]	; (800120c <HAL_ADC_Start+0x174>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <HAL_ADC_Start+0x178>)
 80010de:	fba2 2303 	umull	r2, r3, r2, r3
 80010e2:	0c9a      	lsrs	r2, r3, #18
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010ec:	e002      	b.n	80010f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f9      	bne.n	80010ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b01      	cmp	r3, #1
 8001106:	d179      	bne.n	80011fc <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001132:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001146:	d106      	bne.n	8001156 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114c:	f023 0206 	bic.w	r2, r3, #6
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	645a      	str	r2, [r3, #68]	; 0x44
 8001154:	e002      	b.n	800115c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_ADC_Start+0x17c>)
 8001166:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001170:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 031f 	and.w	r3, r3, #31
 800117a:	2b00      	cmp	r3, #0
 800117c:	d12a      	bne.n	80011d4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a25      	ldr	r2, [pc, #148]	; (8001218 <HAL_ADC_Start+0x180>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d015      	beq.n	80011b4 <HAL_ADC_Start+0x11c>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a23      	ldr	r2, [pc, #140]	; (800121c <HAL_ADC_Start+0x184>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d105      	bne.n	800119e <HAL_ADC_Start+0x106>
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <HAL_ADC_Start+0x17c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 031f 	and.w	r3, r3, #31
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00a      	beq.n	80011b4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <HAL_ADC_Start+0x188>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d129      	bne.n	80011fc <HAL_ADC_Start+0x164>
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <HAL_ADC_Start+0x17c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 031f 	and.w	r3, r3, #31
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d823      	bhi.n	80011fc <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d11c      	bne.n	80011fc <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	e013      	b.n	80011fc <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <HAL_ADC_Start+0x180>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10e      	bne.n	80011fc <HAL_ADC_Start+0x164>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d107      	bne.n	80011fc <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011fa:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000060 	.word	0x20000060
 8001210:	431bde83 	.word	0x431bde83
 8001214:	40012300 	.word	0x40012300
 8001218:	40012000 	.word	0x40012000
 800121c:	40012100 	.word	0x40012100
 8001220:	40012200 	.word	0x40012200

08001224 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800123c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001240:	d113      	bne.n	800126a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800124c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001250:	d10b      	bne.n	800126a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f043 0220 	orr.w	r2, r3, #32
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e05c      	b.n	8001324 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800126a:	f7ff fea3 	bl	8000fb4 <HAL_GetTick>
 800126e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001270:	e01a      	b.n	80012a8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d016      	beq.n	80012a8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d007      	beq.n	8001290 <HAL_ADC_PollForConversion+0x6c>
 8001280:	f7ff fe98 	bl	8000fb4 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d20b      	bcs.n	80012a8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f043 0204 	orr.w	r2, r3, #4
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e03d      	b.n	8001324 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d1dd      	bne.n	8001272 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f06f 0212 	mvn.w	r2, #18
 80012be:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d123      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d11f      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d111      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d105      	bne.n	8001322 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f043 0201 	orr.w	r2, r3, #1
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x1c>
 8001360:	2302      	movs	r3, #2
 8001362:	e105      	b.n	8001570 <HAL_ADC_ConfigChannel+0x228>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b09      	cmp	r3, #9
 8001372:	d925      	bls.n	80013c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68d9      	ldr	r1, [r3, #12]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	3b1e      	subs	r3, #30
 800138a:	2207      	movs	r2, #7
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43da      	mvns	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	400a      	ands	r2, r1
 8001398:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68d9      	ldr	r1, [r3, #12]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	4603      	mov	r3, r0
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4403      	add	r3, r0
 80013b2:	3b1e      	subs	r3, #30
 80013b4:	409a      	lsls	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	e022      	b.n	8001406 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6919      	ldr	r1, [r3, #16]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	2207      	movs	r2, #7
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	400a      	ands	r2, r1
 80013e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6919      	ldr	r1, [r3, #16]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	4603      	mov	r3, r0
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4403      	add	r3, r0
 80013fc:	409a      	lsls	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b06      	cmp	r3, #6
 800140c:	d824      	bhi.n	8001458 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	3b05      	subs	r3, #5
 8001420:	221f      	movs	r2, #31
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	400a      	ands	r2, r1
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b05      	subs	r3, #5
 800144a:	fa00 f203 	lsl.w	r2, r0, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
 8001456:	e04c      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	d824      	bhi.n	80014aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	3b23      	subs	r3, #35	; 0x23
 8001472:	221f      	movs	r2, #31
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43da      	mvns	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	400a      	ands	r2, r1
 8001480:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	3b23      	subs	r3, #35	; 0x23
 800149c:	fa00 f203 	lsl.w	r2, r0, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
 80014a8:	e023      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3b41      	subs	r3, #65	; 0x41
 80014bc:	221f      	movs	r2, #31
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	400a      	ands	r2, r1
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3b41      	subs	r3, #65	; 0x41
 80014e6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <HAL_ADC_ConfigChannel+0x234>)
 80014f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a21      	ldr	r2, [pc, #132]	; (8001580 <HAL_ADC_ConfigChannel+0x238>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d109      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x1cc>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b12      	cmp	r3, #18
 8001506:	d105      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a19      	ldr	r2, [pc, #100]	; (8001580 <HAL_ADC_ConfigChannel+0x238>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d123      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x21e>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b10      	cmp	r3, #16
 8001524:	d003      	beq.n	800152e <HAL_ADC_ConfigChannel+0x1e6>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b11      	cmp	r3, #17
 800152c:	d11b      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b10      	cmp	r3, #16
 8001540:	d111      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_ADC_ConfigChannel+0x23c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a10      	ldr	r2, [pc, #64]	; (8001588 <HAL_ADC_ConfigChannel+0x240>)
 8001548:	fba2 2303 	umull	r2, r3, r2, r3
 800154c:	0c9a      	lsrs	r2, r3, #18
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001558:	e002      	b.n	8001560 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	3b01      	subs	r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f9      	bne.n	800155a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40012300 	.word	0x40012300
 8001580:	40012000 	.word	0x40012000
 8001584:	20000060 	.word	0x20000060
 8001588:	431bde83 	.word	0x431bde83

0800158c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001594:	4b79      	ldr	r3, [pc, #484]	; (800177c <ADC_Init+0x1f0>)
 8001596:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	431a      	orrs	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6859      	ldr	r1, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	021a      	lsls	r2, r3, #8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6859      	ldr	r1, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001606:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6899      	ldr	r1, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161e:	4a58      	ldr	r2, [pc, #352]	; (8001780 <ADC_Init+0x1f4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d022      	beq.n	800166a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001632:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6899      	ldr	r1, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001654:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6899      	ldr	r1, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	e00f      	b.n	800168a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001678:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001688:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0202 	bic.w	r2, r2, #2
 8001698:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6899      	ldr	r1, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7e1b      	ldrb	r3, [r3, #24]
 80016a4:	005a      	lsls	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d01b      	beq.n	80016f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6859      	ldr	r1, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	3b01      	subs	r3, #1
 80016e4:	035a      	lsls	r2, r3, #13
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	e007      	b.n	8001700 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	3b01      	subs	r3, #1
 800171c:	051a      	lsls	r2, r3, #20
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001734:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6899      	ldr	r1, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001742:	025a      	lsls	r2, r3, #9
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6899      	ldr	r1, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	029a      	lsls	r2, r3, #10
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	609a      	str	r2, [r3, #8]
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40012300 	.word	0x40012300
 8001780:	0f000001 	.word	0x0f000001

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db0b      	blt.n	8001812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	4907      	ldr	r1, [pc, #28]	; (8001820 <__NVIC_EnableIRQ+0x38>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e100 	.word	0xe000e100

08001824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	db0a      	blt.n	800184e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <__NVIC_SetPriority+0x4c>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	0112      	lsls	r2, r2, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	440b      	add	r3, r1
 8001848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800184c:	e00a      	b.n	8001864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4908      	ldr	r1, [pc, #32]	; (8001874 <__NVIC_SetPriority+0x50>)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3b04      	subs	r3, #4
 800185c:	0112      	lsls	r2, r2, #4
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	440b      	add	r3, r1
 8001862:	761a      	strb	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000e100 	.word	0xe000e100
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f1c3 0307 	rsb	r3, r3, #7
 8001892:	2b04      	cmp	r3, #4
 8001894:	bf28      	it	cs
 8001896:	2304      	movcs	r3, #4
 8001898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3304      	adds	r3, #4
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d902      	bls.n	80018a8 <NVIC_EncodePriority+0x30>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3b03      	subs	r3, #3
 80018a6:	e000      	b.n	80018aa <NVIC_EncodePriority+0x32>
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	401a      	ands	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43d9      	mvns	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	4313      	orrs	r3, r2
         );
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3724      	adds	r7, #36	; 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f0:	d301      	bcc.n	80018f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00f      	b.n	8001916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <SysTick_Config+0x40>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fe:	210f      	movs	r1, #15
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f7ff ff8e 	bl	8001824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <SysTick_Config+0x40>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <SysTick_Config+0x40>)
 8001910:	2207      	movs	r2, #7
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	e000e010 	.word	0xe000e010

08001924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff29 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff3e 	bl	80017cc <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff8e 	bl	8001878 <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5d 	bl	8001824 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff31 	bl	80017e8 <__NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffa2 	bl	80018e0 <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <HAL_FLASH_Program+0xa0>)
 80019bc:	7e1b      	ldrb	r3, [r3, #24]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_FLASH_Program+0x1e>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e03b      	b.n	8001a3e <HAL_FLASH_Program+0x96>
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_FLASH_Program+0xa0>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019d0:	f000 f870 	bl	8001ab4 <FLASH_WaitForLastOperation>
 80019d4:	4603      	mov	r3, r0
 80019d6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d12b      	bne.n	8001a36 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d105      	bne.n	80019f0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80019e4:	783b      	ldrb	r3, [r7, #0]
 80019e6:	4619      	mov	r1, r3
 80019e8:	68b8      	ldr	r0, [r7, #8]
 80019ea:	f000 f917 	bl	8001c1c <FLASH_Program_Byte>
 80019ee:	e016      	b.n	8001a1e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d105      	bne.n	8001a02 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80019f6:	883b      	ldrh	r3, [r7, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	68b8      	ldr	r0, [r7, #8]
 80019fc:	f000 f8ea 	bl	8001bd4 <FLASH_Program_HalfWord>
 8001a00:	e00d      	b.n	8001a1e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d105      	bne.n	8001a14 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	68b8      	ldr	r0, [r7, #8]
 8001a0e:	f000 f8bf 	bl	8001b90 <FLASH_Program_Word>
 8001a12:	e004      	b.n	8001a1e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a18:	68b8      	ldr	r0, [r7, #8]
 8001a1a:	f000 f88b 	bl	8001b34 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a22:	f000 f847 	bl	8001ab4 <FLASH_WaitForLastOperation>
 8001a26:	4603      	mov	r3, r0
 8001a28:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <HAL_FLASH_Program+0xa4>)
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <HAL_FLASH_Program+0xa4>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a36:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <HAL_FLASH_Program+0xa0>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000100 	.word	0x20000100
 8001a4c:	40023c00 	.word	0x40023c00

08001a50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_FLASH_Unlock+0x38>)
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da0b      	bge.n	8001a7a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_FLASH_Unlock+0x38>)
 8001a64:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <HAL_FLASH_Unlock+0x3c>)
 8001a66:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <HAL_FLASH_Unlock+0x38>)
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_FLASH_Unlock+0x40>)
 8001a6c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_FLASH_Unlock+0x38>)
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	da01      	bge.n	8001a7a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40023c00 	.word	0x40023c00
 8001a8c:	45670123 	.word	0x45670123
 8001a90:	cdef89ab 	.word	0xcdef89ab

08001a94 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_FLASH_Lock+0x1c>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_FLASH_Lock+0x1c>)
 8001a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001aa2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40023c00 	.word	0x40023c00

08001ab4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <FLASH_WaitForLastOperation+0x78>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac6:	f7ff fa75 	bl	8000fb4 <HAL_GetTick>
 8001aca:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001acc:	e010      	b.n	8001af0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d00c      	beq.n	8001af0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d007      	beq.n	8001aec <FLASH_WaitForLastOperation+0x38>
 8001adc:	f7ff fa6a 	bl	8000fb4 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d201      	bcs.n	8001af0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e019      	b.n	8001b24 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <FLASH_WaitForLastOperation+0x7c>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1e8      	bne.n	8001ace <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <FLASH_WaitForLastOperation+0x7c>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <FLASH_WaitForLastOperation+0x7c>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <FLASH_WaitForLastOperation+0x7c>)
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b1a:	f000 f8a1 	bl	8001c60 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
  
}  
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000100 	.word	0x20000100
 8001b30:	40023c00 	.word	0x40023c00

08001b34 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b34:	b490      	push	{r4, r7}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	4a0e      	ldr	r2, [pc, #56]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b52:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <FLASH_Program_DoubleWord+0x58>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001b6a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	f04f 0400 	mov.w	r4, #0
 8001b76:	0013      	movs	r3, r2
 8001b78:	2400      	movs	r4, #0
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	3204      	adds	r2, #4
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc90      	pop	{r4, r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023c00 	.word	0x40023c00

08001b90 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	4a06      	ldr	r2, [pc, #24]	; (8001bd0 <FLASH_Program_Word+0x40>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	601a      	str	r2, [r3, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40023c00 	.word	0x40023c00

08001bd4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <FLASH_Program_HalfWord+0x44>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	801a      	strh	r2, [r3, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40023c00 	.word	0x40023c00

08001c1c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c36:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a06      	ldr	r2, [pc, #24]	; (8001c5c <FLASH_Program_Byte+0x40>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	701a      	strb	r2, [r3, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00

08001c60 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c70:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	f043 0310 	orr.w	r3, r3, #16
 8001c78:	4a23      	ldr	r2, [pc, #140]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001c7a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001c7c:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001c7e:	2210      	movs	r2, #16
 8001c80:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001c82:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f043 0308 	orr.w	r3, r3, #8
 8001c96:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001c98:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cb6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cba:	2240      	movs	r2, #64	; 0x40
 8001cbc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cd4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cd8:	2280      	movs	r2, #128	; 0x80
 8001cda:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	f043 0320 	orr.w	r3, r3, #32
 8001cf0:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <FLASH_SetErrorCode+0xa8>)
 8001cf2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <FLASH_SetErrorCode+0xa4>)
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	60da      	str	r2, [r3, #12]
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	40023c00 	.word	0x40023c00
 8001d08:	20000100 	.word	0x20000100

08001d0c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d1e:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <HAL_FLASHEx_Erase+0xd8>)
 8001d20:	7e1b      	ldrb	r3, [r3, #24]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_FLASHEx_Erase+0x1e>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e058      	b.n	8001ddc <HAL_FLASHEx_Erase+0xd0>
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_FLASHEx_Erase+0xd8>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d34:	f7ff febe 	bl	8001ab4 <FLASH_WaitForLastOperation>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d148      	bne.n	8001dd4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d115      	bne.n	8001d7e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4610      	mov	r0, r2
 8001d60:	f000 f844 	bl	8001dec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d68:	f7ff fea4 	bl	8001ab4 <FLASH_WaitForLastOperation>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001d70:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_FLASHEx_Erase+0xdc>)
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <HAL_FLASHEx_Erase+0xdc>)
 8001d76:	f023 0304 	bic.w	r3, r3, #4
 8001d7a:	6113      	str	r3, [r2, #16]
 8001d7c:	e028      	b.n	8001dd0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	e01c      	b.n	8001dc0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	68b8      	ldr	r0, [r7, #8]
 8001d90:	f000 f850 	bl	8001e34 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d98:	f7ff fe8c 	bl	8001ab4 <FLASH_WaitForLastOperation>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HAL_FLASHEx_Erase+0xdc>)
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <HAL_FLASHEx_Erase+0xdc>)
 8001da6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001daa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	601a      	str	r2, [r3, #0]
          break;
 8001db8:	e00a      	b.n	8001dd0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4413      	add	r3, r2
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d3da      	bcc.n	8001d86 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001dd0:	f000 f878 	bl	8001ec4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_FLASHEx_Erase+0xd8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	761a      	strb	r2, [r3, #24]

  return status;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000100 	.word	0x20000100
 8001de8:	40023c00 	.word	0x40023c00

08001dec <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001df8:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <FLASH_MassErase+0x44>)
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <FLASH_MassErase+0x44>)
 8001dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <FLASH_MassErase+0x44>)
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <FLASH_MassErase+0x44>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <FLASH_MassErase+0x44>)
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <FLASH_MassErase+0x44>)
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e20:	6113      	str	r3, [r2, #16]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023c00 	.word	0x40023c00

08001e34 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	e010      	b.n	8001e72 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d103      	bne.n	8001e5e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	e009      	b.n	8001e72 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d103      	bne.n	8001e6c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	e002      	b.n	8001e72 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001e6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	490f      	ldr	r1, [pc, #60]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e90:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001ea2:	f043 0302 	orr.w	r3, r3, #2
 8001ea6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <FLASH_Erase_Sector+0x8c>)
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb2:	6113      	str	r3, [r2, #16]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40023c00 	.word	0x40023c00

08001ec4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001ec8:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d017      	beq.n	8001f04 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001eda:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ede:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a19      	ldr	r2, [pc, #100]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001ee6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a16      	ldr	r2, [pc, #88]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ef6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef8:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f02:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d017      	beq.n	8001f40 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f1a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a07      	ldr	r2, [pc, #28]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f32:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <FLASH_FlushCaches+0x88>)
 8001f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3e:	6013      	str	r3, [r2, #0]
  }
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023c00 	.word	0x40023c00

08001f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	; 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	e16b      	b.n	8002244 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	f040 815a 	bne.w	800223e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x4a>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b12      	cmp	r3, #18
 8001f98:	d123      	bne.n	8001fe2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	08da      	lsrs	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3208      	adds	r2, #8
 8001fdc:	69b9      	ldr	r1, [r7, #24]
 8001fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0203 	and.w	r2, r3, #3
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d00b      	beq.n	8002036 <HAL_GPIO_Init+0xe6>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d007      	beq.n	8002036 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800202a:	2b11      	cmp	r3, #17
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b12      	cmp	r3, #18
 8002034:	d130      	bne.n	8002098 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2203      	movs	r2, #3
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800206c:	2201      	movs	r2, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 0201 	and.w	r2, r3, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80b4 	beq.w	800223e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b5f      	ldr	r3, [pc, #380]	; (8002258 <HAL_GPIO_Init+0x308>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	4a5e      	ldr	r2, [pc, #376]	; (8002258 <HAL_GPIO_Init+0x308>)
 80020e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e4:	6453      	str	r3, [r2, #68]	; 0x44
 80020e6:	4b5c      	ldr	r3, [pc, #368]	; (8002258 <HAL_GPIO_Init+0x308>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020f2:	4a5a      	ldr	r2, [pc, #360]	; (800225c <HAL_GPIO_Init+0x30c>)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	3302      	adds	r3, #2
 80020fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	220f      	movs	r2, #15
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a51      	ldr	r2, [pc, #324]	; (8002260 <HAL_GPIO_Init+0x310>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d02b      	beq.n	8002176 <HAL_GPIO_Init+0x226>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a50      	ldr	r2, [pc, #320]	; (8002264 <HAL_GPIO_Init+0x314>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d025      	beq.n	8002172 <HAL_GPIO_Init+0x222>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4f      	ldr	r2, [pc, #316]	; (8002268 <HAL_GPIO_Init+0x318>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01f      	beq.n	800216e <HAL_GPIO_Init+0x21e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4e      	ldr	r2, [pc, #312]	; (800226c <HAL_GPIO_Init+0x31c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d019      	beq.n	800216a <HAL_GPIO_Init+0x21a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4d      	ldr	r2, [pc, #308]	; (8002270 <HAL_GPIO_Init+0x320>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_GPIO_Init+0x216>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4c      	ldr	r2, [pc, #304]	; (8002274 <HAL_GPIO_Init+0x324>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00d      	beq.n	8002162 <HAL_GPIO_Init+0x212>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4b      	ldr	r2, [pc, #300]	; (8002278 <HAL_GPIO_Init+0x328>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d007      	beq.n	800215e <HAL_GPIO_Init+0x20e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4a      	ldr	r2, [pc, #296]	; (800227c <HAL_GPIO_Init+0x32c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <HAL_GPIO_Init+0x20a>
 8002156:	2307      	movs	r3, #7
 8002158:	e00e      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800215a:	2308      	movs	r3, #8
 800215c:	e00c      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800215e:	2306      	movs	r3, #6
 8002160:	e00a      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002162:	2305      	movs	r3, #5
 8002164:	e008      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002166:	2304      	movs	r3, #4
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800216a:	2303      	movs	r3, #3
 800216c:	e004      	b.n	8002178 <HAL_GPIO_Init+0x228>
 800216e:	2302      	movs	r3, #2
 8002170:	e002      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_GPIO_Init+0x228>
 8002176:	2300      	movs	r3, #0
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	f002 0203 	and.w	r2, r2, #3
 800217e:	0092      	lsls	r2, r2, #2
 8002180:	4093      	lsls	r3, r2
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002188:	4934      	ldr	r1, [pc, #208]	; (800225c <HAL_GPIO_Init+0x30c>)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	3302      	adds	r3, #2
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002196:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <HAL_GPIO_Init+0x330>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ba:	4a31      	ldr	r2, [pc, #196]	; (8002280 <HAL_GPIO_Init+0x330>)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021c0:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <HAL_GPIO_Init+0x330>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021e4:	4a26      	ldr	r2, [pc, #152]	; (8002280 <HAL_GPIO_Init+0x330>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <HAL_GPIO_Init+0x330>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800220e:	4a1c      	ldr	r2, [pc, #112]	; (8002280 <HAL_GPIO_Init+0x330>)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HAL_GPIO_Init+0x330>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002238:	4a11      	ldr	r2, [pc, #68]	; (8002280 <HAL_GPIO_Init+0x330>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3301      	adds	r3, #1
 8002242:	61fb      	str	r3, [r7, #28]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	2b0f      	cmp	r3, #15
 8002248:	f67f ae90 	bls.w	8001f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800224c:	bf00      	nop
 800224e:	3724      	adds	r7, #36	; 0x24
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40023800 	.word	0x40023800
 800225c:	40013800 	.word	0x40013800
 8002260:	40020000 	.word	0x40020000
 8002264:	40020400 	.word	0x40020400
 8002268:	40020800 	.word	0x40020800
 800226c:	40020c00 	.word	0x40020c00
 8002270:	40021000 	.word	0x40021000
 8002274:	40021400 	.word	0x40021400
 8002278:	40021800 	.word	0x40021800
 800227c:	40021c00 	.word	0x40021c00
 8002280:	40013c00 	.word	0x40013c00

08002284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	887b      	ldrh	r3, [r7, #2]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e001      	b.n	80022a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	807b      	strh	r3, [r7, #2]
 80022c0:	4613      	mov	r3, r2
 80022c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c4:	787b      	ldrb	r3, [r7, #1]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022d0:	e003      	b.n	80022da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022d2:	887b      	ldrh	r3, [r7, #2]
 80022d4:	041a      	lsls	r2, r3, #16
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	619a      	str	r2, [r3, #24]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e22d      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d075      	beq.n	80023f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002306:	4ba3      	ldr	r3, [pc, #652]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b04      	cmp	r3, #4
 8002310:	d00c      	beq.n	800232c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002312:	4ba0      	ldr	r3, [pc, #640]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231a:	2b08      	cmp	r3, #8
 800231c:	d112      	bne.n	8002344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4b9d      	ldr	r3, [pc, #628]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800232a:	d10b      	bne.n	8002344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	4b99      	ldr	r3, [pc, #612]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d05b      	beq.n	80023f0 <HAL_RCC_OscConfig+0x108>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d157      	bne.n	80023f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e208      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234c:	d106      	bne.n	800235c <HAL_RCC_OscConfig+0x74>
 800234e:	4b91      	ldr	r3, [pc, #580]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a90      	ldr	r2, [pc, #576]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e01d      	b.n	8002398 <HAL_RCC_OscConfig+0xb0>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x98>
 8002366:	4b8b      	ldr	r3, [pc, #556]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a8a      	ldr	r2, [pc, #552]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b88      	ldr	r3, [pc, #544]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a87      	ldr	r2, [pc, #540]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e00b      	b.n	8002398 <HAL_RCC_OscConfig+0xb0>
 8002380:	4b84      	ldr	r3, [pc, #528]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a83      	ldr	r2, [pc, #524]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b81      	ldr	r3, [pc, #516]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a80      	ldr	r2, [pc, #512]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7fe fe08 	bl	8000fb4 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a8:	f7fe fe04 	bl	8000fb4 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1cd      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	4b76      	ldr	r3, [pc, #472]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0xc0>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe fdf4 	bl	8000fb4 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d0:	f7fe fdf0 	bl	8000fb4 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e1b9      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	4b6c      	ldr	r3, [pc, #432]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0xe8>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d063      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023fe:	4b65      	ldr	r3, [pc, #404]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240a:	4b62      	ldr	r3, [pc, #392]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002412:	2b08      	cmp	r3, #8
 8002414:	d11c      	bne.n	8002450 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002416:	4b5f      	ldr	r3, [pc, #380]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d116      	bne.n	8002450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	4b5c      	ldr	r3, [pc, #368]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_RCC_OscConfig+0x152>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d001      	beq.n	800243a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e18d      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243a:	4b56      	ldr	r3, [pc, #344]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4952      	ldr	r1, [pc, #328]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	e03a      	b.n	80024c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d020      	beq.n	800249a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002458:	4b4f      	ldr	r3, [pc, #316]	; (8002598 <HAL_RCC_OscConfig+0x2b0>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe fda9 	bl	8000fb4 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002466:	f7fe fda5 	bl	8000fb4 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e16e      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	4b46      	ldr	r3, [pc, #280]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	4b43      	ldr	r3, [pc, #268]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4940      	ldr	r1, [pc, #256]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
 8002498:	e015      	b.n	80024c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249a:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCC_OscConfig+0x2b0>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fd88 	bl	8000fb4 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a8:	f7fe fd84 	bl	8000fb4 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e14d      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	4b36      	ldr	r3, [pc, #216]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d030      	beq.n	8002534 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d016      	beq.n	8002508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <HAL_RCC_OscConfig+0x2b4>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e0:	f7fe fd68 	bl	8000fb4 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e8:	f7fe fd64 	bl	8000fb4 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e12d      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	4b26      	ldr	r3, [pc, #152]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x200>
 8002506:	e015      	b.n	8002534 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002508:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCC_OscConfig+0x2b4>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7fe fd51 	bl	8000fb4 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002516:	f7fe fd4d 	bl	8000fb4 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e116      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800252a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80a0 	beq.w	8002682 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002546:	4b13      	ldr	r3, [pc, #76]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10f      	bne.n	8002572 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a0e      	ldr	r2, [pc, #56]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800256e:	2301      	movs	r3, #1
 8002570:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_OscConfig+0x2b8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d121      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_RCC_OscConfig+0x2b8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <HAL_RCC_OscConfig+0x2b8>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258a:	f7fe fd13 	bl	8000fb4 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	e011      	b.n	80025b6 <HAL_RCC_OscConfig+0x2ce>
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	42470000 	.word	0x42470000
 800259c:	42470e80 	.word	0x42470e80
 80025a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a4:	f7fe fd06 	bl	8000fb4 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e0cf      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b6:	4b6a      	ldr	r3, [pc, #424]	; (8002760 <HAL_RCC_OscConfig+0x478>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d106      	bne.n	80025d8 <HAL_RCC_OscConfig+0x2f0>
 80025ca:	4b66      	ldr	r3, [pc, #408]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	4a65      	ldr	r2, [pc, #404]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70
 80025d6:	e01c      	b.n	8002612 <HAL_RCC_OscConfig+0x32a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d10c      	bne.n	80025fa <HAL_RCC_OscConfig+0x312>
 80025e0:	4b60      	ldr	r3, [pc, #384]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	4a5f      	ldr	r2, [pc, #380]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025e6:	f043 0304 	orr.w	r3, r3, #4
 80025ea:	6713      	str	r3, [r2, #112]	; 0x70
 80025ec:	4b5d      	ldr	r3, [pc, #372]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a5c      	ldr	r2, [pc, #368]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	e00b      	b.n	8002612 <HAL_RCC_OscConfig+0x32a>
 80025fa:	4b5a      	ldr	r3, [pc, #360]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	4a59      	ldr	r2, [pc, #356]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	6713      	str	r3, [r2, #112]	; 0x70
 8002606:	4b57      	ldr	r3, [pc, #348]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	4a56      	ldr	r2, [pc, #344]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 800260c:	f023 0304 	bic.w	r3, r3, #4
 8002610:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d015      	beq.n	8002646 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7fe fccb 	bl	8000fb4 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7fe fcc7 	bl	8000fb4 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e08e      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002638:	4b4a      	ldr	r3, [pc, #296]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 800263a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0ee      	beq.n	8002622 <HAL_RCC_OscConfig+0x33a>
 8002644:	e014      	b.n	8002670 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002646:	f7fe fcb5 	bl	8000fb4 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264c:	e00a      	b.n	8002664 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe fcb1 	bl	8000fb4 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	; 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e078      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002664:	4b3f      	ldr	r3, [pc, #252]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1ee      	bne.n	800264e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d105      	bne.n	8002682 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a3a      	ldr	r2, [pc, #232]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 800267c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d064      	beq.n	8002754 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800268a:	4b36      	ldr	r3, [pc, #216]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b08      	cmp	r3, #8
 8002694:	d05c      	beq.n	8002750 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d141      	bne.n	8002722 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	4b32      	ldr	r3, [pc, #200]	; (8002768 <HAL_RCC_OscConfig+0x480>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe fc86 	bl	8000fb4 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe fc82 	bl	8000fb4 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e04b      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	4b29      	ldr	r3, [pc, #164]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	019b      	lsls	r3, r3, #6
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	3b01      	subs	r3, #1
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	061b      	lsls	r3, r3, #24
 80026ee:	491d      	ldr	r1, [pc, #116]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f4:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <HAL_RCC_OscConfig+0x480>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7fe fc5b 	bl	8000fb4 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002702:	f7fe fc57 	bl	8000fb4 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e020      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x41a>
 8002720:	e018      	b.n	8002754 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_RCC_OscConfig+0x480>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fc44 	bl	8000fb4 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe fc40 	bl	8000fb4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e009      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <HAL_RCC_OscConfig+0x47c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x448>
 800274e:	e001      	b.n	8002754 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40007000 	.word	0x40007000
 8002764:	40023800 	.word	0x40023800
 8002768:	42470060 	.word	0x42470060

0800276c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0ca      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002780:	4b67      	ldr	r3, [pc, #412]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d90c      	bls.n	80027a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b64      	ldr	r3, [pc, #400]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b62      	ldr	r3, [pc, #392]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0b6      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d020      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c0:	4b58      	ldr	r3, [pc, #352]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4a57      	ldr	r2, [pc, #348]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d8:	4b52      	ldr	r3, [pc, #328]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	4a51      	ldr	r2, [pc, #324]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e4:	4b4f      	ldr	r3, [pc, #316]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	494c      	ldr	r1, [pc, #304]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d044      	beq.n	800288c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	4b46      	ldr	r3, [pc, #280]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d119      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e07d      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d003      	beq.n	800282a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002826:	2b03      	cmp	r3, #3
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282a:	4b3e      	ldr	r3, [pc, #248]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e06d      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283a:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e065      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284a:	4b36      	ldr	r3, [pc, #216]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f023 0203 	bic.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4933      	ldr	r1, [pc, #204]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 8002858:	4313      	orrs	r3, r2
 800285a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800285c:	f7fe fbaa 	bl	8000fb4 <HAL_GetTick>
 8002860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	e00a      	b.n	800287a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002864:	f7fe fba6 	bl	8000fb4 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e04d      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287a:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 020c 	and.w	r2, r3, #12
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	429a      	cmp	r2, r3
 800288a:	d1eb      	bne.n	8002864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d20c      	bcs.n	80028b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <HAL_RCC_ClockConfig+0x1b4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e030      	b.n	8002916 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4915      	ldr	r1, [pc, #84]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d009      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	490d      	ldr	r1, [pc, #52]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028f2:	f000 f81d 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80028f6:	4601      	mov	r1, r0
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	4a09      	ldr	r2, [pc, #36]	; (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	5cd3      	ldrb	r3, [r2, r3]
 8002906:	fa21 f303 	lsr.w	r3, r1, r3
 800290a:	4a08      	ldr	r2, [pc, #32]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 800290c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800290e:	2000      	movs	r0, #0
 8002910:	f7fe fb0c 	bl	8000f2c <HAL_InitTick>

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023c00 	.word	0x40023c00
 8002924:	40023800 	.word	0x40023800
 8002928:	0800d284 	.word	0x0800d284
 800292c:	20000060 	.word	0x20000060

08002930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	2300      	movs	r3, #0
 8002940:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002946:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b04      	cmp	r3, #4
 8002950:	d007      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x32>
 8002952:	2b08      	cmp	r3, #8
 8002954:	d008      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x38>
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 808d 	bne.w	8002a76 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800295c:	4b4b      	ldr	r3, [pc, #300]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x15c>)
 800295e:	60bb      	str	r3, [r7, #8]
       break;
 8002960:	e08c      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002962:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x160>)
 8002964:	60bb      	str	r3, [r7, #8]
      break;
 8002966:	e089      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002968:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002970:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002972:	4b45      	ldr	r3, [pc, #276]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d023      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297e:	4b42      	ldr	r3, [pc, #264]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	099b      	lsrs	r3, r3, #6
 8002984:	f04f 0400 	mov.w	r4, #0
 8002988:	f240 11ff 	movw	r1, #511	; 0x1ff
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	ea03 0501 	and.w	r5, r3, r1
 8002994:	ea04 0602 	and.w	r6, r4, r2
 8002998:	4a3d      	ldr	r2, [pc, #244]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x160>)
 800299a:	fb02 f106 	mul.w	r1, r2, r6
 800299e:	2200      	movs	r2, #0
 80029a0:	fb02 f205 	mul.w	r2, r2, r5
 80029a4:	440a      	add	r2, r1
 80029a6:	493a      	ldr	r1, [pc, #232]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x160>)
 80029a8:	fba5 0101 	umull	r0, r1, r5, r1
 80029ac:	1853      	adds	r3, r2, r1
 80029ae:	4619      	mov	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f04f 0400 	mov.w	r4, #0
 80029b6:	461a      	mov	r2, r3
 80029b8:	4623      	mov	r3, r4
 80029ba:	f7fe f915 	bl	8000be8 <__aeabi_uldivmod>
 80029be:	4603      	mov	r3, r0
 80029c0:	460c      	mov	r4, r1
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	e049      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c6:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	f04f 0400 	mov.w	r4, #0
 80029d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	ea03 0501 	and.w	r5, r3, r1
 80029dc:	ea04 0602 	and.w	r6, r4, r2
 80029e0:	4629      	mov	r1, r5
 80029e2:	4632      	mov	r2, r6
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	f04f 0400 	mov.w	r4, #0
 80029ec:	0154      	lsls	r4, r2, #5
 80029ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029f2:	014b      	lsls	r3, r1, #5
 80029f4:	4619      	mov	r1, r3
 80029f6:	4622      	mov	r2, r4
 80029f8:	1b49      	subs	r1, r1, r5
 80029fa:	eb62 0206 	sbc.w	r2, r2, r6
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	0194      	lsls	r4, r2, #6
 8002a08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a0c:	018b      	lsls	r3, r1, #6
 8002a0e:	1a5b      	subs	r3, r3, r1
 8002a10:	eb64 0402 	sbc.w	r4, r4, r2
 8002a14:	f04f 0100 	mov.w	r1, #0
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	00e2      	lsls	r2, r4, #3
 8002a1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a22:	00d9      	lsls	r1, r3, #3
 8002a24:	460b      	mov	r3, r1
 8002a26:	4614      	mov	r4, r2
 8002a28:	195b      	adds	r3, r3, r5
 8002a2a:	eb44 0406 	adc.w	r4, r4, r6
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	02a2      	lsls	r2, r4, #10
 8002a38:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a3c:	0299      	lsls	r1, r3, #10
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4614      	mov	r4, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	4621      	mov	r1, r4
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f04f 0400 	mov.w	r4, #0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	f7fe f8ca 	bl	8000be8 <__aeabi_uldivmod>
 8002a54:	4603      	mov	r3, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	0c1b      	lsrs	r3, r3, #16
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	3301      	adds	r3, #1
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	60bb      	str	r3, [r7, #8]
      break;
 8002a74:	e002      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a78:	60bb      	str	r3, [r7, #8]
      break;
 8002a7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	00f42400 	.word	0x00f42400
 8002a90:	017d7840 	.word	0x017d7840

08002a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000060 	.word	0x20000060

08002aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ab0:	f7ff fff0 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4601      	mov	r1, r0
 8002ab6:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	0a9b      	lsrs	r3, r3, #10
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4a03      	ldr	r2, [pc, #12]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	0800d294 	.word	0x0800d294

08002ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ad8:	f7ff ffdc 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002adc:	4601      	mov	r1, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0b5b      	lsrs	r3, r3, #13
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4a03      	ldr	r2, [pc, #12]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	0800d294 	.word	0x0800d294

08002afc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e056      	b.n	8002bbc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d106      	bne.n	8002b2e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f008 fd7b 	bl	800b624 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b44:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	ea42 0103 	orr.w	r1, r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	0c1b      	lsrs	r3, r3, #16
 8002b8c:	f003 0104 	and.w	r1, r3, #4
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002baa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_SPI_Transmit+0x22>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e11e      	b.n	8002e24 <HAL_SPI_Transmit+0x260>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bee:	f7fe f9e1 	bl	8000fb4 <HAL_GetTick>
 8002bf2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d002      	beq.n	8002c0a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
 8002c06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c08:	e103      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <HAL_SPI_Transmit+0x52>
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c1a:	e0fa      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2203      	movs	r2, #3
 8002c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	88fa      	ldrh	r2, [r7, #6]
 8002c34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	88fa      	ldrh	r2, [r7, #6]
 8002c3a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c62:	d107      	bne.n	8002c74 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b40      	cmp	r3, #64	; 0x40
 8002c80:	d007      	beq.n	8002c92 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9a:	d14b      	bne.n	8002d34 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_SPI_Transmit+0xe6>
 8002ca4:	8afb      	ldrh	r3, [r7, #22]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d13e      	bne.n	8002d28 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	881a      	ldrh	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	1c9a      	adds	r2, r3, #2
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cce:	e02b      	b.n	8002d28 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d112      	bne.n	8002d04 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	881a      	ldrh	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	1c9a      	adds	r2, r3, #2
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d02:	e011      	b.n	8002d28 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d04:	f7fe f956 	bl	8000fb4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d803      	bhi.n	8002d1c <HAL_SPI_Transmit+0x158>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d102      	bne.n	8002d22 <HAL_SPI_Transmit+0x15e>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d102      	bne.n	8002d28 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d26:	e074      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1ce      	bne.n	8002cd0 <HAL_SPI_Transmit+0x10c>
 8002d32:	e04c      	b.n	8002dce <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_SPI_Transmit+0x17e>
 8002d3c:	8afb      	ldrh	r3, [r7, #22]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d140      	bne.n	8002dc4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	330c      	adds	r3, #12
 8002d4c:	7812      	ldrb	r2, [r2, #0]
 8002d4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d68:	e02c      	b.n	8002dc4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d113      	bne.n	8002da0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	330c      	adds	r3, #12
 8002d82:	7812      	ldrb	r2, [r2, #0]
 8002d84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d9e:	e011      	b.n	8002dc4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002da0:	f7fe f908 	bl	8000fb4 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d803      	bhi.n	8002db8 <HAL_SPI_Transmit+0x1f4>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db6:	d102      	bne.n	8002dbe <HAL_SPI_Transmit+0x1fa>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dc2:	e026      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1cd      	bne.n	8002d6a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	6839      	ldr	r1, [r7, #0]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fba4 	bl	8003520 <SPI_EndRxTxTransaction>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dec:	2300      	movs	r3, #0
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	77fb      	strb	r3, [r7, #31]
 8002e0e:	e000      	b.n	8002e12 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e22:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e48:	d112      	bne.n	8002e70 <HAL_SPI_Receive+0x44>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10e      	bne.n	8002e70 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2204      	movs	r2, #4
 8002e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e5a:	88fa      	ldrh	r2, [r7, #6]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f8e9 	bl	800303e <HAL_SPI_TransmitReceive>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	e0e2      	b.n	8003036 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_SPI_Receive+0x52>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e0db      	b.n	8003036 <HAL_SPI_Receive+0x20a>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e86:	f7fe f895 	bl	8000fb4 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d002      	beq.n	8002e9e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e9c:	e0c2      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_SPI_Receive+0x7e>
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d102      	bne.n	8002eb0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eae:	e0b9      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef6:	d107      	bne.n	8002f08 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f06:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b40      	cmp	r3, #64	; 0x40
 8002f14:	d007      	beq.n	8002f26 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d162      	bne.n	8002ff4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f2e:	e02e      	b.n	8002f8e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d115      	bne.n	8002f6a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f103 020c 	add.w	r2, r3, #12
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	7812      	ldrb	r2, [r2, #0]
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f68:	e011      	b.n	8002f8e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f6a:	f7fe f823 	bl	8000fb4 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d803      	bhi.n	8002f82 <HAL_SPI_Receive+0x156>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d102      	bne.n	8002f88 <HAL_SPI_Receive+0x15c>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f8c:	e04a      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1cb      	bne.n	8002f30 <HAL_SPI_Receive+0x104>
 8002f98:	e031      	b.n	8002ffe <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d113      	bne.n	8002fd0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	1c9a      	adds	r2, r3, #2
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fce:	e011      	b.n	8002ff4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd0:	f7fd fff0 	bl	8000fb4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d803      	bhi.n	8002fe8 <HAL_SPI_Receive+0x1bc>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d102      	bne.n	8002fee <HAL_SPI_Receive+0x1c2>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ff2:	e017      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1cd      	bne.n	8002f9a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	6839      	ldr	r1, [r7, #0]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 fa27 	bl	8003456 <SPI_EndRxTransaction>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	75fb      	strb	r3, [r7, #23]
 8003020:	e000      	b.n	8003024 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003022:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003034:	7dfb      	ldrb	r3, [r7, #23]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b08c      	sub	sp, #48	; 0x30
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800304c:	2301      	movs	r3, #1
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_SPI_TransmitReceive+0x26>
 8003060:	2302      	movs	r3, #2
 8003062:	e18a      	b.n	800337a <HAL_SPI_TransmitReceive+0x33c>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800306c:	f7fd ffa2 	bl	8000fb4 <HAL_GetTick>
 8003070:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003078:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003082:	887b      	ldrh	r3, [r7, #2]
 8003084:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003086:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800308a:	2b01      	cmp	r3, #1
 800308c:	d00f      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x70>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003094:	d107      	bne.n	80030a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <HAL_SPI_TransmitReceive+0x68>
 800309e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d003      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
 80030a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030ac:	e15b      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_SPI_TransmitReceive+0x82>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_SPI_TransmitReceive+0x82>
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030c6:	e14e      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d003      	beq.n	80030dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2205      	movs	r2, #5
 80030d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	887a      	ldrh	r2, [r7, #2]
 80030ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	887a      	ldrh	r2, [r7, #2]
 80030f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	887a      	ldrh	r2, [r7, #2]
 80030fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	887a      	ldrh	r2, [r7, #2]
 8003104:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d007      	beq.n	8003130 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800312e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003138:	d178      	bne.n	800322c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_SPI_TransmitReceive+0x10a>
 8003142:	8b7b      	ldrh	r3, [r7, #26]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d166      	bne.n	8003216 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	881a      	ldrh	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	1c9a      	adds	r2, r3, #2
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800316c:	e053      	b.n	8003216 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b02      	cmp	r3, #2
 800317a:	d11b      	bne.n	80031b4 <HAL_SPI_TransmitReceive+0x176>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d016      	beq.n	80031b4 <HAL_SPI_TransmitReceive+0x176>
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d113      	bne.n	80031b4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	881a      	ldrh	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	1c9a      	adds	r2, r3, #2
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d119      	bne.n	80031f6 <HAL_SPI_TransmitReceive+0x1b8>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d014      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	b292      	uxth	r2, r2
 80031d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	1c9a      	adds	r2, r3, #2
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031f2:	2301      	movs	r3, #1
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031f6:	f7fd fedd 	bl	8000fb4 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003202:	429a      	cmp	r2, r3
 8003204:	d807      	bhi.n	8003216 <HAL_SPI_TransmitReceive+0x1d8>
 8003206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d003      	beq.n	8003216 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003214:	e0a7      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1a6      	bne.n	800316e <HAL_SPI_TransmitReceive+0x130>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1a1      	bne.n	800316e <HAL_SPI_TransmitReceive+0x130>
 800322a:	e07c      	b.n	8003326 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_SPI_TransmitReceive+0x1fc>
 8003234:	8b7b      	ldrh	r3, [r7, #26]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d16b      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	330c      	adds	r3, #12
 8003244:	7812      	ldrb	r2, [r2, #0]
 8003246:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003260:	e057      	b.n	8003312 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b02      	cmp	r3, #2
 800326e:	d11c      	bne.n	80032aa <HAL_SPI_TransmitReceive+0x26c>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d017      	beq.n	80032aa <HAL_SPI_TransmitReceive+0x26c>
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	2b01      	cmp	r3, #1
 800327e:	d114      	bne.n	80032aa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	330c      	adds	r3, #12
 800328a:	7812      	ldrb	r2, [r2, #0]
 800328c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d119      	bne.n	80032ec <HAL_SPI_TransmitReceive+0x2ae>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d014      	beq.n	80032ec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032e8:	2301      	movs	r3, #1
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032ec:	f7fd fe62 	bl	8000fb4 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d803      	bhi.n	8003304 <HAL_SPI_TransmitReceive+0x2c6>
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d102      	bne.n	800330a <HAL_SPI_TransmitReceive+0x2cc>
 8003304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003310:	e029      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1a2      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x224>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d19d      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003328:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f8f8 	bl	8003520 <SPI_EndRxTxTransaction>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003342:	e010      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10b      	bne.n	8003364 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	e000      	b.n	8003366 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003364:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003376:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800337a:	4618      	mov	r0, r3
 800337c:	3730      	adds	r7, #48	; 0x30
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	4613      	mov	r3, r2
 8003390:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003392:	e04c      	b.n	800342e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339a:	d048      	beq.n	800342e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800339c:	f7fd fe0a 	bl	8000fb4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d902      	bls.n	80033b2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d13d      	bne.n	800342e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ca:	d111      	bne.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d4:	d004      	beq.n	80033e0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033de:	d107      	bne.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f8:	d10f      	bne.n	800341a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003418:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e00f      	b.n	800344e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4013      	ands	r3, r2
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	429a      	cmp	r2, r3
 800343c:	bf0c      	ite	eq
 800343e:	2301      	moveq	r3, #1
 8003440:	2300      	movne	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	429a      	cmp	r2, r3
 800344a:	d1a3      	bne.n	8003394 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af02      	add	r7, sp, #8
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800346a:	d111      	bne.n	8003490 <SPI_EndRxTransaction+0x3a>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003474:	d004      	beq.n	8003480 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347e:	d107      	bne.n	8003490 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003498:	d12a      	bne.n	80034f0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a2:	d012      	beq.n	80034ca <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2180      	movs	r1, #128	; 0x80
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7ff ff67 	bl	8003382 <SPI_WaitFlagStateUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d02d      	beq.n	8003516 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	f043 0220 	orr.w	r2, r3, #32
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e026      	b.n	8003518 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2101      	movs	r1, #1
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff ff54 	bl	8003382 <SPI_WaitFlagStateUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01a      	beq.n	8003516 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e013      	b.n	8003518 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2200      	movs	r2, #0
 80034f8:	2101      	movs	r1, #1
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7ff ff41 	bl	8003382 <SPI_WaitFlagStateUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350a:	f043 0220 	orr.w	r2, r3, #32
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e000      	b.n	8003518 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800352c:	4b1b      	ldr	r3, [pc, #108]	; (800359c <SPI_EndRxTxTransaction+0x7c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <SPI_EndRxTxTransaction+0x80>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	0d5b      	lsrs	r3, r3, #21
 8003538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800353c:	fb02 f303 	mul.w	r3, r2, r3
 8003540:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800354a:	d112      	bne.n	8003572 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2200      	movs	r2, #0
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7ff ff13 	bl	8003382 <SPI_WaitFlagStateUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003566:	f043 0220 	orr.w	r2, r3, #32
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e00f      	b.n	8003592 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3b01      	subs	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003588:	2b80      	cmp	r3, #128	; 0x80
 800358a:	d0f2      	beq.n	8003572 <SPI_EndRxTxTransaction+0x52>
 800358c:	e000      	b.n	8003590 <SPI_EndRxTxTransaction+0x70>
        break;
 800358e:	bf00      	nop
  }

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000060 	.word	0x20000060
 80035a0:	165e9f81 	.word	0x165e9f81

080035a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e01d      	b.n	80035f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f008 f872 	bl	800b6b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	4619      	mov	r1, r3
 80035e2:	4610      	mov	r0, r2
 80035e4:	f000 fc18 	bl	8003e18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b085      	sub	sp, #20
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0201 	orr.w	r2, r2, #1
 8003610:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b06      	cmp	r3, #6
 8003622:	d007      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e01d      	b.n	8003690 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d106      	bne.n	800366e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f815 	bl	8003698 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2202      	movs	r2, #2
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f000 fbc9 	bl	8003e18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2201      	movs	r2, #1
 80036bc:	6839      	ldr	r1, [r7, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fe94 	bl	80043ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a15      	ldr	r2, [pc, #84]	; (8003720 <HAL_TIM_PWM_Start+0x74>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d004      	beq.n	80036d8 <HAL_TIM_PWM_Start+0x2c>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a14      	ldr	r2, [pc, #80]	; (8003724 <HAL_TIM_PWM_Start+0x78>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d101      	bne.n	80036dc <HAL_TIM_PWM_Start+0x30>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <HAL_TIM_PWM_Start+0x32>
 80036dc:	2300      	movs	r3, #0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b06      	cmp	r3, #6
 8003702:	d007      	beq.n	8003714 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40010000 	.word	0x40010000
 8003724:	40010400 	.word	0x40010400

08003728 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e083      	b.n	8003844 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d106      	bne.n	8003756 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f008 f801 	bl	800b758 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2202      	movs	r2, #2
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800376c:	f023 0307 	bic.w	r3, r3, #7
 8003770:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3304      	adds	r3, #4
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f000 fb4b 	bl	8003e18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037aa:	f023 0303 	bic.w	r3, r3, #3
 80037ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	021b      	lsls	r3, r3, #8
 80037ba:	4313      	orrs	r3, r2
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037c8:	f023 030c 	bic.w	r3, r3, #12
 80037cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	021b      	lsls	r3, r3, #8
 80037e4:	4313      	orrs	r3, r2
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	011a      	lsls	r2, r3, #4
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	031b      	lsls	r3, r3, #12
 80037f8:	4313      	orrs	r3, r2
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003806:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800380e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	4313      	orrs	r3, r2
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_TIM_Encoder_Start+0x16>
 800385c:	2b04      	cmp	r3, #4
 800385e:	d008      	beq.n	8003872 <HAL_TIM_Encoder_Start+0x26>
 8003860:	e00f      	b.n	8003882 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2201      	movs	r2, #1
 8003868:	2100      	movs	r1, #0
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fdbe 	bl	80043ec <TIM_CCxChannelCmd>
      break;
 8003870:	e016      	b.n	80038a0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2201      	movs	r2, #1
 8003878:	2104      	movs	r1, #4
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fdb6 	bl	80043ec <TIM_CCxChannelCmd>
      break;
 8003880:	e00e      	b.n	80038a0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2201      	movs	r2, #1
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fdae 	bl	80043ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2201      	movs	r2, #1
 8003896:	2104      	movs	r1, #4
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fda7 	bl	80043ec <TIM_CCxChannelCmd>
      break;
 800389e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d122      	bne.n	8003916 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d11b      	bne.n	8003916 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f06f 0202 	mvn.w	r2, #2
 80038e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fa6c 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003902:	e005      	b.n	8003910 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fa5e 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fa6f 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b04      	cmp	r3, #4
 8003922:	d122      	bne.n	800396a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b04      	cmp	r3, #4
 8003930:	d11b      	bne.n	800396a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f06f 0204 	mvn.w	r2, #4
 800393a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fa42 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003956:	e005      	b.n	8003964 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fa34 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fa45 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b08      	cmp	r3, #8
 8003976:	d122      	bne.n	80039be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b08      	cmp	r3, #8
 8003984:	d11b      	bne.n	80039be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f06f 0208 	mvn.w	r2, #8
 800398e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2204      	movs	r2, #4
 8003994:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 fa18 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 80039aa:	e005      	b.n	80039b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fa0a 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fa1b 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b10      	cmp	r3, #16
 80039ca:	d122      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	d11b      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f06f 0210 	mvn.w	r2, #16
 80039e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2208      	movs	r2, #8
 80039e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f9ee 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 80039fe:	e005      	b.n	8003a0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f9e0 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f9f1 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d10e      	bne.n	8003a3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d107      	bne.n	8003a3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f06f 0201 	mvn.w	r2, #1
 8003a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f004 f881 	bl	8007b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a48:	2b80      	cmp	r3, #128	; 0x80
 8003a4a:	d10e      	bne.n	8003a6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a56:	2b80      	cmp	r3, #128	; 0x80
 8003a58:	d107      	bne.n	8003a6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fd35 	bl	80044d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a74:	2b40      	cmp	r3, #64	; 0x40
 8003a76:	d10e      	bne.n	8003a96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d107      	bne.n	8003a96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f9b6 	bl	8003e02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d10e      	bne.n	8003ac2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d107      	bne.n	8003ac2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f06f 0220 	mvn.w	r2, #32
 8003aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fcff 	bl	80044c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e0b4      	b.n	8003c50 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2202      	movs	r2, #2
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b0c      	cmp	r3, #12
 8003afa:	f200 809f 	bhi.w	8003c3c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003afe:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b04:	08003b39 	.word	0x08003b39
 8003b08:	08003c3d 	.word	0x08003c3d
 8003b0c:	08003c3d 	.word	0x08003c3d
 8003b10:	08003c3d 	.word	0x08003c3d
 8003b14:	08003b79 	.word	0x08003b79
 8003b18:	08003c3d 	.word	0x08003c3d
 8003b1c:	08003c3d 	.word	0x08003c3d
 8003b20:	08003c3d 	.word	0x08003c3d
 8003b24:	08003bbb 	.word	0x08003bbb
 8003b28:	08003c3d 	.word	0x08003c3d
 8003b2c:	08003c3d 	.word	0x08003c3d
 8003b30:	08003c3d 	.word	0x08003c3d
 8003b34:	08003bfb 	.word	0x08003bfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fa0a 	bl	8003f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0208 	orr.w	r2, r2, #8
 8003b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0204 	bic.w	r2, r2, #4
 8003b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6999      	ldr	r1, [r3, #24]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	619a      	str	r2, [r3, #24]
      break;
 8003b76:	e062      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fa5a 	bl	8004038 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6999      	ldr	r1, [r3, #24]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	021a      	lsls	r2, r3, #8
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	619a      	str	r2, [r3, #24]
      break;
 8003bb8:	e041      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 faaf 	bl	8004124 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69da      	ldr	r2, [r3, #28]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0208 	orr.w	r2, r2, #8
 8003bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0204 	bic.w	r2, r2, #4
 8003be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69d9      	ldr	r1, [r3, #28]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	61da      	str	r2, [r3, #28]
      break;
 8003bf8:	e021      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 fb03 	bl	800420c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69d9      	ldr	r1, [r3, #28]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	021a      	lsls	r2, r3, #8
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	61da      	str	r2, [r3, #28]
      break;
 8003c3a:	e000      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003c3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_TIM_ConfigClockSource+0x18>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e0a6      	b.n	8003dbe <HAL_TIM_ConfigClockSource+0x166>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b40      	cmp	r3, #64	; 0x40
 8003ca6:	d067      	beq.n	8003d78 <HAL_TIM_ConfigClockSource+0x120>
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d80b      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x6c>
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	d073      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x140>
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d802      	bhi.n	8003cba <HAL_TIM_ConfigClockSource+0x62>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d06f      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003cb8:	e078      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	d06c      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x140>
 8003cbe:	2b30      	cmp	r3, #48	; 0x30
 8003cc0:	d06a      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003cc2:	e073      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cc4:	2b70      	cmp	r3, #112	; 0x70
 8003cc6:	d00d      	beq.n	8003ce4 <HAL_TIM_ConfigClockSource+0x8c>
 8003cc8:	2b70      	cmp	r3, #112	; 0x70
 8003cca:	d804      	bhi.n	8003cd6 <HAL_TIM_ConfigClockSource+0x7e>
 8003ccc:	2b50      	cmp	r3, #80	; 0x50
 8003cce:	d033      	beq.n	8003d38 <HAL_TIM_ConfigClockSource+0xe0>
 8003cd0:	2b60      	cmp	r3, #96	; 0x60
 8003cd2:	d041      	beq.n	8003d58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003cd4:	e06a      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cda:	d066      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x152>
 8003cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce0:	d017      	beq.n	8003d12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003ce2:	e063      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	6899      	ldr	r1, [r3, #8]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f000 fb5a 	bl	80043ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	609a      	str	r2, [r3, #8]
      break;
 8003d10:	e04c      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6899      	ldr	r1, [r3, #8]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f000 fb43 	bl	80043ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d34:	609a      	str	r2, [r3, #8]
      break;
 8003d36:	e039      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6859      	ldr	r1, [r3, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	461a      	mov	r2, r3
 8003d46:	f000 fab7 	bl	80042b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2150      	movs	r1, #80	; 0x50
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fb10 	bl	8004376 <TIM_ITRx_SetConfig>
      break;
 8003d56:	e029      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	461a      	mov	r2, r3
 8003d66:	f000 fad6 	bl	8004316 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2160      	movs	r1, #96	; 0x60
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fb00 	bl	8004376 <TIM_ITRx_SetConfig>
      break;
 8003d76:	e019      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	6859      	ldr	r1, [r3, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	461a      	mov	r2, r3
 8003d86:	f000 fa97 	bl	80042b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2140      	movs	r1, #64	; 0x40
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 faf0 	bl	8004376 <TIM_ITRx_SetConfig>
      break;
 8003d96:	e009      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4619      	mov	r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	f000 fae7 	bl	8004376 <TIM_ITRx_SetConfig>
      break;
 8003da8:	e000      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
	...

08003e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a40      	ldr	r2, [pc, #256]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e36:	d00f      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a3d      	ldr	r2, [pc, #244]	; (8003f30 <TIM_Base_SetConfig+0x118>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00b      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3c      	ldr	r2, [pc, #240]	; (8003f34 <TIM_Base_SetConfig+0x11c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d007      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3b      	ldr	r2, [pc, #236]	; (8003f38 <TIM_Base_SetConfig+0x120>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3a      	ldr	r2, [pc, #232]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d108      	bne.n	8003e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2f      	ldr	r2, [pc, #188]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d02b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d027      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2c      	ldr	r2, [pc, #176]	; (8003f30 <TIM_Base_SetConfig+0x118>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d023      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2b      	ldr	r2, [pc, #172]	; (8003f34 <TIM_Base_SetConfig+0x11c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01f      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a2a      	ldr	r2, [pc, #168]	; (8003f38 <TIM_Base_SetConfig+0x120>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a29      	ldr	r2, [pc, #164]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d017      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a28      	ldr	r2, [pc, #160]	; (8003f40 <TIM_Base_SetConfig+0x128>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a27      	ldr	r2, [pc, #156]	; (8003f44 <TIM_Base_SetConfig+0x12c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00f      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a26      	ldr	r2, [pc, #152]	; (8003f48 <TIM_Base_SetConfig+0x130>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a25      	ldr	r2, [pc, #148]	; (8003f4c <TIM_Base_SetConfig+0x134>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d007      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a24      	ldr	r2, [pc, #144]	; (8003f50 <TIM_Base_SetConfig+0x138>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a23      	ldr	r2, [pc, #140]	; (8003f54 <TIM_Base_SetConfig+0x13c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d108      	bne.n	8003edc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_Base_SetConfig+0xf8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a0c      	ldr	r2, [pc, #48]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d103      	bne.n	8003f18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	615a      	str	r2, [r3, #20]
}
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40000400 	.word	0x40000400
 8003f34:	40000800 	.word	0x40000800
 8003f38:	40000c00 	.word	0x40000c00
 8003f3c:	40010400 	.word	0x40010400
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800
 8003f4c:	40001800 	.word	0x40001800
 8003f50:	40001c00 	.word	0x40001c00
 8003f54:	40002000 	.word	0x40002000

08003f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f023 0201 	bic.w	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f023 0302 	bic.w	r3, r3, #2
 8003fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a20      	ldr	r2, [pc, #128]	; (8004030 <TIM_OC1_SetConfig+0xd8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d003      	beq.n	8003fbc <TIM_OC1_SetConfig+0x64>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a1f      	ldr	r2, [pc, #124]	; (8004034 <TIM_OC1_SetConfig+0xdc>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d10c      	bne.n	8003fd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0308 	bic.w	r3, r3, #8
 8003fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f023 0304 	bic.w	r3, r3, #4
 8003fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a15      	ldr	r2, [pc, #84]	; (8004030 <TIM_OC1_SetConfig+0xd8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d003      	beq.n	8003fe6 <TIM_OC1_SetConfig+0x8e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a14      	ldr	r2, [pc, #80]	; (8004034 <TIM_OC1_SetConfig+0xdc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d111      	bne.n	800400a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	621a      	str	r2, [r3, #32]
}
 8004024:	bf00      	nop
 8004026:	371c      	adds	r7, #28
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40010000 	.word	0x40010000
 8004034:	40010400 	.word	0x40010400

08004038 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	f023 0210 	bic.w	r2, r3, #16
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	021b      	lsls	r3, r3, #8
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f023 0320 	bic.w	r3, r3, #32
 8004082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a22      	ldr	r2, [pc, #136]	; (800411c <TIM_OC2_SetConfig+0xe4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d003      	beq.n	80040a0 <TIM_OC2_SetConfig+0x68>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a21      	ldr	r2, [pc, #132]	; (8004120 <TIM_OC2_SetConfig+0xe8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d10d      	bne.n	80040bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a17      	ldr	r2, [pc, #92]	; (800411c <TIM_OC2_SetConfig+0xe4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d003      	beq.n	80040cc <TIM_OC2_SetConfig+0x94>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a16      	ldr	r2, [pc, #88]	; (8004120 <TIM_OC2_SetConfig+0xe8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d113      	bne.n	80040f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	621a      	str	r2, [r3, #32]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40010000 	.word	0x40010000
 8004120:	40010400 	.word	0x40010400

08004124 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0303 	bic.w	r3, r3, #3
 800415a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800416c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a21      	ldr	r2, [pc, #132]	; (8004204 <TIM_OC3_SetConfig+0xe0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d003      	beq.n	800418a <TIM_OC3_SetConfig+0x66>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a20      	ldr	r2, [pc, #128]	; (8004208 <TIM_OC3_SetConfig+0xe4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d10d      	bne.n	80041a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	021b      	lsls	r3, r3, #8
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a16      	ldr	r2, [pc, #88]	; (8004204 <TIM_OC3_SetConfig+0xe0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d003      	beq.n	80041b6 <TIM_OC3_SetConfig+0x92>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a15      	ldr	r2, [pc, #84]	; (8004208 <TIM_OC3_SetConfig+0xe4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d113      	bne.n	80041de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	621a      	str	r2, [r3, #32]
}
 80041f8:	bf00      	nop
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	40010000 	.word	0x40010000
 8004208:	40010400 	.word	0x40010400

0800420c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	031b      	lsls	r3, r3, #12
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a12      	ldr	r2, [pc, #72]	; (80042b0 <TIM_OC4_SetConfig+0xa4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d003      	beq.n	8004274 <TIM_OC4_SetConfig+0x68>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a11      	ldr	r2, [pc, #68]	; (80042b4 <TIM_OC4_SetConfig+0xa8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d109      	bne.n	8004288 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800427a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	019b      	lsls	r3, r3, #6
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	621a      	str	r2, [r3, #32]
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40010000 	.word	0x40010000
 80042b4:	40010400 	.word	0x40010400

080042b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f023 0201 	bic.w	r2, r3, #1
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f023 030a 	bic.w	r3, r3, #10
 80042f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004316:	b480      	push	{r7}
 8004318:	b087      	sub	sp, #28
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f023 0210 	bic.w	r2, r3, #16
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	031b      	lsls	r3, r3, #12
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004352:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	621a      	str	r2, [r3, #32]
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004376:	b480      	push	{r7}
 8004378:	b085      	sub	sp, #20
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	f043 0307 	orr.w	r3, r3, #7
 8004398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	609a      	str	r2, [r3, #8]
}
 80043a0:	bf00      	nop
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	021a      	lsls	r2, r3, #8
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	609a      	str	r2, [r3, #8]
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 031f 	and.w	r3, r3, #31
 80043fe:	2201      	movs	r2, #1
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a1a      	ldr	r2, [r3, #32]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	43db      	mvns	r3, r3
 800440e:	401a      	ands	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a1a      	ldr	r2, [r3, #32]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	fa01 f303 	lsl.w	r3, r1, r3
 8004424:	431a      	orrs	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004436:	b480      	push	{r7}
 8004438:	b085      	sub	sp, #20
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800444a:	2302      	movs	r3, #2
 800444c:	e032      	b.n	80044b4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004474:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004486:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	4313      	orrs	r3, r2
 8004490:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e03f      	b.n	800457a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f007 fa1e 	bl	800b950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2224      	movs	r2, #36	; 0x24
 8004518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800452a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f90b 	bl	8004748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004540:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004550:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004560:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b088      	sub	sp, #32
 8004586:	af02      	add	r7, sp, #8
 8004588:	60f8      	str	r0, [r7, #12]
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	603b      	str	r3, [r7, #0]
 800458e:	4613      	mov	r3, r2
 8004590:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b20      	cmp	r3, #32
 80045a0:	f040 8083 	bne.w	80046aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <HAL_UART_Transmit+0x2e>
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e07b      	b.n	80046ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <HAL_UART_Transmit+0x40>
 80045be:	2302      	movs	r3, #2
 80045c0:	e074      	b.n	80046ac <HAL_UART_Transmit+0x12a>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2221      	movs	r2, #33	; 0x21
 80045d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80045d8:	f7fc fcec 	bl	8000fb4 <HAL_GetTick>
 80045dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	88fa      	ldrh	r2, [r7, #6]
 80045e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	88fa      	ldrh	r2, [r7, #6]
 80045e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045ea:	e042      	b.n	8004672 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004602:	d122      	bne.n	800464a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2200      	movs	r2, #0
 800460c:	2180      	movs	r1, #128	; 0x80
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f850 	bl	80046b4 <UART_WaitOnFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e046      	b.n	80046ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004630:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d103      	bne.n	8004642 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	3302      	adds	r3, #2
 800463e:	60bb      	str	r3, [r7, #8]
 8004640:	e017      	b.n	8004672 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	3301      	adds	r3, #1
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	e013      	b.n	8004672 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2200      	movs	r2, #0
 8004652:	2180      	movs	r1, #128	; 0x80
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f82d 	bl	80046b4 <UART_WaitOnFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e023      	b.n	80046ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	60ba      	str	r2, [r7, #8]
 800466a:	781a      	ldrb	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1b7      	bne.n	80045ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2200      	movs	r2, #0
 8004684:	2140      	movs	r1, #64	; 0x40
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 f814 	bl	80046b4 <UART_WaitOnFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e00a      	b.n	80046ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	e000      	b.n	80046ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80046aa:	2302      	movs	r3, #2
  }
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	4613      	mov	r3, r2
 80046c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c4:	e02c      	b.n	8004720 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046cc:	d028      	beq.n	8004720 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80046d4:	f7fc fc6e 	bl	8000fb4 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d21d      	bcs.n	8004720 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695a      	ldr	r2, [r3, #20]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e00f      	b.n	8004740 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4013      	ands	r3, r2
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	429a      	cmp	r2, r3
 800472e:	bf0c      	ite	eq
 8004730:	2301      	moveq	r3, #1
 8004732:	2300      	movne	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	461a      	mov	r2, r3
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	429a      	cmp	r2, r3
 800473c:	d0c3      	beq.n	80046c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004748:	b5b0      	push	{r4, r5, r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004788:	f023 030c 	bic.w	r3, r3, #12
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	68f9      	ldr	r1, [r7, #12]
 8004792:	430b      	orrs	r3, r1
 8004794:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699a      	ldr	r2, [r3, #24]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b4:	f040 80e4 	bne.w	8004980 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4aab      	ldr	r2, [pc, #684]	; (8004a6c <UART_SetConfig+0x324>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <UART_SetConfig+0x84>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4aaa      	ldr	r2, [pc, #680]	; (8004a70 <UART_SetConfig+0x328>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d16c      	bne.n	80048a6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80047cc:	f7fe f982 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 80047d0:	4602      	mov	r2, r0
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	009a      	lsls	r2, r3, #2
 80047da:	441a      	add	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e6:	4aa3      	ldr	r2, [pc, #652]	; (8004a74 <UART_SetConfig+0x32c>)
 80047e8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	011c      	lsls	r4, r3, #4
 80047f0:	f7fe f970 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	009a      	lsls	r2, r3, #2
 80047fe:	441a      	add	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	fbb2 f5f3 	udiv	r5, r2, r3
 800480a:	f7fe f963 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 800480e:	4602      	mov	r2, r0
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	009a      	lsls	r2, r3, #2
 8004818:	441a      	add	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	4a93      	ldr	r2, [pc, #588]	; (8004a74 <UART_SetConfig+0x32c>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	2264      	movs	r2, #100	; 0x64
 800482e:	fb02 f303 	mul.w	r3, r2, r3
 8004832:	1aeb      	subs	r3, r5, r3
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	3332      	adds	r3, #50	; 0x32
 8004838:	4a8e      	ldr	r2, [pc, #568]	; (8004a74 <UART_SetConfig+0x32c>)
 800483a:	fba2 2303 	umull	r2, r3, r2, r3
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004846:	441c      	add	r4, r3
 8004848:	f7fe f944 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 800484c:	4602      	mov	r2, r0
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	009a      	lsls	r2, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004862:	f7fe f937 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004866:	4602      	mov	r2, r0
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	009a      	lsls	r2, r3, #2
 8004870:	441a      	add	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	fbb2 f3f3 	udiv	r3, r2, r3
 800487c:	4a7d      	ldr	r2, [pc, #500]	; (8004a74 <UART_SetConfig+0x32c>)
 800487e:	fba2 2303 	umull	r2, r3, r2, r3
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	2264      	movs	r2, #100	; 0x64
 8004886:	fb02 f303 	mul.w	r3, r2, r3
 800488a:	1aeb      	subs	r3, r5, r3
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	3332      	adds	r3, #50	; 0x32
 8004890:	4a78      	ldr	r2, [pc, #480]	; (8004a74 <UART_SetConfig+0x32c>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	f003 0207 	and.w	r2, r3, #7
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4422      	add	r2, r4
 80048a2:	609a      	str	r2, [r3, #8]
 80048a4:	e154      	b.n	8004b50 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80048a6:	f7fe f901 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 80048aa:	4602      	mov	r2, r0
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009a      	lsls	r2, r3, #2
 80048b4:	441a      	add	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c0:	4a6c      	ldr	r2, [pc, #432]	; (8004a74 <UART_SetConfig+0x32c>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	011c      	lsls	r4, r3, #4
 80048ca:	f7fe f8ef 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 80048ce:	4602      	mov	r2, r0
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	009a      	lsls	r2, r3, #2
 80048d8:	441a      	add	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80048e4:	f7fe f8e2 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 80048e8:	4602      	mov	r2, r0
 80048ea:	4613      	mov	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	009a      	lsls	r2, r3, #2
 80048f2:	441a      	add	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fe:	4a5d      	ldr	r2, [pc, #372]	; (8004a74 <UART_SetConfig+0x32c>)
 8004900:	fba2 2303 	umull	r2, r3, r2, r3
 8004904:	095b      	lsrs	r3, r3, #5
 8004906:	2264      	movs	r2, #100	; 0x64
 8004908:	fb02 f303 	mul.w	r3, r2, r3
 800490c:	1aeb      	subs	r3, r5, r3
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	3332      	adds	r3, #50	; 0x32
 8004912:	4a58      	ldr	r2, [pc, #352]	; (8004a74 <UART_SetConfig+0x32c>)
 8004914:	fba2 2303 	umull	r2, r3, r2, r3
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004920:	441c      	add	r4, r3
 8004922:	f7fe f8c3 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004926:	4602      	mov	r2, r0
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	009a      	lsls	r2, r3, #2
 8004930:	441a      	add	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	fbb2 f5f3 	udiv	r5, r2, r3
 800493c:	f7fe f8b6 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004940:	4602      	mov	r2, r0
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	009a      	lsls	r2, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	fbb2 f3f3 	udiv	r3, r2, r3
 8004956:	4a47      	ldr	r2, [pc, #284]	; (8004a74 <UART_SetConfig+0x32c>)
 8004958:	fba2 2303 	umull	r2, r3, r2, r3
 800495c:	095b      	lsrs	r3, r3, #5
 800495e:	2264      	movs	r2, #100	; 0x64
 8004960:	fb02 f303 	mul.w	r3, r2, r3
 8004964:	1aeb      	subs	r3, r5, r3
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	3332      	adds	r3, #50	; 0x32
 800496a:	4a42      	ldr	r2, [pc, #264]	; (8004a74 <UART_SetConfig+0x32c>)
 800496c:	fba2 2303 	umull	r2, r3, r2, r3
 8004970:	095b      	lsrs	r3, r3, #5
 8004972:	f003 0207 	and.w	r2, r3, #7
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4422      	add	r2, r4
 800497c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800497e:	e0e7      	b.n	8004b50 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a39      	ldr	r2, [pc, #228]	; (8004a6c <UART_SetConfig+0x324>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d004      	beq.n	8004994 <UART_SetConfig+0x24c>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a38      	ldr	r2, [pc, #224]	; (8004a70 <UART_SetConfig+0x328>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d171      	bne.n	8004a78 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004994:	f7fe f89e 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004998:	4602      	mov	r2, r0
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	009a      	lsls	r2, r3, #2
 80049a2:	441a      	add	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ae:	4a31      	ldr	r2, [pc, #196]	; (8004a74 <UART_SetConfig+0x32c>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	011c      	lsls	r4, r3, #4
 80049b8:	f7fe f88c 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 80049bc:	4602      	mov	r2, r0
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	009a      	lsls	r2, r3, #2
 80049c6:	441a      	add	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	fbb2 f5f3 	udiv	r5, r2, r3
 80049d2:	f7fe f87f 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 80049d6:	4602      	mov	r2, r0
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	009a      	lsls	r2, r3, #2
 80049e0:	441a      	add	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	4a21      	ldr	r2, [pc, #132]	; (8004a74 <UART_SetConfig+0x32c>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	2264      	movs	r2, #100	; 0x64
 80049f6:	fb02 f303 	mul.w	r3, r2, r3
 80049fa:	1aeb      	subs	r3, r5, r3
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	3332      	adds	r3, #50	; 0x32
 8004a00:	4a1c      	ldr	r2, [pc, #112]	; (8004a74 <UART_SetConfig+0x32c>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a0c:	441c      	add	r4, r3
 8004a0e:	f7fe f861 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004a12:	4602      	mov	r2, r0
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	009a      	lsls	r2, r3, #2
 8004a1c:	441a      	add	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a28:	f7fe f854 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	009a      	lsls	r2, r3, #2
 8004a36:	441a      	add	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a42:	4a0c      	ldr	r2, [pc, #48]	; (8004a74 <UART_SetConfig+0x32c>)
 8004a44:	fba2 2303 	umull	r2, r3, r2, r3
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	2264      	movs	r2, #100	; 0x64
 8004a4c:	fb02 f303 	mul.w	r3, r2, r3
 8004a50:	1aeb      	subs	r3, r5, r3
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	3332      	adds	r3, #50	; 0x32
 8004a56:	4a07      	ldr	r2, [pc, #28]	; (8004a74 <UART_SetConfig+0x32c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	f003 020f 	and.w	r2, r3, #15
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4422      	add	r2, r4
 8004a68:	609a      	str	r2, [r3, #8]
 8004a6a:	e071      	b.n	8004b50 <UART_SetConfig+0x408>
 8004a6c:	40011000 	.word	0x40011000
 8004a70:	40011400 	.word	0x40011400
 8004a74:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004a78:	f7fe f818 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009a      	lsls	r2, r3, #2
 8004a86:	441a      	add	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a92:	4a31      	ldr	r2, [pc, #196]	; (8004b58 <UART_SetConfig+0x410>)
 8004a94:	fba2 2303 	umull	r2, r3, r2, r3
 8004a98:	095b      	lsrs	r3, r3, #5
 8004a9a:	011c      	lsls	r4, r3, #4
 8004a9c:	f7fe f806 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009a      	lsls	r2, r3, #2
 8004aaa:	441a      	add	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ab6:	f7fd fff9 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004aba:	4602      	mov	r2, r0
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009a      	lsls	r2, r3, #2
 8004ac4:	441a      	add	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	4a21      	ldr	r2, [pc, #132]	; (8004b58 <UART_SetConfig+0x410>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	2264      	movs	r2, #100	; 0x64
 8004ada:	fb02 f303 	mul.w	r3, r2, r3
 8004ade:	1aeb      	subs	r3, r5, r3
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	3332      	adds	r3, #50	; 0x32
 8004ae4:	4a1c      	ldr	r2, [pc, #112]	; (8004b58 <UART_SetConfig+0x410>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af0:	441c      	add	r4, r3
 8004af2:	f7fd ffdb 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004af6:	4602      	mov	r2, r0
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	009a      	lsls	r2, r3, #2
 8004b00:	441a      	add	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b0c:	f7fd ffce 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004b10:	4602      	mov	r2, r0
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	009a      	lsls	r2, r3, #2
 8004b1a:	441a      	add	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b26:	4a0c      	ldr	r2, [pc, #48]	; (8004b58 <UART_SetConfig+0x410>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	095b      	lsrs	r3, r3, #5
 8004b2e:	2264      	movs	r2, #100	; 0x64
 8004b30:	fb02 f303 	mul.w	r3, r2, r3
 8004b34:	1aeb      	subs	r3, r5, r3
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	3332      	adds	r3, #50	; 0x32
 8004b3a:	4a07      	ldr	r2, [pc, #28]	; (8004b58 <UART_SetConfig+0x410>)
 8004b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	f003 020f 	and.w	r2, r3, #15
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4422      	add	r2, r4
 8004b4c:	609a      	str	r2, [r3, #8]
}
 8004b4e:	e7ff      	b.n	8004b50 <UART_SetConfig+0x408>
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bdb0      	pop	{r4, r5, r7, pc}
 8004b58:	51eb851f 	.word	0x51eb851f

08004b5c <drive_init>:
//drive_init
//a走行系の変数の初期化
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
	MF.FLAGS = 0;
 8004b60:	4b03      	ldr	r3, [pc, #12]	; (8004b70 <drive_init+0x14>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	801a      	strh	r2, [r3, #0]
}
 8004b66:	bf00      	nop
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	20000e38 	.word	0x20000e38

08004b74 <drive_start>:
//drive_start
//a走行開始前に走行距離と機体角度を初期化
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	4a10      	ldr	r2, [pc, #64]	; (8004bc0 <drive_start+0x4c>)
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	4a10      	ldr	r2, [pc, #64]	; (8004bc4 <drive_start+0x50>)
 8004b82:	6013      	str	r3, [r2, #0]
	degree_z = 0;				//a機体角度の初期化
 8004b84:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <drive_start+0x54>)
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
	if(H_accel_flag == 0) pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004b8c:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <drive_start+0x58>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d105      	bne.n	8004ba0 <drive_start+0x2c>
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	4a0d      	ldr	r2, [pc, #52]	; (8004bd0 <drive_start+0x5c>)
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	4a0d      	ldr	r2, [pc, #52]	; (8004bd4 <drive_start+0x60>)
 8004b9e:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8004ba0:	4a0d      	ldr	r2, [pc, #52]	; (8004bd8 <drive_start+0x64>)
 8004ba2:	8813      	ldrh	r3, [r2, #0]
 8004ba4:	f043 0302 	orr.w	r3, r3, #2
 8004ba8:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8004baa:	4a0b      	ldr	r2, [pc, #44]	; (8004bd8 <drive_start+0x64>)
 8004bac:	8813      	ldrh	r3, [r2, #0]
 8004bae:	f043 0304 	orr.w	r3, r3, #4
 8004bb2:	8013      	strh	r3, [r2, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	200009c4 	.word	0x200009c4
 8004bc4:	20000e54 	.word	0x20000e54
 8004bc8:	20000a34 	.word	0x20000a34
 8004bcc:	200002a5 	.word	0x200002a5
 8004bd0:	20000658 	.word	0x20000658
 8004bd4:	20000a7c 	.word	0x20000a7c
 8004bd8:	20000e38 	.word	0x20000e38

08004bdc <drive_stop>:
//a走行を終了する
//a（タイマを止めてタイマカウント値を0にリセットする）
//a引数1：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	4a0e      	ldr	r2, [pc, #56]	; (8004c20 <drive_stop+0x44>)
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	4a0e      	ldr	r2, [pc, #56]	; (8004c24 <drive_stop+0x48>)
 8004bea:	6013      	str	r3, [r2, #0]
	degree_z = 0;				//a機体角度の初期化
 8004bec:	4b0e      	ldr	r3, [pc, #56]	; (8004c28 <drive_stop+0x4c>)
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	4a0c      	ldr	r2, [pc, #48]	; (8004c2c <drive_stop+0x50>)
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	4a0c      	ldr	r2, [pc, #48]	; (8004c30 <drive_stop+0x54>)
 8004bfe:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 0;
 8004c00:	4a0c      	ldr	r2, [pc, #48]	; (8004c34 <drive_stop+0x58>)
 8004c02:	8813      	ldrh	r3, [r2, #0]
 8004c04:	f36f 0341 	bfc	r3, #1, #1
 8004c08:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 0;
 8004c0a:	4a0a      	ldr	r2, [pc, #40]	; (8004c34 <drive_stop+0x58>)
 8004c0c:	8813      	ldrh	r3, [r2, #0]
 8004c0e:	f36f 0382 	bfc	r3, #2, #1
 8004c12:	8013      	strh	r3, [r2, #0]
}
 8004c14:	bf00      	nop
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	200009c4 	.word	0x200009c4
 8004c24:	20000e54 	.word	0x20000e54
 8004c28:	20000a34 	.word	0x20000a34
 8004c2c:	20000658 	.word	0x20000658
 8004c30:	20000a7c 	.word	0x20000a7c
 8004c34:	20000e38 	.word	0x20000e38

08004c38 <control_start>:
//control_start
// wallとgyroの姿勢制御を開始する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_start(){
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004c3c:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <control_start+0x2c>)
 8004c3e:	8813      	ldrh	r3, [r2, #0]
 8004c40:	f043 0308 	orr.w	r3, r3, #8
 8004c44:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004c46:	4a07      	ldr	r2, [pc, #28]	; (8004c64 <control_start+0x2c>)
 8004c48:	8813      	ldrh	r3, [r2, #0]
 8004c4a:	f043 0310 	orr.w	r3, r3, #16
 8004c4e:	8013      	strh	r3, [r2, #0]

	target_omega_z = 0;
 8004c50:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <control_start+0x30>)
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20000e38 	.word	0x20000e38
 8004c68:	20000184 	.word	0x20000184

08004c6c <control_stop>:
//control_stop
// wallとgyroの姿勢制御を停止する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_stop(){
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 0;										//wall制御を無効にする
 8004c70:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <control_stop+0x2c>)
 8004c72:	8813      	ldrh	r3, [r2, #0]
 8004c74:	f36f 03c3 	bfc	r3, #3, #1
 8004c78:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 0;										//gyro制御を無効にする
 8004c7a:	4a07      	ldr	r2, [pc, #28]	; (8004c98 <control_stop+0x2c>)
 8004c7c:	8813      	ldrh	r3, [r2, #0]
 8004c7e:	f36f 1304 	bfc	r3, #4, #1
 8004c82:	8013      	strh	r3, [r2, #0]

	target_omega_z = 0;
 8004c84:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <control_stop+0x30>)
 8004c86:	f04f 0200 	mov.w	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	20000e38 	.word	0x20000e38
 8004c9c:	20000184 	.word	0x20000184

08004ca0 <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
//a引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
//a戻り値: nothing
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	460a      	mov	r2, r1
 8004caa:	71fb      	strb	r3, [r7, #7]
 8004cac:	4613      	mov	r3, r2
 8004cae:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d13e      	bne.n	8004d34 <drive_dir+0x94>
		if(dir == 0){
 8004cb6:	79bb      	ldrb	r3, [r7, #6]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10f      	bne.n	8004cdc <drive_dir+0x3c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	2120      	movs	r1, #32
 8004cc0:	483f      	ldr	r0, [pc, #252]	; (8004dc0 <drive_dir+0x120>)
 8004cc2:	f7fd faf7 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2110      	movs	r1, #16
 8004cca:	483d      	ldr	r0, [pc, #244]	; (8004dc0 <drive_dir+0x120>)
 8004ccc:	f7fd faf2 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	483b      	ldr	r0, [pc, #236]	; (8004dc4 <drive_dir+0x124>)
 8004cd6:	f7fd faed 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
		}
	}
}
 8004cda:	e06c      	b.n	8004db6 <drive_dir+0x116>
		}else if(dir == 1){
 8004cdc:	79bb      	ldrb	r3, [r7, #6]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d10f      	bne.n	8004d02 <drive_dir+0x62>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	//L_CW
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2120      	movs	r1, #32
 8004ce6:	4836      	ldr	r0, [pc, #216]	; (8004dc0 <drive_dir+0x120>)
 8004ce8:	f7fd fae4 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004cec:	2201      	movs	r2, #1
 8004cee:	2110      	movs	r1, #16
 8004cf0:	4833      	ldr	r0, [pc, #204]	; (8004dc0 <drive_dir+0x120>)
 8004cf2:	f7fd fadf 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	4832      	ldr	r0, [pc, #200]	; (8004dc4 <drive_dir+0x124>)
 8004cfc:	f7fd fada 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004d00:	e059      	b.n	8004db6 <drive_dir+0x116>
		}else if(dir == 2){
 8004d02:	79bb      	ldrb	r3, [r7, #6]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d10f      	bne.n	8004d28 <drive_dir+0x88>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004d08:	2201      	movs	r2, #1
 8004d0a:	2120      	movs	r1, #32
 8004d0c:	482c      	ldr	r0, [pc, #176]	; (8004dc0 <drive_dir+0x120>)
 8004d0e:	f7fd fad1 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004d12:	2201      	movs	r2, #1
 8004d14:	2110      	movs	r1, #16
 8004d16:	482a      	ldr	r0, [pc, #168]	; (8004dc0 <drive_dir+0x120>)
 8004d18:	f7fd facc 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	2101      	movs	r1, #1
 8004d20:	4828      	ldr	r0, [pc, #160]	; (8004dc4 <drive_dir+0x124>)
 8004d22:	f7fd fac7 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004d26:	e046      	b.n	8004db6 <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	4825      	ldr	r0, [pc, #148]	; (8004dc4 <drive_dir+0x124>)
 8004d2e:	f7fd fac1 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004d32:	e040      	b.n	8004db6 <drive_dir+0x116>
		if(dir == 0){
 8004d34:	79bb      	ldrb	r3, [r7, #6]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d110      	bne.n	8004d5c <drive_dir+0xbc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	4821      	ldr	r0, [pc, #132]	; (8004dc4 <drive_dir+0x124>)
 8004d40:	f7fd fab8 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 8004d44:	2200      	movs	r2, #0
 8004d46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d4a:	481e      	ldr	r0, [pc, #120]	; (8004dc4 <drive_dir+0x124>)
 8004d4c:	f7fd fab2 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004d50:	2201      	movs	r2, #1
 8004d52:	2101      	movs	r1, #1
 8004d54:	481b      	ldr	r0, [pc, #108]	; (8004dc4 <drive_dir+0x124>)
 8004d56:	f7fd faad 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004d5a:	e02c      	b.n	8004db6 <drive_dir+0x116>
		}else if(dir == 1){
 8004d5c:	79bb      	ldrb	r3, [r7, #6]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d110      	bne.n	8004d84 <drive_dir+0xe4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	//R_CW
 8004d62:	2200      	movs	r2, #0
 8004d64:	2102      	movs	r1, #2
 8004d66:	4817      	ldr	r0, [pc, #92]	; (8004dc4 <drive_dir+0x124>)
 8004d68:	f7fd faa4 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d72:	4814      	ldr	r0, [pc, #80]	; (8004dc4 <drive_dir+0x124>)
 8004d74:	f7fd fa9e 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004d78:	2201      	movs	r2, #1
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	4811      	ldr	r0, [pc, #68]	; (8004dc4 <drive_dir+0x124>)
 8004d7e:	f7fd fa99 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004d82:	e018      	b.n	8004db6 <drive_dir+0x116>
		}else if(dir == 2){
 8004d84:	79bb      	ldrb	r3, [r7, #6]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d110      	bne.n	8004dac <drive_dir+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	480d      	ldr	r0, [pc, #52]	; (8004dc4 <drive_dir+0x124>)
 8004d90:	f7fd fa90 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004d94:	2201      	movs	r2, #1
 8004d96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d9a:	480a      	ldr	r0, [pc, #40]	; (8004dc4 <drive_dir+0x124>)
 8004d9c:	f7fd fa8a 	bl	80022b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004da0:	2201      	movs	r2, #1
 8004da2:	2101      	movs	r1, #1
 8004da4:	4807      	ldr	r0, [pc, #28]	; (8004dc4 <drive_dir+0x124>)
 8004da6:	f7fd fa85 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004daa:	e004      	b.n	8004db6 <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004dac:	2200      	movs	r2, #0
 8004dae:	2101      	movs	r1, #1
 8004db0:	4804      	ldr	r0, [pc, #16]	; (8004dc4 <drive_dir+0x124>)
 8004db2:	f7fd fa7f 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40020800 	.word	0x40020800
 8004dc4:	40020400 	.word	0x40020400

08004dc8 <driveA>:
//driveA
// a指定距離、指定加速度で加速走行する
// a引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004dc8:	b590      	push	{r4, r7, lr}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4604      	mov	r4, r0
 8004dd0:	4608      	mov	r0, r1
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4623      	mov	r3, r4
 8004dd8:	80fb      	strh	r3, [r7, #6]
 8004dda:	4603      	mov	r3, r0
 8004ddc:	80bb      	strh	r3, [r7, #4]
 8004dde:	460b      	mov	r3, r1
 8004de0:	807b      	strh	r3, [r7, #2]
 8004de2:	4613      	mov	r3, r2
 8004de4:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 8004de6:	88bb      	ldrh	r3, [r7, #4]
 8004de8:	ee07 3a90 	vmov	s15, r3
 8004dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df0:	4b27      	ldr	r3, [pc, #156]	; (8004e90 <driveA+0xc8>)
 8004df2:	edc3 7a00 	vstr	s15, [r3]
 8004df6:	4b27      	ldr	r3, [pc, #156]	; (8004e94 <driveA+0xcc>)
 8004df8:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8004dfc:	887b      	ldrh	r3, [r7, #2]
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e06:	4b24      	ldr	r3, [pc, #144]	; (8004e98 <driveA+0xd0>)
 8004e08:	edc3 7a00 	vstr	s15, [r3]
 8004e0c:	4b23      	ldr	r3, [pc, #140]	; (8004e9c <driveA+0xd4>)
 8004e0e:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//a引数の各パラメータをグローバル変数化
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	ee07 3a90 	vmov	s15, r3
 8004e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1c:	4b20      	ldr	r3, [pc, #128]	; (8004ea0 <driveA+0xd8>)
 8004e1e:	edc3 7a00 	vstr	s15, [r3]
 8004e22:	4b20      	ldr	r3, [pc, #128]	; (8004ea4 <driveA+0xdc>)
 8004e24:	edc3 7a00 	vstr	s15, [r3]
	if(H_accel_flag == 0)target_speed_l = target_speed_r = speed_min_p;
 8004e28:	4b1f      	ldr	r3, [pc, #124]	; (8004ea8 <driveA+0xe0>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <driveA+0x7e>
 8004e30:	88bb      	ldrh	r3, [r7, #4]
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3a:	4b1c      	ldr	r3, [pc, #112]	; (8004eac <driveA+0xe4>)
 8004e3c:	edc3 7a00 	vstr	s15, [r3]
 8004e40:	4b1b      	ldr	r3, [pc, #108]	; (8004eb0 <driveA+0xe8>)
 8004e42:	edc3 7a00 	vstr	s15, [r3]

	//if(MF.FLAG.STRT == 0) speed_l = speed_r = 100;		//a最初の加速の際だけspeedを定義
	drive_start();											//a走行開始
 8004e46:	f7ff fe95 	bl	8004b74 <drive_start>

	//----a走行----
	while((dist_l < dist) || (dist_r < dist));				//a左右のモータが指定距離以上進むまで待機
 8004e4a:	bf00      	nop
 8004e4c:	883b      	ldrh	r3, [r7, #0]
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e56:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <driveA+0xec>)
 8004e58:	edd3 7a00 	vldr	s15, [r3]
 8004e5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e64:	dcf2      	bgt.n	8004e4c <driveA+0x84>
 8004e66:	883b      	ldrh	r3, [r7, #0]
 8004e68:	ee07 3a90 	vmov	s15, r3
 8004e6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e70:	4b11      	ldr	r3, [pc, #68]	; (8004eb8 <driveA+0xf0>)
 8004e72:	edd3 7a00 	vldr	s15, [r3]
 8004e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7e:	dce5      	bgt.n	8004e4c <driveA+0x84>

	drive_stop();											//a走行停止
 8004e80:	f7ff feac 	bl	8004bdc <drive_stop>
	//MF.FLAG.STRT = 1;										//2回目以降の加速の際はspeedは既存のスピードを用いる
	get_wall_info();										//a壁情報を取得，片壁制御の有効・無効の判断
 8004e84:	f006 f912 	bl	800b0ac <get_wall_info>
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd90      	pop	{r4, r7, pc}
 8004e90:	20000e3c 	.word	0x20000e3c
 8004e94:	20000a2c 	.word	0x20000a2c
 8004e98:	20000180 	.word	0x20000180
 8004e9c:	20000654 	.word	0x20000654
 8004ea0:	200009bc 	.word	0x200009bc
 8004ea4:	20000c2c 	.word	0x20000c2c
 8004ea8:	200002a5 	.word	0x200002a5
 8004eac:	2000017c 	.word	0x2000017c
 8004eb0:	20000ad0 	.word	0x20000ad0
 8004eb4:	20000e54 	.word	0x20000e54
 8004eb8:	200009c4 	.word	0x200009c4

08004ebc <driveD>:
//driveD
//a指定距離、指定減速度で減速走行する
//a引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004ebc:	b590      	push	{r4, r7, lr}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	4608      	mov	r0, r1
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4623      	mov	r3, r4
 8004ecc:	80fb      	strh	r3, [r7, #6]
 8004ece:	4603      	mov	r3, r0
 8004ed0:	80bb      	strh	r3, [r7, #4]
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	807b      	strh	r3, [r7, #2]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	803b      	strh	r3, [r7, #0]

	float speed_0 = speed_l;								//直線パルス数を計算するためにTIM15より参照
 8004eda:	4b4f      	ldr	r3, [pc, #316]	; (8005018 <driveD+0x15c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	60fb      	str	r3, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 8004ee0:	88bb      	ldrh	r3, [r7, #4]
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eea:	4b4c      	ldr	r3, [pc, #304]	; (800501c <driveD+0x160>)
 8004eec:	edc3 7a00 	vstr	s15, [r3]
 8004ef0:	4b4b      	ldr	r3, [pc, #300]	; (8005020 <driveD+0x164>)
 8004ef2:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8004ef6:	887b      	ldrh	r3, [r7, #2]
 8004ef8:	ee07 3a90 	vmov	s15, r3
 8004efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f00:	4b48      	ldr	r3, [pc, #288]	; (8005024 <driveD+0x168>)
 8004f02:	edc3 7a00 	vstr	s15, [r3]
 8004f06:	4b48      	ldr	r3, [pc, #288]	; (8005028 <driveD+0x16c>)
 8004f08:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;										//引数の各パラメータをグローバル変数化
 8004f0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f10:	ee07 3a90 	vmov	s15, r3
 8004f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f18:	4b44      	ldr	r3, [pc, #272]	; (800502c <driveD+0x170>)
 8004f1a:	edc3 7a00 	vstr	s15, [r3]
 8004f1e:	4b44      	ldr	r3, [pc, #272]	; (8005030 <driveD+0x174>)
 8004f20:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//走行開始
 8004f24:	f7ff fe26 	bl	8004b74 <drive_start>

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//等速走行距離 = 総距離 - 減速に必要な距離
 8004f28:	883b      	ldrh	r3, [r7, #0]
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f32:	4b3b      	ldr	r3, [pc, #236]	; (8005020 <driveD+0x164>)
 8004f34:	edd3 6a00 	vldr	s13, [r3]
 8004f38:	4b39      	ldr	r3, [pc, #228]	; (8005020 <driveD+0x164>)
 8004f3a:	edd3 7a00 	vldr	s15, [r3]
 8004f3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f46:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004f4e:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004f52:	4b37      	ldr	r3, [pc, #220]	; (8005030 <driveD+0x174>)
 8004f54:	edd3 7a00 	vldr	s15, [r3]
 8004f58:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004f5c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f68:	ee17 3a90 	vmov	r3, s15
 8004f6c:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	4a2e      	ldr	r2, [pc, #184]	; (800502c <driveD+0x170>)
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	4a2e      	ldr	r2, [pc, #184]	; (8005030 <driveD+0x174>)
 8004f78:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 8004f7a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	dd1c      	ble.n	8004fbc <driveD+0x100>
		//----等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));	//a左右のモータが等速分の距離以上進むまで待機
 8004f82:	bf00      	nop
 8004f84:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004f88:	ee07 3a90 	vmov	s15, r3
 8004f8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f90:	4b28      	ldr	r3, [pc, #160]	; (8005034 <driveD+0x178>)
 8004f92:	edd3 7a00 	vldr	s15, [r3]
 8004f96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9e:	dcf1      	bgt.n	8004f84 <driveD+0xc8>
 8004fa0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004fa4:	ee07 3a90 	vmov	s15, r3
 8004fa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fac:	4b22      	ldr	r3, [pc, #136]	; (8005038 <driveD+0x17c>)
 8004fae:	edd3 7a00 	vldr	s15, [r3]
 8004fb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fba:	dce3      	bgt.n	8004f84 <driveD+0xc8>
	}
	accel_l = accel_r = accel_p;
 8004fbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fc0:	ee07 3a90 	vmov	s15, r3
 8004fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fc8:	4b18      	ldr	r3, [pc, #96]	; (800502c <driveD+0x170>)
 8004fca:	edc3 7a00 	vstr	s15, [r3]
 8004fce:	4b18      	ldr	r3, [pc, #96]	; (8005030 <driveD+0x174>)
 8004fd0:	edc3 7a00 	vstr	s15, [r3]
	//dist_l = 0;
	//dist_r = 0;
	//----減速走行----
	while((dist_l < dist) || (dist_r < dist));			//a左右のモータが減速分の距離以上進むまで待機
 8004fd4:	bf00      	nop
 8004fd6:	883b      	ldrh	r3, [r7, #0]
 8004fd8:	ee07 3a90 	vmov	s15, r3
 8004fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fe0:	4b14      	ldr	r3, [pc, #80]	; (8005034 <driveD+0x178>)
 8004fe2:	edd3 7a00 	vldr	s15, [r3]
 8004fe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fee:	dcf2      	bgt.n	8004fd6 <driveD+0x11a>
 8004ff0:	883b      	ldrh	r3, [r7, #0]
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ffa:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <driveD+0x17c>)
 8004ffc:	edd3 7a00 	vldr	s15, [r3]
 8005000:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005008:	dce5      	bgt.n	8004fd6 <driveD+0x11a>

	//MF.FLAG.STRT = 0;
	drive_stop();											//走行停止
 800500a:	f7ff fde7 	bl	8004bdc <drive_stop>
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	bd90      	pop	{r4, r7, pc}
 8005016:	bf00      	nop
 8005018:	200009c8 	.word	0x200009c8
 800501c:	20000e3c 	.word	0x20000e3c
 8005020:	20000a2c 	.word	0x20000a2c
 8005024:	20000180 	.word	0x20000180
 8005028:	20000654 	.word	0x20000654
 800502c:	200009bc 	.word	0x200009bc
 8005030:	20000c2c 	.word	0x20000c2c
 8005034:	20000e54 	.word	0x20000e54
 8005038:	200009c4 	.word	0x200009c4

0800503c <driveU>:
//driveU
// 指定パルス分等速走行して停止する
// 引数1：dist …… 走行するパルス
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;												//等速走行のため加速度は0
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	4a27      	ldr	r2, [pc, #156]	; (80050e8 <driveU+0xac>)
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	4a27      	ldr	r2, [pc, #156]	; (80050ec <driveU+0xb0>)
 8005050:	6013      	str	r3, [r2, #0]
	drive_start();											//走行開始
 8005052:	f7ff fd8f 	bl	8004b74 <drive_start>

	//----走行----
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 8005056:	e024      	b.n	80050a2 <driveU+0x66>
		if(MF.FLAG.WEDGE == 1){
 8005058:	4b25      	ldr	r3, [pc, #148]	; (80050f0 <driveU+0xb4>)
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b01      	cmp	r3, #1
 8005064:	d11d      	bne.n	80050a2 <driveU+0x66>
			if(ad_l < WALL_BASE_L-30 || ad_r < WALL_BASE_R-10){
 8005066:	4b23      	ldr	r3, [pc, #140]	; (80050f4 <driveU+0xb8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b13      	cmp	r3, #19
 800506c:	d903      	bls.n	8005076 <driveU+0x3a>
 800506e:	4b22      	ldr	r3, [pc, #136]	; (80050f8 <driveU+0xbc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b27      	cmp	r3, #39	; 0x27
 8005074:	d815      	bhi.n	80050a2 <driveU+0x66>
				while((dist_l < W_DIST) || (dist_r < W_DIST));	//左右のモータが壁切れ用指定パルス以上進むまで待機
 8005076:	bf00      	nop
 8005078:	4b20      	ldr	r3, [pc, #128]	; (80050fc <driveU+0xc0>)
 800507a:	edd3 7a00 	vldr	s15, [r3]
 800507e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005100 <driveU+0xc4>
 8005082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508a:	d4f5      	bmi.n	8005078 <driveU+0x3c>
 800508c:	4b1d      	ldr	r3, [pc, #116]	; (8005104 <driveU+0xc8>)
 800508e:	edd3 7a00 	vldr	s15, [r3]
 8005092:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005100 <driveU+0xc4>
 8005096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800509a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509e:	d4eb      	bmi.n	8005078 <driveU+0x3c>
			break;
 80050a0:	e019      	b.n	80050d6 <driveU+0x9a>
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 80050a2:	88fb      	ldrh	r3, [r7, #6]
 80050a4:	ee07 3a90 	vmov	s15, r3
 80050a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050ac:	4b13      	ldr	r3, [pc, #76]	; (80050fc <driveU+0xc0>)
 80050ae:	edd3 7a00 	vldr	s15, [r3]
 80050b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ba:	dccd      	bgt.n	8005058 <driveU+0x1c>
 80050bc:	88fb      	ldrh	r3, [r7, #6]
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050c6:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <driveU+0xc8>)
 80050c8:	edd3 7a00 	vldr	s15, [r3]
 80050cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d4:	dcc0      	bgt.n	8005058 <driveU+0x1c>
			}
		}
	}

	drive_stop();											//走行停止
 80050d6:	f7ff fd81 	bl	8004bdc <drive_stop>
	get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 80050da:	f005 ffe7 	bl	800b0ac <get_wall_info>
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	200009bc 	.word	0x200009bc
 80050ec:	20000c2c 	.word	0x20000c2c
 80050f0:	20000e38 	.word	0x20000e38
 80050f4:	200009d4 	.word	0x200009d4
 80050f8:	20000e34 	.word	0x20000e34
 80050fc:	20000e54 	.word	0x20000e54
 8005100:	428c0000 	.word	0x428c0000
 8005104:	200009c4 	.word	0x200009c4

08005108 <driveC>:
//driveC
// 指定パルス分デフォルト速度で走行して停止する
// 引数1：dist …… 走行するパルス
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 8005112:	4b19      	ldr	r3, [pc, #100]	; (8005178 <driveC+0x70>)
 8005114:	4a19      	ldr	r2, [pc, #100]	; (800517c <driveC+0x74>)
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	4a19      	ldr	r2, [pc, #100]	; (8005180 <driveC+0x78>)
 800511a:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 150;
 800511c:	4b16      	ldr	r3, [pc, #88]	; (8005178 <driveC+0x70>)
 800511e:	4a19      	ldr	r2, [pc, #100]	; (8005184 <driveC+0x7c>)
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	4a19      	ldr	r2, [pc, #100]	; (8005188 <driveC+0x80>)
 8005124:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;												//等速走行のため加速度は0
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	4a18      	ldr	r2, [pc, #96]	; (800518c <driveC+0x84>)
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	4a18      	ldr	r2, [pc, #96]	; (8005190 <driveC+0x88>)
 8005130:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 8005132:	f7ff fd1f 	bl	8004b74 <drive_start>
//	MF.FLAG.LOG = 1;
	//====回転====
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが定速分のパルス以上進むまで待機
 8005136:	bf00      	nop
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005142:	4b14      	ldr	r3, [pc, #80]	; (8005194 <driveC+0x8c>)
 8005144:	edd3 7a00 	vldr	s15, [r3]
 8005148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800514c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005150:	dcf2      	bgt.n	8005138 <driveC+0x30>
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	ee07 3a90 	vmov	s15, r3
 8005158:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800515c:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <driveC+0x90>)
 800515e:	edd3 7a00 	vldr	s15, [r3]
 8005162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516a:	dce5      	bgt.n	8005138 <driveC+0x30>

	drive_stop();											//走行停止
 800516c:	f7ff fd36 	bl	8004bdc <drive_stop>
	for(int i=0; i<log_allay; i++){
		printf("r:	%d\n", get_speed_r[i]);
		HAL_Delay(5);
	}
*/
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	43160000 	.word	0x43160000
 800517c:	20000e3c 	.word	0x20000e3c
 8005180:	20000a2c 	.word	0x20000a2c
 8005184:	20000180 	.word	0x20000180
 8005188:	20000654 	.word	0x20000654
 800518c:	200009bc 	.word	0x200009bc
 8005190:	20000c2c 	.word	0x20000c2c
 8005194:	20000e54 	.word	0x20000e54
 8005198:	200009c4 	.word	0x200009c4

0800519c <driveC2>:
//driveC2
// 指定パルス分デフォルト速度で走行して停止する
// 引数1：dist …… 走行するパルス
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC2(uint16_t dist){
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	4603      	mov	r3, r0
 80051a4:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = -150;
 80051a6:	4b1a      	ldr	r3, [pc, #104]	; (8005210 <driveC2+0x74>)
 80051a8:	4a1a      	ldr	r2, [pc, #104]	; (8005214 <driveC2+0x78>)
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	4a1a      	ldr	r2, [pc, #104]	; (8005218 <driveC2+0x7c>)
 80051ae:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = -150;
 80051b0:	4b17      	ldr	r3, [pc, #92]	; (8005210 <driveC2+0x74>)
 80051b2:	4a1a      	ldr	r2, [pc, #104]	; (800521c <driveC2+0x80>)
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	4a1a      	ldr	r2, [pc, #104]	; (8005220 <driveC2+0x84>)
 80051b8:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;												//等速走行のため加速度は0
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	4a19      	ldr	r2, [pc, #100]	; (8005224 <driveC2+0x88>)
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	4a19      	ldr	r2, [pc, #100]	; (8005228 <driveC2+0x8c>)
 80051c4:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 80051c6:	f7ff fcd5 	bl	8004b74 <drive_start>
//	MF.FLAG.LOG = 1;
	//====回転====
	while((dist_l > (-1*dist)) || (dist_r > (-1*dist)));			//左右のモータが定速分のパルス以上進むまで待機
 80051ca:	bf00      	nop
 80051cc:	88fb      	ldrh	r3, [r7, #6]
 80051ce:	425b      	negs	r3, r3
 80051d0:	ee07 3a90 	vmov	s15, r3
 80051d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051d8:	4b14      	ldr	r3, [pc, #80]	; (800522c <driveC2+0x90>)
 80051da:	edd3 7a00 	vldr	s15, [r3]
 80051de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e6:	d4f1      	bmi.n	80051cc <driveC2+0x30>
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	425b      	negs	r3, r3
 80051ec:	ee07 3a90 	vmov	s15, r3
 80051f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051f4:	4b0e      	ldr	r3, [pc, #56]	; (8005230 <driveC2+0x94>)
 80051f6:	edd3 7a00 	vldr	s15, [r3]
 80051fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005202:	d4e3      	bmi.n	80051cc <driveC2+0x30>

	drive_stop();											//走行停止
 8005204:	f7ff fcea 	bl	8004bdc <drive_stop>
	for(int i=0; i<log_allay; i++){
		printf("r:	%d\n", get_speed_r[i]);
		HAL_Delay(5);
	}
*/
}
 8005208:	bf00      	nop
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	c3160000 	.word	0xc3160000
 8005214:	20000e3c 	.word	0x20000e3c
 8005218:	20000a2c 	.word	0x20000a2c
 800521c:	20000180 	.word	0x20000180
 8005220:	20000654 	.word	0x20000654
 8005224:	200009bc 	.word	0x200009bc
 8005228:	20000c2c 	.word	0x20000c2c
 800522c:	20000e54 	.word	0x20000e54
 8005230:	200009c4 	.word	0x200009c4

08005234 <set_position>:
//set_position
// 機体の尻を壁に当てて場所を区画中央に合わせる
// 引数：sw …… 0以外ならget_base()する
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(){
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0

  driveC2(SETPOS_BACK);          //尻を当てる程度に後退。回転後に停止する
 8005238:	203c      	movs	r0, #60	; 0x3c
 800523a:	f7ff ffaf 	bl	800519c <driveC2>
  driveC(SETPOS_SET);           //デフォルトインターバルで指定パルス分回転。回転後に停止する
 800523e:	2023      	movs	r0, #35	; 0x23
 8005240:	f7ff ff62 	bl	8005108 <driveC>
}
 8005244:	bf00      	nop
 8005246:	bd80      	pop	{r7, pc}

08005248 <start_sectionA>:
//start_sectionA
// aスタート区画分加速しながら走行する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA(void){
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0

	control_start();
 800524c:	f7ff fcf4 	bl	8004c38 <control_start>
	if(start_flag == 0){
 8005250:	4b0e      	ldr	r3, [pc, #56]	; (800528c <start_sectionA+0x44>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d108      	bne.n	800526c <start_sectionA+0x24>
		driveA(4000, SPEED_MIN, SPEED_RUN, SEC_START);					//半区画のパルス分加速しながら走行。走行後は停止しない
 800525a:	237d      	movs	r3, #125	; 0x7d
 800525c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005260:	2164      	movs	r1, #100	; 0x64
 8005262:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005266:	f7ff fdaf 	bl	8004dc8 <driveA>
 800526a:	e007      	b.n	800527c <start_sectionA+0x34>
	}else{
		driveA(4000, SPEED_MIN, SPEED_RUN, SEC_HALF);					//半区画のパルス分加速しながら走行。走行後は停止しない
 800526c:	235a      	movs	r3, #90	; 0x5a
 800526e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005272:	2164      	movs	r1, #100	; 0x64
 8005274:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005278:	f7ff fda6 	bl	8004dc8 <driveA>
	}
	start_flag = 1;
 800527c:	4b03      	ldr	r3, [pc, #12]	; (800528c <start_sectionA+0x44>)
 800527e:	2201      	movs	r2, #1
 8005280:	701a      	strb	r2, [r3, #0]
	get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8005282:	f005 ff13 	bl	800b0ac <get_wall_info>
}
 8005286:	bf00      	nop
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000e58 	.word	0x20000e58

08005290 <half_sectionA>:
//half_sectionA
// a半区画分加速しながら走行する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0

	control_start();
 8005294:	f7ff fcd0 	bl	8004c38 <control_start>
	driveA(4000, SPEED_MIN, SPEED_RUN, SEC_HALF);					//半区画のパルス分加速しながら走行。走行後は停止しない
 8005298:	235a      	movs	r3, #90	; 0x5a
 800529a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800529e:	2164      	movs	r1, #100	; 0x64
 80052a0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80052a4:	f7ff fd90 	bl	8004dc8 <driveA>
	get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 80052a8:	f005 ff00 	bl	800b0ac <get_wall_info>
}
 80052ac:	bf00      	nop
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0

	control_start();
 80052b4:	f7ff fcc0 	bl	8004c38 <control_start>
	driveD(-4000, SPEED_MIN, SPEED_RUN, SEC_HALF);				//指定パルス分指定減速度で減速走行。走行後は停止する
 80052b8:	235a      	movs	r3, #90	; 0x5a
 80052ba:	f44f 7216 	mov.w	r2, #600	; 0x258
 80052be:	2164      	movs	r1, #100	; 0x64
 80052c0:	4802      	ldr	r0, [pc, #8]	; (80052cc <half_sectionD+0x1c>)
 80052c2:	f7ff fdfb 	bl	8004ebc <driveD>
}
 80052c6:	bf00      	nop
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	fffff060 	.word	0xfffff060

080052d0 <start_sectionA2>:
//start_sectionA2
// aスタート区画分加速しながら走行する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA2(void){
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0

	control_start();
 80052d4:	f7ff fcb0 	bl	8004c38 <control_start>
	if(start_flag == 0){
 80052d8:	4b0e      	ldr	r3, [pc, #56]	; (8005314 <start_sectionA2+0x44>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d108      	bne.n	80052f4 <start_sectionA2+0x24>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_START);					//半区画のパルス分加速しながら走行。走行後は停止しない
 80052e2:	237d      	movs	r3, #125	; 0x7d
 80052e4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80052e8:	2164      	movs	r1, #100	; 0x64
 80052ea:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80052ee:	f7ff fd6b 	bl	8004dc8 <driveA>
 80052f2:	e007      	b.n	8005304 <start_sectionA2+0x34>
	}else{
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);					//半区画のパルス分加速しながら走行。走行後は停止しない
 80052f4:	235a      	movs	r3, #90	; 0x5a
 80052f6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80052fa:	2164      	movs	r1, #100	; 0x64
 80052fc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005300:	f7ff fd62 	bl	8004dc8 <driveA>
	}
	start_flag = 1;
 8005304:	4b03      	ldr	r3, [pc, #12]	; (8005314 <start_sectionA2+0x44>)
 8005306:	2201      	movs	r2, #1
 8005308:	701a      	strb	r2, [r3, #0]
	get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 800530a:	f005 fecf 	bl	800b0ac <get_wall_info>
}
 800530e:	bf00      	nop
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000e58 	.word	0x20000e58

08005318 <half_sectionA2>:
//half_sectionA2
// a半区画分加速しながら走行する
// a引数：なし
// a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA2(void){
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
	full_led_write(1);
 800531c:	2001      	movs	r0, #1
 800531e:	f005 ff39 	bl	800b194 <full_led_write>
	control_start();
 8005322:	f7ff fc89 	bl	8004c38 <control_start>
	driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);				//半区画のパルス分加速しながら走行。走行後は停止しない
 8005326:	235a      	movs	r3, #90	; 0x5a
 8005328:	f44f 7248 	mov.w	r2, #800	; 0x320
 800532c:	2164      	movs	r1, #100	; 0x64
 800532e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005332:	f7ff fd49 	bl	8004dc8 <driveA>
	get_wall_info();											//壁情報を取得，片壁制御の有効・無効の判断
 8005336:	f005 feb9 	bl	800b0ac <get_wall_info>
}
 800533a:	bf00      	nop
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <half_sectionD2>:
//half_sectionD2
//a半区画分減速しながら走行し停止する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD2(void){
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
	full_led_write(3);
 8005344:	2003      	movs	r0, #3
 8005346:	f005 ff25 	bl	800b194 <full_led_write>
	control_start();
 800534a:	f7ff fc75 	bl	8004c38 <control_start>
	driveD(-8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);				//指定パルス分指定減速度で減速走行。走行後は停止する
 800534e:	235a      	movs	r3, #90	; 0x5a
 8005350:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005354:	2164      	movs	r1, #100	; 0x64
 8005356:	4802      	ldr	r0, [pc, #8]	; (8005360 <half_sectionD2+0x20>)
 8005358:	f7ff fdb0 	bl	8004ebc <driveD>
}
 800535c:	bf00      	nop
 800535e:	bd80      	pop	{r7, pc}
 8005360:	ffffe0c0 	.word	0xffffe0c0

08005364 <one_section>:
//one_section
//a1区画分進んで停止する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_section(void){
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0

	half_sectionA();										//半区画分加速走行
 8005368:	f7ff ff92 	bl	8005290 <half_sectionA>
	half_sectionD();										//半区画分減速走行のち停止
 800536c:	f7ff ffa0 	bl	80052b0 <half_sectionD>
}
 8005370:	bf00      	nop
 8005372:	bd80      	pop	{r7, pc}

08005374 <one_sectionA>:
//one_sectionA
//a1区画分加速する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA(void){
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
	full_led_write(4);
 8005378:	2004      	movs	r0, #4
 800537a:	f005 ff0b 	bl	800b194 <full_led_write>
	control_start();
 800537e:	f7ff fc5b 	bl	8004c38 <control_start>
	driveA(accel_hs, SPEED_RUN, speed_max_hs, SEC_HALF*2);			//1区画のパルス分加速走行。走行後は停止しない
 8005382:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <one_sectionA+0x30>)
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	b21b      	sxth	r3, r3
 8005388:	b298      	uxth	r0, r3
 800538a:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <one_sectionA+0x34>)
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	b21b      	sxth	r3, r3
 8005390:	b29a      	uxth	r2, r3
 8005392:	23b4      	movs	r3, #180	; 0xb4
 8005394:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005398:	f7ff fd16 	bl	8004dc8 <driveA>
	get_wall_info();												//壁情報を取得，片壁制御の有効・無効の判断
 800539c:	f005 fe86 	bl	800b0ac <get_wall_info>
}
 80053a0:	bf00      	nop
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20000330 	.word	0x20000330
 80053a8:	20000e4c 	.word	0x20000e4c

080053ac <one_sectionD>:
//one_sectionD
//a1区画分減速する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD(void){
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
	full_led_write(2);
 80053b0:	2002      	movs	r0, #2
 80053b2:	f005 feef 	bl	800b194 <full_led_write>
	control_start();
 80053b6:	f7ff fc3f 	bl	8004c38 <control_start>
	driveD(-1*accel_hs, SPEED_RUN, speed_max_hs, SEC_HALF*2);		//1区画のパルス分減速走行。走行後は停止しない
 80053ba:	4b0a      	ldr	r3, [pc, #40]	; (80053e4 <one_sectionD+0x38>)
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	b21b      	sxth	r3, r3
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	425b      	negs	r3, r3
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	b218      	sxth	r0, r3
 80053c8:	4b07      	ldr	r3, [pc, #28]	; (80053e8 <one_sectionD+0x3c>)
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	b21b      	sxth	r3, r3
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	23b4      	movs	r3, #180	; 0xb4
 80053d2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80053d6:	f7ff fd71 	bl	8004ebc <driveD>
	get_wall_info();												//壁情報を取得，片壁制御の有効・無効の判断
 80053da:	f005 fe67 	bl	800b0ac <get_wall_info>
}
 80053de:	bf00      	nop
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20000330 	.word	0x20000330
 80053e8:	20000e4c 	.word	0x20000e4c

080053ec <one_sectionU>:
//one_sectionU
//a等速で1区画分進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
	full_led_write(7);
 80053f0:	2007      	movs	r0, #7
 80053f2:	f005 fecf 	bl	800b194 <full_led_write>
	control_start();
 80053f6:	f7ff fc1f 	bl	8004c38 <control_start>
	driveU(SEC_HALF*2);										//半区画のパルス分等速走行。走行後は停止しない
 80053fa:	20b4      	movs	r0, #180	; 0xb4
 80053fc:	f7ff fe1e 	bl	800503c <driveU>
	get_wall_info();											//壁情報を取得
 8005400:	f005 fe54 	bl	800b0ac <get_wall_info>
}
 8005404:	bf00      	nop
 8005406:	bd80      	pop	{r7, pc}

08005408 <rotate_R90>:
//rotate_R90
//a右に90度回転する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 8005408:	b598      	push	{r3, r4, r7, lr}
 800540a:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 800540c:	4b4c      	ldr	r3, [pc, #304]	; (8005540 <rotate_R90+0x138>)
 800540e:	4a4d      	ldr	r2, [pc, #308]	; (8005544 <rotate_R90+0x13c>)
 8005410:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 8005412:	4b4d      	ldr	r3, [pc, #308]	; (8005548 <rotate_R90+0x140>)
 8005414:	4a4d      	ldr	r2, [pc, #308]	; (800554c <rotate_R90+0x144>)
 8005416:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8005418:	4b4d      	ldr	r3, [pc, #308]	; (8005550 <rotate_R90+0x148>)
 800541a:	4a4e      	ldr	r2, [pc, #312]	; (8005554 <rotate_R90+0x14c>)
 800541c:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 800541e:	4b48      	ldr	r3, [pc, #288]	; (8005540 <rotate_R90+0x138>)
 8005420:	edd3 7a00 	vldr	s15, [r3]
 8005424:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8005558 <rotate_R90+0x150>
 8005428:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800542c:	ee16 0a90 	vmov	r0, s13
 8005430:	f7fb f882 	bl	8000538 <__aeabi_f2d>
 8005434:	a340      	add	r3, pc, #256	; (adr r3, 8005538 <rotate_R90+0x130>)
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	f7fb f8d5 	bl	80005e8 <__aeabi_dmul>
 800543e:	4603      	mov	r3, r0
 8005440:	460c      	mov	r4, r1
 8005442:	4618      	mov	r0, r3
 8005444:	4621      	mov	r1, r4
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	4b44      	ldr	r3, [pc, #272]	; (800555c <rotate_R90+0x154>)
 800544c:	f7fb f8cc 	bl	80005e8 <__aeabi_dmul>
 8005450:	4603      	mov	r3, r0
 8005452:	460c      	mov	r4, r1
 8005454:	4618      	mov	r0, r3
 8005456:	4621      	mov	r1, r4
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005460:	f7fb f9ec 	bl	800083c <__aeabi_ddiv>
 8005464:	4603      	mov	r3, r0
 8005466:	460c      	mov	r4, r1
 8005468:	4618      	mov	r0, r3
 800546a:	4621      	mov	r1, r4
 800546c:	f7fb fb6c 	bl	8000b48 <__aeabi_d2f>
 8005470:	4602      	mov	r2, r0
 8005472:	4b3b      	ldr	r3, [pc, #236]	; (8005560 <rotate_R90+0x158>)
 8005474:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 8005476:	4b32      	ldr	r3, [pc, #200]	; (8005540 <rotate_R90+0x138>)
 8005478:	edd3 7a00 	vldr	s15, [r3]
 800547c:	eef1 7a67 	vneg.f32	s15, s15
 8005480:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8005558 <rotate_R90+0x150>
 8005484:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005488:	ee16 0a90 	vmov	r0, s13
 800548c:	f7fb f854 	bl	8000538 <__aeabi_f2d>
 8005490:	a329      	add	r3, pc, #164	; (adr r3, 8005538 <rotate_R90+0x130>)
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	f7fb f8a7 	bl	80005e8 <__aeabi_dmul>
 800549a:	4603      	mov	r3, r0
 800549c:	460c      	mov	r4, r1
 800549e:	4618      	mov	r0, r3
 80054a0:	4621      	mov	r1, r4
 80054a2:	f04f 0200 	mov.w	r2, #0
 80054a6:	4b2d      	ldr	r3, [pc, #180]	; (800555c <rotate_R90+0x154>)
 80054a8:	f7fb f89e 	bl	80005e8 <__aeabi_dmul>
 80054ac:	4603      	mov	r3, r0
 80054ae:	460c      	mov	r4, r1
 80054b0:	4618      	mov	r0, r3
 80054b2:	4621      	mov	r1, r4
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054bc:	f7fb f9be 	bl	800083c <__aeabi_ddiv>
 80054c0:	4603      	mov	r3, r0
 80054c2:	460c      	mov	r4, r1
 80054c4:	4618      	mov	r0, r3
 80054c6:	4621      	mov	r1, r4
 80054c8:	f7fb fb3e 	bl	8000b48 <__aeabi_d2f>
 80054cc:	4602      	mov	r2, r0
 80054ce:	4b25      	ldr	r3, [pc, #148]	; (8005564 <rotate_R90+0x15c>)
 80054d0:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80054d2:	f7ff fb4f 	bl	8004b74 <drive_start>
	control_stop();
 80054d6:	f7ff fbc9 	bl	8004c6c <control_stop>
	while(degree_z > -80);
 80054da:	bf00      	nop
 80054dc:	4b22      	ldr	r3, [pc, #136]	; (8005568 <rotate_R90+0x160>)
 80054de:	edd3 7a00 	vldr	s15, [r3]
 80054e2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800556c <rotate_R90+0x164>
 80054e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ee:	dcf5      	bgt.n	80054dc <rotate_R90+0xd4>
	drive_stop();
 80054f0:	f7ff fb74 	bl	8004bdc <drive_stop>

	accel_l = 3000;
 80054f4:	4b14      	ldr	r3, [pc, #80]	; (8005548 <rotate_R90+0x140>)
 80054f6:	4a15      	ldr	r2, [pc, #84]	; (800554c <rotate_R90+0x144>)
 80054f8:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 80054fa:	4b15      	ldr	r3, [pc, #84]	; (8005550 <rotate_R90+0x148>)
 80054fc:	4a15      	ldr	r2, [pc, #84]	; (8005554 <rotate_R90+0x14c>)
 80054fe:	601a      	str	r2, [r3, #0]
	speed_max_l = 100;
 8005500:	4b17      	ldr	r3, [pc, #92]	; (8005560 <rotate_R90+0x158>)
 8005502:	4a1b      	ldr	r2, [pc, #108]	; (8005570 <rotate_R90+0x168>)
 8005504:	601a      	str	r2, [r3, #0]
	speed_min_r = -100;
 8005506:	4b17      	ldr	r3, [pc, #92]	; (8005564 <rotate_R90+0x15c>)
 8005508:	4a1a      	ldr	r2, [pc, #104]	; (8005574 <rotate_R90+0x16c>)
 800550a:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 800550c:	f7ff fb32 	bl	8004b74 <drive_start>
	while(degree_z > -90+80);
 8005510:	bf00      	nop
 8005512:	4b15      	ldr	r3, [pc, #84]	; (8005568 <rotate_R90+0x160>)
 8005514:	edd3 7a00 	vldr	s15, [r3]
 8005518:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800551c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005524:	dcf5      	bgt.n	8005512 <rotate_R90+0x10a>

	turn_dir(DIR_TURN_R90);									//マイクロマウス内部位置情報でも左回転処理
 8005526:	2001      	movs	r0, #1
 8005528:	f004 fd80 	bl	800a02c <turn_dir>
	drive_stop();
 800552c:	f7ff fb56 	bl	8004bdc <drive_stop>
}
 8005530:	bf00      	nop
 8005532:	bd98      	pop	{r3, r4, r7, pc}
 8005534:	f3af 8000 	nop.w
 8005538:	54442d18 	.word	0x54442d18
 800553c:	400921fb 	.word	0x400921fb
 8005540:	20000184 	.word	0x20000184
 8005544:	44480000 	.word	0x44480000
 8005548:	20000c2c 	.word	0x20000c2c
 800554c:	453b8000 	.word	0x453b8000
 8005550:	200009bc 	.word	0x200009bc
 8005554:	c53b8000 	.word	0xc53b8000
 8005558:	43340000 	.word	0x43340000
 800555c:	40508000 	.word	0x40508000
 8005560:	20000654 	.word	0x20000654
 8005564:	20000e3c 	.word	0x20000e3c
 8005568:	20000a34 	.word	0x20000a34
 800556c:	c2a00000 	.word	0xc2a00000
 8005570:	42c80000 	.word	0x42c80000
 8005574:	c2c80000 	.word	0xc2c80000

08005578 <rotate_L90>:
//rotate_L90
//a左に90度回転する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 8005578:	b598      	push	{r3, r4, r7, lr}
 800557a:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 800557c:	4b4c      	ldr	r3, [pc, #304]	; (80056b0 <rotate_L90+0x138>)
 800557e:	4a4d      	ldr	r2, [pc, #308]	; (80056b4 <rotate_L90+0x13c>)
 8005580:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 8005582:	4b4d      	ldr	r3, [pc, #308]	; (80056b8 <rotate_L90+0x140>)
 8005584:	4a4d      	ldr	r2, [pc, #308]	; (80056bc <rotate_L90+0x144>)
 8005586:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8005588:	4b4d      	ldr	r3, [pc, #308]	; (80056c0 <rotate_L90+0x148>)
 800558a:	4a4e      	ldr	r2, [pc, #312]	; (80056c4 <rotate_L90+0x14c>)
 800558c:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 800558e:	4b48      	ldr	r3, [pc, #288]	; (80056b0 <rotate_L90+0x138>)
 8005590:	edd3 7a00 	vldr	s15, [r3]
 8005594:	eef1 7a67 	vneg.f32	s15, s15
 8005598:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80056c8 <rotate_L90+0x150>
 800559c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80055a0:	ee16 0a90 	vmov	r0, s13
 80055a4:	f7fa ffc8 	bl	8000538 <__aeabi_f2d>
 80055a8:	a33f      	add	r3, pc, #252	; (adr r3, 80056a8 <rotate_L90+0x130>)
 80055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ae:	f7fb f81b 	bl	80005e8 <__aeabi_dmul>
 80055b2:	4603      	mov	r3, r0
 80055b4:	460c      	mov	r4, r1
 80055b6:	4618      	mov	r0, r3
 80055b8:	4621      	mov	r1, r4
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	4b43      	ldr	r3, [pc, #268]	; (80056cc <rotate_L90+0x154>)
 80055c0:	f7fb f812 	bl	80005e8 <__aeabi_dmul>
 80055c4:	4603      	mov	r3, r0
 80055c6:	460c      	mov	r4, r1
 80055c8:	4618      	mov	r0, r3
 80055ca:	4621      	mov	r1, r4
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055d4:	f7fb f932 	bl	800083c <__aeabi_ddiv>
 80055d8:	4603      	mov	r3, r0
 80055da:	460c      	mov	r4, r1
 80055dc:	4618      	mov	r0, r3
 80055de:	4621      	mov	r1, r4
 80055e0:	f7fb fab2 	bl	8000b48 <__aeabi_d2f>
 80055e4:	4602      	mov	r2, r0
 80055e6:	4b3a      	ldr	r3, [pc, #232]	; (80056d0 <rotate_L90+0x158>)
 80055e8:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 80055ea:	4b31      	ldr	r3, [pc, #196]	; (80056b0 <rotate_L90+0x138>)
 80055ec:	edd3 7a00 	vldr	s15, [r3]
 80055f0:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80056c8 <rotate_L90+0x150>
 80055f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80055f8:	ee16 0a90 	vmov	r0, s13
 80055fc:	f7fa ff9c 	bl	8000538 <__aeabi_f2d>
 8005600:	a329      	add	r3, pc, #164	; (adr r3, 80056a8 <rotate_L90+0x130>)
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	f7fa ffef 	bl	80005e8 <__aeabi_dmul>
 800560a:	4603      	mov	r3, r0
 800560c:	460c      	mov	r4, r1
 800560e:	4618      	mov	r0, r3
 8005610:	4621      	mov	r1, r4
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	4b2d      	ldr	r3, [pc, #180]	; (80056cc <rotate_L90+0x154>)
 8005618:	f7fa ffe6 	bl	80005e8 <__aeabi_dmul>
 800561c:	4603      	mov	r3, r0
 800561e:	460c      	mov	r4, r1
 8005620:	4618      	mov	r0, r3
 8005622:	4621      	mov	r1, r4
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800562c:	f7fb f906 	bl	800083c <__aeabi_ddiv>
 8005630:	4603      	mov	r3, r0
 8005632:	460c      	mov	r4, r1
 8005634:	4618      	mov	r0, r3
 8005636:	4621      	mov	r1, r4
 8005638:	f7fb fa86 	bl	8000b48 <__aeabi_d2f>
 800563c:	4602      	mov	r2, r0
 800563e:	4b25      	ldr	r3, [pc, #148]	; (80056d4 <rotate_L90+0x15c>)
 8005640:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005642:	f7ff fa97 	bl	8004b74 <drive_start>
	control_stop();
 8005646:	f7ff fb11 	bl	8004c6c <control_stop>
	while(degree_z < 80);
 800564a:	bf00      	nop
 800564c:	4b22      	ldr	r3, [pc, #136]	; (80056d8 <rotate_L90+0x160>)
 800564e:	edd3 7a00 	vldr	s15, [r3]
 8005652:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80056dc <rotate_L90+0x164>
 8005656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800565a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800565e:	d4f5      	bmi.n	800564c <rotate_L90+0xd4>
	drive_stop();
 8005660:	f7ff fabc 	bl	8004bdc <drive_stop>

	accel_l = -3000;
 8005664:	4b14      	ldr	r3, [pc, #80]	; (80056b8 <rotate_L90+0x140>)
 8005666:	4a15      	ldr	r2, [pc, #84]	; (80056bc <rotate_L90+0x144>)
 8005668:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 800566a:	4b15      	ldr	r3, [pc, #84]	; (80056c0 <rotate_L90+0x148>)
 800566c:	4a15      	ldr	r2, [pc, #84]	; (80056c4 <rotate_L90+0x14c>)
 800566e:	601a      	str	r2, [r3, #0]
	speed_min_l = -100;
 8005670:	4b17      	ldr	r3, [pc, #92]	; (80056d0 <rotate_L90+0x158>)
 8005672:	4a1b      	ldr	r2, [pc, #108]	; (80056e0 <rotate_L90+0x168>)
 8005674:	601a      	str	r2, [r3, #0]
	speed_max_r = 100;
 8005676:	4b17      	ldr	r3, [pc, #92]	; (80056d4 <rotate_L90+0x15c>)
 8005678:	4a1a      	ldr	r2, [pc, #104]	; (80056e4 <rotate_L90+0x16c>)
 800567a:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 800567c:	f7ff fa7a 	bl	8004b74 <drive_start>
	while(degree_z < 90-80);
 8005680:	bf00      	nop
 8005682:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <rotate_L90+0x160>)
 8005684:	edd3 7a00 	vldr	s15, [r3]
 8005688:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800568c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005694:	d4f5      	bmi.n	8005682 <rotate_L90+0x10a>

	turn_dir(DIR_TURN_L90);									//マイクロマウス内部位置情報でも左回転処理
 8005696:	20ff      	movs	r0, #255	; 0xff
 8005698:	f004 fcc8 	bl	800a02c <turn_dir>
	drive_stop();
 800569c:	f7ff fa9e 	bl	8004bdc <drive_stop>
}
 80056a0:	bf00      	nop
 80056a2:	bd98      	pop	{r3, r4, r7, pc}
 80056a4:	f3af 8000 	nop.w
 80056a8:	54442d18 	.word	0x54442d18
 80056ac:	400921fb 	.word	0x400921fb
 80056b0:	20000184 	.word	0x20000184
 80056b4:	44480000 	.word	0x44480000
 80056b8:	20000c2c 	.word	0x20000c2c
 80056bc:	c53b8000 	.word	0xc53b8000
 80056c0:	200009bc 	.word	0x200009bc
 80056c4:	453b8000 	.word	0x453b8000
 80056c8:	43340000 	.word	0x43340000
 80056cc:	40508000 	.word	0x40508000
 80056d0:	20000a2c 	.word	0x20000a2c
 80056d4:	20000180 	.word	0x20000180
 80056d8:	20000a34 	.word	0x20000a34
 80056dc:	42a00000 	.word	0x42a00000
 80056e0:	c2c80000 	.word	0xc2c80000
 80056e4:	42c80000 	.word	0x42c80000

080056e8 <rotate_180>:
//rotate_180
//a180度回転する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 80056e8:	b598      	push	{r3, r4, r7, lr}
 80056ea:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 80056ec:	4b4c      	ldr	r3, [pc, #304]	; (8005820 <rotate_180+0x138>)
 80056ee:	4a4d      	ldr	r2, [pc, #308]	; (8005824 <rotate_180+0x13c>)
 80056f0:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 80056f2:	4b4d      	ldr	r3, [pc, #308]	; (8005828 <rotate_180+0x140>)
 80056f4:	4a4d      	ldr	r2, [pc, #308]	; (800582c <rotate_180+0x144>)
 80056f6:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 80056f8:	4b4d      	ldr	r3, [pc, #308]	; (8005830 <rotate_180+0x148>)
 80056fa:	4a4e      	ldr	r2, [pc, #312]	; (8005834 <rotate_180+0x14c>)
 80056fc:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 80056fe:	4b48      	ldr	r3, [pc, #288]	; (8005820 <rotate_180+0x138>)
 8005700:	edd3 7a00 	vldr	s15, [r3]
 8005704:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8005838 <rotate_180+0x150>
 8005708:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800570c:	ee16 0a90 	vmov	r0, s13
 8005710:	f7fa ff12 	bl	8000538 <__aeabi_f2d>
 8005714:	a340      	add	r3, pc, #256	; (adr r3, 8005818 <rotate_180+0x130>)
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f7fa ff65 	bl	80005e8 <__aeabi_dmul>
 800571e:	4603      	mov	r3, r0
 8005720:	460c      	mov	r4, r1
 8005722:	4618      	mov	r0, r3
 8005724:	4621      	mov	r1, r4
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	4b44      	ldr	r3, [pc, #272]	; (800583c <rotate_180+0x154>)
 800572c:	f7fa ff5c 	bl	80005e8 <__aeabi_dmul>
 8005730:	4603      	mov	r3, r0
 8005732:	460c      	mov	r4, r1
 8005734:	4618      	mov	r0, r3
 8005736:	4621      	mov	r1, r4
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005740:	f7fb f87c 	bl	800083c <__aeabi_ddiv>
 8005744:	4603      	mov	r3, r0
 8005746:	460c      	mov	r4, r1
 8005748:	4618      	mov	r0, r3
 800574a:	4621      	mov	r1, r4
 800574c:	f7fb f9fc 	bl	8000b48 <__aeabi_d2f>
 8005750:	4602      	mov	r2, r0
 8005752:	4b3b      	ldr	r3, [pc, #236]	; (8005840 <rotate_180+0x158>)
 8005754:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 8005756:	4b32      	ldr	r3, [pc, #200]	; (8005820 <rotate_180+0x138>)
 8005758:	edd3 7a00 	vldr	s15, [r3]
 800575c:	eef1 7a67 	vneg.f32	s15, s15
 8005760:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8005838 <rotate_180+0x150>
 8005764:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005768:	ee16 0a90 	vmov	r0, s13
 800576c:	f7fa fee4 	bl	8000538 <__aeabi_f2d>
 8005770:	a329      	add	r3, pc, #164	; (adr r3, 8005818 <rotate_180+0x130>)
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	f7fa ff37 	bl	80005e8 <__aeabi_dmul>
 800577a:	4603      	mov	r3, r0
 800577c:	460c      	mov	r4, r1
 800577e:	4618      	mov	r0, r3
 8005780:	4621      	mov	r1, r4
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	4b2d      	ldr	r3, [pc, #180]	; (800583c <rotate_180+0x154>)
 8005788:	f7fa ff2e 	bl	80005e8 <__aeabi_dmul>
 800578c:	4603      	mov	r3, r0
 800578e:	460c      	mov	r4, r1
 8005790:	4618      	mov	r0, r3
 8005792:	4621      	mov	r1, r4
 8005794:	f04f 0200 	mov.w	r2, #0
 8005798:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800579c:	f7fb f84e 	bl	800083c <__aeabi_ddiv>
 80057a0:	4603      	mov	r3, r0
 80057a2:	460c      	mov	r4, r1
 80057a4:	4618      	mov	r0, r3
 80057a6:	4621      	mov	r1, r4
 80057a8:	f7fb f9ce 	bl	8000b48 <__aeabi_d2f>
 80057ac:	4602      	mov	r2, r0
 80057ae:	4b25      	ldr	r3, [pc, #148]	; (8005844 <rotate_180+0x15c>)
 80057b0:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80057b2:	f7ff f9df 	bl	8004b74 <drive_start>
	control_stop();
 80057b6:	f7ff fa59 	bl	8004c6c <control_stop>
	while(degree_z > -170);
 80057ba:	bf00      	nop
 80057bc:	4b22      	ldr	r3, [pc, #136]	; (8005848 <rotate_180+0x160>)
 80057be:	edd3 7a00 	vldr	s15, [r3]
 80057c2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800584c <rotate_180+0x164>
 80057c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ce:	dcf5      	bgt.n	80057bc <rotate_180+0xd4>
	drive_stop();
 80057d0:	f7ff fa04 	bl	8004bdc <drive_stop>

	accel_l = 3000;
 80057d4:	4b14      	ldr	r3, [pc, #80]	; (8005828 <rotate_180+0x140>)
 80057d6:	4a15      	ldr	r2, [pc, #84]	; (800582c <rotate_180+0x144>)
 80057d8:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 80057da:	4b15      	ldr	r3, [pc, #84]	; (8005830 <rotate_180+0x148>)
 80057dc:	4a15      	ldr	r2, [pc, #84]	; (8005834 <rotate_180+0x14c>)
 80057de:	601a      	str	r2, [r3, #0]
	speed_max_l = 100;
 80057e0:	4b17      	ldr	r3, [pc, #92]	; (8005840 <rotate_180+0x158>)
 80057e2:	4a1b      	ldr	r2, [pc, #108]	; (8005850 <rotate_180+0x168>)
 80057e4:	601a      	str	r2, [r3, #0]
	speed_min_r = -100;
 80057e6:	4b17      	ldr	r3, [pc, #92]	; (8005844 <rotate_180+0x15c>)
 80057e8:	4a1a      	ldr	r2, [pc, #104]	; (8005854 <rotate_180+0x16c>)
 80057ea:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 80057ec:	f7ff f9c2 	bl	8004b74 <drive_start>
	while(degree_z > -180+170);
 80057f0:	bf00      	nop
 80057f2:	4b15      	ldr	r3, [pc, #84]	; (8005848 <rotate_180+0x160>)
 80057f4:	edd3 7a00 	vldr	s15, [r3]
 80057f8:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80057fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005804:	dcf5      	bgt.n	80057f2 <rotate_180+0x10a>

	turn_dir(DIR_TURN_180);									//マイクロマウス内部位置情報でも180度回転処理
 8005806:	2002      	movs	r0, #2
 8005808:	f004 fc10 	bl	800a02c <turn_dir>
	drive_stop();
 800580c:	f7ff f9e6 	bl	8004bdc <drive_stop>
}
 8005810:	bf00      	nop
 8005812:	bd98      	pop	{r3, r4, r7, pc}
 8005814:	f3af 8000 	nop.w
 8005818:	54442d18 	.word	0x54442d18
 800581c:	400921fb 	.word	0x400921fb
 8005820:	20000184 	.word	0x20000184
 8005824:	44480000 	.word	0x44480000
 8005828:	20000c2c 	.word	0x20000c2c
 800582c:	453b8000 	.word	0x453b8000
 8005830:	200009bc 	.word	0x200009bc
 8005834:	c53b8000 	.word	0xc53b8000
 8005838:	43340000 	.word	0x43340000
 800583c:	40508000 	.word	0x40508000
 8005840:	20000654 	.word	0x20000654
 8005844:	20000e3c 	.word	0x20000e3c
 8005848:	20000a34 	.word	0x20000a34
 800584c:	c32a0000 	.word	0xc32a0000
 8005850:	42c80000 	.word	0x42c80000
 8005854:	c2c80000 	.word	0xc2c80000

08005858 <slalom_R90>:
//slalom_R90
//aスラロームで左に90度回転する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
	full_led_write(5);
 800585c:	2005      	movs	r0, #5
 800585e:	f005 fc99 	bl	800b194 <full_led_write>
	MF.FLAG.GYRO = 0;
 8005862:	4a6b      	ldr	r2, [pc, #428]	; (8005a10 <slalom_R90+0x1b8>)
 8005864:	8813      	ldrh	r3, [r2, #0]
 8005866:	f36f 2308 	bfc	r3, #8, #1
 800586a:	8013      	strh	r3, [r2, #0]

	accel_l = 3000;
 800586c:	4b69      	ldr	r3, [pc, #420]	; (8005a14 <slalom_R90+0x1bc>)
 800586e:	4a6a      	ldr	r2, [pc, #424]	; (8005a18 <slalom_R90+0x1c0>)
 8005870:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8005872:	4b6a      	ldr	r3, [pc, #424]	; (8005a1c <slalom_R90+0x1c4>)
 8005874:	4a68      	ldr	r2, [pc, #416]	; (8005a18 <slalom_R90+0x1c0>)
 8005876:	601a      	str	r2, [r3, #0]
	speed_max_l = 400;
 8005878:	4b69      	ldr	r3, [pc, #420]	; (8005a20 <slalom_R90+0x1c8>)
 800587a:	4a6a      	ldr	r2, [pc, #424]	; (8005a24 <slalom_R90+0x1cc>)
 800587c:	601a      	str	r2, [r3, #0]
	speed_max_r = 400;
 800587e:	4b6a      	ldr	r3, [pc, #424]	; (8005a28 <slalom_R90+0x1d0>)
 8005880:	4a68      	ldr	r2, [pc, #416]	; (8005a24 <slalom_R90+0x1cc>)
 8005882:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005884:	f7ff f976 	bl	8004b74 <drive_start>
	control_start();
 8005888:	f7ff f9d6 	bl	8004c38 <control_start>
	while(dist_l < 18 && dist_r < 18);
 800588c:	bf00      	nop
 800588e:	4b67      	ldr	r3, [pc, #412]	; (8005a2c <slalom_R90+0x1d4>)
 8005890:	edd3 7a00 	vldr	s15, [r3]
 8005894:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800589c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a0:	d509      	bpl.n	80058b6 <slalom_R90+0x5e>
 80058a2:	4b63      	ldr	r3, [pc, #396]	; (8005a30 <slalom_R90+0x1d8>)
 80058a4:	edd3 7a00 	vldr	s15, [r3]
 80058a8:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80058ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b4:	d4eb      	bmi.n	800588e <slalom_R90+0x36>
	drive_stop();
 80058b6:	f7ff f991 	bl	8004bdc <drive_stop>
	control_stop();
 80058ba:	f7ff f9d7 	bl	8004c6c <control_stop>

	MF.FLAG.GYRO = 1;
 80058be:	4a54      	ldr	r2, [pc, #336]	; (8005a10 <slalom_R90+0x1b8>)
 80058c0:	8813      	ldrh	r3, [r2, #0]
 80058c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c6:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 4000;
 80058c8:	4b5a      	ldr	r3, [pc, #360]	; (8005a34 <slalom_R90+0x1dc>)
 80058ca:	4a5b      	ldr	r2, [pc, #364]	; (8005a38 <slalom_R90+0x1e0>)
 80058cc:	601a      	str	r2, [r3, #0]
	omega_max = 550;
 80058ce:	4b5b      	ldr	r3, [pc, #364]	; (8005a3c <slalom_R90+0x1e4>)
 80058d0:	4a5b      	ldr	r2, [pc, #364]	; (8005a40 <slalom_R90+0x1e8>)
 80058d2:	601a      	str	r2, [r3, #0]
	speed_G = 400;
 80058d4:	4b5b      	ldr	r3, [pc, #364]	; (8005a44 <slalom_R90+0x1ec>)
 80058d6:	4a53      	ldr	r2, [pc, #332]	; (8005a24 <slalom_R90+0x1cc>)
 80058d8:	601a      	str	r2, [r3, #0]

	degree_z = 0;				//a機体角度の初期化
 80058da:	4b5b      	ldr	r3, [pc, #364]	; (8005a48 <slalom_R90+0x1f0>)
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 80058e2:	f04f 0300 	mov.w	r3, #0
 80058e6:	4a59      	ldr	r2, [pc, #356]	; (8005a4c <slalom_R90+0x1f4>)
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	4a59      	ldr	r2, [pc, #356]	; (8005a50 <slalom_R90+0x1f8>)
 80058ec:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 80058ee:	4a48      	ldr	r2, [pc, #288]	; (8005a10 <slalom_R90+0x1b8>)
 80058f0:	8813      	ldrh	r3, [r2, #0]
 80058f2:	f043 0302 	orr.w	r3, r3, #2
 80058f6:	8013      	strh	r3, [r2, #0]
	while(degree_z > -38.087);
 80058f8:	bf00      	nop
 80058fa:	4b53      	ldr	r3, [pc, #332]	; (8005a48 <slalom_R90+0x1f0>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fa fe1a 	bl	8000538 <__aeabi_f2d>
 8005904:	a340      	add	r3, pc, #256	; (adr r3, 8005a08 <slalom_R90+0x1b0>)
 8005906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590a:	f7fb f8fd 	bl	8000b08 <__aeabi_dcmpgt>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1f2      	bne.n	80058fa <slalom_R90+0xa2>

	MF.FLAG.GYRO = 1;
 8005914:	4a3e      	ldr	r2, [pc, #248]	; (8005a10 <slalom_R90+0x1b8>)
 8005916:	8813      	ldrh	r3, [r2, #0]
 8005918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800591c:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 0;
 800591e:	4b45      	ldr	r3, [pc, #276]	; (8005a34 <slalom_R90+0x1dc>)
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	601a      	str	r2, [r3, #0]

	degree_z = 0;				//a機体角度の初期化
 8005926:	4b48      	ldr	r3, [pc, #288]	; (8005a48 <slalom_R90+0x1f0>)
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	601a      	str	r2, [r3, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	4a46      	ldr	r2, [pc, #280]	; (8005a4c <slalom_R90+0x1f4>)
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	4a46      	ldr	r2, [pc, #280]	; (8005a50 <slalom_R90+0x1f8>)
 8005938:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 800593a:	4a35      	ldr	r2, [pc, #212]	; (8005a10 <slalom_R90+0x1b8>)
 800593c:	8813      	ldrh	r3, [r2, #0]
 800593e:	f043 0302 	orr.w	r3, r3, #2
 8005942:	8013      	strh	r3, [r2, #0]
	while(degree_z > -20);
 8005944:	bf00      	nop
 8005946:	4b40      	ldr	r3, [pc, #256]	; (8005a48 <slalom_R90+0x1f0>)
 8005948:	edd3 7a00 	vldr	s15, [r3]
 800594c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8005950:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005958:	dcf5      	bgt.n	8005946 <slalom_R90+0xee>

	MF.FLAG.GYRO = 1;
 800595a:	4a2d      	ldr	r2, [pc, #180]	; (8005a10 <slalom_R90+0x1b8>)
 800595c:	8813      	ldrh	r3, [r2, #0]
 800595e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005962:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -4000;
 8005964:	4b33      	ldr	r3, [pc, #204]	; (8005a34 <slalom_R90+0x1dc>)
 8005966:	4a3b      	ldr	r2, [pc, #236]	; (8005a54 <slalom_R90+0x1fc>)
 8005968:	601a      	str	r2, [r3, #0]

	degree_z = 0;				//a機体角度の初期化
 800596a:	4b37      	ldr	r3, [pc, #220]	; (8005a48 <slalom_R90+0x1f0>)
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	601a      	str	r2, [r3, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8005972:	f04f 0300 	mov.w	r3, #0
 8005976:	4a35      	ldr	r2, [pc, #212]	; (8005a4c <slalom_R90+0x1f4>)
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	4a35      	ldr	r2, [pc, #212]	; (8005a50 <slalom_R90+0x1f8>)
 800597c:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 800597e:	4a24      	ldr	r2, [pc, #144]	; (8005a10 <slalom_R90+0x1b8>)
 8005980:	8813      	ldrh	r3, [r2, #0]
 8005982:	f043 0302 	orr.w	r3, r3, #2
 8005986:	8013      	strh	r3, [r2, #0]
	while(degree_z > -30);
 8005988:	bf00      	nop
 800598a:	4b2f      	ldr	r3, [pc, #188]	; (8005a48 <slalom_R90+0x1f0>)
 800598c:	edd3 7a00 	vldr	s15, [r3]
 8005990:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8005994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800599c:	dcf5      	bgt.n	800598a <slalom_R90+0x132>

	MF.FLAG.GYRO = 0;
 800599e:	4a1c      	ldr	r2, [pc, #112]	; (8005a10 <slalom_R90+0x1b8>)
 80059a0:	8813      	ldrh	r3, [r2, #0]
 80059a2:	f36f 2308 	bfc	r3, #8, #1
 80059a6:	8013      	strh	r3, [r2, #0]

	accel_l = 3000;
 80059a8:	4b1a      	ldr	r3, [pc, #104]	; (8005a14 <slalom_R90+0x1bc>)
 80059aa:	4a1b      	ldr	r2, [pc, #108]	; (8005a18 <slalom_R90+0x1c0>)
 80059ac:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 80059ae:	4b1b      	ldr	r3, [pc, #108]	; (8005a1c <slalom_R90+0x1c4>)
 80059b0:	4a19      	ldr	r2, [pc, #100]	; (8005a18 <slalom_R90+0x1c0>)
 80059b2:	601a      	str	r2, [r3, #0]
	speed_max_l = 400;
 80059b4:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <slalom_R90+0x1c8>)
 80059b6:	4a1b      	ldr	r2, [pc, #108]	; (8005a24 <slalom_R90+0x1cc>)
 80059b8:	601a      	str	r2, [r3, #0]
	speed_max_r = 400;
 80059ba:	4b1b      	ldr	r3, [pc, #108]	; (8005a28 <slalom_R90+0x1d0>)
 80059bc:	4a19      	ldr	r2, [pc, #100]	; (8005a24 <slalom_R90+0x1cc>)
 80059be:	601a      	str	r2, [r3, #0]
	drive_start();											//走行開始
 80059c0:	f7ff f8d8 	bl	8004b74 <drive_start>
	control_start();
 80059c4:	f7ff f938 	bl	8004c38 <control_start>
	while(dist_l < 18 && dist_r < 18);
 80059c8:	bf00      	nop
 80059ca:	4b18      	ldr	r3, [pc, #96]	; (8005a2c <slalom_R90+0x1d4>)
 80059cc:	edd3 7a00 	vldr	s15, [r3]
 80059d0:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80059d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059dc:	d509      	bpl.n	80059f2 <slalom_R90+0x19a>
 80059de:	4b14      	ldr	r3, [pc, #80]	; (8005a30 <slalom_R90+0x1d8>)
 80059e0:	edd3 7a00 	vldr	s15, [r3]
 80059e4:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80059e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f0:	d4eb      	bmi.n	80059ca <slalom_R90+0x172>
	turn_dir(DIR_TURN_R90);									//マイクロマウス内部位置情報でも左回転処理
 80059f2:	2001      	movs	r0, #1
 80059f4:	f004 fb1a 	bl	800a02c <turn_dir>
	get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 80059f8:	f005 fb58 	bl	800b0ac <get_wall_info>
	drive_stop();
 80059fc:	f7ff f8ee 	bl	8004bdc <drive_stop>
}
 8005a00:	bf00      	nop
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	f3af 8000 	nop.w
 8005a08:	d0e56042 	.word	0xd0e56042
 8005a0c:	c0430b22 	.word	0xc0430b22
 8005a10:	20000e38 	.word	0x20000e38
 8005a14:	20000c2c 	.word	0x20000c2c
 8005a18:	453b8000 	.word	0x453b8000
 8005a1c:	200009bc 	.word	0x200009bc
 8005a20:	20000654 	.word	0x20000654
 8005a24:	43c80000 	.word	0x43c80000
 8005a28:	20000180 	.word	0x20000180
 8005a2c:	20000e54 	.word	0x20000e54
 8005a30:	200009c4 	.word	0x200009c4
 8005a34:	20000a30 	.word	0x20000a30
 8005a38:	457a0000 	.word	0x457a0000
 8005a3c:	200009c0 	.word	0x200009c0
 8005a40:	44098000 	.word	0x44098000
 8005a44:	200009cc 	.word	0x200009cc
 8005a48:	20000a34 	.word	0x20000a34
 8005a4c:	20000658 	.word	0x20000658
 8005a50:	20000a7c 	.word	0x20000a7c
 8005a54:	c57a0000 	.word	0xc57a0000

08005a58 <slalom_L90>:
//slalom_L90
//aスラロームで右に90度回転する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
	full_led_write(6);
 8005a5c:	2006      	movs	r0, #6
 8005a5e:	f005 fb99 	bl	800b194 <full_led_write>
	MF.FLAG.GYRO = 0;
 8005a62:	4a6d      	ldr	r2, [pc, #436]	; (8005c18 <slalom_L90+0x1c0>)
 8005a64:	8813      	ldrh	r3, [r2, #0]
 8005a66:	f36f 2308 	bfc	r3, #8, #1
 8005a6a:	8013      	strh	r3, [r2, #0]

	accel_l = 3000;
 8005a6c:	4b6b      	ldr	r3, [pc, #428]	; (8005c1c <slalom_L90+0x1c4>)
 8005a6e:	4a6c      	ldr	r2, [pc, #432]	; (8005c20 <slalom_L90+0x1c8>)
 8005a70:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8005a72:	4b6c      	ldr	r3, [pc, #432]	; (8005c24 <slalom_L90+0x1cc>)
 8005a74:	4a6a      	ldr	r2, [pc, #424]	; (8005c20 <slalom_L90+0x1c8>)
 8005a76:	601a      	str	r2, [r3, #0]
	speed_max_l = 400;
 8005a78:	4b6b      	ldr	r3, [pc, #428]	; (8005c28 <slalom_L90+0x1d0>)
 8005a7a:	4a6c      	ldr	r2, [pc, #432]	; (8005c2c <slalom_L90+0x1d4>)
 8005a7c:	601a      	str	r2, [r3, #0]
	speed_max_r = 400;
 8005a7e:	4b6c      	ldr	r3, [pc, #432]	; (8005c30 <slalom_L90+0x1d8>)
 8005a80:	4a6a      	ldr	r2, [pc, #424]	; (8005c2c <slalom_L90+0x1d4>)
 8005a82:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005a84:	f7ff f876 	bl	8004b74 <drive_start>
	control_start();
 8005a88:	f7ff f8d6 	bl	8004c38 <control_start>
	while(dist_l < 18 && dist_r < 18);
 8005a8c:	bf00      	nop
 8005a8e:	4b69      	ldr	r3, [pc, #420]	; (8005c34 <slalom_L90+0x1dc>)
 8005a90:	edd3 7a00 	vldr	s15, [r3]
 8005a94:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa0:	d509      	bpl.n	8005ab6 <slalom_L90+0x5e>
 8005aa2:	4b65      	ldr	r3, [pc, #404]	; (8005c38 <slalom_L90+0x1e0>)
 8005aa4:	edd3 7a00 	vldr	s15, [r3]
 8005aa8:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab4:	d4eb      	bmi.n	8005a8e <slalom_L90+0x36>
	drive_stop();
 8005ab6:	f7ff f891 	bl	8004bdc <drive_stop>
	control_stop();
 8005aba:	f7ff f8d7 	bl	8004c6c <control_stop>

	MF.FLAG.GYRO = 1;
 8005abe:	4a56      	ldr	r2, [pc, #344]	; (8005c18 <slalom_L90+0x1c0>)
 8005ac0:	8813      	ldrh	r3, [r2, #0]
 8005ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac6:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -4000;
 8005ac8:	4b5c      	ldr	r3, [pc, #368]	; (8005c3c <slalom_L90+0x1e4>)
 8005aca:	4a5d      	ldr	r2, [pc, #372]	; (8005c40 <slalom_L90+0x1e8>)
 8005acc:	601a      	str	r2, [r3, #0]
	omega_min = -550;
 8005ace:	4b5d      	ldr	r3, [pc, #372]	; (8005c44 <slalom_L90+0x1ec>)
 8005ad0:	4a5d      	ldr	r2, [pc, #372]	; (8005c48 <slalom_L90+0x1f0>)
 8005ad2:	601a      	str	r2, [r3, #0]
	speed_G = 400;
 8005ad4:	4b5d      	ldr	r3, [pc, #372]	; (8005c4c <slalom_L90+0x1f4>)
 8005ad6:	4a55      	ldr	r2, [pc, #340]	; (8005c2c <slalom_L90+0x1d4>)
 8005ad8:	601a      	str	r2, [r3, #0]

	degree_z = 0;				//a機体角度の初期化
 8005ada:	4b5d      	ldr	r3, [pc, #372]	; (8005c50 <slalom_L90+0x1f8>)
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8005ae2:	f04f 0300 	mov.w	r3, #0
 8005ae6:	4a5b      	ldr	r2, [pc, #364]	; (8005c54 <slalom_L90+0x1fc>)
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	4a5b      	ldr	r2, [pc, #364]	; (8005c58 <slalom_L90+0x200>)
 8005aec:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8005aee:	4a4a      	ldr	r2, [pc, #296]	; (8005c18 <slalom_L90+0x1c0>)
 8005af0:	8813      	ldrh	r3, [r2, #0]
 8005af2:	f043 0302 	orr.w	r3, r3, #2
 8005af6:	8013      	strh	r3, [r2, #0]
	while(degree_z < 38.087);
 8005af8:	bf00      	nop
 8005afa:	4b55      	ldr	r3, [pc, #340]	; (8005c50 <slalom_L90+0x1f8>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fa fd1a 	bl	8000538 <__aeabi_f2d>
 8005b04:	a342      	add	r3, pc, #264	; (adr r3, 8005c10 <slalom_L90+0x1b8>)
 8005b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0a:	f7fa ffdf 	bl	8000acc <__aeabi_dcmplt>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1f2      	bne.n	8005afa <slalom_L90+0xa2>
	drive_stop();
 8005b14:	f7ff f862 	bl	8004bdc <drive_stop>

	MF.FLAG.GYRO = 1;
 8005b18:	4a3f      	ldr	r2, [pc, #252]	; (8005c18 <slalom_L90+0x1c0>)
 8005b1a:	8813      	ldrh	r3, [r2, #0]
 8005b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b20:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 0;
 8005b22:	4b46      	ldr	r3, [pc, #280]	; (8005c3c <slalom_L90+0x1e4>)
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]

	degree_z = 0;				//a機体角度の初期化
 8005b2a:	4b49      	ldr	r3, [pc, #292]	; (8005c50 <slalom_L90+0x1f8>)
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8005b32:	f04f 0300 	mov.w	r3, #0
 8005b36:	4a47      	ldr	r2, [pc, #284]	; (8005c54 <slalom_L90+0x1fc>)
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	4a47      	ldr	r2, [pc, #284]	; (8005c58 <slalom_L90+0x200>)
 8005b3c:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8005b3e:	4a36      	ldr	r2, [pc, #216]	; (8005c18 <slalom_L90+0x1c0>)
 8005b40:	8813      	ldrh	r3, [r2, #0]
 8005b42:	f043 0302 	orr.w	r3, r3, #2
 8005b46:	8013      	strh	r3, [r2, #0]
	while(degree_z < 21);
 8005b48:	bf00      	nop
 8005b4a:	4b41      	ldr	r3, [pc, #260]	; (8005c50 <slalom_L90+0x1f8>)
 8005b4c:	edd3 7a00 	vldr	s15, [r3]
 8005b50:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8005b54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b5c:	d4f5      	bmi.n	8005b4a <slalom_L90+0xf2>
	drive_stop();
 8005b5e:	f7ff f83d 	bl	8004bdc <drive_stop>

	MF.FLAG.GYRO = 1;
 8005b62:	4a2d      	ldr	r2, [pc, #180]	; (8005c18 <slalom_L90+0x1c0>)
 8005b64:	8813      	ldrh	r3, [r2, #0]
 8005b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b6a:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 4000;
 8005b6c:	4b33      	ldr	r3, [pc, #204]	; (8005c3c <slalom_L90+0x1e4>)
 8005b6e:	4a3b      	ldr	r2, [pc, #236]	; (8005c5c <slalom_L90+0x204>)
 8005b70:	601a      	str	r2, [r3, #0]

	degree_z = 0;				//a機体角度の初期化
 8005b72:	4b37      	ldr	r3, [pc, #220]	; (8005c50 <slalom_L90+0x1f8>)
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	601a      	str	r2, [r3, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8005b7a:	f04f 0300 	mov.w	r3, #0
 8005b7e:	4a35      	ldr	r2, [pc, #212]	; (8005c54 <slalom_L90+0x1fc>)
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	4a35      	ldr	r2, [pc, #212]	; (8005c58 <slalom_L90+0x200>)
 8005b84:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8005b86:	4a24      	ldr	r2, [pc, #144]	; (8005c18 <slalom_L90+0x1c0>)
 8005b88:	8813      	ldrh	r3, [r2, #0]
 8005b8a:	f043 0302 	orr.w	r3, r3, #2
 8005b8e:	8013      	strh	r3, [r2, #0]
	while(degree_z < 30);
 8005b90:	bf00      	nop
 8005b92:	4b2f      	ldr	r3, [pc, #188]	; (8005c50 <slalom_L90+0x1f8>)
 8005b94:	edd3 7a00 	vldr	s15, [r3]
 8005b98:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba4:	d4f5      	bmi.n	8005b92 <slalom_L90+0x13a>
	drive_stop();
 8005ba6:	f7ff f819 	bl	8004bdc <drive_stop>

	MF.FLAG.GYRO = 0;
 8005baa:	4a1b      	ldr	r2, [pc, #108]	; (8005c18 <slalom_L90+0x1c0>)
 8005bac:	8813      	ldrh	r3, [r2, #0]
 8005bae:	f36f 2308 	bfc	r3, #8, #1
 8005bb2:	8013      	strh	r3, [r2, #0]

	accel_l = 3000;
 8005bb4:	4b19      	ldr	r3, [pc, #100]	; (8005c1c <slalom_L90+0x1c4>)
 8005bb6:	4a1a      	ldr	r2, [pc, #104]	; (8005c20 <slalom_L90+0x1c8>)
 8005bb8:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8005bba:	4b1a      	ldr	r3, [pc, #104]	; (8005c24 <slalom_L90+0x1cc>)
 8005bbc:	4a18      	ldr	r2, [pc, #96]	; (8005c20 <slalom_L90+0x1c8>)
 8005bbe:	601a      	str	r2, [r3, #0]
	speed_max_l = 400;
 8005bc0:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <slalom_L90+0x1d0>)
 8005bc2:	4a1a      	ldr	r2, [pc, #104]	; (8005c2c <slalom_L90+0x1d4>)
 8005bc4:	601a      	str	r2, [r3, #0]
	speed_max_r = 400;
 8005bc6:	4b1a      	ldr	r3, [pc, #104]	; (8005c30 <slalom_L90+0x1d8>)
 8005bc8:	4a18      	ldr	r2, [pc, #96]	; (8005c2c <slalom_L90+0x1d4>)
 8005bca:	601a      	str	r2, [r3, #0]
	drive_start();											//走行開始
 8005bcc:	f7fe ffd2 	bl	8004b74 <drive_start>
	control_start();
 8005bd0:	f7ff f832 	bl	8004c38 <control_start>
	while(dist_l < 18 && dist_r < 18);
 8005bd4:	bf00      	nop
 8005bd6:	4b17      	ldr	r3, [pc, #92]	; (8005c34 <slalom_L90+0x1dc>)
 8005bd8:	edd3 7a00 	vldr	s15, [r3]
 8005bdc:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be8:	d509      	bpl.n	8005bfe <slalom_L90+0x1a6>
 8005bea:	4b13      	ldr	r3, [pc, #76]	; (8005c38 <slalom_L90+0x1e0>)
 8005bec:	edd3 7a00 	vldr	s15, [r3]
 8005bf0:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8005bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bfc:	d4eb      	bmi.n	8005bd6 <slalom_L90+0x17e>
	turn_dir(DIR_TURN_L90);									//マイクロマウス内部位置情報でも左回転処理
 8005bfe:	20ff      	movs	r0, #255	; 0xff
 8005c00:	f004 fa14 	bl	800a02c <turn_dir>
	get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8005c04:	f005 fa52 	bl	800b0ac <get_wall_info>
	drive_stop();
 8005c08:	f7fe ffe8 	bl	8004bdc <drive_stop>
}
 8005c0c:	bf00      	nop
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	d0e56042 	.word	0xd0e56042
 8005c14:	40430b22 	.word	0x40430b22
 8005c18:	20000e38 	.word	0x20000e38
 8005c1c:	20000c2c 	.word	0x20000c2c
 8005c20:	453b8000 	.word	0x453b8000
 8005c24:	200009bc 	.word	0x200009bc
 8005c28:	20000654 	.word	0x20000654
 8005c2c:	43c80000 	.word	0x43c80000
 8005c30:	20000180 	.word	0x20000180
 8005c34:	20000e54 	.word	0x20000e54
 8005c38:	200009c4 	.word	0x200009c4
 8005c3c:	20000a30 	.word	0x20000a30
 8005c40:	c57a0000 	.word	0xc57a0000
 8005c44:	20000294 	.word	0x20000294
 8005c48:	c4098000 	.word	0xc4098000
 8005c4c:	200009cc 	.word	0x200009cc
 8005c50:	20000a34 	.word	0x20000a34
 8005c54:	20000658 	.word	0x20000658
 8005c58:	20000a7c 	.word	0x20000a7c
 8005c5c:	457a0000 	.word	0x457a0000

08005c60 <slalom_R902>:
//slalom_R90
//aスラロームで左に90度回転する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R902(void){
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
	//MF.FLAG.LOG = 1;

	MF.FLAG.GYRO = 0;
 8005c64:	4a5c      	ldr	r2, [pc, #368]	; (8005dd8 <slalom_R902+0x178>)
 8005c66:	8813      	ldrh	r3, [r2, #0]
 8005c68:	f36f 2308 	bfc	r3, #8, #1
 8005c6c:	8013      	strh	r3, [r2, #0]

	accel_l = 5000;
 8005c6e:	4b5b      	ldr	r3, [pc, #364]	; (8005ddc <slalom_R902+0x17c>)
 8005c70:	4a5b      	ldr	r2, [pc, #364]	; (8005de0 <slalom_R902+0x180>)
 8005c72:	601a      	str	r2, [r3, #0]
	accel_r = 5000;
 8005c74:	4b5b      	ldr	r3, [pc, #364]	; (8005de4 <slalom_R902+0x184>)
 8005c76:	4a5a      	ldr	r2, [pc, #360]	; (8005de0 <slalom_R902+0x180>)
 8005c78:	601a      	str	r2, [r3, #0]
	speed_max_l = 800;
 8005c7a:	4b5b      	ldr	r3, [pc, #364]	; (8005de8 <slalom_R902+0x188>)
 8005c7c:	4a5b      	ldr	r2, [pc, #364]	; (8005dec <slalom_R902+0x18c>)
 8005c7e:	601a      	str	r2, [r3, #0]
	speed_max_r = 800;
 8005c80:	4b5b      	ldr	r3, [pc, #364]	; (8005df0 <slalom_R902+0x190>)
 8005c82:	4a5a      	ldr	r2, [pc, #360]	; (8005dec <slalom_R902+0x18c>)
 8005c84:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005c86:	f7fe ff75 	bl	8004b74 <drive_start>
	control_start();
 8005c8a:	f7fe ffd5 	bl	8004c38 <control_start>
//	while(dist_l < 10 && dist_r < 10);
	drive_stop();
 8005c8e:	f7fe ffa5 	bl	8004bdc <drive_stop>
	control_stop();
 8005c92:	f7fe ffeb 	bl	8004c6c <control_stop>

	MF.FLAG.GYRO = 1;
 8005c96:	4a50      	ldr	r2, [pc, #320]	; (8005dd8 <slalom_R902+0x178>)
 8005c98:	8813      	ldrh	r3, [r2, #0]
 8005c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c9e:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 20000;
 8005ca0:	4b54      	ldr	r3, [pc, #336]	; (8005df4 <slalom_R902+0x194>)
 8005ca2:	4a55      	ldr	r2, [pc, #340]	; (8005df8 <slalom_R902+0x198>)
 8005ca4:	601a      	str	r2, [r3, #0]
	omega_max = 800;
 8005ca6:	4b55      	ldr	r3, [pc, #340]	; (8005dfc <slalom_R902+0x19c>)
 8005ca8:	4a50      	ldr	r2, [pc, #320]	; (8005dec <slalom_R902+0x18c>)
 8005caa:	601a      	str	r2, [r3, #0]
	speed_G = 800;
 8005cac:	4b54      	ldr	r3, [pc, #336]	; (8005e00 <slalom_R902+0x1a0>)
 8005cae:	4a4f      	ldr	r2, [pc, #316]	; (8005dec <slalom_R902+0x18c>)
 8005cb0:	601a      	str	r2, [r3, #0]

	degree_z = 0;				//a機体角度の初期化
 8005cb2:	4b54      	ldr	r3, [pc, #336]	; (8005e04 <slalom_R902+0x1a4>)
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8005cba:	f04f 0300 	mov.w	r3, #0
 8005cbe:	4a52      	ldr	r2, [pc, #328]	; (8005e08 <slalom_R902+0x1a8>)
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	4a52      	ldr	r2, [pc, #328]	; (8005e0c <slalom_R902+0x1ac>)
 8005cc4:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8005cc6:	4a44      	ldr	r2, [pc, #272]	; (8005dd8 <slalom_R902+0x178>)
 8005cc8:	8813      	ldrh	r3, [r2, #0]
 8005cca:	f043 0302 	orr.w	r3, r3, #2
 8005cce:	8013      	strh	r3, [r2, #0]
	while(degree_z > -32);
 8005cd0:	bf00      	nop
 8005cd2:	4b4c      	ldr	r3, [pc, #304]	; (8005e04 <slalom_R902+0x1a4>)
 8005cd4:	edd3 7a00 	vldr	s15, [r3]
 8005cd8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8005e10 <slalom_R902+0x1b0>
 8005cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce4:	dcf5      	bgt.n	8005cd2 <slalom_R902+0x72>

	MF.FLAG.GYRO = 1;
 8005ce6:	4a3c      	ldr	r2, [pc, #240]	; (8005dd8 <slalom_R902+0x178>)
 8005ce8:	8813      	ldrh	r3, [r2, #0]
 8005cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cee:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 0;
 8005cf0:	4b40      	ldr	r3, [pc, #256]	; (8005df4 <slalom_R902+0x194>)
 8005cf2:	f04f 0200 	mov.w	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]

	degree_z = 0;				//a機体角度の初期化
 8005cf8:	4b42      	ldr	r3, [pc, #264]	; (8005e04 <slalom_R902+0x1a4>)
 8005cfa:	f04f 0200 	mov.w	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	4a40      	ldr	r2, [pc, #256]	; (8005e08 <slalom_R902+0x1a8>)
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	4a40      	ldr	r2, [pc, #256]	; (8005e0c <slalom_R902+0x1ac>)
 8005d0a:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8005d0c:	4a32      	ldr	r2, [pc, #200]	; (8005dd8 <slalom_R902+0x178>)
 8005d0e:	8813      	ldrh	r3, [r2, #0]
 8005d10:	f043 0302 	orr.w	r3, r3, #2
 8005d14:	8013      	strh	r3, [r2, #0]
	while(degree_z > -32);
 8005d16:	bf00      	nop
 8005d18:	4b3a      	ldr	r3, [pc, #232]	; (8005e04 <slalom_R902+0x1a4>)
 8005d1a:	edd3 7a00 	vldr	s15, [r3]
 8005d1e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8005e10 <slalom_R902+0x1b0>
 8005d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d2a:	dcf5      	bgt.n	8005d18 <slalom_R902+0xb8>

	MF.FLAG.GYRO = 1;
 8005d2c:	4a2a      	ldr	r2, [pc, #168]	; (8005dd8 <slalom_R902+0x178>)
 8005d2e:	8813      	ldrh	r3, [r2, #0]
 8005d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d34:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -20000;
 8005d36:	4b2f      	ldr	r3, [pc, #188]	; (8005df4 <slalom_R902+0x194>)
 8005d38:	4a36      	ldr	r2, [pc, #216]	; (8005e14 <slalom_R902+0x1b4>)
 8005d3a:	601a      	str	r2, [r3, #0]

	degree_z = 0;				//a機体角度の初期化
 8005d3c:	4b31      	ldr	r3, [pc, #196]	; (8005e04 <slalom_R902+0x1a4>)
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8005d44:	f04f 0300 	mov.w	r3, #0
 8005d48:	4a2f      	ldr	r2, [pc, #188]	; (8005e08 <slalom_R902+0x1a8>)
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	4a2f      	ldr	r2, [pc, #188]	; (8005e0c <slalom_R902+0x1ac>)
 8005d4e:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8005d50:	4a21      	ldr	r2, [pc, #132]	; (8005dd8 <slalom_R902+0x178>)
 8005d52:	8813      	ldrh	r3, [r2, #0]
 8005d54:	f043 0302 	orr.w	r3, r3, #2
 8005d58:	8013      	strh	r3, [r2, #0]
	while(degree_z > -14);
 8005d5a:	bf00      	nop
 8005d5c:	4b29      	ldr	r3, [pc, #164]	; (8005e04 <slalom_R902+0x1a4>)
 8005d5e:	edd3 7a00 	vldr	s15, [r3]
 8005d62:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8005d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6e:	dcf5      	bgt.n	8005d5c <slalom_R902+0xfc>

	MF.FLAG.GYRO = 0;
 8005d70:	4a19      	ldr	r2, [pc, #100]	; (8005dd8 <slalom_R902+0x178>)
 8005d72:	8813      	ldrh	r3, [r2, #0]
 8005d74:	f36f 2308 	bfc	r3, #8, #1
 8005d78:	8013      	strh	r3, [r2, #0]

	accel_l = 5000;
 8005d7a:	4b18      	ldr	r3, [pc, #96]	; (8005ddc <slalom_R902+0x17c>)
 8005d7c:	4a18      	ldr	r2, [pc, #96]	; (8005de0 <slalom_R902+0x180>)
 8005d7e:	601a      	str	r2, [r3, #0]
	accel_r = 5000;
 8005d80:	4b18      	ldr	r3, [pc, #96]	; (8005de4 <slalom_R902+0x184>)
 8005d82:	4a17      	ldr	r2, [pc, #92]	; (8005de0 <slalom_R902+0x180>)
 8005d84:	601a      	str	r2, [r3, #0]
	speed_max_l = 800;
 8005d86:	4b18      	ldr	r3, [pc, #96]	; (8005de8 <slalom_R902+0x188>)
 8005d88:	4a18      	ldr	r2, [pc, #96]	; (8005dec <slalom_R902+0x18c>)
 8005d8a:	601a      	str	r2, [r3, #0]
	speed_max_r = 800;
 8005d8c:	4b18      	ldr	r3, [pc, #96]	; (8005df0 <slalom_R902+0x190>)
 8005d8e:	4a17      	ldr	r2, [pc, #92]	; (8005dec <slalom_R902+0x18c>)
 8005d90:	601a      	str	r2, [r3, #0]
	drive_start();											//走行開始
 8005d92:	f7fe feef 	bl	8004b74 <drive_start>
	control_start();
 8005d96:	f7fe ff4f 	bl	8004c38 <control_start>
	while(dist_l < 34 && dist_r < 34);
 8005d9a:	bf00      	nop
 8005d9c:	4b1e      	ldr	r3, [pc, #120]	; (8005e18 <slalom_R902+0x1b8>)
 8005d9e:	edd3 7a00 	vldr	s15, [r3]
 8005da2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005e1c <slalom_R902+0x1bc>
 8005da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dae:	d509      	bpl.n	8005dc4 <slalom_R902+0x164>
 8005db0:	4b1b      	ldr	r3, [pc, #108]	; (8005e20 <slalom_R902+0x1c0>)
 8005db2:	edd3 7a00 	vldr	s15, [r3]
 8005db6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005e1c <slalom_R902+0x1bc>
 8005dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc2:	d4eb      	bmi.n	8005d9c <slalom_R902+0x13c>
	turn_dir(DIR_TURN_R90);									//マイクロマウス内部位置情報でも左回転処理
 8005dc4:	2001      	movs	r0, #1
 8005dc6:	f004 f931 	bl	800a02c <turn_dir>
	get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8005dca:	f005 f96f 	bl	800b0ac <get_wall_info>
	drive_stop();
 8005dce:	f7fe ff05 	bl	8004bdc <drive_stop>
}
 8005dd2:	bf00      	nop
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000e38 	.word	0x20000e38
 8005ddc:	20000c2c 	.word	0x20000c2c
 8005de0:	459c4000 	.word	0x459c4000
 8005de4:	200009bc 	.word	0x200009bc
 8005de8:	20000654 	.word	0x20000654
 8005dec:	44480000 	.word	0x44480000
 8005df0:	20000180 	.word	0x20000180
 8005df4:	20000a30 	.word	0x20000a30
 8005df8:	469c4000 	.word	0x469c4000
 8005dfc:	200009c0 	.word	0x200009c0
 8005e00:	200009cc 	.word	0x200009cc
 8005e04:	20000a34 	.word	0x20000a34
 8005e08:	20000658 	.word	0x20000658
 8005e0c:	20000a7c 	.word	0x20000a7c
 8005e10:	c2000000 	.word	0xc2000000
 8005e14:	c69c4000 	.word	0xc69c4000
 8005e18:	20000e54 	.word	0x20000e54
 8005e1c:	42080000 	.word	0x42080000
 8005e20:	200009c4 	.word	0x200009c4

08005e24 <slalom_L902>:
//slalom_L90
//aスラロームで右に90度回転する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L902(void){
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
	MF.FLAG.GYRO = 0;
 8005e28:	4a5f      	ldr	r2, [pc, #380]	; (8005fa8 <slalom_L902+0x184>)
 8005e2a:	8813      	ldrh	r3, [r2, #0]
 8005e2c:	f36f 2308 	bfc	r3, #8, #1
 8005e30:	8013      	strh	r3, [r2, #0]

	accel_l = 5000;
 8005e32:	4b5e      	ldr	r3, [pc, #376]	; (8005fac <slalom_L902+0x188>)
 8005e34:	4a5e      	ldr	r2, [pc, #376]	; (8005fb0 <slalom_L902+0x18c>)
 8005e36:	601a      	str	r2, [r3, #0]
	accel_r = 5000;
 8005e38:	4b5e      	ldr	r3, [pc, #376]	; (8005fb4 <slalom_L902+0x190>)
 8005e3a:	4a5d      	ldr	r2, [pc, #372]	; (8005fb0 <slalom_L902+0x18c>)
 8005e3c:	601a      	str	r2, [r3, #0]
	speed_max_l = 800;
 8005e3e:	4b5e      	ldr	r3, [pc, #376]	; (8005fb8 <slalom_L902+0x194>)
 8005e40:	4a5e      	ldr	r2, [pc, #376]	; (8005fbc <slalom_L902+0x198>)
 8005e42:	601a      	str	r2, [r3, #0]
	speed_max_r = 800;
 8005e44:	4b5e      	ldr	r3, [pc, #376]	; (8005fc0 <slalom_L902+0x19c>)
 8005e46:	4a5d      	ldr	r2, [pc, #372]	; (8005fbc <slalom_L902+0x198>)
 8005e48:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005e4a:	f7fe fe93 	bl	8004b74 <drive_start>
	control_start();
 8005e4e:	f7fe fef3 	bl	8004c38 <control_start>
//	while(dist_l < 18.5 && dist_r < 18.5);
	drive_stop();
 8005e52:	f7fe fec3 	bl	8004bdc <drive_stop>
	control_stop();
 8005e56:	f7fe ff09 	bl	8004c6c <control_stop>

	MF.FLAG.GYRO = 1;
 8005e5a:	4a53      	ldr	r2, [pc, #332]	; (8005fa8 <slalom_L902+0x184>)
 8005e5c:	8813      	ldrh	r3, [r2, #0]
 8005e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e62:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -20000;
 8005e64:	4b57      	ldr	r3, [pc, #348]	; (8005fc4 <slalom_L902+0x1a0>)
 8005e66:	4a58      	ldr	r2, [pc, #352]	; (8005fc8 <slalom_L902+0x1a4>)
 8005e68:	601a      	str	r2, [r3, #0]
	omega_min = -800;
 8005e6a:	4b58      	ldr	r3, [pc, #352]	; (8005fcc <slalom_L902+0x1a8>)
 8005e6c:	4a58      	ldr	r2, [pc, #352]	; (8005fd0 <slalom_L902+0x1ac>)
 8005e6e:	601a      	str	r2, [r3, #0]
	speed_G = 800;
 8005e70:	4b58      	ldr	r3, [pc, #352]	; (8005fd4 <slalom_L902+0x1b0>)
 8005e72:	4a52      	ldr	r2, [pc, #328]	; (8005fbc <slalom_L902+0x198>)
 8005e74:	601a      	str	r2, [r3, #0]

	degree_z = 0;				//a機体角度の初期化
 8005e76:	4b58      	ldr	r3, [pc, #352]	; (8005fd8 <slalom_L902+0x1b4>)
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	4a56      	ldr	r2, [pc, #344]	; (8005fdc <slalom_L902+0x1b8>)
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	4a56      	ldr	r2, [pc, #344]	; (8005fe0 <slalom_L902+0x1bc>)
 8005e88:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8005e8a:	4a47      	ldr	r2, [pc, #284]	; (8005fa8 <slalom_L902+0x184>)
 8005e8c:	8813      	ldrh	r3, [r2, #0]
 8005e8e:	f043 0302 	orr.w	r3, r3, #2
 8005e92:	8013      	strh	r3, [r2, #0]
	while(degree_z < 32);
 8005e94:	bf00      	nop
 8005e96:	4b50      	ldr	r3, [pc, #320]	; (8005fd8 <slalom_L902+0x1b4>)
 8005e98:	edd3 7a00 	vldr	s15, [r3]
 8005e9c:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8005fe4 <slalom_L902+0x1c0>
 8005ea0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea8:	d4f5      	bmi.n	8005e96 <slalom_L902+0x72>
	drive_stop();
 8005eaa:	f7fe fe97 	bl	8004bdc <drive_stop>

	MF.FLAG.GYRO = 1;
 8005eae:	4a3e      	ldr	r2, [pc, #248]	; (8005fa8 <slalom_L902+0x184>)
 8005eb0:	8813      	ldrh	r3, [r2, #0]
 8005eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eb6:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 0;
 8005eb8:	4b42      	ldr	r3, [pc, #264]	; (8005fc4 <slalom_L902+0x1a0>)
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]

	degree_z = 0;				//a機体角度の初期化
 8005ec0:	4b45      	ldr	r3, [pc, #276]	; (8005fd8 <slalom_L902+0x1b4>)
 8005ec2:	f04f 0200 	mov.w	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8005ec8:	f04f 0300 	mov.w	r3, #0
 8005ecc:	4a43      	ldr	r2, [pc, #268]	; (8005fdc <slalom_L902+0x1b8>)
 8005ece:	6013      	str	r3, [r2, #0]
 8005ed0:	4a43      	ldr	r2, [pc, #268]	; (8005fe0 <slalom_L902+0x1bc>)
 8005ed2:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8005ed4:	4a34      	ldr	r2, [pc, #208]	; (8005fa8 <slalom_L902+0x184>)
 8005ed6:	8813      	ldrh	r3, [r2, #0]
 8005ed8:	f043 0302 	orr.w	r3, r3, #2
 8005edc:	8013      	strh	r3, [r2, #0]
	while(degree_z < 34);
 8005ede:	bf00      	nop
 8005ee0:	4b3d      	ldr	r3, [pc, #244]	; (8005fd8 <slalom_L902+0x1b4>)
 8005ee2:	edd3 7a00 	vldr	s15, [r3]
 8005ee6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8005fe8 <slalom_L902+0x1c4>
 8005eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ef2:	d4f5      	bmi.n	8005ee0 <slalom_L902+0xbc>
	drive_stop();
 8005ef4:	f7fe fe72 	bl	8004bdc <drive_stop>

	MF.FLAG.GYRO = 1;
 8005ef8:	4a2b      	ldr	r2, [pc, #172]	; (8005fa8 <slalom_L902+0x184>)
 8005efa:	8813      	ldrh	r3, [r2, #0]
 8005efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f00:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 20000;
 8005f02:	4b30      	ldr	r3, [pc, #192]	; (8005fc4 <slalom_L902+0x1a0>)
 8005f04:	4a39      	ldr	r2, [pc, #228]	; (8005fec <slalom_L902+0x1c8>)
 8005f06:	601a      	str	r2, [r3, #0]

	degree_z = 0;				//a機体角度の初期化
 8005f08:	4b33      	ldr	r3, [pc, #204]	; (8005fd8 <slalom_L902+0x1b4>)
 8005f0a:	f04f 0200 	mov.w	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	4a31      	ldr	r2, [pc, #196]	; (8005fdc <slalom_L902+0x1b8>)
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	4a31      	ldr	r2, [pc, #196]	; (8005fe0 <slalom_L902+0x1bc>)
 8005f1a:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8005f1c:	4a22      	ldr	r2, [pc, #136]	; (8005fa8 <slalom_L902+0x184>)
 8005f1e:	8813      	ldrh	r3, [r2, #0]
 8005f20:	f043 0302 	orr.w	r3, r3, #2
 8005f24:	8013      	strh	r3, [r2, #0]
	while(degree_z < 14);
 8005f26:	bf00      	nop
 8005f28:	4b2b      	ldr	r3, [pc, #172]	; (8005fd8 <slalom_L902+0x1b4>)
 8005f2a:	edd3 7a00 	vldr	s15, [r3]
 8005f2e:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8005f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f3a:	d4f5      	bmi.n	8005f28 <slalom_L902+0x104>
	drive_stop();
 8005f3c:	f7fe fe4e 	bl	8004bdc <drive_stop>

	MF.FLAG.GYRO = 0;
 8005f40:	4a19      	ldr	r2, [pc, #100]	; (8005fa8 <slalom_L902+0x184>)
 8005f42:	8813      	ldrh	r3, [r2, #0]
 8005f44:	f36f 2308 	bfc	r3, #8, #1
 8005f48:	8013      	strh	r3, [r2, #0]

	accel_l = 5000;
 8005f4a:	4b18      	ldr	r3, [pc, #96]	; (8005fac <slalom_L902+0x188>)
 8005f4c:	4a18      	ldr	r2, [pc, #96]	; (8005fb0 <slalom_L902+0x18c>)
 8005f4e:	601a      	str	r2, [r3, #0]
	accel_r = 5000;
 8005f50:	4b18      	ldr	r3, [pc, #96]	; (8005fb4 <slalom_L902+0x190>)
 8005f52:	4a17      	ldr	r2, [pc, #92]	; (8005fb0 <slalom_L902+0x18c>)
 8005f54:	601a      	str	r2, [r3, #0]
	speed_max_l = 800;
 8005f56:	4b18      	ldr	r3, [pc, #96]	; (8005fb8 <slalom_L902+0x194>)
 8005f58:	4a18      	ldr	r2, [pc, #96]	; (8005fbc <slalom_L902+0x198>)
 8005f5a:	601a      	str	r2, [r3, #0]
	speed_max_r = 800;
 8005f5c:	4b18      	ldr	r3, [pc, #96]	; (8005fc0 <slalom_L902+0x19c>)
 8005f5e:	4a17      	ldr	r2, [pc, #92]	; (8005fbc <slalom_L902+0x198>)
 8005f60:	601a      	str	r2, [r3, #0]
	drive_start();											//走行開始
 8005f62:	f7fe fe07 	bl	8004b74 <drive_start>
	control_start();
 8005f66:	f7fe fe67 	bl	8004c38 <control_start>
	while(dist_l < 34 && dist_r < 34);
 8005f6a:	bf00      	nop
 8005f6c:	4b20      	ldr	r3, [pc, #128]	; (8005ff0 <slalom_L902+0x1cc>)
 8005f6e:	edd3 7a00 	vldr	s15, [r3]
 8005f72:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005fe8 <slalom_L902+0x1c4>
 8005f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f7e:	d509      	bpl.n	8005f94 <slalom_L902+0x170>
 8005f80:	4b1c      	ldr	r3, [pc, #112]	; (8005ff4 <slalom_L902+0x1d0>)
 8005f82:	edd3 7a00 	vldr	s15, [r3]
 8005f86:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005fe8 <slalom_L902+0x1c4>
 8005f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f92:	d4eb      	bmi.n	8005f6c <slalom_L902+0x148>
	turn_dir(DIR_TURN_L90);									//マイクロマウス内部位置情報でも左回転処理
 8005f94:	20ff      	movs	r0, #255	; 0xff
 8005f96:	f004 f849 	bl	800a02c <turn_dir>
	get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
 8005f9a:	f005 f887 	bl	800b0ac <get_wall_info>
	drive_stop();
 8005f9e:	f7fe fe1d 	bl	8004bdc <drive_stop>
}
 8005fa2:	bf00      	nop
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000e38 	.word	0x20000e38
 8005fac:	20000c2c 	.word	0x20000c2c
 8005fb0:	459c4000 	.word	0x459c4000
 8005fb4:	200009bc 	.word	0x200009bc
 8005fb8:	20000654 	.word	0x20000654
 8005fbc:	44480000 	.word	0x44480000
 8005fc0:	20000180 	.word	0x20000180
 8005fc4:	20000a30 	.word	0x20000a30
 8005fc8:	c69c4000 	.word	0xc69c4000
 8005fcc:	20000294 	.word	0x20000294
 8005fd0:	c4480000 	.word	0xc4480000
 8005fd4:	200009cc 	.word	0x200009cc
 8005fd8:	20000a34 	.word	0x20000a34
 8005fdc:	20000658 	.word	0x20000658
 8005fe0:	20000a7c 	.word	0x20000a7c
 8005fe4:	42000000 	.word	0x42000000
 8005fe8:	42080000 	.word	0x42080000
 8005fec:	469c4000 	.word	0x469c4000
 8005ff0:	20000e54 	.word	0x20000e54
 8005ff4:	200009c4 	.word	0x200009c4

08005ff8 <v_R45>:
//v_R45
//a区画中心から左に45度回転する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45(void){
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
	//MF.FLAG.LOG = 1;

	full_led_write(2);
 8005ffc:	2002      	movs	r0, #2
 8005ffe:	f005 f8c9 	bl	800b194 <full_led_write>
	MF.FLAG.GYRO = 0;
 8006002:	4a53      	ldr	r2, [pc, #332]	; (8006150 <v_R45+0x158>)
 8006004:	8813      	ldrh	r3, [r2, #0]
 8006006:	f36f 2308 	bfc	r3, #8, #1
 800600a:	8013      	strh	r3, [r2, #0]

	accel_l = 5000;
 800600c:	4b51      	ldr	r3, [pc, #324]	; (8006154 <v_R45+0x15c>)
 800600e:	4a52      	ldr	r2, [pc, #328]	; (8006158 <v_R45+0x160>)
 8006010:	601a      	str	r2, [r3, #0]
	accel_r = 5000;
 8006012:	4b52      	ldr	r3, [pc, #328]	; (800615c <v_R45+0x164>)
 8006014:	4a50      	ldr	r2, [pc, #320]	; (8006158 <v_R45+0x160>)
 8006016:	601a      	str	r2, [r3, #0]
	speed_max_l = 600;
 8006018:	4b51      	ldr	r3, [pc, #324]	; (8006160 <v_R45+0x168>)
 800601a:	4a52      	ldr	r2, [pc, #328]	; (8006164 <v_R45+0x16c>)
 800601c:	601a      	str	r2, [r3, #0]
	speed_max_r = 600;
 800601e:	4b52      	ldr	r3, [pc, #328]	; (8006168 <v_R45+0x170>)
 8006020:	4a50      	ldr	r2, [pc, #320]	; (8006164 <v_R45+0x16c>)
 8006022:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8006024:	f7fe fda6 	bl	8004b74 <drive_start>
//	control_start();
	while(dist_l < 25 && dist_r < 25);
 8006028:	bf00      	nop
 800602a:	4b50      	ldr	r3, [pc, #320]	; (800616c <v_R45+0x174>)
 800602c:	edd3 7a00 	vldr	s15, [r3]
 8006030:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006034:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800603c:	d509      	bpl.n	8006052 <v_R45+0x5a>
 800603e:	4b4c      	ldr	r3, [pc, #304]	; (8006170 <v_R45+0x178>)
 8006040:	edd3 7a00 	vldr	s15, [r3]
 8006044:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800604c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006050:	d4eb      	bmi.n	800602a <v_R45+0x32>
	drive_stop();
 8006052:	f7fe fdc3 	bl	8004bdc <drive_stop>
	control_stop();
 8006056:	f7fe fe09 	bl	8004c6c <control_stop>

	full_led_write(3);
 800605a:	2003      	movs	r0, #3
 800605c:	f005 f89a 	bl	800b194 <full_led_write>
	MF.FLAG.GYRO = 1;
 8006060:	4a3b      	ldr	r2, [pc, #236]	; (8006150 <v_R45+0x158>)
 8006062:	8813      	ldrh	r3, [r2, #0]
 8006064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006068:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 6000;
 800606a:	4b42      	ldr	r3, [pc, #264]	; (8006174 <v_R45+0x17c>)
 800606c:	4a42      	ldr	r2, [pc, #264]	; (8006178 <v_R45+0x180>)
 800606e:	601a      	str	r2, [r3, #0]
	omega_max = 300;
 8006070:	4b42      	ldr	r3, [pc, #264]	; (800617c <v_R45+0x184>)
 8006072:	4a43      	ldr	r2, [pc, #268]	; (8006180 <v_R45+0x188>)
 8006074:	601a      	str	r2, [r3, #0]
	speed_G = 600;
 8006076:	4b43      	ldr	r3, [pc, #268]	; (8006184 <v_R45+0x18c>)
 8006078:	4a3a      	ldr	r2, [pc, #232]	; (8006164 <v_R45+0x16c>)
 800607a:	601a      	str	r2, [r3, #0]

	degree_z = 0;				//a機体角度の初期化
 800607c:	4b42      	ldr	r3, [pc, #264]	; (8006188 <v_R45+0x190>)
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	601a      	str	r2, [r3, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8006084:	f04f 0300 	mov.w	r3, #0
 8006088:	4a40      	ldr	r2, [pc, #256]	; (800618c <v_R45+0x194>)
 800608a:	6013      	str	r3, [r2, #0]
 800608c:	4a40      	ldr	r2, [pc, #256]	; (8006190 <v_R45+0x198>)
 800608e:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8006090:	4a2f      	ldr	r2, [pc, #188]	; (8006150 <v_R45+0x158>)
 8006092:	8813      	ldrh	r3, [r2, #0]
 8006094:	f043 0302 	orr.w	r3, r3, #2
 8006098:	8013      	strh	r3, [r2, #0]
	while(degree_z > -7.5);
 800609a:	bf00      	nop
 800609c:	4b3a      	ldr	r3, [pc, #232]	; (8006188 <v_R45+0x190>)
 800609e:	edd3 7a00 	vldr	s15, [r3]
 80060a2:	eeb9 7a0e 	vmov.f32	s14, #158	; 0xc0f00000 -7.5
 80060a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ae:	dcf5      	bgt.n	800609c <v_R45+0xa4>

	full_led_write(4);
 80060b0:	2004      	movs	r0, #4
 80060b2:	f005 f86f 	bl	800b194 <full_led_write>
	MF.FLAG.GYRO = 1;
 80060b6:	4a26      	ldr	r2, [pc, #152]	; (8006150 <v_R45+0x158>)
 80060b8:	8813      	ldrh	r3, [r2, #0]
 80060ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060be:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = 0;
 80060c0:	4b2c      	ldr	r3, [pc, #176]	; (8006174 <v_R45+0x17c>)
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//a機体角度の初期化
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 80060c8:	f04f 0300 	mov.w	r3, #0
 80060cc:	4a2f      	ldr	r2, [pc, #188]	; (800618c <v_R45+0x194>)
 80060ce:	6013      	str	r3, [r2, #0]
 80060d0:	4a2f      	ldr	r2, [pc, #188]	; (8006190 <v_R45+0x198>)
 80060d2:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 80060d4:	4a1e      	ldr	r2, [pc, #120]	; (8006150 <v_R45+0x158>)
 80060d6:	8813      	ldrh	r3, [r2, #0]
 80060d8:	f043 0302 	orr.w	r3, r3, #2
 80060dc:	8013      	strh	r3, [r2, #0]
	while(degree_z > -37.5);
 80060de:	bf00      	nop
 80060e0:	4b29      	ldr	r3, [pc, #164]	; (8006188 <v_R45+0x190>)
 80060e2:	edd3 7a00 	vldr	s15, [r3]
 80060e6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006194 <v_R45+0x19c>
 80060ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f2:	dcf5      	bgt.n	80060e0 <v_R45+0xe8>

	full_led_write(5);
 80060f4:	2005      	movs	r0, #5
 80060f6:	f005 f84d 	bl	800b194 <full_led_write>
	MF.FLAG.GYRO = 1;
 80060fa:	4a15      	ldr	r2, [pc, #84]	; (8006150 <v_R45+0x158>)
 80060fc:	8813      	ldrh	r3, [r2, #0]
 80060fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006102:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -6000;
 8006104:	4b1b      	ldr	r3, [pc, #108]	; (8006174 <v_R45+0x17c>)
 8006106:	4a24      	ldr	r2, [pc, #144]	; (8006198 <v_R45+0x1a0>)
 8006108:	601a      	str	r2, [r3, #0]

//	degree_z = 0;				//a機体角度の初期化
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 800610a:	f04f 0300 	mov.w	r3, #0
 800610e:	4a1f      	ldr	r2, [pc, #124]	; (800618c <v_R45+0x194>)
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	4a1f      	ldr	r2, [pc, #124]	; (8006190 <v_R45+0x198>)
 8006114:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8006116:	4a0e      	ldr	r2, [pc, #56]	; (8006150 <v_R45+0x158>)
 8006118:	8813      	ldrh	r3, [r2, #0]
 800611a:	f043 0302 	orr.w	r3, r3, #2
 800611e:	8013      	strh	r3, [r2, #0]
	while(degree_z > -45);
 8006120:	bf00      	nop
 8006122:	4b19      	ldr	r3, [pc, #100]	; (8006188 <v_R45+0x190>)
 8006124:	edd3 7a00 	vldr	s15, [r3]
 8006128:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800619c <v_R45+0x1a4>
 800612c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006134:	dcf5      	bgt.n	8006122 <v_R45+0x12a>

	full_led_write(6);
 8006136:	2006      	movs	r0, #6
 8006138:	f005 f82c 	bl	800b194 <full_led_write>
	MF.FLAG.GYRO = 0;
 800613c:	4a04      	ldr	r2, [pc, #16]	; (8006150 <v_R45+0x158>)
 800613e:	8813      	ldrh	r3, [r2, #0]
 8006140:	f36f 2308 	bfc	r3, #8, #1
 8006144:	8013      	strh	r3, [r2, #0]
	drive_start();											//走行開始
	control_start();
	while(dist_l < 34 && dist_r < 34);
	turn_dir(DIR_TURN_R90);									//マイクロマウス内部位置情報でも左回転処理
	get_wall_info();										//壁情報を取得，片壁制御の有効・無効の判断
*/	drive_stop();
 8006146:	f7fe fd49 	bl	8004bdc <drive_stop>
}
 800614a:	bf00      	nop
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000e38 	.word	0x20000e38
 8006154:	20000c2c 	.word	0x20000c2c
 8006158:	459c4000 	.word	0x459c4000
 800615c:	200009bc 	.word	0x200009bc
 8006160:	20000654 	.word	0x20000654
 8006164:	44160000 	.word	0x44160000
 8006168:	20000180 	.word	0x20000180
 800616c:	20000e54 	.word	0x20000e54
 8006170:	200009c4 	.word	0x200009c4
 8006174:	20000a30 	.word	0x20000a30
 8006178:	45bb8000 	.word	0x45bb8000
 800617c:	200009c0 	.word	0x200009c0
 8006180:	43960000 	.word	0x43960000
 8006184:	200009cc 	.word	0x200009cc
 8006188:	20000a34 	.word	0x20000a34
 800618c:	20000658 	.word	0x20000658
 8006190:	20000a7c 	.word	0x20000a7c
 8006194:	c2160000 	.word	0xc2160000
 8006198:	c5bb8000 	.word	0xc5bb8000
 800619c:	c2340000 	.word	0xc2340000

080061a0 <init_test>:
//init_test
//a初期基幹関数走行テスト
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0

	int mode = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	617b      	str	r3, [r7, #20]
	printf("Test Init Run, Mode : %d\n", mode);
 80061aa:	6979      	ldr	r1, [r7, #20]
 80061ac:	486b      	ldr	r0, [pc, #428]	; (800635c <init_test+0x1bc>)
 80061ae:	f005 fd7b 	bl	800bca8 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	b2d8      	uxtb	r0, r3
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	b2d9      	uxtb	r1, r3
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	f003 0304 	and.w	r3, r3, #4
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	461a      	mov	r2, r3
 80061d2:	f004 ffa5 	bl	800b120 <led_write>
		  if(dist_r >= 20){
 80061d6:	4b62      	ldr	r3, [pc, #392]	; (8006360 <init_test+0x1c0>)
 80061d8:	edd3 7a00 	vldr	s15, [r3]
 80061dc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80061e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e8:	db0f      	blt.n	800620a <init_test+0x6a>
			  mode++;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	3301      	adds	r3, #1
 80061ee:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 80061f0:	4b5b      	ldr	r3, [pc, #364]	; (8006360 <init_test+0x1c0>)
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	2b07      	cmp	r3, #7
 80061fc:	dd01      	ble.n	8006202 <init_test+0x62>
				  mode = 0;
 80061fe:	2300      	movs	r3, #0
 8006200:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 8006202:	6979      	ldr	r1, [r7, #20]
 8006204:	4857      	ldr	r0, [pc, #348]	; (8006364 <init_test+0x1c4>)
 8006206:	f005 fd4f 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800620a:	4b55      	ldr	r3, [pc, #340]	; (8006360 <init_test+0x1c0>)
 800620c:	edd3 7a00 	vldr	s15, [r3]
 8006210:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8006214:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800621c:	d80f      	bhi.n	800623e <init_test+0x9e>
			  mode--;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	3b01      	subs	r3, #1
 8006222:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 8006224:	4b4e      	ldr	r3, [pc, #312]	; (8006360 <init_test+0x1c0>)
 8006226:	f04f 0200 	mov.w	r2, #0
 800622a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2b00      	cmp	r3, #0
 8006230:	da01      	bge.n	8006236 <init_test+0x96>
				  mode = 7;
 8006232:	2307      	movs	r3, #7
 8006234:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 8006236:	6979      	ldr	r1, [r7, #20]
 8006238:	484a      	ldr	r0, [pc, #296]	; (8006364 <init_test+0x1c4>)
 800623a:	f005 fd35 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800623e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006242:	4849      	ldr	r0, [pc, #292]	; (8006368 <init_test+0x1c8>)
 8006244:	f7fc f81e 	bl	8002284 <HAL_GPIO_ReadPin>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1b1      	bne.n	80061b2 <init_test+0x12>
			  HAL_Delay(50);
 800624e:	2032      	movs	r0, #50	; 0x32
 8006250:	f7fa febc 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8006254:	bf00      	nop
 8006256:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800625a:	4843      	ldr	r0, [pc, #268]	; (8006368 <init_test+0x1c8>)
 800625c:	f7fc f812 	bl	8002284 <HAL_GPIO_ReadPin>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0f7      	beq.n	8006256 <init_test+0xb6>
			  switch(mode){
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b07      	cmp	r3, #7
 800626a:	d8a2      	bhi.n	80061b2 <init_test+0x12>
 800626c:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <init_test+0xd4>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	08006295 	.word	0x08006295
 8006278:	0800629b 	.word	0x0800629b
 800627c:	080062bb 	.word	0x080062bb
 8006280:	080062d9 	.word	0x080062d9
 8006284:	080062f7 	.word	0x080062f7
 8006288:	08006315 	.word	0x08006315
 800628c:	0800633b 	.word	0x0800633b
 8006290:	08006341 	.word	0x08006341
				case 0:
					get_base();
 8006294:	f004 feec 	bl	800b070 <get_base>
					break;
 8006298:	e05f      	b.n	800635a <init_test+0x1ba>
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 800629a:	4834      	ldr	r0, [pc, #208]	; (800636c <init_test+0x1cc>)
 800629c:	f005 fd78 	bl	800bd90 <puts>
					for(int i = 0; i < 1; i++){
 80062a0:	2300      	movs	r3, #0
 80062a2:	613b      	str	r3, [r7, #16]
 80062a4:	e005      	b.n	80062b2 <init_test+0x112>
						driveC(SEC_HALF*2);	//一区画のパルス分デフォルトインターバルで走行
 80062a6:	20b4      	movs	r0, #180	; 0xb4
 80062a8:	f7fe ff2e 	bl	8005108 <driveC>
					for(int i = 0; i < 1; i++){
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	3301      	adds	r3, #1
 80062b0:	613b      	str	r3, [r7, #16]
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	ddf6      	ble.n	80062a6 <init_test+0x106>
					}
					break;
 80062b8:	e04f      	b.n	800635a <init_test+0x1ba>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 80062ba:	482d      	ldr	r0, [pc, #180]	; (8006370 <init_test+0x1d0>)
 80062bc:	f005 fd68 	bl	800bd90 <puts>
					for(int i = 0; i < 16; i++){
 80062c0:	2300      	movs	r3, #0
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	e004      	b.n	80062d0 <init_test+0x130>
						rotate_R90();				//16回右90度回転、つまり4周回転
 80062c6:	f7ff f89f 	bl	8005408 <rotate_R90>
					for(int i = 0; i < 16; i++){
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3301      	adds	r3, #1
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2b0f      	cmp	r3, #15
 80062d4:	ddf7      	ble.n	80062c6 <init_test+0x126>
					}
					break;
 80062d6:	e040      	b.n	800635a <init_test+0x1ba>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 80062d8:	4826      	ldr	r0, [pc, #152]	; (8006374 <init_test+0x1d4>)
 80062da:	f005 fd59 	bl	800bd90 <puts>
					for(int i = 0; i < 16; i++){
 80062de:	2300      	movs	r3, #0
 80062e0:	60bb      	str	r3, [r7, #8]
 80062e2:	e004      	b.n	80062ee <init_test+0x14e>
						rotate_L90();				//16回左90度回転、つまり4周回転
 80062e4:	f7ff f948 	bl	8005578 <rotate_L90>
					for(int i = 0; i < 16; i++){
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	3301      	adds	r3, #1
 80062ec:	60bb      	str	r3, [r7, #8]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2b0f      	cmp	r3, #15
 80062f2:	ddf7      	ble.n	80062e4 <init_test+0x144>
					}
					break;
 80062f4:	e031      	b.n	800635a <init_test+0x1ba>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 80062f6:	4820      	ldr	r0, [pc, #128]	; (8006378 <init_test+0x1d8>)
 80062f8:	f005 fd4a 	bl	800bd90 <puts>
					for(int i = 0; i < 8; i++){
 80062fc:	2300      	movs	r3, #0
 80062fe:	607b      	str	r3, [r7, #4]
 8006300:	e004      	b.n	800630c <init_test+0x16c>
						rotate_180();				//8回右180度回転、つまり4周回転
 8006302:	f7ff f9f1 	bl	80056e8 <rotate_180>
					for(int i = 0; i < 8; i++){
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3301      	adds	r3, #1
 800630a:	607b      	str	r3, [r7, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b07      	cmp	r3, #7
 8006310:	ddf7      	ble.n	8006302 <init_test+0x162>
					}
					break;
 8006312:	e022      	b.n	800635a <init_test+0x1ba>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 8006314:	4819      	ldr	r0, [pc, #100]	; (800637c <init_test+0x1dc>)
 8006316:	f005 fd3b 	bl	800bd90 <puts>
					half_sectionA();				//半区画のパルス分加速しながら走行
 800631a:	f7fe ffb9 	bl	8005290 <half_sectionA>
					for(int i = 0; i < 2-1; i++){
 800631e:	2300      	movs	r3, #0
 8006320:	603b      	str	r3, [r7, #0]
 8006322:	e004      	b.n	800632e <init_test+0x18e>
						one_sectionU();			//一区画のパルス分等速走行
 8006324:	f7ff f862 	bl	80053ec <one_sectionU>
					for(int i = 0; i < 2-1; i++){
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	3301      	adds	r3, #1
 800632c:	603b      	str	r3, [r7, #0]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	ddf7      	ble.n	8006324 <init_test+0x184>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 8006334:	f7fe ffbc 	bl	80052b0 <half_sectionD>
					break;
 8006338:	e00f      	b.n	800635a <init_test+0x1ba>
				case 6:
					set_position();
 800633a:	f7fe ff7b 	bl	8005234 <set_position>
					break;
 800633e:	e00c      	b.n	800635a <init_test+0x1ba>
				case 7:
					target_degree_z = degree_z;
 8006340:	4b0f      	ldr	r3, [pc, #60]	; (8006380 <init_test+0x1e0>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a0f      	ldr	r2, [pc, #60]	; (8006384 <init_test+0x1e4>)
 8006346:	6013      	str	r3, [r2, #0]
					accel_l = 5000;
 8006348:	4b0f      	ldr	r3, [pc, #60]	; (8006388 <init_test+0x1e8>)
 800634a:	4a10      	ldr	r2, [pc, #64]	; (800638c <init_test+0x1ec>)
 800634c:	601a      	str	r2, [r3, #0]

					MF.FLAG.ENKAI = 1;
 800634e:	4a10      	ldr	r2, [pc, #64]	; (8006390 <init_test+0x1f0>)
 8006350:	8813      	ldrh	r3, [r2, #0]
 8006352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006356:	8013      	strh	r3, [r2, #0]

					while(1);
 8006358:	e7fe      	b.n	8006358 <init_test+0x1b8>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800635a:	e72a      	b.n	80061b2 <init_test+0x12>
 800635c:	0800cee4 	.word	0x0800cee4
 8006360:	200009c4 	.word	0x200009c4
 8006364:	0800cf00 	.word	0x0800cf00
 8006368:	40020000 	.word	0x40020000
 800636c:	0800cf0c 	.word	0x0800cf0c
 8006370:	0800cf30 	.word	0x0800cf30
 8006374:	0800cf3c 	.word	0x0800cf3c
 8006378:	0800cf48 	.word	0x0800cf48
 800637c:	0800cf54 	.word	0x0800cf54
 8006380:	20000a34 	.word	0x20000a34
 8006384:	20000acc 	.word	0x20000acc
 8006388:	20000c2c 	.word	0x20000c2c
 800638c:	459c4000 	.word	0x459c4000
 8006390:	20000e38 	.word	0x20000e38

08006394 <slalom_test>:
//slalom_test
//aスラローム走行テスト
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 8006394:	b580      	push	{r7, lr}
 8006396:	b08a      	sub	sp, #40	; 0x28
 8006398:	af00      	add	r7, sp, #0

	int mode = 0;
 800639a:	2300      	movs	r3, #0
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Test Slalom Run, Mode : %d\n", mode);
 800639e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063a0:	48a5      	ldr	r0, [pc, #660]	; (8006638 <slalom_test+0x2a4>)
 80063a2:	f005 fc81 	bl	800bca8 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	b2d8      	uxtb	r0, r3
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	b2d9      	uxtb	r1, r3
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	f003 0304 	and.w	r3, r3, #4
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	f004 feab 	bl	800b120 <led_write>
		  if(dist_r >= 20){
 80063ca:	4b9c      	ldr	r3, [pc, #624]	; (800663c <slalom_test+0x2a8>)
 80063cc:	edd3 7a00 	vldr	s15, [r3]
 80063d0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80063d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063dc:	db0f      	blt.n	80063fe <slalom_test+0x6a>
			  mode++;
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	3301      	adds	r3, #1
 80063e2:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 80063e4:	4b95      	ldr	r3, [pc, #596]	; (800663c <slalom_test+0x2a8>)
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	2b07      	cmp	r3, #7
 80063f0:	dd01      	ble.n	80063f6 <slalom_test+0x62>
				  mode = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 80063f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063f8:	4891      	ldr	r0, [pc, #580]	; (8006640 <slalom_test+0x2ac>)
 80063fa:	f005 fc55 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80063fe:	4b8f      	ldr	r3, [pc, #572]	; (800663c <slalom_test+0x2a8>)
 8006400:	edd3 7a00 	vldr	s15, [r3]
 8006404:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8006408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800640c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006410:	d80f      	bhi.n	8006432 <slalom_test+0x9e>
			  mode--;
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	3b01      	subs	r3, #1
 8006416:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8006418:	4b88      	ldr	r3, [pc, #544]	; (800663c <slalom_test+0x2a8>)
 800641a:	f04f 0200 	mov.w	r2, #0
 800641e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	2b00      	cmp	r3, #0
 8006424:	da01      	bge.n	800642a <slalom_test+0x96>
				  mode = 7;
 8006426:	2307      	movs	r3, #7
 8006428:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 800642a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800642c:	4884      	ldr	r0, [pc, #528]	; (8006640 <slalom_test+0x2ac>)
 800642e:	f005 fc3b 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8006432:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006436:	4883      	ldr	r0, [pc, #524]	; (8006644 <slalom_test+0x2b0>)
 8006438:	f7fb ff24 	bl	8002284 <HAL_GPIO_ReadPin>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1b1      	bne.n	80063a6 <slalom_test+0x12>
			  HAL_Delay(50);
 8006442:	2032      	movs	r0, #50	; 0x32
 8006444:	f7fa fdc2 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8006448:	bf00      	nop
 800644a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800644e:	487d      	ldr	r0, [pc, #500]	; (8006644 <slalom_test+0x2b0>)
 8006450:	f7fb ff18 	bl	8002284 <HAL_GPIO_ReadPin>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0f7      	beq.n	800644a <slalom_test+0xb6>
			  switch(mode){
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	2b07      	cmp	r3, #7
 800645e:	d8a2      	bhi.n	80063a6 <slalom_test+0x12>
 8006460:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <slalom_test+0xd4>)
 8006462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006466:	bf00      	nop
 8006468:	08006489 	.word	0x08006489
 800646c:	0800648f 	.word	0x0800648f
 8006470:	080064b9 	.word	0x080064b9
 8006474:	080064e3 	.word	0x080064e3
 8006478:	0800656b 	.word	0x0800656b
 800647c:	08006591 	.word	0x08006591
 8006480:	08006627 	.word	0x08006627
 8006484:	080066ef 	.word	0x080066ef
				case 0:
					get_base();
 8006488:	f004 fdf2 	bl	800b070 <get_base>
					break;
 800648c:	e14d      	b.n	800672a <slalom_test+0x396>
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 800648e:	486e      	ldr	r0, [pc, #440]	; (8006648 <slalom_test+0x2b4>)
 8006490:	f005 fc7e 	bl	800bd90 <puts>
					half_sectionA();
 8006494:	f7fe fefc 	bl	8005290 <half_sectionA>
					for(int i = 0; i < 8; i++){
 8006498:	2300      	movs	r3, #0
 800649a:	623b      	str	r3, [r7, #32]
 800649c:	e006      	b.n	80064ac <slalom_test+0x118>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 800649e:	f7ff f9db 	bl	8005858 <slalom_R90>
						one_sectionU();
 80064a2:	f7fe ffa3 	bl	80053ec <one_sectionU>
					for(int i = 0; i < 8; i++){
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	3301      	adds	r3, #1
 80064aa:	623b      	str	r3, [r7, #32]
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	2b07      	cmp	r3, #7
 80064b0:	ddf5      	ble.n	800649e <slalom_test+0x10a>
					}
					half_sectionD();
 80064b2:	f7fe fefd 	bl	80052b0 <half_sectionD>
					break;
 80064b6:	e138      	b.n	800672a <slalom_test+0x396>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 80064b8:	4864      	ldr	r0, [pc, #400]	; (800664c <slalom_test+0x2b8>)
 80064ba:	f005 fc69 	bl	800bd90 <puts>
					half_sectionA();
 80064be:	f7fe fee7 	bl	8005290 <half_sectionA>
					for(int i = 0; i < 8; i++){
 80064c2:	2300      	movs	r3, #0
 80064c4:	61fb      	str	r3, [r7, #28]
 80064c6:	e006      	b.n	80064d6 <slalom_test+0x142>
						slalom_L90();				//16回右90度回転、つまり4周回転
 80064c8:	f7ff fac6 	bl	8005a58 <slalom_L90>
						one_sectionU();
 80064cc:	f7fe ff8e 	bl	80053ec <one_sectionU>
					for(int i = 0; i < 8; i++){
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	3301      	adds	r3, #1
 80064d4:	61fb      	str	r3, [r7, #28]
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	2b07      	cmp	r3, #7
 80064da:	ddf5      	ble.n	80064c8 <slalom_test+0x134>
					}
					half_sectionD();
 80064dc:	f7fe fee8 	bl	80052b0 <half_sectionD>
					break;
 80064e0:	e123      	b.n	800672a <slalom_test+0x396>
				case 3:
					//----slalom右折----
					printf("slalom turn right .\n");
 80064e2:	4859      	ldr	r0, [pc, #356]	; (8006648 <slalom_test+0x2b4>)
 80064e4:	f005 fc54 	bl	800bd90 <puts>
					for(int i = 0; i < 1; i++){
 80064e8:	2300      	movs	r3, #0
 80064ea:	61bb      	str	r3, [r7, #24]
 80064ec:	e008      	b.n	8006500 <slalom_test+0x16c>
						half_sectionA();
 80064ee:	f7fe fecf 	bl	8005290 <half_sectionA>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 80064f2:	f7ff f9b1 	bl	8005858 <slalom_R90>
						half_sectionD();
 80064f6:	f7fe fedb 	bl	80052b0 <half_sectionD>
					for(int i = 0; i < 1; i++){
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	3301      	adds	r3, #1
 80064fe:	61bb      	str	r3, [r7, #24]
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	2b00      	cmp	r3, #0
 8006504:	ddf3      	ble.n	80064ee <slalom_test+0x15a>
					}
				//log print
					while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET);
 8006506:	bf00      	nop
 8006508:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800650c:	484d      	ldr	r0, [pc, #308]	; (8006644 <slalom_test+0x2b0>)
 800650e:	f7fb feb9 	bl	8002284 <HAL_GPIO_ReadPin>
 8006512:	4603      	mov	r3, r0
 8006514:	2b01      	cmp	r3, #1
 8006516:	d0f7      	beq.n	8006508 <slalom_test+0x174>

					for(int i=0; i<log_allay; i++){
 8006518:	2300      	movs	r3, #0
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	e00d      	b.n	800653a <slalom_test+0x1a6>
						printf("l:	%d\n", get_speed_l[i]);
 800651e:	4a4c      	ldr	r2, [pc, #304]	; (8006650 <slalom_test+0x2bc>)
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006526:	4619      	mov	r1, r3
 8006528:	484a      	ldr	r0, [pc, #296]	; (8006654 <slalom_test+0x2c0>)
 800652a:	f005 fbbd 	bl	800bca8 <iprintf>
						HAL_Delay(5);
 800652e:	2005      	movs	r0, #5
 8006530:	f7fa fd4c 	bl	8000fcc <HAL_Delay>
					for(int i=0; i<log_allay; i++){
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	3301      	adds	r3, #1
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2bc7      	cmp	r3, #199	; 0xc7
 800653e:	ddee      	ble.n	800651e <slalom_test+0x18a>
					}
					for(int i=0; i<log_allay; i++){
 8006540:	2300      	movs	r3, #0
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	e00d      	b.n	8006562 <slalom_test+0x1ce>
						printf("r:	%d\n", get_speed_r[i]);
 8006546:	4a44      	ldr	r2, [pc, #272]	; (8006658 <slalom_test+0x2c4>)
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800654e:	4619      	mov	r1, r3
 8006550:	4842      	ldr	r0, [pc, #264]	; (800665c <slalom_test+0x2c8>)
 8006552:	f005 fba9 	bl	800bca8 <iprintf>
						HAL_Delay(5);
 8006556:	2005      	movs	r0, #5
 8006558:	f7fa fd38 	bl	8000fcc <HAL_Delay>
					for(int i=0; i<log_allay; i++){
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	3301      	adds	r3, #1
 8006560:	613b      	str	r3, [r7, #16]
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	2bc7      	cmp	r3, #199	; 0xc7
 8006566:	ddee      	ble.n	8006546 <slalom_test+0x1b2>
					}
					break;
 8006568:	e0df      	b.n	800672a <slalom_test+0x396>
				case 4:
					//----slalom左折----
					printf("slalom turn left .\n");
 800656a:	4838      	ldr	r0, [pc, #224]	; (800664c <slalom_test+0x2b8>)
 800656c:	f005 fc10 	bl	800bd90 <puts>
					for(int i = 0; i < 8; i++){
 8006570:	2300      	movs	r3, #0
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	e008      	b.n	8006588 <slalom_test+0x1f4>
						half_sectionA();
 8006576:	f7fe fe8b 	bl	8005290 <half_sectionA>
						slalom_L90();				//16回右90度回転、つまり4周回転
 800657a:	f7ff fa6d 	bl	8005a58 <slalom_L90>
						half_sectionD();
 800657e:	f7fe fe97 	bl	80052b0 <half_sectionD>
					for(int i = 0; i < 8; i++){
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	3301      	adds	r3, #1
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b07      	cmp	r3, #7
 800658c:	ddf3      	ble.n	8006576 <slalom_test+0x1e2>
					}
					break;
 800658e:	e0cc      	b.n	800672a <slalom_test+0x396>
				case 5:
					//----slalom2右折----
					printf("slalom turn right .\n");
 8006590:	482d      	ldr	r0, [pc, #180]	; (8006648 <slalom_test+0x2b4>)
 8006592:	f005 fbfd 	bl	800bd90 <puts>
					half_sectionA();
 8006596:	f7fe fe7b 	bl	8005290 <half_sectionA>
					for(int i = 0; i < 8; i++){
 800659a:	2300      	movs	r3, #0
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	e02a      	b.n	80065f6 <slalom_test+0x262>
					    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80065a0:	2201      	movs	r2, #1
 80065a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065a6:	482e      	ldr	r0, [pc, #184]	; (8006660 <slalom_test+0x2cc>)
 80065a8:	f7fb fe84 	bl	80022b4 <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80065ac:	2200      	movs	r2, #0
 80065ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065b2:	482b      	ldr	r0, [pc, #172]	; (8006660 <slalom_test+0x2cc>)
 80065b4:	f7fb fe7e 	bl	80022b4 <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80065b8:	2201      	movs	r2, #1
 80065ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065be:	4829      	ldr	r0, [pc, #164]	; (8006664 <slalom_test+0x2d0>)
 80065c0:	f7fb fe78 	bl	80022b4 <HAL_GPIO_WritePin>
						slalom_R902();	//一区画のパルス分デフォルトインターバルで走行
 80065c4:	f7ff fb4c 	bl	8005c60 <slalom_R902>
					    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80065c8:	2201      	movs	r2, #1
 80065ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065ce:	4824      	ldr	r0, [pc, #144]	; (8006660 <slalom_test+0x2cc>)
 80065d0:	f7fb fe70 	bl	80022b4 <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80065d4:	2201      	movs	r2, #1
 80065d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065da:	4821      	ldr	r0, [pc, #132]	; (8006660 <slalom_test+0x2cc>)
 80065dc:	f7fb fe6a 	bl	80022b4 <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80065e0:	2200      	movs	r2, #0
 80065e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065e6:	481f      	ldr	r0, [pc, #124]	; (8006664 <slalom_test+0x2d0>)
 80065e8:	f7fb fe64 	bl	80022b4 <HAL_GPIO_WritePin>
						one_sectionU();
 80065ec:	f7fe fefe 	bl	80053ec <one_sectionU>
					for(int i = 0; i < 8; i++){
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	3301      	adds	r3, #1
 80065f4:	60bb      	str	r3, [r7, #8]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b07      	cmp	r3, #7
 80065fa:	ddd1      	ble.n	80065a0 <slalom_test+0x20c>
					}
				    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80065fc:	2200      	movs	r2, #0
 80065fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006602:	4817      	ldr	r0, [pc, #92]	; (8006660 <slalom_test+0x2cc>)
 8006604:	f7fb fe56 	bl	80022b4 <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8006608:	2201      	movs	r2, #1
 800660a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800660e:	4814      	ldr	r0, [pc, #80]	; (8006660 <slalom_test+0x2cc>)
 8006610:	f7fb fe50 	bl	80022b4 <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8006614:	2201      	movs	r2, #1
 8006616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800661a:	4812      	ldr	r0, [pc, #72]	; (8006664 <slalom_test+0x2d0>)
 800661c:	f7fb fe4a 	bl	80022b4 <HAL_GPIO_WritePin>
					half_sectionD();
 8006620:	f7fe fe46 	bl	80052b0 <half_sectionD>
					break;
 8006624:	e081      	b.n	800672a <slalom_test+0x396>
				case 6:
					//----slalom2右折----
					printf("slalom turn right .\n");
 8006626:	4808      	ldr	r0, [pc, #32]	; (8006648 <slalom_test+0x2b4>)
 8006628:	f005 fbb2 	bl	800bd90 <puts>
					half_sectionA();
 800662c:	f7fe fe30 	bl	8005290 <half_sectionA>
					for(int i = 0; i < 1; i++){
 8006630:	2300      	movs	r3, #0
 8006632:	607b      	str	r3, [r7, #4]
 8006634:	e043      	b.n	80066be <slalom_test+0x32a>
 8006636:	bf00      	nop
 8006638:	0800cf74 	.word	0x0800cf74
 800663c:	200009c4 	.word	0x200009c4
 8006640:	0800cf00 	.word	0x0800cf00
 8006644:	40020000 	.word	0x40020000
 8006648:	0800cf90 	.word	0x0800cf90
 800664c:	0800cfa4 	.word	0x0800cfa4
 8006650:	2000065c 	.word	0x2000065c
 8006654:	0800cfb8 	.word	0x0800cfb8
 8006658:	20000334 	.word	0x20000334
 800665c:	0800cfc0 	.word	0x0800cfc0
 8006660:	40020400 	.word	0x40020400
 8006664:	40020800 	.word	0x40020800
					    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8006668:	2201      	movs	r2, #1
 800666a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800666e:	482f      	ldr	r0, [pc, #188]	; (800672c <slalom_test+0x398>)
 8006670:	f7fb fe20 	bl	80022b4 <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8006674:	2200      	movs	r2, #0
 8006676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800667a:	482c      	ldr	r0, [pc, #176]	; (800672c <slalom_test+0x398>)
 800667c:	f7fb fe1a 	bl	80022b4 <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8006680:	2201      	movs	r2, #1
 8006682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006686:	482a      	ldr	r0, [pc, #168]	; (8006730 <slalom_test+0x39c>)
 8006688:	f7fb fe14 	bl	80022b4 <HAL_GPIO_WritePin>
						slalom_R902();	//一区画のパルス分デフォルトインターバルで走行
 800668c:	f7ff fae8 	bl	8005c60 <slalom_R902>
					    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8006690:	2201      	movs	r2, #1
 8006692:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006696:	4825      	ldr	r0, [pc, #148]	; (800672c <slalom_test+0x398>)
 8006698:	f7fb fe0c 	bl	80022b4 <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800669c:	2201      	movs	r2, #1
 800669e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066a2:	4822      	ldr	r0, [pc, #136]	; (800672c <slalom_test+0x398>)
 80066a4:	f7fb fe06 	bl	80022b4 <HAL_GPIO_WritePin>
					    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80066a8:	2200      	movs	r2, #0
 80066aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066ae:	4820      	ldr	r0, [pc, #128]	; (8006730 <slalom_test+0x39c>)
 80066b0:	f7fb fe00 	bl	80022b4 <HAL_GPIO_WritePin>
						one_sectionU();
 80066b4:	f7fe fe9a 	bl	80053ec <one_sectionU>
					for(int i = 0; i < 1; i++){
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3301      	adds	r3, #1
 80066bc:	607b      	str	r3, [r7, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	ddd1      	ble.n	8006668 <slalom_test+0x2d4>
					}
				    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80066c4:	2200      	movs	r2, #0
 80066c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066ca:	4818      	ldr	r0, [pc, #96]	; (800672c <slalom_test+0x398>)
 80066cc:	f7fb fdf2 	bl	80022b4 <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80066d0:	2201      	movs	r2, #1
 80066d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066d6:	4815      	ldr	r0, [pc, #84]	; (800672c <slalom_test+0x398>)
 80066d8:	f7fb fdec 	bl	80022b4 <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80066dc:	2201      	movs	r2, #1
 80066de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066e2:	4813      	ldr	r0, [pc, #76]	; (8006730 <slalom_test+0x39c>)
 80066e4:	f7fb fde6 	bl	80022b4 <HAL_GPIO_WritePin>
					half_sectionD();
 80066e8:	f7fe fde2 	bl	80052b0 <half_sectionD>
					break;
 80066ec:	e01d      	b.n	800672a <slalom_test+0x396>
				case 7:
					//----slalom2左折----
					printf("slalom turn left .\n");
 80066ee:	4811      	ldr	r0, [pc, #68]	; (8006734 <slalom_test+0x3a0>)
 80066f0:	f005 fb4e 	bl	800bd90 <puts>
					half_sectionA();
 80066f4:	f7fe fdcc 	bl	8005290 <half_sectionA>
					for(int i = 0; i < 8; i++){
 80066f8:	2300      	movs	r3, #0
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	e00c      	b.n	8006718 <slalom_test+0x384>
						full_led_write(1);
 80066fe:	2001      	movs	r0, #1
 8006700:	f004 fd48 	bl	800b194 <full_led_write>
						slalom_L902();				//16回右90度回転、つまり4周回転
 8006704:	f7ff fb8e 	bl	8005e24 <slalom_L902>
						full_led_write(2);
 8006708:	2002      	movs	r0, #2
 800670a:	f004 fd43 	bl	800b194 <full_led_write>
						one_sectionU();
 800670e:	f7fe fe6d 	bl	80053ec <one_sectionU>
					for(int i = 0; i < 8; i++){
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	3301      	adds	r3, #1
 8006716:	603b      	str	r3, [r7, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	2b07      	cmp	r3, #7
 800671c:	ddef      	ble.n	80066fe <slalom_test+0x36a>
					}
					full_led_write(3);
 800671e:	2003      	movs	r0, #3
 8006720:	f004 fd38 	bl	800b194 <full_led_write>
					half_sectionD();
 8006724:	f7fe fdc4 	bl	80052b0 <half_sectionD>
					break;
 8006728:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800672a:	e63c      	b.n	80063a6 <slalom_test+0x12>
 800672c:	40020400 	.word	0x40020400
 8006730:	40020800 	.word	0x40020800
 8006734:	0800cfa4 	.word	0x0800cfa4

08006738 <v_test>:
//v_test
//aスラローム走行テスト
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_test(void){
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0

	int mode = 0;
 800673e:	2300      	movs	r3, #0
 8006740:	607b      	str	r3, [r7, #4]
	printf("Test V Run, Mode : %d\n", mode);
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	4853      	ldr	r0, [pc, #332]	; (8006894 <v_test+0x15c>)
 8006746:	f005 faaf 	bl	800bca8 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	b2d8      	uxtb	r0, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	b2db      	uxtb	r3, r3
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	b2d9      	uxtb	r1, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	b2db      	uxtb	r3, r3
 8006768:	461a      	mov	r2, r3
 800676a:	f004 fcd9 	bl	800b120 <led_write>
		  if(dist_r >= 20){
 800676e:	4b4a      	ldr	r3, [pc, #296]	; (8006898 <v_test+0x160>)
 8006770:	edd3 7a00 	vldr	s15, [r3]
 8006774:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800677c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006780:	db0f      	blt.n	80067a2 <v_test+0x6a>
			  mode++;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3301      	adds	r3, #1
 8006786:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006788:	4b43      	ldr	r3, [pc, #268]	; (8006898 <v_test+0x160>)
 800678a:	f04f 0200 	mov.w	r2, #0
 800678e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b07      	cmp	r3, #7
 8006794:	dd01      	ble.n	800679a <v_test+0x62>
				  mode = 0;
 8006796:	2300      	movs	r3, #0
 8006798:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	483f      	ldr	r0, [pc, #252]	; (800689c <v_test+0x164>)
 800679e:	f005 fa83 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80067a2:	4b3d      	ldr	r3, [pc, #244]	; (8006898 <v_test+0x160>)
 80067a4:	edd3 7a00 	vldr	s15, [r3]
 80067a8:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80067ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b4:	d80f      	bhi.n	80067d6 <v_test+0x9e>
			  mode--;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80067bc:	4b36      	ldr	r3, [pc, #216]	; (8006898 <v_test+0x160>)
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	da01      	bge.n	80067ce <v_test+0x96>
				  mode = 7;
 80067ca:	2307      	movs	r3, #7
 80067cc:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	4832      	ldr	r0, [pc, #200]	; (800689c <v_test+0x164>)
 80067d2:	f005 fa69 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80067d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067da:	4831      	ldr	r0, [pc, #196]	; (80068a0 <v_test+0x168>)
 80067dc:	f7fb fd52 	bl	8002284 <HAL_GPIO_ReadPin>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1b1      	bne.n	800674a <v_test+0x12>
			  HAL_Delay(50);
 80067e6:	2032      	movs	r0, #50	; 0x32
 80067e8:	f7fa fbf0 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 80067ec:	bf00      	nop
 80067ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067f2:	482b      	ldr	r0, [pc, #172]	; (80068a0 <v_test+0x168>)
 80067f4:	f7fb fd46 	bl	8002284 <HAL_GPIO_ReadPin>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0f7      	beq.n	80067ee <v_test+0xb6>
			  while(ad_fl <= WALL_BASE_FL){
 80067fe:	e00f      	b.n	8006820 <v_test+0xe8>
				  led_write(1, 1, 1);
 8006800:	2201      	movs	r2, #1
 8006802:	2101      	movs	r1, #1
 8006804:	2001      	movs	r0, #1
 8006806:	f004 fc8b 	bl	800b120 <led_write>
				  HAL_Delay(200);
 800680a:	20c8      	movs	r0, #200	; 0xc8
 800680c:	f7fa fbde 	bl	8000fcc <HAL_Delay>
				  led_write(0, 0, 0);
 8006810:	2200      	movs	r2, #0
 8006812:	2100      	movs	r1, #0
 8006814:	2000      	movs	r0, #0
 8006816:	f004 fc83 	bl	800b120 <led_write>
				  HAL_Delay(200);
 800681a:	20c8      	movs	r0, #200	; 0xc8
 800681c:	f7fa fbd6 	bl	8000fcc <HAL_Delay>
			  while(ad_fl <= WALL_BASE_FL){
 8006820:	4b20      	ldr	r3, [pc, #128]	; (80068a4 <v_test+0x16c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b50      	cmp	r3, #80	; 0x50
 8006826:	d9eb      	bls.n	8006800 <v_test+0xc8>
			  }

			  switch(mode){
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b07      	cmp	r3, #7
 800682c:	d88d      	bhi.n	800674a <v_test+0x12>
 800682e:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <v_test+0xfc>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	08006855 	.word	0x08006855
 8006838:	0800685b 	.word	0x0800685b
 800683c:	0800674b 	.word	0x0800674b
 8006840:	0800674b 	.word	0x0800674b
 8006844:	0800674b 	.word	0x0800674b
 8006848:	0800674b 	.word	0x0800674b
 800684c:	0800674b 	.word	0x0800674b
 8006850:	0800674b 	.word	0x0800674b
				case 0:
					get_base();
 8006854:	f004 fc0c 	bl	800b070 <get_base>
					break;
 8006858:	e01a      	b.n	8006890 <v_test+0x158>
				case 1:
					//----V左45----
					printf("V 45 right .\n");
 800685a:	4813      	ldr	r0, [pc, #76]	; (80068a8 <v_test+0x170>)
 800685c:	f005 fa98 	bl	800bd90 <puts>
					full_led_write(7);
 8006860:	2007      	movs	r0, #7
 8006862:	f004 fc97 	bl	800b194 <full_led_write>
					half_sectionA();
 8006866:	f7fe fd13 	bl	8005290 <half_sectionA>
					for(int i = 0; i < 1; i++){
 800686a:	2300      	movs	r3, #0
 800686c:	603b      	str	r3, [r7, #0]
 800686e:	e006      	b.n	800687e <v_test+0x146>
						v_R45();
 8006870:	f7ff fbc2 	bl	8005ff8 <v_R45>
						v_R45();
 8006874:	f7ff fbc0 	bl	8005ff8 <v_R45>
					for(int i = 0; i < 1; i++){
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	3301      	adds	r3, #1
 800687c:	603b      	str	r3, [r7, #0]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	ddf5      	ble.n	8006870 <v_test+0x138>
					}
					full_led_write(7);
 8006884:	2007      	movs	r0, #7
 8006886:	f004 fc85 	bl	800b194 <full_led_write>
					half_sectionD();
 800688a:	f7fe fd11 	bl	80052b0 <half_sectionD>
					break;
 800688e:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006890:	e75b      	b.n	800674a <v_test+0x12>
 8006892:	bf00      	nop
 8006894:	0800cfc8 	.word	0x0800cfc8
 8006898:	200009c4 	.word	0x200009c4
 800689c:	0800cf00 	.word	0x0800cf00
 80068a0:	40020000 	.word	0x40020000
 80068a4:	20000c28 	.word	0x20000c28
 80068a8:	0800cfe0 	.word	0x0800cfe0

080068ac <test_select>:
		}
	}
}


void test_select(void){
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
	int mode = 0;
 80068b2:	2300      	movs	r3, #0
 80068b4:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	483b      	ldr	r0, [pc, #236]	; (80069a8 <test_select+0xfc>)
 80068ba:	f005 f9f5 	bl	800bca8 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	b2d8      	uxtb	r0, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	b2d9      	uxtb	r1, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	f003 0304 	and.w	r3, r3, #4
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	461a      	mov	r2, r3
 80068de:	f004 fc1f 	bl	800b120 <led_write>
		  if(dist_r >= 20){
 80068e2:	4b32      	ldr	r3, [pc, #200]	; (80069ac <test_select+0x100>)
 80068e4:	edd3 7a00 	vldr	s15, [r3]
 80068e8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80068ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f4:	db0f      	blt.n	8006916 <test_select+0x6a>
			  mode++;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	3301      	adds	r3, #1
 80068fa:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80068fc:	4b2b      	ldr	r3, [pc, #172]	; (80069ac <test_select+0x100>)
 80068fe:	f04f 0200 	mov.w	r2, #0
 8006902:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b07      	cmp	r3, #7
 8006908:	dd01      	ble.n	800690e <test_select+0x62>
				  mode = 0;
 800690a:	2300      	movs	r3, #0
 800690c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	4827      	ldr	r0, [pc, #156]	; (80069b0 <test_select+0x104>)
 8006912:	f005 f9c9 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8006916:	4b25      	ldr	r3, [pc, #148]	; (80069ac <test_select+0x100>)
 8006918:	edd3 7a00 	vldr	s15, [r3]
 800691c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8006920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006928:	d80f      	bhi.n	800694a <test_select+0x9e>
			  mode--;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	3b01      	subs	r3, #1
 800692e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006930:	4b1e      	ldr	r3, [pc, #120]	; (80069ac <test_select+0x100>)
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	da01      	bge.n	8006942 <test_select+0x96>
				  mode = 7;
 800693e:	2307      	movs	r3, #7
 8006940:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006942:	6879      	ldr	r1, [r7, #4]
 8006944:	481a      	ldr	r0, [pc, #104]	; (80069b0 <test_select+0x104>)
 8006946:	f005 f9af 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800694a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800694e:	4819      	ldr	r0, [pc, #100]	; (80069b4 <test_select+0x108>)
 8006950:	f7fb fc98 	bl	8002284 <HAL_GPIO_ReadPin>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1b1      	bne.n	80068be <test_select+0x12>
			  HAL_Delay(50);
 800695a:	2032      	movs	r0, #50	; 0x32
 800695c:	f7fa fb36 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8006960:	bf00      	nop
 8006962:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006966:	4813      	ldr	r0, [pc, #76]	; (80069b4 <test_select+0x108>)
 8006968:	f7fb fc8c 	bl	8002284 <HAL_GPIO_ReadPin>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0f7      	beq.n	8006962 <test_select+0xb6>
			  switch(mode){
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3b01      	subs	r3, #1
 8006976:	2b03      	cmp	r3, #3
 8006978:	d8a1      	bhi.n	80068be <test_select+0x12>
 800697a:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <test_select+0xd4>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	08006991 	.word	0x08006991
 8006984:	08006997 	.word	0x08006997
 8006988:	0800699d 	.word	0x0800699d
 800698c:	080069a3 	.word	0x080069a3
				case 1:
					init_test();
 8006990:	f7ff fc06 	bl	80061a0 <init_test>
					break;
 8006994:	e007      	b.n	80069a6 <test_select+0xfa>

				case 2:
					slalom_test();
 8006996:	f7ff fcfd 	bl	8006394 <slalom_test>
					break;
 800699a:	e004      	b.n	80069a6 <test_select+0xfa>

				case 3:
					sample_course_run();
 800699c:	f000 fafa 	bl	8006f94 <sample_course_run>
					break;
 80069a0:	e001      	b.n	80069a6 <test_select+0xfa>
				case 4:
					v_test();
 80069a2:	f7ff fec9 	bl	8006738 <v_test>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80069a6:	e78a      	b.n	80068be <test_select+0x12>
 80069a8:	0800cff0 	.word	0x0800cff0
 80069ac:	200009c4 	.word	0x200009c4
 80069b0:	0800cf00 	.word	0x0800cf00
 80069b4:	40020000 	.word	0x40020000

080069b8 <simple_run>:
//simple_run
//a超新地走行モード
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void simple_run(void){
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0

	int mode = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	607b      	str	r3, [r7, #4]
	printf("Simple Run, Mode : %d\n", mode);
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	4873      	ldr	r0, [pc, #460]	; (8006b94 <simple_run+0x1dc>)
 80069c6:	f005 f96f 	bl	800bca8 <iprintf>

	while(1){

		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	b2d8      	uxtb	r0, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	b2d9      	uxtb	r1, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	461a      	mov	r2, r3
 80069ea:	f004 fb99 	bl	800b120 <led_write>
		  if(dist_r >= 20){
 80069ee:	4b6a      	ldr	r3, [pc, #424]	; (8006b98 <simple_run+0x1e0>)
 80069f0:	edd3 7a00 	vldr	s15, [r3]
 80069f4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80069f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a00:	db0f      	blt.n	8006a22 <simple_run+0x6a>
			  mode++;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	3301      	adds	r3, #1
 8006a06:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006a08:	4b63      	ldr	r3, [pc, #396]	; (8006b98 <simple_run+0x1e0>)
 8006a0a:	f04f 0200 	mov.w	r2, #0
 8006a0e:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b07      	cmp	r3, #7
 8006a14:	dd01      	ble.n	8006a1a <simple_run+0x62>
				  mode = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	485f      	ldr	r0, [pc, #380]	; (8006b9c <simple_run+0x1e4>)
 8006a1e:	f005 f943 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8006a22:	4b5d      	ldr	r3, [pc, #372]	; (8006b98 <simple_run+0x1e0>)
 8006a24:	edd3 7a00 	vldr	s15, [r3]
 8006a28:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8006a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a34:	d80f      	bhi.n	8006a56 <simple_run+0x9e>
			  mode--;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006a3c:	4b56      	ldr	r3, [pc, #344]	; (8006b98 <simple_run+0x1e0>)
 8006a3e:	f04f 0200 	mov.w	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	da01      	bge.n	8006a4e <simple_run+0x96>
				  mode = 7;
 8006a4a:	2307      	movs	r3, #7
 8006a4c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	4852      	ldr	r0, [pc, #328]	; (8006b9c <simple_run+0x1e4>)
 8006a52:	f005 f929 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8006a56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a5a:	4851      	ldr	r0, [pc, #324]	; (8006ba0 <simple_run+0x1e8>)
 8006a5c:	f7fb fc12 	bl	8002284 <HAL_GPIO_ReadPin>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1b1      	bne.n	80069ca <simple_run+0x12>
			  HAL_Delay(50);
 8006a66:	2032      	movs	r0, #50	; 0x32
 8006a68:	f7fa fab0 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8006a6c:	bf00      	nop
 8006a6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a72:	484b      	ldr	r0, [pc, #300]	; (8006ba0 <simple_run+0x1e8>)
 8006a74:	f7fb fc06 	bl	8002284 <HAL_GPIO_ReadPin>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0f7      	beq.n	8006a6e <simple_run+0xb6>
			  switch(mode){
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b07      	cmp	r3, #7
 8006a82:	d8a2      	bhi.n	80069ca <simple_run+0x12>
 8006a84:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <simple_run+0xd4>)
 8006a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8a:	bf00      	nop
 8006a8c:	080069cb 	.word	0x080069cb
 8006a90:	08006aad 	.word	0x08006aad
 8006a94:	08006af9 	.word	0x08006af9
 8006a98:	08006b45 	.word	0x08006b45
 8006a9c:	080069cb 	.word	0x080069cb
 8006aa0:	080069cb 	.word	0x080069cb
 8006aa4:	080069cb 	.word	0x080069cb
 8006aa8:	080069cb 	.word	0x080069cb

				case 0:
					break;
				case 1:
					//----a一次探索走行----
					printf("First Run.\n");
 8006aac:	483d      	ldr	r0, [pc, #244]	; (8006ba4 <simple_run+0x1ec>)
 8006aae:	f005 f96f 	bl	800bd90 <puts>

					MF.FLAG.SCND = 0;
 8006ab2:	4a3d      	ldr	r2, [pc, #244]	; (8006ba8 <simple_run+0x1f0>)
 8006ab4:	8813      	ldrh	r3, [r2, #0]
 8006ab6:	f36f 1345 	bfc	r3, #5, #1
 8006aba:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 8006abc:	4b3b      	ldr	r3, [pc, #236]	; (8006bac <simple_run+0x1f4>)
 8006abe:	2209      	movs	r2, #9
 8006ac0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006ac2:	4b3b      	ldr	r3, [pc, #236]	; (8006bb0 <simple_run+0x1f8>)
 8006ac4:	2206      	movs	r2, #6
 8006ac6:	701a      	strb	r2, [r3, #0]

					get_base();
 8006ac8:	f004 fad2 	bl	800b070 <get_base>

					searchA();
 8006acc:	f002 fd50 	bl	8009570 <searchA>
					HAL_Delay(500);
 8006ad0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ad4:	f7fa fa7a 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006ad8:	4b35      	ldr	r3, [pc, #212]	; (8006bb0 <simple_run+0x1f8>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	4b34      	ldr	r3, [pc, #208]	; (8006bb0 <simple_run+0x1f8>)
 8006ae0:	781a      	ldrb	r2, [r3, #0]
 8006ae2:	4b32      	ldr	r3, [pc, #200]	; (8006bac <simple_run+0x1f4>)
 8006ae4:	701a      	strb	r2, [r3, #0]
					searchA();
 8006ae6:	f002 fd43 	bl	8009570 <searchA>

					goal_x = GOAL_X;
 8006aea:	4b30      	ldr	r3, [pc, #192]	; (8006bac <simple_run+0x1f4>)
 8006aec:	2209      	movs	r2, #9
 8006aee:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006af0:	4b2f      	ldr	r3, [pc, #188]	; (8006bb0 <simple_run+0x1f8>)
 8006af2:	2206      	movs	r2, #6
 8006af4:	701a      	strb	r2, [r3, #0]

					break;
 8006af6:	e04b      	b.n	8006b90 <simple_run+0x1d8>

				case 2:
					//----a一次探索連続走行----
					printf("First Run. (Continuous)\n");
 8006af8:	482e      	ldr	r0, [pc, #184]	; (8006bb4 <simple_run+0x1fc>)
 8006afa:	f005 f949 	bl	800bd90 <puts>

					MF.FLAG.SCND = 0;
 8006afe:	4a2a      	ldr	r2, [pc, #168]	; (8006ba8 <simple_run+0x1f0>)
 8006b00:	8813      	ldrh	r3, [r2, #0]
 8006b02:	f36f 1345 	bfc	r3, #5, #1
 8006b06:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 8006b08:	4b28      	ldr	r3, [pc, #160]	; (8006bac <simple_run+0x1f4>)
 8006b0a:	2209      	movs	r2, #9
 8006b0c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006b0e:	4b28      	ldr	r3, [pc, #160]	; (8006bb0 <simple_run+0x1f8>)
 8006b10:	2206      	movs	r2, #6
 8006b12:	701a      	strb	r2, [r3, #0]

					get_base();
 8006b14:	f004 faac 	bl	800b070 <get_base>

					searchB();
 8006b18:	f002 fdac 	bl	8009674 <searchB>
					HAL_Delay(500);
 8006b1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b20:	f7fa fa54 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006b24:	4b22      	ldr	r3, [pc, #136]	; (8006bb0 <simple_run+0x1f8>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	701a      	strb	r2, [r3, #0]
 8006b2a:	4b21      	ldr	r3, [pc, #132]	; (8006bb0 <simple_run+0x1f8>)
 8006b2c:	781a      	ldrb	r2, [r3, #0]
 8006b2e:	4b1f      	ldr	r3, [pc, #124]	; (8006bac <simple_run+0x1f4>)
 8006b30:	701a      	strb	r2, [r3, #0]
					searchB();
 8006b32:	f002 fd9f 	bl	8009674 <searchB>

					goal_x = GOAL_X;
 8006b36:	4b1d      	ldr	r3, [pc, #116]	; (8006bac <simple_run+0x1f4>)
 8006b38:	2209      	movs	r2, #9
 8006b3a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006b3c:	4b1c      	ldr	r3, [pc, #112]	; (8006bb0 <simple_run+0x1f8>)
 8006b3e:	2206      	movs	r2, #6
 8006b40:	701a      	strb	r2, [r3, #0]

					break;
 8006b42:	e025      	b.n	8006b90 <simple_run+0x1d8>

				case 3:
					//----a二次探索走行----
					printf("Second Run. (Continuous)\n");
 8006b44:	481c      	ldr	r0, [pc, #112]	; (8006bb8 <simple_run+0x200>)
 8006b46:	f005 f923 	bl	800bd90 <puts>

					MF.FLAG.SCND = 1;
 8006b4a:	4a17      	ldr	r2, [pc, #92]	; (8006ba8 <simple_run+0x1f0>)
 8006b4c:	8813      	ldrh	r3, [r2, #0]
 8006b4e:	f043 0320 	orr.w	r3, r3, #32
 8006b52:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 8006b54:	4b15      	ldr	r3, [pc, #84]	; (8006bac <simple_run+0x1f4>)
 8006b56:	2209      	movs	r2, #9
 8006b58:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006b5a:	4b15      	ldr	r3, [pc, #84]	; (8006bb0 <simple_run+0x1f8>)
 8006b5c:	2206      	movs	r2, #6
 8006b5e:	701a      	strb	r2, [r3, #0]

					get_base();
 8006b60:	f004 fa86 	bl	800b070 <get_base>

					searchB();
 8006b64:	f002 fd86 	bl	8009674 <searchB>
					HAL_Delay(500);
 8006b68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b6c:	f7fa fa2e 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006b70:	4b0f      	ldr	r3, [pc, #60]	; (8006bb0 <simple_run+0x1f8>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	4b0e      	ldr	r3, [pc, #56]	; (8006bb0 <simple_run+0x1f8>)
 8006b78:	781a      	ldrb	r2, [r3, #0]
 8006b7a:	4b0c      	ldr	r3, [pc, #48]	; (8006bac <simple_run+0x1f4>)
 8006b7c:	701a      	strb	r2, [r3, #0]
					searchB();
 8006b7e:	f002 fd79 	bl	8009674 <searchB>

					goal_x = GOAL_X;
 8006b82:	4b0a      	ldr	r3, [pc, #40]	; (8006bac <simple_run+0x1f4>)
 8006b84:	2209      	movs	r2, #9
 8006b86:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006b88:	4b09      	ldr	r3, [pc, #36]	; (8006bb0 <simple_run+0x1f8>)
 8006b8a:	2206      	movs	r2, #6
 8006b8c:	701a      	strb	r2, [r3, #0]

					break;
 8006b8e:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006b90:	e71b      	b.n	80069ca <simple_run+0x12>
 8006b92:	bf00      	nop
 8006b94:	0800d008 	.word	0x0800d008
 8006b98:	200009c4 	.word	0x200009c4
 8006b9c:	0800cf00 	.word	0x0800cf00
 8006ba0:	40020000 	.word	0x40020000
 8006ba4:	0800d020 	.word	0x0800d020
 8006ba8:	20000e38 	.word	0x20000e38
 8006bac:	20000a85 	.word	0x20000a85
 8006bb0:	20000a24 	.word	0x20000a24
 8006bb4:	0800d02c 	.word	0x0800d02c
 8006bb8:	0800d044 	.word	0x0800d044

08006bbc <slalom_run>:
//slalom_run
//aスラローム走行モード
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_run(void){
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0

	int mode = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	607b      	str	r3, [r7, #4]
	printf("Slalom Run, Mode : %d\n", mode);
 8006bc6:	6879      	ldr	r1, [r7, #4]
 8006bc8:	48b0      	ldr	r0, [pc, #704]	; (8006e8c <slalom_run+0x2d0>)
 8006bca:	f005 f86d 	bl	800bca8 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	b2d8      	uxtb	r0, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	b2d9      	uxtb	r1, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	f003 0304 	and.w	r3, r3, #4
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	461a      	mov	r2, r3
 8006bee:	f004 fa97 	bl	800b120 <led_write>
		  if(dist_r >= 20){
 8006bf2:	4ba7      	ldr	r3, [pc, #668]	; (8006e90 <slalom_run+0x2d4>)
 8006bf4:	edd3 7a00 	vldr	s15, [r3]
 8006bf8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c04:	db0f      	blt.n	8006c26 <slalom_run+0x6a>
			  mode++;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006c0c:	4ba0      	ldr	r3, [pc, #640]	; (8006e90 <slalom_run+0x2d4>)
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b07      	cmp	r3, #7
 8006c18:	dd01      	ble.n	8006c1e <slalom_run+0x62>
				  mode = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	489c      	ldr	r0, [pc, #624]	; (8006e94 <slalom_run+0x2d8>)
 8006c22:	f005 f841 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8006c26:	4b9a      	ldr	r3, [pc, #616]	; (8006e90 <slalom_run+0x2d4>)
 8006c28:	edd3 7a00 	vldr	s15, [r3]
 8006c2c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8006c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c38:	d80f      	bhi.n	8006c5a <slalom_run+0x9e>
			  mode--;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006c40:	4b93      	ldr	r3, [pc, #588]	; (8006e90 <slalom_run+0x2d4>)
 8006c42:	f04f 0200 	mov.w	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	da01      	bge.n	8006c52 <slalom_run+0x96>
				  mode = 7;
 8006c4e:	2307      	movs	r3, #7
 8006c50:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	488f      	ldr	r0, [pc, #572]	; (8006e94 <slalom_run+0x2d8>)
 8006c56:	f005 f827 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8006c5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c5e:	488e      	ldr	r0, [pc, #568]	; (8006e98 <slalom_run+0x2dc>)
 8006c60:	f7fb fb10 	bl	8002284 <HAL_GPIO_ReadPin>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1b1      	bne.n	8006bce <slalom_run+0x12>
			  HAL_Delay(50);
 8006c6a:	2032      	movs	r0, #50	; 0x32
 8006c6c:	f7fa f9ae 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8006c70:	bf00      	nop
 8006c72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c76:	4888      	ldr	r0, [pc, #544]	; (8006e98 <slalom_run+0x2dc>)
 8006c78:	f7fb fb04 	bl	8002284 <HAL_GPIO_ReadPin>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0f7      	beq.n	8006c72 <slalom_run+0xb6>
			  switch(mode){
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b07      	cmp	r3, #7
 8006c86:	d8a2      	bhi.n	8006bce <slalom_run+0x12>
 8006c88:	a201      	add	r2, pc, #4	; (adr r2, 8006c90 <slalom_run+0xd4>)
 8006c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8e:	bf00      	nop
 8006c90:	08006cb1 	.word	0x08006cb1
 8006c94:	08006d03 	.word	0x08006d03
 8006c98:	08006d55 	.word	0x08006d55
 8006c9c:	08006dc1 	.word	0x08006dc1
 8006ca0:	08006e27 	.word	0x08006e27
 8006ca4:	08006ec1 	.word	0x08006ec1
 8006ca8:	08006f25 	.word	0x08006f25
 8006cac:	08006bcf 	.word	0x08006bcf

			  case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 8006cb0:	487a      	ldr	r0, [pc, #488]	; (8006e9c <slalom_run+0x2e0>)
 8006cb2:	f005 f86d 	bl	800bd90 <puts>

					MF.FLAG.SCND = 0;
 8006cb6:	4a7a      	ldr	r2, [pc, #488]	; (8006ea0 <slalom_run+0x2e4>)
 8006cb8:	8813      	ldrh	r3, [r2, #0]
 8006cba:	f36f 1345 	bfc	r3, #5, #1
 8006cbe:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8006cc0:	4b78      	ldr	r3, [pc, #480]	; (8006ea4 <slalom_run+0x2e8>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8006cc6:	4b78      	ldr	r3, [pc, #480]	; (8006ea8 <slalom_run+0x2ec>)
 8006cc8:	2209      	movs	r2, #9
 8006cca:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006ccc:	4b77      	ldr	r3, [pc, #476]	; (8006eac <slalom_run+0x2f0>)
 8006cce:	2206      	movs	r2, #6
 8006cd0:	701a      	strb	r2, [r3, #0]

					get_base();
 8006cd2:	f004 f9cd 	bl	800b070 <get_base>

					searchC();
 8006cd6:	f002 fd57 	bl	8009788 <searchC>
					HAL_Delay(500);
 8006cda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006cde:	f7fa f975 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006ce2:	4b72      	ldr	r3, [pc, #456]	; (8006eac <slalom_run+0x2f0>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	701a      	strb	r2, [r3, #0]
 8006ce8:	4b70      	ldr	r3, [pc, #448]	; (8006eac <slalom_run+0x2f0>)
 8006cea:	781a      	ldrb	r2, [r3, #0]
 8006cec:	4b6e      	ldr	r3, [pc, #440]	; (8006ea8 <slalom_run+0x2ec>)
 8006cee:	701a      	strb	r2, [r3, #0]
					searchC();
 8006cf0:	f002 fd4a 	bl	8009788 <searchC>

					goal_x = GOAL_X;
 8006cf4:	4b6c      	ldr	r3, [pc, #432]	; (8006ea8 <slalom_run+0x2ec>)
 8006cf6:	2209      	movs	r2, #9
 8006cf8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006cfa:	4b6c      	ldr	r3, [pc, #432]	; (8006eac <slalom_run+0x2f0>)
 8006cfc:	2206      	movs	r2, #6
 8006cfe:	701a      	strb	r2, [r3, #0]
					break;
 8006d00:	e13d      	b.n	8006f7e <slalom_run+0x3c2>

				case 1:
					//---a二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 8006d02:	486b      	ldr	r0, [pc, #428]	; (8006eb0 <slalom_run+0x2f4>)
 8006d04:	f005 f844 	bl	800bd90 <puts>

					MF.FLAG.SCND = 1;
 8006d08:	4a65      	ldr	r2, [pc, #404]	; (8006ea0 <slalom_run+0x2e4>)
 8006d0a:	8813      	ldrh	r3, [r2, #0]
 8006d0c:	f043 0320 	orr.w	r3, r3, #32
 8006d10:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8006d12:	4b64      	ldr	r3, [pc, #400]	; (8006ea4 <slalom_run+0x2e8>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8006d18:	4b63      	ldr	r3, [pc, #396]	; (8006ea8 <slalom_run+0x2ec>)
 8006d1a:	2209      	movs	r2, #9
 8006d1c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006d1e:	4b63      	ldr	r3, [pc, #396]	; (8006eac <slalom_run+0x2f0>)
 8006d20:	2206      	movs	r2, #6
 8006d22:	701a      	strb	r2, [r3, #0]

					get_base();
 8006d24:	f004 f9a4 	bl	800b070 <get_base>

					searchC();
 8006d28:	f002 fd2e 	bl	8009788 <searchC>
					HAL_Delay(500);
 8006d2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d30:	f7fa f94c 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006d34:	4b5d      	ldr	r3, [pc, #372]	; (8006eac <slalom_run+0x2f0>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	701a      	strb	r2, [r3, #0]
 8006d3a:	4b5c      	ldr	r3, [pc, #368]	; (8006eac <slalom_run+0x2f0>)
 8006d3c:	781a      	ldrb	r2, [r3, #0]
 8006d3e:	4b5a      	ldr	r3, [pc, #360]	; (8006ea8 <slalom_run+0x2ec>)
 8006d40:	701a      	strb	r2, [r3, #0]
					searchC();
 8006d42:	f002 fd21 	bl	8009788 <searchC>

					goal_x = GOAL_X;
 8006d46:	4b58      	ldr	r3, [pc, #352]	; (8006ea8 <slalom_run+0x2ec>)
 8006d48:	2209      	movs	r2, #9
 8006d4a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006d4c:	4b57      	ldr	r3, [pc, #348]	; (8006eac <slalom_run+0x2f0>)
 8006d4e:	2206      	movs	r2, #6
 8006d50:	701a      	strb	r2, [r3, #0]
					break;
 8006d52:	e114      	b.n	8006f7e <slalom_run+0x3c2>

				case 2:
					//----a二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8006d54:	4857      	ldr	r0, [pc, #348]	; (8006eb4 <slalom_run+0x2f8>)
 8006d56:	f005 f81b 	bl	800bd90 <puts>

					MF.FLAG.SCND = 1;
 8006d5a:	4a51      	ldr	r2, [pc, #324]	; (8006ea0 <slalom_run+0x2e4>)
 8006d5c:	8813      	ldrh	r3, [r2, #0]
 8006d5e:	f043 0320 	orr.w	r3, r3, #32
 8006d62:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8006d64:	4a4e      	ldr	r2, [pc, #312]	; (8006ea0 <slalom_run+0x2e4>)
 8006d66:	8813      	ldrh	r3, [r2, #0]
 8006d68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d6c:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8006d6e:	4b4d      	ldr	r3, [pc, #308]	; (8006ea4 <slalom_run+0x2e8>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 8006d74:	4b50      	ldr	r3, [pc, #320]	; (8006eb8 <slalom_run+0x2fc>)
 8006d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d7a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 8006d7c:	4b4f      	ldr	r3, [pc, #316]	; (8006ebc <slalom_run+0x300>)
 8006d7e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006d82:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8006d84:	4b48      	ldr	r3, [pc, #288]	; (8006ea8 <slalom_run+0x2ec>)
 8006d86:	2209      	movs	r2, #9
 8006d88:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006d8a:	4b48      	ldr	r3, [pc, #288]	; (8006eac <slalom_run+0x2f0>)
 8006d8c:	2206      	movs	r2, #6
 8006d8e:	701a      	strb	r2, [r3, #0]

					get_base();
 8006d90:	f004 f96e 	bl	800b070 <get_base>

					searchD();
 8006d94:	f002 fdfc 	bl	8009990 <searchD>
					HAL_Delay(500);
 8006d98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d9c:	f7fa f916 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006da0:	4b42      	ldr	r3, [pc, #264]	; (8006eac <slalom_run+0x2f0>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	701a      	strb	r2, [r3, #0]
 8006da6:	4b41      	ldr	r3, [pc, #260]	; (8006eac <slalom_run+0x2f0>)
 8006da8:	781a      	ldrb	r2, [r3, #0]
 8006daa:	4b3f      	ldr	r3, [pc, #252]	; (8006ea8 <slalom_run+0x2ec>)
 8006dac:	701a      	strb	r2, [r3, #0]
					searchD();
 8006dae:	f002 fdef 	bl	8009990 <searchD>

					goal_x = GOAL_X;
 8006db2:	4b3d      	ldr	r3, [pc, #244]	; (8006ea8 <slalom_run+0x2ec>)
 8006db4:	2209      	movs	r2, #9
 8006db6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006db8:	4b3c      	ldr	r3, [pc, #240]	; (8006eac <slalom_run+0x2f0>)
 8006dba:	2206      	movs	r2, #6
 8006dbc:	701a      	strb	r2, [r3, #0]
					break;
 8006dbe:	e0de      	b.n	8006f7e <slalom_run+0x3c2>

				case 3:
					//----a二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8006dc0:	483c      	ldr	r0, [pc, #240]	; (8006eb4 <slalom_run+0x2f8>)
 8006dc2:	f004 ffe5 	bl	800bd90 <puts>

					MF.FLAG.SCND = 1;
 8006dc6:	4a36      	ldr	r2, [pc, #216]	; (8006ea0 <slalom_run+0x2e4>)
 8006dc8:	8813      	ldrh	r3, [r2, #0]
 8006dca:	f043 0320 	orr.w	r3, r3, #32
 8006dce:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8006dd0:	4a33      	ldr	r2, [pc, #204]	; (8006ea0 <slalom_run+0x2e4>)
 8006dd2:	8813      	ldrh	r3, [r2, #0]
 8006dd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006dd8:	8013      	strh	r3, [r2, #0]
					accel_hs = 5000;
 8006dda:	4b37      	ldr	r3, [pc, #220]	; (8006eb8 <slalom_run+0x2fc>)
 8006ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 8006de2:	4b36      	ldr	r3, [pc, #216]	; (8006ebc <slalom_run+0x300>)
 8006de4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006de8:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8006dea:	4b2f      	ldr	r3, [pc, #188]	; (8006ea8 <slalom_run+0x2ec>)
 8006dec:	2209      	movs	r2, #9
 8006dee:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006df0:	4b2e      	ldr	r3, [pc, #184]	; (8006eac <slalom_run+0x2f0>)
 8006df2:	2206      	movs	r2, #6
 8006df4:	701a      	strb	r2, [r3, #0]

					get_base();
 8006df6:	f004 f93b 	bl	800b070 <get_base>

					searchD();
 8006dfa:	f002 fdc9 	bl	8009990 <searchD>
					HAL_Delay(500);
 8006dfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006e02:	f7fa f8e3 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006e06:	4b29      	ldr	r3, [pc, #164]	; (8006eac <slalom_run+0x2f0>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	4b27      	ldr	r3, [pc, #156]	; (8006eac <slalom_run+0x2f0>)
 8006e0e:	781a      	ldrb	r2, [r3, #0]
 8006e10:	4b25      	ldr	r3, [pc, #148]	; (8006ea8 <slalom_run+0x2ec>)
 8006e12:	701a      	strb	r2, [r3, #0]
					searchD();
 8006e14:	f002 fdbc 	bl	8009990 <searchD>

					goal_x = GOAL_X;
 8006e18:	4b23      	ldr	r3, [pc, #140]	; (8006ea8 <slalom_run+0x2ec>)
 8006e1a:	2209      	movs	r2, #9
 8006e1c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006e1e:	4b23      	ldr	r3, [pc, #140]	; (8006eac <slalom_run+0x2f0>)
 8006e20:	2206      	movs	r2, #6
 8006e22:	701a      	strb	r2, [r3, #0]
					break;
 8006e24:	e0ab      	b.n	8006f7e <slalom_run+0x3c2>

				case 4:
					//----a二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 8006e26:	4823      	ldr	r0, [pc, #140]	; (8006eb4 <slalom_run+0x2f8>)
 8006e28:	f004 ffb2 	bl	800bd90 <puts>

					MF.FLAG.SCND = 1;
 8006e2c:	4a1c      	ldr	r2, [pc, #112]	; (8006ea0 <slalom_run+0x2e4>)
 8006e2e:	8813      	ldrh	r3, [r2, #0]
 8006e30:	f043 0320 	orr.w	r3, r3, #32
 8006e34:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8006e36:	4a1a      	ldr	r2, [pc, #104]	; (8006ea0 <slalom_run+0x2e4>)
 8006e38:	8813      	ldrh	r3, [r2, #0]
 8006e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e3e:	8013      	strh	r3, [r2, #0]
					accel_hs = 5000;
 8006e40:	4b1d      	ldr	r3, [pc, #116]	; (8006eb8 <slalom_run+0x2fc>)
 8006e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e46:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1500;
 8006e48:	4b1c      	ldr	r3, [pc, #112]	; (8006ebc <slalom_run+0x300>)
 8006e4a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006e4e:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 8006e50:	4b15      	ldr	r3, [pc, #84]	; (8006ea8 <slalom_run+0x2ec>)
 8006e52:	2209      	movs	r2, #9
 8006e54:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006e56:	4b15      	ldr	r3, [pc, #84]	; (8006eac <slalom_run+0x2f0>)
 8006e58:	2206      	movs	r2, #6
 8006e5a:	701a      	strb	r2, [r3, #0]

					get_base();
 8006e5c:	f004 f908 	bl	800b070 <get_base>

					searchD();
 8006e60:	f002 fd96 	bl	8009990 <searchD>
					HAL_Delay(500);
 8006e64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006e68:	f7fa f8b0 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006e6c:	4b0f      	ldr	r3, [pc, #60]	; (8006eac <slalom_run+0x2f0>)
 8006e6e:	2200      	movs	r2, #0
 8006e70:	701a      	strb	r2, [r3, #0]
 8006e72:	4b0e      	ldr	r3, [pc, #56]	; (8006eac <slalom_run+0x2f0>)
 8006e74:	781a      	ldrb	r2, [r3, #0]
 8006e76:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <slalom_run+0x2ec>)
 8006e78:	701a      	strb	r2, [r3, #0]
					searchD();
 8006e7a:	f002 fd89 	bl	8009990 <searchD>

					goal_x = GOAL_X;
 8006e7e:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <slalom_run+0x2ec>)
 8006e80:	2209      	movs	r2, #9
 8006e82:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006e84:	4b09      	ldr	r3, [pc, #36]	; (8006eac <slalom_run+0x2f0>)
 8006e86:	2206      	movs	r2, #6
 8006e88:	701a      	strb	r2, [r3, #0]
					break;
 8006e8a:	e078      	b.n	8006f7e <slalom_run+0x3c2>
 8006e8c:	0800d060 	.word	0x0800d060
 8006e90:	200009c4 	.word	0x200009c4
 8006e94:	0800cf00 	.word	0x0800cf00
 8006e98:	40020000 	.word	0x40020000
 8006e9c:	0800d078 	.word	0x0800d078
 8006ea0:	20000e38 	.word	0x20000e38
 8006ea4:	20000e58 	.word	0x20000e58
 8006ea8:	20000a85 	.word	0x20000a85
 8006eac:	20000a24 	.word	0x20000a24
 8006eb0:	0800d08c 	.word	0x0800d08c
 8006eb4:	0800d0a4 	.word	0x0800d0a4
 8006eb8:	20000330 	.word	0x20000330
 8006ebc:	20000e4c 	.word	0x20000e4c

				case 5:
					//----a二次走行+直線優先----
					printf("High Speed Run. (Slalom)\n");
 8006ec0:	482f      	ldr	r0, [pc, #188]	; (8006f80 <slalom_run+0x3c4>)
 8006ec2:	f004 ff65 	bl	800bd90 <puts>

					MF.FLAG.SCND = 1;
 8006ec6:	4a2f      	ldr	r2, [pc, #188]	; (8006f84 <slalom_run+0x3c8>)
 8006ec8:	8813      	ldrh	r3, [r2, #0]
 8006eca:	f043 0320 	orr.w	r3, r3, #32
 8006ece:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 8006ed0:	4a2c      	ldr	r2, [pc, #176]	; (8006f84 <slalom_run+0x3c8>)
 8006ed2:	8813      	ldrh	r3, [r2, #0]
 8006ed4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ed8:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 8006eda:	4b2b      	ldr	r3, [pc, #172]	; (8006f88 <slalom_run+0x3cc>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8006ee0:	4b2a      	ldr	r3, [pc, #168]	; (8006f8c <slalom_run+0x3d0>)
 8006ee2:	2209      	movs	r2, #9
 8006ee4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006ee6:	4b2a      	ldr	r3, [pc, #168]	; (8006f90 <slalom_run+0x3d4>)
 8006ee8:	2206      	movs	r2, #6
 8006eea:	701a      	strb	r2, [r3, #0]

					get_base();
 8006eec:	f004 f8c0 	bl	800b070 <get_base>

					HAL_Delay(5000);
 8006ef0:	f241 3088 	movw	r0, #5000	; 0x1388
 8006ef4:	f7fa f86a 	bl	8000fcc <HAL_Delay>
					searchC();
 8006ef8:	f002 fc46 	bl	8009788 <searchC>
					HAL_Delay(500);
 8006efc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f00:	f7fa f864 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006f04:	4b22      	ldr	r3, [pc, #136]	; (8006f90 <slalom_run+0x3d4>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	4b21      	ldr	r3, [pc, #132]	; (8006f90 <slalom_run+0x3d4>)
 8006f0c:	781a      	ldrb	r2, [r3, #0]
 8006f0e:	4b1f      	ldr	r3, [pc, #124]	; (8006f8c <slalom_run+0x3d0>)
 8006f10:	701a      	strb	r2, [r3, #0]
					searchC();
 8006f12:	f002 fc39 	bl	8009788 <searchC>

					goal_x = GOAL_X;
 8006f16:	4b1d      	ldr	r3, [pc, #116]	; (8006f8c <slalom_run+0x3d0>)
 8006f18:	2209      	movs	r2, #9
 8006f1a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006f1c:	4b1c      	ldr	r3, [pc, #112]	; (8006f90 <slalom_run+0x3d4>)
 8006f1e:	2206      	movs	r2, #6
 8006f20:	701a      	strb	r2, [r3, #0]
					break;
 8006f22:	e02c      	b.n	8006f7e <slalom_run+0x3c2>

				case 6:
					//----a二次走行+直線優先----
					printf("High Speed Run. (Slalom)\n");
 8006f24:	4816      	ldr	r0, [pc, #88]	; (8006f80 <slalom_run+0x3c4>)
 8006f26:	f004 ff33 	bl	800bd90 <puts>

					MF.FLAG.SCND = 1;
 8006f2a:	4a16      	ldr	r2, [pc, #88]	; (8006f84 <slalom_run+0x3c8>)
 8006f2c:	8813      	ldrh	r3, [r2, #0]
 8006f2e:	f043 0320 	orr.w	r3, r3, #32
 8006f32:	8013      	strh	r3, [r2, #0]
//					MF.FLAG.STRAIGHT = 1;
					start_flag = 0;
 8006f34:	4b14      	ldr	r3, [pc, #80]	; (8006f88 <slalom_run+0x3cc>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 8006f3a:	4b14      	ldr	r3, [pc, #80]	; (8006f8c <slalom_run+0x3d0>)
 8006f3c:	2209      	movs	r2, #9
 8006f3e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006f40:	4b13      	ldr	r3, [pc, #76]	; (8006f90 <slalom_run+0x3d4>)
 8006f42:	2206      	movs	r2, #6
 8006f44:	701a      	strb	r2, [r3, #0]

					get_base();
 8006f46:	f004 f893 	bl	800b070 <get_base>

					HAL_Delay(5000);
 8006f4a:	f241 3088 	movw	r0, #5000	; 0x1388
 8006f4e:	f7fa f83d 	bl	8000fcc <HAL_Delay>
					searchC2();
 8006f52:	f002 fc9b 	bl	800988c <searchC2>
					HAL_Delay(500);
 8006f56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f5a:	f7fa f837 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8006f5e:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <slalom_run+0x3d4>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	701a      	strb	r2, [r3, #0]
 8006f64:	4b0a      	ldr	r3, [pc, #40]	; (8006f90 <slalom_run+0x3d4>)
 8006f66:	781a      	ldrb	r2, [r3, #0]
 8006f68:	4b08      	ldr	r3, [pc, #32]	; (8006f8c <slalom_run+0x3d0>)
 8006f6a:	701a      	strb	r2, [r3, #0]
					searchC2();
 8006f6c:	f002 fc8e 	bl	800988c <searchC2>

					goal_x = GOAL_X;
 8006f70:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <slalom_run+0x3d0>)
 8006f72:	2209      	movs	r2, #9
 8006f74:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 8006f76:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <slalom_run+0x3d4>)
 8006f78:	2206      	movs	r2, #6
 8006f7a:	701a      	strb	r2, [r3, #0]
					break;
 8006f7c:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006f7e:	e626      	b.n	8006bce <slalom_run+0x12>
 8006f80:	0800d0c0 	.word	0x0800d0c0
 8006f84:	20000e38 	.word	0x20000e38
 8006f88:	20000e58 	.word	0x20000e58
 8006f8c:	20000a85 	.word	0x20000a85
 8006f90:	20000a24 	.word	0x20000a24

08006f94 <sample_course_run>:
//sample_course_run
//a試験走行モード
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sample_course_run(void){
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0

	int mode = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	607b      	str	r3, [r7, #4]
	printf("Sample Course Run, Mode : %d\n", mode);
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	4865      	ldr	r0, [pc, #404]	; (8007138 <sample_course_run+0x1a4>)
 8006fa2:	f004 fe81 	bl	800bca8 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	b2d8      	uxtb	r0, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	f003 0302 	and.w	r3, r3, #2
 8006fb8:	b2d9      	uxtb	r1, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	f003 0304 	and.w	r3, r3, #4
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	f004 f8ab 	bl	800b120 <led_write>
		  if(dist_r >= 20){
 8006fca:	4b5c      	ldr	r3, [pc, #368]	; (800713c <sample_course_run+0x1a8>)
 8006fcc:	edd3 7a00 	vldr	s15, [r3]
 8006fd0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fdc:	db0f      	blt.n	8006ffe <sample_course_run+0x6a>
			  mode++;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8006fe4:	4b55      	ldr	r3, [pc, #340]	; (800713c <sample_course_run+0x1a8>)
 8006fe6:	f04f 0200 	mov.w	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b07      	cmp	r3, #7
 8006ff0:	dd01      	ble.n	8006ff6 <sample_course_run+0x62>
				  mode = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8006ff6:	6879      	ldr	r1, [r7, #4]
 8006ff8:	4851      	ldr	r0, [pc, #324]	; (8007140 <sample_course_run+0x1ac>)
 8006ffa:	f004 fe55 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8006ffe:	4b4f      	ldr	r3, [pc, #316]	; (800713c <sample_course_run+0x1a8>)
 8007000:	edd3 7a00 	vldr	s15, [r3]
 8007004:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8007008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800700c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007010:	d80f      	bhi.n	8007032 <sample_course_run+0x9e>
			  mode--;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3b01      	subs	r3, #1
 8007016:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8007018:	4b48      	ldr	r3, [pc, #288]	; (800713c <sample_course_run+0x1a8>)
 800701a:	f04f 0200 	mov.w	r2, #0
 800701e:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	da01      	bge.n	800702a <sample_course_run+0x96>
				  mode = 7;
 8007026:	2307      	movs	r3, #7
 8007028:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	4844      	ldr	r0, [pc, #272]	; (8007140 <sample_course_run+0x1ac>)
 800702e:	f004 fe3b 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8007032:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007036:	4843      	ldr	r0, [pc, #268]	; (8007144 <sample_course_run+0x1b0>)
 8007038:	f7fb f924 	bl	8002284 <HAL_GPIO_ReadPin>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1b1      	bne.n	8006fa6 <sample_course_run+0x12>
			  HAL_Delay(50);
 8007042:	2032      	movs	r0, #50	; 0x32
 8007044:	f7f9 ffc2 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8007048:	bf00      	nop
 800704a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800704e:	483d      	ldr	r0, [pc, #244]	; (8007144 <sample_course_run+0x1b0>)
 8007050:	f7fb f918 	bl	8002284 <HAL_GPIO_ReadPin>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0f7      	beq.n	800704a <sample_course_run+0xb6>
			  switch(mode){
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b07      	cmp	r3, #7
 800705e:	d8a2      	bhi.n	8006fa6 <sample_course_run+0x12>
 8007060:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <sample_course_run+0xd4>)
 8007062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007066:	bf00      	nop
 8007068:	08007089 	.word	0x08007089
 800706c:	0800708f 	.word	0x0800708f
 8007070:	080070b1 	.word	0x080070b1
 8007074:	080070d3 	.word	0x080070d3
 8007078:	08006fa7 	.word	0x08006fa7
 800707c:	080070e5 	.word	0x080070e5
 8007080:	08006fa7 	.word	0x08006fa7
 8007084:	08006fa7 	.word	0x08006fa7
				case 0:
					get_base();
 8007088:	f003 fff2 	bl	800b070 <get_base>
					break;
 800708c:	e052      	b.n	8007134 <sample_course_run+0x1a0>

				case 1:
					//----aサンプルコース1　超信地----
					half_sectionA();
 800708e:	f7fe f8ff 	bl	8005290 <half_sectionA>
					half_sectionD();
 8007092:	f7fe f90d 	bl	80052b0 <half_sectionD>
					rotate_R90();
 8007096:	f7fe f9b7 	bl	8005408 <rotate_R90>
					half_sectionA();
 800709a:	f7fe f8f9 	bl	8005290 <half_sectionA>
					half_sectionD();
 800709e:	f7fe f907 	bl	80052b0 <half_sectionD>
					rotate_R90();
 80070a2:	f7fe f9b1 	bl	8005408 <rotate_R90>
					half_sectionA();
 80070a6:	f7fe f8f3 	bl	8005290 <half_sectionA>
					half_sectionD();
 80070aa:	f7fe f901 	bl	80052b0 <half_sectionD>
					break;
 80070ae:	e041      	b.n	8007134 <sample_course_run+0x1a0>

				case 2:
					//----aサンプルコース1　超信地----
					half_sectionA();
 80070b0:	f7fe f8ee 	bl	8005290 <half_sectionA>
					half_sectionD();
 80070b4:	f7fe f8fc 	bl	80052b0 <half_sectionD>
					rotate_L90();
 80070b8:	f7fe fa5e 	bl	8005578 <rotate_L90>
					half_sectionA();
 80070bc:	f7fe f8e8 	bl	8005290 <half_sectionA>
					half_sectionD();
 80070c0:	f7fe f8f6 	bl	80052b0 <half_sectionD>
					rotate_L90();
 80070c4:	f7fe fa58 	bl	8005578 <rotate_L90>
					half_sectionA();
 80070c8:	f7fe f8e2 	bl	8005290 <half_sectionA>
					half_sectionD();
 80070cc:	f7fe f8f0 	bl	80052b0 <half_sectionD>
					break;
 80070d0:	e030      	b.n	8007134 <sample_course_run+0x1a0>

				case 3:
					//---aサンプルコース2　スラローム----
					half_sectionA();
 80070d2:	f7fe f8dd 	bl	8005290 <half_sectionA>
					slalom_R90();
 80070d6:	f7fe fbbf 	bl	8005858 <slalom_R90>
					slalom_R90();
 80070da:	f7fe fbbd 	bl	8005858 <slalom_R90>
					half_sectionD();
 80070de:	f7fe f8e7 	bl	80052b0 <half_sectionD>
					break;
 80070e2:	e027      	b.n	8007134 <sample_course_run+0x1a0>
					goal_y = GOAL_Y;
*/					break;

				case 5:
					//----aスラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 80070e4:	4818      	ldr	r0, [pc, #96]	; (8007148 <sample_course_run+0x1b4>)
 80070e6:	f004 fe53 	bl	800bd90 <puts>

					MF.FLAG.SCND = 0;
 80070ea:	4a18      	ldr	r2, [pc, #96]	; (800714c <sample_course_run+0x1b8>)
 80070ec:	8813      	ldrh	r3, [r2, #0]
 80070ee:	f36f 1345 	bfc	r3, #5, #1
 80070f2:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 80070f4:	4b16      	ldr	r3, [pc, #88]	; (8007150 <sample_course_run+0x1bc>)
 80070f6:	2209      	movs	r2, #9
 80070f8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 80070fa:	4b16      	ldr	r3, [pc, #88]	; (8007154 <sample_course_run+0x1c0>)
 80070fc:	2206      	movs	r2, #6
 80070fe:	701a      	strb	r2, [r3, #0]

					get_base();
 8007100:	f003 ffb6 	bl	800b070 <get_base>

					searchC();
 8007104:	f002 fb40 	bl	8009788 <searchC>
					HAL_Delay(500);
 8007108:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800710c:	f7f9 ff5e 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8007110:	4b10      	ldr	r3, [pc, #64]	; (8007154 <sample_course_run+0x1c0>)
 8007112:	2200      	movs	r2, #0
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	4b0f      	ldr	r3, [pc, #60]	; (8007154 <sample_course_run+0x1c0>)
 8007118:	781a      	ldrb	r2, [r3, #0]
 800711a:	4b0d      	ldr	r3, [pc, #52]	; (8007150 <sample_course_run+0x1bc>)
 800711c:	701a      	strb	r2, [r3, #0]
					searchE();
 800711e:	f002 fcfb 	bl	8009b18 <searchE>

					searchC();
 8007122:	f002 fb31 	bl	8009788 <searchC>
					goal_x = GOAL_X;
 8007126:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <sample_course_run+0x1bc>)
 8007128:	2209      	movs	r2, #9
 800712a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800712c:	4b09      	ldr	r3, [pc, #36]	; (8007154 <sample_course_run+0x1c0>)
 800712e:	2206      	movs	r2, #6
 8007130:	701a      	strb	r2, [r3, #0]

					break;
 8007132:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8007134:	e737      	b.n	8006fa6 <sample_course_run+0x12>
 8007136:	bf00      	nop
 8007138:	0800d0dc 	.word	0x0800d0dc
 800713c:	200009c4 	.word	0x200009c4
 8007140:	0800cf00 	.word	0x0800cf00
 8007144:	40020000 	.word	0x40020000
 8007148:	0800d0fc 	.word	0x0800d0fc
 800714c:	20000e38 	.word	0x20000e38
 8007150:	20000a85 	.word	0x20000a85
 8007154:	20000a24 	.word	0x20000a24

08007158 <perfect_run>:
//perfect_run
//a本番用走行モード
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_run(void){
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0

	int mode = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	607b      	str	r3, [r7, #4]
	printf("Perfect Run, Mode : %d\n", mode);
 8007162:	6879      	ldr	r1, [r7, #4]
 8007164:	4887      	ldr	r0, [pc, #540]	; (8007384 <perfect_run+0x22c>)
 8007166:	f004 fd9f 	bl	800bca8 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	b2db      	uxtb	r3, r3
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	b2d8      	uxtb	r0, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	b2d9      	uxtb	r1, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	b2db      	uxtb	r3, r3
 8007182:	f003 0304 	and.w	r3, r3, #4
 8007186:	b2db      	uxtb	r3, r3
 8007188:	461a      	mov	r2, r3
 800718a:	f003 ffc9 	bl	800b120 <led_write>
		  if(dist_r >= 20){
 800718e:	4b7e      	ldr	r3, [pc, #504]	; (8007388 <perfect_run+0x230>)
 8007190:	edd3 7a00 	vldr	s15, [r3]
 8007194:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800719c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a0:	db0f      	blt.n	80071c2 <perfect_run+0x6a>
			  mode++;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3301      	adds	r3, #1
 80071a6:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80071a8:	4b77      	ldr	r3, [pc, #476]	; (8007388 <perfect_run+0x230>)
 80071aa:	f04f 0200 	mov.w	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b07      	cmp	r3, #7
 80071b4:	dd01      	ble.n	80071ba <perfect_run+0x62>
				  mode = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	4873      	ldr	r0, [pc, #460]	; (800738c <perfect_run+0x234>)
 80071be:	f004 fd73 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 80071c2:	4b71      	ldr	r3, [pc, #452]	; (8007388 <perfect_run+0x230>)
 80071c4:	edd3 7a00 	vldr	s15, [r3]
 80071c8:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80071cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d4:	d80f      	bhi.n	80071f6 <perfect_run+0x9e>
			  mode--;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	3b01      	subs	r3, #1
 80071da:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 80071dc:	4b6a      	ldr	r3, [pc, #424]	; (8007388 <perfect_run+0x230>)
 80071de:	f04f 0200 	mov.w	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	da01      	bge.n	80071ee <perfect_run+0x96>
				  mode = 7;
 80071ea:	2307      	movs	r3, #7
 80071ec:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 80071ee:	6879      	ldr	r1, [r7, #4]
 80071f0:	4866      	ldr	r0, [pc, #408]	; (800738c <perfect_run+0x234>)
 80071f2:	f004 fd59 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 80071f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80071fa:	4865      	ldr	r0, [pc, #404]	; (8007390 <perfect_run+0x238>)
 80071fc:	f7fb f842 	bl	8002284 <HAL_GPIO_ReadPin>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1b1      	bne.n	800716a <perfect_run+0x12>
			  HAL_Delay(50);
 8007206:	2032      	movs	r0, #50	; 0x32
 8007208:	f7f9 fee0 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800720c:	bf00      	nop
 800720e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007212:	485f      	ldr	r0, [pc, #380]	; (8007390 <perfect_run+0x238>)
 8007214:	f7fb f836 	bl	8002284 <HAL_GPIO_ReadPin>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0f7      	beq.n	800720e <perfect_run+0xb6>
			  switch(mode){
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b07      	cmp	r3, #7
 8007222:	d8a2      	bhi.n	800716a <perfect_run+0x12>
 8007224:	a201      	add	r2, pc, #4	; (adr r2, 800722c <perfect_run+0xd4>)
 8007226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722a:	bf00      	nop
 800722c:	0800716b 	.word	0x0800716b
 8007230:	0800724d 	.word	0x0800724d
 8007234:	08007299 	.word	0x08007299
 8007238:	080072e5 	.word	0x080072e5
 800723c:	08007331 	.word	0x08007331
 8007240:	0800716b 	.word	0x0800716b
 8007244:	0800716b 	.word	0x0800716b
 8007248:	0800737d 	.word	0x0800737d
				case 0:
					break;

				case 1:
					//----a一次探索連続走行----
					printf("First Run. (Continuous)\n");
 800724c:	4851      	ldr	r0, [pc, #324]	; (8007394 <perfect_run+0x23c>)
 800724e:	f004 fd9f 	bl	800bd90 <puts>

					MF.FLAG.SCND = 0;
 8007252:	4a51      	ldr	r2, [pc, #324]	; (8007398 <perfect_run+0x240>)
 8007254:	8813      	ldrh	r3, [r2, #0]
 8007256:	f36f 1345 	bfc	r3, #5, #1
 800725a:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 800725c:	4b4f      	ldr	r3, [pc, #316]	; (800739c <perfect_run+0x244>)
 800725e:	2207      	movs	r2, #7
 8007260:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007262:	4b4f      	ldr	r3, [pc, #316]	; (80073a0 <perfect_run+0x248>)
 8007264:	2207      	movs	r2, #7
 8007266:	701a      	strb	r2, [r3, #0]

					get_base();
 8007268:	f003 ff02 	bl	800b070 <get_base>

					searchB();
 800726c:	f002 fa02 	bl	8009674 <searchB>
					HAL_Delay(500);
 8007270:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007274:	f7f9 feaa 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8007278:	4b49      	ldr	r3, [pc, #292]	; (80073a0 <perfect_run+0x248>)
 800727a:	2200      	movs	r2, #0
 800727c:	701a      	strb	r2, [r3, #0]
 800727e:	4b48      	ldr	r3, [pc, #288]	; (80073a0 <perfect_run+0x248>)
 8007280:	781a      	ldrb	r2, [r3, #0]
 8007282:	4b46      	ldr	r3, [pc, #280]	; (800739c <perfect_run+0x244>)
 8007284:	701a      	strb	r2, [r3, #0]
					searchB();
 8007286:	f002 f9f5 	bl	8009674 <searchB>

					goal_x = 7;
 800728a:	4b44      	ldr	r3, [pc, #272]	; (800739c <perfect_run+0x244>)
 800728c:	2207      	movs	r2, #7
 800728e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007290:	4b43      	ldr	r3, [pc, #268]	; (80073a0 <perfect_run+0x248>)
 8007292:	2207      	movs	r2, #7
 8007294:	701a      	strb	r2, [r3, #0]

					break;
 8007296:	e074      	b.n	8007382 <perfect_run+0x22a>

				case 2:
					//----a二次探索走行----
					printf("Second Run. (Continuous)\n");
 8007298:	4842      	ldr	r0, [pc, #264]	; (80073a4 <perfect_run+0x24c>)
 800729a:	f004 fd79 	bl	800bd90 <puts>

					MF.FLAG.SCND = 1;
 800729e:	4a3e      	ldr	r2, [pc, #248]	; (8007398 <perfect_run+0x240>)
 80072a0:	8813      	ldrh	r3, [r2, #0]
 80072a2:	f043 0320 	orr.w	r3, r3, #32
 80072a6:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 80072a8:	4b3c      	ldr	r3, [pc, #240]	; (800739c <perfect_run+0x244>)
 80072aa:	2207      	movs	r2, #7
 80072ac:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80072ae:	4b3c      	ldr	r3, [pc, #240]	; (80073a0 <perfect_run+0x248>)
 80072b0:	2207      	movs	r2, #7
 80072b2:	701a      	strb	r2, [r3, #0]

					get_base();
 80072b4:	f003 fedc 	bl	800b070 <get_base>

					searchB();
 80072b8:	f002 f9dc 	bl	8009674 <searchB>
					HAL_Delay(500);
 80072bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80072c0:	f7f9 fe84 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 80072c4:	4b36      	ldr	r3, [pc, #216]	; (80073a0 <perfect_run+0x248>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	701a      	strb	r2, [r3, #0]
 80072ca:	4b35      	ldr	r3, [pc, #212]	; (80073a0 <perfect_run+0x248>)
 80072cc:	781a      	ldrb	r2, [r3, #0]
 80072ce:	4b33      	ldr	r3, [pc, #204]	; (800739c <perfect_run+0x244>)
 80072d0:	701a      	strb	r2, [r3, #0]
					searchB();
 80072d2:	f002 f9cf 	bl	8009674 <searchB>

					goal_x = 7;
 80072d6:	4b31      	ldr	r3, [pc, #196]	; (800739c <perfect_run+0x244>)
 80072d8:	2207      	movs	r2, #7
 80072da:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80072dc:	4b30      	ldr	r3, [pc, #192]	; (80073a0 <perfect_run+0x248>)
 80072de:	2207      	movs	r2, #7
 80072e0:	701a      	strb	r2, [r3, #0]

					break;
 80072e2:	e04e      	b.n	8007382 <perfect_run+0x22a>

				case 3:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 80072e4:	4830      	ldr	r0, [pc, #192]	; (80073a8 <perfect_run+0x250>)
 80072e6:	f004 fd53 	bl	800bd90 <puts>

					MF.FLAG.SCND = 0;
 80072ea:	4a2b      	ldr	r2, [pc, #172]	; (8007398 <perfect_run+0x240>)
 80072ec:	8813      	ldrh	r3, [r2, #0]
 80072ee:	f36f 1345 	bfc	r3, #5, #1
 80072f2:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 80072f4:	4b29      	ldr	r3, [pc, #164]	; (800739c <perfect_run+0x244>)
 80072f6:	2207      	movs	r2, #7
 80072f8:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80072fa:	4b29      	ldr	r3, [pc, #164]	; (80073a0 <perfect_run+0x248>)
 80072fc:	2207      	movs	r2, #7
 80072fe:	701a      	strb	r2, [r3, #0]

					get_base();
 8007300:	f003 feb6 	bl	800b070 <get_base>

					searchC();
 8007304:	f002 fa40 	bl	8009788 <searchC>
					HAL_Delay(500);
 8007308:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800730c:	f7f9 fe5e 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8007310:	4b23      	ldr	r3, [pc, #140]	; (80073a0 <perfect_run+0x248>)
 8007312:	2200      	movs	r2, #0
 8007314:	701a      	strb	r2, [r3, #0]
 8007316:	4b22      	ldr	r3, [pc, #136]	; (80073a0 <perfect_run+0x248>)
 8007318:	781a      	ldrb	r2, [r3, #0]
 800731a:	4b20      	ldr	r3, [pc, #128]	; (800739c <perfect_run+0x244>)
 800731c:	701a      	strb	r2, [r3, #0]
					searchC();
 800731e:	f002 fa33 	bl	8009788 <searchC>

					goal_x = 7;
 8007322:	4b1e      	ldr	r3, [pc, #120]	; (800739c <perfect_run+0x244>)
 8007324:	2207      	movs	r2, #7
 8007326:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007328:	4b1d      	ldr	r3, [pc, #116]	; (80073a0 <perfect_run+0x248>)
 800732a:	2207      	movs	r2, #7
 800732c:	701a      	strb	r2, [r3, #0]

					break;
 800732e:	e028      	b.n	8007382 <perfect_run+0x22a>

				case 4:
					//---a二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 8007330:	481e      	ldr	r0, [pc, #120]	; (80073ac <perfect_run+0x254>)
 8007332:	f004 fd2d 	bl	800bd90 <puts>

					MF.FLAG.SCND = 1;
 8007336:	4a18      	ldr	r2, [pc, #96]	; (8007398 <perfect_run+0x240>)
 8007338:	8813      	ldrh	r3, [r2, #0]
 800733a:	f043 0320 	orr.w	r3, r3, #32
 800733e:	8013      	strh	r3, [r2, #0]
					goal_x = 7;
 8007340:	4b16      	ldr	r3, [pc, #88]	; (800739c <perfect_run+0x244>)
 8007342:	2207      	movs	r2, #7
 8007344:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007346:	4b16      	ldr	r3, [pc, #88]	; (80073a0 <perfect_run+0x248>)
 8007348:	2207      	movs	r2, #7
 800734a:	701a      	strb	r2, [r3, #0]

					get_base();
 800734c:	f003 fe90 	bl	800b070 <get_base>

					searchC();
 8007350:	f002 fa1a 	bl	8009788 <searchC>
					HAL_Delay(500);
 8007354:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007358:	f7f9 fe38 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 800735c:	4b10      	ldr	r3, [pc, #64]	; (80073a0 <perfect_run+0x248>)
 800735e:	2200      	movs	r2, #0
 8007360:	701a      	strb	r2, [r3, #0]
 8007362:	4b0f      	ldr	r3, [pc, #60]	; (80073a0 <perfect_run+0x248>)
 8007364:	781a      	ldrb	r2, [r3, #0]
 8007366:	4b0d      	ldr	r3, [pc, #52]	; (800739c <perfect_run+0x244>)
 8007368:	701a      	strb	r2, [r3, #0]
					searchC();
 800736a:	f002 fa0d 	bl	8009788 <searchC>

					goal_x = 7;
 800736e:	4b0b      	ldr	r3, [pc, #44]	; (800739c <perfect_run+0x244>)
 8007370:	2207      	movs	r2, #7
 8007372:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007374:	4b0a      	ldr	r3, [pc, #40]	; (80073a0 <perfect_run+0x248>)
 8007376:	2207      	movs	r2, #7
 8007378:	701a      	strb	r2, [r3, #0]

					break;
 800737a:	e002      	b.n	8007382 <perfect_run+0x22a>
					break;

				case 6:
					break;
				case 7:
					perfect_slalom();
 800737c:	f000 f818 	bl	80073b0 <perfect_slalom>
					break;
 8007380:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8007382:	e6f2      	b.n	800716a <perfect_run+0x12>
 8007384:	0800d118 	.word	0x0800d118
 8007388:	200009c4 	.word	0x200009c4
 800738c:	0800cf00 	.word	0x0800cf00
 8007390:	40020000 	.word	0x40020000
 8007394:	0800d02c 	.word	0x0800d02c
 8007398:	20000e38 	.word	0x20000e38
 800739c:	20000a85 	.word	0x20000a85
 80073a0:	20000a24 	.word	0x20000a24
 80073a4:	0800d044 	.word	0x0800d044
 80073a8:	0800d078 	.word	0x0800d078
 80073ac:	0800d08c 	.word	0x0800d08c

080073b0 <perfect_slalom>:
//perfect_slalom
//a本番用スラローム走行モード
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_slalom(void){
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0

	int mode = 0;
 80073b6:	2300      	movs	r3, #0
 80073b8:	607b      	str	r3, [r7, #4]
	printf("Perfect Slalom, Mode : %d\n", mode);
 80073ba:	6879      	ldr	r1, [r7, #4]
 80073bc:	48b5      	ldr	r0, [pc, #724]	; (8007694 <perfect_slalom+0x2e4>)
 80073be:	f004 fc73 	bl	800bca8 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	b2d8      	uxtb	r0, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	b2d9      	uxtb	r1, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	f003 0304 	and.w	r3, r3, #4
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	461a      	mov	r2, r3
 80073e2:	f003 fe9d 	bl	800b120 <led_write>
		  if(dist_r >= 20){
 80073e6:	4bac      	ldr	r3, [pc, #688]	; (8007698 <perfect_slalom+0x2e8>)
 80073e8:	edd3 7a00 	vldr	s15, [r3]
 80073ec:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80073f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f8:	db0f      	blt.n	800741a <perfect_slalom+0x6a>
			  mode++;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3301      	adds	r3, #1
 80073fe:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8007400:	4ba5      	ldr	r3, [pc, #660]	; (8007698 <perfect_slalom+0x2e8>)
 8007402:	f04f 0200 	mov.w	r2, #0
 8007406:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b07      	cmp	r3, #7
 800740c:	dd01      	ble.n	8007412 <perfect_slalom+0x62>
				  mode = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8007412:	6879      	ldr	r1, [r7, #4]
 8007414:	48a1      	ldr	r0, [pc, #644]	; (800769c <perfect_slalom+0x2ec>)
 8007416:	f004 fc47 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800741a:	4b9f      	ldr	r3, [pc, #636]	; (8007698 <perfect_slalom+0x2e8>)
 800741c:	edd3 7a00 	vldr	s15, [r3]
 8007420:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8007424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800742c:	d80f      	bhi.n	800744e <perfect_slalom+0x9e>
			  mode--;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3b01      	subs	r3, #1
 8007432:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 8007434:	4b98      	ldr	r3, [pc, #608]	; (8007698 <perfect_slalom+0x2e8>)
 8007436:	f04f 0200 	mov.w	r2, #0
 800743a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	da01      	bge.n	8007446 <perfect_slalom+0x96>
				  mode = 7;
 8007442:	2307      	movs	r3, #7
 8007444:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	4894      	ldr	r0, [pc, #592]	; (800769c <perfect_slalom+0x2ec>)
 800744a:	f004 fc2d 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800744e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007452:	4893      	ldr	r0, [pc, #588]	; (80076a0 <perfect_slalom+0x2f0>)
 8007454:	f7fa ff16 	bl	8002284 <HAL_GPIO_ReadPin>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1b1      	bne.n	80073c2 <perfect_slalom+0x12>
			  HAL_Delay(50);
 800745e:	2032      	movs	r0, #50	; 0x32
 8007460:	f7f9 fdb4 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8007464:	bf00      	nop
 8007466:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800746a:	488d      	ldr	r0, [pc, #564]	; (80076a0 <perfect_slalom+0x2f0>)
 800746c:	f7fa ff0a 	bl	8002284 <HAL_GPIO_ReadPin>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0f7      	beq.n	8007466 <perfect_slalom+0xb6>
			  switch(mode){
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b07      	cmp	r3, #7
 800747a:	d8a2      	bhi.n	80073c2 <perfect_slalom+0x12>
 800747c:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <perfect_slalom+0xd4>)
 800747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007482:	bf00      	nop
 8007484:	080073c3 	.word	0x080073c3
 8007488:	080074a5 	.word	0x080074a5
 800748c:	080074fb 	.word	0x080074fb
 8007490:	08007561 	.word	0x08007561
 8007494:	080075c7 	.word	0x080075c7
 8007498:	0800762d 	.word	0x0800762d
 800749c:	080073c3 	.word	0x080073c3
 80074a0:	080073c3 	.word	0x080073c3
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 80074a4:	487f      	ldr	r0, [pc, #508]	; (80076a4 <perfect_slalom+0x2f4>)
 80074a6:	f004 fc73 	bl	800bd90 <puts>
					MF.FLAG.SCND = 0;
 80074aa:	4a7f      	ldr	r2, [pc, #508]	; (80076a8 <perfect_slalom+0x2f8>)
 80074ac:	8813      	ldrh	r3, [r2, #0]
 80074ae:	f36f 1345 	bfc	r3, #5, #1
 80074b2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 80074b4:	4a7c      	ldr	r2, [pc, #496]	; (80076a8 <perfect_slalom+0x2f8>)
 80074b6:	8813      	ldrh	r3, [r2, #0]
 80074b8:	f36f 2349 	bfc	r3, #9, #1
 80074bc:	8013      	strh	r3, [r2, #0]

					goal_x = 7;
 80074be:	4b7b      	ldr	r3, [pc, #492]	; (80076ac <perfect_slalom+0x2fc>)
 80074c0:	2207      	movs	r2, #7
 80074c2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80074c4:	4b7a      	ldr	r3, [pc, #488]	; (80076b0 <perfect_slalom+0x300>)
 80074c6:	2207      	movs	r2, #7
 80074c8:	701a      	strb	r2, [r3, #0]

					get_base();
 80074ca:	f003 fdd1 	bl	800b070 <get_base>

					searchC();
 80074ce:	f002 f95b 	bl	8009788 <searchC>
					HAL_Delay(500);
 80074d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80074d6:	f7f9 fd79 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 80074da:	4b75      	ldr	r3, [pc, #468]	; (80076b0 <perfect_slalom+0x300>)
 80074dc:	2200      	movs	r2, #0
 80074de:	701a      	strb	r2, [r3, #0]
 80074e0:	4b73      	ldr	r3, [pc, #460]	; (80076b0 <perfect_slalom+0x300>)
 80074e2:	781a      	ldrb	r2, [r3, #0]
 80074e4:	4b71      	ldr	r3, [pc, #452]	; (80076ac <perfect_slalom+0x2fc>)
 80074e6:	701a      	strb	r2, [r3, #0]
					searchC();
 80074e8:	f002 f94e 	bl	8009788 <searchC>

					goal_x = 7;
 80074ec:	4b6f      	ldr	r3, [pc, #444]	; (80076ac <perfect_slalom+0x2fc>)
 80074ee:	2207      	movs	r2, #7
 80074f0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80074f2:	4b6f      	ldr	r3, [pc, #444]	; (80076b0 <perfect_slalom+0x300>)
 80074f4:	2207      	movs	r2, #7
 80074f6:	701a      	strb	r2, [r3, #0]
					break;
 80074f8:	e0cb      	b.n	8007692 <perfect_slalom+0x2e2>

				case 2:
					//----a二次探索スラローム+既知区間加速走行 speed1----
					printf("First Run. (Continuous)\n");
 80074fa:	486e      	ldr	r0, [pc, #440]	; (80076b4 <perfect_slalom+0x304>)
 80074fc:	f004 fc48 	bl	800bd90 <puts>
					MF.FLAG.SCND = 1;
 8007500:	4a69      	ldr	r2, [pc, #420]	; (80076a8 <perfect_slalom+0x2f8>)
 8007502:	8813      	ldrh	r3, [r2, #0]
 8007504:	f043 0320 	orr.w	r3, r3, #32
 8007508:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800750a:	4a67      	ldr	r2, [pc, #412]	; (80076a8 <perfect_slalom+0x2f8>)
 800750c:	8813      	ldrh	r3, [r2, #0]
 800750e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007512:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 8007514:	4b68      	ldr	r3, [pc, #416]	; (80076b8 <perfect_slalom+0x308>)
 8007516:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800751a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 800751c:	4b67      	ldr	r3, [pc, #412]	; (80076bc <perfect_slalom+0x30c>)
 800751e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007522:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 8007524:	4b61      	ldr	r3, [pc, #388]	; (80076ac <perfect_slalom+0x2fc>)
 8007526:	2207      	movs	r2, #7
 8007528:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800752a:	4b61      	ldr	r3, [pc, #388]	; (80076b0 <perfect_slalom+0x300>)
 800752c:	2207      	movs	r2, #7
 800752e:	701a      	strb	r2, [r3, #0]

					get_base();
 8007530:	f003 fd9e 	bl	800b070 <get_base>

					searchC2();
 8007534:	f002 f9aa 	bl	800988c <searchC2>
					HAL_Delay(500);
 8007538:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800753c:	f7f9 fd46 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8007540:	4b5b      	ldr	r3, [pc, #364]	; (80076b0 <perfect_slalom+0x300>)
 8007542:	2200      	movs	r2, #0
 8007544:	701a      	strb	r2, [r3, #0]
 8007546:	4b5a      	ldr	r3, [pc, #360]	; (80076b0 <perfect_slalom+0x300>)
 8007548:	781a      	ldrb	r2, [r3, #0]
 800754a:	4b58      	ldr	r3, [pc, #352]	; (80076ac <perfect_slalom+0x2fc>)
 800754c:	701a      	strb	r2, [r3, #0]
					searchC2();
 800754e:	f002 f99d 	bl	800988c <searchC2>

					goal_x = 7;
 8007552:	4b56      	ldr	r3, [pc, #344]	; (80076ac <perfect_slalom+0x2fc>)
 8007554:	2207      	movs	r2, #7
 8007556:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007558:	4b55      	ldr	r3, [pc, #340]	; (80076b0 <perfect_slalom+0x300>)
 800755a:	2207      	movs	r2, #7
 800755c:	701a      	strb	r2, [r3, #0]
					break;
 800755e:	e098      	b.n	8007692 <perfect_slalom+0x2e2>

				case 3:
					//----a二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 8007560:	4857      	ldr	r0, [pc, #348]	; (80076c0 <perfect_slalom+0x310>)
 8007562:	f004 fc15 	bl	800bd90 <puts>
					MF.FLAG.SCND = 1;
 8007566:	4a50      	ldr	r2, [pc, #320]	; (80076a8 <perfect_slalom+0x2f8>)
 8007568:	8813      	ldrh	r3, [r2, #0]
 800756a:	f043 0320 	orr.w	r3, r3, #32
 800756e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 8007570:	4a4d      	ldr	r2, [pc, #308]	; (80076a8 <perfect_slalom+0x2f8>)
 8007572:	8813      	ldrh	r3, [r2, #0]
 8007574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007578:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 800757a:	4b4f      	ldr	r3, [pc, #316]	; (80076b8 <perfect_slalom+0x308>)
 800757c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007580:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 8007582:	4b4e      	ldr	r3, [pc, #312]	; (80076bc <perfect_slalom+0x30c>)
 8007584:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007588:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800758a:	4b48      	ldr	r3, [pc, #288]	; (80076ac <perfect_slalom+0x2fc>)
 800758c:	2207      	movs	r2, #7
 800758e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007590:	4b47      	ldr	r3, [pc, #284]	; (80076b0 <perfect_slalom+0x300>)
 8007592:	2207      	movs	r2, #7
 8007594:	701a      	strb	r2, [r3, #0]

					get_base();
 8007596:	f003 fd6b 	bl	800b070 <get_base>

					searchC2();
 800759a:	f002 f977 	bl	800988c <searchC2>
					HAL_Delay(500);
 800759e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80075a2:	f7f9 fd13 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 80075a6:	4b42      	ldr	r3, [pc, #264]	; (80076b0 <perfect_slalom+0x300>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	701a      	strb	r2, [r3, #0]
 80075ac:	4b40      	ldr	r3, [pc, #256]	; (80076b0 <perfect_slalom+0x300>)
 80075ae:	781a      	ldrb	r2, [r3, #0]
 80075b0:	4b3e      	ldr	r3, [pc, #248]	; (80076ac <perfect_slalom+0x2fc>)
 80075b2:	701a      	strb	r2, [r3, #0]
					searchC2();
 80075b4:	f002 f96a 	bl	800988c <searchC2>

					goal_x = 7;
 80075b8:	4b3c      	ldr	r3, [pc, #240]	; (80076ac <perfect_slalom+0x2fc>)
 80075ba:	2207      	movs	r2, #7
 80075bc:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80075be:	4b3c      	ldr	r3, [pc, #240]	; (80076b0 <perfect_slalom+0x300>)
 80075c0:	2207      	movs	r2, #7
 80075c2:	701a      	strb	r2, [r3, #0]
					break;
 80075c4:	e065      	b.n	8007692 <perfect_slalom+0x2e2>

				case 4:
					//----a二次探索スラローム+既知区間加速走行 speed3----
					printf("First Run. (Slalom)\n");
 80075c6:	483f      	ldr	r0, [pc, #252]	; (80076c4 <perfect_slalom+0x314>)
 80075c8:	f004 fbe2 	bl	800bd90 <puts>
					MF.FLAG.SCND = 1;
 80075cc:	4a36      	ldr	r2, [pc, #216]	; (80076a8 <perfect_slalom+0x2f8>)
 80075ce:	8813      	ldrh	r3, [r2, #0]
 80075d0:	f043 0320 	orr.w	r3, r3, #32
 80075d4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 80075d6:	4a34      	ldr	r2, [pc, #208]	; (80076a8 <perfect_slalom+0x2f8>)
 80075d8:	8813      	ldrh	r3, [r2, #0]
 80075da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075de:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 80075e0:	4b35      	ldr	r3, [pc, #212]	; (80076b8 <perfect_slalom+0x308>)
 80075e2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80075e6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 80075e8:	4b34      	ldr	r3, [pc, #208]	; (80076bc <perfect_slalom+0x30c>)
 80075ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075ee:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 80075f0:	4b2e      	ldr	r3, [pc, #184]	; (80076ac <perfect_slalom+0x2fc>)
 80075f2:	2207      	movs	r2, #7
 80075f4:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 80075f6:	4b2e      	ldr	r3, [pc, #184]	; (80076b0 <perfect_slalom+0x300>)
 80075f8:	2207      	movs	r2, #7
 80075fa:	701a      	strb	r2, [r3, #0]

					get_base();
 80075fc:	f003 fd38 	bl	800b070 <get_base>

					searchC2();
 8007600:	f002 f944 	bl	800988c <searchC2>
					HAL_Delay(500);
 8007604:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007608:	f7f9 fce0 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 800760c:	4b28      	ldr	r3, [pc, #160]	; (80076b0 <perfect_slalom+0x300>)
 800760e:	2200      	movs	r2, #0
 8007610:	701a      	strb	r2, [r3, #0]
 8007612:	4b27      	ldr	r3, [pc, #156]	; (80076b0 <perfect_slalom+0x300>)
 8007614:	781a      	ldrb	r2, [r3, #0]
 8007616:	4b25      	ldr	r3, [pc, #148]	; (80076ac <perfect_slalom+0x2fc>)
 8007618:	701a      	strb	r2, [r3, #0]
					searchC2();
 800761a:	f002 f937 	bl	800988c <searchC2>

					goal_x = 7;
 800761e:	4b23      	ldr	r3, [pc, #140]	; (80076ac <perfect_slalom+0x2fc>)
 8007620:	2207      	movs	r2, #7
 8007622:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 8007624:	4b22      	ldr	r3, [pc, #136]	; (80076b0 <perfect_slalom+0x300>)
 8007626:	2207      	movs	r2, #7
 8007628:	701a      	strb	r2, [r3, #0]
					break;
 800762a:	e032      	b.n	8007692 <perfect_slalom+0x2e2>

				case 5:
					//----a二次探索スラローム+既知区間加速走行 speed4----
					printf("Second Run. (Slalom)\n");
 800762c:	4826      	ldr	r0, [pc, #152]	; (80076c8 <perfect_slalom+0x318>)
 800762e:	f004 fbaf 	bl	800bd90 <puts>
					MF.FLAG.SCND = 1;
 8007632:	4a1d      	ldr	r2, [pc, #116]	; (80076a8 <perfect_slalom+0x2f8>)
 8007634:	8813      	ldrh	r3, [r2, #0]
 8007636:	f043 0320 	orr.w	r3, r3, #32
 800763a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800763c:	4a1a      	ldr	r2, [pc, #104]	; (80076a8 <perfect_slalom+0x2f8>)
 800763e:	8813      	ldrh	r3, [r2, #0]
 8007640:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007644:	8013      	strh	r3, [r2, #0]

					accel_hs = 3000;
 8007646:	4b1c      	ldr	r3, [pc, #112]	; (80076b8 <perfect_slalom+0x308>)
 8007648:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800764c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1100;
 800764e:	4b1b      	ldr	r3, [pc, #108]	; (80076bc <perfect_slalom+0x30c>)
 8007650:	f240 424c 	movw	r2, #1100	; 0x44c
 8007654:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 8007656:	4b15      	ldr	r3, [pc, #84]	; (80076ac <perfect_slalom+0x2fc>)
 8007658:	2207      	movs	r2, #7
 800765a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800765c:	4b14      	ldr	r3, [pc, #80]	; (80076b0 <perfect_slalom+0x300>)
 800765e:	2207      	movs	r2, #7
 8007660:	701a      	strb	r2, [r3, #0]

					get_base();
 8007662:	f003 fd05 	bl	800b070 <get_base>

					searchC2();
 8007666:	f002 f911 	bl	800988c <searchC2>
					HAL_Delay(500);
 800766a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800766e:	f7f9 fcad 	bl	8000fcc <HAL_Delay>

					goal_x = goal_y = 0;
 8007672:	4b0f      	ldr	r3, [pc, #60]	; (80076b0 <perfect_slalom+0x300>)
 8007674:	2200      	movs	r2, #0
 8007676:	701a      	strb	r2, [r3, #0]
 8007678:	4b0d      	ldr	r3, [pc, #52]	; (80076b0 <perfect_slalom+0x300>)
 800767a:	781a      	ldrb	r2, [r3, #0]
 800767c:	4b0b      	ldr	r3, [pc, #44]	; (80076ac <perfect_slalom+0x2fc>)
 800767e:	701a      	strb	r2, [r3, #0]
					searchC2();
 8007680:	f002 f904 	bl	800988c <searchC2>

					goal_x = 7;
 8007684:	4b09      	ldr	r3, [pc, #36]	; (80076ac <perfect_slalom+0x2fc>)
 8007686:	2207      	movs	r2, #7
 8007688:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800768a:	4b09      	ldr	r3, [pc, #36]	; (80076b0 <perfect_slalom+0x300>)
 800768c:	2207      	movs	r2, #7
 800768e:	701a      	strb	r2, [r3, #0]
					break;
 8007690:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8007692:	e696      	b.n	80073c2 <perfect_slalom+0x12>
 8007694:	0800d130 	.word	0x0800d130
 8007698:	200009c4 	.word	0x200009c4
 800769c:	0800cf00 	.word	0x0800cf00
 80076a0:	40020000 	.word	0x40020000
 80076a4:	0800d020 	.word	0x0800d020
 80076a8:	20000e38 	.word	0x20000e38
 80076ac:	20000a85 	.word	0x20000a85
 80076b0:	20000a24 	.word	0x20000a24
 80076b4:	0800d02c 	.word	0x0800d02c
 80076b8:	20000330 	.word	0x20000330
 80076bc:	20000e4c 	.word	0x20000e4c
 80076c0:	0800d044 	.word	0x0800d044
 80076c4:	0800d078 	.word	0x0800d078
 80076c8:	0800d08c 	.word	0x0800d08c

080076cc <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b088      	sub	sp, #32
 80076d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 80076d2:	2300      	movs	r3, #0
 80076d4:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 80076da:	230b      	movs	r3, #11
 80076dc:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 80076de:	2301      	movs	r3, #1
 80076e0:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80076e2:	2302      	movs	r3, #2
 80076e4:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 80076e6:	f7fa f9b3 	bl	8001a50 <HAL_FLASH_Unlock>
 80076ea:	4603      	mov	r3, r0
 80076ec:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 80076ee:	7ffb      	ldrb	r3, [r7, #31]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d001      	beq.n	80076f8 <eeprom_enable_write+0x2c>
 80076f4:	7ffb      	ldrb	r3, [r7, #31]
 80076f6:	e009      	b.n	800770c <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80076f8:	1d3a      	adds	r2, r7, #4
 80076fa:	f107 0308 	add.w	r3, r7, #8
 80076fe:	4611      	mov	r1, r2
 8007700:	4618      	mov	r0, r3
 8007702:	f7fa fb03 	bl	8001d0c <HAL_FLASHEx_Erase>
 8007706:	4603      	mov	r3, r0
 8007708:	77fb      	strb	r3, [r7, #31]
  return status;
 800770a:	7ffb      	ldrb	r3, [r7, #31]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3720      	adds	r7, #32
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 8007714:	b580      	push	{r7, lr}
 8007716:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 8007718:	f7fa f9bc 	bl	8001a94 <HAL_FLASH_Lock>
 800771c:	4603      	mov	r3, r0
}
 800771e:	4618      	mov	r0, r3
 8007720:	bd80      	pop	{r7, pc}

08007722 <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 8007722:	b590      	push	{r4, r7, lr}
 8007724:	b085      	sub	sp, #20
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	460b      	mov	r3, r1
 800772c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + EEPROM_START_ADDRESS;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8007734:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 8007738:	005b      	lsls	r3, r3, #1
 800773a:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 800773c:	887b      	ldrh	r3, [r7, #2]
 800773e:	f04f 0400 	mov.w	r4, #0
 8007742:	461a      	mov	r2, r3
 8007744:	4623      	mov	r3, r4
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	2001      	movs	r0, #1
 800774a:	f7fa f92d 	bl	80019a8 <HAL_FLASH_Program>
 800774e:	4603      	mov	r3, r0
 8007750:	73fb      	strb	r3, [r7, #15]
  return status;
 8007752:	7bfb      	ldrb	r3, [r7, #15]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	bd90      	pop	{r4, r7, pc}

0800775c <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	81fb      	strh	r3, [r7, #14]
  address = address*2 + EEPROM_START_ADDRESS;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800776e:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	881b      	ldrh	r3, [r3, #0]
 800777a:	81fb      	strh	r3, [r7, #14]
  return val;
 800777c:	89fb      	ldrh	r3, [r7, #14]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
	...

0800778c <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); 					// wait start up
 8007792:	2064      	movs	r0, #100	; 0x64
 8007794:	f7f9 fc1a 	bl	8000fcc <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); 	// 1. read who am i
 8007798:	2075      	movs	r0, #117	; 0x75
 800779a:	f000 f82f 	bl	80077fc <read_byte>
 800779e:	4603      	mov	r3, r0
 80077a0:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); 		// 2. check who am i value
 80077a2:	79fb      	ldrb	r3, [r7, #7]
 80077a4:	4619      	mov	r1, r3
 80077a6:	4813      	ldr	r0, [pc, #76]	; (80077f4 <gyro_init+0x68>)
 80077a8:	f004 fa7e 	bl	800bca8 <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 80077ac:	79fb      	ldrb	r3, [r7, #7]
 80077ae:	2b98      	cmp	r3, #152	; 0x98
 80077b0:	d003      	beq.n	80077ba <gyro_init+0x2e>
    while(1){
      printf("gyro_error\r");
 80077b2:	4811      	ldr	r0, [pc, #68]	; (80077f8 <gyro_init+0x6c>)
 80077b4:	f004 fa78 	bl	800bca8 <iprintf>
 80077b8:	e7fb      	b.n	80077b2 <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 80077ba:	2032      	movs	r0, #50	; 0x32
 80077bc:	f7f9 fc06 	bl	8000fcc <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); 	// 3. set pwr_might
 80077c0:	2100      	movs	r1, #0
 80077c2:	206b      	movs	r0, #107	; 0x6b
 80077c4:	f000 f846 	bl	8007854 <write_byte>

  HAL_Delay(50);
 80077c8:	2032      	movs	r0, #50	; 0x32
 80077ca:	f7f9 fbff 	bl	8000fcc <HAL_Delay>
  write_byte(CONFIG, 0x00); 		// 4. set config
 80077ce:	2100      	movs	r1, #0
 80077d0:	201a      	movs	r0, #26
 80077d2:	f000 f83f 	bl	8007854 <write_byte>

  HAL_Delay(50);
 80077d6:	2032      	movs	r0, #50	; 0x32
 80077d8:	f7f9 fbf8 	bl	8000fcc <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); 	// 5. set gyro config
 80077dc:	2118      	movs	r1, #24
 80077de:	201b      	movs	r0, #27
 80077e0:	f000 f838 	bl	8007854 <write_byte>

  HAL_Delay(50);
 80077e4:	2032      	movs	r0, #50	; 0x32
 80077e6:	f7f9 fbf1 	bl	8000fcc <HAL_Delay>
}
 80077ea:	bf00      	nop
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	0800d14c 	.word	0x0800d14c
 80077f8:	0800d154 	.word	0x0800d154

080077fc <read_byte>:


uint8_t read_byte(uint8_t reg){
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	4603      	mov	r3, r0
 8007804:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET ); 	//cs = Low;
 8007806:	2200      	movs	r2, #0
 8007808:	2104      	movs	r1, #4
 800780a:	4810      	ldr	r0, [pc, #64]	; (800784c <read_byte+0x50>)
 800780c:	f7fa fd52 	bl	80022b4 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 8007810:	79fb      	ldrb	r3, [r7, #7]
 8007812:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007816:	b2db      	uxtb	r3, r3
 8007818:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800781a:	f107 010f 	add.w	r1, r7, #15
 800781e:	2364      	movs	r3, #100	; 0x64
 8007820:	2201      	movs	r2, #1
 8007822:	480b      	ldr	r0, [pc, #44]	; (8007850 <read_byte+0x54>)
 8007824:	f7fb f9ce 	bl	8002bc4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); 						// read 1byte(read data)
 8007828:	f107 010e 	add.w	r1, r7, #14
 800782c:	2364      	movs	r3, #100	; 0x64
 800782e:	2201      	movs	r2, #1
 8007830:	4807      	ldr	r0, [pc, #28]	; (8007850 <read_byte+0x54>)
 8007832:	f7fb fafb 	bl	8002e2c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET );  	//cs = High;
 8007836:	2201      	movs	r2, #1
 8007838:	2104      	movs	r1, #4
 800783a:	4804      	ldr	r0, [pc, #16]	; (800784c <read_byte+0x50>)
 800783c:	f7fa fd3a 	bl	80022b4 <HAL_GPIO_WritePin>
  return val;
 8007840:	7bbb      	ldrb	r3, [r7, #14]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	40020c00 	.word	0x40020c00
 8007850:	20000120 	.word	0x20000120

08007854 <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	4603      	mov	r3, r0
 800785c:	460a      	mov	r2, r1
 800785e:	71fb      	strb	r3, [r7, #7]
 8007860:	4613      	mov	r3, r2
 8007862:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 8007864:	79fb      	ldrb	r3, [r7, #7]
 8007866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800786a:	b2db      	uxtb	r3, r3
 800786c:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); 	// cs = Low;
 800786e:	2200      	movs	r2, #0
 8007870:	2104      	movs	r1, #4
 8007872:	480c      	ldr	r0, [pc, #48]	; (80078a4 <write_byte+0x50>)
 8007874:	f7fa fd1e 	bl	80022b4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 8007878:	f107 010f 	add.w	r1, r7, #15
 800787c:	2364      	movs	r3, #100	; 0x64
 800787e:	2201      	movs	r2, #1
 8007880:	4809      	ldr	r0, [pc, #36]	; (80078a8 <write_byte+0x54>)
 8007882:	f7fb f99f 	bl	8002bc4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); 					// read 1byte(write data)
 8007886:	1db9      	adds	r1, r7, #6
 8007888:	2364      	movs	r3, #100	; 0x64
 800788a:	2201      	movs	r2, #1
 800788c:	4806      	ldr	r0, [pc, #24]	; (80078a8 <write_byte+0x54>)
 800788e:	f7fb f999 	bl	8002bc4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); 		// cs = High;
 8007892:	2201      	movs	r2, #1
 8007894:	2104      	movs	r1, #4
 8007896:	4803      	ldr	r0, [pc, #12]	; (80078a4 <write_byte+0x50>)
 8007898:	f7fa fd0c 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800789c:	bf00      	nop
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	40020c00 	.word	0x40020c00
 80078a8:	20000120 	.word	0x20000120

080078ac <accel_read_x>:


float accel_read_x(void){
 80078ac:	b590      	push	{r4, r7, lr}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
  int16_t accel_x;
  float accel;

  // H:8bit shift, Link h and l
  accel_x = (int16_t)((int16_t)(read_byte(ACCEL_XOUT_H) << 8) | read_byte(ACCEL_XOUT_L));
 80078b2:	203b      	movs	r0, #59	; 0x3b
 80078b4:	f7ff ffa2 	bl	80077fc <read_byte>
 80078b8:	4603      	mov	r3, r0
 80078ba:	021b      	lsls	r3, r3, #8
 80078bc:	b21c      	sxth	r4, r3
 80078be:	203c      	movs	r0, #60	; 0x3c
 80078c0:	f7ff ff9c 	bl	80077fc <read_byte>
 80078c4:	4603      	mov	r3, r0
 80078c6:	b21b      	sxth	r3, r3
 80078c8:	4323      	orrs	r3, r4
 80078ca:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_x / ACCEL_FACTOR); // dps to accel
 80078cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	da01      	bge.n	80078d8 <accel_read_x+0x2c>
 80078d4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80078d8:	12db      	asrs	r3, r3, #11
 80078da:	b21b      	sxth	r3, r3
 80078dc:	ee07 3a90 	vmov	s15, r3
 80078e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078e4:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	ee07 3a90 	vmov	s15, r3
}
 80078ee:	eeb0 0a67 	vmov.f32	s0, s15
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd90      	pop	{r4, r7, pc}

080078f8 <accel_read_y>:


float accel_read_y(void){
 80078f8:	b590      	push	{r4, r7, lr}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
  int16_t accel_y;
  float accel;

  // H:8bit shift, Link h and l
  accel_y = (int16_t)((int16_t)(read_byte(ACCEL_YOUT_H) << 8) | read_byte(ACCEL_YOUT_L));
 80078fe:	203d      	movs	r0, #61	; 0x3d
 8007900:	f7ff ff7c 	bl	80077fc <read_byte>
 8007904:	4603      	mov	r3, r0
 8007906:	021b      	lsls	r3, r3, #8
 8007908:	b21c      	sxth	r4, r3
 800790a:	203e      	movs	r0, #62	; 0x3e
 800790c:	f7ff ff76 	bl	80077fc <read_byte>
 8007910:	4603      	mov	r3, r0
 8007912:	b21b      	sxth	r3, r3
 8007914:	4323      	orrs	r3, r4
 8007916:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_y / ACCEL_FACTOR); // dps to accel
 8007918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800791c:	2b00      	cmp	r3, #0
 800791e:	da01      	bge.n	8007924 <accel_read_y+0x2c>
 8007920:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8007924:	12db      	asrs	r3, r3, #11
 8007926:	b21b      	sxth	r3, r3
 8007928:	ee07 3a90 	vmov	s15, r3
 800792c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007930:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	ee07 3a90 	vmov	s15, r3
}
 800793a:	eeb0 0a67 	vmov.f32	s0, s15
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	bd90      	pop	{r4, r7, pc}

08007944 <accel_read_z>:


float accel_read_z(void){
 8007944:	b590      	push	{r4, r7, lr}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
  int16_t accel_z;
  float accel;

  // H:8bit shift, Link h and l
  accel_z = (int16_t)((int16_t)(read_byte(ACCEL_ZOUT_H) << 8) | read_byte(ACCEL_ZOUT_L));
 800794a:	203f      	movs	r0, #63	; 0x3f
 800794c:	f7ff ff56 	bl	80077fc <read_byte>
 8007950:	4603      	mov	r3, r0
 8007952:	021b      	lsls	r3, r3, #8
 8007954:	b21c      	sxth	r4, r3
 8007956:	2040      	movs	r0, #64	; 0x40
 8007958:	f7ff ff50 	bl	80077fc <read_byte>
 800795c:	4603      	mov	r3, r0
 800795e:	b21b      	sxth	r3, r3
 8007960:	4323      	orrs	r3, r4
 8007962:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_z / ACCEL_FACTOR-7); // dps to accel
 8007964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007968:	2b00      	cmp	r3, #0
 800796a:	da01      	bge.n	8007970 <accel_read_z+0x2c>
 800796c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8007970:	12db      	asrs	r3, r3, #11
 8007972:	b21b      	sxth	r3, r3
 8007974:	3b07      	subs	r3, #7
 8007976:	ee07 3a90 	vmov	s15, r3
 800797a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800797e:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	ee07 3a90 	vmov	s15, r3
}
 8007988:	eeb0 0a67 	vmov.f32	s0, s15
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	bd90      	pop	{r4, r7, pc}
 8007992:	0000      	movs	r0, r0
 8007994:	0000      	movs	r0, r0
	...

08007998 <gyro_read_x>:


float gyro_read_x(void){
 8007998:	b590      	push	{r4, r7, lr}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
  int16_t gyro_x;
  float omega;

  // H:8bit shift, Link h and l
  gyro_x = (int16_t)((int16_t)(read_byte(GYRO_XOUT_H) << 8) | read_byte(GYRO_XOUT_L));
 800799e:	2043      	movs	r0, #67	; 0x43
 80079a0:	f7ff ff2c 	bl	80077fc <read_byte>
 80079a4:	4603      	mov	r3, r0
 80079a6:	021b      	lsls	r3, r3, #8
 80079a8:	b21c      	sxth	r4, r3
 80079aa:	2044      	movs	r0, #68	; 0x44
 80079ac:	f7ff ff26 	bl	80077fc <read_byte>
 80079b0:	4603      	mov	r3, r0
 80079b2:	b21b      	sxth	r3, r3
 80079b4:	4323      	orrs	r3, r4
 80079b6:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_x / GYRO_FACTOR+1.4); // dps to deg/sec
 80079b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80079bc:	4618      	mov	r0, r3
 80079be:	f7f8 fda9 	bl	8000514 <__aeabi_i2d>
 80079c2:	a30f      	add	r3, pc, #60	; (adr r3, 8007a00 <gyro_read_x+0x68>)
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	f7f8 ff38 	bl	800083c <__aeabi_ddiv>
 80079cc:	4603      	mov	r3, r0
 80079ce:	460c      	mov	r4, r1
 80079d0:	4618      	mov	r0, r3
 80079d2:	4621      	mov	r1, r4
 80079d4:	a30c      	add	r3, pc, #48	; (adr r3, 8007a08 <gyro_read_x+0x70>)
 80079d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079da:	f7f8 fc4f 	bl	800027c <__adddf3>
 80079de:	4603      	mov	r3, r0
 80079e0:	460c      	mov	r4, r1
 80079e2:	4618      	mov	r0, r3
 80079e4:	4621      	mov	r1, r4
 80079e6:	f7f9 f8af 	bl	8000b48 <__aeabi_d2f>
 80079ea:	4603      	mov	r3, r0
 80079ec:	603b      	str	r3, [r7, #0]
  return omega;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	ee07 3a90 	vmov	s15, r3
}
 80079f4:	eeb0 0a67 	vmov.f32	s0, s15
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd90      	pop	{r4, r7, pc}
 80079fe:	bf00      	nop
 8007a00:	66666666 	.word	0x66666666
 8007a04:	40306666 	.word	0x40306666
 8007a08:	66666666 	.word	0x66666666
 8007a0c:	3ff66666 	.word	0x3ff66666

08007a10 <gyro_read_y>:


float gyro_read_y(void){
 8007a10:	b590      	push	{r4, r7, lr}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
  int16_t gyro_y;
  float omega;

  // H:8bit shift, Link h and l
  gyro_y = (int16_t)((int16_t)(read_byte(GYRO_YOUT_H) << 8) | read_byte(GYRO_YOUT_L));
 8007a16:	2045      	movs	r0, #69	; 0x45
 8007a18:	f7ff fef0 	bl	80077fc <read_byte>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	021b      	lsls	r3, r3, #8
 8007a20:	b21c      	sxth	r4, r3
 8007a22:	2046      	movs	r0, #70	; 0x46
 8007a24:	f7ff feea 	bl	80077fc <read_byte>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	b21b      	sxth	r3, r3
 8007a2c:	4323      	orrs	r3, r4
 8007a2e:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_y / GYRO_FACTOR-0.75); // dps to deg/sec
 8007a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7f8 fd6d 	bl	8000514 <__aeabi_i2d>
 8007a3a:	a310      	add	r3, pc, #64	; (adr r3, 8007a7c <gyro_read_y+0x6c>)
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	f7f8 fefc 	bl	800083c <__aeabi_ddiv>
 8007a44:	4603      	mov	r3, r0
 8007a46:	460c      	mov	r4, r1
 8007a48:	4618      	mov	r0, r3
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	f04f 0200 	mov.w	r2, #0
 8007a50:	4b09      	ldr	r3, [pc, #36]	; (8007a78 <gyro_read_y+0x68>)
 8007a52:	f7f8 fc11 	bl	8000278 <__aeabi_dsub>
 8007a56:	4603      	mov	r3, r0
 8007a58:	460c      	mov	r4, r1
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	f7f9 f873 	bl	8000b48 <__aeabi_d2f>
 8007a62:	4603      	mov	r3, r0
 8007a64:	603b      	str	r3, [r7, #0]
  return omega;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	ee07 3a90 	vmov	s15, r3
}
 8007a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd90      	pop	{r4, r7, pc}
 8007a76:	bf00      	nop
 8007a78:	3fe80000 	.word	0x3fe80000
 8007a7c:	66666666 	.word	0x66666666
 8007a80:	40306666 	.word	0x40306666
 8007a84:	00000000 	.word	0x00000000

08007a88 <gyro_read_z>:


float gyro_read_z(void){
 8007a88:	b590      	push	{r4, r7, lr}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 8007a8e:	2047      	movs	r0, #71	; 0x47
 8007a90:	f7ff feb4 	bl	80077fc <read_byte>
 8007a94:	4603      	mov	r3, r0
 8007a96:	021b      	lsls	r3, r3, #8
 8007a98:	b21c      	sxth	r4, r3
 8007a9a:	2048      	movs	r0, #72	; 0x48
 8007a9c:	f7ff feae 	bl	80077fc <read_byte>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	b21b      	sxth	r3, r3
 8007aa4:	4323      	orrs	r3, r4
 8007aa6:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_z / GYRO_FACTOR+1.15); // dps to deg/sec
 8007aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7f8 fd31 	bl	8000514 <__aeabi_i2d>
 8007ab2:	a30f      	add	r3, pc, #60	; (adr r3, 8007af0 <gyro_read_z+0x68>)
 8007ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab8:	f7f8 fec0 	bl	800083c <__aeabi_ddiv>
 8007abc:	4603      	mov	r3, r0
 8007abe:	460c      	mov	r4, r1
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	a30c      	add	r3, pc, #48	; (adr r3, 8007af8 <gyro_read_z+0x70>)
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	f7f8 fbd7 	bl	800027c <__adddf3>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	f7f9 f837 	bl	8000b48 <__aeabi_d2f>
 8007ada:	4603      	mov	r3, r0
 8007adc:	603b      	str	r3, [r7, #0]
  return omega;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	ee07 3a90 	vmov	s15, r3
}
 8007ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd90      	pop	{r4, r7, pc}
 8007aee:	bf00      	nop
 8007af0:	66666666 	.word	0x66666666
 8007af4:	40306666 	.word	0x40306666
 8007af8:	66666666 	.word	0x66666666
 8007afc:	3ff26666 	.word	0x3ff26666

08007b00 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int c) {
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b0a      	cmp	r3, #10
 8007b0c:	d108      	bne.n	8007b20 <__io_putchar+0x20>
    int _c = '\r';
 8007b0e:	230d      	movs	r3, #13
 8007b10:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 8007b12:	f107 010c 	add.w	r1, r7, #12
 8007b16:	2301      	movs	r3, #1
 8007b18:	2201      	movs	r2, #1
 8007b1a:	4807      	ldr	r0, [pc, #28]	; (8007b38 <__io_putchar+0x38>)
 8007b1c:	f7fc fd31 	bl	8004582 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 8007b20:	1d39      	adds	r1, r7, #4
 8007b22:	2301      	movs	r3, #1
 8007b24:	2201      	movs	r2, #1
 8007b26:	4804      	ldr	r0, [pc, #16]	; (8007b38 <__io_putchar+0x38>)
 8007b28:	f7fc fd2b 	bl	8004582 <HAL_UART_Transmit>
  return 0;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	20000a3c 	.word	0x20000a3c
 8007b3c:	00000000 	.word	0x00000000

08007b40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b40:	b5b0      	push	{r4, r5, r7, lr}
 8007b42:	b08c      	sub	sp, #48	; 0x30
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007b48:	2360      	movs	r3, #96	; 0x60
 8007b4a:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007b50:	2300      	movs	r3, #0
 8007b52:	61fb      	str	r3, [r7, #28]

	if(htim == &htim6){
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4ab6      	ldr	r2, [pc, #728]	; (8007e30 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	f040 879e 	bne.w	8008a9a <HAL_TIM_PeriodElapsedCallback+0xf5a>
		cnt_l = TIM4 -> CNT;
 8007b5e:	4bb5      	ldr	r3, [pc, #724]	; (8007e34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	ee07 3a90 	vmov	s15, r3
 8007b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6a:	4bb3      	ldr	r3, [pc, #716]	; (8007e38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007b6c:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 8007b70:	4bb2      	ldr	r3, [pc, #712]	; (8007e3c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8007b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b74:	ee07 3a90 	vmov	s15, r3
 8007b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b7c:	4bb0      	ldr	r3, [pc, #704]	; (8007e40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007b7e:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;
 8007b82:	4bad      	ldr	r3, [pc, #692]	; (8007e38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007b84:	edd3 7a00 	vldr	s15, [r3]
 8007b88:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8007e44 <HAL_TIM_PeriodElapsedCallback+0x304>
 8007b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b94:	dd09      	ble.n	8007baa <HAL_TIM_PeriodElapsedCallback+0x6a>
 8007b96:	4ba8      	ldr	r3, [pc, #672]	; (8007e38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007b98:	edd3 7a00 	vldr	s15, [r3]
 8007b9c:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8007e48 <HAL_TIM_PeriodElapsedCallback+0x308>
 8007ba0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ba4:	4ba4      	ldr	r3, [pc, #656]	; (8007e38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007ba6:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;
 8007baa:	4ba5      	ldr	r3, [pc, #660]	; (8007e40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007bac:	edd3 7a00 	vldr	s15, [r3]
 8007bb0:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8007e44 <HAL_TIM_PeriodElapsedCallback+0x304>
 8007bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bbc:	dd09      	ble.n	8007bd2 <HAL_TIM_PeriodElapsedCallback+0x92>
 8007bbe:	4ba0      	ldr	r3, [pc, #640]	; (8007e40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007bc0:	edd3 7a00 	vldr	s15, [r3]
 8007bc4:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8007e48 <HAL_TIM_PeriodElapsedCallback+0x308>
 8007bc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007bcc:	4b9c      	ldr	r3, [pc, #624]	; (8007e40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007bce:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;
 8007bd2:	4b9b      	ldr	r3, [pc, #620]	; (8007e40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007bd4:	edd3 7a00 	vldr	s15, [r3]
 8007bd8:	eef1 7a67 	vneg.f32	s15, s15
 8007bdc:	4b98      	ldr	r3, [pc, #608]	; (8007e40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007bde:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 8007be2:	4b9a      	ldr	r3, [pc, #616]	; (8007e4c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7f8 fca6 	bl	8000538 <__aeabi_f2d>
 8007bec:	4604      	mov	r4, r0
 8007bee:	460d      	mov	r5, r1
 8007bf0:	4b91      	ldr	r3, [pc, #580]	; (8007e38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7f8 fc9f 	bl	8000538 <__aeabi_f2d>
 8007bfa:	a389      	add	r3, pc, #548	; (adr r3, 8007e20 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f7f8 fcf2 	bl	80005e8 <__aeabi_dmul>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	4620      	mov	r0, r4
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	f7f8 fb36 	bl	800027c <__adddf3>
 8007c10:	4603      	mov	r3, r0
 8007c12:	460c      	mov	r4, r1
 8007c14:	4618      	mov	r0, r3
 8007c16:	4621      	mov	r1, r4
 8007c18:	f7f8 ff96 	bl	8000b48 <__aeabi_d2f>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	4b8b      	ldr	r3, [pc, #556]	; (8007e4c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8007c20:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 8007c22:	4b8b      	ldr	r3, [pc, #556]	; (8007e50 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7f8 fc86 	bl	8000538 <__aeabi_f2d>
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	460d      	mov	r5, r1
 8007c30:	4b83      	ldr	r3, [pc, #524]	; (8007e40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7f8 fc7f 	bl	8000538 <__aeabi_f2d>
 8007c3a:	a379      	add	r3, pc, #484	; (adr r3, 8007e20 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8007c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c40:	f7f8 fcd2 	bl	80005e8 <__aeabi_dmul>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4620      	mov	r0, r4
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	f7f8 fb16 	bl	800027c <__adddf3>
 8007c50:	4603      	mov	r3, r0
 8007c52:	460c      	mov	r4, r1
 8007c54:	4618      	mov	r0, r3
 8007c56:	4621      	mov	r1, r4
 8007c58:	f7f8 ff76 	bl	8000b48 <__aeabi_d2f>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	4b7c      	ldr	r3, [pc, #496]	; (8007e50 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8007c60:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 8007c62:	4b75      	ldr	r3, [pc, #468]	; (8007e38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7f8 fc66 	bl	8000538 <__aeabi_f2d>
 8007c6c:	a36c      	add	r3, pc, #432	; (adr r3, 8007e20 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	f7f8 fcb9 	bl	80005e8 <__aeabi_dmul>
 8007c76:	4603      	mov	r3, r0
 8007c78:	460c      	mov	r4, r1
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	a36a      	add	r3, pc, #424	; (adr r3, 8007e28 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	f7f8 fdda 	bl	800083c <__aeabi_ddiv>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	4621      	mov	r1, r4
 8007c90:	f7f8 ff5a 	bl	8000b48 <__aeabi_d2f>
 8007c94:	4602      	mov	r2, r0
 8007c96:	4b6f      	ldr	r3, [pc, #444]	; (8007e54 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8007c98:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 8007c9a:	4b69      	ldr	r3, [pc, #420]	; (8007e40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7f8 fc4a 	bl	8000538 <__aeabi_f2d>
 8007ca4:	a35e      	add	r3, pc, #376	; (adr r3, 8007e20 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8007ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007caa:	f7f8 fc9d 	bl	80005e8 <__aeabi_dmul>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	a35c      	add	r3, pc, #368	; (adr r3, 8007e28 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	f7f8 fdbe 	bl	800083c <__aeabi_ddiv>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	f7f8 ff3e 	bl	8000b48 <__aeabi_d2f>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	4b62      	ldr	r3, [pc, #392]	; (8007e58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8007cd0:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 8007cd2:	4b58      	ldr	r3, [pc, #352]	; (8007e34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 8007cd8:	4b58      	ldr	r3, [pc, #352]	; (8007e3c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.SPD){
 8007cde:	4b5f      	ldr	r3, [pc, #380]	; (8007e5c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 8100 	beq.w	8007eee <HAL_TIM_PeriodElapsedCallback+0x3ae>
			target_speed_l += accel_l * 0.001;
 8007cee:	4b5c      	ldr	r3, [pc, #368]	; (8007e60 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7f8 fc20 	bl	8000538 <__aeabi_f2d>
 8007cf8:	a34b      	add	r3, pc, #300	; (adr r3, 8007e28 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f7f8 fc73 	bl	80005e8 <__aeabi_dmul>
 8007d02:	4603      	mov	r3, r0
 8007d04:	460c      	mov	r4, r1
 8007d06:	4625      	mov	r5, r4
 8007d08:	461c      	mov	r4, r3
 8007d0a:	4b56      	ldr	r3, [pc, #344]	; (8007e64 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7f8 fc12 	bl	8000538 <__aeabi_f2d>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4620      	mov	r0, r4
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	f7f8 faae 	bl	800027c <__adddf3>
 8007d20:	4603      	mov	r3, r0
 8007d22:	460c      	mov	r4, r1
 8007d24:	4618      	mov	r0, r3
 8007d26:	4621      	mov	r1, r4
 8007d28:	f7f8 ff0e 	bl	8000b48 <__aeabi_d2f>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	4b4d      	ldr	r3, [pc, #308]	; (8007e64 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8007d30:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 8007d32:	4b4c      	ldr	r3, [pc, #304]	; (8007e64 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8007d34:	ed93 7a00 	vldr	s14, [r3]
 8007d38:	4b4b      	ldr	r3, [pc, #300]	; (8007e68 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8007d3a:	edd3 7a00 	vldr	s15, [r3]
 8007d3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d46:	dd03      	ble.n	8007d50 <HAL_TIM_PeriodElapsedCallback+0x210>
 8007d48:	4b47      	ldr	r3, [pc, #284]	; (8007e68 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8007d4a:	edd3 7a00 	vldr	s15, [r3]
 8007d4e:	e002      	b.n	8007d56 <HAL_TIM_PeriodElapsedCallback+0x216>
 8007d50:	4b44      	ldr	r3, [pc, #272]	; (8007e64 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8007d52:	edd3 7a00 	vldr	s15, [r3]
 8007d56:	4b45      	ldr	r3, [pc, #276]	; (8007e6c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8007d58:	ed93 7a00 	vldr	s14, [r3]
 8007d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d64:	dd10      	ble.n	8007d88 <HAL_TIM_PeriodElapsedCallback+0x248>
 8007d66:	4b3f      	ldr	r3, [pc, #252]	; (8007e64 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8007d68:	ed93 7a00 	vldr	s14, [r3]
 8007d6c:	4b3e      	ldr	r3, [pc, #248]	; (8007e68 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8007d6e:	edd3 7a00 	vldr	s15, [r3]
 8007d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d7a:	dd02      	ble.n	8007d82 <HAL_TIM_PeriodElapsedCallback+0x242>
 8007d7c:	4b3a      	ldr	r3, [pc, #232]	; (8007e68 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	e004      	b.n	8007d8c <HAL_TIM_PeriodElapsedCallback+0x24c>
 8007d82:	4b38      	ldr	r3, [pc, #224]	; (8007e64 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	e001      	b.n	8007d8c <HAL_TIM_PeriodElapsedCallback+0x24c>
 8007d88:	4b38      	ldr	r3, [pc, #224]	; (8007e6c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a35      	ldr	r2, [pc, #212]	; (8007e64 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8007d8e:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 8007d90:	4b34      	ldr	r3, [pc, #208]	; (8007e64 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8007d92:	ed93 7a00 	vldr	s14, [r3]
 8007d96:	4b2f      	ldr	r3, [pc, #188]	; (8007e54 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8007d98:	edd3 7a00 	vldr	s15, [r3]
 8007d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007da0:	4b33      	ldr	r3, [pc, #204]	; (8007e70 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8007da2:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 8007da6:	4b32      	ldr	r3, [pc, #200]	; (8007e70 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8007da8:	edd3 7a00 	vldr	s15, [r3]
 8007dac:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8007db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007db4:	4b2f      	ldr	r3, [pc, #188]	; (8007e74 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8007db6:	edc3 7a00 	vstr	s15, [r3]

			target_speed_r += accel_r * 0.001;
 8007dba:	4b2f      	ldr	r3, [pc, #188]	; (8007e78 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7f8 fbba 	bl	8000538 <__aeabi_f2d>
 8007dc4:	a318      	add	r3, pc, #96	; (adr r3, 8007e28 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	f7f8 fc0d 	bl	80005e8 <__aeabi_dmul>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	4625      	mov	r5, r4
 8007dd4:	461c      	mov	r4, r3
 8007dd6:	4b29      	ldr	r3, [pc, #164]	; (8007e7c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7f8 fbac 	bl	8000538 <__aeabi_f2d>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	4620      	mov	r0, r4
 8007de6:	4629      	mov	r1, r5
 8007de8:	f7f8 fa48 	bl	800027c <__adddf3>
 8007dec:	4603      	mov	r3, r0
 8007dee:	460c      	mov	r4, r1
 8007df0:	4618      	mov	r0, r3
 8007df2:	4621      	mov	r1, r4
 8007df4:	f7f8 fea8 	bl	8000b48 <__aeabi_d2f>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	4b20      	ldr	r3, [pc, #128]	; (8007e7c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8007dfc:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 8007dfe:	4b1f      	ldr	r3, [pc, #124]	; (8007e7c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8007e00:	ed93 7a00 	vldr	s14, [r3]
 8007e04:	4b1e      	ldr	r3, [pc, #120]	; (8007e80 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8007e06:	edd3 7a00 	vldr	s15, [r3]
 8007e0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e12:	dd37      	ble.n	8007e84 <HAL_TIM_PeriodElapsedCallback+0x344>
 8007e14:	4b1a      	ldr	r3, [pc, #104]	; (8007e80 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8007e16:	edd3 7a00 	vldr	s15, [r3]
 8007e1a:	e036      	b.n	8007e8a <HAL_TIM_PeriodElapsedCallback+0x34a>
 8007e1c:	f3af 8000 	nop.w
 8007e20:	775e3793 	.word	0x775e3793
 8007e24:	3f552a9e 	.word	0x3f552a9e
 8007e28:	d2f1a9fc 	.word	0xd2f1a9fc
 8007e2c:	3f50624d 	.word	0x3f50624d
 8007e30:	20000a88 	.word	0x20000a88
 8007e34:	40000800 	.word	0x40000800
 8007e38:	20000288 	.word	0x20000288
 8007e3c:	40010400 	.word	0x40010400
 8007e40:	20000a80 	.word	0x20000a80
 8007e44:	471c4000 	.word	0x471c4000
 8007e48:	477fff00 	.word	0x477fff00
 8007e4c:	20000e54 	.word	0x20000e54
 8007e50:	200009c4 	.word	0x200009c4
 8007e54:	200009c8 	.word	0x200009c8
 8007e58:	20000298 	.word	0x20000298
 8007e5c:	20000e38 	.word	0x20000e38
 8007e60:	20000c2c 	.word	0x20000c2c
 8007e64:	20000ad0 	.word	0x20000ad0
 8007e68:	20000654 	.word	0x20000654
 8007e6c:	20000a2c 	.word	0x20000a2c
 8007e70:	20000a38 	.word	0x20000a38
 8007e74:	20000a7c 	.word	0x20000a7c
 8007e78:	200009bc 	.word	0x200009bc
 8007e7c:	2000017c 	.word	0x2000017c
 8007e80:	20000180 	.word	0x20000180
 8007e84:	4bba      	ldr	r3, [pc, #744]	; (8008170 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8007e86:	edd3 7a00 	vldr	s15, [r3]
 8007e8a:	4bba      	ldr	r3, [pc, #744]	; (8008174 <HAL_TIM_PeriodElapsedCallback+0x634>)
 8007e8c:	ed93 7a00 	vldr	s14, [r3]
 8007e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e98:	dd10      	ble.n	8007ebc <HAL_TIM_PeriodElapsedCallback+0x37c>
 8007e9a:	4bb5      	ldr	r3, [pc, #724]	; (8008170 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8007e9c:	ed93 7a00 	vldr	s14, [r3]
 8007ea0:	4bb5      	ldr	r3, [pc, #724]	; (8008178 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8007ea2:	edd3 7a00 	vldr	s15, [r3]
 8007ea6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eae:	dd02      	ble.n	8007eb6 <HAL_TIM_PeriodElapsedCallback+0x376>
 8007eb0:	4bb1      	ldr	r3, [pc, #708]	; (8008178 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	e004      	b.n	8007ec0 <HAL_TIM_PeriodElapsedCallback+0x380>
 8007eb6:	4bae      	ldr	r3, [pc, #696]	; (8008170 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	e001      	b.n	8007ec0 <HAL_TIM_PeriodElapsedCallback+0x380>
 8007ebc:	4bad      	ldr	r3, [pc, #692]	; (8008174 <HAL_TIM_PeriodElapsedCallback+0x634>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4aab      	ldr	r2, [pc, #684]	; (8008170 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8007ec2:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 8007ec4:	4baa      	ldr	r3, [pc, #680]	; (8008170 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8007ec6:	ed93 7a00 	vldr	s14, [r3]
 8007eca:	4bac      	ldr	r3, [pc, #688]	; (800817c <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8007ecc:	edd3 7a00 	vldr	s15, [r3]
 8007ed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ed4:	4baa      	ldr	r3, [pc, #680]	; (8008180 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8007ed6:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 8007eda:	4ba9      	ldr	r3, [pc, #676]	; (8008180 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8007edc:	edd3 7a00 	vldr	s15, [r3]
 8007ee0:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8007ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ee8:	4ba6      	ldr	r3, [pc, #664]	; (8008184 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8007eea:	edc3 7a00 	vstr	s15, [r3]
		}

		cnt ++;
 8007eee:	4ba6      	ldr	r3, [pc, #664]	; (8008188 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	4aa4      	ldr	r2, [pc, #656]	; (8008188 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8007ef6:	6013      	str	r3, [r2, #0]

		if(cnt >= 5 && MF.FLAG.LOG){
 8007ef8:	4ba3      	ldr	r3, [pc, #652]	; (8008188 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b04      	cmp	r3, #4
 8007efe:	dd2a      	ble.n	8007f56 <HAL_TIM_PeriodElapsedCallback+0x416>
 8007f00:	4ba2      	ldr	r3, [pc, #648]	; (800818c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8007f02:	881b      	ldrh	r3, [r3, #0]
 8007f04:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d023      	beq.n	8007f56 <HAL_TIM_PeriodElapsedCallback+0x416>
			cnt = 0;
 8007f0e:	4b9e      	ldr	r3, [pc, #632]	; (8008188 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	601a      	str	r2, [r3, #0]
			if(get_cnt < log_allay){
 8007f14:	4b9e      	ldr	r3, [pc, #632]	; (8008190 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2bc7      	cmp	r3, #199	; 0xc7
 8007f1a:	dc1c      	bgt.n	8007f56 <HAL_TIM_PeriodElapsedCallback+0x416>
				get_speed_l[get_cnt] = speed_l;
 8007f1c:	4b9d      	ldr	r3, [pc, #628]	; (8008194 <HAL_TIM_PeriodElapsedCallback+0x654>)
 8007f1e:	edd3 7a00 	vldr	s15, [r3]
 8007f22:	4b9b      	ldr	r3, [pc, #620]	; (8008190 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f2a:	ee17 1a90 	vmov	r1, s15
 8007f2e:	4a9a      	ldr	r2, [pc, #616]	; (8008198 <HAL_TIM_PeriodElapsedCallback+0x658>)
 8007f30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_speed_r[get_cnt] = speed_r;
 8007f34:	4b91      	ldr	r3, [pc, #580]	; (800817c <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8007f36:	edd3 7a00 	vldr	s15, [r3]
 8007f3a:	4b95      	ldr	r3, [pc, #596]	; (8008190 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f42:	ee17 1a90 	vmov	r1, s15
 8007f46:	4a95      	ldr	r2, [pc, #596]	; (800819c <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8007f48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_cnt++;
 8007f4c:	4b90      	ldr	r3, [pc, #576]	; (8008190 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	3301      	adds	r3, #1
 8007f52:	4a8f      	ldr	r2, [pc, #572]	; (8008190 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8007f54:	6013      	str	r3, [r2, #0]
//		degree_x += accel_read_x() * 0.001;
//		degree_y += accel_read_y() * 0.001;
//		degree_z += accel_read_z() * 0.001;
//		degree_x += gyro_read_x() * 0.001;
//		degree_y += gyro_read_y() * 0.001;
		degree_z += gyro_read_z() * 0.001;
 8007f56:	f7ff fd97 	bl	8007a88 <gyro_read_z>
 8007f5a:	ee10 3a10 	vmov	r3, s0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7f8 faea 	bl	8000538 <__aeabi_f2d>
 8007f64:	a37e      	add	r3, pc, #504	; (adr r3, 8008160 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8007f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6a:	f7f8 fb3d 	bl	80005e8 <__aeabi_dmul>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	460c      	mov	r4, r1
 8007f72:	4625      	mov	r5, r4
 8007f74:	461c      	mov	r4, r3
 8007f76:	4b8a      	ldr	r3, [pc, #552]	; (80081a0 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7f8 fadc 	bl	8000538 <__aeabi_f2d>
 8007f80:	4602      	mov	r2, r0
 8007f82:	460b      	mov	r3, r1
 8007f84:	4620      	mov	r0, r4
 8007f86:	4629      	mov	r1, r5
 8007f88:	f7f8 f978 	bl	800027c <__adddf3>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	460c      	mov	r4, r1
 8007f90:	4618      	mov	r0, r3
 8007f92:	4621      	mov	r1, r4
 8007f94:	f7f8 fdd8 	bl	8000b48 <__aeabi_d2f>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	4b81      	ldr	r3, [pc, #516]	; (80081a0 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8007f9c:	601a      	str	r2, [r3, #0]

		if(MF.FLAG.ENKAI){
 8007f9e:	4b7b      	ldr	r3, [pc, #492]	; (800818c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8007fa0:	881b      	ldrh	r3, [r3, #0]
 8007fa2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f000 809f 	beq.w	80080ec <HAL_TIM_PeriodElapsedCallback+0x5ac>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 8007fae:	4b7c      	ldr	r3, [pc, #496]	; (80081a0 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8007fb0:	ed93 7a00 	vldr	s14, [r3]
 8007fb4:	4b7b      	ldr	r3, [pc, #492]	; (80081a4 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8007fb6:	edd3 7a00 	vldr	s15, [r3]
 8007fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fbe:	ee17 0a90 	vmov	r0, s15
 8007fc2:	f7f8 fab9 	bl	8000538 <__aeabi_f2d>
 8007fc6:	a368      	add	r3, pc, #416	; (adr r3, 8008168 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	f7f8 fb0c 	bl	80005e8 <__aeabi_dmul>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	f7f8 fdb6 	bl	8000b48 <__aeabi_d2f>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	4b72      	ldr	r3, [pc, #456]	; (80081a8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8007fe0:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 8007fe2:	4b71      	ldr	r3, [pc, #452]	; (80081a8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8007fe4:	edd3 7a00 	vldr	s15, [r3]
 8007fe8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff0:	dd25      	ble.n	800803e <HAL_TIM_PeriodElapsedCallback+0x4fe>
				target_speed_l = sqrt(2*accel_l*target_dist);
 8007ff2:	4b6e      	ldr	r3, [pc, #440]	; (80081ac <HAL_TIM_PeriodElapsedCallback+0x66c>)
 8007ff4:	edd3 7a00 	vldr	s15, [r3]
 8007ff8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007ffc:	4b6a      	ldr	r3, [pc, #424]	; (80081a8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8007ffe:	edd3 7a00 	vldr	s15, [r3]
 8008002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008006:	ee17 0a90 	vmov	r0, s15
 800800a:	f7f8 fa95 	bl	8000538 <__aeabi_f2d>
 800800e:	4603      	mov	r3, r0
 8008010:	460c      	mov	r4, r1
 8008012:	ec44 3b10 	vmov	d0, r3, r4
 8008016:	f004 fe4d 	bl	800ccb4 <sqrt>
 800801a:	ec54 3b10 	vmov	r3, r4, d0
 800801e:	4618      	mov	r0, r3
 8008020:	4621      	mov	r1, r4
 8008022:	f7f8 fd91 	bl	8000b48 <__aeabi_d2f>
 8008026:	4602      	mov	r2, r0
 8008028:	4b61      	ldr	r3, [pc, #388]	; (80081b0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800802a:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 800802c:	4b60      	ldr	r3, [pc, #384]	; (80081b0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800802e:	edd3 7a00 	vldr	s15, [r3]
 8008032:	eef1 7a67 	vneg.f32	s15, s15
 8008036:	4b4e      	ldr	r3, [pc, #312]	; (8008170 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8008038:	edc3 7a00 	vstr	s15, [r3]
 800803c:	e02c      	b.n	8008098 <HAL_TIM_PeriodElapsedCallback+0x558>
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 800803e:	4b5b      	ldr	r3, [pc, #364]	; (80081ac <HAL_TIM_PeriodElapsedCallback+0x66c>)
 8008040:	edd3 7a00 	vldr	s15, [r3]
 8008044:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008048:	4b57      	ldr	r3, [pc, #348]	; (80081a8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 800804a:	edd3 7a00 	vldr	s15, [r3]
 800804e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008052:	eef1 7a67 	vneg.f32	s15, s15
 8008056:	ee17 3a90 	vmov	r3, s15
 800805a:	4618      	mov	r0, r3
 800805c:	f7f8 fa6c 	bl	8000538 <__aeabi_f2d>
 8008060:	4603      	mov	r3, r0
 8008062:	460c      	mov	r4, r1
 8008064:	ec44 3b10 	vmov	d0, r3, r4
 8008068:	f004 fe24 	bl	800ccb4 <sqrt>
 800806c:	ec54 3b10 	vmov	r3, r4, d0
 8008070:	4618      	mov	r0, r3
 8008072:	4621      	mov	r1, r4
 8008074:	f7f8 fd68 	bl	8000b48 <__aeabi_d2f>
 8008078:	4603      	mov	r3, r0
 800807a:	ee07 3a90 	vmov	s15, r3
 800807e:	eef1 7a67 	vneg.f32	s15, s15
 8008082:	4b4b      	ldr	r3, [pc, #300]	; (80081b0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8008084:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 8008088:	4b49      	ldr	r3, [pc, #292]	; (80081b0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800808a:	edd3 7a00 	vldr	s15, [r3]
 800808e:	eef1 7a67 	vneg.f32	s15, s15
 8008092:	4b37      	ldr	r3, [pc, #220]	; (8008170 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8008094:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 8008098:	4b45      	ldr	r3, [pc, #276]	; (80081b0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800809a:	ed93 7a00 	vldr	s14, [r3]
 800809e:	4b3d      	ldr	r3, [pc, #244]	; (8008194 <HAL_TIM_PeriodElapsedCallback+0x654>)
 80080a0:	edd3 7a00 	vldr	s15, [r3]
 80080a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080a8:	4b42      	ldr	r3, [pc, #264]	; (80081b4 <HAL_TIM_PeriodElapsedCallback+0x674>)
 80080aa:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 80080ae:	4b41      	ldr	r3, [pc, #260]	; (80081b4 <HAL_TIM_PeriodElapsedCallback+0x674>)
 80080b0:	edd3 7a00 	vldr	s15, [r3]
 80080b4:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80080b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80080bc:	4b3e      	ldr	r3, [pc, #248]	; (80081b8 <HAL_TIM_PeriodElapsedCallback+0x678>)
 80080be:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 80080c2:	4b2b      	ldr	r3, [pc, #172]	; (8008170 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80080c4:	ed93 7a00 	vldr	s14, [r3]
 80080c8:	4b2c      	ldr	r3, [pc, #176]	; (800817c <HAL_TIM_PeriodElapsedCallback+0x63c>)
 80080ca:	edd3 7a00 	vldr	s15, [r3]
 80080ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080d2:	4b2b      	ldr	r3, [pc, #172]	; (8008180 <HAL_TIM_PeriodElapsedCallback+0x640>)
 80080d4:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 80080d8:	4b29      	ldr	r3, [pc, #164]	; (8008180 <HAL_TIM_PeriodElapsedCallback+0x640>)
 80080da:	edd3 7a00 	vldr	s15, [r3]
 80080de:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80080e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80080e6:	4b27      	ldr	r3, [pc, #156]	; (8008184 <HAL_TIM_PeriodElapsedCallback+0x644>)
 80080e8:	edc3 7a00 	vstr	s15, [r3]
		}

		if(MF.FLAG.GYRO){
 80080ec:	4b27      	ldr	r3, [pc, #156]	; (800818c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	f3c3 2300 	ubfx	r3, r3, #8, #1
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 8122 	beq.w	8008340 <HAL_TIM_PeriodElapsedCallback+0x800>
			target_omega_z += target_degaccel_z * 0.001;
 80080fc:	4b2f      	ldr	r3, [pc, #188]	; (80081bc <HAL_TIM_PeriodElapsedCallback+0x67c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4618      	mov	r0, r3
 8008102:	f7f8 fa19 	bl	8000538 <__aeabi_f2d>
 8008106:	a316      	add	r3, pc, #88	; (adr r3, 8008160 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f7f8 fa6c 	bl	80005e8 <__aeabi_dmul>
 8008110:	4603      	mov	r3, r0
 8008112:	460c      	mov	r4, r1
 8008114:	4625      	mov	r5, r4
 8008116:	461c      	mov	r4, r3
 8008118:	4b29      	ldr	r3, [pc, #164]	; (80081c0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4618      	mov	r0, r3
 800811e:	f7f8 fa0b 	bl	8000538 <__aeabi_f2d>
 8008122:	4602      	mov	r2, r0
 8008124:	460b      	mov	r3, r1
 8008126:	4620      	mov	r0, r4
 8008128:	4629      	mov	r1, r5
 800812a:	f7f8 f8a7 	bl	800027c <__adddf3>
 800812e:	4603      	mov	r3, r0
 8008130:	460c      	mov	r4, r1
 8008132:	4618      	mov	r0, r3
 8008134:	4621      	mov	r1, r4
 8008136:	f7f8 fd07 	bl	8000b48 <__aeabi_d2f>
 800813a:	4602      	mov	r2, r0
 800813c:	4b20      	ldr	r3, [pc, #128]	; (80081c0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 800813e:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 8008140:	4b1f      	ldr	r3, [pc, #124]	; (80081c0 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8008142:	ed93 7a00 	vldr	s14, [r3]
 8008146:	4b1f      	ldr	r3, [pc, #124]	; (80081c4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8008148:	edd3 7a00 	vldr	s15, [r3]
 800814c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008154:	dd38      	ble.n	80081c8 <HAL_TIM_PeriodElapsedCallback+0x688>
 8008156:	4b1b      	ldr	r3, [pc, #108]	; (80081c4 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8008158:	edd3 7a00 	vldr	s15, [r3]
 800815c:	e037      	b.n	80081ce <HAL_TIM_PeriodElapsedCallback+0x68e>
 800815e:	bf00      	nop
 8008160:	d2f1a9fc 	.word	0xd2f1a9fc
 8008164:	3f50624d 	.word	0x3f50624d
 8008168:	d7653223 	.word	0xd7653223
 800816c:	3fe26e40 	.word	0x3fe26e40
 8008170:	2000017c 	.word	0x2000017c
 8008174:	20000e3c 	.word	0x20000e3c
 8008178:	20000180 	.word	0x20000180
 800817c:	20000298 	.word	0x20000298
 8008180:	20000adc 	.word	0x20000adc
 8008184:	20000658 	.word	0x20000658
 8008188:	200000e8 	.word	0x200000e8
 800818c:	20000e38 	.word	0x20000e38
 8008190:	200000ec 	.word	0x200000ec
 8008194:	200009c8 	.word	0x200009c8
 8008198:	2000065c 	.word	0x2000065c
 800819c:	20000334 	.word	0x20000334
 80081a0:	20000a34 	.word	0x20000a34
 80081a4:	20000acc 	.word	0x20000acc
 80081a8:	20000e48 	.word	0x20000e48
 80081ac:	20000c2c 	.word	0x20000c2c
 80081b0:	20000ad0 	.word	0x20000ad0
 80081b4:	20000a38 	.word	0x20000a38
 80081b8:	20000a7c 	.word	0x20000a7c
 80081bc:	20000a30 	.word	0x20000a30
 80081c0:	20000184 	.word	0x20000184
 80081c4:	200009c0 	.word	0x200009c0
 80081c8:	4bab      	ldr	r3, [pc, #684]	; (8008478 <HAL_TIM_PeriodElapsedCallback+0x938>)
 80081ca:	edd3 7a00 	vldr	s15, [r3]
 80081ce:	4bab      	ldr	r3, [pc, #684]	; (800847c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 80081d0:	ed93 7a00 	vldr	s14, [r3]
 80081d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081dc:	dd10      	ble.n	8008200 <HAL_TIM_PeriodElapsedCallback+0x6c0>
 80081de:	4ba6      	ldr	r3, [pc, #664]	; (8008478 <HAL_TIM_PeriodElapsedCallback+0x938>)
 80081e0:	ed93 7a00 	vldr	s14, [r3]
 80081e4:	4ba6      	ldr	r3, [pc, #664]	; (8008480 <HAL_TIM_PeriodElapsedCallback+0x940>)
 80081e6:	edd3 7a00 	vldr	s15, [r3]
 80081ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80081ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081f2:	dd02      	ble.n	80081fa <HAL_TIM_PeriodElapsedCallback+0x6ba>
 80081f4:	4ba2      	ldr	r3, [pc, #648]	; (8008480 <HAL_TIM_PeriodElapsedCallback+0x940>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	e004      	b.n	8008204 <HAL_TIM_PeriodElapsedCallback+0x6c4>
 80081fa:	4b9f      	ldr	r3, [pc, #636]	; (8008478 <HAL_TIM_PeriodElapsedCallback+0x938>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	e001      	b.n	8008204 <HAL_TIM_PeriodElapsedCallback+0x6c4>
 8008200:	4b9e      	ldr	r3, [pc, #632]	; (800847c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a9c      	ldr	r2, [pc, #624]	; (8008478 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8008206:	6013      	str	r3, [r2, #0]
			target_speed_l = speed_G + target_omega_z/180*M_PI*TREAD/2;
 8008208:	4b9e      	ldr	r3, [pc, #632]	; (8008484 <HAL_TIM_PeriodElapsedCallback+0x944>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4618      	mov	r0, r3
 800820e:	f7f8 f993 	bl	8000538 <__aeabi_f2d>
 8008212:	4604      	mov	r4, r0
 8008214:	460d      	mov	r5, r1
 8008216:	4b98      	ldr	r3, [pc, #608]	; (8008478 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8008218:	edd3 7a00 	vldr	s15, [r3]
 800821c:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8008488 <HAL_TIM_PeriodElapsedCallback+0x948>
 8008220:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008224:	ee16 0a90 	vmov	r0, s13
 8008228:	f7f8 f986 	bl	8000538 <__aeabi_f2d>
 800822c:	a390      	add	r3, pc, #576	; (adr r3, 8008470 <HAL_TIM_PeriodElapsedCallback+0x930>)
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	f7f8 f9d9 	bl	80005e8 <__aeabi_dmul>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	4610      	mov	r0, r2
 800823c:	4619      	mov	r1, r3
 800823e:	f04f 0200 	mov.w	r2, #0
 8008242:	4b92      	ldr	r3, [pc, #584]	; (800848c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8008244:	f7f8 f9d0 	bl	80005e8 <__aeabi_dmul>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4610      	mov	r0, r2
 800824e:	4619      	mov	r1, r3
 8008250:	f04f 0200 	mov.w	r2, #0
 8008254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008258:	f7f8 faf0 	bl	800083c <__aeabi_ddiv>
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	4620      	mov	r0, r4
 8008262:	4629      	mov	r1, r5
 8008264:	f7f8 f80a 	bl	800027c <__adddf3>
 8008268:	4603      	mov	r3, r0
 800826a:	460c      	mov	r4, r1
 800826c:	4618      	mov	r0, r3
 800826e:	4621      	mov	r1, r4
 8008270:	f7f8 fc6a 	bl	8000b48 <__aeabi_d2f>
 8008274:	4602      	mov	r2, r0
 8008276:	4b86      	ldr	r3, [pc, #536]	; (8008490 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8008278:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G - target_omega_z/180*M_PI*TREAD/2;
 800827a:	4b82      	ldr	r3, [pc, #520]	; (8008484 <HAL_TIM_PeriodElapsedCallback+0x944>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4618      	mov	r0, r3
 8008280:	f7f8 f95a 	bl	8000538 <__aeabi_f2d>
 8008284:	4604      	mov	r4, r0
 8008286:	460d      	mov	r5, r1
 8008288:	4b7b      	ldr	r3, [pc, #492]	; (8008478 <HAL_TIM_PeriodElapsedCallback+0x938>)
 800828a:	edd3 7a00 	vldr	s15, [r3]
 800828e:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8008488 <HAL_TIM_PeriodElapsedCallback+0x948>
 8008292:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008296:	ee16 0a90 	vmov	r0, s13
 800829a:	f7f8 f94d 	bl	8000538 <__aeabi_f2d>
 800829e:	a374      	add	r3, pc, #464	; (adr r3, 8008470 <HAL_TIM_PeriodElapsedCallback+0x930>)
 80082a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a4:	f7f8 f9a0 	bl	80005e8 <__aeabi_dmul>
 80082a8:	4602      	mov	r2, r0
 80082aa:	460b      	mov	r3, r1
 80082ac:	4610      	mov	r0, r2
 80082ae:	4619      	mov	r1, r3
 80082b0:	f04f 0200 	mov.w	r2, #0
 80082b4:	4b75      	ldr	r3, [pc, #468]	; (800848c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 80082b6:	f7f8 f997 	bl	80005e8 <__aeabi_dmul>
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	4610      	mov	r0, r2
 80082c0:	4619      	mov	r1, r3
 80082c2:	f04f 0200 	mov.w	r2, #0
 80082c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80082ca:	f7f8 fab7 	bl	800083c <__aeabi_ddiv>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4620      	mov	r0, r4
 80082d4:	4629      	mov	r1, r5
 80082d6:	f7f7 ffcf 	bl	8000278 <__aeabi_dsub>
 80082da:	4603      	mov	r3, r0
 80082dc:	460c      	mov	r4, r1
 80082de:	4618      	mov	r0, r3
 80082e0:	4621      	mov	r1, r4
 80082e2:	f7f8 fc31 	bl	8000b48 <__aeabi_d2f>
 80082e6:	4602      	mov	r2, r0
 80082e8:	4b6a      	ldr	r3, [pc, #424]	; (8008494 <HAL_TIM_PeriodElapsedCallback+0x954>)
 80082ea:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 80082ec:	4b68      	ldr	r3, [pc, #416]	; (8008490 <HAL_TIM_PeriodElapsedCallback+0x950>)
 80082ee:	ed93 7a00 	vldr	s14, [r3]
 80082f2:	4b69      	ldr	r3, [pc, #420]	; (8008498 <HAL_TIM_PeriodElapsedCallback+0x958>)
 80082f4:	edd3 7a00 	vldr	s15, [r3]
 80082f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082fc:	4b67      	ldr	r3, [pc, #412]	; (800849c <HAL_TIM_PeriodElapsedCallback+0x95c>)
 80082fe:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 8008302:	4b66      	ldr	r3, [pc, #408]	; (800849c <HAL_TIM_PeriodElapsedCallback+0x95c>)
 8008304:	edd3 7a00 	vldr	s15, [r3]
 8008308:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800830c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008310:	4b63      	ldr	r3, [pc, #396]	; (80084a0 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8008312:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 8008316:	4b5f      	ldr	r3, [pc, #380]	; (8008494 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8008318:	ed93 7a00 	vldr	s14, [r3]
 800831c:	4b61      	ldr	r3, [pc, #388]	; (80084a4 <HAL_TIM_PeriodElapsedCallback+0x964>)
 800831e:	edd3 7a00 	vldr	s15, [r3]
 8008322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008326:	4b60      	ldr	r3, [pc, #384]	; (80084a8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8008328:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800832c:	4b5e      	ldr	r3, [pc, #376]	; (80084a8 <HAL_TIM_PeriodElapsedCallback+0x968>)
 800832e:	edd3 7a00 	vldr	s15, [r3]
 8008332:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8008336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800833a:	4b5c      	ldr	r3, [pc, #368]	; (80084ac <HAL_TIM_PeriodElapsedCallback+0x96c>)
 800833c:	edc3 7a00 	vstr	s15, [r3]
		}
*/

		//ADchange interrupt
		uint16_t delay;
		tp = (tp+1)%3;
 8008340:	4b5b      	ldr	r3, [pc, #364]	; (80084b0 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	4b5b      	ldr	r3, [pc, #364]	; (80084b4 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8008348:	fb83 3102 	smull	r3, r1, r3, r2
 800834c:	17d3      	asrs	r3, r2, #31
 800834e:	1ac9      	subs	r1, r1, r3
 8008350:	460b      	mov	r3, r1
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	440b      	add	r3, r1
 8008356:	1ad1      	subs	r1, r2, r3
 8008358:	b2ca      	uxtb	r2, r1
 800835a:	4b55      	ldr	r3, [pc, #340]	; (80084b0 <HAL_TIM_PeriodElapsedCallback+0x970>)
 800835c:	701a      	strb	r2, [r3, #0]

		switch(tp){
 800835e:	4b54      	ldr	r3, [pc, #336]	; (80084b0 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d044      	beq.n	80083f0 <HAL_TIM_PeriodElapsedCallback+0x8b0>
 8008366:	2b02      	cmp	r3, #2
 8008368:	f000 80b4 	beq.w	80084d4 <HAL_TIM_PeriodElapsedCallback+0x994>
 800836c:	2b00      	cmp	r3, #0
 800836e:	f040 81b6 	bne.w	80086de <HAL_TIM_PeriodElapsedCallback+0xb9e>
		  case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); 	//L
 8008372:	2201      	movs	r2, #1
 8008374:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008378:	484f      	ldr	r0, [pc, #316]	; (80084b8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800837a:	f7f9 ff9b 	bl	80022b4 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800837e:	2300      	movs	r3, #0
 8008380:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008382:	e002      	b.n	800838a <HAL_TIM_PeriodElapsedCallback+0x84a>
 8008384:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008386:	3301      	adds	r3, #1
 8008388:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800838a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800838c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8008390:	4293      	cmp	r3, r2
 8008392:	d9f7      	bls.n	8008384 <HAL_TIM_PeriodElapsedCallback+0x844>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_3);			//L
 8008394:	2103      	movs	r1, #3
 8008396:	4849      	ldr	r0, [pc, #292]	; (80084bc <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8008398:	f001 f89e 	bl	80094d8 <get_adc_value>
 800839c:	4603      	mov	r3, r0
 800839e:	461a      	mov	r2, r3
 80083a0:	4b47      	ldr	r3, [pc, #284]	; (80084c0 <HAL_TIM_PeriodElapsedCallback+0x980>)
 80083a2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80083a4:	2200      	movs	r2, #0
 80083a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80083aa:	4843      	ldr	r0, [pc, #268]	; (80084b8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 80083ac:	f7f9 ff82 	bl	80022b4 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  	//R
 80083b0:	2201      	movs	r2, #1
 80083b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80083b6:	4843      	ldr	r0, [pc, #268]	; (80084c4 <HAL_TIM_PeriodElapsedCallback+0x984>)
 80083b8:	f7f9 ff7c 	bl	80022b4 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 80083bc:	2300      	movs	r3, #0
 80083be:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80083c0:	e002      	b.n	80083c8 <HAL_TIM_PeriodElapsedCallback+0x888>
 80083c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083c4:	3301      	adds	r3, #1
 80083c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80083c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083ca:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d9f7      	bls.n	80083c2 <HAL_TIM_PeriodElapsedCallback+0x882>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_1);			//R
 80083d2:	2101      	movs	r1, #1
 80083d4:	4839      	ldr	r0, [pc, #228]	; (80084bc <HAL_TIM_PeriodElapsedCallback+0x97c>)
 80083d6:	f001 f87f 	bl	80094d8 <get_adc_value>
 80083da:	4603      	mov	r3, r0
 80083dc:	461a      	mov	r2, r3
 80083de:	4b3a      	ldr	r3, [pc, #232]	; (80084c8 <HAL_TIM_PeriodElapsedCallback+0x988>)
 80083e0:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80083e2:	2200      	movs	r2, #0
 80083e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80083e8:	4836      	ldr	r0, [pc, #216]	; (80084c4 <HAL_TIM_PeriodElapsedCallback+0x984>)
 80083ea:	f7f9 ff63 	bl	80022b4 <HAL_GPIO_WritePin>
			break;
 80083ee:	e176      	b.n	80086de <HAL_TIM_PeriodElapsedCallback+0xb9e>

		  case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); 	//FL
 80083f0:	2201      	movs	r2, #1
 80083f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80083f6:	4830      	ldr	r0, [pc, #192]	; (80084b8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 80083f8:	f7f9 ff5c 	bl	80022b4 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 80083fc:	2300      	movs	r3, #0
 80083fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008400:	e002      	b.n	8008408 <HAL_TIM_PeriodElapsedCallback+0x8c8>
 8008402:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008404:	3301      	adds	r3, #1
 8008406:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008408:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800840a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800840e:	4293      	cmp	r3, r2
 8008410:	d9f7      	bls.n	8008402 <HAL_TIM_PeriodElapsedCallback+0x8c2>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_2);			//FL
 8008412:	2102      	movs	r1, #2
 8008414:	4829      	ldr	r0, [pc, #164]	; (80084bc <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8008416:	f001 f85f 	bl	80094d8 <get_adc_value>
 800841a:	4603      	mov	r3, r0
 800841c:	461a      	mov	r2, r3
 800841e:	4b2b      	ldr	r3, [pc, #172]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8008420:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8008422:	2200      	movs	r2, #0
 8008424:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008428:	4823      	ldr	r0, [pc, #140]	; (80084b8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 800842a:	f7f9 ff43 	bl	80022b4 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   	//FR
 800842e:	2201      	movs	r2, #1
 8008430:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008434:	4820      	ldr	r0, [pc, #128]	; (80084b8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8008436:	f7f9 ff3d 	bl	80022b4 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800843a:	2300      	movs	r3, #0
 800843c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800843e:	e002      	b.n	8008446 <HAL_TIM_PeriodElapsedCallback+0x906>
 8008440:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008442:	3301      	adds	r3, #1
 8008444:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008446:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008448:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800844c:	4293      	cmp	r3, r2
 800844e:	d9f7      	bls.n	8008440 <HAL_TIM_PeriodElapsedCallback+0x900>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_0);			//FR
 8008450:	2100      	movs	r1, #0
 8008452:	481a      	ldr	r0, [pc, #104]	; (80084bc <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8008454:	f001 f840 	bl	80094d8 <get_adc_value>
 8008458:	4603      	mov	r3, r0
 800845a:	461a      	mov	r2, r3
 800845c:	4b1c      	ldr	r3, [pc, #112]	; (80084d0 <HAL_TIM_PeriodElapsedCallback+0x990>)
 800845e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8008460:	2200      	movs	r2, #0
 8008462:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008466:	4814      	ldr	r0, [pc, #80]	; (80084b8 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8008468:	f7f9 ff24 	bl	80022b4 <HAL_GPIO_WritePin>
			break;
 800846c:	e137      	b.n	80086de <HAL_TIM_PeriodElapsedCallback+0xb9e>
 800846e:	bf00      	nop
 8008470:	54442d18 	.word	0x54442d18
 8008474:	400921fb 	.word	0x400921fb
 8008478:	20000184 	.word	0x20000184
 800847c:	20000294 	.word	0x20000294
 8008480:	200009c0 	.word	0x200009c0
 8008484:	200009cc 	.word	0x200009cc
 8008488:	43340000 	.word	0x43340000
 800848c:	40508000 	.word	0x40508000
 8008490:	20000ad0 	.word	0x20000ad0
 8008494:	2000017c 	.word	0x2000017c
 8008498:	200009c8 	.word	0x200009c8
 800849c:	20000a38 	.word	0x20000a38
 80084a0:	20000a7c 	.word	0x20000a7c
 80084a4:	20000298 	.word	0x20000298
 80084a8:	20000adc 	.word	0x20000adc
 80084ac:	20000658 	.word	0x20000658
 80084b0:	20000e4f 	.word	0x20000e4f
 80084b4:	55555556 	.word	0x55555556
 80084b8:	40020800 	.word	0x40020800
 80084bc:	200009d8 	.word	0x200009d8
 80084c0:	200009d4 	.word	0x200009d4
 80084c4:	40020000 	.word	0x40020000
 80084c8:	20000e34 	.word	0x20000e34
 80084cc:	20000c28 	.word	0x20000c28
 80084d0:	20000ad4 	.word	0x20000ad4

		  case 2:
				//
				if(MF.FLAG.WCTRL){
 80084d4:	4ba0      	ldr	r3, [pc, #640]	; (8008758 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f000 80b7 	beq.w	8008652 <HAL_TIM_PeriodElapsedCallback+0xb12>
					int16_t dwl_tmp = 0, dwr_tmp = 0;
 80084e4:	2300      	movs	r3, #0
 80084e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80084e8:	2300      	movs	r3, #0
 80084ea:	857b      	strh	r3, [r7, #42]	; 0x2a
					dif_l = (int32_t) ad_l - base_l;
 80084ec:	4b9b      	ldr	r3, [pc, #620]	; (800875c <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	4b9b      	ldr	r3, [pc, #620]	; (8008760 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	b21a      	sxth	r2, r3
 80084fc:	4b99      	ldr	r3, [pc, #612]	; (8008764 <HAL_TIM_PeriodElapsedCallback+0xc24>)
 80084fe:	801a      	strh	r2, [r3, #0]
					dif_r = (int32_t) ad_r - base_r;
 8008500:	4b99      	ldr	r3, [pc, #612]	; (8008768 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	b29a      	uxth	r2, r3
 8008506:	4b99      	ldr	r3, [pc, #612]	; (800876c <HAL_TIM_PeriodElapsedCallback+0xc2c>)
 8008508:	881b      	ldrh	r3, [r3, #0]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	b29b      	uxth	r3, r3
 800850e:	b21a      	sxth	r2, r3
 8008510:	4b97      	ldr	r3, [pc, #604]	; (8008770 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 8008512:	801a      	strh	r2, [r3, #0]

					if(CTRL_BASE_L < dif_l || CTRL_BASE_R < dif_r){
 8008514:	4b93      	ldr	r3, [pc, #588]	; (8008764 <HAL_TIM_PeriodElapsedCallback+0xc24>)
 8008516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800851a:	2b0a      	cmp	r3, #10
 800851c:	dc04      	bgt.n	8008528 <HAL_TIM_PeriodElapsedCallback+0x9e8>
 800851e:	4b94      	ldr	r3, [pc, #592]	; (8008770 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 8008520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008524:	2b0a      	cmp	r3, #10
 8008526:	dd6e      	ble.n	8008606 <HAL_TIM_PeriodElapsedCallback+0xac6>
						if(CTRL_BASE_L < dif_l){
 8008528:	4b8e      	ldr	r3, [pc, #568]	; (8008764 <HAL_TIM_PeriodElapsedCallback+0xc24>)
 800852a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800852e:	2b0a      	cmp	r3, #10
 8008530:	dd30      	ble.n	8008594 <HAL_TIM_PeriodElapsedCallback+0xa54>
							dwl_tmp += CTRL_CONT_W * dif_l;				//a比例制御値を決定
 8008532:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8008536:	ee07 3a90 	vmov	s15, r3
 800853a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800853e:	4b89      	ldr	r3, [pc, #548]	; (8008764 <HAL_TIM_PeriodElapsedCallback+0xc24>)
 8008540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008544:	ee07 3a90 	vmov	s15, r3
 8008548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800854c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008550:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800855c:	ee17 3a90 	vmov	r3, s15
 8008560:	85bb      	strh	r3, [r7, #44]	; 0x2c
							dwr_tmp += -1 * CTRL_CONT_W * dif_l;		//a比例制御値を決定
 8008562:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008566:	ee07 3a90 	vmov	s15, r3
 800856a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800856e:	4b7d      	ldr	r3, [pc, #500]	; (8008764 <HAL_TIM_PeriodElapsedCallback+0xc24>)
 8008570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008574:	ee07 3a90 	vmov	s15, r3
 8008578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800857c:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8008580:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800858c:	ee17 3a90 	vmov	r3, s15
 8008590:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008592:	e034      	b.n	80085fe <HAL_TIM_PeriodElapsedCallback+0xabe>
						}
						else if(CTRL_BASE_R < dif_r){
 8008594:	4b76      	ldr	r3, [pc, #472]	; (8008770 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 8008596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800859a:	2b0a      	cmp	r3, #10
 800859c:	dd2f      	ble.n	80085fe <HAL_TIM_PeriodElapsedCallback+0xabe>
							dwl_tmp += -1 * CTRL_CONT_W * dif_r;		//a比例制御値を決定
 800859e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80085a2:	ee07 3a90 	vmov	s15, r3
 80085a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085aa:	4b71      	ldr	r3, [pc, #452]	; (8008770 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 80085ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085b0:	ee07 3a90 	vmov	s15, r3
 80085b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085b8:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 80085bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80085c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085c8:	ee17 3a90 	vmov	r3, s15
 80085cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
							dwr_tmp += CTRL_CONT_W * dif_r;				//a比例制御値を決定
 80085ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80085d2:	ee07 3a90 	vmov	s15, r3
 80085d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085da:	4b65      	ldr	r3, [pc, #404]	; (8008770 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 80085dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085e0:	ee07 3a90 	vmov	s15, r3
 80085e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085e8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80085ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80085f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085f8:	ee17 3a90 	vmov	r3, s15
 80085fc:	857b      	strh	r3, [r7, #42]	; 0x2a
						}
						W_G_flag = 1;
 80085fe:	4b5d      	ldr	r3, [pc, #372]	; (8008774 <HAL_TIM_PeriodElapsedCallback+0xc34>)
 8008600:	2201      	movs	r2, #1
 8008602:	701a      	strb	r2, [r3, #0]
 8008604:	e002      	b.n	800860c <HAL_TIM_PeriodElapsedCallback+0xacc>
					}else{
						W_G_flag = 0;
 8008606:	4b5b      	ldr	r3, [pc, #364]	; (8008774 <HAL_TIM_PeriodElapsedCallback+0xc34>)
 8008608:	2200      	movs	r2, #0
 800860a:	701a      	strb	r2, [r3, #0]
					}
					dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800860c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8008610:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8008614:	dd08      	ble.n	8008628 <HAL_TIM_PeriodElapsedCallback+0xae8>
 8008616:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800861a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800861e:	bfa8      	it	ge
 8008620:	f44f 63fa 	movge.w	r3, #2000	; 0x7d0
 8008624:	b21b      	sxth	r3, r3
 8008626:	e000      	b.n	800862a <HAL_TIM_PeriodElapsedCallback+0xaea>
 8008628:	4b53      	ldr	r3, [pc, #332]	; (8008778 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 800862a:	4a54      	ldr	r2, [pc, #336]	; (800877c <HAL_TIM_PeriodElapsedCallback+0xc3c>)
 800862c:	8013      	strh	r3, [r2, #0]
					dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800862e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008632:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8008636:	dd08      	ble.n	800864a <HAL_TIM_PeriodElapsedCallback+0xb0a>
 8008638:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800863c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008640:	bfa8      	it	ge
 8008642:	f44f 63fa 	movge.w	r3, #2000	; 0x7d0
 8008646:	b21b      	sxth	r3, r3
 8008648:	e000      	b.n	800864c <HAL_TIM_PeriodElapsedCallback+0xb0c>
 800864a:	4b4b      	ldr	r3, [pc, #300]	; (8008778 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 800864c:	4a4c      	ldr	r2, [pc, #304]	; (8008780 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 800864e:	8013      	strh	r3, [r2, #0]
 8008650:	e006      	b.n	8008660 <HAL_TIM_PeriodElapsedCallback+0xb20>
				}else{
					//a制御フラグがなければ壁制御値0
					dwl = dwr = 0;
 8008652:	2100      	movs	r1, #0
 8008654:	4b4a      	ldr	r3, [pc, #296]	; (8008780 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 8008656:	460a      	mov	r2, r1
 8008658:	801a      	strh	r2, [r3, #0]
 800865a:	4b48      	ldr	r3, [pc, #288]	; (800877c <HAL_TIM_PeriodElapsedCallback+0xc3c>)
 800865c:	460a      	mov	r2, r1
 800865e:	801a      	strh	r2, [r3, #0]
				}

				if(MF.FLAG.GCTRL){
 8008660:	4b3d      	ldr	r3, [pc, #244]	; (8008758 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d02f      	beq.n	80086ce <HAL_TIM_PeriodElapsedCallback+0xb8e>
					int16_t dg_tmp = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	853b      	strh	r3, [r7, #40]	; 0x28
					//a制御フラグがなければ壁制御値0
					dgl = dgr = 0;
				}
		*/
		//			dg = CTRL_CONT_G * gyro_read_z();			//a角速度制御
					dg = CTRL_CONT_G * degree_z;				//a角度制御
 8008672:	4b44      	ldr	r3, [pc, #272]	; (8008784 <HAL_TIM_PeriodElapsedCallback+0xc44>)
 8008674:	edd3 7a00 	vldr	s15, [r3]
 8008678:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8008788 <HAL_TIM_PeriodElapsedCallback+0xc48>
 800867c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008680:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008684:	ee17 3a90 	vmov	r3, s15
 8008688:	b21a      	sxth	r2, r3
 800868a:	4b40      	ldr	r3, [pc, #256]	; (800878c <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 800868c:	801a      	strh	r2, [r3, #0]
					dg = max(min(CTRL_MAX_G, dg_tmp), -1 * CTRL_MAX_G);
 800868e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8008692:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8008696:	dd08      	ble.n	80086aa <HAL_TIM_PeriodElapsedCallback+0xb6a>
 8008698:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800869c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80086a0:	bfa8      	it	ge
 80086a2:	f44f 63fa 	movge.w	r3, #2000	; 0x7d0
 80086a6:	b21b      	sxth	r3, r3
 80086a8:	e000      	b.n	80086ac <HAL_TIM_PeriodElapsedCallback+0xb6c>
 80086aa:	4b33      	ldr	r3, [pc, #204]	; (8008778 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 80086ac:	4a37      	ldr	r2, [pc, #220]	; (800878c <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 80086ae:	8013      	strh	r3, [r2, #0]
					dgl = dg;
 80086b0:	4b36      	ldr	r3, [pc, #216]	; (800878c <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	b21a      	sxth	r2, r3
 80086b6:	4b36      	ldr	r3, [pc, #216]	; (8008790 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 80086b8:	801a      	strh	r2, [r3, #0]
					dgr = -1*dg;
 80086ba:	4b34      	ldr	r3, [pc, #208]	; (800878c <HAL_TIM_PeriodElapsedCallback+0xc4c>)
 80086bc:	881b      	ldrh	r3, [r3, #0]
 80086be:	b21b      	sxth	r3, r3
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	425b      	negs	r3, r3
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	b21a      	sxth	r2, r3
 80086c8:	4b32      	ldr	r3, [pc, #200]	; (8008794 <HAL_TIM_PeriodElapsedCallback+0xc54>)
 80086ca:	801a      	strh	r2, [r3, #0]
				}else{
					//a制御フラグがなければ壁制御値0
					dgl = dgr = 0;
				}

				break;
 80086cc:	e006      	b.n	80086dc <HAL_TIM_PeriodElapsedCallback+0xb9c>
					dgl = dgr = 0;
 80086ce:	2100      	movs	r1, #0
 80086d0:	4b30      	ldr	r3, [pc, #192]	; (8008794 <HAL_TIM_PeriodElapsedCallback+0xc54>)
 80086d2:	460a      	mov	r2, r1
 80086d4:	801a      	strh	r2, [r3, #0]
 80086d6:	4b2e      	ldr	r3, [pc, #184]	; (8008790 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 80086d8:	460a      	mov	r2, r1
 80086da:	801a      	strh	r2, [r3, #0]
				break;
 80086dc:	bf00      	nop
		}

		if(MF.FLAG.DRV){
 80086de:	4b1e      	ldr	r3, [pc, #120]	; (8008758 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 80086e0:	881b      	ldrh	r3, [r3, #0]
 80086e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f000 8166 	beq.w	80089ba <HAL_TIM_PeriodElapsedCallback+0xe7a>
			if(W_G_flag == 0){
 80086ee:	4b21      	ldr	r3, [pc, #132]	; (8008774 <HAL_TIM_PeriodElapsedCallback+0xc34>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d154      	bne.n	80087a0 <HAL_TIM_PeriodElapsedCallback+0xc60>
				pulse_l = pulse_l + dgl + dwl;
 80086f6:	4b26      	ldr	r3, [pc, #152]	; (8008790 <HAL_TIM_PeriodElapsedCallback+0xc50>)
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	b21b      	sxth	r3, r3
 80086fc:	ee07 3a90 	vmov	s15, r3
 8008700:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008704:	4b24      	ldr	r3, [pc, #144]	; (8008798 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 8008706:	edd3 7a00 	vldr	s15, [r3]
 800870a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800870e:	4b1b      	ldr	r3, [pc, #108]	; (800877c <HAL_TIM_PeriodElapsedCallback+0xc3c>)
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	b21b      	sxth	r3, r3
 8008714:	ee07 3a90 	vmov	s15, r3
 8008718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800871c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008720:	4b1d      	ldr	r3, [pc, #116]	; (8008798 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 8008722:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 8008726:	4b1b      	ldr	r3, [pc, #108]	; (8008794 <HAL_TIM_PeriodElapsedCallback+0xc54>)
 8008728:	881b      	ldrh	r3, [r3, #0]
 800872a:	b21b      	sxth	r3, r3
 800872c:	ee07 3a90 	vmov	s15, r3
 8008730:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008734:	4b19      	ldr	r3, [pc, #100]	; (800879c <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8008736:	edd3 7a00 	vldr	s15, [r3]
 800873a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800873e:	4b10      	ldr	r3, [pc, #64]	; (8008780 <HAL_TIM_PeriodElapsedCallback+0xc40>)
 8008740:	881b      	ldrh	r3, [r3, #0]
 8008742:	b21b      	sxth	r3, r3
 8008744:	ee07 3a90 	vmov	s15, r3
 8008748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800874c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008750:	4b12      	ldr	r3, [pc, #72]	; (800879c <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8008752:	edc3 7a00 	vstr	s15, [r3]
 8008756:	e041      	b.n	80087dc <HAL_TIM_PeriodElapsedCallback+0xc9c>
 8008758:	20000e38 	.word	0x20000e38
 800875c:	200009d4 	.word	0x200009d4
 8008760:	20000328 	.word	0x20000328
 8008764:	20000a28 	.word	0x20000a28
 8008768:	20000e34 	.word	0x20000e34
 800876c:	2000029c 	.word	0x2000029c
 8008770:	20000a86 	.word	0x20000a86
 8008774:	20000ac8 	.word	0x20000ac8
 8008778:	fffff830 	.word	0xfffff830
 800877c:	200009d0 	.word	0x200009d0
 8008780:	20000e44 	.word	0x20000e44
 8008784:	20000a34 	.word	0x20000a34
 8008788:	447a0000 	.word	0x447a0000
 800878c:	20000ae4 	.word	0x20000ae4
 8008790:	20000178 	.word	0x20000178
 8008794:	20000a26 	.word	0x20000a26
 8008798:	20000a7c 	.word	0x20000a7c
 800879c:	20000658 	.word	0x20000658
			}else{
				pulse_l = pulse_l + dwl;
 80087a0:	4bc0      	ldr	r3, [pc, #768]	; (8008aa4 <HAL_TIM_PeriodElapsedCallback+0xf64>)
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	b21b      	sxth	r3, r3
 80087a6:	ee07 3a90 	vmov	s15, r3
 80087aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80087ae:	4bbe      	ldr	r3, [pc, #760]	; (8008aa8 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 80087b0:	edd3 7a00 	vldr	s15, [r3]
 80087b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087b8:	4bbb      	ldr	r3, [pc, #748]	; (8008aa8 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 80087ba:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dwr;
 80087be:	4bbb      	ldr	r3, [pc, #748]	; (8008aac <HAL_TIM_PeriodElapsedCallback+0xf6c>)
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	b21b      	sxth	r3, r3
 80087c4:	ee07 3a90 	vmov	s15, r3
 80087c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80087cc:	4bb8      	ldr	r3, [pc, #736]	; (8008ab0 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 80087ce:	edd3 7a00 	vldr	s15, [r3]
 80087d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087d6:	4bb6      	ldr	r3, [pc, #728]	; (8008ab0 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 80087d8:	edc3 7a00 	vstr	s15, [r3]
			}
			pulse_l = min(max(pulse_l, -1000), 1000);
 80087dc:	4bb2      	ldr	r3, [pc, #712]	; (8008aa8 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 80087de:	edd3 7a00 	vldr	s15, [r3]
 80087e2:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8008ab4 <HAL_TIM_PeriodElapsedCallback+0xf74>
 80087e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ee:	bfcc      	ite	gt
 80087f0:	2301      	movgt	r3, #1
 80087f2:	2300      	movle	r3, #0
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	f083 0301 	eor.w	r3, r3, #1
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d111      	bne.n	8008824 <HAL_TIM_PeriodElapsedCallback+0xce4>
 8008800:	4ba9      	ldr	r3, [pc, #676]	; (8008aa8 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 8008802:	edd3 7a00 	vldr	s15, [r3]
 8008806:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8008ab8 <HAL_TIM_PeriodElapsedCallback+0xf78>
 800880a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800880e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008812:	bfcc      	ite	gt
 8008814:	2301      	movgt	r3, #1
 8008816:	2300      	movle	r3, #0
 8008818:	b2db      	uxtb	r3, r3
 800881a:	f083 0301 	eor.w	r3, r3, #1
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00e      	beq.n	8008842 <HAL_TIM_PeriodElapsedCallback+0xd02>
 8008824:	4ba0      	ldr	r3, [pc, #640]	; (8008aa8 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 8008826:	edd3 7a00 	vldr	s15, [r3]
 800882a:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8008ab4 <HAL_TIM_PeriodElapsedCallback+0xf74>
 800882e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008836:	dd02      	ble.n	800883e <HAL_TIM_PeriodElapsedCallback+0xcfe>
 8008838:	4b9b      	ldr	r3, [pc, #620]	; (8008aa8 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	e002      	b.n	8008844 <HAL_TIM_PeriodElapsedCallback+0xd04>
 800883e:	4b9f      	ldr	r3, [pc, #636]	; (8008abc <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 8008840:	e000      	b.n	8008844 <HAL_TIM_PeriodElapsedCallback+0xd04>
 8008842:	4b9f      	ldr	r3, [pc, #636]	; (8008ac0 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 8008844:	4a98      	ldr	r2, [pc, #608]	; (8008aa8 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 8008846:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -1000), 1000);
 8008848:	4b99      	ldr	r3, [pc, #612]	; (8008ab0 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 800884a:	edd3 7a00 	vldr	s15, [r3]
 800884e:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8008ab4 <HAL_TIM_PeriodElapsedCallback+0xf74>
 8008852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800885a:	bfcc      	ite	gt
 800885c:	2301      	movgt	r3, #1
 800885e:	2300      	movle	r3, #0
 8008860:	b2db      	uxtb	r3, r3
 8008862:	f083 0301 	eor.w	r3, r3, #1
 8008866:	b2db      	uxtb	r3, r3
 8008868:	2b00      	cmp	r3, #0
 800886a:	d111      	bne.n	8008890 <HAL_TIM_PeriodElapsedCallback+0xd50>
 800886c:	4b90      	ldr	r3, [pc, #576]	; (8008ab0 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 800886e:	edd3 7a00 	vldr	s15, [r3]
 8008872:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8008ab8 <HAL_TIM_PeriodElapsedCallback+0xf78>
 8008876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800887a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800887e:	bfcc      	ite	gt
 8008880:	2301      	movgt	r3, #1
 8008882:	2300      	movle	r3, #0
 8008884:	b2db      	uxtb	r3, r3
 8008886:	f083 0301 	eor.w	r3, r3, #1
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00e      	beq.n	80088ae <HAL_TIM_PeriodElapsedCallback+0xd6e>
 8008890:	4b87      	ldr	r3, [pc, #540]	; (8008ab0 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 8008892:	edd3 7a00 	vldr	s15, [r3]
 8008896:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8008ab4 <HAL_TIM_PeriodElapsedCallback+0xf74>
 800889a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800889e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a2:	dd02      	ble.n	80088aa <HAL_TIM_PeriodElapsedCallback+0xd6a>
 80088a4:	4b82      	ldr	r3, [pc, #520]	; (8008ab0 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	e002      	b.n	80088b0 <HAL_TIM_PeriodElapsedCallback+0xd70>
 80088aa:	4b84      	ldr	r3, [pc, #528]	; (8008abc <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 80088ac:	e000      	b.n	80088b0 <HAL_TIM_PeriodElapsedCallback+0xd70>
 80088ae:	4b84      	ldr	r3, [pc, #528]	; (8008ac0 <HAL_TIM_PeriodElapsedCallback+0xf80>)
 80088b0:	4a7f      	ldr	r2, [pc, #508]	; (8008ab0 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 80088b2:	6013      	str	r3, [r2, #0]

			if(pulse_l > 0){
 80088b4:	4b7c      	ldr	r3, [pc, #496]	; (8008aa8 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 80088b6:	edd3 7a00 	vldr	s15, [r3]
 80088ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088c2:	dd17      	ble.n	80088f4 <HAL_TIM_PeriodElapsedCallback+0xdb4>
				drive_dir(0, 0);
 80088c4:	2100      	movs	r1, #0
 80088c6:	2000      	movs	r0, #0
 80088c8:	f7fc f9ea 	bl	8004ca0 <drive_dir>
				ConfigOC.Pulse = pulse_l;
 80088cc:	4b76      	ldr	r3, [pc, #472]	; (8008aa8 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 80088ce:	edd3 7a00 	vldr	s15, [r3]
 80088d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088d6:	ee17 3a90 	vmov	r3, s15
 80088da:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 80088dc:	f107 030c 	add.w	r3, r7, #12
 80088e0:	2200      	movs	r2, #0
 80088e2:	4619      	mov	r1, r3
 80088e4:	4877      	ldr	r0, [pc, #476]	; (8008ac4 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 80088e6:	f7fb f8f1 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80088ea:	2100      	movs	r1, #0
 80088ec:	4875      	ldr	r0, [pc, #468]	; (8008ac4 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 80088ee:	f7fa fedd 	bl	80036ac <HAL_TIM_PWM_Start>
 80088f2:	e020      	b.n	8008936 <HAL_TIM_PeriodElapsedCallback+0xdf6>
			}
			else if(pulse_l < 0){
 80088f4:	4b6c      	ldr	r3, [pc, #432]	; (8008aa8 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 80088f6:	edd3 7a00 	vldr	s15, [r3]
 80088fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008902:	d518      	bpl.n	8008936 <HAL_TIM_PeriodElapsedCallback+0xdf6>
				drive_dir(0, 1);
 8008904:	2101      	movs	r1, #1
 8008906:	2000      	movs	r0, #0
 8008908:	f7fc f9ca 	bl	8004ca0 <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 800890c:	4b66      	ldr	r3, [pc, #408]	; (8008aa8 <HAL_TIM_PeriodElapsedCallback+0xf68>)
 800890e:	edd3 7a00 	vldr	s15, [r3]
 8008912:	eef1 7a67 	vneg.f32	s15, s15
 8008916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800891a:	ee17 3a90 	vmov	r3, s15
 800891e:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 8008920:	f107 030c 	add.w	r3, r7, #12
 8008924:	2200      	movs	r2, #0
 8008926:	4619      	mov	r1, r3
 8008928:	4866      	ldr	r0, [pc, #408]	; (8008ac4 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 800892a:	f7fb f8cf 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800892e:	2100      	movs	r1, #0
 8008930:	4864      	ldr	r0, [pc, #400]	; (8008ac4 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 8008932:	f7fa febb 	bl	80036ac <HAL_TIM_PWM_Start>
			}

			if(pulse_r > 0){
 8008936:	4b5e      	ldr	r3, [pc, #376]	; (8008ab0 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 8008938:	edd3 7a00 	vldr	s15, [r3]
 800893c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008944:	dd17      	ble.n	8008976 <HAL_TIM_PeriodElapsedCallback+0xe36>
				drive_dir(1, 0);
 8008946:	2100      	movs	r1, #0
 8008948:	2001      	movs	r0, #1
 800894a:	f7fc f9a9 	bl	8004ca0 <drive_dir>
				ConfigOC.Pulse = pulse_r;
 800894e:	4b58      	ldr	r3, [pc, #352]	; (8008ab0 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 8008950:	edd3 7a00 	vldr	s15, [r3]
 8008954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008958:	ee17 3a90 	vmov	r3, s15
 800895c:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800895e:	f107 030c 	add.w	r3, r7, #12
 8008962:	220c      	movs	r2, #12
 8008964:	4619      	mov	r1, r3
 8008966:	4857      	ldr	r0, [pc, #348]	; (8008ac4 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 8008968:	f7fb f8b0 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800896c:	210c      	movs	r1, #12
 800896e:	4855      	ldr	r0, [pc, #340]	; (8008ac4 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 8008970:	f7fa fe9c 	bl	80036ac <HAL_TIM_PWM_Start>
 8008974:	e029      	b.n	80089ca <HAL_TIM_PeriodElapsedCallback+0xe8a>
			}
			else if(pulse_r < 0){
 8008976:	4b4e      	ldr	r3, [pc, #312]	; (8008ab0 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 8008978:	edd3 7a00 	vldr	s15, [r3]
 800897c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008984:	d521      	bpl.n	80089ca <HAL_TIM_PeriodElapsedCallback+0xe8a>
				drive_dir(1, 1);
 8008986:	2101      	movs	r1, #1
 8008988:	2001      	movs	r0, #1
 800898a:	f7fc f989 	bl	8004ca0 <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 800898e:	4b48      	ldr	r3, [pc, #288]	; (8008ab0 <HAL_TIM_PeriodElapsedCallback+0xf70>)
 8008990:	edd3 7a00 	vldr	s15, [r3]
 8008994:	eef1 7a67 	vneg.f32	s15, s15
 8008998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800899c:	ee17 3a90 	vmov	r3, s15
 80089a0:	613b      	str	r3, [r7, #16]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 80089a2:	f107 030c 	add.w	r3, r7, #12
 80089a6:	220c      	movs	r2, #12
 80089a8:	4619      	mov	r1, r3
 80089aa:	4846      	ldr	r0, [pc, #280]	; (8008ac4 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 80089ac:	f7fb f88e 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 80089b0:	210c      	movs	r1, #12
 80089b2:	4844      	ldr	r0, [pc, #272]	; (8008ac4 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 80089b4:	f7fa fe7a 	bl	80036ac <HAL_TIM_PWM_Start>
 80089b8:	e007      	b.n	80089ca <HAL_TIM_PeriodElapsedCallback+0xe8a>
			}
		}else{
			drive_dir(0, 2);
 80089ba:	2102      	movs	r1, #2
 80089bc:	2000      	movs	r0, #0
 80089be:	f7fc f96f 	bl	8004ca0 <drive_dir>
			drive_dir(1, 2);
 80089c2:	2102      	movs	r1, #2
 80089c4:	2001      	movs	r0, #1
 80089c6:	f7fc f96b 	bl	8004ca0 <drive_dir>
		}


		//wall check
		//----look right----
		if(ad_r > WALL_BASE_R){
 80089ca:	4b3f      	ldr	r3, [pc, #252]	; (8008ac8 <HAL_TIM_PeriodElapsedCallback+0xf88>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b32      	cmp	r3, #50	; 0x32
 80089d0:	d906      	bls.n	80089e0 <HAL_TIM_PeriodElapsedCallback+0xea0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80089d2:	2201      	movs	r2, #1
 80089d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80089d8:	483c      	ldr	r0, [pc, #240]	; (8008acc <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 80089da:	f7f9 fc6b 	bl	80022b4 <HAL_GPIO_WritePin>
 80089de:	e005      	b.n	80089ec <HAL_TIM_PeriodElapsedCallback+0xeac>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80089e0:	2200      	movs	r2, #0
 80089e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80089e6:	4839      	ldr	r0, [pc, #228]	; (8008acc <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 80089e8:	f7f9 fc64 	bl	80022b4 <HAL_GPIO_WritePin>
		}
		//----look left----
		if(ad_l > WALL_BASE_L){
 80089ec:	4b38      	ldr	r3, [pc, #224]	; (8008ad0 <HAL_TIM_PeriodElapsedCallback+0xf90>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b32      	cmp	r3, #50	; 0x32
 80089f2:	d905      	bls.n	8008a00 <HAL_TIM_PeriodElapsedCallback+0xec0>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80089f4:	2201      	movs	r2, #1
 80089f6:	2104      	movs	r1, #4
 80089f8:	4836      	ldr	r0, [pc, #216]	; (8008ad4 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 80089fa:	f7f9 fc5b 	bl	80022b4 <HAL_GPIO_WritePin>
 80089fe:	e004      	b.n	8008a0a <HAL_TIM_PeriodElapsedCallback+0xeca>
		}else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8008a00:	2200      	movs	r2, #0
 8008a02:	2104      	movs	r1, #4
 8008a04:	4833      	ldr	r0, [pc, #204]	; (8008ad4 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8008a06:	f7f9 fc55 	bl	80022b4 <HAL_GPIO_WritePin>
		}


		//battery check
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {	//2.1V以下で赤ランプ点灯=>LiPoが約7Vを下回るとランプ点灯
 8008a0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008a0e:	482f      	ldr	r0, [pc, #188]	; (8008acc <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 8008a10:	f7f9 fc38 	bl	8002284 <HAL_GPIO_ReadPin>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d105      	bne.n	8008a26 <HAL_TIM_PeriodElapsedCallback+0xee6>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	2108      	movs	r1, #8
 8008a1e:	482d      	ldr	r0, [pc, #180]	; (8008ad4 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8008a20:	f7f9 fc48 	bl	80022b4 <HAL_GPIO_WritePin>
 8008a24:	e004      	b.n	8008a30 <HAL_TIM_PeriodElapsedCallback+0xef0>
		} else {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8008a26:	2200      	movs	r2, #0
 8008a28:	2108      	movs	r1, #8
 8008a2a:	482a      	ldr	r0, [pc, #168]	; (8008ad4 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 8008a2c:	f7f9 fc42 	bl	80022b4 <HAL_GPIO_WritePin>
		}


		//fail safe
		if(degree_z >= 360 || degree_z <= -360 || dist_r >= 360 || dist_l >= 360) {	//360度以上回転発生でFail Safe
 8008a30:	4b29      	ldr	r3, [pc, #164]	; (8008ad8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 8008a32:	edd3 7a00 	vldr	s15, [r3]
 8008a36:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8008adc <HAL_TIM_PeriodElapsedCallback+0xf9c>
 8008a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a42:	da1e      	bge.n	8008a82 <HAL_TIM_PeriodElapsedCallback+0xf42>
 8008a44:	4b24      	ldr	r3, [pc, #144]	; (8008ad8 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 8008a46:	edd3 7a00 	vldr	s15, [r3]
 8008a4a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008ae0 <HAL_TIM_PeriodElapsedCallback+0xfa0>
 8008a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a56:	d914      	bls.n	8008a82 <HAL_TIM_PeriodElapsedCallback+0xf42>
 8008a58:	4b22      	ldr	r3, [pc, #136]	; (8008ae4 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 8008a5a:	edd3 7a00 	vldr	s15, [r3]
 8008a5e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008adc <HAL_TIM_PeriodElapsedCallback+0xf9c>
 8008a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a6a:	da0a      	bge.n	8008a82 <HAL_TIM_PeriodElapsedCallback+0xf42>
 8008a6c:	4b1e      	ldr	r3, [pc, #120]	; (8008ae8 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8008a6e:	edd3 7a00 	vldr	s15, [r3]
 8008a72:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008adc <HAL_TIM_PeriodElapsedCallback+0xf9c>
 8008a76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a7e:	da00      	bge.n	8008a82 <HAL_TIM_PeriodElapsedCallback+0xf42>
			   drive_dir(1, 2);
			   full_led_write(1);
		   }
		}
	}
}
 8008a80:	e00b      	b.n	8008a9a <HAL_TIM_PeriodElapsedCallback+0xf5a>
			   drive_dir(0, 2);
 8008a82:	2102      	movs	r1, #2
 8008a84:	2000      	movs	r0, #0
 8008a86:	f7fc f90b 	bl	8004ca0 <drive_dir>
			   drive_dir(1, 2);
 8008a8a:	2102      	movs	r1, #2
 8008a8c:	2001      	movs	r0, #1
 8008a8e:	f7fc f907 	bl	8004ca0 <drive_dir>
			   full_led_write(1);
 8008a92:	2001      	movs	r0, #1
 8008a94:	f002 fb7e 	bl	800b194 <full_led_write>
			   drive_dir(0, 2);
 8008a98:	e7f3      	b.n	8008a82 <HAL_TIM_PeriodElapsedCallback+0xf42>
}
 8008a9a:	bf00      	nop
 8008a9c:	3730      	adds	r7, #48	; 0x30
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	200009d0 	.word	0x200009d0
 8008aa8:	20000a7c 	.word	0x20000a7c
 8008aac:	20000e44 	.word	0x20000e44
 8008ab0:	20000658 	.word	0x20000658
 8008ab4:	c47a0000 	.word	0xc47a0000
 8008ab8:	447a0000 	.word	0x447a0000
 8008abc:	c47a0000 	.word	0xc47a0000
 8008ac0:	447a0000 	.word	0x447a0000
 8008ac4:	20000ae8 	.word	0x20000ae8
 8008ac8:	20000e34 	.word	0x20000e34
 8008acc:	40020400 	.word	0x40020400
 8008ad0:	200009d4 	.word	0x200009d4
 8008ad4:	40020800 	.word	0x40020800
 8008ad8:	20000a34 	.word	0x20000a34
 8008adc:	43b40000 	.word	0x43b40000
 8008ae0:	c3b40000 	.word	0xc3b40000
 8008ae4:	200009c4 	.word	0x200009c4
 8008ae8:	20000e54 	.word	0x20000e54

08008aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008af2:	f7f8 f9f9 	bl	8000ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008af6:	f000 f907 	bl	8008d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008afa:	f000 fbf9 	bl	80092f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8008afe:	f000 f96d 	bl	8008ddc <MX_ADC1_Init>
  MX_TIM2_Init();
 8008b02:	f000 f9f3 	bl	8008eec <MX_TIM2_Init>
  MX_TIM3_Init();
 8008b06:	f000 fa71 	bl	8008fec <MX_TIM3_Init>
  MX_TIM4_Init();
 8008b0a:	f000 fae5 	bl	80090d8 <MX_TIM4_Init>
  MX_TIM6_Init();
 8008b0e:	f000 fb37 	bl	8009180 <MX_TIM6_Init>
  MX_TIM8_Init();
 8008b12:	f000 fb6b 	bl	80091ec <MX_TIM8_Init>
  MX_SPI3_Init();
 8008b16:	f000 f9b3 	bl	8008e80 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8008b1a:	f000 fbbf 	bl	800929c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  drive_init();
 8008b1e:	f7fc f81d 	bl	8004b5c <drive_init>
  gyro_init();
 8008b22:	f7fe fe33 	bl	800778c <gyro_init>
  search_init();
 8008b26:	f000 fd07 	bl	8009538 <search_init>
  sensor_init();
 8008b2a:	f002 fa73 	bl	800b014 <sensor_init>

  printf("*** Welcome to WMMC ! ***\n");
 8008b2e:	4868      	ldr	r0, [pc, #416]	; (8008cd0 <main+0x1e4>)
 8008b30:	f003 f92e 	bl	800bd90 <puts>

  setbuf(stdout, NULL);
 8008b34:	4b67      	ldr	r3, [pc, #412]	; (8008cd4 <main+0x1e8>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f003 f92f 	bl	800bda0 <setbuf>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8008b42:	213c      	movs	r1, #60	; 0x3c
 8008b44:	4864      	ldr	r0, [pc, #400]	; (8008cd8 <main+0x1ec>)
 8008b46:	f7fa fe81 	bl	800384c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8008b4a:	213c      	movs	r1, #60	; 0x3c
 8008b4c:	4863      	ldr	r0, [pc, #396]	; (8008cdc <main+0x1f0>)
 8008b4e:	f7fa fe7d 	bl	800384c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8008b52:	4863      	ldr	r0, [pc, #396]	; (8008ce0 <main+0x1f4>)
 8008b54:	f7fa fd51 	bl	80035fa <HAL_TIM_Base_Start_IT>
/*  TIM_OC_InitTypeDef ConfigOC;
  ConfigOC.OCMode = TIM_OCMODE_PWM1;
  ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
*/
  int mode = 0;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	607b      	str	r3, [r7, #4]
  printf("Mode : %d\n", mode);
 8008b5c:	6879      	ldr	r1, [r7, #4]
 8008b5e:	4861      	ldr	r0, [pc, #388]	; (8008ce4 <main+0x1f8>)
 8008b60:	f003 f8a2 	bl	800bca8 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	b2d8      	uxtb	r0, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	b2d9      	uxtb	r1, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	461a      	mov	r2, r3
 8008b84:	f002 facc 	bl	800b120 <led_write>
	  if(dist_r >= 20){
 8008b88:	4b57      	ldr	r3, [pc, #348]	; (8008ce8 <main+0x1fc>)
 8008b8a:	edd3 7a00 	vldr	s15, [r3]
 8008b8e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b9a:	db0f      	blt.n	8008bbc <main+0xd0>
		  mode++;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 8008ba2:	4b51      	ldr	r3, [pc, #324]	; (8008ce8 <main+0x1fc>)
 8008ba4:	f04f 0200 	mov.w	r2, #0
 8008ba8:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b07      	cmp	r3, #7
 8008bae:	dd01      	ble.n	8008bb4 <main+0xc8>
			  mode = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 8008bb4:	6879      	ldr	r1, [r7, #4]
 8008bb6:	484b      	ldr	r0, [pc, #300]	; (8008ce4 <main+0x1f8>)
 8008bb8:	f003 f876 	bl	800bca8 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(dist_r <= -20){
 8008bbc:	4b4a      	ldr	r3, [pc, #296]	; (8008ce8 <main+0x1fc>)
 8008bbe:	edd3 7a00 	vldr	s15, [r3]
 8008bc2:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8008bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bce:	d80f      	bhi.n	8008bf0 <main+0x104>
		  mode--;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 8008bd6:	4b44      	ldr	r3, [pc, #272]	; (8008ce8 <main+0x1fc>)
 8008bd8:	f04f 0200 	mov.w	r2, #0
 8008bdc:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	da01      	bge.n	8008be8 <main+0xfc>
			  mode = 7;
 8008be4:	2307      	movs	r3, #7
 8008be6:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 8008be8:	6879      	ldr	r1, [r7, #4]
 8008bea:	483e      	ldr	r0, [pc, #248]	; (8008ce4 <main+0x1f8>)
 8008bec:	f003 f85c 	bl	800bca8 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8008bf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008bf4:	483d      	ldr	r0, [pc, #244]	; (8008cec <main+0x200>)
 8008bf6:	f7f9 fb45 	bl	8002284 <HAL_GPIO_ReadPin>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1b1      	bne.n	8008b64 <main+0x78>
		  HAL_Delay(50);
 8008c00:	2032      	movs	r0, #50	; 0x32
 8008c02:	f7f8 f9e3 	bl	8000fcc <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8008c06:	bf00      	nop
 8008c08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008c0c:	4837      	ldr	r0, [pc, #220]	; (8008cec <main+0x200>)
 8008c0e:	f7f9 fb39 	bl	8002284 <HAL_GPIO_ReadPin>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d0f7      	beq.n	8008c08 <main+0x11c>
		  switch(mode){
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b07      	cmp	r3, #7
 8008c1c:	d8a2      	bhi.n	8008b64 <main+0x78>
 8008c1e:	a201      	add	r2, pc, #4	; (adr r2, 8008c24 <main+0x138>)
 8008c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c24:	08008c45 	.word	0x08008c45
 8008c28:	08008c4f 	.word	0x08008c4f
 8008c2c:	08008c5b 	.word	0x08008c5b
 8008c30:	08008c67 	.word	0x08008c67
 8008c34:	08008c79 	.word	0x08008c79
 8008c38:	08008c7f 	.word	0x08008c7f
 8008c3c:	08008c8b 	.word	0x08008c8b
 8008c40:	08008cc9 	.word	0x08008cc9

		  	  case 0:
		  		  HAL_Delay(5000);
 8008c44:	f241 3088 	movw	r0, #5000	; 0x1388
 8008c48:	f7f8 f9c0 	bl	8000fcc <HAL_Delay>
		  		  break;
 8008c4c:	e03f      	b.n	8008cce <main+0x1e2>

		  	  case 1:
		  		  //----a超新地走行----
		  		  printf("Simple Run.\n");
 8008c4e:	4828      	ldr	r0, [pc, #160]	; (8008cf0 <main+0x204>)
 8008c50:	f003 f89e 	bl	800bd90 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  simple_run();
 8008c54:	f7fd feb0 	bl	80069b8 <simple_run>
		  		  break;
 8008c58:	e039      	b.n	8008cce <main+0x1e2>

		  	  case 2:
		  		  //----aスラローム走行----
		  		  printf("slalom Run.\n");
 8008c5a:	4826      	ldr	r0, [pc, #152]	; (8008cf4 <main+0x208>)
 8008c5c:	f003 f898 	bl	800bd90 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  slalom_run();
 8008c60:	f7fd ffac 	bl	8006bbc <slalom_run>
		  		  break;
 8008c64:	e033      	b.n	8008cce <main+0x1e2>

		  	  case 3:
		  		  //----flash 動作確認----
		  		  printf("eprom start \n");
 8008c66:	4824      	ldr	r0, [pc, #144]	; (8008cf8 <main+0x20c>)
 8008c68:	f003 f892 	bl	800bd90 <puts>
		  		  store_map_in_eeprom();
 8008c6c:	f002 f96c 	bl	800af48 <store_map_in_eeprom>
		  		  printf("eprom fin \n");
 8008c70:	4822      	ldr	r0, [pc, #136]	; (8008cfc <main+0x210>)
 8008c72:	f003 f88d 	bl	800bd90 <puts>
		  		  break;
 8008c76:	e02a      	b.n	8008cce <main+0x1e2>

		  	  case 4:
		  		  //----aテストモード選択----
		  		  test_select();
 8008c78:	f7fd fe18 	bl	80068ac <test_select>
		  		  break;
 8008c7c:	e027      	b.n	8008cce <main+0x1e2>

		  	  case 5:
		  		  //----sensor check----
		  		  printf("Sensor Check.\n");
 8008c7e:	4820      	ldr	r0, [pc, #128]	; (8008d00 <main+0x214>)
 8008c80:	f003 f886 	bl	800bd90 <puts>
		  		  sensor_test();
 8008c84:	f002 fb42 	bl	800b30c <sensor_test>
		  		  break;
 8008c88:	e021      	b.n	8008cce <main+0x1e2>

		  	  case 6:
		  		  //----pitagola sound----
		  		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET);
 8008c8a:	bf00      	nop
 8008c8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008c90:	4816      	ldr	r0, [pc, #88]	; (8008cec <main+0x200>)
 8008c92:	f7f9 faf7 	bl	8002284 <HAL_GPIO_ReadPin>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d0f7      	beq.n	8008c8c <main+0x1a0>
		  		  for(int i=0; i<pita; i++){
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	603b      	str	r3, [r7, #0]
 8008ca0:	e00e      	b.n	8008cc0 <main+0x1d4>
		  			  buzzer(pitagola[i][0], pitagola[i][1]);
 8008ca2:	4a18      	ldr	r2, [pc, #96]	; (8008d04 <main+0x218>)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8008caa:	4a16      	ldr	r2, [pc, #88]	; (8008d04 <main+0x218>)
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	00db      	lsls	r3, r3, #3
 8008cb0:	4413      	add	r3, r2
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	f000 fbd9 	bl	800946c <buzzer>
		  		  for(int i=0; i<pita; i++){
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	603b      	str	r3, [r7, #0]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2b0a      	cmp	r3, #10
 8008cc4:	dded      	ble.n	8008ca2 <main+0x1b6>
		  		  }
		  		  break;
 8008cc6:	e002      	b.n	8008cce <main+0x1e2>

		  	  case 7:
		  		  //----a本番走行用----
		  		  //MF.FLAG.WEDGE = 1;
		  		  perfect_run();
 8008cc8:	f7fe fa46 	bl	8007158 <perfect_run>
		  		  break;
 8008ccc:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8008cce:	e749      	b.n	8008b64 <main+0x78>
 8008cd0:	0800d160 	.word	0x0800d160
 8008cd4:	20000064 	.word	0x20000064
 8008cd8:	200002e8 	.word	0x200002e8
 8008cdc:	200002a8 	.word	0x200002a8
 8008ce0:	20000a88 	.word	0x20000a88
 8008ce4:	0800d17c 	.word	0x0800d17c
 8008ce8:	200009c4 	.word	0x200009c4
 8008cec:	40020000 	.word	0x40020000
 8008cf0:	0800d188 	.word	0x0800d188
 8008cf4:	0800d194 	.word	0x0800d194
 8008cf8:	0800d1a0 	.word	0x0800d1a0
 8008cfc:	0800d1b0 	.word	0x0800d1b0
 8008d00:	0800d1bc 	.word	0x0800d1bc
 8008d04:	20000008 	.word	0x20000008

08008d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b094      	sub	sp, #80	; 0x50
 8008d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008d0e:	f107 0320 	add.w	r3, r7, #32
 8008d12:	2230      	movs	r2, #48	; 0x30
 8008d14:	2100      	movs	r1, #0
 8008d16:	4618      	mov	r0, r3
 8008d18:	f002 ffbe 	bl	800bc98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008d1c:	f107 030c 	add.w	r3, r7, #12
 8008d20:	2200      	movs	r2, #0
 8008d22:	601a      	str	r2, [r3, #0]
 8008d24:	605a      	str	r2, [r3, #4]
 8008d26:	609a      	str	r2, [r3, #8]
 8008d28:	60da      	str	r2, [r3, #12]
 8008d2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	60bb      	str	r3, [r7, #8]
 8008d30:	4b28      	ldr	r3, [pc, #160]	; (8008dd4 <SystemClock_Config+0xcc>)
 8008d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d34:	4a27      	ldr	r2, [pc, #156]	; (8008dd4 <SystemClock_Config+0xcc>)
 8008d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8008d3c:	4b25      	ldr	r3, [pc, #148]	; (8008dd4 <SystemClock_Config+0xcc>)
 8008d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d44:	60bb      	str	r3, [r7, #8]
 8008d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d48:	2300      	movs	r3, #0
 8008d4a:	607b      	str	r3, [r7, #4]
 8008d4c:	4b22      	ldr	r3, [pc, #136]	; (8008dd8 <SystemClock_Config+0xd0>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a21      	ldr	r2, [pc, #132]	; (8008dd8 <SystemClock_Config+0xd0>)
 8008d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	4b1f      	ldr	r3, [pc, #124]	; (8008dd8 <SystemClock_Config+0xd0>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d60:	607b      	str	r3, [r7, #4]
 8008d62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008d64:	2302      	movs	r3, #2
 8008d66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008d6c:	2310      	movs	r3, #16
 8008d6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008d70:	2302      	movs	r3, #2
 8008d72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008d74:	2300      	movs	r3, #0
 8008d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008d78:	2308      	movs	r3, #8
 8008d7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8008d7c:	23a8      	movs	r3, #168	; 0xa8
 8008d7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008d80:	2302      	movs	r3, #2
 8008d82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008d84:	2304      	movs	r3, #4
 8008d86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d88:	f107 0320 	add.w	r3, r7, #32
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7f9 faab 	bl	80022e8 <HAL_RCC_OscConfig>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008d98:	f000 fbc7 	bl	800952a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d9c:	230f      	movs	r3, #15
 8008d9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008da0:	2302      	movs	r3, #2
 8008da2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008da4:	2300      	movs	r3, #0
 8008da6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008da8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008dac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008db2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008db4:	f107 030c 	add.w	r3, r7, #12
 8008db8:	2105      	movs	r1, #5
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7f9 fcd6 	bl	800276c <HAL_RCC_ClockConfig>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8008dc6:	f000 fbb0 	bl	800952a <Error_Handler>
  }
}
 8008dca:	bf00      	nop
 8008dcc:	3750      	adds	r7, #80	; 0x50
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	40023800 	.word	0x40023800
 8008dd8:	40007000 	.word	0x40007000

08008ddc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008de2:	463b      	mov	r3, r7
 8008de4:	2200      	movs	r2, #0
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	605a      	str	r2, [r3, #4]
 8008dea:	609a      	str	r2, [r3, #8]
 8008dec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8008dee:	4b21      	ldr	r3, [pc, #132]	; (8008e74 <MX_ADC1_Init+0x98>)
 8008df0:	4a21      	ldr	r2, [pc, #132]	; (8008e78 <MX_ADC1_Init+0x9c>)
 8008df2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008df4:	4b1f      	ldr	r3, [pc, #124]	; (8008e74 <MX_ADC1_Init+0x98>)
 8008df6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008dfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008dfc:	4b1d      	ldr	r3, [pc, #116]	; (8008e74 <MX_ADC1_Init+0x98>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8008e02:	4b1c      	ldr	r3, [pc, #112]	; (8008e74 <MX_ADC1_Init+0x98>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008e08:	4b1a      	ldr	r3, [pc, #104]	; (8008e74 <MX_ADC1_Init+0x98>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008e0e:	4b19      	ldr	r3, [pc, #100]	; (8008e74 <MX_ADC1_Init+0x98>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008e16:	4b17      	ldr	r3, [pc, #92]	; (8008e74 <MX_ADC1_Init+0x98>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008e1c:	4b15      	ldr	r3, [pc, #84]	; (8008e74 <MX_ADC1_Init+0x98>)
 8008e1e:	4a17      	ldr	r2, [pc, #92]	; (8008e7c <MX_ADC1_Init+0xa0>)
 8008e20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008e22:	4b14      	ldr	r3, [pc, #80]	; (8008e74 <MX_ADC1_Init+0x98>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008e28:	4b12      	ldr	r3, [pc, #72]	; (8008e74 <MX_ADC1_Init+0x98>)
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008e2e:	4b11      	ldr	r3, [pc, #68]	; (8008e74 <MX_ADC1_Init+0x98>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008e36:	4b0f      	ldr	r3, [pc, #60]	; (8008e74 <MX_ADC1_Init+0x98>)
 8008e38:	2201      	movs	r2, #1
 8008e3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008e3c:	480d      	ldr	r0, [pc, #52]	; (8008e74 <MX_ADC1_Init+0x98>)
 8008e3e:	f7f8 f8e7 	bl	8001010 <HAL_ADC_Init>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8008e48:	f000 fb6f 	bl	800952a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008e50:	2301      	movs	r3, #1
 8008e52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8008e54:	2300      	movs	r3, #0
 8008e56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008e58:	463b      	mov	r3, r7
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	4805      	ldr	r0, [pc, #20]	; (8008e74 <MX_ADC1_Init+0x98>)
 8008e5e:	f7f8 fa73 	bl	8001348 <HAL_ADC_ConfigChannel>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8008e68:	f000 fb5f 	bl	800952a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008e6c:	bf00      	nop
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	200009d8 	.word	0x200009d8
 8008e78:	40012000 	.word	0x40012000
 8008e7c:	0f000001 	.word	0x0f000001

08008e80 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8008e84:	4b17      	ldr	r3, [pc, #92]	; (8008ee4 <MX_SPI3_Init+0x64>)
 8008e86:	4a18      	ldr	r2, [pc, #96]	; (8008ee8 <MX_SPI3_Init+0x68>)
 8008e88:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008e8a:	4b16      	ldr	r3, [pc, #88]	; (8008ee4 <MX_SPI3_Init+0x64>)
 8008e8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008e90:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008e92:	4b14      	ldr	r3, [pc, #80]	; (8008ee4 <MX_SPI3_Init+0x64>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008e98:	4b12      	ldr	r3, [pc, #72]	; (8008ee4 <MX_SPI3_Init+0x64>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e9e:	4b11      	ldr	r3, [pc, #68]	; (8008ee4 <MX_SPI3_Init+0x64>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008ea4:	4b0f      	ldr	r3, [pc, #60]	; (8008ee4 <MX_SPI3_Init+0x64>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008eaa:	4b0e      	ldr	r3, [pc, #56]	; (8008ee4 <MX_SPI3_Init+0x64>)
 8008eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008eb0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008eb2:	4b0c      	ldr	r3, [pc, #48]	; (8008ee4 <MX_SPI3_Init+0x64>)
 8008eb4:	2218      	movs	r2, #24
 8008eb6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008eb8:	4b0a      	ldr	r3, [pc, #40]	; (8008ee4 <MX_SPI3_Init+0x64>)
 8008eba:	2200      	movs	r2, #0
 8008ebc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008ebe:	4b09      	ldr	r3, [pc, #36]	; (8008ee4 <MX_SPI3_Init+0x64>)
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ec4:	4b07      	ldr	r3, [pc, #28]	; (8008ee4 <MX_SPI3_Init+0x64>)
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8008eca:	4b06      	ldr	r3, [pc, #24]	; (8008ee4 <MX_SPI3_Init+0x64>)
 8008ecc:	220a      	movs	r2, #10
 8008ece:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008ed0:	4804      	ldr	r0, [pc, #16]	; (8008ee4 <MX_SPI3_Init+0x64>)
 8008ed2:	f7f9 fe13 	bl	8002afc <HAL_SPI_Init>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8008edc:	f000 fb25 	bl	800952a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8008ee0:	bf00      	nop
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20000120 	.word	0x20000120
 8008ee8:	40003c00 	.word	0x40003c00

08008eec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b08e      	sub	sp, #56	; 0x38
 8008ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	601a      	str	r2, [r3, #0]
 8008efa:	605a      	str	r2, [r3, #4]
 8008efc:	609a      	str	r2, [r3, #8]
 8008efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008f00:	f107 0320 	add.w	r3, r7, #32
 8008f04:	2200      	movs	r2, #0
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008f0a:	1d3b      	adds	r3, r7, #4
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	601a      	str	r2, [r3, #0]
 8008f10:	605a      	str	r2, [r3, #4]
 8008f12:	609a      	str	r2, [r3, #8]
 8008f14:	60da      	str	r2, [r3, #12]
 8008f16:	611a      	str	r2, [r3, #16]
 8008f18:	615a      	str	r2, [r3, #20]
 8008f1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008f1c:	4b32      	ldr	r3, [pc, #200]	; (8008fe8 <MX_TIM2_Init+0xfc>)
 8008f1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008f22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008f24:	4b30      	ldr	r3, [pc, #192]	; (8008fe8 <MX_TIM2_Init+0xfc>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f2a:	4b2f      	ldr	r3, [pc, #188]	; (8008fe8 <MX_TIM2_Init+0xfc>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8008f30:	4b2d      	ldr	r3, [pc, #180]	; (8008fe8 <MX_TIM2_Init+0xfc>)
 8008f32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008f36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f38:	4b2b      	ldr	r3, [pc, #172]	; (8008fe8 <MX_TIM2_Init+0xfc>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f3e:	4b2a      	ldr	r3, [pc, #168]	; (8008fe8 <MX_TIM2_Init+0xfc>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008f44:	4828      	ldr	r0, [pc, #160]	; (8008fe8 <MX_TIM2_Init+0xfc>)
 8008f46:	f7fa fb2d 	bl	80035a4 <HAL_TIM_Base_Init>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8008f50:	f000 faeb 	bl	800952a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f58:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008f5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f5e:	4619      	mov	r1, r3
 8008f60:	4821      	ldr	r0, [pc, #132]	; (8008fe8 <MX_TIM2_Init+0xfc>)
 8008f62:	f7fa fe79 	bl	8003c58 <HAL_TIM_ConfigClockSource>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8008f6c:	f000 fadd 	bl	800952a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008f70:	481d      	ldr	r0, [pc, #116]	; (8008fe8 <MX_TIM2_Init+0xfc>)
 8008f72:	f7fa fb66 	bl	8003642 <HAL_TIM_PWM_Init>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8008f7c:	f000 fad5 	bl	800952a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f80:	2300      	movs	r3, #0
 8008f82:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f84:	2300      	movs	r3, #0
 8008f86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008f88:	f107 0320 	add.w	r3, r7, #32
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	4816      	ldr	r0, [pc, #88]	; (8008fe8 <MX_TIM2_Init+0xfc>)
 8008f90:	f7fb fa51 	bl	8004436 <HAL_TIMEx_MasterConfigSynchronization>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8008f9a:	f000 fac6 	bl	800952a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008f9e:	2360      	movs	r3, #96	; 0x60
 8008fa0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008faa:	2300      	movs	r3, #0
 8008fac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008fae:	1d3b      	adds	r3, r7, #4
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	480c      	ldr	r0, [pc, #48]	; (8008fe8 <MX_TIM2_Init+0xfc>)
 8008fb6:	f7fa fd89 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8008fc0:	f000 fab3 	bl	800952a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008fc4:	1d3b      	adds	r3, r7, #4
 8008fc6:	220c      	movs	r2, #12
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4807      	ldr	r0, [pc, #28]	; (8008fe8 <MX_TIM2_Init+0xfc>)
 8008fcc:	f7fa fd7e 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8008fd6:	f000 faa8 	bl	800952a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8008fda:	4803      	ldr	r0, [pc, #12]	; (8008fe8 <MX_TIM2_Init+0xfc>)
 8008fdc:	f002 fc3a 	bl	800b854 <HAL_TIM_MspPostInit>

}
 8008fe0:	bf00      	nop
 8008fe2:	3738      	adds	r7, #56	; 0x38
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	20000ae8 	.word	0x20000ae8

08008fec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b08e      	sub	sp, #56	; 0x38
 8008ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008ff2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	601a      	str	r2, [r3, #0]
 8008ffa:	605a      	str	r2, [r3, #4]
 8008ffc:	609a      	str	r2, [r3, #8]
 8008ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009000:	f107 0320 	add.w	r3, r7, #32
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800900a:	1d3b      	adds	r3, r7, #4
 800900c:	2200      	movs	r2, #0
 800900e:	601a      	str	r2, [r3, #0]
 8009010:	605a      	str	r2, [r3, #4]
 8009012:	609a      	str	r2, [r3, #8]
 8009014:	60da      	str	r2, [r3, #12]
 8009016:	611a      	str	r2, [r3, #16]
 8009018:	615a      	str	r2, [r3, #20]
 800901a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800901c:	4b2c      	ldr	r3, [pc, #176]	; (80090d0 <MX_TIM3_Init+0xe4>)
 800901e:	4a2d      	ldr	r2, [pc, #180]	; (80090d4 <MX_TIM3_Init+0xe8>)
 8009020:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8009022:	4b2b      	ldr	r3, [pc, #172]	; (80090d0 <MX_TIM3_Init+0xe4>)
 8009024:	223f      	movs	r2, #63	; 0x3f
 8009026:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009028:	4b29      	ldr	r3, [pc, #164]	; (80090d0 <MX_TIM3_Init+0xe4>)
 800902a:	2200      	movs	r2, #0
 800902c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800902e:	4b28      	ldr	r3, [pc, #160]	; (80090d0 <MX_TIM3_Init+0xe4>)
 8009030:	2200      	movs	r2, #0
 8009032:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009034:	4b26      	ldr	r3, [pc, #152]	; (80090d0 <MX_TIM3_Init+0xe4>)
 8009036:	2200      	movs	r2, #0
 8009038:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800903a:	4b25      	ldr	r3, [pc, #148]	; (80090d0 <MX_TIM3_Init+0xe4>)
 800903c:	2200      	movs	r2, #0
 800903e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009040:	4823      	ldr	r0, [pc, #140]	; (80090d0 <MX_TIM3_Init+0xe4>)
 8009042:	f7fa faaf 	bl	80035a4 <HAL_TIM_Base_Init>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800904c:	f000 fa6d 	bl	800952a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009054:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800905a:	4619      	mov	r1, r3
 800905c:	481c      	ldr	r0, [pc, #112]	; (80090d0 <MX_TIM3_Init+0xe4>)
 800905e:	f7fa fdfb 	bl	8003c58 <HAL_TIM_ConfigClockSource>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8009068:	f000 fa5f 	bl	800952a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800906c:	4818      	ldr	r0, [pc, #96]	; (80090d0 <MX_TIM3_Init+0xe4>)
 800906e:	f7fa fae8 	bl	8003642 <HAL_TIM_PWM_Init>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8009078:	f000 fa57 	bl	800952a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800907c:	2300      	movs	r3, #0
 800907e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009080:	2300      	movs	r3, #0
 8009082:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009084:	f107 0320 	add.w	r3, r7, #32
 8009088:	4619      	mov	r1, r3
 800908a:	4811      	ldr	r0, [pc, #68]	; (80090d0 <MX_TIM3_Init+0xe4>)
 800908c:	f7fb f9d3 	bl	8004436 <HAL_TIMEx_MasterConfigSynchronization>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8009096:	f000 fa48 	bl	800952a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800909a:	2360      	movs	r3, #96	; 0x60
 800909c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800909e:	2300      	movs	r3, #0
 80090a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80090a2:	2300      	movs	r3, #0
 80090a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80090a6:	2300      	movs	r3, #0
 80090a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80090aa:	1d3b      	adds	r3, r7, #4
 80090ac:	2204      	movs	r2, #4
 80090ae:	4619      	mov	r1, r3
 80090b0:	4807      	ldr	r0, [pc, #28]	; (80090d0 <MX_TIM3_Init+0xe4>)
 80090b2:	f7fa fd0b 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d001      	beq.n	80090c0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80090bc:	f000 fa35 	bl	800952a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80090c0:	4803      	ldr	r0, [pc, #12]	; (80090d0 <MX_TIM3_Init+0xe4>)
 80090c2:	f002 fbc7 	bl	800b854 <HAL_TIM_MspPostInit>

}
 80090c6:	bf00      	nop
 80090c8:	3738      	adds	r7, #56	; 0x38
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	2000097c 	.word	0x2000097c
 80090d4:	40000400 	.word	0x40000400

080090d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08c      	sub	sp, #48	; 0x30
 80090dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80090de:	f107 030c 	add.w	r3, r7, #12
 80090e2:	2224      	movs	r2, #36	; 0x24
 80090e4:	2100      	movs	r1, #0
 80090e6:	4618      	mov	r0, r3
 80090e8:	f002 fdd6 	bl	800bc98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80090ec:	1d3b      	adds	r3, r7, #4
 80090ee:	2200      	movs	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]
 80090f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80090f4:	4b20      	ldr	r3, [pc, #128]	; (8009178 <MX_TIM4_Init+0xa0>)
 80090f6:	4a21      	ldr	r2, [pc, #132]	; (800917c <MX_TIM4_Init+0xa4>)
 80090f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80090fa:	4b1f      	ldr	r3, [pc, #124]	; (8009178 <MX_TIM4_Init+0xa0>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009100:	4b1d      	ldr	r3, [pc, #116]	; (8009178 <MX_TIM4_Init+0xa0>)
 8009102:	2200      	movs	r2, #0
 8009104:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8009106:	4b1c      	ldr	r3, [pc, #112]	; (8009178 <MX_TIM4_Init+0xa0>)
 8009108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800910c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800910e:	4b1a      	ldr	r3, [pc, #104]	; (8009178 <MX_TIM4_Init+0xa0>)
 8009110:	2200      	movs	r2, #0
 8009112:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009114:	4b18      	ldr	r3, [pc, #96]	; (8009178 <MX_TIM4_Init+0xa0>)
 8009116:	2200      	movs	r2, #0
 8009118:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800911a:	2303      	movs	r3, #3
 800911c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800911e:	2300      	movs	r3, #0
 8009120:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009122:	2301      	movs	r3, #1
 8009124:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009126:	2300      	movs	r3, #0
 8009128:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800912a:	2300      	movs	r3, #0
 800912c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800912e:	2300      	movs	r3, #0
 8009130:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009132:	2301      	movs	r3, #1
 8009134:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009136:	2300      	movs	r3, #0
 8009138:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800913a:	2300      	movs	r3, #0
 800913c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800913e:	f107 030c 	add.w	r3, r7, #12
 8009142:	4619      	mov	r1, r3
 8009144:	480c      	ldr	r0, [pc, #48]	; (8009178 <MX_TIM4_Init+0xa0>)
 8009146:	f7fa faef 	bl	8003728 <HAL_TIM_Encoder_Init>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d001      	beq.n	8009154 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8009150:	f000 f9eb 	bl	800952a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009154:	2300      	movs	r3, #0
 8009156:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009158:	2300      	movs	r3, #0
 800915a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800915c:	1d3b      	adds	r3, r7, #4
 800915e:	4619      	mov	r1, r3
 8009160:	4805      	ldr	r0, [pc, #20]	; (8009178 <MX_TIM4_Init+0xa0>)
 8009162:	f7fb f968 	bl	8004436 <HAL_TIMEx_MasterConfigSynchronization>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800916c:	f000 f9dd 	bl	800952a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8009170:	bf00      	nop
 8009172:	3730      	adds	r7, #48	; 0x30
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	200002e8 	.word	0x200002e8
 800917c:	40000800 	.word	0x40000800

08009180 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009186:	463b      	mov	r3, r7
 8009188:	2200      	movs	r2, #0
 800918a:	601a      	str	r2, [r3, #0]
 800918c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800918e:	4b15      	ldr	r3, [pc, #84]	; (80091e4 <MX_TIM6_Init+0x64>)
 8009190:	4a15      	ldr	r2, [pc, #84]	; (80091e8 <MX_TIM6_Init+0x68>)
 8009192:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8009194:	4b13      	ldr	r3, [pc, #76]	; (80091e4 <MX_TIM6_Init+0x64>)
 8009196:	2253      	movs	r2, #83	; 0x53
 8009198:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800919a:	4b12      	ldr	r3, [pc, #72]	; (80091e4 <MX_TIM6_Init+0x64>)
 800919c:	2200      	movs	r2, #0
 800919e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80091a0:	4b10      	ldr	r3, [pc, #64]	; (80091e4 <MX_TIM6_Init+0x64>)
 80091a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80091a6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80091a8:	4b0e      	ldr	r3, [pc, #56]	; (80091e4 <MX_TIM6_Init+0x64>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80091ae:	480d      	ldr	r0, [pc, #52]	; (80091e4 <MX_TIM6_Init+0x64>)
 80091b0:	f7fa f9f8 	bl	80035a4 <HAL_TIM_Base_Init>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80091ba:	f000 f9b6 	bl	800952a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80091be:	2300      	movs	r3, #0
 80091c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80091c2:	2300      	movs	r3, #0
 80091c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80091c6:	463b      	mov	r3, r7
 80091c8:	4619      	mov	r1, r3
 80091ca:	4806      	ldr	r0, [pc, #24]	; (80091e4 <MX_TIM6_Init+0x64>)
 80091cc:	f7fb f933 	bl	8004436 <HAL_TIMEx_MasterConfigSynchronization>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80091d6:	f000 f9a8 	bl	800952a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80091da:	bf00      	nop
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	20000a88 	.word	0x20000a88
 80091e8:	40001000 	.word	0x40001000

080091ec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b08c      	sub	sp, #48	; 0x30
 80091f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80091f2:	f107 030c 	add.w	r3, r7, #12
 80091f6:	2224      	movs	r2, #36	; 0x24
 80091f8:	2100      	movs	r1, #0
 80091fa:	4618      	mov	r0, r3
 80091fc:	f002 fd4c 	bl	800bc98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009200:	1d3b      	adds	r3, r7, #4
 8009202:	2200      	movs	r2, #0
 8009204:	601a      	str	r2, [r3, #0]
 8009206:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009208:	4b22      	ldr	r3, [pc, #136]	; (8009294 <MX_TIM8_Init+0xa8>)
 800920a:	4a23      	ldr	r2, [pc, #140]	; (8009298 <MX_TIM8_Init+0xac>)
 800920c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800920e:	4b21      	ldr	r3, [pc, #132]	; (8009294 <MX_TIM8_Init+0xa8>)
 8009210:	2200      	movs	r2, #0
 8009212:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009214:	4b1f      	ldr	r3, [pc, #124]	; (8009294 <MX_TIM8_Init+0xa8>)
 8009216:	2200      	movs	r2, #0
 8009218:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800921a:	4b1e      	ldr	r3, [pc, #120]	; (8009294 <MX_TIM8_Init+0xa8>)
 800921c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009220:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009222:	4b1c      	ldr	r3, [pc, #112]	; (8009294 <MX_TIM8_Init+0xa8>)
 8009224:	2200      	movs	r2, #0
 8009226:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009228:	4b1a      	ldr	r3, [pc, #104]	; (8009294 <MX_TIM8_Init+0xa8>)
 800922a:	2200      	movs	r2, #0
 800922c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800922e:	4b19      	ldr	r3, [pc, #100]	; (8009294 <MX_TIM8_Init+0xa8>)
 8009230:	2200      	movs	r2, #0
 8009232:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009234:	2303      	movs	r3, #3
 8009236:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009238:	2300      	movs	r3, #0
 800923a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800923c:	2301      	movs	r3, #1
 800923e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009240:	2300      	movs	r3, #0
 8009242:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009244:	2300      	movs	r3, #0
 8009246:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009248:	2300      	movs	r3, #0
 800924a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800924c:	2301      	movs	r3, #1
 800924e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009250:	2300      	movs	r3, #0
 8009252:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8009258:	f107 030c 	add.w	r3, r7, #12
 800925c:	4619      	mov	r1, r3
 800925e:	480d      	ldr	r0, [pc, #52]	; (8009294 <MX_TIM8_Init+0xa8>)
 8009260:	f7fa fa62 	bl	8003728 <HAL_TIM_Encoder_Init>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800926a:	f000 f95e 	bl	800952a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800926e:	2300      	movs	r3, #0
 8009270:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009272:	2300      	movs	r3, #0
 8009274:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009276:	1d3b      	adds	r3, r7, #4
 8009278:	4619      	mov	r1, r3
 800927a:	4806      	ldr	r0, [pc, #24]	; (8009294 <MX_TIM8_Init+0xa8>)
 800927c:	f7fb f8db 	bl	8004436 <HAL_TIMEx_MasterConfigSynchronization>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8009286:	f000 f950 	bl	800952a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800928a:	bf00      	nop
 800928c:	3730      	adds	r7, #48	; 0x30
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	200002a8 	.word	0x200002a8
 8009298:	40010400 	.word	0x40010400

0800929c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80092a0:	4b11      	ldr	r3, [pc, #68]	; (80092e8 <MX_USART1_UART_Init+0x4c>)
 80092a2:	4a12      	ldr	r2, [pc, #72]	; (80092ec <MX_USART1_UART_Init+0x50>)
 80092a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80092a6:	4b10      	ldr	r3, [pc, #64]	; (80092e8 <MX_USART1_UART_Init+0x4c>)
 80092a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80092ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80092ae:	4b0e      	ldr	r3, [pc, #56]	; (80092e8 <MX_USART1_UART_Init+0x4c>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80092b4:	4b0c      	ldr	r3, [pc, #48]	; (80092e8 <MX_USART1_UART_Init+0x4c>)
 80092b6:	2200      	movs	r2, #0
 80092b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80092ba:	4b0b      	ldr	r3, [pc, #44]	; (80092e8 <MX_USART1_UART_Init+0x4c>)
 80092bc:	2200      	movs	r2, #0
 80092be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80092c0:	4b09      	ldr	r3, [pc, #36]	; (80092e8 <MX_USART1_UART_Init+0x4c>)
 80092c2:	220c      	movs	r2, #12
 80092c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80092c6:	4b08      	ldr	r3, [pc, #32]	; (80092e8 <MX_USART1_UART_Init+0x4c>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80092cc:	4b06      	ldr	r3, [pc, #24]	; (80092e8 <MX_USART1_UART_Init+0x4c>)
 80092ce:	2200      	movs	r2, #0
 80092d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80092d2:	4805      	ldr	r0, [pc, #20]	; (80092e8 <MX_USART1_UART_Init+0x4c>)
 80092d4:	f7fb f908 	bl	80044e8 <HAL_UART_Init>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d001      	beq.n	80092e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80092de:	f000 f924 	bl	800952a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80092e2:	bf00      	nop
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20000a3c 	.word	0x20000a3c
 80092ec:	40011000 	.word	0x40011000

080092f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b08a      	sub	sp, #40	; 0x28
 80092f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092f6:	f107 0314 	add.w	r3, r7, #20
 80092fa:	2200      	movs	r2, #0
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	605a      	str	r2, [r3, #4]
 8009300:	609a      	str	r2, [r3, #8]
 8009302:	60da      	str	r2, [r3, #12]
 8009304:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009306:	2300      	movs	r3, #0
 8009308:	613b      	str	r3, [r7, #16]
 800930a:	4b53      	ldr	r3, [pc, #332]	; (8009458 <MX_GPIO_Init+0x168>)
 800930c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930e:	4a52      	ldr	r2, [pc, #328]	; (8009458 <MX_GPIO_Init+0x168>)
 8009310:	f043 0304 	orr.w	r3, r3, #4
 8009314:	6313      	str	r3, [r2, #48]	; 0x30
 8009316:	4b50      	ldr	r3, [pc, #320]	; (8009458 <MX_GPIO_Init+0x168>)
 8009318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931a:	f003 0304 	and.w	r3, r3, #4
 800931e:	613b      	str	r3, [r7, #16]
 8009320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009322:	2300      	movs	r3, #0
 8009324:	60fb      	str	r3, [r7, #12]
 8009326:	4b4c      	ldr	r3, [pc, #304]	; (8009458 <MX_GPIO_Init+0x168>)
 8009328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932a:	4a4b      	ldr	r2, [pc, #300]	; (8009458 <MX_GPIO_Init+0x168>)
 800932c:	f043 0301 	orr.w	r3, r3, #1
 8009330:	6313      	str	r3, [r2, #48]	; 0x30
 8009332:	4b49      	ldr	r3, [pc, #292]	; (8009458 <MX_GPIO_Init+0x168>)
 8009334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	60fb      	str	r3, [r7, #12]
 800933c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800933e:	2300      	movs	r3, #0
 8009340:	60bb      	str	r3, [r7, #8]
 8009342:	4b45      	ldr	r3, [pc, #276]	; (8009458 <MX_GPIO_Init+0x168>)
 8009344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009346:	4a44      	ldr	r2, [pc, #272]	; (8009458 <MX_GPIO_Init+0x168>)
 8009348:	f043 0302 	orr.w	r3, r3, #2
 800934c:	6313      	str	r3, [r2, #48]	; 0x30
 800934e:	4b42      	ldr	r3, [pc, #264]	; (8009458 <MX_GPIO_Init+0x168>)
 8009350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	60bb      	str	r3, [r7, #8]
 8009358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800935a:	2300      	movs	r3, #0
 800935c:	607b      	str	r3, [r7, #4]
 800935e:	4b3e      	ldr	r3, [pc, #248]	; (8009458 <MX_GPIO_Init+0x168>)
 8009360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009362:	4a3d      	ldr	r2, [pc, #244]	; (8009458 <MX_GPIO_Init+0x168>)
 8009364:	f043 0308 	orr.w	r3, r3, #8
 8009368:	6313      	str	r3, [r2, #48]	; 0x30
 800936a:	4b3b      	ldr	r3, [pc, #236]	; (8009458 <MX_GPIO_Init+0x168>)
 800936c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936e:	f003 0308 	and.w	r3, r3, #8
 8009372:	607b      	str	r3, [r7, #4]
 8009374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 8009376:	2200      	movs	r2, #0
 8009378:	f24e 213c 	movw	r1, #57916	; 0xe23c
 800937c:	4837      	ldr	r0, [pc, #220]	; (800945c <MX_GPIO_Init+0x16c>)
 800937e:	f7f8 ff99 	bl	80022b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8009382:	2200      	movs	r2, #0
 8009384:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8009388:	4835      	ldr	r0, [pc, #212]	; (8009460 <MX_GPIO_Init+0x170>)
 800938a:	f7f8 ff93 	bl	80022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800938e:	2200      	movs	r2, #0
 8009390:	f242 7103 	movw	r1, #9987	; 0x2703
 8009394:	4833      	ldr	r0, [pc, #204]	; (8009464 <MX_GPIO_Init+0x174>)
 8009396:	f7f8 ff8d 	bl	80022b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800939a:	2200      	movs	r2, #0
 800939c:	2104      	movs	r1, #4
 800939e:	4832      	ldr	r0, [pc, #200]	; (8009468 <MX_GPIO_Init+0x178>)
 80093a0:	f7f8 ff88 	bl	80022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 80093a4:	f24e 233c 	movw	r3, #57916	; 0xe23c
 80093a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80093aa:	2301      	movs	r3, #1
 80093ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093b2:	2300      	movs	r3, #0
 80093b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80093b6:	f107 0314 	add.w	r3, r7, #20
 80093ba:	4619      	mov	r1, r3
 80093bc:	4827      	ldr	r0, [pc, #156]	; (800945c <MX_GPIO_Init+0x16c>)
 80093be:	f7f8 fdc7 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80093c2:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 80093c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80093c8:	2301      	movs	r3, #1
 80093ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093cc:	2300      	movs	r3, #0
 80093ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093d0:	2300      	movs	r3, #0
 80093d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093d4:	f107 0314 	add.w	r3, r7, #20
 80093d8:	4619      	mov	r1, r3
 80093da:	4821      	ldr	r0, [pc, #132]	; (8009460 <MX_GPIO_Init+0x170>)
 80093dc:	f7f8 fdb8 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 80093e0:	f242 7303 	movw	r3, #9987	; 0x2703
 80093e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80093e6:	2301      	movs	r3, #1
 80093e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ea:	2300      	movs	r3, #0
 80093ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093ee:	2300      	movs	r3, #0
 80093f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093f2:	f107 0314 	add.w	r3, r7, #20
 80093f6:	4619      	mov	r1, r3
 80093f8:	481a      	ldr	r0, [pc, #104]	; (8009464 <MX_GPIO_Init+0x174>)
 80093fa:	f7f8 fda9 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80093fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009404:	2300      	movs	r3, #0
 8009406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009408:	2301      	movs	r3, #1
 800940a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800940c:	f107 0314 	add.w	r3, r7, #20
 8009410:	4619      	mov	r1, r3
 8009412:	4814      	ldr	r0, [pc, #80]	; (8009464 <MX_GPIO_Init+0x174>)
 8009414:	f7f8 fd9c 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009418:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800941c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800941e:	2300      	movs	r3, #0
 8009420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009422:	2300      	movs	r3, #0
 8009424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009426:	f107 0314 	add.w	r3, r7, #20
 800942a:	4619      	mov	r1, r3
 800942c:	480c      	ldr	r0, [pc, #48]	; (8009460 <MX_GPIO_Init+0x170>)
 800942e:	f7f8 fd8f 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009432:	2304      	movs	r3, #4
 8009434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009436:	2301      	movs	r3, #1
 8009438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800943a:	2300      	movs	r3, #0
 800943c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800943e:	2300      	movs	r3, #0
 8009440:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009442:	f107 0314 	add.w	r3, r7, #20
 8009446:	4619      	mov	r1, r3
 8009448:	4807      	ldr	r0, [pc, #28]	; (8009468 <MX_GPIO_Init+0x178>)
 800944a:	f7f8 fd81 	bl	8001f50 <HAL_GPIO_Init>

}
 800944e:	bf00      	nop
 8009450:	3728      	adds	r7, #40	; 0x28
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	40023800 	.word	0x40023800
 800945c:	40020800 	.word	0x40020800
 8009460:	40020000 	.word	0x40020000
 8009464:	40020400 	.word	0x40020400
 8009468:	40020c00 	.word	0x40020c00

0800946c <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 800946c:	b580      	push	{r7, lr}
 800946e:	b08a      	sub	sp, #40	; 0x28
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009476:	2360      	movs	r3, #96	; 0x60
 8009478:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800947a:	2300      	movs	r3, #0
 800947c:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800947e:	2300      	movs	r3, #0
 8009480:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 8009482:	4a11      	ldr	r2, [pc, #68]	; (80094c8 <buzzer+0x5c>)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	fb92 f3f3 	sdiv	r3, r2, r3
 800948a:	4a10      	ldr	r2, [pc, #64]	; (80094cc <buzzer+0x60>)
 800948c:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 800948e:	4b0f      	ldr	r3, [pc, #60]	; (80094cc <buzzer+0x60>)
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	4b0f      	ldr	r3, [pc, #60]	; (80094d0 <buzzer+0x64>)
 8009494:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 2;
 8009496:	4b0d      	ldr	r3, [pc, #52]	; (80094cc <buzzer+0x60>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	0fda      	lsrs	r2, r3, #31
 800949c:	4413      	add	r3, r2
 800949e:	105b      	asrs	r3, r3, #1
 80094a0:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_2);
 80094a2:	f107 030c 	add.w	r3, r7, #12
 80094a6:	2204      	movs	r2, #4
 80094a8:	4619      	mov	r1, r3
 80094aa:	480a      	ldr	r0, [pc, #40]	; (80094d4 <buzzer+0x68>)
 80094ac:	f7fa fb0e 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80094b0:	2104      	movs	r1, #4
 80094b2:	4808      	ldr	r0, [pc, #32]	; (80094d4 <buzzer+0x68>)
 80094b4:	f7fa f8fa 	bl	80036ac <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7f7 fd86 	bl	8000fcc <HAL_Delay>
}
 80094c0:	bf00      	nop
 80094c2:	3728      	adds	r7, #40	; 0x28
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	000f4240 	.word	0x000f4240
 80094cc:	200002a0 	.word	0x200002a0
 80094d0:	40000400 	.word	0x40000400
 80094d4:	2000097c 	.word	0x2000097c

080094d8 <get_adc_value>:


int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 80094e2:	f107 0308 	add.w	r3, r7, #8
 80094e6:	2200      	movs	r2, #0
 80094e8:	601a      	str	r2, [r3, #0]
 80094ea:	605a      	str	r2, [r3, #4]
 80094ec:	609a      	str	r2, [r3, #8]
 80094ee:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 80094f4:	2301      	movs	r3, #1
 80094f6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80094f8:	2300      	movs	r3, #0
 80094fa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80094fc:	2300      	movs	r3, #0
 80094fe:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 8009500:	f107 0308 	add.w	r3, r7, #8
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f7f7 ff1e 	bl	8001348 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f7f7 fdc3 	bl	8001098 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 8009512:	2164      	movs	r1, #100	; 0x64
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f7f7 fe85 	bl	8001224 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7f7 ff06 	bl	800132c <HAL_ADC_GetValue>
 8009520:	4603      	mov	r3, r0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800952a:	b480      	push	{r7}
 800952c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800952e:	bf00      	nop
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <search_init>:

#include "global.h"

void search_init(void){
 8009538:	b580      	push	{r7, lr}
 800953a:	af00      	add	r7, sp, #0

	//----a探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 800953c:	4b09      	ldr	r3, [pc, #36]	; (8009564 <search_init+0x2c>)
 800953e:	2209      	movs	r2, #9
 8009540:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 8009542:	4b09      	ldr	r3, [pc, #36]	; (8009568 <search_init+0x30>)
 8009544:	2206      	movs	r2, #6
 8009546:	701a      	strb	r2, [r3, #0]
	map_Init();						//aマップの初期化
 8009548:	f000 fbdc 	bl	8009d04 <map_Init>
	mouse.x = 0;
 800954c:	4b07      	ldr	r3, [pc, #28]	; (800956c <search_init+0x34>)
 800954e:	2200      	movs	r2, #0
 8009550:	701a      	strb	r2, [r3, #0]
	mouse.y = 0;					//a現在地の初期化
 8009552:	4b06      	ldr	r3, [pc, #24]	; (800956c <search_init+0x34>)
 8009554:	2200      	movs	r2, #0
 8009556:	705a      	strb	r2, [r3, #1]
	mouse.dir = 0;					//aマウスの向きの初期化
 8009558:	4b04      	ldr	r3, [pc, #16]	; (800956c <search_init+0x34>)
 800955a:	2200      	movs	r2, #0
 800955c:	709a      	strb	r2, [r3, #2]
}
 800955e:	bf00      	nop
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	20000a85 	.word	0x20000a85
 8009568:	20000a24 	.word	0x20000a24
 800956c:	20000ae0 	.word	0x20000ae0

08009570 <searchA>:
//searchA
//a1区画走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchA(){
 8009570:	b580      	push	{r7, lr}
 8009572:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 8009574:	4b37      	ldr	r3, [pc, #220]	; (8009654 <searchA+0xe4>)
 8009576:	881b      	ldrh	r3, [r3, #0]
 8009578:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d001      	beq.n	8009586 <searchA+0x16>
		load_map_from_eeprom();
 8009582:	f001 fd1b 	bl	800afbc <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 8009586:	f001 fd91 	bl	800b0ac <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800958a:	4b33      	ldr	r3, [pc, #204]	; (8009658 <searchA+0xe8>)
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	f003 0377 	and.w	r3, r3, #119	; 0x77
 8009592:	b2da      	uxtb	r2, r3
 8009594:	4b30      	ldr	r3, [pc, #192]	; (8009658 <searchA+0xe8>)
 8009596:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 8009598:	f000 fc20 	bl	8009ddc <write_map>

	//====a歩数マップ・経路作成====
	r_cnt = 0;												//a経路カウンタの初期化
 800959c:	4b2f      	ldr	r3, [pc, #188]	; (800965c <searchA+0xec>)
 800959e:	2200      	movs	r2, #0
 80095a0:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 80095a2:	f000 fd5b 	bl	800a05c <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 80095a6:	f001 f891 	bl	800a6cc <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 80095aa:	4b2c      	ldr	r3, [pc, #176]	; (800965c <searchA+0xec>)
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	b2d1      	uxtb	r1, r2
 80095b2:	4a2a      	ldr	r2, [pc, #168]	; (800965c <searchA+0xec>)
 80095b4:	7011      	strb	r1, [r2, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	4b29      	ldr	r3, [pc, #164]	; (8009660 <searchA+0xf0>)
 80095ba:	5c9b      	ldrb	r3, [r3, r2]
 80095bc:	2b22      	cmp	r3, #34	; 0x22
 80095be:	d00b      	beq.n	80095d8 <searchA+0x68>
 80095c0:	2b22      	cmp	r3, #34	; 0x22
 80095c2:	dc02      	bgt.n	80095ca <searchA+0x5a>
 80095c4:	2b11      	cmp	r3, #17
 80095c6:	d012      	beq.n	80095ee <searchA+0x7e>
 80095c8:	e015      	b.n	80095f6 <searchA+0x86>
 80095ca:	2b44      	cmp	r3, #68	; 0x44
 80095cc:	d001      	beq.n	80095d2 <searchA+0x62>
 80095ce:	2b88      	cmp	r3, #136	; 0x88
			//----a前進----
			case 0x88:
				break;
 80095d0:	e011      	b.n	80095f6 <searchA+0x86>
			//----a右折----
			case 0x44:
				rotate_R90();								//a右回転
 80095d2:	f7fb ff19 	bl	8005408 <rotate_R90>
				break;
 80095d6:	e00e      	b.n	80095f6 <searchA+0x86>
			//----180回転----
			case 0x22:
				rotate_180();								//180度回転
 80095d8:	f7fc f886 	bl	80056e8 <rotate_180>
				if(wall_info & 0x88){
 80095dc:	4b1e      	ldr	r3, [pc, #120]	; (8009658 <searchA+0xe8>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d005      	beq.n	80095f4 <searchA+0x84>
					set_position();
 80095e8:	f7fb fe24 	bl	8005234 <set_position>
				}
				break;
 80095ec:	e002      	b.n	80095f4 <searchA+0x84>
			//----a左折----
			case 0x11:
				rotate_L90();								//a左回転
 80095ee:	f7fb ffc3 	bl	8005578 <rotate_L90>
				break;
 80095f2:	e000      	b.n	80095f6 <searchA+0x86>
				break;
 80095f4:	bf00      	nop
		}

		drive_wait();
 80095f6:	2032      	movs	r0, #50	; 0x32
 80095f8:	f7f7 fce8 	bl	8000fcc <HAL_Delay>
		one_section();										//a前進する
 80095fc:	f7fb feb2 	bl	8005364 <one_section>
		drive_wait();
 8009600:	2032      	movs	r0, #50	; 0x32
 8009602:	f7f7 fce3 	bl	8000fcc <HAL_Delay>

		adv_pos();											//aマイクロマウス内部位置情報でも前進処理
 8009606:	f000 fb25 	bl	8009c54 <adv_pos>
		conf_route();										//a最短経路で進行可能か判定
 800960a:	f000 fb5d 	bl	8009cc8 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));		//a現在座標とgoal座標が等しくなるまで実行
 800960e:	4b15      	ldr	r3, [pc, #84]	; (8009664 <searchA+0xf4>)
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	b2da      	uxtb	r2, r3
 8009614:	4b14      	ldr	r3, [pc, #80]	; (8009668 <searchA+0xf8>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	429a      	cmp	r2, r3
 800961a:	d1c6      	bne.n	80095aa <searchA+0x3a>
 800961c:	4b11      	ldr	r3, [pc, #68]	; (8009664 <searchA+0xf4>)
 800961e:	785b      	ldrb	r3, [r3, #1]
 8009620:	b2da      	uxtb	r2, r3
 8009622:	4b12      	ldr	r3, [pc, #72]	; (800966c <searchA+0xfc>)
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	429a      	cmp	r2, r3
 8009628:	d1bf      	bne.n	80095aa <searchA+0x3a>

	printf("goal\n");
 800962a:	4811      	ldr	r0, [pc, #68]	; (8009670 <searchA+0x100>)
 800962c:	f002 fbb0 	bl	800bd90 <puts>
	HAL_Delay(2000);										//aスタートでは***2秒以上***停止しなくてはならない
 8009630:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009634:	f7f7 fcca 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 8009638:	f7fc f856 	bl	80056e8 <rotate_180>

	if(!MF.FLAG.SCND){
 800963c:	4b05      	ldr	r3, [pc, #20]	; (8009654 <searchA+0xe4>)
 800963e:	881b      	ldrh	r3, [r3, #0]
 8009640:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <searchA+0xde>
		store_map_in_eeprom();
 800964a:	f001 fc7d 	bl	800af48 <store_map_in_eeprom>
	}
}
 800964e:	bf00      	nop
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	20000e38 	.word	0x20000e38
 8009658:	200002a4 	.word	0x200002a4
 800965c:	20000e59 	.word	0x20000e59
 8009660:	20000b28 	.word	0x20000b28
 8009664:	20000ae0 	.word	0x20000ae0
 8009668:	20000a85 	.word	0x20000a85
 800966c:	20000a24 	.word	0x20000a24
 8009670:	0800d1cc 	.word	0x0800d1cc

08009674 <searchB>:
//searchB
//a連続走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchB(){
 8009674:	b580      	push	{r7, lr}
 8009676:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 8009678:	4b3c      	ldr	r3, [pc, #240]	; (800976c <searchB+0xf8>)
 800967a:	881b      	ldrh	r3, [r3, #0]
 800967c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <searchB+0x16>
		load_map_from_eeprom();
 8009686:	f001 fc99 	bl	800afbc <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800968a:	f001 fd0f 	bl	800b0ac <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800968e:	4b38      	ldr	r3, [pc, #224]	; (8009770 <searchB+0xfc>)
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	f003 0377 	and.w	r3, r3, #119	; 0x77
 8009696:	b2da      	uxtb	r2, r3
 8009698:	4b35      	ldr	r3, [pc, #212]	; (8009770 <searchB+0xfc>)
 800969a:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800969c:	f000 fb9e 	bl	8009ddc <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	half_sectionA();
 80096a0:	f7fb fdf6 	bl	8005290 <half_sectionA>
	adv_pos();
 80096a4:	f000 fad6 	bl	8009c54 <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 80096a8:	f000 fb98 	bl	8009ddc <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 80096ac:	4b31      	ldr	r3, [pc, #196]	; (8009774 <searchB+0x100>)
 80096ae:	2200      	movs	r2, #0
 80096b0:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 80096b2:	f000 fcd3 	bl	800a05c <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 80096b6:	f001 f809 	bl	800a6cc <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 80096ba:	4b2e      	ldr	r3, [pc, #184]	; (8009774 <searchB+0x100>)
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	1c5a      	adds	r2, r3, #1
 80096c0:	b2d1      	uxtb	r1, r2
 80096c2:	4a2c      	ldr	r2, [pc, #176]	; (8009774 <searchB+0x100>)
 80096c4:	7011      	strb	r1, [r2, #0]
 80096c6:	461a      	mov	r2, r3
 80096c8:	4b2b      	ldr	r3, [pc, #172]	; (8009778 <searchB+0x104>)
 80096ca:	5c9b      	ldrb	r3, [r3, r2]
 80096cc:	2b22      	cmp	r3, #34	; 0x22
 80096ce:	d012      	beq.n	80096f6 <searchB+0x82>
 80096d0:	2b22      	cmp	r3, #34	; 0x22
 80096d2:	dc02      	bgt.n	80096da <searchB+0x66>
 80096d4:	2b11      	cmp	r3, #17
 80096d6:	d01d      	beq.n	8009714 <searchB+0xa0>
 80096d8:	e023      	b.n	8009722 <searchB+0xae>
 80096da:	2b44      	cmp	r3, #68	; 0x44
 80096dc:	d004      	beq.n	80096e8 <searchB+0x74>
 80096de:	2b88      	cmp	r3, #136	; 0x88
 80096e0:	d11f      	bne.n	8009722 <searchB+0xae>
			//----a前進----
			case 0x88:
				one_sectionU();
 80096e2:	f7fb fe83 	bl	80053ec <one_sectionU>
				break;
 80096e6:	e01c      	b.n	8009722 <searchB+0xae>
			//----a右折----
			case 0x44:
				half_sectionD();
 80096e8:	f7fb fde2 	bl	80052b0 <half_sectionD>
				rotate_R90();
 80096ec:	f7fb fe8c 	bl	8005408 <rotate_R90>
				half_sectionA();
 80096f0:	f7fb fdce 	bl	8005290 <half_sectionA>
				break;
 80096f4:	e015      	b.n	8009722 <searchB+0xae>
			//----180回転----
			case 0x22:
				half_sectionD();
 80096f6:	f7fb fddb 	bl	80052b0 <half_sectionD>
				rotate_180();
 80096fa:	f7fb fff5 	bl	80056e8 <rotate_180>
				if(wall_info & 0x88){
 80096fe:	4b1c      	ldr	r3, [pc, #112]	; (8009770 <searchB+0xfc>)
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8009706:	2b00      	cmp	r3, #0
 8009708:	d001      	beq.n	800970e <searchB+0x9a>
					set_position();
 800970a:	f7fb fd93 	bl	8005234 <set_position>
				}
				half_sectionA();
 800970e:	f7fb fdbf 	bl	8005290 <half_sectionA>
				break;
 8009712:	e006      	b.n	8009722 <searchB+0xae>
			//----a左折----
			case 0x11:
				half_sectionD();
 8009714:	f7fb fdcc 	bl	80052b0 <half_sectionD>
				rotate_L90();
 8009718:	f7fb ff2e 	bl	8005578 <rotate_L90>
				half_sectionA();
 800971c:	f7fb fdb8 	bl	8005290 <half_sectionA>
				break;
 8009720:	bf00      	nop
		}
		adv_pos();
 8009722:	f000 fa97 	bl	8009c54 <adv_pos>
		conf_route();
 8009726:	f000 facf 	bl	8009cc8 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800972a:	4b14      	ldr	r3, [pc, #80]	; (800977c <searchB+0x108>)
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	b2da      	uxtb	r2, r3
 8009730:	4b13      	ldr	r3, [pc, #76]	; (8009780 <searchB+0x10c>)
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	429a      	cmp	r2, r3
 8009736:	d1c0      	bne.n	80096ba <searchB+0x46>
 8009738:	4b10      	ldr	r3, [pc, #64]	; (800977c <searchB+0x108>)
 800973a:	785b      	ldrb	r3, [r3, #1]
 800973c:	b2da      	uxtb	r2, r3
 800973e:	4b11      	ldr	r3, [pc, #68]	; (8009784 <searchB+0x110>)
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	429a      	cmp	r2, r3
 8009744:	d1b9      	bne.n	80096ba <searchB+0x46>

	half_sectionD();
 8009746:	f7fb fdb3 	bl	80052b0 <half_sectionD>

	HAL_Delay(2000);
 800974a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800974e:	f7f7 fc3d 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 8009752:	f7fb ffc9 	bl	80056e8 <rotate_180>

	if(!MF.FLAG.SCND){
 8009756:	4b05      	ldr	r3, [pc, #20]	; (800976c <searchB+0xf8>)
 8009758:	881b      	ldrh	r3, [r3, #0]
 800975a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <searchB+0xf4>
		store_map_in_eeprom();
 8009764:	f001 fbf0 	bl	800af48 <store_map_in_eeprom>
	}
}
 8009768:	bf00      	nop
 800976a:	bd80      	pop	{r7, pc}
 800976c:	20000e38 	.word	0x20000e38
 8009770:	200002a4 	.word	0x200002a4
 8009774:	20000e59 	.word	0x20000e59
 8009778:	20000b28 	.word	0x20000b28
 800977c:	20000ae0 	.word	0x20000ae0
 8009780:	20000a85 	.word	0x20000a85
 8009784:	20000a24 	.word	0x20000a24

08009788 <searchC>:
//searchC
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC(){
 8009788:	b580      	push	{r7, lr}
 800978a:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800978c:	4b38      	ldr	r3, [pc, #224]	; (8009870 <searchC+0xe8>)
 800978e:	881b      	ldrh	r3, [r3, #0]
 8009790:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <searchC+0x16>
		load_map_from_eeprom();
 800979a:	f001 fc0f 	bl	800afbc <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800979e:	f001 fc85 	bl	800b0ac <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 80097a2:	4b34      	ldr	r3, [pc, #208]	; (8009874 <searchC+0xec>)
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	f003 0377 	and.w	r3, r3, #119	; 0x77
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	4b31      	ldr	r3, [pc, #196]	; (8009874 <searchC+0xec>)
 80097ae:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 80097b0:	f000 fb14 	bl	8009ddc <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 80097b4:	f7fb fd48 	bl	8005248 <start_sectionA>
	adv_pos();
 80097b8:	f000 fa4c 	bl	8009c54 <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 80097bc:	f000 fb0e 	bl	8009ddc <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 80097c0:	4b2d      	ldr	r3, [pc, #180]	; (8009878 <searchC+0xf0>)
 80097c2:	2200      	movs	r2, #0
 80097c4:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 80097c6:	f000 fc49 	bl	800a05c <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 80097ca:	f000 ff7f 	bl	800a6cc <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 80097ce:	4b2a      	ldr	r3, [pc, #168]	; (8009878 <searchC+0xf0>)
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	b2d1      	uxtb	r1, r2
 80097d6:	4a28      	ldr	r2, [pc, #160]	; (8009878 <searchC+0xf0>)
 80097d8:	7011      	strb	r1, [r2, #0]
 80097da:	461a      	mov	r2, r3
 80097dc:	4b27      	ldr	r3, [pc, #156]	; (800987c <searchC+0xf4>)
 80097de:	5c9b      	ldrb	r3, [r3, r2]
 80097e0:	2b22      	cmp	r3, #34	; 0x22
 80097e2:	d00e      	beq.n	8009802 <searchC+0x7a>
 80097e4:	2b22      	cmp	r3, #34	; 0x22
 80097e6:	dc02      	bgt.n	80097ee <searchC+0x66>
 80097e8:	2b11      	cmp	r3, #17
 80097ea:	d019      	beq.n	8009820 <searchC+0x98>
 80097ec:	e01b      	b.n	8009826 <searchC+0x9e>
 80097ee:	2b44      	cmp	r3, #68	; 0x44
 80097f0:	d004      	beq.n	80097fc <searchC+0x74>
 80097f2:	2b88      	cmp	r3, #136	; 0x88
 80097f4:	d117      	bne.n	8009826 <searchC+0x9e>
			//----a前進----
			case 0x88:
				one_sectionU();
 80097f6:	f7fb fdf9 	bl	80053ec <one_sectionU>
				break;
 80097fa:	e014      	b.n	8009826 <searchC+0x9e>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 80097fc:	f7fc f82c 	bl	8005858 <slalom_R90>

				break;
 8009800:	e011      	b.n	8009826 <searchC+0x9e>
			//----180回転----
			case 0x22:
				half_sectionD();
 8009802:	f7fb fd55 	bl	80052b0 <half_sectionD>
				rotate_180();
 8009806:	f7fb ff6f 	bl	80056e8 <rotate_180>
				if(wall_info & 0x88){
 800980a:	4b1a      	ldr	r3, [pc, #104]	; (8009874 <searchC+0xec>)
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8009812:	2b00      	cmp	r3, #0
 8009814:	d001      	beq.n	800981a <searchC+0x92>
					set_position();
 8009816:	f7fb fd0d 	bl	8005234 <set_position>
				}
				half_sectionA();
 800981a:	f7fb fd39 	bl	8005290 <half_sectionA>
				break;
 800981e:	e002      	b.n	8009826 <searchC+0x9e>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 8009820:	f7fc f91a 	bl	8005a58 <slalom_L90>
				break;
 8009824:	bf00      	nop
		}
		adv_pos();
 8009826:	f000 fa15 	bl	8009c54 <adv_pos>
		conf_route();
 800982a:	f000 fa4d 	bl	8009cc8 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800982e:	4b14      	ldr	r3, [pc, #80]	; (8009880 <searchC+0xf8>)
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	b2da      	uxtb	r2, r3
 8009834:	4b13      	ldr	r3, [pc, #76]	; (8009884 <searchC+0xfc>)
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	429a      	cmp	r2, r3
 800983a:	d1c8      	bne.n	80097ce <searchC+0x46>
 800983c:	4b10      	ldr	r3, [pc, #64]	; (8009880 <searchC+0xf8>)
 800983e:	785b      	ldrb	r3, [r3, #1]
 8009840:	b2da      	uxtb	r2, r3
 8009842:	4b11      	ldr	r3, [pc, #68]	; (8009888 <searchC+0x100>)
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	429a      	cmp	r2, r3
 8009848:	d1c1      	bne.n	80097ce <searchC+0x46>

	half_sectionD();
 800984a:	f7fb fd31 	bl	80052b0 <half_sectionD>

	HAL_Delay(2000);
 800984e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009852:	f7f7 fbbb 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 8009856:	f7fb ff47 	bl	80056e8 <rotate_180>

	if(!MF.FLAG.SCND){
 800985a:	4b05      	ldr	r3, [pc, #20]	; (8009870 <searchC+0xe8>)
 800985c:	881b      	ldrh	r3, [r3, #0]
 800985e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2b00      	cmp	r3, #0
 8009866:	d101      	bne.n	800986c <searchC+0xe4>
		store_map_in_eeprom();
 8009868:	f001 fb6e 	bl	800af48 <store_map_in_eeprom>
	}
}
 800986c:	bf00      	nop
 800986e:	bd80      	pop	{r7, pc}
 8009870:	20000e38 	.word	0x20000e38
 8009874:	200002a4 	.word	0x200002a4
 8009878:	20000e59 	.word	0x20000e59
 800987c:	20000b28 	.word	0x20000b28
 8009880:	20000ae0 	.word	0x20000ae0
 8009884:	20000a85 	.word	0x20000a85
 8009888:	20000a24 	.word	0x20000a24

0800988c <searchC2>:
//searchC2
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC2(){
 800988c:	b580      	push	{r7, lr}
 800988e:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 8009890:	4b38      	ldr	r3, [pc, #224]	; (8009974 <searchC2+0xe8>)
 8009892:	881b      	ldrh	r3, [r3, #0]
 8009894:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <searchC2+0x16>
		load_map_from_eeprom();
 800989e:	f001 fb8d 	bl	800afbc <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 80098a2:	f001 fc03 	bl	800b0ac <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 80098a6:	4b34      	ldr	r3, [pc, #208]	; (8009978 <searchC2+0xec>)
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	f003 0377 	and.w	r3, r3, #119	; 0x77
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	4b31      	ldr	r3, [pc, #196]	; (8009978 <searchC2+0xec>)
 80098b2:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 80098b4:	f000 fa92 	bl	8009ddc <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA2();
 80098b8:	f7fb fd0a 	bl	80052d0 <start_sectionA2>
	adv_pos();
 80098bc:	f000 f9ca 	bl	8009c54 <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 80098c0:	f000 fa8c 	bl	8009ddc <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 80098c4:	4b2d      	ldr	r3, [pc, #180]	; (800997c <searchC2+0xf0>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 80098ca:	f000 fbc7 	bl	800a05c <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 80098ce:	f000 fefd 	bl	800a6cc <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 80098d2:	4b2a      	ldr	r3, [pc, #168]	; (800997c <searchC2+0xf0>)
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	b2d1      	uxtb	r1, r2
 80098da:	4a28      	ldr	r2, [pc, #160]	; (800997c <searchC2+0xf0>)
 80098dc:	7011      	strb	r1, [r2, #0]
 80098de:	461a      	mov	r2, r3
 80098e0:	4b27      	ldr	r3, [pc, #156]	; (8009980 <searchC2+0xf4>)
 80098e2:	5c9b      	ldrb	r3, [r3, r2]
 80098e4:	2b22      	cmp	r3, #34	; 0x22
 80098e6:	d00e      	beq.n	8009906 <searchC2+0x7a>
 80098e8:	2b22      	cmp	r3, #34	; 0x22
 80098ea:	dc02      	bgt.n	80098f2 <searchC2+0x66>
 80098ec:	2b11      	cmp	r3, #17
 80098ee:	d019      	beq.n	8009924 <searchC2+0x98>
 80098f0:	e01b      	b.n	800992a <searchC2+0x9e>
 80098f2:	2b44      	cmp	r3, #68	; 0x44
 80098f4:	d004      	beq.n	8009900 <searchC2+0x74>
 80098f6:	2b88      	cmp	r3, #136	; 0x88
 80098f8:	d117      	bne.n	800992a <searchC2+0x9e>
			//----a前進----
			case 0x88:
				one_sectionU();
 80098fa:	f7fb fd77 	bl	80053ec <one_sectionU>
				break;
 80098fe:	e014      	b.n	800992a <searchC2+0x9e>
			//----a右折スラローム----
			case 0x44:
				slalom_R902();
 8009900:	f7fc f9ae 	bl	8005c60 <slalom_R902>

				break;
 8009904:	e011      	b.n	800992a <searchC2+0x9e>
			//----180回転----
			case 0x22:
				half_sectionD2();
 8009906:	f7fb fd1b 	bl	8005340 <half_sectionD2>
				rotate_180();
 800990a:	f7fb feed 	bl	80056e8 <rotate_180>
				if(wall_info & 0x88){
 800990e:	4b1a      	ldr	r3, [pc, #104]	; (8009978 <searchC2+0xec>)
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8009916:	2b00      	cmp	r3, #0
 8009918:	d001      	beq.n	800991e <searchC2+0x92>
					set_position();
 800991a:	f7fb fc8b 	bl	8005234 <set_position>
				}
				half_sectionA2();
 800991e:	f7fb fcfb 	bl	8005318 <half_sectionA2>
				break;
 8009922:	e002      	b.n	800992a <searchC2+0x9e>
			//----a左折スラローム----
			case 0x11:
				slalom_L902();
 8009924:	f7fc fa7e 	bl	8005e24 <slalom_L902>
				break;
 8009928:	bf00      	nop
		}
		adv_pos();
 800992a:	f000 f993 	bl	8009c54 <adv_pos>
		conf_route();
 800992e:	f000 f9cb 	bl	8009cc8 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 8009932:	4b14      	ldr	r3, [pc, #80]	; (8009984 <searchC2+0xf8>)
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	b2da      	uxtb	r2, r3
 8009938:	4b13      	ldr	r3, [pc, #76]	; (8009988 <searchC2+0xfc>)
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	429a      	cmp	r2, r3
 800993e:	d1c8      	bne.n	80098d2 <searchC2+0x46>
 8009940:	4b10      	ldr	r3, [pc, #64]	; (8009984 <searchC2+0xf8>)
 8009942:	785b      	ldrb	r3, [r3, #1]
 8009944:	b2da      	uxtb	r2, r3
 8009946:	4b11      	ldr	r3, [pc, #68]	; (800998c <searchC2+0x100>)
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	429a      	cmp	r2, r3
 800994c:	d1c1      	bne.n	80098d2 <searchC2+0x46>

	half_sectionD2();
 800994e:	f7fb fcf7 	bl	8005340 <half_sectionD2>

	HAL_Delay(2000);
 8009952:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009956:	f7f7 fb39 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 800995a:	f7fb fec5 	bl	80056e8 <rotate_180>

	if(!MF.FLAG.SCND){
 800995e:	4b05      	ldr	r3, [pc, #20]	; (8009974 <searchC2+0xe8>)
 8009960:	881b      	ldrh	r3, [r3, #0]
 8009962:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009966:	b2db      	uxtb	r3, r3
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <searchC2+0xe4>
		store_map_in_eeprom();
 800996c:	f001 faec 	bl	800af48 <store_map_in_eeprom>
	}
}
 8009970:	bf00      	nop
 8009972:	bd80      	pop	{r7, pc}
 8009974:	20000e38 	.word	0x20000e38
 8009978:	200002a4 	.word	0x200002a4
 800997c:	20000e59 	.word	0x20000e59
 8009980:	20000b28 	.word	0x20000b28
 8009984:	20000ae0 	.word	0x20000ae0
 8009988:	20000a85 	.word	0x20000a85
 800998c:	20000a24 	.word	0x20000a24

08009990 <searchD>:
//searchD
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD(){
 8009990:	b580      	push	{r7, lr}
 8009992:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 8009994:	4b58      	ldr	r3, [pc, #352]	; (8009af8 <searchD+0x168>)
 8009996:	881b      	ldrh	r3, [r3, #0]
 8009998:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800999c:	b2db      	uxtb	r3, r3
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d001      	beq.n	80099a6 <searchD+0x16>
		load_map_from_eeprom();
 80099a2:	f001 fb0b 	bl	800afbc <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 80099a6:	f001 fb81 	bl	800b0ac <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 80099aa:	4b54      	ldr	r3, [pc, #336]	; (8009afc <searchD+0x16c>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	f003 0377 	and.w	r3, r3, #119	; 0x77
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	4b51      	ldr	r3, [pc, #324]	; (8009afc <searchD+0x16c>)
 80099b6:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 80099b8:	f000 fa10 	bl	8009ddc <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 80099bc:	f7fb fc44 	bl	8005248 <start_sectionA>
	adv_pos();
 80099c0:	f000 f948 	bl	8009c54 <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 80099c4:	f000 fa0a 	bl	8009ddc <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 80099c8:	4b4d      	ldr	r3, [pc, #308]	; (8009b00 <searchD+0x170>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 80099ce:	f000 fb45 	bl	800a05c <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 80099d2:	f000 fe7b 	bl	800a6cc <make_route>

	H_accel_flag = 0;
 80099d6:	4b4b      	ldr	r3, [pc, #300]	; (8009b04 <searchD+0x174>)
 80099d8:	2200      	movs	r2, #0
 80099da:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 80099dc:	4b48      	ldr	r3, [pc, #288]	; (8009b00 <searchD+0x170>)
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	1c5a      	adds	r2, r3, #1
 80099e2:	b2d1      	uxtb	r1, r2
 80099e4:	4a46      	ldr	r2, [pc, #280]	; (8009b00 <searchD+0x170>)
 80099e6:	7011      	strb	r1, [r2, #0]
 80099e8:	461a      	mov	r2, r3
 80099ea:	4b47      	ldr	r3, [pc, #284]	; (8009b08 <searchD+0x178>)
 80099ec:	5c9b      	ldrb	r3, [r3, r2]
 80099ee:	2b22      	cmp	r3, #34	; 0x22
 80099f0:	d053      	beq.n	8009a9a <searchD+0x10a>
 80099f2:	2b22      	cmp	r3, #34	; 0x22
 80099f4:	dc02      	bgt.n	80099fc <searchD+0x6c>
 80099f6:	2b11      	cmp	r3, #17
 80099f8:	d056      	beq.n	8009aa8 <searchD+0x118>
 80099fa:	e058      	b.n	8009aae <searchD+0x11e>
 80099fc:	2b44      	cmp	r3, #68	; 0x44
 80099fe:	d049      	beq.n	8009a94 <searchD+0x104>
 8009a00:	2b88      	cmp	r3, #136	; 0x88
 8009a02:	d154      	bne.n	8009aae <searchD+0x11e>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND == 1 && MF.FLAG.ACCL2 == 1){
 8009a04:	4b3c      	ldr	r3, [pc, #240]	; (8009af8 <searchD+0x168>)
 8009a06:	881b      	ldrh	r3, [r3, #0]
 8009a08:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d13c      	bne.n	8009a8c <searchD+0xfc>
 8009a12:	4b39      	ldr	r3, [pc, #228]	; (8009af8 <searchD+0x168>)
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d135      	bne.n	8009a8c <searchD+0xfc>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 8009a20:	4b37      	ldr	r3, [pc, #220]	; (8009b00 <searchD+0x170>)
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	4a38      	ldr	r2, [pc, #224]	; (8009b08 <searchD+0x178>)
 8009a28:	5cd2      	ldrb	r2, [r2, r3]
 8009a2a:	4b35      	ldr	r3, [pc, #212]	; (8009b00 <searchD+0x170>)
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	4619      	mov	r1, r3
 8009a30:	4b35      	ldr	r3, [pc, #212]	; (8009b08 <searchD+0x178>)
 8009a32:	5c5b      	ldrb	r3, [r3, r1]
 8009a34:	4013      	ands	r3, r2
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	2b88      	cmp	r3, #136	; 0x88
 8009a3a:	d110      	bne.n	8009a5e <searchD+0xce>
 8009a3c:	4b30      	ldr	r3, [pc, #192]	; (8009b00 <searchD+0x170>)
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	461a      	mov	r2, r3
 8009a42:	4b31      	ldr	r3, [pc, #196]	; (8009b08 <searchD+0x178>)
 8009a44:	5c9b      	ldrb	r3, [r3, r2]
 8009a46:	2bff      	cmp	r3, #255	; 0xff
 8009a48:	d009      	beq.n	8009a5e <searchD+0xce>
 8009a4a:	4b2e      	ldr	r3, [pc, #184]	; (8009b04 <searchD+0x174>)
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d105      	bne.n	8009a5e <searchD+0xce>
						one_sectionA();
 8009a52:	f7fb fc8f 	bl	8005374 <one_sectionA>
						H_accel_flag = 1;
 8009a56:	4b2b      	ldr	r3, [pc, #172]	; (8009b04 <searchD+0x174>)
 8009a58:	2201      	movs	r2, #1
 8009a5a:	701a      	strb	r2, [r3, #0]
 8009a5c:	e015      	b.n	8009a8a <searchD+0xfa>
					}
					else if((route[r_cnt] & 0x55) && (H_accel_flag == 1)){
 8009a5e:	4b28      	ldr	r3, [pc, #160]	; (8009b00 <searchD+0x170>)
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	461a      	mov	r2, r3
 8009a64:	4b28      	ldr	r3, [pc, #160]	; (8009b08 <searchD+0x178>)
 8009a66:	5c9b      	ldrb	r3, [r3, r2]
 8009a68:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d009      	beq.n	8009a84 <searchD+0xf4>
 8009a70:	4b24      	ldr	r3, [pc, #144]	; (8009b04 <searchD+0x174>)
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d105      	bne.n	8009a84 <searchD+0xf4>
						one_sectionD();
 8009a78:	f7fb fc98 	bl	80053ac <one_sectionD>
						H_accel_flag = 0;
 8009a7c:	4b21      	ldr	r3, [pc, #132]	; (8009b04 <searchD+0x174>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	701a      	strb	r2, [r3, #0]
 8009a82:	e002      	b.n	8009a8a <searchD+0xfa>
					}else{
						one_sectionU();
 8009a84:	f7fb fcb2 	bl	80053ec <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 8009a88:	e003      	b.n	8009a92 <searchD+0x102>
 8009a8a:	e002      	b.n	8009a92 <searchD+0x102>
					}
				}else{
					one_sectionU();
 8009a8c:	f7fb fcae 	bl	80053ec <one_sectionU>
				}
				break;
 8009a90:	e00d      	b.n	8009aae <searchD+0x11e>
 8009a92:	e00c      	b.n	8009aae <searchD+0x11e>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 8009a94:	f7fb fee0 	bl	8005858 <slalom_R90>

				break;
 8009a98:	e009      	b.n	8009aae <searchD+0x11e>
			//----180回転----
			case 0x22:
				half_sectionD();
 8009a9a:	f7fb fc09 	bl	80052b0 <half_sectionD>
				rotate_180();
 8009a9e:	f7fb fe23 	bl	80056e8 <rotate_180>
/*				if(wall_info & 0x88){
					set_position2(0);
				}
*/				half_sectionA();
 8009aa2:	f7fb fbf5 	bl	8005290 <half_sectionA>
				break;
 8009aa6:	e002      	b.n	8009aae <searchD+0x11e>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 8009aa8:	f7fb ffd6 	bl	8005a58 <slalom_L90>
				break;
 8009aac:	bf00      	nop
		}
		adv_pos();
 8009aae:	f000 f8d1 	bl	8009c54 <adv_pos>
		conf_route();
 8009ab2:	f000 f909 	bl	8009cc8 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 8009ab6:	4b15      	ldr	r3, [pc, #84]	; (8009b0c <searchD+0x17c>)
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	4b14      	ldr	r3, [pc, #80]	; (8009b10 <searchD+0x180>)
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d18b      	bne.n	80099dc <searchD+0x4c>
 8009ac4:	4b11      	ldr	r3, [pc, #68]	; (8009b0c <searchD+0x17c>)
 8009ac6:	785b      	ldrb	r3, [r3, #1]
 8009ac8:	b2da      	uxtb	r2, r3
 8009aca:	4b12      	ldr	r3, [pc, #72]	; (8009b14 <searchD+0x184>)
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d184      	bne.n	80099dc <searchD+0x4c>

	half_sectionD();
 8009ad2:	f7fb fbed 	bl	80052b0 <half_sectionD>

	HAL_Delay(2000);
 8009ad6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009ada:	f7f7 fa77 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 8009ade:	f7fb fe03 	bl	80056e8 <rotate_180>

	if(!MF.FLAG.SCND){
 8009ae2:	4b05      	ldr	r3, [pc, #20]	; (8009af8 <searchD+0x168>)
 8009ae4:	881b      	ldrh	r3, [r3, #0]
 8009ae6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d101      	bne.n	8009af4 <searchD+0x164>
		store_map_in_eeprom();
 8009af0:	f001 fa2a 	bl	800af48 <store_map_in_eeprom>
	}
}
 8009af4:	bf00      	nop
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	20000e38 	.word	0x20000e38
 8009afc:	200002a4 	.word	0x200002a4
 8009b00:	20000e59 	.word	0x20000e59
 8009b04:	200002a5 	.word	0x200002a5
 8009b08:	20000b28 	.word	0x20000b28
 8009b0c:	20000ae0 	.word	0x20000ae0
 8009b10:	20000a85 	.word	0x20000a85
 8009b14:	20000a24 	.word	0x20000a24

08009b18 <searchE>:
//searchE
//a未知壁を含むマスを仮goal座標とし、スラローム連続走行で全マスに進む。仮goalを連続的に変化させる。全面探索終了後は半区画減速
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchE(){
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0

	int i = 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	607b      	str	r3, [r7, #4]
	int j = 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	603b      	str	r3, [r7, #0]
	do {
		if(i == 0){
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d111      	bne.n	8009b50 <searchE+0x38>
			//====a前に壁が無い想定で問答無用で前進====
			half_sectionA();
 8009b2c:	f7fb fbb0 	bl	8005290 <half_sectionA>
			adv_pos();
 8009b30:	f000 f890 	bl	8009c54 <adv_pos>
			write_map();														//地図の初期化
 8009b34:	f000 f952 	bl	8009ddc <write_map>

			//====a歩数等初期化====
			m_step = r_cnt = 0;													//歩数と経路カウンタの初期化
 8009b38:	4b3e      	ldr	r3, [pc, #248]	; (8009c34 <searchE+0x11c>)
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	701a      	strb	r2, [r3, #0]
 8009b3e:	4b3e      	ldr	r3, [pc, #248]	; (8009c38 <searchE+0x120>)
 8009b40:	2200      	movs	r2, #0
 8009b42:	801a      	strh	r2, [r3, #0]
			find_pregoal();														//仮goalまでの歩数マップの初期化
 8009b44:	f000 fef0 	bl	800a928 <find_pregoal>
			make_smap2();
 8009b48:	f001 f8da 	bl	800ad00 <make_smap2>
			make_route();														//最短経路探索(route配列に動作が格納される)
 8009b4c:	f000 fdbe 	bl	800a6cc <make_route>
		}

		//====a探索走行====
		do {
			//----a進行----
			switch (route[r_cnt++]) {										//route配列によって進行を決定。経路カウンタを進める
 8009b50:	4b38      	ldr	r3, [pc, #224]	; (8009c34 <searchE+0x11c>)
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	1c5a      	adds	r2, r3, #1
 8009b56:	b2d1      	uxtb	r1, r2
 8009b58:	4a36      	ldr	r2, [pc, #216]	; (8009c34 <searchE+0x11c>)
 8009b5a:	7011      	strb	r1, [r2, #0]
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	4b37      	ldr	r3, [pc, #220]	; (8009c3c <searchE+0x124>)
 8009b60:	5c9b      	ldrb	r3, [r3, r2]
 8009b62:	2b22      	cmp	r3, #34	; 0x22
 8009b64:	d00e      	beq.n	8009b84 <searchE+0x6c>
 8009b66:	2b22      	cmp	r3, #34	; 0x22
 8009b68:	dc02      	bgt.n	8009b70 <searchE+0x58>
 8009b6a:	2b11      	cmp	r3, #17
 8009b6c:	d011      	beq.n	8009b92 <searchE+0x7a>
 8009b6e:	e013      	b.n	8009b98 <searchE+0x80>
 8009b70:	2b44      	cmp	r3, #68	; 0x44
 8009b72:	d004      	beq.n	8009b7e <searchE+0x66>
 8009b74:	2b88      	cmp	r3, #136	; 0x88
 8009b76:	d10f      	bne.n	8009b98 <searchE+0x80>
				//----a前進----
			case 0x88:
				one_sectionU();
 8009b78:	f7fb fc38 	bl	80053ec <one_sectionU>
				break;
 8009b7c:	e00c      	b.n	8009b98 <searchE+0x80>
				//----a右折----
			case 0x44:
				slalom_R90();
 8009b7e:	f7fb fe6b 	bl	8005858 <slalom_R90>
				break;
 8009b82:	e009      	b.n	8009b98 <searchE+0x80>
				//----180回転----
			case 0x22:
				half_sectionD();
 8009b84:	f7fb fb94 	bl	80052b0 <half_sectionD>
				rotate_180();
 8009b88:	f7fb fdae 	bl	80056e8 <rotate_180>
/*				if(wall_info & 0x88){
					set_position2(0);
				}
*/				half_sectionA();
 8009b8c:	f7fb fb80 	bl	8005290 <half_sectionA>
				break;
 8009b90:	e002      	b.n	8009b98 <searchE+0x80>
				//----a左折----
			case 0x11:
				slalom_L90();
 8009b92:	f7fb ff61 	bl	8005a58 <slalom_L90>
				break;
 8009b96:	bf00      	nop
			}
			adv_pos();														//aマイクロマウス内部位置情報でも前進処理
 8009b98:	f000 f85c 	bl	8009c54 <adv_pos>
			j++;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	603b      	str	r3, [r7, #0]
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	2b96      	cmp	r3, #150	; 0x96
 8009ba6:	dc0e      	bgt.n	8009bc6 <searchE+0xae>

		} while ((mouse.x != pregoal_x) || (mouse.y != pregoal_y));			//a現在座標と仮goal座標が等しくなるまで実行
 8009ba8:	4b25      	ldr	r3, [pc, #148]	; (8009c40 <searchE+0x128>)
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	b2da      	uxtb	r2, r3
 8009bae:	4b25      	ldr	r3, [pc, #148]	; (8009c44 <searchE+0x12c>)
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d1cc      	bne.n	8009b50 <searchE+0x38>
 8009bb6:	4b22      	ldr	r3, [pc, #136]	; (8009c40 <searchE+0x128>)
 8009bb8:	785b      	ldrb	r3, [r3, #1]
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	4b22      	ldr	r3, [pc, #136]	; (8009c48 <searchE+0x130>)
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d1c5      	bne.n	8009b50 <searchE+0x38>
 8009bc4:	e000      	b.n	8009bc8 <searchE+0xb0>
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 8009bc6:	bf00      	nop

		get_wall_info();													//a壁情報の初期化, 後壁はなくなる
 8009bc8:	f001 fa70 	bl	800b0ac <get_wall_info>
		write_map();														//a地図の初期化
 8009bcc:	f000 f906 	bl	8009ddc <write_map>
		//printf("get pregoal, x = %d, y = %d\n", mouse.x, mouse.y);

		//====a歩数等初期化====
		m_step = r_cnt = 0;													//a歩数と経路カウンタの初期化
 8009bd0:	4b18      	ldr	r3, [pc, #96]	; (8009c34 <searchE+0x11c>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	701a      	strb	r2, [r3, #0]
 8009bd6:	4b18      	ldr	r3, [pc, #96]	; (8009c38 <searchE+0x120>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	801a      	strh	r2, [r3, #0]

		find_pregoal();														//a仮goalまでの歩数マップの初期化
 8009bdc:	f000 fea4 	bl	800a928 <find_pregoal>
		if (allmap_comp_flag) {
 8009be0:	4b1a      	ldr	r3, [pc, #104]	; (8009c4c <searchE+0x134>)
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d002      	beq.n	8009bee <searchE+0xd6>
			//printf("get allmap_comp_flag\n");
			half_sectionD();
 8009be8:	f7fb fb62 	bl	80052b0 <half_sectionD>
			break;
 8009bec:	e00e      	b.n	8009c0c <searchE+0xf4>
		}
		make_smap2();
 8009bee:	f001 f887 	bl	800ad00 <make_smap2>
		make_route();														//a最短経路探索(route配列に動作が格納される)
 8009bf2:	f000 fd6b 	bl	800a6cc <make_route>

		if (j > 150) {
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	2b96      	cmp	r3, #150	; 0x96
 8009bfa:	dc06      	bgt.n	8009c0a <searchE+0xf2>
			//printf("j = %d\n", j);
			break;															//a移動マス数が250以上になった場合全面探索を中止
		}
		i++;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	607b      	str	r3, [r7, #4]
		//printf("i = %d\n", i);

	} while (i < 150);														//a仮goalへの到着が130回以上になった場合全面探索を中止
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b95      	cmp	r3, #149	; 0x95
 8009c06:	dd8e      	ble.n	8009b26 <searchE+0xe>
 8009c08:	e000      	b.n	8009c0c <searchE+0xf4>
			break;															//a移動マス数が250以上になった場合全面探索を中止
 8009c0a:	bf00      	nop
	//printf("i = %d\n", i);
	//printf("fin\n");

	HAL_Delay(2000);
 8009c0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009c10:	f7f7 f9dc 	bl	8000fcc <HAL_Delay>
	rotate_180();											//180度回転
 8009c14:	f7fb fd68 	bl	80056e8 <rotate_180>

	if(!MF.FLAG.SCND){
 8009c18:	4b0d      	ldr	r3, [pc, #52]	; (8009c50 <searchE+0x138>)
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d101      	bne.n	8009c2a <searchE+0x112>
		store_map_in_eeprom();
 8009c26:	f001 f98f 	bl	800af48 <store_map_in_eeprom>
	}
}
 8009c2a:	bf00      	nop
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	20000e59 	.word	0x20000e59
 8009c38:	2000032a 	.word	0x2000032a
 8009c3c:	20000b28 	.word	0x20000b28
 8009c40:	20000ae0 	.word	0x20000ae0
 8009c44:	20000c30 	.word	0x20000c30
 8009c48:	20000e50 	.word	0x20000e50
 8009c4c:	20000a84 	.word	0x20000a84
 8009c50:	20000e38 	.word	0x20000e38

08009c54 <adv_pos>:
//adv_pos
//aマイクロマウス内部位置情報で前進させる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 8009c54:	b480      	push	{r7}
 8009c56:	af00      	add	r7, sp, #0

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 8009c58:	4b1a      	ldr	r3, [pc, #104]	; (8009cc4 <adv_pos+0x70>)
 8009c5a:	789b      	ldrb	r3, [r3, #2]
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	2b03      	cmp	r3, #3
 8009c60:	d82a      	bhi.n	8009cb8 <adv_pos+0x64>
 8009c62:	a201      	add	r2, pc, #4	; (adr r2, 8009c68 <adv_pos+0x14>)
 8009c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c68:	08009c79 	.word	0x08009c79
 8009c6c:	08009c89 	.word	0x08009c89
 8009c70:	08009c99 	.word	0x08009c99
 8009c74:	08009ca9 	.word	0x08009ca9
	case 0x00:												//a北方向に向いている場合
		mouse.y++;											//Y座標をインクリメント
 8009c78:	4b12      	ldr	r3, [pc, #72]	; (8009cc4 <adv_pos+0x70>)
 8009c7a:	785b      	ldrb	r3, [r3, #1]
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	3301      	adds	r3, #1
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	4b10      	ldr	r3, [pc, #64]	; (8009cc4 <adv_pos+0x70>)
 8009c84:	705a      	strb	r2, [r3, #1]
		break;
 8009c86:	e017      	b.n	8009cb8 <adv_pos+0x64>
	case 0x01:												//a東方向に向いている場合
		mouse.x++;											//X座標をインクリメント
 8009c88:	4b0e      	ldr	r3, [pc, #56]	; (8009cc4 <adv_pos+0x70>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	3301      	adds	r3, #1
 8009c90:	b2da      	uxtb	r2, r3
 8009c92:	4b0c      	ldr	r3, [pc, #48]	; (8009cc4 <adv_pos+0x70>)
 8009c94:	701a      	strb	r2, [r3, #0]
		break;
 8009c96:	e00f      	b.n	8009cb8 <adv_pos+0x64>
	case 0x02:												//a南方向に向いている場合
		mouse.y--;											//Y座標をデクリメント
 8009c98:	4b0a      	ldr	r3, [pc, #40]	; (8009cc4 <adv_pos+0x70>)
 8009c9a:	785b      	ldrb	r3, [r3, #1]
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	b2da      	uxtb	r2, r3
 8009ca2:	4b08      	ldr	r3, [pc, #32]	; (8009cc4 <adv_pos+0x70>)
 8009ca4:	705a      	strb	r2, [r3, #1]
		break;
 8009ca6:	e007      	b.n	8009cb8 <adv_pos+0x64>
	case 0x03:												//a西方向に向いている場合
		mouse.x--;											//X座標をデクリメント
 8009ca8:	4b06      	ldr	r3, [pc, #24]	; (8009cc4 <adv_pos+0x70>)
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	b2da      	uxtb	r2, r3
 8009cb2:	4b04      	ldr	r3, [pc, #16]	; (8009cc4 <adv_pos+0x70>)
 8009cb4:	701a      	strb	r2, [r3, #0]
		break;
 8009cb6:	bf00      	nop
	}
}
 8009cb8:	bf00      	nop
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	20000ae0 	.word	0x20000ae0

08009cc8 <conf_route>:
//conf_route
//a進路を判定する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0

	//----a壁情報書き込み----
	write_map();
 8009ccc:	f000 f886 	bl	8009ddc <write_map>

	//----a最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 8009cd0:	4b09      	ldr	r3, [pc, #36]	; (8009cf8 <conf_route+0x30>)
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	4b09      	ldr	r3, [pc, #36]	; (8009cfc <conf_route+0x34>)
 8009cd8:	5c9a      	ldrb	r2, [r3, r2]
 8009cda:	4b09      	ldr	r3, [pc, #36]	; (8009d00 <conf_route+0x38>)
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	4013      	ands	r3, r2
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d006      	beq.n	8009cf4 <conf_route+0x2c>
		make_smap();										//a歩数マップを更新
 8009ce6:	f000 f9b9 	bl	800a05c <make_smap>
		make_route();										//a最短経路を更新
 8009cea:	f000 fcef 	bl	800a6cc <make_route>
		r_cnt = 0;											//a経路カウンタを0に
 8009cee:	4b02      	ldr	r3, [pc, #8]	; (8009cf8 <conf_route+0x30>)
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	701a      	strb	r2, [r3, #0]
	}
}
 8009cf4:	bf00      	nop
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	20000e59 	.word	0x20000e59
 8009cfc:	20000b28 	.word	0x20000b28
 8009d00:	200002a4 	.word	0x200002a4

08009d04 <map_Init>:
//map_Init
//aマップ格納配列map[][]の初期化をする
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数

	//====a初期化開始====
	//aマップのクリア
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	71bb      	strb	r3, [r7, #6]
 8009d0e:	e013      	b.n	8009d38 <map_Init+0x34>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 8009d10:	2300      	movs	r3, #0
 8009d12:	71fb      	strb	r3, [r7, #7]
 8009d14:	e00a      	b.n	8009d2c <map_Init+0x28>
			map[y][x] = 0xf0;								//a上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 8009d16:	79ba      	ldrb	r2, [r7, #6]
 8009d18:	79fb      	ldrb	r3, [r7, #7]
 8009d1a:	492f      	ldr	r1, [pc, #188]	; (8009dd8 <map_Init+0xd4>)
 8009d1c:	0112      	lsls	r2, r2, #4
 8009d1e:	440a      	add	r2, r1
 8009d20:	4413      	add	r3, r2
 8009d22:	22f0      	movs	r2, #240	; 0xf0
 8009d24:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 8009d26:	79fb      	ldrb	r3, [r7, #7]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	71fb      	strb	r3, [r7, #7]
 8009d2c:	79fb      	ldrb	r3, [r7, #7]
 8009d2e:	2b0f      	cmp	r3, #15
 8009d30:	d9f1      	bls.n	8009d16 <map_Init+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8009d32:	79bb      	ldrb	r3, [r7, #6]
 8009d34:	3301      	adds	r3, #1
 8009d36:	71bb      	strb	r3, [r7, #6]
 8009d38:	79bb      	ldrb	r3, [r7, #6]
 8009d3a:	2b0f      	cmp	r3, #15
 8009d3c:	d9e8      	bls.n	8009d10 <map_Init+0xc>
		}
	}

	//a確定壁の配置
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8009d3e:	2300      	movs	r3, #0
 8009d40:	71bb      	strb	r3, [r7, #6]
 8009d42:	e020      	b.n	8009d86 <map_Init+0x82>
		map[y][0] |= 0xf1;									//a最西に壁を配置
 8009d44:	79bb      	ldrb	r3, [r7, #6]
 8009d46:	4a24      	ldr	r2, [pc, #144]	; (8009dd8 <map_Init+0xd4>)
 8009d48:	011b      	lsls	r3, r3, #4
 8009d4a:	4413      	add	r3, r2
 8009d4c:	781a      	ldrb	r2, [r3, #0]
 8009d4e:	79bb      	ldrb	r3, [r7, #6]
 8009d50:	f062 020e 	orn	r2, r2, #14
 8009d54:	b2d1      	uxtb	r1, r2
 8009d56:	4a20      	ldr	r2, [pc, #128]	; (8009dd8 <map_Init+0xd4>)
 8009d58:	011b      	lsls	r3, r3, #4
 8009d5a:	4413      	add	r3, r2
 8009d5c:	460a      	mov	r2, r1
 8009d5e:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//a最東に壁を配置
 8009d60:	79bb      	ldrb	r3, [r7, #6]
 8009d62:	4a1d      	ldr	r2, [pc, #116]	; (8009dd8 <map_Init+0xd4>)
 8009d64:	011b      	lsls	r3, r3, #4
 8009d66:	4413      	add	r3, r2
 8009d68:	330f      	adds	r3, #15
 8009d6a:	781a      	ldrb	r2, [r3, #0]
 8009d6c:	79bb      	ldrb	r3, [r7, #6]
 8009d6e:	f062 020b 	orn	r2, r2, #11
 8009d72:	b2d1      	uxtb	r1, r2
 8009d74:	4a18      	ldr	r2, [pc, #96]	; (8009dd8 <map_Init+0xd4>)
 8009d76:	011b      	lsls	r3, r3, #4
 8009d78:	4413      	add	r3, r2
 8009d7a:	330f      	adds	r3, #15
 8009d7c:	460a      	mov	r2, r1
 8009d7e:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8009d80:	79bb      	ldrb	r3, [r7, #6]
 8009d82:	3301      	adds	r3, #1
 8009d84:	71bb      	strb	r3, [r7, #6]
 8009d86:	79bb      	ldrb	r3, [r7, #6]
 8009d88:	2b0f      	cmp	r3, #15
 8009d8a:	d9db      	bls.n	8009d44 <map_Init+0x40>
	}
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	71fb      	strb	r3, [r7, #7]
 8009d90:	e019      	b.n	8009dc6 <map_Init+0xc2>
		map[0][x] |= 0xf2;									//a最南に壁を配置
 8009d92:	79fb      	ldrb	r3, [r7, #7]
 8009d94:	4a10      	ldr	r2, [pc, #64]	; (8009dd8 <map_Init+0xd4>)
 8009d96:	5cd2      	ldrb	r2, [r2, r3]
 8009d98:	79fb      	ldrb	r3, [r7, #7]
 8009d9a:	f062 020d 	orn	r2, r2, #13
 8009d9e:	b2d1      	uxtb	r1, r2
 8009da0:	4a0d      	ldr	r2, [pc, #52]	; (8009dd8 <map_Init+0xd4>)
 8009da2:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//a最北に壁を配置
 8009da4:	79fb      	ldrb	r3, [r7, #7]
 8009da6:	4a0c      	ldr	r2, [pc, #48]	; (8009dd8 <map_Init+0xd4>)
 8009da8:	4413      	add	r3, r2
 8009daa:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 8009dae:	79fb      	ldrb	r3, [r7, #7]
 8009db0:	f062 0207 	orn	r2, r2, #7
 8009db4:	b2d1      	uxtb	r1, r2
 8009db6:	4a08      	ldr	r2, [pc, #32]	; (8009dd8 <map_Init+0xd4>)
 8009db8:	4413      	add	r3, r2
 8009dba:	460a      	mov	r2, r1
 8009dbc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 8009dc0:	79fb      	ldrb	r3, [r7, #7]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	71fb      	strb	r3, [r7, #7]
 8009dc6:	79fb      	ldrb	r3, [r7, #7]
 8009dc8:	2b0f      	cmp	r3, #15
 8009dca:	d9e2      	bls.n	8009d92 <map_Init+0x8e>
	}
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr
 8009dd8:	20000188 	.word	0x20000188

08009ddc <write_map>:
//write_map
//aマップデータを書き込む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 8009ddc:	b490      	push	{r4, r7}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t m_temp;											//a向きを補正した壁情報

	//====a壁情報の補正格納====
	m_temp = (wall_info >> mouse.dir) & 0x0f;				//aセンサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 8009de2:	4b8f      	ldr	r3, [pc, #572]	; (800a020 <write_map+0x244>)
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	461a      	mov	r2, r3
 8009de8:	4b8e      	ldr	r3, [pc, #568]	; (800a024 <write_map+0x248>)
 8009dea:	789b      	ldrb	r3, [r3, #2]
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	fa42 f303 	asr.w	r3, r2, r3
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	f003 030f 	and.w	r3, r3, #15
 8009df8:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//a上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 8009dfa:	79fb      	ldrb	r3, [r7, #7]
 8009dfc:	011b      	lsls	r3, r3, #4
 8009dfe:	b25a      	sxtb	r2, r3
 8009e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	b25b      	sxtb	r3, r3
 8009e08:	71fb      	strb	r3, [r7, #7]

	//====aデータの書き込み====
	map[mouse.y][mouse.x] = m_temp; 						//a現在地に壁情報書き込み
 8009e0a:	4b86      	ldr	r3, [pc, #536]	; (800a024 <write_map+0x248>)
 8009e0c:	785b      	ldrb	r3, [r3, #1]
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	4618      	mov	r0, r3
 8009e12:	4b84      	ldr	r3, [pc, #528]	; (800a024 <write_map+0x248>)
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	4619      	mov	r1, r3
 8009e1a:	4a83      	ldr	r2, [pc, #524]	; (800a028 <write_map+0x24c>)
 8009e1c:	0103      	lsls	r3, r0, #4
 8009e1e:	4413      	add	r3, r2
 8009e20:	440b      	add	r3, r1
 8009e22:	79fa      	ldrb	r2, [r7, #7]
 8009e24:	701a      	strb	r2, [r3, #0]
	//----a周辺に書き込む----
	//a北側について
	if(mouse.y != 15){										//a現在最北端でないとき
 8009e26:	4b7f      	ldr	r3, [pc, #508]	; (800a024 <write_map+0x248>)
 8009e28:	785b      	ldrb	r3, [r3, #1]
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	2b0f      	cmp	r3, #15
 8009e2e:	d039      	beq.n	8009ea4 <write_map+0xc8>
		if(m_temp & 0x88){									//a北壁がある場合
 8009e30:	79fb      	ldrb	r3, [r7, #7]
 8009e32:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d01a      	beq.n	8009e70 <write_map+0x94>
			map[mouse.y + 1][mouse.x] |= 0x22;				//a北側の区画から見て南壁ありを書き込む
 8009e3a:	4b7a      	ldr	r3, [pc, #488]	; (800a024 <write_map+0x248>)
 8009e3c:	785b      	ldrb	r3, [r3, #1]
 8009e3e:	b2d8      	uxtb	r0, r3
 8009e40:	4603      	mov	r3, r0
 8009e42:	3301      	adds	r3, #1
 8009e44:	4a77      	ldr	r2, [pc, #476]	; (800a024 <write_map+0x248>)
 8009e46:	7812      	ldrb	r2, [r2, #0]
 8009e48:	b2d1      	uxtb	r1, r2
 8009e4a:	460c      	mov	r4, r1
 8009e4c:	4a76      	ldr	r2, [pc, #472]	; (800a028 <write_map+0x24c>)
 8009e4e:	011b      	lsls	r3, r3, #4
 8009e50:	4413      	add	r3, r2
 8009e52:	4423      	add	r3, r4
 8009e54:	781a      	ldrb	r2, [r3, #0]
 8009e56:	4603      	mov	r3, r0
 8009e58:	3301      	adds	r3, #1
 8009e5a:	4608      	mov	r0, r1
 8009e5c:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8009e60:	b2d1      	uxtb	r1, r2
 8009e62:	4a71      	ldr	r2, [pc, #452]	; (800a028 <write_map+0x24c>)
 8009e64:	011b      	lsls	r3, r3, #4
 8009e66:	4413      	add	r3, r2
 8009e68:	4403      	add	r3, r0
 8009e6a:	460a      	mov	r2, r1
 8009e6c:	701a      	strb	r2, [r3, #0]
 8009e6e:	e019      	b.n	8009ea4 <write_map+0xc8>
		}else{												//a北壁がない場合
			map[mouse.y + 1][mouse.x] &= 0xDD;				//a北側の区画から見て南壁なしを書き込む
 8009e70:	4b6c      	ldr	r3, [pc, #432]	; (800a024 <write_map+0x248>)
 8009e72:	785b      	ldrb	r3, [r3, #1]
 8009e74:	b2d8      	uxtb	r0, r3
 8009e76:	4603      	mov	r3, r0
 8009e78:	3301      	adds	r3, #1
 8009e7a:	4a6a      	ldr	r2, [pc, #424]	; (800a024 <write_map+0x248>)
 8009e7c:	7812      	ldrb	r2, [r2, #0]
 8009e7e:	b2d1      	uxtb	r1, r2
 8009e80:	460c      	mov	r4, r1
 8009e82:	4a69      	ldr	r2, [pc, #420]	; (800a028 <write_map+0x24c>)
 8009e84:	011b      	lsls	r3, r3, #4
 8009e86:	4413      	add	r3, r2
 8009e88:	4423      	add	r3, r4
 8009e8a:	781a      	ldrb	r2, [r3, #0]
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	3301      	adds	r3, #1
 8009e90:	4608      	mov	r0, r1
 8009e92:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8009e96:	b2d1      	uxtb	r1, r2
 8009e98:	4a63      	ldr	r2, [pc, #396]	; (800a028 <write_map+0x24c>)
 8009e9a:	011b      	lsls	r3, r3, #4
 8009e9c:	4413      	add	r3, r2
 8009e9e:	4403      	add	r3, r0
 8009ea0:	460a      	mov	r2, r1
 8009ea2:	701a      	strb	r2, [r3, #0]
		}
	}
	//a東側について
	if(mouse.x != 15){										//a現在最東端でないとき
 8009ea4:	4b5f      	ldr	r3, [pc, #380]	; (800a024 <write_map+0x248>)
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	2b0f      	cmp	r3, #15
 8009eac:	d037      	beq.n	8009f1e <write_map+0x142>
		if(m_temp & 0x44){									//a東壁がある場合
 8009eae:	79fb      	ldrb	r3, [r7, #7]
 8009eb0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d019      	beq.n	8009eec <write_map+0x110>
			map[mouse.y][mouse.x + 1] |= 0x11;				//a東側の区画から見て西壁ありを書き込む
 8009eb8:	4b5a      	ldr	r3, [pc, #360]	; (800a024 <write_map+0x248>)
 8009eba:	785b      	ldrb	r3, [r3, #1]
 8009ebc:	b2dc      	uxtb	r4, r3
 8009ebe:	4622      	mov	r2, r4
 8009ec0:	4b58      	ldr	r3, [pc, #352]	; (800a024 <write_map+0x248>)
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	b2d8      	uxtb	r0, r3
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	3301      	adds	r3, #1
 8009eca:	4957      	ldr	r1, [pc, #348]	; (800a028 <write_map+0x24c>)
 8009ecc:	0112      	lsls	r2, r2, #4
 8009ece:	440a      	add	r2, r1
 8009ed0:	4413      	add	r3, r2
 8009ed2:	781a      	ldrb	r2, [r3, #0]
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	f042 0211 	orr.w	r2, r2, #17
 8009edc:	b2d0      	uxtb	r0, r2
 8009ede:	4952      	ldr	r1, [pc, #328]	; (800a028 <write_map+0x24c>)
 8009ee0:	0122      	lsls	r2, r4, #4
 8009ee2:	440a      	add	r2, r1
 8009ee4:	4413      	add	r3, r2
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	701a      	strb	r2, [r3, #0]
 8009eea:	e018      	b.n	8009f1e <write_map+0x142>
		}else{												//a北壁がない場合
			map[mouse.y][mouse.x + 1] &= 0xEE;				//a東側の区画から見て西壁なしを書き込む
 8009eec:	4b4d      	ldr	r3, [pc, #308]	; (800a024 <write_map+0x248>)
 8009eee:	785b      	ldrb	r3, [r3, #1]
 8009ef0:	b2dc      	uxtb	r4, r3
 8009ef2:	4622      	mov	r2, r4
 8009ef4:	4b4b      	ldr	r3, [pc, #300]	; (800a024 <write_map+0x248>)
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	b2d8      	uxtb	r0, r3
 8009efa:	4603      	mov	r3, r0
 8009efc:	3301      	adds	r3, #1
 8009efe:	494a      	ldr	r1, [pc, #296]	; (800a028 <write_map+0x24c>)
 8009f00:	0112      	lsls	r2, r2, #4
 8009f02:	440a      	add	r2, r1
 8009f04:	4413      	add	r3, r2
 8009f06:	781a      	ldrb	r2, [r3, #0]
 8009f08:	4603      	mov	r3, r0
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	f022 0211 	bic.w	r2, r2, #17
 8009f10:	b2d0      	uxtb	r0, r2
 8009f12:	4945      	ldr	r1, [pc, #276]	; (800a028 <write_map+0x24c>)
 8009f14:	0122      	lsls	r2, r4, #4
 8009f16:	440a      	add	r2, r1
 8009f18:	4413      	add	r3, r2
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	701a      	strb	r2, [r3, #0]
		}
	}
	//a南壁について
	if(mouse.y != 0){										//a現在最南端でないとき
 8009f1e:	4b41      	ldr	r3, [pc, #260]	; (800a024 <write_map+0x248>)
 8009f20:	785b      	ldrb	r3, [r3, #1]
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d039      	beq.n	8009f9c <write_map+0x1c0>
		if(m_temp & 0x22){									//a南壁がある場合
 8009f28:	79fb      	ldrb	r3, [r7, #7]
 8009f2a:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d01a      	beq.n	8009f68 <write_map+0x18c>
			map[mouse.y - 1][mouse.x] |= 0x88;				//a南側の区画から見て北壁ありを書き込む
 8009f32:	4b3c      	ldr	r3, [pc, #240]	; (800a024 <write_map+0x248>)
 8009f34:	785b      	ldrb	r3, [r3, #1]
 8009f36:	b2d8      	uxtb	r0, r3
 8009f38:	4603      	mov	r3, r0
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	4a39      	ldr	r2, [pc, #228]	; (800a024 <write_map+0x248>)
 8009f3e:	7812      	ldrb	r2, [r2, #0]
 8009f40:	b2d1      	uxtb	r1, r2
 8009f42:	460c      	mov	r4, r1
 8009f44:	4a38      	ldr	r2, [pc, #224]	; (800a028 <write_map+0x24c>)
 8009f46:	011b      	lsls	r3, r3, #4
 8009f48:	4413      	add	r3, r2
 8009f4a:	4423      	add	r3, r4
 8009f4c:	781a      	ldrb	r2, [r3, #0]
 8009f4e:	4603      	mov	r3, r0
 8009f50:	3b01      	subs	r3, #1
 8009f52:	4608      	mov	r0, r1
 8009f54:	f062 0277 	orn	r2, r2, #119	; 0x77
 8009f58:	b2d1      	uxtb	r1, r2
 8009f5a:	4a33      	ldr	r2, [pc, #204]	; (800a028 <write_map+0x24c>)
 8009f5c:	011b      	lsls	r3, r3, #4
 8009f5e:	4413      	add	r3, r2
 8009f60:	4403      	add	r3, r0
 8009f62:	460a      	mov	r2, r1
 8009f64:	701a      	strb	r2, [r3, #0]
 8009f66:	e019      	b.n	8009f9c <write_map+0x1c0>
		}else{												//a南壁がない場合
			map[mouse.y - 1][mouse.x] &= 0x77;				//a南側の区画から見て北壁なしを書き込む
 8009f68:	4b2e      	ldr	r3, [pc, #184]	; (800a024 <write_map+0x248>)
 8009f6a:	785b      	ldrb	r3, [r3, #1]
 8009f6c:	b2d8      	uxtb	r0, r3
 8009f6e:	4603      	mov	r3, r0
 8009f70:	3b01      	subs	r3, #1
 8009f72:	4a2c      	ldr	r2, [pc, #176]	; (800a024 <write_map+0x248>)
 8009f74:	7812      	ldrb	r2, [r2, #0]
 8009f76:	b2d1      	uxtb	r1, r2
 8009f78:	460c      	mov	r4, r1
 8009f7a:	4a2b      	ldr	r2, [pc, #172]	; (800a028 <write_map+0x24c>)
 8009f7c:	011b      	lsls	r3, r3, #4
 8009f7e:	4413      	add	r3, r2
 8009f80:	4423      	add	r3, r4
 8009f82:	781a      	ldrb	r2, [r3, #0]
 8009f84:	4603      	mov	r3, r0
 8009f86:	3b01      	subs	r3, #1
 8009f88:	4608      	mov	r0, r1
 8009f8a:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8009f8e:	b2d1      	uxtb	r1, r2
 8009f90:	4a25      	ldr	r2, [pc, #148]	; (800a028 <write_map+0x24c>)
 8009f92:	011b      	lsls	r3, r3, #4
 8009f94:	4413      	add	r3, r2
 8009f96:	4403      	add	r3, r0
 8009f98:	460a      	mov	r2, r1
 8009f9a:	701a      	strb	r2, [r3, #0]
		}
	}
	//a西側について
	if(mouse.x != 0){										//a現在最西端でないとき
 8009f9c:	4b21      	ldr	r3, [pc, #132]	; (800a024 <write_map+0x248>)
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d037      	beq.n	800a016 <write_map+0x23a>
		if(m_temp & 0x11){									//a西壁がある場合
 8009fa6:	79fb      	ldrb	r3, [r7, #7]
 8009fa8:	f003 0311 	and.w	r3, r3, #17
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d019      	beq.n	8009fe4 <write_map+0x208>
			map[mouse.y][mouse.x - 1] |= 0x44;				//a西側の区画から見て東壁ありを書き込む
 8009fb0:	4b1c      	ldr	r3, [pc, #112]	; (800a024 <write_map+0x248>)
 8009fb2:	785b      	ldrb	r3, [r3, #1]
 8009fb4:	b2dc      	uxtb	r4, r3
 8009fb6:	4622      	mov	r2, r4
 8009fb8:	4b1a      	ldr	r3, [pc, #104]	; (800a024 <write_map+0x248>)
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	b2d8      	uxtb	r0, r3
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	4919      	ldr	r1, [pc, #100]	; (800a028 <write_map+0x24c>)
 8009fc4:	0112      	lsls	r2, r2, #4
 8009fc6:	440a      	add	r2, r1
 8009fc8:	4413      	add	r3, r2
 8009fca:	781a      	ldrb	r2, [r3, #0]
 8009fcc:	4603      	mov	r3, r0
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 8009fd4:	b2d0      	uxtb	r0, r2
 8009fd6:	4914      	ldr	r1, [pc, #80]	; (800a028 <write_map+0x24c>)
 8009fd8:	0122      	lsls	r2, r4, #4
 8009fda:	440a      	add	r2, r1
 8009fdc:	4413      	add	r3, r2
 8009fde:	4602      	mov	r2, r0
 8009fe0:	701a      	strb	r2, [r3, #0]
		}else{												//a西壁がない場合
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
		}
	}
}
 8009fe2:	e018      	b.n	800a016 <write_map+0x23a>
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
 8009fe4:	4b0f      	ldr	r3, [pc, #60]	; (800a024 <write_map+0x248>)
 8009fe6:	785b      	ldrb	r3, [r3, #1]
 8009fe8:	b2dc      	uxtb	r4, r3
 8009fea:	4622      	mov	r2, r4
 8009fec:	4b0d      	ldr	r3, [pc, #52]	; (800a024 <write_map+0x248>)
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	b2d8      	uxtb	r0, r3
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	490c      	ldr	r1, [pc, #48]	; (800a028 <write_map+0x24c>)
 8009ff8:	0112      	lsls	r2, r2, #4
 8009ffa:	440a      	add	r2, r1
 8009ffc:	4413      	add	r3, r2
 8009ffe:	781a      	ldrb	r2, [r3, #0]
 800a000:	4603      	mov	r3, r0
 800a002:	3b01      	subs	r3, #1
 800a004:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 800a008:	b2d0      	uxtb	r0, r2
 800a00a:	4907      	ldr	r1, [pc, #28]	; (800a028 <write_map+0x24c>)
 800a00c:	0122      	lsls	r2, r4, #4
 800a00e:	440a      	add	r2, r1
 800a010:	4413      	add	r3, r2
 800a012:	4602      	mov	r2, r0
 800a014:	701a      	strb	r2, [r3, #0]
}
 800a016:	bf00      	nop
 800a018:	3708      	adds	r7, #8
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bc90      	pop	{r4, r7}
 800a01e:	4770      	bx	lr
 800a020:	200002a4 	.word	0x200002a4
 800a024:	20000ae0 	.word	0x20000ae0
 800a028:	20000188 	.word	0x20000188

0800a02c <turn_dir>:
//turn_dir
//aマウスの方向を変更する
//a引数1：t_pat …… 回転方向(drive.hでマクロ定義)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat){
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	4603      	mov	r3, r0
 800a034:	71fb      	strb	r3, [r7, #7]

	//====a方向を変更====
	mouse.dir = (mouse.dir + t_pat) & 0x03;					//a指定された分mouse.dirを回転させる
 800a036:	4b08      	ldr	r3, [pc, #32]	; (800a058 <turn_dir+0x2c>)
 800a038:	789b      	ldrb	r3, [r3, #2]
 800a03a:	b2da      	uxtb	r2, r3
 800a03c:	79fb      	ldrb	r3, [r7, #7]
 800a03e:	4413      	add	r3, r2
 800a040:	b2db      	uxtb	r3, r3
 800a042:	f003 0303 	and.w	r3, r3, #3
 800a046:	b2da      	uxtb	r2, r3
 800a048:	4b03      	ldr	r3, [pc, #12]	; (800a058 <turn_dir+0x2c>)
 800a04a:	709a      	strb	r2, [r3, #2]
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	20000ae0 	.word	0x20000ae0

0800a05c <make_smap>:
//make_smap
//a歩数マップを作成する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 800a05c:	b490      	push	{r4, r7}
 800a05e:	b08c      	sub	sp, #48	; 0x30
 800a060:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数
	uint8_t m_temp_sample[16];

	//====a歩数マップのクリア====
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800a062:	2300      	movs	r3, #0
 800a064:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a068:	e01c      	b.n	800a0a4 <make_smap+0x48>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800a06a:	2300      	movs	r3, #0
 800a06c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a070:	e00f      	b.n	800a092 <make_smap+0x36>
			smap[y][x] = 0x03e7;							//a未記入部分は歩数最大とする
 800a072:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a07a:	499b      	ldr	r1, [pc, #620]	; (800a2e8 <make_smap+0x28c>)
 800a07c:	0112      	lsls	r2, r2, #4
 800a07e:	4413      	add	r3, r2
 800a080:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a084:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 800a088:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a08c:	3301      	adds	r3, #1
 800a08e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a092:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a096:	2b0f      	cmp	r3, #15
 800a098:	d9eb      	bls.n	800a072 <make_smap+0x16>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 800a09a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a09e:	3301      	adds	r3, #1
 800a0a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a0a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a0a8:	2b0f      	cmp	r3, #15
 800a0aa:	d9de      	bls.n	800a06a <make_smap+0xe>
		}
	}

	//====aゴール座標を0にする====
	m_step = 0;												//a歩数カウンタを0にする
 800a0ac:	4b8f      	ldr	r3, [pc, #572]	; (800a2ec <make_smap+0x290>)
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	801a      	strh	r2, [r3, #0]
	smap[goal_y][goal_x] = 0;
 800a0b2:	4b8f      	ldr	r3, [pc, #572]	; (800a2f0 <make_smap+0x294>)
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	4b8e      	ldr	r3, [pc, #568]	; (800a2f4 <make_smap+0x298>)
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	4619      	mov	r1, r3
 800a0be:	4a8a      	ldr	r2, [pc, #552]	; (800a2e8 <make_smap+0x28c>)
 800a0c0:	0103      	lsls	r3, r0, #4
 800a0c2:	440b      	add	r3, r1
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====a歩数カウンタの重みづけ====
	int straight = 3;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	61bb      	str	r3, [r7, #24]
	int turn = 5;
 800a0ce:	2305      	movs	r3, #5
 800a0d0:	617b      	str	r3, [r7, #20]

	//====a自分の座標にたどり着くまでループ====
	do{
		//----aマップ全域を捜索----
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a0d8:	e2cb      	b.n	800a672 <make_smap+0x616>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a0e0:	e2bd      	b.n	800a65e <make_smap+0x602>
				//----a現在最大の歩数を発見したとき----
				if(smap[y][x] == m_step){					//a歩数カウンタm_stepの値が現在最大の歩数
 800a0e2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a0e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a0ea:	497f      	ldr	r1, [pc, #508]	; (800a2e8 <make_smap+0x28c>)
 800a0ec:	0112      	lsls	r2, r2, #4
 800a0ee:	4413      	add	r3, r2
 800a0f0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800a0f4:	4b7d      	ldr	r3, [pc, #500]	; (800a2ec <make_smap+0x290>)
 800a0f6:	881b      	ldrh	r3, [r3, #0]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	f040 82ab 	bne.w	800a654 <make_smap+0x5f8>
					uint8_t m_temp = map[y][x];				//map配列からマップデータを取り出す
 800a0fe:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a106:	497c      	ldr	r1, [pc, #496]	; (800a2f8 <make_smap+0x29c>)
 800a108:	0112      	lsls	r2, r2, #4
 800a10a:	440a      	add	r2, r1
 800a10c:	4413      	add	r3, r2
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(MF.FLAG.SCND){						//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800a114:	4b79      	ldr	r3, [pc, #484]	; (800a2fc <make_smap+0x2a0>)
 800a116:	881b      	ldrh	r3, [r3, #0]
 800a118:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d004      	beq.n	800a12c <make_smap+0xd0>
						m_temp >>= 4;						//a上位4bitを使うので4bit分右にシフトさせる
 800a122:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a126:	091b      	lsrs	r3, r3, #4
 800a128:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					}
					//----a北壁についての処理----
					if(!(m_temp & 0x08) && y != 15){		//a北壁がなく現在最北端でないとき
 800a12c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a130:	f003 0308 	and.w	r3, r3, #8
 800a134:	2b00      	cmp	r3, #0
 800a136:	f040 809c 	bne.w	800a272 <make_smap+0x216>
 800a13a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a13e:	2b0f      	cmp	r3, #15
 800a140:	f000 8097 	beq.w	800a272 <make_smap+0x216>
						if(smap[y+1][x] == 0x03e7){			//a北側が未記入なら
 800a144:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a148:	1c5a      	adds	r2, r3, #1
 800a14a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a14e:	4966      	ldr	r1, [pc, #408]	; (800a2e8 <make_smap+0x28c>)
 800a150:	0112      	lsls	r2, r2, #4
 800a152:	4413      	add	r3, r2
 800a154:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a158:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a15c:	4293      	cmp	r3, r2
 800a15e:	f040 8088 	bne.w	800a272 <make_smap+0x216>
							smap[y+1][x] = smap[y][x] + turn;		//a次の歩数を書き込む
 800a162:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a16a:	495f      	ldr	r1, [pc, #380]	; (800a2e8 <make_smap+0x28c>)
 800a16c:	0112      	lsls	r2, r2, #4
 800a16e:	4413      	add	r3, r2
 800a170:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	b299      	uxth	r1, r3
 800a178:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a17c:	1c5a      	adds	r2, r3, #1
 800a17e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a182:	4401      	add	r1, r0
 800a184:	b288      	uxth	r0, r1
 800a186:	4958      	ldr	r1, [pc, #352]	; (800a2e8 <make_smap+0x28c>)
 800a188:	0112      	lsls	r2, r2, #4
 800a18a:	4413      	add	r3, r2
 800a18c:	4602      	mov	r2, r0
 800a18e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800a192:	4b5a      	ldr	r3, [pc, #360]	; (800a2fc <make_smap+0x2a0>)
 800a194:	881b      	ldrh	r3, [r3, #0]
 800a196:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d068      	beq.n	800a272 <make_smap+0x216>
								//----a直線優先処理----
								for (int k = 1; k < 16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1a4:	e05e      	b.n	800a264 <make_smap+0x208>
									m_temp_sample[k] = map[y + k][x];				//map配列からマップデータを取り出す
 800a1a6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ac:	441a      	add	r2, r3
 800a1ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1b2:	4951      	ldr	r1, [pc, #324]	; (800a2f8 <make_smap+0x29c>)
 800a1b4:	0112      	lsls	r2, r2, #4
 800a1b6:	440a      	add	r2, r1
 800a1b8:	4413      	add	r3, r2
 800a1ba:	7819      	ldrb	r1, [r3, #0]
 800a1bc:	1d3a      	adds	r2, r7, #4
 800a1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c0:	4413      	add	r3, r2
 800a1c2:	460a      	mov	r2, r1
 800a1c4:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800a1c6:	4b4d      	ldr	r3, [pc, #308]	; (800a2fc <make_smap+0x2a0>)
 800a1c8:	881b      	ldrh	r3, [r3, #0]
 800a1ca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00a      	beq.n	800a1ea <make_smap+0x18e>
 800a1d4:	1d3a      	adds	r2, r7, #4
 800a1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d8:	4413      	add	r3, r2
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	091b      	lsrs	r3, r3, #4
 800a1de:	b2d9      	uxtb	r1, r3
 800a1e0:	1d3a      	adds	r2, r7, #4
 800a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e4:	4413      	add	r3, r2
 800a1e6:	460a      	mov	r2, r1
 800a1e8:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x08) && (y + k) != 0x0f) {		//a北壁がなく現在最北端でないとき
 800a1ea:	1d3a      	adds	r2, r7, #4
 800a1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ee:	4413      	add	r3, r2
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	f003 0308 	and.w	r3, r3, #8
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d13b      	bne.n	800a272 <make_smap+0x216>
 800a1fa:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a200:	4413      	add	r3, r2
 800a202:	2b0f      	cmp	r3, #15
 800a204:	d035      	beq.n	800a272 <make_smap+0x216>
										if (smap[y + k + 1][x] == 0x03e7) {						//a北側が未記入なら
 800a206:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20c:	4413      	add	r3, r2
 800a20e:	1c5a      	adds	r2, r3, #1
 800a210:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a214:	4934      	ldr	r1, [pc, #208]	; (800a2e8 <make_smap+0x28c>)
 800a216:	0112      	lsls	r2, r2, #4
 800a218:	4413      	add	r3, r2
 800a21a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a21e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a222:	4293      	cmp	r3, r2
 800a224:	d11b      	bne.n	800a25e <make_smap+0x202>
											smap[y + k + 1][x] = smap[y + k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800a226:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22c:	441a      	add	r2, r3
 800a22e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a232:	492d      	ldr	r1, [pc, #180]	; (800a2e8 <make_smap+0x28c>)
 800a234:	0112      	lsls	r2, r2, #4
 800a236:	4413      	add	r3, r2
 800a238:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	b299      	uxth	r1, r3
 800a240:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a246:	4413      	add	r3, r2
 800a248:	1c5a      	adds	r2, r3, #1
 800a24a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a24e:	4401      	add	r1, r0
 800a250:	b288      	uxth	r0, r1
 800a252:	4925      	ldr	r1, [pc, #148]	; (800a2e8 <make_smap+0x28c>)
 800a254:	0112      	lsls	r2, r2, #4
 800a256:	4413      	add	r3, r2
 800a258:	4602      	mov	r2, r0
 800a25a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < 16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 800a25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a260:	3301      	adds	r3, #1
 800a262:	62bb      	str	r3, [r7, #40]	; 0x28
 800a264:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a268:	f1c3 0310 	rsb	r3, r3, #16
 800a26c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a26e:	429a      	cmp	r2, r3
 800a270:	db99      	blt.n	800a1a6 <make_smap+0x14a>
								}
							}
						}
					}
					//----a東壁についての処理----
					if(!(m_temp & 0x04) && x != 15){		//a東壁がなく現在最東端でないとき
 800a272:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a276:	f003 0304 	and.w	r3, r3, #4
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f040 80a6 	bne.w	800a3cc <make_smap+0x370>
 800a280:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a284:	2b0f      	cmp	r3, #15
 800a286:	f000 80a1 	beq.w	800a3cc <make_smap+0x370>
						if(smap[y][x+1] == 0x03e7){			//a東側が未記入なら
 800a28a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a28e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a292:	3301      	adds	r3, #1
 800a294:	4914      	ldr	r1, [pc, #80]	; (800a2e8 <make_smap+0x28c>)
 800a296:	0112      	lsls	r2, r2, #4
 800a298:	4413      	add	r3, r2
 800a29a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a29e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	f040 8092 	bne.w	800a3cc <make_smap+0x370>
							smap[y][x+1] = smap[y][x] + 1;	//a次の歩数を書き込む
 800a2a8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a2ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2b0:	490d      	ldr	r1, [pc, #52]	; (800a2e8 <make_smap+0x28c>)
 800a2b2:	0112      	lsls	r2, r2, #4
 800a2b4:	4413      	add	r3, r2
 800a2b6:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800a2ba:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a2be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	3101      	adds	r1, #1
 800a2c6:	b288      	uxth	r0, r1
 800a2c8:	4907      	ldr	r1, [pc, #28]	; (800a2e8 <make_smap+0x28c>)
 800a2ca:	0112      	lsls	r2, r2, #4
 800a2cc:	4413      	add	r3, r2
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800a2d4:	4b09      	ldr	r3, [pc, #36]	; (800a2fc <make_smap+0x2a0>)
 800a2d6:	881b      	ldrh	r3, [r3, #0]
 800a2d8:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d074      	beq.n	800a3cc <make_smap+0x370>
								//----a直線優先処理----
								for (int k = 1; k < 16 - x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2e6:	e06a      	b.n	800a3be <make_smap+0x362>
 800a2e8:	20000c34 	.word	0x20000c34
 800a2ec:	2000032a 	.word	0x2000032a
 800a2f0:	20000a24 	.word	0x20000a24
 800a2f4:	20000a85 	.word	0x20000a85
 800a2f8:	20000188 	.word	0x20000188
 800a2fc:	20000e38 	.word	0x20000e38
									m_temp_sample[k] = map[y][x + k];				//map配列からマップデータを取り出す
 800a300:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a304:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30a:	440b      	add	r3, r1
 800a30c:	499c      	ldr	r1, [pc, #624]	; (800a580 <make_smap+0x524>)
 800a30e:	0112      	lsls	r2, r2, #4
 800a310:	440a      	add	r2, r1
 800a312:	4413      	add	r3, r2
 800a314:	7819      	ldrb	r1, [r3, #0]
 800a316:	1d3a      	adds	r2, r7, #4
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	4413      	add	r3, r2
 800a31c:	460a      	mov	r2, r1
 800a31e:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800a320:	4b98      	ldr	r3, [pc, #608]	; (800a584 <make_smap+0x528>)
 800a322:	881b      	ldrh	r3, [r3, #0]
 800a324:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00a      	beq.n	800a344 <make_smap+0x2e8>
 800a32e:	1d3a      	adds	r2, r7, #4
 800a330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a332:	4413      	add	r3, r2
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	091b      	lsrs	r3, r3, #4
 800a338:	b2d9      	uxtb	r1, r3
 800a33a:	1d3a      	adds	r2, r7, #4
 800a33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33e:	4413      	add	r3, r2
 800a340:	460a      	mov	r2, r1
 800a342:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x04) && (x + k) != 0x0f) {		//a東壁がなく現在最東端でないとき
 800a344:	1d3a      	adds	r2, r7, #4
 800a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a348:	4413      	add	r3, r2
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	f003 0304 	and.w	r3, r3, #4
 800a350:	2b00      	cmp	r3, #0
 800a352:	d13b      	bne.n	800a3cc <make_smap+0x370>
 800a354:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35a:	4413      	add	r3, r2
 800a35c:	2b0f      	cmp	r3, #15
 800a35e:	d035      	beq.n	800a3cc <make_smap+0x370>
										if (smap[y][x + k + 1] == 0x03e7) {						//a東側が未記入なら
 800a360:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a364:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800a368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36a:	440b      	add	r3, r1
 800a36c:	3301      	adds	r3, #1
 800a36e:	4986      	ldr	r1, [pc, #536]	; (800a588 <make_smap+0x52c>)
 800a370:	0112      	lsls	r2, r2, #4
 800a372:	4413      	add	r3, r2
 800a374:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a378:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d11b      	bne.n	800a3b8 <make_smap+0x35c>
											smap[y][x + k + 1] = smap[y][x + k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800a380:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a384:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800a388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38a:	440b      	add	r3, r1
 800a38c:	497e      	ldr	r1, [pc, #504]	; (800a588 <make_smap+0x52c>)
 800a38e:	0112      	lsls	r2, r2, #4
 800a390:	4413      	add	r3, r2
 800a392:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	b299      	uxth	r1, r3
 800a39a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a39e:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a4:	4423      	add	r3, r4
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	4401      	add	r1, r0
 800a3aa:	b288      	uxth	r0, r1
 800a3ac:	4976      	ldr	r1, [pc, #472]	; (800a588 <make_smap+0x52c>)
 800a3ae:	0112      	lsls	r2, r2, #4
 800a3b0:	4413      	add	r3, r2
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < 16 - x; k++) {					//a現在座標から見て東のマスすべてにおいて
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	627b      	str	r3, [r7, #36]	; 0x24
 800a3be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3c2:	f1c3 0310 	rsb	r3, r3, #16
 800a3c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	db99      	blt.n	800a300 <make_smap+0x2a4>
								}
							}
						}
					}
					//----a南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//a南壁がなく現在最南端でないとき
 800a3cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a3d0:	f003 0302 	and.w	r3, r3, #2
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f040 8098 	bne.w	800a50a <make_smap+0x4ae>
 800a3da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f000 8093 	beq.w	800a50a <make_smap+0x4ae>
						if(smap[y-1][x] == 0x03e7){			//a南側が未記入なら
 800a3e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a3e8:	1e5a      	subs	r2, r3, #1
 800a3ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3ee:	4966      	ldr	r1, [pc, #408]	; (800a588 <make_smap+0x52c>)
 800a3f0:	0112      	lsls	r2, r2, #4
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a3f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	f040 8084 	bne.w	800a50a <make_smap+0x4ae>
							smap[y-1][x] = smap[y][x] + 1;	//a次の歩数を書き込む
 800a402:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a40a:	495f      	ldr	r1, [pc, #380]	; (800a588 <make_smap+0x52c>)
 800a40c:	0112      	lsls	r2, r2, #4
 800a40e:	4413      	add	r3, r2
 800a410:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800a414:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a418:	1e5a      	subs	r2, r3, #1
 800a41a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a41e:	3101      	adds	r1, #1
 800a420:	b288      	uxth	r0, r1
 800a422:	4959      	ldr	r1, [pc, #356]	; (800a588 <make_smap+0x52c>)
 800a424:	0112      	lsls	r2, r2, #4
 800a426:	4413      	add	r3, r2
 800a428:	4602      	mov	r2, r0
 800a42a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800a42e:	4b55      	ldr	r3, [pc, #340]	; (800a584 <make_smap+0x528>)
 800a430:	881b      	ldrh	r3, [r3, #0]
 800a432:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800a436:	b2db      	uxtb	r3, r3
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d066      	beq.n	800a50a <make_smap+0x4ae>
								//----a直線優先処理----
								for (int k = 1; k < y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800a43c:	2301      	movs	r3, #1
 800a43e:	623b      	str	r3, [r7, #32]
 800a440:	e05e      	b.n	800a500 <make_smap+0x4a4>
									m_temp_sample[k] = map[y - k][x];				//map配列からマップデータを取り出す
 800a442:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	1ad2      	subs	r2, r2, r3
 800a44a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a44e:	494c      	ldr	r1, [pc, #304]	; (800a580 <make_smap+0x524>)
 800a450:	0112      	lsls	r2, r2, #4
 800a452:	440a      	add	r2, r1
 800a454:	4413      	add	r3, r2
 800a456:	7819      	ldrb	r1, [r3, #0]
 800a458:	1d3a      	adds	r2, r7, #4
 800a45a:	6a3b      	ldr	r3, [r7, #32]
 800a45c:	4413      	add	r3, r2
 800a45e:	460a      	mov	r2, r1
 800a460:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800a462:	4b48      	ldr	r3, [pc, #288]	; (800a584 <make_smap+0x528>)
 800a464:	881b      	ldrh	r3, [r3, #0]
 800a466:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00a      	beq.n	800a486 <make_smap+0x42a>
 800a470:	1d3a      	adds	r2, r7, #4
 800a472:	6a3b      	ldr	r3, [r7, #32]
 800a474:	4413      	add	r3, r2
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	091b      	lsrs	r3, r3, #4
 800a47a:	b2d9      	uxtb	r1, r3
 800a47c:	1d3a      	adds	r2, r7, #4
 800a47e:	6a3b      	ldr	r3, [r7, #32]
 800a480:	4413      	add	r3, r2
 800a482:	460a      	mov	r2, r1
 800a484:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x02) && (y - k) != 0x0f) {		//a南壁がなく現在最南端でないとき
 800a486:	1d3a      	adds	r2, r7, #4
 800a488:	6a3b      	ldr	r3, [r7, #32]
 800a48a:	4413      	add	r3, r2
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	f003 0302 	and.w	r3, r3, #2
 800a492:	2b00      	cmp	r3, #0
 800a494:	d139      	bne.n	800a50a <make_smap+0x4ae>
 800a496:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a49a:	6a3b      	ldr	r3, [r7, #32]
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	2b0f      	cmp	r3, #15
 800a4a0:	d033      	beq.n	800a50a <make_smap+0x4ae>
										if (smap[y - k - 1][x] == 0x03e7) {						//a南側が未記入なら
 800a4a2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a4a6:	6a3b      	ldr	r3, [r7, #32]
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	1e5a      	subs	r2, r3, #1
 800a4ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a4b0:	4935      	ldr	r1, [pc, #212]	; (800a588 <make_smap+0x52c>)
 800a4b2:	0112      	lsls	r2, r2, #4
 800a4b4:	4413      	add	r3, r2
 800a4b6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a4ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d11b      	bne.n	800a4fa <make_smap+0x49e>
											smap[y - k - 1][x] = smap[y - k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800a4c2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a4c6:	6a3b      	ldr	r3, [r7, #32]
 800a4c8:	1ad2      	subs	r2, r2, r3
 800a4ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a4ce:	492e      	ldr	r1, [pc, #184]	; (800a588 <make_smap+0x52c>)
 800a4d0:	0112      	lsls	r2, r2, #4
 800a4d2:	4413      	add	r3, r2
 800a4d4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	b299      	uxth	r1, r3
 800a4dc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a4e0:	6a3b      	ldr	r3, [r7, #32]
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	1e5a      	subs	r2, r3, #1
 800a4e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a4ea:	4401      	add	r1, r0
 800a4ec:	b288      	uxth	r0, r1
 800a4ee:	4926      	ldr	r1, [pc, #152]	; (800a588 <make_smap+0x52c>)
 800a4f0:	0112      	lsls	r2, r2, #4
 800a4f2:	4413      	add	r3, r2
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < y; k++) {						//a現在座標から見て南のマスすべてにおいて
 800a4fa:	6a3b      	ldr	r3, [r7, #32]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	623b      	str	r3, [r7, #32]
 800a500:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a504:	6a3a      	ldr	r2, [r7, #32]
 800a506:	429a      	cmp	r2, r3
 800a508:	db9b      	blt.n	800a442 <make_smap+0x3e6>
								}
							}
						}
					}
					//----a西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//a西壁がなく現在最西端でないとき
 800a50a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a50e:	f003 0301 	and.w	r3, r3, #1
 800a512:	2b00      	cmp	r3, #0
 800a514:	f040 809e 	bne.w	800a654 <make_smap+0x5f8>
 800a518:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 8099 	beq.w	800a654 <make_smap+0x5f8>
						if(smap[y][x-1] == 0x03e7){			//a西側が未記入なら
 800a522:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a526:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a52a:	3b01      	subs	r3, #1
 800a52c:	4916      	ldr	r1, [pc, #88]	; (800a588 <make_smap+0x52c>)
 800a52e:	0112      	lsls	r2, r2, #4
 800a530:	4413      	add	r3, r2
 800a532:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a536:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a53a:	4293      	cmp	r3, r2
 800a53c:	f040 808a 	bne.w	800a654 <make_smap+0x5f8>
							smap[y][x-1] = smap[y][x] + 1;	//a次の歩数を書き込む
 800a540:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a544:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a548:	490f      	ldr	r1, [pc, #60]	; (800a588 <make_smap+0x52c>)
 800a54a:	0112      	lsls	r2, r2, #4
 800a54c:	4413      	add	r3, r2
 800a54e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800a552:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a556:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a55a:	3b01      	subs	r3, #1
 800a55c:	3101      	adds	r1, #1
 800a55e:	b288      	uxth	r0, r1
 800a560:	4909      	ldr	r1, [pc, #36]	; (800a588 <make_smap+0x52c>)
 800a562:	0112      	lsls	r2, r2, #4
 800a564:	4413      	add	r3, r2
 800a566:	4602      	mov	r2, r0
 800a568:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 800a56c:	4b05      	ldr	r3, [pc, #20]	; (800a584 <make_smap+0x528>)
 800a56e:	881b      	ldrh	r3, [r3, #0]
 800a570:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800a574:	b2db      	uxtb	r3, r3
 800a576:	2b00      	cmp	r3, #0
 800a578:	d06c      	beq.n	800a654 <make_smap+0x5f8>
								//----a直線優先処理----
								for (int k = 1; k < x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800a57a:	2301      	movs	r3, #1
 800a57c:	61fb      	str	r3, [r7, #28]
 800a57e:	e064      	b.n	800a64a <make_smap+0x5ee>
 800a580:	20000188 	.word	0x20000188
 800a584:	20000e38 	.word	0x20000e38
 800a588:	20000c34 	.word	0x20000c34
									m_temp_sample[k] = map[y][x - k];				//map配列からマップデータを取り出す
 800a58c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a590:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	1acb      	subs	r3, r1, r3
 800a598:	4947      	ldr	r1, [pc, #284]	; (800a6b8 <make_smap+0x65c>)
 800a59a:	0112      	lsls	r2, r2, #4
 800a59c:	440a      	add	r2, r1
 800a59e:	4413      	add	r3, r2
 800a5a0:	7819      	ldrb	r1, [r3, #0]
 800a5a2:	1d3a      	adds	r2, r7, #4
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	460a      	mov	r2, r1
 800a5aa:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 800a5ac:	4b43      	ldr	r3, [pc, #268]	; (800a6bc <make_smap+0x660>)
 800a5ae:	881b      	ldrh	r3, [r3, #0]
 800a5b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00a      	beq.n	800a5d0 <make_smap+0x574>
 800a5ba:	1d3a      	adds	r2, r7, #4
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	4413      	add	r3, r2
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	091b      	lsrs	r3, r3, #4
 800a5c4:	b2d9      	uxtb	r1, r3
 800a5c6:	1d3a      	adds	r2, r7, #4
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	460a      	mov	r2, r1
 800a5ce:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x01) && (x - k) != 0x0f) {		//a西壁がなく現在最西端でないとき
 800a5d0:	1d3a      	adds	r2, r7, #4
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	f003 0301 	and.w	r3, r3, #1
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d139      	bne.n	800a654 <make_smap+0x5f8>
 800a5e0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	1ad3      	subs	r3, r2, r3
 800a5e8:	2b0f      	cmp	r3, #15
 800a5ea:	d033      	beq.n	800a654 <make_smap+0x5f8>
										if (smap[y][x - k - 1] == 0x03e7) {						//a西側が未記入なら
 800a5ec:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a5f0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	1acb      	subs	r3, r1, r3
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	4931      	ldr	r1, [pc, #196]	; (800a6c0 <make_smap+0x664>)
 800a5fc:	0112      	lsls	r2, r2, #4
 800a5fe:	4413      	add	r3, r2
 800a600:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a604:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a608:	4293      	cmp	r3, r2
 800a60a:	d11b      	bne.n	800a644 <make_smap+0x5e8>
											smap[y][x - k - 1] = smap[y][x - k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 800a60c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a610:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	1acb      	subs	r3, r1, r3
 800a618:	4929      	ldr	r1, [pc, #164]	; (800a6c0 <make_smap+0x664>)
 800a61a:	0112      	lsls	r2, r2, #4
 800a61c:	4413      	add	r3, r2
 800a61e:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	b299      	uxth	r1, r3
 800a626:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a62a:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	1ae3      	subs	r3, r4, r3
 800a632:	3b01      	subs	r3, #1
 800a634:	4401      	add	r1, r0
 800a636:	b288      	uxth	r0, r1
 800a638:	4921      	ldr	r1, [pc, #132]	; (800a6c0 <make_smap+0x664>)
 800a63a:	0112      	lsls	r2, r2, #4
 800a63c:	4413      	add	r3, r2
 800a63e:	4602      	mov	r2, r0
 800a640:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < x; k++) {						//a現在座標から見て西のマスすべてにおいて
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	3301      	adds	r3, #1
 800a648:	61fb      	str	r3, [r7, #28]
 800a64a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a64e:	69fa      	ldr	r2, [r7, #28]
 800a650:	429a      	cmp	r2, r3
 800a652:	db9b      	blt.n	800a58c <make_smap+0x530>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 800a654:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a658:	3301      	adds	r3, #1
 800a65a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a65e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a662:	2b0f      	cmp	r3, #15
 800a664:	f67f ad3d 	bls.w	800a0e2 <make_smap+0x86>
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 800a668:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a66c:	3301      	adds	r3, #1
 800a66e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a672:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a676:	2b0f      	cmp	r3, #15
 800a678:	f67f ad2f 	bls.w	800a0da <make_smap+0x7e>
					}
				}
			}
		}
		//====a歩数カウンタのインクリメント====
		m_step++;
 800a67c:	4b11      	ldr	r3, [pc, #68]	; (800a6c4 <make_smap+0x668>)
 800a67e:	881b      	ldrh	r3, [r3, #0]
 800a680:	3301      	adds	r3, #1
 800a682:	b29a      	uxth	r2, r3
 800a684:	4b0f      	ldr	r3, [pc, #60]	; (800a6c4 <make_smap+0x668>)
 800a686:	801a      	strh	r2, [r3, #0]
	}while(smap[mouse.y][mouse.x] == 0x03e7);					//a現在座標が未記入ではなくなるまで実行
 800a688:	4b0f      	ldr	r3, [pc, #60]	; (800a6c8 <make_smap+0x66c>)
 800a68a:	785b      	ldrb	r3, [r3, #1]
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	4618      	mov	r0, r3
 800a690:	4b0d      	ldr	r3, [pc, #52]	; (800a6c8 <make_smap+0x66c>)
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	b2db      	uxtb	r3, r3
 800a696:	4619      	mov	r1, r3
 800a698:	4a09      	ldr	r2, [pc, #36]	; (800a6c0 <make_smap+0x664>)
 800a69a:	0103      	lsls	r3, r0, #4
 800a69c:	440b      	add	r3, r1
 800a69e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	f43f ad13 	beq.w	800a0d2 <make_smap+0x76>
}
 800a6ac:	bf00      	nop
 800a6ae:	3730      	adds	r7, #48	; 0x30
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bc90      	pop	{r4, r7}
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	20000188 	.word	0x20000188
 800a6bc:	20000e38 	.word	0x20000e38
 800a6c0:	20000c34 	.word	0x20000c34
 800a6c4:	2000032a 	.word	0x2000032a
 800a6c8:	20000ae0 	.word	0x20000ae0

0800a6cc <make_route>:
//make_route
//a最短経路を導出する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t x, y;												//X，Y座標
	uint8_t dir_temp =  mouse.dir;								//aマウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 800a6d2:	4b90      	ldr	r3, [pc, #576]	; (800a914 <make_route+0x248>)
 800a6d4:	789b      	ldrb	r3, [r3, #2]
 800a6d6:	703b      	strb	r3, [r7, #0]

	//====a最短経路を初期化====
	uint16_t i;
	for(i = 0; i < 256; i++){
 800a6d8:	2300      	movs	r3, #0
 800a6da:	80bb      	strh	r3, [r7, #4]
 800a6dc:	e006      	b.n	800a6ec <make_route+0x20>
		route[i] = 0xff;										//routeを0xffで初期化
 800a6de:	88bb      	ldrh	r3, [r7, #4]
 800a6e0:	4a8d      	ldr	r2, [pc, #564]	; (800a918 <make_route+0x24c>)
 800a6e2:	21ff      	movs	r1, #255	; 0xff
 800a6e4:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 256; i++){
 800a6e6:	88bb      	ldrh	r3, [r7, #4]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	80bb      	strh	r3, [r7, #4]
 800a6ec:	88bb      	ldrh	r3, [r7, #4]
 800a6ee:	2bff      	cmp	r3, #255	; 0xff
 800a6f0:	d9f5      	bls.n	800a6de <make_route+0x12>
	}

	//====a歩数カウンタをセット====
	uint16_t m_step = smap[mouse.y][mouse.x];					//a現在座標の歩数マップ値を取得
 800a6f2:	4b88      	ldr	r3, [pc, #544]	; (800a914 <make_route+0x248>)
 800a6f4:	785b      	ldrb	r3, [r3, #1]
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	4b86      	ldr	r3, [pc, #536]	; (800a914 <make_route+0x248>)
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	4619      	mov	r1, r3
 800a702:	4a86      	ldr	r2, [pc, #536]	; (800a91c <make_route+0x250>)
 800a704:	0103      	lsls	r3, r0, #4
 800a706:	440b      	add	r3, r1
 800a708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a70c:	807b      	strh	r3, [r7, #2]

	//====x, yに現在座標を書き込み====
	x = mouse.x;
 800a70e:	4b81      	ldr	r3, [pc, #516]	; (800a914 <make_route+0x248>)
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	71fb      	strb	r3, [r7, #7]
	y = mouse.y;
 800a714:	4b7f      	ldr	r3, [pc, #508]	; (800a914 <make_route+0x248>)
 800a716:	785b      	ldrb	r3, [r3, #1]
 800a718:	71bb      	strb	r3, [r7, #6]

	//====a最短経路を導出====
	i = 0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	80bb      	strh	r3, [r7, #4]
	do{
		uint8_t m_temp = map[y][x];								//a比較用マップ情報の格納
 800a71e:	79ba      	ldrb	r2, [r7, #6]
 800a720:	79fb      	ldrb	r3, [r7, #7]
 800a722:	497f      	ldr	r1, [pc, #508]	; (800a920 <make_route+0x254>)
 800a724:	0112      	lsls	r2, r2, #4
 800a726:	440a      	add	r2, r1
 800a728:	4413      	add	r3, r2
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	707b      	strb	r3, [r7, #1]
		if(MF.FLAG.SCND){										//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800a72e:	4b7d      	ldr	r3, [pc, #500]	; (800a924 <make_route+0x258>)
 800a730:	881b      	ldrh	r3, [r3, #0]
 800a732:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a736:	b2db      	uxtb	r3, r3
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d002      	beq.n	800a742 <make_route+0x76>
			m_temp >>= 4;										//a上位4bitを使うので4bit分右にシフトさせる
 800a73c:	787b      	ldrb	r3, [r7, #1]
 800a73e:	091b      	lsrs	r3, r3, #4
 800a740:	707b      	strb	r3, [r7, #1]
		}
		//----a北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//a北側に壁が無く、現在地より小さい歩数マップ値であれば
 800a742:	787b      	ldrb	r3, [r7, #1]
 800a744:	f003 0308 	and.w	r3, r3, #8
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d122      	bne.n	800a792 <make_route+0xc6>
 800a74c:	79bb      	ldrb	r3, [r7, #6]
 800a74e:	1c5a      	adds	r2, r3, #1
 800a750:	79fb      	ldrb	r3, [r7, #7]
 800a752:	4972      	ldr	r1, [pc, #456]	; (800a91c <make_route+0x250>)
 800a754:	0112      	lsls	r2, r2, #4
 800a756:	4413      	add	r3, r2
 800a758:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a75c:	887a      	ldrh	r2, [r7, #2]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d917      	bls.n	800a792 <make_route+0xc6>
			route[i] = (0x00 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800a762:	4b6c      	ldr	r3, [pc, #432]	; (800a914 <make_route+0x248>)
 800a764:	789b      	ldrb	r3, [r3, #2]
 800a766:	b2db      	uxtb	r3, r3
 800a768:	425b      	negs	r3, r3
 800a76a:	b2da      	uxtb	r2, r3
 800a76c:	88bb      	ldrh	r3, [r7, #4]
 800a76e:	f002 0203 	and.w	r2, r2, #3
 800a772:	b2d1      	uxtb	r1, r2
 800a774:	4a68      	ldr	r2, [pc, #416]	; (800a918 <make_route+0x24c>)
 800a776:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//a最大歩数マップ値を更新
 800a778:	79bb      	ldrb	r3, [r7, #6]
 800a77a:	1c5a      	adds	r2, r3, #1
 800a77c:	79fb      	ldrb	r3, [r7, #7]
 800a77e:	4967      	ldr	r1, [pc, #412]	; (800a91c <make_route+0x250>)
 800a780:	0112      	lsls	r2, r2, #4
 800a782:	4413      	add	r3, r2
 800a784:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a788:	807b      	strh	r3, [r7, #2]
			y++;												//a北に進んだのでY座標をインクリメント
 800a78a:	79bb      	ldrb	r3, [r7, #6]
 800a78c:	3301      	adds	r3, #1
 800a78e:	71bb      	strb	r3, [r7, #6]
 800a790:	e079      	b.n	800a886 <make_route+0x1ba>
		}
		//----a東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//a東側に壁が無く、現在地より小さい歩数マップ値であれば
 800a792:	787b      	ldrb	r3, [r7, #1]
 800a794:	f003 0304 	and.w	r3, r3, #4
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d123      	bne.n	800a7e4 <make_route+0x118>
 800a79c:	79ba      	ldrb	r2, [r7, #6]
 800a79e:	79fb      	ldrb	r3, [r7, #7]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	495e      	ldr	r1, [pc, #376]	; (800a91c <make_route+0x250>)
 800a7a4:	0112      	lsls	r2, r2, #4
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a7ac:	887a      	ldrh	r2, [r7, #2]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d918      	bls.n	800a7e4 <make_route+0x118>
			route[i] = (0x01 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800a7b2:	4b58      	ldr	r3, [pc, #352]	; (800a914 <make_route+0x248>)
 800a7b4:	789b      	ldrb	r3, [r3, #2]
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	f1c3 0301 	rsb	r3, r3, #1
 800a7bc:	b2da      	uxtb	r2, r3
 800a7be:	88bb      	ldrh	r3, [r7, #4]
 800a7c0:	f002 0203 	and.w	r2, r2, #3
 800a7c4:	b2d1      	uxtb	r1, r2
 800a7c6:	4a54      	ldr	r2, [pc, #336]	; (800a918 <make_route+0x24c>)
 800a7c8:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//a最大歩数マップ値を更新
 800a7ca:	79ba      	ldrb	r2, [r7, #6]
 800a7cc:	79fb      	ldrb	r3, [r7, #7]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	4952      	ldr	r1, [pc, #328]	; (800a91c <make_route+0x250>)
 800a7d2:	0112      	lsls	r2, r2, #4
 800a7d4:	4413      	add	r3, r2
 800a7d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a7da:	807b      	strh	r3, [r7, #2]
			x++;												//a東に進んだのでX座標をインクリメント
 800a7dc:	79fb      	ldrb	r3, [r7, #7]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	71fb      	strb	r3, [r7, #7]
 800a7e2:	e050      	b.n	800a886 <make_route+0x1ba>
		}
		//----a南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//a南側に壁が無く、現在地より小さい歩数マップ値であれば
 800a7e4:	787b      	ldrb	r3, [r7, #1]
 800a7e6:	f003 0302 	and.w	r3, r3, #2
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d123      	bne.n	800a836 <make_route+0x16a>
 800a7ee:	79bb      	ldrb	r3, [r7, #6]
 800a7f0:	1e5a      	subs	r2, r3, #1
 800a7f2:	79fb      	ldrb	r3, [r7, #7]
 800a7f4:	4949      	ldr	r1, [pc, #292]	; (800a91c <make_route+0x250>)
 800a7f6:	0112      	lsls	r2, r2, #4
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a7fe:	887a      	ldrh	r2, [r7, #2]
 800a800:	429a      	cmp	r2, r3
 800a802:	d918      	bls.n	800a836 <make_route+0x16a>
			route[i] = (0x02 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800a804:	4b43      	ldr	r3, [pc, #268]	; (800a914 <make_route+0x248>)
 800a806:	789b      	ldrb	r3, [r3, #2]
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	f1c3 0302 	rsb	r3, r3, #2
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	88bb      	ldrh	r3, [r7, #4]
 800a812:	f002 0203 	and.w	r2, r2, #3
 800a816:	b2d1      	uxtb	r1, r2
 800a818:	4a3f      	ldr	r2, [pc, #252]	; (800a918 <make_route+0x24c>)
 800a81a:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//a最大歩数マップ値を更新
 800a81c:	79bb      	ldrb	r3, [r7, #6]
 800a81e:	1e5a      	subs	r2, r3, #1
 800a820:	79fb      	ldrb	r3, [r7, #7]
 800a822:	493e      	ldr	r1, [pc, #248]	; (800a91c <make_route+0x250>)
 800a824:	0112      	lsls	r2, r2, #4
 800a826:	4413      	add	r3, r2
 800a828:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a82c:	807b      	strh	r3, [r7, #2]
			y--;												//a南に進んだのでY座標をデクリメント
 800a82e:	79bb      	ldrb	r3, [r7, #6]
 800a830:	3b01      	subs	r3, #1
 800a832:	71bb      	strb	r3, [r7, #6]
 800a834:	e027      	b.n	800a886 <make_route+0x1ba>
		}
		//----a西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//a西側に壁が無く、現在地より小さい歩数マップ値であれば
 800a836:	787b      	ldrb	r3, [r7, #1]
 800a838:	f003 0301 	and.w	r3, r3, #1
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d122      	bne.n	800a886 <make_route+0x1ba>
 800a840:	79ba      	ldrb	r2, [r7, #6]
 800a842:	79fb      	ldrb	r3, [r7, #7]
 800a844:	3b01      	subs	r3, #1
 800a846:	4935      	ldr	r1, [pc, #212]	; (800a91c <make_route+0x250>)
 800a848:	0112      	lsls	r2, r2, #4
 800a84a:	4413      	add	r3, r2
 800a84c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a850:	887a      	ldrh	r2, [r7, #2]
 800a852:	429a      	cmp	r2, r3
 800a854:	d917      	bls.n	800a886 <make_route+0x1ba>
			route[i] = (0x03 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 800a856:	4b2f      	ldr	r3, [pc, #188]	; (800a914 <make_route+0x248>)
 800a858:	789b      	ldrb	r3, [r3, #2]
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	f1c3 0303 	rsb	r3, r3, #3
 800a860:	b2da      	uxtb	r2, r3
 800a862:	88bb      	ldrh	r3, [r7, #4]
 800a864:	f002 0203 	and.w	r2, r2, #3
 800a868:	b2d1      	uxtb	r1, r2
 800a86a:	4a2b      	ldr	r2, [pc, #172]	; (800a918 <make_route+0x24c>)
 800a86c:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//a最大歩数マップ値を更新
 800a86e:	79ba      	ldrb	r2, [r7, #6]
 800a870:	79fb      	ldrb	r3, [r7, #7]
 800a872:	3b01      	subs	r3, #1
 800a874:	4929      	ldr	r1, [pc, #164]	; (800a91c <make_route+0x250>)
 800a876:	0112      	lsls	r2, r2, #4
 800a878:	4413      	add	r3, r2
 800a87a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a87e:	807b      	strh	r3, [r7, #2]
			x--;												//a西に進んだのでX座標をデクリメント
 800a880:	79fb      	ldrb	r3, [r7, #7]
 800a882:	3b01      	subs	r3, #1
 800a884:	71fb      	strb	r3, [r7, #7]
				y--;												//a南に進んだのでY座標をデクリメント
			}*/

		}
		//----a格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 800a886:	88bb      	ldrh	r3, [r7, #4]
 800a888:	4a23      	ldr	r2, [pc, #140]	; (800a918 <make_route+0x24c>)
 800a88a:	5cd3      	ldrb	r3, [r2, r3]
 800a88c:	2b03      	cmp	r3, #3
 800a88e:	d828      	bhi.n	800a8e2 <make_route+0x216>
 800a890:	a201      	add	r2, pc, #4	; (adr r2, 800a898 <make_route+0x1cc>)
 800a892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a896:	bf00      	nop
 800a898:	0800a8a9 	.word	0x0800a8a9
 800a89c:	0800a8b3 	.word	0x0800a8b3
 800a8a0:	0800a8c3 	.word	0x0800a8c3
 800a8a4:	0800a8d3 	.word	0x0800a8d3
		case 0x00:												//a前進する場合
			route[i] = 0x88;									//a格納データ形式を変更
 800a8a8:	88bb      	ldrh	r3, [r7, #4]
 800a8aa:	4a1b      	ldr	r2, [pc, #108]	; (800a918 <make_route+0x24c>)
 800a8ac:	2188      	movs	r1, #136	; 0x88
 800a8ae:	54d1      	strb	r1, [r2, r3]
			break;
 800a8b0:	e01c      	b.n	800a8ec <make_route+0x220>
		case 0x01:												//a右折する場合
			turn_dir(DIR_TURN_R90);								//a内部情報の方向を90度右回転
 800a8b2:	2001      	movs	r0, #1
 800a8b4:	f7ff fbba 	bl	800a02c <turn_dir>
			route[i] = 0x44;									//a格納データ形式を変更
 800a8b8:	88bb      	ldrh	r3, [r7, #4]
 800a8ba:	4a17      	ldr	r2, [pc, #92]	; (800a918 <make_route+0x24c>)
 800a8bc:	2144      	movs	r1, #68	; 0x44
 800a8be:	54d1      	strb	r1, [r2, r3]
			break;
 800a8c0:	e014      	b.n	800a8ec <make_route+0x220>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180);								//a内部情報の方向を180度回転
 800a8c2:	2002      	movs	r0, #2
 800a8c4:	f7ff fbb2 	bl	800a02c <turn_dir>
			route[i] = 0x22;									//a格納データ形式を変更
 800a8c8:	88bb      	ldrh	r3, [r7, #4]
 800a8ca:	4a13      	ldr	r2, [pc, #76]	; (800a918 <make_route+0x24c>)
 800a8cc:	2122      	movs	r1, #34	; 0x22
 800a8ce:	54d1      	strb	r1, [r2, r3]
			break;
 800a8d0:	e00c      	b.n	800a8ec <make_route+0x220>
		case 0x03:												//a左折する場合
			turn_dir(DIR_TURN_L90);								//a内部情報の方向を90度右回転
 800a8d2:	20ff      	movs	r0, #255	; 0xff
 800a8d4:	f7ff fbaa 	bl	800a02c <turn_dir>
			route[i] = 0x11;									//a格納データ形式を変更
 800a8d8:	88bb      	ldrh	r3, [r7, #4]
 800a8da:	4a0f      	ldr	r2, [pc, #60]	; (800a918 <make_route+0x24c>)
 800a8dc:	2111      	movs	r1, #17
 800a8de:	54d1      	strb	r1, [r2, r3]
			break;
 800a8e0:	e004      	b.n	800a8ec <make_route+0x220>
		default:												//aそれ以外の場合
			route[i] = 0x00;									//a格納データ形式を変更
 800a8e2:	88bb      	ldrh	r3, [r7, #4]
 800a8e4:	4a0c      	ldr	r2, [pc, #48]	; (800a918 <make_route+0x24c>)
 800a8e6:	2100      	movs	r1, #0
 800a8e8:	54d1      	strb	r1, [r2, r3]
			break;
 800a8ea:	bf00      	nop
		}
		i++;													//aカウンタをインクリメント
 800a8ec:	88bb      	ldrh	r3, [r7, #4]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	80bb      	strh	r3, [r7, #4]
	}while(smap[y][x] != 0);									//a進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 800a8f2:	79ba      	ldrb	r2, [r7, #6]
 800a8f4:	79fb      	ldrb	r3, [r7, #7]
 800a8f6:	4909      	ldr	r1, [pc, #36]	; (800a91c <make_route+0x250>)
 800a8f8:	0112      	lsls	r2, r2, #4
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a900:	2b00      	cmp	r3, #0
 800a902:	f47f af0c 	bne.w	800a71e <make_route+0x52>
	mouse.dir = dir_temp;										//dir_tempに退避させた値をmouse.dirにリストア
 800a906:	4a03      	ldr	r2, [pc, #12]	; (800a914 <make_route+0x248>)
 800a908:	783b      	ldrb	r3, [r7, #0]
 800a90a:	7093      	strb	r3, [r2, #2]
}
 800a90c:	bf00      	nop
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	20000ae0 	.word	0x20000ae0
 800a918:	20000b28 	.word	0x20000b28
 800a91c:	20000c34 	.word	0x20000c34
 800a920:	20000188 	.word	0x20000188
 800a924:	20000e38 	.word	0x20000e38

0800a928 <find_pregoal>:
//	未探索壁を含む＆現在座標から最も近いマス(=仮goal)を探す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void find_pregoal()
{
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持
	//uint8_t m_temp_sample[16];
	uint8_t break_flag = 0;													//未知壁マスを見つけた時のループ脱出フラグ
 800a92e:	2300      	movs	r3, #0
 800a930:	737b      	strb	r3, [r7, #13]

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800a932:	2300      	movs	r3, #0
 800a934:	73bb      	strb	r3, [r7, #14]
 800a936:	e014      	b.n	800a962 <find_pregoal+0x3a>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800a938:	2300      	movs	r3, #0
 800a93a:	73fb      	strb	r3, [r7, #15]
 800a93c:	e00b      	b.n	800a956 <find_pregoal+0x2e>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 800a93e:	7bba      	ldrb	r2, [r7, #14]
 800a940:	7bfb      	ldrb	r3, [r7, #15]
 800a942:	499f      	ldr	r1, [pc, #636]	; (800abc0 <find_pregoal+0x298>)
 800a944:	0112      	lsls	r2, r2, #4
 800a946:	4413      	add	r3, r2
 800a948:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a94c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800a950:	7bfb      	ldrb	r3, [r7, #15]
 800a952:	3301      	adds	r3, #1
 800a954:	73fb      	strb	r3, [r7, #15]
 800a956:	7bfb      	ldrb	r3, [r7, #15]
 800a958:	2b0f      	cmp	r3, #15
 800a95a:	d9f0      	bls.n	800a93e <find_pregoal+0x16>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
 800a95e:	3301      	adds	r3, #1
 800a960:	73bb      	strb	r3, [r7, #14]
 800a962:	7bbb      	ldrb	r3, [r7, #14]
 800a964:	2b0f      	cmp	r3, #15
 800a966:	d9e7      	bls.n	800a938 <find_pregoal+0x10>
		}
	}

	//====探索完了フラグのクリア====
	allmap_comp_flag = 0;
 800a968:	4b96      	ldr	r3, [pc, #600]	; (800abc4 <find_pregoal+0x29c>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	701a      	strb	r2, [r3, #0]

	//====現在座標を0にする====
	smap[mouse.y][mouse.x] = 0;
 800a96e:	4b96      	ldr	r3, [pc, #600]	; (800abc8 <find_pregoal+0x2a0>)
 800a970:	785b      	ldrb	r3, [r3, #1]
 800a972:	b2db      	uxtb	r3, r3
 800a974:	4618      	mov	r0, r3
 800a976:	4b94      	ldr	r3, [pc, #592]	; (800abc8 <find_pregoal+0x2a0>)
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	4619      	mov	r1, r3
 800a97e:	4a90      	ldr	r2, [pc, #576]	; (800abc0 <find_pregoal+0x298>)
 800a980:	0103      	lsls	r3, r0, #4
 800a982:	440b      	add	r3, r1
 800a984:	2100      	movs	r1, #0
 800a986:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 800a98a:	4b90      	ldr	r3, [pc, #576]	; (800abcc <find_pregoal+0x2a4>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 800a990:	2303      	movs	r3, #3
 800a992:	60bb      	str	r3, [r7, #8]
	int turn = 1;
 800a994:	2301      	movs	r3, #1
 800a996:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800a998:	2300      	movs	r3, #0
 800a99a:	73bb      	strb	r3, [r7, #14]
 800a99c:	e180      	b.n	800aca0 <find_pregoal+0x378>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800a99e:	2300      	movs	r3, #0
 800a9a0:	73fb      	strb	r3, [r7, #15]
 800a9a2:	e173      	b.n	800ac8c <find_pregoal+0x364>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 800a9a4:	7bba      	ldrb	r2, [r7, #14]
 800a9a6:	7bfb      	ldrb	r3, [r7, #15]
 800a9a8:	4985      	ldr	r1, [pc, #532]	; (800abc0 <find_pregoal+0x298>)
 800a9aa:	0112      	lsls	r2, r2, #4
 800a9ac:	4413      	add	r3, r2
 800a9ae:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800a9b2:	4b86      	ldr	r3, [pc, #536]	; (800abcc <find_pregoal+0x2a4>)
 800a9b4:	881b      	ldrh	r3, [r3, #0]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	f040 8165 	bne.w	800ac86 <find_pregoal+0x35e>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 800a9bc:	7bba      	ldrb	r2, [r7, #14]
 800a9be:	7bfb      	ldrb	r3, [r7, #15]
 800a9c0:	4983      	ldr	r1, [pc, #524]	; (800abd0 <find_pregoal+0x2a8>)
 800a9c2:	0112      	lsls	r2, r2, #4
 800a9c4:	440a      	add	r2, r1
 800a9c6:	4413      	add	r3, r2
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 800a9cc:	78fb      	ldrb	r3, [r7, #3]
 800a9ce:	f003 0308 	and.w	r3, r3, #8
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d14d      	bne.n	800aa72 <find_pregoal+0x14a>
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
 800a9d8:	2b0f      	cmp	r3, #15
 800a9da:	d04a      	beq.n	800aa72 <find_pregoal+0x14a>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 800a9dc:	7bbb      	ldrb	r3, [r7, #14]
 800a9de:	1c5a      	adds	r2, r3, #1
 800a9e0:	7bfb      	ldrb	r3, [r7, #15]
 800a9e2:	4977      	ldr	r1, [pc, #476]	; (800abc0 <find_pregoal+0x298>)
 800a9e4:	0112      	lsls	r2, r2, #4
 800a9e6:	4413      	add	r3, r2
 800a9e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a9ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d13e      	bne.n	800aa72 <find_pregoal+0x14a>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800a9f4:	7bba      	ldrb	r2, [r7, #14]
 800a9f6:	7bfb      	ldrb	r3, [r7, #15]
 800a9f8:	4971      	ldr	r1, [pc, #452]	; (800abc0 <find_pregoal+0x298>)
 800a9fa:	0112      	lsls	r2, r2, #4
 800a9fc:	4413      	add	r3, r2
 800a9fe:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	b299      	uxth	r1, r3
 800aa06:	7bbb      	ldrb	r3, [r7, #14]
 800aa08:	1c5a      	adds	r2, r3, #1
 800aa0a:	7bfb      	ldrb	r3, [r7, #15]
 800aa0c:	4401      	add	r1, r0
 800aa0e:	b288      	uxth	r0, r1
 800aa10:	496b      	ldr	r1, [pc, #428]	; (800abc0 <find_pregoal+0x298>)
 800aa12:	0112      	lsls	r2, r2, #4
 800aa14:	4413      	add	r3, r2
 800aa16:	4602      	mov	r2, r0
 800aa18:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y + 1][x] & 0x0f ) << 4) != (map[y + 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800aa1c:	7bbb      	ldrb	r3, [r7, #14]
 800aa1e:	1c5a      	adds	r2, r3, #1
 800aa20:	7bfb      	ldrb	r3, [r7, #15]
 800aa22:	496b      	ldr	r1, [pc, #428]	; (800abd0 <find_pregoal+0x2a8>)
 800aa24:	0112      	lsls	r2, r2, #4
 800aa26:	440a      	add	r2, r1
 800aa28:	4413      	add	r3, r2
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	011b      	lsls	r3, r3, #4
 800aa2e:	b2da      	uxtb	r2, r3
 800aa30:	7bbb      	ldrb	r3, [r7, #14]
 800aa32:	1c59      	adds	r1, r3, #1
 800aa34:	7bfb      	ldrb	r3, [r7, #15]
 800aa36:	4866      	ldr	r0, [pc, #408]	; (800abd0 <find_pregoal+0x2a8>)
 800aa38:	0109      	lsls	r1, r1, #4
 800aa3a:	4401      	add	r1, r0
 800aa3c:	440b      	add	r3, r1
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d014      	beq.n	800aa72 <find_pregoal+0x14a>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800aa48:	2301      	movs	r3, #1
 800aa4a:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y + 1][x];					//仮goalの歩数を記録
 800aa4c:	7bbb      	ldrb	r3, [r7, #14]
 800aa4e:	1c5a      	adds	r2, r3, #1
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
 800aa52:	495b      	ldr	r1, [pc, #364]	; (800abc0 <find_pregoal+0x298>)
 800aa54:	0112      	lsls	r2, r2, #4
 800aa56:	4413      	add	r3, r2
 800aa58:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800aa5c:	4b5d      	ldr	r3, [pc, #372]	; (800abd4 <find_pregoal+0x2ac>)
 800aa5e:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 800aa60:	4a5d      	ldr	r2, [pc, #372]	; (800abd8 <find_pregoal+0x2b0>)
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
 800aa64:	7013      	strb	r3, [r2, #0]
								pregoal_y = y + 1;							//仮goalの座標を記録
 800aa66:	7bbb      	ldrb	r3, [r7, #14]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	4b5b      	ldr	r3, [pc, #364]	; (800abdc <find_pregoal+0x2b4>)
 800aa6e:	701a      	strb	r2, [r3, #0]
								break;
 800aa70:	e110      	b.n	800ac94 <find_pregoal+0x36c>
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 800aa72:	78fb      	ldrb	r3, [r7, #3]
 800aa74:	f003 0304 	and.w	r3, r3, #4
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d14d      	bne.n	800ab18 <find_pregoal+0x1f0>
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
 800aa7e:	2b0f      	cmp	r3, #15
 800aa80:	d04a      	beq.n	800ab18 <find_pregoal+0x1f0>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 800aa82:	7bba      	ldrb	r2, [r7, #14]
 800aa84:	7bfb      	ldrb	r3, [r7, #15]
 800aa86:	3301      	adds	r3, #1
 800aa88:	494d      	ldr	r1, [pc, #308]	; (800abc0 <find_pregoal+0x298>)
 800aa8a:	0112      	lsls	r2, r2, #4
 800aa8c:	4413      	add	r3, r2
 800aa8e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800aa92:	f240 32e7 	movw	r2, #999	; 0x3e7
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d13e      	bne.n	800ab18 <find_pregoal+0x1f0>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800aa9a:	7bba      	ldrb	r2, [r7, #14]
 800aa9c:	7bfb      	ldrb	r3, [r7, #15]
 800aa9e:	4948      	ldr	r1, [pc, #288]	; (800abc0 <find_pregoal+0x298>)
 800aaa0:	0112      	lsls	r2, r2, #4
 800aaa2:	4413      	add	r3, r2
 800aaa4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	b299      	uxth	r1, r3
 800aaac:	7bba      	ldrb	r2, [r7, #14]
 800aaae:	7bfb      	ldrb	r3, [r7, #15]
 800aab0:	3301      	adds	r3, #1
 800aab2:	4401      	add	r1, r0
 800aab4:	b288      	uxth	r0, r1
 800aab6:	4942      	ldr	r1, [pc, #264]	; (800abc0 <find_pregoal+0x298>)
 800aab8:	0112      	lsls	r2, r2, #4
 800aaba:	4413      	add	r3, r2
 800aabc:	4602      	mov	r2, r0
 800aabe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x + 1] & 0x0f) << 4) != (map[y][x + 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800aac2:	7bba      	ldrb	r2, [r7, #14]
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
 800aac6:	3301      	adds	r3, #1
 800aac8:	4941      	ldr	r1, [pc, #260]	; (800abd0 <find_pregoal+0x2a8>)
 800aaca:	0112      	lsls	r2, r2, #4
 800aacc:	440a      	add	r2, r1
 800aace:	4413      	add	r3, r2
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	011b      	lsls	r3, r3, #4
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	7bb9      	ldrb	r1, [r7, #14]
 800aad8:	7bfb      	ldrb	r3, [r7, #15]
 800aada:	3301      	adds	r3, #1
 800aadc:	483c      	ldr	r0, [pc, #240]	; (800abd0 <find_pregoal+0x2a8>)
 800aade:	0109      	lsls	r1, r1, #4
 800aae0:	4401      	add	r1, r0
 800aae2:	440b      	add	r3, r1
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d014      	beq.n	800ab18 <find_pregoal+0x1f0>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800aaee:	2301      	movs	r3, #1
 800aaf0:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x + 1];					//仮ゴールの歩数を記録
 800aaf2:	7bba      	ldrb	r2, [r7, #14]
 800aaf4:	7bfb      	ldrb	r3, [r7, #15]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	4931      	ldr	r1, [pc, #196]	; (800abc0 <find_pregoal+0x298>)
 800aafa:	0112      	lsls	r2, r2, #4
 800aafc:	4413      	add	r3, r2
 800aafe:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800ab02:	4b34      	ldr	r3, [pc, #208]	; (800abd4 <find_pregoal+0x2ac>)
 800ab04:	801a      	strh	r2, [r3, #0]
								pregoal_x = x + 1;
 800ab06:	7bfb      	ldrb	r3, [r7, #15]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	b2da      	uxtb	r2, r3
 800ab0c:	4b32      	ldr	r3, [pc, #200]	; (800abd8 <find_pregoal+0x2b0>)
 800ab0e:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 800ab10:	4a32      	ldr	r2, [pc, #200]	; (800abdc <find_pregoal+0x2b4>)
 800ab12:	7bbb      	ldrb	r3, [r7, #14]
 800ab14:	7013      	strb	r3, [r2, #0]
								break;
 800ab16:	e0bd      	b.n	800ac94 <find_pregoal+0x36c>
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 800ab18:	78fb      	ldrb	r3, [r7, #3]
 800ab1a:	f003 0302 	and.w	r3, r3, #2
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d15e      	bne.n	800abe0 <find_pregoal+0x2b8>
 800ab22:	7bbb      	ldrb	r3, [r7, #14]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d05b      	beq.n	800abe0 <find_pregoal+0x2b8>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 800ab28:	7bbb      	ldrb	r3, [r7, #14]
 800ab2a:	1e5a      	subs	r2, r3, #1
 800ab2c:	7bfb      	ldrb	r3, [r7, #15]
 800ab2e:	4924      	ldr	r1, [pc, #144]	; (800abc0 <find_pregoal+0x298>)
 800ab30:	0112      	lsls	r2, r2, #4
 800ab32:	4413      	add	r3, r2
 800ab34:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ab38:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d14f      	bne.n	800abe0 <find_pregoal+0x2b8>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800ab40:	7bba      	ldrb	r2, [r7, #14]
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
 800ab44:	491e      	ldr	r1, [pc, #120]	; (800abc0 <find_pregoal+0x298>)
 800ab46:	0112      	lsls	r2, r2, #4
 800ab48:	4413      	add	r3, r2
 800ab4a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	b299      	uxth	r1, r3
 800ab52:	7bbb      	ldrb	r3, [r7, #14]
 800ab54:	1e5a      	subs	r2, r3, #1
 800ab56:	7bfb      	ldrb	r3, [r7, #15]
 800ab58:	4401      	add	r1, r0
 800ab5a:	b288      	uxth	r0, r1
 800ab5c:	4918      	ldr	r1, [pc, #96]	; (800abc0 <find_pregoal+0x298>)
 800ab5e:	0112      	lsls	r2, r2, #4
 800ab60:	4413      	add	r3, r2
 800ab62:	4602      	mov	r2, r0
 800ab64:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y - 1][x] & 0x0f) << 4) != (map[y - 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800ab68:	7bbb      	ldrb	r3, [r7, #14]
 800ab6a:	1e5a      	subs	r2, r3, #1
 800ab6c:	7bfb      	ldrb	r3, [r7, #15]
 800ab6e:	4918      	ldr	r1, [pc, #96]	; (800abd0 <find_pregoal+0x2a8>)
 800ab70:	0112      	lsls	r2, r2, #4
 800ab72:	440a      	add	r2, r1
 800ab74:	4413      	add	r3, r2
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	011b      	lsls	r3, r3, #4
 800ab7a:	b2da      	uxtb	r2, r3
 800ab7c:	7bbb      	ldrb	r3, [r7, #14]
 800ab7e:	1e59      	subs	r1, r3, #1
 800ab80:	7bfb      	ldrb	r3, [r7, #15]
 800ab82:	4813      	ldr	r0, [pc, #76]	; (800abd0 <find_pregoal+0x2a8>)
 800ab84:	0109      	lsls	r1, r1, #4
 800ab86:	4401      	add	r1, r0
 800ab88:	440b      	add	r3, r1
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d025      	beq.n	800abe0 <find_pregoal+0x2b8>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800ab94:	2301      	movs	r3, #1
 800ab96:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y - 1][x];					//仮ゴールの歩数を記録
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
 800ab9a:	1e5a      	subs	r2, r3, #1
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
 800ab9e:	4908      	ldr	r1, [pc, #32]	; (800abc0 <find_pregoal+0x298>)
 800aba0:	0112      	lsls	r2, r2, #4
 800aba2:	4413      	add	r3, r2
 800aba4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800aba8:	4b0a      	ldr	r3, [pc, #40]	; (800abd4 <find_pregoal+0x2ac>)
 800abaa:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 800abac:	4a0a      	ldr	r2, [pc, #40]	; (800abd8 <find_pregoal+0x2b0>)
 800abae:	7bfb      	ldrb	r3, [r7, #15]
 800abb0:	7013      	strb	r3, [r2, #0]
								pregoal_y = y - 1;							//仮goalの座標を記録
 800abb2:	7bbb      	ldrb	r3, [r7, #14]
 800abb4:	3b01      	subs	r3, #1
 800abb6:	b2da      	uxtb	r2, r3
 800abb8:	4b08      	ldr	r3, [pc, #32]	; (800abdc <find_pregoal+0x2b4>)
 800abba:	701a      	strb	r2, [r3, #0]
								break;
 800abbc:	e06a      	b.n	800ac94 <find_pregoal+0x36c>
 800abbe:	bf00      	nop
 800abc0:	20000c34 	.word	0x20000c34
 800abc4:	20000a84 	.word	0x20000a84
 800abc8:	20000ae0 	.word	0x20000ae0
 800abcc:	2000032a 	.word	0x2000032a
 800abd0:	20000188 	.word	0x20000188
 800abd4:	20000ad8 	.word	0x20000ad8
 800abd8:	20000c30 	.word	0x20000c30
 800abdc:	20000e50 	.word	0x20000e50
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 800abe0:	78fb      	ldrb	r3, [r7, #3]
 800abe2:	f003 0301 	and.w	r3, r3, #1
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d14d      	bne.n	800ac86 <find_pregoal+0x35e>
 800abea:	7bfb      	ldrb	r3, [r7, #15]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d04a      	beq.n	800ac86 <find_pregoal+0x35e>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 800abf0:	7bba      	ldrb	r2, [r7, #14]
 800abf2:	7bfb      	ldrb	r3, [r7, #15]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	493b      	ldr	r1, [pc, #236]	; (800ace4 <find_pregoal+0x3bc>)
 800abf8:	0112      	lsls	r2, r2, #4
 800abfa:	4413      	add	r3, r2
 800abfc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ac00:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d13e      	bne.n	800ac86 <find_pregoal+0x35e>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 800ac08:	7bba      	ldrb	r2, [r7, #14]
 800ac0a:	7bfb      	ldrb	r3, [r7, #15]
 800ac0c:	4935      	ldr	r1, [pc, #212]	; (800ace4 <find_pregoal+0x3bc>)
 800ac0e:	0112      	lsls	r2, r2, #4
 800ac10:	4413      	add	r3, r2
 800ac12:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	b299      	uxth	r1, r3
 800ac1a:	7bba      	ldrb	r2, [r7, #14]
 800ac1c:	7bfb      	ldrb	r3, [r7, #15]
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	4401      	add	r1, r0
 800ac22:	b288      	uxth	r0, r1
 800ac24:	492f      	ldr	r1, [pc, #188]	; (800ace4 <find_pregoal+0x3bc>)
 800ac26:	0112      	lsls	r2, r2, #4
 800ac28:	4413      	add	r3, r2
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x - 1] & 0x0f) << 4) != (map[y][x - 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 800ac30:	7bba      	ldrb	r2, [r7, #14]
 800ac32:	7bfb      	ldrb	r3, [r7, #15]
 800ac34:	3b01      	subs	r3, #1
 800ac36:	492c      	ldr	r1, [pc, #176]	; (800ace8 <find_pregoal+0x3c0>)
 800ac38:	0112      	lsls	r2, r2, #4
 800ac3a:	440a      	add	r2, r1
 800ac3c:	4413      	add	r3, r2
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	011b      	lsls	r3, r3, #4
 800ac42:	b2da      	uxtb	r2, r3
 800ac44:	7bb9      	ldrb	r1, [r7, #14]
 800ac46:	7bfb      	ldrb	r3, [r7, #15]
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	4827      	ldr	r0, [pc, #156]	; (800ace8 <find_pregoal+0x3c0>)
 800ac4c:	0109      	lsls	r1, r1, #4
 800ac4e:	4401      	add	r1, r0
 800ac50:	440b      	add	r3, r1
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d014      	beq.n	800ac86 <find_pregoal+0x35e>
								break_flag = 1;								//for文を抜けるフラグを立てて
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x - 1];					//仮ゴールの歩数を記録
 800ac60:	7bba      	ldrb	r2, [r7, #14]
 800ac62:	7bfb      	ldrb	r3, [r7, #15]
 800ac64:	3b01      	subs	r3, #1
 800ac66:	491f      	ldr	r1, [pc, #124]	; (800ace4 <find_pregoal+0x3bc>)
 800ac68:	0112      	lsls	r2, r2, #4
 800ac6a:	4413      	add	r3, r2
 800ac6c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800ac70:	4b1e      	ldr	r3, [pc, #120]	; (800acec <find_pregoal+0x3c4>)
 800ac72:	801a      	strh	r2, [r3, #0]
								pregoal_x = x - 1;
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
 800ac76:	3b01      	subs	r3, #1
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	4b1d      	ldr	r3, [pc, #116]	; (800acf0 <find_pregoal+0x3c8>)
 800ac7c:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 800ac7e:	4a1d      	ldr	r2, [pc, #116]	; (800acf4 <find_pregoal+0x3cc>)
 800ac80:	7bbb      	ldrb	r3, [r7, #14]
 800ac82:	7013      	strb	r3, [r2, #0]
								break;							}
 800ac84:	e006      	b.n	800ac94 <find_pregoal+0x36c>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	73fb      	strb	r3, [r7, #15]
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
 800ac8e:	2b0f      	cmp	r3, #15
 800ac90:	f67f ae88 	bls.w	800a9a4 <find_pregoal+0x7c>
						}
					}
				}
			}
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 800ac94:	7b7b      	ldrb	r3, [r7, #13]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d107      	bne.n	800acaa <find_pregoal+0x382>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800ac9a:	7bbb      	ldrb	r3, [r7, #14]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	73bb      	strb	r3, [r7, #14]
 800aca0:	7bbb      	ldrb	r3, [r7, #14]
 800aca2:	2b0f      	cmp	r3, #15
 800aca4:	f67f ae7b 	bls.w	800a99e <find_pregoal+0x76>
 800aca8:	e000      	b.n	800acac <find_pregoal+0x384>
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 800acaa:	bf00      	nop
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 800acac:	4b12      	ldr	r3, [pc, #72]	; (800acf8 <find_pregoal+0x3d0>)
 800acae:	881b      	ldrh	r3, [r3, #0]
 800acb0:	3301      	adds	r3, #1
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	4b10      	ldr	r3, [pc, #64]	; (800acf8 <find_pregoal+0x3d0>)
 800acb6:	801a      	strh	r2, [r3, #0]
		if (m_step > 500) allmap_comp_flag = 1;
 800acb8:	4b0f      	ldr	r3, [pc, #60]	; (800acf8 <find_pregoal+0x3d0>)
 800acba:	881b      	ldrh	r3, [r3, #0]
 800acbc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800acc0:	d902      	bls.n	800acc8 <find_pregoal+0x3a0>
 800acc2:	4b0e      	ldr	r3, [pc, #56]	; (800acfc <find_pregoal+0x3d4>)
 800acc4:	2201      	movs	r2, #1
 800acc6:	701a      	strb	r2, [r3, #0]
	} while (break_flag == 0 && allmap_comp_flag != 1);		//未探索壁ありマスを見つけるまで実行
 800acc8:	7b7b      	ldrb	r3, [r7, #13]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d104      	bne.n	800acd8 <find_pregoal+0x3b0>
 800acce:	4b0b      	ldr	r3, [pc, #44]	; (800acfc <find_pregoal+0x3d4>)
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	f47f ae60 	bne.w	800a998 <find_pregoal+0x70>
}
 800acd8:	bf00      	nop
 800acda:	3714      	adds	r7, #20
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr
 800ace4:	20000c34 	.word	0x20000c34
 800ace8:	20000188 	.word	0x20000188
 800acec:	20000ad8 	.word	0x20000ad8
 800acf0:	20000c30 	.word	0x20000c30
 800acf4:	20000e50 	.word	0x20000e50
 800acf8:	2000032a 	.word	0x2000032a
 800acfc:	20000a84 	.word	0x20000a84

0800ad00 <make_smap2>:
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap2()
{
 800ad00:	b480      	push	{r7}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800ad06:	2300      	movs	r3, #0
 800ad08:	73bb      	strb	r3, [r7, #14]
 800ad0a:	e014      	b.n	800ad36 <make_smap2+0x36>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	73fb      	strb	r3, [r7, #15]
 800ad10:	e00b      	b.n	800ad2a <make_smap2+0x2a>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 800ad12:	7bba      	ldrb	r2, [r7, #14]
 800ad14:	7bfb      	ldrb	r3, [r7, #15]
 800ad16:	4986      	ldr	r1, [pc, #536]	; (800af30 <make_smap2+0x230>)
 800ad18:	0112      	lsls	r2, r2, #4
 800ad1a:	4413      	add	r3, r2
 800ad1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ad20:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
 800ad26:	3301      	adds	r3, #1
 800ad28:	73fb      	strb	r3, [r7, #15]
 800ad2a:	7bfb      	ldrb	r3, [r7, #15]
 800ad2c:	2b0f      	cmp	r3, #15
 800ad2e:	d9f0      	bls.n	800ad12 <make_smap2+0x12>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 800ad30:	7bbb      	ldrb	r3, [r7, #14]
 800ad32:	3301      	adds	r3, #1
 800ad34:	73bb      	strb	r3, [r7, #14]
 800ad36:	7bbb      	ldrb	r3, [r7, #14]
 800ad38:	2b0f      	cmp	r3, #15
 800ad3a:	d9e7      	bls.n	800ad0c <make_smap2+0xc>
		}
	}

	//====仮ゴール座標を0にする====
	smap[pregoal_y][pregoal_x] = 0;
 800ad3c:	4b7d      	ldr	r3, [pc, #500]	; (800af34 <make_smap2+0x234>)
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	4618      	mov	r0, r3
 800ad42:	4b7d      	ldr	r3, [pc, #500]	; (800af38 <make_smap2+0x238>)
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	4619      	mov	r1, r3
 800ad48:	4a79      	ldr	r2, [pc, #484]	; (800af30 <make_smap2+0x230>)
 800ad4a:	0103      	lsls	r3, r0, #4
 800ad4c:	440b      	add	r3, r1
 800ad4e:	2100      	movs	r1, #0
 800ad50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 800ad54:	4b79      	ldr	r3, [pc, #484]	; (800af3c <make_smap2+0x23c>)
 800ad56:	2200      	movs	r2, #0
 800ad58:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	60bb      	str	r3, [r7, #8]
	int turn = 5;
 800ad5e:	2305      	movs	r3, #5
 800ad60:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800ad62:	2300      	movs	r3, #0
 800ad64:	73bb      	strb	r3, [r7, #14]
 800ad66:	e0c0      	b.n	800aeea <make_smap2+0x1ea>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800ad68:	2300      	movs	r3, #0
 800ad6a:	73fb      	strb	r3, [r7, #15]
 800ad6c:	e0b6      	b.n	800aedc <make_smap2+0x1dc>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 800ad6e:	7bba      	ldrb	r2, [r7, #14]
 800ad70:	7bfb      	ldrb	r3, [r7, #15]
 800ad72:	496f      	ldr	r1, [pc, #444]	; (800af30 <make_smap2+0x230>)
 800ad74:	0112      	lsls	r2, r2, #4
 800ad76:	4413      	add	r3, r2
 800ad78:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800ad7c:	4b6f      	ldr	r3, [pc, #444]	; (800af3c <make_smap2+0x23c>)
 800ad7e:	881b      	ldrh	r3, [r3, #0]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	f040 80a8 	bne.w	800aed6 <make_smap2+0x1d6>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 800ad86:	7bba      	ldrb	r2, [r7, #14]
 800ad88:	7bfb      	ldrb	r3, [r7, #15]
 800ad8a:	496d      	ldr	r1, [pc, #436]	; (800af40 <make_smap2+0x240>)
 800ad8c:	0112      	lsls	r2, r2, #4
 800ad8e:	440a      	add	r2, r1
 800ad90:	4413      	add	r3, r2
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 800ad96:	78fb      	ldrb	r3, [r7, #3]
 800ad98:	f003 0308 	and.w	r3, r3, #8
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d122      	bne.n	800ade6 <make_smap2+0xe6>
 800ada0:	7bbb      	ldrb	r3, [r7, #14]
 800ada2:	2b0f      	cmp	r3, #15
 800ada4:	d01f      	beq.n	800ade6 <make_smap2+0xe6>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 800ada6:	7bbb      	ldrb	r3, [r7, #14]
 800ada8:	1c5a      	adds	r2, r3, #1
 800adaa:	7bfb      	ldrb	r3, [r7, #15]
 800adac:	4960      	ldr	r1, [pc, #384]	; (800af30 <make_smap2+0x230>)
 800adae:	0112      	lsls	r2, r2, #4
 800adb0:	4413      	add	r3, r2
 800adb2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800adb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800adba:	4293      	cmp	r3, r2
 800adbc:	d113      	bne.n	800ade6 <make_smap2+0xe6>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800adbe:	7bba      	ldrb	r2, [r7, #14]
 800adc0:	7bfb      	ldrb	r3, [r7, #15]
 800adc2:	495b      	ldr	r1, [pc, #364]	; (800af30 <make_smap2+0x230>)
 800adc4:	0112      	lsls	r2, r2, #4
 800adc6:	4413      	add	r3, r2
 800adc8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	b299      	uxth	r1, r3
 800add0:	7bbb      	ldrb	r3, [r7, #14]
 800add2:	1c5a      	adds	r2, r3, #1
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	4401      	add	r1, r0
 800add8:	b288      	uxth	r0, r1
 800adda:	4955      	ldr	r1, [pc, #340]	; (800af30 <make_smap2+0x230>)
 800addc:	0112      	lsls	r2, r2, #4
 800adde:	4413      	add	r3, r2
 800ade0:	4602      	mov	r2, r0
 800ade2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 800ade6:	78fb      	ldrb	r3, [r7, #3]
 800ade8:	f003 0304 	and.w	r3, r3, #4
 800adec:	2b00      	cmp	r3, #0
 800adee:	d122      	bne.n	800ae36 <make_smap2+0x136>
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
 800adf2:	2b0f      	cmp	r3, #15
 800adf4:	d01f      	beq.n	800ae36 <make_smap2+0x136>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 800adf6:	7bba      	ldrb	r2, [r7, #14]
 800adf8:	7bfb      	ldrb	r3, [r7, #15]
 800adfa:	3301      	adds	r3, #1
 800adfc:	494c      	ldr	r1, [pc, #304]	; (800af30 <make_smap2+0x230>)
 800adfe:	0112      	lsls	r2, r2, #4
 800ae00:	4413      	add	r3, r2
 800ae02:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ae06:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d113      	bne.n	800ae36 <make_smap2+0x136>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800ae0e:	7bba      	ldrb	r2, [r7, #14]
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
 800ae12:	4947      	ldr	r1, [pc, #284]	; (800af30 <make_smap2+0x230>)
 800ae14:	0112      	lsls	r2, r2, #4
 800ae16:	4413      	add	r3, r2
 800ae18:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	b299      	uxth	r1, r3
 800ae20:	7bba      	ldrb	r2, [r7, #14]
 800ae22:	7bfb      	ldrb	r3, [r7, #15]
 800ae24:	3301      	adds	r3, #1
 800ae26:	4401      	add	r1, r0
 800ae28:	b288      	uxth	r0, r1
 800ae2a:	4941      	ldr	r1, [pc, #260]	; (800af30 <make_smap2+0x230>)
 800ae2c:	0112      	lsls	r2, r2, #4
 800ae2e:	4413      	add	r3, r2
 800ae30:	4602      	mov	r2, r0
 800ae32:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 800ae36:	78fb      	ldrb	r3, [r7, #3]
 800ae38:	f003 0302 	and.w	r3, r3, #2
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d122      	bne.n	800ae86 <make_smap2+0x186>
 800ae40:	7bbb      	ldrb	r3, [r7, #14]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d01f      	beq.n	800ae86 <make_smap2+0x186>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 800ae46:	7bbb      	ldrb	r3, [r7, #14]
 800ae48:	1e5a      	subs	r2, r3, #1
 800ae4a:	7bfb      	ldrb	r3, [r7, #15]
 800ae4c:	4938      	ldr	r1, [pc, #224]	; (800af30 <make_smap2+0x230>)
 800ae4e:	0112      	lsls	r2, r2, #4
 800ae50:	4413      	add	r3, r2
 800ae52:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ae56:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d113      	bne.n	800ae86 <make_smap2+0x186>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 800ae5e:	7bba      	ldrb	r2, [r7, #14]
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
 800ae62:	4933      	ldr	r1, [pc, #204]	; (800af30 <make_smap2+0x230>)
 800ae64:	0112      	lsls	r2, r2, #4
 800ae66:	4413      	add	r3, r2
 800ae68:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	b299      	uxth	r1, r3
 800ae70:	7bbb      	ldrb	r3, [r7, #14]
 800ae72:	1e5a      	subs	r2, r3, #1
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
 800ae76:	4401      	add	r1, r0
 800ae78:	b288      	uxth	r0, r1
 800ae7a:	492d      	ldr	r1, [pc, #180]	; (800af30 <make_smap2+0x230>)
 800ae7c:	0112      	lsls	r2, r2, #4
 800ae7e:	4413      	add	r3, r2
 800ae80:	4602      	mov	r2, r0
 800ae82:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 800ae86:	78fb      	ldrb	r3, [r7, #3]
 800ae88:	f003 0301 	and.w	r3, r3, #1
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d122      	bne.n	800aed6 <make_smap2+0x1d6>
 800ae90:	7bfb      	ldrb	r3, [r7, #15]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d01f      	beq.n	800aed6 <make_smap2+0x1d6>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 800ae96:	7bba      	ldrb	r2, [r7, #14]
 800ae98:	7bfb      	ldrb	r3, [r7, #15]
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	4924      	ldr	r1, [pc, #144]	; (800af30 <make_smap2+0x230>)
 800ae9e:	0112      	lsls	r2, r2, #4
 800aea0:	4413      	add	r3, r2
 800aea2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800aea6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d113      	bne.n	800aed6 <make_smap2+0x1d6>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 800aeae:	7bba      	ldrb	r2, [r7, #14]
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
 800aeb2:	491f      	ldr	r1, [pc, #124]	; (800af30 <make_smap2+0x230>)
 800aeb4:	0112      	lsls	r2, r2, #4
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	b299      	uxth	r1, r3
 800aec0:	7bba      	ldrb	r2, [r7, #14]
 800aec2:	7bfb      	ldrb	r3, [r7, #15]
 800aec4:	3b01      	subs	r3, #1
 800aec6:	4401      	add	r1, r0
 800aec8:	b288      	uxth	r0, r1
 800aeca:	4919      	ldr	r1, [pc, #100]	; (800af30 <make_smap2+0x230>)
 800aecc:	0112      	lsls	r2, r2, #4
 800aece:	4413      	add	r3, r2
 800aed0:	4602      	mov	r2, r0
 800aed2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 800aed6:	7bfb      	ldrb	r3, [r7, #15]
 800aed8:	3301      	adds	r3, #1
 800aeda:	73fb      	strb	r3, [r7, #15]
 800aedc:	7bfb      	ldrb	r3, [r7, #15]
 800aede:	2b0f      	cmp	r3, #15
 800aee0:	f67f af45 	bls.w	800ad6e <make_smap2+0x6e>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 800aee4:	7bbb      	ldrb	r3, [r7, #14]
 800aee6:	3301      	adds	r3, #1
 800aee8:	73bb      	strb	r3, [r7, #14]
 800aeea:	7bbb      	ldrb	r3, [r7, #14]
 800aeec:	2b0f      	cmp	r3, #15
 800aeee:	f67f af3b 	bls.w	800ad68 <make_smap2+0x68>
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 800aef2:	4b12      	ldr	r3, [pc, #72]	; (800af3c <make_smap2+0x23c>)
 800aef4:	881b      	ldrh	r3, [r3, #0]
 800aef6:	3301      	adds	r3, #1
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	4b10      	ldr	r3, [pc, #64]	; (800af3c <make_smap2+0x23c>)
 800aefc:	801a      	strh	r2, [r3, #0]
	} while (smap[mouse.y][mouse.x] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
 800aefe:	4b11      	ldr	r3, [pc, #68]	; (800af44 <make_smap2+0x244>)
 800af00:	785b      	ldrb	r3, [r3, #1]
 800af02:	b2db      	uxtb	r3, r3
 800af04:	4618      	mov	r0, r3
 800af06:	4b0f      	ldr	r3, [pc, #60]	; (800af44 <make_smap2+0x244>)
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	4619      	mov	r1, r3
 800af0e:	4a08      	ldr	r2, [pc, #32]	; (800af30 <make_smap2+0x230>)
 800af10:	0103      	lsls	r3, r0, #4
 800af12:	440b      	add	r3, r1
 800af14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af18:	f240 32e7 	movw	r2, #999	; 0x3e7
 800af1c:	4293      	cmp	r3, r2
 800af1e:	f43f af20 	beq.w	800ad62 <make_smap2+0x62>
}
 800af22:	bf00      	nop
 800af24:	3714      	adds	r7, #20
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	20000c34 	.word	0x20000c34
 800af34:	20000e50 	.word	0x20000e50
 800af38:	20000c30 	.word	0x20000c30
 800af3c:	2000032a 	.word	0x2000032a
 800af40:	20000188 	.word	0x20000188
 800af44:	20000ae0 	.word	0x20000ae0

0800af48 <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
	printf("eprom func start \n");
 800af4e:	4818      	ldr	r0, [pc, #96]	; (800afb0 <store_map_in_eeprom+0x68>)
 800af50:	f000 ff1e 	bl	800bd90 <puts>
	eeprom_enable_write();
 800af54:	f7fc fbba 	bl	80076cc <eeprom_enable_write>
	printf("eprom enable_write fin \n");
 800af58:	4816      	ldr	r0, [pc, #88]	; (800afb4 <store_map_in_eeprom+0x6c>)
 800af5a:	f000 ff19 	bl	800bd90 <puts>
	int i;
	for(i = 0; i < 16; i++){
 800af5e:	2300      	movs	r3, #0
 800af60:	607b      	str	r3, [r7, #4]
 800af62:	e01b      	b.n	800af9c <store_map_in_eeprom+0x54>
		int j;
		for(j = 0; j < 16; j++){
 800af64:	2300      	movs	r3, #0
 800af66:	603b      	str	r3, [r7, #0]
 800af68:	e012      	b.n	800af90 <store_map_in_eeprom+0x48>
			eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	011a      	lsls	r2, r3, #4
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	4413      	add	r3, r2
 800af72:	4618      	mov	r0, r3
 800af74:	4a10      	ldr	r2, [pc, #64]	; (800afb8 <store_map_in_eeprom+0x70>)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	011b      	lsls	r3, r3, #4
 800af7a:	441a      	add	r2, r3
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	4413      	add	r3, r2
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	b29b      	uxth	r3, r3
 800af84:	4619      	mov	r1, r3
 800af86:	f7fc fbcc 	bl	8007722 <eeprom_write_halfword>
		for(j = 0; j < 16; j++){
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	3301      	adds	r3, #1
 800af8e:	603b      	str	r3, [r7, #0]
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2b0f      	cmp	r3, #15
 800af94:	dde9      	ble.n	800af6a <store_map_in_eeprom+0x22>
	for(i = 0; i < 16; i++){
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	3301      	adds	r3, #1
 800af9a:	607b      	str	r3, [r7, #4]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b0f      	cmp	r3, #15
 800afa0:	dde0      	ble.n	800af64 <store_map_in_eeprom+0x1c>
		}
	}
	eeprom_disable_write();
 800afa2:	f7fc fbb7 	bl	8007714 <eeprom_disable_write>
}
 800afa6:	bf00      	nop
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	0800d1d4 	.word	0x0800d1d4
 800afb4:	0800d1e8 	.word	0x0800d1e8
 800afb8:	20000188 	.word	0x20000188

0800afbc <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 16; i++){
 800afc2:	2300      	movs	r3, #0
 800afc4:	607b      	str	r3, [r7, #4]
 800afc6:	e01c      	b.n	800b002 <load_map_from_eeprom+0x46>
		int j;
		for(j = 0; j < 16; j++){
 800afc8:	2300      	movs	r3, #0
 800afca:	603b      	str	r3, [r7, #0]
 800afcc:	e013      	b.n	800aff6 <load_map_from_eeprom+0x3a>
			map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	011a      	lsls	r2, r3, #4
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	4413      	add	r3, r2
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fc fbc0 	bl	800775c <eeprom_read_halfword>
 800afdc:	4603      	mov	r3, r0
 800afde:	b2d9      	uxtb	r1, r3
 800afe0:	4a0b      	ldr	r2, [pc, #44]	; (800b010 <load_map_from_eeprom+0x54>)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	011b      	lsls	r3, r3, #4
 800afe6:	441a      	add	r2, r3
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	4413      	add	r3, r2
 800afec:	460a      	mov	r2, r1
 800afee:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 16; j++){
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	3301      	adds	r3, #1
 800aff4:	603b      	str	r3, [r7, #0]
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	2b0f      	cmp	r3, #15
 800affa:	dde8      	ble.n	800afce <load_map_from_eeprom+0x12>
	for(i = 0; i < 16; i++){
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	3301      	adds	r3, #1
 800b000:	607b      	str	r3, [r7, #4]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2b0f      	cmp	r3, #15
 800b006:	dddf      	ble.n	800afc8 <load_map_from_eeprom+0xc>
		}
	}
}
 800b008:	bf00      	nop
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	20000188 	.word	0x20000188

0800b014 <sensor_init>:

#include "global.h"


void sensor_init(void){
 800b014:	b480      	push	{r7}
 800b016:	af00      	add	r7, sp, #0
	tp = 0;
 800b018:	4b0e      	ldr	r3, [pc, #56]	; (800b054 <sensor_init+0x40>)
 800b01a:	2200      	movs	r2, #0
 800b01c:	701a      	strb	r2, [r3, #0]
	ad_l = ad_r = ad_fr = ad_fl = 0;
 800b01e:	4b0e      	ldr	r3, [pc, #56]	; (800b058 <sensor_init+0x44>)
 800b020:	2200      	movs	r2, #0
 800b022:	601a      	str	r2, [r3, #0]
 800b024:	4b0c      	ldr	r3, [pc, #48]	; (800b058 <sensor_init+0x44>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a0c      	ldr	r2, [pc, #48]	; (800b05c <sensor_init+0x48>)
 800b02a:	6013      	str	r3, [r2, #0]
 800b02c:	4b0b      	ldr	r3, [pc, #44]	; (800b05c <sensor_init+0x48>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a0b      	ldr	r2, [pc, #44]	; (800b060 <sensor_init+0x4c>)
 800b032:	6013      	str	r3, [r2, #0]
 800b034:	4b0a      	ldr	r3, [pc, #40]	; (800b060 <sensor_init+0x4c>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a0a      	ldr	r2, [pc, #40]	; (800b064 <sensor_init+0x50>)
 800b03a:	6013      	str	r3, [r2, #0]
	base_l = base_r = 0;
 800b03c:	4b0a      	ldr	r3, [pc, #40]	; (800b068 <sensor_init+0x54>)
 800b03e:	2200      	movs	r2, #0
 800b040:	801a      	strh	r2, [r3, #0]
 800b042:	4b09      	ldr	r3, [pc, #36]	; (800b068 <sensor_init+0x54>)
 800b044:	881a      	ldrh	r2, [r3, #0]
 800b046:	4b09      	ldr	r3, [pc, #36]	; (800b06c <sensor_init+0x58>)
 800b048:	801a      	strh	r2, [r3, #0]
}
 800b04a:	bf00      	nop
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr
 800b054:	20000e4f 	.word	0x20000e4f
 800b058:	20000c28 	.word	0x20000c28
 800b05c:	20000ad4 	.word	0x20000ad4
 800b060:	20000e34 	.word	0x20000e34
 800b064:	200009d4 	.word	0x200009d4
 800b068:	2000029c 	.word	0x2000029c
 800b06c:	20000328 	.word	0x20000328

0800b070 <get_base>:


uint8_t get_base(){
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
	uint8_t res = 1;									//for return
 800b076:	2301      	movs	r3, #1
 800b078:	71fb      	strb	r3, [r7, #7]

	base_l = ad_l;										//sensor value base L
 800b07a:	4b08      	ldr	r3, [pc, #32]	; (800b09c <get_base+0x2c>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	b29a      	uxth	r2, r3
 800b080:	4b07      	ldr	r3, [pc, #28]	; (800b0a0 <get_base+0x30>)
 800b082:	801a      	strh	r2, [r3, #0]
	base_r = ad_r;										//sensor value base R
 800b084:	4b07      	ldr	r3, [pc, #28]	; (800b0a4 <get_base+0x34>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	b29a      	uxth	r2, r3
 800b08a:	4b07      	ldr	r3, [pc, #28]	; (800b0a8 <get_base+0x38>)
 800b08c:	801a      	strh	r2, [r3, #0]

	return res;											//
 800b08e:	79fb      	ldrb	r3, [r7, #7]
}
 800b090:	4618      	mov	r0, r3
 800b092:	370c      	adds	r7, #12
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr
 800b09c:	200009d4 	.word	0x200009d4
 800b0a0:	20000328 	.word	0x20000328
 800b0a4:	20000e34 	.word	0x20000e34
 800b0a8:	2000029c 	.word	0x2000029c

0800b0ac <get_wall_info>:


void get_wall_info(){
 800b0ac:	b480      	push	{r7}
 800b0ae:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 800b0b0:	4b16      	ldr	r3, [pc, #88]	; (800b10c <get_wall_info+0x60>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 800b0b6:	4b16      	ldr	r3, [pc, #88]	; (800b110 <get_wall_info+0x64>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2b28      	cmp	r3, #40	; 0x28
 800b0bc:	d803      	bhi.n	800b0c6 <get_wall_info+0x1a>
 800b0be:	4b15      	ldr	r3, [pc, #84]	; (800b114 <get_wall_info+0x68>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2b50      	cmp	r3, #80	; 0x50
 800b0c4:	d906      	bls.n	800b0d4 <get_wall_info+0x28>
		wall_info |= 0x88;								//forward check
 800b0c6:	4b11      	ldr	r3, [pc, #68]	; (800b10c <get_wall_info+0x60>)
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	f063 0377 	orn	r3, r3, #119	; 0x77
 800b0ce:	b2da      	uxtb	r2, r3
 800b0d0:	4b0e      	ldr	r3, [pc, #56]	; (800b10c <get_wall_info+0x60>)
 800b0d2:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 800b0d4:	4b10      	ldr	r3, [pc, #64]	; (800b118 <get_wall_info+0x6c>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b32      	cmp	r3, #50	; 0x32
 800b0da:	d906      	bls.n	800b0ea <get_wall_info+0x3e>
		wall_info |= 0x44;								//right check
 800b0dc:	4b0b      	ldr	r3, [pc, #44]	; (800b10c <get_wall_info+0x60>)
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800b0e4:	b2da      	uxtb	r2, r3
 800b0e6:	4b09      	ldr	r3, [pc, #36]	; (800b10c <get_wall_info+0x60>)
 800b0e8:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 800b0ea:	4b0c      	ldr	r3, [pc, #48]	; (800b11c <get_wall_info+0x70>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2b32      	cmp	r3, #50	; 0x32
 800b0f0:	d906      	bls.n	800b100 <get_wall_info+0x54>
		wall_info |= 0x11;								//light check
 800b0f2:	4b06      	ldr	r3, [pc, #24]	; (800b10c <get_wall_info+0x60>)
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	f043 0311 	orr.w	r3, r3, #17
 800b0fa:	b2da      	uxtb	r2, r3
 800b0fc:	4b03      	ldr	r3, [pc, #12]	; (800b10c <get_wall_info+0x60>)
 800b0fe:	701a      	strb	r2, [r3, #0]
	}
}
 800b100:	bf00      	nop
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	200002a4 	.word	0x200002a4
 800b110:	20000ad4 	.word	0x20000ad4
 800b114:	20000c28 	.word	0x20000c28
 800b118:	20000e34 	.word	0x20000e34
 800b11c:	200009d4 	.word	0x200009d4

0800b120 <led_write>:
//led_write
//aモード選択用LEDのON-OFF
//a引数：led1(0=>OFF, 1=>ON), led2(0=>OFF, 1=>ON), led3(0=>OFF, 1=>ON)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write(uint8_t led1, uint8_t led2, uint8_t led3){
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	4603      	mov	r3, r0
 800b128:	71fb      	strb	r3, [r7, #7]
 800b12a:	460b      	mov	r3, r1
 800b12c:	71bb      	strb	r3, [r7, #6]
 800b12e:	4613      	mov	r3, r2
 800b130:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800b132:	79fb      	ldrb	r3, [r7, #7]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d005      	beq.n	800b144 <led_write+0x24>
 800b138:	2201      	movs	r2, #1
 800b13a:	2110      	movs	r1, #16
 800b13c:	4814      	ldr	r0, [pc, #80]	; (800b190 <led_write+0x70>)
 800b13e:	f7f7 f8b9 	bl	80022b4 <HAL_GPIO_WritePin>
 800b142:	e004      	b.n	800b14e <led_write+0x2e>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800b144:	2200      	movs	r2, #0
 800b146:	2110      	movs	r1, #16
 800b148:	4811      	ldr	r0, [pc, #68]	; (800b190 <led_write+0x70>)
 800b14a:	f7f7 f8b3 	bl	80022b4 <HAL_GPIO_WritePin>

	if(led2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800b14e:	79bb      	ldrb	r3, [r7, #6]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d005      	beq.n	800b160 <led_write+0x40>
 800b154:	2201      	movs	r2, #1
 800b156:	2140      	movs	r1, #64	; 0x40
 800b158:	480d      	ldr	r0, [pc, #52]	; (800b190 <led_write+0x70>)
 800b15a:	f7f7 f8ab 	bl	80022b4 <HAL_GPIO_WritePin>
 800b15e:	e004      	b.n	800b16a <led_write+0x4a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800b160:	2200      	movs	r2, #0
 800b162:	2140      	movs	r1, #64	; 0x40
 800b164:	480a      	ldr	r0, [pc, #40]	; (800b190 <led_write+0x70>)
 800b166:	f7f7 f8a5 	bl	80022b4 <HAL_GPIO_WritePin>

	if(led3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800b16a:	797b      	ldrb	r3, [r7, #5]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d005      	beq.n	800b17c <led_write+0x5c>
 800b170:	2201      	movs	r2, #1
 800b172:	2180      	movs	r1, #128	; 0x80
 800b174:	4806      	ldr	r0, [pc, #24]	; (800b190 <led_write+0x70>)
 800b176:	f7f7 f89d 	bl	80022b4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 800b17a:	e004      	b.n	800b186 <led_write+0x66>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800b17c:	2200      	movs	r2, #0
 800b17e:	2180      	movs	r1, #128	; 0x80
 800b180:	4803      	ldr	r0, [pc, #12]	; (800b190 <led_write+0x70>)
 800b182:	f7f7 f897 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800b186:	bf00      	nop
 800b188:	3708      	adds	r7, #8
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	40020000 	.word	0x40020000

0800b194 <full_led_write>:
//full_led_write
//aフルカラーLEDの色選択
//a引数：fulled(0=>OFF, 1=>赤, 2=>緑, 3=>青, 4=>黄, 5=>紫, 6=>青緑, 7=>白)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void full_led_write(uint8_t fulled){
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	4603      	mov	r3, r0
 800b19c:	71fb      	strb	r3, [r7, #7]
	if(fulled == 0){
 800b19e:	79fb      	ldrb	r3, [r7, #7]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d112      	bne.n	800b1ca <full_led_write+0x36>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b1aa:	4856      	ldr	r0, [pc, #344]	; (800b304 <full_led_write+0x170>)
 800b1ac:	f7f7 f882 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b1b6:	4853      	ldr	r0, [pc, #332]	; (800b304 <full_led_write+0x170>)
 800b1b8:	f7f7 f87c 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800b1bc:	2201      	movs	r2, #1
 800b1be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b1c2:	4851      	ldr	r0, [pc, #324]	; (800b308 <full_led_write+0x174>)
 800b1c4:	f7f7 f876 	bl	80022b4 <HAL_GPIO_WritePin>
	else if(fulled == 7){
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 800b1c8:	e098      	b.n	800b2fc <full_led_write+0x168>
	else if(fulled == 1){
 800b1ca:	79fb      	ldrb	r3, [r7, #7]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d112      	bne.n	800b1f6 <full_led_write+0x62>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b1d6:	484b      	ldr	r0, [pc, #300]	; (800b304 <full_led_write+0x170>)
 800b1d8:	f7f7 f86c 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b1dc:	2201      	movs	r2, #1
 800b1de:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b1e2:	4848      	ldr	r0, [pc, #288]	; (800b304 <full_led_write+0x170>)
 800b1e4:	f7f7 f866 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b1ee:	4846      	ldr	r0, [pc, #280]	; (800b308 <full_led_write+0x174>)
 800b1f0:	f7f7 f860 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800b1f4:	e082      	b.n	800b2fc <full_led_write+0x168>
	else if(fulled == 2){
 800b1f6:	79fb      	ldrb	r3, [r7, #7]
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	d112      	bne.n	800b222 <full_led_write+0x8e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b202:	4840      	ldr	r0, [pc, #256]	; (800b304 <full_led_write+0x170>)
 800b204:	f7f7 f856 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b208:	2200      	movs	r2, #0
 800b20a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b20e:	483d      	ldr	r0, [pc, #244]	; (800b304 <full_led_write+0x170>)
 800b210:	f7f7 f850 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800b214:	2201      	movs	r2, #1
 800b216:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b21a:	483b      	ldr	r0, [pc, #236]	; (800b308 <full_led_write+0x174>)
 800b21c:	f7f7 f84a 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800b220:	e06c      	b.n	800b2fc <full_led_write+0x168>
	else if(fulled == 3){
 800b222:	79fb      	ldrb	r3, [r7, #7]
 800b224:	2b03      	cmp	r3, #3
 800b226:	d112      	bne.n	800b24e <full_led_write+0xba>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800b228:	2200      	movs	r2, #0
 800b22a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b22e:	4835      	ldr	r0, [pc, #212]	; (800b304 <full_led_write+0x170>)
 800b230:	f7f7 f840 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b234:	2201      	movs	r2, #1
 800b236:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b23a:	4832      	ldr	r0, [pc, #200]	; (800b304 <full_led_write+0x170>)
 800b23c:	f7f7 f83a 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800b240:	2201      	movs	r2, #1
 800b242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b246:	4830      	ldr	r0, [pc, #192]	; (800b308 <full_led_write+0x174>)
 800b248:	f7f7 f834 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800b24c:	e056      	b.n	800b2fc <full_led_write+0x168>
	else if(fulled == 4){
 800b24e:	79fb      	ldrb	r3, [r7, #7]
 800b250:	2b04      	cmp	r3, #4
 800b252:	d112      	bne.n	800b27a <full_led_write+0xe6>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800b254:	2200      	movs	r2, #0
 800b256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b25a:	482a      	ldr	r0, [pc, #168]	; (800b304 <full_led_write+0x170>)
 800b25c:	f7f7 f82a 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b260:	2200      	movs	r2, #0
 800b262:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b266:	4827      	ldr	r0, [pc, #156]	; (800b304 <full_led_write+0x170>)
 800b268:	f7f7 f824 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800b26c:	2201      	movs	r2, #1
 800b26e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b272:	4825      	ldr	r0, [pc, #148]	; (800b308 <full_led_write+0x174>)
 800b274:	f7f7 f81e 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800b278:	e040      	b.n	800b2fc <full_led_write+0x168>
	else if(fulled == 5){
 800b27a:	79fb      	ldrb	r3, [r7, #7]
 800b27c:	2b05      	cmp	r3, #5
 800b27e:	d112      	bne.n	800b2a6 <full_led_write+0x112>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800b280:	2200      	movs	r2, #0
 800b282:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b286:	481f      	ldr	r0, [pc, #124]	; (800b304 <full_led_write+0x170>)
 800b288:	f7f7 f814 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800b28c:	2201      	movs	r2, #1
 800b28e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b292:	481c      	ldr	r0, [pc, #112]	; (800b304 <full_led_write+0x170>)
 800b294:	f7f7 f80e 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800b298:	2200      	movs	r2, #0
 800b29a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b29e:	481a      	ldr	r0, [pc, #104]	; (800b308 <full_led_write+0x174>)
 800b2a0:	f7f7 f808 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800b2a4:	e02a      	b.n	800b2fc <full_led_write+0x168>
	else if(fulled == 6){
 800b2a6:	79fb      	ldrb	r3, [r7, #7]
 800b2a8:	2b06      	cmp	r3, #6
 800b2aa:	d112      	bne.n	800b2d2 <full_led_write+0x13e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b2b2:	4814      	ldr	r0, [pc, #80]	; (800b304 <full_led_write+0x170>)
 800b2b4:	f7f6 fffe 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b2be:	4811      	ldr	r0, [pc, #68]	; (800b304 <full_led_write+0x170>)
 800b2c0:	f7f6 fff8 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b2ca:	480f      	ldr	r0, [pc, #60]	; (800b308 <full_led_write+0x174>)
 800b2cc:	f7f6 fff2 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800b2d0:	e014      	b.n	800b2fc <full_led_write+0x168>
	else if(fulled == 7){
 800b2d2:	79fb      	ldrb	r3, [r7, #7]
 800b2d4:	2b07      	cmp	r3, #7
 800b2d6:	d111      	bne.n	800b2fc <full_led_write+0x168>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b2de:	4809      	ldr	r0, [pc, #36]	; (800b304 <full_led_write+0x170>)
 800b2e0:	f7f6 ffe8 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b2ea:	4806      	ldr	r0, [pc, #24]	; (800b304 <full_led_write+0x170>)
 800b2ec:	f7f6 ffe2 	bl	80022b4 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b2f6:	4804      	ldr	r0, [pc, #16]	; (800b308 <full_led_write+0x174>)
 800b2f8:	f7f6 ffdc 	bl	80022b4 <HAL_GPIO_WritePin>
}
 800b2fc:	bf00      	nop
 800b2fe:	3708      	adds	r7, #8
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	40020400 	.word	0x40020400
 800b308:	40020800 	.word	0x40020800

0800b30c <sensor_test>:
//sensor_test
//a壁センサーとジャイロセンサーの値確認
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_test(){
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b08c      	sub	sp, #48	; 0x30
 800b310:	af02      	add	r7, sp, #8

	int mode = 0;
 800b312:	2300      	movs	r3, #0
 800b314:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Mode : %d\n", mode);
 800b316:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b318:	487d      	ldr	r0, [pc, #500]	; (800b510 <sensor_test+0x204>)
 800b31a:	f000 fcc5 	bl	800bca8 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b320:	b2db      	uxtb	r3, r3
 800b322:	f003 0301 	and.w	r3, r3, #1
 800b326:	b2d8      	uxtb	r0, r3
 800b328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	f003 0302 	and.w	r3, r3, #2
 800b330:	b2d9      	uxtb	r1, r3
 800b332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b334:	b2db      	uxtb	r3, r3
 800b336:	f003 0304 	and.w	r3, r3, #4
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	461a      	mov	r2, r3
 800b33e:	f7ff feef 	bl	800b120 <led_write>
		  if(dist_r >= 20){
 800b342:	4b74      	ldr	r3, [pc, #464]	; (800b514 <sensor_test+0x208>)
 800b344:	edd3 7a00 	vldr	s15, [r3]
 800b348:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b34c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b354:	db0f      	blt.n	800b376 <sensor_test+0x6a>
			  mode++;
 800b356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b358:	3301      	adds	r3, #1
 800b35a:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 800b35c:	4b6d      	ldr	r3, [pc, #436]	; (800b514 <sensor_test+0x208>)
 800b35e:	f04f 0200 	mov.w	r2, #0
 800b362:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800b364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b366:	2b07      	cmp	r3, #7
 800b368:	dd01      	ble.n	800b36e <sensor_test+0x62>
				  mode = 0;
 800b36a:	2300      	movs	r3, #0
 800b36c:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 800b36e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b370:	4867      	ldr	r0, [pc, #412]	; (800b510 <sensor_test+0x204>)
 800b372:	f000 fc99 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800b376:	4b67      	ldr	r3, [pc, #412]	; (800b514 <sensor_test+0x208>)
 800b378:	edd3 7a00 	vldr	s15, [r3]
 800b37c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b380:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b388:	d80f      	bhi.n	800b3aa <sensor_test+0x9e>
			  mode--;
 800b38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38c:	3b01      	subs	r3, #1
 800b38e:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 800b390:	4b60      	ldr	r3, [pc, #384]	; (800b514 <sensor_test+0x208>)
 800b392:	f04f 0200 	mov.w	r2, #0
 800b396:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800b398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	da01      	bge.n	800b3a2 <sensor_test+0x96>
				  mode = 7;
 800b39e:	2307      	movs	r3, #7
 800b3a0:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 800b3a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3a4:	485a      	ldr	r0, [pc, #360]	; (800b510 <sensor_test+0x204>)
 800b3a6:	f000 fc7f 	bl	800bca8 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800b3aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b3ae:	485a      	ldr	r0, [pc, #360]	; (800b518 <sensor_test+0x20c>)
 800b3b0:	f7f6 ff68 	bl	8002284 <HAL_GPIO_ReadPin>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d1b1      	bne.n	800b31e <sensor_test+0x12>
			  HAL_Delay(50);
 800b3ba:	2032      	movs	r0, #50	; 0x32
 800b3bc:	f7f5 fe06 	bl	8000fcc <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800b3c0:	bf00      	nop
 800b3c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b3c6:	4854      	ldr	r0, [pc, #336]	; (800b518 <sensor_test+0x20c>)
 800b3c8:	f7f6 ff5c 	bl	8002284 <HAL_GPIO_ReadPin>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d0f7      	beq.n	800b3c2 <sensor_test+0xb6>
			  switch(mode){
 800b3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d4:	2b07      	cmp	r3, #7
 800b3d6:	d8a2      	bhi.n	800b31e <sensor_test+0x12>
 800b3d8:	a201      	add	r2, pc, #4	; (adr r2, 800b3e0 <sensor_test+0xd4>)
 800b3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3de:	bf00      	nop
 800b3e0:	0800b401 	.word	0x0800b401
 800b3e4:	0800b407 	.word	0x0800b407
 800b3e8:	0800b459 	.word	0x0800b459
 800b3ec:	0800b31f 	.word	0x0800b31f
 800b3f0:	0800b31f 	.word	0x0800b31f
 800b3f4:	0800b31f 	.word	0x0800b31f
 800b3f8:	0800b31f 	.word	0x0800b31f
 800b3fc:	0800b31f 	.word	0x0800b31f
				case 0:
					get_base();
 800b400:	f7ff fe36 	bl	800b070 <get_base>
					break;
 800b404:	e083      	b.n	800b50e <sensor_test+0x202>
				case 1:
			  		  //----Wall sensor check----
			  		  printf("Wall Sensor Check.\n");
 800b406:	4845      	ldr	r0, [pc, #276]	; (800b51c <sensor_test+0x210>)
 800b408:	f000 fcc2 	bl	800bd90 <puts>
			  		  while(1){
			  			  get_wall_info();
 800b40c:	f7ff fe4e 	bl	800b0ac <get_wall_info>
			  			  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 800b410:	4b43      	ldr	r3, [pc, #268]	; (800b520 <sensor_test+0x214>)
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	f003 0311 	and.w	r3, r3, #17
 800b418:	b2d8      	uxtb	r0, r3
 800b41a:	4b41      	ldr	r3, [pc, #260]	; (800b520 <sensor_test+0x214>)
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b422:	b2d9      	uxtb	r1, r3
 800b424:	4b3e      	ldr	r3, [pc, #248]	; (800b520 <sensor_test+0x214>)
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	461a      	mov	r2, r3
 800b430:	f7ff fe76 	bl	800b120 <led_write>
			  			  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 800b434:	4b3b      	ldr	r3, [pc, #236]	; (800b524 <sensor_test+0x218>)
 800b436:	6819      	ldr	r1, [r3, #0]
 800b438:	4b3b      	ldr	r3, [pc, #236]	; (800b528 <sensor_test+0x21c>)
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	4b3b      	ldr	r3, [pc, #236]	; (800b52c <sensor_test+0x220>)
 800b43e:	6818      	ldr	r0, [r3, #0]
 800b440:	4b3b      	ldr	r3, [pc, #236]	; (800b530 <sensor_test+0x224>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	4603      	mov	r3, r0
 800b448:	483a      	ldr	r0, [pc, #232]	; (800b534 <sensor_test+0x228>)
 800b44a:	f000 fc2d 	bl	800bca8 <iprintf>
			  			  HAL_Delay(333);
 800b44e:	f240 104d 	movw	r0, #333	; 0x14d
 800b452:	f7f5 fdbb 	bl	8000fcc <HAL_Delay>
			  			  get_wall_info();
 800b456:	e7d9      	b.n	800b40c <sensor_test+0x100>
						}
					break;
				case 2:
					//----Gyro sensor check----
					printf("Gyro Sensor Check.\n");
 800b458:	4837      	ldr	r0, [pc, #220]	; (800b538 <sensor_test+0x22c>)
 800b45a:	f000 fc99 	bl	800bd90 <puts>
					int accel_x, accel_y, accel_z;
					int gyro_x, gyro_y, gyro_z;
					int deg_x, deg_y, deg_z;
			  		  while(1){
			  			  accel_x = accel_read_x();
 800b45e:	f7fc fa25 	bl	80078ac <accel_read_x>
 800b462:	eef0 7a40 	vmov.f32	s15, s0
 800b466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b46a:	ee17 3a90 	vmov	r3, s15
 800b46e:	623b      	str	r3, [r7, #32]
			  			  accel_y = accel_read_y();
 800b470:	f7fc fa42 	bl	80078f8 <accel_read_y>
 800b474:	eef0 7a40 	vmov.f32	s15, s0
 800b478:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b47c:	ee17 3a90 	vmov	r3, s15
 800b480:	61fb      	str	r3, [r7, #28]
			  			  accel_z = accel_read_z();
 800b482:	f7fc fa5f 	bl	8007944 <accel_read_z>
 800b486:	eef0 7a40 	vmov.f32	s15, s0
 800b48a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b48e:	ee17 3a90 	vmov	r3, s15
 800b492:	61bb      	str	r3, [r7, #24]
			  			  gyro_x = gyro_read_x();
 800b494:	f7fc fa80 	bl	8007998 <gyro_read_x>
 800b498:	eef0 7a40 	vmov.f32	s15, s0
 800b49c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4a0:	ee17 3a90 	vmov	r3, s15
 800b4a4:	617b      	str	r3, [r7, #20]
			  			  gyro_y = gyro_read_y();
 800b4a6:	f7fc fab3 	bl	8007a10 <gyro_read_y>
 800b4aa:	eef0 7a40 	vmov.f32	s15, s0
 800b4ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4b2:	ee17 3a90 	vmov	r3, s15
 800b4b6:	613b      	str	r3, [r7, #16]
			  			  gyro_z = gyro_read_z();
 800b4b8:	f7fc fae6 	bl	8007a88 <gyro_read_z>
 800b4bc:	eef0 7a40 	vmov.f32	s15, s0
 800b4c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4c4:	ee17 3a90 	vmov	r3, s15
 800b4c8:	60fb      	str	r3, [r7, #12]
			  			  deg_x = degree_x;
 800b4ca:	4b1c      	ldr	r3, [pc, #112]	; (800b53c <sensor_test+0x230>)
 800b4cc:	edd3 7a00 	vldr	s15, [r3]
 800b4d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4d4:	ee17 3a90 	vmov	r3, s15
 800b4d8:	60bb      	str	r3, [r7, #8]
			  			  deg_y = degree_y;
 800b4da:	4b19      	ldr	r3, [pc, #100]	; (800b540 <sensor_test+0x234>)
 800b4dc:	edd3 7a00 	vldr	s15, [r3]
 800b4e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4e4:	ee17 3a90 	vmov	r3, s15
 800b4e8:	607b      	str	r3, [r7, #4]
			  			  deg_z = degree_z;
 800b4ea:	4b16      	ldr	r3, [pc, #88]	; (800b544 <sensor_test+0x238>)
 800b4ec:	edd3 7a00 	vldr	s15, [r3]
 800b4f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4f4:	ee17 3a90 	vmov	r3, s15
 800b4f8:	603b      	str	r3, [r7, #0]

			  			  printf("Accel x: %3d, y: %3d, z: %3d\n", accel_x, accel_y, accel_z);
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	69fa      	ldr	r2, [r7, #28]
 800b4fe:	6a39      	ldr	r1, [r7, #32]
 800b500:	4811      	ldr	r0, [pc, #68]	; (800b548 <sensor_test+0x23c>)
 800b502:	f000 fbd1 	bl	800bca8 <iprintf>
			  			  //printf("Gyro  x: %3d, y: %3d, z: %3d\n", gyro_x, gyro_y, gyro_z);
			  			  //printf("Deg   x: %3d, y: %3d, z: %3d\n", deg_x, deg_y, deg_z);
			  			  HAL_Delay(111);
 800b506:	206f      	movs	r0, #111	; 0x6f
 800b508:	f7f5 fd60 	bl	8000fcc <HAL_Delay>
			  			  accel_x = accel_read_x();
 800b50c:	e7a7      	b.n	800b45e <sensor_test+0x152>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b50e:	e706      	b.n	800b31e <sensor_test+0x12>
 800b510:	0800d200 	.word	0x0800d200
 800b514:	200009c4 	.word	0x200009c4
 800b518:	40020000 	.word	0x40020000
 800b51c:	0800d20c 	.word	0x0800d20c
 800b520:	200002a4 	.word	0x200002a4
 800b524:	200009d4 	.word	0x200009d4
 800b528:	20000c28 	.word	0x20000c28
 800b52c:	20000ad4 	.word	0x20000ad4
 800b530:	20000e34 	.word	0x20000e34
 800b534:	0800d220 	.word	0x0800d220
 800b538:	0800d250 	.word	0x0800d250
 800b53c:	2000032c 	.word	0x2000032c
 800b540:	20000e40 	.word	0x20000e40
 800b544:	20000a34 	.word	0x20000a34
 800b548:	0800d264 	.word	0x0800d264

0800b54c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b552:	2300      	movs	r3, #0
 800b554:	607b      	str	r3, [r7, #4]
 800b556:	4b10      	ldr	r3, [pc, #64]	; (800b598 <HAL_MspInit+0x4c>)
 800b558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b55a:	4a0f      	ldr	r2, [pc, #60]	; (800b598 <HAL_MspInit+0x4c>)
 800b55c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b560:	6453      	str	r3, [r2, #68]	; 0x44
 800b562:	4b0d      	ldr	r3, [pc, #52]	; (800b598 <HAL_MspInit+0x4c>)
 800b564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b56a:	607b      	str	r3, [r7, #4]
 800b56c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b56e:	2300      	movs	r3, #0
 800b570:	603b      	str	r3, [r7, #0]
 800b572:	4b09      	ldr	r3, [pc, #36]	; (800b598 <HAL_MspInit+0x4c>)
 800b574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b576:	4a08      	ldr	r2, [pc, #32]	; (800b598 <HAL_MspInit+0x4c>)
 800b578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b57c:	6413      	str	r3, [r2, #64]	; 0x40
 800b57e:	4b06      	ldr	r3, [pc, #24]	; (800b598 <HAL_MspInit+0x4c>)
 800b580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b586:	603b      	str	r3, [r7, #0]
 800b588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b58a:	bf00      	nop
 800b58c:	370c      	adds	r7, #12
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	40023800 	.word	0x40023800

0800b59c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08a      	sub	sp, #40	; 0x28
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5a4:	f107 0314 	add.w	r3, r7, #20
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	601a      	str	r2, [r3, #0]
 800b5ac:	605a      	str	r2, [r3, #4]
 800b5ae:	609a      	str	r2, [r3, #8]
 800b5b0:	60da      	str	r2, [r3, #12]
 800b5b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a17      	ldr	r2, [pc, #92]	; (800b618 <HAL_ADC_MspInit+0x7c>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d127      	bne.n	800b60e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b5be:	2300      	movs	r3, #0
 800b5c0:	613b      	str	r3, [r7, #16]
 800b5c2:	4b16      	ldr	r3, [pc, #88]	; (800b61c <HAL_ADC_MspInit+0x80>)
 800b5c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5c6:	4a15      	ldr	r2, [pc, #84]	; (800b61c <HAL_ADC_MspInit+0x80>)
 800b5c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5cc:	6453      	str	r3, [r2, #68]	; 0x44
 800b5ce:	4b13      	ldr	r3, [pc, #76]	; (800b61c <HAL_ADC_MspInit+0x80>)
 800b5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5d6:	613b      	str	r3, [r7, #16]
 800b5d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5da:	2300      	movs	r3, #0
 800b5dc:	60fb      	str	r3, [r7, #12]
 800b5de:	4b0f      	ldr	r3, [pc, #60]	; (800b61c <HAL_ADC_MspInit+0x80>)
 800b5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5e2:	4a0e      	ldr	r2, [pc, #56]	; (800b61c <HAL_ADC_MspInit+0x80>)
 800b5e4:	f043 0301 	orr.w	r3, r3, #1
 800b5e8:	6313      	str	r3, [r2, #48]	; 0x30
 800b5ea:	4b0c      	ldr	r3, [pc, #48]	; (800b61c <HAL_ADC_MspInit+0x80>)
 800b5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ee:	f003 0301 	and.w	r3, r3, #1
 800b5f2:	60fb      	str	r3, [r7, #12]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800b5f6:	230f      	movs	r3, #15
 800b5f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5fe:	2300      	movs	r3, #0
 800b600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b602:	f107 0314 	add.w	r3, r7, #20
 800b606:	4619      	mov	r1, r3
 800b608:	4805      	ldr	r0, [pc, #20]	; (800b620 <HAL_ADC_MspInit+0x84>)
 800b60a:	f7f6 fca1 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800b60e:	bf00      	nop
 800b610:	3728      	adds	r7, #40	; 0x28
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	40012000 	.word	0x40012000
 800b61c:	40023800 	.word	0x40023800
 800b620:	40020000 	.word	0x40020000

0800b624 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b08a      	sub	sp, #40	; 0x28
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b62c:	f107 0314 	add.w	r3, r7, #20
 800b630:	2200      	movs	r2, #0
 800b632:	601a      	str	r2, [r3, #0]
 800b634:	605a      	str	r2, [r3, #4]
 800b636:	609a      	str	r2, [r3, #8]
 800b638:	60da      	str	r2, [r3, #12]
 800b63a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a19      	ldr	r2, [pc, #100]	; (800b6a8 <HAL_SPI_MspInit+0x84>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d12c      	bne.n	800b6a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800b646:	2300      	movs	r3, #0
 800b648:	613b      	str	r3, [r7, #16]
 800b64a:	4b18      	ldr	r3, [pc, #96]	; (800b6ac <HAL_SPI_MspInit+0x88>)
 800b64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b64e:	4a17      	ldr	r2, [pc, #92]	; (800b6ac <HAL_SPI_MspInit+0x88>)
 800b650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b654:	6413      	str	r3, [r2, #64]	; 0x40
 800b656:	4b15      	ldr	r3, [pc, #84]	; (800b6ac <HAL_SPI_MspInit+0x88>)
 800b658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b65e:	613b      	str	r3, [r7, #16]
 800b660:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b662:	2300      	movs	r3, #0
 800b664:	60fb      	str	r3, [r7, #12]
 800b666:	4b11      	ldr	r3, [pc, #68]	; (800b6ac <HAL_SPI_MspInit+0x88>)
 800b668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b66a:	4a10      	ldr	r2, [pc, #64]	; (800b6ac <HAL_SPI_MspInit+0x88>)
 800b66c:	f043 0304 	orr.w	r3, r3, #4
 800b670:	6313      	str	r3, [r2, #48]	; 0x30
 800b672:	4b0e      	ldr	r3, [pc, #56]	; (800b6ac <HAL_SPI_MspInit+0x88>)
 800b674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b676:	f003 0304 	and.w	r3, r3, #4
 800b67a:	60fb      	str	r3, [r7, #12]
 800b67c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800b67e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b684:	2302      	movs	r3, #2
 800b686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b688:	2300      	movs	r3, #0
 800b68a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b68c:	2303      	movs	r3, #3
 800b68e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800b690:	2306      	movs	r3, #6
 800b692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b694:	f107 0314 	add.w	r3, r7, #20
 800b698:	4619      	mov	r1, r3
 800b69a:	4805      	ldr	r0, [pc, #20]	; (800b6b0 <HAL_SPI_MspInit+0x8c>)
 800b69c:	f7f6 fc58 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800b6a0:	bf00      	nop
 800b6a2:	3728      	adds	r7, #40	; 0x28
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	40003c00 	.word	0x40003c00
 800b6ac:	40023800 	.word	0x40023800
 800b6b0:	40020800 	.word	0x40020800

0800b6b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6c4:	d10e      	bne.n	800b6e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	617b      	str	r3, [r7, #20]
 800b6ca:	4b20      	ldr	r3, [pc, #128]	; (800b74c <HAL_TIM_Base_MspInit+0x98>)
 800b6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ce:	4a1f      	ldr	r2, [pc, #124]	; (800b74c <HAL_TIM_Base_MspInit+0x98>)
 800b6d0:	f043 0301 	orr.w	r3, r3, #1
 800b6d4:	6413      	str	r3, [r2, #64]	; 0x40
 800b6d6:	4b1d      	ldr	r3, [pc, #116]	; (800b74c <HAL_TIM_Base_MspInit+0x98>)
 800b6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6da:	f003 0301 	and.w	r3, r3, #1
 800b6de:	617b      	str	r3, [r7, #20]
 800b6e0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800b6e2:	e02e      	b.n	800b742 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a19      	ldr	r2, [pc, #100]	; (800b750 <HAL_TIM_Base_MspInit+0x9c>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d10e      	bne.n	800b70c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	613b      	str	r3, [r7, #16]
 800b6f2:	4b16      	ldr	r3, [pc, #88]	; (800b74c <HAL_TIM_Base_MspInit+0x98>)
 800b6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f6:	4a15      	ldr	r2, [pc, #84]	; (800b74c <HAL_TIM_Base_MspInit+0x98>)
 800b6f8:	f043 0302 	orr.w	r3, r3, #2
 800b6fc:	6413      	str	r3, [r2, #64]	; 0x40
 800b6fe:	4b13      	ldr	r3, [pc, #76]	; (800b74c <HAL_TIM_Base_MspInit+0x98>)
 800b700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b702:	f003 0302 	and.w	r3, r3, #2
 800b706:	613b      	str	r3, [r7, #16]
 800b708:	693b      	ldr	r3, [r7, #16]
}
 800b70a:	e01a      	b.n	800b742 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a10      	ldr	r2, [pc, #64]	; (800b754 <HAL_TIM_Base_MspInit+0xa0>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d115      	bne.n	800b742 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b716:	2300      	movs	r3, #0
 800b718:	60fb      	str	r3, [r7, #12]
 800b71a:	4b0c      	ldr	r3, [pc, #48]	; (800b74c <HAL_TIM_Base_MspInit+0x98>)
 800b71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b71e:	4a0b      	ldr	r2, [pc, #44]	; (800b74c <HAL_TIM_Base_MspInit+0x98>)
 800b720:	f043 0310 	orr.w	r3, r3, #16
 800b724:	6413      	str	r3, [r2, #64]	; 0x40
 800b726:	4b09      	ldr	r3, [pc, #36]	; (800b74c <HAL_TIM_Base_MspInit+0x98>)
 800b728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b72a:	f003 0310 	and.w	r3, r3, #16
 800b72e:	60fb      	str	r3, [r7, #12]
 800b730:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800b732:	2200      	movs	r2, #0
 800b734:	2100      	movs	r1, #0
 800b736:	2036      	movs	r0, #54	; 0x36
 800b738:	f7f6 f8ff 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b73c:	2036      	movs	r0, #54	; 0x36
 800b73e:	f7f6 f918 	bl	8001972 <HAL_NVIC_EnableIRQ>
}
 800b742:	bf00      	nop
 800b744:	3718      	adds	r7, #24
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	40023800 	.word	0x40023800
 800b750:	40000400 	.word	0x40000400
 800b754:	40001000 	.word	0x40001000

0800b758 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b08c      	sub	sp, #48	; 0x30
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b760:	f107 031c 	add.w	r3, r7, #28
 800b764:	2200      	movs	r2, #0
 800b766:	601a      	str	r2, [r3, #0]
 800b768:	605a      	str	r2, [r3, #4]
 800b76a:	609a      	str	r2, [r3, #8]
 800b76c:	60da      	str	r2, [r3, #12]
 800b76e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a32      	ldr	r2, [pc, #200]	; (800b840 <HAL_TIM_Encoder_MspInit+0xe8>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d12c      	bne.n	800b7d4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b77a:	2300      	movs	r3, #0
 800b77c:	61bb      	str	r3, [r7, #24]
 800b77e:	4b31      	ldr	r3, [pc, #196]	; (800b844 <HAL_TIM_Encoder_MspInit+0xec>)
 800b780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b782:	4a30      	ldr	r2, [pc, #192]	; (800b844 <HAL_TIM_Encoder_MspInit+0xec>)
 800b784:	f043 0304 	orr.w	r3, r3, #4
 800b788:	6413      	str	r3, [r2, #64]	; 0x40
 800b78a:	4b2e      	ldr	r3, [pc, #184]	; (800b844 <HAL_TIM_Encoder_MspInit+0xec>)
 800b78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b78e:	f003 0304 	and.w	r3, r3, #4
 800b792:	61bb      	str	r3, [r7, #24]
 800b794:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b796:	2300      	movs	r3, #0
 800b798:	617b      	str	r3, [r7, #20]
 800b79a:	4b2a      	ldr	r3, [pc, #168]	; (800b844 <HAL_TIM_Encoder_MspInit+0xec>)
 800b79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79e:	4a29      	ldr	r2, [pc, #164]	; (800b844 <HAL_TIM_Encoder_MspInit+0xec>)
 800b7a0:	f043 0302 	orr.w	r3, r3, #2
 800b7a4:	6313      	str	r3, [r2, #48]	; 0x30
 800b7a6:	4b27      	ldr	r3, [pc, #156]	; (800b844 <HAL_TIM_Encoder_MspInit+0xec>)
 800b7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7aa:	f003 0302 	and.w	r3, r3, #2
 800b7ae:	617b      	str	r3, [r7, #20]
 800b7b0:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b7b2:	23c0      	movs	r3, #192	; 0xc0
 800b7b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7b6:	2302      	movs	r3, #2
 800b7b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800b7c2:	2302      	movs	r3, #2
 800b7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b7c6:	f107 031c 	add.w	r3, r7, #28
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	481e      	ldr	r0, [pc, #120]	; (800b848 <HAL_TIM_Encoder_MspInit+0xf0>)
 800b7ce:	f7f6 fbbf 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800b7d2:	e030      	b.n	800b836 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a1c      	ldr	r2, [pc, #112]	; (800b84c <HAL_TIM_Encoder_MspInit+0xf4>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d12b      	bne.n	800b836 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800b7de:	2300      	movs	r3, #0
 800b7e0:	613b      	str	r3, [r7, #16]
 800b7e2:	4b18      	ldr	r3, [pc, #96]	; (800b844 <HAL_TIM_Encoder_MspInit+0xec>)
 800b7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7e6:	4a17      	ldr	r2, [pc, #92]	; (800b844 <HAL_TIM_Encoder_MspInit+0xec>)
 800b7e8:	f043 0302 	orr.w	r3, r3, #2
 800b7ec:	6453      	str	r3, [r2, #68]	; 0x44
 800b7ee:	4b15      	ldr	r3, [pc, #84]	; (800b844 <HAL_TIM_Encoder_MspInit+0xec>)
 800b7f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7f2:	f003 0302 	and.w	r3, r3, #2
 800b7f6:	613b      	str	r3, [r7, #16]
 800b7f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	60fb      	str	r3, [r7, #12]
 800b7fe:	4b11      	ldr	r3, [pc, #68]	; (800b844 <HAL_TIM_Encoder_MspInit+0xec>)
 800b800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b802:	4a10      	ldr	r2, [pc, #64]	; (800b844 <HAL_TIM_Encoder_MspInit+0xec>)
 800b804:	f043 0304 	orr.w	r3, r3, #4
 800b808:	6313      	str	r3, [r2, #48]	; 0x30
 800b80a:	4b0e      	ldr	r3, [pc, #56]	; (800b844 <HAL_TIM_Encoder_MspInit+0xec>)
 800b80c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b80e:	f003 0304 	and.w	r3, r3, #4
 800b812:	60fb      	str	r3, [r7, #12]
 800b814:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b816:	23c0      	movs	r3, #192	; 0xc0
 800b818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b81a:	2302      	movs	r3, #2
 800b81c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b81e:	2300      	movs	r3, #0
 800b820:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b822:	2300      	movs	r3, #0
 800b824:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800b826:	2303      	movs	r3, #3
 800b828:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b82a:	f107 031c 	add.w	r3, r7, #28
 800b82e:	4619      	mov	r1, r3
 800b830:	4807      	ldr	r0, [pc, #28]	; (800b850 <HAL_TIM_Encoder_MspInit+0xf8>)
 800b832:	f7f6 fb8d 	bl	8001f50 <HAL_GPIO_Init>
}
 800b836:	bf00      	nop
 800b838:	3730      	adds	r7, #48	; 0x30
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	40000800 	.word	0x40000800
 800b844:	40023800 	.word	0x40023800
 800b848:	40020400 	.word	0x40020400
 800b84c:	40010400 	.word	0x40010400
 800b850:	40020800 	.word	0x40020800

0800b854 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b08a      	sub	sp, #40	; 0x28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b85c:	f107 0314 	add.w	r3, r7, #20
 800b860:	2200      	movs	r2, #0
 800b862:	601a      	str	r2, [r3, #0]
 800b864:	605a      	str	r2, [r3, #4]
 800b866:	609a      	str	r2, [r3, #8]
 800b868:	60da      	str	r2, [r3, #12]
 800b86a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b874:	d13d      	bne.n	800b8f2 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b876:	2300      	movs	r3, #0
 800b878:	613b      	str	r3, [r7, #16]
 800b87a:	4b31      	ldr	r3, [pc, #196]	; (800b940 <HAL_TIM_MspPostInit+0xec>)
 800b87c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b87e:	4a30      	ldr	r2, [pc, #192]	; (800b940 <HAL_TIM_MspPostInit+0xec>)
 800b880:	f043 0301 	orr.w	r3, r3, #1
 800b884:	6313      	str	r3, [r2, #48]	; 0x30
 800b886:	4b2e      	ldr	r3, [pc, #184]	; (800b940 <HAL_TIM_MspPostInit+0xec>)
 800b888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b88a:	f003 0301 	and.w	r3, r3, #1
 800b88e:	613b      	str	r3, [r7, #16]
 800b890:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b892:	2300      	movs	r3, #0
 800b894:	60fb      	str	r3, [r7, #12]
 800b896:	4b2a      	ldr	r3, [pc, #168]	; (800b940 <HAL_TIM_MspPostInit+0xec>)
 800b898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b89a:	4a29      	ldr	r2, [pc, #164]	; (800b940 <HAL_TIM_MspPostInit+0xec>)
 800b89c:	f043 0302 	orr.w	r3, r3, #2
 800b8a0:	6313      	str	r3, [r2, #48]	; 0x30
 800b8a2:	4b27      	ldr	r3, [pc, #156]	; (800b940 <HAL_TIM_MspPostInit+0xec>)
 800b8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a6:	f003 0302 	and.w	r3, r3, #2
 800b8aa:	60fb      	str	r3, [r7, #12]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800b8ae:	2320      	movs	r3, #32
 800b8b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8b2:	2302      	movs	r3, #2
 800b8b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8c2:	f107 0314 	add.w	r3, r7, #20
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	481e      	ldr	r0, [pc, #120]	; (800b944 <HAL_TIM_MspPostInit+0xf0>)
 800b8ca:	f7f6 fb41 	bl	8001f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800b8ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b8d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8d4:	2302      	movs	r3, #2
 800b8d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b8e4:	f107 0314 	add.w	r3, r7, #20
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	4817      	ldr	r0, [pc, #92]	; (800b948 <HAL_TIM_MspPostInit+0xf4>)
 800b8ec:	f7f6 fb30 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800b8f0:	e022      	b.n	800b938 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a15      	ldr	r2, [pc, #84]	; (800b94c <HAL_TIM_MspPostInit+0xf8>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d11d      	bne.n	800b938 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	60bb      	str	r3, [r7, #8]
 800b900:	4b0f      	ldr	r3, [pc, #60]	; (800b940 <HAL_TIM_MspPostInit+0xec>)
 800b902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b904:	4a0e      	ldr	r2, [pc, #56]	; (800b940 <HAL_TIM_MspPostInit+0xec>)
 800b906:	f043 0302 	orr.w	r3, r3, #2
 800b90a:	6313      	str	r3, [r2, #48]	; 0x30
 800b90c:	4b0c      	ldr	r3, [pc, #48]	; (800b940 <HAL_TIM_MspPostInit+0xec>)
 800b90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b910:	f003 0302 	and.w	r3, r3, #2
 800b914:	60bb      	str	r3, [r7, #8]
 800b916:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800b918:	2320      	movs	r3, #32
 800b91a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b91c:	2302      	movs	r3, #2
 800b91e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b920:	2300      	movs	r3, #0
 800b922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b924:	2300      	movs	r3, #0
 800b926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b928:	2302      	movs	r3, #2
 800b92a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b92c:	f107 0314 	add.w	r3, r7, #20
 800b930:	4619      	mov	r1, r3
 800b932:	4805      	ldr	r0, [pc, #20]	; (800b948 <HAL_TIM_MspPostInit+0xf4>)
 800b934:	f7f6 fb0c 	bl	8001f50 <HAL_GPIO_Init>
}
 800b938:	bf00      	nop
 800b93a:	3728      	adds	r7, #40	; 0x28
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	40023800 	.word	0x40023800
 800b944:	40020000 	.word	0x40020000
 800b948:	40020400 	.word	0x40020400
 800b94c:	40000400 	.word	0x40000400

0800b950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b08a      	sub	sp, #40	; 0x28
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b958:	f107 0314 	add.w	r3, r7, #20
 800b95c:	2200      	movs	r2, #0
 800b95e:	601a      	str	r2, [r3, #0]
 800b960:	605a      	str	r2, [r3, #4]
 800b962:	609a      	str	r2, [r3, #8]
 800b964:	60da      	str	r2, [r3, #12]
 800b966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a19      	ldr	r2, [pc, #100]	; (800b9d4 <HAL_UART_MspInit+0x84>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d12c      	bne.n	800b9cc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b972:	2300      	movs	r3, #0
 800b974:	613b      	str	r3, [r7, #16]
 800b976:	4b18      	ldr	r3, [pc, #96]	; (800b9d8 <HAL_UART_MspInit+0x88>)
 800b978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b97a:	4a17      	ldr	r2, [pc, #92]	; (800b9d8 <HAL_UART_MspInit+0x88>)
 800b97c:	f043 0310 	orr.w	r3, r3, #16
 800b980:	6453      	str	r3, [r2, #68]	; 0x44
 800b982:	4b15      	ldr	r3, [pc, #84]	; (800b9d8 <HAL_UART_MspInit+0x88>)
 800b984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b986:	f003 0310 	and.w	r3, r3, #16
 800b98a:	613b      	str	r3, [r7, #16]
 800b98c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b98e:	2300      	movs	r3, #0
 800b990:	60fb      	str	r3, [r7, #12]
 800b992:	4b11      	ldr	r3, [pc, #68]	; (800b9d8 <HAL_UART_MspInit+0x88>)
 800b994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b996:	4a10      	ldr	r2, [pc, #64]	; (800b9d8 <HAL_UART_MspInit+0x88>)
 800b998:	f043 0301 	orr.w	r3, r3, #1
 800b99c:	6313      	str	r3, [r2, #48]	; 0x30
 800b99e:	4b0e      	ldr	r3, [pc, #56]	; (800b9d8 <HAL_UART_MspInit+0x88>)
 800b9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9a2:	f003 0301 	and.w	r3, r3, #1
 800b9a6:	60fb      	str	r3, [r7, #12]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b9aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b9ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9b0:	2302      	movs	r3, #2
 800b9b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9b8:	2303      	movs	r3, #3
 800b9ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b9bc:	2307      	movs	r3, #7
 800b9be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9c0:	f107 0314 	add.w	r3, r7, #20
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	4805      	ldr	r0, [pc, #20]	; (800b9dc <HAL_UART_MspInit+0x8c>)
 800b9c8:	f7f6 fac2 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b9cc:	bf00      	nop
 800b9ce:	3728      	adds	r7, #40	; 0x28
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	40011000 	.word	0x40011000
 800b9d8:	40023800 	.word	0x40023800
 800b9dc:	40020000 	.word	0x40020000

0800b9e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b9e4:	bf00      	nop
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr

0800b9ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b9f2:	e7fe      	b.n	800b9f2 <HardFault_Handler+0x4>

0800b9f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b9f8:	e7fe      	b.n	800b9f8 <MemManage_Handler+0x4>

0800b9fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b9fa:	b480      	push	{r7}
 800b9fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b9fe:	e7fe      	b.n	800b9fe <BusFault_Handler+0x4>

0800ba00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ba00:	b480      	push	{r7}
 800ba02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ba04:	e7fe      	b.n	800ba04 <UsageFault_Handler+0x4>

0800ba06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ba06:	b480      	push	{r7}
 800ba08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ba0a:	bf00      	nop
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ba14:	b480      	push	{r7}
 800ba16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ba18:	bf00      	nop
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ba22:	b480      	push	{r7}
 800ba24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ba26:	bf00      	nop
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ba34:	f7f5 faaa 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ba38:	bf00      	nop
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800ba40:	4802      	ldr	r0, [pc, #8]	; (800ba4c <TIM6_DAC_IRQHandler+0x10>)
 800ba42:	f7f7 ff3a 	bl	80038ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800ba46:	bf00      	nop
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	20000a88 	.word	0x20000a88

0800ba50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b086      	sub	sp, #24
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	617b      	str	r3, [r7, #20]
 800ba60:	e00a      	b.n	800ba78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800ba62:	f3af 8000 	nop.w
 800ba66:	4601      	mov	r1, r0
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	1c5a      	adds	r2, r3, #1
 800ba6c:	60ba      	str	r2, [r7, #8]
 800ba6e:	b2ca      	uxtb	r2, r1
 800ba70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	3301      	adds	r3, #1
 800ba76:	617b      	str	r3, [r7, #20]
 800ba78:	697a      	ldr	r2, [r7, #20]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	dbf0      	blt.n	800ba62 <_read+0x12>
	}

return len;
 800ba80:	687b      	ldr	r3, [r7, #4]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3718      	adds	r7, #24
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b086      	sub	sp, #24
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	60f8      	str	r0, [r7, #12]
 800ba92:	60b9      	str	r1, [r7, #8]
 800ba94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba96:	2300      	movs	r3, #0
 800ba98:	617b      	str	r3, [r7, #20]
 800ba9a:	e009      	b.n	800bab0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	1c5a      	adds	r2, r3, #1
 800baa0:	60ba      	str	r2, [r7, #8]
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fc f82b 	bl	8007b00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	3301      	adds	r3, #1
 800baae:	617b      	str	r3, [r7, #20]
 800bab0:	697a      	ldr	r2, [r7, #20]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	dbf1      	blt.n	800ba9c <_write+0x12>
	}
	return len;
 800bab8:	687b      	ldr	r3, [r7, #4]
}
 800baba:	4618      	mov	r0, r3
 800babc:	3718      	adds	r7, #24
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <_close>:

int _close(int file)
{
 800bac2:	b480      	push	{r7}
 800bac4:	b083      	sub	sp, #12
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
	return -1;
 800baca:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bace:	4618      	mov	r0, r3
 800bad0:	370c      	adds	r7, #12
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bada:	b480      	push	{r7}
 800badc:	b083      	sub	sp, #12
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
 800bae2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800baea:	605a      	str	r2, [r3, #4]
	return 0;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	370c      	adds	r7, #12
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <_isatty>:

int _isatty(int file)
{
 800bafa:	b480      	push	{r7}
 800bafc:	b083      	sub	sp, #12
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
	return 1;
 800bb02:	2301      	movs	r3, #1
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b085      	sub	sp, #20
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	607a      	str	r2, [r7, #4]
	return 0;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3714      	adds	r7, #20
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr
	...

0800bb2c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800bb34:	4b11      	ldr	r3, [pc, #68]	; (800bb7c <_sbrk+0x50>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d102      	bne.n	800bb42 <_sbrk+0x16>
		heap_end = &end;
 800bb3c:	4b0f      	ldr	r3, [pc, #60]	; (800bb7c <_sbrk+0x50>)
 800bb3e:	4a10      	ldr	r2, [pc, #64]	; (800bb80 <_sbrk+0x54>)
 800bb40:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800bb42:	4b0e      	ldr	r3, [pc, #56]	; (800bb7c <_sbrk+0x50>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800bb48:	4b0c      	ldr	r3, [pc, #48]	; (800bb7c <_sbrk+0x50>)
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4413      	add	r3, r2
 800bb50:	466a      	mov	r2, sp
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d907      	bls.n	800bb66 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800bb56:	f000 f875 	bl	800bc44 <__errno>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	230c      	movs	r3, #12
 800bb5e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800bb60:	f04f 33ff 	mov.w	r3, #4294967295
 800bb64:	e006      	b.n	800bb74 <_sbrk+0x48>
	}

	heap_end += incr;
 800bb66:	4b05      	ldr	r3, [pc, #20]	; (800bb7c <_sbrk+0x50>)
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	4a03      	ldr	r2, [pc, #12]	; (800bb7c <_sbrk+0x50>)
 800bb70:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800bb72:	68fb      	ldr	r3, [r7, #12]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	200000f0 	.word	0x200000f0
 800bb80:	20000e68 	.word	0x20000e68

0800bb84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800bb84:	b480      	push	{r7}
 800bb86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bb88:	4b16      	ldr	r3, [pc, #88]	; (800bbe4 <SystemInit+0x60>)
 800bb8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb8e:	4a15      	ldr	r2, [pc, #84]	; (800bbe4 <SystemInit+0x60>)
 800bb90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800bb98:	4b13      	ldr	r3, [pc, #76]	; (800bbe8 <SystemInit+0x64>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4a12      	ldr	r2, [pc, #72]	; (800bbe8 <SystemInit+0x64>)
 800bb9e:	f043 0301 	orr.w	r3, r3, #1
 800bba2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800bba4:	4b10      	ldr	r3, [pc, #64]	; (800bbe8 <SystemInit+0x64>)
 800bba6:	2200      	movs	r2, #0
 800bba8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800bbaa:	4b0f      	ldr	r3, [pc, #60]	; (800bbe8 <SystemInit+0x64>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4a0e      	ldr	r2, [pc, #56]	; (800bbe8 <SystemInit+0x64>)
 800bbb0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800bbb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bbb8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800bbba:	4b0b      	ldr	r3, [pc, #44]	; (800bbe8 <SystemInit+0x64>)
 800bbbc:	4a0b      	ldr	r2, [pc, #44]	; (800bbec <SystemInit+0x68>)
 800bbbe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800bbc0:	4b09      	ldr	r3, [pc, #36]	; (800bbe8 <SystemInit+0x64>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4a08      	ldr	r2, [pc, #32]	; (800bbe8 <SystemInit+0x64>)
 800bbc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bbca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800bbcc:	4b06      	ldr	r3, [pc, #24]	; (800bbe8 <SystemInit+0x64>)
 800bbce:	2200      	movs	r2, #0
 800bbd0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bbd2:	4b04      	ldr	r3, [pc, #16]	; (800bbe4 <SystemInit+0x60>)
 800bbd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bbd8:	609a      	str	r2, [r3, #8]
#endif
}
 800bbda:	bf00      	nop
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr
 800bbe4:	e000ed00 	.word	0xe000ed00
 800bbe8:	40023800 	.word	0x40023800
 800bbec:	24003010 	.word	0x24003010

0800bbf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800bbf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bc28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bbf4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bbf6:	e003      	b.n	800bc00 <LoopCopyDataInit>

0800bbf8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bbf8:	4b0c      	ldr	r3, [pc, #48]	; (800bc2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bbfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bbfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bbfe:	3104      	adds	r1, #4

0800bc00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bc00:	480b      	ldr	r0, [pc, #44]	; (800bc30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bc02:	4b0c      	ldr	r3, [pc, #48]	; (800bc34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bc04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bc06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bc08:	d3f6      	bcc.n	800bbf8 <CopyDataInit>
  ldr  r2, =_sbss
 800bc0a:	4a0b      	ldr	r2, [pc, #44]	; (800bc38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bc0c:	e002      	b.n	800bc14 <LoopFillZerobss>

0800bc0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bc0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bc10:	f842 3b04 	str.w	r3, [r2], #4

0800bc14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bc14:	4b09      	ldr	r3, [pc, #36]	; (800bc3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bc16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bc18:	d3f9      	bcc.n	800bc0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bc1a:	f7ff ffb3 	bl	800bb84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bc1e:	f000 f817 	bl	800bc50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bc22:	f7fc ff63 	bl	8008aec <main>
  bx  lr    
 800bc26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800bc28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800bc2c:	0800d348 	.word	0x0800d348
  ldr  r0, =_sdata
 800bc30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bc34:	200000cc 	.word	0x200000cc
  ldr  r2, =_sbss
 800bc38:	200000cc 	.word	0x200000cc
  ldr  r3, = _ebss
 800bc3c:	20000e64 	.word	0x20000e64

0800bc40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bc40:	e7fe      	b.n	800bc40 <ADC_IRQHandler>
	...

0800bc44 <__errno>:
 800bc44:	4b01      	ldr	r3, [pc, #4]	; (800bc4c <__errno+0x8>)
 800bc46:	6818      	ldr	r0, [r3, #0]
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	20000064 	.word	0x20000064

0800bc50 <__libc_init_array>:
 800bc50:	b570      	push	{r4, r5, r6, lr}
 800bc52:	4e0d      	ldr	r6, [pc, #52]	; (800bc88 <__libc_init_array+0x38>)
 800bc54:	4c0d      	ldr	r4, [pc, #52]	; (800bc8c <__libc_init_array+0x3c>)
 800bc56:	1ba4      	subs	r4, r4, r6
 800bc58:	10a4      	asrs	r4, r4, #2
 800bc5a:	2500      	movs	r5, #0
 800bc5c:	42a5      	cmp	r5, r4
 800bc5e:	d109      	bne.n	800bc74 <__libc_init_array+0x24>
 800bc60:	4e0b      	ldr	r6, [pc, #44]	; (800bc90 <__libc_init_array+0x40>)
 800bc62:	4c0c      	ldr	r4, [pc, #48]	; (800bc94 <__libc_init_array+0x44>)
 800bc64:	f001 f932 	bl	800cecc <_init>
 800bc68:	1ba4      	subs	r4, r4, r6
 800bc6a:	10a4      	asrs	r4, r4, #2
 800bc6c:	2500      	movs	r5, #0
 800bc6e:	42a5      	cmp	r5, r4
 800bc70:	d105      	bne.n	800bc7e <__libc_init_array+0x2e>
 800bc72:	bd70      	pop	{r4, r5, r6, pc}
 800bc74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc78:	4798      	blx	r3
 800bc7a:	3501      	adds	r5, #1
 800bc7c:	e7ee      	b.n	800bc5c <__libc_init_array+0xc>
 800bc7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc82:	4798      	blx	r3
 800bc84:	3501      	adds	r5, #1
 800bc86:	e7f2      	b.n	800bc6e <__libc_init_array+0x1e>
 800bc88:	0800d340 	.word	0x0800d340
 800bc8c:	0800d340 	.word	0x0800d340
 800bc90:	0800d340 	.word	0x0800d340
 800bc94:	0800d344 	.word	0x0800d344

0800bc98 <memset>:
 800bc98:	4402      	add	r2, r0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d100      	bne.n	800bca2 <memset+0xa>
 800bca0:	4770      	bx	lr
 800bca2:	f803 1b01 	strb.w	r1, [r3], #1
 800bca6:	e7f9      	b.n	800bc9c <memset+0x4>

0800bca8 <iprintf>:
 800bca8:	b40f      	push	{r0, r1, r2, r3}
 800bcaa:	4b0a      	ldr	r3, [pc, #40]	; (800bcd4 <iprintf+0x2c>)
 800bcac:	b513      	push	{r0, r1, r4, lr}
 800bcae:	681c      	ldr	r4, [r3, #0]
 800bcb0:	b124      	cbz	r4, 800bcbc <iprintf+0x14>
 800bcb2:	69a3      	ldr	r3, [r4, #24]
 800bcb4:	b913      	cbnz	r3, 800bcbc <iprintf+0x14>
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	f000 fad8 	bl	800c26c <__sinit>
 800bcbc:	ab05      	add	r3, sp, #20
 800bcbe:	9a04      	ldr	r2, [sp, #16]
 800bcc0:	68a1      	ldr	r1, [r4, #8]
 800bcc2:	9301      	str	r3, [sp, #4]
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	f000 fc99 	bl	800c5fc <_vfiprintf_r>
 800bcca:	b002      	add	sp, #8
 800bccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcd0:	b004      	add	sp, #16
 800bcd2:	4770      	bx	lr
 800bcd4:	20000064 	.word	0x20000064

0800bcd8 <_puts_r>:
 800bcd8:	b570      	push	{r4, r5, r6, lr}
 800bcda:	460e      	mov	r6, r1
 800bcdc:	4605      	mov	r5, r0
 800bcde:	b118      	cbz	r0, 800bce8 <_puts_r+0x10>
 800bce0:	6983      	ldr	r3, [r0, #24]
 800bce2:	b90b      	cbnz	r3, 800bce8 <_puts_r+0x10>
 800bce4:	f000 fac2 	bl	800c26c <__sinit>
 800bce8:	69ab      	ldr	r3, [r5, #24]
 800bcea:	68ac      	ldr	r4, [r5, #8]
 800bcec:	b913      	cbnz	r3, 800bcf4 <_puts_r+0x1c>
 800bcee:	4628      	mov	r0, r5
 800bcf0:	f000 fabc 	bl	800c26c <__sinit>
 800bcf4:	4b23      	ldr	r3, [pc, #140]	; (800bd84 <_puts_r+0xac>)
 800bcf6:	429c      	cmp	r4, r3
 800bcf8:	d117      	bne.n	800bd2a <_puts_r+0x52>
 800bcfa:	686c      	ldr	r4, [r5, #4]
 800bcfc:	89a3      	ldrh	r3, [r4, #12]
 800bcfe:	071b      	lsls	r3, r3, #28
 800bd00:	d51d      	bpl.n	800bd3e <_puts_r+0x66>
 800bd02:	6923      	ldr	r3, [r4, #16]
 800bd04:	b1db      	cbz	r3, 800bd3e <_puts_r+0x66>
 800bd06:	3e01      	subs	r6, #1
 800bd08:	68a3      	ldr	r3, [r4, #8]
 800bd0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd0e:	3b01      	subs	r3, #1
 800bd10:	60a3      	str	r3, [r4, #8]
 800bd12:	b9e9      	cbnz	r1, 800bd50 <_puts_r+0x78>
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	da2e      	bge.n	800bd76 <_puts_r+0x9e>
 800bd18:	4622      	mov	r2, r4
 800bd1a:	210a      	movs	r1, #10
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	f000 f8f5 	bl	800bf0c <__swbuf_r>
 800bd22:	3001      	adds	r0, #1
 800bd24:	d011      	beq.n	800bd4a <_puts_r+0x72>
 800bd26:	200a      	movs	r0, #10
 800bd28:	e011      	b.n	800bd4e <_puts_r+0x76>
 800bd2a:	4b17      	ldr	r3, [pc, #92]	; (800bd88 <_puts_r+0xb0>)
 800bd2c:	429c      	cmp	r4, r3
 800bd2e:	d101      	bne.n	800bd34 <_puts_r+0x5c>
 800bd30:	68ac      	ldr	r4, [r5, #8]
 800bd32:	e7e3      	b.n	800bcfc <_puts_r+0x24>
 800bd34:	4b15      	ldr	r3, [pc, #84]	; (800bd8c <_puts_r+0xb4>)
 800bd36:	429c      	cmp	r4, r3
 800bd38:	bf08      	it	eq
 800bd3a:	68ec      	ldreq	r4, [r5, #12]
 800bd3c:	e7de      	b.n	800bcfc <_puts_r+0x24>
 800bd3e:	4621      	mov	r1, r4
 800bd40:	4628      	mov	r0, r5
 800bd42:	f000 f935 	bl	800bfb0 <__swsetup_r>
 800bd46:	2800      	cmp	r0, #0
 800bd48:	d0dd      	beq.n	800bd06 <_puts_r+0x2e>
 800bd4a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4e:	bd70      	pop	{r4, r5, r6, pc}
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	da04      	bge.n	800bd5e <_puts_r+0x86>
 800bd54:	69a2      	ldr	r2, [r4, #24]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	dc06      	bgt.n	800bd68 <_puts_r+0x90>
 800bd5a:	290a      	cmp	r1, #10
 800bd5c:	d004      	beq.n	800bd68 <_puts_r+0x90>
 800bd5e:	6823      	ldr	r3, [r4, #0]
 800bd60:	1c5a      	adds	r2, r3, #1
 800bd62:	6022      	str	r2, [r4, #0]
 800bd64:	7019      	strb	r1, [r3, #0]
 800bd66:	e7cf      	b.n	800bd08 <_puts_r+0x30>
 800bd68:	4622      	mov	r2, r4
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	f000 f8ce 	bl	800bf0c <__swbuf_r>
 800bd70:	3001      	adds	r0, #1
 800bd72:	d1c9      	bne.n	800bd08 <_puts_r+0x30>
 800bd74:	e7e9      	b.n	800bd4a <_puts_r+0x72>
 800bd76:	6823      	ldr	r3, [r4, #0]
 800bd78:	200a      	movs	r0, #10
 800bd7a:	1c5a      	adds	r2, r3, #1
 800bd7c:	6022      	str	r2, [r4, #0]
 800bd7e:	7018      	strb	r0, [r3, #0]
 800bd80:	e7e5      	b.n	800bd4e <_puts_r+0x76>
 800bd82:	bf00      	nop
 800bd84:	0800d2c0 	.word	0x0800d2c0
 800bd88:	0800d2e0 	.word	0x0800d2e0
 800bd8c:	0800d2a0 	.word	0x0800d2a0

0800bd90 <puts>:
 800bd90:	4b02      	ldr	r3, [pc, #8]	; (800bd9c <puts+0xc>)
 800bd92:	4601      	mov	r1, r0
 800bd94:	6818      	ldr	r0, [r3, #0]
 800bd96:	f7ff bf9f 	b.w	800bcd8 <_puts_r>
 800bd9a:	bf00      	nop
 800bd9c:	20000064 	.word	0x20000064

0800bda0 <setbuf>:
 800bda0:	2900      	cmp	r1, #0
 800bda2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bda6:	bf0c      	ite	eq
 800bda8:	2202      	moveq	r2, #2
 800bdaa:	2200      	movne	r2, #0
 800bdac:	f000 b800 	b.w	800bdb0 <setvbuf>

0800bdb0 <setvbuf>:
 800bdb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bdb4:	461d      	mov	r5, r3
 800bdb6:	4b51      	ldr	r3, [pc, #324]	; (800befc <setvbuf+0x14c>)
 800bdb8:	681e      	ldr	r6, [r3, #0]
 800bdba:	4604      	mov	r4, r0
 800bdbc:	460f      	mov	r7, r1
 800bdbe:	4690      	mov	r8, r2
 800bdc0:	b126      	cbz	r6, 800bdcc <setvbuf+0x1c>
 800bdc2:	69b3      	ldr	r3, [r6, #24]
 800bdc4:	b913      	cbnz	r3, 800bdcc <setvbuf+0x1c>
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	f000 fa50 	bl	800c26c <__sinit>
 800bdcc:	4b4c      	ldr	r3, [pc, #304]	; (800bf00 <setvbuf+0x150>)
 800bdce:	429c      	cmp	r4, r3
 800bdd0:	d152      	bne.n	800be78 <setvbuf+0xc8>
 800bdd2:	6874      	ldr	r4, [r6, #4]
 800bdd4:	f1b8 0f02 	cmp.w	r8, #2
 800bdd8:	d006      	beq.n	800bde8 <setvbuf+0x38>
 800bdda:	f1b8 0f01 	cmp.w	r8, #1
 800bdde:	f200 8089 	bhi.w	800bef4 <setvbuf+0x144>
 800bde2:	2d00      	cmp	r5, #0
 800bde4:	f2c0 8086 	blt.w	800bef4 <setvbuf+0x144>
 800bde8:	4621      	mov	r1, r4
 800bdea:	4630      	mov	r0, r6
 800bdec:	f000 f9d4 	bl	800c198 <_fflush_r>
 800bdf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdf2:	b141      	cbz	r1, 800be06 <setvbuf+0x56>
 800bdf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdf8:	4299      	cmp	r1, r3
 800bdfa:	d002      	beq.n	800be02 <setvbuf+0x52>
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	f000 fb2b 	bl	800c458 <_free_r>
 800be02:	2300      	movs	r3, #0
 800be04:	6363      	str	r3, [r4, #52]	; 0x34
 800be06:	2300      	movs	r3, #0
 800be08:	61a3      	str	r3, [r4, #24]
 800be0a:	6063      	str	r3, [r4, #4]
 800be0c:	89a3      	ldrh	r3, [r4, #12]
 800be0e:	061b      	lsls	r3, r3, #24
 800be10:	d503      	bpl.n	800be1a <setvbuf+0x6a>
 800be12:	6921      	ldr	r1, [r4, #16]
 800be14:	4630      	mov	r0, r6
 800be16:	f000 fb1f 	bl	800c458 <_free_r>
 800be1a:	89a3      	ldrh	r3, [r4, #12]
 800be1c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800be20:	f023 0303 	bic.w	r3, r3, #3
 800be24:	f1b8 0f02 	cmp.w	r8, #2
 800be28:	81a3      	strh	r3, [r4, #12]
 800be2a:	d05d      	beq.n	800bee8 <setvbuf+0x138>
 800be2c:	ab01      	add	r3, sp, #4
 800be2e:	466a      	mov	r2, sp
 800be30:	4621      	mov	r1, r4
 800be32:	4630      	mov	r0, r6
 800be34:	f000 faa4 	bl	800c380 <__swhatbuf_r>
 800be38:	89a3      	ldrh	r3, [r4, #12]
 800be3a:	4318      	orrs	r0, r3
 800be3c:	81a0      	strh	r0, [r4, #12]
 800be3e:	bb2d      	cbnz	r5, 800be8c <setvbuf+0xdc>
 800be40:	9d00      	ldr	r5, [sp, #0]
 800be42:	4628      	mov	r0, r5
 800be44:	f000 fb00 	bl	800c448 <malloc>
 800be48:	4607      	mov	r7, r0
 800be4a:	2800      	cmp	r0, #0
 800be4c:	d14e      	bne.n	800beec <setvbuf+0x13c>
 800be4e:	f8dd 9000 	ldr.w	r9, [sp]
 800be52:	45a9      	cmp	r9, r5
 800be54:	d13c      	bne.n	800bed0 <setvbuf+0x120>
 800be56:	f04f 30ff 	mov.w	r0, #4294967295
 800be5a:	89a3      	ldrh	r3, [r4, #12]
 800be5c:	f043 0302 	orr.w	r3, r3, #2
 800be60:	81a3      	strh	r3, [r4, #12]
 800be62:	2300      	movs	r3, #0
 800be64:	60a3      	str	r3, [r4, #8]
 800be66:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be6a:	6023      	str	r3, [r4, #0]
 800be6c:	6123      	str	r3, [r4, #16]
 800be6e:	2301      	movs	r3, #1
 800be70:	6163      	str	r3, [r4, #20]
 800be72:	b003      	add	sp, #12
 800be74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be78:	4b22      	ldr	r3, [pc, #136]	; (800bf04 <setvbuf+0x154>)
 800be7a:	429c      	cmp	r4, r3
 800be7c:	d101      	bne.n	800be82 <setvbuf+0xd2>
 800be7e:	68b4      	ldr	r4, [r6, #8]
 800be80:	e7a8      	b.n	800bdd4 <setvbuf+0x24>
 800be82:	4b21      	ldr	r3, [pc, #132]	; (800bf08 <setvbuf+0x158>)
 800be84:	429c      	cmp	r4, r3
 800be86:	bf08      	it	eq
 800be88:	68f4      	ldreq	r4, [r6, #12]
 800be8a:	e7a3      	b.n	800bdd4 <setvbuf+0x24>
 800be8c:	2f00      	cmp	r7, #0
 800be8e:	d0d8      	beq.n	800be42 <setvbuf+0x92>
 800be90:	69b3      	ldr	r3, [r6, #24]
 800be92:	b913      	cbnz	r3, 800be9a <setvbuf+0xea>
 800be94:	4630      	mov	r0, r6
 800be96:	f000 f9e9 	bl	800c26c <__sinit>
 800be9a:	f1b8 0f01 	cmp.w	r8, #1
 800be9e:	bf08      	it	eq
 800bea0:	89a3      	ldrheq	r3, [r4, #12]
 800bea2:	6027      	str	r7, [r4, #0]
 800bea4:	bf04      	itt	eq
 800bea6:	f043 0301 	orreq.w	r3, r3, #1
 800beaa:	81a3      	strheq	r3, [r4, #12]
 800beac:	89a3      	ldrh	r3, [r4, #12]
 800beae:	f013 0008 	ands.w	r0, r3, #8
 800beb2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800beb6:	d01b      	beq.n	800bef0 <setvbuf+0x140>
 800beb8:	f013 0001 	ands.w	r0, r3, #1
 800bebc:	bf18      	it	ne
 800bebe:	426d      	negne	r5, r5
 800bec0:	f04f 0300 	mov.w	r3, #0
 800bec4:	bf1d      	ittte	ne
 800bec6:	60a3      	strne	r3, [r4, #8]
 800bec8:	61a5      	strne	r5, [r4, #24]
 800beca:	4618      	movne	r0, r3
 800becc:	60a5      	streq	r5, [r4, #8]
 800bece:	e7d0      	b.n	800be72 <setvbuf+0xc2>
 800bed0:	4648      	mov	r0, r9
 800bed2:	f000 fab9 	bl	800c448 <malloc>
 800bed6:	4607      	mov	r7, r0
 800bed8:	2800      	cmp	r0, #0
 800beda:	d0bc      	beq.n	800be56 <setvbuf+0xa6>
 800bedc:	89a3      	ldrh	r3, [r4, #12]
 800bede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bee2:	81a3      	strh	r3, [r4, #12]
 800bee4:	464d      	mov	r5, r9
 800bee6:	e7d3      	b.n	800be90 <setvbuf+0xe0>
 800bee8:	2000      	movs	r0, #0
 800beea:	e7b6      	b.n	800be5a <setvbuf+0xaa>
 800beec:	46a9      	mov	r9, r5
 800beee:	e7f5      	b.n	800bedc <setvbuf+0x12c>
 800bef0:	60a0      	str	r0, [r4, #8]
 800bef2:	e7be      	b.n	800be72 <setvbuf+0xc2>
 800bef4:	f04f 30ff 	mov.w	r0, #4294967295
 800bef8:	e7bb      	b.n	800be72 <setvbuf+0xc2>
 800befa:	bf00      	nop
 800befc:	20000064 	.word	0x20000064
 800bf00:	0800d2c0 	.word	0x0800d2c0
 800bf04:	0800d2e0 	.word	0x0800d2e0
 800bf08:	0800d2a0 	.word	0x0800d2a0

0800bf0c <__swbuf_r>:
 800bf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0e:	460e      	mov	r6, r1
 800bf10:	4614      	mov	r4, r2
 800bf12:	4605      	mov	r5, r0
 800bf14:	b118      	cbz	r0, 800bf1e <__swbuf_r+0x12>
 800bf16:	6983      	ldr	r3, [r0, #24]
 800bf18:	b90b      	cbnz	r3, 800bf1e <__swbuf_r+0x12>
 800bf1a:	f000 f9a7 	bl	800c26c <__sinit>
 800bf1e:	4b21      	ldr	r3, [pc, #132]	; (800bfa4 <__swbuf_r+0x98>)
 800bf20:	429c      	cmp	r4, r3
 800bf22:	d12a      	bne.n	800bf7a <__swbuf_r+0x6e>
 800bf24:	686c      	ldr	r4, [r5, #4]
 800bf26:	69a3      	ldr	r3, [r4, #24]
 800bf28:	60a3      	str	r3, [r4, #8]
 800bf2a:	89a3      	ldrh	r3, [r4, #12]
 800bf2c:	071a      	lsls	r2, r3, #28
 800bf2e:	d52e      	bpl.n	800bf8e <__swbuf_r+0x82>
 800bf30:	6923      	ldr	r3, [r4, #16]
 800bf32:	b363      	cbz	r3, 800bf8e <__swbuf_r+0x82>
 800bf34:	6923      	ldr	r3, [r4, #16]
 800bf36:	6820      	ldr	r0, [r4, #0]
 800bf38:	1ac0      	subs	r0, r0, r3
 800bf3a:	6963      	ldr	r3, [r4, #20]
 800bf3c:	b2f6      	uxtb	r6, r6
 800bf3e:	4283      	cmp	r3, r0
 800bf40:	4637      	mov	r7, r6
 800bf42:	dc04      	bgt.n	800bf4e <__swbuf_r+0x42>
 800bf44:	4621      	mov	r1, r4
 800bf46:	4628      	mov	r0, r5
 800bf48:	f000 f926 	bl	800c198 <_fflush_r>
 800bf4c:	bb28      	cbnz	r0, 800bf9a <__swbuf_r+0x8e>
 800bf4e:	68a3      	ldr	r3, [r4, #8]
 800bf50:	3b01      	subs	r3, #1
 800bf52:	60a3      	str	r3, [r4, #8]
 800bf54:	6823      	ldr	r3, [r4, #0]
 800bf56:	1c5a      	adds	r2, r3, #1
 800bf58:	6022      	str	r2, [r4, #0]
 800bf5a:	701e      	strb	r6, [r3, #0]
 800bf5c:	6963      	ldr	r3, [r4, #20]
 800bf5e:	3001      	adds	r0, #1
 800bf60:	4283      	cmp	r3, r0
 800bf62:	d004      	beq.n	800bf6e <__swbuf_r+0x62>
 800bf64:	89a3      	ldrh	r3, [r4, #12]
 800bf66:	07db      	lsls	r3, r3, #31
 800bf68:	d519      	bpl.n	800bf9e <__swbuf_r+0x92>
 800bf6a:	2e0a      	cmp	r6, #10
 800bf6c:	d117      	bne.n	800bf9e <__swbuf_r+0x92>
 800bf6e:	4621      	mov	r1, r4
 800bf70:	4628      	mov	r0, r5
 800bf72:	f000 f911 	bl	800c198 <_fflush_r>
 800bf76:	b190      	cbz	r0, 800bf9e <__swbuf_r+0x92>
 800bf78:	e00f      	b.n	800bf9a <__swbuf_r+0x8e>
 800bf7a:	4b0b      	ldr	r3, [pc, #44]	; (800bfa8 <__swbuf_r+0x9c>)
 800bf7c:	429c      	cmp	r4, r3
 800bf7e:	d101      	bne.n	800bf84 <__swbuf_r+0x78>
 800bf80:	68ac      	ldr	r4, [r5, #8]
 800bf82:	e7d0      	b.n	800bf26 <__swbuf_r+0x1a>
 800bf84:	4b09      	ldr	r3, [pc, #36]	; (800bfac <__swbuf_r+0xa0>)
 800bf86:	429c      	cmp	r4, r3
 800bf88:	bf08      	it	eq
 800bf8a:	68ec      	ldreq	r4, [r5, #12]
 800bf8c:	e7cb      	b.n	800bf26 <__swbuf_r+0x1a>
 800bf8e:	4621      	mov	r1, r4
 800bf90:	4628      	mov	r0, r5
 800bf92:	f000 f80d 	bl	800bfb0 <__swsetup_r>
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d0cc      	beq.n	800bf34 <__swbuf_r+0x28>
 800bf9a:	f04f 37ff 	mov.w	r7, #4294967295
 800bf9e:	4638      	mov	r0, r7
 800bfa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	0800d2c0 	.word	0x0800d2c0
 800bfa8:	0800d2e0 	.word	0x0800d2e0
 800bfac:	0800d2a0 	.word	0x0800d2a0

0800bfb0 <__swsetup_r>:
 800bfb0:	4b32      	ldr	r3, [pc, #200]	; (800c07c <__swsetup_r+0xcc>)
 800bfb2:	b570      	push	{r4, r5, r6, lr}
 800bfb4:	681d      	ldr	r5, [r3, #0]
 800bfb6:	4606      	mov	r6, r0
 800bfb8:	460c      	mov	r4, r1
 800bfba:	b125      	cbz	r5, 800bfc6 <__swsetup_r+0x16>
 800bfbc:	69ab      	ldr	r3, [r5, #24]
 800bfbe:	b913      	cbnz	r3, 800bfc6 <__swsetup_r+0x16>
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	f000 f953 	bl	800c26c <__sinit>
 800bfc6:	4b2e      	ldr	r3, [pc, #184]	; (800c080 <__swsetup_r+0xd0>)
 800bfc8:	429c      	cmp	r4, r3
 800bfca:	d10f      	bne.n	800bfec <__swsetup_r+0x3c>
 800bfcc:	686c      	ldr	r4, [r5, #4]
 800bfce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	0715      	lsls	r5, r2, #28
 800bfd6:	d42c      	bmi.n	800c032 <__swsetup_r+0x82>
 800bfd8:	06d0      	lsls	r0, r2, #27
 800bfda:	d411      	bmi.n	800c000 <__swsetup_r+0x50>
 800bfdc:	2209      	movs	r2, #9
 800bfde:	6032      	str	r2, [r6, #0]
 800bfe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfe4:	81a3      	strh	r3, [r4, #12]
 800bfe6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfea:	e03e      	b.n	800c06a <__swsetup_r+0xba>
 800bfec:	4b25      	ldr	r3, [pc, #148]	; (800c084 <__swsetup_r+0xd4>)
 800bfee:	429c      	cmp	r4, r3
 800bff0:	d101      	bne.n	800bff6 <__swsetup_r+0x46>
 800bff2:	68ac      	ldr	r4, [r5, #8]
 800bff4:	e7eb      	b.n	800bfce <__swsetup_r+0x1e>
 800bff6:	4b24      	ldr	r3, [pc, #144]	; (800c088 <__swsetup_r+0xd8>)
 800bff8:	429c      	cmp	r4, r3
 800bffa:	bf08      	it	eq
 800bffc:	68ec      	ldreq	r4, [r5, #12]
 800bffe:	e7e6      	b.n	800bfce <__swsetup_r+0x1e>
 800c000:	0751      	lsls	r1, r2, #29
 800c002:	d512      	bpl.n	800c02a <__swsetup_r+0x7a>
 800c004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c006:	b141      	cbz	r1, 800c01a <__swsetup_r+0x6a>
 800c008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c00c:	4299      	cmp	r1, r3
 800c00e:	d002      	beq.n	800c016 <__swsetup_r+0x66>
 800c010:	4630      	mov	r0, r6
 800c012:	f000 fa21 	bl	800c458 <_free_r>
 800c016:	2300      	movs	r3, #0
 800c018:	6363      	str	r3, [r4, #52]	; 0x34
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c020:	81a3      	strh	r3, [r4, #12]
 800c022:	2300      	movs	r3, #0
 800c024:	6063      	str	r3, [r4, #4]
 800c026:	6923      	ldr	r3, [r4, #16]
 800c028:	6023      	str	r3, [r4, #0]
 800c02a:	89a3      	ldrh	r3, [r4, #12]
 800c02c:	f043 0308 	orr.w	r3, r3, #8
 800c030:	81a3      	strh	r3, [r4, #12]
 800c032:	6923      	ldr	r3, [r4, #16]
 800c034:	b94b      	cbnz	r3, 800c04a <__swsetup_r+0x9a>
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c03c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c040:	d003      	beq.n	800c04a <__swsetup_r+0x9a>
 800c042:	4621      	mov	r1, r4
 800c044:	4630      	mov	r0, r6
 800c046:	f000 f9bf 	bl	800c3c8 <__smakebuf_r>
 800c04a:	89a2      	ldrh	r2, [r4, #12]
 800c04c:	f012 0301 	ands.w	r3, r2, #1
 800c050:	d00c      	beq.n	800c06c <__swsetup_r+0xbc>
 800c052:	2300      	movs	r3, #0
 800c054:	60a3      	str	r3, [r4, #8]
 800c056:	6963      	ldr	r3, [r4, #20]
 800c058:	425b      	negs	r3, r3
 800c05a:	61a3      	str	r3, [r4, #24]
 800c05c:	6923      	ldr	r3, [r4, #16]
 800c05e:	b953      	cbnz	r3, 800c076 <__swsetup_r+0xc6>
 800c060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c064:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c068:	d1ba      	bne.n	800bfe0 <__swsetup_r+0x30>
 800c06a:	bd70      	pop	{r4, r5, r6, pc}
 800c06c:	0792      	lsls	r2, r2, #30
 800c06e:	bf58      	it	pl
 800c070:	6963      	ldrpl	r3, [r4, #20]
 800c072:	60a3      	str	r3, [r4, #8]
 800c074:	e7f2      	b.n	800c05c <__swsetup_r+0xac>
 800c076:	2000      	movs	r0, #0
 800c078:	e7f7      	b.n	800c06a <__swsetup_r+0xba>
 800c07a:	bf00      	nop
 800c07c:	20000064 	.word	0x20000064
 800c080:	0800d2c0 	.word	0x0800d2c0
 800c084:	0800d2e0 	.word	0x0800d2e0
 800c088:	0800d2a0 	.word	0x0800d2a0

0800c08c <__sflush_r>:
 800c08c:	898a      	ldrh	r2, [r1, #12]
 800c08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c092:	4605      	mov	r5, r0
 800c094:	0710      	lsls	r0, r2, #28
 800c096:	460c      	mov	r4, r1
 800c098:	d458      	bmi.n	800c14c <__sflush_r+0xc0>
 800c09a:	684b      	ldr	r3, [r1, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	dc05      	bgt.n	800c0ac <__sflush_r+0x20>
 800c0a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	dc02      	bgt.n	800c0ac <__sflush_r+0x20>
 800c0a6:	2000      	movs	r0, #0
 800c0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0ae:	2e00      	cmp	r6, #0
 800c0b0:	d0f9      	beq.n	800c0a6 <__sflush_r+0x1a>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0b8:	682f      	ldr	r7, [r5, #0]
 800c0ba:	6a21      	ldr	r1, [r4, #32]
 800c0bc:	602b      	str	r3, [r5, #0]
 800c0be:	d032      	beq.n	800c126 <__sflush_r+0x9a>
 800c0c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0c2:	89a3      	ldrh	r3, [r4, #12]
 800c0c4:	075a      	lsls	r2, r3, #29
 800c0c6:	d505      	bpl.n	800c0d4 <__sflush_r+0x48>
 800c0c8:	6863      	ldr	r3, [r4, #4]
 800c0ca:	1ac0      	subs	r0, r0, r3
 800c0cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0ce:	b10b      	cbz	r3, 800c0d4 <__sflush_r+0x48>
 800c0d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0d2:	1ac0      	subs	r0, r0, r3
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0da:	6a21      	ldr	r1, [r4, #32]
 800c0dc:	4628      	mov	r0, r5
 800c0de:	47b0      	blx	r6
 800c0e0:	1c43      	adds	r3, r0, #1
 800c0e2:	89a3      	ldrh	r3, [r4, #12]
 800c0e4:	d106      	bne.n	800c0f4 <__sflush_r+0x68>
 800c0e6:	6829      	ldr	r1, [r5, #0]
 800c0e8:	291d      	cmp	r1, #29
 800c0ea:	d848      	bhi.n	800c17e <__sflush_r+0xf2>
 800c0ec:	4a29      	ldr	r2, [pc, #164]	; (800c194 <__sflush_r+0x108>)
 800c0ee:	40ca      	lsrs	r2, r1
 800c0f0:	07d6      	lsls	r6, r2, #31
 800c0f2:	d544      	bpl.n	800c17e <__sflush_r+0xf2>
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	6062      	str	r2, [r4, #4]
 800c0f8:	04d9      	lsls	r1, r3, #19
 800c0fa:	6922      	ldr	r2, [r4, #16]
 800c0fc:	6022      	str	r2, [r4, #0]
 800c0fe:	d504      	bpl.n	800c10a <__sflush_r+0x7e>
 800c100:	1c42      	adds	r2, r0, #1
 800c102:	d101      	bne.n	800c108 <__sflush_r+0x7c>
 800c104:	682b      	ldr	r3, [r5, #0]
 800c106:	b903      	cbnz	r3, 800c10a <__sflush_r+0x7e>
 800c108:	6560      	str	r0, [r4, #84]	; 0x54
 800c10a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c10c:	602f      	str	r7, [r5, #0]
 800c10e:	2900      	cmp	r1, #0
 800c110:	d0c9      	beq.n	800c0a6 <__sflush_r+0x1a>
 800c112:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c116:	4299      	cmp	r1, r3
 800c118:	d002      	beq.n	800c120 <__sflush_r+0x94>
 800c11a:	4628      	mov	r0, r5
 800c11c:	f000 f99c 	bl	800c458 <_free_r>
 800c120:	2000      	movs	r0, #0
 800c122:	6360      	str	r0, [r4, #52]	; 0x34
 800c124:	e7c0      	b.n	800c0a8 <__sflush_r+0x1c>
 800c126:	2301      	movs	r3, #1
 800c128:	4628      	mov	r0, r5
 800c12a:	47b0      	blx	r6
 800c12c:	1c41      	adds	r1, r0, #1
 800c12e:	d1c8      	bne.n	800c0c2 <__sflush_r+0x36>
 800c130:	682b      	ldr	r3, [r5, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d0c5      	beq.n	800c0c2 <__sflush_r+0x36>
 800c136:	2b1d      	cmp	r3, #29
 800c138:	d001      	beq.n	800c13e <__sflush_r+0xb2>
 800c13a:	2b16      	cmp	r3, #22
 800c13c:	d101      	bne.n	800c142 <__sflush_r+0xb6>
 800c13e:	602f      	str	r7, [r5, #0]
 800c140:	e7b1      	b.n	800c0a6 <__sflush_r+0x1a>
 800c142:	89a3      	ldrh	r3, [r4, #12]
 800c144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c148:	81a3      	strh	r3, [r4, #12]
 800c14a:	e7ad      	b.n	800c0a8 <__sflush_r+0x1c>
 800c14c:	690f      	ldr	r7, [r1, #16]
 800c14e:	2f00      	cmp	r7, #0
 800c150:	d0a9      	beq.n	800c0a6 <__sflush_r+0x1a>
 800c152:	0793      	lsls	r3, r2, #30
 800c154:	680e      	ldr	r6, [r1, #0]
 800c156:	bf08      	it	eq
 800c158:	694b      	ldreq	r3, [r1, #20]
 800c15a:	600f      	str	r7, [r1, #0]
 800c15c:	bf18      	it	ne
 800c15e:	2300      	movne	r3, #0
 800c160:	eba6 0807 	sub.w	r8, r6, r7
 800c164:	608b      	str	r3, [r1, #8]
 800c166:	f1b8 0f00 	cmp.w	r8, #0
 800c16a:	dd9c      	ble.n	800c0a6 <__sflush_r+0x1a>
 800c16c:	4643      	mov	r3, r8
 800c16e:	463a      	mov	r2, r7
 800c170:	6a21      	ldr	r1, [r4, #32]
 800c172:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c174:	4628      	mov	r0, r5
 800c176:	47b0      	blx	r6
 800c178:	2800      	cmp	r0, #0
 800c17a:	dc06      	bgt.n	800c18a <__sflush_r+0xfe>
 800c17c:	89a3      	ldrh	r3, [r4, #12]
 800c17e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c182:	81a3      	strh	r3, [r4, #12]
 800c184:	f04f 30ff 	mov.w	r0, #4294967295
 800c188:	e78e      	b.n	800c0a8 <__sflush_r+0x1c>
 800c18a:	4407      	add	r7, r0
 800c18c:	eba8 0800 	sub.w	r8, r8, r0
 800c190:	e7e9      	b.n	800c166 <__sflush_r+0xda>
 800c192:	bf00      	nop
 800c194:	20400001 	.word	0x20400001

0800c198 <_fflush_r>:
 800c198:	b538      	push	{r3, r4, r5, lr}
 800c19a:	690b      	ldr	r3, [r1, #16]
 800c19c:	4605      	mov	r5, r0
 800c19e:	460c      	mov	r4, r1
 800c1a0:	b1db      	cbz	r3, 800c1da <_fflush_r+0x42>
 800c1a2:	b118      	cbz	r0, 800c1ac <_fflush_r+0x14>
 800c1a4:	6983      	ldr	r3, [r0, #24]
 800c1a6:	b90b      	cbnz	r3, 800c1ac <_fflush_r+0x14>
 800c1a8:	f000 f860 	bl	800c26c <__sinit>
 800c1ac:	4b0c      	ldr	r3, [pc, #48]	; (800c1e0 <_fflush_r+0x48>)
 800c1ae:	429c      	cmp	r4, r3
 800c1b0:	d109      	bne.n	800c1c6 <_fflush_r+0x2e>
 800c1b2:	686c      	ldr	r4, [r5, #4]
 800c1b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1b8:	b17b      	cbz	r3, 800c1da <_fflush_r+0x42>
 800c1ba:	4621      	mov	r1, r4
 800c1bc:	4628      	mov	r0, r5
 800c1be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1c2:	f7ff bf63 	b.w	800c08c <__sflush_r>
 800c1c6:	4b07      	ldr	r3, [pc, #28]	; (800c1e4 <_fflush_r+0x4c>)
 800c1c8:	429c      	cmp	r4, r3
 800c1ca:	d101      	bne.n	800c1d0 <_fflush_r+0x38>
 800c1cc:	68ac      	ldr	r4, [r5, #8]
 800c1ce:	e7f1      	b.n	800c1b4 <_fflush_r+0x1c>
 800c1d0:	4b05      	ldr	r3, [pc, #20]	; (800c1e8 <_fflush_r+0x50>)
 800c1d2:	429c      	cmp	r4, r3
 800c1d4:	bf08      	it	eq
 800c1d6:	68ec      	ldreq	r4, [r5, #12]
 800c1d8:	e7ec      	b.n	800c1b4 <_fflush_r+0x1c>
 800c1da:	2000      	movs	r0, #0
 800c1dc:	bd38      	pop	{r3, r4, r5, pc}
 800c1de:	bf00      	nop
 800c1e0:	0800d2c0 	.word	0x0800d2c0
 800c1e4:	0800d2e0 	.word	0x0800d2e0
 800c1e8:	0800d2a0 	.word	0x0800d2a0

0800c1ec <std>:
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	b510      	push	{r4, lr}
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	e9c0 3300 	strd	r3, r3, [r0]
 800c1f6:	6083      	str	r3, [r0, #8]
 800c1f8:	8181      	strh	r1, [r0, #12]
 800c1fa:	6643      	str	r3, [r0, #100]	; 0x64
 800c1fc:	81c2      	strh	r2, [r0, #14]
 800c1fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c202:	6183      	str	r3, [r0, #24]
 800c204:	4619      	mov	r1, r3
 800c206:	2208      	movs	r2, #8
 800c208:	305c      	adds	r0, #92	; 0x5c
 800c20a:	f7ff fd45 	bl	800bc98 <memset>
 800c20e:	4b05      	ldr	r3, [pc, #20]	; (800c224 <std+0x38>)
 800c210:	6263      	str	r3, [r4, #36]	; 0x24
 800c212:	4b05      	ldr	r3, [pc, #20]	; (800c228 <std+0x3c>)
 800c214:	62a3      	str	r3, [r4, #40]	; 0x28
 800c216:	4b05      	ldr	r3, [pc, #20]	; (800c22c <std+0x40>)
 800c218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c21a:	4b05      	ldr	r3, [pc, #20]	; (800c230 <std+0x44>)
 800c21c:	6224      	str	r4, [r4, #32]
 800c21e:	6323      	str	r3, [r4, #48]	; 0x30
 800c220:	bd10      	pop	{r4, pc}
 800c222:	bf00      	nop
 800c224:	0800cb59 	.word	0x0800cb59
 800c228:	0800cb7b 	.word	0x0800cb7b
 800c22c:	0800cbb3 	.word	0x0800cbb3
 800c230:	0800cbd7 	.word	0x0800cbd7

0800c234 <_cleanup_r>:
 800c234:	4901      	ldr	r1, [pc, #4]	; (800c23c <_cleanup_r+0x8>)
 800c236:	f000 b885 	b.w	800c344 <_fwalk_reent>
 800c23a:	bf00      	nop
 800c23c:	0800c199 	.word	0x0800c199

0800c240 <__sfmoreglue>:
 800c240:	b570      	push	{r4, r5, r6, lr}
 800c242:	1e4a      	subs	r2, r1, #1
 800c244:	2568      	movs	r5, #104	; 0x68
 800c246:	4355      	muls	r5, r2
 800c248:	460e      	mov	r6, r1
 800c24a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c24e:	f000 f951 	bl	800c4f4 <_malloc_r>
 800c252:	4604      	mov	r4, r0
 800c254:	b140      	cbz	r0, 800c268 <__sfmoreglue+0x28>
 800c256:	2100      	movs	r1, #0
 800c258:	e9c0 1600 	strd	r1, r6, [r0]
 800c25c:	300c      	adds	r0, #12
 800c25e:	60a0      	str	r0, [r4, #8]
 800c260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c264:	f7ff fd18 	bl	800bc98 <memset>
 800c268:	4620      	mov	r0, r4
 800c26a:	bd70      	pop	{r4, r5, r6, pc}

0800c26c <__sinit>:
 800c26c:	6983      	ldr	r3, [r0, #24]
 800c26e:	b510      	push	{r4, lr}
 800c270:	4604      	mov	r4, r0
 800c272:	bb33      	cbnz	r3, 800c2c2 <__sinit+0x56>
 800c274:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c278:	6503      	str	r3, [r0, #80]	; 0x50
 800c27a:	4b12      	ldr	r3, [pc, #72]	; (800c2c4 <__sinit+0x58>)
 800c27c:	4a12      	ldr	r2, [pc, #72]	; (800c2c8 <__sinit+0x5c>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	6282      	str	r2, [r0, #40]	; 0x28
 800c282:	4298      	cmp	r0, r3
 800c284:	bf04      	itt	eq
 800c286:	2301      	moveq	r3, #1
 800c288:	6183      	streq	r3, [r0, #24]
 800c28a:	f000 f81f 	bl	800c2cc <__sfp>
 800c28e:	6060      	str	r0, [r4, #4]
 800c290:	4620      	mov	r0, r4
 800c292:	f000 f81b 	bl	800c2cc <__sfp>
 800c296:	60a0      	str	r0, [r4, #8]
 800c298:	4620      	mov	r0, r4
 800c29a:	f000 f817 	bl	800c2cc <__sfp>
 800c29e:	2200      	movs	r2, #0
 800c2a0:	60e0      	str	r0, [r4, #12]
 800c2a2:	2104      	movs	r1, #4
 800c2a4:	6860      	ldr	r0, [r4, #4]
 800c2a6:	f7ff ffa1 	bl	800c1ec <std>
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	2109      	movs	r1, #9
 800c2ae:	68a0      	ldr	r0, [r4, #8]
 800c2b0:	f7ff ff9c 	bl	800c1ec <std>
 800c2b4:	2202      	movs	r2, #2
 800c2b6:	2112      	movs	r1, #18
 800c2b8:	68e0      	ldr	r0, [r4, #12]
 800c2ba:	f7ff ff97 	bl	800c1ec <std>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	61a3      	str	r3, [r4, #24]
 800c2c2:	bd10      	pop	{r4, pc}
 800c2c4:	0800d29c 	.word	0x0800d29c
 800c2c8:	0800c235 	.word	0x0800c235

0800c2cc <__sfp>:
 800c2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ce:	4b1b      	ldr	r3, [pc, #108]	; (800c33c <__sfp+0x70>)
 800c2d0:	681e      	ldr	r6, [r3, #0]
 800c2d2:	69b3      	ldr	r3, [r6, #24]
 800c2d4:	4607      	mov	r7, r0
 800c2d6:	b913      	cbnz	r3, 800c2de <__sfp+0x12>
 800c2d8:	4630      	mov	r0, r6
 800c2da:	f7ff ffc7 	bl	800c26c <__sinit>
 800c2de:	3648      	adds	r6, #72	; 0x48
 800c2e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	d503      	bpl.n	800c2f0 <__sfp+0x24>
 800c2e8:	6833      	ldr	r3, [r6, #0]
 800c2ea:	b133      	cbz	r3, 800c2fa <__sfp+0x2e>
 800c2ec:	6836      	ldr	r6, [r6, #0]
 800c2ee:	e7f7      	b.n	800c2e0 <__sfp+0x14>
 800c2f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c2f4:	b16d      	cbz	r5, 800c312 <__sfp+0x46>
 800c2f6:	3468      	adds	r4, #104	; 0x68
 800c2f8:	e7f4      	b.n	800c2e4 <__sfp+0x18>
 800c2fa:	2104      	movs	r1, #4
 800c2fc:	4638      	mov	r0, r7
 800c2fe:	f7ff ff9f 	bl	800c240 <__sfmoreglue>
 800c302:	6030      	str	r0, [r6, #0]
 800c304:	2800      	cmp	r0, #0
 800c306:	d1f1      	bne.n	800c2ec <__sfp+0x20>
 800c308:	230c      	movs	r3, #12
 800c30a:	603b      	str	r3, [r7, #0]
 800c30c:	4604      	mov	r4, r0
 800c30e:	4620      	mov	r0, r4
 800c310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c312:	4b0b      	ldr	r3, [pc, #44]	; (800c340 <__sfp+0x74>)
 800c314:	6665      	str	r5, [r4, #100]	; 0x64
 800c316:	e9c4 5500 	strd	r5, r5, [r4]
 800c31a:	60a5      	str	r5, [r4, #8]
 800c31c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c320:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c324:	2208      	movs	r2, #8
 800c326:	4629      	mov	r1, r5
 800c328:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c32c:	f7ff fcb4 	bl	800bc98 <memset>
 800c330:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c334:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c338:	e7e9      	b.n	800c30e <__sfp+0x42>
 800c33a:	bf00      	nop
 800c33c:	0800d29c 	.word	0x0800d29c
 800c340:	ffff0001 	.word	0xffff0001

0800c344 <_fwalk_reent>:
 800c344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c348:	4680      	mov	r8, r0
 800c34a:	4689      	mov	r9, r1
 800c34c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c350:	2600      	movs	r6, #0
 800c352:	b914      	cbnz	r4, 800c35a <_fwalk_reent+0x16>
 800c354:	4630      	mov	r0, r6
 800c356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c35a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c35e:	3f01      	subs	r7, #1
 800c360:	d501      	bpl.n	800c366 <_fwalk_reent+0x22>
 800c362:	6824      	ldr	r4, [r4, #0]
 800c364:	e7f5      	b.n	800c352 <_fwalk_reent+0xe>
 800c366:	89ab      	ldrh	r3, [r5, #12]
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d907      	bls.n	800c37c <_fwalk_reent+0x38>
 800c36c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c370:	3301      	adds	r3, #1
 800c372:	d003      	beq.n	800c37c <_fwalk_reent+0x38>
 800c374:	4629      	mov	r1, r5
 800c376:	4640      	mov	r0, r8
 800c378:	47c8      	blx	r9
 800c37a:	4306      	orrs	r6, r0
 800c37c:	3568      	adds	r5, #104	; 0x68
 800c37e:	e7ee      	b.n	800c35e <_fwalk_reent+0x1a>

0800c380 <__swhatbuf_r>:
 800c380:	b570      	push	{r4, r5, r6, lr}
 800c382:	460e      	mov	r6, r1
 800c384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c388:	2900      	cmp	r1, #0
 800c38a:	b096      	sub	sp, #88	; 0x58
 800c38c:	4614      	mov	r4, r2
 800c38e:	461d      	mov	r5, r3
 800c390:	da07      	bge.n	800c3a2 <__swhatbuf_r+0x22>
 800c392:	2300      	movs	r3, #0
 800c394:	602b      	str	r3, [r5, #0]
 800c396:	89b3      	ldrh	r3, [r6, #12]
 800c398:	061a      	lsls	r2, r3, #24
 800c39a:	d410      	bmi.n	800c3be <__swhatbuf_r+0x3e>
 800c39c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3a0:	e00e      	b.n	800c3c0 <__swhatbuf_r+0x40>
 800c3a2:	466a      	mov	r2, sp
 800c3a4:	f000 fc3e 	bl	800cc24 <_fstat_r>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	dbf2      	blt.n	800c392 <__swhatbuf_r+0x12>
 800c3ac:	9a01      	ldr	r2, [sp, #4]
 800c3ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c3b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c3b6:	425a      	negs	r2, r3
 800c3b8:	415a      	adcs	r2, r3
 800c3ba:	602a      	str	r2, [r5, #0]
 800c3bc:	e7ee      	b.n	800c39c <__swhatbuf_r+0x1c>
 800c3be:	2340      	movs	r3, #64	; 0x40
 800c3c0:	2000      	movs	r0, #0
 800c3c2:	6023      	str	r3, [r4, #0]
 800c3c4:	b016      	add	sp, #88	; 0x58
 800c3c6:	bd70      	pop	{r4, r5, r6, pc}

0800c3c8 <__smakebuf_r>:
 800c3c8:	898b      	ldrh	r3, [r1, #12]
 800c3ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3cc:	079d      	lsls	r5, r3, #30
 800c3ce:	4606      	mov	r6, r0
 800c3d0:	460c      	mov	r4, r1
 800c3d2:	d507      	bpl.n	800c3e4 <__smakebuf_r+0x1c>
 800c3d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c3d8:	6023      	str	r3, [r4, #0]
 800c3da:	6123      	str	r3, [r4, #16]
 800c3dc:	2301      	movs	r3, #1
 800c3de:	6163      	str	r3, [r4, #20]
 800c3e0:	b002      	add	sp, #8
 800c3e2:	bd70      	pop	{r4, r5, r6, pc}
 800c3e4:	ab01      	add	r3, sp, #4
 800c3e6:	466a      	mov	r2, sp
 800c3e8:	f7ff ffca 	bl	800c380 <__swhatbuf_r>
 800c3ec:	9900      	ldr	r1, [sp, #0]
 800c3ee:	4605      	mov	r5, r0
 800c3f0:	4630      	mov	r0, r6
 800c3f2:	f000 f87f 	bl	800c4f4 <_malloc_r>
 800c3f6:	b948      	cbnz	r0, 800c40c <__smakebuf_r+0x44>
 800c3f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3fc:	059a      	lsls	r2, r3, #22
 800c3fe:	d4ef      	bmi.n	800c3e0 <__smakebuf_r+0x18>
 800c400:	f023 0303 	bic.w	r3, r3, #3
 800c404:	f043 0302 	orr.w	r3, r3, #2
 800c408:	81a3      	strh	r3, [r4, #12]
 800c40a:	e7e3      	b.n	800c3d4 <__smakebuf_r+0xc>
 800c40c:	4b0d      	ldr	r3, [pc, #52]	; (800c444 <__smakebuf_r+0x7c>)
 800c40e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c410:	89a3      	ldrh	r3, [r4, #12]
 800c412:	6020      	str	r0, [r4, #0]
 800c414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c418:	81a3      	strh	r3, [r4, #12]
 800c41a:	9b00      	ldr	r3, [sp, #0]
 800c41c:	6163      	str	r3, [r4, #20]
 800c41e:	9b01      	ldr	r3, [sp, #4]
 800c420:	6120      	str	r0, [r4, #16]
 800c422:	b15b      	cbz	r3, 800c43c <__smakebuf_r+0x74>
 800c424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c428:	4630      	mov	r0, r6
 800c42a:	f000 fc0d 	bl	800cc48 <_isatty_r>
 800c42e:	b128      	cbz	r0, 800c43c <__smakebuf_r+0x74>
 800c430:	89a3      	ldrh	r3, [r4, #12]
 800c432:	f023 0303 	bic.w	r3, r3, #3
 800c436:	f043 0301 	orr.w	r3, r3, #1
 800c43a:	81a3      	strh	r3, [r4, #12]
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	431d      	orrs	r5, r3
 800c440:	81a5      	strh	r5, [r4, #12]
 800c442:	e7cd      	b.n	800c3e0 <__smakebuf_r+0x18>
 800c444:	0800c235 	.word	0x0800c235

0800c448 <malloc>:
 800c448:	4b02      	ldr	r3, [pc, #8]	; (800c454 <malloc+0xc>)
 800c44a:	4601      	mov	r1, r0
 800c44c:	6818      	ldr	r0, [r3, #0]
 800c44e:	f000 b851 	b.w	800c4f4 <_malloc_r>
 800c452:	bf00      	nop
 800c454:	20000064 	.word	0x20000064

0800c458 <_free_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	4605      	mov	r5, r0
 800c45c:	2900      	cmp	r1, #0
 800c45e:	d045      	beq.n	800c4ec <_free_r+0x94>
 800c460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c464:	1f0c      	subs	r4, r1, #4
 800c466:	2b00      	cmp	r3, #0
 800c468:	bfb8      	it	lt
 800c46a:	18e4      	addlt	r4, r4, r3
 800c46c:	f000 fc0e 	bl	800cc8c <__malloc_lock>
 800c470:	4a1f      	ldr	r2, [pc, #124]	; (800c4f0 <_free_r+0x98>)
 800c472:	6813      	ldr	r3, [r2, #0]
 800c474:	4610      	mov	r0, r2
 800c476:	b933      	cbnz	r3, 800c486 <_free_r+0x2e>
 800c478:	6063      	str	r3, [r4, #4]
 800c47a:	6014      	str	r4, [r2, #0]
 800c47c:	4628      	mov	r0, r5
 800c47e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c482:	f000 bc04 	b.w	800cc8e <__malloc_unlock>
 800c486:	42a3      	cmp	r3, r4
 800c488:	d90c      	bls.n	800c4a4 <_free_r+0x4c>
 800c48a:	6821      	ldr	r1, [r4, #0]
 800c48c:	1862      	adds	r2, r4, r1
 800c48e:	4293      	cmp	r3, r2
 800c490:	bf04      	itt	eq
 800c492:	681a      	ldreq	r2, [r3, #0]
 800c494:	685b      	ldreq	r3, [r3, #4]
 800c496:	6063      	str	r3, [r4, #4]
 800c498:	bf04      	itt	eq
 800c49a:	1852      	addeq	r2, r2, r1
 800c49c:	6022      	streq	r2, [r4, #0]
 800c49e:	6004      	str	r4, [r0, #0]
 800c4a0:	e7ec      	b.n	800c47c <_free_r+0x24>
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	685a      	ldr	r2, [r3, #4]
 800c4a6:	b10a      	cbz	r2, 800c4ac <_free_r+0x54>
 800c4a8:	42a2      	cmp	r2, r4
 800c4aa:	d9fa      	bls.n	800c4a2 <_free_r+0x4a>
 800c4ac:	6819      	ldr	r1, [r3, #0]
 800c4ae:	1858      	adds	r0, r3, r1
 800c4b0:	42a0      	cmp	r0, r4
 800c4b2:	d10b      	bne.n	800c4cc <_free_r+0x74>
 800c4b4:	6820      	ldr	r0, [r4, #0]
 800c4b6:	4401      	add	r1, r0
 800c4b8:	1858      	adds	r0, r3, r1
 800c4ba:	4282      	cmp	r2, r0
 800c4bc:	6019      	str	r1, [r3, #0]
 800c4be:	d1dd      	bne.n	800c47c <_free_r+0x24>
 800c4c0:	6810      	ldr	r0, [r2, #0]
 800c4c2:	6852      	ldr	r2, [r2, #4]
 800c4c4:	605a      	str	r2, [r3, #4]
 800c4c6:	4401      	add	r1, r0
 800c4c8:	6019      	str	r1, [r3, #0]
 800c4ca:	e7d7      	b.n	800c47c <_free_r+0x24>
 800c4cc:	d902      	bls.n	800c4d4 <_free_r+0x7c>
 800c4ce:	230c      	movs	r3, #12
 800c4d0:	602b      	str	r3, [r5, #0]
 800c4d2:	e7d3      	b.n	800c47c <_free_r+0x24>
 800c4d4:	6820      	ldr	r0, [r4, #0]
 800c4d6:	1821      	adds	r1, r4, r0
 800c4d8:	428a      	cmp	r2, r1
 800c4da:	bf04      	itt	eq
 800c4dc:	6811      	ldreq	r1, [r2, #0]
 800c4de:	6852      	ldreq	r2, [r2, #4]
 800c4e0:	6062      	str	r2, [r4, #4]
 800c4e2:	bf04      	itt	eq
 800c4e4:	1809      	addeq	r1, r1, r0
 800c4e6:	6021      	streq	r1, [r4, #0]
 800c4e8:	605c      	str	r4, [r3, #4]
 800c4ea:	e7c7      	b.n	800c47c <_free_r+0x24>
 800c4ec:	bd38      	pop	{r3, r4, r5, pc}
 800c4ee:	bf00      	nop
 800c4f0:	200000f4 	.word	0x200000f4

0800c4f4 <_malloc_r>:
 800c4f4:	b570      	push	{r4, r5, r6, lr}
 800c4f6:	1ccd      	adds	r5, r1, #3
 800c4f8:	f025 0503 	bic.w	r5, r5, #3
 800c4fc:	3508      	adds	r5, #8
 800c4fe:	2d0c      	cmp	r5, #12
 800c500:	bf38      	it	cc
 800c502:	250c      	movcc	r5, #12
 800c504:	2d00      	cmp	r5, #0
 800c506:	4606      	mov	r6, r0
 800c508:	db01      	blt.n	800c50e <_malloc_r+0x1a>
 800c50a:	42a9      	cmp	r1, r5
 800c50c:	d903      	bls.n	800c516 <_malloc_r+0x22>
 800c50e:	230c      	movs	r3, #12
 800c510:	6033      	str	r3, [r6, #0]
 800c512:	2000      	movs	r0, #0
 800c514:	bd70      	pop	{r4, r5, r6, pc}
 800c516:	f000 fbb9 	bl	800cc8c <__malloc_lock>
 800c51a:	4a21      	ldr	r2, [pc, #132]	; (800c5a0 <_malloc_r+0xac>)
 800c51c:	6814      	ldr	r4, [r2, #0]
 800c51e:	4621      	mov	r1, r4
 800c520:	b991      	cbnz	r1, 800c548 <_malloc_r+0x54>
 800c522:	4c20      	ldr	r4, [pc, #128]	; (800c5a4 <_malloc_r+0xb0>)
 800c524:	6823      	ldr	r3, [r4, #0]
 800c526:	b91b      	cbnz	r3, 800c530 <_malloc_r+0x3c>
 800c528:	4630      	mov	r0, r6
 800c52a:	f000 fb05 	bl	800cb38 <_sbrk_r>
 800c52e:	6020      	str	r0, [r4, #0]
 800c530:	4629      	mov	r1, r5
 800c532:	4630      	mov	r0, r6
 800c534:	f000 fb00 	bl	800cb38 <_sbrk_r>
 800c538:	1c43      	adds	r3, r0, #1
 800c53a:	d124      	bne.n	800c586 <_malloc_r+0x92>
 800c53c:	230c      	movs	r3, #12
 800c53e:	6033      	str	r3, [r6, #0]
 800c540:	4630      	mov	r0, r6
 800c542:	f000 fba4 	bl	800cc8e <__malloc_unlock>
 800c546:	e7e4      	b.n	800c512 <_malloc_r+0x1e>
 800c548:	680b      	ldr	r3, [r1, #0]
 800c54a:	1b5b      	subs	r3, r3, r5
 800c54c:	d418      	bmi.n	800c580 <_malloc_r+0x8c>
 800c54e:	2b0b      	cmp	r3, #11
 800c550:	d90f      	bls.n	800c572 <_malloc_r+0x7e>
 800c552:	600b      	str	r3, [r1, #0]
 800c554:	50cd      	str	r5, [r1, r3]
 800c556:	18cc      	adds	r4, r1, r3
 800c558:	4630      	mov	r0, r6
 800c55a:	f000 fb98 	bl	800cc8e <__malloc_unlock>
 800c55e:	f104 000b 	add.w	r0, r4, #11
 800c562:	1d23      	adds	r3, r4, #4
 800c564:	f020 0007 	bic.w	r0, r0, #7
 800c568:	1ac3      	subs	r3, r0, r3
 800c56a:	d0d3      	beq.n	800c514 <_malloc_r+0x20>
 800c56c:	425a      	negs	r2, r3
 800c56e:	50e2      	str	r2, [r4, r3]
 800c570:	e7d0      	b.n	800c514 <_malloc_r+0x20>
 800c572:	428c      	cmp	r4, r1
 800c574:	684b      	ldr	r3, [r1, #4]
 800c576:	bf16      	itet	ne
 800c578:	6063      	strne	r3, [r4, #4]
 800c57a:	6013      	streq	r3, [r2, #0]
 800c57c:	460c      	movne	r4, r1
 800c57e:	e7eb      	b.n	800c558 <_malloc_r+0x64>
 800c580:	460c      	mov	r4, r1
 800c582:	6849      	ldr	r1, [r1, #4]
 800c584:	e7cc      	b.n	800c520 <_malloc_r+0x2c>
 800c586:	1cc4      	adds	r4, r0, #3
 800c588:	f024 0403 	bic.w	r4, r4, #3
 800c58c:	42a0      	cmp	r0, r4
 800c58e:	d005      	beq.n	800c59c <_malloc_r+0xa8>
 800c590:	1a21      	subs	r1, r4, r0
 800c592:	4630      	mov	r0, r6
 800c594:	f000 fad0 	bl	800cb38 <_sbrk_r>
 800c598:	3001      	adds	r0, #1
 800c59a:	d0cf      	beq.n	800c53c <_malloc_r+0x48>
 800c59c:	6025      	str	r5, [r4, #0]
 800c59e:	e7db      	b.n	800c558 <_malloc_r+0x64>
 800c5a0:	200000f4 	.word	0x200000f4
 800c5a4:	200000f8 	.word	0x200000f8

0800c5a8 <__sfputc_r>:
 800c5a8:	6893      	ldr	r3, [r2, #8]
 800c5aa:	3b01      	subs	r3, #1
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	b410      	push	{r4}
 800c5b0:	6093      	str	r3, [r2, #8]
 800c5b2:	da08      	bge.n	800c5c6 <__sfputc_r+0x1e>
 800c5b4:	6994      	ldr	r4, [r2, #24]
 800c5b6:	42a3      	cmp	r3, r4
 800c5b8:	db01      	blt.n	800c5be <__sfputc_r+0x16>
 800c5ba:	290a      	cmp	r1, #10
 800c5bc:	d103      	bne.n	800c5c6 <__sfputc_r+0x1e>
 800c5be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5c2:	f7ff bca3 	b.w	800bf0c <__swbuf_r>
 800c5c6:	6813      	ldr	r3, [r2, #0]
 800c5c8:	1c58      	adds	r0, r3, #1
 800c5ca:	6010      	str	r0, [r2, #0]
 800c5cc:	7019      	strb	r1, [r3, #0]
 800c5ce:	4608      	mov	r0, r1
 800c5d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5d4:	4770      	bx	lr

0800c5d6 <__sfputs_r>:
 800c5d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5d8:	4606      	mov	r6, r0
 800c5da:	460f      	mov	r7, r1
 800c5dc:	4614      	mov	r4, r2
 800c5de:	18d5      	adds	r5, r2, r3
 800c5e0:	42ac      	cmp	r4, r5
 800c5e2:	d101      	bne.n	800c5e8 <__sfputs_r+0x12>
 800c5e4:	2000      	movs	r0, #0
 800c5e6:	e007      	b.n	800c5f8 <__sfputs_r+0x22>
 800c5e8:	463a      	mov	r2, r7
 800c5ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	f7ff ffda 	bl	800c5a8 <__sfputc_r>
 800c5f4:	1c43      	adds	r3, r0, #1
 800c5f6:	d1f3      	bne.n	800c5e0 <__sfputs_r+0xa>
 800c5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5fc <_vfiprintf_r>:
 800c5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c600:	460c      	mov	r4, r1
 800c602:	b09d      	sub	sp, #116	; 0x74
 800c604:	4617      	mov	r7, r2
 800c606:	461d      	mov	r5, r3
 800c608:	4606      	mov	r6, r0
 800c60a:	b118      	cbz	r0, 800c614 <_vfiprintf_r+0x18>
 800c60c:	6983      	ldr	r3, [r0, #24]
 800c60e:	b90b      	cbnz	r3, 800c614 <_vfiprintf_r+0x18>
 800c610:	f7ff fe2c 	bl	800c26c <__sinit>
 800c614:	4b7c      	ldr	r3, [pc, #496]	; (800c808 <_vfiprintf_r+0x20c>)
 800c616:	429c      	cmp	r4, r3
 800c618:	d158      	bne.n	800c6cc <_vfiprintf_r+0xd0>
 800c61a:	6874      	ldr	r4, [r6, #4]
 800c61c:	89a3      	ldrh	r3, [r4, #12]
 800c61e:	0718      	lsls	r0, r3, #28
 800c620:	d55e      	bpl.n	800c6e0 <_vfiprintf_r+0xe4>
 800c622:	6923      	ldr	r3, [r4, #16]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d05b      	beq.n	800c6e0 <_vfiprintf_r+0xe4>
 800c628:	2300      	movs	r3, #0
 800c62a:	9309      	str	r3, [sp, #36]	; 0x24
 800c62c:	2320      	movs	r3, #32
 800c62e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c632:	2330      	movs	r3, #48	; 0x30
 800c634:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c638:	9503      	str	r5, [sp, #12]
 800c63a:	f04f 0b01 	mov.w	fp, #1
 800c63e:	46b8      	mov	r8, r7
 800c640:	4645      	mov	r5, r8
 800c642:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c646:	b10b      	cbz	r3, 800c64c <_vfiprintf_r+0x50>
 800c648:	2b25      	cmp	r3, #37	; 0x25
 800c64a:	d154      	bne.n	800c6f6 <_vfiprintf_r+0xfa>
 800c64c:	ebb8 0a07 	subs.w	sl, r8, r7
 800c650:	d00b      	beq.n	800c66a <_vfiprintf_r+0x6e>
 800c652:	4653      	mov	r3, sl
 800c654:	463a      	mov	r2, r7
 800c656:	4621      	mov	r1, r4
 800c658:	4630      	mov	r0, r6
 800c65a:	f7ff ffbc 	bl	800c5d6 <__sfputs_r>
 800c65e:	3001      	adds	r0, #1
 800c660:	f000 80c2 	beq.w	800c7e8 <_vfiprintf_r+0x1ec>
 800c664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c666:	4453      	add	r3, sl
 800c668:	9309      	str	r3, [sp, #36]	; 0x24
 800c66a:	f898 3000 	ldrb.w	r3, [r8]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f000 80ba 	beq.w	800c7e8 <_vfiprintf_r+0x1ec>
 800c674:	2300      	movs	r3, #0
 800c676:	f04f 32ff 	mov.w	r2, #4294967295
 800c67a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c67e:	9304      	str	r3, [sp, #16]
 800c680:	9307      	str	r3, [sp, #28]
 800c682:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c686:	931a      	str	r3, [sp, #104]	; 0x68
 800c688:	46a8      	mov	r8, r5
 800c68a:	2205      	movs	r2, #5
 800c68c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c690:	485e      	ldr	r0, [pc, #376]	; (800c80c <_vfiprintf_r+0x210>)
 800c692:	f7f3 fd9d 	bl	80001d0 <memchr>
 800c696:	9b04      	ldr	r3, [sp, #16]
 800c698:	bb78      	cbnz	r0, 800c6fa <_vfiprintf_r+0xfe>
 800c69a:	06d9      	lsls	r1, r3, #27
 800c69c:	bf44      	itt	mi
 800c69e:	2220      	movmi	r2, #32
 800c6a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c6a4:	071a      	lsls	r2, r3, #28
 800c6a6:	bf44      	itt	mi
 800c6a8:	222b      	movmi	r2, #43	; 0x2b
 800c6aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c6ae:	782a      	ldrb	r2, [r5, #0]
 800c6b0:	2a2a      	cmp	r2, #42	; 0x2a
 800c6b2:	d02a      	beq.n	800c70a <_vfiprintf_r+0x10e>
 800c6b4:	9a07      	ldr	r2, [sp, #28]
 800c6b6:	46a8      	mov	r8, r5
 800c6b8:	2000      	movs	r0, #0
 800c6ba:	250a      	movs	r5, #10
 800c6bc:	4641      	mov	r1, r8
 800c6be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6c2:	3b30      	subs	r3, #48	; 0x30
 800c6c4:	2b09      	cmp	r3, #9
 800c6c6:	d969      	bls.n	800c79c <_vfiprintf_r+0x1a0>
 800c6c8:	b360      	cbz	r0, 800c724 <_vfiprintf_r+0x128>
 800c6ca:	e024      	b.n	800c716 <_vfiprintf_r+0x11a>
 800c6cc:	4b50      	ldr	r3, [pc, #320]	; (800c810 <_vfiprintf_r+0x214>)
 800c6ce:	429c      	cmp	r4, r3
 800c6d0:	d101      	bne.n	800c6d6 <_vfiprintf_r+0xda>
 800c6d2:	68b4      	ldr	r4, [r6, #8]
 800c6d4:	e7a2      	b.n	800c61c <_vfiprintf_r+0x20>
 800c6d6:	4b4f      	ldr	r3, [pc, #316]	; (800c814 <_vfiprintf_r+0x218>)
 800c6d8:	429c      	cmp	r4, r3
 800c6da:	bf08      	it	eq
 800c6dc:	68f4      	ldreq	r4, [r6, #12]
 800c6de:	e79d      	b.n	800c61c <_vfiprintf_r+0x20>
 800c6e0:	4621      	mov	r1, r4
 800c6e2:	4630      	mov	r0, r6
 800c6e4:	f7ff fc64 	bl	800bfb0 <__swsetup_r>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d09d      	beq.n	800c628 <_vfiprintf_r+0x2c>
 800c6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f0:	b01d      	add	sp, #116	; 0x74
 800c6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f6:	46a8      	mov	r8, r5
 800c6f8:	e7a2      	b.n	800c640 <_vfiprintf_r+0x44>
 800c6fa:	4a44      	ldr	r2, [pc, #272]	; (800c80c <_vfiprintf_r+0x210>)
 800c6fc:	1a80      	subs	r0, r0, r2
 800c6fe:	fa0b f000 	lsl.w	r0, fp, r0
 800c702:	4318      	orrs	r0, r3
 800c704:	9004      	str	r0, [sp, #16]
 800c706:	4645      	mov	r5, r8
 800c708:	e7be      	b.n	800c688 <_vfiprintf_r+0x8c>
 800c70a:	9a03      	ldr	r2, [sp, #12]
 800c70c:	1d11      	adds	r1, r2, #4
 800c70e:	6812      	ldr	r2, [r2, #0]
 800c710:	9103      	str	r1, [sp, #12]
 800c712:	2a00      	cmp	r2, #0
 800c714:	db01      	blt.n	800c71a <_vfiprintf_r+0x11e>
 800c716:	9207      	str	r2, [sp, #28]
 800c718:	e004      	b.n	800c724 <_vfiprintf_r+0x128>
 800c71a:	4252      	negs	r2, r2
 800c71c:	f043 0302 	orr.w	r3, r3, #2
 800c720:	9207      	str	r2, [sp, #28]
 800c722:	9304      	str	r3, [sp, #16]
 800c724:	f898 3000 	ldrb.w	r3, [r8]
 800c728:	2b2e      	cmp	r3, #46	; 0x2e
 800c72a:	d10e      	bne.n	800c74a <_vfiprintf_r+0x14e>
 800c72c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c730:	2b2a      	cmp	r3, #42	; 0x2a
 800c732:	d138      	bne.n	800c7a6 <_vfiprintf_r+0x1aa>
 800c734:	9b03      	ldr	r3, [sp, #12]
 800c736:	1d1a      	adds	r2, r3, #4
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	9203      	str	r2, [sp, #12]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	bfb8      	it	lt
 800c740:	f04f 33ff 	movlt.w	r3, #4294967295
 800c744:	f108 0802 	add.w	r8, r8, #2
 800c748:	9305      	str	r3, [sp, #20]
 800c74a:	4d33      	ldr	r5, [pc, #204]	; (800c818 <_vfiprintf_r+0x21c>)
 800c74c:	f898 1000 	ldrb.w	r1, [r8]
 800c750:	2203      	movs	r2, #3
 800c752:	4628      	mov	r0, r5
 800c754:	f7f3 fd3c 	bl	80001d0 <memchr>
 800c758:	b140      	cbz	r0, 800c76c <_vfiprintf_r+0x170>
 800c75a:	2340      	movs	r3, #64	; 0x40
 800c75c:	1b40      	subs	r0, r0, r5
 800c75e:	fa03 f000 	lsl.w	r0, r3, r0
 800c762:	9b04      	ldr	r3, [sp, #16]
 800c764:	4303      	orrs	r3, r0
 800c766:	f108 0801 	add.w	r8, r8, #1
 800c76a:	9304      	str	r3, [sp, #16]
 800c76c:	f898 1000 	ldrb.w	r1, [r8]
 800c770:	482a      	ldr	r0, [pc, #168]	; (800c81c <_vfiprintf_r+0x220>)
 800c772:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c776:	2206      	movs	r2, #6
 800c778:	f108 0701 	add.w	r7, r8, #1
 800c77c:	f7f3 fd28 	bl	80001d0 <memchr>
 800c780:	2800      	cmp	r0, #0
 800c782:	d037      	beq.n	800c7f4 <_vfiprintf_r+0x1f8>
 800c784:	4b26      	ldr	r3, [pc, #152]	; (800c820 <_vfiprintf_r+0x224>)
 800c786:	bb1b      	cbnz	r3, 800c7d0 <_vfiprintf_r+0x1d4>
 800c788:	9b03      	ldr	r3, [sp, #12]
 800c78a:	3307      	adds	r3, #7
 800c78c:	f023 0307 	bic.w	r3, r3, #7
 800c790:	3308      	adds	r3, #8
 800c792:	9303      	str	r3, [sp, #12]
 800c794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c796:	444b      	add	r3, r9
 800c798:	9309      	str	r3, [sp, #36]	; 0x24
 800c79a:	e750      	b.n	800c63e <_vfiprintf_r+0x42>
 800c79c:	fb05 3202 	mla	r2, r5, r2, r3
 800c7a0:	2001      	movs	r0, #1
 800c7a2:	4688      	mov	r8, r1
 800c7a4:	e78a      	b.n	800c6bc <_vfiprintf_r+0xc0>
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	f108 0801 	add.w	r8, r8, #1
 800c7ac:	9305      	str	r3, [sp, #20]
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	250a      	movs	r5, #10
 800c7b2:	4640      	mov	r0, r8
 800c7b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7b8:	3a30      	subs	r2, #48	; 0x30
 800c7ba:	2a09      	cmp	r2, #9
 800c7bc:	d903      	bls.n	800c7c6 <_vfiprintf_r+0x1ca>
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d0c3      	beq.n	800c74a <_vfiprintf_r+0x14e>
 800c7c2:	9105      	str	r1, [sp, #20]
 800c7c4:	e7c1      	b.n	800c74a <_vfiprintf_r+0x14e>
 800c7c6:	fb05 2101 	mla	r1, r5, r1, r2
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	4680      	mov	r8, r0
 800c7ce:	e7f0      	b.n	800c7b2 <_vfiprintf_r+0x1b6>
 800c7d0:	ab03      	add	r3, sp, #12
 800c7d2:	9300      	str	r3, [sp, #0]
 800c7d4:	4622      	mov	r2, r4
 800c7d6:	4b13      	ldr	r3, [pc, #76]	; (800c824 <_vfiprintf_r+0x228>)
 800c7d8:	a904      	add	r1, sp, #16
 800c7da:	4630      	mov	r0, r6
 800c7dc:	f3af 8000 	nop.w
 800c7e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c7e4:	4681      	mov	r9, r0
 800c7e6:	d1d5      	bne.n	800c794 <_vfiprintf_r+0x198>
 800c7e8:	89a3      	ldrh	r3, [r4, #12]
 800c7ea:	065b      	lsls	r3, r3, #25
 800c7ec:	f53f af7e 	bmi.w	800c6ec <_vfiprintf_r+0xf0>
 800c7f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7f2:	e77d      	b.n	800c6f0 <_vfiprintf_r+0xf4>
 800c7f4:	ab03      	add	r3, sp, #12
 800c7f6:	9300      	str	r3, [sp, #0]
 800c7f8:	4622      	mov	r2, r4
 800c7fa:	4b0a      	ldr	r3, [pc, #40]	; (800c824 <_vfiprintf_r+0x228>)
 800c7fc:	a904      	add	r1, sp, #16
 800c7fe:	4630      	mov	r0, r6
 800c800:	f000 f888 	bl	800c914 <_printf_i>
 800c804:	e7ec      	b.n	800c7e0 <_vfiprintf_r+0x1e4>
 800c806:	bf00      	nop
 800c808:	0800d2c0 	.word	0x0800d2c0
 800c80c:	0800d300 	.word	0x0800d300
 800c810:	0800d2e0 	.word	0x0800d2e0
 800c814:	0800d2a0 	.word	0x0800d2a0
 800c818:	0800d306 	.word	0x0800d306
 800c81c:	0800d30a 	.word	0x0800d30a
 800c820:	00000000 	.word	0x00000000
 800c824:	0800c5d7 	.word	0x0800c5d7

0800c828 <_printf_common>:
 800c828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c82c:	4691      	mov	r9, r2
 800c82e:	461f      	mov	r7, r3
 800c830:	688a      	ldr	r2, [r1, #8]
 800c832:	690b      	ldr	r3, [r1, #16]
 800c834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c838:	4293      	cmp	r3, r2
 800c83a:	bfb8      	it	lt
 800c83c:	4613      	movlt	r3, r2
 800c83e:	f8c9 3000 	str.w	r3, [r9]
 800c842:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c846:	4606      	mov	r6, r0
 800c848:	460c      	mov	r4, r1
 800c84a:	b112      	cbz	r2, 800c852 <_printf_common+0x2a>
 800c84c:	3301      	adds	r3, #1
 800c84e:	f8c9 3000 	str.w	r3, [r9]
 800c852:	6823      	ldr	r3, [r4, #0]
 800c854:	0699      	lsls	r1, r3, #26
 800c856:	bf42      	ittt	mi
 800c858:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c85c:	3302      	addmi	r3, #2
 800c85e:	f8c9 3000 	strmi.w	r3, [r9]
 800c862:	6825      	ldr	r5, [r4, #0]
 800c864:	f015 0506 	ands.w	r5, r5, #6
 800c868:	d107      	bne.n	800c87a <_printf_common+0x52>
 800c86a:	f104 0a19 	add.w	sl, r4, #25
 800c86e:	68e3      	ldr	r3, [r4, #12]
 800c870:	f8d9 2000 	ldr.w	r2, [r9]
 800c874:	1a9b      	subs	r3, r3, r2
 800c876:	42ab      	cmp	r3, r5
 800c878:	dc28      	bgt.n	800c8cc <_printf_common+0xa4>
 800c87a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c87e:	6822      	ldr	r2, [r4, #0]
 800c880:	3300      	adds	r3, #0
 800c882:	bf18      	it	ne
 800c884:	2301      	movne	r3, #1
 800c886:	0692      	lsls	r2, r2, #26
 800c888:	d42d      	bmi.n	800c8e6 <_printf_common+0xbe>
 800c88a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c88e:	4639      	mov	r1, r7
 800c890:	4630      	mov	r0, r6
 800c892:	47c0      	blx	r8
 800c894:	3001      	adds	r0, #1
 800c896:	d020      	beq.n	800c8da <_printf_common+0xb2>
 800c898:	6823      	ldr	r3, [r4, #0]
 800c89a:	68e5      	ldr	r5, [r4, #12]
 800c89c:	f8d9 2000 	ldr.w	r2, [r9]
 800c8a0:	f003 0306 	and.w	r3, r3, #6
 800c8a4:	2b04      	cmp	r3, #4
 800c8a6:	bf08      	it	eq
 800c8a8:	1aad      	subeq	r5, r5, r2
 800c8aa:	68a3      	ldr	r3, [r4, #8]
 800c8ac:	6922      	ldr	r2, [r4, #16]
 800c8ae:	bf0c      	ite	eq
 800c8b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8b4:	2500      	movne	r5, #0
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	bfc4      	itt	gt
 800c8ba:	1a9b      	subgt	r3, r3, r2
 800c8bc:	18ed      	addgt	r5, r5, r3
 800c8be:	f04f 0900 	mov.w	r9, #0
 800c8c2:	341a      	adds	r4, #26
 800c8c4:	454d      	cmp	r5, r9
 800c8c6:	d11a      	bne.n	800c8fe <_printf_common+0xd6>
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	e008      	b.n	800c8de <_printf_common+0xb6>
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	4652      	mov	r2, sl
 800c8d0:	4639      	mov	r1, r7
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	47c0      	blx	r8
 800c8d6:	3001      	adds	r0, #1
 800c8d8:	d103      	bne.n	800c8e2 <_printf_common+0xba>
 800c8da:	f04f 30ff 	mov.w	r0, #4294967295
 800c8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8e2:	3501      	adds	r5, #1
 800c8e4:	e7c3      	b.n	800c86e <_printf_common+0x46>
 800c8e6:	18e1      	adds	r1, r4, r3
 800c8e8:	1c5a      	adds	r2, r3, #1
 800c8ea:	2030      	movs	r0, #48	; 0x30
 800c8ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8f0:	4422      	add	r2, r4
 800c8f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8fa:	3302      	adds	r3, #2
 800c8fc:	e7c5      	b.n	800c88a <_printf_common+0x62>
 800c8fe:	2301      	movs	r3, #1
 800c900:	4622      	mov	r2, r4
 800c902:	4639      	mov	r1, r7
 800c904:	4630      	mov	r0, r6
 800c906:	47c0      	blx	r8
 800c908:	3001      	adds	r0, #1
 800c90a:	d0e6      	beq.n	800c8da <_printf_common+0xb2>
 800c90c:	f109 0901 	add.w	r9, r9, #1
 800c910:	e7d8      	b.n	800c8c4 <_printf_common+0x9c>
	...

0800c914 <_printf_i>:
 800c914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c918:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c91c:	460c      	mov	r4, r1
 800c91e:	7e09      	ldrb	r1, [r1, #24]
 800c920:	b085      	sub	sp, #20
 800c922:	296e      	cmp	r1, #110	; 0x6e
 800c924:	4617      	mov	r7, r2
 800c926:	4606      	mov	r6, r0
 800c928:	4698      	mov	r8, r3
 800c92a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c92c:	f000 80b3 	beq.w	800ca96 <_printf_i+0x182>
 800c930:	d822      	bhi.n	800c978 <_printf_i+0x64>
 800c932:	2963      	cmp	r1, #99	; 0x63
 800c934:	d036      	beq.n	800c9a4 <_printf_i+0x90>
 800c936:	d80a      	bhi.n	800c94e <_printf_i+0x3a>
 800c938:	2900      	cmp	r1, #0
 800c93a:	f000 80b9 	beq.w	800cab0 <_printf_i+0x19c>
 800c93e:	2958      	cmp	r1, #88	; 0x58
 800c940:	f000 8083 	beq.w	800ca4a <_printf_i+0x136>
 800c944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c948:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c94c:	e032      	b.n	800c9b4 <_printf_i+0xa0>
 800c94e:	2964      	cmp	r1, #100	; 0x64
 800c950:	d001      	beq.n	800c956 <_printf_i+0x42>
 800c952:	2969      	cmp	r1, #105	; 0x69
 800c954:	d1f6      	bne.n	800c944 <_printf_i+0x30>
 800c956:	6820      	ldr	r0, [r4, #0]
 800c958:	6813      	ldr	r3, [r2, #0]
 800c95a:	0605      	lsls	r5, r0, #24
 800c95c:	f103 0104 	add.w	r1, r3, #4
 800c960:	d52a      	bpl.n	800c9b8 <_printf_i+0xa4>
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	6011      	str	r1, [r2, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	da03      	bge.n	800c972 <_printf_i+0x5e>
 800c96a:	222d      	movs	r2, #45	; 0x2d
 800c96c:	425b      	negs	r3, r3
 800c96e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c972:	486f      	ldr	r0, [pc, #444]	; (800cb30 <_printf_i+0x21c>)
 800c974:	220a      	movs	r2, #10
 800c976:	e039      	b.n	800c9ec <_printf_i+0xd8>
 800c978:	2973      	cmp	r1, #115	; 0x73
 800c97a:	f000 809d 	beq.w	800cab8 <_printf_i+0x1a4>
 800c97e:	d808      	bhi.n	800c992 <_printf_i+0x7e>
 800c980:	296f      	cmp	r1, #111	; 0x6f
 800c982:	d020      	beq.n	800c9c6 <_printf_i+0xb2>
 800c984:	2970      	cmp	r1, #112	; 0x70
 800c986:	d1dd      	bne.n	800c944 <_printf_i+0x30>
 800c988:	6823      	ldr	r3, [r4, #0]
 800c98a:	f043 0320 	orr.w	r3, r3, #32
 800c98e:	6023      	str	r3, [r4, #0]
 800c990:	e003      	b.n	800c99a <_printf_i+0x86>
 800c992:	2975      	cmp	r1, #117	; 0x75
 800c994:	d017      	beq.n	800c9c6 <_printf_i+0xb2>
 800c996:	2978      	cmp	r1, #120	; 0x78
 800c998:	d1d4      	bne.n	800c944 <_printf_i+0x30>
 800c99a:	2378      	movs	r3, #120	; 0x78
 800c99c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c9a0:	4864      	ldr	r0, [pc, #400]	; (800cb34 <_printf_i+0x220>)
 800c9a2:	e055      	b.n	800ca50 <_printf_i+0x13c>
 800c9a4:	6813      	ldr	r3, [r2, #0]
 800c9a6:	1d19      	adds	r1, r3, #4
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	6011      	str	r1, [r2, #0]
 800c9ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e08c      	b.n	800cad2 <_printf_i+0x1be>
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	6011      	str	r1, [r2, #0]
 800c9bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c9c0:	bf18      	it	ne
 800c9c2:	b21b      	sxthne	r3, r3
 800c9c4:	e7cf      	b.n	800c966 <_printf_i+0x52>
 800c9c6:	6813      	ldr	r3, [r2, #0]
 800c9c8:	6825      	ldr	r5, [r4, #0]
 800c9ca:	1d18      	adds	r0, r3, #4
 800c9cc:	6010      	str	r0, [r2, #0]
 800c9ce:	0628      	lsls	r0, r5, #24
 800c9d0:	d501      	bpl.n	800c9d6 <_printf_i+0xc2>
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	e002      	b.n	800c9dc <_printf_i+0xc8>
 800c9d6:	0668      	lsls	r0, r5, #25
 800c9d8:	d5fb      	bpl.n	800c9d2 <_printf_i+0xbe>
 800c9da:	881b      	ldrh	r3, [r3, #0]
 800c9dc:	4854      	ldr	r0, [pc, #336]	; (800cb30 <_printf_i+0x21c>)
 800c9de:	296f      	cmp	r1, #111	; 0x6f
 800c9e0:	bf14      	ite	ne
 800c9e2:	220a      	movne	r2, #10
 800c9e4:	2208      	moveq	r2, #8
 800c9e6:	2100      	movs	r1, #0
 800c9e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9ec:	6865      	ldr	r5, [r4, #4]
 800c9ee:	60a5      	str	r5, [r4, #8]
 800c9f0:	2d00      	cmp	r5, #0
 800c9f2:	f2c0 8095 	blt.w	800cb20 <_printf_i+0x20c>
 800c9f6:	6821      	ldr	r1, [r4, #0]
 800c9f8:	f021 0104 	bic.w	r1, r1, #4
 800c9fc:	6021      	str	r1, [r4, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d13d      	bne.n	800ca7e <_printf_i+0x16a>
 800ca02:	2d00      	cmp	r5, #0
 800ca04:	f040 808e 	bne.w	800cb24 <_printf_i+0x210>
 800ca08:	4665      	mov	r5, ip
 800ca0a:	2a08      	cmp	r2, #8
 800ca0c:	d10b      	bne.n	800ca26 <_printf_i+0x112>
 800ca0e:	6823      	ldr	r3, [r4, #0]
 800ca10:	07db      	lsls	r3, r3, #31
 800ca12:	d508      	bpl.n	800ca26 <_printf_i+0x112>
 800ca14:	6923      	ldr	r3, [r4, #16]
 800ca16:	6862      	ldr	r2, [r4, #4]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	bfde      	ittt	le
 800ca1c:	2330      	movle	r3, #48	; 0x30
 800ca1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca22:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca26:	ebac 0305 	sub.w	r3, ip, r5
 800ca2a:	6123      	str	r3, [r4, #16]
 800ca2c:	f8cd 8000 	str.w	r8, [sp]
 800ca30:	463b      	mov	r3, r7
 800ca32:	aa03      	add	r2, sp, #12
 800ca34:	4621      	mov	r1, r4
 800ca36:	4630      	mov	r0, r6
 800ca38:	f7ff fef6 	bl	800c828 <_printf_common>
 800ca3c:	3001      	adds	r0, #1
 800ca3e:	d14d      	bne.n	800cadc <_printf_i+0x1c8>
 800ca40:	f04f 30ff 	mov.w	r0, #4294967295
 800ca44:	b005      	add	sp, #20
 800ca46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca4a:	4839      	ldr	r0, [pc, #228]	; (800cb30 <_printf_i+0x21c>)
 800ca4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ca50:	6813      	ldr	r3, [r2, #0]
 800ca52:	6821      	ldr	r1, [r4, #0]
 800ca54:	1d1d      	adds	r5, r3, #4
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	6015      	str	r5, [r2, #0]
 800ca5a:	060a      	lsls	r2, r1, #24
 800ca5c:	d50b      	bpl.n	800ca76 <_printf_i+0x162>
 800ca5e:	07ca      	lsls	r2, r1, #31
 800ca60:	bf44      	itt	mi
 800ca62:	f041 0120 	orrmi.w	r1, r1, #32
 800ca66:	6021      	strmi	r1, [r4, #0]
 800ca68:	b91b      	cbnz	r3, 800ca72 <_printf_i+0x15e>
 800ca6a:	6822      	ldr	r2, [r4, #0]
 800ca6c:	f022 0220 	bic.w	r2, r2, #32
 800ca70:	6022      	str	r2, [r4, #0]
 800ca72:	2210      	movs	r2, #16
 800ca74:	e7b7      	b.n	800c9e6 <_printf_i+0xd2>
 800ca76:	064d      	lsls	r5, r1, #25
 800ca78:	bf48      	it	mi
 800ca7a:	b29b      	uxthmi	r3, r3
 800ca7c:	e7ef      	b.n	800ca5e <_printf_i+0x14a>
 800ca7e:	4665      	mov	r5, ip
 800ca80:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca84:	fb02 3311 	mls	r3, r2, r1, r3
 800ca88:	5cc3      	ldrb	r3, [r0, r3]
 800ca8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ca8e:	460b      	mov	r3, r1
 800ca90:	2900      	cmp	r1, #0
 800ca92:	d1f5      	bne.n	800ca80 <_printf_i+0x16c>
 800ca94:	e7b9      	b.n	800ca0a <_printf_i+0xf6>
 800ca96:	6813      	ldr	r3, [r2, #0]
 800ca98:	6825      	ldr	r5, [r4, #0]
 800ca9a:	6961      	ldr	r1, [r4, #20]
 800ca9c:	1d18      	adds	r0, r3, #4
 800ca9e:	6010      	str	r0, [r2, #0]
 800caa0:	0628      	lsls	r0, r5, #24
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	d501      	bpl.n	800caaa <_printf_i+0x196>
 800caa6:	6019      	str	r1, [r3, #0]
 800caa8:	e002      	b.n	800cab0 <_printf_i+0x19c>
 800caaa:	066a      	lsls	r2, r5, #25
 800caac:	d5fb      	bpl.n	800caa6 <_printf_i+0x192>
 800caae:	8019      	strh	r1, [r3, #0]
 800cab0:	2300      	movs	r3, #0
 800cab2:	6123      	str	r3, [r4, #16]
 800cab4:	4665      	mov	r5, ip
 800cab6:	e7b9      	b.n	800ca2c <_printf_i+0x118>
 800cab8:	6813      	ldr	r3, [r2, #0]
 800caba:	1d19      	adds	r1, r3, #4
 800cabc:	6011      	str	r1, [r2, #0]
 800cabe:	681d      	ldr	r5, [r3, #0]
 800cac0:	6862      	ldr	r2, [r4, #4]
 800cac2:	2100      	movs	r1, #0
 800cac4:	4628      	mov	r0, r5
 800cac6:	f7f3 fb83 	bl	80001d0 <memchr>
 800caca:	b108      	cbz	r0, 800cad0 <_printf_i+0x1bc>
 800cacc:	1b40      	subs	r0, r0, r5
 800cace:	6060      	str	r0, [r4, #4]
 800cad0:	6863      	ldr	r3, [r4, #4]
 800cad2:	6123      	str	r3, [r4, #16]
 800cad4:	2300      	movs	r3, #0
 800cad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cada:	e7a7      	b.n	800ca2c <_printf_i+0x118>
 800cadc:	6923      	ldr	r3, [r4, #16]
 800cade:	462a      	mov	r2, r5
 800cae0:	4639      	mov	r1, r7
 800cae2:	4630      	mov	r0, r6
 800cae4:	47c0      	blx	r8
 800cae6:	3001      	adds	r0, #1
 800cae8:	d0aa      	beq.n	800ca40 <_printf_i+0x12c>
 800caea:	6823      	ldr	r3, [r4, #0]
 800caec:	079b      	lsls	r3, r3, #30
 800caee:	d413      	bmi.n	800cb18 <_printf_i+0x204>
 800caf0:	68e0      	ldr	r0, [r4, #12]
 800caf2:	9b03      	ldr	r3, [sp, #12]
 800caf4:	4298      	cmp	r0, r3
 800caf6:	bfb8      	it	lt
 800caf8:	4618      	movlt	r0, r3
 800cafa:	e7a3      	b.n	800ca44 <_printf_i+0x130>
 800cafc:	2301      	movs	r3, #1
 800cafe:	464a      	mov	r2, r9
 800cb00:	4639      	mov	r1, r7
 800cb02:	4630      	mov	r0, r6
 800cb04:	47c0      	blx	r8
 800cb06:	3001      	adds	r0, #1
 800cb08:	d09a      	beq.n	800ca40 <_printf_i+0x12c>
 800cb0a:	3501      	adds	r5, #1
 800cb0c:	68e3      	ldr	r3, [r4, #12]
 800cb0e:	9a03      	ldr	r2, [sp, #12]
 800cb10:	1a9b      	subs	r3, r3, r2
 800cb12:	42ab      	cmp	r3, r5
 800cb14:	dcf2      	bgt.n	800cafc <_printf_i+0x1e8>
 800cb16:	e7eb      	b.n	800caf0 <_printf_i+0x1dc>
 800cb18:	2500      	movs	r5, #0
 800cb1a:	f104 0919 	add.w	r9, r4, #25
 800cb1e:	e7f5      	b.n	800cb0c <_printf_i+0x1f8>
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1ac      	bne.n	800ca7e <_printf_i+0x16a>
 800cb24:	7803      	ldrb	r3, [r0, #0]
 800cb26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb2e:	e76c      	b.n	800ca0a <_printf_i+0xf6>
 800cb30:	0800d311 	.word	0x0800d311
 800cb34:	0800d322 	.word	0x0800d322

0800cb38 <_sbrk_r>:
 800cb38:	b538      	push	{r3, r4, r5, lr}
 800cb3a:	4c06      	ldr	r4, [pc, #24]	; (800cb54 <_sbrk_r+0x1c>)
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	4605      	mov	r5, r0
 800cb40:	4608      	mov	r0, r1
 800cb42:	6023      	str	r3, [r4, #0]
 800cb44:	f7fe fff2 	bl	800bb2c <_sbrk>
 800cb48:	1c43      	adds	r3, r0, #1
 800cb4a:	d102      	bne.n	800cb52 <_sbrk_r+0x1a>
 800cb4c:	6823      	ldr	r3, [r4, #0]
 800cb4e:	b103      	cbz	r3, 800cb52 <_sbrk_r+0x1a>
 800cb50:	602b      	str	r3, [r5, #0]
 800cb52:	bd38      	pop	{r3, r4, r5, pc}
 800cb54:	20000e60 	.word	0x20000e60

0800cb58 <__sread>:
 800cb58:	b510      	push	{r4, lr}
 800cb5a:	460c      	mov	r4, r1
 800cb5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb60:	f000 f896 	bl	800cc90 <_read_r>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	bfab      	itete	ge
 800cb68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cb6a:	89a3      	ldrhlt	r3, [r4, #12]
 800cb6c:	181b      	addge	r3, r3, r0
 800cb6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cb72:	bfac      	ite	ge
 800cb74:	6563      	strge	r3, [r4, #84]	; 0x54
 800cb76:	81a3      	strhlt	r3, [r4, #12]
 800cb78:	bd10      	pop	{r4, pc}

0800cb7a <__swrite>:
 800cb7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb7e:	461f      	mov	r7, r3
 800cb80:	898b      	ldrh	r3, [r1, #12]
 800cb82:	05db      	lsls	r3, r3, #23
 800cb84:	4605      	mov	r5, r0
 800cb86:	460c      	mov	r4, r1
 800cb88:	4616      	mov	r6, r2
 800cb8a:	d505      	bpl.n	800cb98 <__swrite+0x1e>
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb94:	f000 f868 	bl	800cc68 <_lseek_r>
 800cb98:	89a3      	ldrh	r3, [r4, #12]
 800cb9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cba2:	81a3      	strh	r3, [r4, #12]
 800cba4:	4632      	mov	r2, r6
 800cba6:	463b      	mov	r3, r7
 800cba8:	4628      	mov	r0, r5
 800cbaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbae:	f000 b817 	b.w	800cbe0 <_write_r>

0800cbb2 <__sseek>:
 800cbb2:	b510      	push	{r4, lr}
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbba:	f000 f855 	bl	800cc68 <_lseek_r>
 800cbbe:	1c43      	adds	r3, r0, #1
 800cbc0:	89a3      	ldrh	r3, [r4, #12]
 800cbc2:	bf15      	itete	ne
 800cbc4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cbc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cbca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cbce:	81a3      	strheq	r3, [r4, #12]
 800cbd0:	bf18      	it	ne
 800cbd2:	81a3      	strhne	r3, [r4, #12]
 800cbd4:	bd10      	pop	{r4, pc}

0800cbd6 <__sclose>:
 800cbd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbda:	f000 b813 	b.w	800cc04 <_close_r>
	...

0800cbe0 <_write_r>:
 800cbe0:	b538      	push	{r3, r4, r5, lr}
 800cbe2:	4c07      	ldr	r4, [pc, #28]	; (800cc00 <_write_r+0x20>)
 800cbe4:	4605      	mov	r5, r0
 800cbe6:	4608      	mov	r0, r1
 800cbe8:	4611      	mov	r1, r2
 800cbea:	2200      	movs	r2, #0
 800cbec:	6022      	str	r2, [r4, #0]
 800cbee:	461a      	mov	r2, r3
 800cbf0:	f7fe ff4b 	bl	800ba8a <_write>
 800cbf4:	1c43      	adds	r3, r0, #1
 800cbf6:	d102      	bne.n	800cbfe <_write_r+0x1e>
 800cbf8:	6823      	ldr	r3, [r4, #0]
 800cbfa:	b103      	cbz	r3, 800cbfe <_write_r+0x1e>
 800cbfc:	602b      	str	r3, [r5, #0]
 800cbfe:	bd38      	pop	{r3, r4, r5, pc}
 800cc00:	20000e60 	.word	0x20000e60

0800cc04 <_close_r>:
 800cc04:	b538      	push	{r3, r4, r5, lr}
 800cc06:	4c06      	ldr	r4, [pc, #24]	; (800cc20 <_close_r+0x1c>)
 800cc08:	2300      	movs	r3, #0
 800cc0a:	4605      	mov	r5, r0
 800cc0c:	4608      	mov	r0, r1
 800cc0e:	6023      	str	r3, [r4, #0]
 800cc10:	f7fe ff57 	bl	800bac2 <_close>
 800cc14:	1c43      	adds	r3, r0, #1
 800cc16:	d102      	bne.n	800cc1e <_close_r+0x1a>
 800cc18:	6823      	ldr	r3, [r4, #0]
 800cc1a:	b103      	cbz	r3, 800cc1e <_close_r+0x1a>
 800cc1c:	602b      	str	r3, [r5, #0]
 800cc1e:	bd38      	pop	{r3, r4, r5, pc}
 800cc20:	20000e60 	.word	0x20000e60

0800cc24 <_fstat_r>:
 800cc24:	b538      	push	{r3, r4, r5, lr}
 800cc26:	4c07      	ldr	r4, [pc, #28]	; (800cc44 <_fstat_r+0x20>)
 800cc28:	2300      	movs	r3, #0
 800cc2a:	4605      	mov	r5, r0
 800cc2c:	4608      	mov	r0, r1
 800cc2e:	4611      	mov	r1, r2
 800cc30:	6023      	str	r3, [r4, #0]
 800cc32:	f7fe ff52 	bl	800bada <_fstat>
 800cc36:	1c43      	adds	r3, r0, #1
 800cc38:	d102      	bne.n	800cc40 <_fstat_r+0x1c>
 800cc3a:	6823      	ldr	r3, [r4, #0]
 800cc3c:	b103      	cbz	r3, 800cc40 <_fstat_r+0x1c>
 800cc3e:	602b      	str	r3, [r5, #0]
 800cc40:	bd38      	pop	{r3, r4, r5, pc}
 800cc42:	bf00      	nop
 800cc44:	20000e60 	.word	0x20000e60

0800cc48 <_isatty_r>:
 800cc48:	b538      	push	{r3, r4, r5, lr}
 800cc4a:	4c06      	ldr	r4, [pc, #24]	; (800cc64 <_isatty_r+0x1c>)
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	4605      	mov	r5, r0
 800cc50:	4608      	mov	r0, r1
 800cc52:	6023      	str	r3, [r4, #0]
 800cc54:	f7fe ff51 	bl	800bafa <_isatty>
 800cc58:	1c43      	adds	r3, r0, #1
 800cc5a:	d102      	bne.n	800cc62 <_isatty_r+0x1a>
 800cc5c:	6823      	ldr	r3, [r4, #0]
 800cc5e:	b103      	cbz	r3, 800cc62 <_isatty_r+0x1a>
 800cc60:	602b      	str	r3, [r5, #0]
 800cc62:	bd38      	pop	{r3, r4, r5, pc}
 800cc64:	20000e60 	.word	0x20000e60

0800cc68 <_lseek_r>:
 800cc68:	b538      	push	{r3, r4, r5, lr}
 800cc6a:	4c07      	ldr	r4, [pc, #28]	; (800cc88 <_lseek_r+0x20>)
 800cc6c:	4605      	mov	r5, r0
 800cc6e:	4608      	mov	r0, r1
 800cc70:	4611      	mov	r1, r2
 800cc72:	2200      	movs	r2, #0
 800cc74:	6022      	str	r2, [r4, #0]
 800cc76:	461a      	mov	r2, r3
 800cc78:	f7fe ff4a 	bl	800bb10 <_lseek>
 800cc7c:	1c43      	adds	r3, r0, #1
 800cc7e:	d102      	bne.n	800cc86 <_lseek_r+0x1e>
 800cc80:	6823      	ldr	r3, [r4, #0]
 800cc82:	b103      	cbz	r3, 800cc86 <_lseek_r+0x1e>
 800cc84:	602b      	str	r3, [r5, #0]
 800cc86:	bd38      	pop	{r3, r4, r5, pc}
 800cc88:	20000e60 	.word	0x20000e60

0800cc8c <__malloc_lock>:
 800cc8c:	4770      	bx	lr

0800cc8e <__malloc_unlock>:
 800cc8e:	4770      	bx	lr

0800cc90 <_read_r>:
 800cc90:	b538      	push	{r3, r4, r5, lr}
 800cc92:	4c07      	ldr	r4, [pc, #28]	; (800ccb0 <_read_r+0x20>)
 800cc94:	4605      	mov	r5, r0
 800cc96:	4608      	mov	r0, r1
 800cc98:	4611      	mov	r1, r2
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	6022      	str	r2, [r4, #0]
 800cc9e:	461a      	mov	r2, r3
 800cca0:	f7fe fed6 	bl	800ba50 <_read>
 800cca4:	1c43      	adds	r3, r0, #1
 800cca6:	d102      	bne.n	800ccae <_read_r+0x1e>
 800cca8:	6823      	ldr	r3, [r4, #0]
 800ccaa:	b103      	cbz	r3, 800ccae <_read_r+0x1e>
 800ccac:	602b      	str	r3, [r5, #0]
 800ccae:	bd38      	pop	{r3, r4, r5, pc}
 800ccb0:	20000e60 	.word	0x20000e60

0800ccb4 <sqrt>:
 800ccb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccb8:	ed2d 8b02 	vpush	{d8}
 800ccbc:	b08b      	sub	sp, #44	; 0x2c
 800ccbe:	ec55 4b10 	vmov	r4, r5, d0
 800ccc2:	f000 f851 	bl	800cd68 <__ieee754_sqrt>
 800ccc6:	4b26      	ldr	r3, [pc, #152]	; (800cd60 <sqrt+0xac>)
 800ccc8:	eeb0 8a40 	vmov.f32	s16, s0
 800cccc:	eef0 8a60 	vmov.f32	s17, s1
 800ccd0:	f993 6000 	ldrsb.w	r6, [r3]
 800ccd4:	1c73      	adds	r3, r6, #1
 800ccd6:	d02a      	beq.n	800cd2e <sqrt+0x7a>
 800ccd8:	4622      	mov	r2, r4
 800ccda:	462b      	mov	r3, r5
 800ccdc:	4620      	mov	r0, r4
 800ccde:	4629      	mov	r1, r5
 800cce0:	f7f3 ff1c 	bl	8000b1c <__aeabi_dcmpun>
 800cce4:	4607      	mov	r7, r0
 800cce6:	bb10      	cbnz	r0, 800cd2e <sqrt+0x7a>
 800cce8:	f04f 0800 	mov.w	r8, #0
 800ccec:	f04f 0900 	mov.w	r9, #0
 800ccf0:	4642      	mov	r2, r8
 800ccf2:	464b      	mov	r3, r9
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	4629      	mov	r1, r5
 800ccf8:	f7f3 fee8 	bl	8000acc <__aeabi_dcmplt>
 800ccfc:	b1b8      	cbz	r0, 800cd2e <sqrt+0x7a>
 800ccfe:	2301      	movs	r3, #1
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	4b18      	ldr	r3, [pc, #96]	; (800cd64 <sqrt+0xb0>)
 800cd04:	9301      	str	r3, [sp, #4]
 800cd06:	9708      	str	r7, [sp, #32]
 800cd08:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800cd0c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cd10:	b9b6      	cbnz	r6, 800cd40 <sqrt+0x8c>
 800cd12:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800cd16:	4668      	mov	r0, sp
 800cd18:	f000 f8d6 	bl	800cec8 <matherr>
 800cd1c:	b1d0      	cbz	r0, 800cd54 <sqrt+0xa0>
 800cd1e:	9b08      	ldr	r3, [sp, #32]
 800cd20:	b11b      	cbz	r3, 800cd2a <sqrt+0x76>
 800cd22:	f7fe ff8f 	bl	800bc44 <__errno>
 800cd26:	9b08      	ldr	r3, [sp, #32]
 800cd28:	6003      	str	r3, [r0, #0]
 800cd2a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800cd2e:	eeb0 0a48 	vmov.f32	s0, s16
 800cd32:	eef0 0a68 	vmov.f32	s1, s17
 800cd36:	b00b      	add	sp, #44	; 0x2c
 800cd38:	ecbd 8b02 	vpop	{d8}
 800cd3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd40:	4642      	mov	r2, r8
 800cd42:	464b      	mov	r3, r9
 800cd44:	4640      	mov	r0, r8
 800cd46:	4649      	mov	r1, r9
 800cd48:	f7f3 fd78 	bl	800083c <__aeabi_ddiv>
 800cd4c:	2e02      	cmp	r6, #2
 800cd4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cd52:	d1e0      	bne.n	800cd16 <sqrt+0x62>
 800cd54:	f7fe ff76 	bl	800bc44 <__errno>
 800cd58:	2321      	movs	r3, #33	; 0x21
 800cd5a:	6003      	str	r3, [r0, #0]
 800cd5c:	e7df      	b.n	800cd1e <sqrt+0x6a>
 800cd5e:	bf00      	nop
 800cd60:	200000c8 	.word	0x200000c8
 800cd64:	0800d333 	.word	0x0800d333

0800cd68 <__ieee754_sqrt>:
 800cd68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd6c:	4955      	ldr	r1, [pc, #340]	; (800cec4 <__ieee754_sqrt+0x15c>)
 800cd6e:	ec55 4b10 	vmov	r4, r5, d0
 800cd72:	43a9      	bics	r1, r5
 800cd74:	462b      	mov	r3, r5
 800cd76:	462a      	mov	r2, r5
 800cd78:	d112      	bne.n	800cda0 <__ieee754_sqrt+0x38>
 800cd7a:	ee10 2a10 	vmov	r2, s0
 800cd7e:	ee10 0a10 	vmov	r0, s0
 800cd82:	4629      	mov	r1, r5
 800cd84:	f7f3 fc30 	bl	80005e8 <__aeabi_dmul>
 800cd88:	4602      	mov	r2, r0
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	4629      	mov	r1, r5
 800cd90:	f7f3 fa74 	bl	800027c <__adddf3>
 800cd94:	4604      	mov	r4, r0
 800cd96:	460d      	mov	r5, r1
 800cd98:	ec45 4b10 	vmov	d0, r4, r5
 800cd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cda0:	2d00      	cmp	r5, #0
 800cda2:	ee10 0a10 	vmov	r0, s0
 800cda6:	4621      	mov	r1, r4
 800cda8:	dc0f      	bgt.n	800cdca <__ieee754_sqrt+0x62>
 800cdaa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cdae:	4330      	orrs	r0, r6
 800cdb0:	d0f2      	beq.n	800cd98 <__ieee754_sqrt+0x30>
 800cdb2:	b155      	cbz	r5, 800cdca <__ieee754_sqrt+0x62>
 800cdb4:	ee10 2a10 	vmov	r2, s0
 800cdb8:	4620      	mov	r0, r4
 800cdba:	4629      	mov	r1, r5
 800cdbc:	f7f3 fa5c 	bl	8000278 <__aeabi_dsub>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	f7f3 fd3a 	bl	800083c <__aeabi_ddiv>
 800cdc8:	e7e4      	b.n	800cd94 <__ieee754_sqrt+0x2c>
 800cdca:	151b      	asrs	r3, r3, #20
 800cdcc:	d073      	beq.n	800ceb6 <__ieee754_sqrt+0x14e>
 800cdce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cdd2:	07dd      	lsls	r5, r3, #31
 800cdd4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cdd8:	bf48      	it	mi
 800cdda:	0fc8      	lsrmi	r0, r1, #31
 800cddc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cde0:	bf44      	itt	mi
 800cde2:	0049      	lslmi	r1, r1, #1
 800cde4:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800cde8:	2500      	movs	r5, #0
 800cdea:	1058      	asrs	r0, r3, #1
 800cdec:	0fcb      	lsrs	r3, r1, #31
 800cdee:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800cdf2:	0049      	lsls	r1, r1, #1
 800cdf4:	2316      	movs	r3, #22
 800cdf6:	462c      	mov	r4, r5
 800cdf8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800cdfc:	19a7      	adds	r7, r4, r6
 800cdfe:	4297      	cmp	r7, r2
 800ce00:	bfde      	ittt	le
 800ce02:	19bc      	addle	r4, r7, r6
 800ce04:	1bd2      	suble	r2, r2, r7
 800ce06:	19ad      	addle	r5, r5, r6
 800ce08:	0fcf      	lsrs	r7, r1, #31
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800ce10:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ce14:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ce18:	d1f0      	bne.n	800cdfc <__ieee754_sqrt+0x94>
 800ce1a:	f04f 0c20 	mov.w	ip, #32
 800ce1e:	469e      	mov	lr, r3
 800ce20:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ce24:	42a2      	cmp	r2, r4
 800ce26:	eb06 070e 	add.w	r7, r6, lr
 800ce2a:	dc02      	bgt.n	800ce32 <__ieee754_sqrt+0xca>
 800ce2c:	d112      	bne.n	800ce54 <__ieee754_sqrt+0xec>
 800ce2e:	428f      	cmp	r7, r1
 800ce30:	d810      	bhi.n	800ce54 <__ieee754_sqrt+0xec>
 800ce32:	2f00      	cmp	r7, #0
 800ce34:	eb07 0e06 	add.w	lr, r7, r6
 800ce38:	da42      	bge.n	800cec0 <__ieee754_sqrt+0x158>
 800ce3a:	f1be 0f00 	cmp.w	lr, #0
 800ce3e:	db3f      	blt.n	800cec0 <__ieee754_sqrt+0x158>
 800ce40:	f104 0801 	add.w	r8, r4, #1
 800ce44:	1b12      	subs	r2, r2, r4
 800ce46:	428f      	cmp	r7, r1
 800ce48:	bf88      	it	hi
 800ce4a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ce4e:	1bc9      	subs	r1, r1, r7
 800ce50:	4433      	add	r3, r6
 800ce52:	4644      	mov	r4, r8
 800ce54:	0052      	lsls	r2, r2, #1
 800ce56:	f1bc 0c01 	subs.w	ip, ip, #1
 800ce5a:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800ce5e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ce62:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ce66:	d1dd      	bne.n	800ce24 <__ieee754_sqrt+0xbc>
 800ce68:	430a      	orrs	r2, r1
 800ce6a:	d006      	beq.n	800ce7a <__ieee754_sqrt+0x112>
 800ce6c:	1c5c      	adds	r4, r3, #1
 800ce6e:	bf13      	iteet	ne
 800ce70:	3301      	addne	r3, #1
 800ce72:	3501      	addeq	r5, #1
 800ce74:	4663      	moveq	r3, ip
 800ce76:	f023 0301 	bicne.w	r3, r3, #1
 800ce7a:	106a      	asrs	r2, r5, #1
 800ce7c:	085b      	lsrs	r3, r3, #1
 800ce7e:	07e9      	lsls	r1, r5, #31
 800ce80:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ce84:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ce88:	bf48      	it	mi
 800ce8a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ce8e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800ce92:	461c      	mov	r4, r3
 800ce94:	e780      	b.n	800cd98 <__ieee754_sqrt+0x30>
 800ce96:	0aca      	lsrs	r2, r1, #11
 800ce98:	3815      	subs	r0, #21
 800ce9a:	0549      	lsls	r1, r1, #21
 800ce9c:	2a00      	cmp	r2, #0
 800ce9e:	d0fa      	beq.n	800ce96 <__ieee754_sqrt+0x12e>
 800cea0:	02d6      	lsls	r6, r2, #11
 800cea2:	d50a      	bpl.n	800ceba <__ieee754_sqrt+0x152>
 800cea4:	f1c3 0420 	rsb	r4, r3, #32
 800cea8:	fa21 f404 	lsr.w	r4, r1, r4
 800ceac:	1e5d      	subs	r5, r3, #1
 800ceae:	4099      	lsls	r1, r3
 800ceb0:	4322      	orrs	r2, r4
 800ceb2:	1b43      	subs	r3, r0, r5
 800ceb4:	e78b      	b.n	800cdce <__ieee754_sqrt+0x66>
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	e7f0      	b.n	800ce9c <__ieee754_sqrt+0x134>
 800ceba:	0052      	lsls	r2, r2, #1
 800cebc:	3301      	adds	r3, #1
 800cebe:	e7ef      	b.n	800cea0 <__ieee754_sqrt+0x138>
 800cec0:	46a0      	mov	r8, r4
 800cec2:	e7bf      	b.n	800ce44 <__ieee754_sqrt+0xdc>
 800cec4:	7ff00000 	.word	0x7ff00000

0800cec8 <matherr>:
 800cec8:	2000      	movs	r0, #0
 800ceca:	4770      	bx	lr

0800cecc <_init>:
 800cecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cece:	bf00      	nop
 800ced0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ced2:	bc08      	pop	{r3}
 800ced4:	469e      	mov	lr, r3
 800ced6:	4770      	bx	lr

0800ced8 <_fini>:
 800ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceda:	bf00      	nop
 800cedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cede:	bc08      	pop	{r3}
 800cee0:	469e      	mov	lr, r3
 800cee2:	4770      	bx	lr
