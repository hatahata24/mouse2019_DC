
mouse2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000147dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000694  0801496c  0801496c  0002496c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015000  08015000  00030124  2**0
                  CONTENTS
  4 .ARM          00000008  08015000  08015000  00025000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015008  08015008  00030124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015008  08015008  00025008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801500c  0801500c  0002500c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08015010  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011dc  20000124  08015134  00030124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001300  08015134  00031300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016998  00000000  00000000  00030154  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000306b  00000000  00000000  00046aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c0  00000000  00000000  00049b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001370  00000000  00000000  0004b018  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022767  00000000  00000000  0004c388  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001199a  00000000  00000000  0006eaef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c79de  00000000  00000000  00080489  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147e67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f88  00000000  00000000  00147ee4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000124 	.word	0x20000124
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014954 	.word	0x08014954

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000128 	.word	0x20000128
 80001cc:	08014954 	.word	0x08014954

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <HAL_Init+0x40>)
 8000f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_Init+0x40>)
 8000f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x40>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 fd07 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f012 f832 	bl	8012fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fd1f 	bl	80019de <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 fce7 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200000b8 	.word	0x200000b8
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004
 8001000:	20000158 	.word	0x20000158

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000158 	.word	0x20000158

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_Delay+0x40>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e033      	b.n	80010de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f011 ffd0 	bl	8013024 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d118      	bne.n	80010d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a6:	f023 0302 	bic.w	r3, r3, #2
 80010aa:	f043 0202 	orr.w	r2, r3, #2
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fa92 	bl	80015dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
 80010ce:	e001      	b.n	80010d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Start+0x1a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e0a5      	b.n	800124e <HAL_ADC_Start+0x166>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d018      	beq.n	800114a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001128:	4b4c      	ldr	r3, [pc, #304]	; (800125c <HAL_ADC_Start+0x174>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_ADC_Start+0x178>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0c9a      	lsrs	r2, r3, #18
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800113c:	e002      	b.n	8001144 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3b01      	subs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d179      	bne.n	800124c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001182:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001196:	d106      	bne.n	80011a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f023 0206 	bic.w	r2, r3, #6
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d12a      	bne.n	8001224 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <HAL_ADC_Start+0x180>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d015      	beq.n	8001204 <HAL_ADC_Start+0x11c>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_ADC_Start+0x184>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d105      	bne.n	80011ee <HAL_ADC_Start+0x106>
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 031f 	and.w	r3, r3, #31
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00a      	beq.n	8001204 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_ADC_Start+0x188>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d129      	bne.n	800124c <HAL_ADC_Start+0x164>
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_ADC_Start+0x17c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d823      	bhi.n	800124c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11c      	bne.n	800124c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	e013      	b.n	800124c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_ADC_Start+0x180>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_ADC_Start+0x164>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800124a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200000b8 	.word	0x200000b8
 8001260:	431bde83 	.word	0x431bde83
 8001264:	40012300 	.word	0x40012300
 8001268:	40012000 	.word	0x40012000
 800126c:	40012100 	.word	0x40012100
 8001270:	40012200 	.word	0x40012200

08001274 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001290:	d113      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a0:	d10b      	bne.n	80012ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0220 	orr.w	r2, r3, #32
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e05c      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012ba:	f7ff fea3 	bl	8001004 <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012c0:	e01a      	b.n	80012f8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d016      	beq.n	80012f8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <HAL_ADC_PollForConversion+0x6c>
 80012d0:	f7ff fe98 	bl	8001004 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d20b      	bcs.n	80012f8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f043 0204 	orr.w	r2, r3, #4
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e03d      	b.n	8001374 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b02      	cmp	r3, #2
 8001304:	d1dd      	bne.n	80012c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0212 	mvn.w	r2, #18
 800130e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d123      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800132e:	2b00      	cmp	r3, #0
 8001330:	d11f      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800134a:	2b00      	cmp	r3, #0
 800134c:	d111      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e105      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x228>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d925      	bls.n	8001410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3b1e      	subs	r3, #30
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43da      	mvns	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	400a      	ands	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	3b1e      	subs	r3, #30
 8001404:	409a      	lsls	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e022      	b.n	8001456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	2207      	movs	r2, #7
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6919      	ldr	r1, [r3, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4403      	add	r3, r0
 800144c:	409a      	lsls	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b06      	cmp	r3, #6
 800145c:	d824      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b05      	subs	r3, #5
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b05      	subs	r3, #5
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
 80014a6:	e04c      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d824      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b23      	subs	r3, #35	; 0x23
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43da      	mvns	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b23      	subs	r3, #35	; 0x23
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e023      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b41      	subs	r3, #65	; 0x41
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_ADC_ConfigChannel+0x234>)
 8001544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d109      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d105      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d123      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d003      	beq.n	800157e <HAL_ADC_ConfigChannel+0x1e6>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b11      	cmp	r3, #17
 800157c:	d11b      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_ADC_ConfigChannel+0x240>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9a      	lsrs	r2, r3, #18
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	40012000 	.word	0x40012000
 80015d4:	200000b8 	.word	0x200000b8
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <ADC_Init+0x1f0>)
 80015e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <ADC_Init+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e00f      	b.n	80016da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0202 	bic.w	r2, r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
 80016f4:	005a      	lsls	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001716:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	035a      	lsls	r2, r3, #13
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e007      	b.n	8001750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	3b01      	subs	r3, #1
 800176c:	051a      	lsls	r2, r3, #20
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001792:	025a      	lsls	r2, r3, #9
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	029a      	lsls	r2, r3, #10
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a0c:	7e1b      	ldrb	r3, [r3, #24]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_FLASH_Program+0x1e>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e03b      	b.n	8001a8e <HAL_FLASH_Program+0x96>
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a20:	f000 f870 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d12b      	bne.n	8001a86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a34:	783b      	ldrb	r3, [r7, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	68b8      	ldr	r0, [r7, #8]
 8001a3a:	f000 f917 	bl	8001c6c <FLASH_Program_Byte>
 8001a3e:	e016      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	68b8      	ldr	r0, [r7, #8]
 8001a4c:	f000 f8ea 	bl	8001c24 <FLASH_Program_HalfWord>
 8001a50:	e00d      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d105      	bne.n	8001a64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68b8      	ldr	r0, [r7, #8]
 8001a5e:	f000 f8bf 	bl	8001be0 <FLASH_Program_Word>
 8001a62:	e004      	b.n	8001a6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f000 f88b 	bl	8001b84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a72:	f000 f847 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001a76:	4603      	mov	r3, r0
 8001a78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_FLASH_Program+0xa4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_FLASH_Program+0xa0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000015c 	.word	0x2000015c
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da0b      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_FLASH_Unlock+0x3c>)
 8001ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_FLASH_Unlock+0x40>)
 8001abc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_FLASH_Unlock+0x38>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da01      	bge.n	8001aca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	45670123 	.word	0x45670123
 8001ae0:	cdef89ab 	.word	0xcdef89ab

08001ae4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_FLASH_Lock+0x1c>)
 8001aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001af2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <FLASH_WaitForLastOperation+0x78>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b16:	f7ff fa75 	bl	8001004 <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b1c:	e010      	b.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d00c      	beq.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <FLASH_WaitForLastOperation+0x38>
 8001b2c:	f7ff fa6a 	bl	8001004 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d201      	bcs.n	8001b40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e019      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e8      	bne.n	8001b1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <FLASH_WaitForLastOperation+0x7c>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b6a:	f000 f8a1 	bl	8001cb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
  
}  
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	2000015c 	.word	0x2000015c
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b84:	b490      	push	{r4, r7}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001ba2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <FLASH_Program_DoubleWord+0x58>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	f04f 0400 	mov.w	r4, #0
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	2400      	movs	r4, #0
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	3204      	adds	r2, #4
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc90      	pop	{r4, r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <FLASH_Program_Word+0x40>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <FLASH_Program_HalfWord+0x44>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	801a      	strh	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <FLASH_Program_Byte+0x40>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cce:	2210      	movs	r2, #16
 8001cd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001ce8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cec:	2220      	movs	r2, #32
 8001cee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	f043 0320 	orr.w	r3, r3, #32
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <FLASH_SetErrorCode+0xa8>)
 8001d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <FLASH_SetErrorCode+0xa4>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	60da      	str	r2, [r3, #12]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023c00 	.word	0x40023c00
 8001d58:	2000015c 	.word	0x2000015c

08001d5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d70:	7e1b      	ldrb	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_FLASHEx_Erase+0x1e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e058      	b.n	8001e2c <HAL_FLASHEx_Erase+0xd0>
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d84:	f7ff febe 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d148      	bne.n	8001e24 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d115      	bne.n	8001dce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f844 	bl	8001e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db8:	f7ff fea4 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6113      	str	r3, [r2, #16]
 8001dcc:	e028      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	e01c      	b.n	8001e10 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68b8      	ldr	r0, [r7, #8]
 8001de0:	f000 f850 	bl	8001e84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de8:	f7ff fe8c 	bl	8001b04 <FLASH_WaitForLastOperation>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_FLASHEx_Erase+0xdc>)
 8001df6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dfa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	601a      	str	r2, [r3, #0]
          break;
 8001e08:	e00a      	b.n	8001e20 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3da      	bcc.n	8001dd6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001e20:	f000 f878 	bl	8001f14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_FLASHEx_Erase+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	761a      	strb	r2, [r3, #24]

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	2000015c 	.word	0x2000015c
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <FLASH_MassErase+0x44>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6113      	str	r3, [r2, #16]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e010      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e009      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d103      	bne.n	8001ebc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e002      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	490f      	ldr	r1, [pc, #60]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ee4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <FLASH_Erase_Sector+0x8c>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6113      	str	r3, [r2, #16]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <FLASH_FlushCaches+0x88>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
  }
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e16b      	b.n	8002294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 815a 	bne.w	800228e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x4a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d123      	bne.n	8002032 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0203 	and.w	r2, r3, #3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00b      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207a:	2b11      	cmp	r3, #17
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b12      	cmp	r3, #18
 8002084:	d130      	bne.n	80020e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 0201 	and.w	r2, r3, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80b4 	beq.w	800228e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x308>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_GPIO_Init+0x30c>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02b      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d025      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d019      	beq.n	80021ba <HAL_GPIO_Init+0x21a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x216>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00d      	beq.n	80021b2 <HAL_GPIO_Init+0x212>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_GPIO_Init+0x328>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x32c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_GPIO_Init+0x20a>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e00e      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00c      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ae:	2306      	movs	r3, #6
 80021b0:	e00a      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e008      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_GPIO_Init+0x228>
 80021c6:	2300      	movs	r3, #0
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f002 0203 	and.w	r2, r2, #3
 80021ce:	0092      	lsls	r2, r2, #2
 80021d0:	4093      	lsls	r3, r2
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d8:	4934      	ldr	r1, [pc, #208]	; (80022ac <HAL_GPIO_Init+0x30c>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_GPIO_Init+0x330>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220a:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_GPIO_Init+0x330>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f67f ae90 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3724      	adds	r7, #36	; 0x24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e22d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b9d      	ldr	r3, [pc, #628]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e208      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fe08 	bl	8001004 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fe04 	bl	8001004 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1cd      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fdf4 	bl	8001004 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fdf0 	bl	8001004 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1b9      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e18d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fda9 	bl	8001004 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fda5 	bl	8001004 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e16e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd88 	bl	8001004 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fd84 	bl	8001004 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e14d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fd68 	bl	8001004 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fd64 	bl	8001004 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e12d      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fd51 	bl	8001004 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fd4d 	bl	8001004 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e116      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a0 	beq.w	80026d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fd13 	bl	8001004 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e011      	b.n	8002606 <HAL_RCC_OscConfig+0x2ce>
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
 80025f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fd06 	bl	8001004 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0cf      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_OscConfig+0x478>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2f0>
 800261a:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 8002630:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a5c      	ldr	r2, [pc, #368]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fccb 	bl	8001004 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fcc7 	bl	8001004 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e08e      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x33a>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fcb5 	bl	8001004 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fcb1 	bl	8001004 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e078      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a3a      	ldr	r2, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d064      	beq.n	80027a4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d05c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d141      	bne.n	8002772 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc86 	bl	8001004 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fc82 	bl	8001004 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04b      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	3b01      	subs	r3, #1
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	491d      	ldr	r1, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fc5b 	bl	8001004 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fc57 	bl	8001004 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e020      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x41a>
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_OscConfig+0x480>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fc44 	bl	8001004 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fc40 	bl	8001004 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_RCC_OscConfig+0x47c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x448>
 800279e:	e001      	b.n	80027a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000
 80027b4:	40023800 	.word	0x40023800
 80027b8:	42470060 	.word	0x42470060

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0ca      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d90c      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b6      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002810:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002828:	4b52      	ldr	r3, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	494c      	ldr	r1, [pc, #304]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d119      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d003      	beq.n	800287a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e065      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4933      	ldr	r1, [pc, #204]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fbaa 	bl	8001004 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fba6 	bl	8001004 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04d      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20c      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_RCC_ClockConfig+0x1b4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e030      	b.n	8002966 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4915      	ldr	r1, [pc, #84]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	490d      	ldr	r1, [pc, #52]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002942:	f000 f81d 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002946:	4601      	mov	r1, r0
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	5cd3      	ldrb	r3, [r2, r3]
 8002956:	fa21 f303 	lsr.w	r3, r1, r3
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe fb0c 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	08014f4c 	.word	0x08014f4c
 800297c:	200000b8 	.word	0x200000b8

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d007      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x32>
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d008      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x38>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 808d 	bne.w	8002ac6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 80029ae:	60bb      	str	r3, [r7, #8]
       break;
 80029b0:	e08c      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029b4:	60bb      	str	r3, [r7, #8]
      break;
 80029b6:	e089      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b8:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d023      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	f04f 0400 	mov.w	r4, #0
 80029d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	ea03 0501 	and.w	r5, r3, r1
 80029e4:	ea04 0602 	and.w	r6, r4, r2
 80029e8:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ea:	fb02 f106 	mul.w	r1, r2, r6
 80029ee:	2200      	movs	r2, #0
 80029f0:	fb02 f205 	mul.w	r2, r2, r5
 80029f4:	440a      	add	r2, r1
 80029f6:	493a      	ldr	r1, [pc, #232]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f8:	fba5 0101 	umull	r0, r1, r5, r1
 80029fc:	1853      	adds	r3, r2, r1
 80029fe:	4619      	mov	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4623      	mov	r3, r4
 8002a0a:	f7fe f915 	bl	8000c38 <__aeabi_uldivmod>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e049      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	099b      	lsrs	r3, r3, #6
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	ea03 0501 	and.w	r5, r3, r1
 8002a2c:	ea04 0602 	and.w	r6, r4, r2
 8002a30:	4629      	mov	r1, r5
 8002a32:	4632      	mov	r2, r6
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	0154      	lsls	r4, r2, #5
 8002a3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a42:	014b      	lsls	r3, r1, #5
 8002a44:	4619      	mov	r1, r3
 8002a46:	4622      	mov	r2, r4
 8002a48:	1b49      	subs	r1, r1, r5
 8002a4a:	eb62 0206 	sbc.w	r2, r2, r6
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	f04f 0400 	mov.w	r4, #0
 8002a56:	0194      	lsls	r4, r2, #6
 8002a58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a5c:	018b      	lsls	r3, r1, #6
 8002a5e:	1a5b      	subs	r3, r3, r1
 8002a60:	eb64 0402 	sbc.w	r4, r4, r2
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	00e2      	lsls	r2, r4, #3
 8002a6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a72:	00d9      	lsls	r1, r3, #3
 8002a74:	460b      	mov	r3, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	195b      	adds	r3, r3, r5
 8002a7a:	eb44 0406 	adc.w	r4, r4, r6
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	02a2      	lsls	r2, r4, #10
 8002a88:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a8c:	0299      	lsls	r1, r3, #10
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4614      	mov	r4, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	4621      	mov	r1, r4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f04f 0400 	mov.w	r4, #0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	f7fe f8ca 	bl	8000c38 <__aeabi_uldivmod>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	60bb      	str	r3, [r7, #8]
      break;
 8002ac4:	e002      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ac8:	60bb      	str	r3, [r7, #8]
      break;
 8002aca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002acc:	68bb      	ldr	r3, [r7, #8]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	017d7840 	.word	0x017d7840

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	200000b8 	.word	0x200000b8

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b04:	4601      	mov	r1, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	08014f5c 	.word	0x08014f5c

08002b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b28:	f7ff ffdc 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0b5b      	lsrs	r3, r3, #13
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	08014f5c 	.word	0x08014f5c

08002b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e056      	b.n	8002c0c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f010 fa97 	bl	80130ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	f003 0104 	and.w	r1, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_SPI_Transmit+0x22>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e11e      	b.n	8002e74 <HAL_SPI_Transmit+0x260>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c3e:	f7fe f9e1 	bl	8001004 <HAL_GetTick>
 8002c42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
 8002c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c58:	e103      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_SPI_Transmit+0x52>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c6a:	e0fa      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb2:	d107      	bne.n	8002cc4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d007      	beq.n	8002ce2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cea:	d14b      	bne.n	8002d84 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Transmit+0xe6>
 8002cf4:	8afb      	ldrh	r3, [r7, #22]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d13e      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d1e:	e02b      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d112      	bne.n	8002d54 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	1c9a      	adds	r2, r3, #2
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d52:	e011      	b.n	8002d78 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d54:	f7fe f956 	bl	8001004 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d803      	bhi.n	8002d6c <HAL_SPI_Transmit+0x158>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d102      	bne.n	8002d72 <HAL_SPI_Transmit+0x15e>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d76:	e074      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ce      	bne.n	8002d20 <HAL_SPI_Transmit+0x10c>
 8002d82:	e04c      	b.n	8002e1e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Transmit+0x17e>
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d140      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002db8:	e02c      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d113      	bne.n	8002df0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dee:	e011      	b.n	8002e14 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df0:	f7fe f908 	bl	8001004 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d803      	bhi.n	8002e08 <HAL_SPI_Transmit+0x1f4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_Transmit+0x1fa>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e12:	e026      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1cd      	bne.n	8002dba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fba4 	bl	8003570 <SPI_EndRxTxTransaction>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e000      	b.n	8002e62 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002e60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e98:	d112      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8e9 	bl	800308e <HAL_SPI_TransmitReceive>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	e0e2      	b.n	8003086 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Receive+0x52>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0db      	b.n	8003086 <HAL_SPI_Receive+0x20a>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed6:	f7fe f895 	bl	8001004 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eec:	e0c2      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_SPI_Receive+0x7e>
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002efe:	e0b9      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2204      	movs	r2, #4
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f46:	d107      	bne.n	8002f58 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d007      	beq.n	8002f76 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d162      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f7e:	e02e      	b.n	8002fde <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d115      	bne.n	8002fba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f103 020c 	add.w	r2, r3, #12
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fb8:	e011      	b.n	8002fde <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fba:	f7fe f823 	bl	8001004 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d803      	bhi.n	8002fd2 <HAL_SPI_Receive+0x156>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d102      	bne.n	8002fd8 <HAL_SPI_Receive+0x15c>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fdc:	e04a      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1cb      	bne.n	8002f80 <HAL_SPI_Receive+0x104>
 8002fe8:	e031      	b.n	800304e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d113      	bne.n	8003020 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	b292      	uxth	r2, r2
 8003004:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800301e:	e011      	b.n	8003044 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003020:	f7fd fff0 	bl	8001004 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d803      	bhi.n	8003038 <HAL_SPI_Receive+0x1bc>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d102      	bne.n	800303e <HAL_SPI_Receive+0x1c2>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003042:	e017      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1cd      	bne.n	8002fea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa27 	bl	80034a6 <SPI_EndRxTransaction>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
 8003070:	e000      	b.n	8003074 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003072:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003084:	7dfb      	ldrb	r3, [r7, #23]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b08c      	sub	sp, #48	; 0x30
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800309c:	2301      	movs	r3, #1
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x26>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e18a      	b.n	80033ca <HAL_SPI_TransmitReceive+0x33c>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030bc:	f7fd ffa2 	bl	8001004 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d00f      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e4:	d107      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x68>
 80030ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d003      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030fc:	e15b      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x82>
 800310a:	887b      	ldrh	r3, [r7, #2]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003116:	e14e      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b04      	cmp	r3, #4
 8003122:	d003      	beq.n	800312c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2205      	movs	r2, #5
 8003128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	887a      	ldrh	r2, [r7, #2]
 8003142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d007      	beq.n	8003180 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003188:	d178      	bne.n	800327c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x10a>
 8003192:	8b7b      	ldrh	r3, [r7, #26]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d166      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	e053      	b.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d11b      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x176>
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d113      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d119      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d014      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	b292      	uxth	r2, r2
 8003228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003242:	2301      	movs	r3, #1
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003246:	f7fd fedd 	bl	8001004 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003252:	429a      	cmp	r2, r3
 8003254:	d807      	bhi.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d003      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003264:	e0a7      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1a6      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1a1      	bne.n	80031be <HAL_SPI_TransmitReceive+0x130>
 800327a:	e07c      	b.n	8003376 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_TransmitReceive+0x1fc>
 8003284:	8b7b      	ldrh	r3, [r7, #26]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d16b      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b0:	e057      	b.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d11c      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d017      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d114      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d119      	bne.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d014      	beq.n	800333c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003338:	2301      	movs	r3, #1
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800333c:	f7fd fe62 	bl	8001004 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003348:	429a      	cmp	r2, r3
 800334a:	d803      	bhi.n	8003354 <HAL_SPI_TransmitReceive+0x2c6>
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d102      	bne.n	800335a <HAL_SPI_TransmitReceive+0x2cc>
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003360:	e029      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1a2      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d19d      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8f8 	bl	8003570 <SPI_EndRxTxTransaction>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003392:	e010      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	e000      	b.n	80033b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033e2:	e04c      	b.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d048      	beq.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80033ec:	f7fd fe0a 	bl	8001004 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d902      	bls.n	8003402 <SPI_WaitFlagStateUntilTimeout+0x30>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d13d      	bne.n	800347e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003410:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341a:	d111      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d004      	beq.n	8003430 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d107      	bne.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d10f      	bne.n	800346a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d1a3      	bne.n	80033e4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ba:	d111      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	d004      	beq.n	80034d0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d107      	bne.n	80034e0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e8:	d12a      	bne.n	8003540 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f2:	d012      	beq.n	800351a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff67 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02d      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e026      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	2101      	movs	r1, #1
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff54 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e013      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	2101      	movs	r1, #1
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff41 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e000      	b.n	8003568 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <SPI_EndRxTxTransaction+0x7c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <SPI_EndRxTxTransaction+0x80>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0d5b      	lsrs	r3, r3, #21
 8003588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359a:	d112      	bne.n	80035c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2180      	movs	r1, #128	; 0x80
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff13 	bl	80033d2 <SPI_WaitFlagStateUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e00f      	b.n	80035e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d0f2      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x52>
 80035dc:	e000      	b.n	80035e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80035de:	bf00      	nop
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200000b8 	.word	0x200000b8
 80035f0:	165e9f81 	.word	0x165e9f81

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e01d      	b.n	8003642 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f00f fd8e 	bl	801313c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 fc70 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d007      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e01d      	b.n	80036e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f815 	bl	80036e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f000 fc21 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 feec 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <HAL_TIM_PWM_Start+0x74>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_TIM_PWM_Start+0x2c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_TIM_PWM_Start+0x78>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d101      	bne.n	800372c <HAL_TIM_PWM_Start+0x30>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_TIM_PWM_Start+0x32>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b06      	cmp	r3, #6
 8003752:	d007      	beq.n	8003764 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000
 8003774:	40010400 	.word	0x40010400

08003778 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 feae 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_TIM_PWM_Stop+0xa8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_PWM_Stop+0x2c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_TIM_PWM_Stop+0xac>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_PWM_Stop+0x30>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_TIM_PWM_Stop+0x32>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d017      	beq.n	80037de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	f240 4344 	movw	r3, #1092	; 0x444
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_TIM_PWM_Stop+0x66>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	f240 4344 	movw	r3, #1092	; 0x444
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <HAL_TIM_PWM_Stop+0x96>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40010000 	.word	0x40010000
 8003824:	40010400 	.word	0x40010400

08003828 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e083      	b.n	8003944 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f00f fcc5 	bl	80131e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386c:	f023 0307 	bic.w	r3, r3, #7
 8003870:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f000 fb4b 	bl	8003f18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	4313      	orrs	r3, r2
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038c8:	f023 030c 	bic.w	r3, r3, #12
 80038cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	4313      	orrs	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	011a      	lsls	r2, r3, #4
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	4313      	orrs	r3, r2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003906:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4313      	orrs	r3, r2
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_TIM_Encoder_Start+0x16>
 800395c:	2b04      	cmp	r3, #4
 800395e:	d008      	beq.n	8003972 <HAL_TIM_Encoder_Start+0x26>
 8003960:	e00f      	b.n	8003982 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fdbe 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003970:	e016      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	2104      	movs	r1, #4
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fdb6 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 8003980:	e00e      	b.n	80039a0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fdae 	bl	80044ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2201      	movs	r2, #1
 8003996:	2104      	movs	r1, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fda7 	bl	80044ec <TIM_CCxChannelCmd>
      break;
 800399e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d122      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d11b      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f06f 0202 	mvn.w	r2, #2
 80039e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fa6c 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a02:	e005      	b.n	8003a10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa5e 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fa6f 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d122      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d11b      	bne.n	8003a6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0204 	mvn.w	r2, #4
 8003a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fa42 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003a56:	e005      	b.n	8003a64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa34 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa45 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d122      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d11b      	bne.n	8003abe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0208 	mvn.w	r2, #8
 8003a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2204      	movs	r2, #4
 8003a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa18 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003aaa:	e005      	b.n	8003ab8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa0a 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa1b 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d122      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d11b      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f06f 0210 	mvn.w	r2, #16
 8003ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f9ee 	bl	8003eda <HAL_TIM_IC_CaptureCallback>
 8003afe:	e005      	b.n	8003b0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f9e0 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9f1 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10e      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0201 	mvn.w	r2, #1
 8003b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f009 fbf5 	bl	800d328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d10e      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	d107      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fd35 	bl	80045d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d10e      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9b6 	bl	8003f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d107      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f06f 0220 	mvn.w	r2, #32
 8003bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fcff 	bl	80045c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e0b4      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b0c      	cmp	r3, #12
 8003bfa:	f200 809f 	bhi.w	8003d3c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c39 	.word	0x08003c39
 8003c08:	08003d3d 	.word	0x08003d3d
 8003c0c:	08003d3d 	.word	0x08003d3d
 8003c10:	08003d3d 	.word	0x08003d3d
 8003c14:	08003c79 	.word	0x08003c79
 8003c18:	08003d3d 	.word	0x08003d3d
 8003c1c:	08003d3d 	.word	0x08003d3d
 8003c20:	08003d3d 	.word	0x08003d3d
 8003c24:	08003cbb 	.word	0x08003cbb
 8003c28:	08003d3d 	.word	0x08003d3d
 8003c2c:	08003d3d 	.word	0x08003d3d
 8003c30:	08003d3d 	.word	0x08003d3d
 8003c34:	08003cfb 	.word	0x08003cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fa0a 	bl	8004058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0208 	orr.w	r2, r2, #8
 8003c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0204 	bic.w	r2, r2, #4
 8003c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6999      	ldr	r1, [r3, #24]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	619a      	str	r2, [r3, #24]
      break;
 8003c76:	e062      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fa5a 	bl	8004138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	021a      	lsls	r2, r3, #8
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	619a      	str	r2, [r3, #24]
      break;
 8003cb8:	e041      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 faaf 	bl	8004224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0208 	orr.w	r2, r2, #8
 8003cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0204 	bic.w	r2, r2, #4
 8003ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69d9      	ldr	r1, [r3, #28]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	61da      	str	r2, [r3, #28]
      break;
 8003cf8:	e021      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fb03 	bl	800430c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	021a      	lsls	r2, r3, #8
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	61da      	str	r2, [r3, #28]
      break;
 8003d3a:	e000      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIM_ConfigClockSource+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e0a6      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x166>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d067      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0x120>
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d80b      	bhi.n	8003dc4 <HAL_TIM_ConfigClockSource+0x6c>
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d073      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d802      	bhi.n	8003dba <HAL_TIM_ConfigClockSource+0x62>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d06f      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003db8:	e078      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d06c      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
 8003dbe:	2b30      	cmp	r3, #48	; 0x30
 8003dc0:	d06a      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dc2:	e073      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dc4:	2b70      	cmp	r3, #112	; 0x70
 8003dc6:	d00d      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x8c>
 8003dc8:	2b70      	cmp	r3, #112	; 0x70
 8003dca:	d804      	bhi.n	8003dd6 <HAL_TIM_ConfigClockSource+0x7e>
 8003dcc:	2b50      	cmp	r3, #80	; 0x50
 8003dce:	d033      	beq.n	8003e38 <HAL_TIM_ConfigClockSource+0xe0>
 8003dd0:	2b60      	cmp	r3, #96	; 0x60
 8003dd2:	d041      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dd4:	e06a      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d066      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x152>
 8003ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de0:	d017      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003de2:	e063      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6899      	ldr	r1, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f000 fb5a 	bl	80044ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	609a      	str	r2, [r3, #8]
      break;
 8003e10:	e04c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6899      	ldr	r1, [r3, #8]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f000 fb43 	bl	80044ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e34:	609a      	str	r2, [r3, #8]
      break;
 8003e36:	e039      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f000 fab7 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2150      	movs	r1, #80	; 0x50
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fb10 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e56:	e029      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f000 fad6 	bl	8004416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2160      	movs	r1, #96	; 0x60
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fb00 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e76:	e019      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f000 fa97 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2140      	movs	r1, #64	; 0x40
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 faf0 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003e96:	e009      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fae7 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003ea8:	e000      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a40      	ldr	r2, [pc, #256]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <TIM_Base_SetConfig+0x114>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d027      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <TIM_Base_SetConfig+0x118>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d023      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <TIM_Base_SetConfig+0x11c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <TIM_Base_SetConfig+0x120>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <TIM_Base_SetConfig+0x124>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d017      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a28      	ldr	r2, [pc, #160]	; (8004040 <TIM_Base_SetConfig+0x128>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a27      	ldr	r2, [pc, #156]	; (8004044 <TIM_Base_SetConfig+0x12c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00f      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a26      	ldr	r2, [pc, #152]	; (8004048 <TIM_Base_SetConfig+0x130>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_Base_SetConfig+0x134>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a24      	ldr	r2, [pc, #144]	; (8004050 <TIM_Base_SetConfig+0x138>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a23      	ldr	r2, [pc, #140]	; (8004054 <TIM_Base_SetConfig+0x13c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0xf8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a0c      	ldr	r2, [pc, #48]	; (800403c <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d103      	bne.n	8004018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	615a      	str	r2, [r3, #20]
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800
 800404c:	40001800 	.word	0x40001800
 8004050:	40001c00 	.word	0x40001c00
 8004054:	40002000 	.word	0x40002000

08004058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f023 0302 	bic.w	r3, r3, #2
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a20      	ldr	r2, [pc, #128]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC1_SetConfig+0x64>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10c      	bne.n	80040d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0308 	bic.w	r3, r3, #8
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a15      	ldr	r2, [pc, #84]	; (8004130 <TIM_OC1_SetConfig+0xd8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_OC1_SetConfig+0x8e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <TIM_OC1_SetConfig+0xdc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d111      	bne.n	800410a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40010000 	.word	0x40010000
 8004134:	40010400 	.word	0x40010400

08004138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0210 	bic.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0320 	bic.w	r3, r3, #32
 8004182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a22      	ldr	r2, [pc, #136]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC2_SetConfig+0x68>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10d      	bne.n	80041bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <TIM_OC2_SetConfig+0xe4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC2_SetConfig+0x94>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <TIM_OC2_SetConfig+0xe8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d113      	bne.n	80041f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40010400 	.word	0x40010400

08004224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800426c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_OC3_SetConfig+0x66>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10d      	bne.n	80042a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a16      	ldr	r2, [pc, #88]	; (8004304 <TIM_OC3_SetConfig+0xe0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d003      	beq.n	80042b6 <TIM_OC3_SetConfig+0x92>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <TIM_OC3_SetConfig+0xe4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d113      	bne.n	80042de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40010000 	.word	0x40010000
 8004308:	40010400 	.word	0x40010400

0800430c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	031b      	lsls	r3, r3, #12
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <TIM_OC4_SetConfig+0xa4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_OC4_SetConfig+0x68>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <TIM_OC4_SetConfig+0xa8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d109      	bne.n	8004388 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40010400 	.word	0x40010400

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	f043 0307 	orr.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2201      	movs	r2, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1a      	ldr	r2, [r3, #32]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800454a:	2302      	movs	r3, #2
 800454c:	e032      	b.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004586:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e03f      	b.n	800467a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f00e fee2 	bl	80133d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2224      	movs	r2, #36	; 0x24
 8004618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f90b 	bl	8004848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af02      	add	r7, sp, #8
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b20      	cmp	r3, #32
 80046a0:	f040 8083 	bne.w	80047aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Transmit+0x2e>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e07b      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_UART_Transmit+0x40>
 80046be:	2302      	movs	r3, #2
 80046c0:	e074      	b.n	80047ac <HAL_UART_Transmit+0x12a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2221      	movs	r2, #33	; 0x21
 80046d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046d8:	f7fc fc94 	bl	8001004 <HAL_GetTick>
 80046dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ea:	e042      	b.n	8004772 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	d122      	bne.n	800474a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f850 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e046      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004730:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3302      	adds	r3, #2
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	e017      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3301      	adds	r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	e013      	b.n	8004772 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f82d 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e023      	b.n	80047ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	60ba      	str	r2, [r7, #8]
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1b7      	bne.n	80046ec <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2200      	movs	r2, #0
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f814 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e00a      	b.n	80047ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c4:	e02c      	b.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d028      	beq.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d4:	f7fc fc16 	bl	8001004 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d21d      	bcs.n	8004820 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e00f      	b.n	8004840 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	d0c3      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004848:	b5b0      	push	{r4, r5, r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004888:	f023 030c 	bic.w	r3, r3, #12
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	430b      	orrs	r3, r1
 8004894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b4:	f040 80e4 	bne.w	8004a80 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4aab      	ldr	r2, [pc, #684]	; (8004b6c <UART_SetConfig+0x324>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <UART_SetConfig+0x84>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4aaa      	ldr	r2, [pc, #680]	; (8004b70 <UART_SetConfig+0x328>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d16c      	bne.n	80049a6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80048cc:	f7fe f92a 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009a      	lsls	r2, r3, #2
 80048da:	441a      	add	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	4aa3      	ldr	r2, [pc, #652]	; (8004b74 <UART_SetConfig+0x32c>)
 80048e8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	011c      	lsls	r4, r3, #4
 80048f0:	f7fe f918 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009a      	lsls	r2, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fbb2 f5f3 	udiv	r5, r2, r3
 800490a:	f7fe f90b 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800490e:	4602      	mov	r2, r0
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009a      	lsls	r2, r3, #2
 8004918:	441a      	add	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	4a93      	ldr	r2, [pc, #588]	; (8004b74 <UART_SetConfig+0x32c>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	2264      	movs	r2, #100	; 0x64
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	1aeb      	subs	r3, r5, r3
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	3332      	adds	r3, #50	; 0x32
 8004938:	4a8e      	ldr	r2, [pc, #568]	; (8004b74 <UART_SetConfig+0x32c>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004946:	441c      	add	r4, r3
 8004948:	f7fe f8ec 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 800494c:	4602      	mov	r2, r0
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009a      	lsls	r2, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004962:	f7fe f8df 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004966:	4602      	mov	r2, r0
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	009a      	lsls	r2, r3, #2
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	4a7d      	ldr	r2, [pc, #500]	; (8004b74 <UART_SetConfig+0x32c>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2264      	movs	r2, #100	; 0x64
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	1aeb      	subs	r3, r5, r3
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	3332      	adds	r3, #50	; 0x32
 8004990:	4a78      	ldr	r2, [pc, #480]	; (8004b74 <UART_SetConfig+0x32c>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	f003 0207 	and.w	r2, r3, #7
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4422      	add	r2, r4
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	e154      	b.n	8004c50 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80049a6:	f7fe f8a9 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009a      	lsls	r2, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	4a6c      	ldr	r2, [pc, #432]	; (8004b74 <UART_SetConfig+0x32c>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	011c      	lsls	r4, r3, #4
 80049ca:	f7fe f897 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	009a      	lsls	r2, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80049e4:	f7fe f88a 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	009a      	lsls	r2, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	4a5d      	ldr	r2, [pc, #372]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	2264      	movs	r2, #100	; 0x64
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	1aeb      	subs	r3, r5, r3
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	3332      	adds	r3, #50	; 0x32
 8004a12:	4a58      	ldr	r2, [pc, #352]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a20:	441c      	add	r4, r3
 8004a22:	f7fe f86b 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009a      	lsls	r2, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a3c:	f7fe f85e 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009a      	lsls	r2, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	4a47      	ldr	r2, [pc, #284]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2264      	movs	r2, #100	; 0x64
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	1aeb      	subs	r3, r5, r3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	4a42      	ldr	r2, [pc, #264]	; (8004b74 <UART_SetConfig+0x32c>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 0207 	and.w	r2, r3, #7
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4422      	add	r2, r4
 8004a7c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004a7e:	e0e7      	b.n	8004c50 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a39      	ldr	r2, [pc, #228]	; (8004b6c <UART_SetConfig+0x324>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <UART_SetConfig+0x24c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a38      	ldr	r2, [pc, #224]	; (8004b70 <UART_SetConfig+0x328>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d171      	bne.n	8004b78 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a94:	f7fe f846 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009a      	lsls	r2, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <UART_SetConfig+0x32c>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	011c      	lsls	r4, r3, #4
 8004ab8:	f7fe f834 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009a      	lsls	r2, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ad2:	f7fe f827 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <UART_SetConfig+0x32c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2264      	movs	r2, #100	; 0x64
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	1aeb      	subs	r3, r5, r3
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	3332      	adds	r3, #50	; 0x32
 8004b00:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0c:	441c      	add	r4, r3
 8004b0e:	f7fe f809 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b28:	f7fd fffc 	bl	8002b24 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	009a      	lsls	r2, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	2264      	movs	r2, #100	; 0x64
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	1aeb      	subs	r3, r5, r3
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	3332      	adds	r3, #50	; 0x32
 8004b56:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <UART_SetConfig+0x32c>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4422      	add	r2, r4
 8004b68:	609a      	str	r2, [r3, #8]
 8004b6a:	e071      	b.n	8004c50 <UART_SetConfig+0x408>
 8004b6c:	40011000 	.word	0x40011000
 8004b70:	40011400 	.word	0x40011400
 8004b74:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b78:	f7fd ffc0 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009a      	lsls	r2, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	4a31      	ldr	r2, [pc, #196]	; (8004c58 <UART_SetConfig+0x410>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	011c      	lsls	r4, r3, #4
 8004b9c:	f7fd ffae 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009a      	lsls	r2, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bb6:	f7fd ffa1 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009a      	lsls	r2, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	4a21      	ldr	r2, [pc, #132]	; (8004c58 <UART_SetConfig+0x410>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2264      	movs	r2, #100	; 0x64
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	1aeb      	subs	r3, r5, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <UART_SetConfig+0x410>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	441c      	add	r4, r3
 8004bf2:	f7fd ff83 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009a      	lsls	r2, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c0c:	f7fd ff76 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009a      	lsls	r2, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <UART_SetConfig+0x410>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	2264      	movs	r2, #100	; 0x64
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
 8004c34:	1aeb      	subs	r3, r5, r3
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	3332      	adds	r3, #50	; 0x32
 8004c3a:	4a07      	ldr	r2, [pc, #28]	; (8004c58 <UART_SetConfig+0x410>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	f003 020f 	and.w	r2, r3, #15
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4422      	add	r2, r4
 8004c4c:	609a      	str	r2, [r3, #8]
}
 8004c4e:	e7ff      	b.n	8004c50 <UART_SetConfig+0x408>
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bdb0      	pop	{r4, r5, r7, pc}
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <drive_init>:
//drive_init
// 走行系の変数の初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
	MF.FLAGS = 0;
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <drive_init+0x14>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	801a      	strh	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	20000fac 	.word	0x20000fac

08004c74 <drive_ready>:
//drive_ready
// 走行前のLED点滅&ジャイロのドリフト計算
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_ready(void){
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
	  while(ad_fl <= WALL_BASE_FL){
 8004c78:	e00f      	b.n	8004c9a <drive_ready+0x26>
		  led_write(1, 1, 1);
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	2001      	movs	r0, #1
 8004c80:	f00d ff88 	bl	8012b94 <led_write>
		  HAL_Delay(200);
 8004c84:	20c8      	movs	r0, #200	; 0xc8
 8004c86:	f7fc f9c9 	bl	800101c <HAL_Delay>
		  led_write(0, 0, 0);
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	2000      	movs	r0, #0
 8004c90:	f00d ff80 	bl	8012b94 <led_write>
		  HAL_Delay(200);
 8004c94:	20c8      	movs	r0, #200	; 0xc8
 8004c96:	f7fc f9c1 	bl	800101c <HAL_Delay>
	  while(ad_fl <= WALL_BASE_FL){
 8004c9a:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <drive_ready+0x48>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2bc8      	cmp	r3, #200	; 0xc8
 8004ca0:	d9eb      	bls.n	8004c7a <drive_ready+0x6>
	  }
	  gyro_drift_flag = 1;
 8004ca2:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <drive_ready+0x4c>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(2000);
 8004ca8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004cac:	f7fc f9b6 	bl	800101c <HAL_Delay>
	  degree_z = 0;
 8004cb0:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <drive_ready+0x50>)
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
}
 8004cb8:	bf00      	nop
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20000d9c 	.word	0x20000d9c
 8004cc0:	20000adc 	.word	0x20000adc
 8004cc4:	20000b9c 	.word	0x20000b9c

08004cc8 <drive_start>:
//drive_start
// 走行開始前に走行距離と機体角度を初期化
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//走行距離の初期化
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	4a0e      	ldr	r2, [pc, #56]	; (8004d0c <drive_start+0x44>)
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	4a0e      	ldr	r2, [pc, #56]	; (8004d10 <drive_start+0x48>)
 8004cd6:	6013      	str	r3, [r2, #0]
	if(H_accel_flag == 0) target_speed_l = target_speed_r = 0;		//モータ出力の初期化
 8004cd8:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <drive_start+0x4c>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d105      	bne.n	8004cec <drive_start+0x24>
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	4a0c      	ldr	r2, [pc, #48]	; (8004d18 <drive_start+0x50>)
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	4a0c      	ldr	r2, [pc, #48]	; (8004d1c <drive_start+0x54>)
 8004cea:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 1;
 8004cec:	4a0c      	ldr	r2, [pc, #48]	; (8004d20 <drive_start+0x58>)
 8004cee:	8813      	ldrh	r3, [r2, #0]
 8004cf0:	f043 0302 	orr.w	r3, r3, #2
 8004cf4:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8004cf6:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <drive_start+0x58>)
 8004cf8:	8813      	ldrh	r3, [r2, #0]
 8004cfa:	f043 0304 	orr.w	r3, r3, #4
 8004cfe:	8013      	strh	r3, [r2, #0]
}
 8004d00:	bf00      	nop
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20000b2c 	.word	0x20000b2c
 8004d10:	200012e8 	.word	0x200012e8
 8004d14:	20000301 	.word	0x20000301
 8004d18:	200001d8 	.word	0x200001d8
 8004d1c:	20000c44 	.word	0x20000c44
 8004d20:	20000fac 	.word	0x20000fac

08004d24 <drive_stop>:
//drive_stop
// 走行を終了する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
	dist_l = dist_r = 0;		//a走行距離の初期化
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <drive_stop+0x3c>)
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4a0c      	ldr	r2, [pc, #48]	; (8004d64 <drive_stop+0x40>)
 8004d32:	6013      	str	r3, [r2, #0]
	pulse_l = pulse_r = 0;		//aモータ出力の初期化
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	4a0b      	ldr	r2, [pc, #44]	; (8004d68 <drive_stop+0x44>)
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	4a0b      	ldr	r2, [pc, #44]	; (8004d6c <drive_stop+0x48>)
 8004d3e:	6013      	str	r3, [r2, #0]
	MF.FLAG.DRV = 0;
 8004d40:	4a0b      	ldr	r2, [pc, #44]	; (8004d70 <drive_stop+0x4c>)
 8004d42:	8813      	ldrh	r3, [r2, #0]
 8004d44:	f36f 0341 	bfc	r3, #1, #1
 8004d48:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SPD = 0;
 8004d4a:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <drive_stop+0x4c>)
 8004d4c:	8813      	ldrh	r3, [r2, #0]
 8004d4e:	f36f 0382 	bfc	r3, #2, #1
 8004d52:	8013      	strh	r3, [r2, #0]
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000b2c 	.word	0x20000b2c
 8004d64:	200012e8 	.word	0x200012e8
 8004d68:	200007b8 	.word	0x200007b8
 8004d6c:	20000be8 	.word	0x20000be8
 8004d70:	20000fac 	.word	0x20000fac

08004d74 <control_start>:
//control_start
// wallとgyroの姿勢制御を開始する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_start(){
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 1;										//wall制御を有効にする
 8004d78:	4a07      	ldr	r2, [pc, #28]	; (8004d98 <control_start+0x24>)
 8004d7a:	8813      	ldrh	r3, [r2, #0]
 8004d7c:	f043 0308 	orr.w	r3, r3, #8
 8004d80:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 1;										//gyro制御を有効にする
 8004d82:	4a05      	ldr	r2, [pc, #20]	; (8004d98 <control_start+0x24>)
 8004d84:	8813      	ldrh	r3, [r2, #0]
 8004d86:	f043 0310 	orr.w	r3, r3, #16
 8004d8a:	8013      	strh	r3, [r2, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	20000fac 	.word	0x20000fac

08004d9c <control_stop>:
//control_stop
// wallとgyroの姿勢制御を停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void control_stop(){
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
	MF.FLAG.WCTRL = 0;										//wall制御を無効にする
 8004da0:	4a07      	ldr	r2, [pc, #28]	; (8004dc0 <control_stop+0x24>)
 8004da2:	8813      	ldrh	r3, [r2, #0]
 8004da4:	f36f 03c3 	bfc	r3, #3, #1
 8004da8:	8013      	strh	r3, [r2, #0]
	MF.FLAG.GCTRL = 0;										//gyro制御を無効にする
 8004daa:	4a05      	ldr	r2, [pc, #20]	; (8004dc0 <control_stop+0x24>)
 8004dac:	8813      	ldrh	r3, [r2, #0]
 8004dae:	f36f 1304 	bfc	r3, #4, #1
 8004db2:	8013      	strh	r3, [r2, #0]
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000fac 	.word	0x20000fac

08004dc4 <drive_dir>:
//drive_dir
// wheel turn dir for each wheel
// 引数:1車輪選択(0=>L, 1=>R), 2回転方向選択(0=>CW, 1=>CWW, 2=>ShortBrake, 3=>free)
// 戻り値: なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_dir(uint8_t wheel, uint8_t dir){
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	460a      	mov	r2, r1
 8004dce:	71fb      	strb	r3, [r7, #7]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	71bb      	strb	r3, [r7, #6]
	if(wheel == 0){
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d13e      	bne.n	8004e58 <drive_dir+0x94>
		if(dir == 0){
 8004dda:	79bb      	ldrb	r3, [r7, #6]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10f      	bne.n	8004e00 <drive_dir+0x3c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004de0:	2201      	movs	r2, #1
 8004de2:	2120      	movs	r1, #32
 8004de4:	483f      	ldr	r0, [pc, #252]	; (8004ee4 <drive_dir+0x120>)
 8004de6:	f7fd fa8d 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//L_CCW
 8004dea:	2200      	movs	r2, #0
 8004dec:	2110      	movs	r1, #16
 8004dee:	483d      	ldr	r0, [pc, #244]	; (8004ee4 <drive_dir+0x120>)
 8004df0:	f7fd fa88 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004df4:	2201      	movs	r2, #1
 8004df6:	2101      	movs	r1, #1
 8004df8:	483b      	ldr	r0, [pc, #236]	; (8004ee8 <drive_dir+0x124>)
 8004dfa:	f7fd fa83 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
		}
	}
}
 8004dfe:	e06c      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 1){
 8004e00:	79bb      	ldrb	r3, [r7, #6]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d10f      	bne.n	8004e26 <drive_dir+0x62>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);	//L_CW
 8004e06:	2200      	movs	r2, #0
 8004e08:	2120      	movs	r1, #32
 8004e0a:	4836      	ldr	r0, [pc, #216]	; (8004ee4 <drive_dir+0x120>)
 8004e0c:	f7fd fa7a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e10:	2201      	movs	r2, #1
 8004e12:	2110      	movs	r1, #16
 8004e14:	4833      	ldr	r0, [pc, #204]	; (8004ee4 <drive_dir+0x120>)
 8004e16:	f7fd fa75 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	4832      	ldr	r0, [pc, #200]	; (8004ee8 <drive_dir+0x124>)
 8004e20:	f7fd fa70 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e24:	e059      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 2){
 8004e26:	79bb      	ldrb	r3, [r7, #6]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d10f      	bne.n	8004e4c <drive_dir+0x88>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);		//L_CW
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	2120      	movs	r1, #32
 8004e30:	482c      	ldr	r0, [pc, #176]	; (8004ee4 <drive_dir+0x120>)
 8004e32:	f7fd fa67 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//L_CCW
 8004e36:	2201      	movs	r2, #1
 8004e38:	2110      	movs	r1, #16
 8004e3a:	482a      	ldr	r0, [pc, #168]	; (8004ee4 <drive_dir+0x120>)
 8004e3c:	f7fd fa62 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e40:	2201      	movs	r2, #1
 8004e42:	2101      	movs	r1, #1
 8004e44:	4828      	ldr	r0, [pc, #160]	; (8004ee8 <drive_dir+0x124>)
 8004e46:	f7fd fa5d 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e4a:	e046      	b.n	8004eda <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4825      	ldr	r0, [pc, #148]	; (8004ee8 <drive_dir+0x124>)
 8004e52:	f7fd fa57 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e56:	e040      	b.n	8004eda <drive_dir+0x116>
		if(dir == 0){
 8004e58:	79bb      	ldrb	r3, [r7, #6]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d110      	bne.n	8004e80 <drive_dir+0xbc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004e5e:	2201      	movs	r2, #1
 8004e60:	2102      	movs	r1, #2
 8004e62:	4821      	ldr	r0, [pc, #132]	; (8004ee8 <drive_dir+0x124>)
 8004e64:	f7fd fa4e 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//R_CCW
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e6e:	481e      	ldr	r0, [pc, #120]	; (8004ee8 <drive_dir+0x124>)
 8004e70:	f7fd fa48 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e74:	2201      	movs	r2, #1
 8004e76:	2101      	movs	r1, #1
 8004e78:	481b      	ldr	r0, [pc, #108]	; (8004ee8 <drive_dir+0x124>)
 8004e7a:	f7fd fa43 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004e7e:	e02c      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 1){
 8004e80:	79bb      	ldrb	r3, [r7, #6]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d110      	bne.n	8004ea8 <drive_dir+0xe4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	//R_CW
 8004e86:	2200      	movs	r2, #0
 8004e88:	2102      	movs	r1, #2
 8004e8a:	4817      	ldr	r0, [pc, #92]	; (8004ee8 <drive_dir+0x124>)
 8004e8c:	f7fd fa3a 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004e90:	2201      	movs	r2, #1
 8004e92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e96:	4814      	ldr	r0, [pc, #80]	; (8004ee8 <drive_dir+0x124>)
 8004e98:	f7fd fa34 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	4811      	ldr	r0, [pc, #68]	; (8004ee8 <drive_dir+0x124>)
 8004ea2:	f7fd fa2f 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ea6:	e018      	b.n	8004eda <drive_dir+0x116>
		}else if(dir == 2){
 8004ea8:	79bb      	ldrb	r3, [r7, #6]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d110      	bne.n	8004ed0 <drive_dir+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		//R_CW
 8004eae:	2201      	movs	r2, #1
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	480d      	ldr	r0, [pc, #52]	; (8004ee8 <drive_dir+0x124>)
 8004eb4:	f7fd fa26 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//R_CCW
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ebe:	480a      	ldr	r0, [pc, #40]	; (8004ee8 <drive_dir+0x124>)
 8004ec0:	f7fd fa20 	bl	8002304 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);		//STBY
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4807      	ldr	r0, [pc, #28]	; (8004ee8 <drive_dir+0x124>)
 8004eca:	f7fd fa1b 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004ece:	e004      	b.n	8004eda <drive_dir+0x116>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//STBY
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	4804      	ldr	r0, [pc, #16]	; (8004ee8 <drive_dir+0x124>)
 8004ed6:	f7fd fa15 	bl	8002304 <HAL_GPIO_WritePin>
}
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40020800 	.word	0x40020800
 8004ee8:	40020400 	.word	0x40020400

08004eec <driveA>:
//driveA
// 指定距離、指定加速度で加速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4623      	mov	r3, r4
 8004efc:	80fb      	strh	r3, [r7, #6]
 8004efe:	4603      	mov	r3, r0
 8004f00:	80bb      	strh	r3, [r7, #4]
 8004f02:	460b      	mov	r3, r1
 8004f04:	807b      	strh	r3, [r7, #2]
 8004f06:	4613      	mov	r3, r2
 8004f08:	803b      	strh	r3, [r7, #0]

	speed_min_l = speed_min_r = speed_min_p;
 8004f0a:	88bb      	ldrh	r3, [r7, #4]
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f14:	4b25      	ldr	r3, [pc, #148]	; (8004fac <driveA+0xc0>)
 8004f16:	edc3 7a00 	vstr	s15, [r3]
 8004f1a:	4b25      	ldr	r3, [pc, #148]	; (8004fb0 <driveA+0xc4>)
 8004f1c:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8004f20:	887b      	ldrh	r3, [r7, #2]
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2a:	4b22      	ldr	r3, [pc, #136]	; (8004fb4 <driveA+0xc8>)
 8004f2c:	edc3 7a00 	vstr	s15, [r3]
 8004f30:	4b21      	ldr	r3, [pc, #132]	; (8004fb8 <driveA+0xcc>)
 8004f32:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	ee07 3a90 	vmov	s15, r3
 8004f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f40:	4b1e      	ldr	r3, [pc, #120]	; (8004fbc <driveA+0xd0>)
 8004f42:	edc3 7a00 	vstr	s15, [r3]
 8004f46:	4b1e      	ldr	r3, [pc, #120]	; (8004fc0 <driveA+0xd4>)
 8004f48:	edc3 7a00 	vstr	s15, [r3]
	if(H_accel_flag == 1)target_speed_l = target_speed_r = speed_min_p;
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <driveA+0xd8>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d10a      	bne.n	8004f6a <driveA+0x7e>
 8004f54:	88bb      	ldrh	r3, [r7, #4]
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5e:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <driveA+0xdc>)
 8004f60:	edc3 7a00 	vstr	s15, [r3]
 8004f64:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <driveA+0xe0>)
 8004f66:	edc3 7a00 	vstr	s15, [r3]

	drive_start();											//走行開始
 8004f6a:	f7ff fead 	bl	8004cc8 <drive_start>

	//----走行----
	while((dist_l < dist) || (dist_r < dist));				//左右のモータが指定距離以上進むまで待機
 8004f6e:	bf00      	nop
 8004f70:	883b      	ldrh	r3, [r7, #0]
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f7a:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <driveA+0xe4>)
 8004f7c:	edd3 7a00 	vldr	s15, [r3]
 8004f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f88:	dcf2      	bgt.n	8004f70 <driveA+0x84>
 8004f8a:	883b      	ldrh	r3, [r7, #0]
 8004f8c:	ee07 3a90 	vmov	s15, r3
 8004f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f94:	4b0f      	ldr	r3, [pc, #60]	; (8004fd4 <driveA+0xe8>)
 8004f96:	edd3 7a00 	vldr	s15, [r3]
 8004f9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa2:	dce5      	bgt.n	8004f70 <driveA+0x84>

//	drive_stop();
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd90      	pop	{r4, r7, pc}
 8004fac:	20000fb0 	.word	0x20000fb0
 8004fb0:	20000b94 	.word	0x20000b94
 8004fb4:	200001dc 	.word	0x200001dc
 8004fb8:	200007b4 	.word	0x200007b4
 8004fbc:	20000b20 	.word	0x20000b20
 8004fc0:	20000da0 	.word	0x20000da0
 8004fc4:	20000301 	.word	0x20000301
 8004fc8:	200001d8 	.word	0x200001d8
 8004fcc:	20000c44 	.word	0x20000c44
 8004fd0:	200012e8 	.word	0x200012e8
 8004fd4:	20000b2c 	.word	0x20000b2c

08004fd8 <driveD>:
//driveD
// 指定距離、指定減速度で減速走行する
// 引数1：accel_p 加速度, 引数2：speed_min_p 最低速度, 引数3：speed_max_p 最高速度, 引数4：dist 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(int16_t accel_p, uint16_t speed_min_p, uint16_t speed_max_p, uint16_t dist){
 8004fd8:	b590      	push	{r4, r7, lr}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4604      	mov	r4, r0
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4623      	mov	r3, r4
 8004fe8:	80fb      	strh	r3, [r7, #6]
 8004fea:	4603      	mov	r3, r0
 8004fec:	80bb      	strh	r3, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	807b      	strh	r3, [r7, #2]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	803b      	strh	r3, [r7, #0]

	float speed_0 = (speed_l + speed_r) / 2;								//等速走行距離を計算するためにmain.cより参照
 8004ff6:	4b58      	ldr	r3, [pc, #352]	; (8005158 <driveD+0x180>)
 8004ff8:	ed93 7a00 	vldr	s14, [r3]
 8004ffc:	4b57      	ldr	r3, [pc, #348]	; (800515c <driveD+0x184>)
 8004ffe:	edd3 7a00 	vldr	s15, [r3]
 8005002:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005006:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800500a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800500e:	edc7 7a03 	vstr	s15, [r7, #12]
	speed_min_l = speed_min_r = speed_min_p;
 8005012:	88bb      	ldrh	r3, [r7, #4]
 8005014:	ee07 3a90 	vmov	s15, r3
 8005018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501c:	4b50      	ldr	r3, [pc, #320]	; (8005160 <driveD+0x188>)
 800501e:	edc3 7a00 	vstr	s15, [r3]
 8005022:	4b50      	ldr	r3, [pc, #320]	; (8005164 <driveD+0x18c>)
 8005024:	edc3 7a00 	vstr	s15, [r3]
	speed_max_l = speed_max_r = speed_max_p;
 8005028:	887b      	ldrh	r3, [r7, #2]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	4b4d      	ldr	r3, [pc, #308]	; (8005168 <driveD+0x190>)
 8005034:	edc3 7a00 	vstr	s15, [r3]
 8005038:	4b4c      	ldr	r3, [pc, #304]	; (800516c <driveD+0x194>)
 800503a:	edc3 7a00 	vstr	s15, [r3]
	accel_l = accel_r = accel_p;							//引数の各パラメータをグローバル変数化
 800503e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800504a:	4b49      	ldr	r3, [pc, #292]	; (8005170 <driveD+0x198>)
 800504c:	edc3 7a00 	vstr	s15, [r3]
 8005050:	4b48      	ldr	r3, [pc, #288]	; (8005174 <driveD+0x19c>)
 8005052:	edc3 7a00 	vstr	s15, [r3]

	int16_t c_dist = dist - (speed_min_l*speed_min_l  - speed_0*speed_0)/(2*accel_l);			//等速走行距離 = 総距離 - 減速に必要な距離
 8005056:	883b      	ldrh	r3, [r7, #0]
 8005058:	ee07 3a90 	vmov	s15, r3
 800505c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005060:	4b40      	ldr	r3, [pc, #256]	; (8005164 <driveD+0x18c>)
 8005062:	edd3 6a00 	vldr	s13, [r3]
 8005066:	4b3f      	ldr	r3, [pc, #252]	; (8005164 <driveD+0x18c>)
 8005068:	edd3 7a00 	vldr	s15, [r3]
 800506c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005070:	ed97 6a03 	vldr	s12, [r7, #12]
 8005074:	edd7 7a03 	vldr	s15, [r7, #12]
 8005078:	ee66 7a27 	vmul.f32	s15, s12, s15
 800507c:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005080:	4b3c      	ldr	r3, [pc, #240]	; (8005174 <driveD+0x19c>)
 8005082:	edd3 7a00 	vldr	s15, [r3]
 8005086:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800508a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800508e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005096:	ee17 3a90 	vmov	r3, s15
 800509a:	817b      	strh	r3, [r7, #10]

	accel_l = accel_r = 0;
 800509c:	f04f 0300 	mov.w	r3, #0
 80050a0:	4a33      	ldr	r2, [pc, #204]	; (8005170 <driveD+0x198>)
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	4a33      	ldr	r2, [pc, #204]	; (8005174 <driveD+0x19c>)
 80050a6:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	4a32      	ldr	r2, [pc, #200]	; (8005178 <driveD+0x1a0>)
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	4a32      	ldr	r2, [pc, #200]	; (800517c <driveD+0x1a4>)
 80050b2:	6013      	str	r3, [r2, #0]
	if(c_dist > 0){
 80050b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	dd1c      	ble.n	80050f6 <driveD+0x11e>
		//----等速走行----
		while((dist_l < c_dist) || (dist_r < c_dist));	//a左右のモータが等速分の距離以上進むまで待機
 80050bc:	bf00      	nop
 80050be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050ca:	4b2c      	ldr	r3, [pc, #176]	; (800517c <driveD+0x1a4>)
 80050cc:	edd3 7a00 	vldr	s15, [r3]
 80050d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d8:	dcf1      	bgt.n	80050be <driveD+0xe6>
 80050da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050e6:	4b24      	ldr	r3, [pc, #144]	; (8005178 <driveD+0x1a0>)
 80050e8:	edd3 7a00 	vldr	s15, [r3]
 80050ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f4:	dce3      	bgt.n	80050be <driveD+0xe6>
	}
	accel_l = accel_r = accel_p;
 80050f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005102:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <driveD+0x198>)
 8005104:	edc3 7a00 	vstr	s15, [r3]
 8005108:	4b1a      	ldr	r3, [pc, #104]	; (8005174 <driveD+0x19c>)
 800510a:	edc3 7a00 	vstr	s15, [r3]
	//----減速走行----
	while((dist_l < dist) || (dist_r < dist));			//a左右のモータが減速分の距離以上進むまで待機
 800510e:	bf00      	nop
 8005110:	883b      	ldrh	r3, [r7, #0]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800511a:	4b18      	ldr	r3, [pc, #96]	; (800517c <driveD+0x1a4>)
 800511c:	edd3 7a00 	vldr	s15, [r3]
 8005120:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005128:	dcf2      	bgt.n	8005110 <driveD+0x138>
 800512a:	883b      	ldrh	r3, [r7, #0]
 800512c:	ee07 3a90 	vmov	s15, r3
 8005130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005134:	4b10      	ldr	r3, [pc, #64]	; (8005178 <driveD+0x1a0>)
 8005136:	edd3 7a00 	vldr	s15, [r3]
 800513a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800513e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005142:	dce5      	bgt.n	8005110 <driveD+0x138>

	if(H_accel_flag != 1)drive_stop();											//走行停止
 8005144:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <driveD+0x1a8>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d001      	beq.n	8005150 <driveD+0x178>
 800514c:	f7ff fdea 	bl	8004d24 <drive_stop>
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	bd90      	pop	{r4, r7, pc}
 8005158:	20000b30 	.word	0x20000b30
 800515c:	200002f4 	.word	0x200002f4
 8005160:	20000fb0 	.word	0x20000fb0
 8005164:	20000b94 	.word	0x20000b94
 8005168:	200001dc 	.word	0x200001dc
 800516c:	200007b4 	.word	0x200007b4
 8005170:	20000b20 	.word	0x20000b20
 8005174:	20000da0 	.word	0x20000da0
 8005178:	20000b2c 	.word	0x20000b2c
 800517c:	200012e8 	.word	0x200012e8
 8005180:	20000301 	.word	0x20000301

08005184 <driveU>:
//driveU
// 指定距離分等速走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	4603      	mov	r3, r0
 800518c:	80fb      	strh	r3, [r7, #6]

	accel_l = accel_r = 0;									//等速走行のため加速度は0
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	4a28      	ldr	r2, [pc, #160]	; (8005234 <driveU+0xb0>)
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	4a28      	ldr	r2, [pc, #160]	; (8005238 <driveU+0xb4>)
 8005198:	6013      	str	r3, [r2, #0]
	dist_l = dist_r = 0;
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	4a27      	ldr	r2, [pc, #156]	; (800523c <driveU+0xb8>)
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	4a27      	ldr	r2, [pc, #156]	; (8005240 <driveU+0xbc>)
 80051a4:	6013      	str	r3, [r2, #0]

	//----走行----
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 80051a6:	e024      	b.n	80051f2 <driveU+0x6e>
		if(MF.FLAG.WEDGE == 1){
 80051a8:	4b26      	ldr	r3, [pc, #152]	; (8005244 <driveU+0xc0>)
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d11d      	bne.n	80051f2 <driveU+0x6e>
			if(ad_l < WALL_BASE_L-30 || ad_r < WALL_BASE_R-10){
 80051b6:	4b24      	ldr	r3, [pc, #144]	; (8005248 <driveU+0xc4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b3b      	cmp	r3, #59	; 0x3b
 80051bc:	d903      	bls.n	80051c6 <driveU+0x42>
 80051be:	4b23      	ldr	r3, [pc, #140]	; (800524c <driveU+0xc8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b77      	cmp	r3, #119	; 0x77
 80051c4:	d815      	bhi.n	80051f2 <driveU+0x6e>
				while((dist_l < W_DIST) || (dist_r < W_DIST));	//左右のモータが壁切れ用指定距離以上進むまで待機
 80051c6:	bf00      	nop
 80051c8:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <driveU+0xbc>)
 80051ca:	edd3 7a00 	vldr	s15, [r3]
 80051ce:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005250 <driveU+0xcc>
 80051d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051da:	d4f5      	bmi.n	80051c8 <driveU+0x44>
 80051dc:	4b17      	ldr	r3, [pc, #92]	; (800523c <driveU+0xb8>)
 80051de:	edd3 7a00 	vldr	s15, [r3]
 80051e2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005250 <driveU+0xcc>
 80051e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ee:	d4eb      	bmi.n	80051c8 <driveU+0x44>
			break;
 80051f0:	e019      	b.n	8005226 <driveU+0xa2>
	while((dist_l < dist) || (dist_r < dist)){				//左右のモータが指定パルス以上進むまで待機
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	ee07 3a90 	vmov	s15, r3
 80051f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051fc:	4b10      	ldr	r3, [pc, #64]	; (8005240 <driveU+0xbc>)
 80051fe:	edd3 7a00 	vldr	s15, [r3]
 8005202:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520a:	dccd      	bgt.n	80051a8 <driveU+0x24>
 800520c:	88fb      	ldrh	r3, [r7, #6]
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005216:	4b09      	ldr	r3, [pc, #36]	; (800523c <driveU+0xb8>)
 8005218:	edd3 7a00 	vldr	s15, [r3]
 800521c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005224:	dcc0      	bgt.n	80051a8 <driveU+0x24>
			}
		}
	}
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	20000b20 	.word	0x20000b20
 8005238:	20000da0 	.word	0x20000da0
 800523c:	20000b2c 	.word	0x20000b2c
 8005240:	200012e8 	.word	0x200012e8
 8005244:	20000fac 	.word	0x20000fac
 8005248:	20000b3c 	.word	0x20000b3c
 800524c:	20000fa8 	.word	0x20000fa8
 8005250:	428c0000 	.word	0x428c0000

08005254 <driveC>:
//driveC
// 指定距離分デフォルト速度で走行して停止する
// 引数1：dist …… 走行距離
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	4603      	mov	r3, r0
 800525c:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = 150;
 800525e:	4b19      	ldr	r3, [pc, #100]	; (80052c4 <driveC+0x70>)
 8005260:	4a19      	ldr	r2, [pc, #100]	; (80052c8 <driveC+0x74>)
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	4a19      	ldr	r2, [pc, #100]	; (80052cc <driveC+0x78>)
 8005266:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = 150;
 8005268:	4b16      	ldr	r3, [pc, #88]	; (80052c4 <driveC+0x70>)
 800526a:	4a19      	ldr	r2, [pc, #100]	; (80052d0 <driveC+0x7c>)
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	4a19      	ldr	r2, [pc, #100]	; (80052d4 <driveC+0x80>)
 8005270:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;												//等速走行のため加速度は0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	4a18      	ldr	r2, [pc, #96]	; (80052d8 <driveC+0x84>)
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	4a18      	ldr	r2, [pc, #96]	; (80052dc <driveC+0x88>)
 800527c:	6013      	str	r3, [r2, #0]

	drive_start();											//走行開始
 800527e:	f7ff fd23 	bl	8004cc8 <drive_start>
	//====回転====
	while((dist_l < dist) || (dist_r < dist));			//左右のモータが定速分の距離以上進むまで待機
 8005282:	bf00      	nop
 8005284:	88fb      	ldrh	r3, [r7, #6]
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800528e:	4b14      	ldr	r3, [pc, #80]	; (80052e0 <driveC+0x8c>)
 8005290:	edd3 7a00 	vldr	s15, [r3]
 8005294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529c:	dcf2      	bgt.n	8005284 <driveC+0x30>
 800529e:	88fb      	ldrh	r3, [r7, #6]
 80052a0:	ee07 3a90 	vmov	s15, r3
 80052a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052a8:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <driveC+0x90>)
 80052aa:	edd3 7a00 	vldr	s15, [r3]
 80052ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b6:	dce5      	bgt.n	8005284 <driveC+0x30>

	drive_stop();											//走行停止
 80052b8:	f7ff fd34 	bl	8004d24 <drive_stop>
}
 80052bc:	bf00      	nop
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	43160000 	.word	0x43160000
 80052c8:	20000fb0 	.word	0x20000fb0
 80052cc:	20000b94 	.word	0x20000b94
 80052d0:	200001dc 	.word	0x200001dc
 80052d4:	200007b4 	.word	0x200007b4
 80052d8:	20000b20 	.word	0x20000b20
 80052dc:	20000da0 	.word	0x20000da0
 80052e0:	200012e8 	.word	0x200012e8
 80052e4:	20000b2c 	.word	0x20000b2c

080052e8 <driveC2>:
//driveC2
//a指定距離分デフォルト逆回転速度で走行して停止する
//a引数1：dist …… 走行距離
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC2(uint16_t dist){
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	80fb      	strh	r3, [r7, #6]

	speed_min_l = speed_min_r = -250;
 80052f2:	4b1a      	ldr	r3, [pc, #104]	; (800535c <driveC2+0x74>)
 80052f4:	4a1a      	ldr	r2, [pc, #104]	; (8005360 <driveC2+0x78>)
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	4a1a      	ldr	r2, [pc, #104]	; (8005364 <driveC2+0x7c>)
 80052fa:	6013      	str	r3, [r2, #0]
	speed_max_l = speed_max_r = -250;
 80052fc:	4b17      	ldr	r3, [pc, #92]	; (800535c <driveC2+0x74>)
 80052fe:	4a1a      	ldr	r2, [pc, #104]	; (8005368 <driveC2+0x80>)
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	4a1a      	ldr	r2, [pc, #104]	; (800536c <driveC2+0x84>)
 8005304:	6013      	str	r3, [r2, #0]
	accel_l = accel_r = 0;									//a等速走行のため加速度は0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	4a19      	ldr	r2, [pc, #100]	; (8005370 <driveC2+0x88>)
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	4a19      	ldr	r2, [pc, #100]	; (8005374 <driveC2+0x8c>)
 8005310:	6013      	str	r3, [r2, #0]

	drive_start();											//a走行開始
 8005312:	f7ff fcd9 	bl	8004cc8 <drive_start>
	//====a回転====
	while((dist_l > (-1*dist)) || (dist_r > (-1*dist)));	//a左右のモータが定速分の逆走距離以上進むまで待機
 8005316:	bf00      	nop
 8005318:	88fb      	ldrh	r3, [r7, #6]
 800531a:	425b      	negs	r3, r3
 800531c:	ee07 3a90 	vmov	s15, r3
 8005320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005324:	4b14      	ldr	r3, [pc, #80]	; (8005378 <driveC2+0x90>)
 8005326:	edd3 7a00 	vldr	s15, [r3]
 800532a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800532e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005332:	d4f1      	bmi.n	8005318 <driveC2+0x30>
 8005334:	88fb      	ldrh	r3, [r7, #6]
 8005336:	425b      	negs	r3, r3
 8005338:	ee07 3a90 	vmov	s15, r3
 800533c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005340:	4b0e      	ldr	r3, [pc, #56]	; (800537c <driveC2+0x94>)
 8005342:	edd3 7a00 	vldr	s15, [r3]
 8005346:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800534a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534e:	d4e3      	bmi.n	8005318 <driveC2+0x30>

	drive_stop();											//a走行停止
 8005350:	f7ff fce8 	bl	8004d24 <drive_stop>
}
 8005354:	bf00      	nop
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	c37a0000 	.word	0xc37a0000
 8005360:	20000fb0 	.word	0x20000fb0
 8005364:	20000b94 	.word	0x20000b94
 8005368:	200001dc 	.word	0x200001dc
 800536c:	200007b4 	.word	0x200007b4
 8005370:	20000b20 	.word	0x20000b20
 8005374:	20000da0 	.word	0x20000da0
 8005378:	200012e8 	.word	0x200012e8
 800537c:	20000b2c 	.word	0x20000b2c

08005380 <set_position>:
//set_position
// 機体の尻を壁に当てて場所を区画中央に合わせる
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(){
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0

  driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8005384:	2064      	movs	r0, #100	; 0x64
 8005386:	f7ff ffaf 	bl	80052e8 <driveC2>
  degree_z = target_degree_z;
 800538a:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <set_position+0x20>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a05      	ldr	r2, [pc, #20]	; (80053a4 <set_position+0x24>)
 8005390:	6013      	str	r3, [r2, #0]
  start_flag = 0;
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <set_position+0x28>)
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
  start_sectionA();
 8005398:	f000 f808 	bl	80053ac <start_sectionA>
  //driveC(SETPOS_SET);           //aデフォルト速度で区画中心になる分回転。回転後に停止する
}
 800539c:	bf00      	nop
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20000c40 	.word	0x20000c40
 80053a4:	20000b9c 	.word	0x20000b9c
 80053a8:	200012ec 	.word	0x200012ec

080053ac <start_sectionA>:
//start_sectionA
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA(void){
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0

	control_start();
 80053b0:	f7ff fce0 	bl	8004d74 <control_start>
	if(start_flag == 0){
 80053b4:	4b1b      	ldr	r3, [pc, #108]	; (8005424 <start_sectionA+0x78>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d108      	bne.n	80053d0 <start_sectionA+0x24>
		driveA(4000, SPEED_MIN, SPEED_RUN, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 80053be:	237d      	movs	r3, #125	; 0x7d
 80053c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80053c4:	2132      	movs	r1, #50	; 0x32
 80053c6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80053ca:	f7ff fd8f 	bl	8004eec <driveA>
 80053ce:	e01a      	b.n	8005406 <start_sectionA+0x5a>
	}else if(start_flag == 1){
 80053d0:	4b14      	ldr	r3, [pc, #80]	; (8005424 <start_sectionA+0x78>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d108      	bne.n	80053ec <start_sectionA+0x40>
		driveA(4000, SPEED_MIN, SPEED_RUN, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 80053da:	235b      	movs	r3, #91	; 0x5b
 80053dc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80053e0:	2132      	movs	r1, #50	; 0x32
 80053e2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80053e6:	f7ff fd81 	bl	8004eec <driveA>
 80053ea:	e00c      	b.n	8005406 <start_sectionA+0x5a>
	}else if(start_flag == 2){
 80053ec:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <start_sectionA+0x78>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d107      	bne.n	8005406 <start_sectionA+0x5a>
		driveA(4000, SPEED_MIN, SPEED_RUN, SEC_START_HALF);				//aスタート半区画分加速しながら走行。走行後は停止しない
 80053f6:	2323      	movs	r3, #35	; 0x23
 80053f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80053fc:	2132      	movs	r1, #50	; 0x32
 80053fe:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005402:	f7ff fd73 	bl	8004eec <driveA>
	}
	start_flag = 1;
 8005406:	4b07      	ldr	r3, [pc, #28]	; (8005424 <start_sectionA+0x78>)
 8005408:	2201      	movs	r2, #1
 800540a:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 800540c:	4b06      	ldr	r3, [pc, #24]	; (8005428 <start_sectionA+0x7c>)
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <start_sectionA+0x72>
 800541a:	f00d fb81 	bl	8012b20 <get_wall_info>
}
 800541e:	bf00      	nop
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	200012ec 	.word	0x200012ec
 8005428:	20000fac 	.word	0x20000fac

0800542c <start_sectionA2>:
//start_sectionA2
// スタート区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void start_sectionA2(void){
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0

	control_start();
 8005430:	f7ff fca0 	bl	8004d74 <control_start>
	if(start_flag == 0){
 8005434:	4b1b      	ldr	r3, [pc, #108]	; (80054a4 <start_sectionA2+0x78>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d108      	bne.n	8005450 <start_sectionA2+0x24>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_START);					//aスタート区画分加速しながら走行。走行後は停止しない
 800543e:	237d      	movs	r3, #125	; 0x7d
 8005440:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005444:	2132      	movs	r1, #50	; 0x32
 8005446:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800544a:	f7ff fd4f 	bl	8004eec <driveA>
 800544e:	e01a      	b.n	8005486 <start_sectionA2+0x5a>
	}else if(start_flag == 1){
 8005450:	4b14      	ldr	r3, [pc, #80]	; (80054a4 <start_sectionA2+0x78>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b01      	cmp	r3, #1
 8005458:	d108      	bne.n	800546c <start_sectionA2+0x40>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);					//a半区画分加速しながら走行。走行後は停止しない
 800545a:	235b      	movs	r3, #91	; 0x5b
 800545c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005460:	2132      	movs	r1, #50	; 0x32
 8005462:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005466:	f7ff fd41 	bl	8004eec <driveA>
 800546a:	e00c      	b.n	8005486 <start_sectionA2+0x5a>
	}else if(start_flag == 2){
 800546c:	4b0d      	ldr	r3, [pc, #52]	; (80054a4 <start_sectionA2+0x78>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d107      	bne.n	8005486 <start_sectionA2+0x5a>
		driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_START_HALF);			//aスタート半区画分加速しながら走行。走行後は停止しない
 8005476:	2323      	movs	r3, #35	; 0x23
 8005478:	f44f 7248 	mov.w	r2, #800	; 0x320
 800547c:	2132      	movs	r1, #50	; 0x32
 800547e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005482:	f7ff fd33 	bl	8004eec <driveA>
	}
	start_flag = 1;
 8005486:	4b07      	ldr	r3, [pc, #28]	; (80054a4 <start_sectionA2+0x78>)
 8005488:	2201      	movs	r2, #1
 800548a:	701a      	strb	r2, [r3, #0]
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 800548c:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <start_sectionA2+0x7c>)
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <start_sectionA2+0x72>
 800549a:	f00d fb41 	bl	8012b20 <get_wall_info>
}
 800549e:	bf00      	nop
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	200012ec 	.word	0x200012ec
 80054a8:	20000fac 	.word	0x20000fac

080054ac <half_sectionA>:
//half_sectionA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0

	control_start();
 80054b0:	f7ff fc60 	bl	8004d74 <control_start>
	driveA(4000, SPEED_MIN, SPEED_RUN, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 80054b4:	235b      	movs	r3, #91	; 0x5b
 80054b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80054ba:	2132      	movs	r1, #50	; 0x32
 80054bc:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80054c0:	f7ff fd14 	bl	8004eec <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 80054c4:	4b05      	ldr	r3, [pc, #20]	; (80054dc <half_sectionA+0x30>)
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <half_sectionA+0x2a>
 80054d2:	f00d fb25 	bl	8012b20 <get_wall_info>
}
 80054d6:	bf00      	nop
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000fac 	.word	0x20000fac

080054e0 <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 80054e0:	b580      	push	{r7, lr}
 80054e2:	af00      	add	r7, sp, #0

	control_start();
 80054e4:	f7ff fc46 	bl	8004d74 <control_start>
	driveD(-4000, SPEED_MIN, SPEED_RUN, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 80054e8:	235b      	movs	r3, #91	; 0x5b
 80054ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80054ee:	2132      	movs	r1, #50	; 0x32
 80054f0:	4802      	ldr	r0, [pc, #8]	; (80054fc <half_sectionD+0x1c>)
 80054f2:	f7ff fd71 	bl	8004fd8 <driveD>
}
 80054f6:	bf00      	nop
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	fffff060 	.word	0xfffff060

08005500 <half_sectionA2>:
//half_sectionA2
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA2(void){
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
	control_start();
 8005504:	f7ff fc36 	bl	8004d74 <control_start>
	driveA(8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分加速しながら走行。走行後は停止しない
 8005508:	235b      	movs	r3, #91	; 0x5b
 800550a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800550e:	2132      	movs	r1, #50	; 0x32
 8005510:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005514:	f7ff fcea 	bl	8004eec <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <half_sectionA2+0x30>)
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <half_sectionA2+0x2a>
 8005526:	f00d fafb 	bl	8012b20 <get_wall_info>
}
 800552a:	bf00      	nop
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000fac 	.word	0x20000fac

08005534 <half_sectionD2>:
//half_sectionD2
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD2(void){
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
	control_start();
 8005538:	f7ff fc1c 	bl	8004d74 <control_start>
	driveD(-8000, SPEED_MIN, SPEED_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 800553c:	235b      	movs	r3, #91	; 0x5b
 800553e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005542:	2132      	movs	r1, #50	; 0x32
 8005544:	4802      	ldr	r0, [pc, #8]	; (8005550 <half_sectionD2+0x1c>)
 8005546:	f7ff fd47 	bl	8004fd8 <driveD>
}
 800554a:	bf00      	nop
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	ffffe0c0 	.word	0xffffe0c0

08005554 <half_sectionA3>:
//half_sectionA3
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA3(void){
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
	control_start();
 8005558:	f7ff fc0c 	bl	8004d74 <control_start>
	driveA(10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);				//半区画分加速しながら走行。走行後は停止しない
 800555c:	235b      	movs	r3, #91	; 0x5b
 800555e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005562:	2132      	movs	r1, #50	; 0x32
 8005564:	f242 7010 	movw	r0, #10000	; 0x2710
 8005568:	f7ff fcc0 	bl	8004eec <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 800556c:	4b05      	ldr	r3, [pc, #20]	; (8005584 <half_sectionA3+0x30>)
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <half_sectionA3+0x2a>
 800557a:	f00d fad1 	bl	8012b20 <get_wall_info>
}
 800557e:	bf00      	nop
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20000fac 	.word	0x20000fac

08005588 <half_sectionD3>:
//half_sectionD3
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD3(void){
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
	control_start();
 800558c:	f7ff fbf2 	bl	8004d74 <control_start>
	driveD(-10000, SPEED_MIN, SPEED_HIGH_HIGH, SEC_HALF);						//半区画分指定減速度で減速走行。走行後は停止する
 8005590:	235b      	movs	r3, #91	; 0x5b
 8005592:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005596:	2132      	movs	r1, #50	; 0x32
 8005598:	4802      	ldr	r0, [pc, #8]	; (80055a4 <half_sectionD3+0x1c>)
 800559a:	f7ff fd1d 	bl	8004fd8 <driveD>
}
 800559e:	bf00      	nop
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	ffffd8f0 	.word	0xffffd8f0

080055a8 <half_sectionU>:
//half_sectionU
// 等速で半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionU(void){
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 80055ac:	2007      	movs	r0, #7
 80055ae:	f00d fb2b 	bl	8012c08 <full_led_write>
	control_start();
 80055b2:	f7ff fbdf 	bl	8004d74 <control_start>
	driveU(SEC_HALF);													//半区画分等速走行。走行後は停止しない
 80055b6:	205b      	movs	r0, #91	; 0x5b
 80055b8:	f7ff fde4 	bl	8005184 <driveU>
}
 80055bc:	bf00      	nop
 80055be:	bd80      	pop	{r7, pc}

080055c0 <half_sectionV>:
//half_sectionV
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionV(void){
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 80055c4:	2007      	movs	r0, #7
 80055c6:	f00d fb1f 	bl	8012c08 <full_led_write>
	control_start();
 80055ca:	f7ff fbd3 	bl	8004d74 <control_start>
	driveU(SEC_HALF_V);													//半区画分等速走行。走行後は停止しない
 80055ce:	2082      	movs	r0, #130	; 0x82
 80055d0:	f7ff fdd8 	bl	8005184 <driveU>
}
 80055d4:	bf00      	nop
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <one_section>:
//one_section
// 1区画分進んで停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_section(void){
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0

	half_sectionA();													//半区画分加速走行
 80055dc:	f7ff ff66 	bl	80054ac <half_sectionA>
	half_sectionD();													//半区画分減速走行のち停止
 80055e0:	f7ff ff7e 	bl	80054e0 <half_sectionD>
}
 80055e4:	bf00      	nop
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <one_sectionA>:
//one_sectionA
// 1区画分加速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA(void){
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 80055ec:	2004      	movs	r0, #4
 80055ee:	f00d fb0b 	bl	8012c08 <full_led_write>
	control_start();
 80055f2:	f7ff fbbf 	bl	8004d74 <control_start>
	driveA(accel_hs, SPEED_RUN, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 80055f6:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <one_sectionA+0x40>)
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b21b      	sxth	r3, r3
 80055fc:	b298      	uxth	r0, r3
 80055fe:	4b0b      	ldr	r3, [pc, #44]	; (800562c <one_sectionA+0x44>)
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	b21b      	sxth	r3, r3
 8005604:	b29a      	uxth	r2, r3
 8005606:	23b6      	movs	r3, #182	; 0xb6
 8005608:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800560c:	f7ff fc6e 	bl	8004eec <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005610:	4b07      	ldr	r3, [pc, #28]	; (8005630 <one_sectionA+0x48>)
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <one_sectionA+0x3a>
 800561e:	f00d fa7f 	bl	8012b20 <get_wall_info>
}
 8005622:	bf00      	nop
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	2000048c 	.word	0x2000048c
 800562c:	20000fc0 	.word	0x20000fc0
 8005630:	20000fac 	.word	0x20000fac

08005634 <one_sectionD>:
//one_sectionD
// 1区画分減速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD(void){
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005638:	2003      	movs	r0, #3
 800563a:	f00d fae5 	bl	8012c08 <full_led_write>
	control_start();
 800563e:	f7ff fb99 	bl	8004d74 <control_start>
	driveD(-1*accel_hs, SPEED_RUN, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005642:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <one_sectionD+0x44>)
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b21b      	sxth	r3, r3
 8005648:	b29b      	uxth	r3, r3
 800564a:	425b      	negs	r3, r3
 800564c:	b29b      	uxth	r3, r3
 800564e:	b218      	sxth	r0, r3
 8005650:	4b0a      	ldr	r3, [pc, #40]	; (800567c <one_sectionD+0x48>)
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b21b      	sxth	r3, r3
 8005656:	b29a      	uxth	r2, r3
 8005658:	23b6      	movs	r3, #182	; 0xb6
 800565a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800565e:	f7ff fcbb 	bl	8004fd8 <driveD>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005662:	4b07      	ldr	r3, [pc, #28]	; (8005680 <one_sectionD+0x4c>)
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <one_sectionD+0x40>
 8005670:	f00d fa56 	bl	8012b20 <get_wall_info>
}
 8005674:	bf00      	nop
 8005676:	bd80      	pop	{r7, pc}
 8005678:	2000048c 	.word	0x2000048c
 800567c:	20000fc0 	.word	0x20000fc0
 8005680:	20000fac 	.word	0x20000fac

08005684 <one_sectionVA>:
//one_sectionVA
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVA(void){
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8005688:	2004      	movs	r0, #4
 800568a:	f00d fabd 	bl	8012c08 <full_led_write>
	control_start();
 800568e:	f7ff fb71 	bl	8004d74 <control_start>
	driveA(accel_hs, SPEED_RUN, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 8005692:	4b08      	ldr	r3, [pc, #32]	; (80056b4 <one_sectionVA+0x30>)
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b21b      	sxth	r3, r3
 8005698:	b298      	uxth	r0, r3
 800569a:	4b07      	ldr	r3, [pc, #28]	; (80056b8 <one_sectionVA+0x34>)
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	b21b      	sxth	r3, r3
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80056a6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80056aa:	f7ff fc1f 	bl	8004eec <driveA>
}
 80056ae:	bf00      	nop
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	2000048c 	.word	0x2000048c
 80056b8:	20000fc0 	.word	0x20000fc0

080056bc <one_sectionVD>:
//one_sectionVD
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVD(void){
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 80056c0:	2003      	movs	r0, #3
 80056c2:	f00d faa1 	bl	8012c08 <full_led_write>
	control_start();
 80056c6:	f7ff fb55 	bl	8004d74 <control_start>
	driveD(-1*accel_hs, SPEED_RUN, speed_max_hs, SEC_HALF_V*2);			//1区画分減速走行。走行後は停止しない
 80056ca:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <one_sectionVD+0x34>)
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	b21b      	sxth	r3, r3
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	425b      	negs	r3, r3
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	b218      	sxth	r0, r3
 80056d8:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <one_sectionVD+0x38>)
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	b21b      	sxth	r3, r3
 80056de:	b29a      	uxth	r2, r3
 80056e0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80056e4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80056e8:	f7ff fc76 	bl	8004fd8 <driveD>
}
 80056ec:	bf00      	nop
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	2000048c 	.word	0x2000048c
 80056f4:	20000fc0 	.word	0x20000fc0

080056f8 <one_sectionA2>:
//one_sectionA2
// 1区画分加速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionA2(void){
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 80056fc:	2004      	movs	r0, #4
 80056fe:	f00d fa83 	bl	8012c08 <full_led_write>
	control_start();
 8005702:	f7ff fb37 	bl	8004d74 <control_start>
	driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);				//1区画分加速走行。走行後は停止しない
 8005706:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <one_sectionA2+0x40>)
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b21b      	sxth	r3, r3
 800570c:	b298      	uxth	r0, r3
 800570e:	4b0b      	ldr	r3, [pc, #44]	; (800573c <one_sectionA2+0x44>)
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b21b      	sxth	r3, r3
 8005714:	b29a      	uxth	r2, r3
 8005716:	23b6      	movs	r3, #182	; 0xb6
 8005718:	f44f 7148 	mov.w	r1, #800	; 0x320
 800571c:	f7ff fbe6 	bl	8004eec <driveA>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005720:	4b07      	ldr	r3, [pc, #28]	; (8005740 <one_sectionA2+0x48>)
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <one_sectionA2+0x3a>
 800572e:	f00d f9f7 	bl	8012b20 <get_wall_info>
}
 8005732:	bf00      	nop
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	2000048c 	.word	0x2000048c
 800573c:	20000fc0 	.word	0x20000fc0
 8005740:	20000fac 	.word	0x20000fac

08005744 <one_sectionD2>:
//one_sectionD2
// 1区画分減速する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionD2(void){
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 8005748:	2003      	movs	r0, #3
 800574a:	f00d fa5d 	bl	8012c08 <full_led_write>
	control_start();
 800574e:	f7ff fb11 	bl	8004d74 <control_start>
	driveD(-1*accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF*2);			//1区画分減速走行。走行後は停止しない
 8005752:	4b0d      	ldr	r3, [pc, #52]	; (8005788 <one_sectionD2+0x44>)
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	b21b      	sxth	r3, r3
 8005758:	b29b      	uxth	r3, r3
 800575a:	425b      	negs	r3, r3
 800575c:	b29b      	uxth	r3, r3
 800575e:	b218      	sxth	r0, r3
 8005760:	4b0a      	ldr	r3, [pc, #40]	; (800578c <one_sectionD2+0x48>)
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b21b      	sxth	r3, r3
 8005766:	b29a      	uxth	r2, r3
 8005768:	23b6      	movs	r3, #182	; 0xb6
 800576a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800576e:	f7ff fc33 	bl	8004fd8 <driveD>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得，片壁制御の有効・無効の判断
 8005772:	4b07      	ldr	r3, [pc, #28]	; (8005790 <one_sectionD2+0x4c>)
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <one_sectionD2+0x40>
 8005780:	f00d f9ce 	bl	8012b20 <get_wall_info>
}
 8005784:	bf00      	nop
 8005786:	bd80      	pop	{r7, pc}
 8005788:	2000048c 	.word	0x2000048c
 800578c:	20000fc0 	.word	0x20000fc0
 8005790:	20000fac 	.word	0x20000fac

08005794 <one_sectionVA2>:
//one_sectionVA2
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVA2(void){
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
	full_led_write(BLUEGREEN);
 8005798:	2004      	movs	r0, #4
 800579a:	f00d fa35 	bl	8012c08 <full_led_write>
	control_start();
 800579e:	f7ff fae9 	bl	8004d74 <control_start>
	driveA(accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);				//1区画分加速走行。走行後は停止しない
 80057a2:	4b08      	ldr	r3, [pc, #32]	; (80057c4 <one_sectionVA2+0x30>)
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b21b      	sxth	r3, r3
 80057a8:	b298      	uxth	r0, r3
 80057aa:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <one_sectionVA2+0x34>)
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	b21b      	sxth	r3, r3
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80057b6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80057ba:	f7ff fb97 	bl	8004eec <driveA>
}
 80057be:	bf00      	nop
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	2000048c 	.word	0x2000048c
 80057c8:	20000fc0 	.word	0x20000fc0

080057cc <one_sectionVD2>:
//one_sectionVD2
// 等速で斜め半区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionVD2(void){
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
	full_led_write(BLUE);
 80057d0:	2003      	movs	r0, #3
 80057d2:	f00d fa19 	bl	8012c08 <full_led_write>
	control_start();
 80057d6:	f7ff facd 	bl	8004d74 <control_start>
	driveD(-1*accel_hs, SPEED_HIGH, speed_max_hs, SEC_HALF_V*2);			//1区画分減速走行。走行後は停止しない
 80057da:	4b09      	ldr	r3, [pc, #36]	; (8005800 <one_sectionVD2+0x34>)
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	b21b      	sxth	r3, r3
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	425b      	negs	r3, r3
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	b218      	sxth	r0, r3
 80057e8:	4b06      	ldr	r3, [pc, #24]	; (8005804 <one_sectionVD2+0x38>)
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b21b      	sxth	r3, r3
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80057f4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80057f8:	f7ff fbee 	bl	8004fd8 <driveD>
}
 80057fc:	bf00      	nop
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	2000048c 	.word	0x2000048c
 8005804:	20000fc0 	.word	0x20000fc0

08005808 <one_sectionU>:
//one_sectionU
// 等速で1区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
	full_led_write(WHITE);
 800580c:	2007      	movs	r0, #7
 800580e:	f00d f9fb 	bl	8012c08 <full_led_write>
	control_start();
 8005812:	f7ff faaf 	bl	8004d74 <control_start>
	driveU(SEC_HALF*2);													//1区画分等速走行。走行後は停止しない
 8005816:	20b6      	movs	r0, #182	; 0xb6
 8005818:	f7ff fcb4 	bl	8005184 <driveU>
	if(MF.FLAG.SCND == 0)get_wall_info();								//壁情報を取得
 800581c:	4b05      	ldr	r3, [pc, #20]	; (8005834 <one_sectionU+0x2c>)
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <one_sectionU+0x26>
 800582a:	f00d f979 	bl	8012b20 <get_wall_info>
}
 800582e:	bf00      	nop
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	20000fac 	.word	0x20000fac

08005838 <rotate_R90>:
//rotate_R90
// 右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 8005838:	b598      	push	{r3, r4, r7, lr}
 800583a:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 800583c:	4b56      	ldr	r3, [pc, #344]	; (8005998 <rotate_R90+0x160>)
 800583e:	4a57      	ldr	r2, [pc, #348]	; (800599c <rotate_R90+0x164>)
 8005840:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 8005842:	4b57      	ldr	r3, [pc, #348]	; (80059a0 <rotate_R90+0x168>)
 8005844:	4a57      	ldr	r2, [pc, #348]	; (80059a4 <rotate_R90+0x16c>)
 8005846:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8005848:	4b57      	ldr	r3, [pc, #348]	; (80059a8 <rotate_R90+0x170>)
 800584a:	4a58      	ldr	r2, [pc, #352]	; (80059ac <rotate_R90+0x174>)
 800584c:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 800584e:	4b52      	ldr	r3, [pc, #328]	; (8005998 <rotate_R90+0x160>)
 8005850:	edd3 7a00 	vldr	s15, [r3]
 8005854:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80059b0 <rotate_R90+0x178>
 8005858:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800585c:	ee16 0a90 	vmov	r0, s13
 8005860:	f7fa fe6a 	bl	8000538 <__aeabi_f2d>
 8005864:	a34a      	add	r3, pc, #296	; (adr r3, 8005990 <rotate_R90+0x158>)
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	f7fa febd 	bl	80005e8 <__aeabi_dmul>
 800586e:	4603      	mov	r3, r0
 8005870:	460c      	mov	r4, r1
 8005872:	4618      	mov	r0, r3
 8005874:	4621      	mov	r1, r4
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	4b4e      	ldr	r3, [pc, #312]	; (80059b4 <rotate_R90+0x17c>)
 800587c:	f7fa feb4 	bl	80005e8 <__aeabi_dmul>
 8005880:	4603      	mov	r3, r0
 8005882:	460c      	mov	r4, r1
 8005884:	4618      	mov	r0, r3
 8005886:	4621      	mov	r1, r4
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005890:	f7fa ffd4 	bl	800083c <__aeabi_ddiv>
 8005894:	4603      	mov	r3, r0
 8005896:	460c      	mov	r4, r1
 8005898:	4618      	mov	r0, r3
 800589a:	4621      	mov	r1, r4
 800589c:	f7fb f97c 	bl	8000b98 <__aeabi_d2f>
 80058a0:	4602      	mov	r2, r0
 80058a2:	4b45      	ldr	r3, [pc, #276]	; (80059b8 <rotate_R90+0x180>)
 80058a4:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 80058a6:	4b3c      	ldr	r3, [pc, #240]	; (8005998 <rotate_R90+0x160>)
 80058a8:	edd3 7a00 	vldr	s15, [r3]
 80058ac:	eef1 7a67 	vneg.f32	s15, s15
 80058b0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80059b0 <rotate_R90+0x178>
 80058b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80058b8:	ee16 0a90 	vmov	r0, s13
 80058bc:	f7fa fe3c 	bl	8000538 <__aeabi_f2d>
 80058c0:	a333      	add	r3, pc, #204	; (adr r3, 8005990 <rotate_R90+0x158>)
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	f7fa fe8f 	bl	80005e8 <__aeabi_dmul>
 80058ca:	4603      	mov	r3, r0
 80058cc:	460c      	mov	r4, r1
 80058ce:	4618      	mov	r0, r3
 80058d0:	4621      	mov	r1, r4
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	4b37      	ldr	r3, [pc, #220]	; (80059b4 <rotate_R90+0x17c>)
 80058d8:	f7fa fe86 	bl	80005e8 <__aeabi_dmul>
 80058dc:	4603      	mov	r3, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	4618      	mov	r0, r3
 80058e2:	4621      	mov	r1, r4
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058ec:	f7fa ffa6 	bl	800083c <__aeabi_ddiv>
 80058f0:	4603      	mov	r3, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	4618      	mov	r0, r3
 80058f6:	4621      	mov	r1, r4
 80058f8:	f7fb f94e 	bl	8000b98 <__aeabi_d2f>
 80058fc:	4602      	mov	r2, r0
 80058fe:	4b2f      	ldr	r3, [pc, #188]	; (80059bc <rotate_R90+0x184>)
 8005900:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005902:	f7ff f9e1 	bl	8004cc8 <drive_start>
	control_stop();
 8005906:	f7ff fa49 	bl	8004d9c <control_stop>
	while(degree_z > target_degree_z-80);
 800590a:	bf00      	nop
 800590c:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <rotate_R90+0x188>)
 800590e:	edd3 7a00 	vldr	s15, [r3]
 8005912:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80059c4 <rotate_R90+0x18c>
 8005916:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800591a:	4b2b      	ldr	r3, [pc, #172]	; (80059c8 <rotate_R90+0x190>)
 800591c:	edd3 7a00 	vldr	s15, [r3]
 8005920:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005928:	d4f0      	bmi.n	800590c <rotate_R90+0xd4>

	accel_l = -30000;
 800592a:	4b1d      	ldr	r3, [pc, #116]	; (80059a0 <rotate_R90+0x168>)
 800592c:	4a27      	ldr	r2, [pc, #156]	; (80059cc <rotate_R90+0x194>)
 800592e:	601a      	str	r2, [r3, #0]
	accel_r = 30000;
 8005930:	4b1d      	ldr	r3, [pc, #116]	; (80059a8 <rotate_R90+0x170>)
 8005932:	4a27      	ldr	r2, [pc, #156]	; (80059d0 <rotate_R90+0x198>)
 8005934:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 8005936:	4b27      	ldr	r3, [pc, #156]	; (80059d4 <rotate_R90+0x19c>)
 8005938:	4a27      	ldr	r2, [pc, #156]	; (80059d8 <rotate_R90+0x1a0>)
 800593a:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 800593c:	4b27      	ldr	r3, [pc, #156]	; (80059dc <rotate_R90+0x1a4>)
 800593e:	4a28      	ldr	r2, [pc, #160]	; (80059e0 <rotate_R90+0x1a8>)
 8005940:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 8005942:	bf00      	nop
 8005944:	4b1e      	ldr	r3, [pc, #120]	; (80059c0 <rotate_R90+0x188>)
 8005946:	edd3 7a00 	vldr	s15, [r3]
 800594a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80059e4 <rotate_R90+0x1ac>
 800594e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005952:	4b1d      	ldr	r3, [pc, #116]	; (80059c8 <rotate_R90+0x190>)
 8005954:	edd3 7a00 	vldr	s15, [r3]
 8005958:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800595c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005960:	d4f0      	bmi.n	8005944 <rotate_R90+0x10c>

	if(!MF.FLAG.XDIR){
 8005962:	4b21      	ldr	r3, [pc, #132]	; (80059e8 <rotate_R90+0x1b0>)
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <rotate_R90+0x142>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8005970:	2101      	movs	r1, #1
 8005972:	2001      	movs	r0, #1
 8005974:	f00b fb78 	bl	8011068 <turn_dir>
 8005978:	e003      	b.n	8005982 <rotate_R90+0x14a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 800597a:	2103      	movs	r1, #3
 800597c:	2002      	movs	r0, #2
 800597e:	f00b fb73 	bl	8011068 <turn_dir>
	}
	drive_stop();
 8005982:	f7ff f9cf 	bl	8004d24 <drive_stop>
}
 8005986:	bf00      	nop
 8005988:	bd98      	pop	{r3, r4, r7, pc}
 800598a:	bf00      	nop
 800598c:	f3af 8000 	nop.w
 8005990:	54442d18 	.word	0x54442d18
 8005994:	400921fb 	.word	0x400921fb
 8005998:	200001e0 	.word	0x200001e0
 800599c:	44480000 	.word	0x44480000
 80059a0:	20000da0 	.word	0x20000da0
 80059a4:	453b8000 	.word	0x453b8000
 80059a8:	20000b20 	.word	0x20000b20
 80059ac:	c53b8000 	.word	0xc53b8000
 80059b0:	43340000 	.word	0x43340000
 80059b4:	40508000 	.word	0x40508000
 80059b8:	200007b4 	.word	0x200007b4
 80059bc:	20000fb0 	.word	0x20000fb0
 80059c0:	20000c40 	.word	0x20000c40
 80059c4:	42a00000 	.word	0x42a00000
 80059c8:	20000b9c 	.word	0x20000b9c
 80059cc:	c6ea6000 	.word	0xc6ea6000
 80059d0:	46ea6000 	.word	0x46ea6000
 80059d4:	20000b94 	.word	0x20000b94
 80059d8:	42c80000 	.word	0x42c80000
 80059dc:	200001dc 	.word	0x200001dc
 80059e0:	c2c80000 	.word	0xc2c80000
 80059e4:	42b40000 	.word	0x42b40000
 80059e8:	20000fac 	.word	0x20000fac
 80059ec:	00000000 	.word	0x00000000

080059f0 <rotate_L90>:
//rotate_L90
// 左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 80059f0:	b598      	push	{r3, r4, r7, lr}
 80059f2:	af00      	add	r7, sp, #0
	target_omega_z = 800;
 80059f4:	4b56      	ldr	r3, [pc, #344]	; (8005b50 <rotate_L90+0x160>)
 80059f6:	4a57      	ldr	r2, [pc, #348]	; (8005b54 <rotate_L90+0x164>)
 80059f8:	601a      	str	r2, [r3, #0]
	accel_l = -3000;
 80059fa:	4b57      	ldr	r3, [pc, #348]	; (8005b58 <rotate_L90+0x168>)
 80059fc:	4a57      	ldr	r2, [pc, #348]	; (8005b5c <rotate_L90+0x16c>)
 80059fe:	601a      	str	r2, [r3, #0]
	accel_r = 3000;
 8005a00:	4b57      	ldr	r3, [pc, #348]	; (8005b60 <rotate_L90+0x170>)
 8005a02:	4a58      	ldr	r2, [pc, #352]	; (8005b64 <rotate_L90+0x174>)
 8005a04:	601a      	str	r2, [r3, #0]
	speed_min_l = -1*target_omega_z/180*M_PI * TREAD/2;
 8005a06:	4b52      	ldr	r3, [pc, #328]	; (8005b50 <rotate_L90+0x160>)
 8005a08:	edd3 7a00 	vldr	s15, [r3]
 8005a0c:	eef1 7a67 	vneg.f32	s15, s15
 8005a10:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005b68 <rotate_L90+0x178>
 8005a14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005a18:	ee16 0a90 	vmov	r0, s13
 8005a1c:	f7fa fd8c 	bl	8000538 <__aeabi_f2d>
 8005a20:	a349      	add	r3, pc, #292	; (adr r3, 8005b48 <rotate_L90+0x158>)
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	f7fa fddf 	bl	80005e8 <__aeabi_dmul>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	4618      	mov	r0, r3
 8005a30:	4621      	mov	r1, r4
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	4b4d      	ldr	r3, [pc, #308]	; (8005b6c <rotate_L90+0x17c>)
 8005a38:	f7fa fdd6 	bl	80005e8 <__aeabi_dmul>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	460c      	mov	r4, r1
 8005a40:	4618      	mov	r0, r3
 8005a42:	4621      	mov	r1, r4
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a4c:	f7fa fef6 	bl	800083c <__aeabi_ddiv>
 8005a50:	4603      	mov	r3, r0
 8005a52:	460c      	mov	r4, r1
 8005a54:	4618      	mov	r0, r3
 8005a56:	4621      	mov	r1, r4
 8005a58:	f7fb f89e 	bl	8000b98 <__aeabi_d2f>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	4b44      	ldr	r3, [pc, #272]	; (8005b70 <rotate_L90+0x180>)
 8005a60:	601a      	str	r2, [r3, #0]
	speed_max_r = target_omega_z/180*M_PI * TREAD/2;
 8005a62:	4b3b      	ldr	r3, [pc, #236]	; (8005b50 <rotate_L90+0x160>)
 8005a64:	edd3 7a00 	vldr	s15, [r3]
 8005a68:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005b68 <rotate_L90+0x178>
 8005a6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005a70:	ee16 0a90 	vmov	r0, s13
 8005a74:	f7fa fd60 	bl	8000538 <__aeabi_f2d>
 8005a78:	a333      	add	r3, pc, #204	; (adr r3, 8005b48 <rotate_L90+0x158>)
 8005a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7e:	f7fa fdb3 	bl	80005e8 <__aeabi_dmul>
 8005a82:	4603      	mov	r3, r0
 8005a84:	460c      	mov	r4, r1
 8005a86:	4618      	mov	r0, r3
 8005a88:	4621      	mov	r1, r4
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	4b37      	ldr	r3, [pc, #220]	; (8005b6c <rotate_L90+0x17c>)
 8005a90:	f7fa fdaa 	bl	80005e8 <__aeabi_dmul>
 8005a94:	4603      	mov	r3, r0
 8005a96:	460c      	mov	r4, r1
 8005a98:	4618      	mov	r0, r3
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005aa4:	f7fa feca 	bl	800083c <__aeabi_ddiv>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	460c      	mov	r4, r1
 8005aac:	4618      	mov	r0, r3
 8005aae:	4621      	mov	r1, r4
 8005ab0:	f7fb f872 	bl	8000b98 <__aeabi_d2f>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	4b2f      	ldr	r3, [pc, #188]	; (8005b74 <rotate_L90+0x184>)
 8005ab8:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005aba:	f7ff f905 	bl	8004cc8 <drive_start>
	control_stop();
 8005abe:	f7ff f96d 	bl	8004d9c <control_stop>
	while(degree_z < target_degree_z+80);
 8005ac2:	bf00      	nop
 8005ac4:	4b2c      	ldr	r3, [pc, #176]	; (8005b78 <rotate_L90+0x188>)
 8005ac6:	edd3 7a00 	vldr	s15, [r3]
 8005aca:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005b7c <rotate_L90+0x18c>
 8005ace:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ad2:	4b2b      	ldr	r3, [pc, #172]	; (8005b80 <rotate_L90+0x190>)
 8005ad4:	edd3 7a00 	vldr	s15, [r3]
 8005ad8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae0:	dcf0      	bgt.n	8005ac4 <rotate_L90+0xd4>

	accel_l = 30000;
 8005ae2:	4b1d      	ldr	r3, [pc, #116]	; (8005b58 <rotate_L90+0x168>)
 8005ae4:	4a27      	ldr	r2, [pc, #156]	; (8005b84 <rotate_L90+0x194>)
 8005ae6:	601a      	str	r2, [r3, #0]
	accel_r = -30000;
 8005ae8:	4b1d      	ldr	r3, [pc, #116]	; (8005b60 <rotate_L90+0x170>)
 8005aea:	4a27      	ldr	r2, [pc, #156]	; (8005b88 <rotate_L90+0x198>)
 8005aec:	601a      	str	r2, [r3, #0]
	speed_max_l = -100;
 8005aee:	4b27      	ldr	r3, [pc, #156]	; (8005b8c <rotate_L90+0x19c>)
 8005af0:	4a27      	ldr	r2, [pc, #156]	; (8005b90 <rotate_L90+0x1a0>)
 8005af2:	601a      	str	r2, [r3, #0]
	speed_min_r = 100;
 8005af4:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <rotate_L90+0x1a4>)
 8005af6:	4a28      	ldr	r2, [pc, #160]	; (8005b98 <rotate_L90+0x1a8>)
 8005af8:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 8005afa:	bf00      	nop
 8005afc:	4b1e      	ldr	r3, [pc, #120]	; (8005b78 <rotate_L90+0x188>)
 8005afe:	edd3 7a00 	vldr	s15, [r3]
 8005b02:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005b9c <rotate_L90+0x1ac>
 8005b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b0a:	4b1d      	ldr	r3, [pc, #116]	; (8005b80 <rotate_L90+0x190>)
 8005b0c:	edd3 7a00 	vldr	s15, [r3]
 8005b10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b18:	dcf0      	bgt.n	8005afc <rotate_L90+0x10c>

	if(!MF.FLAG.XDIR){
 8005b1a:	4b21      	ldr	r3, [pc, #132]	; (8005ba0 <rotate_L90+0x1b0>)
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d104      	bne.n	8005b32 <rotate_L90+0x142>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 8005b28:	2101      	movs	r1, #1
 8005b2a:	20ff      	movs	r0, #255	; 0xff
 8005b2c:	f00b fa9c 	bl	8011068 <turn_dir>
 8005b30:	e003      	b.n	8005b3a <rotate_L90+0x14a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも右回転処理&目標角度右90度
 8005b32:	2103      	movs	r1, #3
 8005b34:	20fe      	movs	r0, #254	; 0xfe
 8005b36:	f00b fa97 	bl	8011068 <turn_dir>
	}
	drive_stop();
 8005b3a:	f7ff f8f3 	bl	8004d24 <drive_stop>
}
 8005b3e:	bf00      	nop
 8005b40:	bd98      	pop	{r3, r4, r7, pc}
 8005b42:	bf00      	nop
 8005b44:	f3af 8000 	nop.w
 8005b48:	54442d18 	.word	0x54442d18
 8005b4c:	400921fb 	.word	0x400921fb
 8005b50:	200001e0 	.word	0x200001e0
 8005b54:	44480000 	.word	0x44480000
 8005b58:	20000da0 	.word	0x20000da0
 8005b5c:	c53b8000 	.word	0xc53b8000
 8005b60:	20000b20 	.word	0x20000b20
 8005b64:	453b8000 	.word	0x453b8000
 8005b68:	43340000 	.word	0x43340000
 8005b6c:	40508000 	.word	0x40508000
 8005b70:	20000b94 	.word	0x20000b94
 8005b74:	200001dc 	.word	0x200001dc
 8005b78:	20000c40 	.word	0x20000c40
 8005b7c:	42a00000 	.word	0x42a00000
 8005b80:	20000b9c 	.word	0x20000b9c
 8005b84:	46ea6000 	.word	0x46ea6000
 8005b88:	c6ea6000 	.word	0xc6ea6000
 8005b8c:	200007b4 	.word	0x200007b4
 8005b90:	c2c80000 	.word	0xc2c80000
 8005b94:	20000fb0 	.word	0x20000fb0
 8005b98:	42c80000 	.word	0x42c80000
 8005b9c:	42b40000 	.word	0x42b40000
 8005ba0:	20000fac 	.word	0x20000fac
 8005ba4:	00000000 	.word	0x00000000

08005ba8 <rotate_180>:
//rotate_180
// 180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 8005ba8:	b598      	push	{r3, r4, r7, lr}
 8005baa:	af00      	add	r7, sp, #0

	full_led_write(GREEN);
 8005bac:	2002      	movs	r0, #2
 8005bae:	f00d f82b 	bl	8012c08 <full_led_write>
	target_omega_z = 800;
 8005bb2:	4b55      	ldr	r3, [pc, #340]	; (8005d08 <rotate_180+0x160>)
 8005bb4:	4a55      	ldr	r2, [pc, #340]	; (8005d0c <rotate_180+0x164>)
 8005bb6:	601a      	str	r2, [r3, #0]
	accel_l = 3000;
 8005bb8:	4b55      	ldr	r3, [pc, #340]	; (8005d10 <rotate_180+0x168>)
 8005bba:	4a56      	ldr	r2, [pc, #344]	; (8005d14 <rotate_180+0x16c>)
 8005bbc:	601a      	str	r2, [r3, #0]
	accel_r = -3000;
 8005bbe:	4b56      	ldr	r3, [pc, #344]	; (8005d18 <rotate_180+0x170>)
 8005bc0:	4a56      	ldr	r2, [pc, #344]	; (8005d1c <rotate_180+0x174>)
 8005bc2:	601a      	str	r2, [r3, #0]
	speed_max_l = target_omega_z/180*M_PI * TREAD/2;
 8005bc4:	4b50      	ldr	r3, [pc, #320]	; (8005d08 <rotate_180+0x160>)
 8005bc6:	edd3 7a00 	vldr	s15, [r3]
 8005bca:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005d20 <rotate_180+0x178>
 8005bce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005bd2:	ee16 0a90 	vmov	r0, s13
 8005bd6:	f7fa fcaf 	bl	8000538 <__aeabi_f2d>
 8005bda:	a349      	add	r3, pc, #292	; (adr r3, 8005d00 <rotate_180+0x158>)
 8005bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be0:	f7fa fd02 	bl	80005e8 <__aeabi_dmul>
 8005be4:	4603      	mov	r3, r0
 8005be6:	460c      	mov	r4, r1
 8005be8:	4618      	mov	r0, r3
 8005bea:	4621      	mov	r1, r4
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	4b4c      	ldr	r3, [pc, #304]	; (8005d24 <rotate_180+0x17c>)
 8005bf2:	f7fa fcf9 	bl	80005e8 <__aeabi_dmul>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	460c      	mov	r4, r1
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c06:	f7fa fe19 	bl	800083c <__aeabi_ddiv>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	4618      	mov	r0, r3
 8005c10:	4621      	mov	r1, r4
 8005c12:	f7fa ffc1 	bl	8000b98 <__aeabi_d2f>
 8005c16:	4602      	mov	r2, r0
 8005c18:	4b43      	ldr	r3, [pc, #268]	; (8005d28 <rotate_180+0x180>)
 8005c1a:	601a      	str	r2, [r3, #0]
	speed_min_r = -1*target_omega_z/180*M_PI * TREAD/2;
 8005c1c:	4b3a      	ldr	r3, [pc, #232]	; (8005d08 <rotate_180+0x160>)
 8005c1e:	edd3 7a00 	vldr	s15, [r3]
 8005c22:	eef1 7a67 	vneg.f32	s15, s15
 8005c26:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005d20 <rotate_180+0x178>
 8005c2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c2e:	ee16 0a90 	vmov	r0, s13
 8005c32:	f7fa fc81 	bl	8000538 <__aeabi_f2d>
 8005c36:	a332      	add	r3, pc, #200	; (adr r3, 8005d00 <rotate_180+0x158>)
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f7fa fcd4 	bl	80005e8 <__aeabi_dmul>
 8005c40:	4603      	mov	r3, r0
 8005c42:	460c      	mov	r4, r1
 8005c44:	4618      	mov	r0, r3
 8005c46:	4621      	mov	r1, r4
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	4b35      	ldr	r3, [pc, #212]	; (8005d24 <rotate_180+0x17c>)
 8005c4e:	f7fa fccb 	bl	80005e8 <__aeabi_dmul>
 8005c52:	4603      	mov	r3, r0
 8005c54:	460c      	mov	r4, r1
 8005c56:	4618      	mov	r0, r3
 8005c58:	4621      	mov	r1, r4
 8005c5a:	f04f 0200 	mov.w	r2, #0
 8005c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c62:	f7fa fdeb 	bl	800083c <__aeabi_ddiv>
 8005c66:	4603      	mov	r3, r0
 8005c68:	460c      	mov	r4, r1
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	f7fa ff93 	bl	8000b98 <__aeabi_d2f>
 8005c72:	4602      	mov	r2, r0
 8005c74:	4b2d      	ldr	r3, [pc, #180]	; (8005d2c <rotate_180+0x184>)
 8005c76:	601a      	str	r2, [r3, #0]

	drive_start();											//走行開始
 8005c78:	f7ff f826 	bl	8004cc8 <drive_start>
	control_stop();
 8005c7c:	f7ff f88e 	bl	8004d9c <control_stop>
	while(degree_z > target_degree_z-170);
 8005c80:	bf00      	nop
 8005c82:	4b2b      	ldr	r3, [pc, #172]	; (8005d30 <rotate_180+0x188>)
 8005c84:	edd3 7a00 	vldr	s15, [r3]
 8005c88:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005d34 <rotate_180+0x18c>
 8005c8c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005c90:	4b29      	ldr	r3, [pc, #164]	; (8005d38 <rotate_180+0x190>)
 8005c92:	edd3 7a00 	vldr	s15, [r3]
 8005c96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c9e:	d4f0      	bmi.n	8005c82 <rotate_180+0xda>

	accel_l = -30000;
 8005ca0:	4b1b      	ldr	r3, [pc, #108]	; (8005d10 <rotate_180+0x168>)
 8005ca2:	4a26      	ldr	r2, [pc, #152]	; (8005d3c <rotate_180+0x194>)
 8005ca4:	601a      	str	r2, [r3, #0]
	accel_r = 30000;
 8005ca6:	4b1c      	ldr	r3, [pc, #112]	; (8005d18 <rotate_180+0x170>)
 8005ca8:	4a25      	ldr	r2, [pc, #148]	; (8005d40 <rotate_180+0x198>)
 8005caa:	601a      	str	r2, [r3, #0]
	speed_min_l = 100;
 8005cac:	4b25      	ldr	r3, [pc, #148]	; (8005d44 <rotate_180+0x19c>)
 8005cae:	4a26      	ldr	r2, [pc, #152]	; (8005d48 <rotate_180+0x1a0>)
 8005cb0:	601a      	str	r2, [r3, #0]
	speed_max_r = -100;
 8005cb2:	4b26      	ldr	r3, [pc, #152]	; (8005d4c <rotate_180+0x1a4>)
 8005cb4:	4a26      	ldr	r2, [pc, #152]	; (8005d50 <rotate_180+0x1a8>)
 8005cb6:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 8005cb8:	bf00      	nop
 8005cba:	4b1d      	ldr	r3, [pc, #116]	; (8005d30 <rotate_180+0x188>)
 8005cbc:	edd3 7a00 	vldr	s15, [r3]
 8005cc0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005d20 <rotate_180+0x178>
 8005cc4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005cc8:	4b1b      	ldr	r3, [pc, #108]	; (8005d38 <rotate_180+0x190>)
 8005cca:	edd3 7a00 	vldr	s15, [r3]
 8005cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd6:	d4f0      	bmi.n	8005cba <rotate_180+0x112>

	if(!MF.FLAG.XDIR){
 8005cd8:	4b1e      	ldr	r3, [pc, #120]	; (8005d54 <rotate_180+0x1ac>)
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d104      	bne.n	8005cf0 <rotate_180+0x148>
		turn_dir(DIR_TURN_180, 1);									//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	2002      	movs	r0, #2
 8005cea:	f00b f9bd 	bl	8011068 <turn_dir>
 8005cee:	e003      	b.n	8005cf8 <rotate_180+0x150>
	}else{
		turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも180度回転処理&目標角度左180度
 8005cf0:	2103      	movs	r1, #3
 8005cf2:	2004      	movs	r0, #4
 8005cf4:	f00b f9b8 	bl	8011068 <turn_dir>
	}
	drive_stop();
 8005cf8:	f7ff f814 	bl	8004d24 <drive_stop>

}
 8005cfc:	bf00      	nop
 8005cfe:	bd98      	pop	{r3, r4, r7, pc}
 8005d00:	54442d18 	.word	0x54442d18
 8005d04:	400921fb 	.word	0x400921fb
 8005d08:	200001e0 	.word	0x200001e0
 8005d0c:	44480000 	.word	0x44480000
 8005d10:	20000da0 	.word	0x20000da0
 8005d14:	453b8000 	.word	0x453b8000
 8005d18:	20000b20 	.word	0x20000b20
 8005d1c:	c53b8000 	.word	0xc53b8000
 8005d20:	43340000 	.word	0x43340000
 8005d24:	40508000 	.word	0x40508000
 8005d28:	200007b4 	.word	0x200007b4
 8005d2c:	20000fb0 	.word	0x20000fb0
 8005d30:	20000c40 	.word	0x20000c40
 8005d34:	432a0000 	.word	0x432a0000
 8005d38:	20000b9c 	.word	0x20000b9c
 8005d3c:	c6ea6000 	.word	0xc6ea6000
 8005d40:	46ea6000 	.word	0x46ea6000
 8005d44:	20000b94 	.word	0x20000b94
 8005d48:	42c80000 	.word	0x42c80000
 8005d4c:	200001dc 	.word	0x200001dc
 8005d50:	c2c80000 	.word	0xc2c80000
 8005d54:	20000fac 	.word	0x20000fac

08005d58 <slalom_R90>:
//slalom_R90
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R90(void){
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
	full_led_write(PURPLE);
 8005d5c:	2005      	movs	r0, #5
 8005d5e:	f00c ff53 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 8005d62:	4a6d      	ldr	r2, [pc, #436]	; (8005f18 <slalom_R90+0x1c0>)
 8005d64:	8813      	ldrh	r3, [r2, #0]
 8005d66:	f36f 2308 	bfc	r3, #8, #1
 8005d6a:	8013      	strh	r3, [r2, #0]

	accel_l = -10000;
 8005d6c:	4b6b      	ldr	r3, [pc, #428]	; (8005f1c <slalom_R90+0x1c4>)
 8005d6e:	4a6c      	ldr	r2, [pc, #432]	; (8005f20 <slalom_R90+0x1c8>)
 8005d70:	601a      	str	r2, [r3, #0]
	accel_r = -10000;
 8005d72:	4b6c      	ldr	r3, [pc, #432]	; (8005f24 <slalom_R90+0x1cc>)
 8005d74:	4a6a      	ldr	r2, [pc, #424]	; (8005f20 <slalom_R90+0x1c8>)
 8005d76:	601a      	str	r2, [r3, #0]
	speed_min_l = SPEED_RUN;
 8005d78:	4b6b      	ldr	r3, [pc, #428]	; (8005f28 <slalom_R90+0x1d0>)
 8005d7a:	4a6c      	ldr	r2, [pc, #432]	; (8005f2c <slalom_R90+0x1d4>)
 8005d7c:	601a      	str	r2, [r3, #0]
	speed_min_r = SPEED_RUN;
 8005d7e:	4b6c      	ldr	r3, [pc, #432]	; (8005f30 <slalom_R90+0x1d8>)
 8005d80:	4a6a      	ldr	r2, [pc, #424]	; (8005f2c <slalom_R90+0x1d4>)
 8005d82:	601a      	str	r2, [r3, #0]

	control_start();
 8005d84:	f7fe fff6 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8005d88:	f04f 0300 	mov.w	r3, #0
 8005d8c:	4a69      	ldr	r2, [pc, #420]	; (8005f34 <slalom_R90+0x1dc>)
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	4a69      	ldr	r2, [pc, #420]	; (8005f38 <slalom_R90+0x1e0>)
 8005d92:	6013      	str	r3, [r2, #0]
//	while(dist_l < SLALOM_OFFSET_F && dist_r < SLALOM_OFFSET_F);
	while(dist_l < SLALOM_OFFSET_F && dist_r < SLALOM_OFFSET_F){
 8005d94:	e00c      	b.n	8005db0 <slalom_R90+0x58>
		if(ad_fl > SLALOM_WALL_FL && ad_fr > SLALOM_WALL_FR){
 8005d96:	4b69      	ldr	r3, [pc, #420]	; (8005f3c <slalom_R90+0x1e4>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005d9e:	d907      	bls.n	8005db0 <slalom_R90+0x58>
 8005da0:	4b67      	ldr	r3, [pc, #412]	; (8005f40 <slalom_R90+0x1e8>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2bfa      	cmp	r3, #250	; 0xfa
 8005da6:	d903      	bls.n	8005db0 <slalom_R90+0x58>
			full_led_write(RED);
 8005da8:	2001      	movs	r0, #1
 8005daa:	f00c ff2d 	bl	8012c08 <full_led_write>
			break;
 8005dae:	e013      	b.n	8005dd8 <slalom_R90+0x80>
	while(dist_l < SLALOM_OFFSET_F && dist_r < SLALOM_OFFSET_F){
 8005db0:	4b61      	ldr	r3, [pc, #388]	; (8005f38 <slalom_R90+0x1e0>)
 8005db2:	edd3 7a00 	vldr	s15, [r3]
 8005db6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc2:	d509      	bpl.n	8005dd8 <slalom_R90+0x80>
 8005dc4:	4b5b      	ldr	r3, [pc, #364]	; (8005f34 <slalom_R90+0x1dc>)
 8005dc6:	edd3 7a00 	vldr	s15, [r3]
 8005dca:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd6:	d4de      	bmi.n	8005d96 <slalom_R90+0x3e>
		}
	}
	drive_stop();
 8005dd8:	f7fe ffa4 	bl	8004d24 <drive_stop>
	control_stop();
 8005ddc:	f7fe ffde 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8005de0:	4a4d      	ldr	r2, [pc, #308]	; (8005f18 <slalom_R90+0x1c0>)
 8005de2:	8813      	ldrh	r3, [r2, #0]
 8005de4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005de8:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -SLALOM_DEGACCEL;
 8005dea:	4b56      	ldr	r3, [pc, #344]	; (8005f44 <slalom_R90+0x1ec>)
 8005dec:	4a56      	ldr	r2, [pc, #344]	; (8005f48 <slalom_R90+0x1f0>)
 8005dee:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8005df0:	4b56      	ldr	r3, [pc, #344]	; (8005f4c <slalom_R90+0x1f4>)
 8005df2:	f04f 0200 	mov.w	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
	omega_min = -SLALOM_OMEGA;
 8005df8:	4b55      	ldr	r3, [pc, #340]	; (8005f50 <slalom_R90+0x1f8>)
 8005dfa:	4a56      	ldr	r2, [pc, #344]	; (8005f54 <slalom_R90+0x1fc>)
 8005dfc:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8005dfe:	4b56      	ldr	r3, [pc, #344]	; (8005f58 <slalom_R90+0x200>)
 8005e00:	4a4a      	ldr	r2, [pc, #296]	; (8005f2c <slalom_R90+0x1d4>)
 8005e02:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8005e04:	4a44      	ldr	r2, [pc, #272]	; (8005f18 <slalom_R90+0x1c0>)
 8005e06:	8813      	ldrh	r3, [r2, #0]
 8005e08:	f043 0302 	orr.w	r3, r3, #2
 8005e0c:	8013      	strh	r3, [r2, #0]
//	while(degree_z > target_degree_z-38);
	while(degree_z > target_degree_z-SLALOM_DEG);
 8005e0e:	bf00      	nop
 8005e10:	4b52      	ldr	r3, [pc, #328]	; (8005f5c <slalom_R90+0x204>)
 8005e12:	edd3 7a00 	vldr	s15, [r3]
 8005e16:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8005f60 <slalom_R90+0x208>
 8005e1a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005e1e:	4b51      	ldr	r3, [pc, #324]	; (8005f64 <slalom_R90+0x20c>)
 8005e20:	edd3 7a00 	vldr	s15, [r3]
 8005e24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e2c:	d4f0      	bmi.n	8005e10 <slalom_R90+0xb8>

	target_degaccel_z = 0;
 8005e2e:	4b45      	ldr	r3, [pc, #276]	; (8005f44 <slalom_R90+0x1ec>)
 8005e30:	f04f 0200 	mov.w	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-65);
	while(degree_z > target_degree_z-(90-SLALOM_DEG+2));
 8005e36:	bf00      	nop
 8005e38:	4b48      	ldr	r3, [pc, #288]	; (8005f5c <slalom_R90+0x204>)
 8005e3a:	edd3 7a00 	vldr	s15, [r3]
 8005e3e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8005f68 <slalom_R90+0x210>
 8005e42:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005e46:	4b47      	ldr	r3, [pc, #284]	; (8005f64 <slalom_R90+0x20c>)
 8005e48:	edd3 7a00 	vldr	s15, [r3]
 8005e4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e54:	d4f0      	bmi.n	8005e38 <slalom_R90+0xe0>

	target_degaccel_z = SLALOM_DEGACCEL;
 8005e56:	4b3b      	ldr	r3, [pc, #236]	; (8005f44 <slalom_R90+0x1ec>)
 8005e58:	4a44      	ldr	r2, [pc, #272]	; (8005f6c <slalom_R90+0x214>)
 8005e5a:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 8005e5c:	bf00      	nop
 8005e5e:	4b3f      	ldr	r3, [pc, #252]	; (8005f5c <slalom_R90+0x204>)
 8005e60:	edd3 7a00 	vldr	s15, [r3]
 8005e64:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8005f70 <slalom_R90+0x218>
 8005e68:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005e6c:	4b3d      	ldr	r3, [pc, #244]	; (8005f64 <slalom_R90+0x20c>)
 8005e6e:	edd3 7a00 	vldr	s15, [r3]
 8005e72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e7a:	d4f0      	bmi.n	8005e5e <slalom_R90+0x106>
	if(!MF.FLAG.XDIR){
 8005e7c:	4b26      	ldr	r3, [pc, #152]	; (8005f18 <slalom_R90+0x1c0>)
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d104      	bne.n	8005e94 <slalom_R90+0x13c>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	2001      	movs	r0, #1
 8005e8e:	f00b f8eb 	bl	8011068 <turn_dir>
 8005e92:	e003      	b.n	8005e9c <slalom_R90+0x144>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 8005e94:	2103      	movs	r1, #3
 8005e96:	2002      	movs	r0, #2
 8005e98:	f00b f8e6 	bl	8011068 <turn_dir>
	}

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8005e9c:	4a1e      	ldr	r2, [pc, #120]	; (8005f18 <slalom_R90+0x1c0>)
 8005e9e:	8813      	ldrh	r3, [r2, #0]
 8005ea0:	f36f 334d 	bfc	r3, #13, #1
 8005ea4:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8005ea6:	4b1d      	ldr	r3, [pc, #116]	; (8005f1c <slalom_R90+0x1c4>)
 8005ea8:	4a32      	ldr	r2, [pc, #200]	; (8005f74 <slalom_R90+0x21c>)
 8005eaa:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8005eac:	4b1d      	ldr	r3, [pc, #116]	; (8005f24 <slalom_R90+0x1cc>)
 8005eae:	4a31      	ldr	r2, [pc, #196]	; (8005f74 <slalom_R90+0x21c>)
 8005eb0:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8005eb2:	4b31      	ldr	r3, [pc, #196]	; (8005f78 <slalom_R90+0x220>)
 8005eb4:	4a1d      	ldr	r2, [pc, #116]	; (8005f2c <slalom_R90+0x1d4>)
 8005eb6:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8005eb8:	4b30      	ldr	r3, [pc, #192]	; (8005f7c <slalom_R90+0x224>)
 8005eba:	4a1c      	ldr	r2, [pc, #112]	; (8005f2c <slalom_R90+0x1d4>)
 8005ebc:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;		//走行距離の初期化
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	4a1c      	ldr	r2, [pc, #112]	; (8005f34 <slalom_R90+0x1dc>)
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	4a1c      	ldr	r2, [pc, #112]	; (8005f38 <slalom_R90+0x1e0>)
 8005ec8:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8005eca:	4a13      	ldr	r2, [pc, #76]	; (8005f18 <slalom_R90+0x1c0>)
 8005ecc:	8813      	ldrh	r3, [r2, #0]
 8005ece:	f043 0304 	orr.w	r3, r3, #4
 8005ed2:	8013      	strh	r3, [r2, #0]

	control_start();
 8005ed4:	f7fe ff4e 	bl	8004d74 <control_start>
	while(dist_l < SLALOM_OFFSET_B && dist_r < SLALOM_OFFSET_B);
 8005ed8:	bf00      	nop
 8005eda:	4b17      	ldr	r3, [pc, #92]	; (8005f38 <slalom_R90+0x1e0>)
 8005edc:	edd3 7a00 	vldr	s15, [r3]
 8005ee0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eec:	d509      	bpl.n	8005f02 <slalom_R90+0x1aa>
 8005eee:	4b11      	ldr	r3, [pc, #68]	; (8005f34 <slalom_R90+0x1dc>)
 8005ef0:	edd3 7a00 	vldr	s15, [r3]
 8005ef4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f00:	d4eb      	bmi.n	8005eda <slalom_R90+0x182>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8005f02:	4b05      	ldr	r3, [pc, #20]	; (8005f18 <slalom_R90+0x1c0>)
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <slalom_R90+0x1bc>
 8005f10:	f00c fe06 	bl	8012b20 <get_wall_info>
}
 8005f14:	bf00      	nop
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	20000fac 	.word	0x20000fac
 8005f1c:	20000da0 	.word	0x20000da0
 8005f20:	c61c4000 	.word	0xc61c4000
 8005f24:	20000b20 	.word	0x20000b20
 8005f28:	20000b94 	.word	0x20000b94
 8005f2c:	43c80000 	.word	0x43c80000
 8005f30:	20000fb0 	.word	0x20000fb0
 8005f34:	20000b2c 	.word	0x20000b2c
 8005f38:	200012e8 	.word	0x200012e8
 8005f3c:	20000d9c 	.word	0x20000d9c
 8005f40:	20000c48 	.word	0x20000c48
 8005f44:	20000b98 	.word	0x20000b98
 8005f48:	c57a0000 	.word	0xc57a0000
 8005f4c:	200001e0 	.word	0x200001e0
 8005f50:	200002f0 	.word	0x200002f0
 8005f54:	c4098000 	.word	0xc4098000
 8005f58:	20000b34 	.word	0x20000b34
 8005f5c:	20000c40 	.word	0x20000c40
 8005f60:	42140000 	.word	0x42140000
 8005f64:	20000b9c 	.word	0x20000b9c
 8005f68:	425c0000 	.word	0x425c0000
 8005f6c:	457a0000 	.word	0x457a0000
 8005f70:	42b40000 	.word	0x42b40000
 8005f74:	461c4000 	.word	0x461c4000
 8005f78:	200007b4 	.word	0x200007b4
 8005f7c:	200001dc 	.word	0x200001dc

08005f80 <slalom_L90>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L90(void){
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
	full_led_write(YELLOW);
 8005f84:	2006      	movs	r0, #6
 8005f86:	f00c fe3f 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 8005f8a:	4a6d      	ldr	r2, [pc, #436]	; (8006140 <slalom_L90+0x1c0>)
 8005f8c:	8813      	ldrh	r3, [r2, #0]
 8005f8e:	f36f 2308 	bfc	r3, #8, #1
 8005f92:	8013      	strh	r3, [r2, #0]

	accel_l = -10000;
 8005f94:	4b6b      	ldr	r3, [pc, #428]	; (8006144 <slalom_L90+0x1c4>)
 8005f96:	4a6c      	ldr	r2, [pc, #432]	; (8006148 <slalom_L90+0x1c8>)
 8005f98:	601a      	str	r2, [r3, #0]
	accel_r = -10000;
 8005f9a:	4b6c      	ldr	r3, [pc, #432]	; (800614c <slalom_L90+0x1cc>)
 8005f9c:	4a6a      	ldr	r2, [pc, #424]	; (8006148 <slalom_L90+0x1c8>)
 8005f9e:	601a      	str	r2, [r3, #0]
	speed_min_l = SPEED_RUN;
 8005fa0:	4b6b      	ldr	r3, [pc, #428]	; (8006150 <slalom_L90+0x1d0>)
 8005fa2:	4a6c      	ldr	r2, [pc, #432]	; (8006154 <slalom_L90+0x1d4>)
 8005fa4:	601a      	str	r2, [r3, #0]
	speed_min_r = SPEED_RUN;
 8005fa6:	4b6c      	ldr	r3, [pc, #432]	; (8006158 <slalom_L90+0x1d8>)
 8005fa8:	4a6a      	ldr	r2, [pc, #424]	; (8006154 <slalom_L90+0x1d4>)
 8005faa:	601a      	str	r2, [r3, #0]

	control_start();
 8005fac:	f7fe fee2 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8005fb0:	f04f 0300 	mov.w	r3, #0
 8005fb4:	4a69      	ldr	r2, [pc, #420]	; (800615c <slalom_L90+0x1dc>)
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	4a69      	ldr	r2, [pc, #420]	; (8006160 <slalom_L90+0x1e0>)
 8005fba:	6013      	str	r3, [r2, #0]
//	while(dist_l < SLALOM_OFFSET_F && dist_r < SLALOM_OFFSET_F);
	while(dist_l < SLALOM_OFFSET_F && dist_r < SLALOM_OFFSET_F){
 8005fbc:	e00c      	b.n	8005fd8 <slalom_L90+0x58>
		if(ad_fl > SLALOM_WALL_FL && ad_fr > SLALOM_WALL_FR){
 8005fbe:	4b69      	ldr	r3, [pc, #420]	; (8006164 <slalom_L90+0x1e4>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005fc6:	d907      	bls.n	8005fd8 <slalom_L90+0x58>
 8005fc8:	4b67      	ldr	r3, [pc, #412]	; (8006168 <slalom_L90+0x1e8>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2bfa      	cmp	r3, #250	; 0xfa
 8005fce:	d903      	bls.n	8005fd8 <slalom_L90+0x58>
			full_led_write(RED);
 8005fd0:	2001      	movs	r0, #1
 8005fd2:	f00c fe19 	bl	8012c08 <full_led_write>
			break;
 8005fd6:	e013      	b.n	8006000 <slalom_L90+0x80>
	while(dist_l < SLALOM_OFFSET_F && dist_r < SLALOM_OFFSET_F){
 8005fd8:	4b61      	ldr	r3, [pc, #388]	; (8006160 <slalom_L90+0x1e0>)
 8005fda:	edd3 7a00 	vldr	s15, [r3]
 8005fde:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005fe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fea:	d509      	bpl.n	8006000 <slalom_L90+0x80>
 8005fec:	4b5b      	ldr	r3, [pc, #364]	; (800615c <slalom_L90+0x1dc>)
 8005fee:	edd3 7a00 	vldr	s15, [r3]
 8005ff2:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ffe:	d4de      	bmi.n	8005fbe <slalom_L90+0x3e>
		}
	}
	drive_stop();
 8006000:	f7fe fe90 	bl	8004d24 <drive_stop>
	control_stop();
 8006004:	f7fe feca 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8006008:	4a4d      	ldr	r2, [pc, #308]	; (8006140 <slalom_L90+0x1c0>)
 800600a:	8813      	ldrh	r3, [r2, #0]
 800600c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006010:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = SLALOM_DEGACCEL;
 8006012:	4b56      	ldr	r3, [pc, #344]	; (800616c <slalom_L90+0x1ec>)
 8006014:	4a56      	ldr	r2, [pc, #344]	; (8006170 <slalom_L90+0x1f0>)
 8006016:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8006018:	4b56      	ldr	r3, [pc, #344]	; (8006174 <slalom_L90+0x1f4>)
 800601a:	f04f 0200 	mov.w	r2, #0
 800601e:	601a      	str	r2, [r3, #0]
	omega_max = SLALOM_OMEGA;
 8006020:	4b55      	ldr	r3, [pc, #340]	; (8006178 <slalom_L90+0x1f8>)
 8006022:	4a56      	ldr	r2, [pc, #344]	; (800617c <slalom_L90+0x1fc>)
 8006024:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8006026:	4b56      	ldr	r3, [pc, #344]	; (8006180 <slalom_L90+0x200>)
 8006028:	4a4a      	ldr	r2, [pc, #296]	; (8006154 <slalom_L90+0x1d4>)
 800602a:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 800602c:	4a44      	ldr	r2, [pc, #272]	; (8006140 <slalom_L90+0x1c0>)
 800602e:	8813      	ldrh	r3, [r2, #0]
 8006030:	f043 0302 	orr.w	r3, r3, #2
 8006034:	8013      	strh	r3, [r2, #0]
//	while(degree_z < target_degree_z+38);
	while(degree_z < target_degree_z+SLALOM_DEG);
 8006036:	bf00      	nop
 8006038:	4b52      	ldr	r3, [pc, #328]	; (8006184 <slalom_L90+0x204>)
 800603a:	edd3 7a00 	vldr	s15, [r3]
 800603e:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8006188 <slalom_L90+0x208>
 8006042:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006046:	4b51      	ldr	r3, [pc, #324]	; (800618c <slalom_L90+0x20c>)
 8006048:	edd3 7a00 	vldr	s15, [r3]
 800604c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006054:	dcf0      	bgt.n	8006038 <slalom_L90+0xb8>

	target_degaccel_z = 0;
 8006056:	4b45      	ldr	r3, [pc, #276]	; (800616c <slalom_L90+0x1ec>)
 8006058:	f04f 0200 	mov.w	r2, #0
 800605c:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+65);
	while(degree_z < target_degree_z+(90-SLALOM_DEG+2));
 800605e:	bf00      	nop
 8006060:	4b48      	ldr	r3, [pc, #288]	; (8006184 <slalom_L90+0x204>)
 8006062:	edd3 7a00 	vldr	s15, [r3]
 8006066:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8006190 <slalom_L90+0x210>
 800606a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800606e:	4b47      	ldr	r3, [pc, #284]	; (800618c <slalom_L90+0x20c>)
 8006070:	edd3 7a00 	vldr	s15, [r3]
 8006074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800607c:	dcf0      	bgt.n	8006060 <slalom_L90+0xe0>

	target_degaccel_z = -SLALOM_DEGACCEL;
 800607e:	4b3b      	ldr	r3, [pc, #236]	; (800616c <slalom_L90+0x1ec>)
 8006080:	4a44      	ldr	r2, [pc, #272]	; (8006194 <slalom_L90+0x214>)
 8006082:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 8006084:	bf00      	nop
 8006086:	4b3f      	ldr	r3, [pc, #252]	; (8006184 <slalom_L90+0x204>)
 8006088:	edd3 7a00 	vldr	s15, [r3]
 800608c:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8006198 <slalom_L90+0x218>
 8006090:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006094:	4b3d      	ldr	r3, [pc, #244]	; (800618c <slalom_L90+0x20c>)
 8006096:	edd3 7a00 	vldr	s15, [r3]
 800609a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800609e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a2:	dcf0      	bgt.n	8006086 <slalom_L90+0x106>
	if(!MF.FLAG.XDIR){
 80060a4:	4b26      	ldr	r3, [pc, #152]	; (8006140 <slalom_L90+0x1c0>)
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d104      	bne.n	80060bc <slalom_L90+0x13c>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80060b2:	2101      	movs	r1, #1
 80060b4:	20ff      	movs	r0, #255	; 0xff
 80060b6:	f00a ffd7 	bl	8011068 <turn_dir>
 80060ba:	e003      	b.n	80060c4 <slalom_L90+0x144>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80060bc:	2103      	movs	r1, #3
 80060be:	20fe      	movs	r0, #254	; 0xfe
 80060c0:	f00a ffd2 	bl	8011068 <turn_dir>
	}

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 80060c4:	4a1e      	ldr	r2, [pc, #120]	; (8006140 <slalom_L90+0x1c0>)
 80060c6:	8813      	ldrh	r3, [r2, #0]
 80060c8:	f36f 334d 	bfc	r3, #13, #1
 80060cc:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80060ce:	4b1d      	ldr	r3, [pc, #116]	; (8006144 <slalom_L90+0x1c4>)
 80060d0:	4a32      	ldr	r2, [pc, #200]	; (800619c <slalom_L90+0x21c>)
 80060d2:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80060d4:	4b1d      	ldr	r3, [pc, #116]	; (800614c <slalom_L90+0x1cc>)
 80060d6:	4a31      	ldr	r2, [pc, #196]	; (800619c <slalom_L90+0x21c>)
 80060d8:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 80060da:	4b31      	ldr	r3, [pc, #196]	; (80061a0 <slalom_L90+0x220>)
 80060dc:	4a1d      	ldr	r2, [pc, #116]	; (8006154 <slalom_L90+0x1d4>)
 80060de:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 80060e0:	4b30      	ldr	r3, [pc, #192]	; (80061a4 <slalom_L90+0x224>)
 80060e2:	4a1c      	ldr	r2, [pc, #112]	; (8006154 <slalom_L90+0x1d4>)
 80060e4:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;		//走行距離の初期化
 80060e6:	f04f 0300 	mov.w	r3, #0
 80060ea:	4a1c      	ldr	r2, [pc, #112]	; (800615c <slalom_L90+0x1dc>)
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	4a1c      	ldr	r2, [pc, #112]	; (8006160 <slalom_L90+0x1e0>)
 80060f0:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80060f2:	4a13      	ldr	r2, [pc, #76]	; (8006140 <slalom_L90+0x1c0>)
 80060f4:	8813      	ldrh	r3, [r2, #0]
 80060f6:	f043 0304 	orr.w	r3, r3, #4
 80060fa:	8013      	strh	r3, [r2, #0]
	control_start();
 80060fc:	f7fe fe3a 	bl	8004d74 <control_start>
	while(dist_l < SLALOM_OFFSET_B && dist_r < SLALOM_OFFSET_B);
 8006100:	bf00      	nop
 8006102:	4b17      	ldr	r3, [pc, #92]	; (8006160 <slalom_L90+0x1e0>)
 8006104:	edd3 7a00 	vldr	s15, [r3]
 8006108:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800610c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006114:	d509      	bpl.n	800612a <slalom_L90+0x1aa>
 8006116:	4b11      	ldr	r3, [pc, #68]	; (800615c <slalom_L90+0x1dc>)
 8006118:	edd3 7a00 	vldr	s15, [r3]
 800611c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006128:	d4eb      	bmi.n	8006102 <slalom_L90+0x182>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 800612a:	4b05      	ldr	r3, [pc, #20]	; (8006140 <slalom_L90+0x1c0>)
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <slalom_L90+0x1bc>
 8006138:	f00c fcf2 	bl	8012b20 <get_wall_info>
}
 800613c:	bf00      	nop
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20000fac 	.word	0x20000fac
 8006144:	20000da0 	.word	0x20000da0
 8006148:	c61c4000 	.word	0xc61c4000
 800614c:	20000b20 	.word	0x20000b20
 8006150:	20000b94 	.word	0x20000b94
 8006154:	43c80000 	.word	0x43c80000
 8006158:	20000fb0 	.word	0x20000fb0
 800615c:	20000b2c 	.word	0x20000b2c
 8006160:	200012e8 	.word	0x200012e8
 8006164:	20000d9c 	.word	0x20000d9c
 8006168:	20000c48 	.word	0x20000c48
 800616c:	20000b98 	.word	0x20000b98
 8006170:	457a0000 	.word	0x457a0000
 8006174:	200001e0 	.word	0x200001e0
 8006178:	20000b24 	.word	0x20000b24
 800617c:	44098000 	.word	0x44098000
 8006180:	20000b34 	.word	0x20000b34
 8006184:	20000c40 	.word	0x20000c40
 8006188:	42140000 	.word	0x42140000
 800618c:	20000b9c 	.word	0x20000b9c
 8006190:	425c0000 	.word	0x425c0000
 8006194:	c57a0000 	.word	0xc57a0000
 8006198:	42b40000 	.word	0x42b40000
 800619c:	461c4000 	.word	0x461c4000
 80061a0:	200007b4 	.word	0x200007b4
 80061a4:	200001dc 	.word	0x200001dc

080061a8 <slalom_R902>:
//slalom_R902
// スラロームで左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_R902(void){
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
	full_led_write(PURPLE);
 80061ac:	2005      	movs	r0, #5
 80061ae:	f00c fd2b 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 80061b2:	4a6e      	ldr	r2, [pc, #440]	; (800636c <slalom_R902+0x1c4>)
 80061b4:	8813      	ldrh	r3, [r2, #0]
 80061b6:	f36f 2308 	bfc	r3, #8, #1
 80061ba:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80061bc:	4b6c      	ldr	r3, [pc, #432]	; (8006370 <slalom_R902+0x1c8>)
 80061be:	4a6d      	ldr	r2, [pc, #436]	; (8006374 <slalom_R902+0x1cc>)
 80061c0:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80061c2:	4b6d      	ldr	r3, [pc, #436]	; (8006378 <slalom_R902+0x1d0>)
 80061c4:	4a6b      	ldr	r2, [pc, #428]	; (8006374 <slalom_R902+0x1cc>)
 80061c6:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80061c8:	4b6c      	ldr	r3, [pc, #432]	; (800637c <slalom_R902+0x1d4>)
 80061ca:	4a6d      	ldr	r2, [pc, #436]	; (8006380 <slalom_R902+0x1d8>)
 80061cc:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 80061ce:	4b6d      	ldr	r3, [pc, #436]	; (8006384 <slalom_R902+0x1dc>)
 80061d0:	4a6b      	ldr	r2, [pc, #428]	; (8006380 <slalom_R902+0x1d8>)
 80061d2:	601a      	str	r2, [r3, #0]

	control_start();
 80061d4:	f7fe fdce 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	4a6a      	ldr	r2, [pc, #424]	; (8006388 <slalom_R902+0x1e0>)
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	4a6a      	ldr	r2, [pc, #424]	; (800638c <slalom_R902+0x1e4>)
 80061e2:	6013      	str	r3, [r2, #0]
//	while(dist_l < SLALOM_H_OFFSET_F && dist_r < SLALOM_H_OFFSET_F);
	while(dist_l < SLALOM_H_OFFSET_F && dist_r < SLALOM_H_OFFSET_F){
 80061e4:	e00d      	b.n	8006202 <slalom_R902+0x5a>
		if(ad_fl > SLALOM_H_WALL_L && ad_fr > SLALOM_H_WALL_R){
 80061e6:	4b6a      	ldr	r3, [pc, #424]	; (8006390 <slalom_R902+0x1e8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80061ee:	d908      	bls.n	8006202 <slalom_R902+0x5a>
 80061f0:	4b68      	ldr	r3, [pc, #416]	; (8006394 <slalom_R902+0x1ec>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80061f8:	d903      	bls.n	8006202 <slalom_R902+0x5a>
			full_led_write(RED);
 80061fa:	2001      	movs	r0, #1
 80061fc:	f00c fd04 	bl	8012c08 <full_led_write>
			break;
 8006200:	e013      	b.n	800622a <slalom_R902+0x82>
	while(dist_l < SLALOM_H_OFFSET_F && dist_r < SLALOM_H_OFFSET_F){
 8006202:	4b62      	ldr	r3, [pc, #392]	; (800638c <slalom_R902+0x1e4>)
 8006204:	edd3 7a00 	vldr	s15, [r3]
 8006208:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800620c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006214:	d509      	bpl.n	800622a <slalom_R902+0x82>
 8006216:	4b5c      	ldr	r3, [pc, #368]	; (8006388 <slalom_R902+0x1e0>)
 8006218:	edd3 7a00 	vldr	s15, [r3]
 800621c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006220:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006228:	d4dd      	bmi.n	80061e6 <slalom_R902+0x3e>
		}
	}
	drive_stop();
 800622a:	f7fe fd7b 	bl	8004d24 <drive_stop>
	control_stop();
 800622e:	f7fe fdb5 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8006232:	4a4e      	ldr	r2, [pc, #312]	; (800636c <slalom_R902+0x1c4>)
 8006234:	8813      	ldrh	r3, [r2, #0]
 8006236:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800623a:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -SLALOM_H_DEGACCEL;
 800623c:	4b56      	ldr	r3, [pc, #344]	; (8006398 <slalom_R902+0x1f0>)
 800623e:	4a57      	ldr	r2, [pc, #348]	; (800639c <slalom_R902+0x1f4>)
 8006240:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8006242:	4b57      	ldr	r3, [pc, #348]	; (80063a0 <slalom_R902+0x1f8>)
 8006244:	f04f 0200 	mov.w	r2, #0
 8006248:	601a      	str	r2, [r3, #0]
	omega_min = -SLALOM_H_OMEGA;
 800624a:	4b56      	ldr	r3, [pc, #344]	; (80063a4 <slalom_R902+0x1fc>)
 800624c:	4a56      	ldr	r2, [pc, #344]	; (80063a8 <slalom_R902+0x200>)
 800624e:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 8006250:	4b56      	ldr	r3, [pc, #344]	; (80063ac <slalom_R902+0x204>)
 8006252:	4a4b      	ldr	r2, [pc, #300]	; (8006380 <slalom_R902+0x1d8>)
 8006254:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8006256:	4a45      	ldr	r2, [pc, #276]	; (800636c <slalom_R902+0x1c4>)
 8006258:	8813      	ldrh	r3, [r2, #0]
 800625a:	f043 0302 	orr.w	r3, r3, #2
 800625e:	8013      	strh	r3, [r2, #0]
//	while(degree_z > target_degree_z-32);
	while(degree_z > target_degree_z-SLALOM_H_DEG);
 8006260:	bf00      	nop
 8006262:	4b53      	ldr	r3, [pc, #332]	; (80063b0 <slalom_R902+0x208>)
 8006264:	edd3 7a00 	vldr	s15, [r3]
 8006268:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800626c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006270:	4b50      	ldr	r3, [pc, #320]	; (80063b4 <slalom_R902+0x20c>)
 8006272:	edd3 7a00 	vldr	s15, [r3]
 8006276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800627a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800627e:	d4f0      	bmi.n	8006262 <slalom_R902+0xba>

	target_degaccel_z = 0;
 8006280:	4b45      	ldr	r3, [pc, #276]	; (8006398 <slalom_R902+0x1f0>)
 8006282:	f04f 0200 	mov.w	r2, #0
 8006286:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-66);
	while(degree_z > target_degree_z-(80-SLALOM_H_DEG+2));
 8006288:	bf00      	nop
 800628a:	4b49      	ldr	r3, [pc, #292]	; (80063b0 <slalom_R902+0x208>)
 800628c:	edd3 7a00 	vldr	s15, [r3]
 8006290:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80063b8 <slalom_R902+0x210>
 8006294:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006298:	4b46      	ldr	r3, [pc, #280]	; (80063b4 <slalom_R902+0x20c>)
 800629a:	edd3 7a00 	vldr	s15, [r3]
 800629e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a6:	d4f0      	bmi.n	800628a <slalom_R902+0xe2>

	target_degaccel_z = SLALOM_H_DEGACCEL;
 80062a8:	4b3b      	ldr	r3, [pc, #236]	; (8006398 <slalom_R902+0x1f0>)
 80062aa:	4a44      	ldr	r2, [pc, #272]	; (80063bc <slalom_R902+0x214>)
 80062ac:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-80);
	while(degree_z > target_degree_z-80);
 80062ae:	bf00      	nop
 80062b0:	4b3f      	ldr	r3, [pc, #252]	; (80063b0 <slalom_R902+0x208>)
 80062b2:	edd3 7a00 	vldr	s15, [r3]
 80062b6:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80063c0 <slalom_R902+0x218>
 80062ba:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80062be:	4b3d      	ldr	r3, [pc, #244]	; (80063b4 <slalom_R902+0x20c>)
 80062c0:	edd3 7a00 	vldr	s15, [r3]
 80062c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062cc:	d4f0      	bmi.n	80062b0 <slalom_R902+0x108>
	if(!MF.FLAG.XDIR){
 80062ce:	4b27      	ldr	r3, [pc, #156]	; (800636c <slalom_R902+0x1c4>)
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d104      	bne.n	80062e6 <slalom_R902+0x13e>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80062dc:	2101      	movs	r1, #1
 80062de:	2001      	movs	r0, #1
 80062e0:	f00a fec2 	bl	8011068 <turn_dir>
 80062e4:	e003      	b.n	80062ee <slalom_R902+0x146>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度左90度
 80062e6:	2103      	movs	r1, #3
 80062e8:	2002      	movs	r0, #2
 80062ea:	f00a febd 	bl	8011068 <turn_dir>
	}

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 80062ee:	4a1f      	ldr	r2, [pc, #124]	; (800636c <slalom_R902+0x1c4>)
 80062f0:	8813      	ldrh	r3, [r2, #0]
 80062f2:	f36f 334d 	bfc	r3, #13, #1
 80062f6:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80062f8:	4b1d      	ldr	r3, [pc, #116]	; (8006370 <slalom_R902+0x1c8>)
 80062fa:	4a1e      	ldr	r2, [pc, #120]	; (8006374 <slalom_R902+0x1cc>)
 80062fc:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80062fe:	4b1e      	ldr	r3, [pc, #120]	; (8006378 <slalom_R902+0x1d0>)
 8006300:	4a1c      	ldr	r2, [pc, #112]	; (8006374 <slalom_R902+0x1cc>)
 8006302:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8006304:	4b1d      	ldr	r3, [pc, #116]	; (800637c <slalom_R902+0x1d4>)
 8006306:	4a1e      	ldr	r2, [pc, #120]	; (8006380 <slalom_R902+0x1d8>)
 8006308:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 800630a:	4b1e      	ldr	r3, [pc, #120]	; (8006384 <slalom_R902+0x1dc>)
 800630c:	4a1c      	ldr	r2, [pc, #112]	; (8006380 <slalom_R902+0x1d8>)
 800630e:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	4a1c      	ldr	r2, [pc, #112]	; (8006388 <slalom_R902+0x1e0>)
 8006316:	6013      	str	r3, [r2, #0]
 8006318:	4a1c      	ldr	r2, [pc, #112]	; (800638c <slalom_R902+0x1e4>)
 800631a:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 800631c:	4a13      	ldr	r2, [pc, #76]	; (800636c <slalom_R902+0x1c4>)
 800631e:	8813      	ldrh	r3, [r2, #0]
 8006320:	f043 0304 	orr.w	r3, r3, #4
 8006324:	8013      	strh	r3, [r2, #0]
	control_start();
 8006326:	f7fe fd25 	bl	8004d74 <control_start>
	while(dist_l < SLALOM_H_OFFSET_B && dist_r < SLALOM_H_OFFSET_B);
 800632a:	bf00      	nop
 800632c:	4b17      	ldr	r3, [pc, #92]	; (800638c <slalom_R902+0x1e4>)
 800632e:	edd3 7a00 	vldr	s15, [r3]
 8006332:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80063c4 <slalom_R902+0x21c>
 8006336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800633a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800633e:	d509      	bpl.n	8006354 <slalom_R902+0x1ac>
 8006340:	4b11      	ldr	r3, [pc, #68]	; (8006388 <slalom_R902+0x1e0>)
 8006342:	edd3 7a00 	vldr	s15, [r3]
 8006346:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80063c4 <slalom_R902+0x21c>
 800634a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800634e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006352:	d4eb      	bmi.n	800632c <slalom_R902+0x184>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006354:	4b05      	ldr	r3, [pc, #20]	; (800636c <slalom_R902+0x1c4>)
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <slalom_R902+0x1be>
 8006362:	f00c fbdd 	bl	8012b20 <get_wall_info>
}
 8006366:	bf00      	nop
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20000fac 	.word	0x20000fac
 8006370:	20000da0 	.word	0x20000da0
 8006374:	461c4000 	.word	0x461c4000
 8006378:	20000b20 	.word	0x20000b20
 800637c:	200007b4 	.word	0x200007b4
 8006380:	44480000 	.word	0x44480000
 8006384:	200001dc 	.word	0x200001dc
 8006388:	20000b2c 	.word	0x20000b2c
 800638c:	200012e8 	.word	0x200012e8
 8006390:	20000d9c 	.word	0x20000d9c
 8006394:	20000c48 	.word	0x20000c48
 8006398:	20000b98 	.word	0x20000b98
 800639c:	c69c4000 	.word	0xc69c4000
 80063a0:	200001e0 	.word	0x200001e0
 80063a4:	200002f0 	.word	0x200002f0
 80063a8:	c4480000 	.word	0xc4480000
 80063ac:	20000b34 	.word	0x20000b34
 80063b0:	20000c40 	.word	0x20000c40
 80063b4:	20000b9c 	.word	0x20000b9c
 80063b8:	42840000 	.word	0x42840000
 80063bc:	469c4000 	.word	0x469c4000
 80063c0:	42a00000 	.word	0x42a00000
 80063c4:	42500000 	.word	0x42500000

080063c8 <slalom_L902>:
//slalom_L90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_L902(void){
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
	full_led_write(YELLOW);
 80063cc:	2006      	movs	r0, #6
 80063ce:	f00c fc1b 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 80063d2:	4a6d      	ldr	r2, [pc, #436]	; (8006588 <slalom_L902+0x1c0>)
 80063d4:	8813      	ldrh	r3, [r2, #0]
 80063d6:	f36f 2308 	bfc	r3, #8, #1
 80063da:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80063dc:	4b6b      	ldr	r3, [pc, #428]	; (800658c <slalom_L902+0x1c4>)
 80063de:	4a6c      	ldr	r2, [pc, #432]	; (8006590 <slalom_L902+0x1c8>)
 80063e0:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80063e2:	4b6c      	ldr	r3, [pc, #432]	; (8006594 <slalom_L902+0x1cc>)
 80063e4:	4a6a      	ldr	r2, [pc, #424]	; (8006590 <slalom_L902+0x1c8>)
 80063e6:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80063e8:	4b6b      	ldr	r3, [pc, #428]	; (8006598 <slalom_L902+0x1d0>)
 80063ea:	4a6c      	ldr	r2, [pc, #432]	; (800659c <slalom_L902+0x1d4>)
 80063ec:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 80063ee:	4b6c      	ldr	r3, [pc, #432]	; (80065a0 <slalom_L902+0x1d8>)
 80063f0:	4a6a      	ldr	r2, [pc, #424]	; (800659c <slalom_L902+0x1d4>)
 80063f2:	601a      	str	r2, [r3, #0]

	control_start();
 80063f4:	f7fe fcbe 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80063f8:	f04f 0300 	mov.w	r3, #0
 80063fc:	4a69      	ldr	r2, [pc, #420]	; (80065a4 <slalom_L902+0x1dc>)
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	4a69      	ldr	r2, [pc, #420]	; (80065a8 <slalom_L902+0x1e0>)
 8006402:	6013      	str	r3, [r2, #0]
//	while(dist_l < SLALOM_H_OFFSET_F && dist_r < SLALOM_H_OFFSET_F);
	while(dist_l < SLALOM_OFFSET_F && dist_r < SLALOM_OFFSET_F){
 8006404:	e00c      	b.n	8006420 <slalom_L902+0x58>
		if(ad_l > SLALOM_WALL_FL && ad_r > SLALOM_WALL_FR) {
 8006406:	4b69      	ldr	r3, [pc, #420]	; (80065ac <slalom_L902+0x1e4>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800640e:	d907      	bls.n	8006420 <slalom_L902+0x58>
 8006410:	4b67      	ldr	r3, [pc, #412]	; (80065b0 <slalom_L902+0x1e8>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2bfa      	cmp	r3, #250	; 0xfa
 8006416:	d903      	bls.n	8006420 <slalom_L902+0x58>
			full_led_write(RED);
 8006418:	2001      	movs	r0, #1
 800641a:	f00c fbf5 	bl	8012c08 <full_led_write>
			break;
 800641e:	e013      	b.n	8006448 <slalom_L902+0x80>
	while(dist_l < SLALOM_OFFSET_F && dist_r < SLALOM_OFFSET_F){
 8006420:	4b61      	ldr	r3, [pc, #388]	; (80065a8 <slalom_L902+0x1e0>)
 8006422:	edd3 7a00 	vldr	s15, [r3]
 8006426:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800642a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800642e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006432:	d509      	bpl.n	8006448 <slalom_L902+0x80>
 8006434:	4b5b      	ldr	r3, [pc, #364]	; (80065a4 <slalom_L902+0x1dc>)
 8006436:	edd3 7a00 	vldr	s15, [r3]
 800643a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800643e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006446:	d4de      	bmi.n	8006406 <slalom_L902+0x3e>
		}
	}
	drive_stop();
 8006448:	f7fe fc6c 	bl	8004d24 <drive_stop>
	control_stop();
 800644c:	f7fe fca6 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8006450:	4a4d      	ldr	r2, [pc, #308]	; (8006588 <slalom_L902+0x1c0>)
 8006452:	8813      	ldrh	r3, [r2, #0]
 8006454:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006458:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = SLALOM_H_DEGACCEL;
 800645a:	4b56      	ldr	r3, [pc, #344]	; (80065b4 <slalom_L902+0x1ec>)
 800645c:	4a56      	ldr	r2, [pc, #344]	; (80065b8 <slalom_L902+0x1f0>)
 800645e:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8006460:	4b56      	ldr	r3, [pc, #344]	; (80065bc <slalom_L902+0x1f4>)
 8006462:	f04f 0200 	mov.w	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
	omega_max = SLALOM_H_OMEGA;
 8006468:	4b55      	ldr	r3, [pc, #340]	; (80065c0 <slalom_L902+0x1f8>)
 800646a:	4a4c      	ldr	r2, [pc, #304]	; (800659c <slalom_L902+0x1d4>)
 800646c:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 800646e:	4b55      	ldr	r3, [pc, #340]	; (80065c4 <slalom_L902+0x1fc>)
 8006470:	4a4a      	ldr	r2, [pc, #296]	; (800659c <slalom_L902+0x1d4>)
 8006472:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8006474:	4a44      	ldr	r2, [pc, #272]	; (8006588 <slalom_L902+0x1c0>)
 8006476:	8813      	ldrh	r3, [r2, #0]
 8006478:	f043 0302 	orr.w	r3, r3, #2
 800647c:	8013      	strh	r3, [r2, #0]
//	while(degree_z < target_degree_z+32);
	while(degree_z < target_degree_z+SLALOM_H_DEG);
 800647e:	bf00      	nop
 8006480:	4b51      	ldr	r3, [pc, #324]	; (80065c8 <slalom_L902+0x200>)
 8006482:	edd3 7a00 	vldr	s15, [r3]
 8006486:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800648a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800648e:	4b4f      	ldr	r3, [pc, #316]	; (80065cc <slalom_L902+0x204>)
 8006490:	edd3 7a00 	vldr	s15, [r3]
 8006494:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800649c:	dcf0      	bgt.n	8006480 <slalom_L902+0xb8>

	target_degaccel_z = 0;
 800649e:	4b45      	ldr	r3, [pc, #276]	; (80065b4 <slalom_L902+0x1ec>)
 80064a0:	f04f 0200 	mov.w	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+66.3);
	while(degree_z < target_degree_z+(80-SLALOM_H_DEG+2));
 80064a6:	bf00      	nop
 80064a8:	4b47      	ldr	r3, [pc, #284]	; (80065c8 <slalom_L902+0x200>)
 80064aa:	edd3 7a00 	vldr	s15, [r3]
 80064ae:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80065d0 <slalom_L902+0x208>
 80064b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064b6:	4b45      	ldr	r3, [pc, #276]	; (80065cc <slalom_L902+0x204>)
 80064b8:	edd3 7a00 	vldr	s15, [r3]
 80064bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064c4:	dcf0      	bgt.n	80064a8 <slalom_L902+0xe0>

	target_degaccel_z = -SLALOM_H_DEGACCEL;
 80064c6:	4b3b      	ldr	r3, [pc, #236]	; (80065b4 <slalom_L902+0x1ec>)
 80064c8:	4a42      	ldr	r2, [pc, #264]	; (80065d4 <slalom_L902+0x20c>)
 80064ca:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+80);
	while(degree_z < target_degree_z+80);
 80064cc:	bf00      	nop
 80064ce:	4b3e      	ldr	r3, [pc, #248]	; (80065c8 <slalom_L902+0x200>)
 80064d0:	edd3 7a00 	vldr	s15, [r3]
 80064d4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80065d8 <slalom_L902+0x210>
 80064d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064dc:	4b3b      	ldr	r3, [pc, #236]	; (80065cc <slalom_L902+0x204>)
 80064de:	edd3 7a00 	vldr	s15, [r3]
 80064e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ea:	dcf0      	bgt.n	80064ce <slalom_L902+0x106>
	if(!MF.FLAG.XDIR){
 80064ec:	4b26      	ldr	r3, [pc, #152]	; (8006588 <slalom_L902+0x1c0>)
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d104      	bne.n	8006504 <slalom_L902+0x13c>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80064fa:	2101      	movs	r1, #1
 80064fc:	20ff      	movs	r0, #255	; 0xff
 80064fe:	f00a fdb3 	bl	8011068 <turn_dir>
 8006502:	e003      	b.n	800650c <slalom_L902+0x144>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006504:	2103      	movs	r1, #3
 8006506:	20fe      	movs	r0, #254	; 0xfe
 8006508:	f00a fdae 	bl	8011068 <turn_dir>
	}

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 800650c:	4a1e      	ldr	r2, [pc, #120]	; (8006588 <slalom_L902+0x1c0>)
 800650e:	8813      	ldrh	r3, [r2, #0]
 8006510:	f36f 334d 	bfc	r3, #13, #1
 8006514:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006516:	4b1d      	ldr	r3, [pc, #116]	; (800658c <slalom_L902+0x1c4>)
 8006518:	4a1d      	ldr	r2, [pc, #116]	; (8006590 <slalom_L902+0x1c8>)
 800651a:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800651c:	4b1d      	ldr	r3, [pc, #116]	; (8006594 <slalom_L902+0x1cc>)
 800651e:	4a1c      	ldr	r2, [pc, #112]	; (8006590 <slalom_L902+0x1c8>)
 8006520:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8006522:	4b1d      	ldr	r3, [pc, #116]	; (8006598 <slalom_L902+0x1d0>)
 8006524:	4a1d      	ldr	r2, [pc, #116]	; (800659c <slalom_L902+0x1d4>)
 8006526:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 8006528:	4b1d      	ldr	r3, [pc, #116]	; (80065a0 <slalom_L902+0x1d8>)
 800652a:	4a1c      	ldr	r2, [pc, #112]	; (800659c <slalom_L902+0x1d4>)
 800652c:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	4a1c      	ldr	r2, [pc, #112]	; (80065a4 <slalom_L902+0x1dc>)
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	4a1c      	ldr	r2, [pc, #112]	; (80065a8 <slalom_L902+0x1e0>)
 8006538:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 800653a:	4a13      	ldr	r2, [pc, #76]	; (8006588 <slalom_L902+0x1c0>)
 800653c:	8813      	ldrh	r3, [r2, #0]
 800653e:	f043 0304 	orr.w	r3, r3, #4
 8006542:	8013      	strh	r3, [r2, #0]
	control_start();
 8006544:	f7fe fc16 	bl	8004d74 <control_start>
	while(dist_l < SLALOM_H_OFFSET_B && dist_r < SLALOM_H_OFFSET_B);
 8006548:	bf00      	nop
 800654a:	4b17      	ldr	r3, [pc, #92]	; (80065a8 <slalom_L902+0x1e0>)
 800654c:	edd3 7a00 	vldr	s15, [r3]
 8006550:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80065dc <slalom_L902+0x214>
 8006554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800655c:	d509      	bpl.n	8006572 <slalom_L902+0x1aa>
 800655e:	4b11      	ldr	r3, [pc, #68]	; (80065a4 <slalom_L902+0x1dc>)
 8006560:	edd3 7a00 	vldr	s15, [r3]
 8006564:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80065dc <slalom_L902+0x214>
 8006568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800656c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006570:	d4eb      	bmi.n	800654a <slalom_L902+0x182>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006572:	4b05      	ldr	r3, [pc, #20]	; (8006588 <slalom_L902+0x1c0>)
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <slalom_L902+0x1bc>
 8006580:	f00c face 	bl	8012b20 <get_wall_info>
}
 8006584:	bf00      	nop
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20000fac 	.word	0x20000fac
 800658c:	20000da0 	.word	0x20000da0
 8006590:	461c4000 	.word	0x461c4000
 8006594:	20000b20 	.word	0x20000b20
 8006598:	200007b4 	.word	0x200007b4
 800659c:	44480000 	.word	0x44480000
 80065a0:	200001dc 	.word	0x200001dc
 80065a4:	20000b2c 	.word	0x20000b2c
 80065a8:	200012e8 	.word	0x200012e8
 80065ac:	20000b3c 	.word	0x20000b3c
 80065b0:	20000fa8 	.word	0x20000fa8
 80065b4:	20000b98 	.word	0x20000b98
 80065b8:	469c4000 	.word	0x469c4000
 80065bc:	200001e0 	.word	0x200001e0
 80065c0:	20000b24 	.word	0x20000b24
 80065c4:	20000b34 	.word	0x20000b34
 80065c8:	20000c40 	.word	0x20000c40
 80065cc:	20000b9c 	.word	0x20000b9c
 80065d0:	42840000 	.word	0x42840000
 80065d4:	c69c4000 	.word	0xc69c4000
 80065d8:	42a00000 	.word	0x42a00000
 80065dc:	42500000 	.word	0x42500000

080065e0 <Lslalom_R90>:
//Lslalom_R90
// スラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R90(void){
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0
	full_led_write(PURPLE);
 80065e4:	2005      	movs	r0, #5
 80065e6:	f00c fb0f 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 80065ea:	4a67      	ldr	r2, [pc, #412]	; (8006788 <Lslalom_R90+0x1a8>)
 80065ec:	8813      	ldrh	r3, [r2, #0]
 80065ee:	f36f 2308 	bfc	r3, #8, #1
 80065f2:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80065f4:	4b65      	ldr	r3, [pc, #404]	; (800678c <Lslalom_R90+0x1ac>)
 80065f6:	4a66      	ldr	r2, [pc, #408]	; (8006790 <Lslalom_R90+0x1b0>)
 80065f8:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80065fa:	4b66      	ldr	r3, [pc, #408]	; (8006794 <Lslalom_R90+0x1b4>)
 80065fc:	4a64      	ldr	r2, [pc, #400]	; (8006790 <Lslalom_R90+0x1b0>)
 80065fe:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8006600:	4b65      	ldr	r3, [pc, #404]	; (8006798 <Lslalom_R90+0x1b8>)
 8006602:	4a66      	ldr	r2, [pc, #408]	; (800679c <Lslalom_R90+0x1bc>)
 8006604:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8006606:	4b66      	ldr	r3, [pc, #408]	; (80067a0 <Lslalom_R90+0x1c0>)
 8006608:	4a64      	ldr	r2, [pc, #400]	; (800679c <Lslalom_R90+0x1bc>)
 800660a:	601a      	str	r2, [r3, #0]

	control_start();
 800660c:	f7fe fbb2 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	4a63      	ldr	r2, [pc, #396]	; (80067a4 <Lslalom_R90+0x1c4>)
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	4a63      	ldr	r2, [pc, #396]	; (80067a8 <Lslalom_R90+0x1c8>)
 800661a:	6013      	str	r3, [r2, #0]
	while(dist_l < LSLALOM_OFFSET_F && dist_r < LSLALOM_OFFSET_F);
 800661c:	bf00      	nop
 800661e:	4b62      	ldr	r3, [pc, #392]	; (80067a8 <Lslalom_R90+0x1c8>)
 8006620:	edd3 7a00 	vldr	s15, [r3]
 8006624:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80067ac <Lslalom_R90+0x1cc>
 8006628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800662c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006630:	d509      	bpl.n	8006646 <Lslalom_R90+0x66>
 8006632:	4b5c      	ldr	r3, [pc, #368]	; (80067a4 <Lslalom_R90+0x1c4>)
 8006634:	edd3 7a00 	vldr	s15, [r3]
 8006638:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80067ac <Lslalom_R90+0x1cc>
 800663c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006644:	d4eb      	bmi.n	800661e <Lslalom_R90+0x3e>
	drive_stop();
 8006646:	f7fe fb6d 	bl	8004d24 <drive_stop>
	control_stop();
 800664a:	f7fe fba7 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 800664e:	4a4e      	ldr	r2, [pc, #312]	; (8006788 <Lslalom_R90+0x1a8>)
 8006650:	8813      	ldrh	r3, [r2, #0]
 8006652:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006656:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -LSLALOM_DEGACCEL;
 8006658:	4b55      	ldr	r3, [pc, #340]	; (80067b0 <Lslalom_R90+0x1d0>)
 800665a:	4a56      	ldr	r2, [pc, #344]	; (80067b4 <Lslalom_R90+0x1d4>)
 800665c:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 800665e:	4b56      	ldr	r3, [pc, #344]	; (80067b8 <Lslalom_R90+0x1d8>)
 8006660:	f04f 0200 	mov.w	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
	omega_min = -LSLALOM_OMEGA;
 8006666:	4b55      	ldr	r3, [pc, #340]	; (80067bc <Lslalom_R90+0x1dc>)
 8006668:	4a55      	ldr	r2, [pc, #340]	; (80067c0 <Lslalom_R90+0x1e0>)
 800666a:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 800666c:	4b55      	ldr	r3, [pc, #340]	; (80067c4 <Lslalom_R90+0x1e4>)
 800666e:	4a4b      	ldr	r2, [pc, #300]	; (800679c <Lslalom_R90+0x1bc>)
 8006670:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8006672:	4a45      	ldr	r2, [pc, #276]	; (8006788 <Lslalom_R90+0x1a8>)
 8006674:	8813      	ldrh	r3, [r2, #0]
 8006676:	f043 0302 	orr.w	r3, r3, #2
 800667a:	8013      	strh	r3, [r2, #0]
//	while(degree_z > target_degree_z-25);
	while(degree_z > target_degree_z-LSLALOM_DEG);
 800667c:	bf00      	nop
 800667e:	4b52      	ldr	r3, [pc, #328]	; (80067c8 <Lslalom_R90+0x1e8>)
 8006680:	edd3 7a00 	vldr	s15, [r3]
 8006684:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006688:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800668c:	4b4f      	ldr	r3, [pc, #316]	; (80067cc <Lslalom_R90+0x1ec>)
 800668e:	edd3 7a00 	vldr	s15, [r3]
 8006692:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800669a:	d4f0      	bmi.n	800667e <Lslalom_R90+0x9e>

	target_degaccel_z = 0;
 800669c:	4b44      	ldr	r3, [pc, #272]	; (80067b0 <Lslalom_R90+0x1d0>)
 800669e:	f04f 0200 	mov.w	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-75);
	while(degree_z > target_degree_z-(90-LSLALOM_DEG+4));
 80066a4:	bf00      	nop
 80066a6:	4b48      	ldr	r3, [pc, #288]	; (80067c8 <Lslalom_R90+0x1e8>)
 80066a8:	edd3 7a00 	vldr	s15, [r3]
 80066ac:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80067d0 <Lslalom_R90+0x1f0>
 80066b0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80066b4:	4b45      	ldr	r3, [pc, #276]	; (80067cc <Lslalom_R90+0x1ec>)
 80066b6:	edd3 7a00 	vldr	s15, [r3]
 80066ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c2:	d4f0      	bmi.n	80066a6 <Lslalom_R90+0xc6>

	target_degaccel_z = LSLALOM_DEGACCEL;
 80066c4:	4b3a      	ldr	r3, [pc, #232]	; (80067b0 <Lslalom_R90+0x1d0>)
 80066c6:	4a43      	ldr	r2, [pc, #268]	; (80067d4 <Lslalom_R90+0x1f4>)
 80066c8:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 80066ca:	bf00      	nop
 80066cc:	4b3e      	ldr	r3, [pc, #248]	; (80067c8 <Lslalom_R90+0x1e8>)
 80066ce:	edd3 7a00 	vldr	s15, [r3]
 80066d2:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80067d8 <Lslalom_R90+0x1f8>
 80066d6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80066da:	4b3c      	ldr	r3, [pc, #240]	; (80067cc <Lslalom_R90+0x1ec>)
 80066dc:	edd3 7a00 	vldr	s15, [r3]
 80066e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e8:	d4f0      	bmi.n	80066cc <Lslalom_R90+0xec>
	if(!MF.FLAG.XDIR){
 80066ea:	4b27      	ldr	r3, [pc, #156]	; (8006788 <Lslalom_R90+0x1a8>)
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d104      	bne.n	8006702 <Lslalom_R90+0x122>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80066f8:	2101      	movs	r1, #1
 80066fa:	2001      	movs	r0, #1
 80066fc:	f00a fcb4 	bl	8011068 <turn_dir>
 8006700:	e003      	b.n	800670a <Lslalom_R90+0x12a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);								//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006702:	2103      	movs	r1, #3
 8006704:	2002      	movs	r0, #2
 8006706:	f00a fcaf 	bl	8011068 <turn_dir>
	}

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 800670a:	4a1f      	ldr	r2, [pc, #124]	; (8006788 <Lslalom_R90+0x1a8>)
 800670c:	8813      	ldrh	r3, [r2, #0]
 800670e:	f36f 334d 	bfc	r3, #13, #1
 8006712:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006714:	4b1d      	ldr	r3, [pc, #116]	; (800678c <Lslalom_R90+0x1ac>)
 8006716:	4a1e      	ldr	r2, [pc, #120]	; (8006790 <Lslalom_R90+0x1b0>)
 8006718:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800671a:	4b1e      	ldr	r3, [pc, #120]	; (8006794 <Lslalom_R90+0x1b4>)
 800671c:	4a1c      	ldr	r2, [pc, #112]	; (8006790 <Lslalom_R90+0x1b0>)
 800671e:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8006720:	4b1d      	ldr	r3, [pc, #116]	; (8006798 <Lslalom_R90+0x1b8>)
 8006722:	4a1e      	ldr	r2, [pc, #120]	; (800679c <Lslalom_R90+0x1bc>)
 8006724:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8006726:	4b1e      	ldr	r3, [pc, #120]	; (80067a0 <Lslalom_R90+0x1c0>)
 8006728:	4a1c      	ldr	r2, [pc, #112]	; (800679c <Lslalom_R90+0x1bc>)
 800672a:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 800672c:	f04f 0300 	mov.w	r3, #0
 8006730:	4a1c      	ldr	r2, [pc, #112]	; (80067a4 <Lslalom_R90+0x1c4>)
 8006732:	6013      	str	r3, [r2, #0]
 8006734:	4a1c      	ldr	r2, [pc, #112]	; (80067a8 <Lslalom_R90+0x1c8>)
 8006736:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8006738:	4a13      	ldr	r2, [pc, #76]	; (8006788 <Lslalom_R90+0x1a8>)
 800673a:	8813      	ldrh	r3, [r2, #0]
 800673c:	f043 0304 	orr.w	r3, r3, #4
 8006740:	8013      	strh	r3, [r2, #0]
	control_start();
 8006742:	f7fe fb17 	bl	8004d74 <control_start>
	while(dist_l < LSLALOM_OFFSET_B && dist_r < LSLALOM_OFFSET_B);
 8006746:	bf00      	nop
 8006748:	4b17      	ldr	r3, [pc, #92]	; (80067a8 <Lslalom_R90+0x1c8>)
 800674a:	edd3 7a00 	vldr	s15, [r3]
 800674e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80067ac <Lslalom_R90+0x1cc>
 8006752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800675a:	d509      	bpl.n	8006770 <Lslalom_R90+0x190>
 800675c:	4b11      	ldr	r3, [pc, #68]	; (80067a4 <Lslalom_R90+0x1c4>)
 800675e:	edd3 7a00 	vldr	s15, [r3]
 8006762:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80067ac <Lslalom_R90+0x1cc>
 8006766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800676a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800676e:	d4eb      	bmi.n	8006748 <Lslalom_R90+0x168>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006770:	4b05      	ldr	r3, [pc, #20]	; (8006788 <Lslalom_R90+0x1a8>)
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <Lslalom_R90+0x1a2>
 800677e:	f00c f9cf 	bl	8012b20 <get_wall_info>
}
 8006782:	bf00      	nop
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20000fac 	.word	0x20000fac
 800678c:	20000da0 	.word	0x20000da0
 8006790:	461c4000 	.word	0x461c4000
 8006794:	20000b20 	.word	0x20000b20
 8006798:	200007b4 	.word	0x200007b4
 800679c:	43c80000 	.word	0x43c80000
 80067a0:	200001dc 	.word	0x200001dc
 80067a4:	20000b2c 	.word	0x20000b2c
 80067a8:	200012e8 	.word	0x200012e8
 80067ac:	42480000 	.word	0x42480000
 80067b0:	20000b98 	.word	0x20000b98
 80067b4:	c4fa0000 	.word	0xc4fa0000
 80067b8:	200001e0 	.word	0x200001e0
 80067bc:	200002f0 	.word	0x200002f0
 80067c0:	c3480000 	.word	0xc3480000
 80067c4:	20000b34 	.word	0x20000b34
 80067c8:	20000c40 	.word	0x20000c40
 80067cc:	20000b9c 	.word	0x20000b9c
 80067d0:	42a80000 	.word	0x42a80000
 80067d4:	44fa0000 	.word	0x44fa0000
 80067d8:	42b40000 	.word	0x42b40000

080067dc <Lslalom_L90>:
//Lslalom_L90
// 大回りスラロームで右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L90(void){
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
	full_led_write(YELLOW);
 80067e0:	2006      	movs	r0, #6
 80067e2:	f00c fa11 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 80067e6:	4a67      	ldr	r2, [pc, #412]	; (8006984 <Lslalom_L90+0x1a8>)
 80067e8:	8813      	ldrh	r3, [r2, #0]
 80067ea:	f36f 2308 	bfc	r3, #8, #1
 80067ee:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80067f0:	4b65      	ldr	r3, [pc, #404]	; (8006988 <Lslalom_L90+0x1ac>)
 80067f2:	4a66      	ldr	r2, [pc, #408]	; (800698c <Lslalom_L90+0x1b0>)
 80067f4:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80067f6:	4b66      	ldr	r3, [pc, #408]	; (8006990 <Lslalom_L90+0x1b4>)
 80067f8:	4a64      	ldr	r2, [pc, #400]	; (800698c <Lslalom_L90+0x1b0>)
 80067fa:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 80067fc:	4b65      	ldr	r3, [pc, #404]	; (8006994 <Lslalom_L90+0x1b8>)
 80067fe:	4a66      	ldr	r2, [pc, #408]	; (8006998 <Lslalom_L90+0x1bc>)
 8006800:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8006802:	4b66      	ldr	r3, [pc, #408]	; (800699c <Lslalom_L90+0x1c0>)
 8006804:	4a64      	ldr	r2, [pc, #400]	; (8006998 <Lslalom_L90+0x1bc>)
 8006806:	601a      	str	r2, [r3, #0]

	control_start();
 8006808:	f7fe fab4 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	4a63      	ldr	r2, [pc, #396]	; (80069a0 <Lslalom_L90+0x1c4>)
 8006812:	6013      	str	r3, [r2, #0]
 8006814:	4a63      	ldr	r2, [pc, #396]	; (80069a4 <Lslalom_L90+0x1c8>)
 8006816:	6013      	str	r3, [r2, #0]
	while(dist_l < LSLALOM_OFFSET_F && dist_r < LSLALOM_OFFSET_F);
 8006818:	bf00      	nop
 800681a:	4b62      	ldr	r3, [pc, #392]	; (80069a4 <Lslalom_L90+0x1c8>)
 800681c:	edd3 7a00 	vldr	s15, [r3]
 8006820:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80069a8 <Lslalom_L90+0x1cc>
 8006824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800682c:	d509      	bpl.n	8006842 <Lslalom_L90+0x66>
 800682e:	4b5c      	ldr	r3, [pc, #368]	; (80069a0 <Lslalom_L90+0x1c4>)
 8006830:	edd3 7a00 	vldr	s15, [r3]
 8006834:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80069a8 <Lslalom_L90+0x1cc>
 8006838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800683c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006840:	d4eb      	bmi.n	800681a <Lslalom_L90+0x3e>
	drive_stop();
 8006842:	f7fe fa6f 	bl	8004d24 <drive_stop>
	control_stop();
 8006846:	f7fe faa9 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 800684a:	4a4e      	ldr	r2, [pc, #312]	; (8006984 <Lslalom_L90+0x1a8>)
 800684c:	8813      	ldrh	r3, [r2, #0]
 800684e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006852:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = LSLALOM_DEGACCEL;
 8006854:	4b55      	ldr	r3, [pc, #340]	; (80069ac <Lslalom_L90+0x1d0>)
 8006856:	4a56      	ldr	r2, [pc, #344]	; (80069b0 <Lslalom_L90+0x1d4>)
 8006858:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 800685a:	4b56      	ldr	r3, [pc, #344]	; (80069b4 <Lslalom_L90+0x1d8>)
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	601a      	str	r2, [r3, #0]
	omega_max = LSLALOM_OMEGA;
 8006862:	4b55      	ldr	r3, [pc, #340]	; (80069b8 <Lslalom_L90+0x1dc>)
 8006864:	4a55      	ldr	r2, [pc, #340]	; (80069bc <Lslalom_L90+0x1e0>)
 8006866:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8006868:	4b55      	ldr	r3, [pc, #340]	; (80069c0 <Lslalom_L90+0x1e4>)
 800686a:	4a4b      	ldr	r2, [pc, #300]	; (8006998 <Lslalom_L90+0x1bc>)
 800686c:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 800686e:	4a45      	ldr	r2, [pc, #276]	; (8006984 <Lslalom_L90+0x1a8>)
 8006870:	8813      	ldrh	r3, [r2, #0]
 8006872:	f043 0302 	orr.w	r3, r3, #2
 8006876:	8013      	strh	r3, [r2, #0]
//	while(degree_z < target_degree_z+15);
	while(degree_z < target_degree_z+LSLALOM_DEG);
 8006878:	bf00      	nop
 800687a:	4b52      	ldr	r3, [pc, #328]	; (80069c4 <Lslalom_L90+0x1e8>)
 800687c:	edd3 7a00 	vldr	s15, [r3]
 8006880:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006884:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006888:	4b4f      	ldr	r3, [pc, #316]	; (80069c8 <Lslalom_L90+0x1ec>)
 800688a:	edd3 7a00 	vldr	s15, [r3]
 800688e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006896:	dcf0      	bgt.n	800687a <Lslalom_L90+0x9e>

	target_degaccel_z = 0;
 8006898:	4b44      	ldr	r3, [pc, #272]	; (80069ac <Lslalom_L90+0x1d0>)
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+85);
	while(degree_z < target_degree_z+(90-LSLALOM_DEG+4));
 80068a0:	bf00      	nop
 80068a2:	4b48      	ldr	r3, [pc, #288]	; (80069c4 <Lslalom_L90+0x1e8>)
 80068a4:	edd3 7a00 	vldr	s15, [r3]
 80068a8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80069cc <Lslalom_L90+0x1f0>
 80068ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068b0:	4b45      	ldr	r3, [pc, #276]	; (80069c8 <Lslalom_L90+0x1ec>)
 80068b2:	edd3 7a00 	vldr	s15, [r3]
 80068b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068be:	dcf0      	bgt.n	80068a2 <Lslalom_L90+0xc6>

	target_degaccel_z = -LSLALOM_DEGACCEL;
 80068c0:	4b3a      	ldr	r3, [pc, #232]	; (80069ac <Lslalom_L90+0x1d0>)
 80068c2:	4a43      	ldr	r2, [pc, #268]	; (80069d0 <Lslalom_L90+0x1f4>)
 80068c4:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 80068c6:	bf00      	nop
 80068c8:	4b3e      	ldr	r3, [pc, #248]	; (80069c4 <Lslalom_L90+0x1e8>)
 80068ca:	edd3 7a00 	vldr	s15, [r3]
 80068ce:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80069d4 <Lslalom_L90+0x1f8>
 80068d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068d6:	4b3c      	ldr	r3, [pc, #240]	; (80069c8 <Lslalom_L90+0x1ec>)
 80068d8:	edd3 7a00 	vldr	s15, [r3]
 80068dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e4:	dcf0      	bgt.n	80068c8 <Lslalom_L90+0xec>
	if(!MF.FLAG.XDIR){
 80068e6:	4b27      	ldr	r3, [pc, #156]	; (8006984 <Lslalom_L90+0x1a8>)
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d104      	bne.n	80068fe <Lslalom_L90+0x122>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80068f4:	2101      	movs	r1, #1
 80068f6:	20ff      	movs	r0, #255	; 0xff
 80068f8:	f00a fbb6 	bl	8011068 <turn_dir>
 80068fc:	e003      	b.n	8006906 <Lslalom_L90+0x12a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 80068fe:	2103      	movs	r1, #3
 8006900:	20fe      	movs	r0, #254	; 0xfe
 8006902:	f00a fbb1 	bl	8011068 <turn_dir>
	}

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8006906:	4a1f      	ldr	r2, [pc, #124]	; (8006984 <Lslalom_L90+0x1a8>)
 8006908:	8813      	ldrh	r3, [r2, #0]
 800690a:	f36f 334d 	bfc	r3, #13, #1
 800690e:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006910:	4b1d      	ldr	r3, [pc, #116]	; (8006988 <Lslalom_L90+0x1ac>)
 8006912:	4a1e      	ldr	r2, [pc, #120]	; (800698c <Lslalom_L90+0x1b0>)
 8006914:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006916:	4b1e      	ldr	r3, [pc, #120]	; (8006990 <Lslalom_L90+0x1b4>)
 8006918:	4a1c      	ldr	r2, [pc, #112]	; (800698c <Lslalom_L90+0x1b0>)
 800691a:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 800691c:	4b1d      	ldr	r3, [pc, #116]	; (8006994 <Lslalom_L90+0x1b8>)
 800691e:	4a1e      	ldr	r2, [pc, #120]	; (8006998 <Lslalom_L90+0x1bc>)
 8006920:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8006922:	4b1e      	ldr	r3, [pc, #120]	; (800699c <Lslalom_L90+0x1c0>)
 8006924:	4a1c      	ldr	r2, [pc, #112]	; (8006998 <Lslalom_L90+0x1bc>)
 8006926:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	4a1c      	ldr	r2, [pc, #112]	; (80069a0 <Lslalom_L90+0x1c4>)
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	4a1c      	ldr	r2, [pc, #112]	; (80069a4 <Lslalom_L90+0x1c8>)
 8006932:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8006934:	4a13      	ldr	r2, [pc, #76]	; (8006984 <Lslalom_L90+0x1a8>)
 8006936:	8813      	ldrh	r3, [r2, #0]
 8006938:	f043 0304 	orr.w	r3, r3, #4
 800693c:	8013      	strh	r3, [r2, #0]
	control_start();
 800693e:	f7fe fa19 	bl	8004d74 <control_start>
	while(dist_l < LSLALOM_OFFSET_B && dist_r < LSLALOM_OFFSET_B);
 8006942:	bf00      	nop
 8006944:	4b17      	ldr	r3, [pc, #92]	; (80069a4 <Lslalom_L90+0x1c8>)
 8006946:	edd3 7a00 	vldr	s15, [r3]
 800694a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80069a8 <Lslalom_L90+0x1cc>
 800694e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006956:	d509      	bpl.n	800696c <Lslalom_L90+0x190>
 8006958:	4b11      	ldr	r3, [pc, #68]	; (80069a0 <Lslalom_L90+0x1c4>)
 800695a:	edd3 7a00 	vldr	s15, [r3]
 800695e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80069a8 <Lslalom_L90+0x1cc>
 8006962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800696a:	d4eb      	bmi.n	8006944 <Lslalom_L90+0x168>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 800696c:	4b05      	ldr	r3, [pc, #20]	; (8006984 <Lslalom_L90+0x1a8>)
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <Lslalom_L90+0x1a2>
 800697a:	f00c f8d1 	bl	8012b20 <get_wall_info>
}
 800697e:	bf00      	nop
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000fac 	.word	0x20000fac
 8006988:	20000da0 	.word	0x20000da0
 800698c:	461c4000 	.word	0x461c4000
 8006990:	20000b20 	.word	0x20000b20
 8006994:	200007b4 	.word	0x200007b4
 8006998:	43c80000 	.word	0x43c80000
 800699c:	200001dc 	.word	0x200001dc
 80069a0:	20000b2c 	.word	0x20000b2c
 80069a4:	200012e8 	.word	0x200012e8
 80069a8:	42480000 	.word	0x42480000
 80069ac:	20000b98 	.word	0x20000b98
 80069b0:	44fa0000 	.word	0x44fa0000
 80069b4:	200001e0 	.word	0x200001e0
 80069b8:	20000b24 	.word	0x20000b24
 80069bc:	43480000 	.word	0x43480000
 80069c0:	20000b34 	.word	0x20000b34
 80069c4:	20000c40 	.word	0x20000c40
 80069c8:	20000b9c 	.word	0x20000b9c
 80069cc:	42a80000 	.word	0x42a80000
 80069d0:	c4fa0000 	.word	0xc4fa0000
 80069d4:	42b40000 	.word	0x42b40000

080069d8 <Lslalom_R902>:
//Lslalom_R902
// スラロームで右に90度回転する High Speed
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R902(void){
 80069d8:	b580      	push	{r7, lr}
 80069da:	af00      	add	r7, sp, #0
	full_led_write(PURPLE);
 80069dc:	2005      	movs	r0, #5
 80069de:	f00c f913 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 80069e2:	4a67      	ldr	r2, [pc, #412]	; (8006b80 <Lslalom_R902+0x1a8>)
 80069e4:	8813      	ldrh	r3, [r2, #0]
 80069e6:	f36f 2308 	bfc	r3, #8, #1
 80069ea:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80069ec:	4b65      	ldr	r3, [pc, #404]	; (8006b84 <Lslalom_R902+0x1ac>)
 80069ee:	4a66      	ldr	r2, [pc, #408]	; (8006b88 <Lslalom_R902+0x1b0>)
 80069f0:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80069f2:	4b66      	ldr	r3, [pc, #408]	; (8006b8c <Lslalom_R902+0x1b4>)
 80069f4:	4a64      	ldr	r2, [pc, #400]	; (8006b88 <Lslalom_R902+0x1b0>)
 80069f6:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80069f8:	4b65      	ldr	r3, [pc, #404]	; (8006b90 <Lslalom_R902+0x1b8>)
 80069fa:	4a66      	ldr	r2, [pc, #408]	; (8006b94 <Lslalom_R902+0x1bc>)
 80069fc:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 80069fe:	4b66      	ldr	r3, [pc, #408]	; (8006b98 <Lslalom_R902+0x1c0>)
 8006a00:	4a64      	ldr	r2, [pc, #400]	; (8006b94 <Lslalom_R902+0x1bc>)
 8006a02:	601a      	str	r2, [r3, #0]

	control_start();
 8006a04:	f7fe f9b6 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	4a63      	ldr	r2, [pc, #396]	; (8006b9c <Lslalom_R902+0x1c4>)
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	4a63      	ldr	r2, [pc, #396]	; (8006ba0 <Lslalom_R902+0x1c8>)
 8006a12:	6013      	str	r3, [r2, #0]
	while(dist_l < LSLALOM_H_OFFSET_F && dist_r < LSLALOM_H_OFFSET_F);
 8006a14:	bf00      	nop
 8006a16:	4b62      	ldr	r3, [pc, #392]	; (8006ba0 <Lslalom_R902+0x1c8>)
 8006a18:	edd3 7a00 	vldr	s15, [r3]
 8006a1c:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8006ba4 <Lslalom_R902+0x1cc>
 8006a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a28:	d509      	bpl.n	8006a3e <Lslalom_R902+0x66>
 8006a2a:	4b5c      	ldr	r3, [pc, #368]	; (8006b9c <Lslalom_R902+0x1c4>)
 8006a2c:	edd3 7a00 	vldr	s15, [r3]
 8006a30:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8006ba4 <Lslalom_R902+0x1cc>
 8006a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a3c:	d4eb      	bmi.n	8006a16 <Lslalom_R902+0x3e>
	drive_stop();
 8006a3e:	f7fe f971 	bl	8004d24 <drive_stop>
	control_stop();
 8006a42:	f7fe f9ab 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8006a46:	4a4e      	ldr	r2, [pc, #312]	; (8006b80 <Lslalom_R902+0x1a8>)
 8006a48:	8813      	ldrh	r3, [r2, #0]
 8006a4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a4e:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -LSLALOM_H_DEGACCEL;
 8006a50:	4b55      	ldr	r3, [pc, #340]	; (8006ba8 <Lslalom_R902+0x1d0>)
 8006a52:	4a56      	ldr	r2, [pc, #344]	; (8006bac <Lslalom_R902+0x1d4>)
 8006a54:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8006a56:	4b56      	ldr	r3, [pc, #344]	; (8006bb0 <Lslalom_R902+0x1d8>)
 8006a58:	f04f 0200 	mov.w	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]
	omega_min = -LSLALOM_H_OMEGA;
 8006a5e:	4b55      	ldr	r3, [pc, #340]	; (8006bb4 <Lslalom_R902+0x1dc>)
 8006a60:	4a55      	ldr	r2, [pc, #340]	; (8006bb8 <Lslalom_R902+0x1e0>)
 8006a62:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 8006a64:	4b55      	ldr	r3, [pc, #340]	; (8006bbc <Lslalom_R902+0x1e4>)
 8006a66:	4a4b      	ldr	r2, [pc, #300]	; (8006b94 <Lslalom_R902+0x1bc>)
 8006a68:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8006a6a:	4a45      	ldr	r2, [pc, #276]	; (8006b80 <Lslalom_R902+0x1a8>)
 8006a6c:	8813      	ldrh	r3, [r2, #0]
 8006a6e:	f043 0302 	orr.w	r3, r3, #2
 8006a72:	8013      	strh	r3, [r2, #0]
//	while(degree_z > target_degree_z-45);
	while(degree_z > target_degree_z-LSLALOM_H_DEG);
 8006a74:	bf00      	nop
 8006a76:	4b52      	ldr	r3, [pc, #328]	; (8006bc0 <Lslalom_R902+0x1e8>)
 8006a78:	edd3 7a00 	vldr	s15, [r3]
 8006a7c:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8006bc4 <Lslalom_R902+0x1ec>
 8006a80:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006a84:	4b50      	ldr	r3, [pc, #320]	; (8006bc8 <Lslalom_R902+0x1f0>)
 8006a86:	edd3 7a00 	vldr	s15, [r3]
 8006a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a92:	d4f0      	bmi.n	8006a76 <Lslalom_R902+0x9e>

	target_degaccel_z = 0;
 8006a94:	4b44      	ldr	r3, [pc, #272]	; (8006ba8 <Lslalom_R902+0x1d0>)
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-55);
	while(degree_z > target_degree_z-(90-LSLALOM_H_DEG+4));
 8006a9c:	bf00      	nop
 8006a9e:	4b48      	ldr	r3, [pc, #288]	; (8006bc0 <Lslalom_R902+0x1e8>)
 8006aa0:	edd3 7a00 	vldr	s15, [r3]
 8006aa4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8006bcc <Lslalom_R902+0x1f4>
 8006aa8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006aac:	4b46      	ldr	r3, [pc, #280]	; (8006bc8 <Lslalom_R902+0x1f0>)
 8006aae:	edd3 7a00 	vldr	s15, [r3]
 8006ab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aba:	d4f0      	bmi.n	8006a9e <Lslalom_R902+0xc6>

	target_degaccel_z = LSLALOM_H_DEGACCEL;
 8006abc:	4b3a      	ldr	r3, [pc, #232]	; (8006ba8 <Lslalom_R902+0x1d0>)
 8006abe:	4a44      	ldr	r2, [pc, #272]	; (8006bd0 <Lslalom_R902+0x1f8>)
 8006ac0:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 8006ac2:	bf00      	nop
 8006ac4:	4b3e      	ldr	r3, [pc, #248]	; (8006bc0 <Lslalom_R902+0x1e8>)
 8006ac6:	edd3 7a00 	vldr	s15, [r3]
 8006aca:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8006bd4 <Lslalom_R902+0x1fc>
 8006ace:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006ad2:	4b3d      	ldr	r3, [pc, #244]	; (8006bc8 <Lslalom_R902+0x1f0>)
 8006ad4:	edd3 7a00 	vldr	s15, [r3]
 8006ad8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae0:	d4f0      	bmi.n	8006ac4 <Lslalom_R902+0xec>
	if(!MF.FLAG.XDIR){
 8006ae2:	4b27      	ldr	r3, [pc, #156]	; (8006b80 <Lslalom_R902+0x1a8>)
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d104      	bne.n	8006afa <Lslalom_R902+0x122>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006af0:	2101      	movs	r1, #1
 8006af2:	2001      	movs	r0, #1
 8006af4:	f00a fab8 	bl	8011068 <turn_dir>
 8006af8:	e003      	b.n	8006b02 <Lslalom_R902+0x12a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006afa:	2103      	movs	r1, #3
 8006afc:	2002      	movs	r0, #2
 8006afe:	f00a fab3 	bl	8011068 <turn_dir>
	}

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8006b02:	4a1f      	ldr	r2, [pc, #124]	; (8006b80 <Lslalom_R902+0x1a8>)
 8006b04:	8813      	ldrh	r3, [r2, #0]
 8006b06:	f36f 334d 	bfc	r3, #13, #1
 8006b0a:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006b0c:	4b1d      	ldr	r3, [pc, #116]	; (8006b84 <Lslalom_R902+0x1ac>)
 8006b0e:	4a1e      	ldr	r2, [pc, #120]	; (8006b88 <Lslalom_R902+0x1b0>)
 8006b10:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006b12:	4b1e      	ldr	r3, [pc, #120]	; (8006b8c <Lslalom_R902+0x1b4>)
 8006b14:	4a1c      	ldr	r2, [pc, #112]	; (8006b88 <Lslalom_R902+0x1b0>)
 8006b16:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8006b18:	4b1d      	ldr	r3, [pc, #116]	; (8006b90 <Lslalom_R902+0x1b8>)
 8006b1a:	4a1e      	ldr	r2, [pc, #120]	; (8006b94 <Lslalom_R902+0x1bc>)
 8006b1c:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 8006b1e:	4b1e      	ldr	r3, [pc, #120]	; (8006b98 <Lslalom_R902+0x1c0>)
 8006b20:	4a1c      	ldr	r2, [pc, #112]	; (8006b94 <Lslalom_R902+0x1bc>)
 8006b22:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8006b24:	f04f 0300 	mov.w	r3, #0
 8006b28:	4a1c      	ldr	r2, [pc, #112]	; (8006b9c <Lslalom_R902+0x1c4>)
 8006b2a:	6013      	str	r3, [r2, #0]
 8006b2c:	4a1c      	ldr	r2, [pc, #112]	; (8006ba0 <Lslalom_R902+0x1c8>)
 8006b2e:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8006b30:	4a13      	ldr	r2, [pc, #76]	; (8006b80 <Lslalom_R902+0x1a8>)
 8006b32:	8813      	ldrh	r3, [r2, #0]
 8006b34:	f043 0304 	orr.w	r3, r3, #4
 8006b38:	8013      	strh	r3, [r2, #0]
	control_start();
 8006b3a:	f7fe f91b 	bl	8004d74 <control_start>
	while(dist_l < LSLALOM_H_OFFSET_B && dist_r < LSLALOM_H_OFFSET_B);
 8006b3e:	bf00      	nop
 8006b40:	4b17      	ldr	r3, [pc, #92]	; (8006ba0 <Lslalom_R902+0x1c8>)
 8006b42:	edd3 7a00 	vldr	s15, [r3]
 8006b46:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006ba4 <Lslalom_R902+0x1cc>
 8006b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b52:	d509      	bpl.n	8006b68 <Lslalom_R902+0x190>
 8006b54:	4b11      	ldr	r3, [pc, #68]	; (8006b9c <Lslalom_R902+0x1c4>)
 8006b56:	edd3 7a00 	vldr	s15, [r3]
 8006b5a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8006ba4 <Lslalom_R902+0x1cc>
 8006b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b66:	d4eb      	bmi.n	8006b40 <Lslalom_R902+0x168>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006b68:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <Lslalom_R902+0x1a8>)
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <Lslalom_R902+0x1a2>
 8006b76:	f00b ffd3 	bl	8012b20 <get_wall_info>
}
 8006b7a:	bf00      	nop
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000fac 	.word	0x20000fac
 8006b84:	20000da0 	.word	0x20000da0
 8006b88:	461c4000 	.word	0x461c4000
 8006b8c:	20000b20 	.word	0x20000b20
 8006b90:	200007b4 	.word	0x200007b4
 8006b94:	44480000 	.word	0x44480000
 8006b98:	200001dc 	.word	0x200001dc
 8006b9c:	20000b2c 	.word	0x20000b2c
 8006ba0:	200012e8 	.word	0x200012e8
 8006ba4:	42700000 	.word	0x42700000
 8006ba8:	20000b98 	.word	0x20000b98
 8006bac:	c58ca000 	.word	0xc58ca000
 8006bb0:	200001e0 	.word	0x200001e0
 8006bb4:	200002f0 	.word	0x200002f0
 8006bb8:	c4160000 	.word	0xc4160000
 8006bbc:	20000b34 	.word	0x20000b34
 8006bc0:	20000c40 	.word	0x20000c40
 8006bc4:	42200000 	.word	0x42200000
 8006bc8:	20000b9c 	.word	0x20000b9c
 8006bcc:	42580000 	.word	0x42580000
 8006bd0:	458ca000 	.word	0x458ca000
 8006bd4:	42b40000 	.word	0x42b40000

08006bd8 <Lslalom_L902>:
//Lslalom_L902
// 大回りスラロームで右に90度回転する High Speed
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L902(void){
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	af00      	add	r7, sp, #0
	full_led_write(YELLOW);
 8006bdc:	2006      	movs	r0, #6
 8006bde:	f00c f813 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 8006be2:	4a67      	ldr	r2, [pc, #412]	; (8006d80 <Lslalom_L902+0x1a8>)
 8006be4:	8813      	ldrh	r3, [r2, #0]
 8006be6:	f36f 2308 	bfc	r3, #8, #1
 8006bea:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006bec:	4b65      	ldr	r3, [pc, #404]	; (8006d84 <Lslalom_L902+0x1ac>)
 8006bee:	4a66      	ldr	r2, [pc, #408]	; (8006d88 <Lslalom_L902+0x1b0>)
 8006bf0:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006bf2:	4b66      	ldr	r3, [pc, #408]	; (8006d8c <Lslalom_L902+0x1b4>)
 8006bf4:	4a64      	ldr	r2, [pc, #400]	; (8006d88 <Lslalom_L902+0x1b0>)
 8006bf6:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8006bf8:	4b65      	ldr	r3, [pc, #404]	; (8006d90 <Lslalom_L902+0x1b8>)
 8006bfa:	4a66      	ldr	r2, [pc, #408]	; (8006d94 <Lslalom_L902+0x1bc>)
 8006bfc:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 8006bfe:	4b66      	ldr	r3, [pc, #408]	; (8006d98 <Lslalom_L902+0x1c0>)
 8006c00:	4a64      	ldr	r2, [pc, #400]	; (8006d94 <Lslalom_L902+0x1bc>)
 8006c02:	601a      	str	r2, [r3, #0]

	control_start();
 8006c04:	f7fe f8b6 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8006c08:	f04f 0300 	mov.w	r3, #0
 8006c0c:	4a63      	ldr	r2, [pc, #396]	; (8006d9c <Lslalom_L902+0x1c4>)
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	4a63      	ldr	r2, [pc, #396]	; (8006da0 <Lslalom_L902+0x1c8>)
 8006c12:	6013      	str	r3, [r2, #0]
	while(dist_l < LSLALOM_H_OFFSET_F && dist_r < LSLALOM_H_OFFSET_F);
 8006c14:	bf00      	nop
 8006c16:	4b62      	ldr	r3, [pc, #392]	; (8006da0 <Lslalom_L902+0x1c8>)
 8006c18:	edd3 7a00 	vldr	s15, [r3]
 8006c1c:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8006da4 <Lslalom_L902+0x1cc>
 8006c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c28:	d509      	bpl.n	8006c3e <Lslalom_L902+0x66>
 8006c2a:	4b5c      	ldr	r3, [pc, #368]	; (8006d9c <Lslalom_L902+0x1c4>)
 8006c2c:	edd3 7a00 	vldr	s15, [r3]
 8006c30:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8006da4 <Lslalom_L902+0x1cc>
 8006c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c3c:	d4eb      	bmi.n	8006c16 <Lslalom_L902+0x3e>
	drive_stop();
 8006c3e:	f7fe f871 	bl	8004d24 <drive_stop>
	control_stop();
 8006c42:	f7fe f8ab 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8006c46:	4a4e      	ldr	r2, [pc, #312]	; (8006d80 <Lslalom_L902+0x1a8>)
 8006c48:	8813      	ldrh	r3, [r2, #0]
 8006c4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c4e:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = LSLALOM_H_DEGACCEL;
 8006c50:	4b55      	ldr	r3, [pc, #340]	; (8006da8 <Lslalom_L902+0x1d0>)
 8006c52:	4a56      	ldr	r2, [pc, #344]	; (8006dac <Lslalom_L902+0x1d4>)
 8006c54:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8006c56:	4b56      	ldr	r3, [pc, #344]	; (8006db0 <Lslalom_L902+0x1d8>)
 8006c58:	f04f 0200 	mov.w	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
	omega_max = LSLALOM_H_OMEGA;
 8006c5e:	4b55      	ldr	r3, [pc, #340]	; (8006db4 <Lslalom_L902+0x1dc>)
 8006c60:	4a55      	ldr	r2, [pc, #340]	; (8006db8 <Lslalom_L902+0x1e0>)
 8006c62:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 8006c64:	4b55      	ldr	r3, [pc, #340]	; (8006dbc <Lslalom_L902+0x1e4>)
 8006c66:	4a4b      	ldr	r2, [pc, #300]	; (8006d94 <Lslalom_L902+0x1bc>)
 8006c68:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8006c6a:	4a45      	ldr	r2, [pc, #276]	; (8006d80 <Lslalom_L902+0x1a8>)
 8006c6c:	8813      	ldrh	r3, [r2, #0]
 8006c6e:	f043 0302 	orr.w	r3, r3, #2
 8006c72:	8013      	strh	r3, [r2, #0]
//	while(degree_z < target_degree_z+45);
	while(degree_z < target_degree_z+LSLALOM_H_DEG);
 8006c74:	bf00      	nop
 8006c76:	4b52      	ldr	r3, [pc, #328]	; (8006dc0 <Lslalom_L902+0x1e8>)
 8006c78:	edd3 7a00 	vldr	s15, [r3]
 8006c7c:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8006dc4 <Lslalom_L902+0x1ec>
 8006c80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c84:	4b50      	ldr	r3, [pc, #320]	; (8006dc8 <Lslalom_L902+0x1f0>)
 8006c86:	edd3 7a00 	vldr	s15, [r3]
 8006c8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c92:	dcf0      	bgt.n	8006c76 <Lslalom_L902+0x9e>

	target_degaccel_z = 0;
 8006c94:	4b44      	ldr	r3, [pc, #272]	; (8006da8 <Lslalom_L902+0x1d0>)
 8006c96:	f04f 0200 	mov.w	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+55);
	while(degree_z < target_degree_z+(90-LSLALOM_H_DEG+4));
 8006c9c:	bf00      	nop
 8006c9e:	4b48      	ldr	r3, [pc, #288]	; (8006dc0 <Lslalom_L902+0x1e8>)
 8006ca0:	edd3 7a00 	vldr	s15, [r3]
 8006ca4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8006dcc <Lslalom_L902+0x1f4>
 8006ca8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cac:	4b46      	ldr	r3, [pc, #280]	; (8006dc8 <Lslalom_L902+0x1f0>)
 8006cae:	edd3 7a00 	vldr	s15, [r3]
 8006cb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cba:	dcf0      	bgt.n	8006c9e <Lslalom_L902+0xc6>

	target_degaccel_z = -LSLALOM_H_DEGACCEL;
 8006cbc:	4b3a      	ldr	r3, [pc, #232]	; (8006da8 <Lslalom_L902+0x1d0>)
 8006cbe:	4a44      	ldr	r2, [pc, #272]	; (8006dd0 <Lslalom_L902+0x1f8>)
 8006cc0:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 8006cc2:	bf00      	nop
 8006cc4:	4b3e      	ldr	r3, [pc, #248]	; (8006dc0 <Lslalom_L902+0x1e8>)
 8006cc6:	edd3 7a00 	vldr	s15, [r3]
 8006cca:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8006dd4 <Lslalom_L902+0x1fc>
 8006cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cd2:	4b3d      	ldr	r3, [pc, #244]	; (8006dc8 <Lslalom_L902+0x1f0>)
 8006cd4:	edd3 7a00 	vldr	s15, [r3]
 8006cd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce0:	dcf0      	bgt.n	8006cc4 <Lslalom_L902+0xec>
	if(!MF.FLAG.XDIR){
 8006ce2:	4b27      	ldr	r3, [pc, #156]	; (8006d80 <Lslalom_L902+0x1a8>)
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d104      	bne.n	8006cfa <Lslalom_L902+0x122>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	20ff      	movs	r0, #255	; 0xff
 8006cf4:	f00a f9b8 	bl	8011068 <turn_dir>
 8006cf8:	e003      	b.n	8006d02 <Lslalom_L902+0x12a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006cfa:	2103      	movs	r1, #3
 8006cfc:	20fe      	movs	r0, #254	; 0xfe
 8006cfe:	f00a f9b3 	bl	8011068 <turn_dir>
	}

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8006d02:	4a1f      	ldr	r2, [pc, #124]	; (8006d80 <Lslalom_L902+0x1a8>)
 8006d04:	8813      	ldrh	r3, [r2, #0]
 8006d06:	f36f 334d 	bfc	r3, #13, #1
 8006d0a:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006d0c:	4b1d      	ldr	r3, [pc, #116]	; (8006d84 <Lslalom_L902+0x1ac>)
 8006d0e:	4a1e      	ldr	r2, [pc, #120]	; (8006d88 <Lslalom_L902+0x1b0>)
 8006d10:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006d12:	4b1e      	ldr	r3, [pc, #120]	; (8006d8c <Lslalom_L902+0x1b4>)
 8006d14:	4a1c      	ldr	r2, [pc, #112]	; (8006d88 <Lslalom_L902+0x1b0>)
 8006d16:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8006d18:	4b1d      	ldr	r3, [pc, #116]	; (8006d90 <Lslalom_L902+0x1b8>)
 8006d1a:	4a1e      	ldr	r2, [pc, #120]	; (8006d94 <Lslalom_L902+0x1bc>)
 8006d1c:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 8006d1e:	4b1e      	ldr	r3, [pc, #120]	; (8006d98 <Lslalom_L902+0x1c0>)
 8006d20:	4a1c      	ldr	r2, [pc, #112]	; (8006d94 <Lslalom_L902+0x1bc>)
 8006d22:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	4a1c      	ldr	r2, [pc, #112]	; (8006d9c <Lslalom_L902+0x1c4>)
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	4a1c      	ldr	r2, [pc, #112]	; (8006da0 <Lslalom_L902+0x1c8>)
 8006d2e:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8006d30:	4a13      	ldr	r2, [pc, #76]	; (8006d80 <Lslalom_L902+0x1a8>)
 8006d32:	8813      	ldrh	r3, [r2, #0]
 8006d34:	f043 0304 	orr.w	r3, r3, #4
 8006d38:	8013      	strh	r3, [r2, #0]
	control_start();
 8006d3a:	f7fe f81b 	bl	8004d74 <control_start>
	while(dist_l < LSLALOM_H_OFFSET_B && dist_r < LSLALOM_H_OFFSET_B);
 8006d3e:	bf00      	nop
 8006d40:	4b17      	ldr	r3, [pc, #92]	; (8006da0 <Lslalom_L902+0x1c8>)
 8006d42:	edd3 7a00 	vldr	s15, [r3]
 8006d46:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006da4 <Lslalom_L902+0x1cc>
 8006d4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d52:	d509      	bpl.n	8006d68 <Lslalom_L902+0x190>
 8006d54:	4b11      	ldr	r3, [pc, #68]	; (8006d9c <Lslalom_L902+0x1c4>)
 8006d56:	edd3 7a00 	vldr	s15, [r3]
 8006d5a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8006da4 <Lslalom_L902+0x1cc>
 8006d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d66:	d4eb      	bmi.n	8006d40 <Lslalom_L902+0x168>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006d68:	4b05      	ldr	r3, [pc, #20]	; (8006d80 <Lslalom_L902+0x1a8>)
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <Lslalom_L902+0x1a2>
 8006d76:	f00b fed3 	bl	8012b20 <get_wall_info>
}
 8006d7a:	bf00      	nop
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	20000fac 	.word	0x20000fac
 8006d84:	20000da0 	.word	0x20000da0
 8006d88:	461c4000 	.word	0x461c4000
 8006d8c:	20000b20 	.word	0x20000b20
 8006d90:	200007b4 	.word	0x200007b4
 8006d94:	44480000 	.word	0x44480000
 8006d98:	200001dc 	.word	0x200001dc
 8006d9c:	20000b2c 	.word	0x20000b2c
 8006da0:	200012e8 	.word	0x200012e8
 8006da4:	42700000 	.word	0x42700000
 8006da8:	20000b98 	.word	0x20000b98
 8006dac:	458ca000 	.word	0x458ca000
 8006db0:	200001e0 	.word	0x200001e0
 8006db4:	20000b24 	.word	0x20000b24
 8006db8:	44160000 	.word	0x44160000
 8006dbc:	20000b34 	.word	0x20000b34
 8006dc0:	20000c40 	.word	0x20000c40
 8006dc4:	42200000 	.word	0x42200000
 8006dc8:	20000b9c 	.word	0x20000b9c
 8006dcc:	42580000 	.word	0x42580000
 8006dd0:	c58ca000 	.word	0xc58ca000
 8006dd4:	42b40000 	.word	0x42b40000

08006dd8 <Lslalom_R903>:
//Lslalom_R903
// スラロームで右に90度回転する High High Speed
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R903(void){
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	af00      	add	r7, sp, #0
	full_led_write(PURPLE);
 8006ddc:	2005      	movs	r0, #5
 8006dde:	f00b ff13 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 8006de2:	4a67      	ldr	r2, [pc, #412]	; (8006f80 <Lslalom_R903+0x1a8>)
 8006de4:	8813      	ldrh	r3, [r2, #0]
 8006de6:	f36f 2308 	bfc	r3, #8, #1
 8006dea:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006dec:	4b65      	ldr	r3, [pc, #404]	; (8006f84 <Lslalom_R903+0x1ac>)
 8006dee:	4a66      	ldr	r2, [pc, #408]	; (8006f88 <Lslalom_R903+0x1b0>)
 8006df0:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006df2:	4b66      	ldr	r3, [pc, #408]	; (8006f8c <Lslalom_R903+0x1b4>)
 8006df4:	4a64      	ldr	r2, [pc, #400]	; (8006f88 <Lslalom_R903+0x1b0>)
 8006df6:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH_HIGH;
 8006df8:	4b65      	ldr	r3, [pc, #404]	; (8006f90 <Lslalom_R903+0x1b8>)
 8006dfa:	4a66      	ldr	r2, [pc, #408]	; (8006f94 <Lslalom_R903+0x1bc>)
 8006dfc:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH_HIGH;
 8006dfe:	4b66      	ldr	r3, [pc, #408]	; (8006f98 <Lslalom_R903+0x1c0>)
 8006e00:	4a64      	ldr	r2, [pc, #400]	; (8006f94 <Lslalom_R903+0x1bc>)
 8006e02:	601a      	str	r2, [r3, #0]

	control_start();
 8006e04:	f7fd ffb6 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8006e08:	f04f 0300 	mov.w	r3, #0
 8006e0c:	4a63      	ldr	r2, [pc, #396]	; (8006f9c <Lslalom_R903+0x1c4>)
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	4a63      	ldr	r2, [pc, #396]	; (8006fa0 <Lslalom_R903+0x1c8>)
 8006e12:	6013      	str	r3, [r2, #0]
	while(dist_l < LSLALOM_H_H_OFFSET_F && dist_r < LSLALOM_H_H_OFFSET_F);
 8006e14:	bf00      	nop
 8006e16:	4b62      	ldr	r3, [pc, #392]	; (8006fa0 <Lslalom_R903+0x1c8>)
 8006e18:	edd3 7a00 	vldr	s15, [r3]
 8006e1c:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8006fa4 <Lslalom_R903+0x1cc>
 8006e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e28:	d509      	bpl.n	8006e3e <Lslalom_R903+0x66>
 8006e2a:	4b5c      	ldr	r3, [pc, #368]	; (8006f9c <Lslalom_R903+0x1c4>)
 8006e2c:	edd3 7a00 	vldr	s15, [r3]
 8006e30:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8006fa4 <Lslalom_R903+0x1cc>
 8006e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e3c:	d4eb      	bmi.n	8006e16 <Lslalom_R903+0x3e>
	drive_stop();
 8006e3e:	f7fd ff71 	bl	8004d24 <drive_stop>
	control_stop();
 8006e42:	f7fd ffab 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8006e46:	4a4e      	ldr	r2, [pc, #312]	; (8006f80 <Lslalom_R903+0x1a8>)
 8006e48:	8813      	ldrh	r3, [r2, #0]
 8006e4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e4e:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -LSLALOM_H_H_DEGACCEL;
 8006e50:	4b55      	ldr	r3, [pc, #340]	; (8006fa8 <Lslalom_R903+0x1d0>)
 8006e52:	4a56      	ldr	r2, [pc, #344]	; (8006fac <Lslalom_R903+0x1d4>)
 8006e54:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8006e56:	4b56      	ldr	r3, [pc, #344]	; (8006fb0 <Lslalom_R903+0x1d8>)
 8006e58:	f04f 0200 	mov.w	r2, #0
 8006e5c:	601a      	str	r2, [r3, #0]
	omega_min = -LSLALOM_H_H_OMEGA;
 8006e5e:	4b55      	ldr	r3, [pc, #340]	; (8006fb4 <Lslalom_R903+0x1dc>)
 8006e60:	4a55      	ldr	r2, [pc, #340]	; (8006fb8 <Lslalom_R903+0x1e0>)
 8006e62:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH_HIGH;
 8006e64:	4b55      	ldr	r3, [pc, #340]	; (8006fbc <Lslalom_R903+0x1e4>)
 8006e66:	4a4b      	ldr	r2, [pc, #300]	; (8006f94 <Lslalom_R903+0x1bc>)
 8006e68:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8006e6a:	4a45      	ldr	r2, [pc, #276]	; (8006f80 <Lslalom_R903+0x1a8>)
 8006e6c:	8813      	ldrh	r3, [r2, #0]
 8006e6e:	f043 0302 	orr.w	r3, r3, #2
 8006e72:	8013      	strh	r3, [r2, #0]
//	while(degree_z > target_degree_z-40);
	while(degree_z > target_degree_z-LSLALOM_H_H_DEG);
 8006e74:	bf00      	nop
 8006e76:	4b52      	ldr	r3, [pc, #328]	; (8006fc0 <Lslalom_R903+0x1e8>)
 8006e78:	edd3 7a00 	vldr	s15, [r3]
 8006e7c:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8006fc4 <Lslalom_R903+0x1ec>
 8006e80:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006e84:	4b50      	ldr	r3, [pc, #320]	; (8006fc8 <Lslalom_R903+0x1f0>)
 8006e86:	edd3 7a00 	vldr	s15, [r3]
 8006e8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e92:	d4f0      	bmi.n	8006e76 <Lslalom_R903+0x9e>

	target_degaccel_z = 0;
 8006e94:	4b44      	ldr	r3, [pc, #272]	; (8006fa8 <Lslalom_R903+0x1d0>)
 8006e96:	f04f 0200 	mov.w	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-50);
	while(degree_z > target_degree_z-(90-LSLALOM_H_H_DEG+2));
 8006e9c:	bf00      	nop
 8006e9e:	4b48      	ldr	r3, [pc, #288]	; (8006fc0 <Lslalom_R903+0x1e8>)
 8006ea0:	edd3 7a00 	vldr	s15, [r3]
 8006ea4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8006fcc <Lslalom_R903+0x1f4>
 8006ea8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006eac:	4b46      	ldr	r3, [pc, #280]	; (8006fc8 <Lslalom_R903+0x1f0>)
 8006eae:	edd3 7a00 	vldr	s15, [r3]
 8006eb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eba:	d4f0      	bmi.n	8006e9e <Lslalom_R903+0xc6>

	target_degaccel_z = LSLALOM_H_H_DEGACCEL;
 8006ebc:	4b3a      	ldr	r3, [pc, #232]	; (8006fa8 <Lslalom_R903+0x1d0>)
 8006ebe:	4a32      	ldr	r2, [pc, #200]	; (8006f88 <Lslalom_R903+0x1b0>)
 8006ec0:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-80);
	while(degree_z > target_degree_z-90);
 8006ec2:	bf00      	nop
 8006ec4:	4b3e      	ldr	r3, [pc, #248]	; (8006fc0 <Lslalom_R903+0x1e8>)
 8006ec6:	edd3 7a00 	vldr	s15, [r3]
 8006eca:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8006fd0 <Lslalom_R903+0x1f8>
 8006ece:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006ed2:	4b3d      	ldr	r3, [pc, #244]	; (8006fc8 <Lslalom_R903+0x1f0>)
 8006ed4:	edd3 7a00 	vldr	s15, [r3]
 8006ed8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee0:	d4f0      	bmi.n	8006ec4 <Lslalom_R903+0xec>
	if(!MF.FLAG.XDIR){
 8006ee2:	4b27      	ldr	r3, [pc, #156]	; (8006f80 <Lslalom_R903+0x1a8>)
 8006ee4:	881b      	ldrh	r3, [r3, #0]
 8006ee6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d104      	bne.n	8006efa <Lslalom_R903+0x122>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	2001      	movs	r0, #1
 8006ef4:	f00a f8b8 	bl	8011068 <turn_dir>
 8006ef8:	e003      	b.n	8006f02 <Lslalom_R903+0x12a>
	}else{
		turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8006efa:	2103      	movs	r1, #3
 8006efc:	2002      	movs	r0, #2
 8006efe:	f00a f8b3 	bl	8011068 <turn_dir>
	}

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8006f02:	4a1f      	ldr	r2, [pc, #124]	; (8006f80 <Lslalom_R903+0x1a8>)
 8006f04:	8813      	ldrh	r3, [r2, #0]
 8006f06:	f36f 334d 	bfc	r3, #13, #1
 8006f0a:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006f0c:	4b1d      	ldr	r3, [pc, #116]	; (8006f84 <Lslalom_R903+0x1ac>)
 8006f0e:	4a1e      	ldr	r2, [pc, #120]	; (8006f88 <Lslalom_R903+0x1b0>)
 8006f10:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006f12:	4b1e      	ldr	r3, [pc, #120]	; (8006f8c <Lslalom_R903+0x1b4>)
 8006f14:	4a1c      	ldr	r2, [pc, #112]	; (8006f88 <Lslalom_R903+0x1b0>)
 8006f16:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH_HIGH;
 8006f18:	4b1d      	ldr	r3, [pc, #116]	; (8006f90 <Lslalom_R903+0x1b8>)
 8006f1a:	4a1e      	ldr	r2, [pc, #120]	; (8006f94 <Lslalom_R903+0x1bc>)
 8006f1c:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH_HIGH;
 8006f1e:	4b1e      	ldr	r3, [pc, #120]	; (8006f98 <Lslalom_R903+0x1c0>)
 8006f20:	4a1c      	ldr	r2, [pc, #112]	; (8006f94 <Lslalom_R903+0x1bc>)
 8006f22:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8006f24:	f04f 0300 	mov.w	r3, #0
 8006f28:	4a1c      	ldr	r2, [pc, #112]	; (8006f9c <Lslalom_R903+0x1c4>)
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	4a1c      	ldr	r2, [pc, #112]	; (8006fa0 <Lslalom_R903+0x1c8>)
 8006f2e:	6013      	str	r3, [r2, #0]
 	MF.FLAG.SPD = 1;
 8006f30:	4a13      	ldr	r2, [pc, #76]	; (8006f80 <Lslalom_R903+0x1a8>)
 8006f32:	8813      	ldrh	r3, [r2, #0]
 8006f34:	f043 0304 	orr.w	r3, r3, #4
 8006f38:	8013      	strh	r3, [r2, #0]
	control_start();
 8006f3a:	f7fd ff1b 	bl	8004d74 <control_start>
	while(dist_l < LSLALOM_H_H_OFFSET_B && dist_r < LSLALOM_H_H_OFFSET_B);
 8006f3e:	bf00      	nop
 8006f40:	4b17      	ldr	r3, [pc, #92]	; (8006fa0 <Lslalom_R903+0x1c8>)
 8006f42:	edd3 7a00 	vldr	s15, [r3]
 8006f46:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006fa4 <Lslalom_R903+0x1cc>
 8006f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f52:	d509      	bpl.n	8006f68 <Lslalom_R903+0x190>
 8006f54:	4b11      	ldr	r3, [pc, #68]	; (8006f9c <Lslalom_R903+0x1c4>)
 8006f56:	edd3 7a00 	vldr	s15, [r3]
 8006f5a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8006fa4 <Lslalom_R903+0x1cc>
 8006f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f66:	d4eb      	bmi.n	8006f40 <Lslalom_R903+0x168>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8006f68:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <Lslalom_R903+0x1a8>)
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <Lslalom_R903+0x1a2>
 8006f76:	f00b fdd3 	bl	8012b20 <get_wall_info>
}
 8006f7a:	bf00      	nop
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20000fac 	.word	0x20000fac
 8006f84:	20000da0 	.word	0x20000da0
 8006f88:	461c4000 	.word	0x461c4000
 8006f8c:	20000b20 	.word	0x20000b20
 8006f90:	200007b4 	.word	0x200007b4
 8006f94:	44960000 	.word	0x44960000
 8006f98:	200001dc 	.word	0x200001dc
 8006f9c:	20000b2c 	.word	0x20000b2c
 8006fa0:	200012e8 	.word	0x200012e8
 8006fa4:	42280000 	.word	0x42280000
 8006fa8:	20000b98 	.word	0x20000b98
 8006fac:	c61c4000 	.word	0xc61c4000
 8006fb0:	200001e0 	.word	0x200001e0
 8006fb4:	200002f0 	.word	0x200002f0
 8006fb8:	c4480000 	.word	0xc4480000
 8006fbc:	20000b34 	.word	0x20000b34
 8006fc0:	20000c40 	.word	0x20000c40
 8006fc4:	42000000 	.word	0x42000000
 8006fc8:	20000b9c 	.word	0x20000b9c
 8006fcc:	42700000 	.word	0x42700000
 8006fd0:	42b40000 	.word	0x42b40000

08006fd4 <Lslalom_L903>:
//Lslalom_L903
// 大回りスラロームで右に90度回転する High High Speed
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L903(void){
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	af00      	add	r7, sp, #0
	full_led_write(YELLOW);
 8006fd8:	2006      	movs	r0, #6
 8006fda:	f00b fe15 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 8006fde:	4a6f      	ldr	r2, [pc, #444]	; (800719c <Lslalom_L903+0x1c8>)
 8006fe0:	8813      	ldrh	r3, [r2, #0]
 8006fe2:	f36f 2308 	bfc	r3, #8, #1
 8006fe6:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8006fe8:	4b6d      	ldr	r3, [pc, #436]	; (80071a0 <Lslalom_L903+0x1cc>)
 8006fea:	4a6e      	ldr	r2, [pc, #440]	; (80071a4 <Lslalom_L903+0x1d0>)
 8006fec:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8006fee:	4b6e      	ldr	r3, [pc, #440]	; (80071a8 <Lslalom_L903+0x1d4>)
 8006ff0:	4a6c      	ldr	r2, [pc, #432]	; (80071a4 <Lslalom_L903+0x1d0>)
 8006ff2:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH_HIGH;
 8006ff4:	4b6d      	ldr	r3, [pc, #436]	; (80071ac <Lslalom_L903+0x1d8>)
 8006ff6:	4a6e      	ldr	r2, [pc, #440]	; (80071b0 <Lslalom_L903+0x1dc>)
 8006ff8:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH_HIGH;
 8006ffa:	4b6e      	ldr	r3, [pc, #440]	; (80071b4 <Lslalom_L903+0x1e0>)
 8006ffc:	4a6c      	ldr	r2, [pc, #432]	; (80071b0 <Lslalom_L903+0x1dc>)
 8006ffe:	601a      	str	r2, [r3, #0]

	control_start();
 8007000:	f7fd feb8 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8007004:	f04f 0300 	mov.w	r3, #0
 8007008:	4a6b      	ldr	r2, [pc, #428]	; (80071b8 <Lslalom_L903+0x1e4>)
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	4a6b      	ldr	r2, [pc, #428]	; (80071bc <Lslalom_L903+0x1e8>)
 800700e:	6013      	str	r3, [r2, #0]
	while(dist_l < LSLALOM_H_H_OFFSET_F && dist_r < LSLALOM_H_H_OFFSET_F);
 8007010:	bf00      	nop
 8007012:	4b6a      	ldr	r3, [pc, #424]	; (80071bc <Lslalom_L903+0x1e8>)
 8007014:	edd3 7a00 	vldr	s15, [r3]
 8007018:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80071c0 <Lslalom_L903+0x1ec>
 800701c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007024:	d509      	bpl.n	800703a <Lslalom_L903+0x66>
 8007026:	4b64      	ldr	r3, [pc, #400]	; (80071b8 <Lslalom_L903+0x1e4>)
 8007028:	edd3 7a00 	vldr	s15, [r3]
 800702c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80071c0 <Lslalom_L903+0x1ec>
 8007030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007038:	d4eb      	bmi.n	8007012 <Lslalom_L903+0x3e>
	drive_stop();
 800703a:	f7fd fe73 	bl	8004d24 <drive_stop>
	control_stop();
 800703e:	f7fd fead 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8007042:	4a56      	ldr	r2, [pc, #344]	; (800719c <Lslalom_L903+0x1c8>)
 8007044:	8813      	ldrh	r3, [r2, #0]
 8007046:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800704a:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = LSLALOM_H_H_DEGACCEL;
 800704c:	4b5d      	ldr	r3, [pc, #372]	; (80071c4 <Lslalom_L903+0x1f0>)
 800704e:	4a55      	ldr	r2, [pc, #340]	; (80071a4 <Lslalom_L903+0x1d0>)
 8007050:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8007052:	4b5d      	ldr	r3, [pc, #372]	; (80071c8 <Lslalom_L903+0x1f4>)
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	601a      	str	r2, [r3, #0]
	omega_max = LSLALOM_H_H_OMEGA;
 800705a:	4b5c      	ldr	r3, [pc, #368]	; (80071cc <Lslalom_L903+0x1f8>)
 800705c:	4a5c      	ldr	r2, [pc, #368]	; (80071d0 <Lslalom_L903+0x1fc>)
 800705e:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH_HIGH;
 8007060:	4b5c      	ldr	r3, [pc, #368]	; (80071d4 <Lslalom_L903+0x200>)
 8007062:	4a53      	ldr	r2, [pc, #332]	; (80071b0 <Lslalom_L903+0x1dc>)
 8007064:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8007066:	4a4d      	ldr	r2, [pc, #308]	; (800719c <Lslalom_L903+0x1c8>)
 8007068:	8813      	ldrh	r3, [r2, #0]
 800706a:	f043 0302 	orr.w	r3, r3, #2
 800706e:	8013      	strh	r3, [r2, #0]
//	while(degree_z < target_degree_z+40);
	while(degree_z < target_degree_z+LSLALOM_H_H_DEG);
 8007070:	bf00      	nop
 8007072:	4b59      	ldr	r3, [pc, #356]	; (80071d8 <Lslalom_L903+0x204>)
 8007074:	edd3 7a00 	vldr	s15, [r3]
 8007078:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80071dc <Lslalom_L903+0x208>
 800707c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007080:	4b57      	ldr	r3, [pc, #348]	; (80071e0 <Lslalom_L903+0x20c>)
 8007082:	edd3 7a00 	vldr	s15, [r3]
 8007086:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800708a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800708e:	dcf0      	bgt.n	8007072 <Lslalom_L903+0x9e>

	target_degaccel_z = 0;
 8007090:	4b4c      	ldr	r3, [pc, #304]	; (80071c4 <Lslalom_L903+0x1f0>)
 8007092:	f04f 0200 	mov.w	r2, #0
 8007096:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+50);
	while(degree_z < target_degree_z+(90-LSLALOM_H_H_DEG+2));
 8007098:	bf00      	nop
 800709a:	4b4f      	ldr	r3, [pc, #316]	; (80071d8 <Lslalom_L903+0x204>)
 800709c:	edd3 7a00 	vldr	s15, [r3]
 80070a0:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80071e4 <Lslalom_L903+0x210>
 80070a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070a8:	4b4d      	ldr	r3, [pc, #308]	; (80071e0 <Lslalom_L903+0x20c>)
 80070aa:	edd3 7a00 	vldr	s15, [r3]
 80070ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b6:	dcf0      	bgt.n	800709a <Lslalom_L903+0xc6>

	target_degaccel_z = -LSLALOM_H_H_DEGACCEL;
 80070b8:	4b42      	ldr	r3, [pc, #264]	; (80071c4 <Lslalom_L903+0x1f0>)
 80070ba:	4a4b      	ldr	r2, [pc, #300]	; (80071e8 <Lslalom_L903+0x214>)
 80070bc:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+80);
 80070be:	bf00      	nop
 80070c0:	4b45      	ldr	r3, [pc, #276]	; (80071d8 <Lslalom_L903+0x204>)
 80070c2:	edd3 7a00 	vldr	s15, [r3]
 80070c6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80071ec <Lslalom_L903+0x218>
 80070ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ce:	4b44      	ldr	r3, [pc, #272]	; (80071e0 <Lslalom_L903+0x20c>)
 80070d0:	edd3 7a00 	vldr	s15, [r3]
 80070d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070dc:	dcf0      	bgt.n	80070c0 <Lslalom_L903+0xec>
	while(degree_z < target_degree_z+90);
 80070de:	bf00      	nop
 80070e0:	4b3d      	ldr	r3, [pc, #244]	; (80071d8 <Lslalom_L903+0x204>)
 80070e2:	edd3 7a00 	vldr	s15, [r3]
 80070e6:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80071f0 <Lslalom_L903+0x21c>
 80070ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ee:	4b3c      	ldr	r3, [pc, #240]	; (80071e0 <Lslalom_L903+0x20c>)
 80070f0:	edd3 7a00 	vldr	s15, [r3]
 80070f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070fc:	dcf0      	bgt.n	80070e0 <Lslalom_L903+0x10c>
	if(!MF.FLAG.XDIR){
 80070fe:	4b27      	ldr	r3, [pc, #156]	; (800719c <Lslalom_L903+0x1c8>)
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	d104      	bne.n	8007116 <Lslalom_L903+0x142>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800710c:	2101      	movs	r1, #1
 800710e:	20ff      	movs	r0, #255	; 0xff
 8007110:	f009 ffaa 	bl	8011068 <turn_dir>
 8007114:	e003      	b.n	800711e <Lslalom_L903+0x14a>
	}else{
		turn_dir(DIR_TURN_L90_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007116:	2103      	movs	r1, #3
 8007118:	20fe      	movs	r0, #254	; 0xfe
 800711a:	f009 ffa5 	bl	8011068 <turn_dir>
	}

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 800711e:	4a1f      	ldr	r2, [pc, #124]	; (800719c <Lslalom_L903+0x1c8>)
 8007120:	8813      	ldrh	r3, [r2, #0]
 8007122:	f36f 334d 	bfc	r3, #13, #1
 8007126:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007128:	4b1d      	ldr	r3, [pc, #116]	; (80071a0 <Lslalom_L903+0x1cc>)
 800712a:	4a1e      	ldr	r2, [pc, #120]	; (80071a4 <Lslalom_L903+0x1d0>)
 800712c:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800712e:	4b1e      	ldr	r3, [pc, #120]	; (80071a8 <Lslalom_L903+0x1d4>)
 8007130:	4a1c      	ldr	r2, [pc, #112]	; (80071a4 <Lslalom_L903+0x1d0>)
 8007132:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH_HIGH;
 8007134:	4b1d      	ldr	r3, [pc, #116]	; (80071ac <Lslalom_L903+0x1d8>)
 8007136:	4a1e      	ldr	r2, [pc, #120]	; (80071b0 <Lslalom_L903+0x1dc>)
 8007138:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH_HIGH;
 800713a:	4b1e      	ldr	r3, [pc, #120]	; (80071b4 <Lslalom_L903+0x1e0>)
 800713c:	4a1c      	ldr	r2, [pc, #112]	; (80071b0 <Lslalom_L903+0x1dc>)
 800713e:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8007140:	f04f 0300 	mov.w	r3, #0
 8007144:	4a1c      	ldr	r2, [pc, #112]	; (80071b8 <Lslalom_L903+0x1e4>)
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	4a1c      	ldr	r2, [pc, #112]	; (80071bc <Lslalom_L903+0x1e8>)
 800714a:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 800714c:	4a13      	ldr	r2, [pc, #76]	; (800719c <Lslalom_L903+0x1c8>)
 800714e:	8813      	ldrh	r3, [r2, #0]
 8007150:	f043 0304 	orr.w	r3, r3, #4
 8007154:	8013      	strh	r3, [r2, #0]
	control_start();
 8007156:	f7fd fe0d 	bl	8004d74 <control_start>
	while(dist_l < LSLALOM_H_H_OFFSET_B && dist_r < LSLALOM_H_H_OFFSET_B);
 800715a:	bf00      	nop
 800715c:	4b17      	ldr	r3, [pc, #92]	; (80071bc <Lslalom_L903+0x1e8>)
 800715e:	edd3 7a00 	vldr	s15, [r3]
 8007162:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80071c0 <Lslalom_L903+0x1ec>
 8007166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800716a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800716e:	d509      	bpl.n	8007184 <Lslalom_L903+0x1b0>
 8007170:	4b11      	ldr	r3, [pc, #68]	; (80071b8 <Lslalom_L903+0x1e4>)
 8007172:	edd3 7a00 	vldr	s15, [r3]
 8007176:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80071c0 <Lslalom_L903+0x1ec>
 800717a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800717e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007182:	d4eb      	bmi.n	800715c <Lslalom_L903+0x188>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8007184:	4b05      	ldr	r3, [pc, #20]	; (800719c <Lslalom_L903+0x1c8>)
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <Lslalom_L903+0x1c2>
 8007192:	f00b fcc5 	bl	8012b20 <get_wall_info>
}
 8007196:	bf00      	nop
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20000fac 	.word	0x20000fac
 80071a0:	20000da0 	.word	0x20000da0
 80071a4:	461c4000 	.word	0x461c4000
 80071a8:	20000b20 	.word	0x20000b20
 80071ac:	200007b4 	.word	0x200007b4
 80071b0:	44960000 	.word	0x44960000
 80071b4:	200001dc 	.word	0x200001dc
 80071b8:	20000b2c 	.word	0x20000b2c
 80071bc:	200012e8 	.word	0x200012e8
 80071c0:	42280000 	.word	0x42280000
 80071c4:	20000b98 	.word	0x20000b98
 80071c8:	200001e0 	.word	0x200001e0
 80071cc:	20000b24 	.word	0x20000b24
 80071d0:	44480000 	.word	0x44480000
 80071d4:	20000b34 	.word	0x20000b34
 80071d8:	20000c40 	.word	0x20000c40
 80071dc:	42000000 	.word	0x42000000
 80071e0:	20000b9c 	.word	0x20000b9c
 80071e4:	42700000 	.word	0x42700000
 80071e8:	c61c4000 	.word	0xc61c4000
 80071ec:	42a00000 	.word	0x42a00000
 80071f0:	42b40000 	.word	0x42b40000

080071f4 <Lslalom_R180>:
//Lslalom_R180
// スラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R180(void){
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
	full_led_write(GREEN);
 80071f8:	2002      	movs	r0, #2
 80071fa:	f00b fd05 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 80071fe:	4a69      	ldr	r2, [pc, #420]	; (80073a4 <Lslalom_R180+0x1b0>)
 8007200:	8813      	ldrh	r3, [r2, #0]
 8007202:	f36f 2308 	bfc	r3, #8, #1
 8007206:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007208:	4b67      	ldr	r3, [pc, #412]	; (80073a8 <Lslalom_R180+0x1b4>)
 800720a:	4a68      	ldr	r2, [pc, #416]	; (80073ac <Lslalom_R180+0x1b8>)
 800720c:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800720e:	4b68      	ldr	r3, [pc, #416]	; (80073b0 <Lslalom_R180+0x1bc>)
 8007210:	4a66      	ldr	r2, [pc, #408]	; (80073ac <Lslalom_R180+0x1b8>)
 8007212:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8007214:	4b67      	ldr	r3, [pc, #412]	; (80073b4 <Lslalom_R180+0x1c0>)
 8007216:	4a68      	ldr	r2, [pc, #416]	; (80073b8 <Lslalom_R180+0x1c4>)
 8007218:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 800721a:	4b68      	ldr	r3, [pc, #416]	; (80073bc <Lslalom_R180+0x1c8>)
 800721c:	4a66      	ldr	r2, [pc, #408]	; (80073b8 <Lslalom_R180+0x1c4>)
 800721e:	601a      	str	r2, [r3, #0]

	control_start();
 8007220:	f7fd fda8 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8007224:	f04f 0300 	mov.w	r3, #0
 8007228:	4a65      	ldr	r2, [pc, #404]	; (80073c0 <Lslalom_R180+0x1cc>)
 800722a:	6013      	str	r3, [r2, #0]
 800722c:	4a65      	ldr	r2, [pc, #404]	; (80073c4 <Lslalom_R180+0x1d0>)
 800722e:	6013      	str	r3, [r2, #0]
	while(dist_l < LROTATE_OFFSET_F && dist_r < LROTATE_OFFSET_F);
 8007230:	bf00      	nop
 8007232:	4b64      	ldr	r3, [pc, #400]	; (80073c4 <Lslalom_R180+0x1d0>)
 8007234:	edd3 7a00 	vldr	s15, [r3]
 8007238:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80073c8 <Lslalom_R180+0x1d4>
 800723c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007244:	d509      	bpl.n	800725a <Lslalom_R180+0x66>
 8007246:	4b5e      	ldr	r3, [pc, #376]	; (80073c0 <Lslalom_R180+0x1cc>)
 8007248:	edd3 7a00 	vldr	s15, [r3]
 800724c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80073c8 <Lslalom_R180+0x1d4>
 8007250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007258:	d4eb      	bmi.n	8007232 <Lslalom_R180+0x3e>
	drive_stop();
 800725a:	f7fd fd63 	bl	8004d24 <drive_stop>
	control_stop();
 800725e:	f7fd fd9d 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8007262:	4a50      	ldr	r2, [pc, #320]	; (80073a4 <Lslalom_R180+0x1b0>)
 8007264:	8813      	ldrh	r3, [r2, #0]
 8007266:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800726a:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -LROTATE_DEGACCEL;
 800726c:	4b57      	ldr	r3, [pc, #348]	; (80073cc <Lslalom_R180+0x1d8>)
 800726e:	4a58      	ldr	r2, [pc, #352]	; (80073d0 <Lslalom_R180+0x1dc>)
 8007270:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8007272:	4b58      	ldr	r3, [pc, #352]	; (80073d4 <Lslalom_R180+0x1e0>)
 8007274:	f04f 0200 	mov.w	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
	omega_min = -LROTATE_OMEGA;
 800727a:	4b57      	ldr	r3, [pc, #348]	; (80073d8 <Lslalom_R180+0x1e4>)
 800727c:	4a57      	ldr	r2, [pc, #348]	; (80073dc <Lslalom_R180+0x1e8>)
 800727e:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8007280:	4b57      	ldr	r3, [pc, #348]	; (80073e0 <Lslalom_R180+0x1ec>)
 8007282:	4a4d      	ldr	r2, [pc, #308]	; (80073b8 <Lslalom_R180+0x1c4>)
 8007284:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8007286:	4a47      	ldr	r2, [pc, #284]	; (80073a4 <Lslalom_R180+0x1b0>)
 8007288:	8813      	ldrh	r3, [r2, #0]
 800728a:	f043 0302 	orr.w	r3, r3, #2
 800728e:	8013      	strh	r3, [r2, #0]
//	while(degree_z > target_degree_z-40);
	while(degree_z > target_degree_z-LROTATE_DEG);
 8007290:	bf00      	nop
 8007292:	4b54      	ldr	r3, [pc, #336]	; (80073e4 <Lslalom_R180+0x1f0>)
 8007294:	edd3 7a00 	vldr	s15, [r3]
 8007298:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800729c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80072a0:	4b51      	ldr	r3, [pc, #324]	; (80073e8 <Lslalom_R180+0x1f4>)
 80072a2:	edd3 7a00 	vldr	s15, [r3]
 80072a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80072aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ae:	d4f0      	bmi.n	8007292 <Lslalom_R180+0x9e>

	target_degaccel_z = 0;
 80072b0:	4b46      	ldr	r3, [pc, #280]	; (80073cc <Lslalom_R180+0x1d8>)
 80072b2:	f04f 0200 	mov.w	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-160);
	while(degree_z > target_degree_z-(180-LROTATE_DEG+4));
 80072b8:	bf00      	nop
 80072ba:	4b4a      	ldr	r3, [pc, #296]	; (80073e4 <Lslalom_R180+0x1f0>)
 80072bc:	edd3 7a00 	vldr	s15, [r3]
 80072c0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80073ec <Lslalom_R180+0x1f8>
 80072c4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80072c8:	4b47      	ldr	r3, [pc, #284]	; (80073e8 <Lslalom_R180+0x1f4>)
 80072ca:	edd3 7a00 	vldr	s15, [r3]
 80072ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80072d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d6:	d4f0      	bmi.n	80072ba <Lslalom_R180+0xc6>

	target_degaccel_z = LROTATE_DEGACCEL;
 80072d8:	4b3c      	ldr	r3, [pc, #240]	; (80073cc <Lslalom_R180+0x1d8>)
 80072da:	4a45      	ldr	r2, [pc, #276]	; (80073f0 <Lslalom_R180+0x1fc>)
 80072dc:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 80072de:	bf00      	nop
 80072e0:	4b40      	ldr	r3, [pc, #256]	; (80073e4 <Lslalom_R180+0x1f0>)
 80072e2:	edd3 7a00 	vldr	s15, [r3]
 80072e6:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80073f4 <Lslalom_R180+0x200>
 80072ea:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80072ee:	4b3e      	ldr	r3, [pc, #248]	; (80073e8 <Lslalom_R180+0x1f4>)
 80072f0:	edd3 7a00 	vldr	s15, [r3]
 80072f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80072f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072fc:	d4f0      	bmi.n	80072e0 <Lslalom_R180+0xec>
	if(!MF.FLAG.XDIR){
 80072fe:	4b29      	ldr	r3, [pc, #164]	; (80073a4 <Lslalom_R180+0x1b0>)
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	d108      	bne.n	800731e <Lslalom_R180+0x12a>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800730c:	2101      	movs	r1, #1
 800730e:	2001      	movs	r0, #1
 8007310:	f009 feaa 	bl	8011068 <turn_dir>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007314:	2101      	movs	r1, #1
 8007316:	2001      	movs	r0, #1
 8007318:	f009 fea6 	bl	8011068 <turn_dir>
 800731c:	e003      	b.n	8007326 <Lslalom_R180+0x132>
	}else{
		turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800731e:	2103      	movs	r1, #3
 8007320:	2004      	movs	r0, #4
 8007322:	f009 fea1 	bl	8011068 <turn_dir>
	}

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8007326:	4a1f      	ldr	r2, [pc, #124]	; (80073a4 <Lslalom_R180+0x1b0>)
 8007328:	8813      	ldrh	r3, [r2, #0]
 800732a:	f36f 334d 	bfc	r3, #13, #1
 800732e:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007330:	4b1d      	ldr	r3, [pc, #116]	; (80073a8 <Lslalom_R180+0x1b4>)
 8007332:	4a1e      	ldr	r2, [pc, #120]	; (80073ac <Lslalom_R180+0x1b8>)
 8007334:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8007336:	4b1e      	ldr	r3, [pc, #120]	; (80073b0 <Lslalom_R180+0x1bc>)
 8007338:	4a1c      	ldr	r2, [pc, #112]	; (80073ac <Lslalom_R180+0x1b8>)
 800733a:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 800733c:	4b1d      	ldr	r3, [pc, #116]	; (80073b4 <Lslalom_R180+0x1c0>)
 800733e:	4a1e      	ldr	r2, [pc, #120]	; (80073b8 <Lslalom_R180+0x1c4>)
 8007340:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8007342:	4b1e      	ldr	r3, [pc, #120]	; (80073bc <Lslalom_R180+0x1c8>)
 8007344:	4a1c      	ldr	r2, [pc, #112]	; (80073b8 <Lslalom_R180+0x1c4>)
 8007346:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8007348:	f04f 0300 	mov.w	r3, #0
 800734c:	4a1c      	ldr	r2, [pc, #112]	; (80073c0 <Lslalom_R180+0x1cc>)
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	4a1c      	ldr	r2, [pc, #112]	; (80073c4 <Lslalom_R180+0x1d0>)
 8007352:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8007354:	4a13      	ldr	r2, [pc, #76]	; (80073a4 <Lslalom_R180+0x1b0>)
 8007356:	8813      	ldrh	r3, [r2, #0]
 8007358:	f043 0304 	orr.w	r3, r3, #4
 800735c:	8013      	strh	r3, [r2, #0]
	control_start();
 800735e:	f7fd fd09 	bl	8004d74 <control_start>
	while(dist_l < LROTATE_OFFSET_B && dist_r < LROTATE_OFFSET_B);
 8007362:	bf00      	nop
 8007364:	4b17      	ldr	r3, [pc, #92]	; (80073c4 <Lslalom_R180+0x1d0>)
 8007366:	edd3 7a00 	vldr	s15, [r3]
 800736a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80073c8 <Lslalom_R180+0x1d4>
 800736e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007376:	d509      	bpl.n	800738c <Lslalom_R180+0x198>
 8007378:	4b11      	ldr	r3, [pc, #68]	; (80073c0 <Lslalom_R180+0x1cc>)
 800737a:	edd3 7a00 	vldr	s15, [r3]
 800737e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80073c8 <Lslalom_R180+0x1d4>
 8007382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800738a:	d4eb      	bmi.n	8007364 <Lslalom_R180+0x170>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 800738c:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <Lslalom_R180+0x1b0>)
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <Lslalom_R180+0x1aa>
 800739a:	f00b fbc1 	bl	8012b20 <get_wall_info>
}
 800739e:	bf00      	nop
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	20000fac 	.word	0x20000fac
 80073a8:	20000da0 	.word	0x20000da0
 80073ac:	461c4000 	.word	0x461c4000
 80073b0:	20000b20 	.word	0x20000b20
 80073b4:	200007b4 	.word	0x200007b4
 80073b8:	43c80000 	.word	0x43c80000
 80073bc:	200001dc 	.word	0x200001dc
 80073c0:	20000b2c 	.word	0x20000b2c
 80073c4:	200012e8 	.word	0x200012e8
 80073c8:	42700000 	.word	0x42700000
 80073cc:	20000b98 	.word	0x20000b98
 80073d0:	c4fa0000 	.word	0xc4fa0000
 80073d4:	200001e0 	.word	0x200001e0
 80073d8:	200002f0 	.word	0x200002f0
 80073dc:	c3820000 	.word	0xc3820000
 80073e0:	20000b34 	.word	0x20000b34
 80073e4:	20000c40 	.word	0x20000c40
 80073e8:	20000b9c 	.word	0x20000b9c
 80073ec:	43280000 	.word	0x43280000
 80073f0:	44fa0000 	.word	0x44fa0000
 80073f4:	43340000 	.word	0x43340000

080073f8 <Lslalom_L180>:
//Lslalom_L180
// 大回りスラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L180(void){
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
	full_led_write(GREEN);
 80073fc:	2002      	movs	r0, #2
 80073fe:	f00b fc03 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 8007402:	4a69      	ldr	r2, [pc, #420]	; (80075a8 <Lslalom_L180+0x1b0>)
 8007404:	8813      	ldrh	r3, [r2, #0]
 8007406:	f36f 2308 	bfc	r3, #8, #1
 800740a:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800740c:	4b67      	ldr	r3, [pc, #412]	; (80075ac <Lslalom_L180+0x1b4>)
 800740e:	4a68      	ldr	r2, [pc, #416]	; (80075b0 <Lslalom_L180+0x1b8>)
 8007410:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8007412:	4b68      	ldr	r3, [pc, #416]	; (80075b4 <Lslalom_L180+0x1bc>)
 8007414:	4a66      	ldr	r2, [pc, #408]	; (80075b0 <Lslalom_L180+0x1b8>)
 8007416:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8007418:	4b67      	ldr	r3, [pc, #412]	; (80075b8 <Lslalom_L180+0x1c0>)
 800741a:	4a68      	ldr	r2, [pc, #416]	; (80075bc <Lslalom_L180+0x1c4>)
 800741c:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 800741e:	4b68      	ldr	r3, [pc, #416]	; (80075c0 <Lslalom_L180+0x1c8>)
 8007420:	4a66      	ldr	r2, [pc, #408]	; (80075bc <Lslalom_L180+0x1c4>)
 8007422:	601a      	str	r2, [r3, #0]

	control_start();
 8007424:	f7fd fca6 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8007428:	f04f 0300 	mov.w	r3, #0
 800742c:	4a65      	ldr	r2, [pc, #404]	; (80075c4 <Lslalom_L180+0x1cc>)
 800742e:	6013      	str	r3, [r2, #0]
 8007430:	4a65      	ldr	r2, [pc, #404]	; (80075c8 <Lslalom_L180+0x1d0>)
 8007432:	6013      	str	r3, [r2, #0]
	while(dist_l < LROTATE_OFFSET_F && dist_r < LROTATE_OFFSET_F);
 8007434:	bf00      	nop
 8007436:	4b64      	ldr	r3, [pc, #400]	; (80075c8 <Lslalom_L180+0x1d0>)
 8007438:	edd3 7a00 	vldr	s15, [r3]
 800743c:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80075cc <Lslalom_L180+0x1d4>
 8007440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007448:	d509      	bpl.n	800745e <Lslalom_L180+0x66>
 800744a:	4b5e      	ldr	r3, [pc, #376]	; (80075c4 <Lslalom_L180+0x1cc>)
 800744c:	edd3 7a00 	vldr	s15, [r3]
 8007450:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80075cc <Lslalom_L180+0x1d4>
 8007454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800745c:	d4eb      	bmi.n	8007436 <Lslalom_L180+0x3e>
	drive_stop();
 800745e:	f7fd fc61 	bl	8004d24 <drive_stop>
	control_stop();
 8007462:	f7fd fc9b 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8007466:	4a50      	ldr	r2, [pc, #320]	; (80075a8 <Lslalom_L180+0x1b0>)
 8007468:	8813      	ldrh	r3, [r2, #0]
 800746a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800746e:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = LROTATE_DEGACCEL;
 8007470:	4b57      	ldr	r3, [pc, #348]	; (80075d0 <Lslalom_L180+0x1d8>)
 8007472:	4a58      	ldr	r2, [pc, #352]	; (80075d4 <Lslalom_L180+0x1dc>)
 8007474:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8007476:	4b58      	ldr	r3, [pc, #352]	; (80075d8 <Lslalom_L180+0x1e0>)
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	601a      	str	r2, [r3, #0]
	omega_max = LROTATE_OMEGA;
 800747e:	4b57      	ldr	r3, [pc, #348]	; (80075dc <Lslalom_L180+0x1e4>)
 8007480:	4a57      	ldr	r2, [pc, #348]	; (80075e0 <Lslalom_L180+0x1e8>)
 8007482:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8007484:	4b57      	ldr	r3, [pc, #348]	; (80075e4 <Lslalom_L180+0x1ec>)
 8007486:	4a4d      	ldr	r2, [pc, #308]	; (80075bc <Lslalom_L180+0x1c4>)
 8007488:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 800748a:	4a47      	ldr	r2, [pc, #284]	; (80075a8 <Lslalom_L180+0x1b0>)
 800748c:	8813      	ldrh	r3, [r2, #0]
 800748e:	f043 0302 	orr.w	r3, r3, #2
 8007492:	8013      	strh	r3, [r2, #0]
//	while(degree_z < target_degree_z+40);
	while(degree_z < target_degree_z+LROTATE_DEG);
 8007494:	bf00      	nop
 8007496:	4b54      	ldr	r3, [pc, #336]	; (80075e8 <Lslalom_L180+0x1f0>)
 8007498:	edd3 7a00 	vldr	s15, [r3]
 800749c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80074a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074a4:	4b51      	ldr	r3, [pc, #324]	; (80075ec <Lslalom_L180+0x1f4>)
 80074a6:	edd3 7a00 	vldr	s15, [r3]
 80074aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80074ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b2:	dcf0      	bgt.n	8007496 <Lslalom_L180+0x9e>

	target_degaccel_z = 0;
 80074b4:	4b46      	ldr	r3, [pc, #280]	; (80075d0 <Lslalom_L180+0x1d8>)
 80074b6:	f04f 0200 	mov.w	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+160);
	while(degree_z < target_degree_z+(180-LROTATE_DEG+4));
 80074bc:	bf00      	nop
 80074be:	4b4a      	ldr	r3, [pc, #296]	; (80075e8 <Lslalom_L180+0x1f0>)
 80074c0:	edd3 7a00 	vldr	s15, [r3]
 80074c4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80075f0 <Lslalom_L180+0x1f8>
 80074c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074cc:	4b47      	ldr	r3, [pc, #284]	; (80075ec <Lslalom_L180+0x1f4>)
 80074ce:	edd3 7a00 	vldr	s15, [r3]
 80074d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80074d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074da:	dcf0      	bgt.n	80074be <Lslalom_L180+0xc6>

	target_degaccel_z = -LROTATE_DEGACCEL;
 80074dc:	4b3c      	ldr	r3, [pc, #240]	; (80075d0 <Lslalom_L180+0x1d8>)
 80074de:	4a45      	ldr	r2, [pc, #276]	; (80075f4 <Lslalom_L180+0x1fc>)
 80074e0:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+180);
 80074e2:	bf00      	nop
 80074e4:	4b40      	ldr	r3, [pc, #256]	; (80075e8 <Lslalom_L180+0x1f0>)
 80074e6:	edd3 7a00 	vldr	s15, [r3]
 80074ea:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80075f8 <Lslalom_L180+0x200>
 80074ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074f2:	4b3e      	ldr	r3, [pc, #248]	; (80075ec <Lslalom_L180+0x1f4>)
 80074f4:	edd3 7a00 	vldr	s15, [r3]
 80074f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80074fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007500:	dcf0      	bgt.n	80074e4 <Lslalom_L180+0xec>
	if(!MF.FLAG.XDIR){
 8007502:	4b29      	ldr	r3, [pc, #164]	; (80075a8 <Lslalom_L180+0x1b0>)
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d108      	bne.n	8007522 <Lslalom_L180+0x12a>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007510:	2101      	movs	r1, #1
 8007512:	20ff      	movs	r0, #255	; 0xff
 8007514:	f009 fda8 	bl	8011068 <turn_dir>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007518:	2101      	movs	r1, #1
 800751a:	20ff      	movs	r0, #255	; 0xff
 800751c:	f009 fda4 	bl	8011068 <turn_dir>
 8007520:	e003      	b.n	800752a <Lslalom_L180+0x132>
	}else{
		turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007522:	2103      	movs	r1, #3
 8007524:	20fc      	movs	r0, #252	; 0xfc
 8007526:	f009 fd9f 	bl	8011068 <turn_dir>
	}

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 800752a:	4a1f      	ldr	r2, [pc, #124]	; (80075a8 <Lslalom_L180+0x1b0>)
 800752c:	8813      	ldrh	r3, [r2, #0]
 800752e:	f36f 334d 	bfc	r3, #13, #1
 8007532:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007534:	4b1d      	ldr	r3, [pc, #116]	; (80075ac <Lslalom_L180+0x1b4>)
 8007536:	4a1e      	ldr	r2, [pc, #120]	; (80075b0 <Lslalom_L180+0x1b8>)
 8007538:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800753a:	4b1e      	ldr	r3, [pc, #120]	; (80075b4 <Lslalom_L180+0x1bc>)
 800753c:	4a1c      	ldr	r2, [pc, #112]	; (80075b0 <Lslalom_L180+0x1b8>)
 800753e:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8007540:	4b1d      	ldr	r3, [pc, #116]	; (80075b8 <Lslalom_L180+0x1c0>)
 8007542:	4a1e      	ldr	r2, [pc, #120]	; (80075bc <Lslalom_L180+0x1c4>)
 8007544:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8007546:	4b1e      	ldr	r3, [pc, #120]	; (80075c0 <Lslalom_L180+0x1c8>)
 8007548:	4a1c      	ldr	r2, [pc, #112]	; (80075bc <Lslalom_L180+0x1c4>)
 800754a:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	4a1c      	ldr	r2, [pc, #112]	; (80075c4 <Lslalom_L180+0x1cc>)
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	4a1c      	ldr	r2, [pc, #112]	; (80075c8 <Lslalom_L180+0x1d0>)
 8007556:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8007558:	4a13      	ldr	r2, [pc, #76]	; (80075a8 <Lslalom_L180+0x1b0>)
 800755a:	8813      	ldrh	r3, [r2, #0]
 800755c:	f043 0304 	orr.w	r3, r3, #4
 8007560:	8013      	strh	r3, [r2, #0]
	control_start();
 8007562:	f7fd fc07 	bl	8004d74 <control_start>
	while(dist_l < LROTATE_OFFSET_B && dist_r < LROTATE_OFFSET_B);
 8007566:	bf00      	nop
 8007568:	4b17      	ldr	r3, [pc, #92]	; (80075c8 <Lslalom_L180+0x1d0>)
 800756a:	edd3 7a00 	vldr	s15, [r3]
 800756e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80075cc <Lslalom_L180+0x1d4>
 8007572:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800757a:	d509      	bpl.n	8007590 <Lslalom_L180+0x198>
 800757c:	4b11      	ldr	r3, [pc, #68]	; (80075c4 <Lslalom_L180+0x1cc>)
 800757e:	edd3 7a00 	vldr	s15, [r3]
 8007582:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80075cc <Lslalom_L180+0x1d4>
 8007586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800758a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758e:	d4eb      	bmi.n	8007568 <Lslalom_L180+0x170>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8007590:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <Lslalom_L180+0x1b0>)
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <Lslalom_L180+0x1aa>
 800759e:	f00b fabf 	bl	8012b20 <get_wall_info>
}
 80075a2:	bf00      	nop
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20000fac 	.word	0x20000fac
 80075ac:	20000da0 	.word	0x20000da0
 80075b0:	461c4000 	.word	0x461c4000
 80075b4:	20000b20 	.word	0x20000b20
 80075b8:	200007b4 	.word	0x200007b4
 80075bc:	43c80000 	.word	0x43c80000
 80075c0:	200001dc 	.word	0x200001dc
 80075c4:	20000b2c 	.word	0x20000b2c
 80075c8:	200012e8 	.word	0x200012e8
 80075cc:	42700000 	.word	0x42700000
 80075d0:	20000b98 	.word	0x20000b98
 80075d4:	44fa0000 	.word	0x44fa0000
 80075d8:	200001e0 	.word	0x200001e0
 80075dc:	20000b24 	.word	0x20000b24
 80075e0:	43820000 	.word	0x43820000
 80075e4:	20000b34 	.word	0x20000b34
 80075e8:	20000c40 	.word	0x20000c40
 80075ec:	20000b9c 	.word	0x20000b9c
 80075f0:	43280000 	.word	0x43280000
 80075f4:	c4fa0000 	.word	0xc4fa0000
 80075f8:	43340000 	.word	0x43340000

080075fc <Lslalom_R1802>:
//Lslalom_R1802
// スラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_R1802(void){
 80075fc:	b580      	push	{r7, lr}
 80075fe:	af00      	add	r7, sp, #0
	full_led_write(GREEN);
 8007600:	2002      	movs	r0, #2
 8007602:	f00b fb01 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 8007606:	4a69      	ldr	r2, [pc, #420]	; (80077ac <Lslalom_R1802+0x1b0>)
 8007608:	8813      	ldrh	r3, [r2, #0]
 800760a:	f36f 2308 	bfc	r3, #8, #1
 800760e:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007610:	4b67      	ldr	r3, [pc, #412]	; (80077b0 <Lslalom_R1802+0x1b4>)
 8007612:	4a68      	ldr	r2, [pc, #416]	; (80077b4 <Lslalom_R1802+0x1b8>)
 8007614:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8007616:	4b68      	ldr	r3, [pc, #416]	; (80077b8 <Lslalom_R1802+0x1bc>)
 8007618:	4a66      	ldr	r2, [pc, #408]	; (80077b4 <Lslalom_R1802+0x1b8>)
 800761a:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 800761c:	4b67      	ldr	r3, [pc, #412]	; (80077bc <Lslalom_R1802+0x1c0>)
 800761e:	4a68      	ldr	r2, [pc, #416]	; (80077c0 <Lslalom_R1802+0x1c4>)
 8007620:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 8007622:	4b68      	ldr	r3, [pc, #416]	; (80077c4 <Lslalom_R1802+0x1c8>)
 8007624:	4a66      	ldr	r2, [pc, #408]	; (80077c0 <Lslalom_R1802+0x1c4>)
 8007626:	601a      	str	r2, [r3, #0]

	control_start();
 8007628:	f7fd fba4 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 800762c:	f04f 0300 	mov.w	r3, #0
 8007630:	4a65      	ldr	r2, [pc, #404]	; (80077c8 <Lslalom_R1802+0x1cc>)
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	4a65      	ldr	r2, [pc, #404]	; (80077cc <Lslalom_R1802+0x1d0>)
 8007636:	6013      	str	r3, [r2, #0]
	while(dist_l < LROTATE_H_OFFSET_F && dist_r < LROTATE_H_OFFSET_F);
 8007638:	bf00      	nop
 800763a:	4b64      	ldr	r3, [pc, #400]	; (80077cc <Lslalom_R1802+0x1d0>)
 800763c:	edd3 7a00 	vldr	s15, [r3]
 8007640:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8007644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800764c:	d509      	bpl.n	8007662 <Lslalom_R1802+0x66>
 800764e:	4b5e      	ldr	r3, [pc, #376]	; (80077c8 <Lslalom_R1802+0x1cc>)
 8007650:	edd3 7a00 	vldr	s15, [r3]
 8007654:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8007658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800765c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007660:	d4eb      	bmi.n	800763a <Lslalom_R1802+0x3e>
	drive_stop();
 8007662:	f7fd fb5f 	bl	8004d24 <drive_stop>
	control_stop();
 8007666:	f7fd fb99 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 800766a:	4a50      	ldr	r2, [pc, #320]	; (80077ac <Lslalom_R1802+0x1b0>)
 800766c:	8813      	ldrh	r3, [r2, #0]
 800766e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007672:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -LROTATE_H_DEGACCEL;
 8007674:	4b56      	ldr	r3, [pc, #344]	; (80077d0 <Lslalom_R1802+0x1d4>)
 8007676:	4a57      	ldr	r2, [pc, #348]	; (80077d4 <Lslalom_R1802+0x1d8>)
 8007678:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 800767a:	4b57      	ldr	r3, [pc, #348]	; (80077d8 <Lslalom_R1802+0x1dc>)
 800767c:	f04f 0200 	mov.w	r2, #0
 8007680:	601a      	str	r2, [r3, #0]
	omega_min = -LROTATE_H_OMEGA;
 8007682:	4b56      	ldr	r3, [pc, #344]	; (80077dc <Lslalom_R1802+0x1e0>)
 8007684:	4a56      	ldr	r2, [pc, #344]	; (80077e0 <Lslalom_R1802+0x1e4>)
 8007686:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 8007688:	4b56      	ldr	r3, [pc, #344]	; (80077e4 <Lslalom_R1802+0x1e8>)
 800768a:	4a4d      	ldr	r2, [pc, #308]	; (80077c0 <Lslalom_R1802+0x1c4>)
 800768c:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 800768e:	4a47      	ldr	r2, [pc, #284]	; (80077ac <Lslalom_R1802+0x1b0>)
 8007690:	8813      	ldrh	r3, [r2, #0]
 8007692:	f043 0302 	orr.w	r3, r3, #2
 8007696:	8013      	strh	r3, [r2, #0]
//	while(degree_z > target_degree_z-70);
	while(degree_z > target_degree_z-LROTATE_H_DEG);
 8007698:	bf00      	nop
 800769a:	4b53      	ldr	r3, [pc, #332]	; (80077e8 <Lslalom_R1802+0x1ec>)
 800769c:	edd3 7a00 	vldr	s15, [r3]
 80076a0:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80077ec <Lslalom_R1802+0x1f0>
 80076a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80076a8:	4b51      	ldr	r3, [pc, #324]	; (80077f0 <Lslalom_R1802+0x1f4>)
 80076aa:	edd3 7a00 	vldr	s15, [r3]
 80076ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b6:	d4f0      	bmi.n	800769a <Lslalom_R1802+0x9e>

	target_degaccel_z = 0;
 80076b8:	4b45      	ldr	r3, [pc, #276]	; (80077d0 <Lslalom_R1802+0x1d4>)
 80076ba:	f04f 0200 	mov.w	r2, #0
 80076be:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-130);
	while(degree_z > target_degree_z-(180-LROTATE_H_DEG+2));
 80076c0:	bf00      	nop
 80076c2:	4b49      	ldr	r3, [pc, #292]	; (80077e8 <Lslalom_R1802+0x1ec>)
 80076c4:	edd3 7a00 	vldr	s15, [r3]
 80076c8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80077f4 <Lslalom_R1802+0x1f8>
 80076cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80076d0:	4b47      	ldr	r3, [pc, #284]	; (80077f0 <Lslalom_R1802+0x1f4>)
 80076d2:	edd3 7a00 	vldr	s15, [r3]
 80076d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076de:	d4f0      	bmi.n	80076c2 <Lslalom_R1802+0xc6>

	target_degaccel_z = LROTATE_H_DEGACCEL;
 80076e0:	4b3b      	ldr	r3, [pc, #236]	; (80077d0 <Lslalom_R1802+0x1d4>)
 80076e2:	4a45      	ldr	r2, [pc, #276]	; (80077f8 <Lslalom_R1802+0x1fc>)
 80076e4:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-180);
 80076e6:	bf00      	nop
 80076e8:	4b3f      	ldr	r3, [pc, #252]	; (80077e8 <Lslalom_R1802+0x1ec>)
 80076ea:	edd3 7a00 	vldr	s15, [r3]
 80076ee:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80077fc <Lslalom_R1802+0x200>
 80076f2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80076f6:	4b3e      	ldr	r3, [pc, #248]	; (80077f0 <Lslalom_R1802+0x1f4>)
 80076f8:	edd3 7a00 	vldr	s15, [r3]
 80076fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007704:	d4f0      	bmi.n	80076e8 <Lslalom_R1802+0xec>
	if(!MF.FLAG.XDIR){
 8007706:	4b29      	ldr	r3, [pc, #164]	; (80077ac <Lslalom_R1802+0x1b0>)
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d108      	bne.n	8007726 <Lslalom_R1802+0x12a>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007714:	2101      	movs	r1, #1
 8007716:	2001      	movs	r0, #1
 8007718:	f009 fca6 	bl	8011068 <turn_dir>
		turn_dir(DIR_TURN_R90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800771c:	2101      	movs	r1, #1
 800771e:	2001      	movs	r0, #1
 8007720:	f009 fca2 	bl	8011068 <turn_dir>
 8007724:	e003      	b.n	800772e <Lslalom_R1802+0x132>
	}else{
		turn_dir(DIR_TURN_R180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007726:	2103      	movs	r1, #3
 8007728:	2004      	movs	r0, #4
 800772a:	f009 fc9d 	bl	8011068 <turn_dir>
	}

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 800772e:	4a1f      	ldr	r2, [pc, #124]	; (80077ac <Lslalom_R1802+0x1b0>)
 8007730:	8813      	ldrh	r3, [r2, #0]
 8007732:	f36f 334d 	bfc	r3, #13, #1
 8007736:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007738:	4b1d      	ldr	r3, [pc, #116]	; (80077b0 <Lslalom_R1802+0x1b4>)
 800773a:	4a1e      	ldr	r2, [pc, #120]	; (80077b4 <Lslalom_R1802+0x1b8>)
 800773c:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800773e:	4b1e      	ldr	r3, [pc, #120]	; (80077b8 <Lslalom_R1802+0x1bc>)
 8007740:	4a1c      	ldr	r2, [pc, #112]	; (80077b4 <Lslalom_R1802+0x1b8>)
 8007742:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8007744:	4b1d      	ldr	r3, [pc, #116]	; (80077bc <Lslalom_R1802+0x1c0>)
 8007746:	4a1e      	ldr	r2, [pc, #120]	; (80077c0 <Lslalom_R1802+0x1c4>)
 8007748:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 800774a:	4b1e      	ldr	r3, [pc, #120]	; (80077c4 <Lslalom_R1802+0x1c8>)
 800774c:	4a1c      	ldr	r2, [pc, #112]	; (80077c0 <Lslalom_R1802+0x1c4>)
 800774e:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8007750:	f04f 0300 	mov.w	r3, #0
 8007754:	4a1c      	ldr	r2, [pc, #112]	; (80077c8 <Lslalom_R1802+0x1cc>)
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	4a1c      	ldr	r2, [pc, #112]	; (80077cc <Lslalom_R1802+0x1d0>)
 800775a:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 800775c:	4a13      	ldr	r2, [pc, #76]	; (80077ac <Lslalom_R1802+0x1b0>)
 800775e:	8813      	ldrh	r3, [r2, #0]
 8007760:	f043 0304 	orr.w	r3, r3, #4
 8007764:	8013      	strh	r3, [r2, #0]
	control_start();
 8007766:	f7fd fb05 	bl	8004d74 <control_start>
	while(dist_l < LROTATE_H_OFFSET_B && dist_r < LROTATE_H_OFFSET_B);
 800776a:	bf00      	nop
 800776c:	4b17      	ldr	r3, [pc, #92]	; (80077cc <Lslalom_R1802+0x1d0>)
 800776e:	edd3 7a00 	vldr	s15, [r3]
 8007772:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8007776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800777a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800777e:	d509      	bpl.n	8007794 <Lslalom_R1802+0x198>
 8007780:	4b11      	ldr	r3, [pc, #68]	; (80077c8 <Lslalom_R1802+0x1cc>)
 8007782:	edd3 7a00 	vldr	s15, [r3]
 8007786:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800778a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800778e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007792:	d4eb      	bmi.n	800776c <Lslalom_R1802+0x170>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8007794:	4b05      	ldr	r3, [pc, #20]	; (80077ac <Lslalom_R1802+0x1b0>)
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <Lslalom_R1802+0x1aa>
 80077a2:	f00b f9bd 	bl	8012b20 <get_wall_info>
}
 80077a6:	bf00      	nop
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20000fac 	.word	0x20000fac
 80077b0:	20000da0 	.word	0x20000da0
 80077b4:	461c4000 	.word	0x461c4000
 80077b8:	20000b20 	.word	0x20000b20
 80077bc:	200007b4 	.word	0x200007b4
 80077c0:	44480000 	.word	0x44480000
 80077c4:	200001dc 	.word	0x200001dc
 80077c8:	20000b2c 	.word	0x20000b2c
 80077cc:	200012e8 	.word	0x200012e8
 80077d0:	20000b98 	.word	0x20000b98
 80077d4:	c53b8000 	.word	0xc53b8000
 80077d8:	200001e0 	.word	0x200001e0
 80077dc:	200002f0 	.word	0x200002f0
 80077e0:	c4160000 	.word	0xc4160000
 80077e4:	20000b34 	.word	0x20000b34
 80077e8:	20000c40 	.word	0x20000c40
 80077ec:	42700000 	.word	0x42700000
 80077f0:	20000b9c 	.word	0x20000b9c
 80077f4:	42f40000 	.word	0x42f40000
 80077f8:	453b8000 	.word	0x453b8000
 80077fc:	43340000 	.word	0x43340000

08007800 <Lslalom_L1802>:
//Lslalom_L1802
// 大回りスラロームで右に180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void Lslalom_L1802(void){
 8007800:	b580      	push	{r7, lr}
 8007802:	af00      	add	r7, sp, #0
	full_led_write(GREEN);
 8007804:	2002      	movs	r0, #2
 8007806:	f00b f9ff 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 800780a:	4a69      	ldr	r2, [pc, #420]	; (80079b0 <Lslalom_L1802+0x1b0>)
 800780c:	8813      	ldrh	r3, [r2, #0]
 800780e:	f36f 2308 	bfc	r3, #8, #1
 8007812:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007814:	4b67      	ldr	r3, [pc, #412]	; (80079b4 <Lslalom_L1802+0x1b4>)
 8007816:	4a68      	ldr	r2, [pc, #416]	; (80079b8 <Lslalom_L1802+0x1b8>)
 8007818:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800781a:	4b68      	ldr	r3, [pc, #416]	; (80079bc <Lslalom_L1802+0x1bc>)
 800781c:	4a66      	ldr	r2, [pc, #408]	; (80079b8 <Lslalom_L1802+0x1b8>)
 800781e:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8007820:	4b67      	ldr	r3, [pc, #412]	; (80079c0 <Lslalom_L1802+0x1c0>)
 8007822:	4a68      	ldr	r2, [pc, #416]	; (80079c4 <Lslalom_L1802+0x1c4>)
 8007824:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 8007826:	4b68      	ldr	r3, [pc, #416]	; (80079c8 <Lslalom_L1802+0x1c8>)
 8007828:	4a66      	ldr	r2, [pc, #408]	; (80079c4 <Lslalom_L1802+0x1c4>)
 800782a:	601a      	str	r2, [r3, #0]

	control_start();
 800782c:	f7fd faa2 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8007830:	f04f 0300 	mov.w	r3, #0
 8007834:	4a65      	ldr	r2, [pc, #404]	; (80079cc <Lslalom_L1802+0x1cc>)
 8007836:	6013      	str	r3, [r2, #0]
 8007838:	4a65      	ldr	r2, [pc, #404]	; (80079d0 <Lslalom_L1802+0x1d0>)
 800783a:	6013      	str	r3, [r2, #0]
	while(dist_l < LROTATE_H_OFFSET_F && dist_r < LROTATE_H_OFFSET_F);
 800783c:	bf00      	nop
 800783e:	4b64      	ldr	r3, [pc, #400]	; (80079d0 <Lslalom_L1802+0x1d0>)
 8007840:	edd3 7a00 	vldr	s15, [r3]
 8007844:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8007848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800784c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007850:	d509      	bpl.n	8007866 <Lslalom_L1802+0x66>
 8007852:	4b5e      	ldr	r3, [pc, #376]	; (80079cc <Lslalom_L1802+0x1cc>)
 8007854:	edd3 7a00 	vldr	s15, [r3]
 8007858:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800785c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007864:	d4eb      	bmi.n	800783e <Lslalom_L1802+0x3e>
	drive_stop();
 8007866:	f7fd fa5d 	bl	8004d24 <drive_stop>
	control_stop();
 800786a:	f7fd fa97 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 800786e:	4a50      	ldr	r2, [pc, #320]	; (80079b0 <Lslalom_L1802+0x1b0>)
 8007870:	8813      	ldrh	r3, [r2, #0]
 8007872:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007876:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = LROTATE_H_DEGACCEL;
 8007878:	4b56      	ldr	r3, [pc, #344]	; (80079d4 <Lslalom_L1802+0x1d4>)
 800787a:	4a57      	ldr	r2, [pc, #348]	; (80079d8 <Lslalom_L1802+0x1d8>)
 800787c:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 800787e:	4b57      	ldr	r3, [pc, #348]	; (80079dc <Lslalom_L1802+0x1dc>)
 8007880:	f04f 0200 	mov.w	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
	omega_max = LROTATE_H_OMEGA;
 8007886:	4b56      	ldr	r3, [pc, #344]	; (80079e0 <Lslalom_L1802+0x1e0>)
 8007888:	4a56      	ldr	r2, [pc, #344]	; (80079e4 <Lslalom_L1802+0x1e4>)
 800788a:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 800788c:	4b56      	ldr	r3, [pc, #344]	; (80079e8 <Lslalom_L1802+0x1e8>)
 800788e:	4a4d      	ldr	r2, [pc, #308]	; (80079c4 <Lslalom_L1802+0x1c4>)
 8007890:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8007892:	4a47      	ldr	r2, [pc, #284]	; (80079b0 <Lslalom_L1802+0x1b0>)
 8007894:	8813      	ldrh	r3, [r2, #0]
 8007896:	f043 0302 	orr.w	r3, r3, #2
 800789a:	8013      	strh	r3, [r2, #0]
//	while(degree_z < target_degree_z+70);
	while(degree_z < target_degree_z+LROTATE_H_DEG);
 800789c:	bf00      	nop
 800789e:	4b53      	ldr	r3, [pc, #332]	; (80079ec <Lslalom_L1802+0x1ec>)
 80078a0:	edd3 7a00 	vldr	s15, [r3]
 80078a4:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80079f0 <Lslalom_L1802+0x1f0>
 80078a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078ac:	4b51      	ldr	r3, [pc, #324]	; (80079f4 <Lslalom_L1802+0x1f4>)
 80078ae:	edd3 7a00 	vldr	s15, [r3]
 80078b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80078b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ba:	dcf0      	bgt.n	800789e <Lslalom_L1802+0x9e>

	target_degaccel_z = 0;
 80078bc:	4b45      	ldr	r3, [pc, #276]	; (80079d4 <Lslalom_L1802+0x1d4>)
 80078be:	f04f 0200 	mov.w	r2, #0
 80078c2:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+130);
	while(degree_z < target_degree_z+(180-LROTATE_H_DEG+2));
 80078c4:	bf00      	nop
 80078c6:	4b49      	ldr	r3, [pc, #292]	; (80079ec <Lslalom_L1802+0x1ec>)
 80078c8:	edd3 7a00 	vldr	s15, [r3]
 80078cc:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80079f8 <Lslalom_L1802+0x1f8>
 80078d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078d4:	4b47      	ldr	r3, [pc, #284]	; (80079f4 <Lslalom_L1802+0x1f4>)
 80078d6:	edd3 7a00 	vldr	s15, [r3]
 80078da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80078de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e2:	dcf0      	bgt.n	80078c6 <Lslalom_L1802+0xc6>

	target_degaccel_z = -LROTATE_H_DEGACCEL;
 80078e4:	4b3b      	ldr	r3, [pc, #236]	; (80079d4 <Lslalom_L1802+0x1d4>)
 80078e6:	4a45      	ldr	r2, [pc, #276]	; (80079fc <Lslalom_L1802+0x1fc>)
 80078e8:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+180);
 80078ea:	bf00      	nop
 80078ec:	4b3f      	ldr	r3, [pc, #252]	; (80079ec <Lslalom_L1802+0x1ec>)
 80078ee:	edd3 7a00 	vldr	s15, [r3]
 80078f2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8007a00 <Lslalom_L1802+0x200>
 80078f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078fa:	4b3e      	ldr	r3, [pc, #248]	; (80079f4 <Lslalom_L1802+0x1f4>)
 80078fc:	edd3 7a00 	vldr	s15, [r3]
 8007900:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007908:	dcf0      	bgt.n	80078ec <Lslalom_L1802+0xec>
	if(!MF.FLAG.XDIR){
 800790a:	4b29      	ldr	r3, [pc, #164]	; (80079b0 <Lslalom_L1802+0x1b0>)
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	d108      	bne.n	800792a <Lslalom_L1802+0x12a>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007918:	2101      	movs	r1, #1
 800791a:	20ff      	movs	r0, #255	; 0xff
 800791c:	f009 fba4 	bl	8011068 <turn_dir>
		turn_dir(DIR_TURN_L90, 1);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 8007920:	2101      	movs	r1, #1
 8007922:	20ff      	movs	r0, #255	; 0xff
 8007924:	f009 fba0 	bl	8011068 <turn_dir>
 8007928:	e003      	b.n	8007932 <Lslalom_L1802+0x132>
	}else{
		turn_dir(DIR_TURN_L180_8, 3);									//マイクロマウス内部位置情報でも左回転処理&目標角度右90度
 800792a:	2103      	movs	r1, #3
 800792c:	20fc      	movs	r0, #252	; 0xfc
 800792e:	f009 fb9b 	bl	8011068 <turn_dir>
	}

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8007932:	4a1f      	ldr	r2, [pc, #124]	; (80079b0 <Lslalom_L1802+0x1b0>)
 8007934:	8813      	ldrh	r3, [r2, #0]
 8007936:	f36f 334d 	bfc	r3, #13, #1
 800793a:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800793c:	4b1d      	ldr	r3, [pc, #116]	; (80079b4 <Lslalom_L1802+0x1b4>)
 800793e:	4a1e      	ldr	r2, [pc, #120]	; (80079b8 <Lslalom_L1802+0x1b8>)
 8007940:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8007942:	4b1e      	ldr	r3, [pc, #120]	; (80079bc <Lslalom_L1802+0x1bc>)
 8007944:	4a1c      	ldr	r2, [pc, #112]	; (80079b8 <Lslalom_L1802+0x1b8>)
 8007946:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8007948:	4b1d      	ldr	r3, [pc, #116]	; (80079c0 <Lslalom_L1802+0x1c0>)
 800794a:	4a1e      	ldr	r2, [pc, #120]	; (80079c4 <Lslalom_L1802+0x1c4>)
 800794c:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 800794e:	4b1e      	ldr	r3, [pc, #120]	; (80079c8 <Lslalom_L1802+0x1c8>)
 8007950:	4a1c      	ldr	r2, [pc, #112]	; (80079c4 <Lslalom_L1802+0x1c4>)
 8007952:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8007954:	f04f 0300 	mov.w	r3, #0
 8007958:	4a1c      	ldr	r2, [pc, #112]	; (80079cc <Lslalom_L1802+0x1cc>)
 800795a:	6013      	str	r3, [r2, #0]
 800795c:	4a1c      	ldr	r2, [pc, #112]	; (80079d0 <Lslalom_L1802+0x1d0>)
 800795e:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8007960:	4a13      	ldr	r2, [pc, #76]	; (80079b0 <Lslalom_L1802+0x1b0>)
 8007962:	8813      	ldrh	r3, [r2, #0]
 8007964:	f043 0304 	orr.w	r3, r3, #4
 8007968:	8013      	strh	r3, [r2, #0]
	control_start();
 800796a:	f7fd fa03 	bl	8004d74 <control_start>
	while(dist_l < LROTATE_H_OFFSET_B && dist_r < LROTATE_H_OFFSET_B);
 800796e:	bf00      	nop
 8007970:	4b17      	ldr	r3, [pc, #92]	; (80079d0 <Lslalom_L1802+0x1d0>)
 8007972:	edd3 7a00 	vldr	s15, [r3]
 8007976:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800797a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800797e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007982:	d509      	bpl.n	8007998 <Lslalom_L1802+0x198>
 8007984:	4b11      	ldr	r3, [pc, #68]	; (80079cc <Lslalom_L1802+0x1cc>)
 8007986:	edd3 7a00 	vldr	s15, [r3]
 800798a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800798e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007996:	d4eb      	bmi.n	8007970 <Lslalom_L1802+0x170>
	if(MF.FLAG.SCND == 0)get_wall_info();					//壁情報を取得，片壁制御の有効・無効の判断
 8007998:	4b05      	ldr	r3, [pc, #20]	; (80079b0 <Lslalom_L1802+0x1b0>)
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <Lslalom_L1802+0x1aa>
 80079a6:	f00b f8bb 	bl	8012b20 <get_wall_info>
}
 80079aa:	bf00      	nop
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	20000fac 	.word	0x20000fac
 80079b4:	20000da0 	.word	0x20000da0
 80079b8:	461c4000 	.word	0x461c4000
 80079bc:	20000b20 	.word	0x20000b20
 80079c0:	200007b4 	.word	0x200007b4
 80079c4:	44480000 	.word	0x44480000
 80079c8:	200001dc 	.word	0x200001dc
 80079cc:	20000b2c 	.word	0x20000b2c
 80079d0:	200012e8 	.word	0x200012e8
 80079d4:	20000b98 	.word	0x20000b98
 80079d8:	453b8000 	.word	0x453b8000
 80079dc:	200001e0 	.word	0x200001e0
 80079e0:	20000b24 	.word	0x20000b24
 80079e4:	44160000 	.word	0x44160000
 80079e8:	20000b34 	.word	0x20000b34
 80079ec:	20000c40 	.word	0x20000c40
 80079f0:	42700000 	.word	0x42700000
 80079f4:	20000b9c 	.word	0x20000b9c
 80079f8:	42f40000 	.word	0x42f40000
 80079fc:	c53b8000 	.word	0xc53b8000
 8007a00:	43340000 	.word	0x43340000

08007a04 <v_R45>:
//v_R45
// 区画中心から右に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45(void){
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0

	full_led_write(PURPLE);
 8007a08:	2005      	movs	r0, #5
 8007a0a:	f00b f8fd 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 8007a0e:	4a7d      	ldr	r2, [pc, #500]	; (8007c04 <v_R45+0x200>)
 8007a10:	8813      	ldrh	r3, [r2, #0]
 8007a12:	f36f 2308 	bfc	r3, #8, #1
 8007a16:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007a18:	4b7b      	ldr	r3, [pc, #492]	; (8007c08 <v_R45+0x204>)
 8007a1a:	4a7c      	ldr	r2, [pc, #496]	; (8007c0c <v_R45+0x208>)
 8007a1c:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8007a1e:	4b7c      	ldr	r3, [pc, #496]	; (8007c10 <v_R45+0x20c>)
 8007a20:	4a7a      	ldr	r2, [pc, #488]	; (8007c0c <v_R45+0x208>)
 8007a22:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8007a24:	4b7b      	ldr	r3, [pc, #492]	; (8007c14 <v_R45+0x210>)
 8007a26:	4a7c      	ldr	r2, [pc, #496]	; (8007c18 <v_R45+0x214>)
 8007a28:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8007a2a:	4b7c      	ldr	r3, [pc, #496]	; (8007c1c <v_R45+0x218>)
 8007a2c:	4a7a      	ldr	r2, [pc, #488]	; (8007c18 <v_R45+0x214>)
 8007a2e:	601a      	str	r2, [r3, #0]

	control_start();
 8007a30:	f7fd f9a0 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8007a34:	f04f 0300 	mov.w	r3, #0
 8007a38:	4a79      	ldr	r2, [pc, #484]	; (8007c20 <v_R45+0x21c>)
 8007a3a:	6013      	str	r3, [r2, #0]
 8007a3c:	4a79      	ldr	r2, [pc, #484]	; (8007c24 <v_R45+0x220>)
 8007a3e:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 8007a40:	4b79      	ldr	r3, [pc, #484]	; (8007c28 <v_R45+0x224>)
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d115      	bne.n	8007a74 <v_R45+0x70>
		while(dist_l < V_OFFSET_F && dist_r < V_OFFSET_F);
 8007a48:	bf00      	nop
 8007a4a:	4b76      	ldr	r3, [pc, #472]	; (8007c24 <v_R45+0x220>)
 8007a4c:	edd3 7a00 	vldr	s15, [r3]
 8007a50:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8007c2c <v_R45+0x228>
 8007a54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a5c:	d51f      	bpl.n	8007a9e <v_R45+0x9a>
 8007a5e:	4b70      	ldr	r3, [pc, #448]	; (8007c20 <v_R45+0x21c>)
 8007a60:	edd3 7a00 	vldr	s15, [r3]
 8007a64:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8007c2c <v_R45+0x228>
 8007a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a70:	d4eb      	bmi.n	8007a4a <v_R45+0x46>
 8007a72:	e014      	b.n	8007a9e <v_R45+0x9a>
	}else{
		while(dist_l < V_OFFSET_B && dist_r < V_OFFSET_B);
 8007a74:	bf00      	nop
 8007a76:	4b6b      	ldr	r3, [pc, #428]	; (8007c24 <v_R45+0x220>)
 8007a78:	edd3 7a00 	vldr	s15, [r3]
 8007a7c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8007c30 <v_R45+0x22c>
 8007a80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a88:	d509      	bpl.n	8007a9e <v_R45+0x9a>
 8007a8a:	4b65      	ldr	r3, [pc, #404]	; (8007c20 <v_R45+0x21c>)
 8007a8c:	edd3 7a00 	vldr	s15, [r3]
 8007a90:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007c30 <v_R45+0x22c>
 8007a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a9c:	d4eb      	bmi.n	8007a76 <v_R45+0x72>
	}
	drive_stop();
 8007a9e:	f7fd f941 	bl	8004d24 <drive_stop>
	control_stop();
 8007aa2:	f7fd f97b 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8007aa6:	4a57      	ldr	r2, [pc, #348]	; (8007c04 <v_R45+0x200>)
 8007aa8:	8813      	ldrh	r3, [r2, #0]
 8007aaa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007aae:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -V_DEGACCEL;
 8007ab0:	4b60      	ldr	r3, [pc, #384]	; (8007c34 <v_R45+0x230>)
 8007ab2:	4a61      	ldr	r2, [pc, #388]	; (8007c38 <v_R45+0x234>)
 8007ab4:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8007ab6:	4b61      	ldr	r3, [pc, #388]	; (8007c3c <v_R45+0x238>)
 8007ab8:	f04f 0200 	mov.w	r2, #0
 8007abc:	601a      	str	r2, [r3, #0]
	omega_min = -V_OMEGA;
 8007abe:	4b60      	ldr	r3, [pc, #384]	; (8007c40 <v_R45+0x23c>)
 8007ac0:	4a60      	ldr	r2, [pc, #384]	; (8007c44 <v_R45+0x240>)
 8007ac2:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8007ac4:	4b60      	ldr	r3, [pc, #384]	; (8007c48 <v_R45+0x244>)
 8007ac6:	4a54      	ldr	r2, [pc, #336]	; (8007c18 <v_R45+0x214>)
 8007ac8:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8007aca:	4a4e      	ldr	r2, [pc, #312]	; (8007c04 <v_R45+0x200>)
 8007acc:	8813      	ldrh	r3, [r2, #0]
 8007ace:	f043 0302 	orr.w	r3, r3, #2
 8007ad2:	8013      	strh	r3, [r2, #0]
//	while(degree_z > target_degree_z-20);
	while(degree_z > target_degree_z-V_DEG);
 8007ad4:	bf00      	nop
 8007ad6:	4b5d      	ldr	r3, [pc, #372]	; (8007c4c <v_R45+0x248>)
 8007ad8:	edd3 7a00 	vldr	s15, [r3]
 8007adc:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8007ae0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007ae4:	4b5a      	ldr	r3, [pc, #360]	; (8007c50 <v_R45+0x24c>)
 8007ae6:	edd3 7a00 	vldr	s15, [r3]
 8007aea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af2:	d4f0      	bmi.n	8007ad6 <v_R45+0xd2>

	target_degaccel_z = 0;
 8007af4:	4b4f      	ldr	r3, [pc, #316]	; (8007c34 <v_R45+0x230>)
 8007af6:	f04f 0200 	mov.w	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-40);
	while(degree_z > target_degree_z-(45-V_DEG+2));
 8007afc:	bf00      	nop
 8007afe:	4b53      	ldr	r3, [pc, #332]	; (8007c4c <v_R45+0x248>)
 8007b00:	edd3 7a00 	vldr	s15, [r3]
 8007b04:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8007c54 <v_R45+0x250>
 8007b08:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007b0c:	4b50      	ldr	r3, [pc, #320]	; (8007c50 <v_R45+0x24c>)
 8007b0e:	edd3 7a00 	vldr	s15, [r3]
 8007b12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b1a:	d4f0      	bmi.n	8007afe <v_R45+0xfa>

	target_degaccel_z = V_DEGACCEL;
 8007b1c:	4b45      	ldr	r3, [pc, #276]	; (8007c34 <v_R45+0x230>)
 8007b1e:	4a4e      	ldr	r2, [pc, #312]	; (8007c58 <v_R45+0x254>)
 8007b20:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-45);
 8007b22:	bf00      	nop
 8007b24:	4b49      	ldr	r3, [pc, #292]	; (8007c4c <v_R45+0x248>)
 8007b26:	edd3 7a00 	vldr	s15, [r3]
 8007b2a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007c5c <v_R45+0x258>
 8007b2e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007b32:	4b47      	ldr	r3, [pc, #284]	; (8007c50 <v_R45+0x24c>)
 8007b34:	edd3 7a00 	vldr	s15, [r3]
 8007b38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b40:	d4f0      	bmi.n	8007b24 <v_R45+0x120>
	turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007b42:	2103      	movs	r1, #3
 8007b44:	2001      	movs	r0, #1
 8007b46:	f009 fa8f 	bl	8011068 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 8007b4a:	4b37      	ldr	r3, [pc, #220]	; (8007c28 <v_R45+0x224>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	bfb8      	it	lt
 8007b58:	425b      	neglt	r3, r3
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	4b32      	ldr	r3, [pc, #200]	; (8007c28 <v_R45+0x224>)
 8007b5e:	701a      	strb	r2, [r3, #0]
//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8007b60:	4a28      	ldr	r2, [pc, #160]	; (8007c04 <v_R45+0x200>)
 8007b62:	8813      	ldrh	r3, [r2, #0]
 8007b64:	f36f 334d 	bfc	r3, #13, #1
 8007b68:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007b6a:	4b27      	ldr	r3, [pc, #156]	; (8007c08 <v_R45+0x204>)
 8007b6c:	4a27      	ldr	r2, [pc, #156]	; (8007c0c <v_R45+0x208>)
 8007b6e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8007b70:	4b27      	ldr	r3, [pc, #156]	; (8007c10 <v_R45+0x20c>)
 8007b72:	4a26      	ldr	r2, [pc, #152]	; (8007c0c <v_R45+0x208>)
 8007b74:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8007b76:	4b27      	ldr	r3, [pc, #156]	; (8007c14 <v_R45+0x210>)
 8007b78:	4a27      	ldr	r2, [pc, #156]	; (8007c18 <v_R45+0x214>)
 8007b7a:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8007b7c:	4b27      	ldr	r3, [pc, #156]	; (8007c1c <v_R45+0x218>)
 8007b7e:	4a26      	ldr	r2, [pc, #152]	; (8007c18 <v_R45+0x214>)
 8007b80:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8007b82:	f04f 0300 	mov.w	r3, #0
 8007b86:	4a26      	ldr	r2, [pc, #152]	; (8007c20 <v_R45+0x21c>)
 8007b88:	6013      	str	r3, [r2, #0]
 8007b8a:	4a26      	ldr	r2, [pc, #152]	; (8007c24 <v_R45+0x220>)
 8007b8c:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8007b8e:	4a1d      	ldr	r2, [pc, #116]	; (8007c04 <v_R45+0x200>)
 8007b90:	8813      	ldrh	r3, [r2, #0]
 8007b92:	f043 0304 	orr.w	r3, r3, #4
 8007b96:	8013      	strh	r3, [r2, #0]
	control_start();
 8007b98:	f7fd f8ec 	bl	8004d74 <control_start>
	if(v_flag == 0){
 8007b9c:	4b22      	ldr	r3, [pc, #136]	; (8007c28 <v_R45+0x224>)
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d116      	bne.n	8007bd2 <v_R45+0x1ce>
		while(dist_l < V_OFFSET_F && dist_r < V_OFFSET_F);
 8007ba4:	bf00      	nop
 8007ba6:	4b1f      	ldr	r3, [pc, #124]	; (8007c24 <v_R45+0x220>)
 8007ba8:	edd3 7a00 	vldr	s15, [r3]
 8007bac:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007c2c <v_R45+0x228>
 8007bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb8:	d400      	bmi.n	8007bbc <v_R45+0x1b8>
	}else{
		while(dist_l < V_OFFSET_B && dist_r < V_OFFSET_B);
	}
}
 8007bba:	e020      	b.n	8007bfe <v_R45+0x1fa>
		while(dist_l < V_OFFSET_F && dist_r < V_OFFSET_F);
 8007bbc:	4b18      	ldr	r3, [pc, #96]	; (8007c20 <v_R45+0x21c>)
 8007bbe:	edd3 7a00 	vldr	s15, [r3]
 8007bc2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007c2c <v_R45+0x228>
 8007bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bce:	d4ea      	bmi.n	8007ba6 <v_R45+0x1a2>
}
 8007bd0:	e015      	b.n	8007bfe <v_R45+0x1fa>
		while(dist_l < V_OFFSET_B && dist_r < V_OFFSET_B);
 8007bd2:	bf00      	nop
 8007bd4:	4b13      	ldr	r3, [pc, #76]	; (8007c24 <v_R45+0x220>)
 8007bd6:	edd3 7a00 	vldr	s15, [r3]
 8007bda:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8007c30 <v_R45+0x22c>
 8007bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007be6:	d400      	bmi.n	8007bea <v_R45+0x1e6>
}
 8007be8:	e009      	b.n	8007bfe <v_R45+0x1fa>
		while(dist_l < V_OFFSET_B && dist_r < V_OFFSET_B);
 8007bea:	4b0d      	ldr	r3, [pc, #52]	; (8007c20 <v_R45+0x21c>)
 8007bec:	edd3 7a00 	vldr	s15, [r3]
 8007bf0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8007c30 <v_R45+0x22c>
 8007bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bfc:	d4ea      	bmi.n	8007bd4 <v_R45+0x1d0>
}
 8007bfe:	bf00      	nop
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	20000fac 	.word	0x20000fac
 8007c08:	20000da0 	.word	0x20000da0
 8007c0c:	461c4000 	.word	0x461c4000
 8007c10:	20000b20 	.word	0x20000b20
 8007c14:	200007b4 	.word	0x200007b4
 8007c18:	43c80000 	.word	0x43c80000
 8007c1c:	200001dc 	.word	0x200001dc
 8007c20:	20000b2c 	.word	0x20000b2c
 8007c24:	200012e8 	.word	0x200012e8
 8007c28:	20000b28 	.word	0x20000b28
 8007c2c:	42200000 	.word	0x42200000
 8007c30:	42a00000 	.word	0x42a00000
 8007c34:	20000b98 	.word	0x20000b98
 8007c38:	c53b8000 	.word	0xc53b8000
 8007c3c:	200001e0 	.word	0x200001e0
 8007c40:	200002f0 	.word	0x200002f0
 8007c44:	c3960000 	.word	0xc3960000
 8007c48:	20000b34 	.word	0x20000b34
 8007c4c:	20000c40 	.word	0x20000c40
 8007c50:	20000b9c 	.word	0x20000b9c
 8007c54:	42000000 	.word	0x42000000
 8007c58:	453b8000 	.word	0x453b8000
 8007c5c:	42340000 	.word	0x42340000

08007c60 <v_L45>:
//v_L45
// 区画中心から左に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45(void){
 8007c60:	b580      	push	{r7, lr}
 8007c62:	af00      	add	r7, sp, #0
	control_stop();
 8007c64:	f7fd f89a 	bl	8004d9c <control_stop>

	full_led_write(YELLOW);
 8007c68:	2006      	movs	r0, #6
 8007c6a:	f00a ffcd 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 8007c6e:	4a7b      	ldr	r2, [pc, #492]	; (8007e5c <v_L45+0x1fc>)
 8007c70:	8813      	ldrh	r3, [r2, #0]
 8007c72:	f36f 2308 	bfc	r3, #8, #1
 8007c76:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007c78:	4b79      	ldr	r3, [pc, #484]	; (8007e60 <v_L45+0x200>)
 8007c7a:	4a7a      	ldr	r2, [pc, #488]	; (8007e64 <v_L45+0x204>)
 8007c7c:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8007c7e:	4b7a      	ldr	r3, [pc, #488]	; (8007e68 <v_L45+0x208>)
 8007c80:	4a78      	ldr	r2, [pc, #480]	; (8007e64 <v_L45+0x204>)
 8007c82:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8007c84:	4b79      	ldr	r3, [pc, #484]	; (8007e6c <v_L45+0x20c>)
 8007c86:	4a7a      	ldr	r2, [pc, #488]	; (8007e70 <v_L45+0x210>)
 8007c88:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8007c8a:	4b7a      	ldr	r3, [pc, #488]	; (8007e74 <v_L45+0x214>)
 8007c8c:	4a78      	ldr	r2, [pc, #480]	; (8007e70 <v_L45+0x210>)
 8007c8e:	601a      	str	r2, [r3, #0]

//	control_start();
	dist_l = dist_r = 0;
 8007c90:	f04f 0300 	mov.w	r3, #0
 8007c94:	4a78      	ldr	r2, [pc, #480]	; (8007e78 <v_L45+0x218>)
 8007c96:	6013      	str	r3, [r2, #0]
 8007c98:	4a78      	ldr	r2, [pc, #480]	; (8007e7c <v_L45+0x21c>)
 8007c9a:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 8007c9c:	4b78      	ldr	r3, [pc, #480]	; (8007e80 <v_L45+0x220>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d115      	bne.n	8007cd0 <v_L45+0x70>
		while(dist_l < V_OFFSET_F+15 && dist_r < V_OFFSET_F+15);
 8007ca4:	bf00      	nop
 8007ca6:	4b75      	ldr	r3, [pc, #468]	; (8007e7c <v_L45+0x21c>)
 8007ca8:	edd3 7a00 	vldr	s15, [r3]
 8007cac:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8007e84 <v_L45+0x224>
 8007cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cb8:	d51f      	bpl.n	8007cfa <v_L45+0x9a>
 8007cba:	4b6f      	ldr	r3, [pc, #444]	; (8007e78 <v_L45+0x218>)
 8007cbc:	edd3 7a00 	vldr	s15, [r3]
 8007cc0:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8007e84 <v_L45+0x224>
 8007cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ccc:	d4eb      	bmi.n	8007ca6 <v_L45+0x46>
 8007cce:	e014      	b.n	8007cfa <v_L45+0x9a>
	}else{
		while(dist_l < V_OFFSET_B+5 && dist_r < V_OFFSET_B+5);
 8007cd0:	bf00      	nop
 8007cd2:	4b6a      	ldr	r3, [pc, #424]	; (8007e7c <v_L45+0x21c>)
 8007cd4:	edd3 7a00 	vldr	s15, [r3]
 8007cd8:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8007e88 <v_L45+0x228>
 8007cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ce4:	d509      	bpl.n	8007cfa <v_L45+0x9a>
 8007ce6:	4b64      	ldr	r3, [pc, #400]	; (8007e78 <v_L45+0x218>)
 8007ce8:	edd3 7a00 	vldr	s15, [r3]
 8007cec:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8007e88 <v_L45+0x228>
 8007cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf8:	d4eb      	bmi.n	8007cd2 <v_L45+0x72>
	}
	drive_stop();
 8007cfa:	f7fd f813 	bl	8004d24 <drive_stop>
	control_stop();
 8007cfe:	f7fd f84d 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8007d02:	4a56      	ldr	r2, [pc, #344]	; (8007e5c <v_L45+0x1fc>)
 8007d04:	8813      	ldrh	r3, [r2, #0]
 8007d06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007d0a:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = V_DEGACCEL;
 8007d0c:	4b5f      	ldr	r3, [pc, #380]	; (8007e8c <v_L45+0x22c>)
 8007d0e:	4a60      	ldr	r2, [pc, #384]	; (8007e90 <v_L45+0x230>)
 8007d10:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8007d12:	4b60      	ldr	r3, [pc, #384]	; (8007e94 <v_L45+0x234>)
 8007d14:	f04f 0200 	mov.w	r2, #0
 8007d18:	601a      	str	r2, [r3, #0]
	omega_max = V_OMEGA;
 8007d1a:	4b5f      	ldr	r3, [pc, #380]	; (8007e98 <v_L45+0x238>)
 8007d1c:	4a5f      	ldr	r2, [pc, #380]	; (8007e9c <v_L45+0x23c>)
 8007d1e:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8007d20:	4b5f      	ldr	r3, [pc, #380]	; (8007ea0 <v_L45+0x240>)
 8007d22:	4a53      	ldr	r2, [pc, #332]	; (8007e70 <v_L45+0x210>)
 8007d24:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8007d26:	4a4d      	ldr	r2, [pc, #308]	; (8007e5c <v_L45+0x1fc>)
 8007d28:	8813      	ldrh	r3, [r2, #0]
 8007d2a:	f043 0302 	orr.w	r3, r3, #2
 8007d2e:	8013      	strh	r3, [r2, #0]
//	while(degree_z < target_degree_z+20);
	while(degree_z < target_degree_z+V_DEG);
 8007d30:	bf00      	nop
 8007d32:	4b5c      	ldr	r3, [pc, #368]	; (8007ea4 <v_L45+0x244>)
 8007d34:	edd3 7a00 	vldr	s15, [r3]
 8007d38:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8007d3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d40:	4b59      	ldr	r3, [pc, #356]	; (8007ea8 <v_L45+0x248>)
 8007d42:	edd3 7a00 	vldr	s15, [r3]
 8007d46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d4e:	dcf0      	bgt.n	8007d32 <v_L45+0xd2>

	target_degaccel_z = 0;
 8007d50:	4b4e      	ldr	r3, [pc, #312]	; (8007e8c <v_L45+0x22c>)
 8007d52:	f04f 0200 	mov.w	r2, #0
 8007d56:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+40);
	while(degree_z < target_degree_z+(55-V_DEG+2));
 8007d58:	bf00      	nop
 8007d5a:	4b52      	ldr	r3, [pc, #328]	; (8007ea4 <v_L45+0x244>)
 8007d5c:	edd3 7a00 	vldr	s15, [r3]
 8007d60:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8007eac <v_L45+0x24c>
 8007d64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d68:	4b4f      	ldr	r3, [pc, #316]	; (8007ea8 <v_L45+0x248>)
 8007d6a:	edd3 7a00 	vldr	s15, [r3]
 8007d6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d76:	dcf0      	bgt.n	8007d5a <v_L45+0xfa>

	target_degaccel_z = -V_DEGACCEL;
 8007d78:	4b44      	ldr	r3, [pc, #272]	; (8007e8c <v_L45+0x22c>)
 8007d7a:	4a4d      	ldr	r2, [pc, #308]	; (8007eb0 <v_L45+0x250>)
 8007d7c:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z+55);
 8007d7e:	bf00      	nop
 8007d80:	4b48      	ldr	r3, [pc, #288]	; (8007ea4 <v_L45+0x244>)
 8007d82:	edd3 7a00 	vldr	s15, [r3]
 8007d86:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8007e84 <v_L45+0x224>
 8007d8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d8e:	4b46      	ldr	r3, [pc, #280]	; (8007ea8 <v_L45+0x248>)
 8007d90:	edd3 7a00 	vldr	s15, [r3]
 8007d94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d9c:	d4f0      	bmi.n	8007d80 <v_L45+0x120>
	turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007d9e:	2103      	movs	r1, #3
 8007da0:	20ff      	movs	r0, #255	; 0xff
 8007da2:	f009 f961 	bl	8011068 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 8007da6:	4b36      	ldr	r3, [pc, #216]	; (8007e80 <v_L45+0x220>)
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	3301      	adds	r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	bfb8      	it	lt
 8007db4:	425b      	neglt	r3, r3
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	4b31      	ldr	r3, [pc, #196]	; (8007e80 <v_L45+0x220>)
 8007dba:	701a      	strb	r2, [r3, #0]
//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8007dbc:	4a27      	ldr	r2, [pc, #156]	; (8007e5c <v_L45+0x1fc>)
 8007dbe:	8813      	ldrh	r3, [r2, #0]
 8007dc0:	f36f 334d 	bfc	r3, #13, #1
 8007dc4:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007dc6:	4b26      	ldr	r3, [pc, #152]	; (8007e60 <v_L45+0x200>)
 8007dc8:	4a26      	ldr	r2, [pc, #152]	; (8007e64 <v_L45+0x204>)
 8007dca:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8007dcc:	4b26      	ldr	r3, [pc, #152]	; (8007e68 <v_L45+0x208>)
 8007dce:	4a25      	ldr	r2, [pc, #148]	; (8007e64 <v_L45+0x204>)
 8007dd0:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8007dd2:	4b26      	ldr	r3, [pc, #152]	; (8007e6c <v_L45+0x20c>)
 8007dd4:	4a26      	ldr	r2, [pc, #152]	; (8007e70 <v_L45+0x210>)
 8007dd6:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8007dd8:	4b26      	ldr	r3, [pc, #152]	; (8007e74 <v_L45+0x214>)
 8007dda:	4a25      	ldr	r2, [pc, #148]	; (8007e70 <v_L45+0x210>)
 8007ddc:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8007dde:	f04f 0300 	mov.w	r3, #0
 8007de2:	4a25      	ldr	r2, [pc, #148]	; (8007e78 <v_L45+0x218>)
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	4a25      	ldr	r2, [pc, #148]	; (8007e7c <v_L45+0x21c>)
 8007de8:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8007dea:	4a1c      	ldr	r2, [pc, #112]	; (8007e5c <v_L45+0x1fc>)
 8007dec:	8813      	ldrh	r3, [r2, #0]
 8007dee:	f043 0304 	orr.w	r3, r3, #4
 8007df2:	8013      	strh	r3, [r2, #0]
//	control_start();
	if(v_flag == 0){
 8007df4:	4b22      	ldr	r3, [pc, #136]	; (8007e80 <v_L45+0x220>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d116      	bne.n	8007e2a <v_L45+0x1ca>
		while(dist_l < V_OFFSET_F+15 && dist_r < V_OFFSET_F+15);
 8007dfc:	bf00      	nop
 8007dfe:	4b1f      	ldr	r3, [pc, #124]	; (8007e7c <v_L45+0x21c>)
 8007e00:	edd3 7a00 	vldr	s15, [r3]
 8007e04:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007e84 <v_L45+0x224>
 8007e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e10:	d400      	bmi.n	8007e14 <v_L45+0x1b4>
	}else{
		while(dist_l < V_OFFSET_B+5 && dist_r < V_OFFSET_B+5);
	}
}
 8007e12:	e020      	b.n	8007e56 <v_L45+0x1f6>
		while(dist_l < V_OFFSET_F+15 && dist_r < V_OFFSET_F+15);
 8007e14:	4b18      	ldr	r3, [pc, #96]	; (8007e78 <v_L45+0x218>)
 8007e16:	edd3 7a00 	vldr	s15, [r3]
 8007e1a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007e84 <v_L45+0x224>
 8007e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e26:	d4ea      	bmi.n	8007dfe <v_L45+0x19e>
}
 8007e28:	e015      	b.n	8007e56 <v_L45+0x1f6>
		while(dist_l < V_OFFSET_B+5 && dist_r < V_OFFSET_B+5);
 8007e2a:	bf00      	nop
 8007e2c:	4b13      	ldr	r3, [pc, #76]	; (8007e7c <v_L45+0x21c>)
 8007e2e:	edd3 7a00 	vldr	s15, [r3]
 8007e32:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8007e88 <v_L45+0x228>
 8007e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e3e:	d400      	bmi.n	8007e42 <v_L45+0x1e2>
}
 8007e40:	e009      	b.n	8007e56 <v_L45+0x1f6>
		while(dist_l < V_OFFSET_B+5 && dist_r < V_OFFSET_B+5);
 8007e42:	4b0d      	ldr	r3, [pc, #52]	; (8007e78 <v_L45+0x218>)
 8007e44:	edd3 7a00 	vldr	s15, [r3]
 8007e48:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8007e88 <v_L45+0x228>
 8007e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e54:	d4ea      	bmi.n	8007e2c <v_L45+0x1cc>
}
 8007e56:	bf00      	nop
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20000fac 	.word	0x20000fac
 8007e60:	20000da0 	.word	0x20000da0
 8007e64:	461c4000 	.word	0x461c4000
 8007e68:	20000b20 	.word	0x20000b20
 8007e6c:	200007b4 	.word	0x200007b4
 8007e70:	43c80000 	.word	0x43c80000
 8007e74:	200001dc 	.word	0x200001dc
 8007e78:	20000b2c 	.word	0x20000b2c
 8007e7c:	200012e8 	.word	0x200012e8
 8007e80:	20000b28 	.word	0x20000b28
 8007e84:	425c0000 	.word	0x425c0000
 8007e88:	42aa0000 	.word	0x42aa0000
 8007e8c:	20000b98 	.word	0x20000b98
 8007e90:	453b8000 	.word	0x453b8000
 8007e94:	200001e0 	.word	0x200001e0
 8007e98:	20000b24 	.word	0x20000b24
 8007e9c:	43960000 	.word	0x43960000
 8007ea0:	20000b34 	.word	0x20000b34
 8007ea4:	20000c40 	.word	0x20000c40
 8007ea8:	20000b9c 	.word	0x20000b9c
 8007eac:	42280000 	.word	0x42280000
 8007eb0:	c53b8000 	.word	0xc53b8000

08007eb4 <v_R45D>:
//v_R45D
//a区画中心から右に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45D(void){
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	af00      	add	r7, sp, #0

	full_led_write(PURPLE);
 8007eb8:	2005      	movs	r0, #5
 8007eba:	f00a fea5 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 8007ebe:	4a80      	ldr	r2, [pc, #512]	; (80080c0 <v_R45D+0x20c>)
 8007ec0:	8813      	ldrh	r3, [r2, #0]
 8007ec2:	f36f 2308 	bfc	r3, #8, #1
 8007ec6:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8007ec8:	4b7e      	ldr	r3, [pc, #504]	; (80080c4 <v_R45D+0x210>)
 8007eca:	4a7f      	ldr	r2, [pc, #508]	; (80080c8 <v_R45D+0x214>)
 8007ecc:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8007ece:	4b7f      	ldr	r3, [pc, #508]	; (80080cc <v_R45D+0x218>)
 8007ed0:	4a7d      	ldr	r2, [pc, #500]	; (80080c8 <v_R45D+0x214>)
 8007ed2:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8007ed4:	4b7e      	ldr	r3, [pc, #504]	; (80080d0 <v_R45D+0x21c>)
 8007ed6:	4a7f      	ldr	r2, [pc, #508]	; (80080d4 <v_R45D+0x220>)
 8007ed8:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8007eda:	4b7f      	ldr	r3, [pc, #508]	; (80080d8 <v_R45D+0x224>)
 8007edc:	4a7d      	ldr	r2, [pc, #500]	; (80080d4 <v_R45D+0x220>)
 8007ede:	601a      	str	r2, [r3, #0]

	control_start();
 8007ee0:	f7fc ff48 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8007ee4:	f04f 0300 	mov.w	r3, #0
 8007ee8:	4a7c      	ldr	r2, [pc, #496]	; (80080dc <v_R45D+0x228>)
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	4a7c      	ldr	r2, [pc, #496]	; (80080e0 <v_R45D+0x22c>)
 8007eee:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 8007ef0:	4b7c      	ldr	r3, [pc, #496]	; (80080e4 <v_R45D+0x230>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d115      	bne.n	8007f24 <v_R45D+0x70>
		while(dist_l < V_OFFSET_F && dist_r < V_OFFSET_F);
 8007ef8:	bf00      	nop
 8007efa:	4b79      	ldr	r3, [pc, #484]	; (80080e0 <v_R45D+0x22c>)
 8007efc:	edd3 7a00 	vldr	s15, [r3]
 8007f00:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80080e8 <v_R45D+0x234>
 8007f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f0c:	d51f      	bpl.n	8007f4e <v_R45D+0x9a>
 8007f0e:	4b73      	ldr	r3, [pc, #460]	; (80080dc <v_R45D+0x228>)
 8007f10:	edd3 7a00 	vldr	s15, [r3]
 8007f14:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80080e8 <v_R45D+0x234>
 8007f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f20:	d4eb      	bmi.n	8007efa <v_R45D+0x46>
 8007f22:	e014      	b.n	8007f4e <v_R45D+0x9a>
	}else{
		while(dist_l < V_OFFSET_B && dist_r < V_OFFSET_B);
 8007f24:	bf00      	nop
 8007f26:	4b6e      	ldr	r3, [pc, #440]	; (80080e0 <v_R45D+0x22c>)
 8007f28:	edd3 7a00 	vldr	s15, [r3]
 8007f2c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80080ec <v_R45D+0x238>
 8007f30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f38:	d509      	bpl.n	8007f4e <v_R45D+0x9a>
 8007f3a:	4b68      	ldr	r3, [pc, #416]	; (80080dc <v_R45D+0x228>)
 8007f3c:	edd3 7a00 	vldr	s15, [r3]
 8007f40:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80080ec <v_R45D+0x238>
 8007f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f4c:	d4eb      	bmi.n	8007f26 <v_R45D+0x72>
	}
	drive_stop();
 8007f4e:	f7fc fee9 	bl	8004d24 <drive_stop>
	control_stop();
 8007f52:	f7fc ff23 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8007f56:	4a5a      	ldr	r2, [pc, #360]	; (80080c0 <v_R45D+0x20c>)
 8007f58:	8813      	ldrh	r3, [r2, #0]
 8007f5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007f5e:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -V_DEGACCEL;
 8007f60:	4b63      	ldr	r3, [pc, #396]	; (80080f0 <v_R45D+0x23c>)
 8007f62:	4a64      	ldr	r2, [pc, #400]	; (80080f4 <v_R45D+0x240>)
 8007f64:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8007f66:	4b64      	ldr	r3, [pc, #400]	; (80080f8 <v_R45D+0x244>)
 8007f68:	f04f 0200 	mov.w	r2, #0
 8007f6c:	601a      	str	r2, [r3, #0]
	omega_min = -V_OMEGA;
 8007f6e:	4b63      	ldr	r3, [pc, #396]	; (80080fc <v_R45D+0x248>)
 8007f70:	4a63      	ldr	r2, [pc, #396]	; (8008100 <v_R45D+0x24c>)
 8007f72:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8007f74:	4b63      	ldr	r3, [pc, #396]	; (8008104 <v_R45D+0x250>)
 8007f76:	4a57      	ldr	r2, [pc, #348]	; (80080d4 <v_R45D+0x220>)
 8007f78:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8007f7a:	4a51      	ldr	r2, [pc, #324]	; (80080c0 <v_R45D+0x20c>)
 8007f7c:	8813      	ldrh	r3, [r2, #0]
 8007f7e:	f043 0302 	orr.w	r3, r3, #2
 8007f82:	8013      	strh	r3, [r2, #0]
//	while(degree_z > target_degree_z-20);
	while(degree_z > target_degree_z-V_DEG);
 8007f84:	bf00      	nop
 8007f86:	4b60      	ldr	r3, [pc, #384]	; (8008108 <v_R45D+0x254>)
 8007f88:	edd3 7a00 	vldr	s15, [r3]
 8007f8c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8007f90:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007f94:	4b5d      	ldr	r3, [pc, #372]	; (800810c <v_R45D+0x258>)
 8007f96:	edd3 7a00 	vldr	s15, [r3]
 8007f9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa2:	d4f0      	bmi.n	8007f86 <v_R45D+0xd2>

	target_degaccel_z = 0;
 8007fa4:	4b52      	ldr	r3, [pc, #328]	; (80080f0 <v_R45D+0x23c>)
 8007fa6:	f04f 0200 	mov.w	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-40);
	while(degree_z > target_degree_z-(45-V_DEG+2));
 8007fac:	bf00      	nop
 8007fae:	4b56      	ldr	r3, [pc, #344]	; (8008108 <v_R45D+0x254>)
 8007fb0:	edd3 7a00 	vldr	s15, [r3]
 8007fb4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8008110 <v_R45D+0x25c>
 8007fb8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007fbc:	4b53      	ldr	r3, [pc, #332]	; (800810c <v_R45D+0x258>)
 8007fbe:	edd3 7a00 	vldr	s15, [r3]
 8007fc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fca:	d4f0      	bmi.n	8007fae <v_R45D+0xfa>

	target_degaccel_z = V_DEGACCEL;
 8007fcc:	4b48      	ldr	r3, [pc, #288]	; (80080f0 <v_R45D+0x23c>)
 8007fce:	4a51      	ldr	r2, [pc, #324]	; (8008114 <v_R45D+0x260>)
 8007fd0:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-45);
 8007fd2:	bf00      	nop
 8007fd4:	4b4c      	ldr	r3, [pc, #304]	; (8008108 <v_R45D+0x254>)
 8007fd6:	edd3 7a00 	vldr	s15, [r3]
 8007fda:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8008118 <v_R45D+0x264>
 8007fde:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007fe2:	4b4a      	ldr	r3, [pc, #296]	; (800810c <v_R45D+0x258>)
 8007fe4:	edd3 7a00 	vldr	s15, [r3]
 8007fe8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff0:	d4f0      	bmi.n	8007fd4 <v_R45D+0x120>
	turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8007ff2:	2103      	movs	r1, #3
 8007ff4:	2001      	movs	r0, #1
 8007ff6:	f009 f837 	bl	8011068 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 8007ffa:	4b3a      	ldr	r3, [pc, #232]	; (80080e4 <v_R45D+0x230>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	3301      	adds	r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	bfb8      	it	lt
 8008008:	425b      	neglt	r3, r3
 800800a:	b2da      	uxtb	r2, r3
 800800c:	4b35      	ldr	r3, [pc, #212]	; (80080e4 <v_R45D+0x230>)
 800800e:	701a      	strb	r2, [r3, #0]
//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8008010:	4a2b      	ldr	r2, [pc, #172]	; (80080c0 <v_R45D+0x20c>)
 8008012:	8813      	ldrh	r3, [r2, #0]
 8008014:	f36f 334d 	bfc	r3, #13, #1
 8008018:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800801a:	4b2a      	ldr	r3, [pc, #168]	; (80080c4 <v_R45D+0x210>)
 800801c:	4a2a      	ldr	r2, [pc, #168]	; (80080c8 <v_R45D+0x214>)
 800801e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8008020:	4b2a      	ldr	r3, [pc, #168]	; (80080cc <v_R45D+0x218>)
 8008022:	4a29      	ldr	r2, [pc, #164]	; (80080c8 <v_R45D+0x214>)
 8008024:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8008026:	4b2a      	ldr	r3, [pc, #168]	; (80080d0 <v_R45D+0x21c>)
 8008028:	4a2a      	ldr	r2, [pc, #168]	; (80080d4 <v_R45D+0x220>)
 800802a:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 800802c:	4b2a      	ldr	r3, [pc, #168]	; (80080d8 <v_R45D+0x224>)
 800802e:	4a29      	ldr	r2, [pc, #164]	; (80080d4 <v_R45D+0x220>)
 8008030:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8008032:	f04f 0300 	mov.w	r3, #0
 8008036:	4a29      	ldr	r2, [pc, #164]	; (80080dc <v_R45D+0x228>)
 8008038:	6013      	str	r3, [r2, #0]
 800803a:	4a29      	ldr	r2, [pc, #164]	; (80080e0 <v_R45D+0x22c>)
 800803c:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 800803e:	4a20      	ldr	r2, [pc, #128]	; (80080c0 <v_R45D+0x20c>)
 8008040:	8813      	ldrh	r3, [r2, #0]
 8008042:	f043 0304 	orr.w	r3, r3, #4
 8008046:	8013      	strh	r3, [r2, #0]
	control_start();
 8008048:	f7fc fe94 	bl	8004d74 <control_start>
	if(v_flag == 0){
 800804c:	4b25      	ldr	r3, [pc, #148]	; (80080e4 <v_R45D+0x230>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d115      	bne.n	8008080 <v_R45D+0x1cc>
		while(dist_l < V_OFFSET_F-10 && dist_r < V_OFFSET_F-10);
 8008054:	bf00      	nop
 8008056:	4b22      	ldr	r3, [pc, #136]	; (80080e0 <v_R45D+0x22c>)
 8008058:	edd3 7a00 	vldr	s15, [r3]
 800805c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8008060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008068:	d51f      	bpl.n	80080aa <v_R45D+0x1f6>
 800806a:	4b1c      	ldr	r3, [pc, #112]	; (80080dc <v_R45D+0x228>)
 800806c:	edd3 7a00 	vldr	s15, [r3]
 8008070:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8008074:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800807c:	d4eb      	bmi.n	8008056 <v_R45D+0x1a2>
 800807e:	e014      	b.n	80080aa <v_R45D+0x1f6>
	}else{
		while(dist_l < V_OFFSET_B-10 && dist_r < V_OFFSET_B-10);
 8008080:	bf00      	nop
 8008082:	4b17      	ldr	r3, [pc, #92]	; (80080e0 <v_R45D+0x22c>)
 8008084:	edd3 7a00 	vldr	s15, [r3]
 8008088:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800811c <v_R45D+0x268>
 800808c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008094:	d509      	bpl.n	80080aa <v_R45D+0x1f6>
 8008096:	4b11      	ldr	r3, [pc, #68]	; (80080dc <v_R45D+0x228>)
 8008098:	edd3 7a00 	vldr	s15, [r3]
 800809c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800811c <v_R45D+0x268>
 80080a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a8:	d4eb      	bmi.n	8008082 <v_R45D+0x1ce>
	}

	control_start();
 80080aa:	f7fc fe63 	bl	8004d74 <control_start>
	driveD(-10000, SPEED_MIN, SPEED_RUN, 10);
 80080ae:	230a      	movs	r3, #10
 80080b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80080b4:	2132      	movs	r1, #50	; 0x32
 80080b6:	481a      	ldr	r0, [pc, #104]	; (8008120 <v_R45D+0x26c>)
 80080b8:	f7fc ff8e 	bl	8004fd8 <driveD>
	speed_max_r = SPEED_RUN;
	dist_l = dist_r = 0;
	MF.FLAG.SPD = 1;
	control_start();
	while(dist_l < 75 && dist_r < 75);
*/}
 80080bc:	bf00      	nop
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	20000fac 	.word	0x20000fac
 80080c4:	20000da0 	.word	0x20000da0
 80080c8:	461c4000 	.word	0x461c4000
 80080cc:	20000b20 	.word	0x20000b20
 80080d0:	200007b4 	.word	0x200007b4
 80080d4:	43c80000 	.word	0x43c80000
 80080d8:	200001dc 	.word	0x200001dc
 80080dc:	20000b2c 	.word	0x20000b2c
 80080e0:	200012e8 	.word	0x200012e8
 80080e4:	20000b28 	.word	0x20000b28
 80080e8:	42200000 	.word	0x42200000
 80080ec:	42a00000 	.word	0x42a00000
 80080f0:	20000b98 	.word	0x20000b98
 80080f4:	c53b8000 	.word	0xc53b8000
 80080f8:	200001e0 	.word	0x200001e0
 80080fc:	200002f0 	.word	0x200002f0
 8008100:	c3960000 	.word	0xc3960000
 8008104:	20000b34 	.word	0x20000b34
 8008108:	20000c40 	.word	0x20000c40
 800810c:	20000b9c 	.word	0x20000b9c
 8008110:	42000000 	.word	0x42000000
 8008114:	453b8000 	.word	0x453b8000
 8008118:	42340000 	.word	0x42340000
 800811c:	428c0000 	.word	0x428c0000
 8008120:	ffffd8f0 	.word	0xffffd8f0

08008124 <v_L45D>:
//v_L45D
//a区画中心から左に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45D(void){
 8008124:	b580      	push	{r7, lr}
 8008126:	af00      	add	r7, sp, #0

	full_led_write(YELLOW);
 8008128:	2006      	movs	r0, #6
 800812a:	f00a fd6d 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 800812e:	4a80      	ldr	r2, [pc, #512]	; (8008330 <v_L45D+0x20c>)
 8008130:	8813      	ldrh	r3, [r2, #0]
 8008132:	f36f 2308 	bfc	r3, #8, #1
 8008136:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008138:	4b7e      	ldr	r3, [pc, #504]	; (8008334 <v_L45D+0x210>)
 800813a:	4a7f      	ldr	r2, [pc, #508]	; (8008338 <v_L45D+0x214>)
 800813c:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800813e:	4b7f      	ldr	r3, [pc, #508]	; (800833c <v_L45D+0x218>)
 8008140:	4a7d      	ldr	r2, [pc, #500]	; (8008338 <v_L45D+0x214>)
 8008142:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8008144:	4b7e      	ldr	r3, [pc, #504]	; (8008340 <v_L45D+0x21c>)
 8008146:	4a7f      	ldr	r2, [pc, #508]	; (8008344 <v_L45D+0x220>)
 8008148:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 800814a:	4b7f      	ldr	r3, [pc, #508]	; (8008348 <v_L45D+0x224>)
 800814c:	4a7d      	ldr	r2, [pc, #500]	; (8008344 <v_L45D+0x220>)
 800814e:	601a      	str	r2, [r3, #0]

	control_start();
 8008150:	f7fc fe10 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8008154:	f04f 0300 	mov.w	r3, #0
 8008158:	4a7c      	ldr	r2, [pc, #496]	; (800834c <v_L45D+0x228>)
 800815a:	6013      	str	r3, [r2, #0]
 800815c:	4a7c      	ldr	r2, [pc, #496]	; (8008350 <v_L45D+0x22c>)
 800815e:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 8008160:	4b7c      	ldr	r3, [pc, #496]	; (8008354 <v_L45D+0x230>)
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d115      	bne.n	8008194 <v_L45D+0x70>
		while(dist_l < V_OFFSET_F+15 && dist_r < V_OFFSET_F+15);
 8008168:	bf00      	nop
 800816a:	4b79      	ldr	r3, [pc, #484]	; (8008350 <v_L45D+0x22c>)
 800816c:	edd3 7a00 	vldr	s15, [r3]
 8008170:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8008358 <v_L45D+0x234>
 8008174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800817c:	d51f      	bpl.n	80081be <v_L45D+0x9a>
 800817e:	4b73      	ldr	r3, [pc, #460]	; (800834c <v_L45D+0x228>)
 8008180:	edd3 7a00 	vldr	s15, [r3]
 8008184:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8008358 <v_L45D+0x234>
 8008188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800818c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008190:	d4eb      	bmi.n	800816a <v_L45D+0x46>
 8008192:	e014      	b.n	80081be <v_L45D+0x9a>
	}else{
		while(dist_l < V_OFFSET_B+5 && dist_r < V_OFFSET_B+5);
 8008194:	bf00      	nop
 8008196:	4b6e      	ldr	r3, [pc, #440]	; (8008350 <v_L45D+0x22c>)
 8008198:	edd3 7a00 	vldr	s15, [r3]
 800819c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800835c <v_L45D+0x238>
 80081a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081a8:	d509      	bpl.n	80081be <v_L45D+0x9a>
 80081aa:	4b68      	ldr	r3, [pc, #416]	; (800834c <v_L45D+0x228>)
 80081ac:	edd3 7a00 	vldr	s15, [r3]
 80081b0:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800835c <v_L45D+0x238>
 80081b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081bc:	d4eb      	bmi.n	8008196 <v_L45D+0x72>
	}
	drive_stop();
 80081be:	f7fc fdb1 	bl	8004d24 <drive_stop>
	control_stop();
 80081c2:	f7fc fdeb 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 80081c6:	4a5a      	ldr	r2, [pc, #360]	; (8008330 <v_L45D+0x20c>)
 80081c8:	8813      	ldrh	r3, [r2, #0]
 80081ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80081ce:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = V_DEGACCEL;
 80081d0:	4b63      	ldr	r3, [pc, #396]	; (8008360 <v_L45D+0x23c>)
 80081d2:	4a64      	ldr	r2, [pc, #400]	; (8008364 <v_L45D+0x240>)
 80081d4:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 80081d6:	4b64      	ldr	r3, [pc, #400]	; (8008368 <v_L45D+0x244>)
 80081d8:	f04f 0200 	mov.w	r2, #0
 80081dc:	601a      	str	r2, [r3, #0]
	omega_max = V_OMEGA;
 80081de:	4b63      	ldr	r3, [pc, #396]	; (800836c <v_L45D+0x248>)
 80081e0:	4a63      	ldr	r2, [pc, #396]	; (8008370 <v_L45D+0x24c>)
 80081e2:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 80081e4:	4b63      	ldr	r3, [pc, #396]	; (8008374 <v_L45D+0x250>)
 80081e6:	4a57      	ldr	r2, [pc, #348]	; (8008344 <v_L45D+0x220>)
 80081e8:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 80081ea:	4a51      	ldr	r2, [pc, #324]	; (8008330 <v_L45D+0x20c>)
 80081ec:	8813      	ldrh	r3, [r2, #0]
 80081ee:	f043 0302 	orr.w	r3, r3, #2
 80081f2:	8013      	strh	r3, [r2, #0]
//	while(degree_z < target_degree_z+20);
	while(degree_z < target_degree_z+V_DEG);
 80081f4:	bf00      	nop
 80081f6:	4b60      	ldr	r3, [pc, #384]	; (8008378 <v_L45D+0x254>)
 80081f8:	edd3 7a00 	vldr	s15, [r3]
 80081fc:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8008200:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008204:	4b5d      	ldr	r3, [pc, #372]	; (800837c <v_L45D+0x258>)
 8008206:	edd3 7a00 	vldr	s15, [r3]
 800820a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800820e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008212:	dcf0      	bgt.n	80081f6 <v_L45D+0xd2>

	target_degaccel_z = 0;
 8008214:	4b52      	ldr	r3, [pc, #328]	; (8008360 <v_L45D+0x23c>)
 8008216:	f04f 0200 	mov.w	r2, #0
 800821a:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+40);
	while(degree_z < target_degree_z+(55-V_DEG+2));
 800821c:	bf00      	nop
 800821e:	4b56      	ldr	r3, [pc, #344]	; (8008378 <v_L45D+0x254>)
 8008220:	edd3 7a00 	vldr	s15, [r3]
 8008224:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8008380 <v_L45D+0x25c>
 8008228:	ee37 7a87 	vadd.f32	s14, s15, s14
 800822c:	4b53      	ldr	r3, [pc, #332]	; (800837c <v_L45D+0x258>)
 800822e:	edd3 7a00 	vldr	s15, [r3]
 8008232:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800823a:	dcf0      	bgt.n	800821e <v_L45D+0xfa>

	target_degaccel_z = -V_DEGACCEL;
 800823c:	4b48      	ldr	r3, [pc, #288]	; (8008360 <v_L45D+0x23c>)
 800823e:	4a51      	ldr	r2, [pc, #324]	; (8008384 <v_L45D+0x260>)
 8008240:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z+55);
 8008242:	bf00      	nop
 8008244:	4b4c      	ldr	r3, [pc, #304]	; (8008378 <v_L45D+0x254>)
 8008246:	edd3 7a00 	vldr	s15, [r3]
 800824a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8008358 <v_L45D+0x234>
 800824e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008252:	4b4a      	ldr	r3, [pc, #296]	; (800837c <v_L45D+0x258>)
 8008254:	edd3 7a00 	vldr	s15, [r3]
 8008258:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800825c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008260:	d4f0      	bmi.n	8008244 <v_L45D+0x120>
	turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008262:	2103      	movs	r1, #3
 8008264:	20ff      	movs	r0, #255	; 0xff
 8008266:	f008 feff 	bl	8011068 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 800826a:	4b3a      	ldr	r3, [pc, #232]	; (8008354 <v_L45D+0x230>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	3301      	adds	r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	bfb8      	it	lt
 8008278:	425b      	neglt	r3, r3
 800827a:	b2da      	uxtb	r2, r3
 800827c:	4b35      	ldr	r3, [pc, #212]	; (8008354 <v_L45D+0x230>)
 800827e:	701a      	strb	r2, [r3, #0]
//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8008280:	4a2b      	ldr	r2, [pc, #172]	; (8008330 <v_L45D+0x20c>)
 8008282:	8813      	ldrh	r3, [r2, #0]
 8008284:	f36f 334d 	bfc	r3, #13, #1
 8008288:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800828a:	4b2a      	ldr	r3, [pc, #168]	; (8008334 <v_L45D+0x210>)
 800828c:	4a2a      	ldr	r2, [pc, #168]	; (8008338 <v_L45D+0x214>)
 800828e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8008290:	4b2a      	ldr	r3, [pc, #168]	; (800833c <v_L45D+0x218>)
 8008292:	4a29      	ldr	r2, [pc, #164]	; (8008338 <v_L45D+0x214>)
 8008294:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8008296:	4b2a      	ldr	r3, [pc, #168]	; (8008340 <v_L45D+0x21c>)
 8008298:	4a2a      	ldr	r2, [pc, #168]	; (8008344 <v_L45D+0x220>)
 800829a:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 800829c:	4b2a      	ldr	r3, [pc, #168]	; (8008348 <v_L45D+0x224>)
 800829e:	4a29      	ldr	r2, [pc, #164]	; (8008344 <v_L45D+0x220>)
 80082a0:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 80082a2:	f04f 0300 	mov.w	r3, #0
 80082a6:	4a29      	ldr	r2, [pc, #164]	; (800834c <v_L45D+0x228>)
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	4a29      	ldr	r2, [pc, #164]	; (8008350 <v_L45D+0x22c>)
 80082ac:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80082ae:	4a20      	ldr	r2, [pc, #128]	; (8008330 <v_L45D+0x20c>)
 80082b0:	8813      	ldrh	r3, [r2, #0]
 80082b2:	f043 0304 	orr.w	r3, r3, #4
 80082b6:	8013      	strh	r3, [r2, #0]
	control_start();
 80082b8:	f7fc fd5c 	bl	8004d74 <control_start>
	if(v_flag == 0){
 80082bc:	4b25      	ldr	r3, [pc, #148]	; (8008354 <v_L45D+0x230>)
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d115      	bne.n	80082f0 <v_L45D+0x1cc>
		while(dist_l < V_OFFSET_F+5 && dist_r < V_OFFSET_F+5);
 80082c4:	bf00      	nop
 80082c6:	4b22      	ldr	r3, [pc, #136]	; (8008350 <v_L45D+0x22c>)
 80082c8:	edd3 7a00 	vldr	s15, [r3]
 80082cc:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8008388 <v_L45D+0x264>
 80082d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082d8:	d51f      	bpl.n	800831a <v_L45D+0x1f6>
 80082da:	4b1c      	ldr	r3, [pc, #112]	; (800834c <v_L45D+0x228>)
 80082dc:	edd3 7a00 	vldr	s15, [r3]
 80082e0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8008388 <v_L45D+0x264>
 80082e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ec:	d4eb      	bmi.n	80082c6 <v_L45D+0x1a2>
 80082ee:	e014      	b.n	800831a <v_L45D+0x1f6>
	}else{
		while(dist_l < V_OFFSET_B-5 && dist_r < V_OFFSET_B-5);
 80082f0:	bf00      	nop
 80082f2:	4b17      	ldr	r3, [pc, #92]	; (8008350 <v_L45D+0x22c>)
 80082f4:	edd3 7a00 	vldr	s15, [r3]
 80082f8:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800838c <v_L45D+0x268>
 80082fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008304:	d509      	bpl.n	800831a <v_L45D+0x1f6>
 8008306:	4b11      	ldr	r3, [pc, #68]	; (800834c <v_L45D+0x228>)
 8008308:	edd3 7a00 	vldr	s15, [r3]
 800830c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800838c <v_L45D+0x268>
 8008310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008318:	d4eb      	bmi.n	80082f2 <v_L45D+0x1ce>
	}

	control_start();
 800831a:	f7fc fd2b 	bl	8004d74 <control_start>
	driveD(-10000, SPEED_MIN, SPEED_RUN, 10);
 800831e:	230a      	movs	r3, #10
 8008320:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008324:	2132      	movs	r1, #50	; 0x32
 8008326:	481a      	ldr	r0, [pc, #104]	; (8008390 <v_L45D+0x26c>)
 8008328:	f7fc fe56 	bl	8004fd8 <driveD>
	speed_max_r = SPEED_RUN;
	dist_l = dist_r = 0;
	MF.FLAG.SPD = 1;
	control_start();
	while(dist_l < 75 && dist_r < 75);
*/}
 800832c:	bf00      	nop
 800832e:	bd80      	pop	{r7, pc}
 8008330:	20000fac 	.word	0x20000fac
 8008334:	20000da0 	.word	0x20000da0
 8008338:	461c4000 	.word	0x461c4000
 800833c:	20000b20 	.word	0x20000b20
 8008340:	200007b4 	.word	0x200007b4
 8008344:	43c80000 	.word	0x43c80000
 8008348:	200001dc 	.word	0x200001dc
 800834c:	20000b2c 	.word	0x20000b2c
 8008350:	200012e8 	.word	0x200012e8
 8008354:	20000b28 	.word	0x20000b28
 8008358:	425c0000 	.word	0x425c0000
 800835c:	42aa0000 	.word	0x42aa0000
 8008360:	20000b98 	.word	0x20000b98
 8008364:	453b8000 	.word	0x453b8000
 8008368:	200001e0 	.word	0x200001e0
 800836c:	20000b24 	.word	0x20000b24
 8008370:	43960000 	.word	0x43960000
 8008374:	20000b34 	.word	0x20000b34
 8008378:	20000c40 	.word	0x20000c40
 800837c:	20000b9c 	.word	0x20000b9c
 8008380:	42280000 	.word	0x42280000
 8008384:	c53b8000 	.word	0xc53b8000
 8008388:	42340000 	.word	0x42340000
 800838c:	42960000 	.word	0x42960000
 8008390:	ffffd8f0 	.word	0xffffd8f0

08008394 <v_R452>:
//v_R452
//a区画中心から右に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R452(void){
 8008394:	b580      	push	{r7, lr}
 8008396:	af00      	add	r7, sp, #0

	full_led_write(PURPLE);
 8008398:	2005      	movs	r0, #5
 800839a:	f00a fc35 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 800839e:	4a7d      	ldr	r2, [pc, #500]	; (8008594 <v_R452+0x200>)
 80083a0:	8813      	ldrh	r3, [r2, #0]
 80083a2:	f36f 2308 	bfc	r3, #8, #1
 80083a6:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80083a8:	4b7b      	ldr	r3, [pc, #492]	; (8008598 <v_R452+0x204>)
 80083aa:	4a7c      	ldr	r2, [pc, #496]	; (800859c <v_R452+0x208>)
 80083ac:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80083ae:	4b7c      	ldr	r3, [pc, #496]	; (80085a0 <v_R452+0x20c>)
 80083b0:	4a7a      	ldr	r2, [pc, #488]	; (800859c <v_R452+0x208>)
 80083b2:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80083b4:	4b7b      	ldr	r3, [pc, #492]	; (80085a4 <v_R452+0x210>)
 80083b6:	4a7c      	ldr	r2, [pc, #496]	; (80085a8 <v_R452+0x214>)
 80083b8:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 80083ba:	4b7c      	ldr	r3, [pc, #496]	; (80085ac <v_R452+0x218>)
 80083bc:	4a7a      	ldr	r2, [pc, #488]	; (80085a8 <v_R452+0x214>)
 80083be:	601a      	str	r2, [r3, #0]

	control_start();
 80083c0:	f7fc fcd8 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80083c4:	f04f 0300 	mov.w	r3, #0
 80083c8:	4a79      	ldr	r2, [pc, #484]	; (80085b0 <v_R452+0x21c>)
 80083ca:	6013      	str	r3, [r2, #0]
 80083cc:	4a79      	ldr	r2, [pc, #484]	; (80085b4 <v_R452+0x220>)
 80083ce:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 80083d0:	4b79      	ldr	r3, [pc, #484]	; (80085b8 <v_R452+0x224>)
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d115      	bne.n	8008404 <v_R452+0x70>
		while(dist_l < V_H_OFFSET_F && dist_r < V_H_OFFSET_F);
 80083d8:	bf00      	nop
 80083da:	4b76      	ldr	r3, [pc, #472]	; (80085b4 <v_R452+0x220>)
 80083dc:	edd3 7a00 	vldr	s15, [r3]
 80083e0:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 80083e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ec:	d51f      	bpl.n	800842e <v_R452+0x9a>
 80083ee:	4b70      	ldr	r3, [pc, #448]	; (80085b0 <v_R452+0x21c>)
 80083f0:	edd3 7a00 	vldr	s15, [r3]
 80083f4:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 80083f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008400:	d4eb      	bmi.n	80083da <v_R452+0x46>
 8008402:	e014      	b.n	800842e <v_R452+0x9a>
	}else{
		while(dist_l < V_H_OFFSET_B-18 && dist_r < V_H_OFFSET_B-18);
 8008404:	bf00      	nop
 8008406:	4b6b      	ldr	r3, [pc, #428]	; (80085b4 <v_R452+0x220>)
 8008408:	edd3 7a00 	vldr	s15, [r3]
 800840c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80085bc <v_R452+0x228>
 8008410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008418:	d509      	bpl.n	800842e <v_R452+0x9a>
 800841a:	4b65      	ldr	r3, [pc, #404]	; (80085b0 <v_R452+0x21c>)
 800841c:	edd3 7a00 	vldr	s15, [r3]
 8008420:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80085bc <v_R452+0x228>
 8008424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800842c:	d4eb      	bmi.n	8008406 <v_R452+0x72>
	}
	drive_stop();
 800842e:	f7fc fc79 	bl	8004d24 <drive_stop>
	control_stop();
 8008432:	f7fc fcb3 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8008436:	4a57      	ldr	r2, [pc, #348]	; (8008594 <v_R452+0x200>)
 8008438:	8813      	ldrh	r3, [r2, #0]
 800843a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800843e:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -V_H_DEGACCEL;
 8008440:	4b5f      	ldr	r3, [pc, #380]	; (80085c0 <v_R452+0x22c>)
 8008442:	4a60      	ldr	r2, [pc, #384]	; (80085c4 <v_R452+0x230>)
 8008444:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8008446:	4b60      	ldr	r3, [pc, #384]	; (80085c8 <v_R452+0x234>)
 8008448:	f04f 0200 	mov.w	r2, #0
 800844c:	601a      	str	r2, [r3, #0]
	omega_min = -V_H_OMEGA;
 800844e:	4b5f      	ldr	r3, [pc, #380]	; (80085cc <v_R452+0x238>)
 8008450:	4a5f      	ldr	r2, [pc, #380]	; (80085d0 <v_R452+0x23c>)
 8008452:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 8008454:	4b5f      	ldr	r3, [pc, #380]	; (80085d4 <v_R452+0x240>)
 8008456:	4a54      	ldr	r2, [pc, #336]	; (80085a8 <v_R452+0x214>)
 8008458:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 800845a:	4a4e      	ldr	r2, [pc, #312]	; (8008594 <v_R452+0x200>)
 800845c:	8813      	ldrh	r3, [r2, #0]
 800845e:	f043 0302 	orr.w	r3, r3, #2
 8008462:	8013      	strh	r3, [r2, #0]
//	while(degree_z > target_degree_z-15);
	while(degree_z > target_degree_z-V_H_DEG);
 8008464:	bf00      	nop
 8008466:	4b5c      	ldr	r3, [pc, #368]	; (80085d8 <v_R452+0x244>)
 8008468:	edd3 7a00 	vldr	s15, [r3]
 800846c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008470:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008474:	4b59      	ldr	r3, [pc, #356]	; (80085dc <v_R452+0x248>)
 8008476:	edd3 7a00 	vldr	s15, [r3]
 800847a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800847e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008482:	d4f0      	bmi.n	8008466 <v_R452+0xd2>

	target_degaccel_z = 0;
 8008484:	4b4e      	ldr	r3, [pc, #312]	; (80085c0 <v_R452+0x22c>)
 8008486:	f04f 0200 	mov.w	r2, #0
 800848a:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-40);
	while(degree_z > target_degree_z-(45-V_H_DEG+2));
 800848c:	bf00      	nop
 800848e:	4b52      	ldr	r3, [pc, #328]	; (80085d8 <v_R452+0x244>)
 8008490:	edd3 7a00 	vldr	s15, [r3]
 8008494:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80085e0 <v_R452+0x24c>
 8008498:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800849c:	4b4f      	ldr	r3, [pc, #316]	; (80085dc <v_R452+0x248>)
 800849e:	edd3 7a00 	vldr	s15, [r3]
 80084a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80084a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084aa:	d4f0      	bmi.n	800848e <v_R452+0xfa>

	target_degaccel_z = V_H_DEGACCEL;
 80084ac:	4b44      	ldr	r3, [pc, #272]	; (80085c0 <v_R452+0x22c>)
 80084ae:	4a4d      	ldr	r2, [pc, #308]	; (80085e4 <v_R452+0x250>)
 80084b0:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-45);
 80084b2:	bf00      	nop
 80084b4:	4b48      	ldr	r3, [pc, #288]	; (80085d8 <v_R452+0x244>)
 80084b6:	edd3 7a00 	vldr	s15, [r3]
 80084ba:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80085e8 <v_R452+0x254>
 80084be:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80084c2:	4b46      	ldr	r3, [pc, #280]	; (80085dc <v_R452+0x248>)
 80084c4:	edd3 7a00 	vldr	s15, [r3]
 80084c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80084cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084d0:	d4f0      	bmi.n	80084b4 <v_R452+0x120>
	turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80084d2:	2103      	movs	r1, #3
 80084d4:	2001      	movs	r0, #1
 80084d6:	f008 fdc7 	bl	8011068 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 80084da:	4b37      	ldr	r3, [pc, #220]	; (80085b8 <v_R452+0x224>)
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	3301      	adds	r3, #1
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	bfb8      	it	lt
 80084e8:	425b      	neglt	r3, r3
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	4b32      	ldr	r3, [pc, #200]	; (80085b8 <v_R452+0x224>)
 80084ee:	701a      	strb	r2, [r3, #0]
//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 80084f0:	4a28      	ldr	r2, [pc, #160]	; (8008594 <v_R452+0x200>)
 80084f2:	8813      	ldrh	r3, [r2, #0]
 80084f4:	f36f 334d 	bfc	r3, #13, #1
 80084f8:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80084fa:	4b27      	ldr	r3, [pc, #156]	; (8008598 <v_R452+0x204>)
 80084fc:	4a27      	ldr	r2, [pc, #156]	; (800859c <v_R452+0x208>)
 80084fe:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8008500:	4b27      	ldr	r3, [pc, #156]	; (80085a0 <v_R452+0x20c>)
 8008502:	4a26      	ldr	r2, [pc, #152]	; (800859c <v_R452+0x208>)
 8008504:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8008506:	4b27      	ldr	r3, [pc, #156]	; (80085a4 <v_R452+0x210>)
 8008508:	4a27      	ldr	r2, [pc, #156]	; (80085a8 <v_R452+0x214>)
 800850a:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 800850c:	4b27      	ldr	r3, [pc, #156]	; (80085ac <v_R452+0x218>)
 800850e:	4a26      	ldr	r2, [pc, #152]	; (80085a8 <v_R452+0x214>)
 8008510:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8008512:	f04f 0300 	mov.w	r3, #0
 8008516:	4a26      	ldr	r2, [pc, #152]	; (80085b0 <v_R452+0x21c>)
 8008518:	6013      	str	r3, [r2, #0]
 800851a:	4a26      	ldr	r2, [pc, #152]	; (80085b4 <v_R452+0x220>)
 800851c:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 800851e:	4a1d      	ldr	r2, [pc, #116]	; (8008594 <v_R452+0x200>)
 8008520:	8813      	ldrh	r3, [r2, #0]
 8008522:	f043 0304 	orr.w	r3, r3, #4
 8008526:	8013      	strh	r3, [r2, #0]
	control_start();
 8008528:	f7fc fc24 	bl	8004d74 <control_start>
	if(v_flag == 0){
 800852c:	4b22      	ldr	r3, [pc, #136]	; (80085b8 <v_R452+0x224>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d116      	bne.n	8008562 <v_R452+0x1ce>
		while(dist_l < V_H_OFFSET_F+10 && dist_r < V_H_OFFSET_F+10);
 8008534:	bf00      	nop
 8008536:	4b1f      	ldr	r3, [pc, #124]	; (80085b4 <v_R452+0x220>)
 8008538:	edd3 7a00 	vldr	s15, [r3]
 800853c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80085ec <v_R452+0x258>
 8008540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008548:	d400      	bmi.n	800854c <v_R452+0x1b8>
	}else{
		while(dist_l < V_H_OFFSET_B && dist_r < V_H_OFFSET_B);
	}
}
 800854a:	e020      	b.n	800858e <v_R452+0x1fa>
		while(dist_l < V_H_OFFSET_F+10 && dist_r < V_H_OFFSET_F+10);
 800854c:	4b18      	ldr	r3, [pc, #96]	; (80085b0 <v_R452+0x21c>)
 800854e:	edd3 7a00 	vldr	s15, [r3]
 8008552:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80085ec <v_R452+0x258>
 8008556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800855a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800855e:	d4ea      	bmi.n	8008536 <v_R452+0x1a2>
}
 8008560:	e015      	b.n	800858e <v_R452+0x1fa>
		while(dist_l < V_H_OFFSET_B && dist_r < V_H_OFFSET_B);
 8008562:	bf00      	nop
 8008564:	4b13      	ldr	r3, [pc, #76]	; (80085b4 <v_R452+0x220>)
 8008566:	edd3 7a00 	vldr	s15, [r3]
 800856a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80085f0 <v_R452+0x25c>
 800856e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008576:	d400      	bmi.n	800857a <v_R452+0x1e6>
}
 8008578:	e009      	b.n	800858e <v_R452+0x1fa>
		while(dist_l < V_H_OFFSET_B && dist_r < V_H_OFFSET_B);
 800857a:	4b0d      	ldr	r3, [pc, #52]	; (80085b0 <v_R452+0x21c>)
 800857c:	edd3 7a00 	vldr	s15, [r3]
 8008580:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80085f0 <v_R452+0x25c>
 8008584:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800858c:	d4ea      	bmi.n	8008564 <v_R452+0x1d0>
}
 800858e:	bf00      	nop
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	20000fac 	.word	0x20000fac
 8008598:	20000da0 	.word	0x20000da0
 800859c:	461c4000 	.word	0x461c4000
 80085a0:	20000b20 	.word	0x20000b20
 80085a4:	200007b4 	.word	0x200007b4
 80085a8:	44480000 	.word	0x44480000
 80085ac:	200001dc 	.word	0x200001dc
 80085b0:	20000b2c 	.word	0x20000b2c
 80085b4:	200012e8 	.word	0x200012e8
 80085b8:	20000b28 	.word	0x20000b28
 80085bc:	42780000 	.word	0x42780000
 80085c0:	20000b98 	.word	0x20000b98
 80085c4:	c5fa0000 	.word	0xc5fa0000
 80085c8:	200001e0 	.word	0x200001e0
 80085cc:	200002f0 	.word	0x200002f0
 80085d0:	c3c80000 	.word	0xc3c80000
 80085d4:	20000b34 	.word	0x20000b34
 80085d8:	20000c40 	.word	0x20000c40
 80085dc:	20000b9c 	.word	0x20000b9c
 80085e0:	42140000 	.word	0x42140000
 80085e4:	45fa0000 	.word	0x45fa0000
 80085e8:	42340000 	.word	0x42340000
 80085ec:	42040000 	.word	0x42040000
 80085f0:	42a00000 	.word	0x42a00000

080085f4 <v_L452>:
//v_L452
// 区画中心から左に45度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L452(void){
 80085f4:	b580      	push	{r7, lr}
 80085f6:	af00      	add	r7, sp, #0

	full_led_write(YELLOW);
 80085f8:	2006      	movs	r0, #6
 80085fa:	f00a fb05 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 80085fe:	4a7d      	ldr	r2, [pc, #500]	; (80087f4 <v_L452+0x200>)
 8008600:	8813      	ldrh	r3, [r2, #0]
 8008602:	f36f 2308 	bfc	r3, #8, #1
 8008606:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008608:	4b7b      	ldr	r3, [pc, #492]	; (80087f8 <v_L452+0x204>)
 800860a:	4a7c      	ldr	r2, [pc, #496]	; (80087fc <v_L452+0x208>)
 800860c:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800860e:	4b7c      	ldr	r3, [pc, #496]	; (8008800 <v_L452+0x20c>)
 8008610:	4a7a      	ldr	r2, [pc, #488]	; (80087fc <v_L452+0x208>)
 8008612:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8008614:	4b7b      	ldr	r3, [pc, #492]	; (8008804 <v_L452+0x210>)
 8008616:	4a7c      	ldr	r2, [pc, #496]	; (8008808 <v_L452+0x214>)
 8008618:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 800861a:	4b7c      	ldr	r3, [pc, #496]	; (800880c <v_L452+0x218>)
 800861c:	4a7a      	ldr	r2, [pc, #488]	; (8008808 <v_L452+0x214>)
 800861e:	601a      	str	r2, [r3, #0]

	control_start();
 8008620:	f7fc fba8 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8008624:	f04f 0300 	mov.w	r3, #0
 8008628:	4a79      	ldr	r2, [pc, #484]	; (8008810 <v_L452+0x21c>)
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	4a79      	ldr	r2, [pc, #484]	; (8008814 <v_L452+0x220>)
 800862e:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 8008630:	4b79      	ldr	r3, [pc, #484]	; (8008818 <v_L452+0x224>)
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d115      	bne.n	8008664 <v_L452+0x70>
		while(dist_l < V_H_OFFSET_F && dist_r < V_H_OFFSET_F);
 8008638:	bf00      	nop
 800863a:	4b76      	ldr	r3, [pc, #472]	; (8008814 <v_L452+0x220>)
 800863c:	edd3 7a00 	vldr	s15, [r3]
 8008640:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8008644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800864c:	d51f      	bpl.n	800868e <v_L452+0x9a>
 800864e:	4b70      	ldr	r3, [pc, #448]	; (8008810 <v_L452+0x21c>)
 8008650:	edd3 7a00 	vldr	s15, [r3]
 8008654:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8008658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800865c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008660:	d4eb      	bmi.n	800863a <v_L452+0x46>
 8008662:	e014      	b.n	800868e <v_L452+0x9a>
	}else{
		while(dist_l < V_H_OFFSET_B-12 && dist_r < V_H_OFFSET_B-12);
 8008664:	bf00      	nop
 8008666:	4b6b      	ldr	r3, [pc, #428]	; (8008814 <v_L452+0x220>)
 8008668:	edd3 7a00 	vldr	s15, [r3]
 800866c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800881c <v_L452+0x228>
 8008670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008678:	d509      	bpl.n	800868e <v_L452+0x9a>
 800867a:	4b65      	ldr	r3, [pc, #404]	; (8008810 <v_L452+0x21c>)
 800867c:	edd3 7a00 	vldr	s15, [r3]
 8008680:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800881c <v_L452+0x228>
 8008684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800868c:	d4eb      	bmi.n	8008666 <v_L452+0x72>
	}
	drive_stop();
 800868e:	f7fc fb49 	bl	8004d24 <drive_stop>
	control_stop();
 8008692:	f7fc fb83 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8008696:	4a57      	ldr	r2, [pc, #348]	; (80087f4 <v_L452+0x200>)
 8008698:	8813      	ldrh	r3, [r2, #0]
 800869a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800869e:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = V_H_DEGACCEL;
 80086a0:	4b5f      	ldr	r3, [pc, #380]	; (8008820 <v_L452+0x22c>)
 80086a2:	4a60      	ldr	r2, [pc, #384]	; (8008824 <v_L452+0x230>)
 80086a4:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 80086a6:	4b60      	ldr	r3, [pc, #384]	; (8008828 <v_L452+0x234>)
 80086a8:	f04f 0200 	mov.w	r2, #0
 80086ac:	601a      	str	r2, [r3, #0]
	omega_max = V_H_OMEGA;
 80086ae:	4b5f      	ldr	r3, [pc, #380]	; (800882c <v_L452+0x238>)
 80086b0:	4a5f      	ldr	r2, [pc, #380]	; (8008830 <v_L452+0x23c>)
 80086b2:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 80086b4:	4b5f      	ldr	r3, [pc, #380]	; (8008834 <v_L452+0x240>)
 80086b6:	4a54      	ldr	r2, [pc, #336]	; (8008808 <v_L452+0x214>)
 80086b8:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 80086ba:	4a4e      	ldr	r2, [pc, #312]	; (80087f4 <v_L452+0x200>)
 80086bc:	8813      	ldrh	r3, [r2, #0]
 80086be:	f043 0302 	orr.w	r3, r3, #2
 80086c2:	8013      	strh	r3, [r2, #0]
//	while(degree_z < target_degree_z+20);
	while(degree_z < target_degree_z+V_H_DEG);
 80086c4:	bf00      	nop
 80086c6:	4b5c      	ldr	r3, [pc, #368]	; (8008838 <v_L452+0x244>)
 80086c8:	edd3 7a00 	vldr	s15, [r3]
 80086cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80086d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086d4:	4b59      	ldr	r3, [pc, #356]	; (800883c <v_L452+0x248>)
 80086d6:	edd3 7a00 	vldr	s15, [r3]
 80086da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80086de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e2:	dcf0      	bgt.n	80086c6 <v_L452+0xd2>

	target_degaccel_z = 0;
 80086e4:	4b4e      	ldr	r3, [pc, #312]	; (8008820 <v_L452+0x22c>)
 80086e6:	f04f 0200 	mov.w	r2, #0
 80086ea:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+40);
	while(degree_z < target_degree_z+(45-V_H_DEG+2));
 80086ec:	bf00      	nop
 80086ee:	4b52      	ldr	r3, [pc, #328]	; (8008838 <v_L452+0x244>)
 80086f0:	edd3 7a00 	vldr	s15, [r3]
 80086f4:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8008840 <v_L452+0x24c>
 80086f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086fc:	4b4f      	ldr	r3, [pc, #316]	; (800883c <v_L452+0x248>)
 80086fe:	edd3 7a00 	vldr	s15, [r3]
 8008702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800870a:	dcf0      	bgt.n	80086ee <v_L452+0xfa>

	target_degaccel_z = -V_H_DEGACCEL;
 800870c:	4b44      	ldr	r3, [pc, #272]	; (8008820 <v_L452+0x22c>)
 800870e:	4a4d      	ldr	r2, [pc, #308]	; (8008844 <v_L452+0x250>)
 8008710:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z+45);
 8008712:	bf00      	nop
 8008714:	4b48      	ldr	r3, [pc, #288]	; (8008838 <v_L452+0x244>)
 8008716:	edd3 7a00 	vldr	s15, [r3]
 800871a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8008848 <v_L452+0x254>
 800871e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008722:	4b46      	ldr	r3, [pc, #280]	; (800883c <v_L452+0x248>)
 8008724:	edd3 7a00 	vldr	s15, [r3]
 8008728:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800872c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008730:	d4f0      	bmi.n	8008714 <v_L452+0x120>
	turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008732:	2103      	movs	r1, #3
 8008734:	20ff      	movs	r0, #255	; 0xff
 8008736:	f008 fc97 	bl	8011068 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 800873a:	4b37      	ldr	r3, [pc, #220]	; (8008818 <v_L452+0x224>)
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	3301      	adds	r3, #1
 8008740:	2b00      	cmp	r3, #0
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	bfb8      	it	lt
 8008748:	425b      	neglt	r3, r3
 800874a:	b2da      	uxtb	r2, r3
 800874c:	4b32      	ldr	r3, [pc, #200]	; (8008818 <v_L452+0x224>)
 800874e:	701a      	strb	r2, [r3, #0]
//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8008750:	4a28      	ldr	r2, [pc, #160]	; (80087f4 <v_L452+0x200>)
 8008752:	8813      	ldrh	r3, [r2, #0]
 8008754:	f36f 334d 	bfc	r3, #13, #1
 8008758:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800875a:	4b27      	ldr	r3, [pc, #156]	; (80087f8 <v_L452+0x204>)
 800875c:	4a27      	ldr	r2, [pc, #156]	; (80087fc <v_L452+0x208>)
 800875e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8008760:	4b27      	ldr	r3, [pc, #156]	; (8008800 <v_L452+0x20c>)
 8008762:	4a26      	ldr	r2, [pc, #152]	; (80087fc <v_L452+0x208>)
 8008764:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8008766:	4b27      	ldr	r3, [pc, #156]	; (8008804 <v_L452+0x210>)
 8008768:	4a27      	ldr	r2, [pc, #156]	; (8008808 <v_L452+0x214>)
 800876a:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 800876c:	4b27      	ldr	r3, [pc, #156]	; (800880c <v_L452+0x218>)
 800876e:	4a26      	ldr	r2, [pc, #152]	; (8008808 <v_L452+0x214>)
 8008770:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8008772:	f04f 0300 	mov.w	r3, #0
 8008776:	4a26      	ldr	r2, [pc, #152]	; (8008810 <v_L452+0x21c>)
 8008778:	6013      	str	r3, [r2, #0]
 800877a:	4a26      	ldr	r2, [pc, #152]	; (8008814 <v_L452+0x220>)
 800877c:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 800877e:	4a1d      	ldr	r2, [pc, #116]	; (80087f4 <v_L452+0x200>)
 8008780:	8813      	ldrh	r3, [r2, #0]
 8008782:	f043 0304 	orr.w	r3, r3, #4
 8008786:	8013      	strh	r3, [r2, #0]
	control_start();
 8008788:	f7fc faf4 	bl	8004d74 <control_start>
	if(v_flag == 0){
 800878c:	4b22      	ldr	r3, [pc, #136]	; (8008818 <v_L452+0x224>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d116      	bne.n	80087c2 <v_L452+0x1ce>
		while(dist_l < V_H_OFFSET_F+35 && dist_r < V_H_OFFSET_F+35);
 8008794:	bf00      	nop
 8008796:	4b1f      	ldr	r3, [pc, #124]	; (8008814 <v_L452+0x220>)
 8008798:	edd3 7a00 	vldr	s15, [r3]
 800879c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800884c <v_L452+0x258>
 80087a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a8:	d400      	bmi.n	80087ac <v_L452+0x1b8>
	}else{
		while(dist_l < V_H_OFFSET_B+20 && dist_r < V_H_OFFSET_B+20);
	}
}
 80087aa:	e020      	b.n	80087ee <v_L452+0x1fa>
		while(dist_l < V_H_OFFSET_F+35 && dist_r < V_H_OFFSET_F+35);
 80087ac:	4b18      	ldr	r3, [pc, #96]	; (8008810 <v_L452+0x21c>)
 80087ae:	edd3 7a00 	vldr	s15, [r3]
 80087b2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800884c <v_L452+0x258>
 80087b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087be:	d4ea      	bmi.n	8008796 <v_L452+0x1a2>
}
 80087c0:	e015      	b.n	80087ee <v_L452+0x1fa>
		while(dist_l < V_H_OFFSET_B+20 && dist_r < V_H_OFFSET_B+20);
 80087c2:	bf00      	nop
 80087c4:	4b13      	ldr	r3, [pc, #76]	; (8008814 <v_L452+0x220>)
 80087c6:	edd3 7a00 	vldr	s15, [r3]
 80087ca:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8008850 <v_L452+0x25c>
 80087ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d6:	d400      	bmi.n	80087da <v_L452+0x1e6>
}
 80087d8:	e009      	b.n	80087ee <v_L452+0x1fa>
		while(dist_l < V_H_OFFSET_B+20 && dist_r < V_H_OFFSET_B+20);
 80087da:	4b0d      	ldr	r3, [pc, #52]	; (8008810 <v_L452+0x21c>)
 80087dc:	edd3 7a00 	vldr	s15, [r3]
 80087e0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8008850 <v_L452+0x25c>
 80087e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ec:	d4ea      	bmi.n	80087c4 <v_L452+0x1d0>
}
 80087ee:	bf00      	nop
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	20000fac 	.word	0x20000fac
 80087f8:	20000da0 	.word	0x20000da0
 80087fc:	461c4000 	.word	0x461c4000
 8008800:	20000b20 	.word	0x20000b20
 8008804:	200007b4 	.word	0x200007b4
 8008808:	44480000 	.word	0x44480000
 800880c:	200001dc 	.word	0x200001dc
 8008810:	20000b2c 	.word	0x20000b2c
 8008814:	200012e8 	.word	0x200012e8
 8008818:	20000b28 	.word	0x20000b28
 800881c:	42880000 	.word	0x42880000
 8008820:	20000b98 	.word	0x20000b98
 8008824:	45fa0000 	.word	0x45fa0000
 8008828:	200001e0 	.word	0x200001e0
 800882c:	20000b24 	.word	0x20000b24
 8008830:	43c80000 	.word	0x43c80000
 8008834:	20000b34 	.word	0x20000b34
 8008838:	20000c40 	.word	0x20000c40
 800883c:	20000b9c 	.word	0x20000b9c
 8008840:	42140000 	.word	0x42140000
 8008844:	c5fa0000 	.word	0xc5fa0000
 8008848:	42340000 	.word	0x42340000
 800884c:	42680000 	.word	0x42680000
 8008850:	42c80000 	.word	0x42c80000

08008854 <v_R45D2>:
//v_R45D2
//a区画中心から右に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R45D2(void){
 8008854:	b580      	push	{r7, lr}
 8008856:	af00      	add	r7, sp, #0

	full_led_write(PURPLE);
 8008858:	2005      	movs	r0, #5
 800885a:	f00a f9d5 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 800885e:	4a80      	ldr	r2, [pc, #512]	; (8008a60 <v_R45D2+0x20c>)
 8008860:	8813      	ldrh	r3, [r2, #0]
 8008862:	f36f 2308 	bfc	r3, #8, #1
 8008866:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008868:	4b7e      	ldr	r3, [pc, #504]	; (8008a64 <v_R45D2+0x210>)
 800886a:	4a7f      	ldr	r2, [pc, #508]	; (8008a68 <v_R45D2+0x214>)
 800886c:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800886e:	4b7f      	ldr	r3, [pc, #508]	; (8008a6c <v_R45D2+0x218>)
 8008870:	4a7d      	ldr	r2, [pc, #500]	; (8008a68 <v_R45D2+0x214>)
 8008872:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8008874:	4b7e      	ldr	r3, [pc, #504]	; (8008a70 <v_R45D2+0x21c>)
 8008876:	4a7f      	ldr	r2, [pc, #508]	; (8008a74 <v_R45D2+0x220>)
 8008878:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 800887a:	4b7f      	ldr	r3, [pc, #508]	; (8008a78 <v_R45D2+0x224>)
 800887c:	4a7d      	ldr	r2, [pc, #500]	; (8008a74 <v_R45D2+0x220>)
 800887e:	601a      	str	r2, [r3, #0]

	control_start();
 8008880:	f7fc fa78 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8008884:	f04f 0300 	mov.w	r3, #0
 8008888:	4a7c      	ldr	r2, [pc, #496]	; (8008a7c <v_R45D2+0x228>)
 800888a:	6013      	str	r3, [r2, #0]
 800888c:	4a7c      	ldr	r2, [pc, #496]	; (8008a80 <v_R45D2+0x22c>)
 800888e:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 8008890:	4b7c      	ldr	r3, [pc, #496]	; (8008a84 <v_R45D2+0x230>)
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d115      	bne.n	80088c4 <v_R45D2+0x70>
		while(dist_l < V_H_OFFSET_F && dist_r < V_H_OFFSET_F);
 8008898:	bf00      	nop
 800889a:	4b79      	ldr	r3, [pc, #484]	; (8008a80 <v_R45D2+0x22c>)
 800889c:	edd3 7a00 	vldr	s15, [r3]
 80088a0:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 80088a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ac:	d51f      	bpl.n	80088ee <v_R45D2+0x9a>
 80088ae:	4b73      	ldr	r3, [pc, #460]	; (8008a7c <v_R45D2+0x228>)
 80088b0:	edd3 7a00 	vldr	s15, [r3]
 80088b4:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 80088b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088c0:	d4eb      	bmi.n	800889a <v_R45D2+0x46>
 80088c2:	e014      	b.n	80088ee <v_R45D2+0x9a>
	}else{
		while(dist_l < V_H_OFFSET_B-18 && dist_r < V_H_OFFSET_B-18);
 80088c4:	bf00      	nop
 80088c6:	4b6e      	ldr	r3, [pc, #440]	; (8008a80 <v_R45D2+0x22c>)
 80088c8:	edd3 7a00 	vldr	s15, [r3]
 80088cc:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8008a88 <v_R45D2+0x234>
 80088d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088d8:	d509      	bpl.n	80088ee <v_R45D2+0x9a>
 80088da:	4b68      	ldr	r3, [pc, #416]	; (8008a7c <v_R45D2+0x228>)
 80088dc:	edd3 7a00 	vldr	s15, [r3]
 80088e0:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8008a88 <v_R45D2+0x234>
 80088e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ec:	d4eb      	bmi.n	80088c6 <v_R45D2+0x72>
	}
	drive_stop();
 80088ee:	f7fc fa19 	bl	8004d24 <drive_stop>
	control_stop();
 80088f2:	f7fc fa53 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 80088f6:	4a5a      	ldr	r2, [pc, #360]	; (8008a60 <v_R45D2+0x20c>)
 80088f8:	8813      	ldrh	r3, [r2, #0]
 80088fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80088fe:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -V_H_DEGACCEL;
 8008900:	4b62      	ldr	r3, [pc, #392]	; (8008a8c <v_R45D2+0x238>)
 8008902:	4a63      	ldr	r2, [pc, #396]	; (8008a90 <v_R45D2+0x23c>)
 8008904:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8008906:	4b63      	ldr	r3, [pc, #396]	; (8008a94 <v_R45D2+0x240>)
 8008908:	f04f 0200 	mov.w	r2, #0
 800890c:	601a      	str	r2, [r3, #0]
	omega_min = -V_H_OMEGA;
 800890e:	4b62      	ldr	r3, [pc, #392]	; (8008a98 <v_R45D2+0x244>)
 8008910:	4a62      	ldr	r2, [pc, #392]	; (8008a9c <v_R45D2+0x248>)
 8008912:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 8008914:	4b62      	ldr	r3, [pc, #392]	; (8008aa0 <v_R45D2+0x24c>)
 8008916:	4a57      	ldr	r2, [pc, #348]	; (8008a74 <v_R45D2+0x220>)
 8008918:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 800891a:	4a51      	ldr	r2, [pc, #324]	; (8008a60 <v_R45D2+0x20c>)
 800891c:	8813      	ldrh	r3, [r2, #0]
 800891e:	f043 0302 	orr.w	r3, r3, #2
 8008922:	8013      	strh	r3, [r2, #0]
//	while(degree_z > target_degree_z-20);
	while(degree_z > target_degree_z-V_H_DEG);
 8008924:	bf00      	nop
 8008926:	4b5f      	ldr	r3, [pc, #380]	; (8008aa4 <v_R45D2+0x250>)
 8008928:	edd3 7a00 	vldr	s15, [r3]
 800892c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008930:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008934:	4b5c      	ldr	r3, [pc, #368]	; (8008aa8 <v_R45D2+0x254>)
 8008936:	edd3 7a00 	vldr	s15, [r3]
 800893a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800893e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008942:	d4f0      	bmi.n	8008926 <v_R45D2+0xd2>

	target_degaccel_z = 0;
 8008944:	4b51      	ldr	r3, [pc, #324]	; (8008a8c <v_R45D2+0x238>)
 8008946:	f04f 0200 	mov.w	r2, #0
 800894a:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-40);
	while(degree_z > target_degree_z-(45-V_H_DEG+2));
 800894c:	bf00      	nop
 800894e:	4b55      	ldr	r3, [pc, #340]	; (8008aa4 <v_R45D2+0x250>)
 8008950:	edd3 7a00 	vldr	s15, [r3]
 8008954:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8008aac <v_R45D2+0x258>
 8008958:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800895c:	4b52      	ldr	r3, [pc, #328]	; (8008aa8 <v_R45D2+0x254>)
 800895e:	edd3 7a00 	vldr	s15, [r3]
 8008962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800896a:	d4f0      	bmi.n	800894e <v_R45D2+0xfa>

	target_degaccel_z = V_H_DEGACCEL;
 800896c:	4b47      	ldr	r3, [pc, #284]	; (8008a8c <v_R45D2+0x238>)
 800896e:	4a50      	ldr	r2, [pc, #320]	; (8008ab0 <v_R45D2+0x25c>)
 8008970:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-45);
 8008972:	bf00      	nop
 8008974:	4b4b      	ldr	r3, [pc, #300]	; (8008aa4 <v_R45D2+0x250>)
 8008976:	edd3 7a00 	vldr	s15, [r3]
 800897a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8008ab4 <v_R45D2+0x260>
 800897e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008982:	4b49      	ldr	r3, [pc, #292]	; (8008aa8 <v_R45D2+0x254>)
 8008984:	edd3 7a00 	vldr	s15, [r3]
 8008988:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800898c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008990:	d4f0      	bmi.n	8008974 <v_R45D2+0x120>
	turn_dir(DIR_TURN_R45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008992:	2103      	movs	r1, #3
 8008994:	2001      	movs	r0, #1
 8008996:	f008 fb67 	bl	8011068 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 800899a:	4b3a      	ldr	r3, [pc, #232]	; (8008a84 <v_R45D2+0x230>)
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	3301      	adds	r3, #1
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	bfb8      	it	lt
 80089a8:	425b      	neglt	r3, r3
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	4b35      	ldr	r3, [pc, #212]	; (8008a84 <v_R45D2+0x230>)
 80089ae:	701a      	strb	r2, [r3, #0]
//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 80089b0:	4a2b      	ldr	r2, [pc, #172]	; (8008a60 <v_R45D2+0x20c>)
 80089b2:	8813      	ldrh	r3, [r2, #0]
 80089b4:	f36f 334d 	bfc	r3, #13, #1
 80089b8:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80089ba:	4b2a      	ldr	r3, [pc, #168]	; (8008a64 <v_R45D2+0x210>)
 80089bc:	4a2a      	ldr	r2, [pc, #168]	; (8008a68 <v_R45D2+0x214>)
 80089be:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80089c0:	4b2a      	ldr	r3, [pc, #168]	; (8008a6c <v_R45D2+0x218>)
 80089c2:	4a29      	ldr	r2, [pc, #164]	; (8008a68 <v_R45D2+0x214>)
 80089c4:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80089c6:	4b2a      	ldr	r3, [pc, #168]	; (8008a70 <v_R45D2+0x21c>)
 80089c8:	4a2a      	ldr	r2, [pc, #168]	; (8008a74 <v_R45D2+0x220>)
 80089ca:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 80089cc:	4b2a      	ldr	r3, [pc, #168]	; (8008a78 <v_R45D2+0x224>)
 80089ce:	4a29      	ldr	r2, [pc, #164]	; (8008a74 <v_R45D2+0x220>)
 80089d0:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 80089d2:	f04f 0300 	mov.w	r3, #0
 80089d6:	4a29      	ldr	r2, [pc, #164]	; (8008a7c <v_R45D2+0x228>)
 80089d8:	6013      	str	r3, [r2, #0]
 80089da:	4a29      	ldr	r2, [pc, #164]	; (8008a80 <v_R45D2+0x22c>)
 80089dc:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80089de:	4a20      	ldr	r2, [pc, #128]	; (8008a60 <v_R45D2+0x20c>)
 80089e0:	8813      	ldrh	r3, [r2, #0]
 80089e2:	f043 0304 	orr.w	r3, r3, #4
 80089e6:	8013      	strh	r3, [r2, #0]
	control_start();
 80089e8:	f7fc f9c4 	bl	8004d74 <control_start>
	if(v_flag == 0){
 80089ec:	4b25      	ldr	r3, [pc, #148]	; (8008a84 <v_R45D2+0x230>)
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d115      	bne.n	8008a20 <v_R45D2+0x1cc>
		while(dist_l < V_H_OFFSET_F+20 && dist_r < V_H_OFFSET_F+20);
 80089f4:	bf00      	nop
 80089f6:	4b22      	ldr	r3, [pc, #136]	; (8008a80 <v_R45D2+0x22c>)
 80089f8:	edd3 7a00 	vldr	s15, [r3]
 80089fc:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8008ab8 <v_R45D2+0x264>
 8008a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a08:	d51f      	bpl.n	8008a4a <v_R45D2+0x1f6>
 8008a0a:	4b1c      	ldr	r3, [pc, #112]	; (8008a7c <v_R45D2+0x228>)
 8008a0c:	edd3 7a00 	vldr	s15, [r3]
 8008a10:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8008ab8 <v_R45D2+0x264>
 8008a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a1c:	d4eb      	bmi.n	80089f6 <v_R45D2+0x1a2>
 8008a1e:	e014      	b.n	8008a4a <v_R45D2+0x1f6>
	}else{
		while(dist_l < V_H_OFFSET_B-10 && dist_r < V_H_OFFSET_B-10);
 8008a20:	bf00      	nop
 8008a22:	4b17      	ldr	r3, [pc, #92]	; (8008a80 <v_R45D2+0x22c>)
 8008a24:	edd3 7a00 	vldr	s15, [r3]
 8008a28:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8008abc <v_R45D2+0x268>
 8008a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a34:	d509      	bpl.n	8008a4a <v_R45D2+0x1f6>
 8008a36:	4b11      	ldr	r3, [pc, #68]	; (8008a7c <v_R45D2+0x228>)
 8008a38:	edd3 7a00 	vldr	s15, [r3]
 8008a3c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008abc <v_R45D2+0x268>
 8008a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a48:	d4eb      	bmi.n	8008a22 <v_R45D2+0x1ce>
	}

	control_start();
 8008a4a:	f7fc f993 	bl	8004d74 <control_start>
	driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
 8008a4e:	230a      	movs	r3, #10
 8008a50:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008a54:	2132      	movs	r1, #50	; 0x32
 8008a56:	481a      	ldr	r0, [pc, #104]	; (8008ac0 <v_R45D2+0x26c>)
 8008a58:	f7fc fabe 	bl	8004fd8 <driveD>
	speed_max_r = SPEED_RUN;
	dist_l = dist_r = 0;
	MF.FLAG.SPD = 1;
	control_start();
	while(dist_l < 75 && dist_r < 75);
*/}
 8008a5c:	bf00      	nop
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	20000fac 	.word	0x20000fac
 8008a64:	20000da0 	.word	0x20000da0
 8008a68:	461c4000 	.word	0x461c4000
 8008a6c:	20000b20 	.word	0x20000b20
 8008a70:	200007b4 	.word	0x200007b4
 8008a74:	44480000 	.word	0x44480000
 8008a78:	200001dc 	.word	0x200001dc
 8008a7c:	20000b2c 	.word	0x20000b2c
 8008a80:	200012e8 	.word	0x200012e8
 8008a84:	20000b28 	.word	0x20000b28
 8008a88:	42780000 	.word	0x42780000
 8008a8c:	20000b98 	.word	0x20000b98
 8008a90:	c5fa0000 	.word	0xc5fa0000
 8008a94:	200001e0 	.word	0x200001e0
 8008a98:	200002f0 	.word	0x200002f0
 8008a9c:	c3c80000 	.word	0xc3c80000
 8008aa0:	20000b34 	.word	0x20000b34
 8008aa4:	20000c40 	.word	0x20000c40
 8008aa8:	20000b9c 	.word	0x20000b9c
 8008aac:	42140000 	.word	0x42140000
 8008ab0:	45fa0000 	.word	0x45fa0000
 8008ab4:	42340000 	.word	0x42340000
 8008ab8:	422c0000 	.word	0x422c0000
 8008abc:	428c0000 	.word	0x428c0000
 8008ac0:	ffffd8f0 	.word	0xffffd8f0

08008ac4 <v_L45D2>:
//v_L45D2
//a区画中心から左に45度回転する　ゴール用
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L45D2(void){
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	af00      	add	r7, sp, #0

	full_led_write(YELLOW);
 8008ac8:	2006      	movs	r0, #6
 8008aca:	f00a f89d 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 8008ace:	4a80      	ldr	r2, [pc, #512]	; (8008cd0 <v_L45D2+0x20c>)
 8008ad0:	8813      	ldrh	r3, [r2, #0]
 8008ad2:	f36f 2308 	bfc	r3, #8, #1
 8008ad6:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008ad8:	4b7e      	ldr	r3, [pc, #504]	; (8008cd4 <v_L45D2+0x210>)
 8008ada:	4a7f      	ldr	r2, [pc, #508]	; (8008cd8 <v_L45D2+0x214>)
 8008adc:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8008ade:	4b7f      	ldr	r3, [pc, #508]	; (8008cdc <v_L45D2+0x218>)
 8008ae0:	4a7d      	ldr	r2, [pc, #500]	; (8008cd8 <v_L45D2+0x214>)
 8008ae2:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8008ae4:	4b7e      	ldr	r3, [pc, #504]	; (8008ce0 <v_L45D2+0x21c>)
 8008ae6:	4a7f      	ldr	r2, [pc, #508]	; (8008ce4 <v_L45D2+0x220>)
 8008ae8:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 8008aea:	4b7f      	ldr	r3, [pc, #508]	; (8008ce8 <v_L45D2+0x224>)
 8008aec:	4a7d      	ldr	r2, [pc, #500]	; (8008ce4 <v_L45D2+0x220>)
 8008aee:	601a      	str	r2, [r3, #0]

	control_start();
 8008af0:	f7fc f940 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8008af4:	f04f 0300 	mov.w	r3, #0
 8008af8:	4a7c      	ldr	r2, [pc, #496]	; (8008cec <v_L45D2+0x228>)
 8008afa:	6013      	str	r3, [r2, #0]
 8008afc:	4a7c      	ldr	r2, [pc, #496]	; (8008cf0 <v_L45D2+0x22c>)
 8008afe:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 8008b00:	4b7c      	ldr	r3, [pc, #496]	; (8008cf4 <v_L45D2+0x230>)
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d115      	bne.n	8008b34 <v_L45D2+0x70>
		while(dist_l < V_H_OFFSET_F && dist_r < V_H_OFFSET_F);
 8008b08:	bf00      	nop
 8008b0a:	4b79      	ldr	r3, [pc, #484]	; (8008cf0 <v_L45D2+0x22c>)
 8008b0c:	edd3 7a00 	vldr	s15, [r3]
 8008b10:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8008b14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b1c:	d51f      	bpl.n	8008b5e <v_L45D2+0x9a>
 8008b1e:	4b73      	ldr	r3, [pc, #460]	; (8008cec <v_L45D2+0x228>)
 8008b20:	edd3 7a00 	vldr	s15, [r3]
 8008b24:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8008b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b30:	d4eb      	bmi.n	8008b0a <v_L45D2+0x46>
 8008b32:	e014      	b.n	8008b5e <v_L45D2+0x9a>
	}else{
		while(dist_l < V_H_OFFSET_B-12 && dist_r < V_H_OFFSET_B-12);
 8008b34:	bf00      	nop
 8008b36:	4b6e      	ldr	r3, [pc, #440]	; (8008cf0 <v_L45D2+0x22c>)
 8008b38:	edd3 7a00 	vldr	s15, [r3]
 8008b3c:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8008cf8 <v_L45D2+0x234>
 8008b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b48:	d509      	bpl.n	8008b5e <v_L45D2+0x9a>
 8008b4a:	4b68      	ldr	r3, [pc, #416]	; (8008cec <v_L45D2+0x228>)
 8008b4c:	edd3 7a00 	vldr	s15, [r3]
 8008b50:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8008cf8 <v_L45D2+0x234>
 8008b54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b5c:	d4eb      	bmi.n	8008b36 <v_L45D2+0x72>
	}
	drive_stop();
 8008b5e:	f7fc f8e1 	bl	8004d24 <drive_stop>
	control_stop();
 8008b62:	f7fc f91b 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8008b66:	4a5a      	ldr	r2, [pc, #360]	; (8008cd0 <v_L45D2+0x20c>)
 8008b68:	8813      	ldrh	r3, [r2, #0]
 8008b6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008b6e:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = V_H_DEGACCEL;
 8008b70:	4b62      	ldr	r3, [pc, #392]	; (8008cfc <v_L45D2+0x238>)
 8008b72:	4a63      	ldr	r2, [pc, #396]	; (8008d00 <v_L45D2+0x23c>)
 8008b74:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8008b76:	4b63      	ldr	r3, [pc, #396]	; (8008d04 <v_L45D2+0x240>)
 8008b78:	f04f 0200 	mov.w	r2, #0
 8008b7c:	601a      	str	r2, [r3, #0]
	omega_max = V_H_OMEGA;
 8008b7e:	4b62      	ldr	r3, [pc, #392]	; (8008d08 <v_L45D2+0x244>)
 8008b80:	4a62      	ldr	r2, [pc, #392]	; (8008d0c <v_L45D2+0x248>)
 8008b82:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 8008b84:	4b62      	ldr	r3, [pc, #392]	; (8008d10 <v_L45D2+0x24c>)
 8008b86:	4a57      	ldr	r2, [pc, #348]	; (8008ce4 <v_L45D2+0x220>)
 8008b88:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8008b8a:	4a51      	ldr	r2, [pc, #324]	; (8008cd0 <v_L45D2+0x20c>)
 8008b8c:	8813      	ldrh	r3, [r2, #0]
 8008b8e:	f043 0302 	orr.w	r3, r3, #2
 8008b92:	8013      	strh	r3, [r2, #0]
//	while(degree_z < target_degree_z+20);
	while(degree_z < target_degree_z+V_H_DEG);
 8008b94:	bf00      	nop
 8008b96:	4b5f      	ldr	r3, [pc, #380]	; (8008d14 <v_L45D2+0x250>)
 8008b98:	edd3 7a00 	vldr	s15, [r3]
 8008b9c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008ba0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ba4:	4b5c      	ldr	r3, [pc, #368]	; (8008d18 <v_L45D2+0x254>)
 8008ba6:	edd3 7a00 	vldr	s15, [r3]
 8008baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bb2:	dcf0      	bgt.n	8008b96 <v_L45D2+0xd2>

	target_degaccel_z = 0;
 8008bb4:	4b51      	ldr	r3, [pc, #324]	; (8008cfc <v_L45D2+0x238>)
 8008bb6:	f04f 0200 	mov.w	r2, #0
 8008bba:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+40);
	while(degree_z < target_degree_z+(45-V_H_DEG+2));
 8008bbc:	bf00      	nop
 8008bbe:	4b55      	ldr	r3, [pc, #340]	; (8008d14 <v_L45D2+0x250>)
 8008bc0:	edd3 7a00 	vldr	s15, [r3]
 8008bc4:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8008d1c <v_L45D2+0x258>
 8008bc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bcc:	4b52      	ldr	r3, [pc, #328]	; (8008d18 <v_L45D2+0x254>)
 8008bce:	edd3 7a00 	vldr	s15, [r3]
 8008bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bda:	dcf0      	bgt.n	8008bbe <v_L45D2+0xfa>

	target_degaccel_z = -V_H_DEGACCEL;
 8008bdc:	4b47      	ldr	r3, [pc, #284]	; (8008cfc <v_L45D2+0x238>)
 8008bde:	4a50      	ldr	r2, [pc, #320]	; (8008d20 <v_L45D2+0x25c>)
 8008be0:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z+45);
 8008be2:	bf00      	nop
 8008be4:	4b4b      	ldr	r3, [pc, #300]	; (8008d14 <v_L45D2+0x250>)
 8008be6:	edd3 7a00 	vldr	s15, [r3]
 8008bea:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8008d24 <v_L45D2+0x260>
 8008bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bf2:	4b49      	ldr	r3, [pc, #292]	; (8008d18 <v_L45D2+0x254>)
 8008bf4:	edd3 7a00 	vldr	s15, [r3]
 8008bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c00:	d4f0      	bmi.n	8008be4 <v_L45D2+0x120>
	turn_dir(DIR_TURN_L45_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008c02:	2103      	movs	r1, #3
 8008c04:	20ff      	movs	r0, #255	; 0xff
 8008c06:	f008 fa2f 	bl	8011068 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 8008c0a:	4b3a      	ldr	r3, [pc, #232]	; (8008cf4 <v_L45D2+0x230>)
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	bfb8      	it	lt
 8008c18:	425b      	neglt	r3, r3
 8008c1a:	b2da      	uxtb	r2, r3
 8008c1c:	4b35      	ldr	r3, [pc, #212]	; (8008cf4 <v_L45D2+0x230>)
 8008c1e:	701a      	strb	r2, [r3, #0]
//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8008c20:	4a2b      	ldr	r2, [pc, #172]	; (8008cd0 <v_L45D2+0x20c>)
 8008c22:	8813      	ldrh	r3, [r2, #0]
 8008c24:	f36f 334d 	bfc	r3, #13, #1
 8008c28:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008c2a:	4b2a      	ldr	r3, [pc, #168]	; (8008cd4 <v_L45D2+0x210>)
 8008c2c:	4a2a      	ldr	r2, [pc, #168]	; (8008cd8 <v_L45D2+0x214>)
 8008c2e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8008c30:	4b2a      	ldr	r3, [pc, #168]	; (8008cdc <v_L45D2+0x218>)
 8008c32:	4a29      	ldr	r2, [pc, #164]	; (8008cd8 <v_L45D2+0x214>)
 8008c34:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8008c36:	4b2a      	ldr	r3, [pc, #168]	; (8008ce0 <v_L45D2+0x21c>)
 8008c38:	4a2a      	ldr	r2, [pc, #168]	; (8008ce4 <v_L45D2+0x220>)
 8008c3a:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 8008c3c:	4b2a      	ldr	r3, [pc, #168]	; (8008ce8 <v_L45D2+0x224>)
 8008c3e:	4a29      	ldr	r2, [pc, #164]	; (8008ce4 <v_L45D2+0x220>)
 8008c40:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8008c42:	f04f 0300 	mov.w	r3, #0
 8008c46:	4a29      	ldr	r2, [pc, #164]	; (8008cec <v_L45D2+0x228>)
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	4a29      	ldr	r2, [pc, #164]	; (8008cf0 <v_L45D2+0x22c>)
 8008c4c:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8008c4e:	4a20      	ldr	r2, [pc, #128]	; (8008cd0 <v_L45D2+0x20c>)
 8008c50:	8813      	ldrh	r3, [r2, #0]
 8008c52:	f043 0304 	orr.w	r3, r3, #4
 8008c56:	8013      	strh	r3, [r2, #0]
	control_start();
 8008c58:	f7fc f88c 	bl	8004d74 <control_start>
	if(v_flag == 0){
 8008c5c:	4b25      	ldr	r3, [pc, #148]	; (8008cf4 <v_L45D2+0x230>)
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d115      	bne.n	8008c90 <v_L45D2+0x1cc>
		while(dist_l < V_H_OFFSET_F+25 && dist_r < V_H_OFFSET_F+25);
 8008c64:	bf00      	nop
 8008c66:	4b22      	ldr	r3, [pc, #136]	; (8008cf0 <v_L45D2+0x22c>)
 8008c68:	edd3 7a00 	vldr	s15, [r3]
 8008c6c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8008d28 <v_L45D2+0x264>
 8008c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c78:	d51f      	bpl.n	8008cba <v_L45D2+0x1f6>
 8008c7a:	4b1c      	ldr	r3, [pc, #112]	; (8008cec <v_L45D2+0x228>)
 8008c7c:	edd3 7a00 	vldr	s15, [r3]
 8008c80:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8008d28 <v_L45D2+0x264>
 8008c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c8c:	d4eb      	bmi.n	8008c66 <v_L45D2+0x1a2>
 8008c8e:	e014      	b.n	8008cba <v_L45D2+0x1f6>
	}else{
		while(dist_l < V_H_OFFSET_B+10 && dist_r < V_H_OFFSET_B+10);
 8008c90:	bf00      	nop
 8008c92:	4b17      	ldr	r3, [pc, #92]	; (8008cf0 <v_L45D2+0x22c>)
 8008c94:	edd3 7a00 	vldr	s15, [r3]
 8008c98:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8008d2c <v_L45D2+0x268>
 8008c9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ca4:	d509      	bpl.n	8008cba <v_L45D2+0x1f6>
 8008ca6:	4b11      	ldr	r3, [pc, #68]	; (8008cec <v_L45D2+0x228>)
 8008ca8:	edd3 7a00 	vldr	s15, [r3]
 8008cac:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008d2c <v_L45D2+0x268>
 8008cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb8:	d4eb      	bmi.n	8008c92 <v_L45D2+0x1ce>
	}

	control_start();
 8008cba:	f7fc f85b 	bl	8004d74 <control_start>
	driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
 8008cbe:	230a      	movs	r3, #10
 8008cc0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008cc4:	2132      	movs	r1, #50	; 0x32
 8008cc6:	481a      	ldr	r0, [pc, #104]	; (8008d30 <v_L45D2+0x26c>)
 8008cc8:	f7fc f986 	bl	8004fd8 <driveD>
	speed_max_r = SPEED_RUN;
	dist_l = dist_r = 0;
	MF.FLAG.SPD = 1;
	control_start();
	while(dist_l < 75 && dist_r < 75);
*/}
 8008ccc:	bf00      	nop
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	20000fac 	.word	0x20000fac
 8008cd4:	20000da0 	.word	0x20000da0
 8008cd8:	461c4000 	.word	0x461c4000
 8008cdc:	20000b20 	.word	0x20000b20
 8008ce0:	200007b4 	.word	0x200007b4
 8008ce4:	44480000 	.word	0x44480000
 8008ce8:	200001dc 	.word	0x200001dc
 8008cec:	20000b2c 	.word	0x20000b2c
 8008cf0:	200012e8 	.word	0x200012e8
 8008cf4:	20000b28 	.word	0x20000b28
 8008cf8:	42880000 	.word	0x42880000
 8008cfc:	20000b98 	.word	0x20000b98
 8008d00:	45fa0000 	.word	0x45fa0000
 8008d04:	200001e0 	.word	0x200001e0
 8008d08:	20000b24 	.word	0x20000b24
 8008d0c:	43c80000 	.word	0x43c80000
 8008d10:	20000b34 	.word	0x20000b34
 8008d14:	20000c40 	.word	0x20000c40
 8008d18:	20000b9c 	.word	0x20000b9c
 8008d1c:	42140000 	.word	0x42140000
 8008d20:	c5fa0000 	.word	0xc5fa0000
 8008d24:	42340000 	.word	0x42340000
 8008d28:	42400000 	.word	0x42400000
 8008d2c:	42b40000 	.word	0x42b40000
 8008d30:	ffffd8f0 	.word	0xffffd8f0

08008d34 <v_R90>:
//v_R90
// 柱中心から右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R90(void){
 8008d34:	b580      	push	{r7, lr}
 8008d36:	af00      	add	r7, sp, #0

	full_led_write(YELLOW);
 8008d38:	2006      	movs	r0, #6
 8008d3a:	f009 ff65 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 8008d3e:	4a5d      	ldr	r2, [pc, #372]	; (8008eb4 <v_R90+0x180>)
 8008d40:	8813      	ldrh	r3, [r2, #0]
 8008d42:	f36f 2308 	bfc	r3, #8, #1
 8008d46:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008d48:	4b5b      	ldr	r3, [pc, #364]	; (8008eb8 <v_R90+0x184>)
 8008d4a:	4a5c      	ldr	r2, [pc, #368]	; (8008ebc <v_R90+0x188>)
 8008d4c:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8008d4e:	4b5c      	ldr	r3, [pc, #368]	; (8008ec0 <v_R90+0x18c>)
 8008d50:	4a5a      	ldr	r2, [pc, #360]	; (8008ebc <v_R90+0x188>)
 8008d52:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8008d54:	4b5b      	ldr	r3, [pc, #364]	; (8008ec4 <v_R90+0x190>)
 8008d56:	4a5c      	ldr	r2, [pc, #368]	; (8008ec8 <v_R90+0x194>)
 8008d58:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8008d5a:	4b5c      	ldr	r3, [pc, #368]	; (8008ecc <v_R90+0x198>)
 8008d5c:	4a5a      	ldr	r2, [pc, #360]	; (8008ec8 <v_R90+0x194>)
 8008d5e:	601a      	str	r2, [r3, #0]

	control_start();
 8008d60:	f7fc f808 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8008d64:	f04f 0300 	mov.w	r3, #0
 8008d68:	4a59      	ldr	r2, [pc, #356]	; (8008ed0 <v_R90+0x19c>)
 8008d6a:	6013      	str	r3, [r2, #0]
 8008d6c:	4a59      	ldr	r2, [pc, #356]	; (8008ed4 <v_R90+0x1a0>)
 8008d6e:	6013      	str	r3, [r2, #0]
	while(dist_l < VV_OFFSET_F && dist_r < VV_OFFSET_F);
 8008d70:	bf00      	nop
 8008d72:	4b58      	ldr	r3, [pc, #352]	; (8008ed4 <v_R90+0x1a0>)
 8008d74:	edd3 7a00 	vldr	s15, [r3]
 8008d78:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8008ed8 <v_R90+0x1a4>
 8008d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d84:	d509      	bpl.n	8008d9a <v_R90+0x66>
 8008d86:	4b52      	ldr	r3, [pc, #328]	; (8008ed0 <v_R90+0x19c>)
 8008d88:	edd3 7a00 	vldr	s15, [r3]
 8008d8c:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8008ed8 <v_R90+0x1a4>
 8008d90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d98:	d4eb      	bmi.n	8008d72 <v_R90+0x3e>
	drive_stop();
 8008d9a:	f7fb ffc3 	bl	8004d24 <drive_stop>
	control_stop();
 8008d9e:	f7fb fffd 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8008da2:	4a44      	ldr	r2, [pc, #272]	; (8008eb4 <v_R90+0x180>)
 8008da4:	8813      	ldrh	r3, [r2, #0]
 8008da6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008daa:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -VV_DEGACCEL;
 8008dac:	4b4b      	ldr	r3, [pc, #300]	; (8008edc <v_R90+0x1a8>)
 8008dae:	4a4c      	ldr	r2, [pc, #304]	; (8008ee0 <v_R90+0x1ac>)
 8008db0:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8008db2:	4b4c      	ldr	r3, [pc, #304]	; (8008ee4 <v_R90+0x1b0>)
 8008db4:	f04f 0200 	mov.w	r2, #0
 8008db8:	601a      	str	r2, [r3, #0]
	omega_min = -VV_OMEGA;
 8008dba:	4b4b      	ldr	r3, [pc, #300]	; (8008ee8 <v_R90+0x1b4>)
 8008dbc:	4a4b      	ldr	r2, [pc, #300]	; (8008eec <v_R90+0x1b8>)
 8008dbe:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8008dc0:	4b4b      	ldr	r3, [pc, #300]	; (8008ef0 <v_R90+0x1bc>)
 8008dc2:	4a41      	ldr	r2, [pc, #260]	; (8008ec8 <v_R90+0x194>)
 8008dc4:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8008dc6:	4a3b      	ldr	r2, [pc, #236]	; (8008eb4 <v_R90+0x180>)
 8008dc8:	8813      	ldrh	r3, [r2, #0]
 8008dca:	f043 0302 	orr.w	r3, r3, #2
 8008dce:	8013      	strh	r3, [r2, #0]
//	while(degree_z > target_degree_z-25);
	while(degree_z > target_degree_z-VV_DEG);
 8008dd0:	bf00      	nop
 8008dd2:	4b48      	ldr	r3, [pc, #288]	; (8008ef4 <v_R90+0x1c0>)
 8008dd4:	edd3 7a00 	vldr	s15, [r3]
 8008dd8:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8008ddc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008de0:	4b45      	ldr	r3, [pc, #276]	; (8008ef8 <v_R90+0x1c4>)
 8008de2:	edd3 7a00 	vldr	s15, [r3]
 8008de6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dee:	d4f0      	bmi.n	8008dd2 <v_R90+0x9e>

	target_degaccel_z = 0;
 8008df0:	4b3a      	ldr	r3, [pc, #232]	; (8008edc <v_R90+0x1a8>)
 8008df2:	f04f 0200 	mov.w	r2, #0
 8008df6:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-75);
	while(degree_z > target_degree_z-(90-VV_DEG+2));
 8008df8:	bf00      	nop
 8008dfa:	4b3e      	ldr	r3, [pc, #248]	; (8008ef4 <v_R90+0x1c0>)
 8008dfc:	edd3 7a00 	vldr	s15, [r3]
 8008e00:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8008efc <v_R90+0x1c8>
 8008e04:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008e08:	4b3b      	ldr	r3, [pc, #236]	; (8008ef8 <v_R90+0x1c4>)
 8008e0a:	edd3 7a00 	vldr	s15, [r3]
 8008e0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e16:	d4f0      	bmi.n	8008dfa <v_R90+0xc6>

	target_degaccel_z = VV_DEGACCEL;
 8008e18:	4b30      	ldr	r3, [pc, #192]	; (8008edc <v_R90+0x1a8>)
 8008e1a:	4a39      	ldr	r2, [pc, #228]	; (8008f00 <v_R90+0x1cc>)
 8008e1c:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 8008e1e:	bf00      	nop
 8008e20:	4b34      	ldr	r3, [pc, #208]	; (8008ef4 <v_R90+0x1c0>)
 8008e22:	edd3 7a00 	vldr	s15, [r3]
 8008e26:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8008f04 <v_R90+0x1d0>
 8008e2a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008e2e:	4b32      	ldr	r3, [pc, #200]	; (8008ef8 <v_R90+0x1c4>)
 8008e30:	edd3 7a00 	vldr	s15, [r3]
 8008e34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3c:	d4f0      	bmi.n	8008e20 <v_R90+0xec>
	turn_dir(DIR_TURN_R90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8008e3e:	2103      	movs	r1, #3
 8008e40:	2002      	movs	r0, #2
 8008e42:	f008 f911 	bl	8011068 <turn_dir>

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8008e46:	4a1b      	ldr	r2, [pc, #108]	; (8008eb4 <v_R90+0x180>)
 8008e48:	8813      	ldrh	r3, [r2, #0]
 8008e4a:	f36f 334d 	bfc	r3, #13, #1
 8008e4e:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008e50:	4b19      	ldr	r3, [pc, #100]	; (8008eb8 <v_R90+0x184>)
 8008e52:	4a1a      	ldr	r2, [pc, #104]	; (8008ebc <v_R90+0x188>)
 8008e54:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8008e56:	4b1a      	ldr	r3, [pc, #104]	; (8008ec0 <v_R90+0x18c>)
 8008e58:	4a18      	ldr	r2, [pc, #96]	; (8008ebc <v_R90+0x188>)
 8008e5a:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8008e5c:	4b19      	ldr	r3, [pc, #100]	; (8008ec4 <v_R90+0x190>)
 8008e5e:	4a1a      	ldr	r2, [pc, #104]	; (8008ec8 <v_R90+0x194>)
 8008e60:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8008e62:	4b1a      	ldr	r3, [pc, #104]	; (8008ecc <v_R90+0x198>)
 8008e64:	4a18      	ldr	r2, [pc, #96]	; (8008ec8 <v_R90+0x194>)
 8008e66:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8008e68:	f04f 0300 	mov.w	r3, #0
 8008e6c:	4a18      	ldr	r2, [pc, #96]	; (8008ed0 <v_R90+0x19c>)
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	4a18      	ldr	r2, [pc, #96]	; (8008ed4 <v_R90+0x1a0>)
 8008e72:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8008e74:	4a0f      	ldr	r2, [pc, #60]	; (8008eb4 <v_R90+0x180>)
 8008e76:	8813      	ldrh	r3, [r2, #0]
 8008e78:	f043 0304 	orr.w	r3, r3, #4
 8008e7c:	8013      	strh	r3, [r2, #0]
	control_start();
 8008e7e:	f7fb ff79 	bl	8004d74 <control_start>
	while(dist_l < VV_OFFSET_B && dist_r < VV_OFFSET_B);
 8008e82:	bf00      	nop
 8008e84:	4b13      	ldr	r3, [pc, #76]	; (8008ed4 <v_R90+0x1a0>)
 8008e86:	edd3 7a00 	vldr	s15, [r3]
 8008e8a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8008ed8 <v_R90+0x1a4>
 8008e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e96:	d400      	bmi.n	8008e9a <v_R90+0x166>
}
 8008e98:	e009      	b.n	8008eae <v_R90+0x17a>
	while(dist_l < VV_OFFSET_B && dist_r < VV_OFFSET_B);
 8008e9a:	4b0d      	ldr	r3, [pc, #52]	; (8008ed0 <v_R90+0x19c>)
 8008e9c:	edd3 7a00 	vldr	s15, [r3]
 8008ea0:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8008ed8 <v_R90+0x1a4>
 8008ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eac:	d4ea      	bmi.n	8008e84 <v_R90+0x150>
}
 8008eae:	bf00      	nop
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20000fac 	.word	0x20000fac
 8008eb8:	20000da0 	.word	0x20000da0
 8008ebc:	461c4000 	.word	0x461c4000
 8008ec0:	20000b20 	.word	0x20000b20
 8008ec4:	200007b4 	.word	0x200007b4
 8008ec8:	43c80000 	.word	0x43c80000
 8008ecc:	200001dc 	.word	0x200001dc
 8008ed0:	20000b2c 	.word	0x20000b2c
 8008ed4:	200012e8 	.word	0x200012e8
 8008ed8:	42480000 	.word	0x42480000
 8008edc:	20000b98 	.word	0x20000b98
 8008ee0:	c55ac000 	.word	0xc55ac000
 8008ee4:	200001e0 	.word	0x200001e0
 8008ee8:	200002f0 	.word	0x200002f0
 8008eec:	c3af0000 	.word	0xc3af0000
 8008ef0:	20000b34 	.word	0x20000b34
 8008ef4:	20000c40 	.word	0x20000c40
 8008ef8:	20000b9c 	.word	0x20000b9c
 8008efc:	42960000 	.word	0x42960000
 8008f00:	455ac000 	.word	0x455ac000
 8008f04:	42b40000 	.word	0x42b40000

08008f08 <v_L90>:
//v_L90
// 柱中心から左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L90(void){
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	af00      	add	r7, sp, #0

	full_led_write(PURPLE);
 8008f0c:	2005      	movs	r0, #5
 8008f0e:	f009 fe7b 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 8008f12:	4a5d      	ldr	r2, [pc, #372]	; (8009088 <v_L90+0x180>)
 8008f14:	8813      	ldrh	r3, [r2, #0]
 8008f16:	f36f 2308 	bfc	r3, #8, #1
 8008f1a:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8008f1c:	4b5b      	ldr	r3, [pc, #364]	; (800908c <v_L90+0x184>)
 8008f1e:	4a5c      	ldr	r2, [pc, #368]	; (8009090 <v_L90+0x188>)
 8008f20:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8008f22:	4b5c      	ldr	r3, [pc, #368]	; (8009094 <v_L90+0x18c>)
 8008f24:	4a5a      	ldr	r2, [pc, #360]	; (8009090 <v_L90+0x188>)
 8008f26:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8008f28:	4b5b      	ldr	r3, [pc, #364]	; (8009098 <v_L90+0x190>)
 8008f2a:	4a5c      	ldr	r2, [pc, #368]	; (800909c <v_L90+0x194>)
 8008f2c:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8008f2e:	4b5c      	ldr	r3, [pc, #368]	; (80090a0 <v_L90+0x198>)
 8008f30:	4a5a      	ldr	r2, [pc, #360]	; (800909c <v_L90+0x194>)
 8008f32:	601a      	str	r2, [r3, #0]

	control_start();
 8008f34:	f7fb ff1e 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8008f38:	f04f 0300 	mov.w	r3, #0
 8008f3c:	4a59      	ldr	r2, [pc, #356]	; (80090a4 <v_L90+0x19c>)
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	4a59      	ldr	r2, [pc, #356]	; (80090a8 <v_L90+0x1a0>)
 8008f42:	6013      	str	r3, [r2, #0]
	while(dist_l < VV_OFFSET_F && dist_r < VV_OFFSET_F);
 8008f44:	bf00      	nop
 8008f46:	4b58      	ldr	r3, [pc, #352]	; (80090a8 <v_L90+0x1a0>)
 8008f48:	edd3 7a00 	vldr	s15, [r3]
 8008f4c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80090ac <v_L90+0x1a4>
 8008f50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f58:	d509      	bpl.n	8008f6e <v_L90+0x66>
 8008f5a:	4b52      	ldr	r3, [pc, #328]	; (80090a4 <v_L90+0x19c>)
 8008f5c:	edd3 7a00 	vldr	s15, [r3]
 8008f60:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80090ac <v_L90+0x1a4>
 8008f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f6c:	d4eb      	bmi.n	8008f46 <v_L90+0x3e>
	drive_stop();
 8008f6e:	f7fb fed9 	bl	8004d24 <drive_stop>
	control_stop();
 8008f72:	f7fb ff13 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8008f76:	4a44      	ldr	r2, [pc, #272]	; (8009088 <v_L90+0x180>)
 8008f78:	8813      	ldrh	r3, [r2, #0]
 8008f7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008f7e:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = VV_DEGACCEL;
 8008f80:	4b4b      	ldr	r3, [pc, #300]	; (80090b0 <v_L90+0x1a8>)
 8008f82:	4a4c      	ldr	r2, [pc, #304]	; (80090b4 <v_L90+0x1ac>)
 8008f84:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8008f86:	4b4c      	ldr	r3, [pc, #304]	; (80090b8 <v_L90+0x1b0>)
 8008f88:	f04f 0200 	mov.w	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]
	omega_max = VV_OMEGA;
 8008f8e:	4b4b      	ldr	r3, [pc, #300]	; (80090bc <v_L90+0x1b4>)
 8008f90:	4a4b      	ldr	r2, [pc, #300]	; (80090c0 <v_L90+0x1b8>)
 8008f92:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8008f94:	4b4b      	ldr	r3, [pc, #300]	; (80090c4 <v_L90+0x1bc>)
 8008f96:	4a41      	ldr	r2, [pc, #260]	; (800909c <v_L90+0x194>)
 8008f98:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8008f9a:	4a3b      	ldr	r2, [pc, #236]	; (8009088 <v_L90+0x180>)
 8008f9c:	8813      	ldrh	r3, [r2, #0]
 8008f9e:	f043 0302 	orr.w	r3, r3, #2
 8008fa2:	8013      	strh	r3, [r2, #0]
//	while(degree_z < target_degree_z+25);
	while(degree_z < target_degree_z+VV_DEG);
 8008fa4:	bf00      	nop
 8008fa6:	4b48      	ldr	r3, [pc, #288]	; (80090c8 <v_L90+0x1c0>)
 8008fa8:	edd3 7a00 	vldr	s15, [r3]
 8008fac:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8008fb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fb4:	4b45      	ldr	r3, [pc, #276]	; (80090cc <v_L90+0x1c4>)
 8008fb6:	edd3 7a00 	vldr	s15, [r3]
 8008fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc2:	dcf0      	bgt.n	8008fa6 <v_L90+0x9e>

	target_degaccel_z = 0;
 8008fc4:	4b3a      	ldr	r3, [pc, #232]	; (80090b0 <v_L90+0x1a8>)
 8008fc6:	f04f 0200 	mov.w	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+75);
	while(degree_z < target_degree_z+(90-VV_DEG+2));
 8008fcc:	bf00      	nop
 8008fce:	4b3e      	ldr	r3, [pc, #248]	; (80090c8 <v_L90+0x1c0>)
 8008fd0:	edd3 7a00 	vldr	s15, [r3]
 8008fd4:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80090d0 <v_L90+0x1c8>
 8008fd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fdc:	4b3b      	ldr	r3, [pc, #236]	; (80090cc <v_L90+0x1c4>)
 8008fde:	edd3 7a00 	vldr	s15, [r3]
 8008fe2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fea:	dcf0      	bgt.n	8008fce <v_L90+0xc6>

	target_degaccel_z = -VV_DEGACCEL;
 8008fec:	4b30      	ldr	r3, [pc, #192]	; (80090b0 <v_L90+0x1a8>)
 8008fee:	4a39      	ldr	r2, [pc, #228]	; (80090d4 <v_L90+0x1cc>)
 8008ff0:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 8008ff2:	bf00      	nop
 8008ff4:	4b34      	ldr	r3, [pc, #208]	; (80090c8 <v_L90+0x1c0>)
 8008ff6:	edd3 7a00 	vldr	s15, [r3]
 8008ffa:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80090d8 <v_L90+0x1d0>
 8008ffe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009002:	4b32      	ldr	r3, [pc, #200]	; (80090cc <v_L90+0x1c4>)
 8009004:	edd3 7a00 	vldr	s15, [r3]
 8009008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800900c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009010:	dcf0      	bgt.n	8008ff4 <v_L90+0xec>
	turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009012:	2103      	movs	r1, #3
 8009014:	20fe      	movs	r0, #254	; 0xfe
 8009016:	f008 f827 	bl	8011068 <turn_dir>

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 800901a:	4a1b      	ldr	r2, [pc, #108]	; (8009088 <v_L90+0x180>)
 800901c:	8813      	ldrh	r3, [r2, #0]
 800901e:	f36f 334d 	bfc	r3, #13, #1
 8009022:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8009024:	4b19      	ldr	r3, [pc, #100]	; (800908c <v_L90+0x184>)
 8009026:	4a1a      	ldr	r2, [pc, #104]	; (8009090 <v_L90+0x188>)
 8009028:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800902a:	4b1a      	ldr	r3, [pc, #104]	; (8009094 <v_L90+0x18c>)
 800902c:	4a18      	ldr	r2, [pc, #96]	; (8009090 <v_L90+0x188>)
 800902e:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8009030:	4b19      	ldr	r3, [pc, #100]	; (8009098 <v_L90+0x190>)
 8009032:	4a1a      	ldr	r2, [pc, #104]	; (800909c <v_L90+0x194>)
 8009034:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8009036:	4b1a      	ldr	r3, [pc, #104]	; (80090a0 <v_L90+0x198>)
 8009038:	4a18      	ldr	r2, [pc, #96]	; (800909c <v_L90+0x194>)
 800903a:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 800903c:	f04f 0300 	mov.w	r3, #0
 8009040:	4a18      	ldr	r2, [pc, #96]	; (80090a4 <v_L90+0x19c>)
 8009042:	6013      	str	r3, [r2, #0]
 8009044:	4a18      	ldr	r2, [pc, #96]	; (80090a8 <v_L90+0x1a0>)
 8009046:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8009048:	4a0f      	ldr	r2, [pc, #60]	; (8009088 <v_L90+0x180>)
 800904a:	8813      	ldrh	r3, [r2, #0]
 800904c:	f043 0304 	orr.w	r3, r3, #4
 8009050:	8013      	strh	r3, [r2, #0]
	control_start();
 8009052:	f7fb fe8f 	bl	8004d74 <control_start>
	while(dist_l < VV_OFFSET_B && dist_r < VV_OFFSET_B);
 8009056:	bf00      	nop
 8009058:	4b13      	ldr	r3, [pc, #76]	; (80090a8 <v_L90+0x1a0>)
 800905a:	edd3 7a00 	vldr	s15, [r3]
 800905e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80090ac <v_L90+0x1a4>
 8009062:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800906a:	d400      	bmi.n	800906e <v_L90+0x166>
}
 800906c:	e009      	b.n	8009082 <v_L90+0x17a>
	while(dist_l < VV_OFFSET_B && dist_r < VV_OFFSET_B);
 800906e:	4b0d      	ldr	r3, [pc, #52]	; (80090a4 <v_L90+0x19c>)
 8009070:	edd3 7a00 	vldr	s15, [r3]
 8009074:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80090ac <v_L90+0x1a4>
 8009078:	eef4 7ac7 	vcmpe.f32	s15, s14
 800907c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009080:	d4ea      	bmi.n	8009058 <v_L90+0x150>
}
 8009082:	bf00      	nop
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20000fac 	.word	0x20000fac
 800908c:	20000da0 	.word	0x20000da0
 8009090:	461c4000 	.word	0x461c4000
 8009094:	20000b20 	.word	0x20000b20
 8009098:	200007b4 	.word	0x200007b4
 800909c:	43c80000 	.word	0x43c80000
 80090a0:	200001dc 	.word	0x200001dc
 80090a4:	20000b2c 	.word	0x20000b2c
 80090a8:	200012e8 	.word	0x200012e8
 80090ac:	42480000 	.word	0x42480000
 80090b0:	20000b98 	.word	0x20000b98
 80090b4:	455ac000 	.word	0x455ac000
 80090b8:	200001e0 	.word	0x200001e0
 80090bc:	20000b24 	.word	0x20000b24
 80090c0:	43af0000 	.word	0x43af0000
 80090c4:	20000b34 	.word	0x20000b34
 80090c8:	20000c40 	.word	0x20000c40
 80090cc:	20000b9c 	.word	0x20000b9c
 80090d0:	42960000 	.word	0x42960000
 80090d4:	c55ac000 	.word	0xc55ac000
 80090d8:	42b40000 	.word	0x42b40000

080090dc <v_R902>:
//v_R902
// 柱中心から右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R902(void){
 80090dc:	b580      	push	{r7, lr}
 80090de:	af00      	add	r7, sp, #0

	full_led_write(YELLOW);
 80090e0:	2006      	movs	r0, #6
 80090e2:	f009 fd91 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 80090e6:	4a5d      	ldr	r2, [pc, #372]	; (800925c <v_R902+0x180>)
 80090e8:	8813      	ldrh	r3, [r2, #0]
 80090ea:	f36f 2308 	bfc	r3, #8, #1
 80090ee:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80090f0:	4b5b      	ldr	r3, [pc, #364]	; (8009260 <v_R902+0x184>)
 80090f2:	4a5c      	ldr	r2, [pc, #368]	; (8009264 <v_R902+0x188>)
 80090f4:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80090f6:	4b5c      	ldr	r3, [pc, #368]	; (8009268 <v_R902+0x18c>)
 80090f8:	4a5a      	ldr	r2, [pc, #360]	; (8009264 <v_R902+0x188>)
 80090fa:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80090fc:	4b5b      	ldr	r3, [pc, #364]	; (800926c <v_R902+0x190>)
 80090fe:	4a5c      	ldr	r2, [pc, #368]	; (8009270 <v_R902+0x194>)
 8009100:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 8009102:	4b5c      	ldr	r3, [pc, #368]	; (8009274 <v_R902+0x198>)
 8009104:	4a5a      	ldr	r2, [pc, #360]	; (8009270 <v_R902+0x194>)
 8009106:	601a      	str	r2, [r3, #0]

	control_start();
 8009108:	f7fb fe34 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 800910c:	f04f 0300 	mov.w	r3, #0
 8009110:	4a59      	ldr	r2, [pc, #356]	; (8009278 <v_R902+0x19c>)
 8009112:	6013      	str	r3, [r2, #0]
 8009114:	4a59      	ldr	r2, [pc, #356]	; (800927c <v_R902+0x1a0>)
 8009116:	6013      	str	r3, [r2, #0]
	while(dist_l < VV_H_OFFSET_F && dist_r < VV_H_OFFSET_F);
 8009118:	bf00      	nop
 800911a:	4b58      	ldr	r3, [pc, #352]	; (800927c <v_R902+0x1a0>)
 800911c:	edd3 7a00 	vldr	s15, [r3]
 8009120:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8009280 <v_R902+0x1a4>
 8009124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800912c:	d509      	bpl.n	8009142 <v_R902+0x66>
 800912e:	4b52      	ldr	r3, [pc, #328]	; (8009278 <v_R902+0x19c>)
 8009130:	edd3 7a00 	vldr	s15, [r3]
 8009134:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8009280 <v_R902+0x1a4>
 8009138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800913c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009140:	d4eb      	bmi.n	800911a <v_R902+0x3e>
	drive_stop();
 8009142:	f7fb fdef 	bl	8004d24 <drive_stop>
	control_stop();
 8009146:	f7fb fe29 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 800914a:	4a44      	ldr	r2, [pc, #272]	; (800925c <v_R902+0x180>)
 800914c:	8813      	ldrh	r3, [r2, #0]
 800914e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009152:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -VV_H_DEGACCEL;
 8009154:	4b4b      	ldr	r3, [pc, #300]	; (8009284 <v_R902+0x1a8>)
 8009156:	4a4c      	ldr	r2, [pc, #304]	; (8009288 <v_R902+0x1ac>)
 8009158:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 800915a:	4b4c      	ldr	r3, [pc, #304]	; (800928c <v_R902+0x1b0>)
 800915c:	f04f 0200 	mov.w	r2, #0
 8009160:	601a      	str	r2, [r3, #0]
	omega_min = -VV_H_OMEGA;
 8009162:	4b4b      	ldr	r3, [pc, #300]	; (8009290 <v_R902+0x1b4>)
 8009164:	4a4b      	ldr	r2, [pc, #300]	; (8009294 <v_R902+0x1b8>)
 8009166:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 8009168:	4b4b      	ldr	r3, [pc, #300]	; (8009298 <v_R902+0x1bc>)
 800916a:	4a41      	ldr	r2, [pc, #260]	; (8009270 <v_R902+0x194>)
 800916c:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 800916e:	4a3b      	ldr	r2, [pc, #236]	; (800925c <v_R902+0x180>)
 8009170:	8813      	ldrh	r3, [r2, #0]
 8009172:	f043 0302 	orr.w	r3, r3, #2
 8009176:	8013      	strh	r3, [r2, #0]
//	while(degree_z > target_degree_z-25);
	while(degree_z > target_degree_z-VV_H_DEG);
 8009178:	bf00      	nop
 800917a:	4b48      	ldr	r3, [pc, #288]	; (800929c <v_R902+0x1c0>)
 800917c:	edd3 7a00 	vldr	s15, [r3]
 8009180:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80092a0 <v_R902+0x1c4>
 8009184:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009188:	4b46      	ldr	r3, [pc, #280]	; (80092a4 <v_R902+0x1c8>)
 800918a:	edd3 7a00 	vldr	s15, [r3]
 800918e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009196:	d4f0      	bmi.n	800917a <v_R902+0x9e>

	target_degaccel_z = 0;
 8009198:	4b3a      	ldr	r3, [pc, #232]	; (8009284 <v_R902+0x1a8>)
 800919a:	f04f 0200 	mov.w	r2, #0
 800919e:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-75);
	while(degree_z > target_degree_z-(90-VV_H_DEG+2));
 80091a0:	bf00      	nop
 80091a2:	4b3e      	ldr	r3, [pc, #248]	; (800929c <v_R902+0x1c0>)
 80091a4:	edd3 7a00 	vldr	s15, [r3]
 80091a8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80092a8 <v_R902+0x1cc>
 80091ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80091b0:	4b3c      	ldr	r3, [pc, #240]	; (80092a4 <v_R902+0x1c8>)
 80091b2:	edd3 7a00 	vldr	s15, [r3]
 80091b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80091ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091be:	d4f0      	bmi.n	80091a2 <v_R902+0xc6>

	target_degaccel_z = VV_H_DEGACCEL;
 80091c0:	4b30      	ldr	r3, [pc, #192]	; (8009284 <v_R902+0x1a8>)
 80091c2:	4a28      	ldr	r2, [pc, #160]	; (8009264 <v_R902+0x188>)
 80091c4:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-90);
 80091c6:	bf00      	nop
 80091c8:	4b34      	ldr	r3, [pc, #208]	; (800929c <v_R902+0x1c0>)
 80091ca:	edd3 7a00 	vldr	s15, [r3]
 80091ce:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80092ac <v_R902+0x1d0>
 80091d2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80091d6:	4b33      	ldr	r3, [pc, #204]	; (80092a4 <v_R902+0x1c8>)
 80091d8:	edd3 7a00 	vldr	s15, [r3]
 80091dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80091e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091e4:	d4f0      	bmi.n	80091c8 <v_R902+0xec>
	turn_dir(DIR_TURN_R90_8, 3);									//マイクロマウス内部位置情報でも左回転処理
 80091e6:	2103      	movs	r1, #3
 80091e8:	2002      	movs	r0, #2
 80091ea:	f007 ff3d 	bl	8011068 <turn_dir>

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 80091ee:	4a1b      	ldr	r2, [pc, #108]	; (800925c <v_R902+0x180>)
 80091f0:	8813      	ldrh	r3, [r2, #0]
 80091f2:	f36f 334d 	bfc	r3, #13, #1
 80091f6:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80091f8:	4b19      	ldr	r3, [pc, #100]	; (8009260 <v_R902+0x184>)
 80091fa:	4a1a      	ldr	r2, [pc, #104]	; (8009264 <v_R902+0x188>)
 80091fc:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80091fe:	4b1a      	ldr	r3, [pc, #104]	; (8009268 <v_R902+0x18c>)
 8009200:	4a18      	ldr	r2, [pc, #96]	; (8009264 <v_R902+0x188>)
 8009202:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8009204:	4b19      	ldr	r3, [pc, #100]	; (800926c <v_R902+0x190>)
 8009206:	4a1a      	ldr	r2, [pc, #104]	; (8009270 <v_R902+0x194>)
 8009208:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 800920a:	4b1a      	ldr	r3, [pc, #104]	; (8009274 <v_R902+0x198>)
 800920c:	4a18      	ldr	r2, [pc, #96]	; (8009270 <v_R902+0x194>)
 800920e:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8009210:	f04f 0300 	mov.w	r3, #0
 8009214:	4a18      	ldr	r2, [pc, #96]	; (8009278 <v_R902+0x19c>)
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	4a18      	ldr	r2, [pc, #96]	; (800927c <v_R902+0x1a0>)
 800921a:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 800921c:	4a0f      	ldr	r2, [pc, #60]	; (800925c <v_R902+0x180>)
 800921e:	8813      	ldrh	r3, [r2, #0]
 8009220:	f043 0304 	orr.w	r3, r3, #4
 8009224:	8013      	strh	r3, [r2, #0]
	control_start();
 8009226:	f7fb fda5 	bl	8004d74 <control_start>
	while(dist_l < VV_H_OFFSET_B && dist_r < VV_H_OFFSET_B);
 800922a:	bf00      	nop
 800922c:	4b13      	ldr	r3, [pc, #76]	; (800927c <v_R902+0x1a0>)
 800922e:	edd3 7a00 	vldr	s15, [r3]
 8009232:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80092b0 <v_R902+0x1d4>
 8009236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800923a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800923e:	d400      	bmi.n	8009242 <v_R902+0x166>
}
 8009240:	e009      	b.n	8009256 <v_R902+0x17a>
	while(dist_l < VV_H_OFFSET_B && dist_r < VV_H_OFFSET_B);
 8009242:	4b0d      	ldr	r3, [pc, #52]	; (8009278 <v_R902+0x19c>)
 8009244:	edd3 7a00 	vldr	s15, [r3]
 8009248:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80092b0 <v_R902+0x1d4>
 800924c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009254:	d4ea      	bmi.n	800922c <v_R902+0x150>
}
 8009256:	bf00      	nop
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20000fac 	.word	0x20000fac
 8009260:	20000da0 	.word	0x20000da0
 8009264:	461c4000 	.word	0x461c4000
 8009268:	20000b20 	.word	0x20000b20
 800926c:	200007b4 	.word	0x200007b4
 8009270:	44480000 	.word	0x44480000
 8009274:	200001dc 	.word	0x200001dc
 8009278:	20000b2c 	.word	0x20000b2c
 800927c:	200012e8 	.word	0x200012e8
 8009280:	420c0000 	.word	0x420c0000
 8009284:	20000b98 	.word	0x20000b98
 8009288:	c61c4000 	.word	0xc61c4000
 800928c:	200001e0 	.word	0x200001e0
 8009290:	200002f0 	.word	0x200002f0
 8009294:	c4480000 	.word	0xc4480000
 8009298:	20000b34 	.word	0x20000b34
 800929c:	20000c40 	.word	0x20000c40
 80092a0:	42000000 	.word	0x42000000
 80092a4:	20000b9c 	.word	0x20000b9c
 80092a8:	42700000 	.word	0x42700000
 80092ac:	42b40000 	.word	0x42b40000
 80092b0:	42820000 	.word	0x42820000

080092b4 <v_L902>:
//v_L902
// 柱中心から左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L902(void){
 80092b4:	b580      	push	{r7, lr}
 80092b6:	af00      	add	r7, sp, #0

	full_led_write(PURPLE);
 80092b8:	2005      	movs	r0, #5
 80092ba:	f009 fca5 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 80092be:	4a5d      	ldr	r2, [pc, #372]	; (8009434 <v_L902+0x180>)
 80092c0:	8813      	ldrh	r3, [r2, #0]
 80092c2:	f36f 2308 	bfc	r3, #8, #1
 80092c6:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80092c8:	4b5b      	ldr	r3, [pc, #364]	; (8009438 <v_L902+0x184>)
 80092ca:	4a5c      	ldr	r2, [pc, #368]	; (800943c <v_L902+0x188>)
 80092cc:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80092ce:	4b5c      	ldr	r3, [pc, #368]	; (8009440 <v_L902+0x18c>)
 80092d0:	4a5a      	ldr	r2, [pc, #360]	; (800943c <v_L902+0x188>)
 80092d2:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80092d4:	4b5b      	ldr	r3, [pc, #364]	; (8009444 <v_L902+0x190>)
 80092d6:	4a5c      	ldr	r2, [pc, #368]	; (8009448 <v_L902+0x194>)
 80092d8:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 80092da:	4b5c      	ldr	r3, [pc, #368]	; (800944c <v_L902+0x198>)
 80092dc:	4a5a      	ldr	r2, [pc, #360]	; (8009448 <v_L902+0x194>)
 80092de:	601a      	str	r2, [r3, #0]

	control_start();
 80092e0:	f7fb fd48 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80092e4:	f04f 0300 	mov.w	r3, #0
 80092e8:	4a59      	ldr	r2, [pc, #356]	; (8009450 <v_L902+0x19c>)
 80092ea:	6013      	str	r3, [r2, #0]
 80092ec:	4a59      	ldr	r2, [pc, #356]	; (8009454 <v_L902+0x1a0>)
 80092ee:	6013      	str	r3, [r2, #0]
	while(dist_l < VV_H_OFFSET_F && dist_r < VV_H_OFFSET_F);
 80092f0:	bf00      	nop
 80092f2:	4b58      	ldr	r3, [pc, #352]	; (8009454 <v_L902+0x1a0>)
 80092f4:	edd3 7a00 	vldr	s15, [r3]
 80092f8:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8009458 <v_L902+0x1a4>
 80092fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009304:	d509      	bpl.n	800931a <v_L902+0x66>
 8009306:	4b52      	ldr	r3, [pc, #328]	; (8009450 <v_L902+0x19c>)
 8009308:	edd3 7a00 	vldr	s15, [r3]
 800930c:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8009458 <v_L902+0x1a4>
 8009310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009318:	d4eb      	bmi.n	80092f2 <v_L902+0x3e>
	drive_stop();
 800931a:	f7fb fd03 	bl	8004d24 <drive_stop>
	control_stop();
 800931e:	f7fb fd3d 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8009322:	4a44      	ldr	r2, [pc, #272]	; (8009434 <v_L902+0x180>)
 8009324:	8813      	ldrh	r3, [r2, #0]
 8009326:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800932a:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = VV_H_DEGACCEL;
 800932c:	4b4b      	ldr	r3, [pc, #300]	; (800945c <v_L902+0x1a8>)
 800932e:	4a43      	ldr	r2, [pc, #268]	; (800943c <v_L902+0x188>)
 8009330:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8009332:	4b4b      	ldr	r3, [pc, #300]	; (8009460 <v_L902+0x1ac>)
 8009334:	f04f 0200 	mov.w	r2, #0
 8009338:	601a      	str	r2, [r3, #0]
	omega_max = VV_H_OMEGA;
 800933a:	4b4a      	ldr	r3, [pc, #296]	; (8009464 <v_L902+0x1b0>)
 800933c:	4a42      	ldr	r2, [pc, #264]	; (8009448 <v_L902+0x194>)
 800933e:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 8009340:	4b49      	ldr	r3, [pc, #292]	; (8009468 <v_L902+0x1b4>)
 8009342:	4a41      	ldr	r2, [pc, #260]	; (8009448 <v_L902+0x194>)
 8009344:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8009346:	4a3b      	ldr	r2, [pc, #236]	; (8009434 <v_L902+0x180>)
 8009348:	8813      	ldrh	r3, [r2, #0]
 800934a:	f043 0302 	orr.w	r3, r3, #2
 800934e:	8013      	strh	r3, [r2, #0]
//	while(degree_z < target_degree_z+25);
	while(degree_z < target_degree_z+VV_H_DEG);
 8009350:	bf00      	nop
 8009352:	4b46      	ldr	r3, [pc, #280]	; (800946c <v_L902+0x1b8>)
 8009354:	edd3 7a00 	vldr	s15, [r3]
 8009358:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8009470 <v_L902+0x1bc>
 800935c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009360:	4b44      	ldr	r3, [pc, #272]	; (8009474 <v_L902+0x1c0>)
 8009362:	edd3 7a00 	vldr	s15, [r3]
 8009366:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800936a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800936e:	dcf0      	bgt.n	8009352 <v_L902+0x9e>

	target_degaccel_z = 0;
 8009370:	4b3a      	ldr	r3, [pc, #232]	; (800945c <v_L902+0x1a8>)
 8009372:	f04f 0200 	mov.w	r2, #0
 8009376:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+75);
	while(degree_z < target_degree_z+(90-VV_H_DEG+2));
 8009378:	bf00      	nop
 800937a:	4b3c      	ldr	r3, [pc, #240]	; (800946c <v_L902+0x1b8>)
 800937c:	edd3 7a00 	vldr	s15, [r3]
 8009380:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8009478 <v_L902+0x1c4>
 8009384:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009388:	4b3a      	ldr	r3, [pc, #232]	; (8009474 <v_L902+0x1c0>)
 800938a:	edd3 7a00 	vldr	s15, [r3]
 800938e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009396:	dcf0      	bgt.n	800937a <v_L902+0xc6>

	target_degaccel_z = -VV_H_DEGACCEL;
 8009398:	4b30      	ldr	r3, [pc, #192]	; (800945c <v_L902+0x1a8>)
 800939a:	4a38      	ldr	r2, [pc, #224]	; (800947c <v_L902+0x1c8>)
 800939c:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+90);
 800939e:	bf00      	nop
 80093a0:	4b32      	ldr	r3, [pc, #200]	; (800946c <v_L902+0x1b8>)
 80093a2:	edd3 7a00 	vldr	s15, [r3]
 80093a6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009480 <v_L902+0x1cc>
 80093aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093ae:	4b31      	ldr	r3, [pc, #196]	; (8009474 <v_L902+0x1c0>)
 80093b0:	edd3 7a00 	vldr	s15, [r3]
 80093b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80093b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093bc:	dcf0      	bgt.n	80093a0 <v_L902+0xec>
	turn_dir(DIR_TURN_L90_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80093be:	2103      	movs	r1, #3
 80093c0:	20fe      	movs	r0, #254	; 0xfe
 80093c2:	f007 fe51 	bl	8011068 <turn_dir>

//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 80093c6:	4a1b      	ldr	r2, [pc, #108]	; (8009434 <v_L902+0x180>)
 80093c8:	8813      	ldrh	r3, [r2, #0]
 80093ca:	f36f 334d 	bfc	r3, #13, #1
 80093ce:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80093d0:	4b19      	ldr	r3, [pc, #100]	; (8009438 <v_L902+0x184>)
 80093d2:	4a1a      	ldr	r2, [pc, #104]	; (800943c <v_L902+0x188>)
 80093d4:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80093d6:	4b1a      	ldr	r3, [pc, #104]	; (8009440 <v_L902+0x18c>)
 80093d8:	4a18      	ldr	r2, [pc, #96]	; (800943c <v_L902+0x188>)
 80093da:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 80093dc:	4b19      	ldr	r3, [pc, #100]	; (8009444 <v_L902+0x190>)
 80093de:	4a1a      	ldr	r2, [pc, #104]	; (8009448 <v_L902+0x194>)
 80093e0:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 80093e2:	4b1a      	ldr	r3, [pc, #104]	; (800944c <v_L902+0x198>)
 80093e4:	4a18      	ldr	r2, [pc, #96]	; (8009448 <v_L902+0x194>)
 80093e6:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 80093e8:	f04f 0300 	mov.w	r3, #0
 80093ec:	4a18      	ldr	r2, [pc, #96]	; (8009450 <v_L902+0x19c>)
 80093ee:	6013      	str	r3, [r2, #0]
 80093f0:	4a18      	ldr	r2, [pc, #96]	; (8009454 <v_L902+0x1a0>)
 80093f2:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 80093f4:	4a0f      	ldr	r2, [pc, #60]	; (8009434 <v_L902+0x180>)
 80093f6:	8813      	ldrh	r3, [r2, #0]
 80093f8:	f043 0304 	orr.w	r3, r3, #4
 80093fc:	8013      	strh	r3, [r2, #0]
	control_start();
 80093fe:	f7fb fcb9 	bl	8004d74 <control_start>
	while(dist_l < VV_H_OFFSET_B && dist_r < VV_H_OFFSET_B);
 8009402:	bf00      	nop
 8009404:	4b13      	ldr	r3, [pc, #76]	; (8009454 <v_L902+0x1a0>)
 8009406:	edd3 7a00 	vldr	s15, [r3]
 800940a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8009484 <v_L902+0x1d0>
 800940e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009416:	d400      	bmi.n	800941a <v_L902+0x166>
}
 8009418:	e009      	b.n	800942e <v_L902+0x17a>
	while(dist_l < VV_H_OFFSET_B && dist_r < VV_H_OFFSET_B);
 800941a:	4b0d      	ldr	r3, [pc, #52]	; (8009450 <v_L902+0x19c>)
 800941c:	edd3 7a00 	vldr	s15, [r3]
 8009420:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8009484 <v_L902+0x1d0>
 8009424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800942c:	d4ea      	bmi.n	8009404 <v_L902+0x150>
}
 800942e:	bf00      	nop
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	20000fac 	.word	0x20000fac
 8009438:	20000da0 	.word	0x20000da0
 800943c:	461c4000 	.word	0x461c4000
 8009440:	20000b20 	.word	0x20000b20
 8009444:	200007b4 	.word	0x200007b4
 8009448:	44480000 	.word	0x44480000
 800944c:	200001dc 	.word	0x200001dc
 8009450:	20000b2c 	.word	0x20000b2c
 8009454:	200012e8 	.word	0x200012e8
 8009458:	420c0000 	.word	0x420c0000
 800945c:	20000b98 	.word	0x20000b98
 8009460:	200001e0 	.word	0x200001e0
 8009464:	20000b24 	.word	0x20000b24
 8009468:	20000b34 	.word	0x20000b34
 800946c:	20000c40 	.word	0x20000c40
 8009470:	42000000 	.word	0x42000000
 8009474:	20000b9c 	.word	0x20000b9c
 8009478:	42700000 	.word	0x42700000
 800947c:	c61c4000 	.word	0xc61c4000
 8009480:	42b40000 	.word	0x42b40000
 8009484:	42820000 	.word	0x42820000

08009488 <v_R135>:
//v_R135
// 区画中心から右に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135(void){
 8009488:	b580      	push	{r7, lr}
 800948a:	af00      	add	r7, sp, #0

	full_led_write(YELLOW);
 800948c:	2006      	movs	r0, #6
 800948e:	f009 fbbb 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 8009492:	4a7d      	ldr	r2, [pc, #500]	; (8009688 <v_R135+0x200>)
 8009494:	8813      	ldrh	r3, [r2, #0]
 8009496:	f36f 2308 	bfc	r3, #8, #1
 800949a:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800949c:	4b7b      	ldr	r3, [pc, #492]	; (800968c <v_R135+0x204>)
 800949e:	4a7c      	ldr	r2, [pc, #496]	; (8009690 <v_R135+0x208>)
 80094a0:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80094a2:	4b7c      	ldr	r3, [pc, #496]	; (8009694 <v_R135+0x20c>)
 80094a4:	4a7a      	ldr	r2, [pc, #488]	; (8009690 <v_R135+0x208>)
 80094a6:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 80094a8:	4b7b      	ldr	r3, [pc, #492]	; (8009698 <v_R135+0x210>)
 80094aa:	4a7c      	ldr	r2, [pc, #496]	; (800969c <v_R135+0x214>)
 80094ac:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 80094ae:	4b7c      	ldr	r3, [pc, #496]	; (80096a0 <v_R135+0x218>)
 80094b0:	4a7a      	ldr	r2, [pc, #488]	; (800969c <v_R135+0x214>)
 80094b2:	601a      	str	r2, [r3, #0]

	control_start();
 80094b4:	f7fb fc5e 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 80094b8:	f04f 0300 	mov.w	r3, #0
 80094bc:	4a79      	ldr	r2, [pc, #484]	; (80096a4 <v_R135+0x21c>)
 80094be:	6013      	str	r3, [r2, #0]
 80094c0:	4a79      	ldr	r2, [pc, #484]	; (80096a8 <v_R135+0x220>)
 80094c2:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 80094c4:	4b79      	ldr	r3, [pc, #484]	; (80096ac <v_R135+0x224>)
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d115      	bne.n	80094f8 <v_R135+0x70>
		while(dist_l < VVV_OFFSET_F && dist_r < VVV_OFFSET_F);
 80094cc:	bf00      	nop
 80094ce:	4b76      	ldr	r3, [pc, #472]	; (80096a8 <v_R135+0x220>)
 80094d0:	edd3 7a00 	vldr	s15, [r3]
 80094d4:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80096b0 <v_R135+0x228>
 80094d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094e0:	d51f      	bpl.n	8009522 <v_R135+0x9a>
 80094e2:	4b70      	ldr	r3, [pc, #448]	; (80096a4 <v_R135+0x21c>)
 80094e4:	edd3 7a00 	vldr	s15, [r3]
 80094e8:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80096b0 <v_R135+0x228>
 80094ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f4:	d4eb      	bmi.n	80094ce <v_R135+0x46>
 80094f6:	e014      	b.n	8009522 <v_R135+0x9a>
	}else{
		while(dist_l < VVV_OFFSET_B && dist_r < VVV_OFFSET_B);
 80094f8:	bf00      	nop
 80094fa:	4b6b      	ldr	r3, [pc, #428]	; (80096a8 <v_R135+0x220>)
 80094fc:	edd3 7a00 	vldr	s15, [r3]
 8009500:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80096b4 <v_R135+0x22c>
 8009504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800950c:	d509      	bpl.n	8009522 <v_R135+0x9a>
 800950e:	4b65      	ldr	r3, [pc, #404]	; (80096a4 <v_R135+0x21c>)
 8009510:	edd3 7a00 	vldr	s15, [r3]
 8009514:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80096b4 <v_R135+0x22c>
 8009518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800951c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009520:	d4eb      	bmi.n	80094fa <v_R135+0x72>
	}
	drive_stop();
 8009522:	f7fb fbff 	bl	8004d24 <drive_stop>
	control_stop();
 8009526:	f7fb fc39 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 800952a:	4a57      	ldr	r2, [pc, #348]	; (8009688 <v_R135+0x200>)
 800952c:	8813      	ldrh	r3, [r2, #0]
 800952e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009532:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -VVV_DEGACCEL;
 8009534:	4b60      	ldr	r3, [pc, #384]	; (80096b8 <v_R135+0x230>)
 8009536:	4a61      	ldr	r2, [pc, #388]	; (80096bc <v_R135+0x234>)
 8009538:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 800953a:	4b61      	ldr	r3, [pc, #388]	; (80096c0 <v_R135+0x238>)
 800953c:	f04f 0200 	mov.w	r2, #0
 8009540:	601a      	str	r2, [r3, #0]
	omega_min = -VVV_OMEGA;
 8009542:	4b60      	ldr	r3, [pc, #384]	; (80096c4 <v_R135+0x23c>)
 8009544:	4a60      	ldr	r2, [pc, #384]	; (80096c8 <v_R135+0x240>)
 8009546:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8009548:	4b60      	ldr	r3, [pc, #384]	; (80096cc <v_R135+0x244>)
 800954a:	4a54      	ldr	r2, [pc, #336]	; (800969c <v_R135+0x214>)
 800954c:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 800954e:	4a4e      	ldr	r2, [pc, #312]	; (8009688 <v_R135+0x200>)
 8009550:	8813      	ldrh	r3, [r2, #0]
 8009552:	f043 0302 	orr.w	r3, r3, #2
 8009556:	8013      	strh	r3, [r2, #0]
//	while(degree_z > target_degree_z-25);
	while(degree_z > target_degree_z-VVV_DEG);
 8009558:	bf00      	nop
 800955a:	4b5d      	ldr	r3, [pc, #372]	; (80096d0 <v_R135+0x248>)
 800955c:	edd3 7a00 	vldr	s15, [r3]
 8009560:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8009564:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009568:	4b5a      	ldr	r3, [pc, #360]	; (80096d4 <v_R135+0x24c>)
 800956a:	edd3 7a00 	vldr	s15, [r3]
 800956e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009576:	d4f0      	bmi.n	800955a <v_R135+0xd2>

	target_degaccel_z = 0;
 8009578:	4b4f      	ldr	r3, [pc, #316]	; (80096b8 <v_R135+0x230>)
 800957a:	f04f 0200 	mov.w	r2, #0
 800957e:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-120);
	while(degree_z > target_degree_z-(135-VVV_DEG+2));
 8009580:	bf00      	nop
 8009582:	4b53      	ldr	r3, [pc, #332]	; (80096d0 <v_R135+0x248>)
 8009584:	edd3 7a00 	vldr	s15, [r3]
 8009588:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80096d8 <v_R135+0x250>
 800958c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009590:	4b50      	ldr	r3, [pc, #320]	; (80096d4 <v_R135+0x24c>)
 8009592:	edd3 7a00 	vldr	s15, [r3]
 8009596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800959a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800959e:	d4f0      	bmi.n	8009582 <v_R135+0xfa>

	target_degaccel_z = VVV_DEGACCEL;
 80095a0:	4b45      	ldr	r3, [pc, #276]	; (80096b8 <v_R135+0x230>)
 80095a2:	4a4e      	ldr	r2, [pc, #312]	; (80096dc <v_R135+0x254>)
 80095a4:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-135);
 80095a6:	bf00      	nop
 80095a8:	4b49      	ldr	r3, [pc, #292]	; (80096d0 <v_R135+0x248>)
 80095aa:	edd3 7a00 	vldr	s15, [r3]
 80095ae:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80096e0 <v_R135+0x258>
 80095b2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80095b6:	4b47      	ldr	r3, [pc, #284]	; (80096d4 <v_R135+0x24c>)
 80095b8:	edd3 7a00 	vldr	s15, [r3]
 80095bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c4:	d4f0      	bmi.n	80095a8 <v_R135+0x120>
	turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 80095c6:	2103      	movs	r1, #3
 80095c8:	2003      	movs	r0, #3
 80095ca:	f007 fd4d 	bl	8011068 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 80095ce:	4b37      	ldr	r3, [pc, #220]	; (80096ac <v_R135+0x224>)
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	3301      	adds	r3, #1
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	bfb8      	it	lt
 80095dc:	425b      	neglt	r3, r3
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	4b32      	ldr	r3, [pc, #200]	; (80096ac <v_R135+0x224>)
 80095e2:	701a      	strb	r2, [r3, #0]
//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 80095e4:	4a28      	ldr	r2, [pc, #160]	; (8009688 <v_R135+0x200>)
 80095e6:	8813      	ldrh	r3, [r2, #0]
 80095e8:	f36f 334d 	bfc	r3, #13, #1
 80095ec:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80095ee:	4b27      	ldr	r3, [pc, #156]	; (800968c <v_R135+0x204>)
 80095f0:	4a27      	ldr	r2, [pc, #156]	; (8009690 <v_R135+0x208>)
 80095f2:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80095f4:	4b27      	ldr	r3, [pc, #156]	; (8009694 <v_R135+0x20c>)
 80095f6:	4a26      	ldr	r2, [pc, #152]	; (8009690 <v_R135+0x208>)
 80095f8:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 80095fa:	4b27      	ldr	r3, [pc, #156]	; (8009698 <v_R135+0x210>)
 80095fc:	4a27      	ldr	r2, [pc, #156]	; (800969c <v_R135+0x214>)
 80095fe:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8009600:	4b27      	ldr	r3, [pc, #156]	; (80096a0 <v_R135+0x218>)
 8009602:	4a26      	ldr	r2, [pc, #152]	; (800969c <v_R135+0x214>)
 8009604:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8009606:	f04f 0300 	mov.w	r3, #0
 800960a:	4a26      	ldr	r2, [pc, #152]	; (80096a4 <v_R135+0x21c>)
 800960c:	6013      	str	r3, [r2, #0]
 800960e:	4a26      	ldr	r2, [pc, #152]	; (80096a8 <v_R135+0x220>)
 8009610:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8009612:	4a1d      	ldr	r2, [pc, #116]	; (8009688 <v_R135+0x200>)
 8009614:	8813      	ldrh	r3, [r2, #0]
 8009616:	f043 0304 	orr.w	r3, r3, #4
 800961a:	8013      	strh	r3, [r2, #0]
	control_start();
 800961c:	f7fb fbaa 	bl	8004d74 <control_start>
	if(v_flag == 0){
 8009620:	4b22      	ldr	r3, [pc, #136]	; (80096ac <v_R135+0x224>)
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d116      	bne.n	8009656 <v_R135+0x1ce>
		while(dist_l < VVV_OFFSET_F && dist_r < VVV_OFFSET_F);
 8009628:	bf00      	nop
 800962a:	4b1f      	ldr	r3, [pc, #124]	; (80096a8 <v_R135+0x220>)
 800962c:	edd3 7a00 	vldr	s15, [r3]
 8009630:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80096b0 <v_R135+0x228>
 8009634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800963c:	d400      	bmi.n	8009640 <v_R135+0x1b8>
	}else{
		while(dist_l < VVV_OFFSET_B && dist_r < VVV_OFFSET_B);
	}
}
 800963e:	e020      	b.n	8009682 <v_R135+0x1fa>
		while(dist_l < VVV_OFFSET_F && dist_r < VVV_OFFSET_F);
 8009640:	4b18      	ldr	r3, [pc, #96]	; (80096a4 <v_R135+0x21c>)
 8009642:	edd3 7a00 	vldr	s15, [r3]
 8009646:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80096b0 <v_R135+0x228>
 800964a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800964e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009652:	d4ea      	bmi.n	800962a <v_R135+0x1a2>
}
 8009654:	e015      	b.n	8009682 <v_R135+0x1fa>
		while(dist_l < VVV_OFFSET_B && dist_r < VVV_OFFSET_B);
 8009656:	bf00      	nop
 8009658:	4b13      	ldr	r3, [pc, #76]	; (80096a8 <v_R135+0x220>)
 800965a:	edd3 7a00 	vldr	s15, [r3]
 800965e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80096b4 <v_R135+0x22c>
 8009662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800966a:	d400      	bmi.n	800966e <v_R135+0x1e6>
}
 800966c:	e009      	b.n	8009682 <v_R135+0x1fa>
		while(dist_l < VVV_OFFSET_B && dist_r < VVV_OFFSET_B);
 800966e:	4b0d      	ldr	r3, [pc, #52]	; (80096a4 <v_R135+0x21c>)
 8009670:	edd3 7a00 	vldr	s15, [r3]
 8009674:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80096b4 <v_R135+0x22c>
 8009678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800967c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009680:	d4ea      	bmi.n	8009658 <v_R135+0x1d0>
}
 8009682:	bf00      	nop
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	20000fac 	.word	0x20000fac
 800968c:	20000da0 	.word	0x20000da0
 8009690:	461c4000 	.word	0x461c4000
 8009694:	20000b20 	.word	0x20000b20
 8009698:	200007b4 	.word	0x200007b4
 800969c:	43c80000 	.word	0x43c80000
 80096a0:	200001dc 	.word	0x200001dc
 80096a4:	20000b2c 	.word	0x20000b2c
 80096a8:	200012e8 	.word	0x200012e8
 80096ac:	20000b28 	.word	0x20000b28
 80096b0:	428c0000 	.word	0x428c0000
 80096b4:	42680000 	.word	0x42680000
 80096b8:	20000b98 	.word	0x20000b98
 80096bc:	c53b8000 	.word	0xc53b8000
 80096c0:	200001e0 	.word	0x200001e0
 80096c4:	200002f0 	.word	0x200002f0
 80096c8:	c3960000 	.word	0xc3960000
 80096cc:	20000b34 	.word	0x20000b34
 80096d0:	20000c40 	.word	0x20000c40
 80096d4:	20000b9c 	.word	0x20000b9c
 80096d8:	42f40000 	.word	0x42f40000
 80096dc:	453b8000 	.word	0x453b8000
 80096e0:	43070000 	.word	0x43070000

080096e4 <v_L135>:
//v_L135
// 区画中心から左に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135(void){
 80096e4:	b580      	push	{r7, lr}
 80096e6:	af00      	add	r7, sp, #0

	full_led_write(PURPLE);
 80096e8:	2005      	movs	r0, #5
 80096ea:	f009 fa8d 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 80096ee:	4a7d      	ldr	r2, [pc, #500]	; (80098e4 <v_L135+0x200>)
 80096f0:	8813      	ldrh	r3, [r2, #0]
 80096f2:	f36f 2308 	bfc	r3, #8, #1
 80096f6:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 80096f8:	4b7b      	ldr	r3, [pc, #492]	; (80098e8 <v_L135+0x204>)
 80096fa:	4a7c      	ldr	r2, [pc, #496]	; (80098ec <v_L135+0x208>)
 80096fc:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 80096fe:	4b7c      	ldr	r3, [pc, #496]	; (80098f0 <v_L135+0x20c>)
 8009700:	4a7a      	ldr	r2, [pc, #488]	; (80098ec <v_L135+0x208>)
 8009702:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8009704:	4b7b      	ldr	r3, [pc, #492]	; (80098f4 <v_L135+0x210>)
 8009706:	4a7c      	ldr	r2, [pc, #496]	; (80098f8 <v_L135+0x214>)
 8009708:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 800970a:	4b7c      	ldr	r3, [pc, #496]	; (80098fc <v_L135+0x218>)
 800970c:	4a7a      	ldr	r2, [pc, #488]	; (80098f8 <v_L135+0x214>)
 800970e:	601a      	str	r2, [r3, #0]

	control_start();
 8009710:	f7fb fb30 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8009714:	f04f 0300 	mov.w	r3, #0
 8009718:	4a79      	ldr	r2, [pc, #484]	; (8009900 <v_L135+0x21c>)
 800971a:	6013      	str	r3, [r2, #0]
 800971c:	4a79      	ldr	r2, [pc, #484]	; (8009904 <v_L135+0x220>)
 800971e:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 8009720:	4b79      	ldr	r3, [pc, #484]	; (8009908 <v_L135+0x224>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d115      	bne.n	8009754 <v_L135+0x70>
		while(dist_l < VVV_OFFSET_F && dist_r < VVV_OFFSET_F);
 8009728:	bf00      	nop
 800972a:	4b76      	ldr	r3, [pc, #472]	; (8009904 <v_L135+0x220>)
 800972c:	edd3 7a00 	vldr	s15, [r3]
 8009730:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800990c <v_L135+0x228>
 8009734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800973c:	d51f      	bpl.n	800977e <v_L135+0x9a>
 800973e:	4b70      	ldr	r3, [pc, #448]	; (8009900 <v_L135+0x21c>)
 8009740:	edd3 7a00 	vldr	s15, [r3]
 8009744:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800990c <v_L135+0x228>
 8009748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800974c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009750:	d4eb      	bmi.n	800972a <v_L135+0x46>
 8009752:	e014      	b.n	800977e <v_L135+0x9a>
	}else{
		while(dist_l < VVV_OFFSET_B && dist_r < VVV_OFFSET_B);
 8009754:	bf00      	nop
 8009756:	4b6b      	ldr	r3, [pc, #428]	; (8009904 <v_L135+0x220>)
 8009758:	edd3 7a00 	vldr	s15, [r3]
 800975c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8009910 <v_L135+0x22c>
 8009760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009768:	d509      	bpl.n	800977e <v_L135+0x9a>
 800976a:	4b65      	ldr	r3, [pc, #404]	; (8009900 <v_L135+0x21c>)
 800976c:	edd3 7a00 	vldr	s15, [r3]
 8009770:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009910 <v_L135+0x22c>
 8009774:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800977c:	d4eb      	bmi.n	8009756 <v_L135+0x72>
	}
	drive_stop();
 800977e:	f7fb fad1 	bl	8004d24 <drive_stop>
	control_stop();
 8009782:	f7fb fb0b 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8009786:	4a57      	ldr	r2, [pc, #348]	; (80098e4 <v_L135+0x200>)
 8009788:	8813      	ldrh	r3, [r2, #0]
 800978a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800978e:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = VVV_DEGACCEL;
 8009790:	4b60      	ldr	r3, [pc, #384]	; (8009914 <v_L135+0x230>)
 8009792:	4a61      	ldr	r2, [pc, #388]	; (8009918 <v_L135+0x234>)
 8009794:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8009796:	4b61      	ldr	r3, [pc, #388]	; (800991c <v_L135+0x238>)
 8009798:	f04f 0200 	mov.w	r2, #0
 800979c:	601a      	str	r2, [r3, #0]
	omega_max = VVV_OMEGA;
 800979e:	4b60      	ldr	r3, [pc, #384]	; (8009920 <v_L135+0x23c>)
 80097a0:	4a60      	ldr	r2, [pc, #384]	; (8009924 <v_L135+0x240>)
 80097a2:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 80097a4:	4b60      	ldr	r3, [pc, #384]	; (8009928 <v_L135+0x244>)
 80097a6:	4a54      	ldr	r2, [pc, #336]	; (80098f8 <v_L135+0x214>)
 80097a8:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 80097aa:	4a4e      	ldr	r2, [pc, #312]	; (80098e4 <v_L135+0x200>)
 80097ac:	8813      	ldrh	r3, [r2, #0]
 80097ae:	f043 0302 	orr.w	r3, r3, #2
 80097b2:	8013      	strh	r3, [r2, #0]
//	while(degree_z < target_degree_z+25);
	while(degree_z < target_degree_z+VVV_DEG);
 80097b4:	bf00      	nop
 80097b6:	4b5d      	ldr	r3, [pc, #372]	; (800992c <v_L135+0x248>)
 80097b8:	edd3 7a00 	vldr	s15, [r3]
 80097bc:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80097c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097c4:	4b5a      	ldr	r3, [pc, #360]	; (8009930 <v_L135+0x24c>)
 80097c6:	edd3 7a00 	vldr	s15, [r3]
 80097ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80097ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097d2:	dcf0      	bgt.n	80097b6 <v_L135+0xd2>

	target_degaccel_z = 0;
 80097d4:	4b4f      	ldr	r3, [pc, #316]	; (8009914 <v_L135+0x230>)
 80097d6:	f04f 0200 	mov.w	r2, #0
 80097da:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+120);
	while(degree_z < target_degree_z+(135-VVV_DEG+2));
 80097dc:	bf00      	nop
 80097de:	4b53      	ldr	r3, [pc, #332]	; (800992c <v_L135+0x248>)
 80097e0:	edd3 7a00 	vldr	s15, [r3]
 80097e4:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8009934 <v_L135+0x250>
 80097e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097ec:	4b50      	ldr	r3, [pc, #320]	; (8009930 <v_L135+0x24c>)
 80097ee:	edd3 7a00 	vldr	s15, [r3]
 80097f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80097f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097fa:	dcf0      	bgt.n	80097de <v_L135+0xfa>

	target_degaccel_z = -VVV_DEGACCEL;
 80097fc:	4b45      	ldr	r3, [pc, #276]	; (8009914 <v_L135+0x230>)
 80097fe:	4a4e      	ldr	r2, [pc, #312]	; (8009938 <v_L135+0x254>)
 8009800:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+135);
 8009802:	bf00      	nop
 8009804:	4b49      	ldr	r3, [pc, #292]	; (800992c <v_L135+0x248>)
 8009806:	edd3 7a00 	vldr	s15, [r3]
 800980a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800993c <v_L135+0x258>
 800980e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009812:	4b47      	ldr	r3, [pc, #284]	; (8009930 <v_L135+0x24c>)
 8009814:	edd3 7a00 	vldr	s15, [r3]
 8009818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800981c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009820:	dcf0      	bgt.n	8009804 <v_L135+0x120>
	turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009822:	2103      	movs	r1, #3
 8009824:	20fd      	movs	r0, #253	; 0xfd
 8009826:	f007 fc1f 	bl	8011068 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 800982a:	4b37      	ldr	r3, [pc, #220]	; (8009908 <v_L135+0x224>)
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	3301      	adds	r3, #1
 8009830:	2b00      	cmp	r3, #0
 8009832:	f003 0301 	and.w	r3, r3, #1
 8009836:	bfb8      	it	lt
 8009838:	425b      	neglt	r3, r3
 800983a:	b2da      	uxtb	r2, r3
 800983c:	4b32      	ldr	r3, [pc, #200]	; (8009908 <v_L135+0x224>)
 800983e:	701a      	strb	r2, [r3, #0]
//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8009840:	4a28      	ldr	r2, [pc, #160]	; (80098e4 <v_L135+0x200>)
 8009842:	8813      	ldrh	r3, [r2, #0]
 8009844:	f36f 334d 	bfc	r3, #13, #1
 8009848:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800984a:	4b27      	ldr	r3, [pc, #156]	; (80098e8 <v_L135+0x204>)
 800984c:	4a27      	ldr	r2, [pc, #156]	; (80098ec <v_L135+0x208>)
 800984e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8009850:	4b27      	ldr	r3, [pc, #156]	; (80098f0 <v_L135+0x20c>)
 8009852:	4a26      	ldr	r2, [pc, #152]	; (80098ec <v_L135+0x208>)
 8009854:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8009856:	4b27      	ldr	r3, [pc, #156]	; (80098f4 <v_L135+0x210>)
 8009858:	4a27      	ldr	r2, [pc, #156]	; (80098f8 <v_L135+0x214>)
 800985a:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 800985c:	4b27      	ldr	r3, [pc, #156]	; (80098fc <v_L135+0x218>)
 800985e:	4a26      	ldr	r2, [pc, #152]	; (80098f8 <v_L135+0x214>)
 8009860:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8009862:	f04f 0300 	mov.w	r3, #0
 8009866:	4a26      	ldr	r2, [pc, #152]	; (8009900 <v_L135+0x21c>)
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	4a26      	ldr	r2, [pc, #152]	; (8009904 <v_L135+0x220>)
 800986c:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 800986e:	4a1d      	ldr	r2, [pc, #116]	; (80098e4 <v_L135+0x200>)
 8009870:	8813      	ldrh	r3, [r2, #0]
 8009872:	f043 0304 	orr.w	r3, r3, #4
 8009876:	8013      	strh	r3, [r2, #0]
	control_start();
 8009878:	f7fb fa7c 	bl	8004d74 <control_start>
	if(v_flag == 0){
 800987c:	4b22      	ldr	r3, [pc, #136]	; (8009908 <v_L135+0x224>)
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d116      	bne.n	80098b2 <v_L135+0x1ce>
		while(dist_l < VVV_OFFSET_F && dist_r < VVV_OFFSET_F);
 8009884:	bf00      	nop
 8009886:	4b1f      	ldr	r3, [pc, #124]	; (8009904 <v_L135+0x220>)
 8009888:	edd3 7a00 	vldr	s15, [r3]
 800988c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800990c <v_L135+0x228>
 8009890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009898:	d400      	bmi.n	800989c <v_L135+0x1b8>
	}else{
		while(dist_l < VVV_OFFSET_B && dist_r < VVV_OFFSET_B);
	}
}
 800989a:	e020      	b.n	80098de <v_L135+0x1fa>
		while(dist_l < VVV_OFFSET_F && dist_r < VVV_OFFSET_F);
 800989c:	4b18      	ldr	r3, [pc, #96]	; (8009900 <v_L135+0x21c>)
 800989e:	edd3 7a00 	vldr	s15, [r3]
 80098a2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800990c <v_L135+0x228>
 80098a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ae:	d4ea      	bmi.n	8009886 <v_L135+0x1a2>
}
 80098b0:	e015      	b.n	80098de <v_L135+0x1fa>
		while(dist_l < VVV_OFFSET_B && dist_r < VVV_OFFSET_B);
 80098b2:	bf00      	nop
 80098b4:	4b13      	ldr	r3, [pc, #76]	; (8009904 <v_L135+0x220>)
 80098b6:	edd3 7a00 	vldr	s15, [r3]
 80098ba:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8009910 <v_L135+0x22c>
 80098be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098c6:	d400      	bmi.n	80098ca <v_L135+0x1e6>
}
 80098c8:	e009      	b.n	80098de <v_L135+0x1fa>
		while(dist_l < VVV_OFFSET_B && dist_r < VVV_OFFSET_B);
 80098ca:	4b0d      	ldr	r3, [pc, #52]	; (8009900 <v_L135+0x21c>)
 80098cc:	edd3 7a00 	vldr	s15, [r3]
 80098d0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8009910 <v_L135+0x22c>
 80098d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098dc:	d4ea      	bmi.n	80098b4 <v_L135+0x1d0>
}
 80098de:	bf00      	nop
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	20000fac 	.word	0x20000fac
 80098e8:	20000da0 	.word	0x20000da0
 80098ec:	461c4000 	.word	0x461c4000
 80098f0:	20000b20 	.word	0x20000b20
 80098f4:	200007b4 	.word	0x200007b4
 80098f8:	43c80000 	.word	0x43c80000
 80098fc:	200001dc 	.word	0x200001dc
 8009900:	20000b2c 	.word	0x20000b2c
 8009904:	200012e8 	.word	0x200012e8
 8009908:	20000b28 	.word	0x20000b28
 800990c:	428c0000 	.word	0x428c0000
 8009910:	42680000 	.word	0x42680000
 8009914:	20000b98 	.word	0x20000b98
 8009918:	453b8000 	.word	0x453b8000
 800991c:	200001e0 	.word	0x200001e0
 8009920:	20000b24 	.word	0x20000b24
 8009924:	43960000 	.word	0x43960000
 8009928:	20000b34 	.word	0x20000b34
 800992c:	20000c40 	.word	0x20000c40
 8009930:	20000b9c 	.word	0x20000b9c
 8009934:	42f40000 	.word	0x42f40000
 8009938:	c53b8000 	.word	0xc53b8000
 800993c:	43070000 	.word	0x43070000

08009940 <v_R135D>:
//v_R135D
// 区画中心から右に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135D(void){
 8009940:	b580      	push	{r7, lr}
 8009942:	af00      	add	r7, sp, #0

	full_led_write(YELLOW);
 8009944:	2006      	movs	r0, #6
 8009946:	f009 f95f 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 800994a:	4a80      	ldr	r2, [pc, #512]	; (8009b4c <v_R135D+0x20c>)
 800994c:	8813      	ldrh	r3, [r2, #0]
 800994e:	f36f 2308 	bfc	r3, #8, #1
 8009952:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8009954:	4b7e      	ldr	r3, [pc, #504]	; (8009b50 <v_R135D+0x210>)
 8009956:	4a7f      	ldr	r2, [pc, #508]	; (8009b54 <v_R135D+0x214>)
 8009958:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800995a:	4b7f      	ldr	r3, [pc, #508]	; (8009b58 <v_R135D+0x218>)
 800995c:	4a7d      	ldr	r2, [pc, #500]	; (8009b54 <v_R135D+0x214>)
 800995e:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8009960:	4b7e      	ldr	r3, [pc, #504]	; (8009b5c <v_R135D+0x21c>)
 8009962:	4a7f      	ldr	r2, [pc, #508]	; (8009b60 <v_R135D+0x220>)
 8009964:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8009966:	4b7f      	ldr	r3, [pc, #508]	; (8009b64 <v_R135D+0x224>)
 8009968:	4a7d      	ldr	r2, [pc, #500]	; (8009b60 <v_R135D+0x220>)
 800996a:	601a      	str	r2, [r3, #0]

	control_start();
 800996c:	f7fb fa02 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8009970:	f04f 0300 	mov.w	r3, #0
 8009974:	4a7c      	ldr	r2, [pc, #496]	; (8009b68 <v_R135D+0x228>)
 8009976:	6013      	str	r3, [r2, #0]
 8009978:	4a7c      	ldr	r2, [pc, #496]	; (8009b6c <v_R135D+0x22c>)
 800997a:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 800997c:	4b7c      	ldr	r3, [pc, #496]	; (8009b70 <v_R135D+0x230>)
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d115      	bne.n	80099b0 <v_R135D+0x70>
		while(dist_l < VVV_OFFSET_F && dist_r < VVV_OFFSET_F);
 8009984:	bf00      	nop
 8009986:	4b79      	ldr	r3, [pc, #484]	; (8009b6c <v_R135D+0x22c>)
 8009988:	edd3 7a00 	vldr	s15, [r3]
 800998c:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8009b74 <v_R135D+0x234>
 8009990:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009998:	d51f      	bpl.n	80099da <v_R135D+0x9a>
 800999a:	4b73      	ldr	r3, [pc, #460]	; (8009b68 <v_R135D+0x228>)
 800999c:	edd3 7a00 	vldr	s15, [r3]
 80099a0:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8009b74 <v_R135D+0x234>
 80099a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ac:	d4eb      	bmi.n	8009986 <v_R135D+0x46>
 80099ae:	e014      	b.n	80099da <v_R135D+0x9a>
	}else{
		while(dist_l < VVV_OFFSET_B && dist_r < VVV_OFFSET_B);
 80099b0:	bf00      	nop
 80099b2:	4b6e      	ldr	r3, [pc, #440]	; (8009b6c <v_R135D+0x22c>)
 80099b4:	edd3 7a00 	vldr	s15, [r3]
 80099b8:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8009b78 <v_R135D+0x238>
 80099bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099c4:	d509      	bpl.n	80099da <v_R135D+0x9a>
 80099c6:	4b68      	ldr	r3, [pc, #416]	; (8009b68 <v_R135D+0x228>)
 80099c8:	edd3 7a00 	vldr	s15, [r3]
 80099cc:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8009b78 <v_R135D+0x238>
 80099d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099d8:	d4eb      	bmi.n	80099b2 <v_R135D+0x72>
	}
	drive_stop();
 80099da:	f7fb f9a3 	bl	8004d24 <drive_stop>
	control_stop();
 80099de:	f7fb f9dd 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 80099e2:	4a5a      	ldr	r2, [pc, #360]	; (8009b4c <v_R135D+0x20c>)
 80099e4:	8813      	ldrh	r3, [r2, #0]
 80099e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80099ea:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -VVV_DEGACCEL;
 80099ec:	4b63      	ldr	r3, [pc, #396]	; (8009b7c <v_R135D+0x23c>)
 80099ee:	4a64      	ldr	r2, [pc, #400]	; (8009b80 <v_R135D+0x240>)
 80099f0:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 80099f2:	4b64      	ldr	r3, [pc, #400]	; (8009b84 <v_R135D+0x244>)
 80099f4:	f04f 0200 	mov.w	r2, #0
 80099f8:	601a      	str	r2, [r3, #0]
	omega_min = -VVV_OMEGA;
 80099fa:	4b63      	ldr	r3, [pc, #396]	; (8009b88 <v_R135D+0x248>)
 80099fc:	4a63      	ldr	r2, [pc, #396]	; (8009b8c <v_R135D+0x24c>)
 80099fe:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8009a00:	4b63      	ldr	r3, [pc, #396]	; (8009b90 <v_R135D+0x250>)
 8009a02:	4a57      	ldr	r2, [pc, #348]	; (8009b60 <v_R135D+0x220>)
 8009a04:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8009a06:	4a51      	ldr	r2, [pc, #324]	; (8009b4c <v_R135D+0x20c>)
 8009a08:	8813      	ldrh	r3, [r2, #0]
 8009a0a:	f043 0302 	orr.w	r3, r3, #2
 8009a0e:	8013      	strh	r3, [r2, #0]
//	while(degree_z > target_degree_z-25);
	while(degree_z > target_degree_z-VVV_DEG);
 8009a10:	bf00      	nop
 8009a12:	4b60      	ldr	r3, [pc, #384]	; (8009b94 <v_R135D+0x254>)
 8009a14:	edd3 7a00 	vldr	s15, [r3]
 8009a18:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8009a1c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009a20:	4b5d      	ldr	r3, [pc, #372]	; (8009b98 <v_R135D+0x258>)
 8009a22:	edd3 7a00 	vldr	s15, [r3]
 8009a26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a2e:	d4f0      	bmi.n	8009a12 <v_R135D+0xd2>

	target_degaccel_z = 0;
 8009a30:	4b52      	ldr	r3, [pc, #328]	; (8009b7c <v_R135D+0x23c>)
 8009a32:	f04f 0200 	mov.w	r2, #0
 8009a36:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-120);
	while(degree_z > target_degree_z-(135-VVV_DEG+2));
 8009a38:	bf00      	nop
 8009a3a:	4b56      	ldr	r3, [pc, #344]	; (8009b94 <v_R135D+0x254>)
 8009a3c:	edd3 7a00 	vldr	s15, [r3]
 8009a40:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8009b9c <v_R135D+0x25c>
 8009a44:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009a48:	4b53      	ldr	r3, [pc, #332]	; (8009b98 <v_R135D+0x258>)
 8009a4a:	edd3 7a00 	vldr	s15, [r3]
 8009a4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a56:	d4f0      	bmi.n	8009a3a <v_R135D+0xfa>

	target_degaccel_z = VVV_DEGACCEL;
 8009a58:	4b48      	ldr	r3, [pc, #288]	; (8009b7c <v_R135D+0x23c>)
 8009a5a:	4a51      	ldr	r2, [pc, #324]	; (8009ba0 <v_R135D+0x260>)
 8009a5c:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-135);
 8009a5e:	bf00      	nop
 8009a60:	4b4c      	ldr	r3, [pc, #304]	; (8009b94 <v_R135D+0x254>)
 8009a62:	edd3 7a00 	vldr	s15, [r3]
 8009a66:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8009ba4 <v_R135D+0x264>
 8009a6a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009a6e:	4b4a      	ldr	r3, [pc, #296]	; (8009b98 <v_R135D+0x258>)
 8009a70:	edd3 7a00 	vldr	s15, [r3]
 8009a74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a7c:	d4f0      	bmi.n	8009a60 <v_R135D+0x120>
	turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009a7e:	2103      	movs	r1, #3
 8009a80:	2003      	movs	r0, #3
 8009a82:	f007 faf1 	bl	8011068 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 8009a86:	4b3a      	ldr	r3, [pc, #232]	; (8009b70 <v_R135D+0x230>)
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	bfb8      	it	lt
 8009a94:	425b      	neglt	r3, r3
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	4b35      	ldr	r3, [pc, #212]	; (8009b70 <v_R135D+0x230>)
 8009a9a:	701a      	strb	r2, [r3, #0]
//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8009a9c:	4a2b      	ldr	r2, [pc, #172]	; (8009b4c <v_R135D+0x20c>)
 8009a9e:	8813      	ldrh	r3, [r2, #0]
 8009aa0:	f36f 334d 	bfc	r3, #13, #1
 8009aa4:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8009aa6:	4b2a      	ldr	r3, [pc, #168]	; (8009b50 <v_R135D+0x210>)
 8009aa8:	4a2a      	ldr	r2, [pc, #168]	; (8009b54 <v_R135D+0x214>)
 8009aaa:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8009aac:	4b2a      	ldr	r3, [pc, #168]	; (8009b58 <v_R135D+0x218>)
 8009aae:	4a29      	ldr	r2, [pc, #164]	; (8009b54 <v_R135D+0x214>)
 8009ab0:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8009ab2:	4b2a      	ldr	r3, [pc, #168]	; (8009b5c <v_R135D+0x21c>)
 8009ab4:	4a2a      	ldr	r2, [pc, #168]	; (8009b60 <v_R135D+0x220>)
 8009ab6:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8009ab8:	4b2a      	ldr	r3, [pc, #168]	; (8009b64 <v_R135D+0x224>)
 8009aba:	4a29      	ldr	r2, [pc, #164]	; (8009b60 <v_R135D+0x220>)
 8009abc:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8009abe:	f04f 0300 	mov.w	r3, #0
 8009ac2:	4a29      	ldr	r2, [pc, #164]	; (8009b68 <v_R135D+0x228>)
 8009ac4:	6013      	str	r3, [r2, #0]
 8009ac6:	4a29      	ldr	r2, [pc, #164]	; (8009b6c <v_R135D+0x22c>)
 8009ac8:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8009aca:	4a20      	ldr	r2, [pc, #128]	; (8009b4c <v_R135D+0x20c>)
 8009acc:	8813      	ldrh	r3, [r2, #0]
 8009ace:	f043 0304 	orr.w	r3, r3, #4
 8009ad2:	8013      	strh	r3, [r2, #0]
	control_start();
 8009ad4:	f7fb f94e 	bl	8004d74 <control_start>
	if(v_flag == 0){
 8009ad8:	4b25      	ldr	r3, [pc, #148]	; (8009b70 <v_R135D+0x230>)
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d115      	bne.n	8009b0c <v_R135D+0x1cc>
		while(dist_l < VVV_OFFSET_F-10 && dist_r < VVV_OFFSET_F-10);
 8009ae0:	bf00      	nop
 8009ae2:	4b22      	ldr	r3, [pc, #136]	; (8009b6c <v_R135D+0x22c>)
 8009ae4:	edd3 7a00 	vldr	s15, [r3]
 8009ae8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009ba8 <v_R135D+0x268>
 8009aec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009af4:	d51f      	bpl.n	8009b36 <v_R135D+0x1f6>
 8009af6:	4b1c      	ldr	r3, [pc, #112]	; (8009b68 <v_R135D+0x228>)
 8009af8:	edd3 7a00 	vldr	s15, [r3]
 8009afc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8009ba8 <v_R135D+0x268>
 8009b00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b08:	d4eb      	bmi.n	8009ae2 <v_R135D+0x1a2>
 8009b0a:	e014      	b.n	8009b36 <v_R135D+0x1f6>
	}else{
		while(dist_l < VVV_OFFSET_B-10 && dist_r < VVV_OFFSET_B-10);
 8009b0c:	bf00      	nop
 8009b0e:	4b17      	ldr	r3, [pc, #92]	; (8009b6c <v_R135D+0x22c>)
 8009b10:	edd3 7a00 	vldr	s15, [r3]
 8009b14:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8009bac <v_R135D+0x26c>
 8009b18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b20:	d509      	bpl.n	8009b36 <v_R135D+0x1f6>
 8009b22:	4b11      	ldr	r3, [pc, #68]	; (8009b68 <v_R135D+0x228>)
 8009b24:	edd3 7a00 	vldr	s15, [r3]
 8009b28:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009bac <v_R135D+0x26c>
 8009b2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b34:	d4eb      	bmi.n	8009b0e <v_R135D+0x1ce>
	}

	control_start();
 8009b36:	f7fb f91d 	bl	8004d74 <control_start>
	driveD(-10000, SPEED_MIN, SPEED_RUN, 10);
 8009b3a:	230a      	movs	r3, #10
 8009b3c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009b40:	2132      	movs	r1, #50	; 0x32
 8009b42:	481b      	ldr	r0, [pc, #108]	; (8009bb0 <v_R135D+0x270>)
 8009b44:	f7fb fa48 	bl	8004fd8 <driveD>
	speed_max_r = SPEED_RUN;
	dist_l = dist_r = 0;
	MF.FLAG.SPD = 1;
	control_start();
	while(dist_l < 35 && dist_r < 35);
*/}
 8009b48:	bf00      	nop
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	20000fac 	.word	0x20000fac
 8009b50:	20000da0 	.word	0x20000da0
 8009b54:	461c4000 	.word	0x461c4000
 8009b58:	20000b20 	.word	0x20000b20
 8009b5c:	200007b4 	.word	0x200007b4
 8009b60:	43c80000 	.word	0x43c80000
 8009b64:	200001dc 	.word	0x200001dc
 8009b68:	20000b2c 	.word	0x20000b2c
 8009b6c:	200012e8 	.word	0x200012e8
 8009b70:	20000b28 	.word	0x20000b28
 8009b74:	428c0000 	.word	0x428c0000
 8009b78:	42680000 	.word	0x42680000
 8009b7c:	20000b98 	.word	0x20000b98
 8009b80:	c53b8000 	.word	0xc53b8000
 8009b84:	200001e0 	.word	0x200001e0
 8009b88:	200002f0 	.word	0x200002f0
 8009b8c:	c3960000 	.word	0xc3960000
 8009b90:	20000b34 	.word	0x20000b34
 8009b94:	20000c40 	.word	0x20000c40
 8009b98:	20000b9c 	.word	0x20000b9c
 8009b9c:	42f40000 	.word	0x42f40000
 8009ba0:	453b8000 	.word	0x453b8000
 8009ba4:	43070000 	.word	0x43070000
 8009ba8:	42700000 	.word	0x42700000
 8009bac:	42400000 	.word	0x42400000
 8009bb0:	ffffd8f0 	.word	0xffffd8f0

08009bb4 <v_L135D>:
//v_L135D
// 区画中心から左に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135D(void){
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	af00      	add	r7, sp, #0

	full_led_write(PURPLE);
 8009bb8:	2005      	movs	r0, #5
 8009bba:	f009 f825 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 8009bbe:	4a80      	ldr	r2, [pc, #512]	; (8009dc0 <v_L135D+0x20c>)
 8009bc0:	8813      	ldrh	r3, [r2, #0]
 8009bc2:	f36f 2308 	bfc	r3, #8, #1
 8009bc6:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8009bc8:	4b7e      	ldr	r3, [pc, #504]	; (8009dc4 <v_L135D+0x210>)
 8009bca:	4a7f      	ldr	r2, [pc, #508]	; (8009dc8 <v_L135D+0x214>)
 8009bcc:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8009bce:	4b7f      	ldr	r3, [pc, #508]	; (8009dcc <v_L135D+0x218>)
 8009bd0:	4a7d      	ldr	r2, [pc, #500]	; (8009dc8 <v_L135D+0x214>)
 8009bd2:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8009bd4:	4b7e      	ldr	r3, [pc, #504]	; (8009dd0 <v_L135D+0x21c>)
 8009bd6:	4a7f      	ldr	r2, [pc, #508]	; (8009dd4 <v_L135D+0x220>)
 8009bd8:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8009bda:	4b7f      	ldr	r3, [pc, #508]	; (8009dd8 <v_L135D+0x224>)
 8009bdc:	4a7d      	ldr	r2, [pc, #500]	; (8009dd4 <v_L135D+0x220>)
 8009bde:	601a      	str	r2, [r3, #0]

	control_start();
 8009be0:	f7fb f8c8 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8009be4:	f04f 0300 	mov.w	r3, #0
 8009be8:	4a7c      	ldr	r2, [pc, #496]	; (8009ddc <v_L135D+0x228>)
 8009bea:	6013      	str	r3, [r2, #0]
 8009bec:	4a7c      	ldr	r2, [pc, #496]	; (8009de0 <v_L135D+0x22c>)
 8009bee:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 8009bf0:	4b7c      	ldr	r3, [pc, #496]	; (8009de4 <v_L135D+0x230>)
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d115      	bne.n	8009c24 <v_L135D+0x70>
		while(dist_l < VVV_OFFSET_F && dist_r < VVV_OFFSET_F);
 8009bf8:	bf00      	nop
 8009bfa:	4b79      	ldr	r3, [pc, #484]	; (8009de0 <v_L135D+0x22c>)
 8009bfc:	edd3 7a00 	vldr	s15, [r3]
 8009c00:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8009de8 <v_L135D+0x234>
 8009c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c0c:	d51f      	bpl.n	8009c4e <v_L135D+0x9a>
 8009c0e:	4b73      	ldr	r3, [pc, #460]	; (8009ddc <v_L135D+0x228>)
 8009c10:	edd3 7a00 	vldr	s15, [r3]
 8009c14:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8009de8 <v_L135D+0x234>
 8009c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c20:	d4eb      	bmi.n	8009bfa <v_L135D+0x46>
 8009c22:	e014      	b.n	8009c4e <v_L135D+0x9a>
	}else{
		while(dist_l < VVV_OFFSET_B && dist_r < VVV_OFFSET_B);
 8009c24:	bf00      	nop
 8009c26:	4b6e      	ldr	r3, [pc, #440]	; (8009de0 <v_L135D+0x22c>)
 8009c28:	edd3 7a00 	vldr	s15, [r3]
 8009c2c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8009dec <v_L135D+0x238>
 8009c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c38:	d509      	bpl.n	8009c4e <v_L135D+0x9a>
 8009c3a:	4b68      	ldr	r3, [pc, #416]	; (8009ddc <v_L135D+0x228>)
 8009c3c:	edd3 7a00 	vldr	s15, [r3]
 8009c40:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8009dec <v_L135D+0x238>
 8009c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4c:	d4eb      	bmi.n	8009c26 <v_L135D+0x72>
	}
	drive_stop();
 8009c4e:	f7fb f869 	bl	8004d24 <drive_stop>
	control_stop();
 8009c52:	f7fb f8a3 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8009c56:	4a5a      	ldr	r2, [pc, #360]	; (8009dc0 <v_L135D+0x20c>)
 8009c58:	8813      	ldrh	r3, [r2, #0]
 8009c5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009c5e:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = VVV_DEGACCEL;
 8009c60:	4b63      	ldr	r3, [pc, #396]	; (8009df0 <v_L135D+0x23c>)
 8009c62:	4a64      	ldr	r2, [pc, #400]	; (8009df4 <v_L135D+0x240>)
 8009c64:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8009c66:	4b64      	ldr	r3, [pc, #400]	; (8009df8 <v_L135D+0x244>)
 8009c68:	f04f 0200 	mov.w	r2, #0
 8009c6c:	601a      	str	r2, [r3, #0]
	omega_max = VVV_OMEGA;
 8009c6e:	4b63      	ldr	r3, [pc, #396]	; (8009dfc <v_L135D+0x248>)
 8009c70:	4a63      	ldr	r2, [pc, #396]	; (8009e00 <v_L135D+0x24c>)
 8009c72:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_RUN;
 8009c74:	4b63      	ldr	r3, [pc, #396]	; (8009e04 <v_L135D+0x250>)
 8009c76:	4a57      	ldr	r2, [pc, #348]	; (8009dd4 <v_L135D+0x220>)
 8009c78:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8009c7a:	4a51      	ldr	r2, [pc, #324]	; (8009dc0 <v_L135D+0x20c>)
 8009c7c:	8813      	ldrh	r3, [r2, #0]
 8009c7e:	f043 0302 	orr.w	r3, r3, #2
 8009c82:	8013      	strh	r3, [r2, #0]
//	while(degree_z < target_degree_z+25);
	while(degree_z < target_degree_z+VVV_DEG);
 8009c84:	bf00      	nop
 8009c86:	4b60      	ldr	r3, [pc, #384]	; (8009e08 <v_L135D+0x254>)
 8009c88:	edd3 7a00 	vldr	s15, [r3]
 8009c8c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8009c90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c94:	4b5d      	ldr	r3, [pc, #372]	; (8009e0c <v_L135D+0x258>)
 8009c96:	edd3 7a00 	vldr	s15, [r3]
 8009c9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ca2:	dcf0      	bgt.n	8009c86 <v_L135D+0xd2>

	target_degaccel_z = 0;
 8009ca4:	4b52      	ldr	r3, [pc, #328]	; (8009df0 <v_L135D+0x23c>)
 8009ca6:	f04f 0200 	mov.w	r2, #0
 8009caa:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+120);
	while(degree_z < target_degree_z+(135-VVV_DEG+2));
 8009cac:	bf00      	nop
 8009cae:	4b56      	ldr	r3, [pc, #344]	; (8009e08 <v_L135D+0x254>)
 8009cb0:	edd3 7a00 	vldr	s15, [r3]
 8009cb4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8009e10 <v_L135D+0x25c>
 8009cb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cbc:	4b53      	ldr	r3, [pc, #332]	; (8009e0c <v_L135D+0x258>)
 8009cbe:	edd3 7a00 	vldr	s15, [r3]
 8009cc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cca:	dcf0      	bgt.n	8009cae <v_L135D+0xfa>

	target_degaccel_z = -VVV_DEGACCEL;
 8009ccc:	4b48      	ldr	r3, [pc, #288]	; (8009df0 <v_L135D+0x23c>)
 8009cce:	4a51      	ldr	r2, [pc, #324]	; (8009e14 <v_L135D+0x260>)
 8009cd0:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+135);
 8009cd2:	bf00      	nop
 8009cd4:	4b4c      	ldr	r3, [pc, #304]	; (8009e08 <v_L135D+0x254>)
 8009cd6:	edd3 7a00 	vldr	s15, [r3]
 8009cda:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8009e18 <v_L135D+0x264>
 8009cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ce2:	4b4a      	ldr	r3, [pc, #296]	; (8009e0c <v_L135D+0x258>)
 8009ce4:	edd3 7a00 	vldr	s15, [r3]
 8009ce8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cf0:	dcf0      	bgt.n	8009cd4 <v_L135D+0x120>
	turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009cf2:	2103      	movs	r1, #3
 8009cf4:	20fd      	movs	r0, #253	; 0xfd
 8009cf6:	f007 f9b7 	bl	8011068 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 8009cfa:	4b3a      	ldr	r3, [pc, #232]	; (8009de4 <v_L135D+0x230>)
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f003 0301 	and.w	r3, r3, #1
 8009d06:	bfb8      	it	lt
 8009d08:	425b      	neglt	r3, r3
 8009d0a:	b2da      	uxtb	r2, r3
 8009d0c:	4b35      	ldr	r3, [pc, #212]	; (8009de4 <v_L135D+0x230>)
 8009d0e:	701a      	strb	r2, [r3, #0]
//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8009d10:	4a2b      	ldr	r2, [pc, #172]	; (8009dc0 <v_L135D+0x20c>)
 8009d12:	8813      	ldrh	r3, [r2, #0]
 8009d14:	f36f 334d 	bfc	r3, #13, #1
 8009d18:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8009d1a:	4b2a      	ldr	r3, [pc, #168]	; (8009dc4 <v_L135D+0x210>)
 8009d1c:	4a2a      	ldr	r2, [pc, #168]	; (8009dc8 <v_L135D+0x214>)
 8009d1e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8009d20:	4b2a      	ldr	r3, [pc, #168]	; (8009dcc <v_L135D+0x218>)
 8009d22:	4a29      	ldr	r2, [pc, #164]	; (8009dc8 <v_L135D+0x214>)
 8009d24:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_RUN;
 8009d26:	4b2a      	ldr	r3, [pc, #168]	; (8009dd0 <v_L135D+0x21c>)
 8009d28:	4a2a      	ldr	r2, [pc, #168]	; (8009dd4 <v_L135D+0x220>)
 8009d2a:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_RUN;
 8009d2c:	4b2a      	ldr	r3, [pc, #168]	; (8009dd8 <v_L135D+0x224>)
 8009d2e:	4a29      	ldr	r2, [pc, #164]	; (8009dd4 <v_L135D+0x220>)
 8009d30:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8009d32:	f04f 0300 	mov.w	r3, #0
 8009d36:	4a29      	ldr	r2, [pc, #164]	; (8009ddc <v_L135D+0x228>)
 8009d38:	6013      	str	r3, [r2, #0]
 8009d3a:	4a29      	ldr	r2, [pc, #164]	; (8009de0 <v_L135D+0x22c>)
 8009d3c:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8009d3e:	4a20      	ldr	r2, [pc, #128]	; (8009dc0 <v_L135D+0x20c>)
 8009d40:	8813      	ldrh	r3, [r2, #0]
 8009d42:	f043 0304 	orr.w	r3, r3, #4
 8009d46:	8013      	strh	r3, [r2, #0]
	control_start();
 8009d48:	f7fb f814 	bl	8004d74 <control_start>
	if(v_flag == 0){
 8009d4c:	4b25      	ldr	r3, [pc, #148]	; (8009de4 <v_L135D+0x230>)
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d115      	bne.n	8009d80 <v_L135D+0x1cc>
		while(dist_l < VVV_OFFSET_F-10 && dist_r < VVV_OFFSET_F-10);
 8009d54:	bf00      	nop
 8009d56:	4b22      	ldr	r3, [pc, #136]	; (8009de0 <v_L135D+0x22c>)
 8009d58:	edd3 7a00 	vldr	s15, [r3]
 8009d5c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009e1c <v_L135D+0x268>
 8009d60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d68:	d51f      	bpl.n	8009daa <v_L135D+0x1f6>
 8009d6a:	4b1c      	ldr	r3, [pc, #112]	; (8009ddc <v_L135D+0x228>)
 8009d6c:	edd3 7a00 	vldr	s15, [r3]
 8009d70:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8009e1c <v_L135D+0x268>
 8009d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d7c:	d4eb      	bmi.n	8009d56 <v_L135D+0x1a2>
 8009d7e:	e014      	b.n	8009daa <v_L135D+0x1f6>
	}else{
		while(dist_l < VVV_OFFSET_B-10 && dist_r < VVV_OFFSET_B-10);
 8009d80:	bf00      	nop
 8009d82:	4b17      	ldr	r3, [pc, #92]	; (8009de0 <v_L135D+0x22c>)
 8009d84:	edd3 7a00 	vldr	s15, [r3]
 8009d88:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8009e20 <v_L135D+0x26c>
 8009d8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d94:	d509      	bpl.n	8009daa <v_L135D+0x1f6>
 8009d96:	4b11      	ldr	r3, [pc, #68]	; (8009ddc <v_L135D+0x228>)
 8009d98:	edd3 7a00 	vldr	s15, [r3]
 8009d9c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009e20 <v_L135D+0x26c>
 8009da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009da8:	d4eb      	bmi.n	8009d82 <v_L135D+0x1ce>
	}

	control_start();
 8009daa:	f7fa ffe3 	bl	8004d74 <control_start>
	driveD(-10000, SPEED_MIN, SPEED_RUN, 10);
 8009dae:	230a      	movs	r3, #10
 8009db0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009db4:	2132      	movs	r1, #50	; 0x32
 8009db6:	481b      	ldr	r0, [pc, #108]	; (8009e24 <v_L135D+0x270>)
 8009db8:	f7fb f90e 	bl	8004fd8 <driveD>
	speed_max_r = SPEED_RUN;
	dist_l = dist_r = 0;
	MF.FLAG.SPD = 1;
	control_start();
	while(dist_l < 35 && dist_r < 35);
*/}
 8009dbc:	bf00      	nop
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	20000fac 	.word	0x20000fac
 8009dc4:	20000da0 	.word	0x20000da0
 8009dc8:	461c4000 	.word	0x461c4000
 8009dcc:	20000b20 	.word	0x20000b20
 8009dd0:	200007b4 	.word	0x200007b4
 8009dd4:	43c80000 	.word	0x43c80000
 8009dd8:	200001dc 	.word	0x200001dc
 8009ddc:	20000b2c 	.word	0x20000b2c
 8009de0:	200012e8 	.word	0x200012e8
 8009de4:	20000b28 	.word	0x20000b28
 8009de8:	428c0000 	.word	0x428c0000
 8009dec:	42680000 	.word	0x42680000
 8009df0:	20000b98 	.word	0x20000b98
 8009df4:	453b8000 	.word	0x453b8000
 8009df8:	200001e0 	.word	0x200001e0
 8009dfc:	20000b24 	.word	0x20000b24
 8009e00:	43960000 	.word	0x43960000
 8009e04:	20000b34 	.word	0x20000b34
 8009e08:	20000c40 	.word	0x20000c40
 8009e0c:	20000b9c 	.word	0x20000b9c
 8009e10:	42f40000 	.word	0x42f40000
 8009e14:	c53b8000 	.word	0xc53b8000
 8009e18:	43070000 	.word	0x43070000
 8009e1c:	42700000 	.word	0x42700000
 8009e20:	42400000 	.word	0x42400000
 8009e24:	ffffd8f0 	.word	0xffffd8f0

08009e28 <v_R1352>:
//v_R1352
// 区画中心から右に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R1352(void){
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	af00      	add	r7, sp, #0

	full_led_write(YELLOW);
 8009e2c:	2006      	movs	r0, #6
 8009e2e:	f008 feeb 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 8009e32:	4a7d      	ldr	r2, [pc, #500]	; (800a028 <v_R1352+0x200>)
 8009e34:	8813      	ldrh	r3, [r2, #0]
 8009e36:	f36f 2308 	bfc	r3, #8, #1
 8009e3a:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8009e3c:	4b7b      	ldr	r3, [pc, #492]	; (800a02c <v_R1352+0x204>)
 8009e3e:	4a7c      	ldr	r2, [pc, #496]	; (800a030 <v_R1352+0x208>)
 8009e40:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8009e42:	4b7c      	ldr	r3, [pc, #496]	; (800a034 <v_R1352+0x20c>)
 8009e44:	4a7a      	ldr	r2, [pc, #488]	; (800a030 <v_R1352+0x208>)
 8009e46:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8009e48:	4b7b      	ldr	r3, [pc, #492]	; (800a038 <v_R1352+0x210>)
 8009e4a:	4a7c      	ldr	r2, [pc, #496]	; (800a03c <v_R1352+0x214>)
 8009e4c:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 8009e4e:	4b7c      	ldr	r3, [pc, #496]	; (800a040 <v_R1352+0x218>)
 8009e50:	4a7a      	ldr	r2, [pc, #488]	; (800a03c <v_R1352+0x214>)
 8009e52:	601a      	str	r2, [r3, #0]

	control_start();
 8009e54:	f7fa ff8e 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 8009e58:	f04f 0300 	mov.w	r3, #0
 8009e5c:	4a79      	ldr	r2, [pc, #484]	; (800a044 <v_R1352+0x21c>)
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	4a79      	ldr	r2, [pc, #484]	; (800a048 <v_R1352+0x220>)
 8009e62:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 8009e64:	4b79      	ldr	r3, [pc, #484]	; (800a04c <v_R1352+0x224>)
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d115      	bne.n	8009e98 <v_R1352+0x70>
		while(dist_l < VVV_H_OFFSET_F && dist_r < VVV_H_OFFSET_F);
 8009e6c:	bf00      	nop
 8009e6e:	4b76      	ldr	r3, [pc, #472]	; (800a048 <v_R1352+0x220>)
 8009e70:	edd3 7a00 	vldr	s15, [r3]
 8009e74:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800a050 <v_R1352+0x228>
 8009e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e80:	d51f      	bpl.n	8009ec2 <v_R1352+0x9a>
 8009e82:	4b70      	ldr	r3, [pc, #448]	; (800a044 <v_R1352+0x21c>)
 8009e84:	edd3 7a00 	vldr	s15, [r3]
 8009e88:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800a050 <v_R1352+0x228>
 8009e8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e94:	d4eb      	bmi.n	8009e6e <v_R1352+0x46>
 8009e96:	e014      	b.n	8009ec2 <v_R1352+0x9a>
	}else{
		while(dist_l < VVV_H_OFFSET_B && dist_r < VVV_H_OFFSET_B);
 8009e98:	bf00      	nop
 8009e9a:	4b6b      	ldr	r3, [pc, #428]	; (800a048 <v_R1352+0x220>)
 8009e9c:	edd3 7a00 	vldr	s15, [r3]
 8009ea0:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800a054 <v_R1352+0x22c>
 8009ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eac:	d509      	bpl.n	8009ec2 <v_R1352+0x9a>
 8009eae:	4b65      	ldr	r3, [pc, #404]	; (800a044 <v_R1352+0x21c>)
 8009eb0:	edd3 7a00 	vldr	s15, [r3]
 8009eb4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a054 <v_R1352+0x22c>
 8009eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec0:	d4eb      	bmi.n	8009e9a <v_R1352+0x72>
	}
	drive_stop();
 8009ec2:	f7fa ff2f 	bl	8004d24 <drive_stop>
	control_stop();
 8009ec6:	f7fa ff69 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 8009eca:	4a57      	ldr	r2, [pc, #348]	; (800a028 <v_R1352+0x200>)
 8009ecc:	8813      	ldrh	r3, [r2, #0]
 8009ece:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009ed2:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -VVV_H_DEGACCEL;
 8009ed4:	4b60      	ldr	r3, [pc, #384]	; (800a058 <v_R1352+0x230>)
 8009ed6:	4a61      	ldr	r2, [pc, #388]	; (800a05c <v_R1352+0x234>)
 8009ed8:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 8009eda:	4b61      	ldr	r3, [pc, #388]	; (800a060 <v_R1352+0x238>)
 8009edc:	f04f 0200 	mov.w	r2, #0
 8009ee0:	601a      	str	r2, [r3, #0]
	omega_min = -VVV_H_OMEGA;
 8009ee2:	4b60      	ldr	r3, [pc, #384]	; (800a064 <v_R1352+0x23c>)
 8009ee4:	4a60      	ldr	r2, [pc, #384]	; (800a068 <v_R1352+0x240>)
 8009ee6:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 8009ee8:	4b60      	ldr	r3, [pc, #384]	; (800a06c <v_R1352+0x244>)
 8009eea:	4a54      	ldr	r2, [pc, #336]	; (800a03c <v_R1352+0x214>)
 8009eec:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 8009eee:	4a4e      	ldr	r2, [pc, #312]	; (800a028 <v_R1352+0x200>)
 8009ef0:	8813      	ldrh	r3, [r2, #0]
 8009ef2:	f043 0302 	orr.w	r3, r3, #2
 8009ef6:	8013      	strh	r3, [r2, #0]
//	while(degree_z > target_degree_z-25);
	while(degree_z > target_degree_z-VVV_H_DEG);
 8009ef8:	bf00      	nop
 8009efa:	4b5d      	ldr	r3, [pc, #372]	; (800a070 <v_R1352+0x248>)
 8009efc:	edd3 7a00 	vldr	s15, [r3]
 8009f00:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800a074 <v_R1352+0x24c>
 8009f04:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009f08:	4b5b      	ldr	r3, [pc, #364]	; (800a078 <v_R1352+0x250>)
 8009f0a:	edd3 7a00 	vldr	s15, [r3]
 8009f0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f16:	d4f0      	bmi.n	8009efa <v_R1352+0xd2>

	target_degaccel_z = 0;
 8009f18:	4b4f      	ldr	r3, [pc, #316]	; (800a058 <v_R1352+0x230>)
 8009f1a:	f04f 0200 	mov.w	r2, #0
 8009f1e:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-120);
	while(degree_z > target_degree_z-(135-VVV_H_DEG+2));
 8009f20:	bf00      	nop
 8009f22:	4b53      	ldr	r3, [pc, #332]	; (800a070 <v_R1352+0x248>)
 8009f24:	edd3 7a00 	vldr	s15, [r3]
 8009f28:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800a07c <v_R1352+0x254>
 8009f2c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009f30:	4b51      	ldr	r3, [pc, #324]	; (800a078 <v_R1352+0x250>)
 8009f32:	edd3 7a00 	vldr	s15, [r3]
 8009f36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f3e:	d4f0      	bmi.n	8009f22 <v_R1352+0xfa>

	target_degaccel_z = VVV_H_DEGACCEL;
 8009f40:	4b45      	ldr	r3, [pc, #276]	; (800a058 <v_R1352+0x230>)
 8009f42:	4a4f      	ldr	r2, [pc, #316]	; (800a080 <v_R1352+0x258>)
 8009f44:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-135);
 8009f46:	bf00      	nop
 8009f48:	4b49      	ldr	r3, [pc, #292]	; (800a070 <v_R1352+0x248>)
 8009f4a:	edd3 7a00 	vldr	s15, [r3]
 8009f4e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800a084 <v_R1352+0x25c>
 8009f52:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009f56:	4b48      	ldr	r3, [pc, #288]	; (800a078 <v_R1352+0x250>)
 8009f58:	edd3 7a00 	vldr	s15, [r3]
 8009f5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f64:	d4f0      	bmi.n	8009f48 <v_R1352+0x120>
	turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 8009f66:	2103      	movs	r1, #3
 8009f68:	2003      	movs	r0, #3
 8009f6a:	f007 f87d 	bl	8011068 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 8009f6e:	4b37      	ldr	r3, [pc, #220]	; (800a04c <v_R1352+0x224>)
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	3301      	adds	r3, #1
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	bfb8      	it	lt
 8009f7c:	425b      	neglt	r3, r3
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	4b32      	ldr	r3, [pc, #200]	; (800a04c <v_R1352+0x224>)
 8009f82:	701a      	strb	r2, [r3, #0]
//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 8009f84:	4a28      	ldr	r2, [pc, #160]	; (800a028 <v_R1352+0x200>)
 8009f86:	8813      	ldrh	r3, [r2, #0]
 8009f88:	f36f 334d 	bfc	r3, #13, #1
 8009f8c:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 8009f8e:	4b27      	ldr	r3, [pc, #156]	; (800a02c <v_R1352+0x204>)
 8009f90:	4a27      	ldr	r2, [pc, #156]	; (800a030 <v_R1352+0x208>)
 8009f92:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 8009f94:	4b27      	ldr	r3, [pc, #156]	; (800a034 <v_R1352+0x20c>)
 8009f96:	4a26      	ldr	r2, [pc, #152]	; (800a030 <v_R1352+0x208>)
 8009f98:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 8009f9a:	4b27      	ldr	r3, [pc, #156]	; (800a038 <v_R1352+0x210>)
 8009f9c:	4a27      	ldr	r2, [pc, #156]	; (800a03c <v_R1352+0x214>)
 8009f9e:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 8009fa0:	4b27      	ldr	r3, [pc, #156]	; (800a040 <v_R1352+0x218>)
 8009fa2:	4a26      	ldr	r2, [pc, #152]	; (800a03c <v_R1352+0x214>)
 8009fa4:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 8009fa6:	f04f 0300 	mov.w	r3, #0
 8009faa:	4a26      	ldr	r2, [pc, #152]	; (800a044 <v_R1352+0x21c>)
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	4a26      	ldr	r2, [pc, #152]	; (800a048 <v_R1352+0x220>)
 8009fb0:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 8009fb2:	4a1d      	ldr	r2, [pc, #116]	; (800a028 <v_R1352+0x200>)
 8009fb4:	8813      	ldrh	r3, [r2, #0]
 8009fb6:	f043 0304 	orr.w	r3, r3, #4
 8009fba:	8013      	strh	r3, [r2, #0]
	control_start();
 8009fbc:	f7fa feda 	bl	8004d74 <control_start>
	if(v_flag == 0){
 8009fc0:	4b22      	ldr	r3, [pc, #136]	; (800a04c <v_R1352+0x224>)
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d116      	bne.n	8009ff6 <v_R1352+0x1ce>
		while(dist_l < VVV_H_OFFSET_F && dist_r < VVV_H_OFFSET_F);
 8009fc8:	bf00      	nop
 8009fca:	4b1f      	ldr	r3, [pc, #124]	; (800a048 <v_R1352+0x220>)
 8009fcc:	edd3 7a00 	vldr	s15, [r3]
 8009fd0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800a050 <v_R1352+0x228>
 8009fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fdc:	d400      	bmi.n	8009fe0 <v_R1352+0x1b8>
	}else{
		while(dist_l < VVV_H_OFFSET_B && dist_r < VVV_H_OFFSET_B);
	}
}
 8009fde:	e020      	b.n	800a022 <v_R1352+0x1fa>
		while(dist_l < VVV_H_OFFSET_F && dist_r < VVV_H_OFFSET_F);
 8009fe0:	4b18      	ldr	r3, [pc, #96]	; (800a044 <v_R1352+0x21c>)
 8009fe2:	edd3 7a00 	vldr	s15, [r3]
 8009fe6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800a050 <v_R1352+0x228>
 8009fea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ff2:	d4ea      	bmi.n	8009fca <v_R1352+0x1a2>
}
 8009ff4:	e015      	b.n	800a022 <v_R1352+0x1fa>
		while(dist_l < VVV_H_OFFSET_B && dist_r < VVV_H_OFFSET_B);
 8009ff6:	bf00      	nop
 8009ff8:	4b13      	ldr	r3, [pc, #76]	; (800a048 <v_R1352+0x220>)
 8009ffa:	edd3 7a00 	vldr	s15, [r3]
 8009ffe:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800a054 <v_R1352+0x22c>
 800a002:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a00a:	d400      	bmi.n	800a00e <v_R1352+0x1e6>
}
 800a00c:	e009      	b.n	800a022 <v_R1352+0x1fa>
		while(dist_l < VVV_H_OFFSET_B && dist_r < VVV_H_OFFSET_B);
 800a00e:	4b0d      	ldr	r3, [pc, #52]	; (800a044 <v_R1352+0x21c>)
 800a010:	edd3 7a00 	vldr	s15, [r3]
 800a014:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800a054 <v_R1352+0x22c>
 800a018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a020:	d4ea      	bmi.n	8009ff8 <v_R1352+0x1d0>
}
 800a022:	bf00      	nop
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	20000fac 	.word	0x20000fac
 800a02c:	20000da0 	.word	0x20000da0
 800a030:	461c4000 	.word	0x461c4000
 800a034:	20000b20 	.word	0x20000b20
 800a038:	200007b4 	.word	0x200007b4
 800a03c:	44480000 	.word	0x44480000
 800a040:	200001dc 	.word	0x200001dc
 800a044:	20000b2c 	.word	0x20000b2c
 800a048:	200012e8 	.word	0x200012e8
 800a04c:	20000b28 	.word	0x20000b28
 800a050:	42f00000 	.word	0x42f00000
 800a054:	428c0000 	.word	0x428c0000
 800a058:	20000b98 	.word	0x20000b98
 800a05c:	c5fa0000 	.word	0xc5fa0000
 800a060:	200001e0 	.word	0x200001e0
 800a064:	200002f0 	.word	0x200002f0
 800a068:	c4480000 	.word	0xc4480000
 800a06c:	20000b34 	.word	0x20000b34
 800a070:	20000c40 	.word	0x20000c40
 800a074:	42200000 	.word	0x42200000
 800a078:	20000b9c 	.word	0x20000b9c
 800a07c:	42c20000 	.word	0x42c20000
 800a080:	45fa0000 	.word	0x45fa0000
 800a084:	43070000 	.word	0x43070000

0800a088 <v_L1352>:
//v_L1352
// 区画中心から左に135度回転する　ゴール用
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L1352(void){
 800a088:	b580      	push	{r7, lr}
 800a08a:	af00      	add	r7, sp, #0

	full_led_write(PURPLE);
 800a08c:	2005      	movs	r0, #5
 800a08e:	f008 fdbb 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 800a092:	4a7d      	ldr	r2, [pc, #500]	; (800a288 <v_L1352+0x200>)
 800a094:	8813      	ldrh	r3, [r2, #0]
 800a096:	f36f 2308 	bfc	r3, #8, #1
 800a09a:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800a09c:	4b7b      	ldr	r3, [pc, #492]	; (800a28c <v_L1352+0x204>)
 800a09e:	4a7c      	ldr	r2, [pc, #496]	; (800a290 <v_L1352+0x208>)
 800a0a0:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800a0a2:	4b7c      	ldr	r3, [pc, #496]	; (800a294 <v_L1352+0x20c>)
 800a0a4:	4a7a      	ldr	r2, [pc, #488]	; (800a290 <v_L1352+0x208>)
 800a0a6:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 800a0a8:	4b7b      	ldr	r3, [pc, #492]	; (800a298 <v_L1352+0x210>)
 800a0aa:	4a7c      	ldr	r2, [pc, #496]	; (800a29c <v_L1352+0x214>)
 800a0ac:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 800a0ae:	4b7c      	ldr	r3, [pc, #496]	; (800a2a0 <v_L1352+0x218>)
 800a0b0:	4a7a      	ldr	r2, [pc, #488]	; (800a29c <v_L1352+0x214>)
 800a0b2:	601a      	str	r2, [r3, #0]

	control_start();
 800a0b4:	f7fa fe5e 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 800a0b8:	f04f 0300 	mov.w	r3, #0
 800a0bc:	4a79      	ldr	r2, [pc, #484]	; (800a2a4 <v_L1352+0x21c>)
 800a0be:	6013      	str	r3, [r2, #0]
 800a0c0:	4a79      	ldr	r2, [pc, #484]	; (800a2a8 <v_L1352+0x220>)
 800a0c2:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 800a0c4:	4b79      	ldr	r3, [pc, #484]	; (800a2ac <v_L1352+0x224>)
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d115      	bne.n	800a0f8 <v_L1352+0x70>
		while(dist_l < VVV_H_OFFSET_F && dist_r < VVV_H_OFFSET_F);
 800a0cc:	bf00      	nop
 800a0ce:	4b76      	ldr	r3, [pc, #472]	; (800a2a8 <v_L1352+0x220>)
 800a0d0:	edd3 7a00 	vldr	s15, [r3]
 800a0d4:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800a2b0 <v_L1352+0x228>
 800a0d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e0:	d51f      	bpl.n	800a122 <v_L1352+0x9a>
 800a0e2:	4b70      	ldr	r3, [pc, #448]	; (800a2a4 <v_L1352+0x21c>)
 800a0e4:	edd3 7a00 	vldr	s15, [r3]
 800a0e8:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800a2b0 <v_L1352+0x228>
 800a0ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0f4:	d4eb      	bmi.n	800a0ce <v_L1352+0x46>
 800a0f6:	e014      	b.n	800a122 <v_L1352+0x9a>
	}else{
		while(dist_l < VVV_H_OFFSET_B && dist_r < VVV_H_OFFSET_B);
 800a0f8:	bf00      	nop
 800a0fa:	4b6b      	ldr	r3, [pc, #428]	; (800a2a8 <v_L1352+0x220>)
 800a0fc:	edd3 7a00 	vldr	s15, [r3]
 800a100:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800a2b4 <v_L1352+0x22c>
 800a104:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a10c:	d509      	bpl.n	800a122 <v_L1352+0x9a>
 800a10e:	4b65      	ldr	r3, [pc, #404]	; (800a2a4 <v_L1352+0x21c>)
 800a110:	edd3 7a00 	vldr	s15, [r3]
 800a114:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a2b4 <v_L1352+0x22c>
 800a118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a120:	d4eb      	bmi.n	800a0fa <v_L1352+0x72>
	}
	drive_stop();
 800a122:	f7fa fdff 	bl	8004d24 <drive_stop>
	control_stop();
 800a126:	f7fa fe39 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 800a12a:	4a57      	ldr	r2, [pc, #348]	; (800a288 <v_L1352+0x200>)
 800a12c:	8813      	ldrh	r3, [r2, #0]
 800a12e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a132:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = VVV_H_DEGACCEL;
 800a134:	4b60      	ldr	r3, [pc, #384]	; (800a2b8 <v_L1352+0x230>)
 800a136:	4a61      	ldr	r2, [pc, #388]	; (800a2bc <v_L1352+0x234>)
 800a138:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 800a13a:	4b61      	ldr	r3, [pc, #388]	; (800a2c0 <v_L1352+0x238>)
 800a13c:	f04f 0200 	mov.w	r2, #0
 800a140:	601a      	str	r2, [r3, #0]
	omega_max = VVV_H_OMEGA;
 800a142:	4b60      	ldr	r3, [pc, #384]	; (800a2c4 <v_L1352+0x23c>)
 800a144:	4a55      	ldr	r2, [pc, #340]	; (800a29c <v_L1352+0x214>)
 800a146:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 800a148:	4b5f      	ldr	r3, [pc, #380]	; (800a2c8 <v_L1352+0x240>)
 800a14a:	4a54      	ldr	r2, [pc, #336]	; (800a29c <v_L1352+0x214>)
 800a14c:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 800a14e:	4a4e      	ldr	r2, [pc, #312]	; (800a288 <v_L1352+0x200>)
 800a150:	8813      	ldrh	r3, [r2, #0]
 800a152:	f043 0302 	orr.w	r3, r3, #2
 800a156:	8013      	strh	r3, [r2, #0]
//	while(degree_z < target_degree_z+25);
	while(degree_z < target_degree_z+VVV_H_DEG);
 800a158:	bf00      	nop
 800a15a:	4b5c      	ldr	r3, [pc, #368]	; (800a2cc <v_L1352+0x244>)
 800a15c:	edd3 7a00 	vldr	s15, [r3]
 800a160:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800a2d0 <v_L1352+0x248>
 800a164:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a168:	4b5a      	ldr	r3, [pc, #360]	; (800a2d4 <v_L1352+0x24c>)
 800a16a:	edd3 7a00 	vldr	s15, [r3]
 800a16e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a176:	dcf0      	bgt.n	800a15a <v_L1352+0xd2>

	target_degaccel_z = 0;
 800a178:	4b4f      	ldr	r3, [pc, #316]	; (800a2b8 <v_L1352+0x230>)
 800a17a:	f04f 0200 	mov.w	r2, #0
 800a17e:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+120);
	while(degree_z < target_degree_z+(135-VVV_H_DEG+2));
 800a180:	bf00      	nop
 800a182:	4b52      	ldr	r3, [pc, #328]	; (800a2cc <v_L1352+0x244>)
 800a184:	edd3 7a00 	vldr	s15, [r3]
 800a188:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800a2d8 <v_L1352+0x250>
 800a18c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a190:	4b50      	ldr	r3, [pc, #320]	; (800a2d4 <v_L1352+0x24c>)
 800a192:	edd3 7a00 	vldr	s15, [r3]
 800a196:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a19e:	dcf0      	bgt.n	800a182 <v_L1352+0xfa>

	target_degaccel_z = -VVV_DEGACCEL;
 800a1a0:	4b45      	ldr	r3, [pc, #276]	; (800a2b8 <v_L1352+0x230>)
 800a1a2:	4a4e      	ldr	r2, [pc, #312]	; (800a2dc <v_L1352+0x254>)
 800a1a4:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+135);
 800a1a6:	bf00      	nop
 800a1a8:	4b48      	ldr	r3, [pc, #288]	; (800a2cc <v_L1352+0x244>)
 800a1aa:	edd3 7a00 	vldr	s15, [r3]
 800a1ae:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800a2e0 <v_L1352+0x258>
 800a1b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1b6:	4b47      	ldr	r3, [pc, #284]	; (800a2d4 <v_L1352+0x24c>)
 800a1b8:	edd3 7a00 	vldr	s15, [r3]
 800a1bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1c4:	dcf0      	bgt.n	800a1a8 <v_L1352+0x120>
	turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800a1c6:	2103      	movs	r1, #3
 800a1c8:	20fd      	movs	r0, #253	; 0xfd
 800a1ca:	f006 ff4d 	bl	8011068 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 800a1ce:	4b37      	ldr	r3, [pc, #220]	; (800a2ac <v_L1352+0x224>)
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	bfb8      	it	lt
 800a1dc:	425b      	neglt	r3, r3
 800a1de:	b2da      	uxtb	r2, r3
 800a1e0:	4b32      	ldr	r3, [pc, #200]	; (800a2ac <v_L1352+0x224>)
 800a1e2:	701a      	strb	r2, [r3, #0]
//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 800a1e4:	4a28      	ldr	r2, [pc, #160]	; (800a288 <v_L1352+0x200>)
 800a1e6:	8813      	ldrh	r3, [r2, #0]
 800a1e8:	f36f 334d 	bfc	r3, #13, #1
 800a1ec:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800a1ee:	4b27      	ldr	r3, [pc, #156]	; (800a28c <v_L1352+0x204>)
 800a1f0:	4a27      	ldr	r2, [pc, #156]	; (800a290 <v_L1352+0x208>)
 800a1f2:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800a1f4:	4b27      	ldr	r3, [pc, #156]	; (800a294 <v_L1352+0x20c>)
 800a1f6:	4a26      	ldr	r2, [pc, #152]	; (800a290 <v_L1352+0x208>)
 800a1f8:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 800a1fa:	4b27      	ldr	r3, [pc, #156]	; (800a298 <v_L1352+0x210>)
 800a1fc:	4a27      	ldr	r2, [pc, #156]	; (800a29c <v_L1352+0x214>)
 800a1fe:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 800a200:	4b27      	ldr	r3, [pc, #156]	; (800a2a0 <v_L1352+0x218>)
 800a202:	4a26      	ldr	r2, [pc, #152]	; (800a29c <v_L1352+0x214>)
 800a204:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 800a206:	f04f 0300 	mov.w	r3, #0
 800a20a:	4a26      	ldr	r2, [pc, #152]	; (800a2a4 <v_L1352+0x21c>)
 800a20c:	6013      	str	r3, [r2, #0]
 800a20e:	4a26      	ldr	r2, [pc, #152]	; (800a2a8 <v_L1352+0x220>)
 800a210:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 800a212:	4a1d      	ldr	r2, [pc, #116]	; (800a288 <v_L1352+0x200>)
 800a214:	8813      	ldrh	r3, [r2, #0]
 800a216:	f043 0304 	orr.w	r3, r3, #4
 800a21a:	8013      	strh	r3, [r2, #0]
	control_start();
 800a21c:	f7fa fdaa 	bl	8004d74 <control_start>
	if(v_flag == 0){
 800a220:	4b22      	ldr	r3, [pc, #136]	; (800a2ac <v_L1352+0x224>)
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d116      	bne.n	800a256 <v_L1352+0x1ce>
		while(dist_l < VVV_H_OFFSET_F && dist_r < VVV_H_OFFSET_F);
 800a228:	bf00      	nop
 800a22a:	4b1f      	ldr	r3, [pc, #124]	; (800a2a8 <v_L1352+0x220>)
 800a22c:	edd3 7a00 	vldr	s15, [r3]
 800a230:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800a2b0 <v_L1352+0x228>
 800a234:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a23c:	d400      	bmi.n	800a240 <v_L1352+0x1b8>
	}else{
		while(dist_l < VVV_H_OFFSET_B && dist_r < VVV_H_OFFSET_B);
	}
}
 800a23e:	e020      	b.n	800a282 <v_L1352+0x1fa>
		while(dist_l < VVV_H_OFFSET_F && dist_r < VVV_H_OFFSET_F);
 800a240:	4b18      	ldr	r3, [pc, #96]	; (800a2a4 <v_L1352+0x21c>)
 800a242:	edd3 7a00 	vldr	s15, [r3]
 800a246:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800a2b0 <v_L1352+0x228>
 800a24a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a252:	d4ea      	bmi.n	800a22a <v_L1352+0x1a2>
}
 800a254:	e015      	b.n	800a282 <v_L1352+0x1fa>
		while(dist_l < VVV_H_OFFSET_B && dist_r < VVV_H_OFFSET_B);
 800a256:	bf00      	nop
 800a258:	4b13      	ldr	r3, [pc, #76]	; (800a2a8 <v_L1352+0x220>)
 800a25a:	edd3 7a00 	vldr	s15, [r3]
 800a25e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800a2b4 <v_L1352+0x22c>
 800a262:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a26a:	d400      	bmi.n	800a26e <v_L1352+0x1e6>
}
 800a26c:	e009      	b.n	800a282 <v_L1352+0x1fa>
		while(dist_l < VVV_H_OFFSET_B && dist_r < VVV_H_OFFSET_B);
 800a26e:	4b0d      	ldr	r3, [pc, #52]	; (800a2a4 <v_L1352+0x21c>)
 800a270:	edd3 7a00 	vldr	s15, [r3]
 800a274:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800a2b4 <v_L1352+0x22c>
 800a278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a280:	d4ea      	bmi.n	800a258 <v_L1352+0x1d0>
}
 800a282:	bf00      	nop
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	20000fac 	.word	0x20000fac
 800a28c:	20000da0 	.word	0x20000da0
 800a290:	461c4000 	.word	0x461c4000
 800a294:	20000b20 	.word	0x20000b20
 800a298:	200007b4 	.word	0x200007b4
 800a29c:	44480000 	.word	0x44480000
 800a2a0:	200001dc 	.word	0x200001dc
 800a2a4:	20000b2c 	.word	0x20000b2c
 800a2a8:	200012e8 	.word	0x200012e8
 800a2ac:	20000b28 	.word	0x20000b28
 800a2b0:	42f00000 	.word	0x42f00000
 800a2b4:	428c0000 	.word	0x428c0000
 800a2b8:	20000b98 	.word	0x20000b98
 800a2bc:	45fa0000 	.word	0x45fa0000
 800a2c0:	200001e0 	.word	0x200001e0
 800a2c4:	20000b24 	.word	0x20000b24
 800a2c8:	20000b34 	.word	0x20000b34
 800a2cc:	20000c40 	.word	0x20000c40
 800a2d0:	42200000 	.word	0x42200000
 800a2d4:	20000b9c 	.word	0x20000b9c
 800a2d8:	42c20000 	.word	0x42c20000
 800a2dc:	c53b8000 	.word	0xc53b8000
 800a2e0:	43070000 	.word	0x43070000

0800a2e4 <v_R135D2>:
//v_R135D2
// 区画中心から右に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_R135D2(void){
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	af00      	add	r7, sp, #0

	full_led_write(YELLOW);
 800a2e8:	2006      	movs	r0, #6
 800a2ea:	f008 fc8d 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 800a2ee:	4a80      	ldr	r2, [pc, #512]	; (800a4f0 <v_R135D2+0x20c>)
 800a2f0:	8813      	ldrh	r3, [r2, #0]
 800a2f2:	f36f 2308 	bfc	r3, #8, #1
 800a2f6:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800a2f8:	4b7e      	ldr	r3, [pc, #504]	; (800a4f4 <v_R135D2+0x210>)
 800a2fa:	4a7f      	ldr	r2, [pc, #508]	; (800a4f8 <v_R135D2+0x214>)
 800a2fc:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800a2fe:	4b7f      	ldr	r3, [pc, #508]	; (800a4fc <v_R135D2+0x218>)
 800a300:	4a7d      	ldr	r2, [pc, #500]	; (800a4f8 <v_R135D2+0x214>)
 800a302:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 800a304:	4b7e      	ldr	r3, [pc, #504]	; (800a500 <v_R135D2+0x21c>)
 800a306:	4a7f      	ldr	r2, [pc, #508]	; (800a504 <v_R135D2+0x220>)
 800a308:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 800a30a:	4b7f      	ldr	r3, [pc, #508]	; (800a508 <v_R135D2+0x224>)
 800a30c:	4a7d      	ldr	r2, [pc, #500]	; (800a504 <v_R135D2+0x220>)
 800a30e:	601a      	str	r2, [r3, #0]

	control_start();
 800a310:	f7fa fd30 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 800a314:	f04f 0300 	mov.w	r3, #0
 800a318:	4a7c      	ldr	r2, [pc, #496]	; (800a50c <v_R135D2+0x228>)
 800a31a:	6013      	str	r3, [r2, #0]
 800a31c:	4a7c      	ldr	r2, [pc, #496]	; (800a510 <v_R135D2+0x22c>)
 800a31e:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 800a320:	4b7c      	ldr	r3, [pc, #496]	; (800a514 <v_R135D2+0x230>)
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d115      	bne.n	800a354 <v_R135D2+0x70>
		while(dist_l < VVV_H_OFFSET_F && dist_r < VVV_H_OFFSET_F);
 800a328:	bf00      	nop
 800a32a:	4b79      	ldr	r3, [pc, #484]	; (800a510 <v_R135D2+0x22c>)
 800a32c:	edd3 7a00 	vldr	s15, [r3]
 800a330:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800a518 <v_R135D2+0x234>
 800a334:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a33c:	d51f      	bpl.n	800a37e <v_R135D2+0x9a>
 800a33e:	4b73      	ldr	r3, [pc, #460]	; (800a50c <v_R135D2+0x228>)
 800a340:	edd3 7a00 	vldr	s15, [r3]
 800a344:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800a518 <v_R135D2+0x234>
 800a348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a350:	d4eb      	bmi.n	800a32a <v_R135D2+0x46>
 800a352:	e014      	b.n	800a37e <v_R135D2+0x9a>
	}else{
		while(dist_l < VVV_H_OFFSET_B && dist_r < VVV_H_OFFSET_B);
 800a354:	bf00      	nop
 800a356:	4b6e      	ldr	r3, [pc, #440]	; (800a510 <v_R135D2+0x22c>)
 800a358:	edd3 7a00 	vldr	s15, [r3]
 800a35c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800a51c <v_R135D2+0x238>
 800a360:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a368:	d509      	bpl.n	800a37e <v_R135D2+0x9a>
 800a36a:	4b68      	ldr	r3, [pc, #416]	; (800a50c <v_R135D2+0x228>)
 800a36c:	edd3 7a00 	vldr	s15, [r3]
 800a370:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800a51c <v_R135D2+0x238>
 800a374:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a37c:	d4eb      	bmi.n	800a356 <v_R135D2+0x72>
	}
	drive_stop();
 800a37e:	f7fa fcd1 	bl	8004d24 <drive_stop>
	control_stop();
 800a382:	f7fa fd0b 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 800a386:	4a5a      	ldr	r2, [pc, #360]	; (800a4f0 <v_R135D2+0x20c>)
 800a388:	8813      	ldrh	r3, [r2, #0]
 800a38a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a38e:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = -VVV_H_DEGACCEL;
 800a390:	4b63      	ldr	r3, [pc, #396]	; (800a520 <v_R135D2+0x23c>)
 800a392:	4a64      	ldr	r2, [pc, #400]	; (800a524 <v_R135D2+0x240>)
 800a394:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 800a396:	4b64      	ldr	r3, [pc, #400]	; (800a528 <v_R135D2+0x244>)
 800a398:	f04f 0200 	mov.w	r2, #0
 800a39c:	601a      	str	r2, [r3, #0]
	omega_min = -VVV_H_OMEGA;
 800a39e:	4b63      	ldr	r3, [pc, #396]	; (800a52c <v_R135D2+0x248>)
 800a3a0:	4a63      	ldr	r2, [pc, #396]	; (800a530 <v_R135D2+0x24c>)
 800a3a2:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 800a3a4:	4b63      	ldr	r3, [pc, #396]	; (800a534 <v_R135D2+0x250>)
 800a3a6:	4a57      	ldr	r2, [pc, #348]	; (800a504 <v_R135D2+0x220>)
 800a3a8:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 800a3aa:	4a51      	ldr	r2, [pc, #324]	; (800a4f0 <v_R135D2+0x20c>)
 800a3ac:	8813      	ldrh	r3, [r2, #0]
 800a3ae:	f043 0302 	orr.w	r3, r3, #2
 800a3b2:	8013      	strh	r3, [r2, #0]
//	while(degree_z > target_degree_z-25);
	while(degree_z > target_degree_z-VVV_H_DEG);
 800a3b4:	bf00      	nop
 800a3b6:	4b60      	ldr	r3, [pc, #384]	; (800a538 <v_R135D2+0x254>)
 800a3b8:	edd3 7a00 	vldr	s15, [r3]
 800a3bc:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800a53c <v_R135D2+0x258>
 800a3c0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a3c4:	4b5e      	ldr	r3, [pc, #376]	; (800a540 <v_R135D2+0x25c>)
 800a3c6:	edd3 7a00 	vldr	s15, [r3]
 800a3ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3d2:	d4f0      	bmi.n	800a3b6 <v_R135D2+0xd2>

	target_degaccel_z = 0;
 800a3d4:	4b52      	ldr	r3, [pc, #328]	; (800a520 <v_R135D2+0x23c>)
 800a3d6:	f04f 0200 	mov.w	r2, #0
 800a3da:	601a      	str	r2, [r3, #0]

//	while(degree_z > target_degree_z-120);
	while(degree_z > target_degree_z-(135-VVV_H_DEG+2));
 800a3dc:	bf00      	nop
 800a3de:	4b56      	ldr	r3, [pc, #344]	; (800a538 <v_R135D2+0x254>)
 800a3e0:	edd3 7a00 	vldr	s15, [r3]
 800a3e4:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800a544 <v_R135D2+0x260>
 800a3e8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a3ec:	4b54      	ldr	r3, [pc, #336]	; (800a540 <v_R135D2+0x25c>)
 800a3ee:	edd3 7a00 	vldr	s15, [r3]
 800a3f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a3f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3fa:	d4f0      	bmi.n	800a3de <v_R135D2+0xfa>

	target_degaccel_z = VVV_H_DEGACCEL;
 800a3fc:	4b48      	ldr	r3, [pc, #288]	; (800a520 <v_R135D2+0x23c>)
 800a3fe:	4a52      	ldr	r2, [pc, #328]	; (800a548 <v_R135D2+0x264>)
 800a400:	601a      	str	r2, [r3, #0]

	while(degree_z > target_degree_z-135);
 800a402:	bf00      	nop
 800a404:	4b4c      	ldr	r3, [pc, #304]	; (800a538 <v_R135D2+0x254>)
 800a406:	edd3 7a00 	vldr	s15, [r3]
 800a40a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800a54c <v_R135D2+0x268>
 800a40e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a412:	4b4b      	ldr	r3, [pc, #300]	; (800a540 <v_R135D2+0x25c>)
 800a414:	edd3 7a00 	vldr	s15, [r3]
 800a418:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a420:	d4f0      	bmi.n	800a404 <v_R135D2+0x120>
	turn_dir(DIR_TURN_R135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800a422:	2103      	movs	r1, #3
 800a424:	2003      	movs	r0, #3
 800a426:	f006 fe1f 	bl	8011068 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 800a42a:	4b3a      	ldr	r3, [pc, #232]	; (800a514 <v_R135D2+0x230>)
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	3301      	adds	r3, #1
 800a430:	2b00      	cmp	r3, #0
 800a432:	f003 0301 	and.w	r3, r3, #1
 800a436:	bfb8      	it	lt
 800a438:	425b      	neglt	r3, r3
 800a43a:	b2da      	uxtb	r2, r3
 800a43c:	4b35      	ldr	r3, [pc, #212]	; (800a514 <v_R135D2+0x230>)
 800a43e:	701a      	strb	r2, [r3, #0]
//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 800a440:	4a2b      	ldr	r2, [pc, #172]	; (800a4f0 <v_R135D2+0x20c>)
 800a442:	8813      	ldrh	r3, [r2, #0]
 800a444:	f36f 334d 	bfc	r3, #13, #1
 800a448:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800a44a:	4b2a      	ldr	r3, [pc, #168]	; (800a4f4 <v_R135D2+0x210>)
 800a44c:	4a2a      	ldr	r2, [pc, #168]	; (800a4f8 <v_R135D2+0x214>)
 800a44e:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800a450:	4b2a      	ldr	r3, [pc, #168]	; (800a4fc <v_R135D2+0x218>)
 800a452:	4a29      	ldr	r2, [pc, #164]	; (800a4f8 <v_R135D2+0x214>)
 800a454:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 800a456:	4b2a      	ldr	r3, [pc, #168]	; (800a500 <v_R135D2+0x21c>)
 800a458:	4a2a      	ldr	r2, [pc, #168]	; (800a504 <v_R135D2+0x220>)
 800a45a:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 800a45c:	4b2a      	ldr	r3, [pc, #168]	; (800a508 <v_R135D2+0x224>)
 800a45e:	4a29      	ldr	r2, [pc, #164]	; (800a504 <v_R135D2+0x220>)
 800a460:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 800a462:	f04f 0300 	mov.w	r3, #0
 800a466:	4a29      	ldr	r2, [pc, #164]	; (800a50c <v_R135D2+0x228>)
 800a468:	6013      	str	r3, [r2, #0]
 800a46a:	4a29      	ldr	r2, [pc, #164]	; (800a510 <v_R135D2+0x22c>)
 800a46c:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 800a46e:	4a20      	ldr	r2, [pc, #128]	; (800a4f0 <v_R135D2+0x20c>)
 800a470:	8813      	ldrh	r3, [r2, #0]
 800a472:	f043 0304 	orr.w	r3, r3, #4
 800a476:	8013      	strh	r3, [r2, #0]
	control_start();
 800a478:	f7fa fc7c 	bl	8004d74 <control_start>
	if(v_flag == 0){
 800a47c:	4b25      	ldr	r3, [pc, #148]	; (800a514 <v_R135D2+0x230>)
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d115      	bne.n	800a4b0 <v_R135D2+0x1cc>
		while(dist_l < VVV_H_OFFSET_F-10 && dist_r < VVV_H_OFFSET_F-10);
 800a484:	bf00      	nop
 800a486:	4b22      	ldr	r3, [pc, #136]	; (800a510 <v_R135D2+0x22c>)
 800a488:	edd3 7a00 	vldr	s15, [r3]
 800a48c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800a550 <v_R135D2+0x26c>
 800a490:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a498:	d51f      	bpl.n	800a4da <v_R135D2+0x1f6>
 800a49a:	4b1c      	ldr	r3, [pc, #112]	; (800a50c <v_R135D2+0x228>)
 800a49c:	edd3 7a00 	vldr	s15, [r3]
 800a4a0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800a550 <v_R135D2+0x26c>
 800a4a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ac:	d4eb      	bmi.n	800a486 <v_R135D2+0x1a2>
 800a4ae:	e014      	b.n	800a4da <v_R135D2+0x1f6>
	}else{
		while(dist_l < VVV_H_OFFSET_B-10 && dist_r < VVV_H_OFFSET_B-10);
 800a4b0:	bf00      	nop
 800a4b2:	4b17      	ldr	r3, [pc, #92]	; (800a510 <v_R135D2+0x22c>)
 800a4b4:	edd3 7a00 	vldr	s15, [r3]
 800a4b8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a554 <v_R135D2+0x270>
 800a4bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4c4:	d509      	bpl.n	800a4da <v_R135D2+0x1f6>
 800a4c6:	4b11      	ldr	r3, [pc, #68]	; (800a50c <v_R135D2+0x228>)
 800a4c8:	edd3 7a00 	vldr	s15, [r3]
 800a4cc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800a554 <v_R135D2+0x270>
 800a4d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4d8:	d4eb      	bmi.n	800a4b2 <v_R135D2+0x1ce>
	}

	control_start();
 800a4da:	f7fa fc4b 	bl	8004d74 <control_start>
	driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
 800a4de:	230a      	movs	r3, #10
 800a4e0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a4e4:	2132      	movs	r1, #50	; 0x32
 800a4e6:	481c      	ldr	r0, [pc, #112]	; (800a558 <v_R135D2+0x274>)
 800a4e8:	f7fa fd76 	bl	8004fd8 <driveD>
	speed_max_r = SPEED_RUN;
	dist_l = dist_r = 0;
	MF.FLAG.SPD = 1;
	control_start();
	while(dist_l < 35 && dist_r < 35);
*/}
 800a4ec:	bf00      	nop
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	20000fac 	.word	0x20000fac
 800a4f4:	20000da0 	.word	0x20000da0
 800a4f8:	461c4000 	.word	0x461c4000
 800a4fc:	20000b20 	.word	0x20000b20
 800a500:	200007b4 	.word	0x200007b4
 800a504:	44480000 	.word	0x44480000
 800a508:	200001dc 	.word	0x200001dc
 800a50c:	20000b2c 	.word	0x20000b2c
 800a510:	200012e8 	.word	0x200012e8
 800a514:	20000b28 	.word	0x20000b28
 800a518:	42f00000 	.word	0x42f00000
 800a51c:	428c0000 	.word	0x428c0000
 800a520:	20000b98 	.word	0x20000b98
 800a524:	c5fa0000 	.word	0xc5fa0000
 800a528:	200001e0 	.word	0x200001e0
 800a52c:	200002f0 	.word	0x200002f0
 800a530:	c4480000 	.word	0xc4480000
 800a534:	20000b34 	.word	0x20000b34
 800a538:	20000c40 	.word	0x20000c40
 800a53c:	42200000 	.word	0x42200000
 800a540:	20000b9c 	.word	0x20000b9c
 800a544:	42c20000 	.word	0x42c20000
 800a548:	45fa0000 	.word	0x45fa0000
 800a54c:	43070000 	.word	0x43070000
 800a550:	42dc0000 	.word	0x42dc0000
 800a554:	42700000 	.word	0x42700000
 800a558:	ffffd8f0 	.word	0xffffd8f0

0800a55c <v_L135D2>:
//v_L135D2
// 区画中心から左に135度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_L135D2(void){
 800a55c:	b580      	push	{r7, lr}
 800a55e:	af00      	add	r7, sp, #0

	full_led_write(PURPLE);
 800a560:	2005      	movs	r0, #5
 800a562:	f008 fb51 	bl	8012c08 <full_led_write>
	MF.FLAG.GYRO = 0;
 800a566:	4a80      	ldr	r2, [pc, #512]	; (800a768 <v_L135D2+0x20c>)
 800a568:	8813      	ldrh	r3, [r2, #0]
 800a56a:	f36f 2308 	bfc	r3, #8, #1
 800a56e:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800a570:	4b7e      	ldr	r3, [pc, #504]	; (800a76c <v_L135D2+0x210>)
 800a572:	4a7f      	ldr	r2, [pc, #508]	; (800a770 <v_L135D2+0x214>)
 800a574:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800a576:	4b7f      	ldr	r3, [pc, #508]	; (800a774 <v_L135D2+0x218>)
 800a578:	4a7d      	ldr	r2, [pc, #500]	; (800a770 <v_L135D2+0x214>)
 800a57a:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 800a57c:	4b7e      	ldr	r3, [pc, #504]	; (800a778 <v_L135D2+0x21c>)
 800a57e:	4a7f      	ldr	r2, [pc, #508]	; (800a77c <v_L135D2+0x220>)
 800a580:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 800a582:	4b7f      	ldr	r3, [pc, #508]	; (800a780 <v_L135D2+0x224>)
 800a584:	4a7d      	ldr	r2, [pc, #500]	; (800a77c <v_L135D2+0x220>)
 800a586:	601a      	str	r2, [r3, #0]

	control_start();
 800a588:	f7fa fbf4 	bl	8004d74 <control_start>
	dist_l = dist_r = 0;
 800a58c:	f04f 0300 	mov.w	r3, #0
 800a590:	4a7c      	ldr	r2, [pc, #496]	; (800a784 <v_L135D2+0x228>)
 800a592:	6013      	str	r3, [r2, #0]
 800a594:	4a7c      	ldr	r2, [pc, #496]	; (800a788 <v_L135D2+0x22c>)
 800a596:	6013      	str	r3, [r2, #0]
	if(v_flag == 0){
 800a598:	4b7c      	ldr	r3, [pc, #496]	; (800a78c <v_L135D2+0x230>)
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d115      	bne.n	800a5cc <v_L135D2+0x70>
		while(dist_l < VVV_H_OFFSET_F && dist_r < VVV_H_OFFSET_F);
 800a5a0:	bf00      	nop
 800a5a2:	4b79      	ldr	r3, [pc, #484]	; (800a788 <v_L135D2+0x22c>)
 800a5a4:	edd3 7a00 	vldr	s15, [r3]
 800a5a8:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800a790 <v_L135D2+0x234>
 800a5ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b4:	d51f      	bpl.n	800a5f6 <v_L135D2+0x9a>
 800a5b6:	4b73      	ldr	r3, [pc, #460]	; (800a784 <v_L135D2+0x228>)
 800a5b8:	edd3 7a00 	vldr	s15, [r3]
 800a5bc:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800a790 <v_L135D2+0x234>
 800a5c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5c8:	d4eb      	bmi.n	800a5a2 <v_L135D2+0x46>
 800a5ca:	e014      	b.n	800a5f6 <v_L135D2+0x9a>
	}else{
		while(dist_l < VVV_H_OFFSET_B && dist_r < VVV_H_OFFSET_B);
 800a5cc:	bf00      	nop
 800a5ce:	4b6e      	ldr	r3, [pc, #440]	; (800a788 <v_L135D2+0x22c>)
 800a5d0:	edd3 7a00 	vldr	s15, [r3]
 800a5d4:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800a794 <v_L135D2+0x238>
 800a5d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5e0:	d509      	bpl.n	800a5f6 <v_L135D2+0x9a>
 800a5e2:	4b68      	ldr	r3, [pc, #416]	; (800a784 <v_L135D2+0x228>)
 800a5e4:	edd3 7a00 	vldr	s15, [r3]
 800a5e8:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800a794 <v_L135D2+0x238>
 800a5ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f4:	d4eb      	bmi.n	800a5ce <v_L135D2+0x72>
	}
	drive_stop();
 800a5f6:	f7fa fb95 	bl	8004d24 <drive_stop>
	control_stop();
 800a5fa:	f7fa fbcf 	bl	8004d9c <control_stop>

//	MF.FLAG.GYRO = 1;
	MF.FLAG.GYRO2 = 1;
 800a5fe:	4a5a      	ldr	r2, [pc, #360]	; (800a768 <v_L135D2+0x20c>)
 800a600:	8813      	ldrh	r3, [r2, #0]
 800a602:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a606:	8013      	strh	r3, [r2, #0]

	target_degaccel_z = VVV_H_DEGACCEL;
 800a608:	4b63      	ldr	r3, [pc, #396]	; (800a798 <v_L135D2+0x23c>)
 800a60a:	4a64      	ldr	r2, [pc, #400]	; (800a79c <v_L135D2+0x240>)
 800a60c:	601a      	str	r2, [r3, #0]
	target_omega_z = 0;
 800a60e:	4b64      	ldr	r3, [pc, #400]	; (800a7a0 <v_L135D2+0x244>)
 800a610:	f04f 0200 	mov.w	r2, #0
 800a614:	601a      	str	r2, [r3, #0]
	omega_max = VVV_H_OMEGA;
 800a616:	4b63      	ldr	r3, [pc, #396]	; (800a7a4 <v_L135D2+0x248>)
 800a618:	4a58      	ldr	r2, [pc, #352]	; (800a77c <v_L135D2+0x220>)
 800a61a:	601a      	str	r2, [r3, #0]
	speed_G = SPEED_HIGH;
 800a61c:	4b62      	ldr	r3, [pc, #392]	; (800a7a8 <v_L135D2+0x24c>)
 800a61e:	4a57      	ldr	r2, [pc, #348]	; (800a77c <v_L135D2+0x220>)
 800a620:	601a      	str	r2, [r3, #0]

	MF.FLAG.DRV = 1;
 800a622:	4a51      	ldr	r2, [pc, #324]	; (800a768 <v_L135D2+0x20c>)
 800a624:	8813      	ldrh	r3, [r2, #0]
 800a626:	f043 0302 	orr.w	r3, r3, #2
 800a62a:	8013      	strh	r3, [r2, #0]
//	while(degree_z < target_degree_z+25);
	while(degree_z < target_degree_z+VVV_H_DEG);
 800a62c:	bf00      	nop
 800a62e:	4b5f      	ldr	r3, [pc, #380]	; (800a7ac <v_L135D2+0x250>)
 800a630:	edd3 7a00 	vldr	s15, [r3]
 800a634:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800a7b0 <v_L135D2+0x254>
 800a638:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a63c:	4b5d      	ldr	r3, [pc, #372]	; (800a7b4 <v_L135D2+0x258>)
 800a63e:	edd3 7a00 	vldr	s15, [r3]
 800a642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a64a:	dcf0      	bgt.n	800a62e <v_L135D2+0xd2>

	target_degaccel_z = 0;
 800a64c:	4b52      	ldr	r3, [pc, #328]	; (800a798 <v_L135D2+0x23c>)
 800a64e:	f04f 0200 	mov.w	r2, #0
 800a652:	601a      	str	r2, [r3, #0]

//	while(degree_z < target_degree_z+120);
	while(degree_z < target_degree_z+(135-VVV_H_DEG+2));
 800a654:	bf00      	nop
 800a656:	4b55      	ldr	r3, [pc, #340]	; (800a7ac <v_L135D2+0x250>)
 800a658:	edd3 7a00 	vldr	s15, [r3]
 800a65c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800a7b8 <v_L135D2+0x25c>
 800a660:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a664:	4b53      	ldr	r3, [pc, #332]	; (800a7b4 <v_L135D2+0x258>)
 800a666:	edd3 7a00 	vldr	s15, [r3]
 800a66a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a672:	dcf0      	bgt.n	800a656 <v_L135D2+0xfa>

	target_degaccel_z = -VVV_H_DEGACCEL;
 800a674:	4b48      	ldr	r3, [pc, #288]	; (800a798 <v_L135D2+0x23c>)
 800a676:	4a51      	ldr	r2, [pc, #324]	; (800a7bc <v_L135D2+0x260>)
 800a678:	601a      	str	r2, [r3, #0]

	while(degree_z < target_degree_z+135);
 800a67a:	bf00      	nop
 800a67c:	4b4b      	ldr	r3, [pc, #300]	; (800a7ac <v_L135D2+0x250>)
 800a67e:	edd3 7a00 	vldr	s15, [r3]
 800a682:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800a7c0 <v_L135D2+0x264>
 800a686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a68a:	4b4a      	ldr	r3, [pc, #296]	; (800a7b4 <v_L135D2+0x258>)
 800a68c:	edd3 7a00 	vldr	s15, [r3]
 800a690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a698:	dcf0      	bgt.n	800a67c <v_L135D2+0x120>
	turn_dir(DIR_TURN_L135_8, 3);									//aマイクロマウス内部位置情報でも左回転処理
 800a69a:	2103      	movs	r1, #3
 800a69c:	20fd      	movs	r0, #253	; 0xfd
 800a69e:	f006 fce3 	bl	8011068 <turn_dir>

	v_flag = (v_flag + 1) % 2;
 800a6a2:	4b3a      	ldr	r3, [pc, #232]	; (800a78c <v_L135D2+0x230>)
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f003 0301 	and.w	r3, r3, #1
 800a6ae:	bfb8      	it	lt
 800a6b0:	425b      	neglt	r3, r3
 800a6b2:	b2da      	uxtb	r2, r3
 800a6b4:	4b35      	ldr	r3, [pc, #212]	; (800a78c <v_L135D2+0x230>)
 800a6b6:	701a      	strb	r2, [r3, #0]
//	MF.FLAG.GYRO = 0;
	MF.FLAG.GYRO2 = 0;
 800a6b8:	4a2b      	ldr	r2, [pc, #172]	; (800a768 <v_L135D2+0x20c>)
 800a6ba:	8813      	ldrh	r3, [r2, #0]
 800a6bc:	f36f 334d 	bfc	r3, #13, #1
 800a6c0:	8013      	strh	r3, [r2, #0]

	accel_l = 10000;
 800a6c2:	4b2a      	ldr	r3, [pc, #168]	; (800a76c <v_L135D2+0x210>)
 800a6c4:	4a2a      	ldr	r2, [pc, #168]	; (800a770 <v_L135D2+0x214>)
 800a6c6:	601a      	str	r2, [r3, #0]
	accel_r = 10000;
 800a6c8:	4b2a      	ldr	r3, [pc, #168]	; (800a774 <v_L135D2+0x218>)
 800a6ca:	4a29      	ldr	r2, [pc, #164]	; (800a770 <v_L135D2+0x214>)
 800a6cc:	601a      	str	r2, [r3, #0]
	speed_max_l = SPEED_HIGH;
 800a6ce:	4b2a      	ldr	r3, [pc, #168]	; (800a778 <v_L135D2+0x21c>)
 800a6d0:	4a2a      	ldr	r2, [pc, #168]	; (800a77c <v_L135D2+0x220>)
 800a6d2:	601a      	str	r2, [r3, #0]
	speed_max_r = SPEED_HIGH;
 800a6d4:	4b2a      	ldr	r3, [pc, #168]	; (800a780 <v_L135D2+0x224>)
 800a6d6:	4a29      	ldr	r2, [pc, #164]	; (800a77c <v_L135D2+0x220>)
 800a6d8:	601a      	str	r2, [r3, #0]
	dist_l = dist_r = 0;
 800a6da:	f04f 0300 	mov.w	r3, #0
 800a6de:	4a29      	ldr	r2, [pc, #164]	; (800a784 <v_L135D2+0x228>)
 800a6e0:	6013      	str	r3, [r2, #0]
 800a6e2:	4a29      	ldr	r2, [pc, #164]	; (800a788 <v_L135D2+0x22c>)
 800a6e4:	6013      	str	r3, [r2, #0]
	MF.FLAG.SPD = 1;
 800a6e6:	4a20      	ldr	r2, [pc, #128]	; (800a768 <v_L135D2+0x20c>)
 800a6e8:	8813      	ldrh	r3, [r2, #0]
 800a6ea:	f043 0304 	orr.w	r3, r3, #4
 800a6ee:	8013      	strh	r3, [r2, #0]
	control_start();
 800a6f0:	f7fa fb40 	bl	8004d74 <control_start>
	if(v_flag == 0){
 800a6f4:	4b25      	ldr	r3, [pc, #148]	; (800a78c <v_L135D2+0x230>)
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d115      	bne.n	800a728 <v_L135D2+0x1cc>
		while(dist_l < VVV_H_OFFSET_F-10 && dist_r < VVV_H_OFFSET_F-10);
 800a6fc:	bf00      	nop
 800a6fe:	4b22      	ldr	r3, [pc, #136]	; (800a788 <v_L135D2+0x22c>)
 800a700:	edd3 7a00 	vldr	s15, [r3]
 800a704:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a7c4 <v_L135D2+0x268>
 800a708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a710:	d51f      	bpl.n	800a752 <v_L135D2+0x1f6>
 800a712:	4b1c      	ldr	r3, [pc, #112]	; (800a784 <v_L135D2+0x228>)
 800a714:	edd3 7a00 	vldr	s15, [r3]
 800a718:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800a7c4 <v_L135D2+0x268>
 800a71c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a724:	d4eb      	bmi.n	800a6fe <v_L135D2+0x1a2>
 800a726:	e014      	b.n	800a752 <v_L135D2+0x1f6>
	}else{
		while(dist_l < VVV_H_OFFSET_B-10 && dist_r < VVV_H_OFFSET_B-10);
 800a728:	bf00      	nop
 800a72a:	4b17      	ldr	r3, [pc, #92]	; (800a788 <v_L135D2+0x22c>)
 800a72c:	edd3 7a00 	vldr	s15, [r3]
 800a730:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800a7c8 <v_L135D2+0x26c>
 800a734:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a73c:	d509      	bpl.n	800a752 <v_L135D2+0x1f6>
 800a73e:	4b11      	ldr	r3, [pc, #68]	; (800a784 <v_L135D2+0x228>)
 800a740:	edd3 7a00 	vldr	s15, [r3]
 800a744:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800a7c8 <v_L135D2+0x26c>
 800a748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a750:	d4eb      	bmi.n	800a72a <v_L135D2+0x1ce>
	}

	control_start();
 800a752:	f7fa fb0f 	bl	8004d74 <control_start>
	driveD(-10000, SPEED_MIN, SPEED_HIGH, 10);
 800a756:	230a      	movs	r3, #10
 800a758:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a75c:	2132      	movs	r1, #50	; 0x32
 800a75e:	481b      	ldr	r0, [pc, #108]	; (800a7cc <v_L135D2+0x270>)
 800a760:	f7fa fc3a 	bl	8004fd8 <driveD>
	speed_max_r = SPEED_RUN;
	dist_l = dist_r = 0;
	MF.FLAG.SPD = 1;
	control_start();
	while(dist_l < 35 && dist_r < 35);
*/}
 800a764:	bf00      	nop
 800a766:	bd80      	pop	{r7, pc}
 800a768:	20000fac 	.word	0x20000fac
 800a76c:	20000da0 	.word	0x20000da0
 800a770:	461c4000 	.word	0x461c4000
 800a774:	20000b20 	.word	0x20000b20
 800a778:	200007b4 	.word	0x200007b4
 800a77c:	44480000 	.word	0x44480000
 800a780:	200001dc 	.word	0x200001dc
 800a784:	20000b2c 	.word	0x20000b2c
 800a788:	200012e8 	.word	0x200012e8
 800a78c:	20000b28 	.word	0x20000b28
 800a790:	42f00000 	.word	0x42f00000
 800a794:	428c0000 	.word	0x428c0000
 800a798:	20000b98 	.word	0x20000b98
 800a79c:	45fa0000 	.word	0x45fa0000
 800a7a0:	200001e0 	.word	0x200001e0
 800a7a4:	20000b24 	.word	0x20000b24
 800a7a8:	20000b34 	.word	0x20000b34
 800a7ac:	20000c40 	.word	0x20000c40
 800a7b0:	42200000 	.word	0x42200000
 800a7b4:	20000b9c 	.word	0x20000b9c
 800a7b8:	42c20000 	.word	0x42c20000
 800a7bc:	c5fa0000 	.word	0xc5fa0000
 800a7c0:	43070000 	.word	0x43070000
 800a7c4:	42dc0000 	.word	0x42dc0000
 800a7c8:	42700000 	.word	0x42700000
 800a7cc:	ffffd8f0 	.word	0xffffd8f0

0800a7d0 <test_select>:
//test_select
// 走行系テスト選択
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void test_select(void){
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
	int mode = 0;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	607b      	str	r3, [r7, #4]
	printf("Test Select, Mode : %d\n", mode);
 800a7da:	6879      	ldr	r1, [r7, #4]
 800a7dc:	483b      	ldr	r0, [pc, #236]	; (800a8cc <test_select+0xfc>)
 800a7de:	f008 ffa7 	bl	8013730 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	b2d8      	uxtb	r0, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	f003 0302 	and.w	r3, r3, #2
 800a7f4:	b2d9      	uxtb	r1, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	f003 0304 	and.w	r3, r3, #4
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	461a      	mov	r2, r3
 800a802:	f008 f9c7 	bl	8012b94 <led_write>
		  if(dist_r >= 20){
 800a806:	4b32      	ldr	r3, [pc, #200]	; (800a8d0 <test_select+0x100>)
 800a808:	edd3 7a00 	vldr	s15, [r3]
 800a80c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a810:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a818:	db0f      	blt.n	800a83a <test_select+0x6a>
			  mode++;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	3301      	adds	r3, #1
 800a81e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a820:	4b2b      	ldr	r3, [pc, #172]	; (800a8d0 <test_select+0x100>)
 800a822:	f04f 0200 	mov.w	r2, #0
 800a826:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2b07      	cmp	r3, #7
 800a82c:	dd01      	ble.n	800a832 <test_select+0x62>
				  mode = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a832:	6879      	ldr	r1, [r7, #4]
 800a834:	4827      	ldr	r0, [pc, #156]	; (800a8d4 <test_select+0x104>)
 800a836:	f008 ff7b 	bl	8013730 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800a83a:	4b25      	ldr	r3, [pc, #148]	; (800a8d0 <test_select+0x100>)
 800a83c:	edd3 7a00 	vldr	s15, [r3]
 800a840:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a844:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a84c:	d80f      	bhi.n	800a86e <test_select+0x9e>
			  mode--;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	3b01      	subs	r3, #1
 800a852:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800a854:	4b1e      	ldr	r3, [pc, #120]	; (800a8d0 <test_select+0x100>)
 800a856:	f04f 0200 	mov.w	r2, #0
 800a85a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	da01      	bge.n	800a866 <test_select+0x96>
				  mode = 7;
 800a862:	2307      	movs	r3, #7
 800a864:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800a866:	6879      	ldr	r1, [r7, #4]
 800a868:	481a      	ldr	r0, [pc, #104]	; (800a8d4 <test_select+0x104>)
 800a86a:	f008 ff61 	bl	8013730 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a86e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a872:	4819      	ldr	r0, [pc, #100]	; (800a8d8 <test_select+0x108>)
 800a874:	f7f7 fd2e 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1b1      	bne.n	800a7e2 <test_select+0x12>
			  HAL_Delay(50);
 800a87e:	2032      	movs	r0, #50	; 0x32
 800a880:	f7f6 fbcc 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a884:	bf00      	nop
 800a886:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a88a:	4813      	ldr	r0, [pc, #76]	; (800a8d8 <test_select+0x108>)
 800a88c:	f7f7 fd22 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d0f7      	beq.n	800a886 <test_select+0xb6>
			  switch(mode){
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	3b01      	subs	r3, #1
 800a89a:	2b03      	cmp	r3, #3
 800a89c:	d8a1      	bhi.n	800a7e2 <test_select+0x12>
 800a89e:	a201      	add	r2, pc, #4	; (adr r2, 800a8a4 <test_select+0xd4>)
 800a8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a4:	0800a8b5 	.word	0x0800a8b5
 800a8a8:	0800a8bb 	.word	0x0800a8bb
 800a8ac:	0800a8c1 	.word	0x0800a8c1
 800a8b0:	0800a8c7 	.word	0x0800a8c7
				case 1:
					init_test();
 800a8b4:	f000 f812 	bl	800a8dc <init_test>
					break;
 800a8b8:	e007      	b.n	800a8ca <test_select+0xfa>

				case 2:
					slalom_test();
 800a8ba:	f000 f917 	bl	800aaec <slalom_test>
					break;
 800a8be:	e004      	b.n	800a8ca <test_select+0xfa>

				case 3:
					sample_course_run();
 800a8c0:	f001 fba6 	bl	800c010 <sample_course_run>
					break;
 800a8c4:	e001      	b.n	800a8ca <test_select+0xfa>
				case 4:
					v_test();
 800a8c6:	f000 fb7f 	bl	800afc8 <v_test>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a8ca:	e78a      	b.n	800a7e2 <test_select+0x12>
 800a8cc:	0801496c 	.word	0x0801496c
 800a8d0:	20000b2c 	.word	0x20000b2c
 800a8d4:	08014984 	.word	0x08014984
 800a8d8:	40020000 	.word	0x40020000

0800a8dc <init_test>:
//init_test
// 初期基幹関数走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void init_test(void){
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0

	int mode = 0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	617b      	str	r3, [r7, #20]
	printf("Test Init Run, Mode : %d\n", mode);
 800a8e6:	6979      	ldr	r1, [r7, #20]
 800a8e8:	4871      	ldr	r0, [pc, #452]	; (800aab0 <init_test+0x1d4>)
 800a8ea:	f008 ff21 	bl	8013730 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	f003 0301 	and.w	r3, r3, #1
 800a8f6:	b2d8      	uxtb	r0, r3
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	f003 0302 	and.w	r3, r3, #2
 800a900:	b2d9      	uxtb	r1, r3
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	b2db      	uxtb	r3, r3
 800a906:	f003 0304 	and.w	r3, r3, #4
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	461a      	mov	r2, r3
 800a90e:	f008 f941 	bl	8012b94 <led_write>
		  if(dist_r >= 20){
 800a912:	4b68      	ldr	r3, [pc, #416]	; (800aab4 <init_test+0x1d8>)
 800a914:	edd3 7a00 	vldr	s15, [r3]
 800a918:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a91c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a924:	db0f      	blt.n	800a946 <init_test+0x6a>
			  mode++;
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	3301      	adds	r3, #1
 800a92a:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 800a92c:	4b61      	ldr	r3, [pc, #388]	; (800aab4 <init_test+0x1d8>)
 800a92e:	f04f 0200 	mov.w	r2, #0
 800a932:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	2b07      	cmp	r3, #7
 800a938:	dd01      	ble.n	800a93e <init_test+0x62>
				  mode = 0;
 800a93a:	2300      	movs	r3, #0
 800a93c:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 800a93e:	6979      	ldr	r1, [r7, #20]
 800a940:	485d      	ldr	r0, [pc, #372]	; (800aab8 <init_test+0x1dc>)
 800a942:	f008 fef5 	bl	8013730 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800a946:	4b5b      	ldr	r3, [pc, #364]	; (800aab4 <init_test+0x1d8>)
 800a948:	edd3 7a00 	vldr	s15, [r3]
 800a94c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a950:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a958:	d80f      	bhi.n	800a97a <init_test+0x9e>
			  mode--;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	3b01      	subs	r3, #1
 800a95e:	617b      	str	r3, [r7, #20]
			  dist_r = 0;
 800a960:	4b54      	ldr	r3, [pc, #336]	; (800aab4 <init_test+0x1d8>)
 800a962:	f04f 0200 	mov.w	r2, #0
 800a966:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	da01      	bge.n	800a972 <init_test+0x96>
				  mode = 7;
 800a96e:	2307      	movs	r3, #7
 800a970:	617b      	str	r3, [r7, #20]
			  }
			  printf("Mode : %d\n", mode);
 800a972:	6979      	ldr	r1, [r7, #20]
 800a974:	4850      	ldr	r0, [pc, #320]	; (800aab8 <init_test+0x1dc>)
 800a976:	f008 fedb 	bl	8013730 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800a97a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a97e:	484f      	ldr	r0, [pc, #316]	; (800aabc <init_test+0x1e0>)
 800a980:	f7f7 fca8 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1b1      	bne.n	800a8ee <init_test+0x12>
			  HAL_Delay(50);
 800a98a:	2032      	movs	r0, #50	; 0x32
 800a98c:	f7f6 fb46 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800a990:	bf00      	nop
 800a992:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a996:	4849      	ldr	r0, [pc, #292]	; (800aabc <init_test+0x1e0>)
 800a998:	f7f7 fc9c 	bl	80022d4 <HAL_GPIO_ReadPin>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d0f7      	beq.n	800a992 <init_test+0xb6>
			  drive_ready();
 800a9a2:	f7fa f967 	bl	8004c74 <drive_ready>
			  get_base();
 800a9a6:	f008 f89d 	bl	8012ae4 <get_base>

			  switch(mode){
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	2b07      	cmp	r3, #7
 800a9ae:	d89e      	bhi.n	800a8ee <init_test+0x12>
 800a9b0:	a201      	add	r2, pc, #4	; (adr r2, 800a9b8 <init_test+0xdc>)
 800a9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b6:	bf00      	nop
 800a9b8:	0800a9d9 	.word	0x0800a9d9
 800a9bc:	0800a9df 	.word	0x0800a9df
 800a9c0:	0800a9ff 	.word	0x0800a9ff
 800a9c4:	0800aa1d 	.word	0x0800aa1d
 800a9c8:	0800aa3b 	.word	0x0800aa3b
 800a9cc:	0800aa59 	.word	0x0800aa59
 800a9d0:	0800aa83 	.word	0x0800aa83
 800a9d4:	0800aa99 	.word	0x0800aa99
				case 0:
					get_base();
 800a9d8:	f008 f884 	bl	8012ae4 <get_base>
					break;
 800a9dc:	e067      	b.n	800aaae <init_test+0x1d2>
				case 1:
					//----4区画等速走行----
					printf("4 Section, Forward, Constant Speed.\n");
 800a9de:	4838      	ldr	r0, [pc, #224]	; (800aac0 <init_test+0x1e4>)
 800a9e0:	f008 ff1a 	bl	8013818 <puts>
					for(int i = 0; i < 1; i++){
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	613b      	str	r3, [r7, #16]
 800a9e8:	e005      	b.n	800a9f6 <init_test+0x11a>
						driveC(SEC_HALF*2);	//一区画のパルス分デフォルトインターバルで走行
 800a9ea:	20b6      	movs	r0, #182	; 0xb6
 800a9ec:	f7fa fc32 	bl	8005254 <driveC>
					for(int i = 0; i < 1; i++){
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	613b      	str	r3, [r7, #16]
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	ddf6      	ble.n	800a9ea <init_test+0x10e>
					}
					break;
 800a9fc:	e057      	b.n	800aaae <init_test+0x1d2>
				case 2:
					//----right90度回転----
					printf("Rotate R90.\n");
 800a9fe:	4831      	ldr	r0, [pc, #196]	; (800aac4 <init_test+0x1e8>)
 800aa00:	f008 ff0a 	bl	8013818 <puts>
					for(int i = 0; i < 32; i++){
 800aa04:	2300      	movs	r3, #0
 800aa06:	60fb      	str	r3, [r7, #12]
 800aa08:	e004      	b.n	800aa14 <init_test+0x138>
						rotate_R90();				//16回右90度回転、つまり4周回転
 800aa0a:	f7fa ff15 	bl	8005838 <rotate_R90>
					for(int i = 0; i < 32; i++){
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3301      	adds	r3, #1
 800aa12:	60fb      	str	r3, [r7, #12]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2b1f      	cmp	r3, #31
 800aa18:	ddf7      	ble.n	800aa0a <init_test+0x12e>
					}
					break;
 800aa1a:	e048      	b.n	800aaae <init_test+0x1d2>
				case 3:
					//----left90度回転----
					printf("Rotate L90.\n");
 800aa1c:	482a      	ldr	r0, [pc, #168]	; (800aac8 <init_test+0x1ec>)
 800aa1e:	f008 fefb 	bl	8013818 <puts>
					for(int i = 0; i < 32; i++){
 800aa22:	2300      	movs	r3, #0
 800aa24:	60bb      	str	r3, [r7, #8]
 800aa26:	e004      	b.n	800aa32 <init_test+0x156>
						rotate_L90();				//16回左90度回転、つまり4周回転
 800aa28:	f7fa ffe2 	bl	80059f0 <rotate_L90>
					for(int i = 0; i < 32; i++){
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	60bb      	str	r3, [r7, #8]
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	2b1f      	cmp	r3, #31
 800aa36:	ddf7      	ble.n	800aa28 <init_test+0x14c>
					}
					break;
 800aa38:	e039      	b.n	800aaae <init_test+0x1d2>
				case 4:
					//----180度回転----
					printf("Rotate 180.\n");
 800aa3a:	4824      	ldr	r0, [pc, #144]	; (800aacc <init_test+0x1f0>)
 800aa3c:	f008 feec 	bl	8013818 <puts>
					for(int i = 0; i < 16; i++){
 800aa40:	2300      	movs	r3, #0
 800aa42:	607b      	str	r3, [r7, #4]
 800aa44:	e004      	b.n	800aa50 <init_test+0x174>
						rotate_180();				//8回右180度回転、つまり4周回転
 800aa46:	f7fb f8af 	bl	8005ba8 <rotate_180>
					for(int i = 0; i < 16; i++){
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	607b      	str	r3, [r7, #4]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b0f      	cmp	r3, #15
 800aa54:	ddf7      	ble.n	800aa46 <init_test+0x16a>
					}
					break;
 800aa56:	e02a      	b.n	800aaae <init_test+0x1d2>
				case 5:
					//----4区画連続走行----
					printf("4 Section, Forward, Continuous.\n");
 800aa58:	481d      	ldr	r0, [pc, #116]	; (800aad0 <init_test+0x1f4>)
 800aa5a:	f008 fedd 	bl	8013818 <puts>
					get_base();
 800aa5e:	f008 f841 	bl	8012ae4 <get_base>
					half_sectionA();				//半区画のパルス分加速しながら走行
 800aa62:	f7fa fd23 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 6-1; i++){
 800aa66:	2300      	movs	r3, #0
 800aa68:	603b      	str	r3, [r7, #0]
 800aa6a:	e004      	b.n	800aa76 <init_test+0x19a>
						one_sectionU();			//一区画のパルス分等速走行
 800aa6c:	f7fa fecc 	bl	8005808 <one_sectionU>
					for(int i = 0; i < 6-1; i++){
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	3301      	adds	r3, #1
 800aa74:	603b      	str	r3, [r7, #0]
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	2b04      	cmp	r3, #4
 800aa7a:	ddf7      	ble.n	800aa6c <init_test+0x190>
					}
					half_sectionD();				//半区画のパルス分減速しながら走行。走行後は停止する
 800aa7c:	f7fa fd30 	bl	80054e0 <half_sectionD>
					break;
 800aa80:	e015      	b.n	800aaae <init_test+0x1d2>
				case 6:
					//----a宴会芸モード----
					target_degree_z = degree_z;
 800aa82:	4b14      	ldr	r3, [pc, #80]	; (800aad4 <init_test+0x1f8>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a14      	ldr	r2, [pc, #80]	; (800aad8 <init_test+0x1fc>)
 800aa88:	6013      	str	r3, [r2, #0]
					accel_l = 5000;
 800aa8a:	4b14      	ldr	r3, [pc, #80]	; (800aadc <init_test+0x200>)
 800aa8c:	4a14      	ldr	r2, [pc, #80]	; (800aae0 <init_test+0x204>)
 800aa8e:	601a      	str	r2, [r3, #0]

					enkai_flag = 1;
 800aa90:	4b14      	ldr	r3, [pc, #80]	; (800aae4 <init_test+0x208>)
 800aa92:	2201      	movs	r2, #1
 800aa94:	701a      	strb	r2, [r3, #0]

					while(1);
 800aa96:	e7fe      	b.n	800aa96 <init_test+0x1ba>
					break;
				case 7:
					//----a停止時前壁補正モード----
					MF.FLAG.FWALL = 1;
 800aa98:	4a13      	ldr	r2, [pc, #76]	; (800aae8 <init_test+0x20c>)
 800aa9a:	8813      	ldrh	r3, [r2, #0]
 800aa9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaa0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.DRV = 1;
 800aaa2:	4a11      	ldr	r2, [pc, #68]	; (800aae8 <init_test+0x20c>)
 800aaa4:	8813      	ldrh	r3, [r2, #0]
 800aaa6:	f043 0302 	orr.w	r3, r3, #2
 800aaaa:	8013      	strh	r3, [r2, #0]
					while(1);
 800aaac:	e7fe      	b.n	800aaac <init_test+0x1d0>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800aaae:	e71e      	b.n	800a8ee <init_test+0x12>
 800aab0:	08014990 	.word	0x08014990
 800aab4:	20000b2c 	.word	0x20000b2c
 800aab8:	08014984 	.word	0x08014984
 800aabc:	40020000 	.word	0x40020000
 800aac0:	080149ac 	.word	0x080149ac
 800aac4:	080149d0 	.word	0x080149d0
 800aac8:	080149dc 	.word	0x080149dc
 800aacc:	080149e8 	.word	0x080149e8
 800aad0:	080149f4 	.word	0x080149f4
 800aad4:	20000b9c 	.word	0x20000b9c
 800aad8:	20000c40 	.word	0x20000c40
 800aadc:	20000da0 	.word	0x20000da0
 800aae0:	459c4000 	.word	0x459c4000
 800aae4:	20000bf4 	.word	0x20000bf4
 800aae8:	20000fac 	.word	0x20000fac

0800aaec <slalom_test>:
//slalom_test
// スラローム走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_test(void){
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b092      	sub	sp, #72	; 0x48
 800aaf0:	af00      	add	r7, sp, #0

	int mode = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	647b      	str	r3, [r7, #68]	; 0x44
	printf("Test Slalom Run, Mode : %d\n", mode);
 800aaf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aaf8:	48bb      	ldr	r0, [pc, #748]	; (800ade8 <slalom_test+0x2fc>)
 800aafa:	f008 fe19 	bl	8013730 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800aafe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	f003 0301 	and.w	r3, r3, #1
 800ab06:	b2d8      	uxtb	r0, r3
 800ab08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	f003 0302 	and.w	r3, r3, #2
 800ab10:	b2d9      	uxtb	r1, r3
 800ab12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	f003 0304 	and.w	r3, r3, #4
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	f008 f839 	bl	8012b94 <led_write>
		  if(dist_r >= 20){
 800ab22:	4bb2      	ldr	r3, [pc, #712]	; (800adec <slalom_test+0x300>)
 800ab24:	edd3 7a00 	vldr	s15, [r3]
 800ab28:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800ab2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab34:	db20      	blt.n	800ab78 <slalom_test+0x8c>
			  mode++;
 800ab36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab38:	3301      	adds	r3, #1
 800ab3a:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 800ab3c:	4bab      	ldr	r3, [pc, #684]	; (800adec <slalom_test+0x300>)
 800ab3e:	f04f 0200 	mov.w	r2, #0
 800ab42:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 800ab44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab46:	2b07      	cmp	r3, #7
 800ab48:	dc03      	bgt.n	800ab52 <slalom_test+0x66>
				  full_led_write(WHITE);
 800ab4a:	2007      	movs	r0, #7
 800ab4c:	f008 f85c 	bl	8012c08 <full_led_write>
 800ab50:	e009      	b.n	800ab66 <slalom_test+0x7a>
			  }else if(mode < 16){
 800ab52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab54:	2b0f      	cmp	r3, #15
 800ab56:	dc03      	bgt.n	800ab60 <slalom_test+0x74>
				  full_led_write(BLUEGREEN);
 800ab58:	2004      	movs	r0, #4
 800ab5a:	f008 f855 	bl	8012c08 <full_led_write>
 800ab5e:	e002      	b.n	800ab66 <slalom_test+0x7a>
			  }else{
				  full_led_write(PURPLE);
 800ab60:	2005      	movs	r0, #5
 800ab62:	f008 f851 	bl	8012c08 <full_led_write>
			  }
			  if(mode > 23){
 800ab66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab68:	2b17      	cmp	r3, #23
 800ab6a:	dd01      	ble.n	800ab70 <slalom_test+0x84>
				  mode = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  printf("Mode : %d\n", mode);
 800ab70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab72:	489f      	ldr	r0, [pc, #636]	; (800adf0 <slalom_test+0x304>)
 800ab74:	f008 fddc 	bl	8013730 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800ab78:	4b9c      	ldr	r3, [pc, #624]	; (800adec <slalom_test+0x300>)
 800ab7a:	edd3 7a00 	vldr	s15, [r3]
 800ab7e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800ab82:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab8a:	d820      	bhi.n	800abce <slalom_test+0xe2>
			  mode--;
 800ab8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	647b      	str	r3, [r7, #68]	; 0x44
			  dist_r = 0;
 800ab92:	4b96      	ldr	r3, [pc, #600]	; (800adec <slalom_test+0x300>)
 800ab94:	f04f 0200 	mov.w	r2, #0
 800ab98:	601a      	str	r2, [r3, #0]
			  if(mode < 8){
 800ab9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab9c:	2b07      	cmp	r3, #7
 800ab9e:	dc03      	bgt.n	800aba8 <slalom_test+0xbc>
				  full_led_write(WHITE);
 800aba0:	2007      	movs	r0, #7
 800aba2:	f008 f831 	bl	8012c08 <full_led_write>
 800aba6:	e009      	b.n	800abbc <slalom_test+0xd0>
			  }else if(mode < 16){
 800aba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abaa:	2b0f      	cmp	r3, #15
 800abac:	dc03      	bgt.n	800abb6 <slalom_test+0xca>
				  full_led_write(BLUEGREEN);
 800abae:	2004      	movs	r0, #4
 800abb0:	f008 f82a 	bl	8012c08 <full_led_write>
 800abb4:	e002      	b.n	800abbc <slalom_test+0xd0>
			  }else{
				  full_led_write(PURPLE);
 800abb6:	2005      	movs	r0, #5
 800abb8:	f008 f826 	bl	8012c08 <full_led_write>
			  }
			  if(mode < 0){
 800abbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	da01      	bge.n	800abc6 <slalom_test+0xda>
				  mode = 23;
 800abc2:	2317      	movs	r3, #23
 800abc4:	647b      	str	r3, [r7, #68]	; 0x44
			  }
			  printf("Mode : %d\n", mode);
 800abc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800abc8:	4889      	ldr	r0, [pc, #548]	; (800adf0 <slalom_test+0x304>)
 800abca:	f008 fdb1 	bl	8013730 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800abce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800abd2:	4888      	ldr	r0, [pc, #544]	; (800adf4 <slalom_test+0x308>)
 800abd4:	f7f7 fb7e 	bl	80022d4 <HAL_GPIO_ReadPin>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d18f      	bne.n	800aafe <slalom_test+0x12>
			  HAL_Delay(50);
 800abde:	2032      	movs	r0, #50	; 0x32
 800abe0:	f7f6 fa1c 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800abe4:	bf00      	nop
 800abe6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800abea:	4882      	ldr	r0, [pc, #520]	; (800adf4 <slalom_test+0x308>)
 800abec:	f7f7 fb72 	bl	80022d4 <HAL_GPIO_ReadPin>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d0f7      	beq.n	800abe6 <slalom_test+0xfa>
			  drive_ready();
 800abf6:	f7fa f83d 	bl	8004c74 <drive_ready>
			  get_base();
 800abfa:	f007 ff73 	bl	8012ae4 <get_base>

			  switch(mode){
 800abfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac00:	2b10      	cmp	r3, #16
 800ac02:	f63f af7c 	bhi.w	800aafe <slalom_test+0x12>
 800ac06:	a201      	add	r2, pc, #4	; (adr r2, 800ac0c <slalom_test+0x120>)
 800ac08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0c:	0800ac51 	.word	0x0800ac51
 800ac10:	0800ac57 	.word	0x0800ac57
 800ac14:	0800ac81 	.word	0x0800ac81
 800ac18:	0800acab 	.word	0x0800acab
 800ac1c:	0800acd1 	.word	0x0800acd1
 800ac20:	0800ad0b 	.word	0x0800ad0b
 800ac24:	0800ad47 	.word	0x0800ad47
 800ac28:	0800ad83 	.word	0x0800ad83
 800ac2c:	0800adb5 	.word	0x0800adb5
 800ac30:	0800ae15 	.word	0x0800ae15
 800ac34:	0800ae47 	.word	0x0800ae47
 800ac38:	0800ae79 	.word	0x0800ae79
 800ac3c:	0800aeab 	.word	0x0800aeab
 800ac40:	0800aedd 	.word	0x0800aedd
 800ac44:	0800af0f 	.word	0x0800af0f
 800ac48:	0800af41 	.word	0x0800af41
 800ac4c:	0800af73 	.word	0x0800af73
				case 0:
					get_base();
 800ac50:	f007 ff48 	bl	8012ae4 <get_base>
					break;
 800ac54:	e1a6      	b.n	800afa4 <slalom_test+0x4b8>
				case 1:
					//----slalom右折----
					printf("slalom turn right .\n");
 800ac56:	4868      	ldr	r0, [pc, #416]	; (800adf8 <slalom_test+0x30c>)
 800ac58:	f008 fdde 	bl	8013818 <puts>
					half_sectionA();
 800ac5c:	f7fa fc26 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 32; i++){
 800ac60:	2300      	movs	r3, #0
 800ac62:	643b      	str	r3, [r7, #64]	; 0x40
 800ac64:	e006      	b.n	800ac74 <slalom_test+0x188>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 800ac66:	f7fb f877 	bl	8005d58 <slalom_R90>
						one_sectionU();
 800ac6a:	f7fa fdcd 	bl	8005808 <one_sectionU>
					for(int i = 0; i < 32; i++){
 800ac6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac70:	3301      	adds	r3, #1
 800ac72:	643b      	str	r3, [r7, #64]	; 0x40
 800ac74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac76:	2b1f      	cmp	r3, #31
 800ac78:	ddf5      	ble.n	800ac66 <slalom_test+0x17a>
					}
					half_sectionD();
 800ac7a:	f7fa fc31 	bl	80054e0 <half_sectionD>
					break;
 800ac7e:	e191      	b.n	800afa4 <slalom_test+0x4b8>
				case 2:
					//----slalom左折----
					printf("slalom turn left .\n");
 800ac80:	485e      	ldr	r0, [pc, #376]	; (800adfc <slalom_test+0x310>)
 800ac82:	f008 fdc9 	bl	8013818 <puts>
					half_sectionA();
 800ac86:	f7fa fc11 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 32; i++){
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac8e:	e006      	b.n	800ac9e <slalom_test+0x1b2>
						slalom_L90();				//16回右90度回転、つまり4周回転
 800ac90:	f7fb f976 	bl	8005f80 <slalom_L90>
						one_sectionU();
 800ac94:	f7fa fdb8 	bl	8005808 <one_sectionU>
					for(int i = 0; i < 32; i++){
 800ac98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aca0:	2b1f      	cmp	r3, #31
 800aca2:	ddf5      	ble.n	800ac90 <slalom_test+0x1a4>
					}
					half_sectionD();
 800aca4:	f7fa fc1c 	bl	80054e0 <half_sectionD>
					break;
 800aca8:	e17c      	b.n	800afa4 <slalom_test+0x4b8>
				case 3:
					//----slalom右折----
					printf("slalom turn right .\n");
 800acaa:	4853      	ldr	r0, [pc, #332]	; (800adf8 <slalom_test+0x30c>)
 800acac:	f008 fdb4 	bl	8013818 <puts>
					half_sectionA();
 800acb0:	f7fa fbfc 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 1; i++){
 800acb4:	2300      	movs	r3, #0
 800acb6:	63bb      	str	r3, [r7, #56]	; 0x38
 800acb8:	e004      	b.n	800acc4 <slalom_test+0x1d8>
						slalom_R90();	//一区画のパルス分デフォルトインターバルで走行
 800acba:	f7fb f84d 	bl	8005d58 <slalom_R90>
					for(int i = 0; i < 1; i++){
 800acbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc0:	3301      	adds	r3, #1
 800acc2:	63bb      	str	r3, [r7, #56]	; 0x38
 800acc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	ddf7      	ble.n	800acba <slalom_test+0x1ce>
					}
					half_sectionD();
 800acca:	f7fa fc09 	bl	80054e0 <half_sectionD>
					break;
 800acce:	e169      	b.n	800afa4 <slalom_test+0x4b8>
				case 4:
					//----slalom左折----
					printf("slalom turn left .\n");
 800acd0:	484a      	ldr	r0, [pc, #296]	; (800adfc <slalom_test+0x310>)
 800acd2:	f008 fda1 	bl	8013818 <puts>
					half_sectionA();
 800acd6:	f7fa fbe9 	bl	80054ac <half_sectionA>
					MF.FLAG.LOG = 1;
 800acda:	4a49      	ldr	r2, [pc, #292]	; (800ae00 <slalom_test+0x314>)
 800acdc:	8813      	ldrh	r3, [r2, #0]
 800acde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ace2:	8013      	strh	r3, [r2, #0]
					for(int i = 0; i < 1; i++){
 800ace4:	2300      	movs	r3, #0
 800ace6:	637b      	str	r3, [r7, #52]	; 0x34
 800ace8:	e004      	b.n	800acf4 <slalom_test+0x208>
						slalom_L90();				//16回右90度回転、つまり4周回転
 800acea:	f7fb f949 	bl	8005f80 <slalom_L90>
					for(int i = 0; i < 1; i++){
 800acee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acf0:	3301      	adds	r3, #1
 800acf2:	637b      	str	r3, [r7, #52]	; 0x34
 800acf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	ddf7      	ble.n	800acea <slalom_test+0x1fe>
					}
					MF.FLAG.LOG = 0;
 800acfa:	4a41      	ldr	r2, [pc, #260]	; (800ae00 <slalom_test+0x314>)
 800acfc:	8813      	ldrh	r3, [r2, #0]
 800acfe:	f36f 1386 	bfc	r3, #6, #1
 800ad02:	8013      	strh	r3, [r2, #0]
					half_sectionD();
 800ad04:	f7fa fbec 	bl	80054e0 <half_sectionD>
					printf("r start\n");
					for(int j = 0; j < log_allay; j++){
						printf("%d\n", get_speed_r[j]);
					}
					printf("r end\n");
*/					break;
 800ad08:	e14c      	b.n	800afa4 <slalom_test+0x4b8>
				case 5:
					//----slalom2右折 High Speed----
					printf("slalom turn right High Speed .\n");
 800ad0a:	483e      	ldr	r0, [pc, #248]	; (800ae04 <slalom_test+0x318>)
 800ad0c:	f008 fd84 	bl	8013818 <puts>
					half_sectionA2();
 800ad10:	f7fa fbf6 	bl	8005500 <half_sectionA2>
					for(int i = 0; i < 8; i++){
 800ad14:	2300      	movs	r3, #0
 800ad16:	633b      	str	r3, [r7, #48]	; 0x30
 800ad18:	e00c      	b.n	800ad34 <slalom_test+0x248>
						full_led_write(RED);
 800ad1a:	2001      	movs	r0, #1
 800ad1c:	f007 ff74 	bl	8012c08 <full_led_write>
						slalom_R902();				//16回右90度回転、つまり4周回転
 800ad20:	f7fb fa42 	bl	80061a8 <slalom_R902>
						full_led_write(GREEN);
 800ad24:	2002      	movs	r0, #2
 800ad26:	f007 ff6f 	bl	8012c08 <full_led_write>
						one_sectionU();
 800ad2a:	f7fa fd6d 	bl	8005808 <one_sectionU>
					for(int i = 0; i < 8; i++){
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad30:	3301      	adds	r3, #1
 800ad32:	633b      	str	r3, [r7, #48]	; 0x30
 800ad34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad36:	2b07      	cmp	r3, #7
 800ad38:	ddef      	ble.n	800ad1a <slalom_test+0x22e>
					}
					full_led_write(BLUE);
 800ad3a:	2003      	movs	r0, #3
 800ad3c:	f007 ff64 	bl	8012c08 <full_led_write>
					half_sectionD2();
 800ad40:	f7fa fbf8 	bl	8005534 <half_sectionD2>
					break;
 800ad44:	e12e      	b.n	800afa4 <slalom_test+0x4b8>
				case 6:
					//----slalom2左折 High Speed----
					printf("slalom turn left High Speed .\n");
 800ad46:	4830      	ldr	r0, [pc, #192]	; (800ae08 <slalom_test+0x31c>)
 800ad48:	f008 fd66 	bl	8013818 <puts>
					half_sectionA2();
 800ad4c:	f7fa fbd8 	bl	8005500 <half_sectionA2>
					for(int i = 0; i < 8; i++){
 800ad50:	2300      	movs	r3, #0
 800ad52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad54:	e00c      	b.n	800ad70 <slalom_test+0x284>
						full_led_write(RED);
 800ad56:	2001      	movs	r0, #1
 800ad58:	f007 ff56 	bl	8012c08 <full_led_write>
						slalom_L902();				//16回左90度回転、つまり4周回転
 800ad5c:	f7fb fb34 	bl	80063c8 <slalom_L902>
						full_led_write(GREEN);
 800ad60:	2002      	movs	r0, #2
 800ad62:	f007 ff51 	bl	8012c08 <full_led_write>
						one_sectionU();
 800ad66:	f7fa fd4f 	bl	8005808 <one_sectionU>
					for(int i = 0; i < 8; i++){
 800ad6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad72:	2b07      	cmp	r3, #7
 800ad74:	ddef      	ble.n	800ad56 <slalom_test+0x26a>
					}
					full_led_write(BLUE);
 800ad76:	2003      	movs	r0, #3
 800ad78:	f007 ff46 	bl	8012c08 <full_led_write>
					half_sectionD2();
 800ad7c:	f7fa fbda 	bl	8005534 <half_sectionD2>
					break;
 800ad80:	e110      	b.n	800afa4 <slalom_test+0x4b8>
				case 7:
					//----Lslalom右折----
					printf("Lslalom turn right .\n");
 800ad82:	4822      	ldr	r0, [pc, #136]	; (800ae0c <slalom_test+0x320>)
 800ad84:	f008 fd48 	bl	8013818 <puts>
					half_sectionA();
 800ad88:	f7fa fb90 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 1; i++){
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad90:	e007      	b.n	800ada2 <slalom_test+0x2b6>
						full_led_write(GREEN);
 800ad92:	2002      	movs	r0, #2
 800ad94:	f007 ff38 	bl	8012c08 <full_led_write>
						Lslalom_R90();				//16回右90度回転、つまり4周回転
 800ad98:	f7fb fc22 	bl	80065e0 <Lslalom_R90>
					for(int i = 0; i < 1; i++){
 800ad9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9e:	3301      	adds	r3, #1
 800ada0:	62bb      	str	r3, [r7, #40]	; 0x28
 800ada2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	ddf4      	ble.n	800ad92 <slalom_test+0x2a6>
					}
					full_led_write(BLUE);
 800ada8:	2003      	movs	r0, #3
 800adaa:	f007 ff2d 	bl	8012c08 <full_led_write>
					half_sectionD();
 800adae:	f7fa fb97 	bl	80054e0 <half_sectionD>
					break;
 800adb2:	e0f7      	b.n	800afa4 <slalom_test+0x4b8>
				case 8:
					//----Lslalom左折----
					printf("Lslalom turn left .\n");
 800adb4:	4816      	ldr	r0, [pc, #88]	; (800ae10 <slalom_test+0x324>)
 800adb6:	f008 fd2f 	bl	8013818 <puts>
					half_sectionA();
 800adba:	f7fa fb77 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 1; i++){
 800adbe:	2300      	movs	r3, #0
 800adc0:	627b      	str	r3, [r7, #36]	; 0x24
 800adc2:	e007      	b.n	800add4 <slalom_test+0x2e8>
						full_led_write(GREEN);
 800adc4:	2002      	movs	r0, #2
 800adc6:	f007 ff1f 	bl	8012c08 <full_led_write>
						Lslalom_L90();				//16回左90度回転、つまり4周回転
 800adca:	f7fb fd07 	bl	80067dc <Lslalom_L90>
					for(int i = 0; i < 1; i++){
 800adce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add0:	3301      	adds	r3, #1
 800add2:	627b      	str	r3, [r7, #36]	; 0x24
 800add4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add6:	2b00      	cmp	r3, #0
 800add8:	ddf4      	ble.n	800adc4 <slalom_test+0x2d8>
					}
					full_led_write(BLUE);
 800adda:	2003      	movs	r0, #3
 800addc:	f007 ff14 	bl	8012c08 <full_led_write>
					half_sectionD();
 800ade0:	f7fa fb7e 	bl	80054e0 <half_sectionD>
					break;
 800ade4:	e0de      	b.n	800afa4 <slalom_test+0x4b8>
 800ade6:	bf00      	nop
 800ade8:	08014a14 	.word	0x08014a14
 800adec:	20000b2c 	.word	0x20000b2c
 800adf0:	08014984 	.word	0x08014984
 800adf4:	40020000 	.word	0x40020000
 800adf8:	08014a30 	.word	0x08014a30
 800adfc:	08014a44 	.word	0x08014a44
 800ae00:	20000fac 	.word	0x20000fac
 800ae04:	08014a58 	.word	0x08014a58
 800ae08:	08014a78 	.word	0x08014a78
 800ae0c:	08014a98 	.word	0x08014a98
 800ae10:	08014ab0 	.word	0x08014ab0
				case 9:
					//----Lslalom2右折 High Speed----
					printf("Lslalom turn right High Speed .\n");
 800ae14:	4864      	ldr	r0, [pc, #400]	; (800afa8 <slalom_test+0x4bc>)
 800ae16:	f008 fcff 	bl	8013818 <puts>
					half_sectionA2();
 800ae1a:	f7fa fb71 	bl	8005500 <half_sectionA2>
					for(int i = 0; i < 1; i++){
 800ae1e:	2300      	movs	r3, #0
 800ae20:	623b      	str	r3, [r7, #32]
 800ae22:	e007      	b.n	800ae34 <slalom_test+0x348>
						full_led_write(GREEN);
 800ae24:	2002      	movs	r0, #2
 800ae26:	f007 feef 	bl	8012c08 <full_led_write>
						Lslalom_R902();				//16回右90度回転、つまり4周回転
 800ae2a:	f7fb fdd5 	bl	80069d8 <Lslalom_R902>
					for(int i = 0; i < 1; i++){
 800ae2e:	6a3b      	ldr	r3, [r7, #32]
 800ae30:	3301      	adds	r3, #1
 800ae32:	623b      	str	r3, [r7, #32]
 800ae34:	6a3b      	ldr	r3, [r7, #32]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	ddf4      	ble.n	800ae24 <slalom_test+0x338>
					}
					full_led_write(BLUE);
 800ae3a:	2003      	movs	r0, #3
 800ae3c:	f007 fee4 	bl	8012c08 <full_led_write>
					half_sectionD2();
 800ae40:	f7fa fb78 	bl	8005534 <half_sectionD2>
					break;
 800ae44:	e0ae      	b.n	800afa4 <slalom_test+0x4b8>
				case 10:
					//----Lslalom2左折 High Speed----
					printf("Lslalom turn left High Speed .\n");
 800ae46:	4859      	ldr	r0, [pc, #356]	; (800afac <slalom_test+0x4c0>)
 800ae48:	f008 fce6 	bl	8013818 <puts>
					half_sectionA2();
 800ae4c:	f7fa fb58 	bl	8005500 <half_sectionA2>
					for(int i = 0; i < 1; i++){
 800ae50:	2300      	movs	r3, #0
 800ae52:	61fb      	str	r3, [r7, #28]
 800ae54:	e007      	b.n	800ae66 <slalom_test+0x37a>
						full_led_write(GREEN);
 800ae56:	2002      	movs	r0, #2
 800ae58:	f007 fed6 	bl	8012c08 <full_led_write>
						Lslalom_L902();				//16回左90度回転、つまり4周回転
 800ae5c:	f7fb febc 	bl	8006bd8 <Lslalom_L902>
					for(int i = 0; i < 1; i++){
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	3301      	adds	r3, #1
 800ae64:	61fb      	str	r3, [r7, #28]
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	ddf4      	ble.n	800ae56 <slalom_test+0x36a>
					}
					full_led_write(BLUE);
 800ae6c:	2003      	movs	r0, #3
 800ae6e:	f007 fecb 	bl	8012c08 <full_led_write>
					half_sectionD2();
 800ae72:	f7fa fb5f 	bl	8005534 <half_sectionD2>
					break;
 800ae76:	e095      	b.n	800afa4 <slalom_test+0x4b8>
				case 11:
					//----Lslalom3右折 High High Speed----
					printf("Lslalom turn right High High Speed .\n");
 800ae78:	484d      	ldr	r0, [pc, #308]	; (800afb0 <slalom_test+0x4c4>)
 800ae7a:	f008 fccd 	bl	8013818 <puts>
					half_sectionA3();
 800ae7e:	f7fa fb69 	bl	8005554 <half_sectionA3>
					for(int i = 0; i < 1; i++){
 800ae82:	2300      	movs	r3, #0
 800ae84:	61bb      	str	r3, [r7, #24]
 800ae86:	e007      	b.n	800ae98 <slalom_test+0x3ac>
						full_led_write(GREEN);
 800ae88:	2002      	movs	r0, #2
 800ae8a:	f007 febd 	bl	8012c08 <full_led_write>
						Lslalom_R903();				//16回右90度回転、つまり4周回転
 800ae8e:	f7fb ffa3 	bl	8006dd8 <Lslalom_R903>
					for(int i = 0; i < 1; i++){
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	3301      	adds	r3, #1
 800ae96:	61bb      	str	r3, [r7, #24]
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	ddf4      	ble.n	800ae88 <slalom_test+0x39c>
					}
					full_led_write(BLUE);
 800ae9e:	2003      	movs	r0, #3
 800aea0:	f007 feb2 	bl	8012c08 <full_led_write>
					half_sectionD3();
 800aea4:	f7fa fb70 	bl	8005588 <half_sectionD3>
					break;
 800aea8:	e07c      	b.n	800afa4 <slalom_test+0x4b8>
				case 12:
					//----Lslalom3左折 High High Speed----
					printf("Lslalom turn left High High Speed .\n");
 800aeaa:	4842      	ldr	r0, [pc, #264]	; (800afb4 <slalom_test+0x4c8>)
 800aeac:	f008 fcb4 	bl	8013818 <puts>
					half_sectionA3();
 800aeb0:	f7fa fb50 	bl	8005554 <half_sectionA3>
					for(int i = 0; i < 1; i++){
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	617b      	str	r3, [r7, #20]
 800aeb8:	e007      	b.n	800aeca <slalom_test+0x3de>
						full_led_write(GREEN);
 800aeba:	2002      	movs	r0, #2
 800aebc:	f007 fea4 	bl	8012c08 <full_led_write>
						Lslalom_L903();				//16回左90度回転、つまり4周回転
 800aec0:	f7fc f888 	bl	8006fd4 <Lslalom_L903>
					for(int i = 0; i < 1; i++){
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	3301      	adds	r3, #1
 800aec8:	617b      	str	r3, [r7, #20]
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	ddf4      	ble.n	800aeba <slalom_test+0x3ce>
					}
					full_led_write(BLUE);
 800aed0:	2003      	movs	r0, #3
 800aed2:	f007 fe99 	bl	8012c08 <full_led_write>
					half_sectionD3();
 800aed6:	f7fa fb57 	bl	8005588 <half_sectionD3>
					break;
 800aeda:	e063      	b.n	800afa4 <slalom_test+0x4b8>
				case 13:
					//----Lslalom右180----
					printf("Lslalom turn right & right .\n");
 800aedc:	4836      	ldr	r0, [pc, #216]	; (800afb8 <slalom_test+0x4cc>)
 800aede:	f008 fc9b 	bl	8013818 <puts>
					half_sectionA();
 800aee2:	f7fa fae3 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 1; i++){
 800aee6:	2300      	movs	r3, #0
 800aee8:	613b      	str	r3, [r7, #16]
 800aeea:	e007      	b.n	800aefc <slalom_test+0x410>
						full_led_write(GREEN);
 800aeec:	2002      	movs	r0, #2
 800aeee:	f007 fe8b 	bl	8012c08 <full_led_write>
						Lslalom_R180();				//16回右180度回転、つまり4周回転
 800aef2:	f7fc f97f 	bl	80071f4 <Lslalom_R180>
					for(int i = 0; i < 1; i++){
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	3301      	adds	r3, #1
 800aefa:	613b      	str	r3, [r7, #16]
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	ddf4      	ble.n	800aeec <slalom_test+0x400>
					}
					full_led_write(BLUE);
 800af02:	2003      	movs	r0, #3
 800af04:	f007 fe80 	bl	8012c08 <full_led_write>
					half_sectionD();
 800af08:	f7fa faea 	bl	80054e0 <half_sectionD>
					break;
 800af0c:	e04a      	b.n	800afa4 <slalom_test+0x4b8>
				case 14:
					//----Lslalom左180----
					printf("Lslalom turn left & left .\n");
 800af0e:	482b      	ldr	r0, [pc, #172]	; (800afbc <slalom_test+0x4d0>)
 800af10:	f008 fc82 	bl	8013818 <puts>
					half_sectionA();
 800af14:	f7fa faca 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 1; i++){
 800af18:	2300      	movs	r3, #0
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	e007      	b.n	800af2e <slalom_test+0x442>
						full_led_write(GREEN);
 800af1e:	2002      	movs	r0, #2
 800af20:	f007 fe72 	bl	8012c08 <full_led_write>
						Lslalom_L180();				//16回左180度回転、つまり4周回転
 800af24:	f7fc fa68 	bl	80073f8 <Lslalom_L180>
					for(int i = 0; i < 1; i++){
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	3301      	adds	r3, #1
 800af2c:	60fb      	str	r3, [r7, #12]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2b00      	cmp	r3, #0
 800af32:	ddf4      	ble.n	800af1e <slalom_test+0x432>
					}
					full_led_write(BLUE);
 800af34:	2003      	movs	r0, #3
 800af36:	f007 fe67 	bl	8012c08 <full_led_write>
					half_sectionD();
 800af3a:	f7fa fad1 	bl	80054e0 <half_sectionD>
					break;
 800af3e:	e031      	b.n	800afa4 <slalom_test+0x4b8>
				case 15:
					//----Lslalom右180 High Speed----
					printf("Lslalom turn right & right High Speed .\n");
 800af40:	481f      	ldr	r0, [pc, #124]	; (800afc0 <slalom_test+0x4d4>)
 800af42:	f008 fc69 	bl	8013818 <puts>
					half_sectionA2();
 800af46:	f7fa fadb 	bl	8005500 <half_sectionA2>
					for(int i = 0; i < 1; i++){
 800af4a:	2300      	movs	r3, #0
 800af4c:	60bb      	str	r3, [r7, #8]
 800af4e:	e007      	b.n	800af60 <slalom_test+0x474>
						full_led_write(GREEN);
 800af50:	2002      	movs	r0, #2
 800af52:	f007 fe59 	bl	8012c08 <full_led_write>
						Lslalom_R1802();				//16回右180度回転、つまり4周回転
 800af56:	f7fc fb51 	bl	80075fc <Lslalom_R1802>
					for(int i = 0; i < 1; i++){
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	3301      	adds	r3, #1
 800af5e:	60bb      	str	r3, [r7, #8]
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	2b00      	cmp	r3, #0
 800af64:	ddf4      	ble.n	800af50 <slalom_test+0x464>
					}
					full_led_write(BLUE);
 800af66:	2003      	movs	r0, #3
 800af68:	f007 fe4e 	bl	8012c08 <full_led_write>
					half_sectionD2();
 800af6c:	f7fa fae2 	bl	8005534 <half_sectionD2>
					break;
 800af70:	e018      	b.n	800afa4 <slalom_test+0x4b8>
				case 16:
					//----Lslalom左180 High Speed----
					printf("Lslalom turn left & left High Speed .\n");
 800af72:	4814      	ldr	r0, [pc, #80]	; (800afc4 <slalom_test+0x4d8>)
 800af74:	f008 fc50 	bl	8013818 <puts>
					half_sectionA2();
 800af78:	f7fa fac2 	bl	8005500 <half_sectionA2>
					for(int i = 0; i < 1; i++){
 800af7c:	2300      	movs	r3, #0
 800af7e:	607b      	str	r3, [r7, #4]
 800af80:	e007      	b.n	800af92 <slalom_test+0x4a6>
						full_led_write(GREEN);
 800af82:	2002      	movs	r0, #2
 800af84:	f007 fe40 	bl	8012c08 <full_led_write>
						Lslalom_L1802();				//16回左180度回転、つまり4周回転
 800af88:	f7fc fc3a 	bl	8007800 <Lslalom_L1802>
					for(int i = 0; i < 1; i++){
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	3301      	adds	r3, #1
 800af90:	607b      	str	r3, [r7, #4]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	ddf4      	ble.n	800af82 <slalom_test+0x496>
					}
					full_led_write(BLUE);
 800af98:	2003      	movs	r0, #3
 800af9a:	f007 fe35 	bl	8012c08 <full_led_write>
					half_sectionD2();
 800af9e:	f7fa fac9 	bl	8005534 <half_sectionD2>
					break;
 800afa2:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800afa4:	e5ab      	b.n	800aafe <slalom_test+0x12>
 800afa6:	bf00      	nop
 800afa8:	08014ac4 	.word	0x08014ac4
 800afac:	08014ae4 	.word	0x08014ae4
 800afb0:	08014b04 	.word	0x08014b04
 800afb4:	08014b2c 	.word	0x08014b2c
 800afb8:	08014b50 	.word	0x08014b50
 800afbc:	08014b70 	.word	0x08014b70
 800afc0:	08014b8c 	.word	0x08014b8c
 800afc4:	08014bb4 	.word	0x08014bb4

0800afc8 <v_test>:
//v_test
// 斜め走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void v_test(void){
 800afc8:	b580      	push	{r7, lr}
 800afca:	b096      	sub	sp, #88	; 0x58
 800afcc:	af00      	add	r7, sp, #0

	int mode = 0;
 800afce:	2300      	movs	r3, #0
 800afd0:	657b      	str	r3, [r7, #84]	; 0x54
	printf("Test V Run, Mode : %d\n", mode);
 800afd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800afd4:	48c3      	ldr	r0, [pc, #780]	; (800b2e4 <v_test+0x31c>)
 800afd6:	f008 fbab 	bl	8013730 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800afda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	f003 0301 	and.w	r3, r3, #1
 800afe2:	b2d8      	uxtb	r0, r3
 800afe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	f003 0302 	and.w	r3, r3, #2
 800afec:	b2d9      	uxtb	r1, r3
 800afee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	f003 0304 	and.w	r3, r3, #4
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	461a      	mov	r2, r3
 800affa:	f007 fdcb 	bl	8012b94 <led_write>
		  if(dist_r >= 20){
 800affe:	4bba      	ldr	r3, [pc, #744]	; (800b2e8 <v_test+0x320>)
 800b000:	edd3 7a00 	vldr	s15, [r3]
 800b004:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b010:	db20      	blt.n	800b054 <v_test+0x8c>
			  mode++;
 800b012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b014:	3301      	adds	r3, #1
 800b016:	657b      	str	r3, [r7, #84]	; 0x54
			  dist_r = 0;
 800b018:	4bb3      	ldr	r3, [pc, #716]	; (800b2e8 <v_test+0x320>)
 800b01a:	f04f 0200 	mov.w	r2, #0
 800b01e:	601a      	str	r2, [r3, #0]
			  if(mode > 23){
 800b020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b022:	2b17      	cmp	r3, #23
 800b024:	dd01      	ble.n	800b02a <v_test+0x62>
				  mode = 0;
 800b026:	2300      	movs	r3, #0
 800b028:	657b      	str	r3, [r7, #84]	; 0x54
			  }
			  if(mode < 8){
 800b02a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b02c:	2b07      	cmp	r3, #7
 800b02e:	dc03      	bgt.n	800b038 <v_test+0x70>
				  full_led_write(WHITE);
 800b030:	2007      	movs	r0, #7
 800b032:	f007 fde9 	bl	8012c08 <full_led_write>
 800b036:	e009      	b.n	800b04c <v_test+0x84>
			  }else if(mode < 16){
 800b038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b03a:	2b0f      	cmp	r3, #15
 800b03c:	dc03      	bgt.n	800b046 <v_test+0x7e>
				  full_led_write(BLUEGREEN);
 800b03e:	2004      	movs	r0, #4
 800b040:	f007 fde2 	bl	8012c08 <full_led_write>
 800b044:	e002      	b.n	800b04c <v_test+0x84>
			  }else{
				  full_led_write(PURPLE);
 800b046:	2005      	movs	r0, #5
 800b048:	f007 fdde 	bl	8012c08 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 800b04c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b04e:	48a7      	ldr	r0, [pc, #668]	; (800b2ec <v_test+0x324>)
 800b050:	f008 fb6e 	bl	8013730 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800b054:	4ba4      	ldr	r3, [pc, #656]	; (800b2e8 <v_test+0x320>)
 800b056:	edd3 7a00 	vldr	s15, [r3]
 800b05a:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b05e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b066:	d820      	bhi.n	800b0aa <v_test+0xe2>
			  mode--;
 800b068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b06a:	3b01      	subs	r3, #1
 800b06c:	657b      	str	r3, [r7, #84]	; 0x54
			  dist_r = 0;
 800b06e:	4b9e      	ldr	r3, [pc, #632]	; (800b2e8 <v_test+0x320>)
 800b070:	f04f 0200 	mov.w	r2, #0
 800b074:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800b076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b078:	2b00      	cmp	r3, #0
 800b07a:	da01      	bge.n	800b080 <v_test+0xb8>
				  mode = 23;
 800b07c:	2317      	movs	r3, #23
 800b07e:	657b      	str	r3, [r7, #84]	; 0x54
			  }
			  if(mode < 8){
 800b080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b082:	2b07      	cmp	r3, #7
 800b084:	dc03      	bgt.n	800b08e <v_test+0xc6>
				  full_led_write(WHITE);
 800b086:	2007      	movs	r0, #7
 800b088:	f007 fdbe 	bl	8012c08 <full_led_write>
 800b08c:	e009      	b.n	800b0a2 <v_test+0xda>
			  }else if(mode < 16){
 800b08e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b090:	2b0f      	cmp	r3, #15
 800b092:	dc03      	bgt.n	800b09c <v_test+0xd4>
				  full_led_write(BLUEGREEN);
 800b094:	2004      	movs	r0, #4
 800b096:	f007 fdb7 	bl	8012c08 <full_led_write>
 800b09a:	e002      	b.n	800b0a2 <v_test+0xda>
			  }else{
				  full_led_write(PURPLE);
 800b09c:	2005      	movs	r0, #5
 800b09e:	f007 fdb3 	bl	8012c08 <full_led_write>
			  }
			  printf("Mode : %d\n", mode);
 800b0a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b0a4:	4891      	ldr	r0, [pc, #580]	; (800b2ec <v_test+0x324>)
 800b0a6:	f008 fb43 	bl	8013730 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800b0aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b0ae:	4890      	ldr	r0, [pc, #576]	; (800b2f0 <v_test+0x328>)
 800b0b0:	f7f7 f910 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d18f      	bne.n	800afda <v_test+0x12>
			  HAL_Delay(50);
 800b0ba:	2032      	movs	r0, #50	; 0x32
 800b0bc:	f7f5 ffae 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800b0c0:	bf00      	nop
 800b0c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b0c6:	488a      	ldr	r0, [pc, #552]	; (800b2f0 <v_test+0x328>)
 800b0c8:	f7f7 f904 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d0f7      	beq.n	800b0c2 <v_test+0xfa>
			  drive_ready();
 800b0d2:	f7f9 fdcf 	bl	8004c74 <drive_ready>

			  MF.FLAG.XDIR = 1;
 800b0d6:	4a87      	ldr	r2, [pc, #540]	; (800b2f4 <v_test+0x32c>)
 800b0d8:	8813      	ldrh	r3, [r2, #0]
 800b0da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b0de:	8013      	strh	r3, [r2, #0]
			  v_flag = 0;
 800b0e0:	4b85      	ldr	r3, [pc, #532]	; (800b2f8 <v_test+0x330>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	701a      	strb	r2, [r3, #0]
			  get_base();
 800b0e6:	f007 fcfd 	bl	8012ae4 <get_base>

			  switch(mode){
 800b0ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0ec:	2b14      	cmp	r3, #20
 800b0ee:	f200 8255 	bhi.w	800b59c <v_test+0x5d4>
 800b0f2:	a201      	add	r2, pc, #4	; (adr r2, 800b0f8 <v_test+0x130>)
 800b0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f8:	0800b14d 	.word	0x0800b14d
 800b0fc:	0800b153 	.word	0x0800b153
 800b100:	0800b185 	.word	0x0800b185
 800b104:	0800b1b7 	.word	0x0800b1b7
 800b108:	0800b1f1 	.word	0x0800b1f1
 800b10c:	0800b22b 	.word	0x0800b22b
 800b110:	0800b265 	.word	0x0800b265
 800b114:	0800b29f 	.word	0x0800b29f
 800b118:	0800b2cd 	.word	0x0800b2cd
 800b11c:	0800b32d 	.word	0x0800b32d
 800b120:	0800b35f 	.word	0x0800b35f
 800b124:	0800b391 	.word	0x0800b391
 800b128:	0800b3c3 	.word	0x0800b3c3
 800b12c:	0800b3f5 	.word	0x0800b3f5
 800b130:	0800b42f 	.word	0x0800b42f
 800b134:	0800b469 	.word	0x0800b469
 800b138:	0800b4a3 	.word	0x0800b4a3
 800b13c:	0800b4dd 	.word	0x0800b4dd
 800b140:	0800b50b 	.word	0x0800b50b
 800b144:	0800b539 	.word	0x0800b539
 800b148:	0800b56b 	.word	0x0800b56b
				case 0:
					get_base();
 800b14c:	f007 fcca 	bl	8012ae4 <get_base>
					break;
 800b150:	e224      	b.n	800b59c <v_test+0x5d4>
				case 1:
					//----V右45----
					printf("V 45 right .\n");
 800b152:	486a      	ldr	r0, [pc, #424]	; (800b2fc <v_test+0x334>)
 800b154:	f008 fb60 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b158:	2007      	movs	r0, #7
 800b15a:	f007 fd55 	bl	8012c08 <full_led_write>
					half_sectionA();
 800b15e:	f7fa f9a5 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 32; i++){
 800b162:	2300      	movs	r3, #0
 800b164:	653b      	str	r3, [r7, #80]	; 0x50
 800b166:	e004      	b.n	800b172 <v_test+0x1aa>
						v_R45();
 800b168:	f7fc fc4c 	bl	8007a04 <v_R45>
					for(int i = 0; i < 32; i++){
 800b16c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b16e:	3301      	adds	r3, #1
 800b170:	653b      	str	r3, [r7, #80]	; 0x50
 800b172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b174:	2b1f      	cmp	r3, #31
 800b176:	ddf7      	ble.n	800b168 <v_test+0x1a0>
					}
					full_led_write(BLUE);
 800b178:	2003      	movs	r0, #3
 800b17a:	f007 fd45 	bl	8012c08 <full_led_write>
					half_sectionD();
 800b17e:	f7fa f9af 	bl	80054e0 <half_sectionD>
					break;
 800b182:	e20b      	b.n	800b59c <v_test+0x5d4>
				case 2:
					//----V左45----
					printf("V 45 left .\n");
 800b184:	485e      	ldr	r0, [pc, #376]	; (800b300 <v_test+0x338>)
 800b186:	f008 fb47 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b18a:	2007      	movs	r0, #7
 800b18c:	f007 fd3c 	bl	8012c08 <full_led_write>
					half_sectionA();
 800b190:	f7fa f98c 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 32; i++){
 800b194:	2300      	movs	r3, #0
 800b196:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b198:	e004      	b.n	800b1a4 <v_test+0x1dc>
						v_L45();
 800b19a:	f7fc fd61 	bl	8007c60 <v_L45>
					for(int i = 0; i < 32; i++){
 800b19e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a6:	2b1f      	cmp	r3, #31
 800b1a8:	ddf7      	ble.n	800b19a <v_test+0x1d2>
					}
					full_led_write(BLUE);
 800b1aa:	2003      	movs	r0, #3
 800b1ac:	f007 fd2c 	bl	8012c08 <full_led_write>
					half_sectionD();
 800b1b0:	f7fa f996 	bl	80054e0 <half_sectionD>
					break;
 800b1b4:	e1f2      	b.n	800b59c <v_test+0x5d4>
				case 3:
					//----V右90----
					printf("V 90 right .\n");
 800b1b6:	4853      	ldr	r0, [pc, #332]	; (800b304 <v_test+0x33c>)
 800b1b8:	f008 fb2e 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b1bc:	2007      	movs	r0, #7
 800b1be:	f007 fd23 	bl	8012c08 <full_led_write>
					half_sectionA();
 800b1c2:	f7fa f973 	bl	80054ac <half_sectionA>
					v_R45();
 800b1c6:	f7fc fc1d 	bl	8007a04 <v_R45>
					for(int i = 0; i < 1; i++){
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1ce:	e004      	b.n	800b1da <v_test+0x212>
						v_R90();
 800b1d0:	f7fd fdb0 	bl	8008d34 <v_R90>
					for(int i = 0; i < 1; i++){
 800b1d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	ddf7      	ble.n	800b1d0 <v_test+0x208>
					}
					v_R45();
 800b1e0:	f7fc fc10 	bl	8007a04 <v_R45>
					full_led_write(BLUE);
 800b1e4:	2003      	movs	r0, #3
 800b1e6:	f007 fd0f 	bl	8012c08 <full_led_write>
					half_sectionD();
 800b1ea:	f7fa f979 	bl	80054e0 <half_sectionD>
					break;
 800b1ee:	e1d5      	b.n	800b59c <v_test+0x5d4>
				case 4:
					//----V左90----
					printf("V 90 left .\n");
 800b1f0:	4845      	ldr	r0, [pc, #276]	; (800b308 <v_test+0x340>)
 800b1f2:	f008 fb11 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b1f6:	2007      	movs	r0, #7
 800b1f8:	f007 fd06 	bl	8012c08 <full_led_write>
					half_sectionA();
 800b1fc:	f7fa f956 	bl	80054ac <half_sectionA>
					v_L45();
 800b200:	f7fc fd2e 	bl	8007c60 <v_L45>
					for(int i = 0; i < 1; i++){
 800b204:	2300      	movs	r3, #0
 800b206:	647b      	str	r3, [r7, #68]	; 0x44
 800b208:	e004      	b.n	800b214 <v_test+0x24c>
						v_L90();
 800b20a:	f7fd fe7d 	bl	8008f08 <v_L90>
					for(int i = 0; i < 1; i++){
 800b20e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b210:	3301      	adds	r3, #1
 800b212:	647b      	str	r3, [r7, #68]	; 0x44
 800b214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b216:	2b00      	cmp	r3, #0
 800b218:	ddf7      	ble.n	800b20a <v_test+0x242>
					}
					v_L45();
 800b21a:	f7fc fd21 	bl	8007c60 <v_L45>
					full_led_write(BLUE);
 800b21e:	2003      	movs	r0, #3
 800b220:	f007 fcf2 	bl	8012c08 <full_led_write>
					half_sectionD();
 800b224:	f7fa f95c 	bl	80054e0 <half_sectionD>
					break;
 800b228:	e1b8      	b.n	800b59c <v_test+0x5d4>
				case 5:
					//----V右135----
					printf("V 135 right .\n");
 800b22a:	4838      	ldr	r0, [pc, #224]	; (800b30c <v_test+0x344>)
 800b22c:	f008 faf4 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b230:	2007      	movs	r0, #7
 800b232:	f007 fce9 	bl	8012c08 <full_led_write>
					half_sectionA();
 800b236:	f7fa f939 	bl	80054ac <half_sectionA>
					v_R45();
 800b23a:	f7fc fbe3 	bl	8007a04 <v_R45>
					for(int i = 0; i < 1; i++){
 800b23e:	2300      	movs	r3, #0
 800b240:	643b      	str	r3, [r7, #64]	; 0x40
 800b242:	e004      	b.n	800b24e <v_test+0x286>
						v_R135();
 800b244:	f7fe f920 	bl	8009488 <v_R135>
					for(int i = 0; i < 1; i++){
 800b248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b24a:	3301      	adds	r3, #1
 800b24c:	643b      	str	r3, [r7, #64]	; 0x40
 800b24e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b250:	2b00      	cmp	r3, #0
 800b252:	ddf7      	ble.n	800b244 <v_test+0x27c>
					}
					v_R45();
 800b254:	f7fc fbd6 	bl	8007a04 <v_R45>
					full_led_write(BLUE);
 800b258:	2003      	movs	r0, #3
 800b25a:	f007 fcd5 	bl	8012c08 <full_led_write>
					half_sectionD();
 800b25e:	f7fa f93f 	bl	80054e0 <half_sectionD>
					break;
 800b262:	e19b      	b.n	800b59c <v_test+0x5d4>
				case 6:
					//----V左135----
					printf("V 135 left .\n");
 800b264:	482a      	ldr	r0, [pc, #168]	; (800b310 <v_test+0x348>)
 800b266:	f008 fad7 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b26a:	2007      	movs	r0, #7
 800b26c:	f007 fccc 	bl	8012c08 <full_led_write>
					half_sectionA();
 800b270:	f7fa f91c 	bl	80054ac <half_sectionA>
					v_L45();
 800b274:	f7fc fcf4 	bl	8007c60 <v_L45>
					for(int i = 0; i < 1; i++){
 800b278:	2300      	movs	r3, #0
 800b27a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b27c:	e004      	b.n	800b288 <v_test+0x2c0>
						v_L135();
 800b27e:	f7fe fa31 	bl	80096e4 <v_L135>
					for(int i = 0; i < 1; i++){
 800b282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b284:	3301      	adds	r3, #1
 800b286:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	ddf7      	ble.n	800b27e <v_test+0x2b6>
					}
					v_L45();
 800b28e:	f7fc fce7 	bl	8007c60 <v_L45>
					full_led_write(BLUE);
 800b292:	2003      	movs	r0, #3
 800b294:	f007 fcb8 	bl	8012c08 <full_led_write>
					half_sectionD();
 800b298:	f7fa f922 	bl	80054e0 <half_sectionD>
					break;
 800b29c:	e17e      	b.n	800b59c <v_test+0x5d4>
				case 7:
					//----V右45D----
					printf("V 45 right .\n");
 800b29e:	4817      	ldr	r0, [pc, #92]	; (800b2fc <v_test+0x334>)
 800b2a0:	f008 faba 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b2a4:	2007      	movs	r0, #7
 800b2a6:	f007 fcaf 	bl	8012c08 <full_led_write>
					half_sectionA();
 800b2aa:	f7fa f8ff 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 1; i++){
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b2b2:	e004      	b.n	800b2be <v_test+0x2f6>
						v_R45D();
 800b2b4:	f7fc fdfe 	bl	8007eb4 <v_R45D>
					for(int i = 0; i < 1; i++){
 800b2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800b2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	ddf7      	ble.n	800b2b4 <v_test+0x2ec>
					}
					full_led_write(BLUE);
 800b2c4:	2003      	movs	r0, #3
 800b2c6:	f007 fc9f 	bl	8012c08 <full_led_write>
					break;
 800b2ca:	e167      	b.n	800b59c <v_test+0x5d4>
				case 8:
					//----V左45D----
					printf("V 45 left .\n");
 800b2cc:	480c      	ldr	r0, [pc, #48]	; (800b300 <v_test+0x338>)
 800b2ce:	f008 faa3 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b2d2:	2007      	movs	r0, #7
 800b2d4:	f007 fc98 	bl	8012c08 <full_led_write>
					half_sectionA();
 800b2d8:	f7fa f8e8 	bl	80054ac <half_sectionA>
					for(int i = 0; i < 1; i++){
 800b2dc:	2300      	movs	r3, #0
 800b2de:	637b      	str	r3, [r7, #52]	; 0x34
 800b2e0:	e01d      	b.n	800b31e <v_test+0x356>
 800b2e2:	bf00      	nop
 800b2e4:	08014bdc 	.word	0x08014bdc
 800b2e8:	20000b2c 	.word	0x20000b2c
 800b2ec:	08014984 	.word	0x08014984
 800b2f0:	40020000 	.word	0x40020000
 800b2f4:	20000fac 	.word	0x20000fac
 800b2f8:	20000b28 	.word	0x20000b28
 800b2fc:	08014bf4 	.word	0x08014bf4
 800b300:	08014c04 	.word	0x08014c04
 800b304:	08014c10 	.word	0x08014c10
 800b308:	08014c20 	.word	0x08014c20
 800b30c:	08014c2c 	.word	0x08014c2c
 800b310:	08014c3c 	.word	0x08014c3c
						v_L45D();
 800b314:	f7fc ff06 	bl	8008124 <v_L45D>
					for(int i = 0; i < 1; i++){
 800b318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b31a:	3301      	adds	r3, #1
 800b31c:	637b      	str	r3, [r7, #52]	; 0x34
 800b31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b320:	2b00      	cmp	r3, #0
 800b322:	ddf7      	ble.n	800b314 <v_test+0x34c>
					}
					full_led_write(BLUE);
 800b324:	2003      	movs	r0, #3
 800b326:	f007 fc6f 	bl	8012c08 <full_led_write>
					break;
 800b32a:	e137      	b.n	800b59c <v_test+0x5d4>
				case 9:
					//----V右135D----
					printf("V 135 right .\n");
 800b32c:	489d      	ldr	r0, [pc, #628]	; (800b5a4 <v_test+0x5dc>)
 800b32e:	f008 fa73 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b332:	2007      	movs	r0, #7
 800b334:	f007 fc68 	bl	8012c08 <full_led_write>
					half_sectionA();
 800b338:	f7fa f8b8 	bl	80054ac <half_sectionA>
					v_R45();
 800b33c:	f7fc fb62 	bl	8007a04 <v_R45>
					for(int i = 0; i < 1; i++){
 800b340:	2300      	movs	r3, #0
 800b342:	633b      	str	r3, [r7, #48]	; 0x30
 800b344:	e004      	b.n	800b350 <v_test+0x388>
						v_R135D();
 800b346:	f7fe fafb 	bl	8009940 <v_R135D>
					for(int i = 0; i < 1; i++){
 800b34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34c:	3301      	adds	r3, #1
 800b34e:	633b      	str	r3, [r7, #48]	; 0x30
 800b350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b352:	2b00      	cmp	r3, #0
 800b354:	ddf7      	ble.n	800b346 <v_test+0x37e>
					}
					full_led_write(BLUE);
 800b356:	2003      	movs	r0, #3
 800b358:	f007 fc56 	bl	8012c08 <full_led_write>
					break;
 800b35c:	e11e      	b.n	800b59c <v_test+0x5d4>
				case 10:
					//----V左135D----
					printf("V 135 left .\n");
 800b35e:	4892      	ldr	r0, [pc, #584]	; (800b5a8 <v_test+0x5e0>)
 800b360:	f008 fa5a 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b364:	2007      	movs	r0, #7
 800b366:	f007 fc4f 	bl	8012c08 <full_led_write>
					half_sectionA();
 800b36a:	f7fa f89f 	bl	80054ac <half_sectionA>
					v_L45();
 800b36e:	f7fc fc77 	bl	8007c60 <v_L45>
					for(int i = 0; i < 1; i++){
 800b372:	2300      	movs	r3, #0
 800b374:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b376:	e004      	b.n	800b382 <v_test+0x3ba>
						v_L135D();
 800b378:	f7fe fc1c 	bl	8009bb4 <v_L135D>
					for(int i = 0; i < 1; i++){
 800b37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37e:	3301      	adds	r3, #1
 800b380:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b384:	2b00      	cmp	r3, #0
 800b386:	ddf7      	ble.n	800b378 <v_test+0x3b0>
					}
					full_led_write(BLUE);
 800b388:	2003      	movs	r0, #3
 800b38a:	f007 fc3d 	bl	8012c08 <full_led_write>
					break;
 800b38e:	e105      	b.n	800b59c <v_test+0x5d4>
				case 11:
					//----V右45 High Speed----
					printf("V 45 right .\n");
 800b390:	4886      	ldr	r0, [pc, #536]	; (800b5ac <v_test+0x5e4>)
 800b392:	f008 fa41 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b396:	2007      	movs	r0, #7
 800b398:	f007 fc36 	bl	8012c08 <full_led_write>
					half_sectionA2();
 800b39c:	f7fa f8b0 	bl	8005500 <half_sectionA2>
					for(int i = 0; i < 1; i++){
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3a4:	e004      	b.n	800b3b0 <v_test+0x3e8>
						v_R452();
 800b3a6:	f7fc fff5 	bl	8008394 <v_R452>
					for(int i = 0; i < 1; i++){
 800b3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	ddf7      	ble.n	800b3a6 <v_test+0x3de>
					}
					full_led_write(BLUE);
 800b3b6:	2003      	movs	r0, #3
 800b3b8:	f007 fc26 	bl	8012c08 <full_led_write>
					half_sectionD2();
 800b3bc:	f7fa f8ba 	bl	8005534 <half_sectionD2>
					break;
 800b3c0:	e0ec      	b.n	800b59c <v_test+0x5d4>
				case 12:
					//----V左45 High Speed----
					printf("V 45 left .\n");
 800b3c2:	487b      	ldr	r0, [pc, #492]	; (800b5b0 <v_test+0x5e8>)
 800b3c4:	f008 fa28 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b3c8:	2007      	movs	r0, #7
 800b3ca:	f007 fc1d 	bl	8012c08 <full_led_write>
					half_sectionA2();
 800b3ce:	f7fa f897 	bl	8005500 <half_sectionA2>
					for(int i = 0; i < 1; i++){
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b3d6:	e004      	b.n	800b3e2 <v_test+0x41a>
						v_L452();
 800b3d8:	f7fd f90c 	bl	80085f4 <v_L452>
					for(int i = 0; i < 1; i++){
 800b3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3de:	3301      	adds	r3, #1
 800b3e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	ddf7      	ble.n	800b3d8 <v_test+0x410>
					}
					full_led_write(BLUE);
 800b3e8:	2003      	movs	r0, #3
 800b3ea:	f007 fc0d 	bl	8012c08 <full_led_write>
					half_sectionD2();
 800b3ee:	f7fa f8a1 	bl	8005534 <half_sectionD2>
					break;
 800b3f2:	e0d3      	b.n	800b59c <v_test+0x5d4>
				case 13:
					//----V右90 High Speed----
					printf("V 90 right .\n");
 800b3f4:	486f      	ldr	r0, [pc, #444]	; (800b5b4 <v_test+0x5ec>)
 800b3f6:	f008 fa0f 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b3fa:	2007      	movs	r0, #7
 800b3fc:	f007 fc04 	bl	8012c08 <full_led_write>
					half_sectionA2();
 800b400:	f7fa f87e 	bl	8005500 <half_sectionA2>
					v_R452();
 800b404:	f7fc ffc6 	bl	8008394 <v_R452>
					for(int i = 0; i < 1; i++){
 800b408:	2300      	movs	r3, #0
 800b40a:	623b      	str	r3, [r7, #32]
 800b40c:	e004      	b.n	800b418 <v_test+0x450>
						v_R902();
 800b40e:	f7fd fe65 	bl	80090dc <v_R902>
					for(int i = 0; i < 1; i++){
 800b412:	6a3b      	ldr	r3, [r7, #32]
 800b414:	3301      	adds	r3, #1
 800b416:	623b      	str	r3, [r7, #32]
 800b418:	6a3b      	ldr	r3, [r7, #32]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	ddf7      	ble.n	800b40e <v_test+0x446>
					}
					v_R452();
 800b41e:	f7fc ffb9 	bl	8008394 <v_R452>
					full_led_write(BLUE);
 800b422:	2003      	movs	r0, #3
 800b424:	f007 fbf0 	bl	8012c08 <full_led_write>
					half_sectionD2();
 800b428:	f7fa f884 	bl	8005534 <half_sectionD2>
					break;
 800b42c:	e0b6      	b.n	800b59c <v_test+0x5d4>
				case 14:
					//----V左90 High Speed----
					printf("V 90 left .\n");
 800b42e:	4862      	ldr	r0, [pc, #392]	; (800b5b8 <v_test+0x5f0>)
 800b430:	f008 f9f2 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b434:	2007      	movs	r0, #7
 800b436:	f007 fbe7 	bl	8012c08 <full_led_write>
					half_sectionA2();
 800b43a:	f7fa f861 	bl	8005500 <half_sectionA2>
					v_L452();
 800b43e:	f7fd f8d9 	bl	80085f4 <v_L452>
					for(int i = 0; i < 1; i++){
 800b442:	2300      	movs	r3, #0
 800b444:	61fb      	str	r3, [r7, #28]
 800b446:	e004      	b.n	800b452 <v_test+0x48a>
						v_L902();
 800b448:	f7fd ff34 	bl	80092b4 <v_L902>
					for(int i = 0; i < 1; i++){
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	3301      	adds	r3, #1
 800b450:	61fb      	str	r3, [r7, #28]
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	2b00      	cmp	r3, #0
 800b456:	ddf7      	ble.n	800b448 <v_test+0x480>
					}
					v_L452();
 800b458:	f7fd f8cc 	bl	80085f4 <v_L452>
					full_led_write(BLUE);
 800b45c:	2003      	movs	r0, #3
 800b45e:	f007 fbd3 	bl	8012c08 <full_led_write>
					half_sectionD2();
 800b462:	f7fa f867 	bl	8005534 <half_sectionD2>
					break;
 800b466:	e099      	b.n	800b59c <v_test+0x5d4>
				case 15:
					//----V右135 High Speed----
					printf("V 135 right .\n");
 800b468:	484e      	ldr	r0, [pc, #312]	; (800b5a4 <v_test+0x5dc>)
 800b46a:	f008 f9d5 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b46e:	2007      	movs	r0, #7
 800b470:	f007 fbca 	bl	8012c08 <full_led_write>
					half_sectionA2();
 800b474:	f7fa f844 	bl	8005500 <half_sectionA2>
					v_R452();
 800b478:	f7fc ff8c 	bl	8008394 <v_R452>
					for(int i = 0; i < 1; i++){
 800b47c:	2300      	movs	r3, #0
 800b47e:	61bb      	str	r3, [r7, #24]
 800b480:	e004      	b.n	800b48c <v_test+0x4c4>
						v_R1352();
 800b482:	f7fe fcd1 	bl	8009e28 <v_R1352>
					for(int i = 0; i < 1; i++){
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	3301      	adds	r3, #1
 800b48a:	61bb      	str	r3, [r7, #24]
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	ddf7      	ble.n	800b482 <v_test+0x4ba>
					}
					v_R452();
 800b492:	f7fc ff7f 	bl	8008394 <v_R452>
					full_led_write(BLUE);
 800b496:	2003      	movs	r0, #3
 800b498:	f007 fbb6 	bl	8012c08 <full_led_write>
					half_sectionD2();
 800b49c:	f7fa f84a 	bl	8005534 <half_sectionD2>
					break;
 800b4a0:	e07c      	b.n	800b59c <v_test+0x5d4>
				case 16:
					//----V左135 High Speed----
					printf("V 135 left .\n");
 800b4a2:	4841      	ldr	r0, [pc, #260]	; (800b5a8 <v_test+0x5e0>)
 800b4a4:	f008 f9b8 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b4a8:	2007      	movs	r0, #7
 800b4aa:	f007 fbad 	bl	8012c08 <full_led_write>
					half_sectionA2();
 800b4ae:	f7fa f827 	bl	8005500 <half_sectionA2>
					v_L452();
 800b4b2:	f7fd f89f 	bl	80085f4 <v_L452>
					for(int i = 0; i < 1; i++){
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	617b      	str	r3, [r7, #20]
 800b4ba:	e004      	b.n	800b4c6 <v_test+0x4fe>
						v_L1352();
 800b4bc:	f7fe fde4 	bl	800a088 <v_L1352>
					for(int i = 0; i < 1; i++){
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	617b      	str	r3, [r7, #20]
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	ddf7      	ble.n	800b4bc <v_test+0x4f4>
					}
					v_L452();
 800b4cc:	f7fd f892 	bl	80085f4 <v_L452>
					full_led_write(BLUE);
 800b4d0:	2003      	movs	r0, #3
 800b4d2:	f007 fb99 	bl	8012c08 <full_led_write>
					half_sectionD2();
 800b4d6:	f7fa f82d 	bl	8005534 <half_sectionD2>
					break;
 800b4da:	e05f      	b.n	800b59c <v_test+0x5d4>
				case 17:
					//----V右45D High Speed----
					printf("V 45 right .\n");
 800b4dc:	4833      	ldr	r0, [pc, #204]	; (800b5ac <v_test+0x5e4>)
 800b4de:	f008 f99b 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b4e2:	2007      	movs	r0, #7
 800b4e4:	f007 fb90 	bl	8012c08 <full_led_write>
					half_sectionA2();
 800b4e8:	f7fa f80a 	bl	8005500 <half_sectionA2>
					for(int i = 0; i < 1; i++){
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	613b      	str	r3, [r7, #16]
 800b4f0:	e004      	b.n	800b4fc <v_test+0x534>
						v_R45D2();
 800b4f2:	f7fd f9af 	bl	8008854 <v_R45D2>
					for(int i = 0; i < 1; i++){
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	613b      	str	r3, [r7, #16]
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	ddf7      	ble.n	800b4f2 <v_test+0x52a>
					}
					full_led_write(BLUE);
 800b502:	2003      	movs	r0, #3
 800b504:	f007 fb80 	bl	8012c08 <full_led_write>
					break;
 800b508:	e048      	b.n	800b59c <v_test+0x5d4>
				case 18:
					//----V左45D High Speed----
					printf("V 45 left .\n");
 800b50a:	4829      	ldr	r0, [pc, #164]	; (800b5b0 <v_test+0x5e8>)
 800b50c:	f008 f984 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b510:	2007      	movs	r0, #7
 800b512:	f007 fb79 	bl	8012c08 <full_led_write>
					half_sectionA2();
 800b516:	f7f9 fff3 	bl	8005500 <half_sectionA2>
					for(int i = 0; i < 1; i++){
 800b51a:	2300      	movs	r3, #0
 800b51c:	60fb      	str	r3, [r7, #12]
 800b51e:	e004      	b.n	800b52a <v_test+0x562>
						v_L45D2();
 800b520:	f7fd fad0 	bl	8008ac4 <v_L45D2>
					for(int i = 0; i < 1; i++){
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	3301      	adds	r3, #1
 800b528:	60fb      	str	r3, [r7, #12]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	ddf7      	ble.n	800b520 <v_test+0x558>
					}
					full_led_write(BLUE);
 800b530:	2003      	movs	r0, #3
 800b532:	f007 fb69 	bl	8012c08 <full_led_write>
					break;
 800b536:	e031      	b.n	800b59c <v_test+0x5d4>
				case 19:
					//----V右135D High Speed----
					printf("V 135 right .\n");
 800b538:	481a      	ldr	r0, [pc, #104]	; (800b5a4 <v_test+0x5dc>)
 800b53a:	f008 f96d 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b53e:	2007      	movs	r0, #7
 800b540:	f007 fb62 	bl	8012c08 <full_led_write>
					half_sectionA2();
 800b544:	f7f9 ffdc 	bl	8005500 <half_sectionA2>
					v_R452();
 800b548:	f7fc ff24 	bl	8008394 <v_R452>
					for(int i = 0; i < 1; i++){
 800b54c:	2300      	movs	r3, #0
 800b54e:	60bb      	str	r3, [r7, #8]
 800b550:	e004      	b.n	800b55c <v_test+0x594>
						v_R135D2();
 800b552:	f7fe fec7 	bl	800a2e4 <v_R135D2>
					for(int i = 0; i < 1; i++){
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	3301      	adds	r3, #1
 800b55a:	60bb      	str	r3, [r7, #8]
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	ddf7      	ble.n	800b552 <v_test+0x58a>
					}
					full_led_write(BLUE);
 800b562:	2003      	movs	r0, #3
 800b564:	f007 fb50 	bl	8012c08 <full_led_write>
					break;
 800b568:	e018      	b.n	800b59c <v_test+0x5d4>
				case 20:
					//----V左135D High Speed----
					printf("V 135 left .\n");
 800b56a:	480f      	ldr	r0, [pc, #60]	; (800b5a8 <v_test+0x5e0>)
 800b56c:	f008 f954 	bl	8013818 <puts>
					full_led_write(WHITE);
 800b570:	2007      	movs	r0, #7
 800b572:	f007 fb49 	bl	8012c08 <full_led_write>
					half_sectionA2();
 800b576:	f7f9 ffc3 	bl	8005500 <half_sectionA2>
					v_L452();
 800b57a:	f7fd f83b 	bl	80085f4 <v_L452>
					for(int i = 0; i < 1; i++){
 800b57e:	2300      	movs	r3, #0
 800b580:	607b      	str	r3, [r7, #4]
 800b582:	e004      	b.n	800b58e <v_test+0x5c6>
						v_L135D2();
 800b584:	f7fe ffea 	bl	800a55c <v_L135D2>
					for(int i = 0; i < 1; i++){
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	3301      	adds	r3, #1
 800b58c:	607b      	str	r3, [r7, #4]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	ddf7      	ble.n	800b584 <v_test+0x5bc>
					}
					full_led_write(BLUE);
 800b594:	2003      	movs	r0, #3
 800b596:	f007 fb37 	bl	8012c08 <full_led_write>
					break;
 800b59a:	bf00      	nop
			}
		full_led_write(RED);
 800b59c:	2001      	movs	r0, #1
 800b59e:	f007 fb33 	bl	8012c08 <full_led_write>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b5a2:	e51a      	b.n	800afda <v_test+0x12>
 800b5a4:	08014c2c 	.word	0x08014c2c
 800b5a8:	08014c3c 	.word	0x08014c3c
 800b5ac:	08014bf4 	.word	0x08014bf4
 800b5b0:	08014c04 	.word	0x08014c04
 800b5b4:	08014c10 	.word	0x08014c10
 800b5b8:	08014c20 	.word	0x08014c20

0800b5bc <pass_test>:
//pass_test
// pass圧縮走行テスト
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_test(void){
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0

	int mode = 0;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	607b      	str	r3, [r7, #4]
	printf("Test pass Run, Mode : %d\n", mode);
 800b5c6:	6879      	ldr	r1, [r7, #4]
 800b5c8:	48ad      	ldr	r0, [pc, #692]	; (800b880 <pass_test+0x2c4>)
 800b5ca:	f008 f8b1 	bl	8013730 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	f003 0301 	and.w	r3, r3, #1
 800b5d6:	b2d8      	uxtb	r0, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	f003 0302 	and.w	r3, r3, #2
 800b5e0:	b2d9      	uxtb	r1, r3
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	f003 0304 	and.w	r3, r3, #4
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	f007 fad1 	bl	8012b94 <led_write>
		  if(dist_r >= 20){
 800b5f2:	4ba4      	ldr	r3, [pc, #656]	; (800b884 <pass_test+0x2c8>)
 800b5f4:	edd3 7a00 	vldr	s15, [r3]
 800b5f8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b5fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b604:	db0f      	blt.n	800b626 <pass_test+0x6a>
			  mode++;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	3301      	adds	r3, #1
 800b60a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b60c:	4b9d      	ldr	r3, [pc, #628]	; (800b884 <pass_test+0x2c8>)
 800b60e:	f04f 0200 	mov.w	r2, #0
 800b612:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b07      	cmp	r3, #7
 800b618:	dd01      	ble.n	800b61e <pass_test+0x62>
				  mode = 0;
 800b61a:	2300      	movs	r3, #0
 800b61c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b61e:	6879      	ldr	r1, [r7, #4]
 800b620:	4899      	ldr	r0, [pc, #612]	; (800b888 <pass_test+0x2cc>)
 800b622:	f008 f885 	bl	8013730 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800b626:	4b97      	ldr	r3, [pc, #604]	; (800b884 <pass_test+0x2c8>)
 800b628:	edd3 7a00 	vldr	s15, [r3]
 800b62c:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b630:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b638:	d80f      	bhi.n	800b65a <pass_test+0x9e>
			  mode--;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	3b01      	subs	r3, #1
 800b63e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b640:	4b90      	ldr	r3, [pc, #576]	; (800b884 <pass_test+0x2c8>)
 800b642:	f04f 0200 	mov.w	r2, #0
 800b646:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	da01      	bge.n	800b652 <pass_test+0x96>
				  mode = 7;
 800b64e:	2307      	movs	r3, #7
 800b650:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b652:	6879      	ldr	r1, [r7, #4]
 800b654:	488c      	ldr	r0, [pc, #560]	; (800b888 <pass_test+0x2cc>)
 800b656:	f008 f86b 	bl	8013730 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800b65a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b65e:	488b      	ldr	r0, [pc, #556]	; (800b88c <pass_test+0x2d0>)
 800b660:	f7f6 fe38 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1b1      	bne.n	800b5ce <pass_test+0x12>
			  HAL_Delay(50);
 800b66a:	2032      	movs	r0, #50	; 0x32
 800b66c:	f7f5 fcd6 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800b670:	bf00      	nop
 800b672:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b676:	4885      	ldr	r0, [pc, #532]	; (800b88c <pass_test+0x2d0>)
 800b678:	f7f6 fe2c 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d0f7      	beq.n	800b672 <pass_test+0xb6>
			  drive_ready();
 800b682:	f7f9 faf7 	bl	8004c74 <drive_ready>
			  v_flag = 0;
 800b686:	4b82      	ldr	r3, [pc, #520]	; (800b890 <pass_test+0x2d4>)
 800b688:	2200      	movs	r2, #0
 800b68a:	701a      	strb	r2, [r3, #0]

			  switch(mode){
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2b07      	cmp	r3, #7
 800b690:	d89d      	bhi.n	800b5ce <pass_test+0x12>
 800b692:	a201      	add	r2, pc, #4	; (adr r2, 800b698 <pass_test+0xdc>)
 800b694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b698:	0800b6b9 	.word	0x0800b6b9
 800b69c:	0800b72b 	.word	0x0800b72b
 800b6a0:	0800b79d 	.word	0x0800b79d
 800b6a4:	0800b80f 	.word	0x0800b80f
 800b6a8:	0800b8c1 	.word	0x0800b8c1
 800b6ac:	0800b5cf 	.word	0x0800b5cf
 800b6b0:	0800b5cf 	.word	0x0800b5cf
 800b6b4:	0800b5cf 	.word	0x0800b5cf
				case 0:
					//----a一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800b6b8:	4876      	ldr	r0, [pc, #472]	; (800b894 <pass_test+0x2d8>)
 800b6ba:	f008 f8ad 	bl	8013818 <puts>

					MF.FLAG.SCND = 0;
 800b6be:	4a76      	ldr	r2, [pc, #472]	; (800b898 <pass_test+0x2dc>)
 800b6c0:	8813      	ldrh	r3, [r2, #0]
 800b6c2:	f36f 1345 	bfc	r3, #5, #1
 800b6c6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b6c8:	4a73      	ldr	r2, [pc, #460]	; (800b898 <pass_test+0x2dc>)
 800b6ca:	8813      	ldrh	r3, [r2, #0]
 800b6cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b6d0:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800b6d2:	4b72      	ldr	r3, [pc, #456]	; (800b89c <pass_test+0x2e0>)
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b6d8:	4b71      	ldr	r3, [pc, #452]	; (800b8a0 <pass_test+0x2e4>)
 800b6da:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6de:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800b6e0:	4b70      	ldr	r3, [pc, #448]	; (800b8a4 <pass_test+0x2e8>)
 800b6e2:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b6e6:	801a      	strh	r2, [r3, #0]
					start_flag = 0;
 800b6e8:	4b6c      	ldr	r3, [pc, #432]	; (800b89c <pass_test+0x2e0>)
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800b6ee:	4b6e      	ldr	r3, [pc, #440]	; (800b8a8 <pass_test+0x2ec>)
 800b6f0:	2207      	movs	r2, #7
 800b6f2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b6f4:	4b6d      	ldr	r3, [pc, #436]	; (800b8ac <pass_test+0x2f0>)
 800b6f6:	2207      	movs	r2, #7
 800b6f8:	701a      	strb	r2, [r3, #0]

					get_base();
 800b6fa:	f007 f9f3 	bl	8012ae4 <get_base>

					searchC();
 800b6fe:	f004 f827 	bl	800f750 <searchC>
					HAL_Delay(2000);
 800b702:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b706:	f7f5 fc89 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b70a:	4b68      	ldr	r3, [pc, #416]	; (800b8ac <pass_test+0x2f0>)
 800b70c:	2200      	movs	r2, #0
 800b70e:	701a      	strb	r2, [r3, #0]
 800b710:	4b66      	ldr	r3, [pc, #408]	; (800b8ac <pass_test+0x2f0>)
 800b712:	781a      	ldrb	r2, [r3, #0]
 800b714:	4b64      	ldr	r3, [pc, #400]	; (800b8a8 <pass_test+0x2ec>)
 800b716:	701a      	strb	r2, [r3, #0]
					searchC();
 800b718:	f004 f81a 	bl	800f750 <searchC>

					goal_x = GOAL_X;
 800b71c:	4b62      	ldr	r3, [pc, #392]	; (800b8a8 <pass_test+0x2ec>)
 800b71e:	2207      	movs	r2, #7
 800b720:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b722:	4b62      	ldr	r3, [pc, #392]	; (800b8ac <pass_test+0x2f0>)
 800b724:	2207      	movs	r2, #7
 800b726:	701a      	strb	r2, [r3, #0]
					break;
 800b728:	e103      	b.n	800b932 <pass_test+0x376>
				case 1:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 800b72a:	4861      	ldr	r0, [pc, #388]	; (800b8b0 <pass_test+0x2f4>)
 800b72c:	f008 f874 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800b730:	4a59      	ldr	r2, [pc, #356]	; (800b898 <pass_test+0x2dc>)
 800b732:	8813      	ldrh	r3, [r2, #0]
 800b734:	f043 0320 	orr.w	r3, r3, #32
 800b738:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b73a:	4a57      	ldr	r2, [pc, #348]	; (800b898 <pass_test+0x2dc>)
 800b73c:	8813      	ldrh	r3, [r2, #0]
 800b73e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b742:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800b744:	4b55      	ldr	r3, [pc, #340]	; (800b89c <pass_test+0x2e0>)
 800b746:	2200      	movs	r2, #0
 800b748:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b74a:	4b55      	ldr	r3, [pc, #340]	; (800b8a0 <pass_test+0x2e4>)
 800b74c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b750:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800b752:	4b54      	ldr	r3, [pc, #336]	; (800b8a4 <pass_test+0x2e8>)
 800b754:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b758:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800b75a:	4b56      	ldr	r3, [pc, #344]	; (800b8b4 <pass_test+0x2f8>)
 800b75c:	2203      	movs	r2, #3
 800b75e:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800b760:	4b51      	ldr	r3, [pc, #324]	; (800b8a8 <pass_test+0x2ec>)
 800b762:	2207      	movs	r2, #7
 800b764:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b766:	4b51      	ldr	r3, [pc, #324]	; (800b8ac <pass_test+0x2f0>)
 800b768:	2207      	movs	r2, #7
 800b76a:	701a      	strb	r2, [r3, #0]

					get_base();
 800b76c:	f007 f9ba 	bl	8012ae4 <get_base>

					searchF3();
 800b770:	f004 fc66 	bl	8010040 <searchF3>
					HAL_Delay(2000);
 800b774:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b778:	f7f5 fc50 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b77c:	4b4b      	ldr	r3, [pc, #300]	; (800b8ac <pass_test+0x2f0>)
 800b77e:	2200      	movs	r2, #0
 800b780:	701a      	strb	r2, [r3, #0]
 800b782:	4b4a      	ldr	r3, [pc, #296]	; (800b8ac <pass_test+0x2f0>)
 800b784:	781a      	ldrb	r2, [r3, #0]
 800b786:	4b48      	ldr	r3, [pc, #288]	; (800b8a8 <pass_test+0x2ec>)
 800b788:	701a      	strb	r2, [r3, #0]
					searchF3();
 800b78a:	f004 fc59 	bl	8010040 <searchF3>

					goal_x = GOAL_X;
 800b78e:	4b46      	ldr	r3, [pc, #280]	; (800b8a8 <pass_test+0x2ec>)
 800b790:	2207      	movs	r2, #7
 800b792:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b794:	4b45      	ldr	r3, [pc, #276]	; (800b8ac <pass_test+0x2f0>)
 800b796:	2207      	movs	r2, #7
 800b798:	701a      	strb	r2, [r3, #0]
					break;
 800b79a:	e0ca      	b.n	800b932 <pass_test+0x376>
				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 800b79c:	4846      	ldr	r0, [pc, #280]	; (800b8b8 <pass_test+0x2fc>)
 800b79e:	f008 f83b 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800b7a2:	4a3d      	ldr	r2, [pc, #244]	; (800b898 <pass_test+0x2dc>)
 800b7a4:	8813      	ldrh	r3, [r2, #0]
 800b7a6:	f043 0320 	orr.w	r3, r3, #32
 800b7aa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b7ac:	4a3a      	ldr	r2, [pc, #232]	; (800b898 <pass_test+0x2dc>)
 800b7ae:	8813      	ldrh	r3, [r2, #0]
 800b7b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b7b4:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800b7b6:	4b39      	ldr	r3, [pc, #228]	; (800b89c <pass_test+0x2e0>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b7bc:	4b38      	ldr	r3, [pc, #224]	; (800b8a0 <pass_test+0x2e4>)
 800b7be:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7c2:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800b7c4:	4b37      	ldr	r3, [pc, #220]	; (800b8a4 <pass_test+0x2e8>)
 800b7c6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800b7ca:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800b7cc:	4b39      	ldr	r3, [pc, #228]	; (800b8b4 <pass_test+0x2f8>)
 800b7ce:	2203      	movs	r2, #3
 800b7d0:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800b7d2:	4b35      	ldr	r3, [pc, #212]	; (800b8a8 <pass_test+0x2ec>)
 800b7d4:	2207      	movs	r2, #7
 800b7d6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b7d8:	4b34      	ldr	r3, [pc, #208]	; (800b8ac <pass_test+0x2f0>)
 800b7da:	2207      	movs	r2, #7
 800b7dc:	701a      	strb	r2, [r3, #0]

					get_base();
 800b7de:	f007 f981 	bl	8012ae4 <get_base>

					searchF32();
 800b7e2:	f004 fcf1 	bl	80101c8 <searchF32>
					HAL_Delay(2000);
 800b7e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b7ea:	f7f5 fc17 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b7ee:	4b2f      	ldr	r3, [pc, #188]	; (800b8ac <pass_test+0x2f0>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	701a      	strb	r2, [r3, #0]
 800b7f4:	4b2d      	ldr	r3, [pc, #180]	; (800b8ac <pass_test+0x2f0>)
 800b7f6:	781a      	ldrb	r2, [r3, #0]
 800b7f8:	4b2b      	ldr	r3, [pc, #172]	; (800b8a8 <pass_test+0x2ec>)
 800b7fa:	701a      	strb	r2, [r3, #0]
					searchF32();
 800b7fc:	f004 fce4 	bl	80101c8 <searchF32>

					goal_x = GOAL_X;
 800b800:	4b29      	ldr	r3, [pc, #164]	; (800b8a8 <pass_test+0x2ec>)
 800b802:	2207      	movs	r2, #7
 800b804:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b806:	4b29      	ldr	r3, [pc, #164]	; (800b8ac <pass_test+0x2f0>)
 800b808:	2207      	movs	r2, #7
 800b80a:	701a      	strb	r2, [r3, #0]
					break;
 800b80c:	e091      	b.n	800b932 <pass_test+0x376>
				case 3:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800b80e:	482b      	ldr	r0, [pc, #172]	; (800b8bc <pass_test+0x300>)
 800b810:	f008 f802 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800b814:	4a20      	ldr	r2, [pc, #128]	; (800b898 <pass_test+0x2dc>)
 800b816:	8813      	ldrh	r3, [r2, #0]
 800b818:	f043 0320 	orr.w	r3, r3, #32
 800b81c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b81e:	4a1e      	ldr	r2, [pc, #120]	; (800b898 <pass_test+0x2dc>)
 800b820:	8813      	ldrh	r3, [r2, #0]
 800b822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b826:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800b828:	4b1c      	ldr	r3, [pc, #112]	; (800b89c <pass_test+0x2e0>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b82e:	4b1c      	ldr	r3, [pc, #112]	; (800b8a0 <pass_test+0x2e4>)
 800b830:	f241 3288 	movw	r2, #5000	; 0x1388
 800b834:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b836:	4b1b      	ldr	r3, [pc, #108]	; (800b8a4 <pass_test+0x2e8>)
 800b838:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b83c:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800b83e:	4b1d      	ldr	r3, [pc, #116]	; (800b8b4 <pass_test+0x2f8>)
 800b840:	2204      	movs	r2, #4
 800b842:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800b844:	4b18      	ldr	r3, [pc, #96]	; (800b8a8 <pass_test+0x2ec>)
 800b846:	2207      	movs	r2, #7
 800b848:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b84a:	4b18      	ldr	r3, [pc, #96]	; (800b8ac <pass_test+0x2f0>)
 800b84c:	2207      	movs	r2, #7
 800b84e:	701a      	strb	r2, [r3, #0]

					get_base();
 800b850:	f007 f948 	bl	8012ae4 <get_base>

					searchF4();
 800b854:	f004 fd7c 	bl	8010350 <searchF4>
					HAL_Delay(2000);
 800b858:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b85c:	f7f5 fbde 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b860:	4b12      	ldr	r3, [pc, #72]	; (800b8ac <pass_test+0x2f0>)
 800b862:	2200      	movs	r2, #0
 800b864:	701a      	strb	r2, [r3, #0]
 800b866:	4b11      	ldr	r3, [pc, #68]	; (800b8ac <pass_test+0x2f0>)
 800b868:	781a      	ldrb	r2, [r3, #0]
 800b86a:	4b0f      	ldr	r3, [pc, #60]	; (800b8a8 <pass_test+0x2ec>)
 800b86c:	701a      	strb	r2, [r3, #0]
					searchF4();
 800b86e:	f004 fd6f 	bl	8010350 <searchF4>

					goal_x = GOAL_X;
 800b872:	4b0d      	ldr	r3, [pc, #52]	; (800b8a8 <pass_test+0x2ec>)
 800b874:	2207      	movs	r2, #7
 800b876:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b878:	4b0c      	ldr	r3, [pc, #48]	; (800b8ac <pass_test+0x2f0>)
 800b87a:	2207      	movs	r2, #7
 800b87c:	701a      	strb	r2, [r3, #0]
					break;
 800b87e:	e058      	b.n	800b932 <pass_test+0x376>
 800b880:	08014c4c 	.word	0x08014c4c
 800b884:	20000b2c 	.word	0x20000b2c
 800b888:	08014984 	.word	0x08014984
 800b88c:	40020000 	.word	0x40020000
 800b890:	20000b28 	.word	0x20000b28
 800b894:	08014c68 	.word	0x08014c68
 800b898:	20000fac 	.word	0x20000fac
 800b89c:	200012ec 	.word	0x200012ec
 800b8a0:	2000048c 	.word	0x2000048c
 800b8a4:	20000fc0 	.word	0x20000fc0
 800b8a8:	20000bf1 	.word	0x20000bf1
 800b8ac:	20000b8c 	.word	0x20000b8c
 800b8b0:	08014c7c 	.word	0x08014c7c
 800b8b4:	2000048f 	.word	0x2000048f
 800b8b8:	08014c8c 	.word	0x08014c8c
 800b8bc:	08014c9c 	.word	0x08014c9c
				case 4:
					//----a直線と大回り圧縮と斜め High Speedｰｰｰｰ
					printf("pass press 4.\n");
 800b8c0:	481c      	ldr	r0, [pc, #112]	; (800b934 <pass_test+0x378>)
 800b8c2:	f007 ffa9 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800b8c6:	4a1c      	ldr	r2, [pc, #112]	; (800b938 <pass_test+0x37c>)
 800b8c8:	8813      	ldrh	r3, [r2, #0]
 800b8ca:	f043 0320 	orr.w	r3, r3, #32
 800b8ce:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800b8d0:	4a19      	ldr	r2, [pc, #100]	; (800b938 <pass_test+0x37c>)
 800b8d2:	8813      	ldrh	r3, [r2, #0]
 800b8d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b8d8:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800b8da:	4b18      	ldr	r3, [pc, #96]	; (800b93c <pass_test+0x380>)
 800b8dc:	2200      	movs	r2, #0
 800b8de:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800b8e0:	4b17      	ldr	r3, [pc, #92]	; (800b940 <pass_test+0x384>)
 800b8e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8e6:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800b8e8:	4b16      	ldr	r3, [pc, #88]	; (800b944 <pass_test+0x388>)
 800b8ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b8ee:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800b8f0:	4b15      	ldr	r3, [pc, #84]	; (800b948 <pass_test+0x38c>)
 800b8f2:	2204      	movs	r2, #4
 800b8f4:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800b8f6:	4b15      	ldr	r3, [pc, #84]	; (800b94c <pass_test+0x390>)
 800b8f8:	2207      	movs	r2, #7
 800b8fa:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b8fc:	4b14      	ldr	r3, [pc, #80]	; (800b950 <pass_test+0x394>)
 800b8fe:	2207      	movs	r2, #7
 800b900:	701a      	strb	r2, [r3, #0]

					get_base();
 800b902:	f007 f8ef 	bl	8012ae4 <get_base>

					searchF42();
 800b906:	f004 ff73 	bl	80107f0 <searchF42>
					HAL_Delay(2000);
 800b90a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b90e:	f7f5 fb85 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800b912:	4b0f      	ldr	r3, [pc, #60]	; (800b950 <pass_test+0x394>)
 800b914:	2200      	movs	r2, #0
 800b916:	701a      	strb	r2, [r3, #0]
 800b918:	4b0d      	ldr	r3, [pc, #52]	; (800b950 <pass_test+0x394>)
 800b91a:	781a      	ldrb	r2, [r3, #0]
 800b91c:	4b0b      	ldr	r3, [pc, #44]	; (800b94c <pass_test+0x390>)
 800b91e:	701a      	strb	r2, [r3, #0]
					searchF42();
 800b920:	f004 ff66 	bl	80107f0 <searchF42>

					goal_x = GOAL_X;
 800b924:	4b09      	ldr	r3, [pc, #36]	; (800b94c <pass_test+0x390>)
 800b926:	2207      	movs	r2, #7
 800b928:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800b92a:	4b09      	ldr	r3, [pc, #36]	; (800b950 <pass_test+0x394>)
 800b92c:	2207      	movs	r2, #7
 800b92e:	701a      	strb	r2, [r3, #0]
					break;
 800b930:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b932:	e64c      	b.n	800b5ce <pass_test+0x12>
 800b934:	08014c9c 	.word	0x08014c9c
 800b938:	20000fac 	.word	0x20000fac
 800b93c:	200012ec 	.word	0x200012ec
 800b940:	2000048c 	.word	0x2000048c
 800b944:	20000fc0 	.word	0x20000fc0
 800b948:	2000048f 	.word	0x2000048f
 800b94c:	20000bf1 	.word	0x20000bf1
 800b950:	20000b8c 	.word	0x20000b8c

0800b954 <simple_run>:
//simple_run
// 超信地走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void simple_run(void){
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0

	int mode = 0;
 800b95a:	2300      	movs	r3, #0
 800b95c:	607b      	str	r3, [r7, #4]
	printf("Simple Run, Mode : %d\n", mode);
 800b95e:	6879      	ldr	r1, [r7, #4]
 800b960:	4874      	ldr	r0, [pc, #464]	; (800bb34 <simple_run+0x1e0>)
 800b962:	f007 fee5 	bl	8013730 <iprintf>

	while(1){

		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	f003 0301 	and.w	r3, r3, #1
 800b96e:	b2d8      	uxtb	r0, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	b2db      	uxtb	r3, r3
 800b974:	f003 0302 	and.w	r3, r3, #2
 800b978:	b2d9      	uxtb	r1, r3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	f003 0304 	and.w	r3, r3, #4
 800b982:	b2db      	uxtb	r3, r3
 800b984:	461a      	mov	r2, r3
 800b986:	f007 f905 	bl	8012b94 <led_write>
		  if(dist_r >= 20){
 800b98a:	4b6b      	ldr	r3, [pc, #428]	; (800bb38 <simple_run+0x1e4>)
 800b98c:	edd3 7a00 	vldr	s15, [r3]
 800b990:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800b994:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b99c:	db0f      	blt.n	800b9be <simple_run+0x6a>
			  mode++;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b9a4:	4b64      	ldr	r3, [pc, #400]	; (800bb38 <simple_run+0x1e4>)
 800b9a6:	f04f 0200 	mov.w	r2, #0
 800b9aa:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b07      	cmp	r3, #7
 800b9b0:	dd01      	ble.n	800b9b6 <simple_run+0x62>
				  mode = 0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b9b6:	6879      	ldr	r1, [r7, #4]
 800b9b8:	4860      	ldr	r0, [pc, #384]	; (800bb3c <simple_run+0x1e8>)
 800b9ba:	f007 feb9 	bl	8013730 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800b9be:	4b5e      	ldr	r3, [pc, #376]	; (800bb38 <simple_run+0x1e4>)
 800b9c0:	edd3 7a00 	vldr	s15, [r3]
 800b9c4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800b9c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9d0:	d80f      	bhi.n	800b9f2 <simple_run+0x9e>
			  mode--;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800b9d8:	4b57      	ldr	r3, [pc, #348]	; (800bb38 <simple_run+0x1e4>)
 800b9da:	f04f 0200 	mov.w	r2, #0
 800b9de:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	da01      	bge.n	800b9ea <simple_run+0x96>
				  mode = 7;
 800b9e6:	2307      	movs	r3, #7
 800b9e8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800b9ea:	6879      	ldr	r1, [r7, #4]
 800b9ec:	4853      	ldr	r0, [pc, #332]	; (800bb3c <simple_run+0x1e8>)
 800b9ee:	f007 fe9f 	bl	8013730 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800b9f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b9f6:	4852      	ldr	r0, [pc, #328]	; (800bb40 <simple_run+0x1ec>)
 800b9f8:	f7f6 fc6c 	bl	80022d4 <HAL_GPIO_ReadPin>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d1b1      	bne.n	800b966 <simple_run+0x12>
			  HAL_Delay(50);
 800ba02:	2032      	movs	r0, #50	; 0x32
 800ba04:	f7f5 fb0a 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800ba08:	bf00      	nop
 800ba0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ba0e:	484c      	ldr	r0, [pc, #304]	; (800bb40 <simple_run+0x1ec>)
 800ba10:	f7f6 fc60 	bl	80022d4 <HAL_GPIO_ReadPin>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d0f7      	beq.n	800ba0a <simple_run+0xb6>
			  drive_ready();
 800ba1a:	f7f9 f92b 	bl	8004c74 <drive_ready>

			  switch(mode){
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b07      	cmp	r3, #7
 800ba22:	d8a0      	bhi.n	800b966 <simple_run+0x12>
 800ba24:	a201      	add	r2, pc, #4	; (adr r2, 800ba2c <simple_run+0xd8>)
 800ba26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba2a:	bf00      	nop
 800ba2c:	0800b967 	.word	0x0800b967
 800ba30:	0800ba4d 	.word	0x0800ba4d
 800ba34:	0800ba99 	.word	0x0800ba99
 800ba38:	0800bae5 	.word	0x0800bae5
 800ba3c:	0800b967 	.word	0x0800b967
 800ba40:	0800b967 	.word	0x0800b967
 800ba44:	0800b967 	.word	0x0800b967
 800ba48:	0800b967 	.word	0x0800b967

				case 0:
					break;
				case 1:
					//----一次探索走行----
					printf("First Run.\n");
 800ba4c:	483d      	ldr	r0, [pc, #244]	; (800bb44 <simple_run+0x1f0>)
 800ba4e:	f007 fee3 	bl	8013818 <puts>

					MF.FLAG.SCND = 0;
 800ba52:	4a3d      	ldr	r2, [pc, #244]	; (800bb48 <simple_run+0x1f4>)
 800ba54:	8813      	ldrh	r3, [r2, #0]
 800ba56:	f36f 1345 	bfc	r3, #5, #1
 800ba5a:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 800ba5c:	4b3b      	ldr	r3, [pc, #236]	; (800bb4c <simple_run+0x1f8>)
 800ba5e:	2207      	movs	r2, #7
 800ba60:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ba62:	4b3b      	ldr	r3, [pc, #236]	; (800bb50 <simple_run+0x1fc>)
 800ba64:	2207      	movs	r2, #7
 800ba66:	701a      	strb	r2, [r3, #0]

					get_base();
 800ba68:	f007 f83c 	bl	8012ae4 <get_base>

					searchA();
 800ba6c:	f003 fd64 	bl	800f538 <searchA>
					HAL_Delay(2000);
 800ba70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ba74:	f7f5 fad2 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ba78:	4b35      	ldr	r3, [pc, #212]	; (800bb50 <simple_run+0x1fc>)
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	701a      	strb	r2, [r3, #0]
 800ba7e:	4b34      	ldr	r3, [pc, #208]	; (800bb50 <simple_run+0x1fc>)
 800ba80:	781a      	ldrb	r2, [r3, #0]
 800ba82:	4b32      	ldr	r3, [pc, #200]	; (800bb4c <simple_run+0x1f8>)
 800ba84:	701a      	strb	r2, [r3, #0]
					searchA();
 800ba86:	f003 fd57 	bl	800f538 <searchA>

					goal_x = GOAL_X;
 800ba8a:	4b30      	ldr	r3, [pc, #192]	; (800bb4c <simple_run+0x1f8>)
 800ba8c:	2207      	movs	r2, #7
 800ba8e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ba90:	4b2f      	ldr	r3, [pc, #188]	; (800bb50 <simple_run+0x1fc>)
 800ba92:	2207      	movs	r2, #7
 800ba94:	701a      	strb	r2, [r3, #0]

					break;
 800ba96:	e04b      	b.n	800bb30 <simple_run+0x1dc>

				case 2:
					//----一次探索連続走行----
					printf("First Run. (Continuous)\n");
 800ba98:	482e      	ldr	r0, [pc, #184]	; (800bb54 <simple_run+0x200>)
 800ba9a:	f007 febd 	bl	8013818 <puts>

					MF.FLAG.SCND = 0;
 800ba9e:	4a2a      	ldr	r2, [pc, #168]	; (800bb48 <simple_run+0x1f4>)
 800baa0:	8813      	ldrh	r3, [r2, #0]
 800baa2:	f36f 1345 	bfc	r3, #5, #1
 800baa6:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 800baa8:	4b28      	ldr	r3, [pc, #160]	; (800bb4c <simple_run+0x1f8>)
 800baaa:	2207      	movs	r2, #7
 800baac:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800baae:	4b28      	ldr	r3, [pc, #160]	; (800bb50 <simple_run+0x1fc>)
 800bab0:	2207      	movs	r2, #7
 800bab2:	701a      	strb	r2, [r3, #0]

					get_base();
 800bab4:	f007 f816 	bl	8012ae4 <get_base>

					searchB();
 800bab8:	f003 fdc0 	bl	800f63c <searchB>
					HAL_Delay(2000);
 800babc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bac0:	f7f5 faac 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bac4:	4b22      	ldr	r3, [pc, #136]	; (800bb50 <simple_run+0x1fc>)
 800bac6:	2200      	movs	r2, #0
 800bac8:	701a      	strb	r2, [r3, #0]
 800baca:	4b21      	ldr	r3, [pc, #132]	; (800bb50 <simple_run+0x1fc>)
 800bacc:	781a      	ldrb	r2, [r3, #0]
 800bace:	4b1f      	ldr	r3, [pc, #124]	; (800bb4c <simple_run+0x1f8>)
 800bad0:	701a      	strb	r2, [r3, #0]
					searchB();
 800bad2:	f003 fdb3 	bl	800f63c <searchB>

					goal_x = GOAL_X;
 800bad6:	4b1d      	ldr	r3, [pc, #116]	; (800bb4c <simple_run+0x1f8>)
 800bad8:	2207      	movs	r2, #7
 800bada:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800badc:	4b1c      	ldr	r3, [pc, #112]	; (800bb50 <simple_run+0x1fc>)
 800bade:	2207      	movs	r2, #7
 800bae0:	701a      	strb	r2, [r3, #0]

					break;
 800bae2:	e025      	b.n	800bb30 <simple_run+0x1dc>

				case 3:
					//----二次探索走行----
					printf("Second Run. (Continuous)\n");
 800bae4:	481c      	ldr	r0, [pc, #112]	; (800bb58 <simple_run+0x204>)
 800bae6:	f007 fe97 	bl	8013818 <puts>

					MF.FLAG.SCND = 1;
 800baea:	4a17      	ldr	r2, [pc, #92]	; (800bb48 <simple_run+0x1f4>)
 800baec:	8813      	ldrh	r3, [r2, #0]
 800baee:	f043 0320 	orr.w	r3, r3, #32
 800baf2:	8013      	strh	r3, [r2, #0]
					goal_x = GOAL_X;
 800baf4:	4b15      	ldr	r3, [pc, #84]	; (800bb4c <simple_run+0x1f8>)
 800baf6:	2207      	movs	r2, #7
 800baf8:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bafa:	4b15      	ldr	r3, [pc, #84]	; (800bb50 <simple_run+0x1fc>)
 800bafc:	2207      	movs	r2, #7
 800bafe:	701a      	strb	r2, [r3, #0]

					get_base();
 800bb00:	f006 fff0 	bl	8012ae4 <get_base>

					searchB();
 800bb04:	f003 fd9a 	bl	800f63c <searchB>
					HAL_Delay(2000);
 800bb08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bb0c:	f7f5 fa86 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bb10:	4b0f      	ldr	r3, [pc, #60]	; (800bb50 <simple_run+0x1fc>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	701a      	strb	r2, [r3, #0]
 800bb16:	4b0e      	ldr	r3, [pc, #56]	; (800bb50 <simple_run+0x1fc>)
 800bb18:	781a      	ldrb	r2, [r3, #0]
 800bb1a:	4b0c      	ldr	r3, [pc, #48]	; (800bb4c <simple_run+0x1f8>)
 800bb1c:	701a      	strb	r2, [r3, #0]
					searchB();
 800bb1e:	f003 fd8d 	bl	800f63c <searchB>

					goal_x = GOAL_X;
 800bb22:	4b0a      	ldr	r3, [pc, #40]	; (800bb4c <simple_run+0x1f8>)
 800bb24:	2207      	movs	r2, #7
 800bb26:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bb28:	4b09      	ldr	r3, [pc, #36]	; (800bb50 <simple_run+0x1fc>)
 800bb2a:	2207      	movs	r2, #7
 800bb2c:	701a      	strb	r2, [r3, #0]

					break;
 800bb2e:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800bb30:	e719      	b.n	800b966 <simple_run+0x12>
 800bb32:	bf00      	nop
 800bb34:	08014cac 	.word	0x08014cac
 800bb38:	20000b2c 	.word	0x20000b2c
 800bb3c:	08014984 	.word	0x08014984
 800bb40:	40020000 	.word	0x40020000
 800bb44:	08014cc4 	.word	0x08014cc4
 800bb48:	20000fac 	.word	0x20000fac
 800bb4c:	20000bf1 	.word	0x20000bf1
 800bb50:	20000b8c 	.word	0x20000b8c
 800bb54:	08014cd0 	.word	0x08014cd0
 800bb58:	08014ce8 	.word	0x08014ce8

0800bb5c <slalom_run>:
//slalom_run
// スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void slalom_run(void){
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0

	int mode = 0;
 800bb62:	2300      	movs	r3, #0
 800bb64:	607b      	str	r3, [r7, #4]
	printf("Slalom Run, Mode : %d\n", mode);
 800bb66:	6879      	ldr	r1, [r7, #4]
 800bb68:	48a0      	ldr	r0, [pc, #640]	; (800bdec <slalom_run+0x290>)
 800bb6a:	f007 fde1 	bl	8013730 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	f003 0301 	and.w	r3, r3, #1
 800bb76:	b2d8      	uxtb	r0, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	f003 0302 	and.w	r3, r3, #2
 800bb80:	b2d9      	uxtb	r1, r3
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	f003 0304 	and.w	r3, r3, #4
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	f007 f801 	bl	8012b94 <led_write>
		  if(dist_r >= 20){
 800bb92:	4b97      	ldr	r3, [pc, #604]	; (800bdf0 <slalom_run+0x294>)
 800bb94:	edd3 7a00 	vldr	s15, [r3]
 800bb98:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800bb9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bba4:	db0f      	blt.n	800bbc6 <slalom_run+0x6a>
			  mode++;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800bbac:	4b90      	ldr	r3, [pc, #576]	; (800bdf0 <slalom_run+0x294>)
 800bbae:	f04f 0200 	mov.w	r2, #0
 800bbb2:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2b07      	cmp	r3, #7
 800bbb8:	dd01      	ble.n	800bbbe <slalom_run+0x62>
				  mode = 0;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800bbbe:	6879      	ldr	r1, [r7, #4]
 800bbc0:	488c      	ldr	r0, [pc, #560]	; (800bdf4 <slalom_run+0x298>)
 800bbc2:	f007 fdb5 	bl	8013730 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800bbc6:	4b8a      	ldr	r3, [pc, #552]	; (800bdf0 <slalom_run+0x294>)
 800bbc8:	edd3 7a00 	vldr	s15, [r3]
 800bbcc:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800bbd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bbd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd8:	d80f      	bhi.n	800bbfa <slalom_run+0x9e>
			  mode--;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	3b01      	subs	r3, #1
 800bbde:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800bbe0:	4b83      	ldr	r3, [pc, #524]	; (800bdf0 <slalom_run+0x294>)
 800bbe2:	f04f 0200 	mov.w	r2, #0
 800bbe6:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	da01      	bge.n	800bbf2 <slalom_run+0x96>
				  mode = 7;
 800bbee:	2307      	movs	r3, #7
 800bbf0:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800bbf2:	6879      	ldr	r1, [r7, #4]
 800bbf4:	487f      	ldr	r0, [pc, #508]	; (800bdf4 <slalom_run+0x298>)
 800bbf6:	f007 fd9b 	bl	8013730 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800bbfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bbfe:	487e      	ldr	r0, [pc, #504]	; (800bdf8 <slalom_run+0x29c>)
 800bc00:	f7f6 fb68 	bl	80022d4 <HAL_GPIO_ReadPin>
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d1b1      	bne.n	800bb6e <slalom_run+0x12>
			  HAL_Delay(50);
 800bc0a:	2032      	movs	r0, #50	; 0x32
 800bc0c:	f7f5 fa06 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800bc10:	bf00      	nop
 800bc12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bc16:	4878      	ldr	r0, [pc, #480]	; (800bdf8 <slalom_run+0x29c>)
 800bc18:	f7f6 fb5c 	bl	80022d4 <HAL_GPIO_ReadPin>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d0f7      	beq.n	800bc12 <slalom_run+0xb6>
			  drive_ready();
 800bc22:	f7f9 f827 	bl	8004c74 <drive_ready>

			  switch(mode){
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2b07      	cmp	r3, #7
 800bc2a:	d8a0      	bhi.n	800bb6e <slalom_run+0x12>
 800bc2c:	a201      	add	r2, pc, #4	; (adr r2, 800bc34 <slalom_run+0xd8>)
 800bc2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc32:	bf00      	nop
 800bc34:	0800bc55 	.word	0x0800bc55
 800bc38:	0800bcc1 	.word	0x0800bcc1
 800bc3c:	0800bd13 	.word	0x0800bd13
 800bc40:	0800bd7f 	.word	0x0800bd7f
 800bc44:	0800be21 	.word	0x0800be21
 800bc48:	0800be8d 	.word	0x0800be8d
 800bc4c:	0800bef1 	.word	0x0800bef1
 800bc50:	0800bf6f 	.word	0x0800bf6f

			  case 0:
					//----一次探索スラローム走行----
					printf("First Run. (Slalom)\n");
 800bc54:	4869      	ldr	r0, [pc, #420]	; (800bdfc <slalom_run+0x2a0>)
 800bc56:	f007 fddf 	bl	8013818 <puts>

					MF.FLAG.SCND = 0;
 800bc5a:	4a69      	ldr	r2, [pc, #420]	; (800be00 <slalom_run+0x2a4>)
 800bc5c:	8813      	ldrh	r3, [r2, #0]
 800bc5e:	f36f 1345 	bfc	r3, #5, #1
 800bc62:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bc64:	4a66      	ldr	r2, [pc, #408]	; (800be00 <slalom_run+0x2a4>)
 800bc66:	8813      	ldrh	r3, [r2, #0]
 800bc68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bc6c:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800bc6e:	4b65      	ldr	r3, [pc, #404]	; (800be04 <slalom_run+0x2a8>)
 800bc70:	2200      	movs	r2, #0
 800bc72:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bc74:	4b64      	ldr	r3, [pc, #400]	; (800be08 <slalom_run+0x2ac>)
 800bc76:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc7a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800bc7c:	4b63      	ldr	r3, [pc, #396]	; (800be0c <slalom_run+0x2b0>)
 800bc7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bc82:	801a      	strh	r2, [r3, #0]


					goal_x = GOAL_X;
 800bc84:	4b62      	ldr	r3, [pc, #392]	; (800be10 <slalom_run+0x2b4>)
 800bc86:	2207      	movs	r2, #7
 800bc88:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bc8a:	4b62      	ldr	r3, [pc, #392]	; (800be14 <slalom_run+0x2b8>)
 800bc8c:	2207      	movs	r2, #7
 800bc8e:	701a      	strb	r2, [r3, #0]

					get_base();
 800bc90:	f006 ff28 	bl	8012ae4 <get_base>

					searchC();
 800bc94:	f003 fd5c 	bl	800f750 <searchC>
					HAL_Delay(2000);
 800bc98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bc9c:	f7f5 f9be 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bca0:	4b5c      	ldr	r3, [pc, #368]	; (800be14 <slalom_run+0x2b8>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	701a      	strb	r2, [r3, #0]
 800bca6:	4b5b      	ldr	r3, [pc, #364]	; (800be14 <slalom_run+0x2b8>)
 800bca8:	781a      	ldrb	r2, [r3, #0]
 800bcaa:	4b59      	ldr	r3, [pc, #356]	; (800be10 <slalom_run+0x2b4>)
 800bcac:	701a      	strb	r2, [r3, #0]
					searchC();
 800bcae:	f003 fd4f 	bl	800f750 <searchC>

					goal_x = GOAL_X;
 800bcb2:	4b57      	ldr	r3, [pc, #348]	; (800be10 <slalom_run+0x2b4>)
 800bcb4:	2207      	movs	r2, #7
 800bcb6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bcb8:	4b56      	ldr	r3, [pc, #344]	; (800be14 <slalom_run+0x2b8>)
 800bcba:	2207      	movs	r2, #7
 800bcbc:	701a      	strb	r2, [r3, #0]
					break;
 800bcbe:	e195      	b.n	800bfec <slalom_run+0x490>

				case 1:
					//----二次探索スラローム走行----
					printf("Second Run. (Slalom)\n");
 800bcc0:	4855      	ldr	r0, [pc, #340]	; (800be18 <slalom_run+0x2bc>)
 800bcc2:	f007 fda9 	bl	8013818 <puts>

					MF.FLAG.SCND = 1;
 800bcc6:	4a4e      	ldr	r2, [pc, #312]	; (800be00 <slalom_run+0x2a4>)
 800bcc8:	8813      	ldrh	r3, [r2, #0]
 800bcca:	f043 0320 	orr.w	r3, r3, #32
 800bcce:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800bcd0:	4b4c      	ldr	r3, [pc, #304]	; (800be04 <slalom_run+0x2a8>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800bcd6:	4b4e      	ldr	r3, [pc, #312]	; (800be10 <slalom_run+0x2b4>)
 800bcd8:	2207      	movs	r2, #7
 800bcda:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bcdc:	4b4d      	ldr	r3, [pc, #308]	; (800be14 <slalom_run+0x2b8>)
 800bcde:	2207      	movs	r2, #7
 800bce0:	701a      	strb	r2, [r3, #0]

					get_base();
 800bce2:	f006 feff 	bl	8012ae4 <get_base>

					searchC();
 800bce6:	f003 fd33 	bl	800f750 <searchC>
					HAL_Delay(2000);
 800bcea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bcee:	f7f5 f995 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bcf2:	4b48      	ldr	r3, [pc, #288]	; (800be14 <slalom_run+0x2b8>)
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	701a      	strb	r2, [r3, #0]
 800bcf8:	4b46      	ldr	r3, [pc, #280]	; (800be14 <slalom_run+0x2b8>)
 800bcfa:	781a      	ldrb	r2, [r3, #0]
 800bcfc:	4b44      	ldr	r3, [pc, #272]	; (800be10 <slalom_run+0x2b4>)
 800bcfe:	701a      	strb	r2, [r3, #0]
					searchC();
 800bd00:	f003 fd26 	bl	800f750 <searchC>

					goal_x = GOAL_X;
 800bd04:	4b42      	ldr	r3, [pc, #264]	; (800be10 <slalom_run+0x2b4>)
 800bd06:	2207      	movs	r2, #7
 800bd08:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bd0a:	4b42      	ldr	r3, [pc, #264]	; (800be14 <slalom_run+0x2b8>)
 800bd0c:	2207      	movs	r2, #7
 800bd0e:	701a      	strb	r2, [r3, #0]
					break;
 800bd10:	e16c      	b.n	800bfec <slalom_run+0x490>

				case 2:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800bd12:	4842      	ldr	r0, [pc, #264]	; (800be1c <slalom_run+0x2c0>)
 800bd14:	f007 fd80 	bl	8013818 <puts>

					MF.FLAG.SCND = 1;
 800bd18:	4a39      	ldr	r2, [pc, #228]	; (800be00 <slalom_run+0x2a4>)
 800bd1a:	8813      	ldrh	r3, [r2, #0]
 800bd1c:	f043 0320 	orr.w	r3, r3, #32
 800bd20:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bd22:	4a37      	ldr	r2, [pc, #220]	; (800be00 <slalom_run+0x2a4>)
 800bd24:	8813      	ldrh	r3, [r2, #0]
 800bd26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bd2a:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800bd2c:	4b35      	ldr	r3, [pc, #212]	; (800be04 <slalom_run+0x2a8>)
 800bd2e:	2200      	movs	r2, #0
 800bd30:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bd32:	4b35      	ldr	r3, [pc, #212]	; (800be08 <slalom_run+0x2ac>)
 800bd34:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd38:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 600;
 800bd3a:	4b34      	ldr	r3, [pc, #208]	; (800be0c <slalom_run+0x2b0>)
 800bd3c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800bd40:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800bd42:	4b33      	ldr	r3, [pc, #204]	; (800be10 <slalom_run+0x2b4>)
 800bd44:	2207      	movs	r2, #7
 800bd46:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bd48:	4b32      	ldr	r3, [pc, #200]	; (800be14 <slalom_run+0x2b8>)
 800bd4a:	2207      	movs	r2, #7
 800bd4c:	701a      	strb	r2, [r3, #0]

					get_base();
 800bd4e:	f006 fec9 	bl	8012ae4 <get_base>

					searchD();
 800bd52:	f003 fed3 	bl	800fafc <searchD>
					HAL_Delay(2000);
 800bd56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bd5a:	f7f5 f95f 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bd5e:	4b2d      	ldr	r3, [pc, #180]	; (800be14 <slalom_run+0x2b8>)
 800bd60:	2200      	movs	r2, #0
 800bd62:	701a      	strb	r2, [r3, #0]
 800bd64:	4b2b      	ldr	r3, [pc, #172]	; (800be14 <slalom_run+0x2b8>)
 800bd66:	781a      	ldrb	r2, [r3, #0]
 800bd68:	4b29      	ldr	r3, [pc, #164]	; (800be10 <slalom_run+0x2b4>)
 800bd6a:	701a      	strb	r2, [r3, #0]
					searchD();
 800bd6c:	f003 fec6 	bl	800fafc <searchD>

					goal_x = GOAL_X;
 800bd70:	4b27      	ldr	r3, [pc, #156]	; (800be10 <slalom_run+0x2b4>)
 800bd72:	2207      	movs	r2, #7
 800bd74:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bd76:	4b27      	ldr	r3, [pc, #156]	; (800be14 <slalom_run+0x2b8>)
 800bd78:	2207      	movs	r2, #7
 800bd7a:	701a      	strb	r2, [r3, #0]
					break;
 800bd7c:	e136      	b.n	800bfec <slalom_run+0x490>

				case 3:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800bd7e:	4827      	ldr	r0, [pc, #156]	; (800be1c <slalom_run+0x2c0>)
 800bd80:	f007 fd4a 	bl	8013818 <puts>

					MF.FLAG.SCND = 1;
 800bd84:	4a1e      	ldr	r2, [pc, #120]	; (800be00 <slalom_run+0x2a4>)
 800bd86:	8813      	ldrh	r3, [r2, #0]
 800bd88:	f043 0320 	orr.w	r3, r3, #32
 800bd8c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bd8e:	4a1c      	ldr	r2, [pc, #112]	; (800be00 <slalom_run+0x2a4>)
 800bd90:	8813      	ldrh	r3, [r2, #0]
 800bd92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bd96:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800bd98:	4b1a      	ldr	r3, [pc, #104]	; (800be04 <slalom_run+0x2a8>)
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bd9e:	4b1a      	ldr	r3, [pc, #104]	; (800be08 <slalom_run+0x2ac>)
 800bda0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bda4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1000;
 800bda6:	4b19      	ldr	r3, [pc, #100]	; (800be0c <slalom_run+0x2b0>)
 800bda8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bdac:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800bdae:	4b18      	ldr	r3, [pc, #96]	; (800be10 <slalom_run+0x2b4>)
 800bdb0:	2207      	movs	r2, #7
 800bdb2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bdb4:	4b17      	ldr	r3, [pc, #92]	; (800be14 <slalom_run+0x2b8>)
 800bdb6:	2207      	movs	r2, #7
 800bdb8:	701a      	strb	r2, [r3, #0]

					get_base();
 800bdba:	f006 fe93 	bl	8012ae4 <get_base>

					searchD();
 800bdbe:	f003 fe9d 	bl	800fafc <searchD>
					HAL_Delay(2000);
 800bdc2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bdc6:	f7f5 f929 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bdca:	4b12      	ldr	r3, [pc, #72]	; (800be14 <slalom_run+0x2b8>)
 800bdcc:	2200      	movs	r2, #0
 800bdce:	701a      	strb	r2, [r3, #0]
 800bdd0:	4b10      	ldr	r3, [pc, #64]	; (800be14 <slalom_run+0x2b8>)
 800bdd2:	781a      	ldrb	r2, [r3, #0]
 800bdd4:	4b0e      	ldr	r3, [pc, #56]	; (800be10 <slalom_run+0x2b4>)
 800bdd6:	701a      	strb	r2, [r3, #0]
					searchD();
 800bdd8:	f003 fe90 	bl	800fafc <searchD>

					goal_x = GOAL_X;
 800bddc:	4b0c      	ldr	r3, [pc, #48]	; (800be10 <slalom_run+0x2b4>)
 800bdde:	2207      	movs	r2, #7
 800bde0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bde2:	4b0c      	ldr	r3, [pc, #48]	; (800be14 <slalom_run+0x2b8>)
 800bde4:	2207      	movs	r2, #7
 800bde6:	701a      	strb	r2, [r3, #0]
					break;
 800bde8:	e100      	b.n	800bfec <slalom_run+0x490>
 800bdea:	bf00      	nop
 800bdec:	08014d04 	.word	0x08014d04
 800bdf0:	20000b2c 	.word	0x20000b2c
 800bdf4:	08014984 	.word	0x08014984
 800bdf8:	40020000 	.word	0x40020000
 800bdfc:	08014c68 	.word	0x08014c68
 800be00:	20000fac 	.word	0x20000fac
 800be04:	200012ec 	.word	0x200012ec
 800be08:	2000048c 	.word	0x2000048c
 800be0c:	20000fc0 	.word	0x20000fc0
 800be10:	20000bf1 	.word	0x20000bf1
 800be14:	20000b8c 	.word	0x20000b8c
 800be18:	08014d1c 	.word	0x08014d1c
 800be1c:	08014d34 	.word	0x08014d34

				case 4:
					//----二次探索スラローム走行+既知区間加速----
					printf("Second Run. (Slalom+accel)\n");
 800be20:	4873      	ldr	r0, [pc, #460]	; (800bff0 <slalom_run+0x494>)
 800be22:	f007 fcf9 	bl	8013818 <puts>

					MF.FLAG.SCND = 1;
 800be26:	4a73      	ldr	r2, [pc, #460]	; (800bff4 <slalom_run+0x498>)
 800be28:	8813      	ldrh	r3, [r2, #0]
 800be2a:	f043 0320 	orr.w	r3, r3, #32
 800be2e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800be30:	4a70      	ldr	r2, [pc, #448]	; (800bff4 <slalom_run+0x498>)
 800be32:	8813      	ldrh	r3, [r2, #0]
 800be34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800be38:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800be3a:	4b6f      	ldr	r3, [pc, #444]	; (800bff8 <slalom_run+0x49c>)
 800be3c:	2200      	movs	r2, #0
 800be3e:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800be40:	4b6e      	ldr	r3, [pc, #440]	; (800bffc <slalom_run+0x4a0>)
 800be42:	f241 3288 	movw	r2, #5000	; 0x1388
 800be46:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1500;
 800be48:	4b6d      	ldr	r3, [pc, #436]	; (800c000 <slalom_run+0x4a4>)
 800be4a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800be4e:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800be50:	4b6c      	ldr	r3, [pc, #432]	; (800c004 <slalom_run+0x4a8>)
 800be52:	2207      	movs	r2, #7
 800be54:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800be56:	4b6c      	ldr	r3, [pc, #432]	; (800c008 <slalom_run+0x4ac>)
 800be58:	2207      	movs	r2, #7
 800be5a:	701a      	strb	r2, [r3, #0]

					get_base();
 800be5c:	f006 fe42 	bl	8012ae4 <get_base>

					searchD();
 800be60:	f003 fe4c 	bl	800fafc <searchD>
					HAL_Delay(2000);
 800be64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800be68:	f7f5 f8d8 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800be6c:	4b66      	ldr	r3, [pc, #408]	; (800c008 <slalom_run+0x4ac>)
 800be6e:	2200      	movs	r2, #0
 800be70:	701a      	strb	r2, [r3, #0]
 800be72:	4b65      	ldr	r3, [pc, #404]	; (800c008 <slalom_run+0x4ac>)
 800be74:	781a      	ldrb	r2, [r3, #0]
 800be76:	4b63      	ldr	r3, [pc, #396]	; (800c004 <slalom_run+0x4a8>)
 800be78:	701a      	strb	r2, [r3, #0]
					searchD();
 800be7a:	f003 fe3f 	bl	800fafc <searchD>

					goal_x = GOAL_X;
 800be7e:	4b61      	ldr	r3, [pc, #388]	; (800c004 <slalom_run+0x4a8>)
 800be80:	2207      	movs	r2, #7
 800be82:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800be84:	4b60      	ldr	r3, [pc, #384]	; (800c008 <slalom_run+0x4ac>)
 800be86:	2207      	movs	r2, #7
 800be88:	701a      	strb	r2, [r3, #0]
					break;
 800be8a:	e0af      	b.n	800bfec <slalom_run+0x490>

				case 5:
					//----二次走行スラローム+直線優先----
					printf("High Speed Run. (Slalom)\n");
 800be8c:	485f      	ldr	r0, [pc, #380]	; (800c00c <slalom_run+0x4b0>)
 800be8e:	f007 fcc3 	bl	8013818 <puts>

					MF.FLAG.SCND = 1;
 800be92:	4a58      	ldr	r2, [pc, #352]	; (800bff4 <slalom_run+0x498>)
 800be94:	8813      	ldrh	r3, [r2, #0]
 800be96:	f043 0320 	orr.w	r3, r3, #32
 800be9a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800be9c:	4a55      	ldr	r2, [pc, #340]	; (800bff4 <slalom_run+0x498>)
 800be9e:	8813      	ldrh	r3, [r2, #0]
 800bea0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bea4:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800bea6:	4b54      	ldr	r3, [pc, #336]	; (800bff8 <slalom_run+0x49c>)
 800bea8:	2200      	movs	r2, #0
 800beaa:	701a      	strb	r2, [r3, #0]
					goal_x = GOAL_X;
 800beac:	4b55      	ldr	r3, [pc, #340]	; (800c004 <slalom_run+0x4a8>)
 800beae:	2207      	movs	r2, #7
 800beb0:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800beb2:	4b55      	ldr	r3, [pc, #340]	; (800c008 <slalom_run+0x4ac>)
 800beb4:	2207      	movs	r2, #7
 800beb6:	701a      	strb	r2, [r3, #0]

					get_base();
 800beb8:	f006 fe14 	bl	8012ae4 <get_base>

					HAL_Delay(5000);
 800bebc:	f241 3088 	movw	r0, #5000	; 0x1388
 800bec0:	f7f5 f8ac 	bl	800101c <HAL_Delay>
					searchC();
 800bec4:	f003 fc44 	bl	800f750 <searchC>
					HAL_Delay(2000);
 800bec8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800becc:	f7f5 f8a6 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bed0:	4b4d      	ldr	r3, [pc, #308]	; (800c008 <slalom_run+0x4ac>)
 800bed2:	2200      	movs	r2, #0
 800bed4:	701a      	strb	r2, [r3, #0]
 800bed6:	4b4c      	ldr	r3, [pc, #304]	; (800c008 <slalom_run+0x4ac>)
 800bed8:	781a      	ldrb	r2, [r3, #0]
 800beda:	4b4a      	ldr	r3, [pc, #296]	; (800c004 <slalom_run+0x4a8>)
 800bedc:	701a      	strb	r2, [r3, #0]
					searchC();
 800bede:	f003 fc37 	bl	800f750 <searchC>

					goal_x = GOAL_X;
 800bee2:	4b48      	ldr	r3, [pc, #288]	; (800c004 <slalom_run+0x4a8>)
 800bee4:	2207      	movs	r2, #7
 800bee6:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bee8:	4b47      	ldr	r3, [pc, #284]	; (800c008 <slalom_run+0x4ac>)
 800beea:	2207      	movs	r2, #7
 800beec:	701a      	strb	r2, [r3, #0]
					break;
 800beee:	e07d      	b.n	800bfec <slalom_run+0x490>

				case 6:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800bef0:	4846      	ldr	r0, [pc, #280]	; (800c00c <slalom_run+0x4b0>)
 800bef2:	f007 fc91 	bl	8013818 <puts>

					MF.FLAG.SCND = 1;
 800bef6:	4a3f      	ldr	r2, [pc, #252]	; (800bff4 <slalom_run+0x498>)
 800bef8:	8813      	ldrh	r3, [r2, #0]
 800befa:	f043 0320 	orr.w	r3, r3, #32
 800befe:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bf00:	4a3c      	ldr	r2, [pc, #240]	; (800bff4 <slalom_run+0x498>)
 800bf02:	8813      	ldrh	r3, [r2, #0]
 800bf04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bf08:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bf0a:	4a3a      	ldr	r2, [pc, #232]	; (800bff4 <slalom_run+0x498>)
 800bf0c:	8813      	ldrh	r3, [r2, #0]
 800bf0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bf12:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800bf14:	4b38      	ldr	r3, [pc, #224]	; (800bff8 <slalom_run+0x49c>)
 800bf16:	2200      	movs	r2, #0
 800bf18:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bf1a:	4b38      	ldr	r3, [pc, #224]	; (800bffc <slalom_run+0x4a0>)
 800bf1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf20:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800bf22:	4b37      	ldr	r3, [pc, #220]	; (800c000 <slalom_run+0x4a4>)
 800bf24:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800bf28:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800bf2a:	4b36      	ldr	r3, [pc, #216]	; (800c004 <slalom_run+0x4a8>)
 800bf2c:	2207      	movs	r2, #7
 800bf2e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bf30:	4b35      	ldr	r3, [pc, #212]	; (800c008 <slalom_run+0x4ac>)
 800bf32:	2207      	movs	r2, #7
 800bf34:	701a      	strb	r2, [r3, #0]

					get_base();
 800bf36:	f006 fdd5 	bl	8012ae4 <get_base>

					HAL_Delay(5000);
 800bf3a:	f241 3088 	movw	r0, #5000	; 0x1388
 800bf3e:	f7f5 f86d 	bl	800101c <HAL_Delay>
					searchD2();
 800bf42:	f003 fedd 	bl	800fd00 <searchD2>
					HAL_Delay(2000);
 800bf46:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bf4a:	f7f5 f867 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bf4e:	4b2e      	ldr	r3, [pc, #184]	; (800c008 <slalom_run+0x4ac>)
 800bf50:	2200      	movs	r2, #0
 800bf52:	701a      	strb	r2, [r3, #0]
 800bf54:	4b2c      	ldr	r3, [pc, #176]	; (800c008 <slalom_run+0x4ac>)
 800bf56:	781a      	ldrb	r2, [r3, #0]
 800bf58:	4b2a      	ldr	r3, [pc, #168]	; (800c004 <slalom_run+0x4a8>)
 800bf5a:	701a      	strb	r2, [r3, #0]
					searchD2();
 800bf5c:	f003 fed0 	bl	800fd00 <searchD2>

					goal_x = GOAL_X;
 800bf60:	4b28      	ldr	r3, [pc, #160]	; (800c004 <slalom_run+0x4a8>)
 800bf62:	2207      	movs	r2, #7
 800bf64:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bf66:	4b28      	ldr	r3, [pc, #160]	; (800c008 <slalom_run+0x4ac>)
 800bf68:	2207      	movs	r2, #7
 800bf6a:	701a      	strb	r2, [r3, #0]
					break;
 800bf6c:	e03e      	b.n	800bfec <slalom_run+0x490>

				case 7:
					//----二次走行スラロームHigh Speed+直線優先+既知区間加速----
					printf("High Speed Run. (Slalom)\n");
 800bf6e:	4827      	ldr	r0, [pc, #156]	; (800c00c <slalom_run+0x4b0>)
 800bf70:	f007 fc52 	bl	8013818 <puts>

					MF.FLAG.SCND = 1;
 800bf74:	4a1f      	ldr	r2, [pc, #124]	; (800bff4 <slalom_run+0x498>)
 800bf76:	8813      	ldrh	r3, [r2, #0]
 800bf78:	f043 0320 	orr.w	r3, r3, #32
 800bf7c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800bf7e:	4a1d      	ldr	r2, [pc, #116]	; (800bff4 <slalom_run+0x498>)
 800bf80:	8813      	ldrh	r3, [r2, #0]
 800bf82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bf86:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800bf88:	4a1a      	ldr	r2, [pc, #104]	; (800bff4 <slalom_run+0x498>)
 800bf8a:	8813      	ldrh	r3, [r2, #0]
 800bf8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bf90:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800bf92:	4b19      	ldr	r3, [pc, #100]	; (800bff8 <slalom_run+0x49c>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800bf98:	4b18      	ldr	r3, [pc, #96]	; (800bffc <slalom_run+0x4a0>)
 800bf9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf9e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800bfa0:	4b17      	ldr	r3, [pc, #92]	; (800c000 <slalom_run+0x4a4>)
 800bfa2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bfa6:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800bfa8:	4b16      	ldr	r3, [pc, #88]	; (800c004 <slalom_run+0x4a8>)
 800bfaa:	2207      	movs	r2, #7
 800bfac:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bfae:	4b16      	ldr	r3, [pc, #88]	; (800c008 <slalom_run+0x4ac>)
 800bfb0:	2207      	movs	r2, #7
 800bfb2:	701a      	strb	r2, [r3, #0]

					get_base();
 800bfb4:	f006 fd96 	bl	8012ae4 <get_base>

					HAL_Delay(5000);
 800bfb8:	f241 3088 	movw	r0, #5000	; 0x1388
 800bfbc:	f7f5 f82e 	bl	800101c <HAL_Delay>
					searchD2();
 800bfc0:	f003 fe9e 	bl	800fd00 <searchD2>
					HAL_Delay(2000);
 800bfc4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bfc8:	f7f5 f828 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800bfcc:	4b0e      	ldr	r3, [pc, #56]	; (800c008 <slalom_run+0x4ac>)
 800bfce:	2200      	movs	r2, #0
 800bfd0:	701a      	strb	r2, [r3, #0]
 800bfd2:	4b0d      	ldr	r3, [pc, #52]	; (800c008 <slalom_run+0x4ac>)
 800bfd4:	781a      	ldrb	r2, [r3, #0]
 800bfd6:	4b0b      	ldr	r3, [pc, #44]	; (800c004 <slalom_run+0x4a8>)
 800bfd8:	701a      	strb	r2, [r3, #0]
					searchD2();
 800bfda:	f003 fe91 	bl	800fd00 <searchD2>

					goal_x = GOAL_X;
 800bfde:	4b09      	ldr	r3, [pc, #36]	; (800c004 <slalom_run+0x4a8>)
 800bfe0:	2207      	movs	r2, #7
 800bfe2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800bfe4:	4b08      	ldr	r3, [pc, #32]	; (800c008 <slalom_run+0x4ac>)
 800bfe6:	2207      	movs	r2, #7
 800bfe8:	701a      	strb	r2, [r3, #0]
					break;
 800bfea:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800bfec:	e5bf      	b.n	800bb6e <slalom_run+0x12>
 800bfee:	bf00      	nop
 800bff0:	08014d34 	.word	0x08014d34
 800bff4:	20000fac 	.word	0x20000fac
 800bff8:	200012ec 	.word	0x200012ec
 800bffc:	2000048c 	.word	0x2000048c
 800c000:	20000fc0 	.word	0x20000fc0
 800c004:	20000bf1 	.word	0x20000bf1
 800c008:	20000b8c 	.word	0x20000b8c
 800c00c:	08014d50 	.word	0x08014d50

0800c010 <sample_course_run>:
//sample_course_run
// 試験走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sample_course_run(void){
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0

	int mode = 0;
 800c016:	2300      	movs	r3, #0
 800c018:	607b      	str	r3, [r7, #4]
	printf("Sample Course Run, Mode : %d\n", mode);
 800c01a:	6879      	ldr	r1, [r7, #4]
 800c01c:	488f      	ldr	r0, [pc, #572]	; (800c25c <sample_course_run+0x24c>)
 800c01e:	f007 fb87 	bl	8013730 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	b2db      	uxtb	r3, r3
 800c026:	f003 0301 	and.w	r3, r3, #1
 800c02a:	b2d8      	uxtb	r0, r3
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	f003 0302 	and.w	r3, r3, #2
 800c034:	b2d9      	uxtb	r1, r3
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	f003 0304 	and.w	r3, r3, #4
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	461a      	mov	r2, r3
 800c042:	f006 fda7 	bl	8012b94 <led_write>
		  if(dist_r >= 20){
 800c046:	4b86      	ldr	r3, [pc, #536]	; (800c260 <sample_course_run+0x250>)
 800c048:	edd3 7a00 	vldr	s15, [r3]
 800c04c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800c050:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c058:	db0f      	blt.n	800c07a <sample_course_run+0x6a>
			  mode++;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	3301      	adds	r3, #1
 800c05e:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800c060:	4b7f      	ldr	r3, [pc, #508]	; (800c260 <sample_course_run+0x250>)
 800c062:	f04f 0200 	mov.w	r2, #0
 800c066:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2b07      	cmp	r3, #7
 800c06c:	dd01      	ble.n	800c072 <sample_course_run+0x62>
				  mode = 0;
 800c06e:	2300      	movs	r3, #0
 800c070:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800c072:	6879      	ldr	r1, [r7, #4]
 800c074:	487b      	ldr	r0, [pc, #492]	; (800c264 <sample_course_run+0x254>)
 800c076:	f007 fb5b 	bl	8013730 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 800c07a:	4b79      	ldr	r3, [pc, #484]	; (800c260 <sample_course_run+0x250>)
 800c07c:	edd3 7a00 	vldr	s15, [r3]
 800c080:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800c084:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c08c:	d80f      	bhi.n	800c0ae <sample_course_run+0x9e>
			  mode--;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	3b01      	subs	r3, #1
 800c092:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800c094:	4b72      	ldr	r3, [pc, #456]	; (800c260 <sample_course_run+0x250>)
 800c096:	f04f 0200 	mov.w	r2, #0
 800c09a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	da01      	bge.n	800c0a6 <sample_course_run+0x96>
				  mode = 7;
 800c0a2:	2307      	movs	r3, #7
 800c0a4:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800c0a6:	6879      	ldr	r1, [r7, #4]
 800c0a8:	486e      	ldr	r0, [pc, #440]	; (800c264 <sample_course_run+0x254>)
 800c0aa:	f007 fb41 	bl	8013730 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800c0ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c0b2:	486d      	ldr	r0, [pc, #436]	; (800c268 <sample_course_run+0x258>)
 800c0b4:	f7f6 f90e 	bl	80022d4 <HAL_GPIO_ReadPin>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d1b1      	bne.n	800c022 <sample_course_run+0x12>
			  HAL_Delay(50);
 800c0be:	2032      	movs	r0, #50	; 0x32
 800c0c0:	f7f4 ffac 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800c0c4:	bf00      	nop
 800c0c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c0ca:	4867      	ldr	r0, [pc, #412]	; (800c268 <sample_course_run+0x258>)
 800c0cc:	f7f6 f902 	bl	80022d4 <HAL_GPIO_ReadPin>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d0f7      	beq.n	800c0c6 <sample_course_run+0xb6>
			  drive_ready();
 800c0d6:	f7f8 fdcd 	bl	8004c74 <drive_ready>

			  switch(mode){
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2b07      	cmp	r3, #7
 800c0de:	d8a0      	bhi.n	800c022 <sample_course_run+0x12>
 800c0e0:	a201      	add	r2, pc, #4	; (adr r2, 800c0e8 <sample_course_run+0xd8>)
 800c0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e6:	bf00      	nop
 800c0e8:	0800c109 	.word	0x0800c109
 800c0ec:	0800c10f 	.word	0x0800c10f
 800c0f0:	0800c131 	.word	0x0800c131
 800c0f4:	0800c153 	.word	0x0800c153
 800c0f8:	0800c023 	.word	0x0800c023
 800c0fc:	0800c165 	.word	0x0800c165
 800c100:	0800c1df 	.word	0x0800c1df
 800c104:	0800c023 	.word	0x0800c023
				case 0:
					get_base();
 800c108:	f006 fcec 	bl	8012ae4 <get_base>
					break;
 800c10c:	e0a4      	b.n	800c258 <sample_course_run+0x248>

				case 1:
					//----サンプルコース1　超信地----
					half_sectionA();
 800c10e:	f7f9 f9cd 	bl	80054ac <half_sectionA>
					half_sectionD();
 800c112:	f7f9 f9e5 	bl	80054e0 <half_sectionD>
					rotate_R90();
 800c116:	f7f9 fb8f 	bl	8005838 <rotate_R90>
					half_sectionA();
 800c11a:	f7f9 f9c7 	bl	80054ac <half_sectionA>
					half_sectionD();
 800c11e:	f7f9 f9df 	bl	80054e0 <half_sectionD>
					rotate_R90();
 800c122:	f7f9 fb89 	bl	8005838 <rotate_R90>
					half_sectionA();
 800c126:	f7f9 f9c1 	bl	80054ac <half_sectionA>
					half_sectionD();
 800c12a:	f7f9 f9d9 	bl	80054e0 <half_sectionD>
					break;
 800c12e:	e093      	b.n	800c258 <sample_course_run+0x248>

				case 2:
					//----サンプルコース1　超信地----
					half_sectionA();
 800c130:	f7f9 f9bc 	bl	80054ac <half_sectionA>
					half_sectionD();
 800c134:	f7f9 f9d4 	bl	80054e0 <half_sectionD>
					rotate_L90();
 800c138:	f7f9 fc5a 	bl	80059f0 <rotate_L90>
					half_sectionA();
 800c13c:	f7f9 f9b6 	bl	80054ac <half_sectionA>
					half_sectionD();
 800c140:	f7f9 f9ce 	bl	80054e0 <half_sectionD>
					rotate_L90();
 800c144:	f7f9 fc54 	bl	80059f0 <rotate_L90>
					half_sectionA();
 800c148:	f7f9 f9b0 	bl	80054ac <half_sectionA>
					half_sectionD();
 800c14c:	f7f9 f9c8 	bl	80054e0 <half_sectionD>
					break;
 800c150:	e082      	b.n	800c258 <sample_course_run+0x248>

				case 3:
					//---サンプルコース2　スラローム----
					half_sectionA();
 800c152:	f7f9 f9ab 	bl	80054ac <half_sectionA>
					slalom_R90();
 800c156:	f7f9 fdff 	bl	8005d58 <slalom_R90>
					slalom_R90();
 800c15a:	f7f9 fdfd 	bl	8005d58 <slalom_R90>
					half_sectionD();
 800c15e:	f7f9 f9bf 	bl	80054e0 <half_sectionD>
					break;
 800c162:	e079      	b.n	800c258 <sample_course_run+0x248>
					goal_y = GOAL_Y;
*/					break;

				case 5:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800c164:	4841      	ldr	r0, [pc, #260]	; (800c26c <sample_course_run+0x25c>)
 800c166:	f007 fb57 	bl	8013818 <puts>

					MF.FLAG.SCND = 0;
 800c16a:	4a41      	ldr	r2, [pc, #260]	; (800c270 <sample_course_run+0x260>)
 800c16c:	8813      	ldrh	r3, [r2, #0]
 800c16e:	f36f 1345 	bfc	r3, #5, #1
 800c172:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c174:	4a3e      	ldr	r2, [pc, #248]	; (800c270 <sample_course_run+0x260>)
 800c176:	8813      	ldrh	r3, [r2, #0]
 800c178:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c17c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c17e:	4a3c      	ldr	r2, [pc, #240]	; (800c270 <sample_course_run+0x260>)
 800c180:	8813      	ldrh	r3, [r2, #0]
 800c182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c186:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800c188:	4b3a      	ldr	r3, [pc, #232]	; (800c274 <sample_course_run+0x264>)
 800c18a:	2200      	movs	r2, #0
 800c18c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c18e:	4b3a      	ldr	r3, [pc, #232]	; (800c278 <sample_course_run+0x268>)
 800c190:	f241 3288 	movw	r2, #5000	; 0x1388
 800c194:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800c196:	4b39      	ldr	r3, [pc, #228]	; (800c27c <sample_course_run+0x26c>)
 800c198:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c19c:	801a      	strh	r2, [r3, #0]

					goal_x = GOAL_X;
 800c19e:	4b38      	ldr	r3, [pc, #224]	; (800c280 <sample_course_run+0x270>)
 800c1a0:	2207      	movs	r2, #7
 800c1a2:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c1a4:	4b37      	ldr	r3, [pc, #220]	; (800c284 <sample_course_run+0x274>)
 800c1a6:	2207      	movs	r2, #7
 800c1a8:	701a      	strb	r2, [r3, #0]

					get_base();
 800c1aa:	f006 fc9b 	bl	8012ae4 <get_base>

					searchC();
 800c1ae:	f003 facf 	bl	800f750 <searchC>
					HAL_Delay(2000);
 800c1b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c1b6:	f7f4 ff31 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c1ba:	4b32      	ldr	r3, [pc, #200]	; (800c284 <sample_course_run+0x274>)
 800c1bc:	2200      	movs	r2, #0
 800c1be:	701a      	strb	r2, [r3, #0]
 800c1c0:	4b30      	ldr	r3, [pc, #192]	; (800c284 <sample_course_run+0x274>)
 800c1c2:	781a      	ldrb	r2, [r3, #0]
 800c1c4:	4b2e      	ldr	r3, [pc, #184]	; (800c280 <sample_course_run+0x270>)
 800c1c6:	701a      	strb	r2, [r3, #0]
					searchE();
 800c1c8:	f003 fe92 	bl	800fef0 <searchE>

					searchC();
 800c1cc:	f003 fac0 	bl	800f750 <searchC>
					goal_x = GOAL_X;
 800c1d0:	4b2b      	ldr	r3, [pc, #172]	; (800c280 <sample_course_run+0x270>)
 800c1d2:	2207      	movs	r2, #7
 800c1d4:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c1d6:	4b2b      	ldr	r3, [pc, #172]	; (800c284 <sample_course_run+0x274>)
 800c1d8:	2207      	movs	r2, #7
 800c1da:	701a      	strb	r2, [r3, #0]

					break;
 800c1dc:	e03c      	b.n	800c258 <sample_course_run+0x248>

				case 6:
					//----スラローム走行&全面探索スラローム走行----
					printf("Slalom Run & All Map Run.\n");
 800c1de:	4823      	ldr	r0, [pc, #140]	; (800c26c <sample_course_run+0x25c>)
 800c1e0:	f007 fb1a 	bl	8013818 <puts>

					MF.FLAG.SCND = 0;
 800c1e4:	4a22      	ldr	r2, [pc, #136]	; (800c270 <sample_course_run+0x260>)
 800c1e6:	8813      	ldrh	r3, [r2, #0]
 800c1e8:	f36f 1345 	bfc	r3, #5, #1
 800c1ec:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c1ee:	4a20      	ldr	r2, [pc, #128]	; (800c270 <sample_course_run+0x260>)
 800c1f0:	8813      	ldrh	r3, [r2, #0]
 800c1f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c1f6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c1f8:	4a1d      	ldr	r2, [pc, #116]	; (800c270 <sample_course_run+0x260>)
 800c1fa:	8813      	ldrh	r3, [r2, #0]
 800c1fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c200:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800c202:	4b1c      	ldr	r3, [pc, #112]	; (800c274 <sample_course_run+0x264>)
 800c204:	2200      	movs	r2, #0
 800c206:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c208:	4b1b      	ldr	r3, [pc, #108]	; (800c278 <sample_course_run+0x268>)
 800c20a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c20e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800c210:	4b1a      	ldr	r3, [pc, #104]	; (800c27c <sample_course_run+0x26c>)
 800c212:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c216:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800c218:	4b19      	ldr	r3, [pc, #100]	; (800c280 <sample_course_run+0x270>)
 800c21a:	2207      	movs	r2, #7
 800c21c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c21e:	4b19      	ldr	r3, [pc, #100]	; (800c284 <sample_course_run+0x274>)
 800c220:	2207      	movs	r2, #7
 800c222:	701a      	strb	r2, [r3, #0]

					get_base();
 800c224:	f006 fc5e 	bl	8012ae4 <get_base>

					searchC();
 800c228:	f003 fa92 	bl	800f750 <searchC>
					HAL_Delay(2000);
 800c22c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c230:	f7f4 fef4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c234:	4b13      	ldr	r3, [pc, #76]	; (800c284 <sample_course_run+0x274>)
 800c236:	2200      	movs	r2, #0
 800c238:	701a      	strb	r2, [r3, #0]
 800c23a:	4b12      	ldr	r3, [pc, #72]	; (800c284 <sample_course_run+0x274>)
 800c23c:	781a      	ldrb	r2, [r3, #0]
 800c23e:	4b10      	ldr	r3, [pc, #64]	; (800c280 <sample_course_run+0x270>)
 800c240:	701a      	strb	r2, [r3, #0]
					searchE();
 800c242:	f003 fe55 	bl	800fef0 <searchE>

					searchC();
 800c246:	f003 fa83 	bl	800f750 <searchC>
					goal_x = 7;
 800c24a:	4b0d      	ldr	r3, [pc, #52]	; (800c280 <sample_course_run+0x270>)
 800c24c:	2207      	movs	r2, #7
 800c24e:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c250:	4b0c      	ldr	r3, [pc, #48]	; (800c284 <sample_course_run+0x274>)
 800c252:	2207      	movs	r2, #7
 800c254:	701a      	strb	r2, [r3, #0]

					break;
 800c256:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800c258:	e6e3      	b.n	800c022 <sample_course_run+0x12>
 800c25a:	bf00      	nop
 800c25c:	08014d6c 	.word	0x08014d6c
 800c260:	20000b2c 	.word	0x20000b2c
 800c264:	08014984 	.word	0x08014984
 800c268:	40020000 	.word	0x40020000
 800c26c:	08014d8c 	.word	0x08014d8c
 800c270:	20000fac 	.word	0x20000fac
 800c274:	200012ec 	.word	0x200012ec
 800c278:	2000048c 	.word	0x2000048c
 800c27c:	20000fc0 	.word	0x20000fc0
 800c280:	20000bf1 	.word	0x20000bf1
 800c284:	20000b8c 	.word	0x20000b8c

0800c288 <perfect_slalom>:
//perfect_slalom
// 本番用スラローム走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_slalom(void){
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0

	int mode = 0;
 800c28e:	2300      	movs	r3, #0
 800c290:	607b      	str	r3, [r7, #4]
	printf("Perfect Slalom, Mode : %d\n", mode);
 800c292:	6879      	ldr	r1, [r7, #4]
 800c294:	48a6      	ldr	r0, [pc, #664]	; (800c530 <perfect_slalom+0x2a8>)
 800c296:	f007 fa4b 	bl	8013730 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	f003 0301 	and.w	r3, r3, #1
 800c2a2:	b2d8      	uxtb	r0, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	f003 0302 	and.w	r3, r3, #2
 800c2ac:	b2d9      	uxtb	r1, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	f003 0304 	and.w	r3, r3, #4
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	f006 fc6b 	bl	8012b94 <led_write>
		  if(dist_r >= 20){
 800c2be:	4b9d      	ldr	r3, [pc, #628]	; (800c534 <perfect_slalom+0x2ac>)
 800c2c0:	edd3 7a00 	vldr	s15, [r3]
 800c2c4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800c2c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d0:	db0f      	blt.n	800c2f2 <perfect_slalom+0x6a>
			  mode++;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800c2d8:	4b96      	ldr	r3, [pc, #600]	; (800c534 <perfect_slalom+0x2ac>)
 800c2da:	f04f 0200 	mov.w	r2, #0
 800c2de:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2b07      	cmp	r3, #7
 800c2e4:	dd01      	ble.n	800c2ea <perfect_slalom+0x62>
				  mode = 0;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800c2ea:	6879      	ldr	r1, [r7, #4]
 800c2ec:	4892      	ldr	r0, [pc, #584]	; (800c538 <perfect_slalom+0x2b0>)
 800c2ee:	f007 fa1f 	bl	8013730 <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(dist_r <= -20){
 800c2f2:	4b90      	ldr	r3, [pc, #576]	; (800c534 <perfect_slalom+0x2ac>)
 800c2f4:	edd3 7a00 	vldr	s15, [r3]
 800c2f8:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800c2fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c304:	d80f      	bhi.n	800c326 <perfect_slalom+0x9e>
			  mode--;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	3b01      	subs	r3, #1
 800c30a:	607b      	str	r3, [r7, #4]
			  dist_r = 0;
 800c30c:	4b89      	ldr	r3, [pc, #548]	; (800c534 <perfect_slalom+0x2ac>)
 800c30e:	f04f 0200 	mov.w	r2, #0
 800c312:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	da01      	bge.n	800c31e <perfect_slalom+0x96>
				  mode = 7;
 800c31a:	2307      	movs	r3, #7
 800c31c:	607b      	str	r3, [r7, #4]
			  }
			  printf("Mode : %d\n", mode);
 800c31e:	6879      	ldr	r1, [r7, #4]
 800c320:	4885      	ldr	r0, [pc, #532]	; (800c538 <perfect_slalom+0x2b0>)
 800c322:	f007 fa05 	bl	8013730 <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800c326:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c32a:	4884      	ldr	r0, [pc, #528]	; (800c53c <perfect_slalom+0x2b4>)
 800c32c:	f7f5 ffd2 	bl	80022d4 <HAL_GPIO_ReadPin>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d1b1      	bne.n	800c29a <perfect_slalom+0x12>
			  HAL_Delay(50);
 800c336:	2032      	movs	r0, #50	; 0x32
 800c338:	f7f4 fe70 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800c33c:	bf00      	nop
 800c33e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c342:	487e      	ldr	r0, [pc, #504]	; (800c53c <perfect_slalom+0x2b4>)
 800c344:	f7f5 ffc6 	bl	80022d4 <HAL_GPIO_ReadPin>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d0f7      	beq.n	800c33e <perfect_slalom+0xb6>
/*			  for(int i=0; i<m_ok; i++){
	  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
	  		  }
*/
			  drive_ready();
 800c34e:	f7f8 fc91 	bl	8004c74 <drive_ready>
/*	  		  for(int i=0; i<m_start; i++){
	  			  buzzer(mario_start[i][0], mario_start[i][1]);
	  			  full_led_write(RED);
	  		  }
*/
			  switch(mode){
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2b07      	cmp	r3, #7
 800c356:	d8a0      	bhi.n	800c29a <perfect_slalom+0x12>
 800c358:	a201      	add	r2, pc, #4	; (adr r2, 800c360 <perfect_slalom+0xd8>)
 800c35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c35e:	bf00      	nop
 800c360:	0800c29b 	.word	0x0800c29b
 800c364:	0800c381 	.word	0x0800c381
 800c368:	0800c3dd 	.word	0x0800c3dd
 800c36c:	0800c453 	.word	0x0800c453
 800c370:	0800c4b9 	.word	0x0800c4b9
 800c374:	0800c565 	.word	0x0800c565
 800c378:	0800c5db 	.word	0x0800c5db
 800c37c:	0800c651 	.word	0x0800c651
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800c380:	486f      	ldr	r0, [pc, #444]	; (800c540 <perfect_slalom+0x2b8>)
 800c382:	f007 fa49 	bl	8013818 <puts>
					MF.FLAG.SCND = 0;
 800c386:	4a6f      	ldr	r2, [pc, #444]	; (800c544 <perfect_slalom+0x2bc>)
 800c388:	8813      	ldrh	r3, [r2, #0]
 800c38a:	f36f 1345 	bfc	r3, #5, #1
 800c38e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800c390:	4a6c      	ldr	r2, [pc, #432]	; (800c544 <perfect_slalom+0x2bc>)
 800c392:	8813      	ldrh	r3, [r2, #0]
 800c394:	f36f 2349 	bfc	r3, #9, #1
 800c398:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800c39a:	4b6b      	ldr	r3, [pc, #428]	; (800c548 <perfect_slalom+0x2c0>)
 800c39c:	2200      	movs	r2, #0
 800c39e:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c3a0:	4b6a      	ldr	r3, [pc, #424]	; (800c54c <perfect_slalom+0x2c4>)
 800c3a2:	2207      	movs	r2, #7
 800c3a4:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c3a6:	4b6a      	ldr	r3, [pc, #424]	; (800c550 <perfect_slalom+0x2c8>)
 800c3a8:	2207      	movs	r2, #7
 800c3aa:	701a      	strb	r2, [r3, #0]

					get_base();
 800c3ac:	f006 fb9a 	bl	8012ae4 <get_base>

					searchC();
 800c3b0:	f003 f9ce 	bl	800f750 <searchC>
					HAL_Delay(2000);
 800c3b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c3b8:	f7f4 fe30 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c3bc:	4b64      	ldr	r3, [pc, #400]	; (800c550 <perfect_slalom+0x2c8>)
 800c3be:	2200      	movs	r2, #0
 800c3c0:	701a      	strb	r2, [r3, #0]
 800c3c2:	4b63      	ldr	r3, [pc, #396]	; (800c550 <perfect_slalom+0x2c8>)
 800c3c4:	781a      	ldrb	r2, [r3, #0]
 800c3c6:	4b61      	ldr	r3, [pc, #388]	; (800c54c <perfect_slalom+0x2c4>)
 800c3c8:	701a      	strb	r2, [r3, #0]
					searchC();
 800c3ca:	f003 f9c1 	bl	800f750 <searchC>

					goal_x = 7;
 800c3ce:	4b5f      	ldr	r3, [pc, #380]	; (800c54c <perfect_slalom+0x2c4>)
 800c3d0:	2207      	movs	r2, #7
 800c3d2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c3d4:	4b5e      	ldr	r3, [pc, #376]	; (800c550 <perfect_slalom+0x2c8>)
 800c3d6:	2207      	movs	r2, #7
 800c3d8:	701a      	strb	r2, [r3, #0]
					break;
 800c3da:	e13c      	b.n	800c656 <perfect_slalom+0x3ce>

				case 2:
					//----a二次走行スラローム+既知区間加速走行 speed1----
					printf("First Run. (Continuous)\n");
 800c3dc:	485d      	ldr	r0, [pc, #372]	; (800c554 <perfect_slalom+0x2cc>)
 800c3de:	f007 fa1b 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800c3e2:	4a58      	ldr	r2, [pc, #352]	; (800c544 <perfect_slalom+0x2bc>)
 800c3e4:	8813      	ldrh	r3, [r2, #0]
 800c3e6:	f043 0320 	orr.w	r3, r3, #32
 800c3ea:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c3ec:	4a55      	ldr	r2, [pc, #340]	; (800c544 <perfect_slalom+0x2bc>)
 800c3ee:	8813      	ldrh	r3, [r2, #0]
 800c3f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c3f4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c3f6:	4a53      	ldr	r2, [pc, #332]	; (800c544 <perfect_slalom+0x2bc>)
 800c3f8:	8813      	ldrh	r3, [r2, #0]
 800c3fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c3fe:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800c400:	4b51      	ldr	r3, [pc, #324]	; (800c548 <perfect_slalom+0x2c0>)
 800c402:	2200      	movs	r2, #0
 800c404:	701a      	strb	r2, [r3, #0]

					accel_hs = 5000;
 800c406:	4b54      	ldr	r3, [pc, #336]	; (800c558 <perfect_slalom+0x2d0>)
 800c408:	f241 3288 	movw	r2, #5000	; 0x1388
 800c40c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c40e:	4b53      	ldr	r3, [pc, #332]	; (800c55c <perfect_slalom+0x2d4>)
 800c410:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c414:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800c416:	4b4d      	ldr	r3, [pc, #308]	; (800c54c <perfect_slalom+0x2c4>)
 800c418:	2207      	movs	r2, #7
 800c41a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c41c:	4b4c      	ldr	r3, [pc, #304]	; (800c550 <perfect_slalom+0x2c8>)
 800c41e:	2207      	movs	r2, #7
 800c420:	701a      	strb	r2, [r3, #0]

					get_base();
 800c422:	f006 fb5f 	bl	8012ae4 <get_base>

					searchD();
 800c426:	f003 fb69 	bl	800fafc <searchD>
					HAL_Delay(2000);
 800c42a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c42e:	f7f4 fdf5 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c432:	4b47      	ldr	r3, [pc, #284]	; (800c550 <perfect_slalom+0x2c8>)
 800c434:	2200      	movs	r2, #0
 800c436:	701a      	strb	r2, [r3, #0]
 800c438:	4b45      	ldr	r3, [pc, #276]	; (800c550 <perfect_slalom+0x2c8>)
 800c43a:	781a      	ldrb	r2, [r3, #0]
 800c43c:	4b43      	ldr	r3, [pc, #268]	; (800c54c <perfect_slalom+0x2c4>)
 800c43e:	701a      	strb	r2, [r3, #0]
					searchD();
 800c440:	f003 fb5c 	bl	800fafc <searchD>

					goal_x = 7;
 800c444:	4b41      	ldr	r3, [pc, #260]	; (800c54c <perfect_slalom+0x2c4>)
 800c446:	2207      	movs	r2, #7
 800c448:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c44a:	4b41      	ldr	r3, [pc, #260]	; (800c550 <perfect_slalom+0x2c8>)
 800c44c:	2207      	movs	r2, #7
 800c44e:	701a      	strb	r2, [r3, #0]
					break;
 800c450:	e101      	b.n	800c656 <perfect_slalom+0x3ce>

				case 3:
					//----a二次探索スラロームHigh Speed----
					printf("Second Run. (Slalom)\n");
 800c452:	4843      	ldr	r0, [pc, #268]	; (800c560 <perfect_slalom+0x2d8>)
 800c454:	f007 f9e0 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800c458:	4a3a      	ldr	r2, [pc, #232]	; (800c544 <perfect_slalom+0x2bc>)
 800c45a:	8813      	ldrh	r3, [r2, #0]
 800c45c:	f043 0320 	orr.w	r3, r3, #32
 800c460:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800c462:	4a38      	ldr	r2, [pc, #224]	; (800c544 <perfect_slalom+0x2bc>)
 800c464:	8813      	ldrh	r3, [r2, #0]
 800c466:	f36f 2349 	bfc	r3, #9, #1
 800c46a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c46c:	4a35      	ldr	r2, [pc, #212]	; (800c544 <perfect_slalom+0x2bc>)
 800c46e:	8813      	ldrh	r3, [r2, #0]
 800c470:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c474:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800c476:	4b34      	ldr	r3, [pc, #208]	; (800c548 <perfect_slalom+0x2c0>)
 800c478:	2200      	movs	r2, #0
 800c47a:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c47c:	4b33      	ldr	r3, [pc, #204]	; (800c54c <perfect_slalom+0x2c4>)
 800c47e:	2207      	movs	r2, #7
 800c480:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c482:	4b33      	ldr	r3, [pc, #204]	; (800c550 <perfect_slalom+0x2c8>)
 800c484:	2207      	movs	r2, #7
 800c486:	701a      	strb	r2, [r3, #0]

					get_base();
 800c488:	f006 fb2c 	bl	8012ae4 <get_base>

					searchC2();
 800c48c:	f003 fa80 	bl	800f990 <searchC2>
					HAL_Delay(2000);
 800c490:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c494:	f7f4 fdc2 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c498:	4b2d      	ldr	r3, [pc, #180]	; (800c550 <perfect_slalom+0x2c8>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	701a      	strb	r2, [r3, #0]
 800c49e:	4b2c      	ldr	r3, [pc, #176]	; (800c550 <perfect_slalom+0x2c8>)
 800c4a0:	781a      	ldrb	r2, [r3, #0]
 800c4a2:	4b2a      	ldr	r3, [pc, #168]	; (800c54c <perfect_slalom+0x2c4>)
 800c4a4:	701a      	strb	r2, [r3, #0]
					searchC2();
 800c4a6:	f003 fa73 	bl	800f990 <searchC2>

					goal_x = 7;
 800c4aa:	4b28      	ldr	r3, [pc, #160]	; (800c54c <perfect_slalom+0x2c4>)
 800c4ac:	2207      	movs	r2, #7
 800c4ae:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c4b0:	4b27      	ldr	r3, [pc, #156]	; (800c550 <perfect_slalom+0x2c8>)
 800c4b2:	2207      	movs	r2, #7
 800c4b4:	701a      	strb	r2, [r3, #0]
					break;
 800c4b6:	e0ce      	b.n	800c656 <perfect_slalom+0x3ce>

				case 4:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800c4b8:	4829      	ldr	r0, [pc, #164]	; (800c560 <perfect_slalom+0x2d8>)
 800c4ba:	f007 f9ad 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800c4be:	4a21      	ldr	r2, [pc, #132]	; (800c544 <perfect_slalom+0x2bc>)
 800c4c0:	8813      	ldrh	r3, [r2, #0]
 800c4c2:	f043 0320 	orr.w	r3, r3, #32
 800c4c6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c4c8:	4a1e      	ldr	r2, [pc, #120]	; (800c544 <perfect_slalom+0x2bc>)
 800c4ca:	8813      	ldrh	r3, [r2, #0]
 800c4cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c4d0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c4d2:	4a1c      	ldr	r2, [pc, #112]	; (800c544 <perfect_slalom+0x2bc>)
 800c4d4:	8813      	ldrh	r3, [r2, #0]
 800c4d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c4da:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800c4dc:	4b1a      	ldr	r3, [pc, #104]	; (800c548 <perfect_slalom+0x2c0>)
 800c4de:	2200      	movs	r2, #0
 800c4e0:	701a      	strb	r2, [r3, #0]

					accel_hs = 3000;
 800c4e2:	4b1d      	ldr	r3, [pc, #116]	; (800c558 <perfect_slalom+0x2d0>)
 800c4e4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800c4e8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c4ea:	4b1c      	ldr	r3, [pc, #112]	; (800c55c <perfect_slalom+0x2d4>)
 800c4ec:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c4f0:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800c4f2:	4b16      	ldr	r3, [pc, #88]	; (800c54c <perfect_slalom+0x2c4>)
 800c4f4:	2207      	movs	r2, #7
 800c4f6:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c4f8:	4b15      	ldr	r3, [pc, #84]	; (800c550 <perfect_slalom+0x2c8>)
 800c4fa:	2207      	movs	r2, #7
 800c4fc:	701a      	strb	r2, [r3, #0]

					get_base();
 800c4fe:	f006 faf1 	bl	8012ae4 <get_base>

					searchD2();
 800c502:	f003 fbfd 	bl	800fd00 <searchD2>
					HAL_Delay(2000);
 800c506:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c50a:	f7f4 fd87 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c50e:	4b10      	ldr	r3, [pc, #64]	; (800c550 <perfect_slalom+0x2c8>)
 800c510:	2200      	movs	r2, #0
 800c512:	701a      	strb	r2, [r3, #0]
 800c514:	4b0e      	ldr	r3, [pc, #56]	; (800c550 <perfect_slalom+0x2c8>)
 800c516:	781a      	ldrb	r2, [r3, #0]
 800c518:	4b0c      	ldr	r3, [pc, #48]	; (800c54c <perfect_slalom+0x2c4>)
 800c51a:	701a      	strb	r2, [r3, #0]
					searchD2();
 800c51c:	f003 fbf0 	bl	800fd00 <searchD2>

					goal_x = 7;
 800c520:	4b0a      	ldr	r3, [pc, #40]	; (800c54c <perfect_slalom+0x2c4>)
 800c522:	2207      	movs	r2, #7
 800c524:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c526:	4b0a      	ldr	r3, [pc, #40]	; (800c550 <perfect_slalom+0x2c8>)
 800c528:	2207      	movs	r2, #7
 800c52a:	701a      	strb	r2, [r3, #0]
					break;
 800c52c:	e093      	b.n	800c656 <perfect_slalom+0x3ce>
 800c52e:	bf00      	nop
 800c530:	08014dc0 	.word	0x08014dc0
 800c534:	20000b2c 	.word	0x20000b2c
 800c538:	08014984 	.word	0x08014984
 800c53c:	40020000 	.word	0x40020000
 800c540:	08014cc4 	.word	0x08014cc4
 800c544:	20000fac 	.word	0x20000fac
 800c548:	200012ec 	.word	0x200012ec
 800c54c:	20000bf1 	.word	0x20000bf1
 800c550:	20000b8c 	.word	0x20000b8c
 800c554:	08014cd0 	.word	0x08014cd0
 800c558:	2000048c 	.word	0x2000048c
 800c55c:	20000fc0 	.word	0x20000fc0
 800c560:	08014d1c 	.word	0x08014d1c

				case 5:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800c564:	483c      	ldr	r0, [pc, #240]	; (800c658 <perfect_slalom+0x3d0>)
 800c566:	f007 f957 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800c56a:	4a3c      	ldr	r2, [pc, #240]	; (800c65c <perfect_slalom+0x3d4>)
 800c56c:	8813      	ldrh	r3, [r2, #0]
 800c56e:	f043 0320 	orr.w	r3, r3, #32
 800c572:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c574:	4a39      	ldr	r2, [pc, #228]	; (800c65c <perfect_slalom+0x3d4>)
 800c576:	8813      	ldrh	r3, [r2, #0]
 800c578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c57c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c57e:	4a37      	ldr	r2, [pc, #220]	; (800c65c <perfect_slalom+0x3d4>)
 800c580:	8813      	ldrh	r3, [r2, #0]
 800c582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c586:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800c588:	4b35      	ldr	r3, [pc, #212]	; (800c660 <perfect_slalom+0x3d8>)
 800c58a:	2200      	movs	r2, #0
 800c58c:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 800c58e:	4b35      	ldr	r3, [pc, #212]	; (800c664 <perfect_slalom+0x3dc>)
 800c590:	f242 7210 	movw	r2, #10000	; 0x2710
 800c594:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800c596:	4b34      	ldr	r3, [pc, #208]	; (800c668 <perfect_slalom+0x3e0>)
 800c598:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c59c:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800c59e:	4b33      	ldr	r3, [pc, #204]	; (800c66c <perfect_slalom+0x3e4>)
 800c5a0:	2207      	movs	r2, #7
 800c5a2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c5a4:	4b32      	ldr	r3, [pc, #200]	; (800c670 <perfect_slalom+0x3e8>)
 800c5a6:	2207      	movs	r2, #7
 800c5a8:	701a      	strb	r2, [r3, #0]

					get_base();
 800c5aa:	f006 fa9b 	bl	8012ae4 <get_base>

					searchD2();
 800c5ae:	f003 fba7 	bl	800fd00 <searchD2>
					HAL_Delay(2000);
 800c5b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c5b6:	f7f4 fd31 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c5ba:	4b2d      	ldr	r3, [pc, #180]	; (800c670 <perfect_slalom+0x3e8>)
 800c5bc:	2200      	movs	r2, #0
 800c5be:	701a      	strb	r2, [r3, #0]
 800c5c0:	4b2b      	ldr	r3, [pc, #172]	; (800c670 <perfect_slalom+0x3e8>)
 800c5c2:	781a      	ldrb	r2, [r3, #0]
 800c5c4:	4b29      	ldr	r3, [pc, #164]	; (800c66c <perfect_slalom+0x3e4>)
 800c5c6:	701a      	strb	r2, [r3, #0]
					searchD2();
 800c5c8:	f003 fb9a 	bl	800fd00 <searchD2>

					goal_x = 7;
 800c5cc:	4b27      	ldr	r3, [pc, #156]	; (800c66c <perfect_slalom+0x3e4>)
 800c5ce:	2207      	movs	r2, #7
 800c5d0:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c5d2:	4b27      	ldr	r3, [pc, #156]	; (800c670 <perfect_slalom+0x3e8>)
 800c5d4:	2207      	movs	r2, #7
 800c5d6:	701a      	strb	r2, [r3, #0]
					break;
 800c5d8:	e03d      	b.n	800c656 <perfect_slalom+0x3ce>

				case 6:
					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800c5da:	481f      	ldr	r0, [pc, #124]	; (800c658 <perfect_slalom+0x3d0>)
 800c5dc:	f007 f91c 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800c5e0:	4a1e      	ldr	r2, [pc, #120]	; (800c65c <perfect_slalom+0x3d4>)
 800c5e2:	8813      	ldrh	r3, [r2, #0]
 800c5e4:	f043 0320 	orr.w	r3, r3, #32
 800c5e8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c5ea:	4a1c      	ldr	r2, [pc, #112]	; (800c65c <perfect_slalom+0x3d4>)
 800c5ec:	8813      	ldrh	r3, [r2, #0]
 800c5ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c5f2:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c5f4:	4a19      	ldr	r2, [pc, #100]	; (800c65c <perfect_slalom+0x3d4>)
 800c5f6:	8813      	ldrh	r3, [r2, #0]
 800c5f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c5fc:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800c5fe:	4b18      	ldr	r3, [pc, #96]	; (800c660 <perfect_slalom+0x3d8>)
 800c600:	2200      	movs	r2, #0
 800c602:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 800c604:	4b17      	ldr	r3, [pc, #92]	; (800c664 <perfect_slalom+0x3dc>)
 800c606:	f242 7210 	movw	r2, #10000	; 0x2710
 800c60a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800c60c:	4b16      	ldr	r3, [pc, #88]	; (800c668 <perfect_slalom+0x3e0>)
 800c60e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c612:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800c614:	4b15      	ldr	r3, [pc, #84]	; (800c66c <perfect_slalom+0x3e4>)
 800c616:	2207      	movs	r2, #7
 800c618:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c61a:	4b15      	ldr	r3, [pc, #84]	; (800c670 <perfect_slalom+0x3e8>)
 800c61c:	2207      	movs	r2, #7
 800c61e:	701a      	strb	r2, [r3, #0]

					get_base();
 800c620:	f006 fa60 	bl	8012ae4 <get_base>

					searchD2();
 800c624:	f003 fb6c 	bl	800fd00 <searchD2>
					HAL_Delay(2000);
 800c628:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c62c:	f7f4 fcf6 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c630:	4b0f      	ldr	r3, [pc, #60]	; (800c670 <perfect_slalom+0x3e8>)
 800c632:	2200      	movs	r2, #0
 800c634:	701a      	strb	r2, [r3, #0]
 800c636:	4b0e      	ldr	r3, [pc, #56]	; (800c670 <perfect_slalom+0x3e8>)
 800c638:	781a      	ldrb	r2, [r3, #0]
 800c63a:	4b0c      	ldr	r3, [pc, #48]	; (800c66c <perfect_slalom+0x3e4>)
 800c63c:	701a      	strb	r2, [r3, #0]
					searchD2();
 800c63e:	f003 fb5f 	bl	800fd00 <searchD2>

					goal_x = 7;
 800c642:	4b0a      	ldr	r3, [pc, #40]	; (800c66c <perfect_slalom+0x3e4>)
 800c644:	2207      	movs	r2, #7
 800c646:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c648:	4b09      	ldr	r3, [pc, #36]	; (800c670 <perfect_slalom+0x3e8>)
 800c64a:	2207      	movs	r2, #7
 800c64c:	701a      	strb	r2, [r3, #0]
					break;
 800c64e:	e002      	b.n	800c656 <perfect_slalom+0x3ce>

				case 7:
					perfect_pass();
 800c650:	f000 f810 	bl	800c674 <perfect_pass>
					break;
 800c654:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800c656:	e620      	b.n	800c29a <perfect_slalom+0x12>
 800c658:	08014d1c 	.word	0x08014d1c
 800c65c:	20000fac 	.word	0x20000fac
 800c660:	200012ec 	.word	0x200012ec
 800c664:	2000048c 	.word	0x2000048c
 800c668:	20000fc0 	.word	0x20000fc0
 800c66c:	20000bf1 	.word	0x20000bf1
 800c670:	20000b8c 	.word	0x20000b8c

0800c674 <perfect_pass>:
//perfect_pass
// a本番用pass圧縮走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void perfect_pass(void){
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0

	int mode = 0;
 800c67a:	2300      	movs	r3, #0
 800c67c:	60fb      	str	r3, [r7, #12]
	printf("Perfect Pass Press, Mode : %d\n", mode);
 800c67e:	68f9      	ldr	r1, [r7, #12]
 800c680:	48ae      	ldr	r0, [pc, #696]	; (800c93c <perfect_pass+0x2c8>)
 800c682:	f007 f855 	bl	8013730 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	f003 0301 	and.w	r3, r3, #1
 800c68e:	b2d8      	uxtb	r0, r3
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	b2db      	uxtb	r3, r3
 800c694:	f003 0302 	and.w	r3, r3, #2
 800c698:	b2d9      	uxtb	r1, r3
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	f003 0304 	and.w	r3, r3, #4
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	f006 fa75 	bl	8012b94 <led_write>
		  if(dist_r >= 20){
 800c6aa:	4ba5      	ldr	r3, [pc, #660]	; (800c940 <perfect_pass+0x2cc>)
 800c6ac:	edd3 7a00 	vldr	s15, [r3]
 800c6b0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800c6b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6bc:	db0f      	blt.n	800c6de <perfect_pass+0x6a>
			  mode++;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	60fb      	str	r3, [r7, #12]
			  dist_r = 0;
 800c6c4:	4b9e      	ldr	r3, [pc, #632]	; (800c940 <perfect_pass+0x2cc>)
 800c6c6:	f04f 0200 	mov.w	r2, #0
 800c6ca:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2b07      	cmp	r3, #7
 800c6d0:	dd01      	ble.n	800c6d6 <perfect_pass+0x62>
				  mode = 0;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	60fb      	str	r3, [r7, #12]
			  }
			  printf("Mode : %d\n", mode);
 800c6d6:	68f9      	ldr	r1, [r7, #12]
 800c6d8:	489a      	ldr	r0, [pc, #616]	; (800c944 <perfect_pass+0x2d0>)
 800c6da:	f007 f829 	bl	8013730 <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(dist_r <= -20){
 800c6de:	4b98      	ldr	r3, [pc, #608]	; (800c940 <perfect_pass+0x2cc>)
 800c6e0:	edd3 7a00 	vldr	s15, [r3]
 800c6e4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800c6e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6f0:	d80f      	bhi.n	800c712 <perfect_pass+0x9e>
			  mode--;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	3b01      	subs	r3, #1
 800c6f6:	60fb      	str	r3, [r7, #12]
			  dist_r = 0;
 800c6f8:	4b91      	ldr	r3, [pc, #580]	; (800c940 <perfect_pass+0x2cc>)
 800c6fa:	f04f 0200 	mov.w	r2, #0
 800c6fe:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2b00      	cmp	r3, #0
 800c704:	da01      	bge.n	800c70a <perfect_pass+0x96>
				  mode = 7;
 800c706:	2307      	movs	r3, #7
 800c708:	60fb      	str	r3, [r7, #12]
			  }
			  printf("Mode : %d\n", mode);
 800c70a:	68f9      	ldr	r1, [r7, #12]
 800c70c:	488d      	ldr	r0, [pc, #564]	; (800c944 <perfect_pass+0x2d0>)
 800c70e:	f007 f80f 	bl	8013730 <iprintf>
/*	  		  for(int i=0; i<m_select; i++){
	  			  buzzer(mario_select[i][0], mario_select[i][1]);
	  		  }
*/		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800c712:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c716:	488c      	ldr	r0, [pc, #560]	; (800c948 <perfect_pass+0x2d4>)
 800c718:	f7f5 fddc 	bl	80022d4 <HAL_GPIO_ReadPin>
 800c71c:	4603      	mov	r3, r0
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1b1      	bne.n	800c686 <perfect_pass+0x12>
			  HAL_Delay(50);
 800c722:	2032      	movs	r0, #50	; 0x32
 800c724:	f7f4 fc7a 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800c728:	bf00      	nop
 800c72a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c72e:	4886      	ldr	r0, [pc, #536]	; (800c948 <perfect_pass+0x2d4>)
 800c730:	f7f5 fdd0 	bl	80022d4 <HAL_GPIO_ReadPin>
 800c734:	4603      	mov	r3, r0
 800c736:	2b00      	cmp	r3, #0
 800c738:	d0f7      	beq.n	800c72a <perfect_pass+0xb6>
/*			  for(int i=0; i<m_ok; i++){
	  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
	  		  }
*/
			  drive_ready();
 800c73a:	f7f8 fa9b 	bl	8004c74 <drive_ready>
/*	  		  for(int i=0; i<m_start; i++){
	  			  buzzer(mario_start[i][0], mario_start[i][1]);
	  			  full_led_write(RED);
	  		  }
*/
			  switch(mode){
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2b07      	cmp	r3, #7
 800c742:	d8a0      	bhi.n	800c686 <perfect_pass+0x12>
 800c744:	a201      	add	r2, pc, #4	; (adr r2, 800c74c <perfect_pass+0xd8>)
 800c746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c74a:	bf00      	nop
 800c74c:	0800c687 	.word	0x0800c687
 800c750:	0800c76d 	.word	0x0800c76d
 800c754:	0800c7c9 	.word	0x0800c7c9
 800c758:	0800c845 	.word	0x0800c845
 800c75c:	0800c8c1 	.word	0x0800c8c1
 800c760:	0800c687 	.word	0x0800c687
 800c764:	0800c979 	.word	0x0800c979
 800c768:	0800cc11 	.word	0x0800cc11
				case 0:
					break;

				case 1:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800c76c:	4877      	ldr	r0, [pc, #476]	; (800c94c <perfect_pass+0x2d8>)
 800c76e:	f007 f853 	bl	8013818 <puts>
					MF.FLAG.SCND = 0;
 800c772:	4a77      	ldr	r2, [pc, #476]	; (800c950 <perfect_pass+0x2dc>)
 800c774:	8813      	ldrh	r3, [r2, #0]
 800c776:	f36f 1345 	bfc	r3, #5, #1
 800c77a:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800c77c:	4a74      	ldr	r2, [pc, #464]	; (800c950 <perfect_pass+0x2dc>)
 800c77e:	8813      	ldrh	r3, [r2, #0]
 800c780:	f36f 2349 	bfc	r3, #9, #1
 800c784:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800c786:	4b73      	ldr	r3, [pc, #460]	; (800c954 <perfect_pass+0x2e0>)
 800c788:	2200      	movs	r2, #0
 800c78a:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c78c:	4b72      	ldr	r3, [pc, #456]	; (800c958 <perfect_pass+0x2e4>)
 800c78e:	2207      	movs	r2, #7
 800c790:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c792:	4b72      	ldr	r3, [pc, #456]	; (800c95c <perfect_pass+0x2e8>)
 800c794:	2207      	movs	r2, #7
 800c796:	701a      	strb	r2, [r3, #0]

					get_base();
 800c798:	f006 f9a4 	bl	8012ae4 <get_base>

					searchC();
 800c79c:	f002 ffd8 	bl	800f750 <searchC>
					HAL_Delay(2000);
 800c7a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c7a4:	f7f4 fc3a 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c7a8:	4b6c      	ldr	r3, [pc, #432]	; (800c95c <perfect_pass+0x2e8>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	701a      	strb	r2, [r3, #0]
 800c7ae:	4b6b      	ldr	r3, [pc, #428]	; (800c95c <perfect_pass+0x2e8>)
 800c7b0:	781a      	ldrb	r2, [r3, #0]
 800c7b2:	4b69      	ldr	r3, [pc, #420]	; (800c958 <perfect_pass+0x2e4>)
 800c7b4:	701a      	strb	r2, [r3, #0]
					searchC();
 800c7b6:	f002 ffcb 	bl	800f750 <searchC>

					goal_x = 7;
 800c7ba:	4b67      	ldr	r3, [pc, #412]	; (800c958 <perfect_pass+0x2e4>)
 800c7bc:	2207      	movs	r2, #7
 800c7be:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c7c0:	4b66      	ldr	r3, [pc, #408]	; (800c95c <perfect_pass+0x2e8>)
 800c7c2:	2207      	movs	r2, #7
 800c7c4:	701a      	strb	r2, [r3, #0]
					break;
 800c7c6:	e357      	b.n	800ce78 <perfect_pass+0x804>

				case 2:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース----
					printf("pass press 3.\n");
 800c7c8:	4865      	ldr	r0, [pc, #404]	; (800c960 <perfect_pass+0x2ec>)
 800c7ca:	f007 f825 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800c7ce:	4a60      	ldr	r2, [pc, #384]	; (800c950 <perfect_pass+0x2dc>)
 800c7d0:	8813      	ldrh	r3, [r2, #0]
 800c7d2:	f043 0320 	orr.w	r3, r3, #32
 800c7d6:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c7d8:	4a5d      	ldr	r2, [pc, #372]	; (800c950 <perfect_pass+0x2dc>)
 800c7da:	8813      	ldrh	r3, [r2, #0]
 800c7dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c7e0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c7e2:	4a5b      	ldr	r2, [pc, #364]	; (800c950 <perfect_pass+0x2dc>)
 800c7e4:	8813      	ldrh	r3, [r2, #0]
 800c7e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c7ea:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800c7ec:	4b59      	ldr	r3, [pc, #356]	; (800c954 <perfect_pass+0x2e0>)
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c7f2:	4b5c      	ldr	r3, [pc, #368]	; (800c964 <perfect_pass+0x2f0>)
 800c7f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7f8:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800c7fa:	4b5b      	ldr	r3, [pc, #364]	; (800c968 <perfect_pass+0x2f4>)
 800c7fc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c800:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c802:	4b5a      	ldr	r3, [pc, #360]	; (800c96c <perfect_pass+0x2f8>)
 800c804:	2203      	movs	r2, #3
 800c806:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c808:	4b53      	ldr	r3, [pc, #332]	; (800c958 <perfect_pass+0x2e4>)
 800c80a:	2207      	movs	r2, #7
 800c80c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c80e:	4b53      	ldr	r3, [pc, #332]	; (800c95c <perfect_pass+0x2e8>)
 800c810:	2207      	movs	r2, #7
 800c812:	701a      	strb	r2, [r3, #0]

					get_base();
 800c814:	f006 f966 	bl	8012ae4 <get_base>

					searchF3();
 800c818:	f003 fc12 	bl	8010040 <searchF3>
					HAL_Delay(2000);
 800c81c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c820:	f7f4 fbfc 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c824:	4b4d      	ldr	r3, [pc, #308]	; (800c95c <perfect_pass+0x2e8>)
 800c826:	2200      	movs	r2, #0
 800c828:	701a      	strb	r2, [r3, #0]
 800c82a:	4b4c      	ldr	r3, [pc, #304]	; (800c95c <perfect_pass+0x2e8>)
 800c82c:	781a      	ldrb	r2, [r3, #0]
 800c82e:	4b4a      	ldr	r3, [pc, #296]	; (800c958 <perfect_pass+0x2e4>)
 800c830:	701a      	strb	r2, [r3, #0]
					searchF3();
 800c832:	f003 fc05 	bl	8010040 <searchF3>

					goal_x = 7;
 800c836:	4b48      	ldr	r3, [pc, #288]	; (800c958 <perfect_pass+0x2e4>)
 800c838:	2207      	movs	r2, #7
 800c83a:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c83c:	4b47      	ldr	r3, [pc, #284]	; (800c95c <perfect_pass+0x2e8>)
 800c83e:	2207      	movs	r2, #7
 800c840:	701a      	strb	r2, [r3, #0]
					break;
 800c842:	e319      	b.n	800ce78 <perfect_pass+0x804>
				case 3:
					//----a直線と大回り圧縮(adv_posを停止)+半区画ベース High Speed----
					printf("pass press 3-2.\n");
 800c844:	484a      	ldr	r0, [pc, #296]	; (800c970 <perfect_pass+0x2fc>)
 800c846:	f006 ffe7 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800c84a:	4a41      	ldr	r2, [pc, #260]	; (800c950 <perfect_pass+0x2dc>)
 800c84c:	8813      	ldrh	r3, [r2, #0]
 800c84e:	f043 0320 	orr.w	r3, r3, #32
 800c852:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c854:	4a3e      	ldr	r2, [pc, #248]	; (800c950 <perfect_pass+0x2dc>)
 800c856:	8813      	ldrh	r3, [r2, #0]
 800c858:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c85c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c85e:	4a3c      	ldr	r2, [pc, #240]	; (800c950 <perfect_pass+0x2dc>)
 800c860:	8813      	ldrh	r3, [r2, #0]
 800c862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c866:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800c868:	4b3a      	ldr	r3, [pc, #232]	; (800c954 <perfect_pass+0x2e0>)
 800c86a:	2200      	movs	r2, #0
 800c86c:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c86e:	4b3d      	ldr	r3, [pc, #244]	; (800c964 <perfect_pass+0x2f0>)
 800c870:	f241 3288 	movw	r2, #5000	; 0x1388
 800c874:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800c876:	4b3c      	ldr	r3, [pc, #240]	; (800c968 <perfect_pass+0x2f4>)
 800c878:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800c87c:	801a      	strh	r2, [r3, #0]

					pass_mode = 3;						//a半区画ベースでroute配列生成
 800c87e:	4b3b      	ldr	r3, [pc, #236]	; (800c96c <perfect_pass+0x2f8>)
 800c880:	2203      	movs	r2, #3
 800c882:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c884:	4b34      	ldr	r3, [pc, #208]	; (800c958 <perfect_pass+0x2e4>)
 800c886:	2207      	movs	r2, #7
 800c888:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c88a:	4b34      	ldr	r3, [pc, #208]	; (800c95c <perfect_pass+0x2e8>)
 800c88c:	2207      	movs	r2, #7
 800c88e:	701a      	strb	r2, [r3, #0]

					get_base();
 800c890:	f006 f928 	bl	8012ae4 <get_base>

					searchF32();
 800c894:	f003 fc98 	bl	80101c8 <searchF32>
					HAL_Delay(2000);
 800c898:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c89c:	f7f4 fbbe 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c8a0:	4b2e      	ldr	r3, [pc, #184]	; (800c95c <perfect_pass+0x2e8>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	701a      	strb	r2, [r3, #0]
 800c8a6:	4b2d      	ldr	r3, [pc, #180]	; (800c95c <perfect_pass+0x2e8>)
 800c8a8:	781a      	ldrb	r2, [r3, #0]
 800c8aa:	4b2b      	ldr	r3, [pc, #172]	; (800c958 <perfect_pass+0x2e4>)
 800c8ac:	701a      	strb	r2, [r3, #0]
					searchF32();
 800c8ae:	f003 fc8b 	bl	80101c8 <searchF32>

					goal_x = 7;
 800c8b2:	4b29      	ldr	r3, [pc, #164]	; (800c958 <perfect_pass+0x2e4>)
 800c8b4:	2207      	movs	r2, #7
 800c8b6:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c8b8:	4b28      	ldr	r3, [pc, #160]	; (800c95c <perfect_pass+0x2e8>)
 800c8ba:	2207      	movs	r2, #7
 800c8bc:	701a      	strb	r2, [r3, #0]
					break;
 800c8be:	e2db      	b.n	800ce78 <perfect_pass+0x804>
				case 4:
					//----a直線と大回り圧縮と斜めｰｰｰｰ
					printf("pass press 4.\n");
 800c8c0:	482c      	ldr	r0, [pc, #176]	; (800c974 <perfect_pass+0x300>)
 800c8c2:	f006 ffa9 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800c8c6:	4a22      	ldr	r2, [pc, #136]	; (800c950 <perfect_pass+0x2dc>)
 800c8c8:	8813      	ldrh	r3, [r2, #0]
 800c8ca:	f043 0320 	orr.w	r3, r3, #32
 800c8ce:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c8d0:	4a1f      	ldr	r2, [pc, #124]	; (800c950 <perfect_pass+0x2dc>)
 800c8d2:	8813      	ldrh	r3, [r2, #0]
 800c8d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c8d8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c8da:	4a1d      	ldr	r2, [pc, #116]	; (800c950 <perfect_pass+0x2dc>)
 800c8dc:	8813      	ldrh	r3, [r2, #0]
 800c8de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c8e2:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800c8e4:	4b1b      	ldr	r3, [pc, #108]	; (800c954 <perfect_pass+0x2e0>)
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	701a      	strb	r2, [r3, #0]
					accel_hs = 5000;
 800c8ea:	4b1e      	ldr	r3, [pc, #120]	; (800c964 <perfect_pass+0x2f0>)
 800c8ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8f0:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 800;
 800c8f2:	4b1d      	ldr	r3, [pc, #116]	; (800c968 <perfect_pass+0x2f4>)
 800c8f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c8f8:	801a      	strh	r2, [r3, #0]

					pass_mode = 4;
 800c8fa:	4b1c      	ldr	r3, [pc, #112]	; (800c96c <perfect_pass+0x2f8>)
 800c8fc:	2204      	movs	r2, #4
 800c8fe:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800c900:	4b15      	ldr	r3, [pc, #84]	; (800c958 <perfect_pass+0x2e4>)
 800c902:	2207      	movs	r2, #7
 800c904:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c906:	4b15      	ldr	r3, [pc, #84]	; (800c95c <perfect_pass+0x2e8>)
 800c908:	2207      	movs	r2, #7
 800c90a:	701a      	strb	r2, [r3, #0]

					get_base();
 800c90c:	f006 f8ea 	bl	8012ae4 <get_base>

					searchF4();
 800c910:	f003 fd1e 	bl	8010350 <searchF4>
					HAL_Delay(2000);
 800c914:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c918:	f7f4 fb80 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c91c:	4b0f      	ldr	r3, [pc, #60]	; (800c95c <perfect_pass+0x2e8>)
 800c91e:	2200      	movs	r2, #0
 800c920:	701a      	strb	r2, [r3, #0]
 800c922:	4b0e      	ldr	r3, [pc, #56]	; (800c95c <perfect_pass+0x2e8>)
 800c924:	781a      	ldrb	r2, [r3, #0]
 800c926:	4b0c      	ldr	r3, [pc, #48]	; (800c958 <perfect_pass+0x2e4>)
 800c928:	701a      	strb	r2, [r3, #0]
					searchF4();
 800c92a:	f003 fd11 	bl	8010350 <searchF4>

					goal_x = 7;
 800c92e:	4b0a      	ldr	r3, [pc, #40]	; (800c958 <perfect_pass+0x2e4>)
 800c930:	2207      	movs	r2, #7
 800c932:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800c934:	4b09      	ldr	r3, [pc, #36]	; (800c95c <perfect_pass+0x2e8>)
 800c936:	2207      	movs	r2, #7
 800c938:	701a      	strb	r2, [r3, #0]
					break;
 800c93a:	e29d      	b.n	800ce78 <perfect_pass+0x804>
 800c93c:	08014ddc 	.word	0x08014ddc
 800c940:	20000b2c 	.word	0x20000b2c
 800c944:	08014984 	.word	0x08014984
 800c948:	40020000 	.word	0x40020000
 800c94c:	08014cc4 	.word	0x08014cc4
 800c950:	20000fac 	.word	0x20000fac
 800c954:	200012ec 	.word	0x200012ec
 800c958:	20000bf1 	.word	0x20000bf1
 800c95c:	20000b8c 	.word	0x20000b8c
 800c960:	08014c7c 	.word	0x08014c7c
 800c964:	2000048c 	.word	0x2000048c
 800c968:	20000fc0 	.word	0x20000fc0
 800c96c:	2000048f 	.word	0x2000048f
 800c970:	08014c8c 	.word	0x08014c8c
 800c974:	08014c9c 	.word	0x08014c9c

				case 5:
					break;
				case 6:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800c978:	4899      	ldr	r0, [pc, #612]	; (800cbe0 <perfect_pass+0x56c>)
 800c97a:	f006 ff4d 	bl	8013818 <puts>
					MF.FLAG.SCND = 0;
 800c97e:	4a99      	ldr	r2, [pc, #612]	; (800cbe4 <perfect_pass+0x570>)
 800c980:	8813      	ldrh	r3, [r2, #0]
 800c982:	f36f 1345 	bfc	r3, #5, #1
 800c986:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800c988:	4a96      	ldr	r2, [pc, #600]	; (800cbe4 <perfect_pass+0x570>)
 800c98a:	8813      	ldrh	r3, [r2, #0]
 800c98c:	f36f 2349 	bfc	r3, #9, #1
 800c990:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800c992:	4b95      	ldr	r3, [pc, #596]	; (800cbe8 <perfect_pass+0x574>)
 800c994:	2200      	movs	r2, #0
 800c996:	701a      	strb	r2, [r3, #0]

					goal_x = GOAL_X;
 800c998:	4b94      	ldr	r3, [pc, #592]	; (800cbec <perfect_pass+0x578>)
 800c99a:	2207      	movs	r2, #7
 800c99c:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800c99e:	4b94      	ldr	r3, [pc, #592]	; (800cbf0 <perfect_pass+0x57c>)
 800c9a0:	2207      	movs	r2, #7
 800c9a2:	701a      	strb	r2, [r3, #0]

					get_base();
 800c9a4:	f006 f89e 	bl	8012ae4 <get_base>

					searchC();
 800c9a8:	f002 fed2 	bl	800f750 <searchC>
					HAL_Delay(2000);
 800c9ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c9b0:	f7f4 fb34 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800c9b4:	4b8e      	ldr	r3, [pc, #568]	; (800cbf0 <perfect_pass+0x57c>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	701a      	strb	r2, [r3, #0]
 800c9ba:	4b8d      	ldr	r3, [pc, #564]	; (800cbf0 <perfect_pass+0x57c>)
 800c9bc:	781a      	ldrb	r2, [r3, #0]
 800c9be:	4b8b      	ldr	r3, [pc, #556]	; (800cbec <perfect_pass+0x578>)
 800c9c0:	701a      	strb	r2, [r3, #0]
					searchC();
 800c9c2:	f002 fec5 	bl	800f750 <searchC>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800c9c6:	2064      	movs	r0, #100	; 0x64
 800c9c8:	f7f8 fc8e 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 800c9cc:	4b89      	ldr	r3, [pc, #548]	; (800cbf4 <perfect_pass+0x580>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a89      	ldr	r2, [pc, #548]	; (800cbf8 <perfect_pass+0x584>)
 800c9d2:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800c9d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c9d8:	f7f4 fb20 	bl	800101c <HAL_Delay>



					//----a二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 800c9dc:	4887      	ldr	r0, [pc, #540]	; (800cbfc <perfect_pass+0x588>)
 800c9de:	f006 ff1b 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800c9e2:	4a80      	ldr	r2, [pc, #512]	; (800cbe4 <perfect_pass+0x570>)
 800c9e4:	8813      	ldrh	r3, [r2, #0]
 800c9e6:	f043 0320 	orr.w	r3, r3, #32
 800c9ea:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800c9ec:	4a7d      	ldr	r2, [pc, #500]	; (800cbe4 <perfect_pass+0x570>)
 800c9ee:	8813      	ldrh	r3, [r2, #0]
 800c9f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c9f4:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800c9f6:	4a7b      	ldr	r2, [pc, #492]	; (800cbe4 <perfect_pass+0x570>)
 800c9f8:	8813      	ldrh	r3, [r2, #0]
 800c9fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c9fe:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800ca00:	4b79      	ldr	r3, [pc, #484]	; (800cbe8 <perfect_pass+0x574>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	701a      	strb	r2, [r3, #0]

					accel_hs = 5000;
 800ca06:	4b7e      	ldr	r3, [pc, #504]	; (800cc00 <perfect_pass+0x58c>)
 800ca08:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca0c:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800ca0e:	4b7d      	ldr	r3, [pc, #500]	; (800cc04 <perfect_pass+0x590>)
 800ca10:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800ca14:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800ca16:	4b75      	ldr	r3, [pc, #468]	; (800cbec <perfect_pass+0x578>)
 800ca18:	2207      	movs	r2, #7
 800ca1a:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ca1c:	4b74      	ldr	r3, [pc, #464]	; (800cbf0 <perfect_pass+0x57c>)
 800ca1e:	2207      	movs	r2, #7
 800ca20:	701a      	strb	r2, [r3, #0]

//					get_base();

					searchD();
 800ca22:	f003 f86b 	bl	800fafc <searchD>
					HAL_Delay(2000);
 800ca26:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ca2a:	f7f4 faf7 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ca2e:	4b70      	ldr	r3, [pc, #448]	; (800cbf0 <perfect_pass+0x57c>)
 800ca30:	2200      	movs	r2, #0
 800ca32:	701a      	strb	r2, [r3, #0]
 800ca34:	4b6e      	ldr	r3, [pc, #440]	; (800cbf0 <perfect_pass+0x57c>)
 800ca36:	781a      	ldrb	r2, [r3, #0]
 800ca38:	4b6c      	ldr	r3, [pc, #432]	; (800cbec <perfect_pass+0x578>)
 800ca3a:	701a      	strb	r2, [r3, #0]
					searchD();
 800ca3c:	f003 f85e 	bl	800fafc <searchD>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800ca40:	2064      	movs	r0, #100	; 0x64
 800ca42:	f7f8 fc51 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 800ca46:	4b6b      	ldr	r3, [pc, #428]	; (800cbf4 <perfect_pass+0x580>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a6b      	ldr	r2, [pc, #428]	; (800cbf8 <perfect_pass+0x584>)
 800ca4c:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800ca4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ca52:	f7f4 fae3 	bl	800101c <HAL_Delay>
					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
					degree_z = target_degree_z;
					HAL_Delay(2000);

*/					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800ca56:	486c      	ldr	r0, [pc, #432]	; (800cc08 <perfect_pass+0x594>)
 800ca58:	f006 fede 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800ca5c:	4a61      	ldr	r2, [pc, #388]	; (800cbe4 <perfect_pass+0x570>)
 800ca5e:	8813      	ldrh	r3, [r2, #0]
 800ca60:	f043 0320 	orr.w	r3, r3, #32
 800ca64:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ca66:	4a5f      	ldr	r2, [pc, #380]	; (800cbe4 <perfect_pass+0x570>)
 800ca68:	8813      	ldrh	r3, [r2, #0]
 800ca6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ca6e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800ca70:	4a5c      	ldr	r2, [pc, #368]	; (800cbe4 <perfect_pass+0x570>)
 800ca72:	8813      	ldrh	r3, [r2, #0]
 800ca74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ca78:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800ca7a:	4b5b      	ldr	r3, [pc, #364]	; (800cbe8 <perfect_pass+0x574>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 800ca80:	4b5f      	ldr	r3, [pc, #380]	; (800cc00 <perfect_pass+0x58c>)
 800ca82:	f242 7210 	movw	r2, #10000	; 0x2710
 800ca86:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800ca88:	4b5e      	ldr	r3, [pc, #376]	; (800cc04 <perfect_pass+0x590>)
 800ca8a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ca8e:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800ca90:	4b56      	ldr	r3, [pc, #344]	; (800cbec <perfect_pass+0x578>)
 800ca92:	2207      	movs	r2, #7
 800ca94:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800ca96:	4b56      	ldr	r3, [pc, #344]	; (800cbf0 <perfect_pass+0x57c>)
 800ca98:	2207      	movs	r2, #7
 800ca9a:	701a      	strb	r2, [r3, #0]

//					get_base();

					searchD2();
 800ca9c:	f003 f930 	bl	800fd00 <searchD2>
					HAL_Delay(2000);
 800caa0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800caa4:	f7f4 faba 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800caa8:	4b51      	ldr	r3, [pc, #324]	; (800cbf0 <perfect_pass+0x57c>)
 800caaa:	2200      	movs	r2, #0
 800caac:	701a      	strb	r2, [r3, #0]
 800caae:	4b50      	ldr	r3, [pc, #320]	; (800cbf0 <perfect_pass+0x57c>)
 800cab0:	781a      	ldrb	r2, [r3, #0]
 800cab2:	4b4e      	ldr	r3, [pc, #312]	; (800cbec <perfect_pass+0x578>)
 800cab4:	701a      	strb	r2, [r3, #0]
					searchD2();
 800cab6:	f003 f923 	bl	800fd00 <searchD2>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800caba:	2064      	movs	r0, #100	; 0x64
 800cabc:	f7f8 fc14 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 800cac0:	4b4c      	ldr	r3, [pc, #304]	; (800cbf4 <perfect_pass+0x580>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4a4c      	ldr	r2, [pc, #304]	; (800cbf8 <perfect_pass+0x584>)
 800cac6:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800cac8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cacc:	f7f4 faa6 	bl	800101c <HAL_Delay>



					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed2----
					printf("Second Run. (Slalom)\n");
 800cad0:	484d      	ldr	r0, [pc, #308]	; (800cc08 <perfect_pass+0x594>)
 800cad2:	f006 fea1 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800cad6:	4a43      	ldr	r2, [pc, #268]	; (800cbe4 <perfect_pass+0x570>)
 800cad8:	8813      	ldrh	r3, [r2, #0]
 800cada:	f043 0320 	orr.w	r3, r3, #32
 800cade:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800cae0:	4a40      	ldr	r2, [pc, #256]	; (800cbe4 <perfect_pass+0x570>)
 800cae2:	8813      	ldrh	r3, [r2, #0]
 800cae4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cae8:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800caea:	4a3e      	ldr	r2, [pc, #248]	; (800cbe4 <perfect_pass+0x570>)
 800caec:	8813      	ldrh	r3, [r2, #0]
 800caee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800caf2:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800caf4:	4b3c      	ldr	r3, [pc, #240]	; (800cbe8 <perfect_pass+0x574>)
 800caf6:	2200      	movs	r2, #0
 800caf8:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 800cafa:	4b41      	ldr	r3, [pc, #260]	; (800cc00 <perfect_pass+0x58c>)
 800cafc:	f242 7210 	movw	r2, #10000	; 0x2710
 800cb00:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800cb02:	4b40      	ldr	r3, [pc, #256]	; (800cc04 <perfect_pass+0x590>)
 800cb04:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800cb08:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800cb0a:	4b38      	ldr	r3, [pc, #224]	; (800cbec <perfect_pass+0x578>)
 800cb0c:	2207      	movs	r2, #7
 800cb0e:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800cb10:	4b37      	ldr	r3, [pc, #220]	; (800cbf0 <perfect_pass+0x57c>)
 800cb12:	2207      	movs	r2, #7
 800cb14:	701a      	strb	r2, [r3, #0]

//					get_base();

					searchD2();
 800cb16:	f003 f8f3 	bl	800fd00 <searchD2>
					HAL_Delay(2000);
 800cb1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cb1e:	f7f4 fa7d 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800cb22:	4b33      	ldr	r3, [pc, #204]	; (800cbf0 <perfect_pass+0x57c>)
 800cb24:	2200      	movs	r2, #0
 800cb26:	701a      	strb	r2, [r3, #0]
 800cb28:	4b31      	ldr	r3, [pc, #196]	; (800cbf0 <perfect_pass+0x57c>)
 800cb2a:	781a      	ldrb	r2, [r3, #0]
 800cb2c:	4b2f      	ldr	r3, [pc, #188]	; (800cbec <perfect_pass+0x578>)
 800cb2e:	701a      	strb	r2, [r3, #0]
					searchD2();
 800cb30:	f003 f8e6 	bl	800fd00 <searchD2>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800cb34:	2064      	movs	r0, #100	; 0x64
 800cb36:	f7f8 fbd7 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 800cb3a:	4b2e      	ldr	r3, [pc, #184]	; (800cbf4 <perfect_pass+0x580>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4a2e      	ldr	r2, [pc, #184]	; (800cbf8 <perfect_pass+0x584>)
 800cb40:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800cb42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cb46:	f7f4 fa69 	bl	800101c <HAL_Delay>



					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed3----
					printf("Second Run. (Slalom)\n");
 800cb4a:	482f      	ldr	r0, [pc, #188]	; (800cc08 <perfect_pass+0x594>)
 800cb4c:	f006 fe64 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800cb50:	4a24      	ldr	r2, [pc, #144]	; (800cbe4 <perfect_pass+0x570>)
 800cb52:	8813      	ldrh	r3, [r2, #0]
 800cb54:	f043 0320 	orr.w	r3, r3, #32
 800cb58:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800cb5a:	4a22      	ldr	r2, [pc, #136]	; (800cbe4 <perfect_pass+0x570>)
 800cb5c:	8813      	ldrh	r3, [r2, #0]
 800cb5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cb62:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800cb64:	4a1f      	ldr	r2, [pc, #124]	; (800cbe4 <perfect_pass+0x570>)
 800cb66:	8813      	ldrh	r3, [r2, #0]
 800cb68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cb6c:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800cb6e:	4b1e      	ldr	r3, [pc, #120]	; (800cbe8 <perfect_pass+0x574>)
 800cb70:	2200      	movs	r2, #0
 800cb72:	701a      	strb	r2, [r3, #0]

					accel_hs = 20000;
 800cb74:	4b22      	ldr	r3, [pc, #136]	; (800cc00 <perfect_pass+0x58c>)
 800cb76:	f644 6220 	movw	r2, #20000	; 0x4e20
 800cb7a:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2500;
 800cb7c:	4b21      	ldr	r3, [pc, #132]	; (800cc04 <perfect_pass+0x590>)
 800cb7e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800cb82:	801a      	strh	r2, [r3, #0]
					goal_x = GOAL_X;
 800cb84:	4b19      	ldr	r3, [pc, #100]	; (800cbec <perfect_pass+0x578>)
 800cb86:	2207      	movs	r2, #7
 800cb88:	701a      	strb	r2, [r3, #0]
					goal_y = GOAL_Y;
 800cb8a:	4b19      	ldr	r3, [pc, #100]	; (800cbf0 <perfect_pass+0x57c>)
 800cb8c:	2207      	movs	r2, #7
 800cb8e:	701a      	strb	r2, [r3, #0]

//					get_base();

					searchD2();
 800cb90:	f003 f8b6 	bl	800fd00 <searchD2>
					HAL_Delay(2000);
 800cb94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cb98:	f7f4 fa40 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800cb9c:	4b14      	ldr	r3, [pc, #80]	; (800cbf0 <perfect_pass+0x57c>)
 800cb9e:	2200      	movs	r2, #0
 800cba0:	701a      	strb	r2, [r3, #0]
 800cba2:	4b13      	ldr	r3, [pc, #76]	; (800cbf0 <perfect_pass+0x57c>)
 800cba4:	781a      	ldrb	r2, [r3, #0]
 800cba6:	4b11      	ldr	r3, [pc, #68]	; (800cbec <perfect_pass+0x578>)
 800cba8:	701a      	strb	r2, [r3, #0]
					searchD2();
 800cbaa:	f003 f8a9 	bl	800fd00 <searchD2>


					for(int i=0; i<m_goal; i++){
 800cbae:	2300      	movs	r3, #0
 800cbb0:	60bb      	str	r3, [r7, #8]
 800cbb2:	e011      	b.n	800cbd8 <perfect_pass+0x564>
					  buzzer(mario_goal[i][0], mario_goal[i][1]);
 800cbb4:	4a15      	ldr	r2, [pc, #84]	; (800cc0c <perfect_pass+0x598>)
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800cbbc:	4a13      	ldr	r2, [pc, #76]	; (800cc0c <perfect_pass+0x598>)
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	00db      	lsls	r3, r3, #3
 800cbc2:	4413      	add	r3, r2
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	f002 fc2a 	bl	800f420 <buzzer>
					  full_led_write(RED);
 800cbcc:	2001      	movs	r0, #1
 800cbce:	f006 f81b 	bl	8012c08 <full_led_write>
					for(int i=0; i<m_goal; i++){
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	60bb      	str	r3, [r7, #8]
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	2b0e      	cmp	r3, #14
 800cbdc:	ddea      	ble.n	800cbb4 <perfect_pass+0x540>
					searchF4();

					goal_x = 7;
					goal_y = 7;

*/					break;
 800cbde:	e14b      	b.n	800ce78 <perfect_pass+0x804>
 800cbe0:	08014cc4 	.word	0x08014cc4
 800cbe4:	20000fac 	.word	0x20000fac
 800cbe8:	200012ec 	.word	0x200012ec
 800cbec:	20000bf1 	.word	0x20000bf1
 800cbf0:	20000b8c 	.word	0x20000b8c
 800cbf4:	20000c40 	.word	0x20000c40
 800cbf8:	20000b9c 	.word	0x20000b9c
 800cbfc:	08014ce8 	.word	0x08014ce8
 800cc00:	2000048c 	.word	0x2000048c
 800cc04:	20000fc0 	.word	0x20000fc0
 800cc08:	08014d1c 	.word	0x08014d1c
 800cc0c:	20000040 	.word	0x20000040

					break;
				case 7:
					//----a一次探索スラローム走行----
					printf("First Run.\n");
 800cc10:	489a      	ldr	r0, [pc, #616]	; (800ce7c <perfect_pass+0x808>)
 800cc12:	f006 fe01 	bl	8013818 <puts>
					MF.FLAG.SCND = 0;
 800cc16:	4a9a      	ldr	r2, [pc, #616]	; (800ce80 <perfect_pass+0x80c>)
 800cc18:	8813      	ldrh	r3, [r2, #0]
 800cc1a:	f36f 1345 	bfc	r3, #5, #1
 800cc1e:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 0;
 800cc20:	4a97      	ldr	r2, [pc, #604]	; (800ce80 <perfect_pass+0x80c>)
 800cc22:	8813      	ldrh	r3, [r2, #0]
 800cc24:	f36f 2349 	bfc	r3, #9, #1
 800cc28:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800cc2a:	4b96      	ldr	r3, [pc, #600]	; (800ce84 <perfect_pass+0x810>)
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	701a      	strb	r2, [r3, #0]

					goal_x = 7;
 800cc30:	4b95      	ldr	r3, [pc, #596]	; (800ce88 <perfect_pass+0x814>)
 800cc32:	2207      	movs	r2, #7
 800cc34:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800cc36:	4b95      	ldr	r3, [pc, #596]	; (800ce8c <perfect_pass+0x818>)
 800cc38:	2207      	movs	r2, #7
 800cc3a:	701a      	strb	r2, [r3, #0]

					get_base();
 800cc3c:	f005 ff52 	bl	8012ae4 <get_base>

					searchC();
 800cc40:	f002 fd86 	bl	800f750 <searchC>
					HAL_Delay(2000);
 800cc44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cc48:	f7f4 f9e8 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800cc4c:	4b8f      	ldr	r3, [pc, #572]	; (800ce8c <perfect_pass+0x818>)
 800cc4e:	2200      	movs	r2, #0
 800cc50:	701a      	strb	r2, [r3, #0]
 800cc52:	4b8e      	ldr	r3, [pc, #568]	; (800ce8c <perfect_pass+0x818>)
 800cc54:	781a      	ldrb	r2, [r3, #0]
 800cc56:	4b8c      	ldr	r3, [pc, #560]	; (800ce88 <perfect_pass+0x814>)
 800cc58:	701a      	strb	r2, [r3, #0]
					searchC();
 800cc5a:	f002 fd79 	bl	800f750 <searchC>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800cc5e:	2064      	movs	r0, #100	; 0x64
 800cc60:	f7f8 fb42 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 800cc64:	4b8a      	ldr	r3, [pc, #552]	; (800ce90 <perfect_pass+0x81c>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a8a      	ldr	r2, [pc, #552]	; (800ce94 <perfect_pass+0x820>)
 800cc6a:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800cc6c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cc70:	f7f4 f9d4 	bl	800101c <HAL_Delay>



					//----a二次探索スラローム+既知区間加速走行 speed2----
					printf("Second Run. (Continuous)\n");
 800cc74:	4888      	ldr	r0, [pc, #544]	; (800ce98 <perfect_pass+0x824>)
 800cc76:	f006 fdcf 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800cc7a:	4a81      	ldr	r2, [pc, #516]	; (800ce80 <perfect_pass+0x80c>)
 800cc7c:	8813      	ldrh	r3, [r2, #0]
 800cc7e:	f043 0320 	orr.w	r3, r3, #32
 800cc82:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800cc84:	4a7e      	ldr	r2, [pc, #504]	; (800ce80 <perfect_pass+0x80c>)
 800cc86:	8813      	ldrh	r3, [r2, #0]
 800cc88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cc8c:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800cc8e:	4a7c      	ldr	r2, [pc, #496]	; (800ce80 <perfect_pass+0x80c>)
 800cc90:	8813      	ldrh	r3, [r2, #0]
 800cc92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cc96:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800cc98:	4b7a      	ldr	r3, [pc, #488]	; (800ce84 <perfect_pass+0x810>)
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	701a      	strb	r2, [r3, #0]

					accel_hs = 5000;
 800cc9e:	4b7f      	ldr	r3, [pc, #508]	; (800ce9c <perfect_pass+0x828>)
 800cca0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cca4:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1200;
 800cca6:	4b7e      	ldr	r3, [pc, #504]	; (800cea0 <perfect_pass+0x82c>)
 800cca8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800ccac:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800ccae:	4b76      	ldr	r3, [pc, #472]	; (800ce88 <perfect_pass+0x814>)
 800ccb0:	2207      	movs	r2, #7
 800ccb2:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ccb4:	4b75      	ldr	r3, [pc, #468]	; (800ce8c <perfect_pass+0x818>)
 800ccb6:	2207      	movs	r2, #7
 800ccb8:	701a      	strb	r2, [r3, #0]

//					get_base();

					searchD();
 800ccba:	f002 ff1f 	bl	800fafc <searchD>
					HAL_Delay(2000);
 800ccbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ccc2:	f7f4 f9ab 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ccc6:	4b71      	ldr	r3, [pc, #452]	; (800ce8c <perfect_pass+0x818>)
 800ccc8:	2200      	movs	r2, #0
 800ccca:	701a      	strb	r2, [r3, #0]
 800cccc:	4b6f      	ldr	r3, [pc, #444]	; (800ce8c <perfect_pass+0x818>)
 800ccce:	781a      	ldrb	r2, [r3, #0]
 800ccd0:	4b6d      	ldr	r3, [pc, #436]	; (800ce88 <perfect_pass+0x814>)
 800ccd2:	701a      	strb	r2, [r3, #0]
					searchD();
 800ccd4:	f002 ff12 	bl	800fafc <searchD>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800ccd8:	2064      	movs	r0, #100	; 0x64
 800ccda:	f7f8 fb05 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 800ccde:	4b6c      	ldr	r3, [pc, #432]	; (800ce90 <perfect_pass+0x81c>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a6c      	ldr	r2, [pc, #432]	; (800ce94 <perfect_pass+0x820>)
 800cce4:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800cce6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ccea:	f7f4 f997 	bl	800101c <HAL_Delay>
					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
					degree_z = target_degree_z;
					HAL_Delay(2000);

*/					//----a二次探索スラロームHigh Speed + 既知区間加速----
					printf("Second Run. (Slalom)\n");
 800ccee:	486d      	ldr	r0, [pc, #436]	; (800cea4 <perfect_pass+0x830>)
 800ccf0:	f006 fd92 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800ccf4:	4a62      	ldr	r2, [pc, #392]	; (800ce80 <perfect_pass+0x80c>)
 800ccf6:	8813      	ldrh	r3, [r2, #0]
 800ccf8:	f043 0320 	orr.w	r3, r3, #32
 800ccfc:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800ccfe:	4a60      	ldr	r2, [pc, #384]	; (800ce80 <perfect_pass+0x80c>)
 800cd00:	8813      	ldrh	r3, [r2, #0]
 800cd02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cd06:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800cd08:	4a5d      	ldr	r2, [pc, #372]	; (800ce80 <perfect_pass+0x80c>)
 800cd0a:	8813      	ldrh	r3, [r2, #0]
 800cd0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cd10:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800cd12:	4b5c      	ldr	r3, [pc, #368]	; (800ce84 <perfect_pass+0x810>)
 800cd14:	2200      	movs	r2, #0
 800cd16:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 800cd18:	4b60      	ldr	r3, [pc, #384]	; (800ce9c <perfect_pass+0x828>)
 800cd1a:	f242 7210 	movw	r2, #10000	; 0x2710
 800cd1e:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 1600;
 800cd20:	4b5f      	ldr	r3, [pc, #380]	; (800cea0 <perfect_pass+0x82c>)
 800cd22:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cd26:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800cd28:	4b57      	ldr	r3, [pc, #348]	; (800ce88 <perfect_pass+0x814>)
 800cd2a:	2207      	movs	r2, #7
 800cd2c:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800cd2e:	4b57      	ldr	r3, [pc, #348]	; (800ce8c <perfect_pass+0x818>)
 800cd30:	2207      	movs	r2, #7
 800cd32:	701a      	strb	r2, [r3, #0]

//					get_base();

					searchD2();
 800cd34:	f002 ffe4 	bl	800fd00 <searchD2>
					HAL_Delay(2000);
 800cd38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cd3c:	f7f4 f96e 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800cd40:	4b52      	ldr	r3, [pc, #328]	; (800ce8c <perfect_pass+0x818>)
 800cd42:	2200      	movs	r2, #0
 800cd44:	701a      	strb	r2, [r3, #0]
 800cd46:	4b51      	ldr	r3, [pc, #324]	; (800ce8c <perfect_pass+0x818>)
 800cd48:	781a      	ldrb	r2, [r3, #0]
 800cd4a:	4b4f      	ldr	r3, [pc, #316]	; (800ce88 <perfect_pass+0x814>)
 800cd4c:	701a      	strb	r2, [r3, #0]
					searchD2();
 800cd4e:	f002 ffd7 	bl	800fd00 <searchD2>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800cd52:	2064      	movs	r0, #100	; 0x64
 800cd54:	f7f8 fac8 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 800cd58:	4b4d      	ldr	r3, [pc, #308]	; (800ce90 <perfect_pass+0x81c>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a4d      	ldr	r2, [pc, #308]	; (800ce94 <perfect_pass+0x820>)
 800cd5e:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800cd60:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cd64:	f7f4 f95a 	bl	800101c <HAL_Delay>



					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed2----
					printf("Second Run. (Slalom)\n");
 800cd68:	484e      	ldr	r0, [pc, #312]	; (800cea4 <perfect_pass+0x830>)
 800cd6a:	f006 fd55 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800cd6e:	4a44      	ldr	r2, [pc, #272]	; (800ce80 <perfect_pass+0x80c>)
 800cd70:	8813      	ldrh	r3, [r2, #0]
 800cd72:	f043 0320 	orr.w	r3, r3, #32
 800cd76:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800cd78:	4a41      	ldr	r2, [pc, #260]	; (800ce80 <perfect_pass+0x80c>)
 800cd7a:	8813      	ldrh	r3, [r2, #0]
 800cd7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cd80:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800cd82:	4a3f      	ldr	r2, [pc, #252]	; (800ce80 <perfect_pass+0x80c>)
 800cd84:	8813      	ldrh	r3, [r2, #0]
 800cd86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cd8a:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800cd8c:	4b3d      	ldr	r3, [pc, #244]	; (800ce84 <perfect_pass+0x810>)
 800cd8e:	2200      	movs	r2, #0
 800cd90:	701a      	strb	r2, [r3, #0]

					accel_hs = 10000;
 800cd92:	4b42      	ldr	r3, [pc, #264]	; (800ce9c <perfect_pass+0x828>)
 800cd94:	f242 7210 	movw	r2, #10000	; 0x2710
 800cd98:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2000;
 800cd9a:	4b41      	ldr	r3, [pc, #260]	; (800cea0 <perfect_pass+0x82c>)
 800cd9c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800cda0:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800cda2:	4b39      	ldr	r3, [pc, #228]	; (800ce88 <perfect_pass+0x814>)
 800cda4:	2207      	movs	r2, #7
 800cda6:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800cda8:	4b38      	ldr	r3, [pc, #224]	; (800ce8c <perfect_pass+0x818>)
 800cdaa:	2207      	movs	r2, #7
 800cdac:	701a      	strb	r2, [r3, #0]

//					get_base();

					searchD2();
 800cdae:	f002 ffa7 	bl	800fd00 <searchD2>
					HAL_Delay(2000);
 800cdb2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cdb6:	f7f4 f931 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800cdba:	4b34      	ldr	r3, [pc, #208]	; (800ce8c <perfect_pass+0x818>)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	701a      	strb	r2, [r3, #0]
 800cdc0:	4b32      	ldr	r3, [pc, #200]	; (800ce8c <perfect_pass+0x818>)
 800cdc2:	781a      	ldrb	r2, [r3, #0]
 800cdc4:	4b30      	ldr	r3, [pc, #192]	; (800ce88 <perfect_pass+0x814>)
 800cdc6:	701a      	strb	r2, [r3, #0]
					searchD2();
 800cdc8:	f002 ff9a 	bl	800fd00 <searchD2>

					driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800cdcc:	2064      	movs	r0, #100	; 0x64
 800cdce:	f7f8 fa8b 	bl	80052e8 <driveC2>
					degree_z = target_degree_z;
 800cdd2:	4b2f      	ldr	r3, [pc, #188]	; (800ce90 <perfect_pass+0x81c>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4a2f      	ldr	r2, [pc, #188]	; (800ce94 <perfect_pass+0x820>)
 800cdd8:	6013      	str	r3, [r2, #0]
					HAL_Delay(2000);
 800cdda:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cdde:	f7f4 f91d 	bl	800101c <HAL_Delay>



					//----a二次探索スラロームHigh Speed + 既知区間加速 Speed3----
					printf("Second Run. (Slalom)\n");
 800cde2:	4830      	ldr	r0, [pc, #192]	; (800cea4 <perfect_pass+0x830>)
 800cde4:	f006 fd18 	bl	8013818 <puts>
					MF.FLAG.SCND = 1;
 800cde8:	4a25      	ldr	r2, [pc, #148]	; (800ce80 <perfect_pass+0x80c>)
 800cdea:	8813      	ldrh	r3, [r2, #0]
 800cdec:	f043 0320 	orr.w	r3, r3, #32
 800cdf0:	8013      	strh	r3, [r2, #0]
					MF.FLAG.ACCL2 = 1;
 800cdf2:	4a23      	ldr	r2, [pc, #140]	; (800ce80 <perfect_pass+0x80c>)
 800cdf4:	8813      	ldrh	r3, [r2, #0]
 800cdf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cdfa:	8013      	strh	r3, [r2, #0]
					MF.FLAG.STRAIGHT = 1;
 800cdfc:	4a20      	ldr	r2, [pc, #128]	; (800ce80 <perfect_pass+0x80c>)
 800cdfe:	8813      	ldrh	r3, [r2, #0]
 800ce00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ce04:	8013      	strh	r3, [r2, #0]
					start_flag = 0;
 800ce06:	4b1f      	ldr	r3, [pc, #124]	; (800ce84 <perfect_pass+0x810>)
 800ce08:	2200      	movs	r2, #0
 800ce0a:	701a      	strb	r2, [r3, #0]

					accel_hs = 20000;
 800ce0c:	4b23      	ldr	r3, [pc, #140]	; (800ce9c <perfect_pass+0x828>)
 800ce0e:	f644 6220 	movw	r2, #20000	; 0x4e20
 800ce12:	801a      	strh	r2, [r3, #0]
					speed_max_hs = 2500;
 800ce14:	4b22      	ldr	r3, [pc, #136]	; (800cea0 <perfect_pass+0x82c>)
 800ce16:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800ce1a:	801a      	strh	r2, [r3, #0]
					goal_x = 7;
 800ce1c:	4b1a      	ldr	r3, [pc, #104]	; (800ce88 <perfect_pass+0x814>)
 800ce1e:	2207      	movs	r2, #7
 800ce20:	701a      	strb	r2, [r3, #0]
					goal_y = 7;
 800ce22:	4b1a      	ldr	r3, [pc, #104]	; (800ce8c <perfect_pass+0x818>)
 800ce24:	2207      	movs	r2, #7
 800ce26:	701a      	strb	r2, [r3, #0]

//					get_base();

					searchD2();
 800ce28:	f002 ff6a 	bl	800fd00 <searchD2>
					HAL_Delay(2000);
 800ce2c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ce30:	f7f4 f8f4 	bl	800101c <HAL_Delay>

					goal_x = goal_y = 0;
 800ce34:	4b15      	ldr	r3, [pc, #84]	; (800ce8c <perfect_pass+0x818>)
 800ce36:	2200      	movs	r2, #0
 800ce38:	701a      	strb	r2, [r3, #0]
 800ce3a:	4b14      	ldr	r3, [pc, #80]	; (800ce8c <perfect_pass+0x818>)
 800ce3c:	781a      	ldrb	r2, [r3, #0]
 800ce3e:	4b12      	ldr	r3, [pc, #72]	; (800ce88 <perfect_pass+0x814>)
 800ce40:	701a      	strb	r2, [r3, #0]
					searchD2();
 800ce42:	f002 ff5d 	bl	800fd00 <searchD2>


					for(int i=0; i<m_start; i++){
 800ce46:	2300      	movs	r3, #0
 800ce48:	607b      	str	r3, [r7, #4]
 800ce4a:	e011      	b.n	800ce70 <perfect_pass+0x7fc>
					  buzzer(mario_start[i][0], mario_start[i][1]);
 800ce4c:	4a16      	ldr	r2, [pc, #88]	; (800cea8 <perfect_pass+0x834>)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ce54:	4a14      	ldr	r2, [pc, #80]	; (800cea8 <perfect_pass+0x834>)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	00db      	lsls	r3, r3, #3
 800ce5a:	4413      	add	r3, r2
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	4619      	mov	r1, r3
 800ce60:	f002 fade 	bl	800f420 <buzzer>
					  full_led_write(RED);
 800ce64:	2001      	movs	r0, #1
 800ce66:	f005 fecf 	bl	8012c08 <full_led_write>
					for(int i=0; i<m_start; i++){
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	607b      	str	r3, [r7, #4]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2b06      	cmp	r3, #6
 800ce74:	ddea      	ble.n	800ce4c <perfect_pass+0x7d8>
					searchF4();

					goal_x = 7;
					goal_y = 7;

*/					break;
 800ce76:	bf00      	nop
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800ce78:	e405      	b.n	800c686 <perfect_pass+0x12>
 800ce7a:	bf00      	nop
 800ce7c:	08014cc4 	.word	0x08014cc4
 800ce80:	20000fac 	.word	0x20000fac
 800ce84:	200012ec 	.word	0x200012ec
 800ce88:	20000bf1 	.word	0x20000bf1
 800ce8c:	20000b8c 	.word	0x20000b8c
 800ce90:	20000c40 	.word	0x20000c40
 800ce94:	20000b9c 	.word	0x20000b9c
 800ce98:	08014ce8 	.word	0x08014ce8
 800ce9c:	2000048c 	.word	0x2000048c
 800cea0:	20000fc0 	.word	0x20000fc0
 800cea4:	08014d1c 	.word	0x08014d1c
 800cea8:	20000008 	.word	0x20000008

0800ceac <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b088      	sub	sp, #32
 800ceb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 800ceba:	230b      	movs	r3, #11
 800cebc:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 800cebe:	2301      	movs	r3, #1
 800cec0:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800cec2:	2302      	movs	r3, #2
 800cec4:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 800cec6:	f7f4 fdeb 	bl	8001aa0 <HAL_FLASH_Unlock>
 800ceca:	4603      	mov	r3, r0
 800cecc:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 800cece:	7ffb      	ldrb	r3, [r7, #31]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d001      	beq.n	800ced8 <eeprom_enable_write+0x2c>
 800ced4:	7ffb      	ldrb	r3, [r7, #31]
 800ced6:	e009      	b.n	800ceec <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800ced8:	1d3a      	adds	r2, r7, #4
 800ceda:	f107 0308 	add.w	r3, r7, #8
 800cede:	4611      	mov	r1, r2
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7f4 ff3b 	bl	8001d5c <HAL_FLASHEx_Erase>
 800cee6:	4603      	mov	r3, r0
 800cee8:	77fb      	strb	r3, [r7, #31]
  return status;
 800ceea:	7ffb      	ldrb	r3, [r7, #31]
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3720      	adds	r7, #32
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 800cef4:	b580      	push	{r7, lr}
 800cef6:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 800cef8:	f7f4 fdf4 	bl	8001ae4 <HAL_FLASH_Lock>
 800cefc:	4603      	mov	r3, r0
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 800cf02:	b590      	push	{r4, r7, lr}
 800cf04:	b085      	sub	sp, #20
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + EEPROM_START_ADDRESS;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800cf14:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800cf18:	005b      	lsls	r3, r3, #1
 800cf1a:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 800cf1c:	887b      	ldrh	r3, [r7, #2]
 800cf1e:	f04f 0400 	mov.w	r4, #0
 800cf22:	461a      	mov	r2, r3
 800cf24:	4623      	mov	r3, r4
 800cf26:	6879      	ldr	r1, [r7, #4]
 800cf28:	2001      	movs	r0, #1
 800cf2a:	f7f4 fd65 	bl	80019f8 <HAL_FLASH_Program>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	73fb      	strb	r3, [r7, #15]
  return status;
 800cf32:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3714      	adds	r7, #20
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd90      	pop	{r4, r7, pc}

0800cf3c <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 800cf44:	2300      	movs	r3, #0
 800cf46:	81fb      	strh	r3, [r7, #14]
  address = address*2 + EEPROM_START_ADDRESS;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800cf4e:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800cf52:	005b      	lsls	r3, r3, #1
 800cf54:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	881b      	ldrh	r3, [r3, #0]
 800cf5a:	81fb      	strh	r3, [r7, #14]
  return val;
 800cf5c:	89fb      	ldrh	r3, [r7, #14]
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3714      	adds	r7, #20
 800cf62:	46bd      	mov	sp, r7
 800cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf68:	4770      	bx	lr
	...

0800cf6c <gyro_init>:
#include "global.h"

SPI_HandleTypeDef hspi3;


void gyro_init(void){
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay(100); 					// wait start up
 800cf72:	2064      	movs	r0, #100	; 0x64
 800cf74:	f7f4 f852 	bl	800101c <HAL_Delay>
  who_am_i = read_byte(WHO_AM_I); 	// 1. read who am i
 800cf78:	2075      	movs	r0, #117	; 0x75
 800cf7a:	f000 f82f 	bl	800cfdc <read_byte>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	71fb      	strb	r3, [r7, #7]
  printf("0x%x\r\n",who_am_i); 		// 2. check who am i value
 800cf82:	79fb      	ldrb	r3, [r7, #7]
 800cf84:	4619      	mov	r1, r3
 800cf86:	4813      	ldr	r0, [pc, #76]	; (800cfd4 <gyro_init+0x68>)
 800cf88:	f006 fbd2 	bl	8013730 <iprintf>

  // 2. error check
  if (who_am_i != 0x98){
 800cf8c:	79fb      	ldrb	r3, [r7, #7]
 800cf8e:	2b98      	cmp	r3, #152	; 0x98
 800cf90:	d003      	beq.n	800cf9a <gyro_init+0x2e>
    while(1){
      printf("gyro_error\r");
 800cf92:	4811      	ldr	r0, [pc, #68]	; (800cfd8 <gyro_init+0x6c>)
 800cf94:	f006 fbcc 	bl	8013730 <iprintf>
 800cf98:	e7fb      	b.n	800cf92 <gyro_init+0x26>
    }
  }

  HAL_Delay(50); // wait
 800cf9a:	2032      	movs	r0, #50	; 0x32
 800cf9c:	f7f4 f83e 	bl	800101c <HAL_Delay>
  write_byte(PWR_MGMT_1, 0x00); 	// 3. set pwr_might
 800cfa0:	2100      	movs	r1, #0
 800cfa2:	206b      	movs	r0, #107	; 0x6b
 800cfa4:	f000 f846 	bl	800d034 <write_byte>

  HAL_Delay(50);
 800cfa8:	2032      	movs	r0, #50	; 0x32
 800cfaa:	f7f4 f837 	bl	800101c <HAL_Delay>
  write_byte(CONFIG, 0x00); 		// 4. set config
 800cfae:	2100      	movs	r1, #0
 800cfb0:	201a      	movs	r0, #26
 800cfb2:	f000 f83f 	bl	800d034 <write_byte>

  HAL_Delay(50);
 800cfb6:	2032      	movs	r0, #50	; 0x32
 800cfb8:	f7f4 f830 	bl	800101c <HAL_Delay>
  write_byte(GYRO_CONFIG, 0x18); 	// 5. set gyro config
 800cfbc:	2118      	movs	r1, #24
 800cfbe:	201b      	movs	r0, #27
 800cfc0:	f000 f838 	bl	800d034 <write_byte>

  HAL_Delay(50);
 800cfc4:	2032      	movs	r0, #50	; 0x32
 800cfc6:	f7f4 f829 	bl	800101c <HAL_Delay>
}
 800cfca:	bf00      	nop
 800cfcc:	3708      	adds	r7, #8
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	08014dfc 	.word	0x08014dfc
 800cfd8:	08014e04 	.word	0x08014e04

0800cfdc <read_byte>:


uint8_t read_byte(uint8_t reg){
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret,val;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET ); 	//cs = Low;
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	2104      	movs	r1, #4
 800cfea:	4810      	ldr	r0, [pc, #64]	; (800d02c <read_byte+0x50>)
 800cfec:	f7f5 f98a 	bl	8002304 <HAL_GPIO_WritePin>
  ret = reg | 0x80;  // MSB = 1
 800cff0:	79fb      	ldrb	r3, [r7, #7]
 800cff2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800cffa:	f107 010f 	add.w	r1, r7, #15
 800cffe:	2364      	movs	r3, #100	; 0x64
 800d000:	2201      	movs	r2, #1
 800d002:	480b      	ldr	r0, [pc, #44]	; (800d030 <read_byte+0x54>)
 800d004:	f7f5 fe06 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3,&val,1,100); 						// read 1byte(read data)
 800d008:	f107 010e 	add.w	r1, r7, #14
 800d00c:	2364      	movs	r3, #100	; 0x64
 800d00e:	2201      	movs	r2, #1
 800d010:	4807      	ldr	r0, [pc, #28]	; (800d030 <read_byte+0x54>)
 800d012:	f7f5 ff33 	bl	8002e7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET );  	//cs = High;
 800d016:	2201      	movs	r2, #1
 800d018:	2104      	movs	r1, #4
 800d01a:	4804      	ldr	r0, [pc, #16]	; (800d02c <read_byte+0x50>)
 800d01c:	f7f5 f972 	bl	8002304 <HAL_GPIO_WritePin>
  return val;
 800d020:	7bbb      	ldrb	r3, [r7, #14]
}
 800d022:	4618      	mov	r0, r3
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	40020c00 	.word	0x40020c00
 800d030:	2000017c 	.word	0x2000017c

0800d034 <write_byte>:


void write_byte(uint8_t reg, uint8_t val){
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	4603      	mov	r3, r0
 800d03c:	460a      	mov	r2, r1
 800d03e:	71fb      	strb	r3, [r7, #7]
 800d040:	4613      	mov	r3, r2
 800d042:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  ret = reg & 0x7F ; // MSB = 0
 800d044:	79fb      	ldrb	r3, [r7, #7]
 800d046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); 	// cs = Low;
 800d04e:	2200      	movs	r2, #0
 800d050:	2104      	movs	r1, #4
 800d052:	480c      	ldr	r0, [pc, #48]	; (800d084 <write_byte+0x50>)
 800d054:	f7f5 f956 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &ret,1,100); 					// sent 1byte(address)
 800d058:	f107 010f 	add.w	r1, r7, #15
 800d05c:	2364      	movs	r3, #100	; 0x64
 800d05e:	2201      	movs	r2, #1
 800d060:	4809      	ldr	r0, [pc, #36]	; (800d088 <write_byte+0x54>)
 800d062:	f7f5 fdd7 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi3, &val,1,100); 					// read 1byte(write data)
 800d066:	1db9      	adds	r1, r7, #6
 800d068:	2364      	movs	r3, #100	; 0x64
 800d06a:	2201      	movs	r2, #1
 800d06c:	4806      	ldr	r0, [pc, #24]	; (800d088 <write_byte+0x54>)
 800d06e:	f7f5 fdd1 	bl	8002c14 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); 		// cs = High;
 800d072:	2201      	movs	r2, #1
 800d074:	2104      	movs	r1, #4
 800d076:	4803      	ldr	r0, [pc, #12]	; (800d084 <write_byte+0x50>)
 800d078:	f7f5 f944 	bl	8002304 <HAL_GPIO_WritePin>
}
 800d07c:	bf00      	nop
 800d07e:	3710      	adds	r7, #16
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	40020c00 	.word	0x40020c00
 800d088:	2000017c 	.word	0x2000017c

0800d08c <accel_read_x>:


float accel_read_x(void){
 800d08c:	b590      	push	{r4, r7, lr}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
  int16_t accel_x;
  float accel;

  // H:8bit shift, Link h and l
  accel_x = (int16_t)((int16_t)(read_byte(ACCEL_XOUT_H) << 8) | read_byte(ACCEL_XOUT_L));
 800d092:	203b      	movs	r0, #59	; 0x3b
 800d094:	f7ff ffa2 	bl	800cfdc <read_byte>
 800d098:	4603      	mov	r3, r0
 800d09a:	021b      	lsls	r3, r3, #8
 800d09c:	b21c      	sxth	r4, r3
 800d09e:	203c      	movs	r0, #60	; 0x3c
 800d0a0:	f7ff ff9c 	bl	800cfdc <read_byte>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	b21b      	sxth	r3, r3
 800d0a8:	4323      	orrs	r3, r4
 800d0aa:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_x / ACCEL_FACTOR); // dps to accel
 800d0ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	da01      	bge.n	800d0b8 <accel_read_x+0x2c>
 800d0b4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800d0b8:	12db      	asrs	r3, r3, #11
 800d0ba:	b21b      	sxth	r3, r3
 800d0bc:	ee07 3a90 	vmov	s15, r3
 800d0c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0c4:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	ee07 3a90 	vmov	s15, r3
}
 800d0ce:	eeb0 0a67 	vmov.f32	s0, s15
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd90      	pop	{r4, r7, pc}

0800d0d8 <accel_read_y>:


float accel_read_y(void){
 800d0d8:	b590      	push	{r4, r7, lr}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
  int16_t accel_y;
  float accel;

  // H:8bit shift, Link h and l
  accel_y = (int16_t)((int16_t)(read_byte(ACCEL_YOUT_H) << 8) | read_byte(ACCEL_YOUT_L));
 800d0de:	203d      	movs	r0, #61	; 0x3d
 800d0e0:	f7ff ff7c 	bl	800cfdc <read_byte>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	021b      	lsls	r3, r3, #8
 800d0e8:	b21c      	sxth	r4, r3
 800d0ea:	203e      	movs	r0, #62	; 0x3e
 800d0ec:	f7ff ff76 	bl	800cfdc <read_byte>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	b21b      	sxth	r3, r3
 800d0f4:	4323      	orrs	r3, r4
 800d0f6:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_y / ACCEL_FACTOR); // dps to accel
 800d0f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	da01      	bge.n	800d104 <accel_read_y+0x2c>
 800d100:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800d104:	12db      	asrs	r3, r3, #11
 800d106:	b21b      	sxth	r3, r3
 800d108:	ee07 3a90 	vmov	s15, r3
 800d10c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d110:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	ee07 3a90 	vmov	s15, r3
}
 800d11a:	eeb0 0a67 	vmov.f32	s0, s15
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	bd90      	pop	{r4, r7, pc}

0800d124 <accel_read_z>:


float accel_read_z(void){
 800d124:	b590      	push	{r4, r7, lr}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
  int16_t accel_z;
  float accel;

  // H:8bit shift, Link h and l
  accel_z = (int16_t)((int16_t)(read_byte(ACCEL_ZOUT_H) << 8) | read_byte(ACCEL_ZOUT_L));
 800d12a:	203f      	movs	r0, #63	; 0x3f
 800d12c:	f7ff ff56 	bl	800cfdc <read_byte>
 800d130:	4603      	mov	r3, r0
 800d132:	021b      	lsls	r3, r3, #8
 800d134:	b21c      	sxth	r4, r3
 800d136:	2040      	movs	r0, #64	; 0x40
 800d138:	f7ff ff50 	bl	800cfdc <read_byte>
 800d13c:	4603      	mov	r3, r0
 800d13e:	b21b      	sxth	r3, r3
 800d140:	4323      	orrs	r3, r4
 800d142:	80fb      	strh	r3, [r7, #6]

  accel = (float)(accel_z / ACCEL_FACTOR-7); // dps to accel
 800d144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	da01      	bge.n	800d150 <accel_read_z+0x2c>
 800d14c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800d150:	12db      	asrs	r3, r3, #11
 800d152:	b21b      	sxth	r3, r3
 800d154:	3b07      	subs	r3, #7
 800d156:	ee07 3a90 	vmov	s15, r3
 800d15a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d15e:	edc7 7a00 	vstr	s15, [r7]
  return accel;
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	ee07 3a90 	vmov	s15, r3
}
 800d168:	eeb0 0a67 	vmov.f32	s0, s15
 800d16c:	370c      	adds	r7, #12
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd90      	pop	{r4, r7, pc}
 800d172:	0000      	movs	r0, r0
 800d174:	0000      	movs	r0, r0
	...

0800d178 <gyro_read_x>:


float gyro_read_x(void){
 800d178:	b590      	push	{r4, r7, lr}
 800d17a:	b083      	sub	sp, #12
 800d17c:	af00      	add	r7, sp, #0
  int16_t gyro_x;
  float omega;

  // H:8bit shift, Link h and l
  gyro_x = (int16_t)((int16_t)(read_byte(GYRO_XOUT_H) << 8) | read_byte(GYRO_XOUT_L));
 800d17e:	2043      	movs	r0, #67	; 0x43
 800d180:	f7ff ff2c 	bl	800cfdc <read_byte>
 800d184:	4603      	mov	r3, r0
 800d186:	021b      	lsls	r3, r3, #8
 800d188:	b21c      	sxth	r4, r3
 800d18a:	2044      	movs	r0, #68	; 0x44
 800d18c:	f7ff ff26 	bl	800cfdc <read_byte>
 800d190:	4603      	mov	r3, r0
 800d192:	b21b      	sxth	r3, r3
 800d194:	4323      	orrs	r3, r4
 800d196:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_x / GYRO_FACTOR+1.4); // dps to deg/sec
 800d198:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7f3 f9b9 	bl	8000514 <__aeabi_i2d>
 800d1a2:	a30f      	add	r3, pc, #60	; (adr r3, 800d1e0 <gyro_read_x+0x68>)
 800d1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a8:	f7f3 fb48 	bl	800083c <__aeabi_ddiv>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	4621      	mov	r1, r4
 800d1b4:	a30c      	add	r3, pc, #48	; (adr r3, 800d1e8 <gyro_read_x+0x70>)
 800d1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ba:	f7f3 f85f 	bl	800027c <__adddf3>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	460c      	mov	r4, r1
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	4621      	mov	r1, r4
 800d1c6:	f7f3 fce7 	bl	8000b98 <__aeabi_d2f>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	603b      	str	r3, [r7, #0]
  return omega;
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	ee07 3a90 	vmov	s15, r3
}
 800d1d4:	eeb0 0a67 	vmov.f32	s0, s15
 800d1d8:	370c      	adds	r7, #12
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd90      	pop	{r4, r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	66666666 	.word	0x66666666
 800d1e4:	40306666 	.word	0x40306666
 800d1e8:	66666666 	.word	0x66666666
 800d1ec:	3ff66666 	.word	0x3ff66666

0800d1f0 <gyro_read_y>:


float gyro_read_y(void){
 800d1f0:	b590      	push	{r4, r7, lr}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
  int16_t gyro_y;
  float omega;

  // H:8bit shift, Link h and l
  gyro_y = (int16_t)((int16_t)(read_byte(GYRO_YOUT_H) << 8) | read_byte(GYRO_YOUT_L));
 800d1f6:	2045      	movs	r0, #69	; 0x45
 800d1f8:	f7ff fef0 	bl	800cfdc <read_byte>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	021b      	lsls	r3, r3, #8
 800d200:	b21c      	sxth	r4, r3
 800d202:	2046      	movs	r0, #70	; 0x46
 800d204:	f7ff feea 	bl	800cfdc <read_byte>
 800d208:	4603      	mov	r3, r0
 800d20a:	b21b      	sxth	r3, r3
 800d20c:	4323      	orrs	r3, r4
 800d20e:	80fb      	strh	r3, [r7, #6]

  omega = (float)(gyro_y / GYRO_FACTOR-0.75); // dps to deg/sec
 800d210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d214:	4618      	mov	r0, r3
 800d216:	f7f3 f97d 	bl	8000514 <__aeabi_i2d>
 800d21a:	a310      	add	r3, pc, #64	; (adr r3, 800d25c <gyro_read_y+0x6c>)
 800d21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d220:	f7f3 fb0c 	bl	800083c <__aeabi_ddiv>
 800d224:	4603      	mov	r3, r0
 800d226:	460c      	mov	r4, r1
 800d228:	4618      	mov	r0, r3
 800d22a:	4621      	mov	r1, r4
 800d22c:	f04f 0200 	mov.w	r2, #0
 800d230:	4b09      	ldr	r3, [pc, #36]	; (800d258 <gyro_read_y+0x68>)
 800d232:	f7f3 f821 	bl	8000278 <__aeabi_dsub>
 800d236:	4603      	mov	r3, r0
 800d238:	460c      	mov	r4, r1
 800d23a:	4618      	mov	r0, r3
 800d23c:	4621      	mov	r1, r4
 800d23e:	f7f3 fcab 	bl	8000b98 <__aeabi_d2f>
 800d242:	4603      	mov	r3, r0
 800d244:	603b      	str	r3, [r7, #0]
  return omega;
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	ee07 3a90 	vmov	s15, r3
}
 800d24c:	eeb0 0a67 	vmov.f32	s0, s15
 800d250:	370c      	adds	r7, #12
 800d252:	46bd      	mov	sp, r7
 800d254:	bd90      	pop	{r4, r7, pc}
 800d256:	bf00      	nop
 800d258:	3fe80000 	.word	0x3fe80000
 800d25c:	66666666 	.word	0x66666666
 800d260:	40306666 	.word	0x40306666
 800d264:	00000000 	.word	0x00000000

0800d268 <gyro_read_z>:


float gyro_read_z(void){
 800d268:	b5b0      	push	{r4, r5, r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
  int16_t gyro_z;
  float omega;

  // H:8bit shift, Link h and l
  gyro_z = (int16_t)((int16_t)(read_byte(GYRO_ZOUT_H) << 8) | read_byte(GYRO_ZOUT_L));
 800d26e:	2047      	movs	r0, #71	; 0x47
 800d270:	f7ff feb4 	bl	800cfdc <read_byte>
 800d274:	4603      	mov	r3, r0
 800d276:	021b      	lsls	r3, r3, #8
 800d278:	b21c      	sxth	r4, r3
 800d27a:	2048      	movs	r0, #72	; 0x48
 800d27c:	f7ff feae 	bl	800cfdc <read_byte>
 800d280:	4603      	mov	r3, r0
 800d282:	b21b      	sxth	r3, r3
 800d284:	4323      	orrs	r3, r4
 800d286:	80fb      	strh	r3, [r7, #6]

//  omega = (float)(gyro_z / GYRO_FACTOR+1.15); // dps to deg/sec
  omega = (float)(gyro_z / GYRO_FACTOR-gyro_drift_value); // dps to deg/sec
 800d288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7f3 f941 	bl	8000514 <__aeabi_i2d>
 800d292:	a314      	add	r3, pc, #80	; (adr r3, 800d2e4 <gyro_read_z+0x7c>)
 800d294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d298:	f7f3 fad0 	bl	800083c <__aeabi_ddiv>
 800d29c:	4603      	mov	r3, r0
 800d29e:	460c      	mov	r4, r1
 800d2a0:	4625      	mov	r5, r4
 800d2a2:	461c      	mov	r4, r3
 800d2a4:	4b0e      	ldr	r3, [pc, #56]	; (800d2e0 <gyro_read_z+0x78>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7f3 f945 	bl	8000538 <__aeabi_f2d>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	4629      	mov	r1, r5
 800d2b6:	f7f2 ffdf 	bl	8000278 <__aeabi_dsub>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	460c      	mov	r4, r1
 800d2be:	4618      	mov	r0, r3
 800d2c0:	4621      	mov	r1, r4
 800d2c2:	f7f3 fc69 	bl	8000b98 <__aeabi_d2f>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	603b      	str	r3, [r7, #0]
  return omega;
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	ee07 3a90 	vmov	s15, r3
}
 800d2d0:	eeb0 0a67 	vmov.f32	s0, s15
 800d2d4:	3708      	adds	r7, #8
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bdb0      	pop	{r4, r5, r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	f3af 8000 	nop.w
 800d2e0:	20000c38 	.word	0x20000c38
 800d2e4:	66666666 	.word	0x66666666
 800d2e8:	40306666 	.word	0x40306666

0800d2ec <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int c) {
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  if( c == '\n' ) {
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2b0a      	cmp	r3, #10
 800d2f8:	d108      	bne.n	800d30c <__io_putchar+0x20>
    int _c = '\r';
 800d2fa:	230d      	movs	r3, #13
 800d2fc:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &_c, 1, 1);
 800d2fe:	f107 010c 	add.w	r1, r7, #12
 800d302:	2301      	movs	r3, #1
 800d304:	2201      	movs	r2, #1
 800d306:	4807      	ldr	r0, [pc, #28]	; (800d324 <__io_putchar+0x38>)
 800d308:	f7f7 f9bb 	bl	8004682 <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart1, &c, 1, 1);
 800d30c:	1d39      	adds	r1, r7, #4
 800d30e:	2301      	movs	r3, #1
 800d310:	2201      	movs	r2, #1
 800d312:	4804      	ldr	r0, [pc, #16]	; (800d324 <__io_putchar+0x38>)
 800d314:	f7f7 f9b5 	bl	8004682 <HAL_UART_Transmit>
  return 0;
 800d318:	2300      	movs	r3, #0
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	20000ba4 	.word	0x20000ba4

0800d328 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d328:	b5b0      	push	{r4, r5, r7, lr}
 800d32a:	ed2d 8b02 	vpush	{d8}
 800d32e:	b08c      	sub	sp, #48	; 0x30
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d334:	2360      	movs	r3, #96	; 0x60
 800d336:	60bb      	str	r3, [r7, #8]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d338:	2300      	movs	r3, #0
 800d33a:	613b      	str	r3, [r7, #16]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d33c:	2300      	movs	r3, #0
 800d33e:	61bb      	str	r3, [r7, #24]

	if(htim == &htim6){
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	4ab5      	ldr	r2, [pc, #724]	; (800d618 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800d344:	4293      	cmp	r3, r2
 800d346:	f041 8375 	bne.w	800ea34 <HAL_TIM_PeriodElapsedCallback+0x170c>
		cnt_l = TIM4 -> CNT;
 800d34a:	4bb4      	ldr	r3, [pc, #720]	; (800d61c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800d34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d34e:	ee07 3a90 	vmov	s15, r3
 800d352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d356:	4bb2      	ldr	r3, [pc, #712]	; (800d620 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800d358:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = TIM8 -> CNT;
 800d35c:	4bb1      	ldr	r3, [pc, #708]	; (800d624 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800d35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d360:	ee07 3a90 	vmov	s15, r3
 800d364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d368:	4baf      	ldr	r3, [pc, #700]	; (800d628 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800d36a:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_l > 40000) cnt_l = cnt_l - 65535;		//0=>65505の値飛び検出用
 800d36e:	4bac      	ldr	r3, [pc, #688]	; (800d620 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800d370:	edd3 7a00 	vldr	s15, [r3]
 800d374:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800d62c <HAL_TIM_PeriodElapsedCallback+0x304>
 800d378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d380:	dd09      	ble.n	800d396 <HAL_TIM_PeriodElapsedCallback+0x6e>
 800d382:	4ba7      	ldr	r3, [pc, #668]	; (800d620 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800d384:	edd3 7a00 	vldr	s15, [r3]
 800d388:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800d630 <HAL_TIM_PeriodElapsedCallback+0x308>
 800d38c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d390:	4ba3      	ldr	r3, [pc, #652]	; (800d620 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800d392:	edc3 7a00 	vstr	s15, [r3]
		if(cnt_r > 40000) cnt_r = cnt_r - 65535;		//0=>65505の値飛び検出用
 800d396:	4ba4      	ldr	r3, [pc, #656]	; (800d628 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800d398:	edd3 7a00 	vldr	s15, [r3]
 800d39c:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800d62c <HAL_TIM_PeriodElapsedCallback+0x304>
 800d3a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d3a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3a8:	dd09      	ble.n	800d3be <HAL_TIM_PeriodElapsedCallback+0x96>
 800d3aa:	4b9f      	ldr	r3, [pc, #636]	; (800d628 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800d3ac:	edd3 7a00 	vldr	s15, [r3]
 800d3b0:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800d630 <HAL_TIM_PeriodElapsedCallback+0x308>
 800d3b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3b8:	4b9b      	ldr	r3, [pc, #620]	; (800d628 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800d3ba:	edc3 7a00 	vstr	s15, [r3]
		cnt_r = cnt_r * -1;								//a回転方向合わせ
 800d3be:	4b9a      	ldr	r3, [pc, #616]	; (800d628 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800d3c0:	edd3 7a00 	vldr	s15, [r3]
 800d3c4:	eef1 7a67 	vneg.f32	s15, s15
 800d3c8:	4b97      	ldr	r3, [pc, #604]	; (800d628 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800d3ca:	edc3 7a00 	vstr	s15, [r3]

		dist_l = dist_l + cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800d3ce:	4b99      	ldr	r3, [pc, #612]	; (800d634 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7f3 f8b0 	bl	8000538 <__aeabi_f2d>
 800d3d8:	4604      	mov	r4, r0
 800d3da:	460d      	mov	r5, r1
 800d3dc:	4b90      	ldr	r3, [pc, #576]	; (800d620 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7f3 f8a9 	bl	8000538 <__aeabi_f2d>
 800d3e6:	a388      	add	r3, pc, #544	; (adr r3, 800d608 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800d3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ec:	f7f3 f8fc 	bl	80005e8 <__aeabi_dmul>
 800d3f0:	4602      	mov	r2, r0
 800d3f2:	460b      	mov	r3, r1
 800d3f4:	4620      	mov	r0, r4
 800d3f6:	4629      	mov	r1, r5
 800d3f8:	f7f2 ff40 	bl	800027c <__adddf3>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	460c      	mov	r4, r1
 800d400:	4618      	mov	r0, r3
 800d402:	4621      	mov	r1, r4
 800d404:	f7f3 fbc8 	bl	8000b98 <__aeabi_d2f>
 800d408:	4602      	mov	r2, r0
 800d40a:	4b8a      	ldr	r3, [pc, #552]	; (800d634 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800d40c:	601a      	str	r2, [r3, #0]
		dist_r = dist_r + cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4);
 800d40e:	4b8a      	ldr	r3, [pc, #552]	; (800d638 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	4618      	mov	r0, r3
 800d414:	f7f3 f890 	bl	8000538 <__aeabi_f2d>
 800d418:	4604      	mov	r4, r0
 800d41a:	460d      	mov	r5, r1
 800d41c:	4b82      	ldr	r3, [pc, #520]	; (800d628 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4618      	mov	r0, r3
 800d422:	f7f3 f889 	bl	8000538 <__aeabi_f2d>
 800d426:	a378      	add	r3, pc, #480	; (adr r3, 800d608 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800d428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42c:	f7f3 f8dc 	bl	80005e8 <__aeabi_dmul>
 800d430:	4602      	mov	r2, r0
 800d432:	460b      	mov	r3, r1
 800d434:	4620      	mov	r0, r4
 800d436:	4629      	mov	r1, r5
 800d438:	f7f2 ff20 	bl	800027c <__adddf3>
 800d43c:	4603      	mov	r3, r0
 800d43e:	460c      	mov	r4, r1
 800d440:	4618      	mov	r0, r3
 800d442:	4621      	mov	r1, r4
 800d444:	f7f3 fba8 	bl	8000b98 <__aeabi_d2f>
 800d448:	4602      	mov	r2, r0
 800d44a:	4b7b      	ldr	r3, [pc, #492]	; (800d638 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800d44c:	601a      	str	r2, [r3, #0]

		speed_l = cnt_l * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800d44e:	4b74      	ldr	r3, [pc, #464]	; (800d620 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4618      	mov	r0, r3
 800d454:	f7f3 f870 	bl	8000538 <__aeabi_f2d>
 800d458:	a36b      	add	r3, pc, #428	; (adr r3, 800d608 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800d45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45e:	f7f3 f8c3 	bl	80005e8 <__aeabi_dmul>
 800d462:	4603      	mov	r3, r0
 800d464:	460c      	mov	r4, r1
 800d466:	4618      	mov	r0, r3
 800d468:	4621      	mov	r1, r4
 800d46a:	a369      	add	r3, pc, #420	; (adr r3, 800d610 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800d46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d470:	f7f3 f9e4 	bl	800083c <__aeabi_ddiv>
 800d474:	4603      	mov	r3, r0
 800d476:	460c      	mov	r4, r1
 800d478:	4618      	mov	r0, r3
 800d47a:	4621      	mov	r1, r4
 800d47c:	f7f3 fb8c 	bl	8000b98 <__aeabi_d2f>
 800d480:	4602      	mov	r2, r0
 800d482:	4b6e      	ldr	r3, [pc, #440]	; (800d63c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800d484:	601a      	str	r2, [r3, #0]
		speed_r = cnt_r * (DIAMETER * M_PI * 11 / 40 / 4096 / 4) / 0.001;
 800d486:	4b68      	ldr	r3, [pc, #416]	; (800d628 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7f3 f854 	bl	8000538 <__aeabi_f2d>
 800d490:	a35d      	add	r3, pc, #372	; (adr r3, 800d608 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	f7f3 f8a7 	bl	80005e8 <__aeabi_dmul>
 800d49a:	4603      	mov	r3, r0
 800d49c:	460c      	mov	r4, r1
 800d49e:	4618      	mov	r0, r3
 800d4a0:	4621      	mov	r1, r4
 800d4a2:	a35b      	add	r3, pc, #364	; (adr r3, 800d610 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a8:	f7f3 f9c8 	bl	800083c <__aeabi_ddiv>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	f7f3 fb70 	bl	8000b98 <__aeabi_d2f>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	4b61      	ldr	r3, [pc, #388]	; (800d640 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800d4bc:	601a      	str	r2, [r3, #0]

		TIM4 -> CNT = 0;
 800d4be:	4b57      	ldr	r3, [pc, #348]	; (800d61c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	625a      	str	r2, [r3, #36]	; 0x24
		TIM8 -> CNT = 0;
 800d4c4:	4b57      	ldr	r3, [pc, #348]	; (800d624 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	625a      	str	r2, [r3, #36]	; 0x24

		if(MF.FLAG.SPD){
 800d4ca:	4b5e      	ldr	r3, [pc, #376]	; (800d644 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800d4cc:	881b      	ldrh	r3, [r3, #0]
 800d4ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	f000 80fe 	beq.w	800d6d6 <HAL_TIM_PeriodElapsedCallback+0x3ae>
			target_speed_l += accel_l * 0.001;
 800d4da:	4b5b      	ldr	r3, [pc, #364]	; (800d648 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7f3 f82a 	bl	8000538 <__aeabi_f2d>
 800d4e4:	a34a      	add	r3, pc, #296	; (adr r3, 800d610 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800d4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ea:	f7f3 f87d 	bl	80005e8 <__aeabi_dmul>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	460c      	mov	r4, r1
 800d4f2:	4625      	mov	r5, r4
 800d4f4:	461c      	mov	r4, r3
 800d4f6:	4b55      	ldr	r3, [pc, #340]	; (800d64c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7f3 f81c 	bl	8000538 <__aeabi_f2d>
 800d500:	4602      	mov	r2, r0
 800d502:	460b      	mov	r3, r1
 800d504:	4620      	mov	r0, r4
 800d506:	4629      	mov	r1, r5
 800d508:	f7f2 feb8 	bl	800027c <__adddf3>
 800d50c:	4603      	mov	r3, r0
 800d50e:	460c      	mov	r4, r1
 800d510:	4618      	mov	r0, r3
 800d512:	4621      	mov	r1, r4
 800d514:	f7f3 fb40 	bl	8000b98 <__aeabi_d2f>
 800d518:	4602      	mov	r2, r0
 800d51a:	4b4c      	ldr	r3, [pc, #304]	; (800d64c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d51c:	601a      	str	r2, [r3, #0]
			target_speed_l = max(min(target_speed_l, speed_max_l), speed_min_l);
 800d51e:	4b4b      	ldr	r3, [pc, #300]	; (800d64c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d520:	ed93 7a00 	vldr	s14, [r3]
 800d524:	4b4a      	ldr	r3, [pc, #296]	; (800d650 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800d526:	edd3 7a00 	vldr	s15, [r3]
 800d52a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d532:	dd03      	ble.n	800d53c <HAL_TIM_PeriodElapsedCallback+0x214>
 800d534:	4b46      	ldr	r3, [pc, #280]	; (800d650 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800d536:	edd3 7a00 	vldr	s15, [r3]
 800d53a:	e002      	b.n	800d542 <HAL_TIM_PeriodElapsedCallback+0x21a>
 800d53c:	4b43      	ldr	r3, [pc, #268]	; (800d64c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d53e:	edd3 7a00 	vldr	s15, [r3]
 800d542:	4b44      	ldr	r3, [pc, #272]	; (800d654 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800d544:	ed93 7a00 	vldr	s14, [r3]
 800d548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d550:	dd10      	ble.n	800d574 <HAL_TIM_PeriodElapsedCallback+0x24c>
 800d552:	4b3e      	ldr	r3, [pc, #248]	; (800d64c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d554:	ed93 7a00 	vldr	s14, [r3]
 800d558:	4b3d      	ldr	r3, [pc, #244]	; (800d650 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800d55a:	edd3 7a00 	vldr	s15, [r3]
 800d55e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d566:	dd02      	ble.n	800d56e <HAL_TIM_PeriodElapsedCallback+0x246>
 800d568:	4b39      	ldr	r3, [pc, #228]	; (800d650 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	e004      	b.n	800d578 <HAL_TIM_PeriodElapsedCallback+0x250>
 800d56e:	4b37      	ldr	r3, [pc, #220]	; (800d64c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	e001      	b.n	800d578 <HAL_TIM_PeriodElapsedCallback+0x250>
 800d574:	4b37      	ldr	r3, [pc, #220]	; (800d654 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4a34      	ldr	r2, [pc, #208]	; (800d64c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d57a:	6013      	str	r3, [r2, #0]
			epsilon_l = target_speed_l - speed_l;
 800d57c:	4b33      	ldr	r3, [pc, #204]	; (800d64c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d57e:	ed93 7a00 	vldr	s14, [r3]
 800d582:	4b2e      	ldr	r3, [pc, #184]	; (800d63c <HAL_TIM_PeriodElapsedCallback+0x314>)
 800d584:	edd3 7a00 	vldr	s15, [r3]
 800d588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d58c:	4b32      	ldr	r3, [pc, #200]	; (800d658 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800d58e:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800d592:	4b31      	ldr	r3, [pc, #196]	; (800d658 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800d594:	edd3 7a00 	vldr	s15, [r3]
 800d598:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d59c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d5a0:	4b2e      	ldr	r3, [pc, #184]	; (800d65c <HAL_TIM_PeriodElapsedCallback+0x334>)
 800d5a2:	edc3 7a00 	vstr	s15, [r3]

			target_speed_r += accel_r * 0.001;
 800d5a6:	4b2e      	ldr	r3, [pc, #184]	; (800d660 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7f2 ffc4 	bl	8000538 <__aeabi_f2d>
 800d5b0:	a317      	add	r3, pc, #92	; (adr r3, 800d610 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800d5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b6:	f7f3 f817 	bl	80005e8 <__aeabi_dmul>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	460c      	mov	r4, r1
 800d5be:	4625      	mov	r5, r4
 800d5c0:	461c      	mov	r4, r3
 800d5c2:	4b28      	ldr	r3, [pc, #160]	; (800d664 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7f2 ffb6 	bl	8000538 <__aeabi_f2d>
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	460b      	mov	r3, r1
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	4629      	mov	r1, r5
 800d5d4:	f7f2 fe52 	bl	800027c <__adddf3>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	460c      	mov	r4, r1
 800d5dc:	4618      	mov	r0, r3
 800d5de:	4621      	mov	r1, r4
 800d5e0:	f7f3 fada 	bl	8000b98 <__aeabi_d2f>
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	4b1f      	ldr	r3, [pc, #124]	; (800d664 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800d5e8:	601a      	str	r2, [r3, #0]
			target_speed_r = max(min(target_speed_r, speed_max_r), speed_min_r);
 800d5ea:	4b1e      	ldr	r3, [pc, #120]	; (800d664 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800d5ec:	ed93 7a00 	vldr	s14, [r3]
 800d5f0:	4b1d      	ldr	r3, [pc, #116]	; (800d668 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800d5f2:	edd3 7a00 	vldr	s15, [r3]
 800d5f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5fe:	dd35      	ble.n	800d66c <HAL_TIM_PeriodElapsedCallback+0x344>
 800d600:	4b19      	ldr	r3, [pc, #100]	; (800d668 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800d602:	edd3 7a00 	vldr	s15, [r3]
 800d606:	e034      	b.n	800d672 <HAL_TIM_PeriodElapsedCallback+0x34a>
 800d608:	775e3793 	.word	0x775e3793
 800d60c:	3f552a9e 	.word	0x3f552a9e
 800d610:	d2f1a9fc 	.word	0xd2f1a9fc
 800d614:	3f50624d 	.word	0x3f50624d
 800d618:	20000bf8 	.word	0x20000bf8
 800d61c:	40000800 	.word	0x40000800
 800d620:	200002e4 	.word	0x200002e4
 800d624:	40010400 	.word	0x40010400
 800d628:	20000bec 	.word	0x20000bec
 800d62c:	471c4000 	.word	0x471c4000
 800d630:	477fff00 	.word	0x477fff00
 800d634:	200012e8 	.word	0x200012e8
 800d638:	20000b2c 	.word	0x20000b2c
 800d63c:	20000b30 	.word	0x20000b30
 800d640:	200002f4 	.word	0x200002f4
 800d644:	20000fac 	.word	0x20000fac
 800d648:	20000da0 	.word	0x20000da0
 800d64c:	20000c44 	.word	0x20000c44
 800d650:	200007b4 	.word	0x200007b4
 800d654:	20000b94 	.word	0x20000b94
 800d658:	20000ba0 	.word	0x20000ba0
 800d65c:	20000be8 	.word	0x20000be8
 800d660:	20000b20 	.word	0x20000b20
 800d664:	200001d8 	.word	0x200001d8
 800d668:	200001dc 	.word	0x200001dc
 800d66c:	4ba0      	ldr	r3, [pc, #640]	; (800d8f0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800d66e:	edd3 7a00 	vldr	s15, [r3]
 800d672:	4ba0      	ldr	r3, [pc, #640]	; (800d8f4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800d674:	ed93 7a00 	vldr	s14, [r3]
 800d678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d680:	dd10      	ble.n	800d6a4 <HAL_TIM_PeriodElapsedCallback+0x37c>
 800d682:	4b9b      	ldr	r3, [pc, #620]	; (800d8f0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800d684:	ed93 7a00 	vldr	s14, [r3]
 800d688:	4b9b      	ldr	r3, [pc, #620]	; (800d8f8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800d68a:	edd3 7a00 	vldr	s15, [r3]
 800d68e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d696:	dd02      	ble.n	800d69e <HAL_TIM_PeriodElapsedCallback+0x376>
 800d698:	4b97      	ldr	r3, [pc, #604]	; (800d8f8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	e004      	b.n	800d6a8 <HAL_TIM_PeriodElapsedCallback+0x380>
 800d69e:	4b94      	ldr	r3, [pc, #592]	; (800d8f0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	e001      	b.n	800d6a8 <HAL_TIM_PeriodElapsedCallback+0x380>
 800d6a4:	4b93      	ldr	r3, [pc, #588]	; (800d8f4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4a91      	ldr	r2, [pc, #580]	; (800d8f0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800d6aa:	6013      	str	r3, [r2, #0]
			epsilon_r = target_speed_r - speed_r;
 800d6ac:	4b90      	ldr	r3, [pc, #576]	; (800d8f0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800d6ae:	ed93 7a00 	vldr	s14, [r3]
 800d6b2:	4b92      	ldr	r3, [pc, #584]	; (800d8fc <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800d6b4:	edd3 7a00 	vldr	s15, [r3]
 800d6b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6bc:	4b90      	ldr	r3, [pc, #576]	; (800d900 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800d6be:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800d6c2:	4b8f      	ldr	r3, [pc, #572]	; (800d900 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800d6c4:	edd3 7a00 	vldr	s15, [r3]
 800d6c8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d6cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d6d0:	4b8c      	ldr	r3, [pc, #560]	; (800d904 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800d6d2:	edc3 7a00 	vstr	s15, [r3]
		}

		log_cnt ++;
 800d6d6:	4b8c      	ldr	r3, [pc, #560]	; (800d908 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	3301      	adds	r3, #1
 800d6dc:	4a8a      	ldr	r2, [pc, #552]	; (800d908 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800d6de:	6013      	str	r3, [r2, #0]

		if(log_cnt >= 5 && MF.FLAG.LOG){
 800d6e0:	4b89      	ldr	r3, [pc, #548]	; (800d908 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2b04      	cmp	r3, #4
 800d6e6:	dd37      	ble.n	800d758 <HAL_TIM_PeriodElapsedCallback+0x430>
 800d6e8:	4b88      	ldr	r3, [pc, #544]	; (800d90c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800d6ea:	881b      	ldrh	r3, [r3, #0]
 800d6ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800d6f0:	b2db      	uxtb	r3, r3
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d030      	beq.n	800d758 <HAL_TIM_PeriodElapsedCallback+0x430>
			log_cnt = 0;
 800d6f6:	4b84      	ldr	r3, [pc, #528]	; (800d908 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	601a      	str	r2, [r3, #0]
			if(get_cnt < log_allay){
 800d6fc:	4b84      	ldr	r3, [pc, #528]	; (800d910 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2bc7      	cmp	r3, #199	; 0xc7
 800d702:	dc29      	bgt.n	800d758 <HAL_TIM_PeriodElapsedCallback+0x430>
				get_speed_l[get_cnt] = speed_l;
 800d704:	4b83      	ldr	r3, [pc, #524]	; (800d914 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800d706:	edd3 7a00 	vldr	s15, [r3]
 800d70a:	4b81      	ldr	r3, [pc, #516]	; (800d910 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d712:	ee17 1a90 	vmov	r1, s15
 800d716:	4a80      	ldr	r2, [pc, #512]	; (800d918 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800d718:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_speed_r[get_cnt] = speed_r;
 800d71c:	4b77      	ldr	r3, [pc, #476]	; (800d8fc <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800d71e:	edd3 7a00 	vldr	s15, [r3]
 800d722:	4b7b      	ldr	r3, [pc, #492]	; (800d910 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d72a:	ee17 1a90 	vmov	r1, s15
 800d72e:	4a7b      	ldr	r2, [pc, #492]	; (800d91c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800d730:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_omega[get_cnt] = gyro_read_z();
 800d734:	f7ff fd98 	bl	800d268 <gyro_read_z>
 800d738:	eef0 7a40 	vmov.f32	s15, s0
 800d73c:	4b74      	ldr	r3, [pc, #464]	; (800d910 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d744:	ee17 1a90 	vmov	r1, s15
 800d748:	4a75      	ldr	r2, [pc, #468]	; (800d920 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800d74a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				get_cnt++;
 800d74e:	4b70      	ldr	r3, [pc, #448]	; (800d910 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	3301      	adds	r3, #1
 800d754:	4a6e      	ldr	r2, [pc, #440]	; (800d910 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800d756:	6013      	str	r3, [r2, #0]
//		degree_x += accel_read_x() * 0.001;
//		degree_y += accel_read_y() * 0.001;
//		degree_z += accel_read_z() * 0.001;
//		degree_x += gyro_read_x() * 0.001;
//		degree_y += gyro_read_y() * 0.001;
		degree_z += gyro_read_z() * 0.001;
 800d758:	f7ff fd86 	bl	800d268 <gyro_read_z>
 800d75c:	ee10 3a10 	vmov	r3, s0
 800d760:	4618      	mov	r0, r3
 800d762:	f7f2 fee9 	bl	8000538 <__aeabi_f2d>
 800d766:	a35e      	add	r3, pc, #376	; (adr r3, 800d8e0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800d768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76c:	f7f2 ff3c 	bl	80005e8 <__aeabi_dmul>
 800d770:	4603      	mov	r3, r0
 800d772:	460c      	mov	r4, r1
 800d774:	4625      	mov	r5, r4
 800d776:	461c      	mov	r4, r3
 800d778:	4b6a      	ldr	r3, [pc, #424]	; (800d924 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7f2 fedb 	bl	8000538 <__aeabi_f2d>
 800d782:	4602      	mov	r2, r0
 800d784:	460b      	mov	r3, r1
 800d786:	4620      	mov	r0, r4
 800d788:	4629      	mov	r1, r5
 800d78a:	f7f2 fd77 	bl	800027c <__adddf3>
 800d78e:	4603      	mov	r3, r0
 800d790:	460c      	mov	r4, r1
 800d792:	4618      	mov	r0, r3
 800d794:	4621      	mov	r1, r4
 800d796:	f7f3 f9ff 	bl	8000b98 <__aeabi_d2f>
 800d79a:	4602      	mov	r2, r0
 800d79c:	4b61      	ldr	r3, [pc, #388]	; (800d924 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800d79e:	601a      	str	r2, [r3, #0]

		//gyro ドリフト量計算
		if(gyro_drift_flag){
 800d7a0:	4b61      	ldr	r3, [pc, #388]	; (800d928 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	b2db      	uxtb	r3, r3
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d04b      	beq.n	800d842 <HAL_TIM_PeriodElapsedCallback+0x51a>
			gyro_cnt ++;
 800d7aa:	4b60      	ldr	r3, [pc, #384]	; (800d92c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	4a5e      	ldr	r2, [pc, #376]	; (800d92c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800d7b2:	6013      	str	r3, [r2, #0]
			if(gyro_cnt >= 2)dif_omega_z += old_omega_z - gyro_read_z();
 800d7b4:	4b5d      	ldr	r3, [pc, #372]	; (800d92c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	dd10      	ble.n	800d7de <HAL_TIM_PeriodElapsedCallback+0x4b6>
 800d7bc:	4b5c      	ldr	r3, [pc, #368]	; (800d930 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800d7be:	ed93 8a00 	vldr	s16, [r3]
 800d7c2:	f7ff fd51 	bl	800d268 <gyro_read_z>
 800d7c6:	eef0 7a40 	vmov.f32	s15, s0
 800d7ca:	ee38 7a67 	vsub.f32	s14, s16, s15
 800d7ce:	4b59      	ldr	r3, [pc, #356]	; (800d934 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800d7d0:	edd3 7a00 	vldr	s15, [r3]
 800d7d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7d8:	4b56      	ldr	r3, [pc, #344]	; (800d934 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800d7da:	edc3 7a00 	vstr	s15, [r3]
			old_omega_z = gyro_read_z();
 800d7de:	f7ff fd43 	bl	800d268 <gyro_read_z>
 800d7e2:	eef0 7a40 	vmov.f32	s15, s0
 800d7e6:	4b52      	ldr	r3, [pc, #328]	; (800d930 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800d7e8:	edc3 7a00 	vstr	s15, [r3]
			full_led_write(YELLOW);
 800d7ec:	2006      	movs	r0, #6
 800d7ee:	f005 fa0b 	bl	8012c08 <full_led_write>
			if(gyro_cnt >= 1001) {
 800d7f2:	4b4e      	ldr	r3, [pc, #312]	; (800d92c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d7fa:	dd1a      	ble.n	800d832 <HAL_TIM_PeriodElapsedCallback+0x50a>
				gyro_drift_flag = 0;
 800d7fc:	4b4a      	ldr	r3, [pc, #296]	; (800d928 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800d7fe:	2200      	movs	r2, #0
 800d800:	701a      	strb	r2, [r3, #0]
				gyro_drift_value = dif_omega_z / gyro_cnt-1;
 800d802:	4b4c      	ldr	r3, [pc, #304]	; (800d934 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800d804:	edd3 6a00 	vldr	s13, [r3]
 800d808:	4b48      	ldr	r3, [pc, #288]	; (800d92c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	ee07 3a90 	vmov	s15, r3
 800d810:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d818:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d81c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d820:	4b45      	ldr	r3, [pc, #276]	; (800d938 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800d822:	edc3 7a00 	vstr	s15, [r3]
				gyro_cnt = 0;
 800d826:	4b41      	ldr	r3, [pc, #260]	; (800d92c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800d828:	2200      	movs	r2, #0
 800d82a:	601a      	str	r2, [r3, #0]
				full_led_write(BLUEGREEN);
 800d82c:	2004      	movs	r0, #4
 800d82e:	f005 f9eb 	bl	8012c08 <full_led_write>
			}
			degree_z = 0;
 800d832:	4b3c      	ldr	r3, [pc, #240]	; (800d924 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800d834:	f04f 0200 	mov.w	r2, #0
 800d838:	601a      	str	r2, [r3, #0]
			target_degree_z = 0;
 800d83a:	4b40      	ldr	r3, [pc, #256]	; (800d93c <HAL_TIM_PeriodElapsedCallback+0x614>)
 800d83c:	f04f 0200 	mov.w	r2, #0
 800d840:	601a      	str	r2, [r3, #0]
		}


		if(enkai_flag){
 800d842:	4b3f      	ldr	r3, [pc, #252]	; (800d940 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	b2db      	uxtb	r3, r3
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f000 80d8 	beq.w	800d9fe <HAL_TIM_PeriodElapsedCallback+0x6d6>
			target_dist = TREAD*M_PI/360*(degree_z-target_degree_z);
 800d84e:	4b35      	ldr	r3, [pc, #212]	; (800d924 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800d850:	ed93 7a00 	vldr	s14, [r3]
 800d854:	4b39      	ldr	r3, [pc, #228]	; (800d93c <HAL_TIM_PeriodElapsedCallback+0x614>)
 800d856:	edd3 7a00 	vldr	s15, [r3]
 800d85a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d85e:	ee17 0a90 	vmov	r0, s15
 800d862:	f7f2 fe69 	bl	8000538 <__aeabi_f2d>
 800d866:	a320      	add	r3, pc, #128	; (adr r3, 800d8e8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800d868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86c:	f7f2 febc 	bl	80005e8 <__aeabi_dmul>
 800d870:	4603      	mov	r3, r0
 800d872:	460c      	mov	r4, r1
 800d874:	4618      	mov	r0, r3
 800d876:	4621      	mov	r1, r4
 800d878:	f7f3 f98e 	bl	8000b98 <__aeabi_d2f>
 800d87c:	4602      	mov	r2, r0
 800d87e:	4b31      	ldr	r3, [pc, #196]	; (800d944 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800d880:	601a      	str	r2, [r3, #0]
			if(target_dist > 0){
 800d882:	4b30      	ldr	r3, [pc, #192]	; (800d944 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800d884:	edd3 7a00 	vldr	s15, [r3]
 800d888:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d890:	dd5e      	ble.n	800d950 <HAL_TIM_PeriodElapsedCallback+0x628>
				target_speed_l = sqrt(2*accel_l*target_dist);
 800d892:	4b2d      	ldr	r3, [pc, #180]	; (800d948 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800d894:	edd3 7a00 	vldr	s15, [r3]
 800d898:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d89c:	4b29      	ldr	r3, [pc, #164]	; (800d944 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800d89e:	edd3 7a00 	vldr	s15, [r3]
 800d8a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8a6:	ee17 0a90 	vmov	r0, s15
 800d8aa:	f7f2 fe45 	bl	8000538 <__aeabi_f2d>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	460c      	mov	r4, r1
 800d8b2:	ec44 3b10 	vmov	d0, r3, r4
 800d8b6:	f006 ff41 	bl	801473c <sqrt>
 800d8ba:	ec54 3b10 	vmov	r3, r4, d0
 800d8be:	4618      	mov	r0, r3
 800d8c0:	4621      	mov	r1, r4
 800d8c2:	f7f3 f969 	bl	8000b98 <__aeabi_d2f>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	4b20      	ldr	r3, [pc, #128]	; (800d94c <HAL_TIM_PeriodElapsedCallback+0x624>)
 800d8ca:	601a      	str	r2, [r3, #0]
				target_speed_r = -1 * target_speed_l;
 800d8cc:	4b1f      	ldr	r3, [pc, #124]	; (800d94c <HAL_TIM_PeriodElapsedCallback+0x624>)
 800d8ce:	edd3 7a00 	vldr	s15, [r3]
 800d8d2:	eef1 7a67 	vneg.f32	s15, s15
 800d8d6:	4b06      	ldr	r3, [pc, #24]	; (800d8f0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800d8d8:	edc3 7a00 	vstr	s15, [r3]
 800d8dc:	e065      	b.n	800d9aa <HAL_TIM_PeriodElapsedCallback+0x682>
 800d8de:	bf00      	nop
 800d8e0:	d2f1a9fc 	.word	0xd2f1a9fc
 800d8e4:	3f50624d 	.word	0x3f50624d
 800d8e8:	d7653223 	.word	0xd7653223
 800d8ec:	3fe26e40 	.word	0x3fe26e40
 800d8f0:	200001d8 	.word	0x200001d8
 800d8f4:	20000fb0 	.word	0x20000fb0
 800d8f8:	200001dc 	.word	0x200001dc
 800d8fc:	200002f4 	.word	0x200002f4
 800d900:	20000c50 	.word	0x20000c50
 800d904:	200007b8 	.word	0x200007b8
 800d908:	20000140 	.word	0x20000140
 800d90c:	20000fac 	.word	0x20000fac
 800d910:	20000148 	.word	0x20000148
 800d914:	20000b30 	.word	0x20000b30
 800d918:	200007bc 	.word	0x200007bc
 800d91c:	20000494 	.word	0x20000494
 800d920:	20000fc8 	.word	0x20000fc8
 800d924:	20000b9c 	.word	0x20000b9c
 800d928:	20000adc 	.word	0x20000adc
 800d92c:	20000144 	.word	0x20000144
 800d930:	200012f0 	.word	0x200012f0
 800d934:	20000be4 	.word	0x20000be4
 800d938:	20000c38 	.word	0x20000c38
 800d93c:	20000c40 	.word	0x20000c40
 800d940:	20000bf4 	.word	0x20000bf4
 800d944:	20000fbc 	.word	0x20000fbc
 800d948:	20000da0 	.word	0x20000da0
 800d94c:	20000c44 	.word	0x20000c44
			}else{
				target_speed_l = sqrt(2*accel_l*target_dist*-1)*-1;
 800d950:	4bab      	ldr	r3, [pc, #684]	; (800dc00 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 800d952:	edd3 7a00 	vldr	s15, [r3]
 800d956:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d95a:	4baa      	ldr	r3, [pc, #680]	; (800dc04 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800d95c:	edd3 7a00 	vldr	s15, [r3]
 800d960:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d964:	eef1 7a67 	vneg.f32	s15, s15
 800d968:	ee17 3a90 	vmov	r3, s15
 800d96c:	4618      	mov	r0, r3
 800d96e:	f7f2 fde3 	bl	8000538 <__aeabi_f2d>
 800d972:	4603      	mov	r3, r0
 800d974:	460c      	mov	r4, r1
 800d976:	ec44 3b10 	vmov	d0, r3, r4
 800d97a:	f006 fedf 	bl	801473c <sqrt>
 800d97e:	ec54 3b10 	vmov	r3, r4, d0
 800d982:	4618      	mov	r0, r3
 800d984:	4621      	mov	r1, r4
 800d986:	f7f3 f907 	bl	8000b98 <__aeabi_d2f>
 800d98a:	4603      	mov	r3, r0
 800d98c:	ee07 3a90 	vmov	s15, r3
 800d990:	eef1 7a67 	vneg.f32	s15, s15
 800d994:	4b9c      	ldr	r3, [pc, #624]	; (800dc08 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800d996:	edc3 7a00 	vstr	s15, [r3]
				target_speed_r = -1 * target_speed_l;
 800d99a:	4b9b      	ldr	r3, [pc, #620]	; (800dc08 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800d99c:	edd3 7a00 	vldr	s15, [r3]
 800d9a0:	eef1 7a67 	vneg.f32	s15, s15
 800d9a4:	4b99      	ldr	r3, [pc, #612]	; (800dc0c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800d9a6:	edc3 7a00 	vstr	s15, [r3]
			}

			epsilon_l = target_speed_l - speed_l;
 800d9aa:	4b97      	ldr	r3, [pc, #604]	; (800dc08 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 800d9ac:	ed93 7a00 	vldr	s14, [r3]
 800d9b0:	4b97      	ldr	r3, [pc, #604]	; (800dc10 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800d9b2:	edd3 7a00 	vldr	s15, [r3]
 800d9b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9ba:	4b96      	ldr	r3, [pc, #600]	; (800dc14 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d9bc:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800d9c0:	4b94      	ldr	r3, [pc, #592]	; (800dc14 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800d9c2:	edd3 7a00 	vldr	s15, [r3]
 800d9c6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d9ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d9ce:	4b92      	ldr	r3, [pc, #584]	; (800dc18 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800d9d0:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800d9d4:	4b8d      	ldr	r3, [pc, #564]	; (800dc0c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800d9d6:	ed93 7a00 	vldr	s14, [r3]
 800d9da:	4b90      	ldr	r3, [pc, #576]	; (800dc1c <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800d9dc:	edd3 7a00 	vldr	s15, [r3]
 800d9e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9e4:	4b8e      	ldr	r3, [pc, #568]	; (800dc20 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800d9e6:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800d9ea:	4b8d      	ldr	r3, [pc, #564]	; (800dc20 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800d9ec:	edd3 7a00 	vldr	s15, [r3]
 800d9f0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d9f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d9f8:	4b8a      	ldr	r3, [pc, #552]	; (800dc24 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800d9fa:	edc3 7a00 	vstr	s15, [r3]
		}


		if(MF.FLAG.FWALL){
 800d9fe:	4b8a      	ldr	r3, [pc, #552]	; (800dc28 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800da00:	881b      	ldrh	r3, [r3, #0]
 800da02:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800da06:	b2db      	uxtb	r3, r3
 800da08:	2b00      	cmp	r3, #0
 800da0a:	f000 8096 	beq.w	800db3a <HAL_TIM_PeriodElapsedCallback+0x812>
			pulse_l = (OFFSET_FWALL_L - ad_fl) * 0.04;
 800da0e:	4b87      	ldr	r3, [pc, #540]	; (800dc2c <HAL_TIM_PeriodElapsedCallback+0x904>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 800da16:	4618      	mov	r0, r3
 800da18:	f7f2 fd6c 	bl	80004f4 <__aeabi_ui2d>
 800da1c:	a372      	add	r3, pc, #456	; (adr r3, 800dbe8 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800da1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da22:	f7f2 fde1 	bl	80005e8 <__aeabi_dmul>
 800da26:	4603      	mov	r3, r0
 800da28:	460c      	mov	r4, r1
 800da2a:	4618      	mov	r0, r3
 800da2c:	4621      	mov	r1, r4
 800da2e:	f7f3 f8b3 	bl	8000b98 <__aeabi_d2f>
 800da32:	4602      	mov	r2, r0
 800da34:	4b78      	ldr	r3, [pc, #480]	; (800dc18 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800da36:	601a      	str	r2, [r3, #0]
			pulse_r = (OFFSET_FWALL_R - ad_fr) * 0.08;
 800da38:	4b7d      	ldr	r3, [pc, #500]	; (800dc30 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 800da40:	4618      	mov	r0, r3
 800da42:	f7f2 fd57 	bl	80004f4 <__aeabi_ui2d>
 800da46:	a36a      	add	r3, pc, #424	; (adr r3, 800dbf0 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 800da48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4c:	f7f2 fdcc 	bl	80005e8 <__aeabi_dmul>
 800da50:	4603      	mov	r3, r0
 800da52:	460c      	mov	r4, r1
 800da54:	4618      	mov	r0, r3
 800da56:	4621      	mov	r1, r4
 800da58:	f7f3 f89e 	bl	8000b98 <__aeabi_d2f>
 800da5c:	4602      	mov	r2, r0
 800da5e:	4b71      	ldr	r3, [pc, #452]	; (800dc24 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800da60:	601a      	str	r2, [r3, #0]
			pulse_l = min(max(pulse_l, -100), 100);
 800da62:	4b6d      	ldr	r3, [pc, #436]	; (800dc18 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800da64:	edd3 7a00 	vldr	s15, [r3]
 800da68:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800dc34 <HAL_TIM_PeriodElapsedCallback+0x90c>
 800da6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800da70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da74:	bfcc      	ite	gt
 800da76:	2301      	movgt	r3, #1
 800da78:	2300      	movle	r3, #0
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	f083 0301 	eor.w	r3, r3, #1
 800da80:	b2db      	uxtb	r3, r3
 800da82:	2b00      	cmp	r3, #0
 800da84:	d111      	bne.n	800daaa <HAL_TIM_PeriodElapsedCallback+0x782>
 800da86:	4b64      	ldr	r3, [pc, #400]	; (800dc18 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800da88:	edd3 7a00 	vldr	s15, [r3]
 800da8c:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800dc38 <HAL_TIM_PeriodElapsedCallback+0x910>
 800da90:	eef4 7ac7 	vcmpe.f32	s15, s14
 800da94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da98:	bfcc      	ite	gt
 800da9a:	2301      	movgt	r3, #1
 800da9c:	2300      	movle	r3, #0
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	f083 0301 	eor.w	r3, r3, #1
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d00e      	beq.n	800dac8 <HAL_TIM_PeriodElapsedCallback+0x7a0>
 800daaa:	4b5b      	ldr	r3, [pc, #364]	; (800dc18 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800daac:	edd3 7a00 	vldr	s15, [r3]
 800dab0:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800dc34 <HAL_TIM_PeriodElapsedCallback+0x90c>
 800dab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dabc:	dd02      	ble.n	800dac4 <HAL_TIM_PeriodElapsedCallback+0x79c>
 800dabe:	4b56      	ldr	r3, [pc, #344]	; (800dc18 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	e002      	b.n	800daca <HAL_TIM_PeriodElapsedCallback+0x7a2>
 800dac4:	4b5d      	ldr	r3, [pc, #372]	; (800dc3c <HAL_TIM_PeriodElapsedCallback+0x914>)
 800dac6:	e000      	b.n	800daca <HAL_TIM_PeriodElapsedCallback+0x7a2>
 800dac8:	4b5d      	ldr	r3, [pc, #372]	; (800dc40 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800daca:	4a53      	ldr	r2, [pc, #332]	; (800dc18 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800dacc:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -100), 100);
 800dace:	4b55      	ldr	r3, [pc, #340]	; (800dc24 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800dad0:	edd3 7a00 	vldr	s15, [r3]
 800dad4:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800dc34 <HAL_TIM_PeriodElapsedCallback+0x90c>
 800dad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae0:	bfcc      	ite	gt
 800dae2:	2301      	movgt	r3, #1
 800dae4:	2300      	movle	r3, #0
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	f083 0301 	eor.w	r3, r3, #1
 800daec:	b2db      	uxtb	r3, r3
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d111      	bne.n	800db16 <HAL_TIM_PeriodElapsedCallback+0x7ee>
 800daf2:	4b4c      	ldr	r3, [pc, #304]	; (800dc24 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800daf4:	edd3 7a00 	vldr	s15, [r3]
 800daf8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800dc38 <HAL_TIM_PeriodElapsedCallback+0x910>
 800dafc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800db00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db04:	bfcc      	ite	gt
 800db06:	2301      	movgt	r3, #1
 800db08:	2300      	movle	r3, #0
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	f083 0301 	eor.w	r3, r3, #1
 800db10:	b2db      	uxtb	r3, r3
 800db12:	2b00      	cmp	r3, #0
 800db14:	d00e      	beq.n	800db34 <HAL_TIM_PeriodElapsedCallback+0x80c>
 800db16:	4b43      	ldr	r3, [pc, #268]	; (800dc24 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800db18:	edd3 7a00 	vldr	s15, [r3]
 800db1c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800dc34 <HAL_TIM_PeriodElapsedCallback+0x90c>
 800db20:	eef4 7ac7 	vcmpe.f32	s15, s14
 800db24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db28:	dd02      	ble.n	800db30 <HAL_TIM_PeriodElapsedCallback+0x808>
 800db2a:	4b3e      	ldr	r3, [pc, #248]	; (800dc24 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	e002      	b.n	800db36 <HAL_TIM_PeriodElapsedCallback+0x80e>
 800db30:	4b42      	ldr	r3, [pc, #264]	; (800dc3c <HAL_TIM_PeriodElapsedCallback+0x914>)
 800db32:	e000      	b.n	800db36 <HAL_TIM_PeriodElapsedCallback+0x80e>
 800db34:	4b42      	ldr	r3, [pc, #264]	; (800dc40 <HAL_TIM_PeriodElapsedCallback+0x918>)
 800db36:	4a3b      	ldr	r2, [pc, #236]	; (800dc24 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 800db38:	6013      	str	r3, [r2, #0]

		}


		if(MF.FLAG.GYRO){
 800db3a:	4b3b      	ldr	r3, [pc, #236]	; (800dc28 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800db3c:	881b      	ldrh	r3, [r3, #0]
 800db3e:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800db42:	b2db      	uxtb	r3, r3
 800db44:	2b00      	cmp	r3, #0
 800db46:	f000 8125 	beq.w	800dd94 <HAL_TIM_PeriodElapsedCallback+0xa6c>
			target_omega_z += target_degaccel_z * 0.001;
 800db4a:	4b3e      	ldr	r3, [pc, #248]	; (800dc44 <HAL_TIM_PeriodElapsedCallback+0x91c>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4618      	mov	r0, r3
 800db50:	f7f2 fcf2 	bl	8000538 <__aeabi_f2d>
 800db54:	a328      	add	r3, pc, #160	; (adr r3, 800dbf8 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 800db56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5a:	f7f2 fd45 	bl	80005e8 <__aeabi_dmul>
 800db5e:	4603      	mov	r3, r0
 800db60:	460c      	mov	r4, r1
 800db62:	4625      	mov	r5, r4
 800db64:	461c      	mov	r4, r3
 800db66:	4b38      	ldr	r3, [pc, #224]	; (800dc48 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7f2 fce4 	bl	8000538 <__aeabi_f2d>
 800db70:	4602      	mov	r2, r0
 800db72:	460b      	mov	r3, r1
 800db74:	4620      	mov	r0, r4
 800db76:	4629      	mov	r1, r5
 800db78:	f7f2 fb80 	bl	800027c <__adddf3>
 800db7c:	4603      	mov	r3, r0
 800db7e:	460c      	mov	r4, r1
 800db80:	4618      	mov	r0, r3
 800db82:	4621      	mov	r1, r4
 800db84:	f7f3 f808 	bl	8000b98 <__aeabi_d2f>
 800db88:	4602      	mov	r2, r0
 800db8a:	4b2f      	ldr	r3, [pc, #188]	; (800dc48 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800db8c:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 800db8e:	4b2e      	ldr	r3, [pc, #184]	; (800dc48 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800db90:	ed93 7a00 	vldr	s14, [r3]
 800db94:	4b2d      	ldr	r3, [pc, #180]	; (800dc4c <HAL_TIM_PeriodElapsedCallback+0x924>)
 800db96:	edd3 7a00 	vldr	s15, [r3]
 800db9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dba2:	dd03      	ble.n	800dbac <HAL_TIM_PeriodElapsedCallback+0x884>
 800dba4:	4b29      	ldr	r3, [pc, #164]	; (800dc4c <HAL_TIM_PeriodElapsedCallback+0x924>)
 800dba6:	edd3 7a00 	vldr	s15, [r3]
 800dbaa:	e002      	b.n	800dbb2 <HAL_TIM_PeriodElapsedCallback+0x88a>
 800dbac:	4b26      	ldr	r3, [pc, #152]	; (800dc48 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800dbae:	edd3 7a00 	vldr	s15, [r3]
 800dbb2:	4b27      	ldr	r3, [pc, #156]	; (800dc50 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800dbb4:	ed93 7a00 	vldr	s14, [r3]
 800dbb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dbbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbc0:	dd48      	ble.n	800dc54 <HAL_TIM_PeriodElapsedCallback+0x92c>
 800dbc2:	4b21      	ldr	r3, [pc, #132]	; (800dc48 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800dbc4:	ed93 7a00 	vldr	s14, [r3]
 800dbc8:	4b20      	ldr	r3, [pc, #128]	; (800dc4c <HAL_TIM_PeriodElapsedCallback+0x924>)
 800dbca:	edd3 7a00 	vldr	s15, [r3]
 800dbce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbd6:	dd02      	ble.n	800dbde <HAL_TIM_PeriodElapsedCallback+0x8b6>
 800dbd8:	4b1c      	ldr	r3, [pc, #112]	; (800dc4c <HAL_TIM_PeriodElapsedCallback+0x924>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	e03c      	b.n	800dc58 <HAL_TIM_PeriodElapsedCallback+0x930>
 800dbde:	4b1a      	ldr	r3, [pc, #104]	; (800dc48 <HAL_TIM_PeriodElapsedCallback+0x920>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	e039      	b.n	800dc58 <HAL_TIM_PeriodElapsedCallback+0x930>
 800dbe4:	f3af 8000 	nop.w
 800dbe8:	47ae147b 	.word	0x47ae147b
 800dbec:	3fa47ae1 	.word	0x3fa47ae1
 800dbf0:	47ae147b 	.word	0x47ae147b
 800dbf4:	3fb47ae1 	.word	0x3fb47ae1
 800dbf8:	d2f1a9fc 	.word	0xd2f1a9fc
 800dbfc:	3f50624d 	.word	0x3f50624d
 800dc00:	20000da0 	.word	0x20000da0
 800dc04:	20000fbc 	.word	0x20000fbc
 800dc08:	20000c44 	.word	0x20000c44
 800dc0c:	200001d8 	.word	0x200001d8
 800dc10:	20000b30 	.word	0x20000b30
 800dc14:	20000ba0 	.word	0x20000ba0
 800dc18:	20000be8 	.word	0x20000be8
 800dc1c:	200002f4 	.word	0x200002f4
 800dc20:	20000c50 	.word	0x20000c50
 800dc24:	200007b8 	.word	0x200007b8
 800dc28:	20000fac 	.word	0x20000fac
 800dc2c:	20000d9c 	.word	0x20000d9c
 800dc30:	20000c48 	.word	0x20000c48
 800dc34:	c2c80000 	.word	0xc2c80000
 800dc38:	42c80000 	.word	0x42c80000
 800dc3c:	c2c80000 	.word	0xc2c80000
 800dc40:	42c80000 	.word	0x42c80000
 800dc44:	20000b98 	.word	0x20000b98
 800dc48:	200001e0 	.word	0x200001e0
 800dc4c:	20000b24 	.word	0x20000b24
 800dc50:	200002f0 	.word	0x200002f0
 800dc54:	4b7e      	ldr	r3, [pc, #504]	; (800de50 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4a7e      	ldr	r2, [pc, #504]	; (800de54 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 800dc5a:	6013      	str	r3, [r2, #0]
			target_speed_l = speed_G - target_omega_z/180*M_PI*TREAD/2;
 800dc5c:	4b7e      	ldr	r3, [pc, #504]	; (800de58 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7f2 fc69 	bl	8000538 <__aeabi_f2d>
 800dc66:	4604      	mov	r4, r0
 800dc68:	460d      	mov	r5, r1
 800dc6a:	4b7a      	ldr	r3, [pc, #488]	; (800de54 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 800dc6c:	edd3 7a00 	vldr	s15, [r3]
 800dc70:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800de5c <HAL_TIM_PeriodElapsedCallback+0xb34>
 800dc74:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dc78:	ee16 0a90 	vmov	r0, s13
 800dc7c:	f7f2 fc5c 	bl	8000538 <__aeabi_f2d>
 800dc80:	a36f      	add	r3, pc, #444	; (adr r3, 800de40 <HAL_TIM_PeriodElapsedCallback+0xb18>)
 800dc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc86:	f7f2 fcaf 	bl	80005e8 <__aeabi_dmul>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	4610      	mov	r0, r2
 800dc90:	4619      	mov	r1, r3
 800dc92:	f04f 0200 	mov.w	r2, #0
 800dc96:	4b72      	ldr	r3, [pc, #456]	; (800de60 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 800dc98:	f7f2 fca6 	bl	80005e8 <__aeabi_dmul>
 800dc9c:	4602      	mov	r2, r0
 800dc9e:	460b      	mov	r3, r1
 800dca0:	4610      	mov	r0, r2
 800dca2:	4619      	mov	r1, r3
 800dca4:	f04f 0200 	mov.w	r2, #0
 800dca8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dcac:	f7f2 fdc6 	bl	800083c <__aeabi_ddiv>
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	4629      	mov	r1, r5
 800dcb8:	f7f2 fade 	bl	8000278 <__aeabi_dsub>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	460c      	mov	r4, r1
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	4621      	mov	r1, r4
 800dcc4:	f7f2 ff68 	bl	8000b98 <__aeabi_d2f>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	4b66      	ldr	r3, [pc, #408]	; (800de64 <HAL_TIM_PeriodElapsedCallback+0xb3c>)
 800dccc:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G + target_omega_z/180*M_PI*TREAD/2;
 800dcce:	4b62      	ldr	r3, [pc, #392]	; (800de58 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7f2 fc30 	bl	8000538 <__aeabi_f2d>
 800dcd8:	4604      	mov	r4, r0
 800dcda:	460d      	mov	r5, r1
 800dcdc:	4b5d      	ldr	r3, [pc, #372]	; (800de54 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 800dcde:	edd3 7a00 	vldr	s15, [r3]
 800dce2:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800de5c <HAL_TIM_PeriodElapsedCallback+0xb34>
 800dce6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dcea:	ee16 0a90 	vmov	r0, s13
 800dcee:	f7f2 fc23 	bl	8000538 <__aeabi_f2d>
 800dcf2:	a353      	add	r3, pc, #332	; (adr r3, 800de40 <HAL_TIM_PeriodElapsedCallback+0xb18>)
 800dcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf8:	f7f2 fc76 	bl	80005e8 <__aeabi_dmul>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	460b      	mov	r3, r1
 800dd00:	4610      	mov	r0, r2
 800dd02:	4619      	mov	r1, r3
 800dd04:	f04f 0200 	mov.w	r2, #0
 800dd08:	4b55      	ldr	r3, [pc, #340]	; (800de60 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 800dd0a:	f7f2 fc6d 	bl	80005e8 <__aeabi_dmul>
 800dd0e:	4602      	mov	r2, r0
 800dd10:	460b      	mov	r3, r1
 800dd12:	4610      	mov	r0, r2
 800dd14:	4619      	mov	r1, r3
 800dd16:	f04f 0200 	mov.w	r2, #0
 800dd1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dd1e:	f7f2 fd8d 	bl	800083c <__aeabi_ddiv>
 800dd22:	4602      	mov	r2, r0
 800dd24:	460b      	mov	r3, r1
 800dd26:	4620      	mov	r0, r4
 800dd28:	4629      	mov	r1, r5
 800dd2a:	f7f2 faa7 	bl	800027c <__adddf3>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	460c      	mov	r4, r1
 800dd32:	4618      	mov	r0, r3
 800dd34:	4621      	mov	r1, r4
 800dd36:	f7f2 ff2f 	bl	8000b98 <__aeabi_d2f>
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	4b4a      	ldr	r3, [pc, #296]	; (800de68 <HAL_TIM_PeriodElapsedCallback+0xb40>)
 800dd3e:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 800dd40:	4b48      	ldr	r3, [pc, #288]	; (800de64 <HAL_TIM_PeriodElapsedCallback+0xb3c>)
 800dd42:	ed93 7a00 	vldr	s14, [r3]
 800dd46:	4b49      	ldr	r3, [pc, #292]	; (800de6c <HAL_TIM_PeriodElapsedCallback+0xb44>)
 800dd48:	edd3 7a00 	vldr	s15, [r3]
 800dd4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd50:	4b47      	ldr	r3, [pc, #284]	; (800de70 <HAL_TIM_PeriodElapsedCallback+0xb48>)
 800dd52:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800dd56:	4b46      	ldr	r3, [pc, #280]	; (800de70 <HAL_TIM_PeriodElapsedCallback+0xb48>)
 800dd58:	edd3 7a00 	vldr	s15, [r3]
 800dd5c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800dd60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd64:	4b43      	ldr	r3, [pc, #268]	; (800de74 <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 800dd66:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800dd6a:	4b3f      	ldr	r3, [pc, #252]	; (800de68 <HAL_TIM_PeriodElapsedCallback+0xb40>)
 800dd6c:	ed93 7a00 	vldr	s14, [r3]
 800dd70:	4b41      	ldr	r3, [pc, #260]	; (800de78 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 800dd72:	edd3 7a00 	vldr	s15, [r3]
 800dd76:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd7a:	4b40      	ldr	r3, [pc, #256]	; (800de7c <HAL_TIM_PeriodElapsedCallback+0xb54>)
 800dd7c:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800dd80:	4b3e      	ldr	r3, [pc, #248]	; (800de7c <HAL_TIM_PeriodElapsedCallback+0xb54>)
 800dd82:	edd3 7a00 	vldr	s15, [r3]
 800dd86:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800dd8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd8e:	4b3c      	ldr	r3, [pc, #240]	; (800de80 <HAL_TIM_PeriodElapsedCallback+0xb58>)
 800dd90:	edc3 7a00 	vstr	s15, [r3]
		}


		if(MF.FLAG.GYRO2){
 800dd94:	4b3b      	ldr	r3, [pc, #236]	; (800de84 <HAL_TIM_PeriodElapsedCallback+0xb5c>)
 800dd96:	881b      	ldrh	r3, [r3, #0]
 800dd98:	f3c3 3340 	ubfx	r3, r3, #13, #1
 800dd9c:	b2db      	uxtb	r3, r3
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	f000 8134 	beq.w	800e00c <HAL_TIM_PeriodElapsedCallback+0xce4>
			target_omega_z += target_degaccel_z * 0.001;
 800dda4:	4b38      	ldr	r3, [pc, #224]	; (800de88 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7f2 fbc5 	bl	8000538 <__aeabi_f2d>
 800ddae:	a326      	add	r3, pc, #152	; (adr r3, 800de48 <HAL_TIM_PeriodElapsedCallback+0xb20>)
 800ddb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb4:	f7f2 fc18 	bl	80005e8 <__aeabi_dmul>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	460c      	mov	r4, r1
 800ddbc:	4625      	mov	r5, r4
 800ddbe:	461c      	mov	r4, r3
 800ddc0:	4b24      	ldr	r3, [pc, #144]	; (800de54 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7f2 fbb7 	bl	8000538 <__aeabi_f2d>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	460b      	mov	r3, r1
 800ddce:	4620      	mov	r0, r4
 800ddd0:	4629      	mov	r1, r5
 800ddd2:	f7f2 fa53 	bl	800027c <__adddf3>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	460c      	mov	r4, r1
 800ddda:	4618      	mov	r0, r3
 800dddc:	4621      	mov	r1, r4
 800ddde:	f7f2 fedb 	bl	8000b98 <__aeabi_d2f>
 800dde2:	4602      	mov	r2, r0
 800dde4:	4b1b      	ldr	r3, [pc, #108]	; (800de54 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 800dde6:	601a      	str	r2, [r3, #0]
			target_omega_z = max(min(target_omega_z, omega_max), omega_min);
 800dde8:	4b1a      	ldr	r3, [pc, #104]	; (800de54 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 800ddea:	ed93 7a00 	vldr	s14, [r3]
 800ddee:	4b27      	ldr	r3, [pc, #156]	; (800de8c <HAL_TIM_PeriodElapsedCallback+0xb64>)
 800ddf0:	edd3 7a00 	vldr	s15, [r3]
 800ddf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ddf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddfc:	dd03      	ble.n	800de06 <HAL_TIM_PeriodElapsedCallback+0xade>
 800ddfe:	4b23      	ldr	r3, [pc, #140]	; (800de8c <HAL_TIM_PeriodElapsedCallback+0xb64>)
 800de00:	edd3 7a00 	vldr	s15, [r3]
 800de04:	e002      	b.n	800de0c <HAL_TIM_PeriodElapsedCallback+0xae4>
 800de06:	4b13      	ldr	r3, [pc, #76]	; (800de54 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 800de08:	edd3 7a00 	vldr	s15, [r3]
 800de0c:	4b10      	ldr	r3, [pc, #64]	; (800de50 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 800de0e:	ed93 7a00 	vldr	s14, [r3]
 800de12:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de1a:	dd39      	ble.n	800de90 <HAL_TIM_PeriodElapsedCallback+0xb68>
 800de1c:	4b0d      	ldr	r3, [pc, #52]	; (800de54 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 800de1e:	ed93 7a00 	vldr	s14, [r3]
 800de22:	4b1a      	ldr	r3, [pc, #104]	; (800de8c <HAL_TIM_PeriodElapsedCallback+0xb64>)
 800de24:	edd3 7a00 	vldr	s15, [r3]
 800de28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de30:	dd02      	ble.n	800de38 <HAL_TIM_PeriodElapsedCallback+0xb10>
 800de32:	4b16      	ldr	r3, [pc, #88]	; (800de8c <HAL_TIM_PeriodElapsedCallback+0xb64>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	e02d      	b.n	800de94 <HAL_TIM_PeriodElapsedCallback+0xb6c>
 800de38:	4b06      	ldr	r3, [pc, #24]	; (800de54 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	e02a      	b.n	800de94 <HAL_TIM_PeriodElapsedCallback+0xb6c>
 800de3e:	bf00      	nop
 800de40:	54442d18 	.word	0x54442d18
 800de44:	400921fb 	.word	0x400921fb
 800de48:	d2f1a9fc 	.word	0xd2f1a9fc
 800de4c:	3f50624d 	.word	0x3f50624d
 800de50:	200002f0 	.word	0x200002f0
 800de54:	200001e0 	.word	0x200001e0
 800de58:	20000b34 	.word	0x20000b34
 800de5c:	43340000 	.word	0x43340000
 800de60:	40508000 	.word	0x40508000
 800de64:	20000c44 	.word	0x20000c44
 800de68:	200001d8 	.word	0x200001d8
 800de6c:	20000b30 	.word	0x20000b30
 800de70:	20000ba0 	.word	0x20000ba0
 800de74:	20000be8 	.word	0x20000be8
 800de78:	200002f4 	.word	0x200002f4
 800de7c:	20000c50 	.word	0x20000c50
 800de80:	200007b8 	.word	0x200007b8
 800de84:	20000fac 	.word	0x20000fac
 800de88:	20000b98 	.word	0x20000b98
 800de8c:	20000b24 	.word	0x20000b24
 800de90:	4bad      	ldr	r3, [pc, #692]	; (800e148 <HAL_TIM_PeriodElapsedCallback+0xe20>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	4aad      	ldr	r2, [pc, #692]	; (800e14c <HAL_TIM_PeriodElapsedCallback+0xe24>)
 800de96:	6013      	str	r3, [r2, #0]

			epsilon_omega = target_omega_z - gyro_read_z();
 800de98:	4bac      	ldr	r3, [pc, #688]	; (800e14c <HAL_TIM_PeriodElapsedCallback+0xe24>)
 800de9a:	ed93 8a00 	vldr	s16, [r3]
 800de9e:	f7ff f9e3 	bl	800d268 <gyro_read_z>
 800dea2:	eef0 7a40 	vmov.f32	s15, s0
 800dea6:	ee78 7a67 	vsub.f32	s15, s16, s15
 800deaa:	4ba9      	ldr	r3, [pc, #676]	; (800e150 <HAL_TIM_PeriodElapsedCallback+0xe28>)
 800deac:	edc3 7a00 	vstr	s15, [r3]

			target_speed_l = speed_G - (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800deb0:	4ba8      	ldr	r3, [pc, #672]	; (800e154 <HAL_TIM_PeriodElapsedCallback+0xe2c>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7f2 fb3f 	bl	8000538 <__aeabi_f2d>
 800deba:	4604      	mov	r4, r0
 800debc:	460d      	mov	r5, r1
 800debe:	4ba4      	ldr	r3, [pc, #656]	; (800e150 <HAL_TIM_PeriodElapsedCallback+0xe28>)
 800dec0:	edd3 7a00 	vldr	s15, [r3]
 800dec4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800dec8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800decc:	4b9f      	ldr	r3, [pc, #636]	; (800e14c <HAL_TIM_PeriodElapsedCallback+0xe24>)
 800dece:	edd3 7a00 	vldr	s15, [r3]
 800ded2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ded6:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 800e158 <HAL_TIM_PeriodElapsedCallback+0xe30>
 800deda:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dede:	ee16 0a90 	vmov	r0, s13
 800dee2:	f7f2 fb29 	bl	8000538 <__aeabi_f2d>
 800dee6:	a396      	add	r3, pc, #600	; (adr r3, 800e140 <HAL_TIM_PeriodElapsedCallback+0xe18>)
 800dee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deec:	f7f2 fb7c 	bl	80005e8 <__aeabi_dmul>
 800def0:	4602      	mov	r2, r0
 800def2:	460b      	mov	r3, r1
 800def4:	4610      	mov	r0, r2
 800def6:	4619      	mov	r1, r3
 800def8:	f04f 0200 	mov.w	r2, #0
 800defc:	4b97      	ldr	r3, [pc, #604]	; (800e15c <HAL_TIM_PeriodElapsedCallback+0xe34>)
 800defe:	f7f2 fb73 	bl	80005e8 <__aeabi_dmul>
 800df02:	4602      	mov	r2, r0
 800df04:	460b      	mov	r3, r1
 800df06:	4610      	mov	r0, r2
 800df08:	4619      	mov	r1, r3
 800df0a:	f04f 0200 	mov.w	r2, #0
 800df0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df12:	f7f2 fc93 	bl	800083c <__aeabi_ddiv>
 800df16:	4602      	mov	r2, r0
 800df18:	460b      	mov	r3, r1
 800df1a:	4620      	mov	r0, r4
 800df1c:	4629      	mov	r1, r5
 800df1e:	f7f2 f9ab 	bl	8000278 <__aeabi_dsub>
 800df22:	4603      	mov	r3, r0
 800df24:	460c      	mov	r4, r1
 800df26:	4618      	mov	r0, r3
 800df28:	4621      	mov	r1, r4
 800df2a:	f7f2 fe35 	bl	8000b98 <__aeabi_d2f>
 800df2e:	4602      	mov	r2, r0
 800df30:	4b8b      	ldr	r3, [pc, #556]	; (800e160 <HAL_TIM_PeriodElapsedCallback+0xe38>)
 800df32:	601a      	str	r2, [r3, #0]
			target_speed_r = speed_G + (target_omega_z + Kp_o*epsilon_omega)/180*M_PI*TREAD/2;
 800df34:	4b87      	ldr	r3, [pc, #540]	; (800e154 <HAL_TIM_PeriodElapsedCallback+0xe2c>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4618      	mov	r0, r3
 800df3a:	f7f2 fafd 	bl	8000538 <__aeabi_f2d>
 800df3e:	4604      	mov	r4, r0
 800df40:	460d      	mov	r5, r1
 800df42:	4b83      	ldr	r3, [pc, #524]	; (800e150 <HAL_TIM_PeriodElapsedCallback+0xe28>)
 800df44:	edd3 7a00 	vldr	s15, [r3]
 800df48:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800df4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800df50:	4b7e      	ldr	r3, [pc, #504]	; (800e14c <HAL_TIM_PeriodElapsedCallback+0xe24>)
 800df52:	edd3 7a00 	vldr	s15, [r3]
 800df56:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df5a:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800e158 <HAL_TIM_PeriodElapsedCallback+0xe30>
 800df5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800df62:	ee16 0a90 	vmov	r0, s13
 800df66:	f7f2 fae7 	bl	8000538 <__aeabi_f2d>
 800df6a:	a375      	add	r3, pc, #468	; (adr r3, 800e140 <HAL_TIM_PeriodElapsedCallback+0xe18>)
 800df6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df70:	f7f2 fb3a 	bl	80005e8 <__aeabi_dmul>
 800df74:	4602      	mov	r2, r0
 800df76:	460b      	mov	r3, r1
 800df78:	4610      	mov	r0, r2
 800df7a:	4619      	mov	r1, r3
 800df7c:	f04f 0200 	mov.w	r2, #0
 800df80:	4b76      	ldr	r3, [pc, #472]	; (800e15c <HAL_TIM_PeriodElapsedCallback+0xe34>)
 800df82:	f7f2 fb31 	bl	80005e8 <__aeabi_dmul>
 800df86:	4602      	mov	r2, r0
 800df88:	460b      	mov	r3, r1
 800df8a:	4610      	mov	r0, r2
 800df8c:	4619      	mov	r1, r3
 800df8e:	f04f 0200 	mov.w	r2, #0
 800df92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df96:	f7f2 fc51 	bl	800083c <__aeabi_ddiv>
 800df9a:	4602      	mov	r2, r0
 800df9c:	460b      	mov	r3, r1
 800df9e:	4620      	mov	r0, r4
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	f7f2 f96b 	bl	800027c <__adddf3>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	460c      	mov	r4, r1
 800dfaa:	4618      	mov	r0, r3
 800dfac:	4621      	mov	r1, r4
 800dfae:	f7f2 fdf3 	bl	8000b98 <__aeabi_d2f>
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	4b6b      	ldr	r3, [pc, #428]	; (800e164 <HAL_TIM_PeriodElapsedCallback+0xe3c>)
 800dfb6:	601a      	str	r2, [r3, #0]

			epsilon_l = target_speed_l - speed_l;
 800dfb8:	4b69      	ldr	r3, [pc, #420]	; (800e160 <HAL_TIM_PeriodElapsedCallback+0xe38>)
 800dfba:	ed93 7a00 	vldr	s14, [r3]
 800dfbe:	4b6a      	ldr	r3, [pc, #424]	; (800e168 <HAL_TIM_PeriodElapsedCallback+0xe40>)
 800dfc0:	edd3 7a00 	vldr	s15, [r3]
 800dfc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dfc8:	4b68      	ldr	r3, [pc, #416]	; (800e16c <HAL_TIM_PeriodElapsedCallback+0xe44>)
 800dfca:	edc3 7a00 	vstr	s15, [r3]
			pulse_l = Kp * epsilon_l;
 800dfce:	4b67      	ldr	r3, [pc, #412]	; (800e16c <HAL_TIM_PeriodElapsedCallback+0xe44>)
 800dfd0:	edd3 7a00 	vldr	s15, [r3]
 800dfd4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800dfd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dfdc:	4b64      	ldr	r3, [pc, #400]	; (800e170 <HAL_TIM_PeriodElapsedCallback+0xe48>)
 800dfde:	edc3 7a00 	vstr	s15, [r3]
			epsilon_r = target_speed_r - speed_r;
 800dfe2:	4b60      	ldr	r3, [pc, #384]	; (800e164 <HAL_TIM_PeriodElapsedCallback+0xe3c>)
 800dfe4:	ed93 7a00 	vldr	s14, [r3]
 800dfe8:	4b62      	ldr	r3, [pc, #392]	; (800e174 <HAL_TIM_PeriodElapsedCallback+0xe4c>)
 800dfea:	edd3 7a00 	vldr	s15, [r3]
 800dfee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dff2:	4b61      	ldr	r3, [pc, #388]	; (800e178 <HAL_TIM_PeriodElapsedCallback+0xe50>)
 800dff4:	edc3 7a00 	vstr	s15, [r3]
			pulse_r = Kp * epsilon_r;
 800dff8:	4b5f      	ldr	r3, [pc, #380]	; (800e178 <HAL_TIM_PeriodElapsedCallback+0xe50>)
 800dffa:	edd3 7a00 	vldr	s15, [r3]
 800dffe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e002:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e006:	4b5d      	ldr	r3, [pc, #372]	; (800e17c <HAL_TIM_PeriodElapsedCallback+0xe54>)
 800e008:	edc3 7a00 	vstr	s15, [r3]
		}


		//ADchange interrupt
		uint16_t delay;
		tp = (tp+1)%3;
 800e00c:	4b5c      	ldr	r3, [pc, #368]	; (800e180 <HAL_TIM_PeriodElapsedCallback+0xe58>)
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	1c5a      	adds	r2, r3, #1
 800e012:	4b5c      	ldr	r3, [pc, #368]	; (800e184 <HAL_TIM_PeriodElapsedCallback+0xe5c>)
 800e014:	fb83 3102 	smull	r3, r1, r3, r2
 800e018:	17d3      	asrs	r3, r2, #31
 800e01a:	1ac9      	subs	r1, r1, r3
 800e01c:	460b      	mov	r3, r1
 800e01e:	005b      	lsls	r3, r3, #1
 800e020:	440b      	add	r3, r1
 800e022:	1ad1      	subs	r1, r2, r3
 800e024:	b2ca      	uxtb	r2, r1
 800e026:	4b56      	ldr	r3, [pc, #344]	; (800e180 <HAL_TIM_PeriodElapsedCallback+0xe58>)
 800e028:	701a      	strb	r2, [r3, #0]

		switch(tp){
 800e02a:	4b55      	ldr	r3, [pc, #340]	; (800e180 <HAL_TIM_PeriodElapsedCallback+0xe58>)
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	2b01      	cmp	r3, #1
 800e030:	d044      	beq.n	800e0bc <HAL_TIM_PeriodElapsedCallback+0xd94>
 800e032:	2b02      	cmp	r3, #2
 800e034:	f000 80b6 	beq.w	800e1a4 <HAL_TIM_PeriodElapsedCallback+0xe7c>
 800e038:	2b00      	cmp	r3, #0
 800e03a:	f040 82e3 	bne.w	800e604 <HAL_TIM_PeriodElapsedCallback+0x12dc>
		  case 0:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); 	//L
 800e03e:	2201      	movs	r2, #1
 800e040:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e044:	4850      	ldr	r0, [pc, #320]	; (800e188 <HAL_TIM_PeriodElapsedCallback+0xe60>)
 800e046:	f7f4 f95d 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800e04a:	2300      	movs	r3, #0
 800e04c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e04e:	e002      	b.n	800e056 <HAL_TIM_PeriodElapsedCallback+0xd2e>
 800e050:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e052:	3301      	adds	r3, #1
 800e054:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e056:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e058:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d9f7      	bls.n	800e050 <HAL_TIM_PeriodElapsedCallback+0xd28>
				ad_l = get_adc_value(&hadc1, ADC_CHANNEL_3);			//L
 800e060:	2103      	movs	r1, #3
 800e062:	484a      	ldr	r0, [pc, #296]	; (800e18c <HAL_TIM_PeriodElapsedCallback+0xe64>)
 800e064:	f001 fa1c 	bl	800f4a0 <get_adc_value>
 800e068:	4603      	mov	r3, r0
 800e06a:	461a      	mov	r2, r3
 800e06c:	4b48      	ldr	r3, [pc, #288]	; (800e190 <HAL_TIM_PeriodElapsedCallback+0xe68>)
 800e06e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800e070:	2200      	movs	r2, #0
 800e072:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e076:	4844      	ldr	r0, [pc, #272]	; (800e188 <HAL_TIM_PeriodElapsedCallback+0xe60>)
 800e078:	f7f4 f944 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  	//R
 800e07c:	2201      	movs	r2, #1
 800e07e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e082:	4844      	ldr	r0, [pc, #272]	; (800e194 <HAL_TIM_PeriodElapsedCallback+0xe6c>)
 800e084:	f7f4 f93e 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800e088:	2300      	movs	r3, #0
 800e08a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e08c:	e002      	b.n	800e094 <HAL_TIM_PeriodElapsedCallback+0xd6c>
 800e08e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e090:	3301      	adds	r3, #1
 800e092:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e094:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e096:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d9f7      	bls.n	800e08e <HAL_TIM_PeriodElapsedCallback+0xd66>
				ad_r = get_adc_value(&hadc1, ADC_CHANNEL_1);			//R
 800e09e:	2101      	movs	r1, #1
 800e0a0:	483a      	ldr	r0, [pc, #232]	; (800e18c <HAL_TIM_PeriodElapsedCallback+0xe64>)
 800e0a2:	f001 f9fd 	bl	800f4a0 <get_adc_value>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	461a      	mov	r2, r3
 800e0aa:	4b3b      	ldr	r3, [pc, #236]	; (800e198 <HAL_TIM_PeriodElapsedCallback+0xe70>)
 800e0ac:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e0b4:	4837      	ldr	r0, [pc, #220]	; (800e194 <HAL_TIM_PeriodElapsedCallback+0xe6c>)
 800e0b6:	f7f4 f925 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800e0ba:	e2a3      	b.n	800e604 <HAL_TIM_PeriodElapsedCallback+0x12dc>

		  case 1:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); 	//FL
 800e0bc:	2201      	movs	r2, #1
 800e0be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e0c2:	4831      	ldr	r0, [pc, #196]	; (800e188 <HAL_TIM_PeriodElapsedCallback+0xe60>)
 800e0c4:	f7f4 f91e 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e0cc:	e002      	b.n	800e0d4 <HAL_TIM_PeriodElapsedCallback+0xdac>
 800e0ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e0d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e0d6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d9f7      	bls.n	800e0ce <HAL_TIM_PeriodElapsedCallback+0xda6>
				ad_fl = get_adc_value(&hadc1, ADC_CHANNEL_2);			//FL
 800e0de:	2102      	movs	r1, #2
 800e0e0:	482a      	ldr	r0, [pc, #168]	; (800e18c <HAL_TIM_PeriodElapsedCallback+0xe64>)
 800e0e2:	f001 f9dd 	bl	800f4a0 <get_adc_value>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	4b2c      	ldr	r3, [pc, #176]	; (800e19c <HAL_TIM_PeriodElapsedCallback+0xe74>)
 800e0ec:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e0f4:	4824      	ldr	r0, [pc, #144]	; (800e188 <HAL_TIM_PeriodElapsedCallback+0xe60>)
 800e0f6:	f7f4 f905 	bl	8002304 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   	//FR
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e100:	4821      	ldr	r0, [pc, #132]	; (800e188 <HAL_TIM_PeriodElapsedCallback+0xe60>)
 800e102:	f7f4 f8ff 	bl	8002304 <HAL_GPIO_WritePin>
				for(delay=0; delay<sensor_wait; delay++);
 800e106:	2300      	movs	r3, #0
 800e108:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e10a:	e002      	b.n	800e112 <HAL_TIM_PeriodElapsedCallback+0xdea>
 800e10c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e10e:	3301      	adds	r3, #1
 800e110:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e112:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e114:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800e118:	4293      	cmp	r3, r2
 800e11a:	d9f7      	bls.n	800e10c <HAL_TIM_PeriodElapsedCallback+0xde4>
				ad_fr = get_adc_value(&hadc1, ADC_CHANNEL_0);			//FR
 800e11c:	2100      	movs	r1, #0
 800e11e:	481b      	ldr	r0, [pc, #108]	; (800e18c <HAL_TIM_PeriodElapsedCallback+0xe64>)
 800e120:	f001 f9be 	bl	800f4a0 <get_adc_value>
 800e124:	4603      	mov	r3, r0
 800e126:	461a      	mov	r2, r3
 800e128:	4b1d      	ldr	r3, [pc, #116]	; (800e1a0 <HAL_TIM_PeriodElapsedCallback+0xe78>)
 800e12a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800e12c:	2200      	movs	r2, #0
 800e12e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e132:	4815      	ldr	r0, [pc, #84]	; (800e188 <HAL_TIM_PeriodElapsedCallback+0xe60>)
 800e134:	f7f4 f8e6 	bl	8002304 <HAL_GPIO_WritePin>
			break;
 800e138:	e264      	b.n	800e604 <HAL_TIM_PeriodElapsedCallback+0x12dc>
 800e13a:	bf00      	nop
 800e13c:	f3af 8000 	nop.w
 800e140:	54442d18 	.word	0x54442d18
 800e144:	400921fb 	.word	0x400921fb
 800e148:	200002f0 	.word	0x200002f0
 800e14c:	200001e0 	.word	0x200001e0
 800e150:	20000490 	.word	0x20000490
 800e154:	20000b34 	.word	0x20000b34
 800e158:	43340000 	.word	0x43340000
 800e15c:	40508000 	.word	0x40508000
 800e160:	20000c44 	.word	0x20000c44
 800e164:	200001d8 	.word	0x200001d8
 800e168:	20000b30 	.word	0x20000b30
 800e16c:	20000ba0 	.word	0x20000ba0
 800e170:	20000be8 	.word	0x20000be8
 800e174:	200002f4 	.word	0x200002f4
 800e178:	20000c50 	.word	0x20000c50
 800e17c:	200007b8 	.word	0x200007b8
 800e180:	20000fc3 	.word	0x20000fc3
 800e184:	55555556 	.word	0x55555556
 800e188:	40020800 	.word	0x40020800
 800e18c:	20000b40 	.word	0x20000b40
 800e190:	20000b3c 	.word	0x20000b3c
 800e194:	40020000 	.word	0x40020000
 800e198:	20000fa8 	.word	0x20000fa8
 800e19c:	20000d9c 	.word	0x20000d9c
 800e1a0:	20000c48 	.word	0x20000c48

		  case 2:
				//
				if(MF.FLAG.WCTRL){
 800e1a4:	4bca      	ldr	r3, [pc, #808]	; (800e4d0 <HAL_TIM_PeriodElapsedCallback+0x11a8>)
 800e1a6:	881b      	ldrh	r3, [r3, #0]
 800e1a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	f000 81d4 	beq.w	800e55c <HAL_TIM_PeriodElapsedCallback+0x1234>
					if(!v_flag){
 800e1b4:	4bc7      	ldr	r3, [pc, #796]	; (800e4d4 <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	f040 80c7 	bne.w	800e34c <HAL_TIM_PeriodElapsedCallback+0x1024>
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	857b      	strh	r3, [r7, #42]	; 0x2a
						dif_l = (int32_t) ad_l - base_l;
 800e1c6:	4bc4      	ldr	r3, [pc, #784]	; (800e4d8 <HAL_TIM_PeriodElapsedCallback+0x11b0>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	b29a      	uxth	r2, r3
 800e1cc:	4bc3      	ldr	r3, [pc, #780]	; (800e4dc <HAL_TIM_PeriodElapsedCallback+0x11b4>)
 800e1ce:	881b      	ldrh	r3, [r3, #0]
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	b21a      	sxth	r2, r3
 800e1d6:	4bc2      	ldr	r3, [pc, #776]	; (800e4e0 <HAL_TIM_PeriodElapsedCallback+0x11b8>)
 800e1d8:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_r - base_r;
 800e1da:	4bc2      	ldr	r3, [pc, #776]	; (800e4e4 <HAL_TIM_PeriodElapsedCallback+0x11bc>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	b29a      	uxth	r2, r3
 800e1e0:	4bc1      	ldr	r3, [pc, #772]	; (800e4e8 <HAL_TIM_PeriodElapsedCallback+0x11c0>)
 800e1e2:	881b      	ldrh	r3, [r3, #0]
 800e1e4:	1ad3      	subs	r3, r2, r3
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	b21a      	sxth	r2, r3
 800e1ea:	4bc0      	ldr	r3, [pc, #768]	; (800e4ec <HAL_TIM_PeriodElapsedCallback+0x11c4>)
 800e1ec:	801a      	strh	r2, [r3, #0]

						if(CTRL_BASE_L < dif_l || CTRL_BASE_R < dif_r){
 800e1ee:	4bbc      	ldr	r3, [pc, #752]	; (800e4e0 <HAL_TIM_PeriodElapsedCallback+0x11b8>)
 800e1f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1f4:	2b64      	cmp	r3, #100	; 0x64
 800e1f6:	dc04      	bgt.n	800e202 <HAL_TIM_PeriodElapsedCallback+0xeda>
 800e1f8:	4bbc      	ldr	r3, [pc, #752]	; (800e4ec <HAL_TIM_PeriodElapsedCallback+0x11c4>)
 800e1fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1fe:	2b32      	cmp	r3, #50	; 0x32
 800e200:	dd7e      	ble.n	800e300 <HAL_TIM_PeriodElapsedCallback+0xfd8>
							if(CTRL_BASE_L < dif_l){
 800e202:	4bb7      	ldr	r3, [pc, #732]	; (800e4e0 <HAL_TIM_PeriodElapsedCallback+0x11b8>)
 800e204:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e208:	2b64      	cmp	r3, #100	; 0x64
 800e20a:	dd40      	ble.n	800e28e <HAL_TIM_PeriodElapsedCallback+0xf66>
								dwl_tmp += CTRL_CONT_W * 0.5 * dif_l;				//a比例制御値を決定
 800e20c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800e210:	4618      	mov	r0, r3
 800e212:	f7f2 f97f 	bl	8000514 <__aeabi_i2d>
 800e216:	4604      	mov	r4, r0
 800e218:	460d      	mov	r5, r1
 800e21a:	4bb1      	ldr	r3, [pc, #708]	; (800e4e0 <HAL_TIM_PeriodElapsedCallback+0x11b8>)
 800e21c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e220:	4618      	mov	r0, r3
 800e222:	f7f2 f977 	bl	8000514 <__aeabi_i2d>
 800e226:	f04f 0200 	mov.w	r2, #0
 800e22a:	4bb1      	ldr	r3, [pc, #708]	; (800e4f0 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 800e22c:	f7f2 f9dc 	bl	80005e8 <__aeabi_dmul>
 800e230:	4602      	mov	r2, r0
 800e232:	460b      	mov	r3, r1
 800e234:	4620      	mov	r0, r4
 800e236:	4629      	mov	r1, r5
 800e238:	f7f2 f820 	bl	800027c <__adddf3>
 800e23c:	4603      	mov	r3, r0
 800e23e:	460c      	mov	r4, r1
 800e240:	4618      	mov	r0, r3
 800e242:	4621      	mov	r1, r4
 800e244:	f7f2 fc80 	bl	8000b48 <__aeabi_d2iz>
 800e248:	4603      	mov	r3, r0
 800e24a:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += -1 * CTRL_CONT_W * 0.5 * dif_l;			//a比例制御値を決定
 800e24c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e250:	4618      	mov	r0, r3
 800e252:	f7f2 f95f 	bl	8000514 <__aeabi_i2d>
 800e256:	4604      	mov	r4, r0
 800e258:	460d      	mov	r5, r1
 800e25a:	4ba1      	ldr	r3, [pc, #644]	; (800e4e0 <HAL_TIM_PeriodElapsedCallback+0x11b8>)
 800e25c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e260:	4618      	mov	r0, r3
 800e262:	f7f2 f957 	bl	8000514 <__aeabi_i2d>
 800e266:	f04f 0200 	mov.w	r2, #0
 800e26a:	4ba2      	ldr	r3, [pc, #648]	; (800e4f4 <HAL_TIM_PeriodElapsedCallback+0x11cc>)
 800e26c:	f7f2 f9bc 	bl	80005e8 <__aeabi_dmul>
 800e270:	4602      	mov	r2, r0
 800e272:	460b      	mov	r3, r1
 800e274:	4620      	mov	r0, r4
 800e276:	4629      	mov	r1, r5
 800e278:	f7f2 f800 	bl	800027c <__adddf3>
 800e27c:	4603      	mov	r3, r0
 800e27e:	460c      	mov	r4, r1
 800e280:	4618      	mov	r0, r3
 800e282:	4621      	mov	r1, r4
 800e284:	f7f2 fc60 	bl	8000b48 <__aeabi_d2iz>
 800e288:	4603      	mov	r3, r0
 800e28a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e28c:	e034      	b.n	800e2f8 <HAL_TIM_PeriodElapsedCallback+0xfd0>
							}
							else if(CTRL_BASE_R < dif_r){
 800e28e:	4b97      	ldr	r3, [pc, #604]	; (800e4ec <HAL_TIM_PeriodElapsedCallback+0x11c4>)
 800e290:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e294:	2b32      	cmp	r3, #50	; 0x32
 800e296:	dd2f      	ble.n	800e2f8 <HAL_TIM_PeriodElapsedCallback+0xfd0>
								dwl_tmp += -1 * CTRL_CONT_W * dif_r;				//a比例制御値を決定
 800e298:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800e29c:	ee07 3a90 	vmov	s15, r3
 800e2a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e2a4:	4b91      	ldr	r3, [pc, #580]	; (800e4ec <HAL_TIM_PeriodElapsedCallback+0x11c4>)
 800e2a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2aa:	ee07 3a90 	vmov	s15, r3
 800e2ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e2b2:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800e2b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e2ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e2c2:	ee17 3a90 	vmov	r3, s15
 800e2c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
								dwr_tmp += CTRL_CONT_W * dif_r;						//a比例制御値を決定
 800e2c8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e2cc:	ee07 3a90 	vmov	s15, r3
 800e2d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e2d4:	4b85      	ldr	r3, [pc, #532]	; (800e4ec <HAL_TIM_PeriodElapsedCallback+0x11c4>)
 800e2d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2da:	ee07 3a90 	vmov	s15, r3
 800e2de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e2e2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e2e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e2ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e2f2:	ee17 3a90 	vmov	r3, s15
 800e2f6:	857b      	strh	r3, [r7, #42]	; 0x2a
							}
							W_G_flag = 1;
 800e2f8:	4b7f      	ldr	r3, [pc, #508]	; (800e4f8 <HAL_TIM_PeriodElapsedCallback+0x11d0>)
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	701a      	strb	r2, [r3, #0]
 800e2fe:	e002      	b.n	800e306 <HAL_TIM_PeriodElapsedCallback+0xfde>
						}else{
							W_G_flag = 0;
 800e300:	4b7d      	ldr	r3, [pc, #500]	; (800e4f8 <HAL_TIM_PeriodElapsedCallback+0x11d0>)
 800e302:	2200      	movs	r2, #0
 800e304:	701a      	strb	r2, [r3, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800e306:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800e30a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800e30e:	dd08      	ble.n	800e322 <HAL_TIM_PeriodElapsedCallback+0xffa>
 800e310:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800e314:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e318:	bfa8      	it	ge
 800e31a:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800e31e:	b21b      	sxth	r3, r3
 800e320:	e000      	b.n	800e324 <HAL_TIM_PeriodElapsedCallback+0xffc>
 800e322:	4b76      	ldr	r3, [pc, #472]	; (800e4fc <HAL_TIM_PeriodElapsedCallback+0x11d4>)
 800e324:	4a76      	ldr	r2, [pc, #472]	; (800e500 <HAL_TIM_PeriodElapsedCallback+0x11d8>)
 800e326:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800e328:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e32c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800e330:	dd08      	ble.n	800e344 <HAL_TIM_PeriodElapsedCallback+0x101c>
 800e332:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e336:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e33a:	bfa8      	it	ge
 800e33c:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800e340:	b21b      	sxth	r3, r3
 800e342:	e000      	b.n	800e346 <HAL_TIM_PeriodElapsedCallback+0x101e>
 800e344:	4b6d      	ldr	r3, [pc, #436]	; (800e4fc <HAL_TIM_PeriodElapsedCallback+0x11d4>)
 800e346:	4a6f      	ldr	r2, [pc, #444]	; (800e504 <HAL_TIM_PeriodElapsedCallback+0x11dc>)
 800e348:	8013      	strh	r3, [r2, #0]
 800e34a:	e10e      	b.n	800e56a <HAL_TIM_PeriodElapsedCallback+0x1242>
					}else{
						int16_t dwl_tmp = 0, dwr_tmp = 0;
 800e34c:	2300      	movs	r3, #0
 800e34e:	853b      	strh	r3, [r7, #40]	; 0x28
 800e350:	2300      	movs	r3, #0
 800e352:	84fb      	strh	r3, [r7, #38]	; 0x26
						dif_l = (int32_t) ad_fl - BASE_FL;
 800e354:	4b6c      	ldr	r3, [pc, #432]	; (800e508 <HAL_TIM_PeriodElapsedCallback+0x11e0>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	b29b      	uxth	r3, r3
 800e35a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800e35e:	b29b      	uxth	r3, r3
 800e360:	b21a      	sxth	r2, r3
 800e362:	4b5f      	ldr	r3, [pc, #380]	; (800e4e0 <HAL_TIM_PeriodElapsedCallback+0x11b8>)
 800e364:	801a      	strh	r2, [r3, #0]
						dif_r = (int32_t) ad_fr - BASE_FR;
 800e366:	4b69      	ldr	r3, [pc, #420]	; (800e50c <HAL_TIM_PeriodElapsedCallback+0x11e4>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e370:	b29b      	uxth	r3, r3
 800e372:	b21a      	sxth	r2, r3
 800e374:	4b5d      	ldr	r3, [pc, #372]	; (800e4ec <HAL_TIM_PeriodElapsedCallback+0x11c4>)
 800e376:	801a      	strh	r2, [r3, #0]

						if(CTRL_BASE_FL < dif_l || CTRL_BASE_FR < dif_r){
 800e378:	4b59      	ldr	r3, [pc, #356]	; (800e4e0 <HAL_TIM_PeriodElapsedCallback+0x11b8>)
 800e37a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e37e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e382:	dc05      	bgt.n	800e390 <HAL_TIM_PeriodElapsedCallback+0x1068>
 800e384:	4b59      	ldr	r3, [pc, #356]	; (800e4ec <HAL_TIM_PeriodElapsedCallback+0x11c4>)
 800e386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e38a:	2bc8      	cmp	r3, #200	; 0xc8
 800e38c:	f340 80c0 	ble.w	800e510 <HAL_TIM_PeriodElapsedCallback+0x11e8>
							if(CTRL_BASE_FL < dif_l){
 800e390:	4b53      	ldr	r3, [pc, #332]	; (800e4e0 <HAL_TIM_PeriodElapsedCallback+0x11b8>)
 800e392:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e396:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e39a:	dd40      	ble.n	800e41e <HAL_TIM_PeriodElapsedCallback+0x10f6>
								dwl_tmp += CTRL_CONT_W * 0.1 * dif_l;				//a比例制御値を決定
 800e39c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7f2 f8b7 	bl	8000514 <__aeabi_i2d>
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	460d      	mov	r5, r1
 800e3aa:	4b4d      	ldr	r3, [pc, #308]	; (800e4e0 <HAL_TIM_PeriodElapsedCallback+0x11b8>)
 800e3ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7f2 f8af 	bl	8000514 <__aeabi_i2d>
 800e3b6:	a33e      	add	r3, pc, #248	; (adr r3, 800e4b0 <HAL_TIM_PeriodElapsedCallback+0x1188>)
 800e3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3bc:	f7f2 f914 	bl	80005e8 <__aeabi_dmul>
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	4629      	mov	r1, r5
 800e3c8:	f7f1 ff58 	bl	800027c <__adddf3>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	460c      	mov	r4, r1
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	4621      	mov	r1, r4
 800e3d4:	f7f2 fbb8 	bl	8000b48 <__aeabi_d2iz>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += -1 * CTRL_CONT_W * 0.1 * dif_l;				//a比例制御値を決定
 800e3dc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7f2 f897 	bl	8000514 <__aeabi_i2d>
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	460d      	mov	r5, r1
 800e3ea:	4b3d      	ldr	r3, [pc, #244]	; (800e4e0 <HAL_TIM_PeriodElapsedCallback+0x11b8>)
 800e3ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7f2 f88f 	bl	8000514 <__aeabi_i2d>
 800e3f6:	a330      	add	r3, pc, #192	; (adr r3, 800e4b8 <HAL_TIM_PeriodElapsedCallback+0x1190>)
 800e3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3fc:	f7f2 f8f4 	bl	80005e8 <__aeabi_dmul>
 800e400:	4602      	mov	r2, r0
 800e402:	460b      	mov	r3, r1
 800e404:	4620      	mov	r0, r4
 800e406:	4629      	mov	r1, r5
 800e408:	f7f1 ff38 	bl	800027c <__adddf3>
 800e40c:	4603      	mov	r3, r0
 800e40e:	460c      	mov	r4, r1
 800e410:	4618      	mov	r0, r3
 800e412:	4621      	mov	r1, r4
 800e414:	f7f2 fb98 	bl	8000b48 <__aeabi_d2iz>
 800e418:	4603      	mov	r3, r0
 800e41a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e41c:	e044      	b.n	800e4a8 <HAL_TIM_PeriodElapsedCallback+0x1180>
							}
							else if(CTRL_BASE_FR < dif_r){
 800e41e:	4b33      	ldr	r3, [pc, #204]	; (800e4ec <HAL_TIM_PeriodElapsedCallback+0x11c4>)
 800e420:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e424:	2bc8      	cmp	r3, #200	; 0xc8
 800e426:	dd3f      	ble.n	800e4a8 <HAL_TIM_PeriodElapsedCallback+0x1180>
								dwl_tmp += -1 * CTRL_CONT_W * 0.2 * dif_r;			//a比例制御値を決定
 800e428:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7f2 f871 	bl	8000514 <__aeabi_i2d>
 800e432:	4604      	mov	r4, r0
 800e434:	460d      	mov	r5, r1
 800e436:	4b2d      	ldr	r3, [pc, #180]	; (800e4ec <HAL_TIM_PeriodElapsedCallback+0x11c4>)
 800e438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7f2 f869 	bl	8000514 <__aeabi_i2d>
 800e442:	a31f      	add	r3, pc, #124	; (adr r3, 800e4c0 <HAL_TIM_PeriodElapsedCallback+0x1198>)
 800e444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e448:	f7f2 f8ce 	bl	80005e8 <__aeabi_dmul>
 800e44c:	4602      	mov	r2, r0
 800e44e:	460b      	mov	r3, r1
 800e450:	4620      	mov	r0, r4
 800e452:	4629      	mov	r1, r5
 800e454:	f7f1 ff12 	bl	800027c <__adddf3>
 800e458:	4603      	mov	r3, r0
 800e45a:	460c      	mov	r4, r1
 800e45c:	4618      	mov	r0, r3
 800e45e:	4621      	mov	r1, r4
 800e460:	f7f2 fb72 	bl	8000b48 <__aeabi_d2iz>
 800e464:	4603      	mov	r3, r0
 800e466:	853b      	strh	r3, [r7, #40]	; 0x28
								dwr_tmp += CTRL_CONT_W * 0.2 * dif_r;						//a比例制御値を決定
 800e468:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7f2 f851 	bl	8000514 <__aeabi_i2d>
 800e472:	4604      	mov	r4, r0
 800e474:	460d      	mov	r5, r1
 800e476:	4b1d      	ldr	r3, [pc, #116]	; (800e4ec <HAL_TIM_PeriodElapsedCallback+0x11c4>)
 800e478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7f2 f849 	bl	8000514 <__aeabi_i2d>
 800e482:	a311      	add	r3, pc, #68	; (adr r3, 800e4c8 <HAL_TIM_PeriodElapsedCallback+0x11a0>)
 800e484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e488:	f7f2 f8ae 	bl	80005e8 <__aeabi_dmul>
 800e48c:	4602      	mov	r2, r0
 800e48e:	460b      	mov	r3, r1
 800e490:	4620      	mov	r0, r4
 800e492:	4629      	mov	r1, r5
 800e494:	f7f1 fef2 	bl	800027c <__adddf3>
 800e498:	4603      	mov	r3, r0
 800e49a:	460c      	mov	r4, r1
 800e49c:	4618      	mov	r0, r3
 800e49e:	4621      	mov	r1, r4
 800e4a0:	f7f2 fb52 	bl	8000b48 <__aeabi_d2iz>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	84fb      	strh	r3, [r7, #38]	; 0x26
							}
							W_G_flag = 1;
 800e4a8:	4b13      	ldr	r3, [pc, #76]	; (800e4f8 <HAL_TIM_PeriodElapsedCallback+0x11d0>)
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	701a      	strb	r2, [r3, #0]
 800e4ae:	e032      	b.n	800e516 <HAL_TIM_PeriodElapsedCallback+0x11ee>
 800e4b0:	9999999a 	.word	0x9999999a
 800e4b4:	3fa99999 	.word	0x3fa99999
 800e4b8:	9999999a 	.word	0x9999999a
 800e4bc:	bfa99999 	.word	0xbfa99999
 800e4c0:	9999999a 	.word	0x9999999a
 800e4c4:	bfb99999 	.word	0xbfb99999
 800e4c8:	9999999a 	.word	0x9999999a
 800e4cc:	3fb99999 	.word	0x3fb99999
 800e4d0:	20000fac 	.word	0x20000fac
 800e4d4:	20000b28 	.word	0x20000b28
 800e4d8:	20000b3c 	.word	0x20000b3c
 800e4dc:	20000384 	.word	0x20000384
 800e4e0:	20000b90 	.word	0x20000b90
 800e4e4:	20000fa8 	.word	0x20000fa8
 800e4e8:	200002f8 	.word	0x200002f8
 800e4ec:	20000bf2 	.word	0x20000bf2
 800e4f0:	3fd00000 	.word	0x3fd00000
 800e4f4:	bfd00000 	.word	0xbfd00000
 800e4f8:	20000c3c 	.word	0x20000c3c
 800e4fc:	fffffc18 	.word	0xfffffc18
 800e500:	20000b38 	.word	0x20000b38
 800e504:	20000fb8 	.word	0x20000fb8
 800e508:	20000d9c 	.word	0x20000d9c
 800e50c:	20000c48 	.word	0x20000c48
						}else{
							W_G_flag = 0;
 800e510:	4bb0      	ldr	r3, [pc, #704]	; (800e7d4 <HAL_TIM_PeriodElapsedCallback+0x14ac>)
 800e512:	2200      	movs	r2, #0
 800e514:	701a      	strb	r2, [r3, #0]
						}
						dwl = max(min(CTRL_MAX_W, dwl_tmp), -1 * CTRL_MAX_W);
 800e516:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800e51a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800e51e:	dd08      	ble.n	800e532 <HAL_TIM_PeriodElapsedCallback+0x120a>
 800e520:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800e524:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e528:	bfa8      	it	ge
 800e52a:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800e52e:	b21b      	sxth	r3, r3
 800e530:	e000      	b.n	800e534 <HAL_TIM_PeriodElapsedCallback+0x120c>
 800e532:	4ba9      	ldr	r3, [pc, #676]	; (800e7d8 <HAL_TIM_PeriodElapsedCallback+0x14b0>)
 800e534:	4aa9      	ldr	r2, [pc, #676]	; (800e7dc <HAL_TIM_PeriodElapsedCallback+0x14b4>)
 800e536:	8013      	strh	r3, [r2, #0]
						dwr = max(min(CTRL_MAX_W, dwr_tmp), -1 * CTRL_MAX_W);
 800e538:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e53c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800e540:	dd08      	ble.n	800e554 <HAL_TIM_PeriodElapsedCallback+0x122c>
 800e542:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e54a:	bfa8      	it	ge
 800e54c:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800e550:	b21b      	sxth	r3, r3
 800e552:	e000      	b.n	800e556 <HAL_TIM_PeriodElapsedCallback+0x122e>
 800e554:	4ba0      	ldr	r3, [pc, #640]	; (800e7d8 <HAL_TIM_PeriodElapsedCallback+0x14b0>)
 800e556:	4aa2      	ldr	r2, [pc, #648]	; (800e7e0 <HAL_TIM_PeriodElapsedCallback+0x14b8>)
 800e558:	8013      	strh	r3, [r2, #0]
 800e55a:	e006      	b.n	800e56a <HAL_TIM_PeriodElapsedCallback+0x1242>
					}
				}else{
					//a制御フラグがなければ壁制御値0
					dwl = dwr = 0;
 800e55c:	2100      	movs	r1, #0
 800e55e:	4ba0      	ldr	r3, [pc, #640]	; (800e7e0 <HAL_TIM_PeriodElapsedCallback+0x14b8>)
 800e560:	460a      	mov	r2, r1
 800e562:	801a      	strh	r2, [r3, #0]
 800e564:	4b9d      	ldr	r3, [pc, #628]	; (800e7dc <HAL_TIM_PeriodElapsedCallback+0x14b4>)
 800e566:	460a      	mov	r2, r1
 800e568:	801a      	strh	r2, [r3, #0]
				}

				if(MF.FLAG.GCTRL){
 800e56a:	4b9e      	ldr	r3, [pc, #632]	; (800e7e4 <HAL_TIM_PeriodElapsedCallback+0x14bc>)
 800e56c:	881b      	ldrh	r3, [r3, #0]
 800e56e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e572:	b2db      	uxtb	r3, r3
 800e574:	2b00      	cmp	r3, #0
 800e576:	d03d      	beq.n	800e5f4 <HAL_TIM_PeriodElapsedCallback+0x12cc>
				}

					dg = CTRL_CONT_G * gyro_read_z();			//a角速度制御
					dg = CTRL_CONT_G * degree_z;				//a角度制御
*/
					dg = CTRL_CONT_G * (degree_z - target_degree_z);		//a角度制御(目標角度はスタートを0度とし、旋回量と対応付け)
 800e578:	4b9b      	ldr	r3, [pc, #620]	; (800e7e8 <HAL_TIM_PeriodElapsedCallback+0x14c0>)
 800e57a:	ed93 7a00 	vldr	s14, [r3]
 800e57e:	4b9b      	ldr	r3, [pc, #620]	; (800e7ec <HAL_TIM_PeriodElapsedCallback+0x14c4>)
 800e580:	edd3 7a00 	vldr	s15, [r3]
 800e584:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e588:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800e58c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e594:	ee17 3a90 	vmov	r3, s15
 800e598:	b21a      	sxth	r2, r3
 800e59a:	4b95      	ldr	r3, [pc, #596]	; (800e7f0 <HAL_TIM_PeriodElapsedCallback+0x14c8>)
 800e59c:	801a      	strh	r2, [r3, #0]

					dg = max(min(CTRL_MAX_G, dg), -1 * CTRL_MAX_G);
 800e59e:	4b94      	ldr	r3, [pc, #592]	; (800e7f0 <HAL_TIM_PeriodElapsedCallback+0x14c8>)
 800e5a0:	881b      	ldrh	r3, [r3, #0]
 800e5a2:	b21b      	sxth	r3, r3
 800e5a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e5a8:	da05      	bge.n	800e5b6 <HAL_TIM_PeriodElapsedCallback+0x128e>
 800e5aa:	4b91      	ldr	r3, [pc, #580]	; (800e7f0 <HAL_TIM_PeriodElapsedCallback+0x14c8>)
 800e5ac:	881b      	ldrh	r3, [r3, #0]
 800e5ae:	b21b      	sxth	r3, r3
 800e5b0:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800e5b4:	dd0c      	ble.n	800e5d0 <HAL_TIM_PeriodElapsedCallback+0x12a8>
 800e5b6:	4b8e      	ldr	r3, [pc, #568]	; (800e7f0 <HAL_TIM_PeriodElapsedCallback+0x14c8>)
 800e5b8:	881b      	ldrh	r3, [r3, #0]
 800e5ba:	b21b      	sxth	r3, r3
 800e5bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e5c0:	da03      	bge.n	800e5ca <HAL_TIM_PeriodElapsedCallback+0x12a2>
 800e5c2:	4b8b      	ldr	r3, [pc, #556]	; (800e7f0 <HAL_TIM_PeriodElapsedCallback+0x14c8>)
 800e5c4:	881b      	ldrh	r3, [r3, #0]
 800e5c6:	b21b      	sxth	r3, r3
 800e5c8:	e003      	b.n	800e5d2 <HAL_TIM_PeriodElapsedCallback+0x12aa>
 800e5ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e5ce:	e000      	b.n	800e5d2 <HAL_TIM_PeriodElapsedCallback+0x12aa>
 800e5d0:	4b81      	ldr	r3, [pc, #516]	; (800e7d8 <HAL_TIM_PeriodElapsedCallback+0x14b0>)
 800e5d2:	4a87      	ldr	r2, [pc, #540]	; (800e7f0 <HAL_TIM_PeriodElapsedCallback+0x14c8>)
 800e5d4:	8013      	strh	r3, [r2, #0]
					dgl = dg;
 800e5d6:	4b86      	ldr	r3, [pc, #536]	; (800e7f0 <HAL_TIM_PeriodElapsedCallback+0x14c8>)
 800e5d8:	881b      	ldrh	r3, [r3, #0]
 800e5da:	b21a      	sxth	r2, r3
 800e5dc:	4b85      	ldr	r3, [pc, #532]	; (800e7f4 <HAL_TIM_PeriodElapsedCallback+0x14cc>)
 800e5de:	801a      	strh	r2, [r3, #0]
					dgr = -1*dg;
 800e5e0:	4b83      	ldr	r3, [pc, #524]	; (800e7f0 <HAL_TIM_PeriodElapsedCallback+0x14c8>)
 800e5e2:	881b      	ldrh	r3, [r3, #0]
 800e5e4:	b21b      	sxth	r3, r3
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	425b      	negs	r3, r3
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	b21a      	sxth	r2, r3
 800e5ee:	4b82      	ldr	r3, [pc, #520]	; (800e7f8 <HAL_TIM_PeriodElapsedCallback+0x14d0>)
 800e5f0:	801a      	strh	r2, [r3, #0]
				}else{
					//a制御フラグがなければ壁制御値0
					dgl = dgr = 0;
				}
				break;
 800e5f2:	e006      	b.n	800e602 <HAL_TIM_PeriodElapsedCallback+0x12da>
					dgl = dgr = 0;
 800e5f4:	2100      	movs	r1, #0
 800e5f6:	4b80      	ldr	r3, [pc, #512]	; (800e7f8 <HAL_TIM_PeriodElapsedCallback+0x14d0>)
 800e5f8:	460a      	mov	r2, r1
 800e5fa:	801a      	strh	r2, [r3, #0]
 800e5fc:	4b7d      	ldr	r3, [pc, #500]	; (800e7f4 <HAL_TIM_PeriodElapsedCallback+0x14cc>)
 800e5fe:	460a      	mov	r2, r1
 800e600:	801a      	strh	r2, [r3, #0]
				break;
 800e602:	bf00      	nop
		}


		if(MF.FLAG.DRV){
 800e604:	4b77      	ldr	r3, [pc, #476]	; (800e7e4 <HAL_TIM_PeriodElapsedCallback+0x14bc>)
 800e606:	881b      	ldrh	r3, [r3, #0]
 800e608:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e60c:	b2db      	uxtb	r3, r3
 800e60e:	2b00      	cmp	r3, #0
 800e610:	f000 8196 	beq.w	800e940 <HAL_TIM_PeriodElapsedCallback+0x1618>
			if(W_G_flag == 0){
 800e614:	4b6f      	ldr	r3, [pc, #444]	; (800e7d4 <HAL_TIM_PeriodElapsedCallback+0x14ac>)
 800e616:	781b      	ldrb	r3, [r3, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d130      	bne.n	800e67e <HAL_TIM_PeriodElapsedCallback+0x1356>
				pulse_l = pulse_l + dgl + dwl;
 800e61c:	4b75      	ldr	r3, [pc, #468]	; (800e7f4 <HAL_TIM_PeriodElapsedCallback+0x14cc>)
 800e61e:	881b      	ldrh	r3, [r3, #0]
 800e620:	b21b      	sxth	r3, r3
 800e622:	ee07 3a90 	vmov	s15, r3
 800e626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e62a:	4b74      	ldr	r3, [pc, #464]	; (800e7fc <HAL_TIM_PeriodElapsedCallback+0x14d4>)
 800e62c:	edd3 7a00 	vldr	s15, [r3]
 800e630:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e634:	4b69      	ldr	r3, [pc, #420]	; (800e7dc <HAL_TIM_PeriodElapsedCallback+0x14b4>)
 800e636:	881b      	ldrh	r3, [r3, #0]
 800e638:	b21b      	sxth	r3, r3
 800e63a:	ee07 3a90 	vmov	s15, r3
 800e63e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e642:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e646:	4b6d      	ldr	r3, [pc, #436]	; (800e7fc <HAL_TIM_PeriodElapsedCallback+0x14d4>)
 800e648:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dgr + dwr;
 800e64c:	4b6a      	ldr	r3, [pc, #424]	; (800e7f8 <HAL_TIM_PeriodElapsedCallback+0x14d0>)
 800e64e:	881b      	ldrh	r3, [r3, #0]
 800e650:	b21b      	sxth	r3, r3
 800e652:	ee07 3a90 	vmov	s15, r3
 800e656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e65a:	4b69      	ldr	r3, [pc, #420]	; (800e800 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 800e65c:	edd3 7a00 	vldr	s15, [r3]
 800e660:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e664:	4b5e      	ldr	r3, [pc, #376]	; (800e7e0 <HAL_TIM_PeriodElapsedCallback+0x14b8>)
 800e666:	881b      	ldrh	r3, [r3, #0]
 800e668:	b21b      	sxth	r3, r3
 800e66a:	ee07 3a90 	vmov	s15, r3
 800e66e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e672:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e676:	4b62      	ldr	r3, [pc, #392]	; (800e800 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 800e678:	edc3 7a00 	vstr	s15, [r3]
 800e67c:	e01d      	b.n	800e6ba <HAL_TIM_PeriodElapsedCallback+0x1392>
			}else{
				pulse_l = pulse_l + dwl;
 800e67e:	4b57      	ldr	r3, [pc, #348]	; (800e7dc <HAL_TIM_PeriodElapsedCallback+0x14b4>)
 800e680:	881b      	ldrh	r3, [r3, #0]
 800e682:	b21b      	sxth	r3, r3
 800e684:	ee07 3a90 	vmov	s15, r3
 800e688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e68c:	4b5b      	ldr	r3, [pc, #364]	; (800e7fc <HAL_TIM_PeriodElapsedCallback+0x14d4>)
 800e68e:	edd3 7a00 	vldr	s15, [r3]
 800e692:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e696:	4b59      	ldr	r3, [pc, #356]	; (800e7fc <HAL_TIM_PeriodElapsedCallback+0x14d4>)
 800e698:	edc3 7a00 	vstr	s15, [r3]
				pulse_r = pulse_r + dwr;
 800e69c:	4b50      	ldr	r3, [pc, #320]	; (800e7e0 <HAL_TIM_PeriodElapsedCallback+0x14b8>)
 800e69e:	881b      	ldrh	r3, [r3, #0]
 800e6a0:	b21b      	sxth	r3, r3
 800e6a2:	ee07 3a90 	vmov	s15, r3
 800e6a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e6aa:	4b55      	ldr	r3, [pc, #340]	; (800e800 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 800e6ac:	edd3 7a00 	vldr	s15, [r3]
 800e6b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6b4:	4b52      	ldr	r3, [pc, #328]	; (800e800 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 800e6b6:	edc3 7a00 	vstr	s15, [r3]
			}
			pulse_l = min(max(pulse_l, -1000), 1000);
 800e6ba:	4b50      	ldr	r3, [pc, #320]	; (800e7fc <HAL_TIM_PeriodElapsedCallback+0x14d4>)
 800e6bc:	edd3 7a00 	vldr	s15, [r3]
 800e6c0:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800e804 <HAL_TIM_PeriodElapsedCallback+0x14dc>
 800e6c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6cc:	bfcc      	ite	gt
 800e6ce:	2301      	movgt	r3, #1
 800e6d0:	2300      	movle	r3, #0
 800e6d2:	b2db      	uxtb	r3, r3
 800e6d4:	f083 0301 	eor.w	r3, r3, #1
 800e6d8:	b2db      	uxtb	r3, r3
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d111      	bne.n	800e702 <HAL_TIM_PeriodElapsedCallback+0x13da>
 800e6de:	4b47      	ldr	r3, [pc, #284]	; (800e7fc <HAL_TIM_PeriodElapsedCallback+0x14d4>)
 800e6e0:	edd3 7a00 	vldr	s15, [r3]
 800e6e4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800e808 <HAL_TIM_PeriodElapsedCallback+0x14e0>
 800e6e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6f0:	bfcc      	ite	gt
 800e6f2:	2301      	movgt	r3, #1
 800e6f4:	2300      	movle	r3, #0
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	f083 0301 	eor.w	r3, r3, #1
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d00e      	beq.n	800e720 <HAL_TIM_PeriodElapsedCallback+0x13f8>
 800e702:	4b3e      	ldr	r3, [pc, #248]	; (800e7fc <HAL_TIM_PeriodElapsedCallback+0x14d4>)
 800e704:	edd3 7a00 	vldr	s15, [r3]
 800e708:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800e804 <HAL_TIM_PeriodElapsedCallback+0x14dc>
 800e70c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e714:	dd02      	ble.n	800e71c <HAL_TIM_PeriodElapsedCallback+0x13f4>
 800e716:	4b39      	ldr	r3, [pc, #228]	; (800e7fc <HAL_TIM_PeriodElapsedCallback+0x14d4>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	e002      	b.n	800e722 <HAL_TIM_PeriodElapsedCallback+0x13fa>
 800e71c:	4b3b      	ldr	r3, [pc, #236]	; (800e80c <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 800e71e:	e000      	b.n	800e722 <HAL_TIM_PeriodElapsedCallback+0x13fa>
 800e720:	4b3b      	ldr	r3, [pc, #236]	; (800e810 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 800e722:	4a36      	ldr	r2, [pc, #216]	; (800e7fc <HAL_TIM_PeriodElapsedCallback+0x14d4>)
 800e724:	6013      	str	r3, [r2, #0]
			pulse_r = min(max(pulse_r, -1000), 1000);
 800e726:	4b36      	ldr	r3, [pc, #216]	; (800e800 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 800e728:	edd3 7a00 	vldr	s15, [r3]
 800e72c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800e804 <HAL_TIM_PeriodElapsedCallback+0x14dc>
 800e730:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e738:	bfcc      	ite	gt
 800e73a:	2301      	movgt	r3, #1
 800e73c:	2300      	movle	r3, #0
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	f083 0301 	eor.w	r3, r3, #1
 800e744:	b2db      	uxtb	r3, r3
 800e746:	2b00      	cmp	r3, #0
 800e748:	d111      	bne.n	800e76e <HAL_TIM_PeriodElapsedCallback+0x1446>
 800e74a:	4b2d      	ldr	r3, [pc, #180]	; (800e800 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 800e74c:	edd3 7a00 	vldr	s15, [r3]
 800e750:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800e808 <HAL_TIM_PeriodElapsedCallback+0x14e0>
 800e754:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e75c:	bfcc      	ite	gt
 800e75e:	2301      	movgt	r3, #1
 800e760:	2300      	movle	r3, #0
 800e762:	b2db      	uxtb	r3, r3
 800e764:	f083 0301 	eor.w	r3, r3, #1
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00e      	beq.n	800e78c <HAL_TIM_PeriodElapsedCallback+0x1464>
 800e76e:	4b24      	ldr	r3, [pc, #144]	; (800e800 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 800e770:	edd3 7a00 	vldr	s15, [r3]
 800e774:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800e804 <HAL_TIM_PeriodElapsedCallback+0x14dc>
 800e778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e780:	dd02      	ble.n	800e788 <HAL_TIM_PeriodElapsedCallback+0x1460>
 800e782:	4b1f      	ldr	r3, [pc, #124]	; (800e800 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	e002      	b.n	800e78e <HAL_TIM_PeriodElapsedCallback+0x1466>
 800e788:	4b20      	ldr	r3, [pc, #128]	; (800e80c <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 800e78a:	e000      	b.n	800e78e <HAL_TIM_PeriodElapsedCallback+0x1466>
 800e78c:	4b20      	ldr	r3, [pc, #128]	; (800e810 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 800e78e:	4a1c      	ldr	r2, [pc, #112]	; (800e800 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 800e790:	6013      	str	r3, [r2, #0]

			if(pulse_l > 0){
 800e792:	4b1a      	ldr	r3, [pc, #104]	; (800e7fc <HAL_TIM_PeriodElapsedCallback+0x14d4>)
 800e794:	edd3 7a00 	vldr	s15, [r3]
 800e798:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7a0:	dd3a      	ble.n	800e818 <HAL_TIM_PeriodElapsedCallback+0x14f0>
				drive_dir(0, 0);
 800e7a2:	2100      	movs	r1, #0
 800e7a4:	2000      	movs	r0, #0
 800e7a6:	f7f6 fb0d 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = pulse_l;
 800e7aa:	4b14      	ldr	r3, [pc, #80]	; (800e7fc <HAL_TIM_PeriodElapsedCallback+0x14d4>)
 800e7ac:	edd3 7a00 	vldr	s15, [r3]
 800e7b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e7b4:	ee17 3a90 	vmov	r3, s15
 800e7b8:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800e7ba:	f107 0308 	add.w	r3, r7, #8
 800e7be:	2200      	movs	r2, #0
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	4814      	ldr	r0, [pc, #80]	; (800e814 <HAL_TIM_PeriodElapsedCallback+0x14ec>)
 800e7c4:	f7f5 fa02 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800e7c8:	2100      	movs	r1, #0
 800e7ca:	4812      	ldr	r0, [pc, #72]	; (800e814 <HAL_TIM_PeriodElapsedCallback+0x14ec>)
 800e7cc:	f7f4 ff96 	bl	80036fc <HAL_TIM_PWM_Start>
 800e7d0:	e043      	b.n	800e85a <HAL_TIM_PeriodElapsedCallback+0x1532>
 800e7d2:	bf00      	nop
 800e7d4:	20000c3c 	.word	0x20000c3c
 800e7d8:	fffffc18 	.word	0xfffffc18
 800e7dc:	20000b38 	.word	0x20000b38
 800e7e0:	20000fb8 	.word	0x20000fb8
 800e7e4:	20000fac 	.word	0x20000fac
 800e7e8:	20000b9c 	.word	0x20000b9c
 800e7ec:	20000c40 	.word	0x20000c40
 800e7f0:	20000c58 	.word	0x20000c58
 800e7f4:	200001d4 	.word	0x200001d4
 800e7f8:	20000b8e 	.word	0x20000b8e
 800e7fc:	20000be8 	.word	0x20000be8
 800e800:	200007b8 	.word	0x200007b8
 800e804:	c47a0000 	.word	0xc47a0000
 800e808:	447a0000 	.word	0x447a0000
 800e80c:	c47a0000 	.word	0xc47a0000
 800e810:	447a0000 	.word	0x447a0000
 800e814:	20000c5c 	.word	0x20000c5c
			}
			else if(pulse_l < 0){
 800e818:	4b89      	ldr	r3, [pc, #548]	; (800ea40 <HAL_TIM_PeriodElapsedCallback+0x1718>)
 800e81a:	edd3 7a00 	vldr	s15, [r3]
 800e81e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e826:	d518      	bpl.n	800e85a <HAL_TIM_PeriodElapsedCallback+0x1532>
				drive_dir(0, 1);
 800e828:	2101      	movs	r1, #1
 800e82a:	2000      	movs	r0, #0
 800e82c:	f7f6 faca 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = -pulse_l;
 800e830:	4b83      	ldr	r3, [pc, #524]	; (800ea40 <HAL_TIM_PeriodElapsedCallback+0x1718>)
 800e832:	edd3 7a00 	vldr	s15, [r3]
 800e836:	eef1 7a67 	vneg.f32	s15, s15
 800e83a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e83e:	ee17 3a90 	vmov	r3, s15
 800e842:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_1);
 800e844:	f107 0308 	add.w	r3, r7, #8
 800e848:	2200      	movs	r2, #0
 800e84a:	4619      	mov	r1, r3
 800e84c:	487d      	ldr	r0, [pc, #500]	; (800ea44 <HAL_TIM_PeriodElapsedCallback+0x171c>)
 800e84e:	f7f5 f9bd 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800e852:	2100      	movs	r1, #0
 800e854:	487b      	ldr	r0, [pc, #492]	; (800ea44 <HAL_TIM_PeriodElapsedCallback+0x171c>)
 800e856:	f7f4 ff51 	bl	80036fc <HAL_TIM_PWM_Start>
			}

			if(pulse_r > 0){
 800e85a:	4b7b      	ldr	r3, [pc, #492]	; (800ea48 <HAL_TIM_PeriodElapsedCallback+0x1720>)
 800e85c:	edd3 7a00 	vldr	s15, [r3]
 800e860:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e868:	dd17      	ble.n	800e89a <HAL_TIM_PeriodElapsedCallback+0x1572>
				drive_dir(1, 0);
 800e86a:	2100      	movs	r1, #0
 800e86c:	2001      	movs	r0, #1
 800e86e:	f7f6 faa9 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = pulse_r;
 800e872:	4b75      	ldr	r3, [pc, #468]	; (800ea48 <HAL_TIM_PeriodElapsedCallback+0x1720>)
 800e874:	edd3 7a00 	vldr	s15, [r3]
 800e878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e87c:	ee17 3a90 	vmov	r3, s15
 800e880:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800e882:	f107 0308 	add.w	r3, r7, #8
 800e886:	220c      	movs	r2, #12
 800e888:	4619      	mov	r1, r3
 800e88a:	486e      	ldr	r0, [pc, #440]	; (800ea44 <HAL_TIM_PeriodElapsedCallback+0x171c>)
 800e88c:	f7f5 f99e 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800e890:	210c      	movs	r1, #12
 800e892:	486c      	ldr	r0, [pc, #432]	; (800ea44 <HAL_TIM_PeriodElapsedCallback+0x171c>)
 800e894:	f7f4 ff32 	bl	80036fc <HAL_TIM_PWM_Start>
 800e898:	e020      	b.n	800e8dc <HAL_TIM_PeriodElapsedCallback+0x15b4>
			}
			else if(pulse_r < 0){
 800e89a:	4b6b      	ldr	r3, [pc, #428]	; (800ea48 <HAL_TIM_PeriodElapsedCallback+0x1720>)
 800e89c:	edd3 7a00 	vldr	s15, [r3]
 800e8a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e8a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8a8:	d518      	bpl.n	800e8dc <HAL_TIM_PeriodElapsedCallback+0x15b4>
				drive_dir(1, 1);
 800e8aa:	2101      	movs	r1, #1
 800e8ac:	2001      	movs	r0, #1
 800e8ae:	f7f6 fa89 	bl	8004dc4 <drive_dir>
				ConfigOC.Pulse = -pulse_r;
 800e8b2:	4b65      	ldr	r3, [pc, #404]	; (800ea48 <HAL_TIM_PeriodElapsedCallback+0x1720>)
 800e8b4:	edd3 7a00 	vldr	s15, [r3]
 800e8b8:	eef1 7a67 	vneg.f32	s15, s15
 800e8bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e8c0:	ee17 3a90 	vmov	r3, s15
 800e8c4:	60fb      	str	r3, [r7, #12]
				HAL_TIM_PWM_ConfigChannel(&htim2, &ConfigOC, TIM_CHANNEL_4);
 800e8c6:	f107 0308 	add.w	r3, r7, #8
 800e8ca:	220c      	movs	r2, #12
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	485d      	ldr	r0, [pc, #372]	; (800ea44 <HAL_TIM_PeriodElapsedCallback+0x171c>)
 800e8d0:	f7f5 f97c 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
				HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800e8d4:	210c      	movs	r1, #12
 800e8d6:	485b      	ldr	r0, [pc, #364]	; (800ea44 <HAL_TIM_PeriodElapsedCallback+0x171c>)
 800e8d8:	f7f4 ff10 	bl	80036fc <HAL_TIM_PWM_Start>
			}
			//wall check
			//----look forward----
			if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 800e8dc:	4b5b      	ldr	r3, [pc, #364]	; (800ea4c <HAL_TIM_PeriodElapsedCallback+0x1724>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2b5a      	cmp	r3, #90	; 0x5a
 800e8e2:	d803      	bhi.n	800e8ec <HAL_TIM_PeriodElapsedCallback+0x15c4>
 800e8e4:	4b5a      	ldr	r3, [pc, #360]	; (800ea50 <HAL_TIM_PeriodElapsedCallback+0x1728>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	2bc8      	cmp	r3, #200	; 0xc8
 800e8ea:	d905      	bls.n	800e8f8 <HAL_TIM_PeriodElapsedCallback+0x15d0>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	2140      	movs	r1, #64	; 0x40
 800e8f0:	4858      	ldr	r0, [pc, #352]	; (800ea54 <HAL_TIM_PeriodElapsedCallback+0x172c>)
 800e8f2:	f7f3 fd07 	bl	8002304 <HAL_GPIO_WritePin>
 800e8f6:	e004      	b.n	800e902 <HAL_TIM_PeriodElapsedCallback+0x15da>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	2140      	movs	r1, #64	; 0x40
 800e8fc:	4855      	ldr	r0, [pc, #340]	; (800ea54 <HAL_TIM_PeriodElapsedCallback+0x172c>)
 800e8fe:	f7f3 fd01 	bl	8002304 <HAL_GPIO_WritePin>
			}
			//----look forwardL----
			if(ad_fl > WALL_BASE_FL){
 800e902:	4b53      	ldr	r3, [pc, #332]	; (800ea50 <HAL_TIM_PeriodElapsedCallback+0x1728>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	2bc8      	cmp	r3, #200	; 0xc8
 800e908:	d905      	bls.n	800e916 <HAL_TIM_PeriodElapsedCallback+0x15ee>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800e90a:	2201      	movs	r2, #1
 800e90c:	2110      	movs	r1, #16
 800e90e:	4851      	ldr	r0, [pc, #324]	; (800ea54 <HAL_TIM_PeriodElapsedCallback+0x172c>)
 800e910:	f7f3 fcf8 	bl	8002304 <HAL_GPIO_WritePin>
 800e914:	e004      	b.n	800e920 <HAL_TIM_PeriodElapsedCallback+0x15f8>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800e916:	2200      	movs	r2, #0
 800e918:	2110      	movs	r1, #16
 800e91a:	484e      	ldr	r0, [pc, #312]	; (800ea54 <HAL_TIM_PeriodElapsedCallback+0x172c>)
 800e91c:	f7f3 fcf2 	bl	8002304 <HAL_GPIO_WritePin>
			}
			//----look forward-R---
			if(ad_fr > WALL_BASE_FR){
 800e920:	4b4a      	ldr	r3, [pc, #296]	; (800ea4c <HAL_TIM_PeriodElapsedCallback+0x1724>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	2b5a      	cmp	r3, #90	; 0x5a
 800e926:	d905      	bls.n	800e934 <HAL_TIM_PeriodElapsedCallback+0x160c>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800e928:	2201      	movs	r2, #1
 800e92a:	2180      	movs	r1, #128	; 0x80
 800e92c:	4849      	ldr	r0, [pc, #292]	; (800ea54 <HAL_TIM_PeriodElapsedCallback+0x172c>)
 800e92e:	f7f3 fce9 	bl	8002304 <HAL_GPIO_WritePin>
 800e932:	e00d      	b.n	800e950 <HAL_TIM_PeriodElapsedCallback+0x1628>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800e934:	2200      	movs	r2, #0
 800e936:	2180      	movs	r1, #128	; 0x80
 800e938:	4846      	ldr	r0, [pc, #280]	; (800ea54 <HAL_TIM_PeriodElapsedCallback+0x172c>)
 800e93a:	f7f3 fce3 	bl	8002304 <HAL_GPIO_WritePin>
 800e93e:	e007      	b.n	800e950 <HAL_TIM_PeriodElapsedCallback+0x1628>
			}
		}else{
			drive_dir(0, 2);
 800e940:	2102      	movs	r1, #2
 800e942:	2000      	movs	r0, #0
 800e944:	f7f6 fa3e 	bl	8004dc4 <drive_dir>
			drive_dir(1, 2);
 800e948:	2102      	movs	r1, #2
 800e94a:	2001      	movs	r0, #1
 800e94c:	f7f6 fa3a 	bl	8004dc4 <drive_dir>
		}


		//wall check
		//----look right----
		if(ad_r > WALL_BASE_R){
 800e950:	4b41      	ldr	r3, [pc, #260]	; (800ea58 <HAL_TIM_PeriodElapsedCallback+0x1730>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	2b82      	cmp	r3, #130	; 0x82
 800e956:	d906      	bls.n	800e966 <HAL_TIM_PeriodElapsedCallback+0x163e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800e958:	2201      	movs	r2, #1
 800e95a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e95e:	483f      	ldr	r0, [pc, #252]	; (800ea5c <HAL_TIM_PeriodElapsedCallback+0x1734>)
 800e960:	f7f3 fcd0 	bl	8002304 <HAL_GPIO_WritePin>
 800e964:	e005      	b.n	800e972 <HAL_TIM_PeriodElapsedCallback+0x164a>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800e966:	2200      	movs	r2, #0
 800e968:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e96c:	483b      	ldr	r0, [pc, #236]	; (800ea5c <HAL_TIM_PeriodElapsedCallback+0x1734>)
 800e96e:	f7f3 fcc9 	bl	8002304 <HAL_GPIO_WritePin>
		}
		//----look left----
		if(ad_l > WALL_BASE_L){
 800e972:	4b3b      	ldr	r3, [pc, #236]	; (800ea60 <HAL_TIM_PeriodElapsedCallback+0x1738>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	2b5a      	cmp	r3, #90	; 0x5a
 800e978:	d905      	bls.n	800e986 <HAL_TIM_PeriodElapsedCallback+0x165e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800e97a:	2201      	movs	r2, #1
 800e97c:	2104      	movs	r1, #4
 800e97e:	4839      	ldr	r0, [pc, #228]	; (800ea64 <HAL_TIM_PeriodElapsedCallback+0x173c>)
 800e980:	f7f3 fcc0 	bl	8002304 <HAL_GPIO_WritePin>
 800e984:	e004      	b.n	800e990 <HAL_TIM_PeriodElapsedCallback+0x1668>
		}else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800e986:	2200      	movs	r2, #0
 800e988:	2104      	movs	r1, #4
 800e98a:	4836      	ldr	r0, [pc, #216]	; (800ea64 <HAL_TIM_PeriodElapsedCallback+0x173c>)
 800e98c:	f7f3 fcba 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//battery check
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {	//2.1V以下で赤ランプ点灯=>LiPoが約7Vを下回るとランプ点灯
 800e990:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e994:	4831      	ldr	r0, [pc, #196]	; (800ea5c <HAL_TIM_PeriodElapsedCallback+0x1734>)
 800e996:	f7f3 fc9d 	bl	80022d4 <HAL_GPIO_ReadPin>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d105      	bne.n	800e9ac <HAL_TIM_PeriodElapsedCallback+0x1684>
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800e9a0:	2201      	movs	r2, #1
 800e9a2:	2108      	movs	r1, #8
 800e9a4:	482f      	ldr	r0, [pc, #188]	; (800ea64 <HAL_TIM_PeriodElapsedCallback+0x173c>)
 800e9a6:	f7f3 fcad 	bl	8002304 <HAL_GPIO_WritePin>
 800e9aa:	e004      	b.n	800e9b6 <HAL_TIM_PeriodElapsedCallback+0x168e>
		} else {
		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	2108      	movs	r1, #8
 800e9b0:	482c      	ldr	r0, [pc, #176]	; (800ea64 <HAL_TIM_PeriodElapsedCallback+0x173c>)
 800e9b2:	f7f3 fca7 	bl	8002304 <HAL_GPIO_WritePin>
		}


		//fail safe
		if(degree_z >= target_degree_z+360 || degree_z <= target_degree_z-360 || dist_r > 360*2 || dist_l > 360*2){	//360度以上回転発生でFail Safe
 800e9b6:	4b2c      	ldr	r3, [pc, #176]	; (800ea68 <HAL_TIM_PeriodElapsedCallback+0x1740>)
 800e9b8:	edd3 7a00 	vldr	s15, [r3]
 800e9bc:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800ea6c <HAL_TIM_PeriodElapsedCallback+0x1744>
 800e9c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e9c4:	4b2a      	ldr	r3, [pc, #168]	; (800ea70 <HAL_TIM_PeriodElapsedCallback+0x1748>)
 800e9c6:	edd3 7a00 	vldr	s15, [r3]
 800e9ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9d2:	d923      	bls.n	800ea1c <HAL_TIM_PeriodElapsedCallback+0x16f4>
 800e9d4:	4b24      	ldr	r3, [pc, #144]	; (800ea68 <HAL_TIM_PeriodElapsedCallback+0x1740>)
 800e9d6:	edd3 7a00 	vldr	s15, [r3]
 800e9da:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800ea6c <HAL_TIM_PeriodElapsedCallback+0x1744>
 800e9de:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e9e2:	4b23      	ldr	r3, [pc, #140]	; (800ea70 <HAL_TIM_PeriodElapsedCallback+0x1748>)
 800e9e4:	edd3 7a00 	vldr	s15, [r3]
 800e9e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e9ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9f0:	da14      	bge.n	800ea1c <HAL_TIM_PeriodElapsedCallback+0x16f4>
 800e9f2:	4b20      	ldr	r3, [pc, #128]	; (800ea74 <HAL_TIM_PeriodElapsedCallback+0x174c>)
 800e9f4:	edd3 7a00 	vldr	s15, [r3]
 800e9f8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800ea78 <HAL_TIM_PeriodElapsedCallback+0x1750>
 800e9fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ea00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea04:	dc0a      	bgt.n	800ea1c <HAL_TIM_PeriodElapsedCallback+0x16f4>
 800ea06:	4b1d      	ldr	r3, [pc, #116]	; (800ea7c <HAL_TIM_PeriodElapsedCallback+0x1754>)
 800ea08:	edd3 7a00 	vldr	s15, [r3]
 800ea0c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800ea78 <HAL_TIM_PeriodElapsedCallback+0x1750>
 800ea10:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ea14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea18:	dc00      	bgt.n	800ea1c <HAL_TIM_PeriodElapsedCallback+0x16f4>
			   drive_dir(1, 2);
			   full_led_write(RED);
		   }
		}
	}
}
 800ea1a:	e00b      	b.n	800ea34 <HAL_TIM_PeriodElapsedCallback+0x170c>
			   drive_dir(0, 2);
 800ea1c:	2102      	movs	r1, #2
 800ea1e:	2000      	movs	r0, #0
 800ea20:	f7f6 f9d0 	bl	8004dc4 <drive_dir>
			   drive_dir(1, 2);
 800ea24:	2102      	movs	r1, #2
 800ea26:	2001      	movs	r0, #1
 800ea28:	f7f6 f9cc 	bl	8004dc4 <drive_dir>
			   full_led_write(RED);
 800ea2c:	2001      	movs	r0, #1
 800ea2e:	f004 f8eb 	bl	8012c08 <full_led_write>
			   drive_dir(0, 2);
 800ea32:	e7f3      	b.n	800ea1c <HAL_TIM_PeriodElapsedCallback+0x16f4>
}
 800ea34:	bf00      	nop
 800ea36:	3730      	adds	r7, #48	; 0x30
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	ecbd 8b02 	vpop	{d8}
 800ea3e:	bdb0      	pop	{r4, r5, r7, pc}
 800ea40:	20000be8 	.word	0x20000be8
 800ea44:	20000c5c 	.word	0x20000c5c
 800ea48:	200007b8 	.word	0x200007b8
 800ea4c:	20000c48 	.word	0x20000c48
 800ea50:	20000d9c 	.word	0x20000d9c
 800ea54:	40020000 	.word	0x40020000
 800ea58:	20000fa8 	.word	0x20000fa8
 800ea5c:	40020400 	.word	0x40020400
 800ea60:	20000b3c 	.word	0x20000b3c
 800ea64:	40020800 	.word	0x40020800
 800ea68:	20000c40 	.word	0x20000c40
 800ea6c:	43b40000 	.word	0x43b40000
 800ea70:	20000b9c 	.word	0x20000b9c
 800ea74:	20000b2c 	.word	0x20000b2c
 800ea78:	44340000 	.word	0x44340000
 800ea7c:	200012e8 	.word	0x200012e8

0800ea80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ea86:	f7f2 fa57 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ea8a:	f000 f917 	bl	800ecbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ea8e:	f000 fc09 	bl	800f2a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800ea92:	f000 f97d 	bl	800ed90 <MX_ADC1_Init>
  MX_TIM2_Init();
 800ea96:	f000 fa03 	bl	800eea0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800ea9a:	f000 fa81 	bl	800efa0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800ea9e:	f000 faf5 	bl	800f08c <MX_TIM4_Init>
  MX_TIM6_Init();
 800eaa2:	f000 fb47 	bl	800f134 <MX_TIM6_Init>
  MX_TIM8_Init();
 800eaa6:	f000 fb7b 	bl	800f1a0 <MX_TIM8_Init>
  MX_SPI3_Init();
 800eaaa:	f000 f9c3 	bl	800ee34 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800eaae:	f000 fbcf 	bl	800f250 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  drive_init();
 800eab2:	f7f6 f8d3 	bl	8004c5c <drive_init>
  gyro_init();
 800eab6:	f7fe fa59 	bl	800cf6c <gyro_init>
  search_init();
 800eaba:	f000 fd21 	bl	800f500 <search_init>
  sensor_init();
 800eabe:	f003 ffe3 	bl	8012a88 <sensor_init>

  printf("*** Welcome to WMMC ! ***\n");
 800eac2:	4870      	ldr	r0, [pc, #448]	; (800ec84 <main+0x204>)
 800eac4:	f004 fea8 	bl	8013818 <puts>

  setbuf(stdout, NULL);
 800eac8:	4b6f      	ldr	r3, [pc, #444]	; (800ec88 <main+0x208>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	689b      	ldr	r3, [r3, #8]
 800eace:	2100      	movs	r1, #0
 800ead0:	4618      	mov	r0, r3
 800ead2:	f004 fea9 	bl	8013828 <setbuf>
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 800ead6:	213c      	movs	r1, #60	; 0x3c
 800ead8:	486c      	ldr	r0, [pc, #432]	; (800ec8c <main+0x20c>)
 800eada:	f7f4 ff37 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800eade:	213c      	movs	r1, #60	; 0x3c
 800eae0:	486b      	ldr	r0, [pc, #428]	; (800ec90 <main+0x210>)
 800eae2:	f7f4 ff33 	bl	800394c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800eae6:	486b      	ldr	r0, [pc, #428]	; (800ec94 <main+0x214>)
 800eae8:	f7f4 fdaf 	bl	800364a <HAL_TIM_Base_Start_IT>

  int mode = 0;
 800eaec:	2300      	movs	r3, #0
 800eaee:	607b      	str	r3, [r7, #4]
  printf("Mode : %d\n", mode);
 800eaf0:	6879      	ldr	r1, [r7, #4]
 800eaf2:	4869      	ldr	r0, [pc, #420]	; (800ec98 <main+0x218>)
 800eaf4:	f004 fe1c 	bl	8013730 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	b2db      	uxtb	r3, r3
 800eafc:	f003 0301 	and.w	r3, r3, #1
 800eb00:	b2d8      	uxtb	r0, r3
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	f003 0302 	and.w	r3, r3, #2
 800eb0a:	b2d9      	uxtb	r1, r3
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	f003 0304 	and.w	r3, r3, #4
 800eb14:	b2db      	uxtb	r3, r3
 800eb16:	461a      	mov	r2, r3
 800eb18:	f004 f83c 	bl	8012b94 <led_write>
	  if(dist_r >= 20){
 800eb1c:	4b5f      	ldr	r3, [pc, #380]	; (800ec9c <main+0x21c>)
 800eb1e:	edd3 7a00 	vldr	s15, [r3]
 800eb22:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800eb26:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb2e:	db0f      	blt.n	800eb50 <main+0xd0>
		  mode++;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	3301      	adds	r3, #1
 800eb34:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800eb36:	4b59      	ldr	r3, [pc, #356]	; (800ec9c <main+0x21c>)
 800eb38:	f04f 0200 	mov.w	r2, #0
 800eb3c:	601a      	str	r2, [r3, #0]
		  if(mode > 7){
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2b07      	cmp	r3, #7
 800eb42:	dd01      	ble.n	800eb48 <main+0xc8>
			  mode = 0;
 800eb44:	2300      	movs	r3, #0
 800eb46:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800eb48:	6879      	ldr	r1, [r7, #4]
 800eb4a:	4853      	ldr	r0, [pc, #332]	; (800ec98 <main+0x218>)
 800eb4c:	f004 fdf0 	bl	8013730 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(dist_r <= -20){
 800eb50:	4b52      	ldr	r3, [pc, #328]	; (800ec9c <main+0x21c>)
 800eb52:	edd3 7a00 	vldr	s15, [r3]
 800eb56:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800eb5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb62:	d80f      	bhi.n	800eb84 <main+0x104>
		  mode--;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	3b01      	subs	r3, #1
 800eb68:	607b      	str	r3, [r7, #4]
		  dist_r = 0;
 800eb6a:	4b4c      	ldr	r3, [pc, #304]	; (800ec9c <main+0x21c>)
 800eb6c:	f04f 0200 	mov.w	r2, #0
 800eb70:	601a      	str	r2, [r3, #0]
		  if(mode < 0){
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	da01      	bge.n	800eb7c <main+0xfc>
			  mode = 7;
 800eb78:	2307      	movs	r3, #7
 800eb7a:	607b      	str	r3, [r7, #4]
		  }
		  printf("Mode : %d\n", mode);
 800eb7c:	6879      	ldr	r1, [r7, #4]
 800eb7e:	4846      	ldr	r0, [pc, #280]	; (800ec98 <main+0x218>)
 800eb80:	f004 fdd6 	bl	8013730 <iprintf>
		  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
		  //buzzer(pitagola[2][0], pitagola[2][1]);
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 800eb84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800eb88:	4845      	ldr	r0, [pc, #276]	; (800eca0 <main+0x220>)
 800eb8a:	f7f3 fba3 	bl	80022d4 <HAL_GPIO_ReadPin>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d1b1      	bne.n	800eaf8 <main+0x78>
		  HAL_Delay(50);
 800eb94:	2032      	movs	r0, #50	; 0x32
 800eb96:	f7f2 fa41 	bl	800101c <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 800eb9a:	bf00      	nop
 800eb9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800eba0:	483f      	ldr	r0, [pc, #252]	; (800eca0 <main+0x220>)
 800eba2:	f7f3 fb97 	bl	80022d4 <HAL_GPIO_ReadPin>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d0f7      	beq.n	800eb9c <main+0x11c>
		  switch(mode){
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2b07      	cmp	r3, #7
 800ebb0:	d8a2      	bhi.n	800eaf8 <main+0x78>
 800ebb2:	a201      	add	r2, pc, #4	; (adr r2, 800ebb8 <main+0x138>)
 800ebb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebb8:	0800ebd9 	.word	0x0800ebd9
 800ebbc:	0800ebe3 	.word	0x0800ebe3
 800ebc0:	0800ebef 	.word	0x0800ebef
 800ebc4:	0800ebfb 	.word	0x0800ebfb
 800ebc8:	0800ec07 	.word	0x0800ec07
 800ebcc:	0800ec0d 	.word	0x0800ec0d
 800ebd0:	0800ec39 	.word	0x0800ec39
 800ebd4:	0800ec7b 	.word	0x0800ec7b

		  	  case 0:
		  		  HAL_Delay(5000);
 800ebd8:	f241 3088 	movw	r0, #5000	; 0x1388
 800ebdc:	f7f2 fa1e 	bl	800101c <HAL_Delay>
		  		  break;
 800ebe0:	e04e      	b.n	800ec80 <main+0x200>

		  	  case 1:
		  		  //----a超新地走行----
		  		  printf("Simple Run.\n");
 800ebe2:	4830      	ldr	r0, [pc, #192]	; (800eca4 <main+0x224>)
 800ebe4:	f004 fe18 	bl	8013818 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  simple_run();
 800ebe8:	f7fc feb4 	bl	800b954 <simple_run>
		  		  break;
 800ebec:	e048      	b.n	800ec80 <main+0x200>

		  	  case 2:
		  		  //----aスラローム走行----
		  		  printf("slalom Run.\n");
 800ebee:	482e      	ldr	r0, [pc, #184]	; (800eca8 <main+0x228>)
 800ebf0:	f004 fe12 	bl	8013818 <puts>
		  		  //MF.FLAG.WEDGE = 1;
		  		  slalom_run();
 800ebf4:	f7fc ffb2 	bl	800bb5c <slalom_run>
		  		  break;
 800ebf8:	e042      	b.n	800ec80 <main+0x200>

		  	  case 3:
		  		  //----aスラローム走行&pass圧縮----
				  printf("First Run. (Slalom)\n");
 800ebfa:	482c      	ldr	r0, [pc, #176]	; (800ecac <main+0x22c>)
 800ebfc:	f004 fe0c 	bl	8013818 <puts>
		  		  pass_test();
 800ec00:	f7fc fcdc 	bl	800b5bc <pass_test>
		  		  break;
 800ec04:	e03c      	b.n	800ec80 <main+0x200>

		  	  case 4:
		  		  //----aテストモード選択----
		  		  test_select();
 800ec06:	f7fb fde3 	bl	800a7d0 <test_select>
		  		  break;
 800ec0a:	e039      	b.n	800ec80 <main+0x200>

		  	  case 5:
		  		  //----sensor check----
		  		  printf("Sensor Check.\n");
 800ec0c:	4828      	ldr	r0, [pc, #160]	; (800ecb0 <main+0x230>)
 800ec0e:	f004 fe03 	bl	8013818 <puts>
		  		  sensor_test();
 800ec12:	f004 f8b5 	bl	8012d80 <sensor_test>
		  		  break;
 800ec16:	e033      	b.n	800ec80 <main+0x200>

		  	  case 6:
		  		  //----pitagola sound----
				  while(ad_fl <= WALL_BASE_FL){
					  led_write(1, 1, 1);
 800ec18:	2201      	movs	r2, #1
 800ec1a:	2101      	movs	r1, #1
 800ec1c:	2001      	movs	r0, #1
 800ec1e:	f003 ffb9 	bl	8012b94 <led_write>
					  HAL_Delay(200);
 800ec22:	20c8      	movs	r0, #200	; 0xc8
 800ec24:	f7f2 f9fa 	bl	800101c <HAL_Delay>
					  led_write(0, 0, 0);
 800ec28:	2200      	movs	r2, #0
 800ec2a:	2100      	movs	r1, #0
 800ec2c:	2000      	movs	r0, #0
 800ec2e:	f003 ffb1 	bl	8012b94 <led_write>
					  HAL_Delay(200);
 800ec32:	20c8      	movs	r0, #200	; 0xc8
 800ec34:	f7f2 f9f2 	bl	800101c <HAL_Delay>
				  while(ad_fl <= WALL_BASE_FL){
 800ec38:	4b1e      	ldr	r3, [pc, #120]	; (800ecb4 <main+0x234>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	2bc8      	cmp	r3, #200	; 0xc8
 800ec3e:	d9eb      	bls.n	800ec18 <main+0x198>
				  }
				  HAL_Delay(200);
 800ec40:	20c8      	movs	r0, #200	; 0xc8
 800ec42:	f7f2 f9eb 	bl	800101c <HAL_Delay>
		  		  }
				  HAL_Delay(2000);
				  for(int i=0; i<m_ok; i++){
		  			  buzzer(mario_ok[i][0], mario_ok[i][1]);
		  		  }
*/				  HAL_Delay(2000);
 800ec46:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ec4a:	f7f2 f9e7 	bl	800101c <HAL_Delay>
				  for(int i=0; i<m_goal; i++){
 800ec4e:	2300      	movs	r3, #0
 800ec50:	603b      	str	r3, [r7, #0]
 800ec52:	e00e      	b.n	800ec72 <main+0x1f2>
		  			  buzzer(mario_goal[i][0], mario_goal[i][1]);
 800ec54:	4a18      	ldr	r2, [pc, #96]	; (800ecb8 <main+0x238>)
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ec5c:	4a16      	ldr	r2, [pc, #88]	; (800ecb8 <main+0x238>)
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	00db      	lsls	r3, r3, #3
 800ec62:	4413      	add	r3, r2
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	4619      	mov	r1, r3
 800ec68:	f000 fbda 	bl	800f420 <buzzer>
				  for(int i=0; i<m_goal; i++){
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	603b      	str	r3, [r7, #0]
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	2b0e      	cmp	r3, #14
 800ec76:	dded      	ble.n	800ec54 <main+0x1d4>
		  		  }
		  		  break;
 800ec78:	e002      	b.n	800ec80 <main+0x200>
		  		  //MF.FLAG.WEDGE = 1;
/*		  		  for(int i=0; i<m_select; i++){
		  			  buzzer(mario_select[i][0], mario_select[i][1]);
		  		  }
*///		  		  perfect_run();
		  		  perfect_slalom();
 800ec7a:	f7fd fb05 	bl	800c288 <perfect_slalom>
		  		  break;
 800ec7e:	bf00      	nop
	  led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 800ec80:	e73a      	b.n	800eaf8 <main+0x78>
 800ec82:	bf00      	nop
 800ec84:	08014e10 	.word	0x08014e10
 800ec88:	200000bc 	.word	0x200000bc
 800ec8c:	20000344 	.word	0x20000344
 800ec90:	20000304 	.word	0x20000304
 800ec94:	20000bf8 	.word	0x20000bf8
 800ec98:	08014e2c 	.word	0x08014e2c
 800ec9c:	20000b2c 	.word	0x20000b2c
 800eca0:	40020000 	.word	0x40020000
 800eca4:	08014e38 	.word	0x08014e38
 800eca8:	08014e44 	.word	0x08014e44
 800ecac:	08014e50 	.word	0x08014e50
 800ecb0:	08014e64 	.word	0x08014e64
 800ecb4:	20000d9c 	.word	0x20000d9c
 800ecb8:	20000040 	.word	0x20000040

0800ecbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b094      	sub	sp, #80	; 0x50
 800ecc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ecc2:	f107 0320 	add.w	r3, r7, #32
 800ecc6:	2230      	movs	r2, #48	; 0x30
 800ecc8:	2100      	movs	r1, #0
 800ecca:	4618      	mov	r0, r3
 800eccc:	f004 fd28 	bl	8013720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ecd0:	f107 030c 	add.w	r3, r7, #12
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	601a      	str	r2, [r3, #0]
 800ecd8:	605a      	str	r2, [r3, #4]
 800ecda:	609a      	str	r2, [r3, #8]
 800ecdc:	60da      	str	r2, [r3, #12]
 800ecde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ece0:	2300      	movs	r3, #0
 800ece2:	60bb      	str	r3, [r7, #8]
 800ece4:	4b28      	ldr	r3, [pc, #160]	; (800ed88 <SystemClock_Config+0xcc>)
 800ece6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ece8:	4a27      	ldr	r2, [pc, #156]	; (800ed88 <SystemClock_Config+0xcc>)
 800ecea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ecee:	6413      	str	r3, [r2, #64]	; 0x40
 800ecf0:	4b25      	ldr	r3, [pc, #148]	; (800ed88 <SystemClock_Config+0xcc>)
 800ecf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ecf8:	60bb      	str	r3, [r7, #8]
 800ecfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	607b      	str	r3, [r7, #4]
 800ed00:	4b22      	ldr	r3, [pc, #136]	; (800ed8c <SystemClock_Config+0xd0>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	4a21      	ldr	r2, [pc, #132]	; (800ed8c <SystemClock_Config+0xd0>)
 800ed06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ed0a:	6013      	str	r3, [r2, #0]
 800ed0c:	4b1f      	ldr	r3, [pc, #124]	; (800ed8c <SystemClock_Config+0xd0>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed14:	607b      	str	r3, [r7, #4]
 800ed16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800ed18:	2302      	movs	r3, #2
 800ed1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800ed20:	2310      	movs	r3, #16
 800ed22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ed24:	2302      	movs	r3, #2
 800ed26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800ed2c:	2308      	movs	r3, #8
 800ed2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800ed30:	23a8      	movs	r3, #168	; 0xa8
 800ed32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ed34:	2302      	movs	r3, #2
 800ed36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800ed38:	2304      	movs	r3, #4
 800ed3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ed3c:	f107 0320 	add.w	r3, r7, #32
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7f3 faf9 	bl	8002338 <HAL_RCC_OscConfig>
 800ed46:	4603      	mov	r3, r0
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d001      	beq.n	800ed50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800ed4c:	f000 fbd1 	bl	800f4f2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ed50:	230f      	movs	r3, #15
 800ed52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ed54:	2302      	movs	r3, #2
 800ed56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800ed5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ed60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800ed62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800ed68:	f107 030c 	add.w	r3, r7, #12
 800ed6c:	2105      	movs	r1, #5
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7f3 fd24 	bl	80027bc <HAL_RCC_ClockConfig>
 800ed74:	4603      	mov	r3, r0
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d001      	beq.n	800ed7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800ed7a:	f000 fbba 	bl	800f4f2 <Error_Handler>
  }
}
 800ed7e:	bf00      	nop
 800ed80:	3750      	adds	r7, #80	; 0x50
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop
 800ed88:	40023800 	.word	0x40023800
 800ed8c:	40007000 	.word	0x40007000

0800ed90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ed96:	463b      	mov	r3, r7
 800ed98:	2200      	movs	r2, #0
 800ed9a:	601a      	str	r2, [r3, #0]
 800ed9c:	605a      	str	r2, [r3, #4]
 800ed9e:	609a      	str	r2, [r3, #8]
 800eda0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800eda2:	4b21      	ldr	r3, [pc, #132]	; (800ee28 <MX_ADC1_Init+0x98>)
 800eda4:	4a21      	ldr	r2, [pc, #132]	; (800ee2c <MX_ADC1_Init+0x9c>)
 800eda6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800eda8:	4b1f      	ldr	r3, [pc, #124]	; (800ee28 <MX_ADC1_Init+0x98>)
 800edaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800edae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800edb0:	4b1d      	ldr	r3, [pc, #116]	; (800ee28 <MX_ADC1_Init+0x98>)
 800edb2:	2200      	movs	r2, #0
 800edb4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800edb6:	4b1c      	ldr	r3, [pc, #112]	; (800ee28 <MX_ADC1_Init+0x98>)
 800edb8:	2200      	movs	r2, #0
 800edba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800edbc:	4b1a      	ldr	r3, [pc, #104]	; (800ee28 <MX_ADC1_Init+0x98>)
 800edbe:	2200      	movs	r2, #0
 800edc0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800edc2:	4b19      	ldr	r3, [pc, #100]	; (800ee28 <MX_ADC1_Init+0x98>)
 800edc4:	2200      	movs	r2, #0
 800edc6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800edca:	4b17      	ldr	r3, [pc, #92]	; (800ee28 <MX_ADC1_Init+0x98>)
 800edcc:	2200      	movs	r2, #0
 800edce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800edd0:	4b15      	ldr	r3, [pc, #84]	; (800ee28 <MX_ADC1_Init+0x98>)
 800edd2:	4a17      	ldr	r2, [pc, #92]	; (800ee30 <MX_ADC1_Init+0xa0>)
 800edd4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800edd6:	4b14      	ldr	r3, [pc, #80]	; (800ee28 <MX_ADC1_Init+0x98>)
 800edd8:	2200      	movs	r2, #0
 800edda:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800eddc:	4b12      	ldr	r3, [pc, #72]	; (800ee28 <MX_ADC1_Init+0x98>)
 800edde:	2201      	movs	r2, #1
 800ede0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800ede2:	4b11      	ldr	r3, [pc, #68]	; (800ee28 <MX_ADC1_Init+0x98>)
 800ede4:	2200      	movs	r2, #0
 800ede6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800edea:	4b0f      	ldr	r3, [pc, #60]	; (800ee28 <MX_ADC1_Init+0x98>)
 800edec:	2201      	movs	r2, #1
 800edee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800edf0:	480d      	ldr	r0, [pc, #52]	; (800ee28 <MX_ADC1_Init+0x98>)
 800edf2:	f7f2 f935 	bl	8001060 <HAL_ADC_Init>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d001      	beq.n	800ee00 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800edfc:	f000 fb79 	bl	800f4f2 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800ee00:	2300      	movs	r3, #0
 800ee02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800ee04:	2301      	movs	r3, #1
 800ee06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ee0c:	463b      	mov	r3, r7
 800ee0e:	4619      	mov	r1, r3
 800ee10:	4805      	ldr	r0, [pc, #20]	; (800ee28 <MX_ADC1_Init+0x98>)
 800ee12:	f7f2 fac1 	bl	8001398 <HAL_ADC_ConfigChannel>
 800ee16:	4603      	mov	r3, r0
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d001      	beq.n	800ee20 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800ee1c:	f000 fb69 	bl	800f4f2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800ee20:	bf00      	nop
 800ee22:	3710      	adds	r7, #16
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}
 800ee28:	20000b40 	.word	0x20000b40
 800ee2c:	40012000 	.word	0x40012000
 800ee30:	0f000001 	.word	0x0f000001

0800ee34 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800ee38:	4b17      	ldr	r3, [pc, #92]	; (800ee98 <MX_SPI3_Init+0x64>)
 800ee3a:	4a18      	ldr	r2, [pc, #96]	; (800ee9c <MX_SPI3_Init+0x68>)
 800ee3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800ee3e:	4b16      	ldr	r3, [pc, #88]	; (800ee98 <MX_SPI3_Init+0x64>)
 800ee40:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ee44:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800ee46:	4b14      	ldr	r3, [pc, #80]	; (800ee98 <MX_SPI3_Init+0x64>)
 800ee48:	2200      	movs	r2, #0
 800ee4a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800ee4c:	4b12      	ldr	r3, [pc, #72]	; (800ee98 <MX_SPI3_Init+0x64>)
 800ee4e:	2200      	movs	r2, #0
 800ee50:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ee52:	4b11      	ldr	r3, [pc, #68]	; (800ee98 <MX_SPI3_Init+0x64>)
 800ee54:	2200      	movs	r2, #0
 800ee56:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ee58:	4b0f      	ldr	r3, [pc, #60]	; (800ee98 <MX_SPI3_Init+0x64>)
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800ee5e:	4b0e      	ldr	r3, [pc, #56]	; (800ee98 <MX_SPI3_Init+0x64>)
 800ee60:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee64:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800ee66:	4b0c      	ldr	r3, [pc, #48]	; (800ee98 <MX_SPI3_Init+0x64>)
 800ee68:	2218      	movs	r2, #24
 800ee6a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ee6c:	4b0a      	ldr	r3, [pc, #40]	; (800ee98 <MX_SPI3_Init+0x64>)
 800ee6e:	2200      	movs	r2, #0
 800ee70:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800ee72:	4b09      	ldr	r3, [pc, #36]	; (800ee98 <MX_SPI3_Init+0x64>)
 800ee74:	2200      	movs	r2, #0
 800ee76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ee78:	4b07      	ldr	r3, [pc, #28]	; (800ee98 <MX_SPI3_Init+0x64>)
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800ee7e:	4b06      	ldr	r3, [pc, #24]	; (800ee98 <MX_SPI3_Init+0x64>)
 800ee80:	220a      	movs	r2, #10
 800ee82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800ee84:	4804      	ldr	r0, [pc, #16]	; (800ee98 <MX_SPI3_Init+0x64>)
 800ee86:	f7f3 fe61 	bl	8002b4c <HAL_SPI_Init>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d001      	beq.n	800ee94 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800ee90:	f000 fb2f 	bl	800f4f2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800ee94:	bf00      	nop
 800ee96:	bd80      	pop	{r7, pc}
 800ee98:	2000017c 	.word	0x2000017c
 800ee9c:	40003c00 	.word	0x40003c00

0800eea0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b08e      	sub	sp, #56	; 0x38
 800eea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800eea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eeaa:	2200      	movs	r2, #0
 800eeac:	601a      	str	r2, [r3, #0]
 800eeae:	605a      	str	r2, [r3, #4]
 800eeb0:	609a      	str	r2, [r3, #8]
 800eeb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800eeb4:	f107 0320 	add.w	r3, r7, #32
 800eeb8:	2200      	movs	r2, #0
 800eeba:	601a      	str	r2, [r3, #0]
 800eebc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800eebe:	1d3b      	adds	r3, r7, #4
 800eec0:	2200      	movs	r2, #0
 800eec2:	601a      	str	r2, [r3, #0]
 800eec4:	605a      	str	r2, [r3, #4]
 800eec6:	609a      	str	r2, [r3, #8]
 800eec8:	60da      	str	r2, [r3, #12]
 800eeca:	611a      	str	r2, [r3, #16]
 800eecc:	615a      	str	r2, [r3, #20]
 800eece:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800eed0:	4b32      	ldr	r3, [pc, #200]	; (800ef9c <MX_TIM2_Init+0xfc>)
 800eed2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eed6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800eed8:	4b30      	ldr	r3, [pc, #192]	; (800ef9c <MX_TIM2_Init+0xfc>)
 800eeda:	2200      	movs	r2, #0
 800eedc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eede:	4b2f      	ldr	r3, [pc, #188]	; (800ef9c <MX_TIM2_Init+0xfc>)
 800eee0:	2200      	movs	r2, #0
 800eee2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800eee4:	4b2d      	ldr	r3, [pc, #180]	; (800ef9c <MX_TIM2_Init+0xfc>)
 800eee6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800eeea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eeec:	4b2b      	ldr	r3, [pc, #172]	; (800ef9c <MX_TIM2_Init+0xfc>)
 800eeee:	2200      	movs	r2, #0
 800eef0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eef2:	4b2a      	ldr	r3, [pc, #168]	; (800ef9c <MX_TIM2_Init+0xfc>)
 800eef4:	2200      	movs	r2, #0
 800eef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800eef8:	4828      	ldr	r0, [pc, #160]	; (800ef9c <MX_TIM2_Init+0xfc>)
 800eefa:	f7f4 fb7b 	bl	80035f4 <HAL_TIM_Base_Init>
 800eefe:	4603      	mov	r3, r0
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d001      	beq.n	800ef08 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800ef04:	f000 faf5 	bl	800f4f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ef08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800ef0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef12:	4619      	mov	r1, r3
 800ef14:	4821      	ldr	r0, [pc, #132]	; (800ef9c <MX_TIM2_Init+0xfc>)
 800ef16:	f7f4 ff1f 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d001      	beq.n	800ef24 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800ef20:	f000 fae7 	bl	800f4f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800ef24:	481d      	ldr	r0, [pc, #116]	; (800ef9c <MX_TIM2_Init+0xfc>)
 800ef26:	f7f4 fbb4 	bl	8003692 <HAL_TIM_PWM_Init>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d001      	beq.n	800ef34 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800ef30:	f000 fadf 	bl	800f4f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ef34:	2300      	movs	r3, #0
 800ef36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ef3c:	f107 0320 	add.w	r3, r7, #32
 800ef40:	4619      	mov	r1, r3
 800ef42:	4816      	ldr	r0, [pc, #88]	; (800ef9c <MX_TIM2_Init+0xfc>)
 800ef44:	f7f5 faf7 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d001      	beq.n	800ef52 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800ef4e:	f000 fad0 	bl	800f4f2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ef52:	2360      	movs	r3, #96	; 0x60
 800ef54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ef56:	2300      	movs	r3, #0
 800ef58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ef62:	1d3b      	adds	r3, r7, #4
 800ef64:	2200      	movs	r2, #0
 800ef66:	4619      	mov	r1, r3
 800ef68:	480c      	ldr	r0, [pc, #48]	; (800ef9c <MX_TIM2_Init+0xfc>)
 800ef6a:	f7f4 fe2f 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d001      	beq.n	800ef78 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800ef74:	f000 fabd 	bl	800f4f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ef78:	1d3b      	adds	r3, r7, #4
 800ef7a:	220c      	movs	r2, #12
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	4807      	ldr	r0, [pc, #28]	; (800ef9c <MX_TIM2_Init+0xfc>)
 800ef80:	f7f4 fe24 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800ef84:	4603      	mov	r3, r0
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d001      	beq.n	800ef8e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800ef8a:	f000 fab2 	bl	800f4f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800ef8e:	4803      	ldr	r0, [pc, #12]	; (800ef9c <MX_TIM2_Init+0xfc>)
 800ef90:	f004 f9a4 	bl	80132dc <HAL_TIM_MspPostInit>

}
 800ef94:	bf00      	nop
 800ef96:	3738      	adds	r7, #56	; 0x38
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}
 800ef9c:	20000c5c 	.word	0x20000c5c

0800efa0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b08e      	sub	sp, #56	; 0x38
 800efa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800efa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800efaa:	2200      	movs	r2, #0
 800efac:	601a      	str	r2, [r3, #0]
 800efae:	605a      	str	r2, [r3, #4]
 800efb0:	609a      	str	r2, [r3, #8]
 800efb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800efb4:	f107 0320 	add.w	r3, r7, #32
 800efb8:	2200      	movs	r2, #0
 800efba:	601a      	str	r2, [r3, #0]
 800efbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800efbe:	1d3b      	adds	r3, r7, #4
 800efc0:	2200      	movs	r2, #0
 800efc2:	601a      	str	r2, [r3, #0]
 800efc4:	605a      	str	r2, [r3, #4]
 800efc6:	609a      	str	r2, [r3, #8]
 800efc8:	60da      	str	r2, [r3, #12]
 800efca:	611a      	str	r2, [r3, #16]
 800efcc:	615a      	str	r2, [r3, #20]
 800efce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800efd0:	4b2c      	ldr	r3, [pc, #176]	; (800f084 <MX_TIM3_Init+0xe4>)
 800efd2:	4a2d      	ldr	r2, [pc, #180]	; (800f088 <MX_TIM3_Init+0xe8>)
 800efd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800efd6:	4b2b      	ldr	r3, [pc, #172]	; (800f084 <MX_TIM3_Init+0xe4>)
 800efd8:	223f      	movs	r2, #63	; 0x3f
 800efda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800efdc:	4b29      	ldr	r3, [pc, #164]	; (800f084 <MX_TIM3_Init+0xe4>)
 800efde:	2200      	movs	r2, #0
 800efe0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800efe2:	4b28      	ldr	r3, [pc, #160]	; (800f084 <MX_TIM3_Init+0xe4>)
 800efe4:	2200      	movs	r2, #0
 800efe6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800efe8:	4b26      	ldr	r3, [pc, #152]	; (800f084 <MX_TIM3_Init+0xe4>)
 800efea:	2200      	movs	r2, #0
 800efec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800efee:	4b25      	ldr	r3, [pc, #148]	; (800f084 <MX_TIM3_Init+0xe4>)
 800eff0:	2200      	movs	r2, #0
 800eff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800eff4:	4823      	ldr	r0, [pc, #140]	; (800f084 <MX_TIM3_Init+0xe4>)
 800eff6:	f7f4 fafd 	bl	80035f4 <HAL_TIM_Base_Init>
 800effa:	4603      	mov	r3, r0
 800effc:	2b00      	cmp	r3, #0
 800effe:	d001      	beq.n	800f004 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800f000:	f000 fa77 	bl	800f4f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f008:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800f00a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f00e:	4619      	mov	r1, r3
 800f010:	481c      	ldr	r0, [pc, #112]	; (800f084 <MX_TIM3_Init+0xe4>)
 800f012:	f7f4 fea1 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 800f016:	4603      	mov	r3, r0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d001      	beq.n	800f020 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800f01c:	f000 fa69 	bl	800f4f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800f020:	4818      	ldr	r0, [pc, #96]	; (800f084 <MX_TIM3_Init+0xe4>)
 800f022:	f7f4 fb36 	bl	8003692 <HAL_TIM_PWM_Init>
 800f026:	4603      	mov	r3, r0
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d001      	beq.n	800f030 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800f02c:	f000 fa61 	bl	800f4f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f030:	2300      	movs	r3, #0
 800f032:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f034:	2300      	movs	r3, #0
 800f036:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800f038:	f107 0320 	add.w	r3, r7, #32
 800f03c:	4619      	mov	r1, r3
 800f03e:	4811      	ldr	r0, [pc, #68]	; (800f084 <MX_TIM3_Init+0xe4>)
 800f040:	f7f5 fa79 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800f044:	4603      	mov	r3, r0
 800f046:	2b00      	cmp	r3, #0
 800f048:	d001      	beq.n	800f04e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800f04a:	f000 fa52 	bl	800f4f2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f04e:	2360      	movs	r3, #96	; 0x60
 800f050:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800f052:	2300      	movs	r3, #0
 800f054:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f056:	2300      	movs	r3, #0
 800f058:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f05a:	2300      	movs	r3, #0
 800f05c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800f05e:	1d3b      	adds	r3, r7, #4
 800f060:	2204      	movs	r2, #4
 800f062:	4619      	mov	r1, r3
 800f064:	4807      	ldr	r0, [pc, #28]	; (800f084 <MX_TIM3_Init+0xe4>)
 800f066:	f7f4 fdb1 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
 800f06a:	4603      	mov	r3, r0
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d001      	beq.n	800f074 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800f070:	f000 fa3f 	bl	800f4f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800f074:	4803      	ldr	r0, [pc, #12]	; (800f084 <MX_TIM3_Init+0xe4>)
 800f076:	f004 f931 	bl	80132dc <HAL_TIM_MspPostInit>

}
 800f07a:	bf00      	nop
 800f07c:	3738      	adds	r7, #56	; 0x38
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
 800f082:	bf00      	nop
 800f084:	20000ae0 	.word	0x20000ae0
 800f088:	40000400 	.word	0x40000400

0800f08c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b08c      	sub	sp, #48	; 0x30
 800f090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800f092:	f107 030c 	add.w	r3, r7, #12
 800f096:	2224      	movs	r2, #36	; 0x24
 800f098:	2100      	movs	r1, #0
 800f09a:	4618      	mov	r0, r3
 800f09c:	f004 fb40 	bl	8013720 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f0a0:	1d3b      	adds	r3, r7, #4
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	601a      	str	r2, [r3, #0]
 800f0a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800f0a8:	4b20      	ldr	r3, [pc, #128]	; (800f12c <MX_TIM4_Init+0xa0>)
 800f0aa:	4a21      	ldr	r2, [pc, #132]	; (800f130 <MX_TIM4_Init+0xa4>)
 800f0ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800f0ae:	4b1f      	ldr	r3, [pc, #124]	; (800f12c <MX_TIM4_Init+0xa0>)
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f0b4:	4b1d      	ldr	r3, [pc, #116]	; (800f12c <MX_TIM4_Init+0xa0>)
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800f0ba:	4b1c      	ldr	r3, [pc, #112]	; (800f12c <MX_TIM4_Init+0xa0>)
 800f0bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f0c2:	4b1a      	ldr	r3, [pc, #104]	; (800f12c <MX_TIM4_Init+0xa0>)
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f0c8:	4b18      	ldr	r3, [pc, #96]	; (800f12c <MX_TIM4_Init+0xa0>)
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800f0ce:	2303      	movs	r3, #3
 800f0d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800f0f2:	f107 030c 	add.w	r3, r7, #12
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	480c      	ldr	r0, [pc, #48]	; (800f12c <MX_TIM4_Init+0xa0>)
 800f0fa:	f7f4 fb95 	bl	8003828 <HAL_TIM_Encoder_Init>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d001      	beq.n	800f108 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800f104:	f000 f9f5 	bl	800f4f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f108:	2300      	movs	r3, #0
 800f10a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f10c:	2300      	movs	r3, #0
 800f10e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800f110:	1d3b      	adds	r3, r7, #4
 800f112:	4619      	mov	r1, r3
 800f114:	4805      	ldr	r0, [pc, #20]	; (800f12c <MX_TIM4_Init+0xa0>)
 800f116:	f7f5 fa0e 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800f11a:	4603      	mov	r3, r0
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d001      	beq.n	800f124 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800f120:	f000 f9e7 	bl	800f4f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800f124:	bf00      	nop
 800f126:	3730      	adds	r7, #48	; 0x30
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}
 800f12c:	20000344 	.word	0x20000344
 800f130:	40000800 	.word	0x40000800

0800f134 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f13a:	463b      	mov	r3, r7
 800f13c:	2200      	movs	r2, #0
 800f13e:	601a      	str	r2, [r3, #0]
 800f140:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800f142:	4b15      	ldr	r3, [pc, #84]	; (800f198 <MX_TIM6_Init+0x64>)
 800f144:	4a15      	ldr	r2, [pc, #84]	; (800f19c <MX_TIM6_Init+0x68>)
 800f146:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800f148:	4b13      	ldr	r3, [pc, #76]	; (800f198 <MX_TIM6_Init+0x64>)
 800f14a:	2253      	movs	r2, #83	; 0x53
 800f14c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f14e:	4b12      	ldr	r3, [pc, #72]	; (800f198 <MX_TIM6_Init+0x64>)
 800f150:	2200      	movs	r2, #0
 800f152:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800f154:	4b10      	ldr	r3, [pc, #64]	; (800f198 <MX_TIM6_Init+0x64>)
 800f156:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f15a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f15c:	4b0e      	ldr	r3, [pc, #56]	; (800f198 <MX_TIM6_Init+0x64>)
 800f15e:	2200      	movs	r2, #0
 800f160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800f162:	480d      	ldr	r0, [pc, #52]	; (800f198 <MX_TIM6_Init+0x64>)
 800f164:	f7f4 fa46 	bl	80035f4 <HAL_TIM_Base_Init>
 800f168:	4603      	mov	r3, r0
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d001      	beq.n	800f172 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800f16e:	f000 f9c0 	bl	800f4f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f172:	2300      	movs	r3, #0
 800f174:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f176:	2300      	movs	r3, #0
 800f178:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800f17a:	463b      	mov	r3, r7
 800f17c:	4619      	mov	r1, r3
 800f17e:	4806      	ldr	r0, [pc, #24]	; (800f198 <MX_TIM6_Init+0x64>)
 800f180:	f7f5 f9d9 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800f184:	4603      	mov	r3, r0
 800f186:	2b00      	cmp	r3, #0
 800f188:	d001      	beq.n	800f18e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800f18a:	f000 f9b2 	bl	800f4f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800f18e:	bf00      	nop
 800f190:	3708      	adds	r7, #8
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}
 800f196:	bf00      	nop
 800f198:	20000bf8 	.word	0x20000bf8
 800f19c:	40001000 	.word	0x40001000

0800f1a0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b08c      	sub	sp, #48	; 0x30
 800f1a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800f1a6:	f107 030c 	add.w	r3, r7, #12
 800f1aa:	2224      	movs	r2, #36	; 0x24
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f004 fab6 	bl	8013720 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f1b4:	1d3b      	adds	r3, r7, #4
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	601a      	str	r2, [r3, #0]
 800f1ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800f1bc:	4b22      	ldr	r3, [pc, #136]	; (800f248 <MX_TIM8_Init+0xa8>)
 800f1be:	4a23      	ldr	r2, [pc, #140]	; (800f24c <MX_TIM8_Init+0xac>)
 800f1c0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800f1c2:	4b21      	ldr	r3, [pc, #132]	; (800f248 <MX_TIM8_Init+0xa8>)
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f1c8:	4b1f      	ldr	r3, [pc, #124]	; (800f248 <MX_TIM8_Init+0xa8>)
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800f1ce:	4b1e      	ldr	r3, [pc, #120]	; (800f248 <MX_TIM8_Init+0xa8>)
 800f1d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1d4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f1d6:	4b1c      	ldr	r3, [pc, #112]	; (800f248 <MX_TIM8_Init+0xa8>)
 800f1d8:	2200      	movs	r2, #0
 800f1da:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800f1dc:	4b1a      	ldr	r3, [pc, #104]	; (800f248 <MX_TIM8_Init+0xa8>)
 800f1de:	2200      	movs	r2, #0
 800f1e0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f1e2:	4b19      	ldr	r3, [pc, #100]	; (800f248 <MX_TIM8_Init+0xa8>)
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800f1e8:	2303      	movs	r3, #3
 800f1ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800f200:	2301      	movs	r3, #1
 800f202:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800f204:	2300      	movs	r3, #0
 800f206:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800f208:	2300      	movs	r3, #0
 800f20a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800f20c:	f107 030c 	add.w	r3, r7, #12
 800f210:	4619      	mov	r1, r3
 800f212:	480d      	ldr	r0, [pc, #52]	; (800f248 <MX_TIM8_Init+0xa8>)
 800f214:	f7f4 fb08 	bl	8003828 <HAL_TIM_Encoder_Init>
 800f218:	4603      	mov	r3, r0
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d001      	beq.n	800f222 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800f21e:	f000 f968 	bl	800f4f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f222:	2300      	movs	r3, #0
 800f224:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f226:	2300      	movs	r3, #0
 800f228:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800f22a:	1d3b      	adds	r3, r7, #4
 800f22c:	4619      	mov	r1, r3
 800f22e:	4806      	ldr	r0, [pc, #24]	; (800f248 <MX_TIM8_Init+0xa8>)
 800f230:	f7f5 f981 	bl	8004536 <HAL_TIMEx_MasterConfigSynchronization>
 800f234:	4603      	mov	r3, r0
 800f236:	2b00      	cmp	r3, #0
 800f238:	d001      	beq.n	800f23e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800f23a:	f000 f95a 	bl	800f4f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800f23e:	bf00      	nop
 800f240:	3730      	adds	r7, #48	; 0x30
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	20000304 	.word	0x20000304
 800f24c:	40010400 	.word	0x40010400

0800f250 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800f254:	4b11      	ldr	r3, [pc, #68]	; (800f29c <MX_USART1_UART_Init+0x4c>)
 800f256:	4a12      	ldr	r2, [pc, #72]	; (800f2a0 <MX_USART1_UART_Init+0x50>)
 800f258:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800f25a:	4b10      	ldr	r3, [pc, #64]	; (800f29c <MX_USART1_UART_Init+0x4c>)
 800f25c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800f260:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800f262:	4b0e      	ldr	r3, [pc, #56]	; (800f29c <MX_USART1_UART_Init+0x4c>)
 800f264:	2200      	movs	r2, #0
 800f266:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800f268:	4b0c      	ldr	r3, [pc, #48]	; (800f29c <MX_USART1_UART_Init+0x4c>)
 800f26a:	2200      	movs	r2, #0
 800f26c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800f26e:	4b0b      	ldr	r3, [pc, #44]	; (800f29c <MX_USART1_UART_Init+0x4c>)
 800f270:	2200      	movs	r2, #0
 800f272:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800f274:	4b09      	ldr	r3, [pc, #36]	; (800f29c <MX_USART1_UART_Init+0x4c>)
 800f276:	220c      	movs	r2, #12
 800f278:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f27a:	4b08      	ldr	r3, [pc, #32]	; (800f29c <MX_USART1_UART_Init+0x4c>)
 800f27c:	2200      	movs	r2, #0
 800f27e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800f280:	4b06      	ldr	r3, [pc, #24]	; (800f29c <MX_USART1_UART_Init+0x4c>)
 800f282:	2200      	movs	r2, #0
 800f284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800f286:	4805      	ldr	r0, [pc, #20]	; (800f29c <MX_USART1_UART_Init+0x4c>)
 800f288:	f7f5 f9ae 	bl	80045e8 <HAL_UART_Init>
 800f28c:	4603      	mov	r3, r0
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d001      	beq.n	800f296 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800f292:	f000 f92e 	bl	800f4f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800f296:	bf00      	nop
 800f298:	bd80      	pop	{r7, pc}
 800f29a:	bf00      	nop
 800f29c:	20000ba4 	.word	0x20000ba4
 800f2a0:	40011000 	.word	0x40011000

0800f2a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b08a      	sub	sp, #40	; 0x28
 800f2a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f2aa:	f107 0314 	add.w	r3, r7, #20
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	601a      	str	r2, [r3, #0]
 800f2b2:	605a      	str	r2, [r3, #4]
 800f2b4:	609a      	str	r2, [r3, #8]
 800f2b6:	60da      	str	r2, [r3, #12]
 800f2b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	613b      	str	r3, [r7, #16]
 800f2be:	4b53      	ldr	r3, [pc, #332]	; (800f40c <MX_GPIO_Init+0x168>)
 800f2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2c2:	4a52      	ldr	r2, [pc, #328]	; (800f40c <MX_GPIO_Init+0x168>)
 800f2c4:	f043 0304 	orr.w	r3, r3, #4
 800f2c8:	6313      	str	r3, [r2, #48]	; 0x30
 800f2ca:	4b50      	ldr	r3, [pc, #320]	; (800f40c <MX_GPIO_Init+0x168>)
 800f2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2ce:	f003 0304 	and.w	r3, r3, #4
 800f2d2:	613b      	str	r3, [r7, #16]
 800f2d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	60fb      	str	r3, [r7, #12]
 800f2da:	4b4c      	ldr	r3, [pc, #304]	; (800f40c <MX_GPIO_Init+0x168>)
 800f2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2de:	4a4b      	ldr	r2, [pc, #300]	; (800f40c <MX_GPIO_Init+0x168>)
 800f2e0:	f043 0301 	orr.w	r3, r3, #1
 800f2e4:	6313      	str	r3, [r2, #48]	; 0x30
 800f2e6:	4b49      	ldr	r3, [pc, #292]	; (800f40c <MX_GPIO_Init+0x168>)
 800f2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2ea:	f003 0301 	and.w	r3, r3, #1
 800f2ee:	60fb      	str	r3, [r7, #12]
 800f2f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	60bb      	str	r3, [r7, #8]
 800f2f6:	4b45      	ldr	r3, [pc, #276]	; (800f40c <MX_GPIO_Init+0x168>)
 800f2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2fa:	4a44      	ldr	r2, [pc, #272]	; (800f40c <MX_GPIO_Init+0x168>)
 800f2fc:	f043 0302 	orr.w	r3, r3, #2
 800f300:	6313      	str	r3, [r2, #48]	; 0x30
 800f302:	4b42      	ldr	r3, [pc, #264]	; (800f40c <MX_GPIO_Init+0x168>)
 800f304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f306:	f003 0302 	and.w	r3, r3, #2
 800f30a:	60bb      	str	r3, [r7, #8]
 800f30c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800f30e:	2300      	movs	r3, #0
 800f310:	607b      	str	r3, [r7, #4]
 800f312:	4b3e      	ldr	r3, [pc, #248]	; (800f40c <MX_GPIO_Init+0x168>)
 800f314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f316:	4a3d      	ldr	r2, [pc, #244]	; (800f40c <MX_GPIO_Init+0x168>)
 800f318:	f043 0308 	orr.w	r3, r3, #8
 800f31c:	6313      	str	r3, [r2, #48]	; 0x30
 800f31e:	4b3b      	ldr	r3, [pc, #236]	; (800f40c <MX_GPIO_Init+0x168>)
 800f320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f322:	f003 0308 	and.w	r3, r3, #8
 800f326:	607b      	str	r3, [r7, #4]
 800f328:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800f32a:	2200      	movs	r2, #0
 800f32c:	f24e 213c 	movw	r1, #57916	; 0xe23c
 800f330:	4837      	ldr	r0, [pc, #220]	; (800f410 <MX_GPIO_Init+0x16c>)
 800f332:	f7f2 ffe7 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800f336:	2200      	movs	r2, #0
 800f338:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800f33c:	4835      	ldr	r0, [pc, #212]	; (800f414 <MX_GPIO_Init+0x170>)
 800f33e:	f7f2 ffe1 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800f342:	2200      	movs	r2, #0
 800f344:	f242 7103 	movw	r1, #9987	; 0x2703
 800f348:	4833      	ldr	r0, [pc, #204]	; (800f418 <MX_GPIO_Init+0x174>)
 800f34a:	f7f2 ffdb 	bl	8002304 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800f34e:	2200      	movs	r2, #0
 800f350:	2104      	movs	r1, #4
 800f352:	4832      	ldr	r0, [pc, #200]	; (800f41c <MX_GPIO_Init+0x178>)
 800f354:	f7f2 ffd6 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2 
                           PC3 PC4 PC5 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2 
 800f358:	f24e 233c 	movw	r3, #57916	; 0xe23c
 800f35c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f35e:	2301      	movs	r3, #1
 800f360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f362:	2300      	movs	r3, #0
 800f364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f366:	2300      	movs	r3, #0
 800f368:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f36a:	f107 0314 	add.w	r3, r7, #20
 800f36e:	4619      	mov	r1, r3
 800f370:	4827      	ldr	r0, [pc, #156]	; (800f410 <MX_GPIO_Init+0x16c>)
 800f372:	f7f2 fe15 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800f376:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 800f37a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f37c:	2301      	movs	r3, #1
 800f37e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f380:	2300      	movs	r3, #0
 800f382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f384:	2300      	movs	r3, #0
 800f386:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f388:	f107 0314 	add.w	r3, r7, #20
 800f38c:	4619      	mov	r1, r3
 800f38e:	4821      	ldr	r0, [pc, #132]	; (800f414 <MX_GPIO_Init+0x170>)
 800f390:	f7f2 fe06 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13 
 800f394:	f242 7303 	movw	r3, #9987	; 0x2703
 800f398:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f39a:	2301      	movs	r3, #1
 800f39c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f3a6:	f107 0314 	add.w	r3, r7, #20
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	481a      	ldr	r0, [pc, #104]	; (800f418 <MX_GPIO_Init+0x174>)
 800f3ae:	f7f2 fdf7 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800f3b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f3b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f3c0:	f107 0314 	add.w	r3, r7, #20
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	4814      	ldr	r0, [pc, #80]	; (800f418 <MX_GPIO_Init+0x174>)
 800f3c8:	f7f2 fdea 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800f3cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f3d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f3da:	f107 0314 	add.w	r3, r7, #20
 800f3de:	4619      	mov	r1, r3
 800f3e0:	480c      	ldr	r0, [pc, #48]	; (800f414 <MX_GPIO_Init+0x170>)
 800f3e2:	f7f2 fddd 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800f3e6:	2304      	movs	r3, #4
 800f3e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f3f6:	f107 0314 	add.w	r3, r7, #20
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	4807      	ldr	r0, [pc, #28]	; (800f41c <MX_GPIO_Init+0x178>)
 800f3fe:	f7f2 fdcf 	bl	8001fa0 <HAL_GPIO_Init>

}
 800f402:	bf00      	nop
 800f404:	3728      	adds	r7, #40	; 0x28
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	40023800 	.word	0x40023800
 800f410:	40020800 	.word	0x40020800
 800f414:	40020000 	.word	0x40020000
 800f418:	40020400 	.word	0x40020400
 800f41c:	40020c00 	.word	0x40020c00

0800f420 <buzzer>:

/* USER CODE BEGIN 4 */
void buzzer(int sound, int length){
 800f420:	b580      	push	{r7, lr}
 800f422:	b08a      	sub	sp, #40	; 0x28
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef ConfigOC;
	ConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f42a:	2360      	movs	r3, #96	; 0x60
 800f42c:	60fb      	str	r3, [r7, #12]
	ConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f42e:	2300      	movs	r3, #0
 800f430:	617b      	str	r3, [r7, #20]
	ConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f432:	2300      	movs	r3, #0
 800f434:	61fb      	str	r3, [r7, #28]

	hz = 1000000 / sound;
 800f436:	4a15      	ldr	r2, [pc, #84]	; (800f48c <buzzer+0x6c>)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	fb92 f3f3 	sdiv	r3, r2, r3
 800f43e:	4a14      	ldr	r2, [pc, #80]	; (800f490 <buzzer+0x70>)
 800f440:	6013      	str	r3, [r2, #0]
	TIM3 -> ARR = hz;
 800f442:	4b13      	ldr	r3, [pc, #76]	; (800f490 <buzzer+0x70>)
 800f444:	681a      	ldr	r2, [r3, #0]
 800f446:	4b13      	ldr	r3, [pc, #76]	; (800f494 <buzzer+0x74>)
 800f448:	62da      	str	r2, [r3, #44]	; 0x2c
    ConfigOC.Pulse = hz / 10;
 800f44a:	4b11      	ldr	r3, [pc, #68]	; (800f490 <buzzer+0x70>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	4a12      	ldr	r2, [pc, #72]	; (800f498 <buzzer+0x78>)
 800f450:	fb82 1203 	smull	r1, r2, r2, r3
 800f454:	1092      	asrs	r2, r2, #2
 800f456:	17db      	asrs	r3, r3, #31
 800f458:	1ad3      	subs	r3, r2, r3
 800f45a:	613b      	str	r3, [r7, #16]
    HAL_TIM_PWM_ConfigChannel(&htim3, &ConfigOC, TIM_CHANNEL_2);
 800f45c:	f107 030c 	add.w	r3, r7, #12
 800f460:	2204      	movs	r2, #4
 800f462:	4619      	mov	r1, r3
 800f464:	480d      	ldr	r0, [pc, #52]	; (800f49c <buzzer+0x7c>)
 800f466:	f7f4 fbb1 	bl	8003bcc <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800f46a:	2104      	movs	r1, #4
 800f46c:	480b      	ldr	r0, [pc, #44]	; (800f49c <buzzer+0x7c>)
 800f46e:	f7f4 f945 	bl	80036fc <HAL_TIM_PWM_Start>

	HAL_Delay(length);
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	4618      	mov	r0, r3
 800f476:	f7f1 fdd1 	bl	800101c <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800f47a:	2104      	movs	r1, #4
 800f47c:	4807      	ldr	r0, [pc, #28]	; (800f49c <buzzer+0x7c>)
 800f47e:	f7f4 f97b 	bl	8003778 <HAL_TIM_PWM_Stop>
}
 800f482:	bf00      	nop
 800f484:	3728      	adds	r7, #40	; 0x28
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}
 800f48a:	bf00      	nop
 800f48c:	000f4240 	.word	0x000f4240
 800f490:	200002fc 	.word	0x200002fc
 800f494:	40000400 	.word	0x40000400
 800f498:	66666667 	.word	0x66666667
 800f49c:	20000ae0 	.word	0x20000ae0

0800f4a0 <get_adc_value>:


int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b086      	sub	sp, #24
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 800f4aa:	f107 0308 	add.w	r3, r7, #8
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	601a      	str	r2, [r3, #0]
 800f4b2:	605a      	str	r2, [r3, #4]
 800f4b4:	609a      	str	r2, [r3, #8]
 800f4b6:	60da      	str	r2, [r3, #12]

  sConfig.Channel = channel;
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 800f4bc:	2301      	movs	r3, #1
 800f4be:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 800f4c8:	f107 0308 	add.w	r3, r7, #8
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7f1 ff62 	bl	8001398 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    //
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f7f1 fe07 	bl	80010e8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   //wait for ADC
 800f4da:	2164      	movs	r1, #100	; 0x64
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f7f1 fec9 	bl	8001274 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          //
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f7f1 ff4a 	bl	800137c <HAL_ADC_GetValue>
 800f4e8:	4603      	mov	r3, r0
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3718      	adds	r7, #24
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}

0800f4f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f4f2:	b480      	push	{r7}
 800f4f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800f4f6:	bf00      	nop
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr

0800f500 <search_init>:

#include "global.h"

void search_init(void){
 800f500:	b580      	push	{r7, lr}
 800f502:	af00      	add	r7, sp, #0

	//----a探索系----
	goal_x = GOAL_X;        		//GOAL_Xはglobal.hにマクロ定義あり
 800f504:	4b09      	ldr	r3, [pc, #36]	; (800f52c <search_init+0x2c>)
 800f506:	2207      	movs	r2, #7
 800f508:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;        		//GOAL_Yはglobal.hにマクロ定義あり
 800f50a:	4b09      	ldr	r3, [pc, #36]	; (800f530 <search_init+0x30>)
 800f50c:	2207      	movs	r2, #7
 800f50e:	701a      	strb	r2, [r3, #0]
	map_Init();						//aマップの初期化
 800f510:	f001 fc16 	bl	8010d40 <map_Init>
	mouse.x = 0;
 800f514:	4b07      	ldr	r3, [pc, #28]	; (800f534 <search_init+0x34>)
 800f516:	2200      	movs	r2, #0
 800f518:	701a      	strb	r2, [r3, #0]
	mouse.y = 0;					//a現在地の初期化
 800f51a:	4b06      	ldr	r3, [pc, #24]	; (800f534 <search_init+0x34>)
 800f51c:	2200      	movs	r2, #0
 800f51e:	705a      	strb	r2, [r3, #1]
	mouse.dir = 0;					//aマウスの向きの初期化
 800f520:	4b04      	ldr	r3, [pc, #16]	; (800f534 <search_init+0x34>)
 800f522:	2200      	movs	r2, #0
 800f524:	709a      	strb	r2, [r3, #2]
}
 800f526:	bf00      	nop
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	20000bf1 	.word	0x20000bf1
 800f530:	20000b8c 	.word	0x20000b8c
 800f534:	20000c54 	.word	0x20000c54

0800f538 <searchA>:
//searchA
//a1区画走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchA(){
 800f538:	b580      	push	{r7, lr}
 800f53a:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800f53c:	4b37      	ldr	r3, [pc, #220]	; (800f61c <searchA+0xe4>)
 800f53e:	881b      	ldrh	r3, [r3, #0]
 800f540:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f544:	b2db      	uxtb	r3, r3
 800f546:	2b00      	cmp	r3, #0
 800f548:	d001      	beq.n	800f54e <searchA+0x16>
		load_map_from_eeprom();
 800f54a:	f003 fa71 	bl	8012a30 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800f54e:	f003 fae7 	bl	8012b20 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800f552:	4b33      	ldr	r3, [pc, #204]	; (800f620 <searchA+0xe8>)
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800f55a:	b2da      	uxtb	r2, r3
 800f55c:	4b30      	ldr	r3, [pc, #192]	; (800f620 <searchA+0xe8>)
 800f55e:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800f560:	f001 fc5a 	bl	8010e18 <write_map>

	//====a歩数マップ・経路作成====
	r_cnt = 0;												//a経路カウンタの初期化
 800f564:	4b2f      	ldr	r3, [pc, #188]	; (800f624 <searchA+0xec>)
 800f566:	2200      	movs	r2, #0
 800f568:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800f56a:	f001 fe55 	bl	8011218 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800f56e:	f002 f991 	bl	8011894 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800f572:	4b2c      	ldr	r3, [pc, #176]	; (800f624 <searchA+0xec>)
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	1c5a      	adds	r2, r3, #1
 800f578:	b2d1      	uxtb	r1, r2
 800f57a:	4a2a      	ldr	r2, [pc, #168]	; (800f624 <searchA+0xec>)
 800f57c:	7011      	strb	r1, [r2, #0]
 800f57e:	461a      	mov	r2, r3
 800f580:	4b29      	ldr	r3, [pc, #164]	; (800f628 <searchA+0xf0>)
 800f582:	5c9b      	ldrb	r3, [r3, r2]
 800f584:	2b22      	cmp	r3, #34	; 0x22
 800f586:	d00b      	beq.n	800f5a0 <searchA+0x68>
 800f588:	2b22      	cmp	r3, #34	; 0x22
 800f58a:	dc02      	bgt.n	800f592 <searchA+0x5a>
 800f58c:	2b11      	cmp	r3, #17
 800f58e:	d012      	beq.n	800f5b6 <searchA+0x7e>
 800f590:	e015      	b.n	800f5be <searchA+0x86>
 800f592:	2b44      	cmp	r3, #68	; 0x44
 800f594:	d001      	beq.n	800f59a <searchA+0x62>
 800f596:	2b88      	cmp	r3, #136	; 0x88
			//----a前進----
			case 0x88:
				break;
 800f598:	e011      	b.n	800f5be <searchA+0x86>
			//----a右折----
			case 0x44:
				rotate_R90();								//a右回転
 800f59a:	f7f6 f94d 	bl	8005838 <rotate_R90>
				break;
 800f59e:	e00e      	b.n	800f5be <searchA+0x86>
			//----180回転----
			case 0x22:
				rotate_180();								//180度回転
 800f5a0:	f7f6 fb02 	bl	8005ba8 <rotate_180>
				if(wall_info & 0x88){
 800f5a4:	4b1e      	ldr	r3, [pc, #120]	; (800f620 <searchA+0xe8>)
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d005      	beq.n	800f5bc <searchA+0x84>
					set_position();
 800f5b0:	f7f5 fee6 	bl	8005380 <set_position>
				}
				break;
 800f5b4:	e002      	b.n	800f5bc <searchA+0x84>
			//----a左折----
			case 0x11:
				rotate_L90();								//a左回転
 800f5b6:	f7f6 fa1b 	bl	80059f0 <rotate_L90>
				break;
 800f5ba:	e000      	b.n	800f5be <searchA+0x86>
				break;
 800f5bc:	bf00      	nop
		}

		drive_wait();
 800f5be:	2032      	movs	r0, #50	; 0x32
 800f5c0:	f7f1 fd2c 	bl	800101c <HAL_Delay>
		one_section();										//a前進する
 800f5c4:	f7f6 f808 	bl	80055d8 <one_section>
		drive_wait();
 800f5c8:	2032      	movs	r0, #50	; 0x32
 800f5ca:	f7f1 fd27 	bl	800101c <HAL_Delay>

		adv_pos();											//aマイクロマウス内部位置情報でも前進処理
 800f5ce:	f001 fb5f 	bl	8010c90 <adv_pos>
		conf_route();										//a最短経路で進行可能か判定
 800f5d2:	f001 fb97 	bl	8010d04 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));		//a現在座標とgoal座標が等しくなるまで実行
 800f5d6:	4b15      	ldr	r3, [pc, #84]	; (800f62c <searchA+0xf4>)
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	b2da      	uxtb	r2, r3
 800f5dc:	4b14      	ldr	r3, [pc, #80]	; (800f630 <searchA+0xf8>)
 800f5de:	781b      	ldrb	r3, [r3, #0]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d1c6      	bne.n	800f572 <searchA+0x3a>
 800f5e4:	4b11      	ldr	r3, [pc, #68]	; (800f62c <searchA+0xf4>)
 800f5e6:	785b      	ldrb	r3, [r3, #1]
 800f5e8:	b2da      	uxtb	r2, r3
 800f5ea:	4b12      	ldr	r3, [pc, #72]	; (800f634 <searchA+0xfc>)
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d1bf      	bne.n	800f572 <searchA+0x3a>

	printf("goal\n");
 800f5f2:	4811      	ldr	r0, [pc, #68]	; (800f638 <searchA+0x100>)
 800f5f4:	f004 f910 	bl	8013818 <puts>
	HAL_Delay(500);										//aスタートでは***2秒以上***停止しなくてはならない
 800f5f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f5fc:	f7f1 fd0e 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800f600:	f7f6 fad2 	bl	8005ba8 <rotate_180>

	if(!MF.FLAG.SCND){
 800f604:	4b05      	ldr	r3, [pc, #20]	; (800f61c <searchA+0xe4>)
 800f606:	881b      	ldrh	r3, [r3, #0]
 800f608:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f60c:	b2db      	uxtb	r3, r3
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d101      	bne.n	800f616 <searchA+0xde>
		store_map_in_eeprom();
 800f612:	f003 f9d3 	bl	80129bc <store_map_in_eeprom>
	}
}
 800f616:	bf00      	nop
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	20000fac 	.word	0x20000fac
 800f620:	20000300 	.word	0x20000300
 800f624:	200012f4 	.word	0x200012f4
 800f628:	20000c9c 	.word	0x20000c9c
 800f62c:	20000c54 	.word	0x20000c54
 800f630:	20000bf1 	.word	0x20000bf1
 800f634:	20000b8c 	.word	0x20000b8c
 800f638:	08014e74 	.word	0x08014e74

0800f63c <searchB>:
//searchB
//a連続走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchB(){
 800f63c:	b580      	push	{r7, lr}
 800f63e:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800f640:	4b3c      	ldr	r3, [pc, #240]	; (800f734 <searchB+0xf8>)
 800f642:	881b      	ldrh	r3, [r3, #0]
 800f644:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f648:	b2db      	uxtb	r3, r3
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d001      	beq.n	800f652 <searchB+0x16>
		load_map_from_eeprom();
 800f64e:	f003 f9ef 	bl	8012a30 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800f652:	f003 fa65 	bl	8012b20 <get_wall_info>
	wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800f656:	4b38      	ldr	r3, [pc, #224]	; (800f738 <searchB+0xfc>)
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800f65e:	b2da      	uxtb	r2, r3
 800f660:	4b35      	ldr	r3, [pc, #212]	; (800f738 <searchB+0xfc>)
 800f662:	701a      	strb	r2, [r3, #0]
	write_map();											//a壁情報を地図に記入
 800f664:	f001 fbd8 	bl	8010e18 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800f668:	f7f5 fea0 	bl	80053ac <start_sectionA>
	adv_pos();
 800f66c:	f001 fb10 	bl	8010c90 <adv_pos>

	//====a歩数マップ・経路作成====
	write_map();											//a壁情報を地図に記入
 800f670:	f001 fbd2 	bl	8010e18 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800f674:	4b31      	ldr	r3, [pc, #196]	; (800f73c <searchB+0x100>)
 800f676:	2200      	movs	r2, #0
 800f678:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800f67a:	f001 fdcd 	bl	8011218 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800f67e:	f002 f909 	bl	8011894 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800f682:	4b2e      	ldr	r3, [pc, #184]	; (800f73c <searchB+0x100>)
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	1c5a      	adds	r2, r3, #1
 800f688:	b2d1      	uxtb	r1, r2
 800f68a:	4a2c      	ldr	r2, [pc, #176]	; (800f73c <searchB+0x100>)
 800f68c:	7011      	strb	r1, [r2, #0]
 800f68e:	461a      	mov	r2, r3
 800f690:	4b2b      	ldr	r3, [pc, #172]	; (800f740 <searchB+0x104>)
 800f692:	5c9b      	ldrb	r3, [r3, r2]
 800f694:	2b22      	cmp	r3, #34	; 0x22
 800f696:	d012      	beq.n	800f6be <searchB+0x82>
 800f698:	2b22      	cmp	r3, #34	; 0x22
 800f69a:	dc02      	bgt.n	800f6a2 <searchB+0x66>
 800f69c:	2b11      	cmp	r3, #17
 800f69e:	d01d      	beq.n	800f6dc <searchB+0xa0>
 800f6a0:	e023      	b.n	800f6ea <searchB+0xae>
 800f6a2:	2b44      	cmp	r3, #68	; 0x44
 800f6a4:	d004      	beq.n	800f6b0 <searchB+0x74>
 800f6a6:	2b88      	cmp	r3, #136	; 0x88
 800f6a8:	d11f      	bne.n	800f6ea <searchB+0xae>
			//----a前進----
			case 0x88:
				one_sectionU();
 800f6aa:	f7f6 f8ad 	bl	8005808 <one_sectionU>
				break;
 800f6ae:	e01c      	b.n	800f6ea <searchB+0xae>
			//----a右折----
			case 0x44:
				half_sectionD();
 800f6b0:	f7f5 ff16 	bl	80054e0 <half_sectionD>
				rotate_R90();
 800f6b4:	f7f6 f8c0 	bl	8005838 <rotate_R90>
				half_sectionA();
 800f6b8:	f7f5 fef8 	bl	80054ac <half_sectionA>
				break;
 800f6bc:	e015      	b.n	800f6ea <searchB+0xae>
			//----180回転----
			case 0x22:
				half_sectionD();
 800f6be:	f7f5 ff0f 	bl	80054e0 <half_sectionD>
				rotate_180();
 800f6c2:	f7f6 fa71 	bl	8005ba8 <rotate_180>
				if(wall_info & 0x88){
 800f6c6:	4b1c      	ldr	r3, [pc, #112]	; (800f738 <searchB+0xfc>)
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d001      	beq.n	800f6d6 <searchB+0x9a>
					set_position();
 800f6d2:	f7f5 fe55 	bl	8005380 <set_position>
				}
				half_sectionA();
 800f6d6:	f7f5 fee9 	bl	80054ac <half_sectionA>
				break;
 800f6da:	e006      	b.n	800f6ea <searchB+0xae>
			//----a左折----
			case 0x11:
				half_sectionD();
 800f6dc:	f7f5 ff00 	bl	80054e0 <half_sectionD>
				rotate_L90();
 800f6e0:	f7f6 f986 	bl	80059f0 <rotate_L90>
				half_sectionA();
 800f6e4:	f7f5 fee2 	bl	80054ac <half_sectionA>
				break;
 800f6e8:	bf00      	nop
		}
		adv_pos();
 800f6ea:	f001 fad1 	bl	8010c90 <adv_pos>
		conf_route();
 800f6ee:	f001 fb09 	bl	8010d04 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800f6f2:	4b14      	ldr	r3, [pc, #80]	; (800f744 <searchB+0x108>)
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	b2da      	uxtb	r2, r3
 800f6f8:	4b13      	ldr	r3, [pc, #76]	; (800f748 <searchB+0x10c>)
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d1c0      	bne.n	800f682 <searchB+0x46>
 800f700:	4b10      	ldr	r3, [pc, #64]	; (800f744 <searchB+0x108>)
 800f702:	785b      	ldrb	r3, [r3, #1]
 800f704:	b2da      	uxtb	r2, r3
 800f706:	4b11      	ldr	r3, [pc, #68]	; (800f74c <searchB+0x110>)
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d1b9      	bne.n	800f682 <searchB+0x46>

	half_sectionD();
 800f70e:	f7f5 fee7 	bl	80054e0 <half_sectionD>

	HAL_Delay(500);
 800f712:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f716:	f7f1 fc81 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800f71a:	f7f6 fa45 	bl	8005ba8 <rotate_180>

	if(!MF.FLAG.SCND){
 800f71e:	4b05      	ldr	r3, [pc, #20]	; (800f734 <searchB+0xf8>)
 800f720:	881b      	ldrh	r3, [r3, #0]
 800f722:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f726:	b2db      	uxtb	r3, r3
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d101      	bne.n	800f730 <searchB+0xf4>
		store_map_in_eeprom();
 800f72c:	f003 f946 	bl	80129bc <store_map_in_eeprom>
	}
}
 800f730:	bf00      	nop
 800f732:	bd80      	pop	{r7, pc}
 800f734:	20000fac 	.word	0x20000fac
 800f738:	20000300 	.word	0x20000300
 800f73c:	200012f4 	.word	0x200012f4
 800f740:	20000c9c 	.word	0x20000c9c
 800f744:	20000c54 	.word	0x20000c54
 800f748:	20000bf1 	.word	0x20000bf1
 800f74c:	20000b8c 	.word	0x20000b8c

0800f750 <searchC>:
//searchC
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC(){
 800f750:	b590      	push	{r4, r7, lr}
 800f752:	b083      	sub	sp, #12
 800f754:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800f756:	4b82      	ldr	r3, [pc, #520]	; (800f960 <searchC+0x210>)
 800f758:	881b      	ldrh	r3, [r3, #0]
 800f75a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	2b00      	cmp	r3, #0
 800f762:	d001      	beq.n	800f768 <searchC+0x18>
		load_map_from_eeprom();
 800f764:	f003 f964 	bl	8012a30 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800f768:	4b7d      	ldr	r3, [pc, #500]	; (800f960 <searchC+0x210>)
 800f76a:	881b      	ldrh	r3, [r3, #0]
 800f76c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f770:	b2db      	uxtb	r3, r3
 800f772:	2b00      	cmp	r3, #0
 800f774:	d101      	bne.n	800f77a <searchC+0x2a>
 800f776:	f003 f9d3 	bl	8012b20 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800f77a:	4b79      	ldr	r3, [pc, #484]	; (800f960 <searchC+0x210>)
 800f77c:	881b      	ldrh	r3, [r3, #0]
 800f77e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f782:	b2db      	uxtb	r3, r3
 800f784:	2b00      	cmp	r3, #0
 800f786:	d106      	bne.n	800f796 <searchC+0x46>
 800f788:	4b76      	ldr	r3, [pc, #472]	; (800f964 <searchC+0x214>)
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800f790:	b2da      	uxtb	r2, r3
 800f792:	4b74      	ldr	r3, [pc, #464]	; (800f964 <searchC+0x214>)
 800f794:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800f796:	4b72      	ldr	r3, [pc, #456]	; (800f960 <searchC+0x210>)
 800f798:	881b      	ldrh	r3, [r3, #0]
 800f79a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f79e:	b2db      	uxtb	r3, r3
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d101      	bne.n	800f7a8 <searchC+0x58>
 800f7a4:	f001 fb38 	bl	8010e18 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800f7a8:	f7f5 fe00 	bl	80053ac <start_sectionA>
	adv_pos();
 800f7ac:	f001 fa70 	bl	8010c90 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800f7b0:	4b6b      	ldr	r3, [pc, #428]	; (800f960 <searchC+0x210>)
 800f7b2:	881b      	ldrh	r3, [r3, #0]
 800f7b4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d101      	bne.n	800f7c2 <searchC+0x72>
 800f7be:	f001 fb2b 	bl	8010e18 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800f7c2:	4b69      	ldr	r3, [pc, #420]	; (800f968 <searchC+0x218>)
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800f7c8:	f001 fd26 	bl	8011218 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800f7cc:	f002 f862 	bl	8011894 <make_route>
	uint8_t x, y;											//X，Y座標

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800f7d0:	4b65      	ldr	r3, [pc, #404]	; (800f968 <searchC+0x218>)
 800f7d2:	781b      	ldrb	r3, [r3, #0]
 800f7d4:	1c5a      	adds	r2, r3, #1
 800f7d6:	b2d1      	uxtb	r1, r2
 800f7d8:	4a63      	ldr	r2, [pc, #396]	; (800f968 <searchC+0x218>)
 800f7da:	7011      	strb	r1, [r2, #0]
 800f7dc:	461a      	mov	r2, r3
 800f7de:	4b63      	ldr	r3, [pc, #396]	; (800f96c <searchC+0x21c>)
 800f7e0:	5c9b      	ldrb	r3, [r3, r2]
 800f7e2:	2b22      	cmp	r3, #34	; 0x22
 800f7e4:	d06e      	beq.n	800f8c4 <searchC+0x174>
 800f7e6:	2b22      	cmp	r3, #34	; 0x22
 800f7e8:	dc02      	bgt.n	800f7f0 <searchC+0xa0>
 800f7ea:	2b11      	cmp	r3, #17
 800f7ec:	d07a      	beq.n	800f8e4 <searchC+0x194>
 800f7ee:	e07c      	b.n	800f8ea <searchC+0x19a>
 800f7f0:	2b44      	cmp	r3, #68	; 0x44
 800f7f2:	d064      	beq.n	800f8be <searchC+0x16e>
 800f7f4:	2b88      	cmp	r3, #136	; 0x88
 800f7f6:	d178      	bne.n	800f8ea <searchC+0x19a>
			//----a前進----
			case 0x88:
				if(route[r_cnt] == 0x88 && MF.FLAG.ACCL2){
 800f7f8:	4b5b      	ldr	r3, [pc, #364]	; (800f968 <searchC+0x218>)
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	4b5b      	ldr	r3, [pc, #364]	; (800f96c <searchC+0x21c>)
 800f800:	5c9b      	ldrb	r3, [r3, r2]
 800f802:	2b88      	cmp	r3, #136	; 0x88
 800f804:	d14e      	bne.n	800f8a4 <searchC+0x154>
 800f806:	4b56      	ldr	r3, [pc, #344]	; (800f960 <searchC+0x210>)
 800f808:	881b      	ldrh	r3, [r3, #0]
 800f80a:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	2b00      	cmp	r3, #0
 800f812:	d047      	beq.n	800f8a4 <searchC+0x154>
					x = mouse.x;
 800f814:	4b56      	ldr	r3, [pc, #344]	; (800f970 <searchC+0x220>)
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	71fb      	strb	r3, [r7, #7]
					y = mouse.y;
 800f81a:	4b55      	ldr	r3, [pc, #340]	; (800f970 <searchC+0x220>)
 800f81c:	785b      	ldrb	r3, [r3, #1]
 800f81e:	71bb      	strb	r3, [r7, #6]
					adv_pos();
 800f820:	f001 fa36 	bl	8010c90 <adv_pos>
					if((map[mouse.y][mouse.x] & 0x0f) == (map[mouse.y][mouse.x]>>4)){
 800f824:	4b52      	ldr	r3, [pc, #328]	; (800f970 <searchC+0x220>)
 800f826:	785b      	ldrb	r3, [r3, #1]
 800f828:	b2db      	uxtb	r3, r3
 800f82a:	4618      	mov	r0, r3
 800f82c:	4b50      	ldr	r3, [pc, #320]	; (800f970 <searchC+0x220>)
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	b2db      	uxtb	r3, r3
 800f832:	4619      	mov	r1, r3
 800f834:	4a4f      	ldr	r2, [pc, #316]	; (800f974 <searchC+0x224>)
 800f836:	0103      	lsls	r3, r0, #4
 800f838:	4413      	add	r3, r2
 800f83a:	440b      	add	r3, r1
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	f003 030f 	and.w	r3, r3, #15
 800f842:	4a4b      	ldr	r2, [pc, #300]	; (800f970 <searchC+0x220>)
 800f844:	7852      	ldrb	r2, [r2, #1]
 800f846:	b2d2      	uxtb	r2, r2
 800f848:	4614      	mov	r4, r2
 800f84a:	4a49      	ldr	r2, [pc, #292]	; (800f970 <searchC+0x220>)
 800f84c:	7812      	ldrb	r2, [r2, #0]
 800f84e:	b2d2      	uxtb	r2, r2
 800f850:	4610      	mov	r0, r2
 800f852:	4948      	ldr	r1, [pc, #288]	; (800f974 <searchC+0x224>)
 800f854:	0122      	lsls	r2, r4, #4
 800f856:	440a      	add	r2, r1
 800f858:	4402      	add	r2, r0
 800f85a:	7812      	ldrb	r2, [r2, #0]
 800f85c:	0912      	lsrs	r2, r2, #4
 800f85e:	b2d2      	uxtb	r2, r2
 800f860:	4293      	cmp	r3, r2
 800f862:	d10c      	bne.n	800f87e <searchC+0x12e>
						if(!H_accel_flag){
 800f864:	4b44      	ldr	r3, [pc, #272]	; (800f978 <searchC+0x228>)
 800f866:	781b      	ldrb	r3, [r3, #0]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d105      	bne.n	800f878 <searchC+0x128>
							one_sectionA();
 800f86c:	f7f5 febc 	bl	80055e8 <one_sectionA>
							H_accel_flag = 1;
 800f870:	4b41      	ldr	r3, [pc, #260]	; (800f978 <searchC+0x228>)
 800f872:	2201      	movs	r2, #1
 800f874:	701a      	strb	r2, [r3, #0]
 800f876:	e00e      	b.n	800f896 <searchC+0x146>
						}else{
							one_sectionU();
 800f878:	f7f5 ffc6 	bl	8005808 <one_sectionU>
 800f87c:	e00b      	b.n	800f896 <searchC+0x146>
						}
					}else if(H_accel_flag){
 800f87e:	4b3e      	ldr	r3, [pc, #248]	; (800f978 <searchC+0x228>)
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d005      	beq.n	800f892 <searchC+0x142>
						one_sectionD();
 800f886:	f7f5 fed5 	bl	8005634 <one_sectionD>
						H_accel_flag = 0;
 800f88a:	4b3b      	ldr	r3, [pc, #236]	; (800f978 <searchC+0x228>)
 800f88c:	2200      	movs	r2, #0
 800f88e:	701a      	strb	r2, [r3, #0]
 800f890:	e001      	b.n	800f896 <searchC+0x146>
					}else{
						one_sectionU();
 800f892:	f7f5 ffb9 	bl	8005808 <one_sectionU>
					}
					mouse.x = x;
 800f896:	4a36      	ldr	r2, [pc, #216]	; (800f970 <searchC+0x220>)
 800f898:	79fb      	ldrb	r3, [r7, #7]
 800f89a:	7013      	strb	r3, [r2, #0]
					mouse.y = y;
 800f89c:	4a34      	ldr	r2, [pc, #208]	; (800f970 <searchC+0x220>)
 800f89e:	79bb      	ldrb	r3, [r7, #6]
 800f8a0:	7053      	strb	r3, [r2, #1]
					one_sectionD();
					H_accel_flag = 0;
				}else{
					one_sectionU();
				}
				break;
 800f8a2:	e022      	b.n	800f8ea <searchC+0x19a>
				}else if(H_accel_flag){
 800f8a4:	4b34      	ldr	r3, [pc, #208]	; (800f978 <searchC+0x228>)
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d005      	beq.n	800f8b8 <searchC+0x168>
					one_sectionD();
 800f8ac:	f7f5 fec2 	bl	8005634 <one_sectionD>
					H_accel_flag = 0;
 800f8b0:	4b31      	ldr	r3, [pc, #196]	; (800f978 <searchC+0x228>)
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	701a      	strb	r2, [r3, #0]
				break;
 800f8b6:	e018      	b.n	800f8ea <searchC+0x19a>
					one_sectionU();
 800f8b8:	f7f5 ffa6 	bl	8005808 <one_sectionU>
				break;
 800f8bc:	e015      	b.n	800f8ea <searchC+0x19a>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800f8be:	f7f6 fa4b 	bl	8005d58 <slalom_R90>
				break;
 800f8c2:	e012      	b.n	800f8ea <searchC+0x19a>
			//----180回転----
			case 0x22:
				half_sectionD();
 800f8c4:	f7f5 fe0c 	bl	80054e0 <half_sectionD>
				rotate_180();
 800f8c8:	f7f6 f96e 	bl	8005ba8 <rotate_180>
				if(wall_info & 0x88){
 800f8cc:	4b25      	ldr	r3, [pc, #148]	; (800f964 <searchC+0x214>)
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d002      	beq.n	800f8de <searchC+0x18e>
					set_position();
 800f8d8:	f7f5 fd52 	bl	8005380 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800f8dc:	e005      	b.n	800f8ea <searchC+0x19a>
					half_sectionA();
 800f8de:	f7f5 fde5 	bl	80054ac <half_sectionA>
				break;
 800f8e2:	e002      	b.n	800f8ea <searchC+0x19a>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800f8e4:	f7f6 fb4c 	bl	8005f80 <slalom_L90>
				break;
 800f8e8:	bf00      	nop
		}
		adv_pos();
 800f8ea:	f001 f9d1 	bl	8010c90 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800f8ee:	4b1c      	ldr	r3, [pc, #112]	; (800f960 <searchC+0x210>)
 800f8f0:	881b      	ldrh	r3, [r3, #0]
 800f8f2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f8f6:	b2db      	uxtb	r3, r3
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d101      	bne.n	800f900 <searchC+0x1b0>
 800f8fc:	f001 fa02 	bl	8010d04 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800f900:	4b1b      	ldr	r3, [pc, #108]	; (800f970 <searchC+0x220>)
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	b2da      	uxtb	r2, r3
 800f906:	4b1d      	ldr	r3, [pc, #116]	; (800f97c <searchC+0x22c>)
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	429a      	cmp	r2, r3
 800f90c:	f47f af60 	bne.w	800f7d0 <searchC+0x80>
 800f910:	4b17      	ldr	r3, [pc, #92]	; (800f970 <searchC+0x220>)
 800f912:	785b      	ldrb	r3, [r3, #1]
 800f914:	b2da      	uxtb	r2, r3
 800f916:	4b1a      	ldr	r3, [pc, #104]	; (800f980 <searchC+0x230>)
 800f918:	781b      	ldrb	r3, [r3, #0]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	f47f af58 	bne.w	800f7d0 <searchC+0x80>

	half_sectionD();
 800f920:	f7f5 fdde 	bl	80054e0 <half_sectionD>

	HAL_Delay(500);
 800f924:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f928:	f7f1 fb78 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800f92c:	f7f6 f93c 	bl	8005ba8 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800f930:	2064      	movs	r0, #100	; 0x64
 800f932:	f7f5 fcd9 	bl	80052e8 <driveC2>
	degree_z = target_degree_z;
 800f936:	4b13      	ldr	r3, [pc, #76]	; (800f984 <searchC+0x234>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4a13      	ldr	r2, [pc, #76]	; (800f988 <searchC+0x238>)
 800f93c:	6013      	str	r3, [r2, #0]
	start_flag = 0;
 800f93e:	4b13      	ldr	r3, [pc, #76]	; (800f98c <searchC+0x23c>)
 800f940:	2200      	movs	r2, #0
 800f942:	701a      	strb	r2, [r3, #0]

	if(!MF.FLAG.SCND){
 800f944:	4b06      	ldr	r3, [pc, #24]	; (800f960 <searchC+0x210>)
 800f946:	881b      	ldrh	r3, [r3, #0]
 800f948:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f94c:	b2db      	uxtb	r3, r3
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d101      	bne.n	800f956 <searchC+0x206>
		store_map_in_eeprom();
 800f952:	f003 f833 	bl	80129bc <store_map_in_eeprom>
	}
}
 800f956:	bf00      	nop
 800f958:	370c      	adds	r7, #12
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd90      	pop	{r4, r7, pc}
 800f95e:	bf00      	nop
 800f960:	20000fac 	.word	0x20000fac
 800f964:	20000300 	.word	0x20000300
 800f968:	200012f4 	.word	0x200012f4
 800f96c:	20000c9c 	.word	0x20000c9c
 800f970:	20000c54 	.word	0x20000c54
 800f974:	200001e4 	.word	0x200001e4
 800f978:	20000301 	.word	0x20000301
 800f97c:	20000bf1 	.word	0x20000bf1
 800f980:	20000b8c 	.word	0x20000b8c
 800f984:	20000c40 	.word	0x20000c40
 800f988:	20000b9c 	.word	0x20000b9c
 800f98c:	200012ec 	.word	0x200012ec

0800f990 <searchC2>:
//searchC2
//aスラローム走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchC2(){
 800f990:	b580      	push	{r7, lr}
 800f992:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800f994:	4b4f      	ldr	r3, [pc, #316]	; (800fad4 <searchC2+0x144>)
 800f996:	881b      	ldrh	r3, [r3, #0]
 800f998:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f99c:	b2db      	uxtb	r3, r3
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d001      	beq.n	800f9a6 <searchC2+0x16>
		load_map_from_eeprom();
 800f9a2:	f003 f845 	bl	8012a30 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800f9a6:	4b4b      	ldr	r3, [pc, #300]	; (800fad4 <searchC2+0x144>)
 800f9a8:	881b      	ldrh	r3, [r3, #0]
 800f9aa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f9ae:	b2db      	uxtb	r3, r3
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d101      	bne.n	800f9b8 <searchC2+0x28>
 800f9b4:	f003 f8b4 	bl	8012b20 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800f9b8:	4b46      	ldr	r3, [pc, #280]	; (800fad4 <searchC2+0x144>)
 800f9ba:	881b      	ldrh	r3, [r3, #0]
 800f9bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f9c0:	b2db      	uxtb	r3, r3
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d106      	bne.n	800f9d4 <searchC2+0x44>
 800f9c6:	4b44      	ldr	r3, [pc, #272]	; (800fad8 <searchC2+0x148>)
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800f9ce:	b2da      	uxtb	r2, r3
 800f9d0:	4b41      	ldr	r3, [pc, #260]	; (800fad8 <searchC2+0x148>)
 800f9d2:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800f9d4:	4b3f      	ldr	r3, [pc, #252]	; (800fad4 <searchC2+0x144>)
 800f9d6:	881b      	ldrh	r3, [r3, #0]
 800f9d8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f9dc:	b2db      	uxtb	r3, r3
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d101      	bne.n	800f9e6 <searchC2+0x56>
 800f9e2:	f001 fa19 	bl	8010e18 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA2();
 800f9e6:	f7f5 fd21 	bl	800542c <start_sectionA2>
	adv_pos();
 800f9ea:	f001 f951 	bl	8010c90 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800f9ee:	4b39      	ldr	r3, [pc, #228]	; (800fad4 <searchC2+0x144>)
 800f9f0:	881b      	ldrh	r3, [r3, #0]
 800f9f2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f9f6:	b2db      	uxtb	r3, r3
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d101      	bne.n	800fa00 <searchC2+0x70>
 800f9fc:	f001 fa0c 	bl	8010e18 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800fa00:	4b36      	ldr	r3, [pc, #216]	; (800fadc <searchC2+0x14c>)
 800fa02:	2200      	movs	r2, #0
 800fa04:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800fa06:	f001 fc07 	bl	8011218 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800fa0a:	f001 ff43 	bl	8011894 <make_route>

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800fa0e:	4b33      	ldr	r3, [pc, #204]	; (800fadc <searchC2+0x14c>)
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	1c5a      	adds	r2, r3, #1
 800fa14:	b2d1      	uxtb	r1, r2
 800fa16:	4a31      	ldr	r2, [pc, #196]	; (800fadc <searchC2+0x14c>)
 800fa18:	7011      	strb	r1, [r2, #0]
 800fa1a:	461a      	mov	r2, r3
 800fa1c:	4b30      	ldr	r3, [pc, #192]	; (800fae0 <searchC2+0x150>)
 800fa1e:	5c9b      	ldrb	r3, [r3, r2]
 800fa20:	2b22      	cmp	r3, #34	; 0x22
 800fa22:	d00e      	beq.n	800fa42 <searchC2+0xb2>
 800fa24:	2b22      	cmp	r3, #34	; 0x22
 800fa26:	dc02      	bgt.n	800fa2e <searchC2+0x9e>
 800fa28:	2b11      	cmp	r3, #17
 800fa2a:	d01a      	beq.n	800fa62 <searchC2+0xd2>
 800fa2c:	e01c      	b.n	800fa68 <searchC2+0xd8>
 800fa2e:	2b44      	cmp	r3, #68	; 0x44
 800fa30:	d004      	beq.n	800fa3c <searchC2+0xac>
 800fa32:	2b88      	cmp	r3, #136	; 0x88
 800fa34:	d118      	bne.n	800fa68 <searchC2+0xd8>
			//----a前進----
			case 0x88:
				one_sectionU();
 800fa36:	f7f5 fee7 	bl	8005808 <one_sectionU>
				break;
 800fa3a:	e015      	b.n	800fa68 <searchC2+0xd8>
			//----a右折スラローム----
			case 0x44:
				slalom_R902();
 800fa3c:	f7f6 fbb4 	bl	80061a8 <slalom_R902>
				break;
 800fa40:	e012      	b.n	800fa68 <searchC2+0xd8>
			//----180回転----
			case 0x22:
				half_sectionD2();
 800fa42:	f7f5 fd77 	bl	8005534 <half_sectionD2>
				rotate_180();
 800fa46:	f7f6 f8af 	bl	8005ba8 <rotate_180>
				if(wall_info & 0x88){
 800fa4a:	4b23      	ldr	r3, [pc, #140]	; (800fad8 <searchC2+0x148>)
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d002      	beq.n	800fa5c <searchC2+0xcc>
					set_position();
 800fa56:	f7f5 fc93 	bl	8005380 <set_position>
				}else{
					half_sectionA2();
				}
				break;
 800fa5a:	e005      	b.n	800fa68 <searchC2+0xd8>
					half_sectionA2();
 800fa5c:	f7f5 fd50 	bl	8005500 <half_sectionA2>
				break;
 800fa60:	e002      	b.n	800fa68 <searchC2+0xd8>
			//----a左折スラローム----
			case 0x11:
				slalom_L902();
 800fa62:	f7f6 fcb1 	bl	80063c8 <slalom_L902>
				break;
 800fa66:	bf00      	nop
		}
		adv_pos();
 800fa68:	f001 f912 	bl	8010c90 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800fa6c:	4b19      	ldr	r3, [pc, #100]	; (800fad4 <searchC2+0x144>)
 800fa6e:	881b      	ldrh	r3, [r3, #0]
 800fa70:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fa74:	b2db      	uxtb	r3, r3
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d101      	bne.n	800fa7e <searchC2+0xee>
 800fa7a:	f001 f943 	bl	8010d04 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800fa7e:	4b19      	ldr	r3, [pc, #100]	; (800fae4 <searchC2+0x154>)
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	b2da      	uxtb	r2, r3
 800fa84:	4b18      	ldr	r3, [pc, #96]	; (800fae8 <searchC2+0x158>)
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d1c0      	bne.n	800fa0e <searchC2+0x7e>
 800fa8c:	4b15      	ldr	r3, [pc, #84]	; (800fae4 <searchC2+0x154>)
 800fa8e:	785b      	ldrb	r3, [r3, #1]
 800fa90:	b2da      	uxtb	r2, r3
 800fa92:	4b16      	ldr	r3, [pc, #88]	; (800faec <searchC2+0x15c>)
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d1b9      	bne.n	800fa0e <searchC2+0x7e>

	half_sectionD2();
 800fa9a:	f7f5 fd4b 	bl	8005534 <half_sectionD2>

	HAL_Delay(500);
 800fa9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800faa2:	f7f1 fabb 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800faa6:	f7f6 f87f 	bl	8005ba8 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800faaa:	2064      	movs	r0, #100	; 0x64
 800faac:	f7f5 fc1c 	bl	80052e8 <driveC2>
	degree_z = target_degree_z;
 800fab0:	4b0f      	ldr	r3, [pc, #60]	; (800faf0 <searchC2+0x160>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	4a0f      	ldr	r2, [pc, #60]	; (800faf4 <searchC2+0x164>)
 800fab6:	6013      	str	r3, [r2, #0]
	start_flag = 0;
 800fab8:	4b0f      	ldr	r3, [pc, #60]	; (800faf8 <searchC2+0x168>)
 800faba:	2200      	movs	r2, #0
 800fabc:	701a      	strb	r2, [r3, #0]

	if(!MF.FLAG.SCND){
 800fabe:	4b05      	ldr	r3, [pc, #20]	; (800fad4 <searchC2+0x144>)
 800fac0:	881b      	ldrh	r3, [r3, #0]
 800fac2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fac6:	b2db      	uxtb	r3, r3
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d101      	bne.n	800fad0 <searchC2+0x140>
		store_map_in_eeprom();
 800facc:	f002 ff76 	bl	80129bc <store_map_in_eeprom>
	}
}
 800fad0:	bf00      	nop
 800fad2:	bd80      	pop	{r7, pc}
 800fad4:	20000fac 	.word	0x20000fac
 800fad8:	20000300 	.word	0x20000300
 800fadc:	200012f4 	.word	0x200012f4
 800fae0:	20000c9c 	.word	0x20000c9c
 800fae4:	20000c54 	.word	0x20000c54
 800fae8:	20000bf1 	.word	0x20000bf1
 800faec:	20000b8c 	.word	0x20000b8c
 800faf0:	20000c40 	.word	0x20000c40
 800faf4:	20000b9c 	.word	0x20000b9c
 800faf8:	200012ec 	.word	0x200012ec

0800fafc <searchD>:
//searchD
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD(){
 800fafc:	b580      	push	{r7, lr}
 800fafe:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800fb00:	4b74      	ldr	r3, [pc, #464]	; (800fcd4 <searchD+0x1d8>)
 800fb02:	881b      	ldrh	r3, [r3, #0]
 800fb04:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fb08:	b2db      	uxtb	r3, r3
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d001      	beq.n	800fb12 <searchD+0x16>
		load_map_from_eeprom();
 800fb0e:	f002 ff8f 	bl	8012a30 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800fb12:	4b70      	ldr	r3, [pc, #448]	; (800fcd4 <searchD+0x1d8>)
 800fb14:	881b      	ldrh	r3, [r3, #0]
 800fb16:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d101      	bne.n	800fb24 <searchD+0x28>
 800fb20:	f002 fffe 	bl	8012b20 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800fb24:	4b6b      	ldr	r3, [pc, #428]	; (800fcd4 <searchD+0x1d8>)
 800fb26:	881b      	ldrh	r3, [r3, #0]
 800fb28:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fb2c:	b2db      	uxtb	r3, r3
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d106      	bne.n	800fb40 <searchD+0x44>
 800fb32:	4b69      	ldr	r3, [pc, #420]	; (800fcd8 <searchD+0x1dc>)
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800fb3a:	b2da      	uxtb	r2, r3
 800fb3c:	4b66      	ldr	r3, [pc, #408]	; (800fcd8 <searchD+0x1dc>)
 800fb3e:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800fb40:	4b64      	ldr	r3, [pc, #400]	; (800fcd4 <searchD+0x1d8>)
 800fb42:	881b      	ldrh	r3, [r3, #0]
 800fb44:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d101      	bne.n	800fb52 <searchD+0x56>
 800fb4e:	f001 f963 	bl	8010e18 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 800fb52:	f7f5 fc2b 	bl	80053ac <start_sectionA>
	adv_pos();
 800fb56:	f001 f89b 	bl	8010c90 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800fb5a:	4b5e      	ldr	r3, [pc, #376]	; (800fcd4 <searchD+0x1d8>)
 800fb5c:	881b      	ldrh	r3, [r3, #0]
 800fb5e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d101      	bne.n	800fb6c <searchD+0x70>
 800fb68:	f001 f956 	bl	8010e18 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800fb6c:	4b5b      	ldr	r3, [pc, #364]	; (800fcdc <searchD+0x1e0>)
 800fb6e:	2200      	movs	r2, #0
 800fb70:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800fb72:	f001 fb51 	bl	8011218 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800fb76:	f001 fe8d 	bl	8011894 <make_route>

	H_accel_flag = 0;
 800fb7a:	4b59      	ldr	r3, [pc, #356]	; (800fce0 <searchD+0x1e4>)
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800fb80:	4b56      	ldr	r3, [pc, #344]	; (800fcdc <searchD+0x1e0>)
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	1c5a      	adds	r2, r3, #1
 800fb86:	b2d1      	uxtb	r1, r2
 800fb88:	4a54      	ldr	r2, [pc, #336]	; (800fcdc <searchD+0x1e0>)
 800fb8a:	7011      	strb	r1, [r2, #0]
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	4b55      	ldr	r3, [pc, #340]	; (800fce4 <searchD+0x1e8>)
 800fb90:	5c9b      	ldrb	r3, [r3, r2]
 800fb92:	2b22      	cmp	r3, #34	; 0x22
 800fb94:	d053      	beq.n	800fc3e <searchD+0x142>
 800fb96:	2b22      	cmp	r3, #34	; 0x22
 800fb98:	dc02      	bgt.n	800fba0 <searchD+0xa4>
 800fb9a:	2b11      	cmp	r3, #17
 800fb9c:	d05f      	beq.n	800fc5e <searchD+0x162>
 800fb9e:	e061      	b.n	800fc64 <searchD+0x168>
 800fba0:	2b44      	cmp	r3, #68	; 0x44
 800fba2:	d049      	beq.n	800fc38 <searchD+0x13c>
 800fba4:	2b88      	cmp	r3, #136	; 0x88
 800fba6:	d15d      	bne.n	800fc64 <searchD+0x168>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND == 1 && MF.FLAG.ACCL2 == 1){
 800fba8:	4b4a      	ldr	r3, [pc, #296]	; (800fcd4 <searchD+0x1d8>)
 800fbaa:	881b      	ldrh	r3, [r3, #0]
 800fbac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fbb0:	b2db      	uxtb	r3, r3
 800fbb2:	2b01      	cmp	r3, #1
 800fbb4:	d13c      	bne.n	800fc30 <searchD+0x134>
 800fbb6:	4b47      	ldr	r3, [pc, #284]	; (800fcd4 <searchD+0x1d8>)
 800fbb8:	881b      	ldrh	r3, [r3, #0]
 800fbba:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800fbbe:	b2db      	uxtb	r3, r3
 800fbc0:	2b01      	cmp	r3, #1
 800fbc2:	d135      	bne.n	800fc30 <searchD+0x134>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800fbc4:	4b45      	ldr	r3, [pc, #276]	; (800fcdc <searchD+0x1e0>)
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	3b01      	subs	r3, #1
 800fbca:	4a46      	ldr	r2, [pc, #280]	; (800fce4 <searchD+0x1e8>)
 800fbcc:	5cd2      	ldrb	r2, [r2, r3]
 800fbce:	4b43      	ldr	r3, [pc, #268]	; (800fcdc <searchD+0x1e0>)
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	4619      	mov	r1, r3
 800fbd4:	4b43      	ldr	r3, [pc, #268]	; (800fce4 <searchD+0x1e8>)
 800fbd6:	5c5b      	ldrb	r3, [r3, r1]
 800fbd8:	4013      	ands	r3, r2
 800fbda:	b2db      	uxtb	r3, r3
 800fbdc:	2b88      	cmp	r3, #136	; 0x88
 800fbde:	d110      	bne.n	800fc02 <searchD+0x106>
 800fbe0:	4b3e      	ldr	r3, [pc, #248]	; (800fcdc <searchD+0x1e0>)
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	4b3f      	ldr	r3, [pc, #252]	; (800fce4 <searchD+0x1e8>)
 800fbe8:	5c9b      	ldrb	r3, [r3, r2]
 800fbea:	2bff      	cmp	r3, #255	; 0xff
 800fbec:	d009      	beq.n	800fc02 <searchD+0x106>
 800fbee:	4b3c      	ldr	r3, [pc, #240]	; (800fce0 <searchD+0x1e4>)
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d105      	bne.n	800fc02 <searchD+0x106>
						one_sectionA();
 800fbf6:	f7f5 fcf7 	bl	80055e8 <one_sectionA>
						H_accel_flag = 1;
 800fbfa:	4b39      	ldr	r3, [pc, #228]	; (800fce0 <searchD+0x1e4>)
 800fbfc:	2201      	movs	r2, #1
 800fbfe:	701a      	strb	r2, [r3, #0]
 800fc00:	e015      	b.n	800fc2e <searchD+0x132>
					}
					else if((route[r_cnt] & 0x55) && (H_accel_flag == 1)){
 800fc02:	4b36      	ldr	r3, [pc, #216]	; (800fcdc <searchD+0x1e0>)
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	461a      	mov	r2, r3
 800fc08:	4b36      	ldr	r3, [pc, #216]	; (800fce4 <searchD+0x1e8>)
 800fc0a:	5c9b      	ldrb	r3, [r3, r2]
 800fc0c:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d009      	beq.n	800fc28 <searchD+0x12c>
 800fc14:	4b32      	ldr	r3, [pc, #200]	; (800fce0 <searchD+0x1e4>)
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	2b01      	cmp	r3, #1
 800fc1a:	d105      	bne.n	800fc28 <searchD+0x12c>
						one_sectionD();
 800fc1c:	f7f5 fd0a 	bl	8005634 <one_sectionD>
						H_accel_flag = 0;
 800fc20:	4b2f      	ldr	r3, [pc, #188]	; (800fce0 <searchD+0x1e4>)
 800fc22:	2200      	movs	r2, #0
 800fc24:	701a      	strb	r2, [r3, #0]
 800fc26:	e002      	b.n	800fc2e <searchD+0x132>
					}else{
						one_sectionU();
 800fc28:	f7f5 fdee 	bl	8005808 <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800fc2c:	e003      	b.n	800fc36 <searchD+0x13a>
 800fc2e:	e002      	b.n	800fc36 <searchD+0x13a>
					}
				}else{
					one_sectionU();
 800fc30:	f7f5 fdea 	bl	8005808 <one_sectionU>
				}
				break;
 800fc34:	e016      	b.n	800fc64 <searchD+0x168>
 800fc36:	e015      	b.n	800fc64 <searchD+0x168>
			//----a右折スラローム----
			case 0x44:
				slalom_R90();
 800fc38:	f7f6 f88e 	bl	8005d58 <slalom_R90>
				break;
 800fc3c:	e012      	b.n	800fc64 <searchD+0x168>
			//----180回転----
			case 0x22:
				half_sectionD();
 800fc3e:	f7f5 fc4f 	bl	80054e0 <half_sectionD>
				rotate_180();
 800fc42:	f7f5 ffb1 	bl	8005ba8 <rotate_180>
				if(wall_info & 0x88){
 800fc46:	4b24      	ldr	r3, [pc, #144]	; (800fcd8 <searchD+0x1dc>)
 800fc48:	781b      	ldrb	r3, [r3, #0]
 800fc4a:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d002      	beq.n	800fc58 <searchD+0x15c>
					set_position();
 800fc52:	f7f5 fb95 	bl	8005380 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800fc56:	e005      	b.n	800fc64 <searchD+0x168>
					half_sectionA();
 800fc58:	f7f5 fc28 	bl	80054ac <half_sectionA>
				break;
 800fc5c:	e002      	b.n	800fc64 <searchD+0x168>
			//----a左折スラローム----
			case 0x11:
				slalom_L90();
 800fc5e:	f7f6 f98f 	bl	8005f80 <slalom_L90>
				break;
 800fc62:	bf00      	nop
		}
		adv_pos();
 800fc64:	f001 f814 	bl	8010c90 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800fc68:	4b1a      	ldr	r3, [pc, #104]	; (800fcd4 <searchD+0x1d8>)
 800fc6a:	881b      	ldrh	r3, [r3, #0]
 800fc6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d101      	bne.n	800fc7a <searchD+0x17e>
 800fc76:	f001 f845 	bl	8010d04 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800fc7a:	4b1b      	ldr	r3, [pc, #108]	; (800fce8 <searchD+0x1ec>)
 800fc7c:	781b      	ldrb	r3, [r3, #0]
 800fc7e:	b2da      	uxtb	r2, r3
 800fc80:	4b1a      	ldr	r3, [pc, #104]	; (800fcec <searchD+0x1f0>)
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	429a      	cmp	r2, r3
 800fc86:	f47f af7b 	bne.w	800fb80 <searchD+0x84>
 800fc8a:	4b17      	ldr	r3, [pc, #92]	; (800fce8 <searchD+0x1ec>)
 800fc8c:	785b      	ldrb	r3, [r3, #1]
 800fc8e:	b2da      	uxtb	r2, r3
 800fc90:	4b17      	ldr	r3, [pc, #92]	; (800fcf0 <searchD+0x1f4>)
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	f47f af73 	bne.w	800fb80 <searchD+0x84>

	half_sectionD();
 800fc9a:	f7f5 fc21 	bl	80054e0 <half_sectionD>

	HAL_Delay(500);
 800fc9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fca2:	f7f1 f9bb 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800fca6:	f7f5 ff7f 	bl	8005ba8 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800fcaa:	2064      	movs	r0, #100	; 0x64
 800fcac:	f7f5 fb1c 	bl	80052e8 <driveC2>
	degree_z = target_degree_z;
 800fcb0:	4b10      	ldr	r3, [pc, #64]	; (800fcf4 <searchD+0x1f8>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	4a10      	ldr	r2, [pc, #64]	; (800fcf8 <searchD+0x1fc>)
 800fcb6:	6013      	str	r3, [r2, #0]
	start_flag = 0;
 800fcb8:	4b10      	ldr	r3, [pc, #64]	; (800fcfc <searchD+0x200>)
 800fcba:	2200      	movs	r2, #0
 800fcbc:	701a      	strb	r2, [r3, #0]

	if(!MF.FLAG.SCND){
 800fcbe:	4b05      	ldr	r3, [pc, #20]	; (800fcd4 <searchD+0x1d8>)
 800fcc0:	881b      	ldrh	r3, [r3, #0]
 800fcc2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d101      	bne.n	800fcd0 <searchD+0x1d4>
		store_map_in_eeprom();
 800fccc:	f002 fe76 	bl	80129bc <store_map_in_eeprom>
	}
}
 800fcd0:	bf00      	nop
 800fcd2:	bd80      	pop	{r7, pc}
 800fcd4:	20000fac 	.word	0x20000fac
 800fcd8:	20000300 	.word	0x20000300
 800fcdc:	200012f4 	.word	0x200012f4
 800fce0:	20000301 	.word	0x20000301
 800fce4:	20000c9c 	.word	0x20000c9c
 800fce8:	20000c54 	.word	0x20000c54
 800fcec:	20000bf1 	.word	0x20000bf1
 800fcf0:	20000b8c 	.word	0x20000b8c
 800fcf4:	20000c40 	.word	0x20000c40
 800fcf8:	20000b9c 	.word	0x20000b9c
 800fcfc:	200012ec 	.word	0x200012ec

0800fd00 <searchD2>:
//searchD2
//aスラローム走行+既知区間加速でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchD2(){
 800fd00:	b580      	push	{r7, lr}
 800fd02:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 800fd04:	4b6f      	ldr	r3, [pc, #444]	; (800fec4 <searchD2+0x1c4>)
 800fd06:	881b      	ldrh	r3, [r3, #0]
 800fd08:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fd0c:	b2db      	uxtb	r3, r3
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d001      	beq.n	800fd16 <searchD2+0x16>
		load_map_from_eeprom();
 800fd12:	f002 fe8d 	bl	8012a30 <load_map_from_eeprom>
	}

	//====aスタート位置壁情報取得====
	if(!MF.FLAG.SCND)get_wall_info();										//a壁情報の初期化, 後壁はなくなる
 800fd16:	4b6b      	ldr	r3, [pc, #428]	; (800fec4 <searchD2+0x1c4>)
 800fd18:	881b      	ldrh	r3, [r3, #0]
 800fd1a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d101      	bne.n	800fd28 <searchD2+0x28>
 800fd24:	f002 fefc 	bl	8012b20 <get_wall_info>
	if(!MF.FLAG.SCND)wall_info &= ~0x88;										//a前壁は存在するはずがないので削除する
 800fd28:	4b66      	ldr	r3, [pc, #408]	; (800fec4 <searchD2+0x1c4>)
 800fd2a:	881b      	ldrh	r3, [r3, #0]
 800fd2c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fd30:	b2db      	uxtb	r3, r3
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d106      	bne.n	800fd44 <searchD2+0x44>
 800fd36:	4b64      	ldr	r3, [pc, #400]	; (800fec8 <searchD2+0x1c8>)
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	f003 0377 	and.w	r3, r3, #119	; 0x77
 800fd3e:	b2da      	uxtb	r2, r3
 800fd40:	4b61      	ldr	r3, [pc, #388]	; (800fec8 <searchD2+0x1c8>)
 800fd42:	701a      	strb	r2, [r3, #0]
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800fd44:	4b5f      	ldr	r3, [pc, #380]	; (800fec4 <searchD2+0x1c4>)
 800fd46:	881b      	ldrh	r3, [r3, #0]
 800fd48:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fd4c:	b2db      	uxtb	r3, r3
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d101      	bne.n	800fd56 <searchD2+0x56>
 800fd52:	f001 f861 	bl	8010e18 <write_map>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA2();
 800fd56:	f7f5 fb69 	bl	800542c <start_sectionA2>
	adv_pos();
 800fd5a:	f000 ff99 	bl	8010c90 <adv_pos>

	//====a歩数マップ・経路作成====
	if(!MF.FLAG.SCND)write_map();											//a壁情報を地図に記入
 800fd5e:	4b59      	ldr	r3, [pc, #356]	; (800fec4 <searchD2+0x1c4>)
 800fd60:	881b      	ldrh	r3, [r3, #0]
 800fd62:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fd66:	b2db      	uxtb	r3, r3
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d101      	bne.n	800fd70 <searchD2+0x70>
 800fd6c:	f001 f854 	bl	8010e18 <write_map>
	r_cnt = 0;												//a経路カウンタの初期化
 800fd70:	4b56      	ldr	r3, [pc, #344]	; (800fecc <searchD2+0x1cc>)
 800fd72:	2200      	movs	r2, #0
 800fd74:	701a      	strb	r2, [r3, #0]
	make_smap();											//a歩数マップ作成
 800fd76:	f001 fa4f 	bl	8011218 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 800fd7a:	f001 fd8b 	bl	8011894 <make_route>

	H_accel_flag = 0;
 800fd7e:	4b54      	ldr	r3, [pc, #336]	; (800fed0 <searchD2+0x1d0>)
 800fd80:	2200      	movs	r2, #0
 800fd82:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 800fd84:	4b51      	ldr	r3, [pc, #324]	; (800fecc <searchD2+0x1cc>)
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	1c5a      	adds	r2, r3, #1
 800fd8a:	b2d1      	uxtb	r1, r2
 800fd8c:	4a4f      	ldr	r2, [pc, #316]	; (800fecc <searchD2+0x1cc>)
 800fd8e:	7011      	strb	r1, [r2, #0]
 800fd90:	461a      	mov	r2, r3
 800fd92:	4b50      	ldr	r3, [pc, #320]	; (800fed4 <searchD2+0x1d4>)
 800fd94:	5c9b      	ldrb	r3, [r3, r2]
 800fd96:	2b22      	cmp	r3, #34	; 0x22
 800fd98:	d053      	beq.n	800fe42 <searchD2+0x142>
 800fd9a:	2b22      	cmp	r3, #34	; 0x22
 800fd9c:	dc02      	bgt.n	800fda4 <searchD2+0xa4>
 800fd9e:	2b11      	cmp	r3, #17
 800fda0:	d056      	beq.n	800fe50 <searchD2+0x150>
 800fda2:	e058      	b.n	800fe56 <searchD2+0x156>
 800fda4:	2b44      	cmp	r3, #68	; 0x44
 800fda6:	d049      	beq.n	800fe3c <searchD2+0x13c>
 800fda8:	2b88      	cmp	r3, #136	; 0x88
 800fdaa:	d154      	bne.n	800fe56 <searchD2+0x156>
			//----a前進----
			case 0x88:
				if(MF.FLAG.SCND == 1 && MF.FLAG.ACCL2 == 1){
 800fdac:	4b45      	ldr	r3, [pc, #276]	; (800fec4 <searchD2+0x1c4>)
 800fdae:	881b      	ldrh	r3, [r3, #0]
 800fdb0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fdb4:	b2db      	uxtb	r3, r3
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d13c      	bne.n	800fe34 <searchD2+0x134>
 800fdba:	4b42      	ldr	r3, [pc, #264]	; (800fec4 <searchD2+0x1c4>)
 800fdbc:	881b      	ldrh	r3, [r3, #0]
 800fdbe:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800fdc2:	b2db      	uxtb	r3, r3
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	d135      	bne.n	800fe34 <searchD2+0x134>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800fdc8:	4b40      	ldr	r3, [pc, #256]	; (800fecc <searchD2+0x1cc>)
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	3b01      	subs	r3, #1
 800fdce:	4a41      	ldr	r2, [pc, #260]	; (800fed4 <searchD2+0x1d4>)
 800fdd0:	5cd2      	ldrb	r2, [r2, r3]
 800fdd2:	4b3e      	ldr	r3, [pc, #248]	; (800fecc <searchD2+0x1cc>)
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	4b3e      	ldr	r3, [pc, #248]	; (800fed4 <searchD2+0x1d4>)
 800fdda:	5c5b      	ldrb	r3, [r3, r1]
 800fddc:	4013      	ands	r3, r2
 800fdde:	b2db      	uxtb	r3, r3
 800fde0:	2b88      	cmp	r3, #136	; 0x88
 800fde2:	d110      	bne.n	800fe06 <searchD2+0x106>
 800fde4:	4b39      	ldr	r3, [pc, #228]	; (800fecc <searchD2+0x1cc>)
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	461a      	mov	r2, r3
 800fdea:	4b3a      	ldr	r3, [pc, #232]	; (800fed4 <searchD2+0x1d4>)
 800fdec:	5c9b      	ldrb	r3, [r3, r2]
 800fdee:	2bff      	cmp	r3, #255	; 0xff
 800fdf0:	d009      	beq.n	800fe06 <searchD2+0x106>
 800fdf2:	4b37      	ldr	r3, [pc, #220]	; (800fed0 <searchD2+0x1d0>)
 800fdf4:	781b      	ldrb	r3, [r3, #0]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d105      	bne.n	800fe06 <searchD2+0x106>
						one_sectionA();
 800fdfa:	f7f5 fbf5 	bl	80055e8 <one_sectionA>
						H_accel_flag = 1;
 800fdfe:	4b34      	ldr	r3, [pc, #208]	; (800fed0 <searchD2+0x1d0>)
 800fe00:	2201      	movs	r2, #1
 800fe02:	701a      	strb	r2, [r3, #0]
 800fe04:	e015      	b.n	800fe32 <searchD2+0x132>
					}
					else if((route[r_cnt] & 0x55) && (H_accel_flag == 1)){
 800fe06:	4b31      	ldr	r3, [pc, #196]	; (800fecc <searchD2+0x1cc>)
 800fe08:	781b      	ldrb	r3, [r3, #0]
 800fe0a:	461a      	mov	r2, r3
 800fe0c:	4b31      	ldr	r3, [pc, #196]	; (800fed4 <searchD2+0x1d4>)
 800fe0e:	5c9b      	ldrb	r3, [r3, r2]
 800fe10:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d009      	beq.n	800fe2c <searchD2+0x12c>
 800fe18:	4b2d      	ldr	r3, [pc, #180]	; (800fed0 <searchD2+0x1d0>)
 800fe1a:	781b      	ldrb	r3, [r3, #0]
 800fe1c:	2b01      	cmp	r3, #1
 800fe1e:	d105      	bne.n	800fe2c <searchD2+0x12c>
						one_sectionD();
 800fe20:	f7f5 fc08 	bl	8005634 <one_sectionD>
						H_accel_flag = 0;
 800fe24:	4b2a      	ldr	r3, [pc, #168]	; (800fed0 <searchD2+0x1d0>)
 800fe26:	2200      	movs	r2, #0
 800fe28:	701a      	strb	r2, [r3, #0]
 800fe2a:	e002      	b.n	800fe32 <searchD2+0x132>
					}else{
						one_sectionU();
 800fe2c:	f7f5 fcec 	bl	8005808 <one_sectionU>
					if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) && (H_accel_flag == 0)){
 800fe30:	e003      	b.n	800fe3a <searchD2+0x13a>
 800fe32:	e002      	b.n	800fe3a <searchD2+0x13a>
					}
				}else{
					one_sectionU();
 800fe34:	f7f5 fce8 	bl	8005808 <one_sectionU>
				}
				break;
 800fe38:	e00d      	b.n	800fe56 <searchD2+0x156>
 800fe3a:	e00c      	b.n	800fe56 <searchD2+0x156>
			//----a右折スラローム----
			case 0x44:
				slalom_R902();
 800fe3c:	f7f6 f9b4 	bl	80061a8 <slalom_R902>

				break;
 800fe40:	e009      	b.n	800fe56 <searchD2+0x156>
			//----180回転----
			case 0x22:
				half_sectionD2();
 800fe42:	f7f5 fb77 	bl	8005534 <half_sectionD2>
				rotate_180();
 800fe46:	f7f5 feaf 	bl	8005ba8 <rotate_180>
/*				if(wall_info & 0x88){
					set_position2(0);
				}
*/				half_sectionA2();
 800fe4a:	f7f5 fb59 	bl	8005500 <half_sectionA2>
				break;
 800fe4e:	e002      	b.n	800fe56 <searchD2+0x156>
			//----a左折スラローム----
			case 0x11:
				slalom_L902();
 800fe50:	f7f6 faba 	bl	80063c8 <slalom_L902>
				break;
 800fe54:	bf00      	nop
		}
		adv_pos();
 800fe56:	f000 ff1b 	bl	8010c90 <adv_pos>
		if(!MF.FLAG.SCND)conf_route();
 800fe5a:	4b1a      	ldr	r3, [pc, #104]	; (800fec4 <searchD2+0x1c4>)
 800fe5c:	881b      	ldrh	r3, [r3, #0]
 800fe5e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fe62:	b2db      	uxtb	r3, r3
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d101      	bne.n	800fe6c <searchD2+0x16c>
 800fe68:	f000 ff4c 	bl	8010d04 <conf_route>

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 800fe6c:	4b1a      	ldr	r3, [pc, #104]	; (800fed8 <searchD2+0x1d8>)
 800fe6e:	781b      	ldrb	r3, [r3, #0]
 800fe70:	b2da      	uxtb	r2, r3
 800fe72:	4b1a      	ldr	r3, [pc, #104]	; (800fedc <searchD2+0x1dc>)
 800fe74:	781b      	ldrb	r3, [r3, #0]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d184      	bne.n	800fd84 <searchD2+0x84>
 800fe7a:	4b17      	ldr	r3, [pc, #92]	; (800fed8 <searchD2+0x1d8>)
 800fe7c:	785b      	ldrb	r3, [r3, #1]
 800fe7e:	b2da      	uxtb	r2, r3
 800fe80:	4b17      	ldr	r3, [pc, #92]	; (800fee0 <searchD2+0x1e0>)
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	429a      	cmp	r2, r3
 800fe86:	f47f af7d 	bne.w	800fd84 <searchD2+0x84>

	half_sectionD2();
 800fe8a:	f7f5 fb53 	bl	8005534 <half_sectionD2>

	HAL_Delay(500);
 800fe8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fe92:	f7f1 f8c3 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800fe96:	f7f5 fe87 	bl	8005ba8 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 800fe9a:	2064      	movs	r0, #100	; 0x64
 800fe9c:	f7f5 fa24 	bl	80052e8 <driveC2>
	degree_z = target_degree_z;
 800fea0:	4b10      	ldr	r3, [pc, #64]	; (800fee4 <searchD2+0x1e4>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	4a10      	ldr	r2, [pc, #64]	; (800fee8 <searchD2+0x1e8>)
 800fea6:	6013      	str	r3, [r2, #0]
	start_flag = 0;
 800fea8:	4b10      	ldr	r3, [pc, #64]	; (800feec <searchD2+0x1ec>)
 800feaa:	2200      	movs	r2, #0
 800feac:	701a      	strb	r2, [r3, #0]

	if(!MF.FLAG.SCND){
 800feae:	4b05      	ldr	r3, [pc, #20]	; (800fec4 <searchD2+0x1c4>)
 800feb0:	881b      	ldrh	r3, [r3, #0]
 800feb2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d101      	bne.n	800fec0 <searchD2+0x1c0>
		store_map_in_eeprom();
 800febc:	f002 fd7e 	bl	80129bc <store_map_in_eeprom>
	}
}
 800fec0:	bf00      	nop
 800fec2:	bd80      	pop	{r7, pc}
 800fec4:	20000fac 	.word	0x20000fac
 800fec8:	20000300 	.word	0x20000300
 800fecc:	200012f4 	.word	0x200012f4
 800fed0:	20000301 	.word	0x20000301
 800fed4:	20000c9c 	.word	0x20000c9c
 800fed8:	20000c54 	.word	0x20000c54
 800fedc:	20000bf1 	.word	0x20000bf1
 800fee0:	20000b8c 	.word	0x20000b8c
 800fee4:	20000c40 	.word	0x20000c40
 800fee8:	20000b9c 	.word	0x20000b9c
 800feec:	200012ec 	.word	0x200012ec

0800fef0 <searchE>:
//searchE
//a未知壁を含むマスを仮goal座標とし、スラローム連続走行で全マスに進む。仮goalを連続的に変化させる。全面探索終了後は半区画減速
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchE(){
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0

	int i = 0;
 800fef6:	2300      	movs	r3, #0
 800fef8:	607b      	str	r3, [r7, #4]
	int j = 0;
 800fefa:	2300      	movs	r3, #0
 800fefc:	603b      	str	r3, [r7, #0]
	do {
		if(i == 0){
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d111      	bne.n	800ff28 <searchE+0x38>
			//====a前に壁が無い想定で問答無用で前進====
			half_sectionA();
 800ff04:	f7f5 fad2 	bl	80054ac <half_sectionA>
			adv_pos();
 800ff08:	f000 fec2 	bl	8010c90 <adv_pos>
			write_map();														//地図の初期化
 800ff0c:	f000 ff84 	bl	8010e18 <write_map>

			//====a歩数等初期化====
			m_step = r_cnt = 0;													//歩数と経路カウンタの初期化
 800ff10:	4b42      	ldr	r3, [pc, #264]	; (801001c <searchE+0x12c>)
 800ff12:	2200      	movs	r2, #0
 800ff14:	701a      	strb	r2, [r3, #0]
 800ff16:	4b42      	ldr	r3, [pc, #264]	; (8010020 <searchE+0x130>)
 800ff18:	2200      	movs	r2, #0
 800ff1a:	801a      	strh	r2, [r3, #0]
			find_pregoal();														//仮goalまでの歩数マップの初期化
 800ff1c:	f001 fe08 	bl	8011b30 <find_pregoal>
			make_smap2();
 800ff20:	f001 fff2 	bl	8011f08 <make_smap2>
			make_route();														//最短経路探索(route配列に動作が格納される)
 800ff24:	f001 fcb6 	bl	8011894 <make_route>
		}

		//====a探索走行====
		do {
			//----a進行----
			switch (route[r_cnt++]) {										//route配列によって進行を決定。経路カウンタを進める
 800ff28:	4b3c      	ldr	r3, [pc, #240]	; (801001c <searchE+0x12c>)
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	1c5a      	adds	r2, r3, #1
 800ff2e:	b2d1      	uxtb	r1, r2
 800ff30:	4a3a      	ldr	r2, [pc, #232]	; (801001c <searchE+0x12c>)
 800ff32:	7011      	strb	r1, [r2, #0]
 800ff34:	461a      	mov	r2, r3
 800ff36:	4b3b      	ldr	r3, [pc, #236]	; (8010024 <searchE+0x134>)
 800ff38:	5c9b      	ldrb	r3, [r3, r2]
 800ff3a:	2b22      	cmp	r3, #34	; 0x22
 800ff3c:	d00e      	beq.n	800ff5c <searchE+0x6c>
 800ff3e:	2b22      	cmp	r3, #34	; 0x22
 800ff40:	dc02      	bgt.n	800ff48 <searchE+0x58>
 800ff42:	2b11      	cmp	r3, #17
 800ff44:	d01a      	beq.n	800ff7c <searchE+0x8c>
 800ff46:	e01c      	b.n	800ff82 <searchE+0x92>
 800ff48:	2b44      	cmp	r3, #68	; 0x44
 800ff4a:	d004      	beq.n	800ff56 <searchE+0x66>
 800ff4c:	2b88      	cmp	r3, #136	; 0x88
 800ff4e:	d118      	bne.n	800ff82 <searchE+0x92>
				//----a前進----
			case 0x88:
				one_sectionU();
 800ff50:	f7f5 fc5a 	bl	8005808 <one_sectionU>
				break;
 800ff54:	e015      	b.n	800ff82 <searchE+0x92>
				//----a右折----
			case 0x44:
				slalom_R90();
 800ff56:	f7f5 feff 	bl	8005d58 <slalom_R90>
				break;
 800ff5a:	e012      	b.n	800ff82 <searchE+0x92>
				//----180回転----
			case 0x22:
				half_sectionD();
 800ff5c:	f7f5 fac0 	bl	80054e0 <half_sectionD>
				rotate_180();
 800ff60:	f7f5 fe22 	bl	8005ba8 <rotate_180>
				if(wall_info & 0x88){
 800ff64:	4b30      	ldr	r3, [pc, #192]	; (8010028 <searchE+0x138>)
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	f003 0388 	and.w	r3, r3, #136	; 0x88
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d002      	beq.n	800ff76 <searchE+0x86>
					set_position();
 800ff70:	f7f5 fa06 	bl	8005380 <set_position>
				}else{
					half_sectionA();
				}
				break;
 800ff74:	e005      	b.n	800ff82 <searchE+0x92>
					half_sectionA();
 800ff76:	f7f5 fa99 	bl	80054ac <half_sectionA>
				break;
 800ff7a:	e002      	b.n	800ff82 <searchE+0x92>
				//----a左折----
			case 0x11:
				slalom_L90();
 800ff7c:	f7f6 f800 	bl	8005f80 <slalom_L90>
				break;
 800ff80:	bf00      	nop
			}
			adv_pos();														//aマイクロマウス内部位置情報でも前進処理
 800ff82:	f000 fe85 	bl	8010c90 <adv_pos>
			j++;
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	3301      	adds	r3, #1
 800ff8a:	603b      	str	r3, [r7, #0]
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	2b96      	cmp	r3, #150	; 0x96
 800ff90:	dc0e      	bgt.n	800ffb0 <searchE+0xc0>

		} while ((mouse.x != pregoal_x) || (mouse.y != pregoal_y));			//a現在座標と仮goal座標が等しくなるまで実行
 800ff92:	4b26      	ldr	r3, [pc, #152]	; (801002c <searchE+0x13c>)
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	b2da      	uxtb	r2, r3
 800ff98:	4b25      	ldr	r3, [pc, #148]	; (8010030 <searchE+0x140>)
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	429a      	cmp	r2, r3
 800ff9e:	d1c3      	bne.n	800ff28 <searchE+0x38>
 800ffa0:	4b22      	ldr	r3, [pc, #136]	; (801002c <searchE+0x13c>)
 800ffa2:	785b      	ldrb	r3, [r3, #1]
 800ffa4:	b2da      	uxtb	r2, r3
 800ffa6:	4b23      	ldr	r3, [pc, #140]	; (8010034 <searchE+0x144>)
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	d1bc      	bne.n	800ff28 <searchE+0x38>
 800ffae:	e000      	b.n	800ffb2 <searchE+0xc2>
			if (j > 150) break;												//a移動マス数が250以上になった場合全面探索を中止
 800ffb0:	bf00      	nop

		get_wall_info();													//a壁情報の初期化, 後壁はなくなる
 800ffb2:	f002 fdb5 	bl	8012b20 <get_wall_info>
		write_map();														//a地図の初期化
 800ffb6:	f000 ff2f 	bl	8010e18 <write_map>
		//printf("get pregoal, x = %d, y = %d\n", mouse.x, mouse.y);

		//====a歩数等初期化====
		m_step = r_cnt = 0;													//a歩数と経路カウンタの初期化
 800ffba:	4b18      	ldr	r3, [pc, #96]	; (801001c <searchE+0x12c>)
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	701a      	strb	r2, [r3, #0]
 800ffc0:	4b17      	ldr	r3, [pc, #92]	; (8010020 <searchE+0x130>)
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	801a      	strh	r2, [r3, #0]

		find_pregoal();														//a仮goalまでの歩数マップの初期化
 800ffc6:	f001 fdb3 	bl	8011b30 <find_pregoal>
		if (allmap_comp_flag) {
 800ffca:	4b1b      	ldr	r3, [pc, #108]	; (8010038 <searchE+0x148>)
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d002      	beq.n	800ffd8 <searchE+0xe8>
			//printf("get allmap_comp_flag\n");
			half_sectionD();
 800ffd2:	f7f5 fa85 	bl	80054e0 <half_sectionD>
			break;
 800ffd6:	e00e      	b.n	800fff6 <searchE+0x106>
		}
		make_smap2();
 800ffd8:	f001 ff96 	bl	8011f08 <make_smap2>
		make_route();														//a最短経路探索(route配列に動作が格納される)
 800ffdc:	f001 fc5a 	bl	8011894 <make_route>

		if (j > 150) {
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	2b96      	cmp	r3, #150	; 0x96
 800ffe4:	dc06      	bgt.n	800fff4 <searchE+0x104>
			//printf("j = %d\n", j);
			break;															//a移動マス数が250以上になった場合全面探索を中止
		}
		i++;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	3301      	adds	r3, #1
 800ffea:	607b      	str	r3, [r7, #4]
		//printf("i = %d\n", i);

	} while (i < 150);														//a仮goalへの到着が130回以上になった場合全面探索を中止
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2b95      	cmp	r3, #149	; 0x95
 800fff0:	dd85      	ble.n	800fefe <searchE+0xe>
 800fff2:	e000      	b.n	800fff6 <searchE+0x106>
			break;															//a移動マス数が250以上になった場合全面探索を中止
 800fff4:	bf00      	nop
	//printf("i = %d\n", i);
	//printf("fin\n");

	HAL_Delay(500);
 800fff6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fffa:	f7f1 f80f 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 800fffe:	f7f5 fdd3 	bl	8005ba8 <rotate_180>

	if(!MF.FLAG.SCND){
 8010002:	4b0e      	ldr	r3, [pc, #56]	; (801003c <searchE+0x14c>)
 8010004:	881b      	ldrh	r3, [r3, #0]
 8010006:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801000a:	b2db      	uxtb	r3, r3
 801000c:	2b00      	cmp	r3, #0
 801000e:	d101      	bne.n	8010014 <searchE+0x124>
		store_map_in_eeprom();
 8010010:	f002 fcd4 	bl	80129bc <store_map_in_eeprom>
	}
}
 8010014:	bf00      	nop
 8010016:	3708      	adds	r7, #8
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}
 801001c:	200012f4 	.word	0x200012f4
 8010020:	20000386 	.word	0x20000386
 8010024:	20000c9c 	.word	0x20000c9c
 8010028:	20000300 	.word	0x20000300
 801002c:	20000c54 	.word	0x20000c54
 8010030:	20000da4 	.word	0x20000da4
 8010034:	20000fc4 	.word	0x20000fc4
 8010038:	20000bf0 	.word	0x20000bf0
 801003c:	20000fac 	.word	0x20000fac

08010040 <searchF3>:
//searchF3
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベースでgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF3(){
 8010040:	b580      	push	{r7, lr}
 8010042:	b082      	sub	sp, #8
 8010044:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 8010046:	4b56      	ldr	r3, [pc, #344]	; (80101a0 <searchF3+0x160>)
 8010048:	881b      	ldrh	r3, [r3, #0]
 801004a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801004e:	b2db      	uxtb	r3, r3
 8010050:	2b00      	cmp	r3, #0
 8010052:	d001      	beq.n	8010058 <searchF3+0x18>
		load_map_from_eeprom();
 8010054:	f002 fcec 	bl	8012a30 <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 8010058:	f000 fe1a 	bl	8010c90 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 801005c:	f001 f8dc 	bl	8011218 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 8010060:	f001 fc18 	bl	8011894 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 8010064:	4b4f      	ldr	r3, [pc, #316]	; (80101a4 <searchF3+0x164>)
 8010066:	2200      	movs	r2, #0
 8010068:	701a      	strb	r2, [r3, #0]
	pass_route2();
 801006a:	f002 f871 	bl	8012150 <pass_route2>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 801006e:	f7f5 f99d 	bl	80053ac <start_sectionA>

	H_accel_flag = 0;
 8010072:	4b4d      	ldr	r3, [pc, #308]	; (80101a8 <searchF3+0x168>)
 8010074:	2200      	movs	r2, #0
 8010076:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 8010078:	4b4a      	ldr	r3, [pc, #296]	; (80101a4 <searchF3+0x164>)
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	1c5a      	adds	r2, r3, #1
 801007e:	b2d1      	uxtb	r1, r2
 8010080:	4a48      	ldr	r2, [pc, #288]	; (80101a4 <searchF3+0x164>)
 8010082:	7011      	strb	r1, [r2, #0]
 8010084:	461a      	mov	r2, r3
 8010086:	4b49      	ldr	r3, [pc, #292]	; (80101ac <searchF3+0x16c>)
 8010088:	569b      	ldrsb	r3, [r3, r2]
 801008a:	f113 0f04 	cmn.w	r3, #4
 801008e:	d01e      	beq.n	80100ce <searchF3+0x8e>
 8010090:	f113 0f04 	cmn.w	r3, #4
 8010094:	dc09      	bgt.n	80100aa <searchF3+0x6a>
 8010096:	f113 0f06 	cmn.w	r3, #6
 801009a:	d01e      	beq.n	80100da <searchF3+0x9a>
 801009c:	f113 0f06 	cmn.w	r3, #6
 80100a0:	dc18      	bgt.n	80100d4 <searchF3+0x94>
 80100a2:	f113 0f72 	cmn.w	r3, #114	; 0x72
 80100a6:	d01b      	beq.n	80100e0 <searchF3+0xa0>
 80100a8:	e01f      	b.n	80100ea <searchF3+0xaa>
 80100aa:	f113 0f02 	cmn.w	r3, #2
 80100ae:	d008      	beq.n	80100c2 <searchF3+0x82>
 80100b0:	f113 0f02 	cmn.w	r3, #2
 80100b4:	db08      	blt.n	80100c8 <searchF3+0x88>
 80100b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100ba:	d116      	bne.n	80100ea <searchF3+0xaa>
			//----a右スラローム----
			case -1:
				slalom_R90();
 80100bc:	f7f5 fe4c 	bl	8005d58 <slalom_R90>
				break;
 80100c0:	e048      	b.n	8010154 <searchF3+0x114>

			//----a左スラローム----
			case -2:
				slalom_L90();
 80100c2:	f7f5 ff5d 	bl	8005f80 <slalom_L90>
				break;
 80100c6:	e045      	b.n	8010154 <searchF3+0x114>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 80100c8:	f7f6 fa8a 	bl	80065e0 <Lslalom_R90>
				break;
 80100cc:	e042      	b.n	8010154 <searchF3+0x114>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 80100ce:	f7f6 fb85 	bl	80067dc <Lslalom_L90>
				break;
 80100d2:	e03f      	b.n	8010154 <searchF3+0x114>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 80100d4:	f7f7 f88e 	bl	80071f4 <Lslalom_R180>
				break;
 80100d8:	e03c      	b.n	8010154 <searchF3+0x114>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 80100da:	f7f7 f98d 	bl	80073f8 <Lslalom_L180>
				break;
 80100de:	e039      	b.n	8010154 <searchF3+0x114>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 80100e0:	f7f5 fd62 	bl	8005ba8 <rotate_180>
				rotate_180();
 80100e4:	f7f5 fd60 	bl	8005ba8 <rotate_180>
				while(1);
 80100e8:	e7fe      	b.n	80100e8 <searchF3+0xa8>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 80100ea:	4b2e      	ldr	r3, [pc, #184]	; (80101a4 <searchF3+0x164>)
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	3b01      	subs	r3, #1
 80100f0:	4a2e      	ldr	r2, [pc, #184]	; (80101ac <searchF3+0x16c>)
 80100f2:	56d3      	ldrsb	r3, [r2, r3]
 80100f4:	2b03      	cmp	r3, #3
 80100f6:	dc11      	bgt.n	801011c <searchF3+0xdc>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 80100f8:	2300      	movs	r3, #0
 80100fa:	607b      	str	r3, [r7, #4]
 80100fc:	e004      	b.n	8010108 <searchF3+0xc8>
						half_sectionU();
 80100fe:	f7f5 fa53 	bl	80055a8 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	3301      	adds	r3, #1
 8010106:	607b      	str	r3, [r7, #4]
 8010108:	4b26      	ldr	r3, [pc, #152]	; (80101a4 <searchF3+0x164>)
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	3b01      	subs	r3, #1
 801010e:	4a27      	ldr	r2, [pc, #156]	; (80101ac <searchF3+0x16c>)
 8010110:	56d3      	ldrsb	r3, [r2, r3]
 8010112:	461a      	mov	r2, r3
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	4293      	cmp	r3, r2
 8010118:	dbf1      	blt.n	80100fe <searchF3+0xbe>
						half_sectionU();
					}
					one_sectionD();
					H_accel_flag = 0;
				}
				break;
 801011a:	e01a      	b.n	8010152 <searchF3+0x112>
					one_sectionA();
 801011c:	f7f5 fa64 	bl	80055e8 <one_sectionA>
					H_accel_flag = 1;
 8010120:	4b21      	ldr	r3, [pc, #132]	; (80101a8 <searchF3+0x168>)
 8010122:	2201      	movs	r2, #1
 8010124:	701a      	strb	r2, [r3, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 8010126:	2300      	movs	r3, #0
 8010128:	603b      	str	r3, [r7, #0]
 801012a:	e004      	b.n	8010136 <searchF3+0xf6>
						half_sectionU();
 801012c:	f7f5 fa3c 	bl	80055a8 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	3301      	adds	r3, #1
 8010134:	603b      	str	r3, [r7, #0]
 8010136:	4b1b      	ldr	r3, [pc, #108]	; (80101a4 <searchF3+0x164>)
 8010138:	781b      	ldrb	r3, [r3, #0]
 801013a:	3b01      	subs	r3, #1
 801013c:	4a1b      	ldr	r2, [pc, #108]	; (80101ac <searchF3+0x16c>)
 801013e:	56d3      	ldrsb	r3, [r2, r3]
 8010140:	3b04      	subs	r3, #4
 8010142:	683a      	ldr	r2, [r7, #0]
 8010144:	429a      	cmp	r2, r3
 8010146:	dbf1      	blt.n	801012c <searchF3+0xec>
					one_sectionD();
 8010148:	f7f5 fa74 	bl	8005634 <one_sectionD>
					H_accel_flag = 0;
 801014c:	4b16      	ldr	r3, [pc, #88]	; (80101a8 <searchF3+0x168>)
 801014e:	2200      	movs	r2, #0
 8010150:	701a      	strb	r2, [r3, #0]
				break;
 8010152:	bf00      	nop
		}
//		adv_pos2(pass[p_cnt-1]);

	}while(pass[p_cnt] != -114);
 8010154:	4b13      	ldr	r3, [pc, #76]	; (80101a4 <searchF3+0x164>)
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	461a      	mov	r2, r3
 801015a:	4b14      	ldr	r3, [pc, #80]	; (80101ac <searchF3+0x16c>)
 801015c:	569b      	ldrsb	r3, [r3, r2]
 801015e:	f113 0f72 	cmn.w	r3, #114	; 0x72
 8010162:	d189      	bne.n	8010078 <searchF3+0x38>

	mouse.x = goal_x;
 8010164:	4b12      	ldr	r3, [pc, #72]	; (80101b0 <searchF3+0x170>)
 8010166:	781a      	ldrb	r2, [r3, #0]
 8010168:	4b12      	ldr	r3, [pc, #72]	; (80101b4 <searchF3+0x174>)
 801016a:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 801016c:	4b12      	ldr	r3, [pc, #72]	; (80101b8 <searchF3+0x178>)
 801016e:	781a      	ldrb	r2, [r3, #0]
 8010170:	4b10      	ldr	r3, [pc, #64]	; (80101b4 <searchF3+0x174>)
 8010172:	705a      	strb	r2, [r3, #1]

	half_sectionD();
 8010174:	f7f5 f9b4 	bl	80054e0 <half_sectionD>

	HAL_Delay(500);
 8010178:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801017c:	f7f0 ff4e 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 8010180:	f7f5 fd12 	bl	8005ba8 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8010184:	2064      	movs	r0, #100	; 0x64
 8010186:	f7f5 f8af 	bl	80052e8 <driveC2>
	degree_z = target_degree_z;
 801018a:	4b0c      	ldr	r3, [pc, #48]	; (80101bc <searchF3+0x17c>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	4a0c      	ldr	r2, [pc, #48]	; (80101c0 <searchF3+0x180>)
 8010190:	6013      	str	r3, [r2, #0]
	start_flag = 0;
 8010192:	4b0c      	ldr	r3, [pc, #48]	; (80101c4 <searchF3+0x184>)
 8010194:	2200      	movs	r2, #0
 8010196:	701a      	strb	r2, [r3, #0]

}
 8010198:	bf00      	nop
 801019a:	3708      	adds	r7, #8
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	20000fac 	.word	0x20000fac
 80101a4:	200002e8 	.word	0x200002e8
 80101a8:	20000301 	.word	0x20000301
 80101ac:	20000388 	.word	0x20000388
 80101b0:	20000bf1 	.word	0x20000bf1
 80101b4:	20000c54 	.word	0x20000c54
 80101b8:	20000b8c 	.word	0x20000b8c
 80101bc:	20000c40 	.word	0x20000c40
 80101c0:	20000b9c 	.word	0x20000b9c
 80101c4:	200012ec 	.word	0x200012ec

080101c8 <searchF32>:
//searchF32
//aスラローム+既知区間加速+pass圧縮+機体方向&位置未更新+半区画ベース High Speedでgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF32(){
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 80101ce:	4b56      	ldr	r3, [pc, #344]	; (8010328 <searchF32+0x160>)
 80101d0:	881b      	ldrh	r3, [r3, #0]
 80101d2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d001      	beq.n	80101e0 <searchF32+0x18>
		load_map_from_eeprom();
 80101dc:	f002 fc28 	bl	8012a30 <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 80101e0:	f000 fd56 	bl	8010c90 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 80101e4:	f001 f818 	bl	8011218 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 80101e8:	f001 fb54 	bl	8011894 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 80101ec:	4b4f      	ldr	r3, [pc, #316]	; (801032c <searchF32+0x164>)
 80101ee:	2200      	movs	r2, #0
 80101f0:	701a      	strb	r2, [r3, #0]
	pass_route2();
 80101f2:	f001 ffad 	bl	8012150 <pass_route2>

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA2();
 80101f6:	f7f5 f919 	bl	800542c <start_sectionA2>

	H_accel_flag = 0;
 80101fa:	4b4d      	ldr	r3, [pc, #308]	; (8010330 <searchF32+0x168>)
 80101fc:	2200      	movs	r2, #0
 80101fe:	701a      	strb	r2, [r3, #0]

	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 8010200:	4b4a      	ldr	r3, [pc, #296]	; (801032c <searchF32+0x164>)
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	1c5a      	adds	r2, r3, #1
 8010206:	b2d1      	uxtb	r1, r2
 8010208:	4a48      	ldr	r2, [pc, #288]	; (801032c <searchF32+0x164>)
 801020a:	7011      	strb	r1, [r2, #0]
 801020c:	461a      	mov	r2, r3
 801020e:	4b49      	ldr	r3, [pc, #292]	; (8010334 <searchF32+0x16c>)
 8010210:	569b      	ldrsb	r3, [r3, r2]
 8010212:	f113 0f04 	cmn.w	r3, #4
 8010216:	d01e      	beq.n	8010256 <searchF32+0x8e>
 8010218:	f113 0f04 	cmn.w	r3, #4
 801021c:	dc09      	bgt.n	8010232 <searchF32+0x6a>
 801021e:	f113 0f06 	cmn.w	r3, #6
 8010222:	d01e      	beq.n	8010262 <searchF32+0x9a>
 8010224:	f113 0f06 	cmn.w	r3, #6
 8010228:	dc18      	bgt.n	801025c <searchF32+0x94>
 801022a:	f113 0f72 	cmn.w	r3, #114	; 0x72
 801022e:	d01b      	beq.n	8010268 <searchF32+0xa0>
 8010230:	e01f      	b.n	8010272 <searchF32+0xaa>
 8010232:	f113 0f02 	cmn.w	r3, #2
 8010236:	d008      	beq.n	801024a <searchF32+0x82>
 8010238:	f113 0f02 	cmn.w	r3, #2
 801023c:	db08      	blt.n	8010250 <searchF32+0x88>
 801023e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010242:	d116      	bne.n	8010272 <searchF32+0xaa>
			//----a右スラローム----
			case -1:
				slalom_R902();
 8010244:	f7f5 ffb0 	bl	80061a8 <slalom_R902>
				break;
 8010248:	e048      	b.n	80102dc <searchF32+0x114>

			//----a左スラローム----
			case -2:
				slalom_L902();
 801024a:	f7f6 f8bd 	bl	80063c8 <slalom_L902>
				break;
 801024e:	e045      	b.n	80102dc <searchF32+0x114>

			//----a大回り右90----
			case -3:
				Lslalom_R902();
 8010250:	f7f6 fbc2 	bl	80069d8 <Lslalom_R902>
				break;
 8010254:	e042      	b.n	80102dc <searchF32+0x114>

			//----a大回り左90----
			case -4:
				Lslalom_L902();
 8010256:	f7f6 fcbf 	bl	8006bd8 <Lslalom_L902>
				break;
 801025a:	e03f      	b.n	80102dc <searchF32+0x114>

			//----a大回り右180----
			case -5:
				Lslalom_R1802();
 801025c:	f7f7 f9ce 	bl	80075fc <Lslalom_R1802>
				break;
 8010260:	e03c      	b.n	80102dc <searchF32+0x114>

			//----a大回り左180----
			case -6:
				Lslalom_L1802();
 8010262:	f7f7 facd 	bl	8007800 <Lslalom_L1802>
				break;
 8010266:	e039      	b.n	80102dc <searchF32+0x114>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 8010268:	f7f5 fc9e 	bl	8005ba8 <rotate_180>
				rotate_180();
 801026c:	f7f5 fc9c 	bl	8005ba8 <rotate_180>
				while(1);
 8010270:	e7fe      	b.n	8010270 <searchF32+0xa8>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 8010272:	4b2e      	ldr	r3, [pc, #184]	; (801032c <searchF32+0x164>)
 8010274:	781b      	ldrb	r3, [r3, #0]
 8010276:	3b01      	subs	r3, #1
 8010278:	4a2e      	ldr	r2, [pc, #184]	; (8010334 <searchF32+0x16c>)
 801027a:	56d3      	ldrsb	r3, [r2, r3]
 801027c:	2b03      	cmp	r3, #3
 801027e:	dc11      	bgt.n	80102a4 <searchF32+0xdc>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 8010280:	2300      	movs	r3, #0
 8010282:	607b      	str	r3, [r7, #4]
 8010284:	e004      	b.n	8010290 <searchF32+0xc8>
						half_sectionU();
 8010286:	f7f5 f98f 	bl	80055a8 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	3301      	adds	r3, #1
 801028e:	607b      	str	r3, [r7, #4]
 8010290:	4b26      	ldr	r3, [pc, #152]	; (801032c <searchF32+0x164>)
 8010292:	781b      	ldrb	r3, [r3, #0]
 8010294:	3b01      	subs	r3, #1
 8010296:	4a27      	ldr	r2, [pc, #156]	; (8010334 <searchF32+0x16c>)
 8010298:	56d3      	ldrsb	r3, [r2, r3]
 801029a:	461a      	mov	r2, r3
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	4293      	cmp	r3, r2
 80102a0:	dbf1      	blt.n	8010286 <searchF32+0xbe>
						half_sectionU();
					}
					one_sectionD2();
					H_accel_flag = 0;
				}
				break;
 80102a2:	e01a      	b.n	80102da <searchF32+0x112>
					one_sectionA2();
 80102a4:	f7f5 fa28 	bl	80056f8 <one_sectionA2>
					H_accel_flag = 1;
 80102a8:	4b21      	ldr	r3, [pc, #132]	; (8010330 <searchF32+0x168>)
 80102aa:	2201      	movs	r2, #1
 80102ac:	701a      	strb	r2, [r3, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 80102ae:	2300      	movs	r3, #0
 80102b0:	603b      	str	r3, [r7, #0]
 80102b2:	e004      	b.n	80102be <searchF32+0xf6>
						half_sectionU();
 80102b4:	f7f5 f978 	bl	80055a8 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	3301      	adds	r3, #1
 80102bc:	603b      	str	r3, [r7, #0]
 80102be:	4b1b      	ldr	r3, [pc, #108]	; (801032c <searchF32+0x164>)
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	3b01      	subs	r3, #1
 80102c4:	4a1b      	ldr	r2, [pc, #108]	; (8010334 <searchF32+0x16c>)
 80102c6:	56d3      	ldrsb	r3, [r2, r3]
 80102c8:	3b04      	subs	r3, #4
 80102ca:	683a      	ldr	r2, [r7, #0]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	dbf1      	blt.n	80102b4 <searchF32+0xec>
					one_sectionD2();
 80102d0:	f7f5 fa38 	bl	8005744 <one_sectionD2>
					H_accel_flag = 0;
 80102d4:	4b16      	ldr	r3, [pc, #88]	; (8010330 <searchF32+0x168>)
 80102d6:	2200      	movs	r2, #0
 80102d8:	701a      	strb	r2, [r3, #0]
				break;
 80102da:	bf00      	nop
		}
//		adv_pos2(pass[p_cnt-1]);

	}while(pass[p_cnt] != -114);
 80102dc:	4b13      	ldr	r3, [pc, #76]	; (801032c <searchF32+0x164>)
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	461a      	mov	r2, r3
 80102e2:	4b14      	ldr	r3, [pc, #80]	; (8010334 <searchF32+0x16c>)
 80102e4:	569b      	ldrsb	r3, [r3, r2]
 80102e6:	f113 0f72 	cmn.w	r3, #114	; 0x72
 80102ea:	d189      	bne.n	8010200 <searchF32+0x38>

	mouse.x = goal_x;
 80102ec:	4b12      	ldr	r3, [pc, #72]	; (8010338 <searchF32+0x170>)
 80102ee:	781a      	ldrb	r2, [r3, #0]
 80102f0:	4b12      	ldr	r3, [pc, #72]	; (801033c <searchF32+0x174>)
 80102f2:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 80102f4:	4b12      	ldr	r3, [pc, #72]	; (8010340 <searchF32+0x178>)
 80102f6:	781a      	ldrb	r2, [r3, #0]
 80102f8:	4b10      	ldr	r3, [pc, #64]	; (801033c <searchF32+0x174>)
 80102fa:	705a      	strb	r2, [r3, #1]

	half_sectionD2();
 80102fc:	f7f5 f91a 	bl	8005534 <half_sectionD2>

	HAL_Delay(500);
 8010300:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010304:	f7f0 fe8a 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 8010308:	f7f5 fc4e 	bl	8005ba8 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 801030c:	2064      	movs	r0, #100	; 0x64
 801030e:	f7f4 ffeb 	bl	80052e8 <driveC2>
	degree_z = target_degree_z;
 8010312:	4b0c      	ldr	r3, [pc, #48]	; (8010344 <searchF32+0x17c>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	4a0c      	ldr	r2, [pc, #48]	; (8010348 <searchF32+0x180>)
 8010318:	6013      	str	r3, [r2, #0]
	start_flag = 0;
 801031a:	4b0c      	ldr	r3, [pc, #48]	; (801034c <searchF32+0x184>)
 801031c:	2200      	movs	r2, #0
 801031e:	701a      	strb	r2, [r3, #0]

}
 8010320:	bf00      	nop
 8010322:	3708      	adds	r7, #8
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	20000fac 	.word	0x20000fac
 801032c:	200002e8 	.word	0x200002e8
 8010330:	20000301 	.word	0x20000301
 8010334:	20000388 	.word	0x20000388
 8010338:	20000bf1 	.word	0x20000bf1
 801033c:	20000c54 	.word	0x20000c54
 8010340:	20000b8c 	.word	0x20000b8c
 8010344:	20000c40 	.word	0x20000c40
 8010348:	20000b9c 	.word	0x20000b9c
 801034c:	200012ec 	.word	0x200012ec

08010350 <searchF4>:
//searchF4
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベース+斜め走行でgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF4(){
 8010350:	b580      	push	{r7, lr}
 8010352:	b082      	sub	sp, #8
 8010354:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 8010356:	4bcc      	ldr	r3, [pc, #816]	; (8010688 <searchF4+0x338>)
 8010358:	881b      	ldrh	r3, [r3, #0]
 801035a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801035e:	b2db      	uxtb	r3, r3
 8010360:	2b00      	cmp	r3, #0
 8010362:	d001      	beq.n	8010368 <searchF4+0x18>
		load_map_from_eeprom();
 8010364:	f002 fb64 	bl	8012a30 <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 8010368:	f000 fc92 	bl	8010c90 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 801036c:	f000 ff54 	bl	8011218 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 8010370:	f001 fa90 	bl	8011894 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 8010374:	4bc5      	ldr	r3, [pc, #788]	; (801068c <searchF4+0x33c>)
 8010376:	2200      	movs	r2, #0
 8010378:	701a      	strb	r2, [r3, #0]
	pass_route3();
 801037a:	f001 fffd 	bl	8012378 <pass_route3>

	if(start_flag == 0 || start_flag == 1){									//a大回りではない場合、先頭の半区画直進をスキップ
 801037e:	4bc4      	ldr	r3, [pc, #784]	; (8010690 <searchF4+0x340>)
 8010380:	781b      	ldrb	r3, [r3, #0]
 8010382:	b2db      	uxtb	r3, r3
 8010384:	2b00      	cmp	r3, #0
 8010386:	d004      	beq.n	8010392 <searchF4+0x42>
 8010388:	4bc1      	ldr	r3, [pc, #772]	; (8010690 <searchF4+0x340>)
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	b2db      	uxtb	r3, r3
 801038e:	2b01      	cmp	r3, #1
 8010390:	d109      	bne.n	80103a6 <searchF4+0x56>
		pass[p_cnt]--;
 8010392:	4bbe      	ldr	r3, [pc, #760]	; (801068c <searchF4+0x33c>)
 8010394:	781b      	ldrb	r3, [r3, #0]
 8010396:	4abf      	ldr	r2, [pc, #764]	; (8010694 <searchF4+0x344>)
 8010398:	56d2      	ldrsb	r2, [r2, r3]
 801039a:	b2d2      	uxtb	r2, r2
 801039c:	3a01      	subs	r2, #1
 801039e:	b2d2      	uxtb	r2, r2
 80103a0:	b251      	sxtb	r1, r2
 80103a2:	4abc      	ldr	r2, [pc, #752]	; (8010694 <searchF4+0x344>)
 80103a4:	54d1      	strb	r1, [r2, r3]
	}

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA();
 80103a6:	f7f5 f801 	bl	80053ac <start_sectionA>

	H_accel_flag = 0;
 80103aa:	4bbb      	ldr	r3, [pc, #748]	; (8010698 <searchF4+0x348>)
 80103ac:	2200      	movs	r2, #0
 80103ae:	701a      	strb	r2, [r3, #0]
	MF.FLAG.XDIR = 1;
 80103b0:	4ab5      	ldr	r2, [pc, #724]	; (8010688 <searchF4+0x338>)
 80103b2:	8813      	ldrh	r3, [r2, #0]
 80103b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80103b8:	8013      	strh	r3, [r2, #0]
	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 80103ba:	4bb4      	ldr	r3, [pc, #720]	; (801068c <searchF4+0x33c>)
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	1c5a      	adds	r2, r3, #1
 80103c0:	b2d1      	uxtb	r1, r2
 80103c2:	4ab2      	ldr	r2, [pc, #712]	; (801068c <searchF4+0x33c>)
 80103c4:	7011      	strb	r1, [r2, #0]
 80103c6:	461a      	mov	r2, r3
 80103c8:	4bb2      	ldr	r3, [pc, #712]	; (8010694 <searchF4+0x344>)
 80103ca:	569b      	ldrsb	r3, [r3, r2]
 80103cc:	3372      	adds	r3, #114	; 0x72
 80103ce:	2b71      	cmp	r3, #113	; 0x71
 80103d0:	f200 811d 	bhi.w	801060e <searchF4+0x2be>
 80103d4:	a201      	add	r2, pc, #4	; (adr r2, 80103dc <searchF4+0x8c>)
 80103d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103da:	bf00      	nop
 80103dc:	08010605 	.word	0x08010605
 80103e0:	0801060f 	.word	0x0801060f
 80103e4:	0801060f 	.word	0x0801060f
 80103e8:	0801060f 	.word	0x0801060f
 80103ec:	0801060f 	.word	0x0801060f
 80103f0:	0801060f 	.word	0x0801060f
 80103f4:	0801060f 	.word	0x0801060f
 80103f8:	0801060f 	.word	0x0801060f
 80103fc:	0801060f 	.word	0x0801060f
 8010400:	0801060f 	.word	0x0801060f
 8010404:	0801060f 	.word	0x0801060f
 8010408:	0801060f 	.word	0x0801060f
 801040c:	0801060f 	.word	0x0801060f
 8010410:	0801060f 	.word	0x0801060f
 8010414:	0801060f 	.word	0x0801060f
 8010418:	0801060f 	.word	0x0801060f
 801041c:	0801060f 	.word	0x0801060f
 8010420:	0801060f 	.word	0x0801060f
 8010424:	0801060f 	.word	0x0801060f
 8010428:	0801060f 	.word	0x0801060f
 801042c:	0801060f 	.word	0x0801060f
 8010430:	0801060f 	.word	0x0801060f
 8010434:	0801060f 	.word	0x0801060f
 8010438:	0801060f 	.word	0x0801060f
 801043c:	0801060f 	.word	0x0801060f
 8010440:	0801060f 	.word	0x0801060f
 8010444:	0801060f 	.word	0x0801060f
 8010448:	0801060f 	.word	0x0801060f
 801044c:	0801060f 	.word	0x0801060f
 8010450:	0801060f 	.word	0x0801060f
 8010454:	0801060f 	.word	0x0801060f
 8010458:	0801060f 	.word	0x0801060f
 801045c:	0801060f 	.word	0x0801060f
 8010460:	0801060f 	.word	0x0801060f
 8010464:	0801060f 	.word	0x0801060f
 8010468:	0801060f 	.word	0x0801060f
 801046c:	0801060f 	.word	0x0801060f
 8010470:	0801060f 	.word	0x0801060f
 8010474:	0801060f 	.word	0x0801060f
 8010478:	0801060f 	.word	0x0801060f
 801047c:	0801060f 	.word	0x0801060f
 8010480:	0801060f 	.word	0x0801060f
 8010484:	0801060f 	.word	0x0801060f
 8010488:	0801060f 	.word	0x0801060f
 801048c:	0801060f 	.word	0x0801060f
 8010490:	0801060f 	.word	0x0801060f
 8010494:	0801060f 	.word	0x0801060f
 8010498:	0801060f 	.word	0x0801060f
 801049c:	0801060f 	.word	0x0801060f
 80104a0:	0801060f 	.word	0x0801060f
 80104a4:	0801060f 	.word	0x0801060f
 80104a8:	0801060f 	.word	0x0801060f
 80104ac:	0801060f 	.word	0x0801060f
 80104b0:	0801060f 	.word	0x0801060f
 80104b4:	0801060f 	.word	0x0801060f
 80104b8:	0801060f 	.word	0x0801060f
 80104bc:	0801060f 	.word	0x0801060f
 80104c0:	0801060f 	.word	0x0801060f
 80104c4:	0801060f 	.word	0x0801060f
 80104c8:	0801060f 	.word	0x0801060f
 80104cc:	0801060f 	.word	0x0801060f
 80104d0:	0801060f 	.word	0x0801060f
 80104d4:	0801060f 	.word	0x0801060f
 80104d8:	0801060f 	.word	0x0801060f
 80104dc:	0801060f 	.word	0x0801060f
 80104e0:	0801060f 	.word	0x0801060f
 80104e4:	0801060f 	.word	0x0801060f
 80104e8:	0801060f 	.word	0x0801060f
 80104ec:	0801060f 	.word	0x0801060f
 80104f0:	0801060f 	.word	0x0801060f
 80104f4:	0801060f 	.word	0x0801060f
 80104f8:	0801060f 	.word	0x0801060f
 80104fc:	0801060f 	.word	0x0801060f
 8010500:	0801060f 	.word	0x0801060f
 8010504:	0801060f 	.word	0x0801060f
 8010508:	0801060f 	.word	0x0801060f
 801050c:	0801060f 	.word	0x0801060f
 8010510:	0801060f 	.word	0x0801060f
 8010514:	0801060f 	.word	0x0801060f
 8010518:	0801060f 	.word	0x0801060f
 801051c:	0801060f 	.word	0x0801060f
 8010520:	0801060f 	.word	0x0801060f
 8010524:	0801060f 	.word	0x0801060f
 8010528:	0801060f 	.word	0x0801060f
 801052c:	0801060f 	.word	0x0801060f
 8010530:	0801060f 	.word	0x0801060f
 8010534:	0801060f 	.word	0x0801060f
 8010538:	0801060f 	.word	0x0801060f
 801053c:	0801060f 	.word	0x0801060f
 8010540:	0801060f 	.word	0x0801060f
 8010544:	0801060f 	.word	0x0801060f
 8010548:	0801060f 	.word	0x0801060f
 801054c:	0801060f 	.word	0x0801060f
 8010550:	0801060f 	.word	0x0801060f
 8010554:	0801060f 	.word	0x0801060f
 8010558:	0801060f 	.word	0x0801060f
 801055c:	0801060f 	.word	0x0801060f
 8010560:	0801060f 	.word	0x0801060f
 8010564:	080105ff 	.word	0x080105ff
 8010568:	080105f9 	.word	0x080105f9
 801056c:	080105f3 	.word	0x080105f3
 8010570:	080105ed 	.word	0x080105ed
 8010574:	080105e7 	.word	0x080105e7
 8010578:	080105e1 	.word	0x080105e1
 801057c:	080105db 	.word	0x080105db
 8010580:	080105d5 	.word	0x080105d5
 8010584:	080105cf 	.word	0x080105cf
 8010588:	080105c9 	.word	0x080105c9
 801058c:	080105c3 	.word	0x080105c3
 8010590:	080105bd 	.word	0x080105bd
 8010594:	080105b7 	.word	0x080105b7
 8010598:	080105b1 	.word	0x080105b1
 801059c:	080105ab 	.word	0x080105ab
 80105a0:	080105a5 	.word	0x080105a5
			//----a右スラローム----
			case -1:
				slalom_R90();
 80105a4:	f7f5 fbd8 	bl	8005d58 <slalom_R90>
				break;
 80105a8:	e0bf      	b.n	801072a <searchF4+0x3da>

			//----a左スラローム----
			case -2:
				slalom_L90();
 80105aa:	f7f5 fce9 	bl	8005f80 <slalom_L90>
				break;
 80105ae:	e0bc      	b.n	801072a <searchF4+0x3da>

			//----a大回り右90----
			case -3:
				Lslalom_R90();
 80105b0:	f7f6 f816 	bl	80065e0 <Lslalom_R90>
				break;
 80105b4:	e0b9      	b.n	801072a <searchF4+0x3da>

			//----a大回り左90----
			case -4:
				Lslalom_L90();
 80105b6:	f7f6 f911 	bl	80067dc <Lslalom_L90>
				break;
 80105ba:	e0b6      	b.n	801072a <searchF4+0x3da>

			//----a大回り右180----
			case -5:
				Lslalom_R180();
 80105bc:	f7f6 fe1a 	bl	80071f4 <Lslalom_R180>
				break;
 80105c0:	e0b3      	b.n	801072a <searchF4+0x3da>

			//----a大回り左180----
			case -6:
				Lslalom_L180();
 80105c2:	f7f6 ff19 	bl	80073f8 <Lslalom_L180>
				break;
 80105c6:	e0b0      	b.n	801072a <searchF4+0x3da>

			//----a斜め右V45----
			case -7:
				v_R45();
 80105c8:	f7f7 fa1c 	bl	8007a04 <v_R45>
				break;
 80105cc:	e0ad      	b.n	801072a <searchF4+0x3da>

			//----a斜め左V45----
			case -8:
				v_L45();
 80105ce:	f7f7 fb47 	bl	8007c60 <v_L45>
				break;
 80105d2:	e0aa      	b.n	801072a <searchF4+0x3da>

			//----a斜め右V90----
			case -9:
				v_R90();
 80105d4:	f7f8 fbae 	bl	8008d34 <v_R90>
				break;
 80105d8:	e0a7      	b.n	801072a <searchF4+0x3da>

			//----a斜め左V90----
			case -10:
				v_L90();
 80105da:	f7f8 fc95 	bl	8008f08 <v_L90>
				break;
 80105de:	e0a4      	b.n	801072a <searchF4+0x3da>

			//----a斜め右V135----
			case -11:
				v_R135();
 80105e0:	f7f8 ff52 	bl	8009488 <v_R135>
				break;
 80105e4:	e0a1      	b.n	801072a <searchF4+0x3da>

			//----a斜め左V135----
			case -12:
				v_L135();
 80105e6:	f7f9 f87d 	bl	80096e4 <v_L135>
				break;
 80105ea:	e09e      	b.n	801072a <searchF4+0x3da>

			//----a斜め右V45Goal----
			case -13:
				v_R45D();
 80105ec:	f7f7 fc62 	bl	8007eb4 <v_R45D>
				break;
 80105f0:	e09b      	b.n	801072a <searchF4+0x3da>

			//----a斜め左V45Goal----
			case -14:
				v_L45D();
 80105f2:	f7f7 fd97 	bl	8008124 <v_L45D>
				break;
 80105f6:	e098      	b.n	801072a <searchF4+0x3da>

			//----a斜め右V135Goal----
			case -15:
				v_R135D();
 80105f8:	f7f9 f9a2 	bl	8009940 <v_R135D>
				break;
 80105fc:	e095      	b.n	801072a <searchF4+0x3da>

			//----a斜め左V135Goal----
			case -16:
				v_L135D();
 80105fe:	f7f9 fad9 	bl	8009bb4 <v_L135D>
				break;
 8010602:	e092      	b.n	801072a <searchF4+0x3da>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 8010604:	f7f5 fad0 	bl	8005ba8 <rotate_180>
				rotate_180();
 8010608:	f7f5 face 	bl	8005ba8 <rotate_180>
				while(1);
 801060c:	e7fe      	b.n	801060c <searchF4+0x2bc>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 801060e:	4b1f      	ldr	r3, [pc, #124]	; (801068c <searchF4+0x33c>)
 8010610:	781b      	ldrb	r3, [r3, #0]
 8010612:	3b01      	subs	r3, #1
 8010614:	4a1f      	ldr	r2, [pc, #124]	; (8010694 <searchF4+0x344>)
 8010616:	56d3      	ldrsb	r3, [r2, r3]
 8010618:	2b03      	cmp	r3, #3
 801061a:	dc11      	bgt.n	8010640 <searchF4+0x2f0>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 801061c:	2300      	movs	r3, #0
 801061e:	607b      	str	r3, [r7, #4]
 8010620:	e004      	b.n	801062c <searchF4+0x2dc>
						half_sectionU();
 8010622:	f7f4 ffc1 	bl	80055a8 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	3301      	adds	r3, #1
 801062a:	607b      	str	r3, [r7, #4]
 801062c:	4b17      	ldr	r3, [pc, #92]	; (801068c <searchF4+0x33c>)
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	3b01      	subs	r3, #1
 8010632:	4a18      	ldr	r2, [pc, #96]	; (8010694 <searchF4+0x344>)
 8010634:	56d3      	ldrsb	r3, [r2, r3]
 8010636:	461a      	mov	r2, r3
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	4293      	cmp	r3, r2
 801063c:	dbf1      	blt.n	8010622 <searchF4+0x2d2>
					}else{
						half_sectionV();
					}
//					half_sectionV();
				}
				break;
 801063e:	e073      	b.n	8010728 <searchF4+0x3d8>
				}else if(pass[p_cnt-1] < 64){
 8010640:	4b12      	ldr	r3, [pc, #72]	; (801068c <searchF4+0x33c>)
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	3b01      	subs	r3, #1
 8010646:	4a13      	ldr	r2, [pc, #76]	; (8010694 <searchF4+0x344>)
 8010648:	56d3      	ldrsb	r3, [r2, r3]
 801064a:	2b3f      	cmp	r3, #63	; 0x3f
 801064c:	dc26      	bgt.n	801069c <searchF4+0x34c>
					one_sectionA();
 801064e:	f7f4 ffcb 	bl	80055e8 <one_sectionA>
					H_accel_flag = 1;
 8010652:	4b11      	ldr	r3, [pc, #68]	; (8010698 <searchF4+0x348>)
 8010654:	2201      	movs	r2, #1
 8010656:	701a      	strb	r2, [r3, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 8010658:	2300      	movs	r3, #0
 801065a:	603b      	str	r3, [r7, #0]
 801065c:	e004      	b.n	8010668 <searchF4+0x318>
						half_sectionU();
 801065e:	f7f4 ffa3 	bl	80055a8 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	3301      	adds	r3, #1
 8010666:	603b      	str	r3, [r7, #0]
 8010668:	4b08      	ldr	r3, [pc, #32]	; (801068c <searchF4+0x33c>)
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	3b01      	subs	r3, #1
 801066e:	4a09      	ldr	r2, [pc, #36]	; (8010694 <searchF4+0x344>)
 8010670:	56d3      	ldrsb	r3, [r2, r3]
 8010672:	3b04      	subs	r3, #4
 8010674:	683a      	ldr	r2, [r7, #0]
 8010676:	429a      	cmp	r2, r3
 8010678:	dbf1      	blt.n	801065e <searchF4+0x30e>
					one_sectionD();
 801067a:	f7f4 ffdb 	bl	8005634 <one_sectionD>
					H_accel_flag = 0;
 801067e:	4b06      	ldr	r3, [pc, #24]	; (8010698 <searchF4+0x348>)
 8010680:	2200      	movs	r2, #0
 8010682:	701a      	strb	r2, [r3, #0]
				break;
 8010684:	e050      	b.n	8010728 <searchF4+0x3d8>
 8010686:	bf00      	nop
 8010688:	20000fac 	.word	0x20000fac
 801068c:	200002e8 	.word	0x200002e8
 8010690:	200012ec 	.word	0x200012ec
 8010694:	20000388 	.word	0x20000388
 8010698:	20000301 	.word	0x20000301
					if((pass[p_cnt] == 64) && (pass[p_cnt+1] == 64) && (pass[p_cnt+2] == 64) && (H_accel_flag == 0)){
 801069c:	4b4b      	ldr	r3, [pc, #300]	; (80107cc <searchF4+0x47c>)
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	461a      	mov	r2, r3
 80106a2:	4b4b      	ldr	r3, [pc, #300]	; (80107d0 <searchF4+0x480>)
 80106a4:	569b      	ldrsb	r3, [r3, r2]
 80106a6:	2b40      	cmp	r3, #64	; 0x40
 80106a8:	d11d      	bne.n	80106e6 <searchF4+0x396>
 80106aa:	4b48      	ldr	r3, [pc, #288]	; (80107cc <searchF4+0x47c>)
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	3301      	adds	r3, #1
 80106b0:	4a47      	ldr	r2, [pc, #284]	; (80107d0 <searchF4+0x480>)
 80106b2:	56d3      	ldrsb	r3, [r2, r3]
 80106b4:	2b40      	cmp	r3, #64	; 0x40
 80106b6:	d116      	bne.n	80106e6 <searchF4+0x396>
 80106b8:	4b44      	ldr	r3, [pc, #272]	; (80107cc <searchF4+0x47c>)
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	3302      	adds	r3, #2
 80106be:	4a44      	ldr	r2, [pc, #272]	; (80107d0 <searchF4+0x480>)
 80106c0:	56d3      	ldrsb	r3, [r2, r3]
 80106c2:	2b40      	cmp	r3, #64	; 0x40
 80106c4:	d10f      	bne.n	80106e6 <searchF4+0x396>
 80106c6:	4b43      	ldr	r3, [pc, #268]	; (80107d4 <searchF4+0x484>)
 80106c8:	781b      	ldrb	r3, [r3, #0]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d10b      	bne.n	80106e6 <searchF4+0x396>
						one_sectionVA();
 80106ce:	f7f4 ffd9 	bl	8005684 <one_sectionVA>
						H_accel_flag = 1;
 80106d2:	4b40      	ldr	r3, [pc, #256]	; (80107d4 <searchF4+0x484>)
 80106d4:	2201      	movs	r2, #1
 80106d6:	701a      	strb	r2, [r3, #0]
						p_cnt++;
 80106d8:	4b3c      	ldr	r3, [pc, #240]	; (80107cc <searchF4+0x47c>)
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	3301      	adds	r3, #1
 80106de:	b2da      	uxtb	r2, r3
 80106e0:	4b3a      	ldr	r3, [pc, #232]	; (80107cc <searchF4+0x47c>)
 80106e2:	701a      	strb	r2, [r3, #0]
 80106e4:	e020      	b.n	8010728 <searchF4+0x3d8>
					else if((pass[p_cnt] == 64) && (pass[p_cnt+1] != 64) && (H_accel_flag == 1)){
 80106e6:	4b39      	ldr	r3, [pc, #228]	; (80107cc <searchF4+0x47c>)
 80106e8:	781b      	ldrb	r3, [r3, #0]
 80106ea:	461a      	mov	r2, r3
 80106ec:	4b38      	ldr	r3, [pc, #224]	; (80107d0 <searchF4+0x480>)
 80106ee:	569b      	ldrsb	r3, [r3, r2]
 80106f0:	2b40      	cmp	r3, #64	; 0x40
 80106f2:	d116      	bne.n	8010722 <searchF4+0x3d2>
 80106f4:	4b35      	ldr	r3, [pc, #212]	; (80107cc <searchF4+0x47c>)
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	3301      	adds	r3, #1
 80106fa:	4a35      	ldr	r2, [pc, #212]	; (80107d0 <searchF4+0x480>)
 80106fc:	56d3      	ldrsb	r3, [r2, r3]
 80106fe:	2b40      	cmp	r3, #64	; 0x40
 8010700:	d00f      	beq.n	8010722 <searchF4+0x3d2>
 8010702:	4b34      	ldr	r3, [pc, #208]	; (80107d4 <searchF4+0x484>)
 8010704:	781b      	ldrb	r3, [r3, #0]
 8010706:	2b01      	cmp	r3, #1
 8010708:	d10b      	bne.n	8010722 <searchF4+0x3d2>
						one_sectionVD();
 801070a:	f7f4 ffd7 	bl	80056bc <one_sectionVD>
						H_accel_flag = 0;
 801070e:	4b31      	ldr	r3, [pc, #196]	; (80107d4 <searchF4+0x484>)
 8010710:	2200      	movs	r2, #0
 8010712:	701a      	strb	r2, [r3, #0]
						p_cnt++;
 8010714:	4b2d      	ldr	r3, [pc, #180]	; (80107cc <searchF4+0x47c>)
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	3301      	adds	r3, #1
 801071a:	b2da      	uxtb	r2, r3
 801071c:	4b2b      	ldr	r3, [pc, #172]	; (80107cc <searchF4+0x47c>)
 801071e:	701a      	strb	r2, [r3, #0]
 8010720:	e002      	b.n	8010728 <searchF4+0x3d8>
						half_sectionV();
 8010722:	f7f4 ff4d 	bl	80055c0 <half_sectionV>
				break;
 8010726:	e7ff      	b.n	8010728 <searchF4+0x3d8>
 8010728:	bf00      	nop
		}

	}while(pass[p_cnt] != -114);
 801072a:	4b28      	ldr	r3, [pc, #160]	; (80107cc <searchF4+0x47c>)
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	461a      	mov	r2, r3
 8010730:	4b27      	ldr	r3, [pc, #156]	; (80107d0 <searchF4+0x480>)
 8010732:	569b      	ldrsb	r3, [r3, r2]
 8010734:	f113 0f72 	cmn.w	r3, #114	; 0x72
 8010738:	f47f ae3f 	bne.w	80103ba <searchF4+0x6a>

	mouse.x = goal_x;
 801073c:	4b26      	ldr	r3, [pc, #152]	; (80107d8 <searchF4+0x488>)
 801073e:	781a      	ldrb	r2, [r3, #0]
 8010740:	4b26      	ldr	r3, [pc, #152]	; (80107dc <searchF4+0x48c>)
 8010742:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 8010744:	4b26      	ldr	r3, [pc, #152]	; (80107e0 <searchF4+0x490>)
 8010746:	781a      	ldrb	r2, [r3, #0]
 8010748:	4b24      	ldr	r3, [pc, #144]	; (80107dc <searchF4+0x48c>)
 801074a:	705a      	strb	r2, [r3, #1]

	if(pass[p_cnt-1] != -13 && pass[p_cnt-1] != -14 && pass[p_cnt-1] != -15 && pass[p_cnt-1] != -16){
 801074c:	4b1f      	ldr	r3, [pc, #124]	; (80107cc <searchF4+0x47c>)
 801074e:	781b      	ldrb	r3, [r3, #0]
 8010750:	3b01      	subs	r3, #1
 8010752:	4a1f      	ldr	r2, [pc, #124]	; (80107d0 <searchF4+0x480>)
 8010754:	56d3      	ldrsb	r3, [r2, r3]
 8010756:	f113 0f0d 	cmn.w	r3, #13
 801075a:	d01c      	beq.n	8010796 <searchF4+0x446>
 801075c:	4b1b      	ldr	r3, [pc, #108]	; (80107cc <searchF4+0x47c>)
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	3b01      	subs	r3, #1
 8010762:	4a1b      	ldr	r2, [pc, #108]	; (80107d0 <searchF4+0x480>)
 8010764:	56d3      	ldrsb	r3, [r2, r3]
 8010766:	f113 0f0e 	cmn.w	r3, #14
 801076a:	d014      	beq.n	8010796 <searchF4+0x446>
 801076c:	4b17      	ldr	r3, [pc, #92]	; (80107cc <searchF4+0x47c>)
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	3b01      	subs	r3, #1
 8010772:	4a17      	ldr	r2, [pc, #92]	; (80107d0 <searchF4+0x480>)
 8010774:	56d3      	ldrsb	r3, [r2, r3]
 8010776:	f113 0f0f 	cmn.w	r3, #15
 801077a:	d00c      	beq.n	8010796 <searchF4+0x446>
 801077c:	4b13      	ldr	r3, [pc, #76]	; (80107cc <searchF4+0x47c>)
 801077e:	781b      	ldrb	r3, [r3, #0]
 8010780:	3b01      	subs	r3, #1
 8010782:	4a13      	ldr	r2, [pc, #76]	; (80107d0 <searchF4+0x480>)
 8010784:	56d3      	ldrsb	r3, [r2, r3]
 8010786:	f113 0f10 	cmn.w	r3, #16
 801078a:	d004      	beq.n	8010796 <searchF4+0x446>
		half_sectionD();
 801078c:	f7f4 fea8 	bl	80054e0 <half_sectionD>
		full_led_write(BLUE);
 8010790:	2003      	movs	r0, #3
 8010792:	f002 fa39 	bl	8012c08 <full_led_write>
	}

	HAL_Delay(500);
 8010796:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801079a:	f7f0 fc3f 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 801079e:	f7f5 fa03 	bl	8005ba8 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 80107a2:	2064      	movs	r0, #100	; 0x64
 80107a4:	f7f4 fda0 	bl	80052e8 <driveC2>
	degree_z = target_degree_z;
 80107a8:	4b0e      	ldr	r3, [pc, #56]	; (80107e4 <searchF4+0x494>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	4a0e      	ldr	r2, [pc, #56]	; (80107e8 <searchF4+0x498>)
 80107ae:	6013      	str	r3, [r2, #0]
	start_flag = 0;
 80107b0:	4b0e      	ldr	r3, [pc, #56]	; (80107ec <searchF4+0x49c>)
 80107b2:	2200      	movs	r2, #0
 80107b4:	701a      	strb	r2, [r3, #0]

	mouse.dir = mouse.dir / 2;
 80107b6:	4b09      	ldr	r3, [pc, #36]	; (80107dc <searchF4+0x48c>)
 80107b8:	789b      	ldrb	r3, [r3, #2]
 80107ba:	b2db      	uxtb	r3, r3
 80107bc:	085b      	lsrs	r3, r3, #1
 80107be:	b2da      	uxtb	r2, r3
 80107c0:	4b06      	ldr	r3, [pc, #24]	; (80107dc <searchF4+0x48c>)
 80107c2:	709a      	strb	r2, [r3, #2]

}
 80107c4:	bf00      	nop
 80107c6:	3708      	adds	r7, #8
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}
 80107cc:	200002e8 	.word	0x200002e8
 80107d0:	20000388 	.word	0x20000388
 80107d4:	20000301 	.word	0x20000301
 80107d8:	20000bf1 	.word	0x20000bf1
 80107dc:	20000c54 	.word	0x20000c54
 80107e0:	20000b8c 	.word	0x20000b8c
 80107e4:	20000c40 	.word	0x20000c40
 80107e8:	20000b9c 	.word	0x20000b9c
 80107ec:	200012ec 	.word	0x200012ec

080107f0 <searchF42>:
//searchF42
//aスラローム(+既知区間加速探索走行)+pass圧縮+機体方向&位置未更新+半区画ベース+斜め走行 High Speedでgoal座標に進む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchF42(){
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0

	if(MF.FLAG.SCND){
 80107f6:	4bcc      	ldr	r3, [pc, #816]	; (8010b28 <searchF42+0x338>)
 80107f8:	881b      	ldrh	r3, [r3, #0]
 80107fa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80107fe:	b2db      	uxtb	r3, r3
 8010800:	2b00      	cmp	r3, #0
 8010802:	d001      	beq.n	8010808 <searchF42+0x18>
		load_map_from_eeprom();
 8010804:	f002 f914 	bl	8012a30 <load_map_from_eeprom>
	}

	//====a1区画前進====
	adv_pos();
 8010808:	f000 fa42 	bl	8010c90 <adv_pos>

	//====a歩数マップ・経路作成====
	make_smap();											//a歩数マップ作成
 801080c:	f000 fd04 	bl	8011218 <make_smap>
	make_route();											//a最短経路探索（route配列に動作が格納される）
 8010810:	f001 f840 	bl	8011894 <make_route>

	//====pass圧縮====
	p_cnt = 0;												//a経路カウンタの初期化
 8010814:	4bc5      	ldr	r3, [pc, #788]	; (8010b2c <searchF42+0x33c>)
 8010816:	2200      	movs	r2, #0
 8010818:	701a      	strb	r2, [r3, #0]
	pass_route3();
 801081a:	f001 fdad 	bl	8012378 <pass_route3>

	if(start_flag == 0 || start_flag == 1){									//a大回りではない場合、先頭の半区画直進をスキップ
 801081e:	4bc4      	ldr	r3, [pc, #784]	; (8010b30 <searchF42+0x340>)
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	b2db      	uxtb	r3, r3
 8010824:	2b00      	cmp	r3, #0
 8010826:	d004      	beq.n	8010832 <searchF42+0x42>
 8010828:	4bc1      	ldr	r3, [pc, #772]	; (8010b30 <searchF42+0x340>)
 801082a:	781b      	ldrb	r3, [r3, #0]
 801082c:	b2db      	uxtb	r3, r3
 801082e:	2b01      	cmp	r3, #1
 8010830:	d109      	bne.n	8010846 <searchF42+0x56>
		pass[p_cnt]--;
 8010832:	4bbe      	ldr	r3, [pc, #760]	; (8010b2c <searchF42+0x33c>)
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	4abf      	ldr	r2, [pc, #764]	; (8010b34 <searchF42+0x344>)
 8010838:	56d2      	ldrsb	r2, [r2, r3]
 801083a:	b2d2      	uxtb	r2, r2
 801083c:	3a01      	subs	r2, #1
 801083e:	b2d2      	uxtb	r2, r2
 8010840:	b251      	sxtb	r1, r2
 8010842:	4abc      	ldr	r2, [pc, #752]	; (8010b34 <searchF42+0x344>)
 8010844:	54d1      	strb	r1, [r2, r3]
	}

	//====a前に壁が無い想定で問答無用で前進====
	start_sectionA2();
 8010846:	f7f4 fdf1 	bl	800542c <start_sectionA2>

	H_accel_flag = 0;
 801084a:	4bbb      	ldr	r3, [pc, #748]	; (8010b38 <searchF42+0x348>)
 801084c:	2200      	movs	r2, #0
 801084e:	701a      	strb	r2, [r3, #0]
	MF.FLAG.XDIR = 1;
 8010850:	4ab5      	ldr	r2, [pc, #724]	; (8010b28 <searchF42+0x338>)
 8010852:	8813      	ldrh	r3, [r2, #0]
 8010854:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010858:	8013      	strh	r3, [r2, #0]
	//====a探索走行====
	do{
		//----a進行----
		switch(pass[p_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 801085a:	4bb4      	ldr	r3, [pc, #720]	; (8010b2c <searchF42+0x33c>)
 801085c:	781b      	ldrb	r3, [r3, #0]
 801085e:	1c5a      	adds	r2, r3, #1
 8010860:	b2d1      	uxtb	r1, r2
 8010862:	4ab2      	ldr	r2, [pc, #712]	; (8010b2c <searchF42+0x33c>)
 8010864:	7011      	strb	r1, [r2, #0]
 8010866:	461a      	mov	r2, r3
 8010868:	4bb2      	ldr	r3, [pc, #712]	; (8010b34 <searchF42+0x344>)
 801086a:	569b      	ldrsb	r3, [r3, r2]
 801086c:	3372      	adds	r3, #114	; 0x72
 801086e:	2b71      	cmp	r3, #113	; 0x71
 8010870:	f200 811d 	bhi.w	8010aae <searchF42+0x2be>
 8010874:	a201      	add	r2, pc, #4	; (adr r2, 801087c <searchF42+0x8c>)
 8010876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801087a:	bf00      	nop
 801087c:	08010aa5 	.word	0x08010aa5
 8010880:	08010aaf 	.word	0x08010aaf
 8010884:	08010aaf 	.word	0x08010aaf
 8010888:	08010aaf 	.word	0x08010aaf
 801088c:	08010aaf 	.word	0x08010aaf
 8010890:	08010aaf 	.word	0x08010aaf
 8010894:	08010aaf 	.word	0x08010aaf
 8010898:	08010aaf 	.word	0x08010aaf
 801089c:	08010aaf 	.word	0x08010aaf
 80108a0:	08010aaf 	.word	0x08010aaf
 80108a4:	08010aaf 	.word	0x08010aaf
 80108a8:	08010aaf 	.word	0x08010aaf
 80108ac:	08010aaf 	.word	0x08010aaf
 80108b0:	08010aaf 	.word	0x08010aaf
 80108b4:	08010aaf 	.word	0x08010aaf
 80108b8:	08010aaf 	.word	0x08010aaf
 80108bc:	08010aaf 	.word	0x08010aaf
 80108c0:	08010aaf 	.word	0x08010aaf
 80108c4:	08010aaf 	.word	0x08010aaf
 80108c8:	08010aaf 	.word	0x08010aaf
 80108cc:	08010aaf 	.word	0x08010aaf
 80108d0:	08010aaf 	.word	0x08010aaf
 80108d4:	08010aaf 	.word	0x08010aaf
 80108d8:	08010aaf 	.word	0x08010aaf
 80108dc:	08010aaf 	.word	0x08010aaf
 80108e0:	08010aaf 	.word	0x08010aaf
 80108e4:	08010aaf 	.word	0x08010aaf
 80108e8:	08010aaf 	.word	0x08010aaf
 80108ec:	08010aaf 	.word	0x08010aaf
 80108f0:	08010aaf 	.word	0x08010aaf
 80108f4:	08010aaf 	.word	0x08010aaf
 80108f8:	08010aaf 	.word	0x08010aaf
 80108fc:	08010aaf 	.word	0x08010aaf
 8010900:	08010aaf 	.word	0x08010aaf
 8010904:	08010aaf 	.word	0x08010aaf
 8010908:	08010aaf 	.word	0x08010aaf
 801090c:	08010aaf 	.word	0x08010aaf
 8010910:	08010aaf 	.word	0x08010aaf
 8010914:	08010aaf 	.word	0x08010aaf
 8010918:	08010aaf 	.word	0x08010aaf
 801091c:	08010aaf 	.word	0x08010aaf
 8010920:	08010aaf 	.word	0x08010aaf
 8010924:	08010aaf 	.word	0x08010aaf
 8010928:	08010aaf 	.word	0x08010aaf
 801092c:	08010aaf 	.word	0x08010aaf
 8010930:	08010aaf 	.word	0x08010aaf
 8010934:	08010aaf 	.word	0x08010aaf
 8010938:	08010aaf 	.word	0x08010aaf
 801093c:	08010aaf 	.word	0x08010aaf
 8010940:	08010aaf 	.word	0x08010aaf
 8010944:	08010aaf 	.word	0x08010aaf
 8010948:	08010aaf 	.word	0x08010aaf
 801094c:	08010aaf 	.word	0x08010aaf
 8010950:	08010aaf 	.word	0x08010aaf
 8010954:	08010aaf 	.word	0x08010aaf
 8010958:	08010aaf 	.word	0x08010aaf
 801095c:	08010aaf 	.word	0x08010aaf
 8010960:	08010aaf 	.word	0x08010aaf
 8010964:	08010aaf 	.word	0x08010aaf
 8010968:	08010aaf 	.word	0x08010aaf
 801096c:	08010aaf 	.word	0x08010aaf
 8010970:	08010aaf 	.word	0x08010aaf
 8010974:	08010aaf 	.word	0x08010aaf
 8010978:	08010aaf 	.word	0x08010aaf
 801097c:	08010aaf 	.word	0x08010aaf
 8010980:	08010aaf 	.word	0x08010aaf
 8010984:	08010aaf 	.word	0x08010aaf
 8010988:	08010aaf 	.word	0x08010aaf
 801098c:	08010aaf 	.word	0x08010aaf
 8010990:	08010aaf 	.word	0x08010aaf
 8010994:	08010aaf 	.word	0x08010aaf
 8010998:	08010aaf 	.word	0x08010aaf
 801099c:	08010aaf 	.word	0x08010aaf
 80109a0:	08010aaf 	.word	0x08010aaf
 80109a4:	08010aaf 	.word	0x08010aaf
 80109a8:	08010aaf 	.word	0x08010aaf
 80109ac:	08010aaf 	.word	0x08010aaf
 80109b0:	08010aaf 	.word	0x08010aaf
 80109b4:	08010aaf 	.word	0x08010aaf
 80109b8:	08010aaf 	.word	0x08010aaf
 80109bc:	08010aaf 	.word	0x08010aaf
 80109c0:	08010aaf 	.word	0x08010aaf
 80109c4:	08010aaf 	.word	0x08010aaf
 80109c8:	08010aaf 	.word	0x08010aaf
 80109cc:	08010aaf 	.word	0x08010aaf
 80109d0:	08010aaf 	.word	0x08010aaf
 80109d4:	08010aaf 	.word	0x08010aaf
 80109d8:	08010aaf 	.word	0x08010aaf
 80109dc:	08010aaf 	.word	0x08010aaf
 80109e0:	08010aaf 	.word	0x08010aaf
 80109e4:	08010aaf 	.word	0x08010aaf
 80109e8:	08010aaf 	.word	0x08010aaf
 80109ec:	08010aaf 	.word	0x08010aaf
 80109f0:	08010aaf 	.word	0x08010aaf
 80109f4:	08010aaf 	.word	0x08010aaf
 80109f8:	08010aaf 	.word	0x08010aaf
 80109fc:	08010aaf 	.word	0x08010aaf
 8010a00:	08010aaf 	.word	0x08010aaf
 8010a04:	08010a9f 	.word	0x08010a9f
 8010a08:	08010a99 	.word	0x08010a99
 8010a0c:	08010a93 	.word	0x08010a93
 8010a10:	08010a8d 	.word	0x08010a8d
 8010a14:	08010a87 	.word	0x08010a87
 8010a18:	08010a81 	.word	0x08010a81
 8010a1c:	08010a7b 	.word	0x08010a7b
 8010a20:	08010a75 	.word	0x08010a75
 8010a24:	08010a6f 	.word	0x08010a6f
 8010a28:	08010a69 	.word	0x08010a69
 8010a2c:	08010a63 	.word	0x08010a63
 8010a30:	08010a5d 	.word	0x08010a5d
 8010a34:	08010a57 	.word	0x08010a57
 8010a38:	08010a51 	.word	0x08010a51
 8010a3c:	08010a4b 	.word	0x08010a4b
 8010a40:	08010a45 	.word	0x08010a45
			//----a右スラローム----
			case -1:
				slalom_R902();
 8010a44:	f7f5 fbb0 	bl	80061a8 <slalom_R902>
				break;
 8010a48:	e0bf      	b.n	8010bca <searchF42+0x3da>

			//----a左スラローム----
			case -2:
				slalom_L902();
 8010a4a:	f7f5 fcbd 	bl	80063c8 <slalom_L902>
				break;
 8010a4e:	e0bc      	b.n	8010bca <searchF42+0x3da>

			//----a大回り右90----
			case -3:
				Lslalom_R902();
 8010a50:	f7f5 ffc2 	bl	80069d8 <Lslalom_R902>
				break;
 8010a54:	e0b9      	b.n	8010bca <searchF42+0x3da>

			//----a大回り左90----
			case -4:
				Lslalom_L902();
 8010a56:	f7f6 f8bf 	bl	8006bd8 <Lslalom_L902>
				break;
 8010a5a:	e0b6      	b.n	8010bca <searchF42+0x3da>

			//----a大回り右180----
			case -5:
				Lslalom_R1802();
 8010a5c:	f7f6 fdce 	bl	80075fc <Lslalom_R1802>
				break;
 8010a60:	e0b3      	b.n	8010bca <searchF42+0x3da>

			//----a大回り左180----
			case -6:
				Lslalom_L1802();
 8010a62:	f7f6 fecd 	bl	8007800 <Lslalom_L1802>
				break;
 8010a66:	e0b0      	b.n	8010bca <searchF42+0x3da>

			//----a斜め右V45----
			case -7:
				v_R452();
 8010a68:	f7f7 fc94 	bl	8008394 <v_R452>
				break;
 8010a6c:	e0ad      	b.n	8010bca <searchF42+0x3da>

			//----a斜め左V45----
			case -8:
				v_L452();
 8010a6e:	f7f7 fdc1 	bl	80085f4 <v_L452>
				break;
 8010a72:	e0aa      	b.n	8010bca <searchF42+0x3da>

			//----a斜め右V90----
			case -9:
				v_R902();
 8010a74:	f7f8 fb32 	bl	80090dc <v_R902>
				break;
 8010a78:	e0a7      	b.n	8010bca <searchF42+0x3da>

			//----a斜め左V90----
			case -10:
				v_L902();
 8010a7a:	f7f8 fc1b 	bl	80092b4 <v_L902>
				break;
 8010a7e:	e0a4      	b.n	8010bca <searchF42+0x3da>

			//----a斜め右V135----
			case -11:
				v_R1352();
 8010a80:	f7f9 f9d2 	bl	8009e28 <v_R1352>
				break;
 8010a84:	e0a1      	b.n	8010bca <searchF42+0x3da>

			//----a斜め左V135----
			case -12:
				v_L1352();
 8010a86:	f7f9 faff 	bl	800a088 <v_L1352>
				break;
 8010a8a:	e09e      	b.n	8010bca <searchF42+0x3da>

			//----a斜め右V45Goal----
			case -13:
				v_R45D2();
 8010a8c:	f7f7 fee2 	bl	8008854 <v_R45D2>
				break;
 8010a90:	e09b      	b.n	8010bca <searchF42+0x3da>

			//----a斜め左V45Goal----
			case -14:
				v_L45D2();
 8010a92:	f7f8 f817 	bl	8008ac4 <v_L45D2>
				break;
 8010a96:	e098      	b.n	8010bca <searchF42+0x3da>

			//----a斜め右V135Goal----
			case -15:
				v_R135D2();
 8010a98:	f7f9 fc24 	bl	800a2e4 <v_R135D2>
				break;
 8010a9c:	e095      	b.n	8010bca <searchF42+0x3da>

			//----a斜め左V135Goal----
			case -16:
				v_L135D2();
 8010a9e:	f7f9 fd5d 	bl	800a55c <v_L135D2>
				break;
 8010aa2:	e092      	b.n	8010bca <searchF42+0x3da>

			//----pass配列最後(なお本来呼び出される前にゴールする)----
			case -114:
				rotate_180();
 8010aa4:	f7f5 f880 	bl	8005ba8 <rotate_180>
				rotate_180();
 8010aa8:	f7f5 f87e 	bl	8005ba8 <rotate_180>
				while(1);
 8010aac:	e7fe      	b.n	8010aac <searchF42+0x2bc>
				break;

			//----a前進----
			default:
				if(pass[p_cnt-1] < 4){
 8010aae:	4b1f      	ldr	r3, [pc, #124]	; (8010b2c <searchF42+0x33c>)
 8010ab0:	781b      	ldrb	r3, [r3, #0]
 8010ab2:	3b01      	subs	r3, #1
 8010ab4:	4a1f      	ldr	r2, [pc, #124]	; (8010b34 <searchF42+0x344>)
 8010ab6:	56d3      	ldrsb	r3, [r2, r3]
 8010ab8:	2b03      	cmp	r3, #3
 8010aba:	dc11      	bgt.n	8010ae0 <searchF42+0x2f0>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 8010abc:	2300      	movs	r3, #0
 8010abe:	607b      	str	r3, [r7, #4]
 8010ac0:	e004      	b.n	8010acc <searchF42+0x2dc>
						half_sectionU();
 8010ac2:	f7f4 fd71 	bl	80055a8 <half_sectionU>
					for(int k = 0; k < pass[p_cnt-1]; k++){
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	3301      	adds	r3, #1
 8010aca:	607b      	str	r3, [r7, #4]
 8010acc:	4b17      	ldr	r3, [pc, #92]	; (8010b2c <searchF42+0x33c>)
 8010ace:	781b      	ldrb	r3, [r3, #0]
 8010ad0:	3b01      	subs	r3, #1
 8010ad2:	4a18      	ldr	r2, [pc, #96]	; (8010b34 <searchF42+0x344>)
 8010ad4:	56d3      	ldrsb	r3, [r2, r3]
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	4293      	cmp	r3, r2
 8010adc:	dbf1      	blt.n	8010ac2 <searchF42+0x2d2>
						p_cnt++;
					}else{
						half_sectionV();
					}
				}
				break;
 8010ade:	e073      	b.n	8010bc8 <searchF42+0x3d8>
				}else if(pass[p_cnt-1] < 64){
 8010ae0:	4b12      	ldr	r3, [pc, #72]	; (8010b2c <searchF42+0x33c>)
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	3b01      	subs	r3, #1
 8010ae6:	4a13      	ldr	r2, [pc, #76]	; (8010b34 <searchF42+0x344>)
 8010ae8:	56d3      	ldrsb	r3, [r2, r3]
 8010aea:	2b3f      	cmp	r3, #63	; 0x3f
 8010aec:	dc26      	bgt.n	8010b3c <searchF42+0x34c>
					one_sectionA2();
 8010aee:	f7f4 fe03 	bl	80056f8 <one_sectionA2>
					H_accel_flag = 1;
 8010af2:	4b11      	ldr	r3, [pc, #68]	; (8010b38 <searchF42+0x348>)
 8010af4:	2201      	movs	r2, #1
 8010af6:	701a      	strb	r2, [r3, #0]
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 8010af8:	2300      	movs	r3, #0
 8010afa:	603b      	str	r3, [r7, #0]
 8010afc:	e004      	b.n	8010b08 <searchF42+0x318>
						half_sectionU();
 8010afe:	f7f4 fd53 	bl	80055a8 <half_sectionU>
					for(k = 0; k < pass[p_cnt-1]-4; k++){
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	3301      	adds	r3, #1
 8010b06:	603b      	str	r3, [r7, #0]
 8010b08:	4b08      	ldr	r3, [pc, #32]	; (8010b2c <searchF42+0x33c>)
 8010b0a:	781b      	ldrb	r3, [r3, #0]
 8010b0c:	3b01      	subs	r3, #1
 8010b0e:	4a09      	ldr	r2, [pc, #36]	; (8010b34 <searchF42+0x344>)
 8010b10:	56d3      	ldrsb	r3, [r2, r3]
 8010b12:	3b04      	subs	r3, #4
 8010b14:	683a      	ldr	r2, [r7, #0]
 8010b16:	429a      	cmp	r2, r3
 8010b18:	dbf1      	blt.n	8010afe <searchF42+0x30e>
					one_sectionD2();
 8010b1a:	f7f4 fe13 	bl	8005744 <one_sectionD2>
					H_accel_flag = 0;
 8010b1e:	4b06      	ldr	r3, [pc, #24]	; (8010b38 <searchF42+0x348>)
 8010b20:	2200      	movs	r2, #0
 8010b22:	701a      	strb	r2, [r3, #0]
				break;
 8010b24:	e050      	b.n	8010bc8 <searchF42+0x3d8>
 8010b26:	bf00      	nop
 8010b28:	20000fac 	.word	0x20000fac
 8010b2c:	200002e8 	.word	0x200002e8
 8010b30:	200012ec 	.word	0x200012ec
 8010b34:	20000388 	.word	0x20000388
 8010b38:	20000301 	.word	0x20000301
					if((pass[p_cnt] == 64) && (pass[p_cnt+1] == 64) && (pass[p_cnt+2] == 64) && (H_accel_flag == 0)){
 8010b3c:	4b4b      	ldr	r3, [pc, #300]	; (8010c6c <searchF42+0x47c>)
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	461a      	mov	r2, r3
 8010b42:	4b4b      	ldr	r3, [pc, #300]	; (8010c70 <searchF42+0x480>)
 8010b44:	569b      	ldrsb	r3, [r3, r2]
 8010b46:	2b40      	cmp	r3, #64	; 0x40
 8010b48:	d11d      	bne.n	8010b86 <searchF42+0x396>
 8010b4a:	4b48      	ldr	r3, [pc, #288]	; (8010c6c <searchF42+0x47c>)
 8010b4c:	781b      	ldrb	r3, [r3, #0]
 8010b4e:	3301      	adds	r3, #1
 8010b50:	4a47      	ldr	r2, [pc, #284]	; (8010c70 <searchF42+0x480>)
 8010b52:	56d3      	ldrsb	r3, [r2, r3]
 8010b54:	2b40      	cmp	r3, #64	; 0x40
 8010b56:	d116      	bne.n	8010b86 <searchF42+0x396>
 8010b58:	4b44      	ldr	r3, [pc, #272]	; (8010c6c <searchF42+0x47c>)
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	3302      	adds	r3, #2
 8010b5e:	4a44      	ldr	r2, [pc, #272]	; (8010c70 <searchF42+0x480>)
 8010b60:	56d3      	ldrsb	r3, [r2, r3]
 8010b62:	2b40      	cmp	r3, #64	; 0x40
 8010b64:	d10f      	bne.n	8010b86 <searchF42+0x396>
 8010b66:	4b43      	ldr	r3, [pc, #268]	; (8010c74 <searchF42+0x484>)
 8010b68:	781b      	ldrb	r3, [r3, #0]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d10b      	bne.n	8010b86 <searchF42+0x396>
						one_sectionVA2();
 8010b6e:	f7f4 fe11 	bl	8005794 <one_sectionVA2>
						H_accel_flag = 1;
 8010b72:	4b40      	ldr	r3, [pc, #256]	; (8010c74 <searchF42+0x484>)
 8010b74:	2201      	movs	r2, #1
 8010b76:	701a      	strb	r2, [r3, #0]
						p_cnt++;
 8010b78:	4b3c      	ldr	r3, [pc, #240]	; (8010c6c <searchF42+0x47c>)
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	3301      	adds	r3, #1
 8010b7e:	b2da      	uxtb	r2, r3
 8010b80:	4b3a      	ldr	r3, [pc, #232]	; (8010c6c <searchF42+0x47c>)
 8010b82:	701a      	strb	r2, [r3, #0]
 8010b84:	e020      	b.n	8010bc8 <searchF42+0x3d8>
					else if((pass[p_cnt] == 64) && (pass[p_cnt+1] != 64) && (H_accel_flag == 1)){
 8010b86:	4b39      	ldr	r3, [pc, #228]	; (8010c6c <searchF42+0x47c>)
 8010b88:	781b      	ldrb	r3, [r3, #0]
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	4b38      	ldr	r3, [pc, #224]	; (8010c70 <searchF42+0x480>)
 8010b8e:	569b      	ldrsb	r3, [r3, r2]
 8010b90:	2b40      	cmp	r3, #64	; 0x40
 8010b92:	d116      	bne.n	8010bc2 <searchF42+0x3d2>
 8010b94:	4b35      	ldr	r3, [pc, #212]	; (8010c6c <searchF42+0x47c>)
 8010b96:	781b      	ldrb	r3, [r3, #0]
 8010b98:	3301      	adds	r3, #1
 8010b9a:	4a35      	ldr	r2, [pc, #212]	; (8010c70 <searchF42+0x480>)
 8010b9c:	56d3      	ldrsb	r3, [r2, r3]
 8010b9e:	2b40      	cmp	r3, #64	; 0x40
 8010ba0:	d00f      	beq.n	8010bc2 <searchF42+0x3d2>
 8010ba2:	4b34      	ldr	r3, [pc, #208]	; (8010c74 <searchF42+0x484>)
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	2b01      	cmp	r3, #1
 8010ba8:	d10b      	bne.n	8010bc2 <searchF42+0x3d2>
						one_sectionVD2();
 8010baa:	f7f4 fe0f 	bl	80057cc <one_sectionVD2>
						H_accel_flag = 0;
 8010bae:	4b31      	ldr	r3, [pc, #196]	; (8010c74 <searchF42+0x484>)
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	701a      	strb	r2, [r3, #0]
						p_cnt++;
 8010bb4:	4b2d      	ldr	r3, [pc, #180]	; (8010c6c <searchF42+0x47c>)
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	3301      	adds	r3, #1
 8010bba:	b2da      	uxtb	r2, r3
 8010bbc:	4b2b      	ldr	r3, [pc, #172]	; (8010c6c <searchF42+0x47c>)
 8010bbe:	701a      	strb	r2, [r3, #0]
 8010bc0:	e002      	b.n	8010bc8 <searchF42+0x3d8>
						half_sectionV();
 8010bc2:	f7f4 fcfd 	bl	80055c0 <half_sectionV>
				break;
 8010bc6:	e7ff      	b.n	8010bc8 <searchF42+0x3d8>
 8010bc8:	bf00      	nop
		}

	}while(pass[p_cnt] != -114);
 8010bca:	4b28      	ldr	r3, [pc, #160]	; (8010c6c <searchF42+0x47c>)
 8010bcc:	781b      	ldrb	r3, [r3, #0]
 8010bce:	461a      	mov	r2, r3
 8010bd0:	4b27      	ldr	r3, [pc, #156]	; (8010c70 <searchF42+0x480>)
 8010bd2:	569b      	ldrsb	r3, [r3, r2]
 8010bd4:	f113 0f72 	cmn.w	r3, #114	; 0x72
 8010bd8:	f47f ae3f 	bne.w	801085a <searchF42+0x6a>

	mouse.x = goal_x;
 8010bdc:	4b26      	ldr	r3, [pc, #152]	; (8010c78 <searchF42+0x488>)
 8010bde:	781a      	ldrb	r2, [r3, #0]
 8010be0:	4b26      	ldr	r3, [pc, #152]	; (8010c7c <searchF42+0x48c>)
 8010be2:	701a      	strb	r2, [r3, #0]
	mouse.y = goal_y;
 8010be4:	4b26      	ldr	r3, [pc, #152]	; (8010c80 <searchF42+0x490>)
 8010be6:	781a      	ldrb	r2, [r3, #0]
 8010be8:	4b24      	ldr	r3, [pc, #144]	; (8010c7c <searchF42+0x48c>)
 8010bea:	705a      	strb	r2, [r3, #1]

	if(pass[p_cnt-1] != -13 && pass[p_cnt-1] != -14 && pass[p_cnt-1] != -15 && pass[p_cnt-1] != -16){
 8010bec:	4b1f      	ldr	r3, [pc, #124]	; (8010c6c <searchF42+0x47c>)
 8010bee:	781b      	ldrb	r3, [r3, #0]
 8010bf0:	3b01      	subs	r3, #1
 8010bf2:	4a1f      	ldr	r2, [pc, #124]	; (8010c70 <searchF42+0x480>)
 8010bf4:	56d3      	ldrsb	r3, [r2, r3]
 8010bf6:	f113 0f0d 	cmn.w	r3, #13
 8010bfa:	d01c      	beq.n	8010c36 <searchF42+0x446>
 8010bfc:	4b1b      	ldr	r3, [pc, #108]	; (8010c6c <searchF42+0x47c>)
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	3b01      	subs	r3, #1
 8010c02:	4a1b      	ldr	r2, [pc, #108]	; (8010c70 <searchF42+0x480>)
 8010c04:	56d3      	ldrsb	r3, [r2, r3]
 8010c06:	f113 0f0e 	cmn.w	r3, #14
 8010c0a:	d014      	beq.n	8010c36 <searchF42+0x446>
 8010c0c:	4b17      	ldr	r3, [pc, #92]	; (8010c6c <searchF42+0x47c>)
 8010c0e:	781b      	ldrb	r3, [r3, #0]
 8010c10:	3b01      	subs	r3, #1
 8010c12:	4a17      	ldr	r2, [pc, #92]	; (8010c70 <searchF42+0x480>)
 8010c14:	56d3      	ldrsb	r3, [r2, r3]
 8010c16:	f113 0f0f 	cmn.w	r3, #15
 8010c1a:	d00c      	beq.n	8010c36 <searchF42+0x446>
 8010c1c:	4b13      	ldr	r3, [pc, #76]	; (8010c6c <searchF42+0x47c>)
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	3b01      	subs	r3, #1
 8010c22:	4a13      	ldr	r2, [pc, #76]	; (8010c70 <searchF42+0x480>)
 8010c24:	56d3      	ldrsb	r3, [r2, r3]
 8010c26:	f113 0f10 	cmn.w	r3, #16
 8010c2a:	d004      	beq.n	8010c36 <searchF42+0x446>
		half_sectionD2();
 8010c2c:	f7f4 fc82 	bl	8005534 <half_sectionD2>
		full_led_write(BLUE);
 8010c30:	2003      	movs	r0, #3
 8010c32:	f001 ffe9 	bl	8012c08 <full_led_write>
	}

	HAL_Delay(500);
 8010c36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010c3a:	f7f0 f9ef 	bl	800101c <HAL_Delay>
	rotate_180();											//180度回転
 8010c3e:	f7f4 ffb3 	bl	8005ba8 <rotate_180>
	driveC2(SETPOS_BACK);         //a尻を当てる程度に後退。回転後に停止する
 8010c42:	2064      	movs	r0, #100	; 0x64
 8010c44:	f7f4 fb50 	bl	80052e8 <driveC2>
	degree_z = target_degree_z;
 8010c48:	4b0e      	ldr	r3, [pc, #56]	; (8010c84 <searchF42+0x494>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	4a0e      	ldr	r2, [pc, #56]	; (8010c88 <searchF42+0x498>)
 8010c4e:	6013      	str	r3, [r2, #0]
	start_flag = 0;
 8010c50:	4b0e      	ldr	r3, [pc, #56]	; (8010c8c <searchF42+0x49c>)
 8010c52:	2200      	movs	r2, #0
 8010c54:	701a      	strb	r2, [r3, #0]

	mouse.dir = mouse.dir / 2;
 8010c56:	4b09      	ldr	r3, [pc, #36]	; (8010c7c <searchF42+0x48c>)
 8010c58:	789b      	ldrb	r3, [r3, #2]
 8010c5a:	b2db      	uxtb	r3, r3
 8010c5c:	085b      	lsrs	r3, r3, #1
 8010c5e:	b2da      	uxtb	r2, r3
 8010c60:	4b06      	ldr	r3, [pc, #24]	; (8010c7c <searchF42+0x48c>)
 8010c62:	709a      	strb	r2, [r3, #2]

}
 8010c64:	bf00      	nop
 8010c66:	3708      	adds	r7, #8
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}
 8010c6c:	200002e8 	.word	0x200002e8
 8010c70:	20000388 	.word	0x20000388
 8010c74:	20000301 	.word	0x20000301
 8010c78:	20000bf1 	.word	0x20000bf1
 8010c7c:	20000c54 	.word	0x20000c54
 8010c80:	20000b8c 	.word	0x20000b8c
 8010c84:	20000c40 	.word	0x20000c40
 8010c88:	20000b9c 	.word	0x20000b9c
 8010c8c:	200012ec 	.word	0x200012ec

08010c90 <adv_pos>:
//adv_pos
//aマイクロマウス内部位置情報で前進させる
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 8010c90:	b480      	push	{r7}
 8010c92:	af00      	add	r7, sp, #0

	switch(mouse.dir){										//aマイクロマウスが現在向いている方向で判定
 8010c94:	4b1a      	ldr	r3, [pc, #104]	; (8010d00 <adv_pos+0x70>)
 8010c96:	789b      	ldrb	r3, [r3, #2]
 8010c98:	b2db      	uxtb	r3, r3
 8010c9a:	2b03      	cmp	r3, #3
 8010c9c:	d82a      	bhi.n	8010cf4 <adv_pos+0x64>
 8010c9e:	a201      	add	r2, pc, #4	; (adr r2, 8010ca4 <adv_pos+0x14>)
 8010ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ca4:	08010cb5 	.word	0x08010cb5
 8010ca8:	08010cc5 	.word	0x08010cc5
 8010cac:	08010cd5 	.word	0x08010cd5
 8010cb0:	08010ce5 	.word	0x08010ce5
	case 0x00:												//a北方向に向いている場合
		mouse.y++;											//Y座標をインクリメント
 8010cb4:	4b12      	ldr	r3, [pc, #72]	; (8010d00 <adv_pos+0x70>)
 8010cb6:	785b      	ldrb	r3, [r3, #1]
 8010cb8:	b2db      	uxtb	r3, r3
 8010cba:	3301      	adds	r3, #1
 8010cbc:	b2da      	uxtb	r2, r3
 8010cbe:	4b10      	ldr	r3, [pc, #64]	; (8010d00 <adv_pos+0x70>)
 8010cc0:	705a      	strb	r2, [r3, #1]
		break;
 8010cc2:	e017      	b.n	8010cf4 <adv_pos+0x64>
	case 0x01:												//a東方向に向いている場合
		mouse.x++;											//X座標をインクリメント
 8010cc4:	4b0e      	ldr	r3, [pc, #56]	; (8010d00 <adv_pos+0x70>)
 8010cc6:	781b      	ldrb	r3, [r3, #0]
 8010cc8:	b2db      	uxtb	r3, r3
 8010cca:	3301      	adds	r3, #1
 8010ccc:	b2da      	uxtb	r2, r3
 8010cce:	4b0c      	ldr	r3, [pc, #48]	; (8010d00 <adv_pos+0x70>)
 8010cd0:	701a      	strb	r2, [r3, #0]
		break;
 8010cd2:	e00f      	b.n	8010cf4 <adv_pos+0x64>
	case 0x02:												//a南方向に向いている場合
		mouse.y--;											//Y座標をデクリメント
 8010cd4:	4b0a      	ldr	r3, [pc, #40]	; (8010d00 <adv_pos+0x70>)
 8010cd6:	785b      	ldrb	r3, [r3, #1]
 8010cd8:	b2db      	uxtb	r3, r3
 8010cda:	3b01      	subs	r3, #1
 8010cdc:	b2da      	uxtb	r2, r3
 8010cde:	4b08      	ldr	r3, [pc, #32]	; (8010d00 <adv_pos+0x70>)
 8010ce0:	705a      	strb	r2, [r3, #1]
		break;
 8010ce2:	e007      	b.n	8010cf4 <adv_pos+0x64>
	case 0x03:												//a西方向に向いている場合
		mouse.x--;											//X座標をデクリメント
 8010ce4:	4b06      	ldr	r3, [pc, #24]	; (8010d00 <adv_pos+0x70>)
 8010ce6:	781b      	ldrb	r3, [r3, #0]
 8010ce8:	b2db      	uxtb	r3, r3
 8010cea:	3b01      	subs	r3, #1
 8010cec:	b2da      	uxtb	r2, r3
 8010cee:	4b04      	ldr	r3, [pc, #16]	; (8010d00 <adv_pos+0x70>)
 8010cf0:	701a      	strb	r2, [r3, #0]
		break;
 8010cf2:	bf00      	nop
	}
}
 8010cf4:	bf00      	nop
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfc:	4770      	bx	lr
 8010cfe:	bf00      	nop
 8010d00:	20000c54 	.word	0x20000c54

08010d04 <conf_route>:
//conf_route
//a進路を判定する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 8010d04:	b580      	push	{r7, lr}
 8010d06:	af00      	add	r7, sp, #0

	//----a壁情報書き込み----
	write_map();
 8010d08:	f000 f886 	bl	8010e18 <write_map>

	//----a最短経路上に壁があれば進路変更----
	if(wall_info & route[r_cnt]){
 8010d0c:	4b09      	ldr	r3, [pc, #36]	; (8010d34 <conf_route+0x30>)
 8010d0e:	781b      	ldrb	r3, [r3, #0]
 8010d10:	461a      	mov	r2, r3
 8010d12:	4b09      	ldr	r3, [pc, #36]	; (8010d38 <conf_route+0x34>)
 8010d14:	5c9a      	ldrb	r2, [r3, r2]
 8010d16:	4b09      	ldr	r3, [pc, #36]	; (8010d3c <conf_route+0x38>)
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	4013      	ands	r3, r2
 8010d1c:	b2db      	uxtb	r3, r3
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d006      	beq.n	8010d30 <conf_route+0x2c>
		make_smap();										//a歩数マップを更新
 8010d22:	f000 fa79 	bl	8011218 <make_smap>
		make_route();										//a最短経路を更新
 8010d26:	f000 fdb5 	bl	8011894 <make_route>
		r_cnt = 0;											//a経路カウンタを0に
 8010d2a:	4b02      	ldr	r3, [pc, #8]	; (8010d34 <conf_route+0x30>)
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	701a      	strb	r2, [r3, #0]
	}
}
 8010d30:	bf00      	nop
 8010d32:	bd80      	pop	{r7, pc}
 8010d34:	200012f4 	.word	0x200012f4
 8010d38:	20000c9c 	.word	0x20000c9c
 8010d3c:	20000300 	.word	0x20000300

08010d40 <map_Init>:
//map_Init
//aマップ格納配列map[][]の初期化をする
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 8010d40:	b480      	push	{r7}
 8010d42:	b083      	sub	sp, #12
 8010d44:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数

	//====a初期化開始====
	//aマップのクリア
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8010d46:	2300      	movs	r3, #0
 8010d48:	71bb      	strb	r3, [r7, #6]
 8010d4a:	e013      	b.n	8010d74 <map_Init+0x34>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	71fb      	strb	r3, [r7, #7]
 8010d50:	e00a      	b.n	8010d68 <map_Init+0x28>
			map[y][x] = 0xf0;								//a上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 8010d52:	79ba      	ldrb	r2, [r7, #6]
 8010d54:	79fb      	ldrb	r3, [r7, #7]
 8010d56:	492f      	ldr	r1, [pc, #188]	; (8010e14 <map_Init+0xd4>)
 8010d58:	0112      	lsls	r2, r2, #4
 8010d5a:	440a      	add	r2, r1
 8010d5c:	4413      	add	r3, r2
 8010d5e:	22f0      	movs	r2, #240	; 0xf0
 8010d60:	701a      	strb	r2, [r3, #0]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 8010d62:	79fb      	ldrb	r3, [r7, #7]
 8010d64:	3301      	adds	r3, #1
 8010d66:	71fb      	strb	r3, [r7, #7]
 8010d68:	79fb      	ldrb	r3, [r7, #7]
 8010d6a:	2b0f      	cmp	r3, #15
 8010d6c:	d9f1      	bls.n	8010d52 <map_Init+0x12>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8010d6e:	79bb      	ldrb	r3, [r7, #6]
 8010d70:	3301      	adds	r3, #1
 8010d72:	71bb      	strb	r3, [r7, #6]
 8010d74:	79bb      	ldrb	r3, [r7, #6]
 8010d76:	2b0f      	cmp	r3, #15
 8010d78:	d9e8      	bls.n	8010d4c <map_Init+0xc>
		}
	}

	//a確定壁の配置
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	71bb      	strb	r3, [r7, #6]
 8010d7e:	e020      	b.n	8010dc2 <map_Init+0x82>
		map[y][0] |= 0xf1;									//a最西に壁を配置
 8010d80:	79bb      	ldrb	r3, [r7, #6]
 8010d82:	4a24      	ldr	r2, [pc, #144]	; (8010e14 <map_Init+0xd4>)
 8010d84:	011b      	lsls	r3, r3, #4
 8010d86:	4413      	add	r3, r2
 8010d88:	781a      	ldrb	r2, [r3, #0]
 8010d8a:	79bb      	ldrb	r3, [r7, #6]
 8010d8c:	f062 020e 	orn	r2, r2, #14
 8010d90:	b2d1      	uxtb	r1, r2
 8010d92:	4a20      	ldr	r2, [pc, #128]	; (8010e14 <map_Init+0xd4>)
 8010d94:	011b      	lsls	r3, r3, #4
 8010d96:	4413      	add	r3, r2
 8010d98:	460a      	mov	r2, r1
 8010d9a:	701a      	strb	r2, [r3, #0]
		map[y][15] |= 0xf4;									//a最東に壁を配置
 8010d9c:	79bb      	ldrb	r3, [r7, #6]
 8010d9e:	4a1d      	ldr	r2, [pc, #116]	; (8010e14 <map_Init+0xd4>)
 8010da0:	011b      	lsls	r3, r3, #4
 8010da2:	4413      	add	r3, r2
 8010da4:	330f      	adds	r3, #15
 8010da6:	781a      	ldrb	r2, [r3, #0]
 8010da8:	79bb      	ldrb	r3, [r7, #6]
 8010daa:	f062 020b 	orn	r2, r2, #11
 8010dae:	b2d1      	uxtb	r1, r2
 8010db0:	4a18      	ldr	r2, [pc, #96]	; (8010e14 <map_Init+0xd4>)
 8010db2:	011b      	lsls	r3, r3, #4
 8010db4:	4413      	add	r3, r2
 8010db6:	330f      	adds	r3, #15
 8010db8:	460a      	mov	r2, r1
 8010dba:	701a      	strb	r2, [r3, #0]
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8010dbc:	79bb      	ldrb	r3, [r7, #6]
 8010dbe:	3301      	adds	r3, #1
 8010dc0:	71bb      	strb	r3, [r7, #6]
 8010dc2:	79bb      	ldrb	r3, [r7, #6]
 8010dc4:	2b0f      	cmp	r3, #15
 8010dc6:	d9db      	bls.n	8010d80 <map_Init+0x40>
	}
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 8010dc8:	2300      	movs	r3, #0
 8010dca:	71fb      	strb	r3, [r7, #7]
 8010dcc:	e019      	b.n	8010e02 <map_Init+0xc2>
		map[0][x] |= 0xf2;									//a最南に壁を配置
 8010dce:	79fb      	ldrb	r3, [r7, #7]
 8010dd0:	4a10      	ldr	r2, [pc, #64]	; (8010e14 <map_Init+0xd4>)
 8010dd2:	5cd2      	ldrb	r2, [r2, r3]
 8010dd4:	79fb      	ldrb	r3, [r7, #7]
 8010dd6:	f062 020d 	orn	r2, r2, #13
 8010dda:	b2d1      	uxtb	r1, r2
 8010ddc:	4a0d      	ldr	r2, [pc, #52]	; (8010e14 <map_Init+0xd4>)
 8010dde:	54d1      	strb	r1, [r2, r3]
		map[15][x] |= 0xf8;									//a最北に壁を配置
 8010de0:	79fb      	ldrb	r3, [r7, #7]
 8010de2:	4a0c      	ldr	r2, [pc, #48]	; (8010e14 <map_Init+0xd4>)
 8010de4:	4413      	add	r3, r2
 8010de6:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 8010dea:	79fb      	ldrb	r3, [r7, #7]
 8010dec:	f062 0207 	orn	r2, r2, #7
 8010df0:	b2d1      	uxtb	r1, r2
 8010df2:	4a08      	ldr	r2, [pc, #32]	; (8010e14 <map_Init+0xd4>)
 8010df4:	4413      	add	r3, r2
 8010df6:	460a      	mov	r2, r1
 8010df8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	for(x = 0; x <= 15; x++){								//a各X座標で実行
 8010dfc:	79fb      	ldrb	r3, [r7, #7]
 8010dfe:	3301      	adds	r3, #1
 8010e00:	71fb      	strb	r3, [r7, #7]
 8010e02:	79fb      	ldrb	r3, [r7, #7]
 8010e04:	2b0f      	cmp	r3, #15
 8010e06:	d9e2      	bls.n	8010dce <map_Init+0x8e>
	}
}
 8010e08:	bf00      	nop
 8010e0a:	370c      	adds	r7, #12
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr
 8010e14:	200001e4 	.word	0x200001e4

08010e18 <write_map>:
//write_map
//aマップデータを書き込む
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 8010e18:	b490      	push	{r4, r7}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t m_temp;											//a向きを補正した壁情報

	//====a壁情報の補正格納====
	m_temp = (wall_info >> mouse.dir) & 0x0f;				//aセンサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 8010e1e:	4b8f      	ldr	r3, [pc, #572]	; (801105c <write_map+0x244>)
 8010e20:	781b      	ldrb	r3, [r3, #0]
 8010e22:	461a      	mov	r2, r3
 8010e24:	4b8e      	ldr	r3, [pc, #568]	; (8011060 <write_map+0x248>)
 8010e26:	789b      	ldrb	r3, [r3, #2]
 8010e28:	b2db      	uxtb	r3, r3
 8010e2a:	fa42 f303 	asr.w	r3, r2, r3
 8010e2e:	b2db      	uxtb	r3, r3
 8010e30:	f003 030f 	and.w	r3, r3, #15
 8010e34:	71fb      	strb	r3, [r7, #7]
	m_temp |= (m_temp << 4);								//a上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 8010e36:	79fb      	ldrb	r3, [r7, #7]
 8010e38:	011b      	lsls	r3, r3, #4
 8010e3a:	b25a      	sxtb	r2, r3
 8010e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e40:	4313      	orrs	r3, r2
 8010e42:	b25b      	sxtb	r3, r3
 8010e44:	71fb      	strb	r3, [r7, #7]

	//====aデータの書き込み====
	map[mouse.y][mouse.x] = m_temp; 						//a現在地に壁情報書き込み
 8010e46:	4b86      	ldr	r3, [pc, #536]	; (8011060 <write_map+0x248>)
 8010e48:	785b      	ldrb	r3, [r3, #1]
 8010e4a:	b2db      	uxtb	r3, r3
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	4b84      	ldr	r3, [pc, #528]	; (8011060 <write_map+0x248>)
 8010e50:	781b      	ldrb	r3, [r3, #0]
 8010e52:	b2db      	uxtb	r3, r3
 8010e54:	4619      	mov	r1, r3
 8010e56:	4a83      	ldr	r2, [pc, #524]	; (8011064 <write_map+0x24c>)
 8010e58:	0103      	lsls	r3, r0, #4
 8010e5a:	4413      	add	r3, r2
 8010e5c:	440b      	add	r3, r1
 8010e5e:	79fa      	ldrb	r2, [r7, #7]
 8010e60:	701a      	strb	r2, [r3, #0]
	//----a周辺に書き込む----
	//a北側について
	if(mouse.y != 15){										//a現在最北端でないとき
 8010e62:	4b7f      	ldr	r3, [pc, #508]	; (8011060 <write_map+0x248>)
 8010e64:	785b      	ldrb	r3, [r3, #1]
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	2b0f      	cmp	r3, #15
 8010e6a:	d039      	beq.n	8010ee0 <write_map+0xc8>
		if(m_temp & 0x88){									//a北壁がある場合
 8010e6c:	79fb      	ldrb	r3, [r7, #7]
 8010e6e:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d01a      	beq.n	8010eac <write_map+0x94>
			map[mouse.y + 1][mouse.x] |= 0x22;				//a北側の区画から見て南壁ありを書き込む
 8010e76:	4b7a      	ldr	r3, [pc, #488]	; (8011060 <write_map+0x248>)
 8010e78:	785b      	ldrb	r3, [r3, #1]
 8010e7a:	b2d8      	uxtb	r0, r3
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	3301      	adds	r3, #1
 8010e80:	4a77      	ldr	r2, [pc, #476]	; (8011060 <write_map+0x248>)
 8010e82:	7812      	ldrb	r2, [r2, #0]
 8010e84:	b2d1      	uxtb	r1, r2
 8010e86:	460c      	mov	r4, r1
 8010e88:	4a76      	ldr	r2, [pc, #472]	; (8011064 <write_map+0x24c>)
 8010e8a:	011b      	lsls	r3, r3, #4
 8010e8c:	4413      	add	r3, r2
 8010e8e:	4423      	add	r3, r4
 8010e90:	781a      	ldrb	r2, [r3, #0]
 8010e92:	4603      	mov	r3, r0
 8010e94:	3301      	adds	r3, #1
 8010e96:	4608      	mov	r0, r1
 8010e98:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8010e9c:	b2d1      	uxtb	r1, r2
 8010e9e:	4a71      	ldr	r2, [pc, #452]	; (8011064 <write_map+0x24c>)
 8010ea0:	011b      	lsls	r3, r3, #4
 8010ea2:	4413      	add	r3, r2
 8010ea4:	4403      	add	r3, r0
 8010ea6:	460a      	mov	r2, r1
 8010ea8:	701a      	strb	r2, [r3, #0]
 8010eaa:	e019      	b.n	8010ee0 <write_map+0xc8>
		}else{												//a北壁がない場合
			map[mouse.y + 1][mouse.x] &= 0xDD;				//a北側の区画から見て南壁なしを書き込む
 8010eac:	4b6c      	ldr	r3, [pc, #432]	; (8011060 <write_map+0x248>)
 8010eae:	785b      	ldrb	r3, [r3, #1]
 8010eb0:	b2d8      	uxtb	r0, r3
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	3301      	adds	r3, #1
 8010eb6:	4a6a      	ldr	r2, [pc, #424]	; (8011060 <write_map+0x248>)
 8010eb8:	7812      	ldrb	r2, [r2, #0]
 8010eba:	b2d1      	uxtb	r1, r2
 8010ebc:	460c      	mov	r4, r1
 8010ebe:	4a69      	ldr	r2, [pc, #420]	; (8011064 <write_map+0x24c>)
 8010ec0:	011b      	lsls	r3, r3, #4
 8010ec2:	4413      	add	r3, r2
 8010ec4:	4423      	add	r3, r4
 8010ec6:	781a      	ldrb	r2, [r3, #0]
 8010ec8:	4603      	mov	r3, r0
 8010eca:	3301      	adds	r3, #1
 8010ecc:	4608      	mov	r0, r1
 8010ece:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8010ed2:	b2d1      	uxtb	r1, r2
 8010ed4:	4a63      	ldr	r2, [pc, #396]	; (8011064 <write_map+0x24c>)
 8010ed6:	011b      	lsls	r3, r3, #4
 8010ed8:	4413      	add	r3, r2
 8010eda:	4403      	add	r3, r0
 8010edc:	460a      	mov	r2, r1
 8010ede:	701a      	strb	r2, [r3, #0]
		}
	}
	//a東側について
	if(mouse.x != 15){										//a現在最東端でないとき
 8010ee0:	4b5f      	ldr	r3, [pc, #380]	; (8011060 <write_map+0x248>)
 8010ee2:	781b      	ldrb	r3, [r3, #0]
 8010ee4:	b2db      	uxtb	r3, r3
 8010ee6:	2b0f      	cmp	r3, #15
 8010ee8:	d037      	beq.n	8010f5a <write_map+0x142>
		if(m_temp & 0x44){									//a東壁がある場合
 8010eea:	79fb      	ldrb	r3, [r7, #7]
 8010eec:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d019      	beq.n	8010f28 <write_map+0x110>
			map[mouse.y][mouse.x + 1] |= 0x11;				//a東側の区画から見て西壁ありを書き込む
 8010ef4:	4b5a      	ldr	r3, [pc, #360]	; (8011060 <write_map+0x248>)
 8010ef6:	785b      	ldrb	r3, [r3, #1]
 8010ef8:	b2dc      	uxtb	r4, r3
 8010efa:	4622      	mov	r2, r4
 8010efc:	4b58      	ldr	r3, [pc, #352]	; (8011060 <write_map+0x248>)
 8010efe:	781b      	ldrb	r3, [r3, #0]
 8010f00:	b2d8      	uxtb	r0, r3
 8010f02:	4603      	mov	r3, r0
 8010f04:	3301      	adds	r3, #1
 8010f06:	4957      	ldr	r1, [pc, #348]	; (8011064 <write_map+0x24c>)
 8010f08:	0112      	lsls	r2, r2, #4
 8010f0a:	440a      	add	r2, r1
 8010f0c:	4413      	add	r3, r2
 8010f0e:	781a      	ldrb	r2, [r3, #0]
 8010f10:	4603      	mov	r3, r0
 8010f12:	3301      	adds	r3, #1
 8010f14:	f042 0211 	orr.w	r2, r2, #17
 8010f18:	b2d0      	uxtb	r0, r2
 8010f1a:	4952      	ldr	r1, [pc, #328]	; (8011064 <write_map+0x24c>)
 8010f1c:	0122      	lsls	r2, r4, #4
 8010f1e:	440a      	add	r2, r1
 8010f20:	4413      	add	r3, r2
 8010f22:	4602      	mov	r2, r0
 8010f24:	701a      	strb	r2, [r3, #0]
 8010f26:	e018      	b.n	8010f5a <write_map+0x142>
		}else{												//a北壁がない場合
			map[mouse.y][mouse.x + 1] &= 0xEE;				//a東側の区画から見て西壁なしを書き込む
 8010f28:	4b4d      	ldr	r3, [pc, #308]	; (8011060 <write_map+0x248>)
 8010f2a:	785b      	ldrb	r3, [r3, #1]
 8010f2c:	b2dc      	uxtb	r4, r3
 8010f2e:	4622      	mov	r2, r4
 8010f30:	4b4b      	ldr	r3, [pc, #300]	; (8011060 <write_map+0x248>)
 8010f32:	781b      	ldrb	r3, [r3, #0]
 8010f34:	b2d8      	uxtb	r0, r3
 8010f36:	4603      	mov	r3, r0
 8010f38:	3301      	adds	r3, #1
 8010f3a:	494a      	ldr	r1, [pc, #296]	; (8011064 <write_map+0x24c>)
 8010f3c:	0112      	lsls	r2, r2, #4
 8010f3e:	440a      	add	r2, r1
 8010f40:	4413      	add	r3, r2
 8010f42:	781a      	ldrb	r2, [r3, #0]
 8010f44:	4603      	mov	r3, r0
 8010f46:	3301      	adds	r3, #1
 8010f48:	f022 0211 	bic.w	r2, r2, #17
 8010f4c:	b2d0      	uxtb	r0, r2
 8010f4e:	4945      	ldr	r1, [pc, #276]	; (8011064 <write_map+0x24c>)
 8010f50:	0122      	lsls	r2, r4, #4
 8010f52:	440a      	add	r2, r1
 8010f54:	4413      	add	r3, r2
 8010f56:	4602      	mov	r2, r0
 8010f58:	701a      	strb	r2, [r3, #0]
		}
	}
	//a南壁について
	if(mouse.y != 0){										//a現在最南端でないとき
 8010f5a:	4b41      	ldr	r3, [pc, #260]	; (8011060 <write_map+0x248>)
 8010f5c:	785b      	ldrb	r3, [r3, #1]
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d039      	beq.n	8010fd8 <write_map+0x1c0>
		if(m_temp & 0x22){									//a南壁がある場合
 8010f64:	79fb      	ldrb	r3, [r7, #7]
 8010f66:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d01a      	beq.n	8010fa4 <write_map+0x18c>
			map[mouse.y - 1][mouse.x] |= 0x88;				//a南側の区画から見て北壁ありを書き込む
 8010f6e:	4b3c      	ldr	r3, [pc, #240]	; (8011060 <write_map+0x248>)
 8010f70:	785b      	ldrb	r3, [r3, #1]
 8010f72:	b2d8      	uxtb	r0, r3
 8010f74:	4603      	mov	r3, r0
 8010f76:	3b01      	subs	r3, #1
 8010f78:	4a39      	ldr	r2, [pc, #228]	; (8011060 <write_map+0x248>)
 8010f7a:	7812      	ldrb	r2, [r2, #0]
 8010f7c:	b2d1      	uxtb	r1, r2
 8010f7e:	460c      	mov	r4, r1
 8010f80:	4a38      	ldr	r2, [pc, #224]	; (8011064 <write_map+0x24c>)
 8010f82:	011b      	lsls	r3, r3, #4
 8010f84:	4413      	add	r3, r2
 8010f86:	4423      	add	r3, r4
 8010f88:	781a      	ldrb	r2, [r3, #0]
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	3b01      	subs	r3, #1
 8010f8e:	4608      	mov	r0, r1
 8010f90:	f062 0277 	orn	r2, r2, #119	; 0x77
 8010f94:	b2d1      	uxtb	r1, r2
 8010f96:	4a33      	ldr	r2, [pc, #204]	; (8011064 <write_map+0x24c>)
 8010f98:	011b      	lsls	r3, r3, #4
 8010f9a:	4413      	add	r3, r2
 8010f9c:	4403      	add	r3, r0
 8010f9e:	460a      	mov	r2, r1
 8010fa0:	701a      	strb	r2, [r3, #0]
 8010fa2:	e019      	b.n	8010fd8 <write_map+0x1c0>
		}else{												//a南壁がない場合
			map[mouse.y - 1][mouse.x] &= 0x77;				//a南側の区画から見て北壁なしを書き込む
 8010fa4:	4b2e      	ldr	r3, [pc, #184]	; (8011060 <write_map+0x248>)
 8010fa6:	785b      	ldrb	r3, [r3, #1]
 8010fa8:	b2d8      	uxtb	r0, r3
 8010faa:	4603      	mov	r3, r0
 8010fac:	3b01      	subs	r3, #1
 8010fae:	4a2c      	ldr	r2, [pc, #176]	; (8011060 <write_map+0x248>)
 8010fb0:	7812      	ldrb	r2, [r2, #0]
 8010fb2:	b2d1      	uxtb	r1, r2
 8010fb4:	460c      	mov	r4, r1
 8010fb6:	4a2b      	ldr	r2, [pc, #172]	; (8011064 <write_map+0x24c>)
 8010fb8:	011b      	lsls	r3, r3, #4
 8010fba:	4413      	add	r3, r2
 8010fbc:	4423      	add	r3, r4
 8010fbe:	781a      	ldrb	r2, [r3, #0]
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	3b01      	subs	r3, #1
 8010fc4:	4608      	mov	r0, r1
 8010fc6:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8010fca:	b2d1      	uxtb	r1, r2
 8010fcc:	4a25      	ldr	r2, [pc, #148]	; (8011064 <write_map+0x24c>)
 8010fce:	011b      	lsls	r3, r3, #4
 8010fd0:	4413      	add	r3, r2
 8010fd2:	4403      	add	r3, r0
 8010fd4:	460a      	mov	r2, r1
 8010fd6:	701a      	strb	r2, [r3, #0]
		}
	}
	//a西側について
	if(mouse.x != 0){										//a現在最西端でないとき
 8010fd8:	4b21      	ldr	r3, [pc, #132]	; (8011060 <write_map+0x248>)
 8010fda:	781b      	ldrb	r3, [r3, #0]
 8010fdc:	b2db      	uxtb	r3, r3
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d037      	beq.n	8011052 <write_map+0x23a>
		if(m_temp & 0x11){									//a西壁がある場合
 8010fe2:	79fb      	ldrb	r3, [r7, #7]
 8010fe4:	f003 0311 	and.w	r3, r3, #17
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d019      	beq.n	8011020 <write_map+0x208>
			map[mouse.y][mouse.x - 1] |= 0x44;				//a西側の区画から見て東壁ありを書き込む
 8010fec:	4b1c      	ldr	r3, [pc, #112]	; (8011060 <write_map+0x248>)
 8010fee:	785b      	ldrb	r3, [r3, #1]
 8010ff0:	b2dc      	uxtb	r4, r3
 8010ff2:	4622      	mov	r2, r4
 8010ff4:	4b1a      	ldr	r3, [pc, #104]	; (8011060 <write_map+0x248>)
 8010ff6:	781b      	ldrb	r3, [r3, #0]
 8010ff8:	b2d8      	uxtb	r0, r3
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	3b01      	subs	r3, #1
 8010ffe:	4919      	ldr	r1, [pc, #100]	; (8011064 <write_map+0x24c>)
 8011000:	0112      	lsls	r2, r2, #4
 8011002:	440a      	add	r2, r1
 8011004:	4413      	add	r3, r2
 8011006:	781a      	ldrb	r2, [r3, #0]
 8011008:	4603      	mov	r3, r0
 801100a:	3b01      	subs	r3, #1
 801100c:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 8011010:	b2d0      	uxtb	r0, r2
 8011012:	4914      	ldr	r1, [pc, #80]	; (8011064 <write_map+0x24c>)
 8011014:	0122      	lsls	r2, r4, #4
 8011016:	440a      	add	r2, r1
 8011018:	4413      	add	r3, r2
 801101a:	4602      	mov	r2, r0
 801101c:	701a      	strb	r2, [r3, #0]
		}else{												//a西壁がない場合
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
		}
	}
}
 801101e:	e018      	b.n	8011052 <write_map+0x23a>
			map[mouse.y][mouse.x - 1] &= 0xBB;				//a西側の区画から見て東側なしを書き込む
 8011020:	4b0f      	ldr	r3, [pc, #60]	; (8011060 <write_map+0x248>)
 8011022:	785b      	ldrb	r3, [r3, #1]
 8011024:	b2dc      	uxtb	r4, r3
 8011026:	4622      	mov	r2, r4
 8011028:	4b0d      	ldr	r3, [pc, #52]	; (8011060 <write_map+0x248>)
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	b2d8      	uxtb	r0, r3
 801102e:	4603      	mov	r3, r0
 8011030:	3b01      	subs	r3, #1
 8011032:	490c      	ldr	r1, [pc, #48]	; (8011064 <write_map+0x24c>)
 8011034:	0112      	lsls	r2, r2, #4
 8011036:	440a      	add	r2, r1
 8011038:	4413      	add	r3, r2
 801103a:	781a      	ldrb	r2, [r3, #0]
 801103c:	4603      	mov	r3, r0
 801103e:	3b01      	subs	r3, #1
 8011040:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 8011044:	b2d0      	uxtb	r0, r2
 8011046:	4907      	ldr	r1, [pc, #28]	; (8011064 <write_map+0x24c>)
 8011048:	0122      	lsls	r2, r4, #4
 801104a:	440a      	add	r2, r1
 801104c:	4413      	add	r3, r2
 801104e:	4602      	mov	r2, r0
 8011050:	701a      	strb	r2, [r3, #0]
}
 8011052:	bf00      	nop
 8011054:	3708      	adds	r7, #8
 8011056:	46bd      	mov	sp, r7
 8011058:	bc90      	pop	{r4, r7}
 801105a:	4770      	bx	lr
 801105c:	20000300 	.word	0x20000300
 8011060:	20000c54 	.word	0x20000c54
 8011064:	200001e4 	.word	0x200001e4

08011068 <turn_dir>:
//turn_dir
//aマウスの方向を変更する
//a引数1：t_pat …… 回転方向(search.hでマクロ定義)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat, uint8_t t_mode){
 8011068:	b590      	push	{r4, r7, lr}
 801106a:	b083      	sub	sp, #12
 801106c:	af00      	add	r7, sp, #0
 801106e:	4603      	mov	r3, r0
 8011070:	460a      	mov	r2, r1
 8011072:	71fb      	strb	r3, [r7, #7]
 8011074:	4613      	mov	r3, r2
 8011076:	71bb      	strb	r3, [r7, #6]

	//====a方向を変更====
	if(t_mode < 2){												//4方位モード
 8011078:	79bb      	ldrb	r3, [r7, #6]
 801107a:	2b01      	cmp	r3, #1
 801107c:	d840      	bhi.n	8011100 <turn_dir+0x98>
		mouse.dir = (mouse.dir + t_pat) & 0x03;					//a指定された分mouse.dirを回転させる
 801107e:	4b60      	ldr	r3, [pc, #384]	; (8011200 <turn_dir+0x198>)
 8011080:	789b      	ldrb	r3, [r3, #2]
 8011082:	b2da      	uxtb	r2, r3
 8011084:	79fb      	ldrb	r3, [r7, #7]
 8011086:	4413      	add	r3, r2
 8011088:	b2db      	uxtb	r3, r3
 801108a:	f003 0303 	and.w	r3, r3, #3
 801108e:	b2da      	uxtb	r2, r3
 8011090:	4b5b      	ldr	r3, [pc, #364]	; (8011200 <turn_dir+0x198>)
 8011092:	709a      	strb	r2, [r3, #2]
		if(t_mode == 1){
 8011094:	79bb      	ldrb	r3, [r7, #6]
 8011096:	2b01      	cmp	r3, #1
 8011098:	f040 80a8 	bne.w	80111ec <turn_dir+0x184>
			if(t_pat == 0x01) target_degree_z -= 90.5;			//a目標角度+右90度
 801109c:	79fb      	ldrb	r3, [r7, #7]
 801109e:	2b01      	cmp	r3, #1
 80110a0:	d109      	bne.n	80110b6 <turn_dir+0x4e>
 80110a2:	4b58      	ldr	r3, [pc, #352]	; (8011204 <turn_dir+0x19c>)
 80110a4:	edd3 7a00 	vldr	s15, [r3]
 80110a8:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8011208 <turn_dir+0x1a0>
 80110ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80110b0:	4b54      	ldr	r3, [pc, #336]	; (8011204 <turn_dir+0x19c>)
 80110b2:	edc3 7a00 	vstr	s15, [r3]
//			if(t_pat == 0xff) target_degree_z += 90.5;			//a目標角度+左90度
			if(t_pat == 0xff) target_degree_z += 90.3;			//a目標角度+左90度
 80110b6:	79fb      	ldrb	r3, [r7, #7]
 80110b8:	2bff      	cmp	r3, #255	; 0xff
 80110ba:	d112      	bne.n	80110e2 <turn_dir+0x7a>
 80110bc:	4b51      	ldr	r3, [pc, #324]	; (8011204 <turn_dir+0x19c>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7ef fa39 	bl	8000538 <__aeabi_f2d>
 80110c6:	a34c      	add	r3, pc, #304	; (adr r3, 80111f8 <turn_dir+0x190>)
 80110c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110cc:	f7ef f8d6 	bl	800027c <__adddf3>
 80110d0:	4603      	mov	r3, r0
 80110d2:	460c      	mov	r4, r1
 80110d4:	4618      	mov	r0, r3
 80110d6:	4621      	mov	r1, r4
 80110d8:	f7ef fd5e 	bl	8000b98 <__aeabi_d2f>
 80110dc:	4602      	mov	r2, r0
 80110de:	4b49      	ldr	r3, [pc, #292]	; (8011204 <turn_dir+0x19c>)
 80110e0:	601a      	str	r2, [r3, #0]
			if(t_pat == 0x02) target_degree_z -= 181;			//a目標角度+右180度
 80110e2:	79fb      	ldrb	r3, [r7, #7]
 80110e4:	2b02      	cmp	r3, #2
 80110e6:	f040 8081 	bne.w	80111ec <turn_dir+0x184>
 80110ea:	4b46      	ldr	r3, [pc, #280]	; (8011204 <turn_dir+0x19c>)
 80110ec:	edd3 7a00 	vldr	s15, [r3]
 80110f0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801120c <turn_dir+0x1a4>
 80110f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80110f8:	4b42      	ldr	r3, [pc, #264]	; (8011204 <turn_dir+0x19c>)
 80110fa:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
		}
	}
}
 80110fe:	e075      	b.n	80111ec <turn_dir+0x184>
		mouse.dir = (mouse.dir + t_pat) & 0x07;					//a指定された分mouse.dirを回転させる
 8011100:	4b3f      	ldr	r3, [pc, #252]	; (8011200 <turn_dir+0x198>)
 8011102:	789b      	ldrb	r3, [r3, #2]
 8011104:	b2da      	uxtb	r2, r3
 8011106:	79fb      	ldrb	r3, [r7, #7]
 8011108:	4413      	add	r3, r2
 801110a:	b2db      	uxtb	r3, r3
 801110c:	f003 0307 	and.w	r3, r3, #7
 8011110:	b2da      	uxtb	r2, r3
 8011112:	4b3b      	ldr	r3, [pc, #236]	; (8011200 <turn_dir+0x198>)
 8011114:	709a      	strb	r2, [r3, #2]
		if(t_mode == 3){
 8011116:	79bb      	ldrb	r3, [r7, #6]
 8011118:	2b03      	cmp	r3, #3
 801111a:	d167      	bne.n	80111ec <turn_dir+0x184>
			if(t_pat == 0x01) target_degree_z -= 45.25;			//a目標角度+右90度
 801111c:	79fb      	ldrb	r3, [r7, #7]
 801111e:	2b01      	cmp	r3, #1
 8011120:	d109      	bne.n	8011136 <turn_dir+0xce>
 8011122:	4b38      	ldr	r3, [pc, #224]	; (8011204 <turn_dir+0x19c>)
 8011124:	edd3 7a00 	vldr	s15, [r3]
 8011128:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8011210 <turn_dir+0x1a8>
 801112c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011130:	4b34      	ldr	r3, [pc, #208]	; (8011204 <turn_dir+0x19c>)
 8011132:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x02) target_degree_z -= 90.5;			//a目標角度+左90度
 8011136:	79fb      	ldrb	r3, [r7, #7]
 8011138:	2b02      	cmp	r3, #2
 801113a:	d109      	bne.n	8011150 <turn_dir+0xe8>
 801113c:	4b31      	ldr	r3, [pc, #196]	; (8011204 <turn_dir+0x19c>)
 801113e:	edd3 7a00 	vldr	s15, [r3]
 8011142:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8011208 <turn_dir+0x1a0>
 8011146:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801114a:	4b2e      	ldr	r3, [pc, #184]	; (8011204 <turn_dir+0x19c>)
 801114c:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x03) target_degree_z -= 135.75;		//a目標角度+右180度
 8011150:	79fb      	ldrb	r3, [r7, #7]
 8011152:	2b03      	cmp	r3, #3
 8011154:	d109      	bne.n	801116a <turn_dir+0x102>
 8011156:	4b2b      	ldr	r3, [pc, #172]	; (8011204 <turn_dir+0x19c>)
 8011158:	edd3 7a00 	vldr	s15, [r3]
 801115c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8011214 <turn_dir+0x1ac>
 8011160:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011164:	4b27      	ldr	r3, [pc, #156]	; (8011204 <turn_dir+0x19c>)
 8011166:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0x04) target_degree_z -= 181;			//a目標角度+右180度
 801116a:	79fb      	ldrb	r3, [r7, #7]
 801116c:	2b04      	cmp	r3, #4
 801116e:	d109      	bne.n	8011184 <turn_dir+0x11c>
 8011170:	4b24      	ldr	r3, [pc, #144]	; (8011204 <turn_dir+0x19c>)
 8011172:	edd3 7a00 	vldr	s15, [r3]
 8011176:	ed9f 7a25 	vldr	s14, [pc, #148]	; 801120c <turn_dir+0x1a4>
 801117a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801117e:	4b21      	ldr	r3, [pc, #132]	; (8011204 <turn_dir+0x19c>)
 8011180:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xff) target_degree_z += 45.25;			//a目標角度+右90度
 8011184:	79fb      	ldrb	r3, [r7, #7]
 8011186:	2bff      	cmp	r3, #255	; 0xff
 8011188:	d109      	bne.n	801119e <turn_dir+0x136>
 801118a:	4b1e      	ldr	r3, [pc, #120]	; (8011204 <turn_dir+0x19c>)
 801118c:	edd3 7a00 	vldr	s15, [r3]
 8011190:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8011210 <turn_dir+0x1a8>
 8011194:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011198:	4b1a      	ldr	r3, [pc, #104]	; (8011204 <turn_dir+0x19c>)
 801119a:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfe) target_degree_z += 90.5;			//a目標角度+左90度
 801119e:	79fb      	ldrb	r3, [r7, #7]
 80111a0:	2bfe      	cmp	r3, #254	; 0xfe
 80111a2:	d109      	bne.n	80111b8 <turn_dir+0x150>
 80111a4:	4b17      	ldr	r3, [pc, #92]	; (8011204 <turn_dir+0x19c>)
 80111a6:	edd3 7a00 	vldr	s15, [r3]
 80111aa:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8011208 <turn_dir+0x1a0>
 80111ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80111b2:	4b14      	ldr	r3, [pc, #80]	; (8011204 <turn_dir+0x19c>)
 80111b4:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfd) target_degree_z += 135.75;		//a目標角度+右180度
 80111b8:	79fb      	ldrb	r3, [r7, #7]
 80111ba:	2bfd      	cmp	r3, #253	; 0xfd
 80111bc:	d109      	bne.n	80111d2 <turn_dir+0x16a>
 80111be:	4b11      	ldr	r3, [pc, #68]	; (8011204 <turn_dir+0x19c>)
 80111c0:	edd3 7a00 	vldr	s15, [r3]
 80111c4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8011214 <turn_dir+0x1ac>
 80111c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80111cc:	4b0d      	ldr	r3, [pc, #52]	; (8011204 <turn_dir+0x19c>)
 80111ce:	edc3 7a00 	vstr	s15, [r3]
			if(t_pat == 0xfc) target_degree_z += 181;			//a目標角度+右180度
 80111d2:	79fb      	ldrb	r3, [r7, #7]
 80111d4:	2bfc      	cmp	r3, #252	; 0xfc
 80111d6:	d109      	bne.n	80111ec <turn_dir+0x184>
 80111d8:	4b0a      	ldr	r3, [pc, #40]	; (8011204 <turn_dir+0x19c>)
 80111da:	edd3 7a00 	vldr	s15, [r3]
 80111de:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 801120c <turn_dir+0x1a4>
 80111e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80111e6:	4b07      	ldr	r3, [pc, #28]	; (8011204 <turn_dir+0x19c>)
 80111e8:	edc3 7a00 	vstr	s15, [r3]
}
 80111ec:	bf00      	nop
 80111ee:	370c      	adds	r7, #12
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd90      	pop	{r4, r7, pc}
 80111f4:	f3af 8000 	nop.w
 80111f8:	33333333 	.word	0x33333333
 80111fc:	40569333 	.word	0x40569333
 8011200:	20000c54 	.word	0x20000c54
 8011204:	20000c40 	.word	0x20000c40
 8011208:	42b50000 	.word	0x42b50000
 801120c:	43350000 	.word	0x43350000
 8011210:	42350000 	.word	0x42350000
 8011214:	4307c000 	.word	0x4307c000

08011218 <make_smap>:
//make_smap
//a歩数マップを作成する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 8011218:	b490      	push	{r4, r7}
 801121a:	b08c      	sub	sp, #48	; 0x30
 801121c:	af00      	add	r7, sp, #0
	//====a変数宣言====
	uint8_t x, y;											//for文用変数
	uint8_t m_temp_sample[16];

	//====a歩数マップのクリア====
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 801121e:	2300      	movs	r3, #0
 8011220:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8011224:	e01c      	b.n	8011260 <make_smap+0x48>
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 8011226:	2300      	movs	r3, #0
 8011228:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801122c:	e00f      	b.n	801124e <make_smap+0x36>
			smap[y][x] = 0x03e7;							//a未記入部分は歩数最大とする
 801122e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011232:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011236:	499c      	ldr	r1, [pc, #624]	; (80114a8 <make_smap+0x290>)
 8011238:	0112      	lsls	r2, r2, #4
 801123a:	4413      	add	r3, r2
 801123c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011240:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(x = 0; x <= 15; x++){							//a各X座標で実行
 8011244:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011248:	3301      	adds	r3, #1
 801124a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801124e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011252:	2b0f      	cmp	r3, #15
 8011254:	d9eb      	bls.n	801122e <make_smap+0x16>
	for(y = 0; y <= 15; y++){								//a各Y座標で実行
 8011256:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801125a:	3301      	adds	r3, #1
 801125c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8011260:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011264:	2b0f      	cmp	r3, #15
 8011266:	d9de      	bls.n	8011226 <make_smap+0xe>
		}
	}

	//====aゴール座標を0にする====
	m_step = 0;												//a歩数カウンタを0にする
 8011268:	4b90      	ldr	r3, [pc, #576]	; (80114ac <make_smap+0x294>)
 801126a:	2200      	movs	r2, #0
 801126c:	801a      	strh	r2, [r3, #0]
	smap[goal_y][goal_x] = 0;
 801126e:	4b90      	ldr	r3, [pc, #576]	; (80114b0 <make_smap+0x298>)
 8011270:	781b      	ldrb	r3, [r3, #0]
 8011272:	4618      	mov	r0, r3
 8011274:	4b8f      	ldr	r3, [pc, #572]	; (80114b4 <make_smap+0x29c>)
 8011276:	781b      	ldrb	r3, [r3, #0]
 8011278:	4619      	mov	r1, r3
 801127a:	4a8b      	ldr	r2, [pc, #556]	; (80114a8 <make_smap+0x290>)
 801127c:	0103      	lsls	r3, r0, #4
 801127e:	440b      	add	r3, r1
 8011280:	2100      	movs	r1, #0
 8011282:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====a歩数カウンタの重みづけ====
	int straight = 1;
 8011286:	2301      	movs	r3, #1
 8011288:	61bb      	str	r3, [r7, #24]
	int turn = 10;
 801128a:	230a      	movs	r3, #10
 801128c:	617b      	str	r3, [r7, #20]

	//====a自分の座標にたどり着くまでループ====
	do{
		//----aマップ全域を捜索----
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 801128e:	2300      	movs	r3, #0
 8011290:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8011294:	e2d1      	b.n	801183a <make_smap+0x622>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 8011296:	2300      	movs	r3, #0
 8011298:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801129c:	e2c3      	b.n	8011826 <make_smap+0x60e>
				//----a現在最大の歩数を発見したとき----
				if(smap[y][x] == m_step){					//a歩数カウンタm_stepの値が現在最大の歩数
 801129e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80112a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80112a6:	4980      	ldr	r1, [pc, #512]	; (80114a8 <make_smap+0x290>)
 80112a8:	0112      	lsls	r2, r2, #4
 80112aa:	4413      	add	r3, r2
 80112ac:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80112b0:	4b7e      	ldr	r3, [pc, #504]	; (80114ac <make_smap+0x294>)
 80112b2:	881b      	ldrh	r3, [r3, #0]
 80112b4:	429a      	cmp	r2, r3
 80112b6:	f040 82b1 	bne.w	801181c <make_smap+0x604>
					uint8_t m_temp = map[y][x];				//map配列からマップデータを取り出す
 80112ba:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80112be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80112c2:	497d      	ldr	r1, [pc, #500]	; (80114b8 <make_smap+0x2a0>)
 80112c4:	0112      	lsls	r2, r2, #4
 80112c6:	440a      	add	r2, r1
 80112c8:	4413      	add	r3, r2
 80112ca:	781b      	ldrb	r3, [r3, #0]
 80112cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					if(MF.FLAG.SCND){						//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 80112d0:	4b7a      	ldr	r3, [pc, #488]	; (80114bc <make_smap+0x2a4>)
 80112d2:	881b      	ldrh	r3, [r3, #0]
 80112d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80112d8:	b2db      	uxtb	r3, r3
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d004      	beq.n	80112e8 <make_smap+0xd0>
						m_temp >>= 4;						//a上位4bitを使うので4bit分右にシフトさせる
 80112de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80112e2:	091b      	lsrs	r3, r3, #4
 80112e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					}
					//----a北壁についての処理----
					if(!(m_temp & 0x08) && y != 15){		//a北壁がなく現在最北端でないとき
 80112e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80112ec:	f003 0308 	and.w	r3, r3, #8
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	f040 809c 	bne.w	801142e <make_smap+0x216>
 80112f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80112fa:	2b0f      	cmp	r3, #15
 80112fc:	f000 8097 	beq.w	801142e <make_smap+0x216>
						if(smap[y+1][x] == 0x03e7){			//a北側が未記入なら
 8011300:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011304:	1c5a      	adds	r2, r3, #1
 8011306:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801130a:	4967      	ldr	r1, [pc, #412]	; (80114a8 <make_smap+0x290>)
 801130c:	0112      	lsls	r2, r2, #4
 801130e:	4413      	add	r3, r2
 8011310:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011314:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011318:	4293      	cmp	r3, r2
 801131a:	f040 8088 	bne.w	801142e <make_smap+0x216>
							smap[y+1][x] = smap[y][x] + turn;		//a次の歩数を書き込む
 801131e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011322:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011326:	4960      	ldr	r1, [pc, #384]	; (80114a8 <make_smap+0x290>)
 8011328:	0112      	lsls	r2, r2, #4
 801132a:	4413      	add	r3, r2
 801132c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011330:	697b      	ldr	r3, [r7, #20]
 8011332:	b299      	uxth	r1, r3
 8011334:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011338:	1c5a      	adds	r2, r3, #1
 801133a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801133e:	4401      	add	r1, r0
 8011340:	b288      	uxth	r0, r1
 8011342:	4959      	ldr	r1, [pc, #356]	; (80114a8 <make_smap+0x290>)
 8011344:	0112      	lsls	r2, r2, #4
 8011346:	4413      	add	r3, r2
 8011348:	4602      	mov	r2, r0
 801134a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 801134e:	4b5b      	ldr	r3, [pc, #364]	; (80114bc <make_smap+0x2a4>)
 8011350:	881b      	ldrh	r3, [r3, #0]
 8011352:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8011356:	b2db      	uxtb	r3, r3
 8011358:	2b00      	cmp	r3, #0
 801135a:	d068      	beq.n	801142e <make_smap+0x216>
								//----a直線優先処理----
								for (int k = 1; k < 16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 801135c:	2301      	movs	r3, #1
 801135e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011360:	e05e      	b.n	8011420 <make_smap+0x208>
									m_temp_sample[k] = map[y + k][x];				//map配列からマップデータを取り出す
 8011362:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011368:	441a      	add	r2, r3
 801136a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801136e:	4952      	ldr	r1, [pc, #328]	; (80114b8 <make_smap+0x2a0>)
 8011370:	0112      	lsls	r2, r2, #4
 8011372:	440a      	add	r2, r1
 8011374:	4413      	add	r3, r2
 8011376:	7819      	ldrb	r1, [r3, #0]
 8011378:	1d3a      	adds	r2, r7, #4
 801137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801137c:	4413      	add	r3, r2
 801137e:	460a      	mov	r2, r1
 8011380:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 8011382:	4b4e      	ldr	r3, [pc, #312]	; (80114bc <make_smap+0x2a4>)
 8011384:	881b      	ldrh	r3, [r3, #0]
 8011386:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801138a:	b2db      	uxtb	r3, r3
 801138c:	2b00      	cmp	r3, #0
 801138e:	d00a      	beq.n	80113a6 <make_smap+0x18e>
 8011390:	1d3a      	adds	r2, r7, #4
 8011392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011394:	4413      	add	r3, r2
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	091b      	lsrs	r3, r3, #4
 801139a:	b2d9      	uxtb	r1, r3
 801139c:	1d3a      	adds	r2, r7, #4
 801139e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113a0:	4413      	add	r3, r2
 80113a2:	460a      	mov	r2, r1
 80113a4:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x08) && (y + k) != 0x0f) {		//a北壁がなく現在最北端でないとき
 80113a6:	1d3a      	adds	r2, r7, #4
 80113a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113aa:	4413      	add	r3, r2
 80113ac:	781b      	ldrb	r3, [r3, #0]
 80113ae:	f003 0308 	and.w	r3, r3, #8
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d13b      	bne.n	801142e <make_smap+0x216>
 80113b6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80113ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113bc:	4413      	add	r3, r2
 80113be:	2b0f      	cmp	r3, #15
 80113c0:	d035      	beq.n	801142e <make_smap+0x216>
										if (smap[y + k + 1][x] == 0x03e7) {						//a北側が未記入なら
 80113c2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80113c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c8:	4413      	add	r3, r2
 80113ca:	1c5a      	adds	r2, r3, #1
 80113cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113d0:	4935      	ldr	r1, [pc, #212]	; (80114a8 <make_smap+0x290>)
 80113d2:	0112      	lsls	r2, r2, #4
 80113d4:	4413      	add	r3, r2
 80113d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80113da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80113de:	4293      	cmp	r3, r2
 80113e0:	d11b      	bne.n	801141a <make_smap+0x202>
											smap[y + k + 1][x] = smap[y + k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 80113e2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80113e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e8:	441a      	add	r2, r3
 80113ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113ee:	492e      	ldr	r1, [pc, #184]	; (80114a8 <make_smap+0x290>)
 80113f0:	0112      	lsls	r2, r2, #4
 80113f2:	4413      	add	r3, r2
 80113f4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80113f8:	69bb      	ldr	r3, [r7, #24]
 80113fa:	b299      	uxth	r1, r3
 80113fc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011402:	4413      	add	r3, r2
 8011404:	1c5a      	adds	r2, r3, #1
 8011406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801140a:	4401      	add	r1, r0
 801140c:	b288      	uxth	r0, r1
 801140e:	4926      	ldr	r1, [pc, #152]	; (80114a8 <make_smap+0x290>)
 8011410:	0112      	lsls	r2, r2, #4
 8011412:	4413      	add	r3, r2
 8011414:	4602      	mov	r2, r0
 8011416:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < 16-y; k++) {					//a現在座標から見て北のマスすべてにおいて
 801141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141c:	3301      	adds	r3, #1
 801141e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011420:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011424:	f1c3 0310 	rsb	r3, r3, #16
 8011428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801142a:	429a      	cmp	r2, r3
 801142c:	db99      	blt.n	8011362 <make_smap+0x14a>
								}
							}
						}
					}
					//----a東壁についての処理----
					if(!(m_temp & 0x04) && x != 15){		//a東壁がなく現在最東端でないとき
 801142e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011432:	f003 0304 	and.w	r3, r3, #4
 8011436:	2b00      	cmp	r3, #0
 8011438:	f040 80a8 	bne.w	801158c <make_smap+0x374>
 801143c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011440:	2b0f      	cmp	r3, #15
 8011442:	f000 80a3 	beq.w	801158c <make_smap+0x374>
						if(smap[y][x+1] == 0x03e7){			//a東側が未記入なら
 8011446:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801144a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801144e:	3301      	adds	r3, #1
 8011450:	4915      	ldr	r1, [pc, #84]	; (80114a8 <make_smap+0x290>)
 8011452:	0112      	lsls	r2, r2, #4
 8011454:	4413      	add	r3, r2
 8011456:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801145a:	f240 32e7 	movw	r2, #999	; 0x3e7
 801145e:	4293      	cmp	r3, r2
 8011460:	f040 8094 	bne.w	801158c <make_smap+0x374>
							smap[y][x+1] = smap[y][x] + turn;	//a次の歩数を書き込む
 8011464:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011468:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801146c:	490e      	ldr	r1, [pc, #56]	; (80114a8 <make_smap+0x290>)
 801146e:	0112      	lsls	r2, r2, #4
 8011470:	4413      	add	r3, r2
 8011472:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	b299      	uxth	r1, r3
 801147a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801147e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011482:	3301      	adds	r3, #1
 8011484:	4401      	add	r1, r0
 8011486:	b288      	uxth	r0, r1
 8011488:	4907      	ldr	r1, [pc, #28]	; (80114a8 <make_smap+0x290>)
 801148a:	0112      	lsls	r2, r2, #4
 801148c:	4413      	add	r3, r2
 801148e:	4602      	mov	r2, r0
 8011490:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 8011494:	4b09      	ldr	r3, [pc, #36]	; (80114bc <make_smap+0x2a4>)
 8011496:	881b      	ldrh	r3, [r3, #0]
 8011498:	f3c3 2380 	ubfx	r3, r3, #10, #1
 801149c:	b2db      	uxtb	r3, r3
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d074      	beq.n	801158c <make_smap+0x374>
								//----a直線優先処理----
								for (int k = 1; k < 16 - x; k++) {					//a現在座標から見て東のマスすべてにおいて
 80114a2:	2301      	movs	r3, #1
 80114a4:	627b      	str	r3, [r7, #36]	; 0x24
 80114a6:	e06a      	b.n	801157e <make_smap+0x366>
 80114a8:	20000da8 	.word	0x20000da8
 80114ac:	20000386 	.word	0x20000386
 80114b0:	20000b8c 	.word	0x20000b8c
 80114b4:	20000bf1 	.word	0x20000bf1
 80114b8:	200001e4 	.word	0x200001e4
 80114bc:	20000fac 	.word	0x20000fac
									m_temp_sample[k] = map[y][x + k];				//map配列からマップデータを取り出す
 80114c0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80114c4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80114c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ca:	440b      	add	r3, r1
 80114cc:	499e      	ldr	r1, [pc, #632]	; (8011748 <make_smap+0x530>)
 80114ce:	0112      	lsls	r2, r2, #4
 80114d0:	440a      	add	r2, r1
 80114d2:	4413      	add	r3, r2
 80114d4:	7819      	ldrb	r1, [r3, #0]
 80114d6:	1d3a      	adds	r2, r7, #4
 80114d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114da:	4413      	add	r3, r2
 80114dc:	460a      	mov	r2, r1
 80114de:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 80114e0:	4b9a      	ldr	r3, [pc, #616]	; (801174c <make_smap+0x534>)
 80114e2:	881b      	ldrh	r3, [r3, #0]
 80114e4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80114e8:	b2db      	uxtb	r3, r3
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d00a      	beq.n	8011504 <make_smap+0x2ec>
 80114ee:	1d3a      	adds	r2, r7, #4
 80114f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f2:	4413      	add	r3, r2
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	091b      	lsrs	r3, r3, #4
 80114f8:	b2d9      	uxtb	r1, r3
 80114fa:	1d3a      	adds	r2, r7, #4
 80114fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114fe:	4413      	add	r3, r2
 8011500:	460a      	mov	r2, r1
 8011502:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x04) && (x + k) != 0x0f) {		//a東壁がなく現在最東端でないとき
 8011504:	1d3a      	adds	r2, r7, #4
 8011506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011508:	4413      	add	r3, r2
 801150a:	781b      	ldrb	r3, [r3, #0]
 801150c:	f003 0304 	and.w	r3, r3, #4
 8011510:	2b00      	cmp	r3, #0
 8011512:	d13b      	bne.n	801158c <make_smap+0x374>
 8011514:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801151a:	4413      	add	r3, r2
 801151c:	2b0f      	cmp	r3, #15
 801151e:	d035      	beq.n	801158c <make_smap+0x374>
										if (smap[y][x + k + 1] == 0x03e7) {						//a東側が未記入なら
 8011520:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011524:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8011528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801152a:	440b      	add	r3, r1
 801152c:	3301      	adds	r3, #1
 801152e:	4988      	ldr	r1, [pc, #544]	; (8011750 <make_smap+0x538>)
 8011530:	0112      	lsls	r2, r2, #4
 8011532:	4413      	add	r3, r2
 8011534:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011538:	f240 32e7 	movw	r2, #999	; 0x3e7
 801153c:	4293      	cmp	r3, r2
 801153e:	d11b      	bne.n	8011578 <make_smap+0x360>
											smap[y][x + k + 1] = smap[y][x + k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 8011540:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011544:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8011548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801154a:	440b      	add	r3, r1
 801154c:	4980      	ldr	r1, [pc, #512]	; (8011750 <make_smap+0x538>)
 801154e:	0112      	lsls	r2, r2, #4
 8011550:	4413      	add	r3, r2
 8011552:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011556:	69bb      	ldr	r3, [r7, #24]
 8011558:	b299      	uxth	r1, r3
 801155a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801155e:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8011562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011564:	4423      	add	r3, r4
 8011566:	3301      	adds	r3, #1
 8011568:	4401      	add	r1, r0
 801156a:	b288      	uxth	r0, r1
 801156c:	4978      	ldr	r1, [pc, #480]	; (8011750 <make_smap+0x538>)
 801156e:	0112      	lsls	r2, r2, #4
 8011570:	4413      	add	r3, r2
 8011572:	4602      	mov	r2, r0
 8011574:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < 16 - x; k++) {					//a現在座標から見て東のマスすべてにおいて
 8011578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801157a:	3301      	adds	r3, #1
 801157c:	627b      	str	r3, [r7, #36]	; 0x24
 801157e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011582:	f1c3 0310 	rsb	r3, r3, #16
 8011586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011588:	429a      	cmp	r2, r3
 801158a:	db99      	blt.n	80114c0 <make_smap+0x2a8>
								}
							}
						}
					}
					//----a南壁についての処理----
					if(!(m_temp & 0x02) && y != 0){			//a南壁がなく現在最南端でないとき
 801158c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011590:	f003 0302 	and.w	r3, r3, #2
 8011594:	2b00      	cmp	r3, #0
 8011596:	f040 809a 	bne.w	80116ce <make_smap+0x4b6>
 801159a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801159e:	2b00      	cmp	r3, #0
 80115a0:	f000 8095 	beq.w	80116ce <make_smap+0x4b6>
						if(smap[y-1][x] == 0x03e7){			//a南側が未記入なら
 80115a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80115a8:	1e5a      	subs	r2, r3, #1
 80115aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115ae:	4968      	ldr	r1, [pc, #416]	; (8011750 <make_smap+0x538>)
 80115b0:	0112      	lsls	r2, r2, #4
 80115b2:	4413      	add	r3, r2
 80115b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80115b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80115bc:	4293      	cmp	r3, r2
 80115be:	f040 8086 	bne.w	80116ce <make_smap+0x4b6>
							smap[y-1][x] = smap[y][x] + turn;	//a次の歩数を書き込む
 80115c2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80115c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115ca:	4961      	ldr	r1, [pc, #388]	; (8011750 <make_smap+0x538>)
 80115cc:	0112      	lsls	r2, r2, #4
 80115ce:	4413      	add	r3, r2
 80115d0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	b299      	uxth	r1, r3
 80115d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80115dc:	1e5a      	subs	r2, r3, #1
 80115de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115e2:	4401      	add	r1, r0
 80115e4:	b288      	uxth	r0, r1
 80115e6:	495a      	ldr	r1, [pc, #360]	; (8011750 <make_smap+0x538>)
 80115e8:	0112      	lsls	r2, r2, #4
 80115ea:	4413      	add	r3, r2
 80115ec:	4602      	mov	r2, r0
 80115ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 80115f2:	4b56      	ldr	r3, [pc, #344]	; (801174c <make_smap+0x534>)
 80115f4:	881b      	ldrh	r3, [r3, #0]
 80115f6:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80115fa:	b2db      	uxtb	r3, r3
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d066      	beq.n	80116ce <make_smap+0x4b6>
								//----a直線優先処理----
								for (int k = 1; k < y; k++) {						//a現在座標から見て南のマスすべてにおいて
 8011600:	2301      	movs	r3, #1
 8011602:	623b      	str	r3, [r7, #32]
 8011604:	e05e      	b.n	80116c4 <make_smap+0x4ac>
									m_temp_sample[k] = map[y - k][x];				//map配列からマップデータを取り出す
 8011606:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801160a:	6a3b      	ldr	r3, [r7, #32]
 801160c:	1ad2      	subs	r2, r2, r3
 801160e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011612:	494d      	ldr	r1, [pc, #308]	; (8011748 <make_smap+0x530>)
 8011614:	0112      	lsls	r2, r2, #4
 8011616:	440a      	add	r2, r1
 8011618:	4413      	add	r3, r2
 801161a:	7819      	ldrb	r1, [r3, #0]
 801161c:	1d3a      	adds	r2, r7, #4
 801161e:	6a3b      	ldr	r3, [r7, #32]
 8011620:	4413      	add	r3, r2
 8011622:	460a      	mov	r2, r1
 8011624:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 8011626:	4b49      	ldr	r3, [pc, #292]	; (801174c <make_smap+0x534>)
 8011628:	881b      	ldrh	r3, [r3, #0]
 801162a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801162e:	b2db      	uxtb	r3, r3
 8011630:	2b00      	cmp	r3, #0
 8011632:	d00a      	beq.n	801164a <make_smap+0x432>
 8011634:	1d3a      	adds	r2, r7, #4
 8011636:	6a3b      	ldr	r3, [r7, #32]
 8011638:	4413      	add	r3, r2
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	091b      	lsrs	r3, r3, #4
 801163e:	b2d9      	uxtb	r1, r3
 8011640:	1d3a      	adds	r2, r7, #4
 8011642:	6a3b      	ldr	r3, [r7, #32]
 8011644:	4413      	add	r3, r2
 8011646:	460a      	mov	r2, r1
 8011648:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x02) && (y - k) != 0x0f) {		//a南壁がなく現在最南端でないとき
 801164a:	1d3a      	adds	r2, r7, #4
 801164c:	6a3b      	ldr	r3, [r7, #32]
 801164e:	4413      	add	r3, r2
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	f003 0302 	and.w	r3, r3, #2
 8011656:	2b00      	cmp	r3, #0
 8011658:	d139      	bne.n	80116ce <make_smap+0x4b6>
 801165a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801165e:	6a3b      	ldr	r3, [r7, #32]
 8011660:	1ad3      	subs	r3, r2, r3
 8011662:	2b0f      	cmp	r3, #15
 8011664:	d033      	beq.n	80116ce <make_smap+0x4b6>
										if (smap[y - k - 1][x] == 0x03e7) {						//a南側が未記入なら
 8011666:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801166a:	6a3b      	ldr	r3, [r7, #32]
 801166c:	1ad3      	subs	r3, r2, r3
 801166e:	1e5a      	subs	r2, r3, #1
 8011670:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011674:	4936      	ldr	r1, [pc, #216]	; (8011750 <make_smap+0x538>)
 8011676:	0112      	lsls	r2, r2, #4
 8011678:	4413      	add	r3, r2
 801167a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801167e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011682:	4293      	cmp	r3, r2
 8011684:	d11b      	bne.n	80116be <make_smap+0x4a6>
											smap[y - k - 1][x] = smap[y - k][x] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 8011686:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801168a:	6a3b      	ldr	r3, [r7, #32]
 801168c:	1ad2      	subs	r2, r2, r3
 801168e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011692:	492f      	ldr	r1, [pc, #188]	; (8011750 <make_smap+0x538>)
 8011694:	0112      	lsls	r2, r2, #4
 8011696:	4413      	add	r3, r2
 8011698:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801169c:	69bb      	ldr	r3, [r7, #24]
 801169e:	b299      	uxth	r1, r3
 80116a0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80116a4:	6a3b      	ldr	r3, [r7, #32]
 80116a6:	1ad3      	subs	r3, r2, r3
 80116a8:	1e5a      	subs	r2, r3, #1
 80116aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116ae:	4401      	add	r1, r0
 80116b0:	b288      	uxth	r0, r1
 80116b2:	4927      	ldr	r1, [pc, #156]	; (8011750 <make_smap+0x538>)
 80116b4:	0112      	lsls	r2, r2, #4
 80116b6:	4413      	add	r3, r2
 80116b8:	4602      	mov	r2, r0
 80116ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < y; k++) {						//a現在座標から見て南のマスすべてにおいて
 80116be:	6a3b      	ldr	r3, [r7, #32]
 80116c0:	3301      	adds	r3, #1
 80116c2:	623b      	str	r3, [r7, #32]
 80116c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80116c8:	6a3a      	ldr	r2, [r7, #32]
 80116ca:	429a      	cmp	r2, r3
 80116cc:	db9b      	blt.n	8011606 <make_smap+0x3ee>
								}
							}
						}
					}
					//----a西壁についての処理----
					if(!(m_temp & 0x01) && x != 0){			//a西壁がなく現在最西端でないとき
 80116ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80116d2:	f003 0301 	and.w	r3, r3, #1
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	f040 80a0 	bne.w	801181c <make_smap+0x604>
 80116dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	f000 809b 	beq.w	801181c <make_smap+0x604>
						if(smap[y][x-1] == 0x03e7){			//a西側が未記入なら
 80116e6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80116ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116ee:	3b01      	subs	r3, #1
 80116f0:	4917      	ldr	r1, [pc, #92]	; (8011750 <make_smap+0x538>)
 80116f2:	0112      	lsls	r2, r2, #4
 80116f4:	4413      	add	r3, r2
 80116f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80116fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80116fe:	4293      	cmp	r3, r2
 8011700:	f040 808c 	bne.w	801181c <make_smap+0x604>
							smap[y][x-1] = smap[y][x] + turn;	//a次の歩数を書き込む
 8011704:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801170c:	4910      	ldr	r1, [pc, #64]	; (8011750 <make_smap+0x538>)
 801170e:	0112      	lsls	r2, r2, #4
 8011710:	4413      	add	r3, r2
 8011712:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011716:	697b      	ldr	r3, [r7, #20]
 8011718:	b299      	uxth	r1, r3
 801171a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801171e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011722:	3b01      	subs	r3, #1
 8011724:	4401      	add	r1, r0
 8011726:	b288      	uxth	r0, r1
 8011728:	4909      	ldr	r1, [pc, #36]	; (8011750 <make_smap+0x538>)
 801172a:	0112      	lsls	r2, r2, #4
 801172c:	4413      	add	r3, r2
 801172e:	4602      	mov	r2, r0
 8011730:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if(MF.FLAG.STRAIGHT){
 8011734:	4b05      	ldr	r3, [pc, #20]	; (801174c <make_smap+0x534>)
 8011736:	881b      	ldrh	r3, [r3, #0]
 8011738:	f3c3 2380 	ubfx	r3, r3, #10, #1
 801173c:	b2db      	uxtb	r3, r3
 801173e:	2b00      	cmp	r3, #0
 8011740:	d06c      	beq.n	801181c <make_smap+0x604>
								//----a直線優先処理----
								for (int k = 1; k < x; k++) {						//a現在座標から見て西のマスすべてにおいて
 8011742:	2301      	movs	r3, #1
 8011744:	61fb      	str	r3, [r7, #28]
 8011746:	e064      	b.n	8011812 <make_smap+0x5fa>
 8011748:	200001e4 	.word	0x200001e4
 801174c:	20000fac 	.word	0x20000fac
 8011750:	20000da8 	.word	0x20000da8
									m_temp_sample[k] = map[y][x - k];				//map配列からマップデータを取り出す
 8011754:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011758:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 801175c:	69fb      	ldr	r3, [r7, #28]
 801175e:	1acb      	subs	r3, r1, r3
 8011760:	4947      	ldr	r1, [pc, #284]	; (8011880 <make_smap+0x668>)
 8011762:	0112      	lsls	r2, r2, #4
 8011764:	440a      	add	r2, r1
 8011766:	4413      	add	r3, r2
 8011768:	7819      	ldrb	r1, [r3, #0]
 801176a:	1d3a      	adds	r2, r7, #4
 801176c:	69fb      	ldr	r3, [r7, #28]
 801176e:	4413      	add	r3, r2
 8011770:	460a      	mov	r2, r1
 8011772:	701a      	strb	r2, [r3, #0]
									if (MF.FLAG.SCND) m_temp_sample[k] >>= 4;		//a二次走行用のマップを作成する場合上位4bitを使うので4bit分右にシフトさせる
 8011774:	4b43      	ldr	r3, [pc, #268]	; (8011884 <make_smap+0x66c>)
 8011776:	881b      	ldrh	r3, [r3, #0]
 8011778:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801177c:	b2db      	uxtb	r3, r3
 801177e:	2b00      	cmp	r3, #0
 8011780:	d00a      	beq.n	8011798 <make_smap+0x580>
 8011782:	1d3a      	adds	r2, r7, #4
 8011784:	69fb      	ldr	r3, [r7, #28]
 8011786:	4413      	add	r3, r2
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	091b      	lsrs	r3, r3, #4
 801178c:	b2d9      	uxtb	r1, r3
 801178e:	1d3a      	adds	r2, r7, #4
 8011790:	69fb      	ldr	r3, [r7, #28]
 8011792:	4413      	add	r3, r2
 8011794:	460a      	mov	r2, r1
 8011796:	701a      	strb	r2, [r3, #0]
									if (!(m_temp_sample[k] & 0x01) && (x - k) != 0x0f) {		//a西壁がなく現在最西端でないとき
 8011798:	1d3a      	adds	r2, r7, #4
 801179a:	69fb      	ldr	r3, [r7, #28]
 801179c:	4413      	add	r3, r2
 801179e:	781b      	ldrb	r3, [r3, #0]
 80117a0:	f003 0301 	and.w	r3, r3, #1
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d139      	bne.n	801181c <make_smap+0x604>
 80117a8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80117ac:	69fb      	ldr	r3, [r7, #28]
 80117ae:	1ad3      	subs	r3, r2, r3
 80117b0:	2b0f      	cmp	r3, #15
 80117b2:	d033      	beq.n	801181c <make_smap+0x604>
										if (smap[y][x - k - 1] == 0x03e7) {						//a西側が未記入なら
 80117b4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80117b8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80117bc:	69fb      	ldr	r3, [r7, #28]
 80117be:	1acb      	subs	r3, r1, r3
 80117c0:	3b01      	subs	r3, #1
 80117c2:	4931      	ldr	r1, [pc, #196]	; (8011888 <make_smap+0x670>)
 80117c4:	0112      	lsls	r2, r2, #4
 80117c6:	4413      	add	r3, r2
 80117c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80117cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80117d0:	4293      	cmp	r3, r2
 80117d2:	d11b      	bne.n	801180c <make_smap+0x5f4>
											smap[y][x - k - 1] = smap[y][x - k] + straight;		//a直線分インクリメントした値を次のマスの歩数マップに書き込む
 80117d4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80117d8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80117dc:	69fb      	ldr	r3, [r7, #28]
 80117de:	1acb      	subs	r3, r1, r3
 80117e0:	4929      	ldr	r1, [pc, #164]	; (8011888 <make_smap+0x670>)
 80117e2:	0112      	lsls	r2, r2, #4
 80117e4:	4413      	add	r3, r2
 80117e6:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80117ea:	69bb      	ldr	r3, [r7, #24]
 80117ec:	b299      	uxth	r1, r3
 80117ee:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80117f2:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 80117f6:	69fb      	ldr	r3, [r7, #28]
 80117f8:	1ae3      	subs	r3, r4, r3
 80117fa:	3b01      	subs	r3, #1
 80117fc:	4401      	add	r1, r0
 80117fe:	b288      	uxth	r0, r1
 8011800:	4921      	ldr	r1, [pc, #132]	; (8011888 <make_smap+0x670>)
 8011802:	0112      	lsls	r2, r2, #4
 8011804:	4413      	add	r3, r2
 8011806:	4602      	mov	r2, r0
 8011808:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								for (int k = 1; k < x; k++) {						//a現在座標から見て西のマスすべてにおいて
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	3301      	adds	r3, #1
 8011810:	61fb      	str	r3, [r7, #28]
 8011812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011816:	69fa      	ldr	r2, [r7, #28]
 8011818:	429a      	cmp	r2, r3
 801181a:	db9b      	blt.n	8011754 <make_smap+0x53c>
			for(x = 0; x <= 15; x++){						//a各X座標で実行
 801181c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011820:	3301      	adds	r3, #1
 8011822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801182a:	2b0f      	cmp	r3, #15
 801182c:	f67f ad37 	bls.w	801129e <make_smap+0x86>
		for(y = 0; y <= 15; y++){							//a各Y座標で実行
 8011830:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011834:	3301      	adds	r3, #1
 8011836:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 801183a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801183e:	2b0f      	cmp	r3, #15
 8011840:	f67f ad29 	bls.w	8011296 <make_smap+0x7e>
					}
				}
			}
		}
		//====a歩数カウンタのインクリメント====
		m_step++;
 8011844:	4b11      	ldr	r3, [pc, #68]	; (801188c <make_smap+0x674>)
 8011846:	881b      	ldrh	r3, [r3, #0]
 8011848:	3301      	adds	r3, #1
 801184a:	b29a      	uxth	r2, r3
 801184c:	4b0f      	ldr	r3, [pc, #60]	; (801188c <make_smap+0x674>)
 801184e:	801a      	strh	r2, [r3, #0]
	}while(smap[mouse.y][mouse.x] == 0x03e7);					//a現在座標が未記入ではなくなるまで実行
 8011850:	4b0f      	ldr	r3, [pc, #60]	; (8011890 <make_smap+0x678>)
 8011852:	785b      	ldrb	r3, [r3, #1]
 8011854:	b2db      	uxtb	r3, r3
 8011856:	4618      	mov	r0, r3
 8011858:	4b0d      	ldr	r3, [pc, #52]	; (8011890 <make_smap+0x678>)
 801185a:	781b      	ldrb	r3, [r3, #0]
 801185c:	b2db      	uxtb	r3, r3
 801185e:	4619      	mov	r1, r3
 8011860:	4a09      	ldr	r2, [pc, #36]	; (8011888 <make_smap+0x670>)
 8011862:	0103      	lsls	r3, r0, #4
 8011864:	440b      	add	r3, r1
 8011866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801186a:	f240 32e7 	movw	r2, #999	; 0x3e7
 801186e:	4293      	cmp	r3, r2
 8011870:	f43f ad0d 	beq.w	801128e <make_smap+0x76>
}
 8011874:	bf00      	nop
 8011876:	3730      	adds	r7, #48	; 0x30
 8011878:	46bd      	mov	sp, r7
 801187a:	bc90      	pop	{r4, r7}
 801187c:	4770      	bx	lr
 801187e:	bf00      	nop
 8011880:	200001e4 	.word	0x200001e4
 8011884:	20000fac 	.word	0x20000fac
 8011888:	20000da8 	.word	0x20000da8
 801188c:	20000386 	.word	0x20000386
 8011890:	20000c54 	.word	0x20000c54

08011894 <make_route>:
//make_route
//a最短経路を導出する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 8011894:	b580      	push	{r7, lr}
 8011896:	b082      	sub	sp, #8
 8011898:	af00      	add	r7, sp, #0

	//====a変数宣言====
	uint8_t x, y;												//X，Y座標
	uint8_t dir_temp =  mouse.dir;								//aマウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 801189a:	4b9f      	ldr	r3, [pc, #636]	; (8011b18 <make_route+0x284>)
 801189c:	789b      	ldrb	r3, [r3, #2]
 801189e:	703b      	strb	r3, [r7, #0]

	//====a最短経路を初期化====
	uint16_t i;
	for(i = 0; i < 256; i++){
 80118a0:	2300      	movs	r3, #0
 80118a2:	80bb      	strh	r3, [r7, #4]
 80118a4:	e006      	b.n	80118b4 <make_route+0x20>
		route[i] = 0xff;										//routeを0xffで初期化
 80118a6:	88bb      	ldrh	r3, [r7, #4]
 80118a8:	4a9c      	ldr	r2, [pc, #624]	; (8011b1c <make_route+0x288>)
 80118aa:	21ff      	movs	r1, #255	; 0xff
 80118ac:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 256; i++){
 80118ae:	88bb      	ldrh	r3, [r7, #4]
 80118b0:	3301      	adds	r3, #1
 80118b2:	80bb      	strh	r3, [r7, #4]
 80118b4:	88bb      	ldrh	r3, [r7, #4]
 80118b6:	2bff      	cmp	r3, #255	; 0xff
 80118b8:	d9f5      	bls.n	80118a6 <make_route+0x12>
	}


	//====a歩数カウンタをセット====
	uint16_t m_step = smap[mouse.y][mouse.x];					//a現在座標の歩数マップ値を取得
 80118ba:	4b97      	ldr	r3, [pc, #604]	; (8011b18 <make_route+0x284>)
 80118bc:	785b      	ldrb	r3, [r3, #1]
 80118be:	b2db      	uxtb	r3, r3
 80118c0:	4618      	mov	r0, r3
 80118c2:	4b95      	ldr	r3, [pc, #596]	; (8011b18 <make_route+0x284>)
 80118c4:	781b      	ldrb	r3, [r3, #0]
 80118c6:	b2db      	uxtb	r3, r3
 80118c8:	4619      	mov	r1, r3
 80118ca:	4a95      	ldr	r2, [pc, #596]	; (8011b20 <make_route+0x28c>)
 80118cc:	0103      	lsls	r3, r0, #4
 80118ce:	440b      	add	r3, r1
 80118d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118d4:	807b      	strh	r3, [r7, #2]

	//====x, yに現在座標を書き込み====
	x = mouse.x;
 80118d6:	4b90      	ldr	r3, [pc, #576]	; (8011b18 <make_route+0x284>)
 80118d8:	781b      	ldrb	r3, [r3, #0]
 80118da:	71fb      	strb	r3, [r7, #7]
	y = mouse.y;
 80118dc:	4b8e      	ldr	r3, [pc, #568]	; (8011b18 <make_route+0x284>)
 80118de:	785b      	ldrb	r3, [r3, #1]
 80118e0:	71bb      	strb	r3, [r7, #6]

	//====a最短経路を導出====
	if(pass_mode == 4){
 80118e2:	4b90      	ldr	r3, [pc, #576]	; (8011b24 <make_route+0x290>)
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	2b04      	cmp	r3, #4
 80118e8:	d105      	bne.n	80118f6 <make_route+0x62>
		route[0] = 0x77;
 80118ea:	4b8c      	ldr	r3, [pc, #560]	; (8011b1c <make_route+0x288>)
 80118ec:	2277      	movs	r2, #119	; 0x77
 80118ee:	701a      	strb	r2, [r3, #0]
		i = 1;
 80118f0:	2301      	movs	r3, #1
 80118f2:	80bb      	strh	r3, [r7, #4]
 80118f4:	e001      	b.n	80118fa <make_route+0x66>
	}else{
		i = 0;
 80118f6:	2300      	movs	r3, #0
 80118f8:	80bb      	strh	r3, [r7, #4]
	}

	do{
		uint8_t m_temp = map[y][x];								//a比較用マップ情報の格納
 80118fa:	79ba      	ldrb	r2, [r7, #6]
 80118fc:	79fb      	ldrb	r3, [r7, #7]
 80118fe:	498a      	ldr	r1, [pc, #552]	; (8011b28 <make_route+0x294>)
 8011900:	0112      	lsls	r2, r2, #4
 8011902:	440a      	add	r2, r1
 8011904:	4413      	add	r3, r2
 8011906:	781b      	ldrb	r3, [r3, #0]
 8011908:	707b      	strb	r3, [r7, #1]
		if(MF.FLAG.SCND){										//a二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 801190a:	4b88      	ldr	r3, [pc, #544]	; (8011b2c <make_route+0x298>)
 801190c:	881b      	ldrh	r3, [r3, #0]
 801190e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011912:	b2db      	uxtb	r3, r3
 8011914:	2b00      	cmp	r3, #0
 8011916:	d002      	beq.n	801191e <make_route+0x8a>
			m_temp >>= 4;										//a上位4bitを使うので4bit分右にシフトさせる
 8011918:	787b      	ldrb	r3, [r7, #1]
 801191a:	091b      	lsrs	r3, r3, #4
 801191c:	707b      	strb	r3, [r7, #1]
		}
		//----a北を見る----
		if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){		//a北側に壁が無く、現在地より小さい歩数マップ値であれば
 801191e:	787b      	ldrb	r3, [r7, #1]
 8011920:	f003 0308 	and.w	r3, r3, #8
 8011924:	2b00      	cmp	r3, #0
 8011926:	d122      	bne.n	801196e <make_route+0xda>
 8011928:	79bb      	ldrb	r3, [r7, #6]
 801192a:	1c5a      	adds	r2, r3, #1
 801192c:	79fb      	ldrb	r3, [r7, #7]
 801192e:	497c      	ldr	r1, [pc, #496]	; (8011b20 <make_route+0x28c>)
 8011930:	0112      	lsls	r2, r2, #4
 8011932:	4413      	add	r3, r2
 8011934:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011938:	887a      	ldrh	r2, [r7, #2]
 801193a:	429a      	cmp	r2, r3
 801193c:	d917      	bls.n	801196e <make_route+0xda>
			route[i] = (0x00 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 801193e:	4b76      	ldr	r3, [pc, #472]	; (8011b18 <make_route+0x284>)
 8011940:	789b      	ldrb	r3, [r3, #2]
 8011942:	b2db      	uxtb	r3, r3
 8011944:	425b      	negs	r3, r3
 8011946:	b2da      	uxtb	r2, r3
 8011948:	88bb      	ldrh	r3, [r7, #4]
 801194a:	f002 0203 	and.w	r2, r2, #3
 801194e:	b2d1      	uxtb	r1, r2
 8011950:	4a72      	ldr	r2, [pc, #456]	; (8011b1c <make_route+0x288>)
 8011952:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y+1][x];								//a最大歩数マップ値を更新
 8011954:	79bb      	ldrb	r3, [r7, #6]
 8011956:	1c5a      	adds	r2, r3, #1
 8011958:	79fb      	ldrb	r3, [r7, #7]
 801195a:	4971      	ldr	r1, [pc, #452]	; (8011b20 <make_route+0x28c>)
 801195c:	0112      	lsls	r2, r2, #4
 801195e:	4413      	add	r3, r2
 8011960:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011964:	807b      	strh	r3, [r7, #2]
			y++;												//a北に進んだのでY座標をインクリメント
 8011966:	79bb      	ldrb	r3, [r7, #6]
 8011968:	3301      	adds	r3, #1
 801196a:	71bb      	strb	r3, [r7, #6]
 801196c:	e079      	b.n	8011a62 <make_route+0x1ce>
		}
		//----a東を見る----
		else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){	//a東側に壁が無く、現在地より小さい歩数マップ値であれば
 801196e:	787b      	ldrb	r3, [r7, #1]
 8011970:	f003 0304 	and.w	r3, r3, #4
 8011974:	2b00      	cmp	r3, #0
 8011976:	d123      	bne.n	80119c0 <make_route+0x12c>
 8011978:	79ba      	ldrb	r2, [r7, #6]
 801197a:	79fb      	ldrb	r3, [r7, #7]
 801197c:	3301      	adds	r3, #1
 801197e:	4968      	ldr	r1, [pc, #416]	; (8011b20 <make_route+0x28c>)
 8011980:	0112      	lsls	r2, r2, #4
 8011982:	4413      	add	r3, r2
 8011984:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011988:	887a      	ldrh	r2, [r7, #2]
 801198a:	429a      	cmp	r2, r3
 801198c:	d918      	bls.n	80119c0 <make_route+0x12c>
			route[i] = (0x01 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 801198e:	4b62      	ldr	r3, [pc, #392]	; (8011b18 <make_route+0x284>)
 8011990:	789b      	ldrb	r3, [r3, #2]
 8011992:	b2db      	uxtb	r3, r3
 8011994:	f1c3 0301 	rsb	r3, r3, #1
 8011998:	b2da      	uxtb	r2, r3
 801199a:	88bb      	ldrh	r3, [r7, #4]
 801199c:	f002 0203 	and.w	r2, r2, #3
 80119a0:	b2d1      	uxtb	r1, r2
 80119a2:	4a5e      	ldr	r2, [pc, #376]	; (8011b1c <make_route+0x288>)
 80119a4:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x+1];								//a最大歩数マップ値を更新
 80119a6:	79ba      	ldrb	r2, [r7, #6]
 80119a8:	79fb      	ldrb	r3, [r7, #7]
 80119aa:	3301      	adds	r3, #1
 80119ac:	495c      	ldr	r1, [pc, #368]	; (8011b20 <make_route+0x28c>)
 80119ae:	0112      	lsls	r2, r2, #4
 80119b0:	4413      	add	r3, r2
 80119b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80119b6:	807b      	strh	r3, [r7, #2]
			x++;												//a東に進んだのでX座標をインクリメント
 80119b8:	79fb      	ldrb	r3, [r7, #7]
 80119ba:	3301      	adds	r3, #1
 80119bc:	71fb      	strb	r3, [r7, #7]
 80119be:	e050      	b.n	8011a62 <make_route+0x1ce>
		}
		//----a南を見る----
		else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){	//a南側に壁が無く、現在地より小さい歩数マップ値であれば
 80119c0:	787b      	ldrb	r3, [r7, #1]
 80119c2:	f003 0302 	and.w	r3, r3, #2
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d123      	bne.n	8011a12 <make_route+0x17e>
 80119ca:	79bb      	ldrb	r3, [r7, #6]
 80119cc:	1e5a      	subs	r2, r3, #1
 80119ce:	79fb      	ldrb	r3, [r7, #7]
 80119d0:	4953      	ldr	r1, [pc, #332]	; (8011b20 <make_route+0x28c>)
 80119d2:	0112      	lsls	r2, r2, #4
 80119d4:	4413      	add	r3, r2
 80119d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80119da:	887a      	ldrh	r2, [r7, #2]
 80119dc:	429a      	cmp	r2, r3
 80119de:	d918      	bls.n	8011a12 <make_route+0x17e>
			route[i] = (0x02 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 80119e0:	4b4d      	ldr	r3, [pc, #308]	; (8011b18 <make_route+0x284>)
 80119e2:	789b      	ldrb	r3, [r3, #2]
 80119e4:	b2db      	uxtb	r3, r3
 80119e6:	f1c3 0302 	rsb	r3, r3, #2
 80119ea:	b2da      	uxtb	r2, r3
 80119ec:	88bb      	ldrh	r3, [r7, #4]
 80119ee:	f002 0203 	and.w	r2, r2, #3
 80119f2:	b2d1      	uxtb	r1, r2
 80119f4:	4a49      	ldr	r2, [pc, #292]	; (8011b1c <make_route+0x288>)
 80119f6:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y-1][x];								//a最大歩数マップ値を更新
 80119f8:	79bb      	ldrb	r3, [r7, #6]
 80119fa:	1e5a      	subs	r2, r3, #1
 80119fc:	79fb      	ldrb	r3, [r7, #7]
 80119fe:	4948      	ldr	r1, [pc, #288]	; (8011b20 <make_route+0x28c>)
 8011a00:	0112      	lsls	r2, r2, #4
 8011a02:	4413      	add	r3, r2
 8011a04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011a08:	807b      	strh	r3, [r7, #2]
			y--;												//a南に進んだのでY座標をデクリメント
 8011a0a:	79bb      	ldrb	r3, [r7, #6]
 8011a0c:	3b01      	subs	r3, #1
 8011a0e:	71bb      	strb	r3, [r7, #6]
 8011a10:	e027      	b.n	8011a62 <make_route+0x1ce>
		}
		//----a西を見る----
		else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){	//a西側に壁が無く、現在地より小さい歩数マップ値であれば
 8011a12:	787b      	ldrb	r3, [r7, #1]
 8011a14:	f003 0301 	and.w	r3, r3, #1
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d122      	bne.n	8011a62 <make_route+0x1ce>
 8011a1c:	79ba      	ldrb	r2, [r7, #6]
 8011a1e:	79fb      	ldrb	r3, [r7, #7]
 8011a20:	3b01      	subs	r3, #1
 8011a22:	493f      	ldr	r1, [pc, #252]	; (8011b20 <make_route+0x28c>)
 8011a24:	0112      	lsls	r2, r2, #4
 8011a26:	4413      	add	r3, r2
 8011a28:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011a2c:	887a      	ldrh	r2, [r7, #2]
 8011a2e:	429a      	cmp	r2, r3
 8011a30:	d917      	bls.n	8011a62 <make_route+0x1ce>
			route[i] = (0x03 - mouse.dir) & 0x03;				//route配列に進行方向を記録
 8011a32:	4b39      	ldr	r3, [pc, #228]	; (8011b18 <make_route+0x284>)
 8011a34:	789b      	ldrb	r3, [r3, #2]
 8011a36:	b2db      	uxtb	r3, r3
 8011a38:	f1c3 0303 	rsb	r3, r3, #3
 8011a3c:	b2da      	uxtb	r2, r3
 8011a3e:	88bb      	ldrh	r3, [r7, #4]
 8011a40:	f002 0203 	and.w	r2, r2, #3
 8011a44:	b2d1      	uxtb	r1, r2
 8011a46:	4a35      	ldr	r2, [pc, #212]	; (8011b1c <make_route+0x288>)
 8011a48:	54d1      	strb	r1, [r2, r3]
			m_step = smap[y][x-1];								//a最大歩数マップ値を更新
 8011a4a:	79ba      	ldrb	r2, [r7, #6]
 8011a4c:	79fb      	ldrb	r3, [r7, #7]
 8011a4e:	3b01      	subs	r3, #1
 8011a50:	4933      	ldr	r1, [pc, #204]	; (8011b20 <make_route+0x28c>)
 8011a52:	0112      	lsls	r2, r2, #4
 8011a54:	4413      	add	r3, r2
 8011a56:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011a5a:	807b      	strh	r3, [r7, #2]
			x--;												//a西に進んだのでX座標をデクリメント
 8011a5c:	79fb      	ldrb	r3, [r7, #7]
 8011a5e:	3b01      	subs	r3, #1
 8011a60:	71fb      	strb	r3, [r7, #7]
				y--;												//a南に進んだのでY座標をデクリメント
			}*/

		}
		//----a格納データ形式変更----
		switch(route[i]){										//route配列に格納した要素値で分岐
 8011a62:	88bb      	ldrh	r3, [r7, #4]
 8011a64:	4a2d      	ldr	r2, [pc, #180]	; (8011b1c <make_route+0x288>)
 8011a66:	5cd3      	ldrb	r3, [r2, r3]
 8011a68:	2b03      	cmp	r3, #3
 8011a6a:	d83c      	bhi.n	8011ae6 <make_route+0x252>
 8011a6c:	a201      	add	r2, pc, #4	; (adr r2, 8011a74 <make_route+0x1e0>)
 8011a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a72:	bf00      	nop
 8011a74:	08011a85 	.word	0x08011a85
 8011a78:	08011ab1 	.word	0x08011ab1
 8011a7c:	08011ac3 	.word	0x08011ac3
 8011a80:	08011ad5 	.word	0x08011ad5
		case 0x00:												//a前進する場合
			if(pass_mode < 3){
 8011a84:	4b27      	ldr	r3, [pc, #156]	; (8011b24 <make_route+0x290>)
 8011a86:	781b      	ldrb	r3, [r3, #0]
 8011a88:	2b02      	cmp	r3, #2
 8011a8a:	d804      	bhi.n	8011a96 <make_route+0x202>
				route[i] = 0x88;									//a格納データ形式を変更
 8011a8c:	88bb      	ldrh	r3, [r7, #4]
 8011a8e:	4a23      	ldr	r2, [pc, #140]	; (8011b1c <make_route+0x288>)
 8011a90:	2188      	movs	r1, #136	; 0x88
 8011a92:	54d1      	strb	r1, [r2, r3]
			}else{
				route[i] = 0x77;
				route[i+1] = 0x77;
				i++;
			}
			break;
 8011a94:	e02c      	b.n	8011af0 <make_route+0x25c>
				route[i] = 0x77;
 8011a96:	88bb      	ldrh	r3, [r7, #4]
 8011a98:	4a20      	ldr	r2, [pc, #128]	; (8011b1c <make_route+0x288>)
 8011a9a:	2177      	movs	r1, #119	; 0x77
 8011a9c:	54d1      	strb	r1, [r2, r3]
				route[i+1] = 0x77;
 8011a9e:	88bb      	ldrh	r3, [r7, #4]
 8011aa0:	3301      	adds	r3, #1
 8011aa2:	4a1e      	ldr	r2, [pc, #120]	; (8011b1c <make_route+0x288>)
 8011aa4:	2177      	movs	r1, #119	; 0x77
 8011aa6:	54d1      	strb	r1, [r2, r3]
				i++;
 8011aa8:	88bb      	ldrh	r3, [r7, #4]
 8011aaa:	3301      	adds	r3, #1
 8011aac:	80bb      	strh	r3, [r7, #4]
			break;
 8011aae:	e01f      	b.n	8011af0 <make_route+0x25c>
		case 0x01:												//a右折する場合
			turn_dir(DIR_TURN_R90, 0);								//a内部情報の方向を90度右回転
 8011ab0:	2100      	movs	r1, #0
 8011ab2:	2001      	movs	r0, #1
 8011ab4:	f7ff fad8 	bl	8011068 <turn_dir>
			route[i] = 0x44;									//a格納データ形式を変更
 8011ab8:	88bb      	ldrh	r3, [r7, #4]
 8011aba:	4a18      	ldr	r2, [pc, #96]	; (8011b1c <make_route+0x288>)
 8011abc:	2144      	movs	r1, #68	; 0x44
 8011abe:	54d1      	strb	r1, [r2, r3]
			break;
 8011ac0:	e016      	b.n	8011af0 <make_route+0x25c>
		case 0x02:												//Uターンする場合
			turn_dir(DIR_TURN_180, 0);								//a内部情報の方向を180度回転
 8011ac2:	2100      	movs	r1, #0
 8011ac4:	2002      	movs	r0, #2
 8011ac6:	f7ff facf 	bl	8011068 <turn_dir>
			route[i] = 0x22;									//a格納データ形式を変更
 8011aca:	88bb      	ldrh	r3, [r7, #4]
 8011acc:	4a13      	ldr	r2, [pc, #76]	; (8011b1c <make_route+0x288>)
 8011ace:	2122      	movs	r1, #34	; 0x22
 8011ad0:	54d1      	strb	r1, [r2, r3]
			break;
 8011ad2:	e00d      	b.n	8011af0 <make_route+0x25c>
		case 0x03:												//a左折する場合
			turn_dir(DIR_TURN_L90, 0);								//a内部情報の方向を90度左回転
 8011ad4:	2100      	movs	r1, #0
 8011ad6:	20ff      	movs	r0, #255	; 0xff
 8011ad8:	f7ff fac6 	bl	8011068 <turn_dir>
			route[i] = 0x11;									//a格納データ形式を変更
 8011adc:	88bb      	ldrh	r3, [r7, #4]
 8011ade:	4a0f      	ldr	r2, [pc, #60]	; (8011b1c <make_route+0x288>)
 8011ae0:	2111      	movs	r1, #17
 8011ae2:	54d1      	strb	r1, [r2, r3]
			break;
 8011ae4:	e004      	b.n	8011af0 <make_route+0x25c>
		default:												//aそれ以外の場合
			route[i] = 0x00;									//a格納データ形式を変更
 8011ae6:	88bb      	ldrh	r3, [r7, #4]
 8011ae8:	4a0c      	ldr	r2, [pc, #48]	; (8011b1c <make_route+0x288>)
 8011aea:	2100      	movs	r1, #0
 8011aec:	54d1      	strb	r1, [r2, r3]
			break;
 8011aee:	bf00      	nop
		}
		i++;													//aカウンタをインクリメント
 8011af0:	88bb      	ldrh	r3, [r7, #4]
 8011af2:	3301      	adds	r3, #1
 8011af4:	80bb      	strh	r3, [r7, #4]
	}while(smap[y][x] != 0);									//a進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 8011af6:	79ba      	ldrb	r2, [r7, #6]
 8011af8:	79fb      	ldrb	r3, [r7, #7]
 8011afa:	4909      	ldr	r1, [pc, #36]	; (8011b20 <make_route+0x28c>)
 8011afc:	0112      	lsls	r2, r2, #4
 8011afe:	4413      	add	r3, r2
 8011b00:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	f47f aef8 	bne.w	80118fa <make_route+0x66>
	mouse.dir = dir_temp;										//dir_tempに退避させた値をmouse.dirにリストア
 8011b0a:	4a03      	ldr	r2, [pc, #12]	; (8011b18 <make_route+0x284>)
 8011b0c:	783b      	ldrb	r3, [r7, #0]
 8011b0e:	7093      	strb	r3, [r2, #2]
}
 8011b10:	bf00      	nop
 8011b12:	3708      	adds	r7, #8
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}
 8011b18:	20000c54 	.word	0x20000c54
 8011b1c:	20000c9c 	.word	0x20000c9c
 8011b20:	20000da8 	.word	0x20000da8
 8011b24:	2000048f 	.word	0x2000048f
 8011b28:	200001e4 	.word	0x200001e4
 8011b2c:	20000fac 	.word	0x20000fac

08011b30 <find_pregoal>:
//	未探索壁を含む＆現在座標から最も近いマス(=仮goal)を探す
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void find_pregoal()
{
 8011b30:	b480      	push	{r7}
 8011b32:	b085      	sub	sp, #20
 8011b34:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持
	//uint8_t m_temp_sample[16];
	uint8_t break_flag = 0;													//未知壁マスを見つけた時のループ脱出フラグ
 8011b36:	2300      	movs	r3, #0
 8011b38:	737b      	strb	r3, [r7, #13]

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	73bb      	strb	r3, [r7, #14]
 8011b3e:	e014      	b.n	8011b6a <find_pregoal+0x3a>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8011b40:	2300      	movs	r3, #0
 8011b42:	73fb      	strb	r3, [r7, #15]
 8011b44:	e00b      	b.n	8011b5e <find_pregoal+0x2e>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 8011b46:	7bba      	ldrb	r2, [r7, #14]
 8011b48:	7bfb      	ldrb	r3, [r7, #15]
 8011b4a:	499f      	ldr	r1, [pc, #636]	; (8011dc8 <find_pregoal+0x298>)
 8011b4c:	0112      	lsls	r2, r2, #4
 8011b4e:	4413      	add	r3, r2
 8011b50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011b54:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8011b58:	7bfb      	ldrb	r3, [r7, #15]
 8011b5a:	3301      	adds	r3, #1
 8011b5c:	73fb      	strb	r3, [r7, #15]
 8011b5e:	7bfb      	ldrb	r3, [r7, #15]
 8011b60:	2b0f      	cmp	r3, #15
 8011b62:	d9f0      	bls.n	8011b46 <find_pregoal+0x16>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8011b64:	7bbb      	ldrb	r3, [r7, #14]
 8011b66:	3301      	adds	r3, #1
 8011b68:	73bb      	strb	r3, [r7, #14]
 8011b6a:	7bbb      	ldrb	r3, [r7, #14]
 8011b6c:	2b0f      	cmp	r3, #15
 8011b6e:	d9e7      	bls.n	8011b40 <find_pregoal+0x10>
		}
	}

	//====探索完了フラグのクリア====
	allmap_comp_flag = 0;
 8011b70:	4b96      	ldr	r3, [pc, #600]	; (8011dcc <find_pregoal+0x29c>)
 8011b72:	2200      	movs	r2, #0
 8011b74:	701a      	strb	r2, [r3, #0]

	//====現在座標を0にする====
	smap[mouse.y][mouse.x] = 0;
 8011b76:	4b96      	ldr	r3, [pc, #600]	; (8011dd0 <find_pregoal+0x2a0>)
 8011b78:	785b      	ldrb	r3, [r3, #1]
 8011b7a:	b2db      	uxtb	r3, r3
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	4b94      	ldr	r3, [pc, #592]	; (8011dd0 <find_pregoal+0x2a0>)
 8011b80:	781b      	ldrb	r3, [r3, #0]
 8011b82:	b2db      	uxtb	r3, r3
 8011b84:	4619      	mov	r1, r3
 8011b86:	4a90      	ldr	r2, [pc, #576]	; (8011dc8 <find_pregoal+0x298>)
 8011b88:	0103      	lsls	r3, r0, #4
 8011b8a:	440b      	add	r3, r1
 8011b8c:	2100      	movs	r1, #0
 8011b8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 8011b92:	4b90      	ldr	r3, [pc, #576]	; (8011dd4 <find_pregoal+0x2a4>)
 8011b94:	2200      	movs	r2, #0
 8011b96:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 8011b98:	2303      	movs	r3, #3
 8011b9a:	60bb      	str	r3, [r7, #8]
	int turn = 1;
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	73bb      	strb	r3, [r7, #14]
 8011ba4:	e180      	b.n	8011ea8 <find_pregoal+0x378>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	73fb      	strb	r3, [r7, #15]
 8011baa:	e173      	b.n	8011e94 <find_pregoal+0x364>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 8011bac:	7bba      	ldrb	r2, [r7, #14]
 8011bae:	7bfb      	ldrb	r3, [r7, #15]
 8011bb0:	4985      	ldr	r1, [pc, #532]	; (8011dc8 <find_pregoal+0x298>)
 8011bb2:	0112      	lsls	r2, r2, #4
 8011bb4:	4413      	add	r3, r2
 8011bb6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8011bba:	4b86      	ldr	r3, [pc, #536]	; (8011dd4 <find_pregoal+0x2a4>)
 8011bbc:	881b      	ldrh	r3, [r3, #0]
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	f040 8165 	bne.w	8011e8e <find_pregoal+0x35e>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 8011bc4:	7bba      	ldrb	r2, [r7, #14]
 8011bc6:	7bfb      	ldrb	r3, [r7, #15]
 8011bc8:	4983      	ldr	r1, [pc, #524]	; (8011dd8 <find_pregoal+0x2a8>)
 8011bca:	0112      	lsls	r2, r2, #4
 8011bcc:	440a      	add	r2, r1
 8011bce:	4413      	add	r3, r2
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 8011bd4:	78fb      	ldrb	r3, [r7, #3]
 8011bd6:	f003 0308 	and.w	r3, r3, #8
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d14d      	bne.n	8011c7a <find_pregoal+0x14a>
 8011bde:	7bbb      	ldrb	r3, [r7, #14]
 8011be0:	2b0f      	cmp	r3, #15
 8011be2:	d04a      	beq.n	8011c7a <find_pregoal+0x14a>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 8011be4:	7bbb      	ldrb	r3, [r7, #14]
 8011be6:	1c5a      	adds	r2, r3, #1
 8011be8:	7bfb      	ldrb	r3, [r7, #15]
 8011bea:	4977      	ldr	r1, [pc, #476]	; (8011dc8 <find_pregoal+0x298>)
 8011bec:	0112      	lsls	r2, r2, #4
 8011bee:	4413      	add	r3, r2
 8011bf0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011bf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	d13e      	bne.n	8011c7a <find_pregoal+0x14a>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8011bfc:	7bba      	ldrb	r2, [r7, #14]
 8011bfe:	7bfb      	ldrb	r3, [r7, #15]
 8011c00:	4971      	ldr	r1, [pc, #452]	; (8011dc8 <find_pregoal+0x298>)
 8011c02:	0112      	lsls	r2, r2, #4
 8011c04:	4413      	add	r3, r2
 8011c06:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	b299      	uxth	r1, r3
 8011c0e:	7bbb      	ldrb	r3, [r7, #14]
 8011c10:	1c5a      	adds	r2, r3, #1
 8011c12:	7bfb      	ldrb	r3, [r7, #15]
 8011c14:	4401      	add	r1, r0
 8011c16:	b288      	uxth	r0, r1
 8011c18:	496b      	ldr	r1, [pc, #428]	; (8011dc8 <find_pregoal+0x298>)
 8011c1a:	0112      	lsls	r2, r2, #4
 8011c1c:	4413      	add	r3, r2
 8011c1e:	4602      	mov	r2, r0
 8011c20:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y + 1][x] & 0x0f ) << 4) != (map[y + 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8011c24:	7bbb      	ldrb	r3, [r7, #14]
 8011c26:	1c5a      	adds	r2, r3, #1
 8011c28:	7bfb      	ldrb	r3, [r7, #15]
 8011c2a:	496b      	ldr	r1, [pc, #428]	; (8011dd8 <find_pregoal+0x2a8>)
 8011c2c:	0112      	lsls	r2, r2, #4
 8011c2e:	440a      	add	r2, r1
 8011c30:	4413      	add	r3, r2
 8011c32:	781b      	ldrb	r3, [r3, #0]
 8011c34:	011b      	lsls	r3, r3, #4
 8011c36:	b2da      	uxtb	r2, r3
 8011c38:	7bbb      	ldrb	r3, [r7, #14]
 8011c3a:	1c59      	adds	r1, r3, #1
 8011c3c:	7bfb      	ldrb	r3, [r7, #15]
 8011c3e:	4866      	ldr	r0, [pc, #408]	; (8011dd8 <find_pregoal+0x2a8>)
 8011c40:	0109      	lsls	r1, r1, #4
 8011c42:	4401      	add	r1, r0
 8011c44:	440b      	add	r3, r1
 8011c46:	781b      	ldrb	r3, [r3, #0]
 8011c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	d014      	beq.n	8011c7a <find_pregoal+0x14a>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8011c50:	2301      	movs	r3, #1
 8011c52:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y + 1][x];					//仮goalの歩数を記録
 8011c54:	7bbb      	ldrb	r3, [r7, #14]
 8011c56:	1c5a      	adds	r2, r3, #1
 8011c58:	7bfb      	ldrb	r3, [r7, #15]
 8011c5a:	495b      	ldr	r1, [pc, #364]	; (8011dc8 <find_pregoal+0x298>)
 8011c5c:	0112      	lsls	r2, r2, #4
 8011c5e:	4413      	add	r3, r2
 8011c60:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8011c64:	4b5d      	ldr	r3, [pc, #372]	; (8011ddc <find_pregoal+0x2ac>)
 8011c66:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 8011c68:	4a5d      	ldr	r2, [pc, #372]	; (8011de0 <find_pregoal+0x2b0>)
 8011c6a:	7bfb      	ldrb	r3, [r7, #15]
 8011c6c:	7013      	strb	r3, [r2, #0]
								pregoal_y = y + 1;							//仮goalの座標を記録
 8011c6e:	7bbb      	ldrb	r3, [r7, #14]
 8011c70:	3301      	adds	r3, #1
 8011c72:	b2da      	uxtb	r2, r3
 8011c74:	4b5b      	ldr	r3, [pc, #364]	; (8011de4 <find_pregoal+0x2b4>)
 8011c76:	701a      	strb	r2, [r3, #0]
								break;
 8011c78:	e110      	b.n	8011e9c <find_pregoal+0x36c>
							}
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 8011c7a:	78fb      	ldrb	r3, [r7, #3]
 8011c7c:	f003 0304 	and.w	r3, r3, #4
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d14d      	bne.n	8011d20 <find_pregoal+0x1f0>
 8011c84:	7bfb      	ldrb	r3, [r7, #15]
 8011c86:	2b0f      	cmp	r3, #15
 8011c88:	d04a      	beq.n	8011d20 <find_pregoal+0x1f0>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 8011c8a:	7bba      	ldrb	r2, [r7, #14]
 8011c8c:	7bfb      	ldrb	r3, [r7, #15]
 8011c8e:	3301      	adds	r3, #1
 8011c90:	494d      	ldr	r1, [pc, #308]	; (8011dc8 <find_pregoal+0x298>)
 8011c92:	0112      	lsls	r2, r2, #4
 8011c94:	4413      	add	r3, r2
 8011c96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011c9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011c9e:	4293      	cmp	r3, r2
 8011ca0:	d13e      	bne.n	8011d20 <find_pregoal+0x1f0>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8011ca2:	7bba      	ldrb	r2, [r7, #14]
 8011ca4:	7bfb      	ldrb	r3, [r7, #15]
 8011ca6:	4948      	ldr	r1, [pc, #288]	; (8011dc8 <find_pregoal+0x298>)
 8011ca8:	0112      	lsls	r2, r2, #4
 8011caa:	4413      	add	r3, r2
 8011cac:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	b299      	uxth	r1, r3
 8011cb4:	7bba      	ldrb	r2, [r7, #14]
 8011cb6:	7bfb      	ldrb	r3, [r7, #15]
 8011cb8:	3301      	adds	r3, #1
 8011cba:	4401      	add	r1, r0
 8011cbc:	b288      	uxth	r0, r1
 8011cbe:	4942      	ldr	r1, [pc, #264]	; (8011dc8 <find_pregoal+0x298>)
 8011cc0:	0112      	lsls	r2, r2, #4
 8011cc2:	4413      	add	r3, r2
 8011cc4:	4602      	mov	r2, r0
 8011cc6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x + 1] & 0x0f) << 4) != (map[y][x + 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8011cca:	7bba      	ldrb	r2, [r7, #14]
 8011ccc:	7bfb      	ldrb	r3, [r7, #15]
 8011cce:	3301      	adds	r3, #1
 8011cd0:	4941      	ldr	r1, [pc, #260]	; (8011dd8 <find_pregoal+0x2a8>)
 8011cd2:	0112      	lsls	r2, r2, #4
 8011cd4:	440a      	add	r2, r1
 8011cd6:	4413      	add	r3, r2
 8011cd8:	781b      	ldrb	r3, [r3, #0]
 8011cda:	011b      	lsls	r3, r3, #4
 8011cdc:	b2da      	uxtb	r2, r3
 8011cde:	7bb9      	ldrb	r1, [r7, #14]
 8011ce0:	7bfb      	ldrb	r3, [r7, #15]
 8011ce2:	3301      	adds	r3, #1
 8011ce4:	483c      	ldr	r0, [pc, #240]	; (8011dd8 <find_pregoal+0x2a8>)
 8011ce6:	0109      	lsls	r1, r1, #4
 8011ce8:	4401      	add	r1, r0
 8011cea:	440b      	add	r3, r1
 8011cec:	781b      	ldrb	r3, [r3, #0]
 8011cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	d014      	beq.n	8011d20 <find_pregoal+0x1f0>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x + 1];					//仮ゴールの歩数を記録
 8011cfa:	7bba      	ldrb	r2, [r7, #14]
 8011cfc:	7bfb      	ldrb	r3, [r7, #15]
 8011cfe:	3301      	adds	r3, #1
 8011d00:	4931      	ldr	r1, [pc, #196]	; (8011dc8 <find_pregoal+0x298>)
 8011d02:	0112      	lsls	r2, r2, #4
 8011d04:	4413      	add	r3, r2
 8011d06:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8011d0a:	4b34      	ldr	r3, [pc, #208]	; (8011ddc <find_pregoal+0x2ac>)
 8011d0c:	801a      	strh	r2, [r3, #0]
								pregoal_x = x + 1;
 8011d0e:	7bfb      	ldrb	r3, [r7, #15]
 8011d10:	3301      	adds	r3, #1
 8011d12:	b2da      	uxtb	r2, r3
 8011d14:	4b32      	ldr	r3, [pc, #200]	; (8011de0 <find_pregoal+0x2b0>)
 8011d16:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 8011d18:	4a32      	ldr	r2, [pc, #200]	; (8011de4 <find_pregoal+0x2b4>)
 8011d1a:	7bbb      	ldrb	r3, [r7, #14]
 8011d1c:	7013      	strb	r3, [r2, #0]
								break;
 8011d1e:	e0bd      	b.n	8011e9c <find_pregoal+0x36c>
							}
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 8011d20:	78fb      	ldrb	r3, [r7, #3]
 8011d22:	f003 0302 	and.w	r3, r3, #2
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d15e      	bne.n	8011de8 <find_pregoal+0x2b8>
 8011d2a:	7bbb      	ldrb	r3, [r7, #14]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d05b      	beq.n	8011de8 <find_pregoal+0x2b8>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 8011d30:	7bbb      	ldrb	r3, [r7, #14]
 8011d32:	1e5a      	subs	r2, r3, #1
 8011d34:	7bfb      	ldrb	r3, [r7, #15]
 8011d36:	4924      	ldr	r1, [pc, #144]	; (8011dc8 <find_pregoal+0x298>)
 8011d38:	0112      	lsls	r2, r2, #4
 8011d3a:	4413      	add	r3, r2
 8011d3c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011d40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011d44:	4293      	cmp	r3, r2
 8011d46:	d14f      	bne.n	8011de8 <find_pregoal+0x2b8>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8011d48:	7bba      	ldrb	r2, [r7, #14]
 8011d4a:	7bfb      	ldrb	r3, [r7, #15]
 8011d4c:	491e      	ldr	r1, [pc, #120]	; (8011dc8 <find_pregoal+0x298>)
 8011d4e:	0112      	lsls	r2, r2, #4
 8011d50:	4413      	add	r3, r2
 8011d52:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	b299      	uxth	r1, r3
 8011d5a:	7bbb      	ldrb	r3, [r7, #14]
 8011d5c:	1e5a      	subs	r2, r3, #1
 8011d5e:	7bfb      	ldrb	r3, [r7, #15]
 8011d60:	4401      	add	r1, r0
 8011d62:	b288      	uxth	r0, r1
 8011d64:	4918      	ldr	r1, [pc, #96]	; (8011dc8 <find_pregoal+0x298>)
 8011d66:	0112      	lsls	r2, r2, #4
 8011d68:	4413      	add	r3, r2
 8011d6a:	4602      	mov	r2, r0
 8011d6c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y - 1][x] & 0x0f) << 4) != (map[y - 1][x] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8011d70:	7bbb      	ldrb	r3, [r7, #14]
 8011d72:	1e5a      	subs	r2, r3, #1
 8011d74:	7bfb      	ldrb	r3, [r7, #15]
 8011d76:	4918      	ldr	r1, [pc, #96]	; (8011dd8 <find_pregoal+0x2a8>)
 8011d78:	0112      	lsls	r2, r2, #4
 8011d7a:	440a      	add	r2, r1
 8011d7c:	4413      	add	r3, r2
 8011d7e:	781b      	ldrb	r3, [r3, #0]
 8011d80:	011b      	lsls	r3, r3, #4
 8011d82:	b2da      	uxtb	r2, r3
 8011d84:	7bbb      	ldrb	r3, [r7, #14]
 8011d86:	1e59      	subs	r1, r3, #1
 8011d88:	7bfb      	ldrb	r3, [r7, #15]
 8011d8a:	4813      	ldr	r0, [pc, #76]	; (8011dd8 <find_pregoal+0x2a8>)
 8011d8c:	0109      	lsls	r1, r1, #4
 8011d8e:	4401      	add	r1, r0
 8011d90:	440b      	add	r3, r1
 8011d92:	781b      	ldrb	r3, [r3, #0]
 8011d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011d98:	429a      	cmp	r2, r3
 8011d9a:	d025      	beq.n	8011de8 <find_pregoal+0x2b8>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8011d9c:	2301      	movs	r3, #1
 8011d9e:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y - 1][x];					//仮ゴールの歩数を記録
 8011da0:	7bbb      	ldrb	r3, [r7, #14]
 8011da2:	1e5a      	subs	r2, r3, #1
 8011da4:	7bfb      	ldrb	r3, [r7, #15]
 8011da6:	4908      	ldr	r1, [pc, #32]	; (8011dc8 <find_pregoal+0x298>)
 8011da8:	0112      	lsls	r2, r2, #4
 8011daa:	4413      	add	r3, r2
 8011dac:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8011db0:	4b0a      	ldr	r3, [pc, #40]	; (8011ddc <find_pregoal+0x2ac>)
 8011db2:	801a      	strh	r2, [r3, #0]
								pregoal_x = x;
 8011db4:	4a0a      	ldr	r2, [pc, #40]	; (8011de0 <find_pregoal+0x2b0>)
 8011db6:	7bfb      	ldrb	r3, [r7, #15]
 8011db8:	7013      	strb	r3, [r2, #0]
								pregoal_y = y - 1;							//仮goalの座標を記録
 8011dba:	7bbb      	ldrb	r3, [r7, #14]
 8011dbc:	3b01      	subs	r3, #1
 8011dbe:	b2da      	uxtb	r2, r3
 8011dc0:	4b08      	ldr	r3, [pc, #32]	; (8011de4 <find_pregoal+0x2b4>)
 8011dc2:	701a      	strb	r2, [r3, #0]
								break;
 8011dc4:	e06a      	b.n	8011e9c <find_pregoal+0x36c>
 8011dc6:	bf00      	nop
 8011dc8:	20000da8 	.word	0x20000da8
 8011dcc:	20000bf0 	.word	0x20000bf0
 8011dd0:	20000c54 	.word	0x20000c54
 8011dd4:	20000386 	.word	0x20000386
 8011dd8:	200001e4 	.word	0x200001e4
 8011ddc:	20000c4c 	.word	0x20000c4c
 8011de0:	20000da4 	.word	0x20000da4
 8011de4:	20000fc4 	.word	0x20000fc4
							}
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 8011de8:	78fb      	ldrb	r3, [r7, #3]
 8011dea:	f003 0301 	and.w	r3, r3, #1
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d14d      	bne.n	8011e8e <find_pregoal+0x35e>
 8011df2:	7bfb      	ldrb	r3, [r7, #15]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d04a      	beq.n	8011e8e <find_pregoal+0x35e>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 8011df8:	7bba      	ldrb	r2, [r7, #14]
 8011dfa:	7bfb      	ldrb	r3, [r7, #15]
 8011dfc:	3b01      	subs	r3, #1
 8011dfe:	493b      	ldr	r1, [pc, #236]	; (8011eec <find_pregoal+0x3bc>)
 8011e00:	0112      	lsls	r2, r2, #4
 8011e02:	4413      	add	r3, r2
 8011e04:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011e08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011e0c:	4293      	cmp	r3, r2
 8011e0e:	d13e      	bne.n	8011e8e <find_pregoal+0x35e>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 8011e10:	7bba      	ldrb	r2, [r7, #14]
 8011e12:	7bfb      	ldrb	r3, [r7, #15]
 8011e14:	4935      	ldr	r1, [pc, #212]	; (8011eec <find_pregoal+0x3bc>)
 8011e16:	0112      	lsls	r2, r2, #4
 8011e18:	4413      	add	r3, r2
 8011e1a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	b299      	uxth	r1, r3
 8011e22:	7bba      	ldrb	r2, [r7, #14]
 8011e24:	7bfb      	ldrb	r3, [r7, #15]
 8011e26:	3b01      	subs	r3, #1
 8011e28:	4401      	add	r1, r0
 8011e2a:	b288      	uxth	r0, r1
 8011e2c:	492f      	ldr	r1, [pc, #188]	; (8011eec <find_pregoal+0x3bc>)
 8011e2e:	0112      	lsls	r2, r2, #4
 8011e30:	4413      	add	r3, r2
 8011e32:	4602      	mov	r2, r0
 8011e34:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
							if (((map[y][x - 1] & 0x0f) << 4) != (map[y][x - 1] & 0xf0)) {		//map内の上位4bitと下位4bitが異なる場合
 8011e38:	7bba      	ldrb	r2, [r7, #14]
 8011e3a:	7bfb      	ldrb	r3, [r7, #15]
 8011e3c:	3b01      	subs	r3, #1
 8011e3e:	492c      	ldr	r1, [pc, #176]	; (8011ef0 <find_pregoal+0x3c0>)
 8011e40:	0112      	lsls	r2, r2, #4
 8011e42:	440a      	add	r2, r1
 8011e44:	4413      	add	r3, r2
 8011e46:	781b      	ldrb	r3, [r3, #0]
 8011e48:	011b      	lsls	r3, r3, #4
 8011e4a:	b2da      	uxtb	r2, r3
 8011e4c:	7bb9      	ldrb	r1, [r7, #14]
 8011e4e:	7bfb      	ldrb	r3, [r7, #15]
 8011e50:	3b01      	subs	r3, #1
 8011e52:	4827      	ldr	r0, [pc, #156]	; (8011ef0 <find_pregoal+0x3c0>)
 8011e54:	0109      	lsls	r1, r1, #4
 8011e56:	4401      	add	r1, r0
 8011e58:	440b      	add	r3, r1
 8011e5a:	781b      	ldrb	r3, [r3, #0]
 8011e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d014      	beq.n	8011e8e <find_pregoal+0x35e>
								break_flag = 1;								//for文を抜けるフラグを立てて
 8011e64:	2301      	movs	r3, #1
 8011e66:	737b      	strb	r3, [r7, #13]
								m_step2 = smap[y][x - 1];					//仮ゴールの歩数を記録
 8011e68:	7bba      	ldrb	r2, [r7, #14]
 8011e6a:	7bfb      	ldrb	r3, [r7, #15]
 8011e6c:	3b01      	subs	r3, #1
 8011e6e:	491f      	ldr	r1, [pc, #124]	; (8011eec <find_pregoal+0x3bc>)
 8011e70:	0112      	lsls	r2, r2, #4
 8011e72:	4413      	add	r3, r2
 8011e74:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8011e78:	4b1e      	ldr	r3, [pc, #120]	; (8011ef4 <find_pregoal+0x3c4>)
 8011e7a:	801a      	strh	r2, [r3, #0]
								pregoal_x = x - 1;
 8011e7c:	7bfb      	ldrb	r3, [r7, #15]
 8011e7e:	3b01      	subs	r3, #1
 8011e80:	b2da      	uxtb	r2, r3
 8011e82:	4b1d      	ldr	r3, [pc, #116]	; (8011ef8 <find_pregoal+0x3c8>)
 8011e84:	701a      	strb	r2, [r3, #0]
								pregoal_y = y;								//仮goalの座標を記録
 8011e86:	4a1d      	ldr	r2, [pc, #116]	; (8011efc <find_pregoal+0x3cc>)
 8011e88:	7bbb      	ldrb	r3, [r7, #14]
 8011e8a:	7013      	strb	r3, [r2, #0]
								break;							}
 8011e8c:	e006      	b.n	8011e9c <find_pregoal+0x36c>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8011e8e:	7bfb      	ldrb	r3, [r7, #15]
 8011e90:	3301      	adds	r3, #1
 8011e92:	73fb      	strb	r3, [r7, #15]
 8011e94:	7bfb      	ldrb	r3, [r7, #15]
 8011e96:	2b0f      	cmp	r3, #15
 8011e98:	f67f ae88 	bls.w	8011bac <find_pregoal+0x7c>
						}
					}
				}
			}
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 8011e9c:	7b7b      	ldrb	r3, [r7, #13]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d107      	bne.n	8011eb2 <find_pregoal+0x382>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 8011ea2:	7bbb      	ldrb	r3, [r7, #14]
 8011ea4:	3301      	adds	r3, #1
 8011ea6:	73bb      	strb	r3, [r7, #14]
 8011ea8:	7bbb      	ldrb	r3, [r7, #14]
 8011eaa:	2b0f      	cmp	r3, #15
 8011eac:	f67f ae7b 	bls.w	8011ba6 <find_pregoal+0x76>
 8011eb0:	e000      	b.n	8011eb4 <find_pregoal+0x384>
			if (break_flag) break;		//map内の上位4bitと下位4bitが異なる場合、for文を抜ける
 8011eb2:	bf00      	nop
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 8011eb4:	4b12      	ldr	r3, [pc, #72]	; (8011f00 <find_pregoal+0x3d0>)
 8011eb6:	881b      	ldrh	r3, [r3, #0]
 8011eb8:	3301      	adds	r3, #1
 8011eba:	b29a      	uxth	r2, r3
 8011ebc:	4b10      	ldr	r3, [pc, #64]	; (8011f00 <find_pregoal+0x3d0>)
 8011ebe:	801a      	strh	r2, [r3, #0]
		if (m_step > 500) allmap_comp_flag = 1;
 8011ec0:	4b0f      	ldr	r3, [pc, #60]	; (8011f00 <find_pregoal+0x3d0>)
 8011ec2:	881b      	ldrh	r3, [r3, #0]
 8011ec4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8011ec8:	d902      	bls.n	8011ed0 <find_pregoal+0x3a0>
 8011eca:	4b0e      	ldr	r3, [pc, #56]	; (8011f04 <find_pregoal+0x3d4>)
 8011ecc:	2201      	movs	r2, #1
 8011ece:	701a      	strb	r2, [r3, #0]
	} while (break_flag == 0 && allmap_comp_flag != 1);		//未探索壁ありマスを見つけるまで実行
 8011ed0:	7b7b      	ldrb	r3, [r7, #13]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d104      	bne.n	8011ee0 <find_pregoal+0x3b0>
 8011ed6:	4b0b      	ldr	r3, [pc, #44]	; (8011f04 <find_pregoal+0x3d4>)
 8011ed8:	781b      	ldrb	r3, [r3, #0]
 8011eda:	2b01      	cmp	r3, #1
 8011edc:	f47f ae60 	bne.w	8011ba0 <find_pregoal+0x70>
}
 8011ee0:	bf00      	nop
 8011ee2:	3714      	adds	r7, #20
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eea:	4770      	bx	lr
 8011eec:	20000da8 	.word	0x20000da8
 8011ef0:	200001e4 	.word	0x200001e4
 8011ef4:	20000c4c 	.word	0x20000c4c
 8011ef8:	20000da4 	.word	0x20000da4
 8011efc:	20000fc4 	.word	0x20000fc4
 8011f00:	20000386 	.word	0x20000386
 8011f04:	20000bf0 	.word	0x20000bf0

08011f08 <make_smap2>:
//	歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap2()
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b085      	sub	sp, #20
 8011f0c:	af00      	add	r7, sp, #0
	//====変数宣言====
	uint8_t x, y;															//for文用変数
	uint8_t m_temp;															//マップデータ一時保持

	//====歩数マップのクリア====
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8011f0e:	2300      	movs	r3, #0
 8011f10:	73bb      	strb	r3, [r7, #14]
 8011f12:	e014      	b.n	8011f3e <make_smap2+0x36>
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8011f14:	2300      	movs	r3, #0
 8011f16:	73fb      	strb	r3, [r7, #15]
 8011f18:	e00b      	b.n	8011f32 <make_smap2+0x2a>
			smap[y][x] = 0x03e7;											//未記入部分は歩数最大とする
 8011f1a:	7bba      	ldrb	r2, [r7, #14]
 8011f1c:	7bfb      	ldrb	r3, [r7, #15]
 8011f1e:	4986      	ldr	r1, [pc, #536]	; (8012138 <make_smap2+0x230>)
 8011f20:	0112      	lsls	r2, r2, #4
 8011f22:	4413      	add	r3, r2
 8011f24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011f28:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (x = 0; x <= 0x0f; x++) {										//各X座標で実行
 8011f2c:	7bfb      	ldrb	r3, [r7, #15]
 8011f2e:	3301      	adds	r3, #1
 8011f30:	73fb      	strb	r3, [r7, #15]
 8011f32:	7bfb      	ldrb	r3, [r7, #15]
 8011f34:	2b0f      	cmp	r3, #15
 8011f36:	d9f0      	bls.n	8011f1a <make_smap2+0x12>
	for (y = 0; y <= 0x0f; y++) {											//各Y座標で実行
 8011f38:	7bbb      	ldrb	r3, [r7, #14]
 8011f3a:	3301      	adds	r3, #1
 8011f3c:	73bb      	strb	r3, [r7, #14]
 8011f3e:	7bbb      	ldrb	r3, [r7, #14]
 8011f40:	2b0f      	cmp	r3, #15
 8011f42:	d9e7      	bls.n	8011f14 <make_smap2+0xc>
		}
	}

	//====仮ゴール座標を0にする====
	smap[pregoal_y][pregoal_x] = 0;
 8011f44:	4b7d      	ldr	r3, [pc, #500]	; (801213c <make_smap2+0x234>)
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	4618      	mov	r0, r3
 8011f4a:	4b7d      	ldr	r3, [pc, #500]	; (8012140 <make_smap2+0x238>)
 8011f4c:	781b      	ldrb	r3, [r3, #0]
 8011f4e:	4619      	mov	r1, r3
 8011f50:	4a79      	ldr	r2, [pc, #484]	; (8012138 <make_smap2+0x230>)
 8011f52:	0103      	lsls	r3, r0, #4
 8011f54:	440b      	add	r3, r1
 8011f56:	2100      	movs	r1, #0
 8011f58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	//====歩数カウンタを0にする====
	m_step = 0;																//現在記入した最大の歩数となる
 8011f5c:	4b79      	ldr	r3, [pc, #484]	; (8012144 <make_smap2+0x23c>)
 8011f5e:	2200      	movs	r2, #0
 8011f60:	801a      	strh	r2, [r3, #0]

	//====歩数カウンタの重みづけ====
	int straight = 3;
 8011f62:	2303      	movs	r3, #3
 8011f64:	60bb      	str	r3, [r7, #8]
	int turn = 5;
 8011f66:	2305      	movs	r3, #5
 8011f68:	607b      	str	r3, [r7, #4]

	//====自分の座標にたどり着くまでループ====
	do {
		//----マップ全域を捜索----
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	73bb      	strb	r3, [r7, #14]
 8011f6e:	e0c0      	b.n	80120f2 <make_smap2+0x1ea>
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 8011f70:	2300      	movs	r3, #0
 8011f72:	73fb      	strb	r3, [r7, #15]
 8011f74:	e0b6      	b.n	80120e4 <make_smap2+0x1dc>
				//----現在最大の歩数を発見したとき----
				if (smap[y][x] == m_step) {									//歩数格納変数m_stepの値が現在最大の歩数のとき
 8011f76:	7bba      	ldrb	r2, [r7, #14]
 8011f78:	7bfb      	ldrb	r3, [r7, #15]
 8011f7a:	496f      	ldr	r1, [pc, #444]	; (8012138 <make_smap2+0x230>)
 8011f7c:	0112      	lsls	r2, r2, #4
 8011f7e:	4413      	add	r3, r2
 8011f80:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8011f84:	4b6f      	ldr	r3, [pc, #444]	; (8012144 <make_smap2+0x23c>)
 8011f86:	881b      	ldrh	r3, [r3, #0]
 8011f88:	429a      	cmp	r2, r3
 8011f8a:	f040 80a8 	bne.w	80120de <make_smap2+0x1d6>
					m_temp = map[y][x];										//map配列からマップデータを取り出す
 8011f8e:	7bba      	ldrb	r2, [r7, #14]
 8011f90:	7bfb      	ldrb	r3, [r7, #15]
 8011f92:	496d      	ldr	r1, [pc, #436]	; (8012148 <make_smap2+0x240>)
 8011f94:	0112      	lsls	r2, r2, #4
 8011f96:	440a      	add	r2, r1
 8011f98:	4413      	add	r3, r2
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	70fb      	strb	r3, [r7, #3]
					//----北壁についての処理----
					if (!(m_temp & 0x08) && y != 0x0f) {					//北壁がなく現在最北端でないとき
 8011f9e:	78fb      	ldrb	r3, [r7, #3]
 8011fa0:	f003 0308 	and.w	r3, r3, #8
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d122      	bne.n	8011fee <make_smap2+0xe6>
 8011fa8:	7bbb      	ldrb	r3, [r7, #14]
 8011faa:	2b0f      	cmp	r3, #15
 8011fac:	d01f      	beq.n	8011fee <make_smap2+0xe6>
						if (smap[y + 1][x] == 0x03e7) {						//北側が未記入なら
 8011fae:	7bbb      	ldrb	r3, [r7, #14]
 8011fb0:	1c5a      	adds	r2, r3, #1
 8011fb2:	7bfb      	ldrb	r3, [r7, #15]
 8011fb4:	4960      	ldr	r1, [pc, #384]	; (8012138 <make_smap2+0x230>)
 8011fb6:	0112      	lsls	r2, r2, #4
 8011fb8:	4413      	add	r3, r2
 8011fba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011fbe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011fc2:	4293      	cmp	r3, r2
 8011fc4:	d113      	bne.n	8011fee <make_smap2+0xe6>
							smap[y + 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8011fc6:	7bba      	ldrb	r2, [r7, #14]
 8011fc8:	7bfb      	ldrb	r3, [r7, #15]
 8011fca:	495b      	ldr	r1, [pc, #364]	; (8012138 <make_smap2+0x230>)
 8011fcc:	0112      	lsls	r2, r2, #4
 8011fce:	4413      	add	r3, r2
 8011fd0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	b299      	uxth	r1, r3
 8011fd8:	7bbb      	ldrb	r3, [r7, #14]
 8011fda:	1c5a      	adds	r2, r3, #1
 8011fdc:	7bfb      	ldrb	r3, [r7, #15]
 8011fde:	4401      	add	r1, r0
 8011fe0:	b288      	uxth	r0, r1
 8011fe2:	4955      	ldr	r1, [pc, #340]	; (8012138 <make_smap2+0x230>)
 8011fe4:	0112      	lsls	r2, r2, #4
 8011fe6:	4413      	add	r3, r2
 8011fe8:	4602      	mov	r2, r0
 8011fea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----東壁についての処理----
					if (!(m_temp & 0x04) && x != 0x0f) {					//東壁がなく現在最東端でないとき
 8011fee:	78fb      	ldrb	r3, [r7, #3]
 8011ff0:	f003 0304 	and.w	r3, r3, #4
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d122      	bne.n	801203e <make_smap2+0x136>
 8011ff8:	7bfb      	ldrb	r3, [r7, #15]
 8011ffa:	2b0f      	cmp	r3, #15
 8011ffc:	d01f      	beq.n	801203e <make_smap2+0x136>
						if (smap[y][x + 1] == 0x03e7) {						//東側が未記入なら
 8011ffe:	7bba      	ldrb	r2, [r7, #14]
 8012000:	7bfb      	ldrb	r3, [r7, #15]
 8012002:	3301      	adds	r3, #1
 8012004:	494c      	ldr	r1, [pc, #304]	; (8012138 <make_smap2+0x230>)
 8012006:	0112      	lsls	r2, r2, #4
 8012008:	4413      	add	r3, r2
 801200a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801200e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8012012:	4293      	cmp	r3, r2
 8012014:	d113      	bne.n	801203e <make_smap2+0x136>
							smap[y][x + 1] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8012016:	7bba      	ldrb	r2, [r7, #14]
 8012018:	7bfb      	ldrb	r3, [r7, #15]
 801201a:	4947      	ldr	r1, [pc, #284]	; (8012138 <make_smap2+0x230>)
 801201c:	0112      	lsls	r2, r2, #4
 801201e:	4413      	add	r3, r2
 8012020:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	b299      	uxth	r1, r3
 8012028:	7bba      	ldrb	r2, [r7, #14]
 801202a:	7bfb      	ldrb	r3, [r7, #15]
 801202c:	3301      	adds	r3, #1
 801202e:	4401      	add	r1, r0
 8012030:	b288      	uxth	r0, r1
 8012032:	4941      	ldr	r1, [pc, #260]	; (8012138 <make_smap2+0x230>)
 8012034:	0112      	lsls	r2, r2, #4
 8012036:	4413      	add	r3, r2
 8012038:	4602      	mov	r2, r0
 801203a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----南壁についての処理----
					if (!(m_temp & 0x02) && y != 0) {						//南壁がなく現在最南端でないとき
 801203e:	78fb      	ldrb	r3, [r7, #3]
 8012040:	f003 0302 	and.w	r3, r3, #2
 8012044:	2b00      	cmp	r3, #0
 8012046:	d122      	bne.n	801208e <make_smap2+0x186>
 8012048:	7bbb      	ldrb	r3, [r7, #14]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d01f      	beq.n	801208e <make_smap2+0x186>
						if (smap[y - 1][x] == 0x03e7) {						//南側が未記入なら
 801204e:	7bbb      	ldrb	r3, [r7, #14]
 8012050:	1e5a      	subs	r2, r3, #1
 8012052:	7bfb      	ldrb	r3, [r7, #15]
 8012054:	4938      	ldr	r1, [pc, #224]	; (8012138 <make_smap2+0x230>)
 8012056:	0112      	lsls	r2, r2, #4
 8012058:	4413      	add	r3, r2
 801205a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801205e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8012062:	4293      	cmp	r3, r2
 8012064:	d113      	bne.n	801208e <make_smap2+0x186>
							smap[y - 1][x] = smap[y][x] + turn;				//曲線分インクリメントした値を次のマスの歩数マップに書き込む
 8012066:	7bba      	ldrb	r2, [r7, #14]
 8012068:	7bfb      	ldrb	r3, [r7, #15]
 801206a:	4933      	ldr	r1, [pc, #204]	; (8012138 <make_smap2+0x230>)
 801206c:	0112      	lsls	r2, r2, #4
 801206e:	4413      	add	r3, r2
 8012070:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	b299      	uxth	r1, r3
 8012078:	7bbb      	ldrb	r3, [r7, #14]
 801207a:	1e5a      	subs	r2, r3, #1
 801207c:	7bfb      	ldrb	r3, [r7, #15]
 801207e:	4401      	add	r1, r0
 8012080:	b288      	uxth	r0, r1
 8012082:	492d      	ldr	r1, [pc, #180]	; (8012138 <make_smap2+0x230>)
 8012084:	0112      	lsls	r2, r2, #4
 8012086:	4413      	add	r3, r2
 8012088:	4602      	mov	r2, r0
 801208a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						}
					}
					//----西壁についての処理----
					if (!(m_temp & 0x01) && x != 0) {						//西壁がなく現在最西端でないとき
 801208e:	78fb      	ldrb	r3, [r7, #3]
 8012090:	f003 0301 	and.w	r3, r3, #1
 8012094:	2b00      	cmp	r3, #0
 8012096:	d122      	bne.n	80120de <make_smap2+0x1d6>
 8012098:	7bfb      	ldrb	r3, [r7, #15]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d01f      	beq.n	80120de <make_smap2+0x1d6>
						if (smap[y][x - 1] == 0x03e7) {						//西側が未記入なら
 801209e:	7bba      	ldrb	r2, [r7, #14]
 80120a0:	7bfb      	ldrb	r3, [r7, #15]
 80120a2:	3b01      	subs	r3, #1
 80120a4:	4924      	ldr	r1, [pc, #144]	; (8012138 <make_smap2+0x230>)
 80120a6:	0112      	lsls	r2, r2, #4
 80120a8:	4413      	add	r3, r2
 80120aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80120ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80120b2:	4293      	cmp	r3, r2
 80120b4:	d113      	bne.n	80120de <make_smap2+0x1d6>
							smap[y][x - 1] = smap[y][x] + turn;				//次の歩数を書き込む
 80120b6:	7bba      	ldrb	r2, [r7, #14]
 80120b8:	7bfb      	ldrb	r3, [r7, #15]
 80120ba:	491f      	ldr	r1, [pc, #124]	; (8012138 <make_smap2+0x230>)
 80120bc:	0112      	lsls	r2, r2, #4
 80120be:	4413      	add	r3, r2
 80120c0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	b299      	uxth	r1, r3
 80120c8:	7bba      	ldrb	r2, [r7, #14]
 80120ca:	7bfb      	ldrb	r3, [r7, #15]
 80120cc:	3b01      	subs	r3, #1
 80120ce:	4401      	add	r1, r0
 80120d0:	b288      	uxth	r0, r1
 80120d2:	4919      	ldr	r1, [pc, #100]	; (8012138 <make_smap2+0x230>)
 80120d4:	0112      	lsls	r2, r2, #4
 80120d6:	4413      	add	r3, r2
 80120d8:	4602      	mov	r2, r0
 80120da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (x = 0; x <= 0x0f; x++) {									//各X座標で実行
 80120de:	7bfb      	ldrb	r3, [r7, #15]
 80120e0:	3301      	adds	r3, #1
 80120e2:	73fb      	strb	r3, [r7, #15]
 80120e4:	7bfb      	ldrb	r3, [r7, #15]
 80120e6:	2b0f      	cmp	r3, #15
 80120e8:	f67f af45 	bls.w	8011f76 <make_smap2+0x6e>
		for (y = 0; y <= 0x0f; y++) {										//各Y座標で実行
 80120ec:	7bbb      	ldrb	r3, [r7, #14]
 80120ee:	3301      	adds	r3, #1
 80120f0:	73bb      	strb	r3, [r7, #14]
 80120f2:	7bbb      	ldrb	r3, [r7, #14]
 80120f4:	2b0f      	cmp	r3, #15
 80120f6:	f67f af3b 	bls.w	8011f70 <make_smap2+0x68>
					}
				}
			}
		}
		//====歩数カウンタのインクリメント====
		m_step++;
 80120fa:	4b12      	ldr	r3, [pc, #72]	; (8012144 <make_smap2+0x23c>)
 80120fc:	881b      	ldrh	r3, [r3, #0]
 80120fe:	3301      	adds	r3, #1
 8012100:	b29a      	uxth	r2, r3
 8012102:	4b10      	ldr	r3, [pc, #64]	; (8012144 <make_smap2+0x23c>)
 8012104:	801a      	strh	r2, [r3, #0]
	} while (smap[mouse.y][mouse.x] == 0x03e7);		//現在座標が未記入ではなくなるまで実行
 8012106:	4b11      	ldr	r3, [pc, #68]	; (801214c <make_smap2+0x244>)
 8012108:	785b      	ldrb	r3, [r3, #1]
 801210a:	b2db      	uxtb	r3, r3
 801210c:	4618      	mov	r0, r3
 801210e:	4b0f      	ldr	r3, [pc, #60]	; (801214c <make_smap2+0x244>)
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	b2db      	uxtb	r3, r3
 8012114:	4619      	mov	r1, r3
 8012116:	4a08      	ldr	r2, [pc, #32]	; (8012138 <make_smap2+0x230>)
 8012118:	0103      	lsls	r3, r0, #4
 801211a:	440b      	add	r3, r1
 801211c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012120:	f240 32e7 	movw	r2, #999	; 0x3e7
 8012124:	4293      	cmp	r3, r2
 8012126:	f43f af20 	beq.w	8011f6a <make_smap2+0x62>
}
 801212a:	bf00      	nop
 801212c:	3714      	adds	r7, #20
 801212e:	46bd      	mov	sp, r7
 8012130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012134:	4770      	bx	lr
 8012136:	bf00      	nop
 8012138:	20000da8 	.word	0x20000da8
 801213c:	20000fc4 	.word	0x20000fc4
 8012140:	20000da4 	.word	0x20000da4
 8012144:	20000386 	.word	0x20000386
 8012148:	200001e4 	.word	0x200001e4
 801214c:	20000c54 	.word	0x20000c54

08012150 <pass_route2>:
//pass_route2
// route配列をpass圧縮する(半区画ベース)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route2(void){
 8012150:	b480      	push	{r7}
 8012152:	b083      	sub	sp, #12
 8012154:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 8012156:	2300      	movs	r3, #0
 8012158:	70fb      	strb	r3, [r7, #3]
	for(i = 0; i < 256; i++){
 801215a:	2300      	movs	r3, #0
 801215c:	607b      	str	r3, [r7, #4]
 801215e:	e007      	b.n	8012170 <pass_route2+0x20>
		pass[i] = 0;								//pass配列の初期化
 8012160:	4a83      	ldr	r2, [pc, #524]	; (8012370 <pass_route2+0x220>)
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	4413      	add	r3, r2
 8012166:	2200      	movs	r2, #0
 8012168:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	3301      	adds	r3, #1
 801216e:	607b      	str	r3, [r7, #4]
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2bff      	cmp	r3, #255	; 0xff
 8012174:	ddf4      	ble.n	8012160 <pass_route2+0x10>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 8012176:	2300      	movs	r3, #0
 8012178:	70bb      	strb	r3, [r7, #2]
	i = 0;
 801217a:	2300      	movs	r3, #0
 801217c:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 801217e:	2300      	movs	r3, #0
 8012180:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 8012182:	e0e8      	b.n	8012356 <pass_route2+0x206>
		s = 0;
 8012184:	2300      	movs	r3, #0
 8012186:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x44){
 8012188:	4a7a      	ldr	r2, [pc, #488]	; (8012374 <pass_route2+0x224>)
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	4413      	add	r3, r2
 801218e:	781b      	ldrb	r3, [r3, #0]
 8012190:	2b44      	cmp	r3, #68	; 0x44
 8012192:	d107      	bne.n	80121a4 <pass_route2+0x54>
			pass[p] = -1;
 8012194:	78bb      	ldrb	r3, [r7, #2]
 8012196:	4a76      	ldr	r2, [pc, #472]	; (8012370 <pass_route2+0x220>)
 8012198:	21ff      	movs	r1, #255	; 0xff
 801219a:	54d1      	strb	r1, [r2, r3]
			i++;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	3301      	adds	r3, #1
 80121a0:	607b      	str	r3, [r7, #4]
 80121a2:	e0d5      	b.n	8012350 <pass_route2+0x200>
		}else if(route[i] == 0x11){
 80121a4:	4a73      	ldr	r2, [pc, #460]	; (8012374 <pass_route2+0x224>)
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	4413      	add	r3, r2
 80121aa:	781b      	ldrb	r3, [r3, #0]
 80121ac:	2b11      	cmp	r3, #17
 80121ae:	d107      	bne.n	80121c0 <pass_route2+0x70>
			pass[p] = -2;
 80121b0:	78bb      	ldrb	r3, [r7, #2]
 80121b2:	4a6f      	ldr	r2, [pc, #444]	; (8012370 <pass_route2+0x220>)
 80121b4:	21fe      	movs	r1, #254	; 0xfe
 80121b6:	54d1      	strb	r1, [r2, r3]
			i++;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	3301      	adds	r3, #1
 80121bc:	607b      	str	r3, [r7, #4]
 80121be:	e0c7      	b.n	8012350 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 80121c0:	4a6c      	ldr	r2, [pc, #432]	; (8012374 <pass_route2+0x224>)
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	4413      	add	r3, r2
 80121c6:	781b      	ldrb	r3, [r3, #0]
 80121c8:	2b77      	cmp	r3, #119	; 0x77
 80121ca:	d115      	bne.n	80121f8 <pass_route2+0xa8>
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	3301      	adds	r3, #1
 80121d0:	4a68      	ldr	r2, [pc, #416]	; (8012374 <pass_route2+0x224>)
 80121d2:	5cd3      	ldrb	r3, [r2, r3]
 80121d4:	2b44      	cmp	r3, #68	; 0x44
 80121d6:	d10f      	bne.n	80121f8 <pass_route2+0xa8>
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	3302      	adds	r3, #2
 80121dc:	4a65      	ldr	r2, [pc, #404]	; (8012374 <pass_route2+0x224>)
 80121de:	5cd3      	ldrb	r3, [r2, r3]
 80121e0:	2b77      	cmp	r3, #119	; 0x77
 80121e2:	d109      	bne.n	80121f8 <pass_route2+0xa8>
			s_flag = 0;
 80121e4:	2300      	movs	r3, #0
 80121e6:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;
 80121e8:	78bb      	ldrb	r3, [r7, #2]
 80121ea:	4a61      	ldr	r2, [pc, #388]	; (8012370 <pass_route2+0x220>)
 80121ec:	21fd      	movs	r1, #253	; 0xfd
 80121ee:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	3303      	adds	r3, #3
 80121f4:	607b      	str	r3, [r7, #4]
 80121f6:	e0ab      	b.n	8012350 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 80121f8:	4a5e      	ldr	r2, [pc, #376]	; (8012374 <pass_route2+0x224>)
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	4413      	add	r3, r2
 80121fe:	781b      	ldrb	r3, [r3, #0]
 8012200:	2b77      	cmp	r3, #119	; 0x77
 8012202:	d115      	bne.n	8012230 <pass_route2+0xe0>
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	3301      	adds	r3, #1
 8012208:	4a5a      	ldr	r2, [pc, #360]	; (8012374 <pass_route2+0x224>)
 801220a:	5cd3      	ldrb	r3, [r2, r3]
 801220c:	2b11      	cmp	r3, #17
 801220e:	d10f      	bne.n	8012230 <pass_route2+0xe0>
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	3302      	adds	r3, #2
 8012214:	4a57      	ldr	r2, [pc, #348]	; (8012374 <pass_route2+0x224>)
 8012216:	5cd3      	ldrb	r3, [r2, r3]
 8012218:	2b77      	cmp	r3, #119	; 0x77
 801221a:	d109      	bne.n	8012230 <pass_route2+0xe0>
			s_flag = 0;
 801221c:	2300      	movs	r3, #0
 801221e:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;
 8012220:	78bb      	ldrb	r3, [r7, #2]
 8012222:	4a53      	ldr	r2, [pc, #332]	; (8012370 <pass_route2+0x220>)
 8012224:	21fc      	movs	r1, #252	; 0xfc
 8012226:	54d1      	strb	r1, [r2, r3]
			i = i + 3;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	3303      	adds	r3, #3
 801222c:	607b      	str	r3, [r7, #4]
 801222e:	e08f      	b.n	8012350 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 8012230:	4a50      	ldr	r2, [pc, #320]	; (8012374 <pass_route2+0x224>)
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	4413      	add	r3, r2
 8012236:	781b      	ldrb	r3, [r3, #0]
 8012238:	2b77      	cmp	r3, #119	; 0x77
 801223a:	d11b      	bne.n	8012274 <pass_route2+0x124>
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	3301      	adds	r3, #1
 8012240:	4a4c      	ldr	r2, [pc, #304]	; (8012374 <pass_route2+0x224>)
 8012242:	5cd3      	ldrb	r3, [r2, r3]
 8012244:	2b44      	cmp	r3, #68	; 0x44
 8012246:	d115      	bne.n	8012274 <pass_route2+0x124>
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	3302      	adds	r3, #2
 801224c:	4a49      	ldr	r2, [pc, #292]	; (8012374 <pass_route2+0x224>)
 801224e:	5cd3      	ldrb	r3, [r2, r3]
 8012250:	2b44      	cmp	r3, #68	; 0x44
 8012252:	d10f      	bne.n	8012274 <pass_route2+0x124>
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	3303      	adds	r3, #3
 8012258:	4a46      	ldr	r2, [pc, #280]	; (8012374 <pass_route2+0x224>)
 801225a:	5cd3      	ldrb	r3, [r2, r3]
 801225c:	2b77      	cmp	r3, #119	; 0x77
 801225e:	d109      	bne.n	8012274 <pass_route2+0x124>
			s_flag = 0;
 8012260:	2300      	movs	r3, #0
 8012262:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;
 8012264:	78bb      	ldrb	r3, [r7, #2]
 8012266:	4a42      	ldr	r2, [pc, #264]	; (8012370 <pass_route2+0x220>)
 8012268:	21fb      	movs	r1, #251	; 0xfb
 801226a:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	3304      	adds	r3, #4
 8012270:	607b      	str	r3, [r7, #4]
 8012272:	e06d      	b.n	8012350 <pass_route2+0x200>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 8012274:	4a3f      	ldr	r2, [pc, #252]	; (8012374 <pass_route2+0x224>)
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	4413      	add	r3, r2
 801227a:	781b      	ldrb	r3, [r3, #0]
 801227c:	2b77      	cmp	r3, #119	; 0x77
 801227e:	d11b      	bne.n	80122b8 <pass_route2+0x168>
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	3301      	adds	r3, #1
 8012284:	4a3b      	ldr	r2, [pc, #236]	; (8012374 <pass_route2+0x224>)
 8012286:	5cd3      	ldrb	r3, [r2, r3]
 8012288:	2b11      	cmp	r3, #17
 801228a:	d115      	bne.n	80122b8 <pass_route2+0x168>
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	3302      	adds	r3, #2
 8012290:	4a38      	ldr	r2, [pc, #224]	; (8012374 <pass_route2+0x224>)
 8012292:	5cd3      	ldrb	r3, [r2, r3]
 8012294:	2b11      	cmp	r3, #17
 8012296:	d10f      	bne.n	80122b8 <pass_route2+0x168>
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	3303      	adds	r3, #3
 801229c:	4a35      	ldr	r2, [pc, #212]	; (8012374 <pass_route2+0x224>)
 801229e:	5cd3      	ldrb	r3, [r2, r3]
 80122a0:	2b77      	cmp	r3, #119	; 0x77
 80122a2:	d109      	bne.n	80122b8 <pass_route2+0x168>
			s_flag = 0;
 80122a4:	2300      	movs	r3, #0
 80122a6:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;
 80122a8:	78bb      	ldrb	r3, [r7, #2]
 80122aa:	4a31      	ldr	r2, [pc, #196]	; (8012370 <pass_route2+0x220>)
 80122ac:	21fa      	movs	r1, #250	; 0xfa
 80122ae:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	3304      	adds	r3, #4
 80122b4:	607b      	str	r3, [r7, #4]
 80122b6:	e04b      	b.n	8012350 <pass_route2+0x200>
		}else if(route[i] == 0xff){
 80122b8:	4a2e      	ldr	r2, [pc, #184]	; (8012374 <pass_route2+0x224>)
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	4413      	add	r3, r2
 80122be:	781b      	ldrb	r3, [r3, #0]
 80122c0:	2bff      	cmp	r3, #255	; 0xff
 80122c2:	d107      	bne.n	80122d4 <pass_route2+0x184>
			pass[p] = -114;
 80122c4:	78bb      	ldrb	r3, [r7, #2]
 80122c6:	4a2a      	ldr	r2, [pc, #168]	; (8012370 <pass_route2+0x220>)
 80122c8:	218e      	movs	r1, #142	; 0x8e
 80122ca:	54d1      	strb	r1, [r2, r3]
			i++;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	3301      	adds	r3, #1
 80122d0:	607b      	str	r3, [r7, #4]
 80122d2:	e03d      	b.n	8012350 <pass_route2+0x200>
		}else if(route[i] == 0x77){
 80122d4:	4a27      	ldr	r2, [pc, #156]	; (8012374 <pass_route2+0x224>)
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	4413      	add	r3, r2
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	2b77      	cmp	r3, #119	; 0x77
 80122de:	d137      	bne.n	8012350 <pass_route2+0x200>
			if(s_flag){
 80122e0:	78fb      	ldrb	r3, [r7, #3]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d012      	beq.n	801230c <pass_route2+0x1bc>
				pass[p-1]++;
 80122e6:	78bb      	ldrb	r3, [r7, #2]
 80122e8:	3b01      	subs	r3, #1
 80122ea:	4a21      	ldr	r2, [pc, #132]	; (8012370 <pass_route2+0x220>)
 80122ec:	56d2      	ldrsb	r2, [r2, r3]
 80122ee:	b2d2      	uxtb	r2, r2
 80122f0:	3201      	adds	r2, #1
 80122f2:	b2d2      	uxtb	r2, r2
 80122f4:	b251      	sxtb	r1, r2
 80122f6:	4a1e      	ldr	r2, [pc, #120]	; (8012370 <pass_route2+0x220>)
 80122f8:	54d1      	strb	r1, [r2, r3]
				p--;
 80122fa:	78bb      	ldrb	r3, [r7, #2]
 80122fc:	3b01      	subs	r3, #1
 80122fe:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 8012300:	2300      	movs	r3, #0
 8012302:	70fb      	strb	r3, [r7, #3]
				i++;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	3301      	adds	r3, #1
 8012308:	607b      	str	r3, [r7, #4]
 801230a:	e021      	b.n	8012350 <pass_route2+0x200>
			}else{
				s++;
 801230c:	787b      	ldrb	r3, [r7, #1]
 801230e:	3301      	adds	r3, #1
 8012310:	707b      	strb	r3, [r7, #1]
				pass[p] = s;
 8012312:	78bb      	ldrb	r3, [r7, #2]
 8012314:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8012318:	4a15      	ldr	r2, [pc, #84]	; (8012370 <pass_route2+0x220>)
 801231a:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 801231c:	e00c      	b.n	8012338 <pass_route2+0x1e8>
					s_flag = 1;
 801231e:	2301      	movs	r3, #1
 8012320:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;
 8012322:	78bb      	ldrb	r3, [r7, #2]
 8012324:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8012328:	4a11      	ldr	r2, [pc, #68]	; (8012370 <pass_route2+0x220>)
 801232a:	54d1      	strb	r1, [r2, r3]
					i++;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	3301      	adds	r3, #1
 8012330:	607b      	str	r3, [r7, #4]
					s++;
 8012332:	787b      	ldrb	r3, [r7, #1]
 8012334:	3301      	adds	r3, #1
 8012336:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	3301      	adds	r3, #1
 801233c:	4a0d      	ldr	r2, [pc, #52]	; (8012374 <pass_route2+0x224>)
 801233e:	5cd3      	ldrb	r3, [r2, r3]
 8012340:	2b77      	cmp	r3, #119	; 0x77
 8012342:	d0ec      	beq.n	801231e <pass_route2+0x1ce>
				}
				if(!s_flag){
 8012344:	78fb      	ldrb	r3, [r7, #3]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d102      	bne.n	8012350 <pass_route2+0x200>
					i++;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	3301      	adds	r3, #1
 801234e:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 8012350:	78bb      	ldrb	r3, [r7, #2]
 8012352:	3301      	adds	r3, #1
 8012354:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	3b01      	subs	r3, #1
 801235a:	4a06      	ldr	r2, [pc, #24]	; (8012374 <pass_route2+0x224>)
 801235c:	5cd3      	ldrb	r3, [r2, r3]
 801235e:	2bff      	cmp	r3, #255	; 0xff
 8012360:	f47f af10 	bne.w	8012184 <pass_route2+0x34>
	}
}
 8012364:	bf00      	nop
 8012366:	370c      	adds	r7, #12
 8012368:	46bd      	mov	sp, r7
 801236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236e:	4770      	bx	lr
 8012370:	20000388 	.word	0x20000388
 8012374:	20000c9c 	.word	0x20000c9c

08012378 <pass_route3>:
//pass_route3
// route配列をpass圧縮する(半区画ベース+斜めあり)
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void pass_route3(void){
 8012378:	b480      	push	{r7}
 801237a:	b083      	sub	sp, #12
 801237c:	af00      	add	r7, sp, #0
	int i;
	uint8_t s_flag = 0;
 801237e:	2300      	movs	r3, #0
 8012380:	70fb      	strb	r3, [r7, #3]
	v_flag = 0;										//a斜めフラグの初期化
 8012382:	4b90      	ldr	r3, [pc, #576]	; (80125c4 <pass_route3+0x24c>)
 8012384:	2200      	movs	r2, #0
 8012386:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 8012388:	2300      	movs	r3, #0
 801238a:	607b      	str	r3, [r7, #4]
 801238c:	e007      	b.n	801239e <pass_route3+0x26>
		pass[i] = 0;								//pass配列の初期化
 801238e:	4a8e      	ldr	r2, [pc, #568]	; (80125c8 <pass_route3+0x250>)
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	4413      	add	r3, r2
 8012394:	2200      	movs	r2, #0
 8012396:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++){
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	3301      	adds	r3, #1
 801239c:	607b      	str	r3, [r7, #4]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	2bff      	cmp	r3, #255	; 0xff
 80123a2:	ddf4      	ble.n	801238e <pass_route3+0x16>
	}
	uint8_t p = 0;									//pass配列の配列番号用変数
 80123a4:	2300      	movs	r3, #0
 80123a6:	70bb      	strb	r3, [r7, #2]
	i = 0;
 80123a8:	2300      	movs	r3, #0
 80123aa:	607b      	str	r3, [r7, #4]
	uint8_t s = 0;									//a直線数カウント用変数
 80123ac:	2300      	movs	r3, #0
 80123ae:	707b      	strb	r3, [r7, #1]
	while(route[i-1] != 0xff){
 80123b0:	e2f1      	b.n	8012996 <pass_route3+0x61e>
		s = 0;
 80123b2:	2300      	movs	r3, #0
 80123b4:	707b      	strb	r3, [r7, #1]
		if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x77){
 80123b6:	4a85      	ldr	r2, [pc, #532]	; (80125cc <pass_route3+0x254>)
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	4413      	add	r3, r2
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	2b77      	cmp	r3, #119	; 0x77
 80123c0:	d11b      	bne.n	80123fa <pass_route3+0x82>
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	3301      	adds	r3, #1
 80123c6:	4a81      	ldr	r2, [pc, #516]	; (80125cc <pass_route3+0x254>)
 80123c8:	5cd3      	ldrb	r3, [r2, r3]
 80123ca:	2b44      	cmp	r3, #68	; 0x44
 80123cc:	d115      	bne.n	80123fa <pass_route3+0x82>
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	3302      	adds	r3, #2
 80123d2:	4a7e      	ldr	r2, [pc, #504]	; (80125cc <pass_route3+0x254>)
 80123d4:	5cd3      	ldrb	r3, [r2, r3]
 80123d6:	2b77      	cmp	r3, #119	; 0x77
 80123d8:	d10f      	bne.n	80123fa <pass_route3+0x82>
			s_flag = 0;
 80123da:	2300      	movs	r3, #0
 80123dc:	70fb      	strb	r3, [r7, #3]
			pass[p] = -3;							//a大回り右90
 80123de:	78bb      	ldrb	r3, [r7, #2]
 80123e0:	4a79      	ldr	r2, [pc, #484]	; (80125c8 <pass_route3+0x250>)
 80123e2:	21fd      	movs	r1, #253	; 0xfd
 80123e4:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d102      	bne.n	80123f2 <pass_route3+0x7a>
				start_flag = 2;
 80123ec:	4b78      	ldr	r3, [pc, #480]	; (80125d0 <pass_route3+0x258>)
 80123ee:	2202      	movs	r2, #2
 80123f0:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	3303      	adds	r3, #3
 80123f6:	607b      	str	r3, [r7, #4]
 80123f8:	e2ca      	b.n	8012990 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x77){
 80123fa:	4a74      	ldr	r2, [pc, #464]	; (80125cc <pass_route3+0x254>)
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	4413      	add	r3, r2
 8012400:	781b      	ldrb	r3, [r3, #0]
 8012402:	2b77      	cmp	r3, #119	; 0x77
 8012404:	d11b      	bne.n	801243e <pass_route3+0xc6>
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	3301      	adds	r3, #1
 801240a:	4a70      	ldr	r2, [pc, #448]	; (80125cc <pass_route3+0x254>)
 801240c:	5cd3      	ldrb	r3, [r2, r3]
 801240e:	2b11      	cmp	r3, #17
 8012410:	d115      	bne.n	801243e <pass_route3+0xc6>
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	3302      	adds	r3, #2
 8012416:	4a6d      	ldr	r2, [pc, #436]	; (80125cc <pass_route3+0x254>)
 8012418:	5cd3      	ldrb	r3, [r2, r3]
 801241a:	2b77      	cmp	r3, #119	; 0x77
 801241c:	d10f      	bne.n	801243e <pass_route3+0xc6>
			s_flag = 0;
 801241e:	2300      	movs	r3, #0
 8012420:	70fb      	strb	r3, [r7, #3]
			pass[p] = -4;							//a大回り左90
 8012422:	78bb      	ldrb	r3, [r7, #2]
 8012424:	4a68      	ldr	r2, [pc, #416]	; (80125c8 <pass_route3+0x250>)
 8012426:	21fc      	movs	r1, #252	; 0xfc
 8012428:	54d1      	strb	r1, [r2, r3]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d102      	bne.n	8012436 <pass_route3+0xbe>
				start_flag = 2;
 8012430:	4b67      	ldr	r3, [pc, #412]	; (80125d0 <pass_route3+0x258>)
 8012432:	2202      	movs	r2, #2
 8012434:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	3303      	adds	r3, #3
 801243a:	607b      	str	r3, [r7, #4]
 801243c:	e2a8      	b.n	8012990 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x77){
 801243e:	4a63      	ldr	r2, [pc, #396]	; (80125cc <pass_route3+0x254>)
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	4413      	add	r3, r2
 8012444:	781b      	ldrb	r3, [r3, #0]
 8012446:	2b77      	cmp	r3, #119	; 0x77
 8012448:	d11b      	bne.n	8012482 <pass_route3+0x10a>
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	3301      	adds	r3, #1
 801244e:	4a5f      	ldr	r2, [pc, #380]	; (80125cc <pass_route3+0x254>)
 8012450:	5cd3      	ldrb	r3, [r2, r3]
 8012452:	2b44      	cmp	r3, #68	; 0x44
 8012454:	d115      	bne.n	8012482 <pass_route3+0x10a>
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	3302      	adds	r3, #2
 801245a:	4a5c      	ldr	r2, [pc, #368]	; (80125cc <pass_route3+0x254>)
 801245c:	5cd3      	ldrb	r3, [r2, r3]
 801245e:	2b44      	cmp	r3, #68	; 0x44
 8012460:	d10f      	bne.n	8012482 <pass_route3+0x10a>
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	3303      	adds	r3, #3
 8012466:	4a59      	ldr	r2, [pc, #356]	; (80125cc <pass_route3+0x254>)
 8012468:	5cd3      	ldrb	r3, [r2, r3]
 801246a:	2b77      	cmp	r3, #119	; 0x77
 801246c:	d109      	bne.n	8012482 <pass_route3+0x10a>
			s_flag = 0;
 801246e:	2300      	movs	r3, #0
 8012470:	70fb      	strb	r3, [r7, #3]
			pass[p] = -5;							//a大回り右180
 8012472:	78bb      	ldrb	r3, [r7, #2]
 8012474:	4a54      	ldr	r2, [pc, #336]	; (80125c8 <pass_route3+0x250>)
 8012476:	21fb      	movs	r1, #251	; 0xfb
 8012478:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	3304      	adds	r3, #4
 801247e:	607b      	str	r3, [r7, #4]
 8012480:	e286      	b.n	8012990 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x77){
 8012482:	4a52      	ldr	r2, [pc, #328]	; (80125cc <pass_route3+0x254>)
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	4413      	add	r3, r2
 8012488:	781b      	ldrb	r3, [r3, #0]
 801248a:	2b77      	cmp	r3, #119	; 0x77
 801248c:	d11b      	bne.n	80124c6 <pass_route3+0x14e>
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	3301      	adds	r3, #1
 8012492:	4a4e      	ldr	r2, [pc, #312]	; (80125cc <pass_route3+0x254>)
 8012494:	5cd3      	ldrb	r3, [r2, r3]
 8012496:	2b11      	cmp	r3, #17
 8012498:	d115      	bne.n	80124c6 <pass_route3+0x14e>
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	3302      	adds	r3, #2
 801249e:	4a4b      	ldr	r2, [pc, #300]	; (80125cc <pass_route3+0x254>)
 80124a0:	5cd3      	ldrb	r3, [r2, r3]
 80124a2:	2b11      	cmp	r3, #17
 80124a4:	d10f      	bne.n	80124c6 <pass_route3+0x14e>
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	3303      	adds	r3, #3
 80124aa:	4a48      	ldr	r2, [pc, #288]	; (80125cc <pass_route3+0x254>)
 80124ac:	5cd3      	ldrb	r3, [r2, r3]
 80124ae:	2b77      	cmp	r3, #119	; 0x77
 80124b0:	d109      	bne.n	80124c6 <pass_route3+0x14e>
			s_flag = 0;
 80124b2:	2300      	movs	r3, #0
 80124b4:	70fb      	strb	r3, [r7, #3]
			pass[p] = -6;							//a大回り左180
 80124b6:	78bb      	ldrb	r3, [r7, #2]
 80124b8:	4a43      	ldr	r2, [pc, #268]	; (80125c8 <pass_route3+0x250>)
 80124ba:	21fa      	movs	r1, #250	; 0xfa
 80124bc:	54d1      	strb	r1, [r2, r3]
			i = i + 4;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	3304      	adds	r3, #4
 80124c2:	607b      	str	r3, [r7, #4]
 80124c4:	e264      	b.n	8012990 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x11){
 80124c6:	4a41      	ldr	r2, [pc, #260]	; (80125cc <pass_route3+0x254>)
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	4413      	add	r3, r2
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	2b77      	cmp	r3, #119	; 0x77
 80124d0:	d11e      	bne.n	8012510 <pass_route3+0x198>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	3301      	adds	r3, #1
 80124d6:	4a3d      	ldr	r2, [pc, #244]	; (80125cc <pass_route3+0x254>)
 80124d8:	5cd3      	ldrb	r3, [r2, r3]
 80124da:	2b44      	cmp	r3, #68	; 0x44
 80124dc:	d118      	bne.n	8012510 <pass_route3+0x198>
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	3302      	adds	r3, #2
 80124e2:	4a3a      	ldr	r2, [pc, #232]	; (80125cc <pass_route3+0x254>)
 80124e4:	5cd3      	ldrb	r3, [r2, r3]
 80124e6:	2b11      	cmp	r3, #17
 80124e8:	d112      	bne.n	8012510 <pass_route3+0x198>
			s_flag = 0;
 80124ea:	2300      	movs	r3, #0
 80124ec:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45in
 80124ee:	78bb      	ldrb	r3, [r7, #2]
 80124f0:	4a35      	ldr	r2, [pc, #212]	; (80125c8 <pass_route3+0x250>)
 80124f2:	21f9      	movs	r1, #249	; 0xf9
 80124f4:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 80124f6:	4b33      	ldr	r3, [pc, #204]	; (80125c4 <pass_route3+0x24c>)
 80124f8:	2201      	movs	r2, #1
 80124fa:	701a      	strb	r2, [r3, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d102      	bne.n	8012508 <pass_route3+0x190>
				start_flag = 2;
 8012502:	4b33      	ldr	r3, [pc, #204]	; (80125d0 <pass_route3+0x258>)
 8012504:	2202      	movs	r2, #2
 8012506:	701a      	strb	r2, [r3, #0]
			}
			i = i + 2;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	3302      	adds	r3, #2
 801250c:	607b      	str	r3, [r7, #4]
 801250e:	e23f      	b.n	8012990 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x44 && route[i+1] == 0x77){
 8012510:	4b2c      	ldr	r3, [pc, #176]	; (80125c4 <pass_route3+0x24c>)
 8012512:	781b      	ldrb	r3, [r3, #0]
 8012514:	2b01      	cmp	r3, #1
 8012516:	d118      	bne.n	801254a <pass_route3+0x1d2>
 8012518:	4a2c      	ldr	r2, [pc, #176]	; (80125cc <pass_route3+0x254>)
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	4413      	add	r3, r2
 801251e:	781b      	ldrb	r3, [r3, #0]
 8012520:	2b44      	cmp	r3, #68	; 0x44
 8012522:	d112      	bne.n	801254a <pass_route3+0x1d2>
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	3301      	adds	r3, #1
 8012528:	4a28      	ldr	r2, [pc, #160]	; (80125cc <pass_route3+0x254>)
 801252a:	5cd3      	ldrb	r3, [r2, r3]
 801252c:	2b77      	cmp	r3, #119	; 0x77
 801252e:	d10c      	bne.n	801254a <pass_route3+0x1d2>
			s_flag = 0;
 8012530:	2300      	movs	r3, #0
 8012532:	70fb      	strb	r3, [r7, #3]
			pass[p] = -7;							//a斜め右V45out
 8012534:	78bb      	ldrb	r3, [r7, #2]
 8012536:	4a24      	ldr	r2, [pc, #144]	; (80125c8 <pass_route3+0x250>)
 8012538:	21f9      	movs	r1, #249	; 0xf9
 801253a:	54d1      	strb	r1, [r2, r3]
			v_flag = 0;
 801253c:	4b21      	ldr	r3, [pc, #132]	; (80125c4 <pass_route3+0x24c>)
 801253e:	2200      	movs	r2, #0
 8012540:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	3302      	adds	r3, #2
 8012546:	607b      	str	r3, [r7, #4]
 8012548:	e222      	b.n	8012990 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x44){
 801254a:	4a20      	ldr	r2, [pc, #128]	; (80125cc <pass_route3+0x254>)
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	4413      	add	r3, r2
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	2b77      	cmp	r3, #119	; 0x77
 8012554:	d118      	bne.n	8012588 <pass_route3+0x210>
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	3301      	adds	r3, #1
 801255a:	4a1c      	ldr	r2, [pc, #112]	; (80125cc <pass_route3+0x254>)
 801255c:	5cd3      	ldrb	r3, [r2, r3]
 801255e:	2b11      	cmp	r3, #17
 8012560:	d112      	bne.n	8012588 <pass_route3+0x210>
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	3302      	adds	r3, #2
 8012566:	4a19      	ldr	r2, [pc, #100]	; (80125cc <pass_route3+0x254>)
 8012568:	5cd3      	ldrb	r3, [r2, r3]
 801256a:	2b44      	cmp	r3, #68	; 0x44
 801256c:	d10c      	bne.n	8012588 <pass_route3+0x210>
			s_flag = 0;
 801256e:	2300      	movs	r3, #0
 8012570:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45in
 8012572:	78bb      	ldrb	r3, [r7, #2]
 8012574:	4a14      	ldr	r2, [pc, #80]	; (80125c8 <pass_route3+0x250>)
 8012576:	21f8      	movs	r1, #248	; 0xf8
 8012578:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 801257a:	4b12      	ldr	r3, [pc, #72]	; (80125c4 <pass_route3+0x24c>)
 801257c:	2201      	movs	r2, #1
 801257e:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	3302      	adds	r3, #2
 8012584:	607b      	str	r3, [r7, #4]
 8012586:	e203      	b.n	8012990 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x11 && route[i+1] == 0x77){
 8012588:	4b0e      	ldr	r3, [pc, #56]	; (80125c4 <pass_route3+0x24c>)
 801258a:	781b      	ldrb	r3, [r3, #0]
 801258c:	2b01      	cmp	r3, #1
 801258e:	d121      	bne.n	80125d4 <pass_route3+0x25c>
 8012590:	4a0e      	ldr	r2, [pc, #56]	; (80125cc <pass_route3+0x254>)
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	4413      	add	r3, r2
 8012596:	781b      	ldrb	r3, [r3, #0]
 8012598:	2b11      	cmp	r3, #17
 801259a:	d11b      	bne.n	80125d4 <pass_route3+0x25c>
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	3301      	adds	r3, #1
 80125a0:	4a0a      	ldr	r2, [pc, #40]	; (80125cc <pass_route3+0x254>)
 80125a2:	5cd3      	ldrb	r3, [r2, r3]
 80125a4:	2b77      	cmp	r3, #119	; 0x77
 80125a6:	d115      	bne.n	80125d4 <pass_route3+0x25c>
			s_flag = 0;
 80125a8:	2300      	movs	r3, #0
 80125aa:	70fb      	strb	r3, [r7, #3]
			pass[p] = -8;							//a斜め左V45out
 80125ac:	78bb      	ldrb	r3, [r7, #2]
 80125ae:	4a06      	ldr	r2, [pc, #24]	; (80125c8 <pass_route3+0x250>)
 80125b0:	21f8      	movs	r1, #248	; 0xf8
 80125b2:	54d1      	strb	r1, [r2, r3]
			v_flag = 0;
 80125b4:	4b03      	ldr	r3, [pc, #12]	; (80125c4 <pass_route3+0x24c>)
 80125b6:	2200      	movs	r2, #0
 80125b8:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	3302      	adds	r3, #2
 80125be:	607b      	str	r3, [r7, #4]
 80125c0:	e1e6      	b.n	8012990 <pass_route3+0x618>
 80125c2:	bf00      	nop
 80125c4:	20000b28 	.word	0x20000b28
 80125c8:	20000388 	.word	0x20000388
 80125cc:	20000c9c 	.word	0x20000c9c
 80125d0:	200012ec 	.word	0x200012ec
		}else if(v_flag == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x11){
 80125d4:	4ba0      	ldr	r3, [pc, #640]	; (8012858 <pass_route3+0x4e0>)
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	2b01      	cmp	r3, #1
 80125da:	d11e      	bne.n	801261a <pass_route3+0x2a2>
 80125dc:	4a9f      	ldr	r2, [pc, #636]	; (801285c <pass_route3+0x4e4>)
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	4413      	add	r3, r2
 80125e2:	781b      	ldrb	r3, [r3, #0]
 80125e4:	2b44      	cmp	r3, #68	; 0x44
 80125e6:	d118      	bne.n	801261a <pass_route3+0x2a2>
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	3301      	adds	r3, #1
 80125ec:	4a9b      	ldr	r2, [pc, #620]	; (801285c <pass_route3+0x4e4>)
 80125ee:	5cd3      	ldrb	r3, [r2, r3]
 80125f0:	2b44      	cmp	r3, #68	; 0x44
 80125f2:	d112      	bne.n	801261a <pass_route3+0x2a2>
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	3302      	adds	r3, #2
 80125f8:	4a98      	ldr	r2, [pc, #608]	; (801285c <pass_route3+0x4e4>)
 80125fa:	5cd3      	ldrb	r3, [r2, r3]
 80125fc:	2b11      	cmp	r3, #17
 80125fe:	d10c      	bne.n	801261a <pass_route3+0x2a2>
			s_flag = 0;
 8012600:	2300      	movs	r3, #0
 8012602:	70fb      	strb	r3, [r7, #3]
			pass[p] = -9;							//a斜め右V90
 8012604:	78bb      	ldrb	r3, [r7, #2]
 8012606:	4a96      	ldr	r2, [pc, #600]	; (8012860 <pass_route3+0x4e8>)
 8012608:	21f7      	movs	r1, #247	; 0xf7
 801260a:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 801260c:	4b92      	ldr	r3, [pc, #584]	; (8012858 <pass_route3+0x4e0>)
 801260e:	2201      	movs	r2, #1
 8012610:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	3302      	adds	r3, #2
 8012616:	607b      	str	r3, [r7, #4]
 8012618:	e1ba      	b.n	8012990 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x44){
 801261a:	4b8f      	ldr	r3, [pc, #572]	; (8012858 <pass_route3+0x4e0>)
 801261c:	781b      	ldrb	r3, [r3, #0]
 801261e:	2b01      	cmp	r3, #1
 8012620:	d11e      	bne.n	8012660 <pass_route3+0x2e8>
 8012622:	4a8e      	ldr	r2, [pc, #568]	; (801285c <pass_route3+0x4e4>)
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	4413      	add	r3, r2
 8012628:	781b      	ldrb	r3, [r3, #0]
 801262a:	2b11      	cmp	r3, #17
 801262c:	d118      	bne.n	8012660 <pass_route3+0x2e8>
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	3301      	adds	r3, #1
 8012632:	4a8a      	ldr	r2, [pc, #552]	; (801285c <pass_route3+0x4e4>)
 8012634:	5cd3      	ldrb	r3, [r2, r3]
 8012636:	2b11      	cmp	r3, #17
 8012638:	d112      	bne.n	8012660 <pass_route3+0x2e8>
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	3302      	adds	r3, #2
 801263e:	4a87      	ldr	r2, [pc, #540]	; (801285c <pass_route3+0x4e4>)
 8012640:	5cd3      	ldrb	r3, [r2, r3]
 8012642:	2b44      	cmp	r3, #68	; 0x44
 8012644:	d10c      	bne.n	8012660 <pass_route3+0x2e8>
			s_flag = 0;
 8012646:	2300      	movs	r3, #0
 8012648:	70fb      	strb	r3, [r7, #3]
			pass[p] = -10;							//a斜め左V90
 801264a:	78bb      	ldrb	r3, [r7, #2]
 801264c:	4a84      	ldr	r2, [pc, #528]	; (8012860 <pass_route3+0x4e8>)
 801264e:	21f6      	movs	r1, #246	; 0xf6
 8012650:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 8012652:	4b81      	ldr	r3, [pc, #516]	; (8012858 <pass_route3+0x4e0>)
 8012654:	2201      	movs	r2, #1
 8012656:	701a      	strb	r2, [r3, #0]
			i = i + 2;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	3302      	adds	r3, #2
 801265c:	607b      	str	r3, [r7, #4]
 801265e:	e197      	b.n	8012990 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x44 && route[i+2] == 0x44 && route[i+3] == 0x11){
 8012660:	4a7e      	ldr	r2, [pc, #504]	; (801285c <pass_route3+0x4e4>)
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	4413      	add	r3, r2
 8012666:	781b      	ldrb	r3, [r3, #0]
 8012668:	2b77      	cmp	r3, #119	; 0x77
 801266a:	d124      	bne.n	80126b6 <pass_route3+0x33e>
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	3301      	adds	r3, #1
 8012670:	4a7a      	ldr	r2, [pc, #488]	; (801285c <pass_route3+0x4e4>)
 8012672:	5cd3      	ldrb	r3, [r2, r3]
 8012674:	2b44      	cmp	r3, #68	; 0x44
 8012676:	d11e      	bne.n	80126b6 <pass_route3+0x33e>
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	3302      	adds	r3, #2
 801267c:	4a77      	ldr	r2, [pc, #476]	; (801285c <pass_route3+0x4e4>)
 801267e:	5cd3      	ldrb	r3, [r2, r3]
 8012680:	2b44      	cmp	r3, #68	; 0x44
 8012682:	d118      	bne.n	80126b6 <pass_route3+0x33e>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	3303      	adds	r3, #3
 8012688:	4a74      	ldr	r2, [pc, #464]	; (801285c <pass_route3+0x4e4>)
 801268a:	5cd3      	ldrb	r3, [r2, r3]
 801268c:	2b11      	cmp	r3, #17
 801268e:	d112      	bne.n	80126b6 <pass_route3+0x33e>
			s_flag = 0;
 8012690:	2300      	movs	r3, #0
 8012692:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135in
 8012694:	78bb      	ldrb	r3, [r7, #2]
 8012696:	4a72      	ldr	r2, [pc, #456]	; (8012860 <pass_route3+0x4e8>)
 8012698:	21f5      	movs	r1, #245	; 0xf5
 801269a:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 801269c:	4b6e      	ldr	r3, [pc, #440]	; (8012858 <pass_route3+0x4e0>)
 801269e:	2201      	movs	r2, #1
 80126a0:	701a      	strb	r2, [r3, #0]
			if(i == 0){								//aスタート時の走行モード切り替えフラグ
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d102      	bne.n	80126ae <pass_route3+0x336>
				start_flag = 2;
 80126a8:	4b6e      	ldr	r3, [pc, #440]	; (8012864 <pass_route3+0x4ec>)
 80126aa:	2202      	movs	r2, #2
 80126ac:	701a      	strb	r2, [r3, #0]
			}
			i = i + 3;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	3303      	adds	r3, #3
 80126b2:	607b      	str	r3, [r7, #4]
 80126b4:	e16c      	b.n	8012990 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x44 && route[i+1] == 0x44 && route[i+2] == 0x77){
 80126b6:	4b68      	ldr	r3, [pc, #416]	; (8012858 <pass_route3+0x4e0>)
 80126b8:	781b      	ldrb	r3, [r3, #0]
 80126ba:	2b01      	cmp	r3, #1
 80126bc:	d11e      	bne.n	80126fc <pass_route3+0x384>
 80126be:	4a67      	ldr	r2, [pc, #412]	; (801285c <pass_route3+0x4e4>)
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	4413      	add	r3, r2
 80126c4:	781b      	ldrb	r3, [r3, #0]
 80126c6:	2b44      	cmp	r3, #68	; 0x44
 80126c8:	d118      	bne.n	80126fc <pass_route3+0x384>
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	3301      	adds	r3, #1
 80126ce:	4a63      	ldr	r2, [pc, #396]	; (801285c <pass_route3+0x4e4>)
 80126d0:	5cd3      	ldrb	r3, [r2, r3]
 80126d2:	2b44      	cmp	r3, #68	; 0x44
 80126d4:	d112      	bne.n	80126fc <pass_route3+0x384>
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	3302      	adds	r3, #2
 80126da:	4a60      	ldr	r2, [pc, #384]	; (801285c <pass_route3+0x4e4>)
 80126dc:	5cd3      	ldrb	r3, [r2, r3]
 80126de:	2b77      	cmp	r3, #119	; 0x77
 80126e0:	d10c      	bne.n	80126fc <pass_route3+0x384>
			s_flag = 0;
 80126e2:	2300      	movs	r3, #0
 80126e4:	70fb      	strb	r3, [r7, #3]
			pass[p] = -11;							//a斜め右V135out
 80126e6:	78bb      	ldrb	r3, [r7, #2]
 80126e8:	4a5d      	ldr	r2, [pc, #372]	; (8012860 <pass_route3+0x4e8>)
 80126ea:	21f5      	movs	r1, #245	; 0xf5
 80126ec:	54d1      	strb	r1, [r2, r3]
			v_flag = 0;
 80126ee:	4b5a      	ldr	r3, [pc, #360]	; (8012858 <pass_route3+0x4e0>)
 80126f0:	2200      	movs	r2, #0
 80126f2:	701a      	strb	r2, [r3, #0]
			i = i + 3;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	3303      	adds	r3, #3
 80126f8:	607b      	str	r3, [r7, #4]
 80126fa:	e149      	b.n	8012990 <pass_route3+0x618>
		}else if(route[i] == 0x77 && route[i+1] == 0x11 && route[i+2] == 0x11 && route[i+3] == 0x44){
 80126fc:	4a57      	ldr	r2, [pc, #348]	; (801285c <pass_route3+0x4e4>)
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	4413      	add	r3, r2
 8012702:	781b      	ldrb	r3, [r3, #0]
 8012704:	2b77      	cmp	r3, #119	; 0x77
 8012706:	d11e      	bne.n	8012746 <pass_route3+0x3ce>
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	3301      	adds	r3, #1
 801270c:	4a53      	ldr	r2, [pc, #332]	; (801285c <pass_route3+0x4e4>)
 801270e:	5cd3      	ldrb	r3, [r2, r3]
 8012710:	2b11      	cmp	r3, #17
 8012712:	d118      	bne.n	8012746 <pass_route3+0x3ce>
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	3302      	adds	r3, #2
 8012718:	4a50      	ldr	r2, [pc, #320]	; (801285c <pass_route3+0x4e4>)
 801271a:	5cd3      	ldrb	r3, [r2, r3]
 801271c:	2b11      	cmp	r3, #17
 801271e:	d112      	bne.n	8012746 <pass_route3+0x3ce>
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	3303      	adds	r3, #3
 8012724:	4a4d      	ldr	r2, [pc, #308]	; (801285c <pass_route3+0x4e4>)
 8012726:	5cd3      	ldrb	r3, [r2, r3]
 8012728:	2b44      	cmp	r3, #68	; 0x44
 801272a:	d10c      	bne.n	8012746 <pass_route3+0x3ce>
			s_flag = 0;
 801272c:	2300      	movs	r3, #0
 801272e:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135in
 8012730:	78bb      	ldrb	r3, [r7, #2]
 8012732:	4a4b      	ldr	r2, [pc, #300]	; (8012860 <pass_route3+0x4e8>)
 8012734:	21f4      	movs	r1, #244	; 0xf4
 8012736:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 8012738:	4b47      	ldr	r3, [pc, #284]	; (8012858 <pass_route3+0x4e0>)
 801273a:	2201      	movs	r2, #1
 801273c:	701a      	strb	r2, [r3, #0]
			i = i + 3;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	3303      	adds	r3, #3
 8012742:	607b      	str	r3, [r7, #4]
 8012744:	e124      	b.n	8012990 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x11 && route[i+1] == 0x11 && route[i+2] == 0x77){
 8012746:	4b44      	ldr	r3, [pc, #272]	; (8012858 <pass_route3+0x4e0>)
 8012748:	781b      	ldrb	r3, [r3, #0]
 801274a:	2b01      	cmp	r3, #1
 801274c:	d11e      	bne.n	801278c <pass_route3+0x414>
 801274e:	4a43      	ldr	r2, [pc, #268]	; (801285c <pass_route3+0x4e4>)
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	4413      	add	r3, r2
 8012754:	781b      	ldrb	r3, [r3, #0]
 8012756:	2b11      	cmp	r3, #17
 8012758:	d118      	bne.n	801278c <pass_route3+0x414>
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	3301      	adds	r3, #1
 801275e:	4a3f      	ldr	r2, [pc, #252]	; (801285c <pass_route3+0x4e4>)
 8012760:	5cd3      	ldrb	r3, [r2, r3]
 8012762:	2b11      	cmp	r3, #17
 8012764:	d112      	bne.n	801278c <pass_route3+0x414>
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	3302      	adds	r3, #2
 801276a:	4a3c      	ldr	r2, [pc, #240]	; (801285c <pass_route3+0x4e4>)
 801276c:	5cd3      	ldrb	r3, [r2, r3]
 801276e:	2b77      	cmp	r3, #119	; 0x77
 8012770:	d10c      	bne.n	801278c <pass_route3+0x414>
			s_flag = 0;
 8012772:	2300      	movs	r3, #0
 8012774:	70fb      	strb	r3, [r7, #3]
			pass[p] = -12;							//a斜め左V135out
 8012776:	78bb      	ldrb	r3, [r7, #2]
 8012778:	4a39      	ldr	r2, [pc, #228]	; (8012860 <pass_route3+0x4e8>)
 801277a:	21f4      	movs	r1, #244	; 0xf4
 801277c:	54d1      	strb	r1, [r2, r3]
			v_flag = 0;
 801277e:	4b36      	ldr	r3, [pc, #216]	; (8012858 <pass_route3+0x4e0>)
 8012780:	2200      	movs	r2, #0
 8012782:	701a      	strb	r2, [r3, #0]
			i = i + 3;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	3303      	adds	r3, #3
 8012788:	607b      	str	r3, [r7, #4]
 801278a:	e101      	b.n	8012990 <pass_route3+0x618>
		}else if(route[i] == 0xff){
 801278c:	4a33      	ldr	r2, [pc, #204]	; (801285c <pass_route3+0x4e4>)
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	4413      	add	r3, r2
 8012792:	781b      	ldrb	r3, [r3, #0]
 8012794:	2bff      	cmp	r3, #255	; 0xff
 8012796:	d167      	bne.n	8012868 <pass_route3+0x4f0>
			if(v_flag == 1){
 8012798:	4b2f      	ldr	r3, [pc, #188]	; (8012858 <pass_route3+0x4e0>)
 801279a:	781b      	ldrb	r3, [r3, #0]
 801279c:	2b01      	cmp	r3, #1
 801279e:	d152      	bne.n	8012846 <pass_route3+0x4ce>
				if(pass[p-1] == -1 && pass[p-2] == -1){
 80127a0:	78bb      	ldrb	r3, [r7, #2]
 80127a2:	3b01      	subs	r3, #1
 80127a4:	4a2e      	ldr	r2, [pc, #184]	; (8012860 <pass_route3+0x4e8>)
 80127a6:	56d3      	ldrsb	r3, [r2, r3]
 80127a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127ac:	d111      	bne.n	80127d2 <pass_route3+0x45a>
 80127ae:	78bb      	ldrb	r3, [r7, #2]
 80127b0:	3b02      	subs	r3, #2
 80127b2:	4a2b      	ldr	r2, [pc, #172]	; (8012860 <pass_route3+0x4e8>)
 80127b4:	56d3      	ldrsb	r3, [r2, r3]
 80127b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127ba:	d10a      	bne.n	80127d2 <pass_route3+0x45a>
					pass[p-2] = -15;
 80127bc:	78bb      	ldrb	r3, [r7, #2]
 80127be:	3b02      	subs	r3, #2
 80127c0:	4a27      	ldr	r2, [pc, #156]	; (8012860 <pass_route3+0x4e8>)
 80127c2:	21f1      	movs	r1, #241	; 0xf1
 80127c4:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 80127c6:	78bb      	ldrb	r3, [r7, #2]
 80127c8:	3b01      	subs	r3, #1
 80127ca:	4a25      	ldr	r2, [pc, #148]	; (8012860 <pass_route3+0x4e8>)
 80127cc:	218e      	movs	r1, #142	; 0x8e
 80127ce:	54d1      	strb	r1, [r2, r3]
 80127d0:	e039      	b.n	8012846 <pass_route3+0x4ce>
				}else if(pass[p-1] == -2 && pass[p-2] == -2){
 80127d2:	78bb      	ldrb	r3, [r7, #2]
 80127d4:	3b01      	subs	r3, #1
 80127d6:	4a22      	ldr	r2, [pc, #136]	; (8012860 <pass_route3+0x4e8>)
 80127d8:	56d3      	ldrsb	r3, [r2, r3]
 80127da:	f113 0f02 	cmn.w	r3, #2
 80127de:	d111      	bne.n	8012804 <pass_route3+0x48c>
 80127e0:	78bb      	ldrb	r3, [r7, #2]
 80127e2:	3b02      	subs	r3, #2
 80127e4:	4a1e      	ldr	r2, [pc, #120]	; (8012860 <pass_route3+0x4e8>)
 80127e6:	56d3      	ldrsb	r3, [r2, r3]
 80127e8:	f113 0f02 	cmn.w	r3, #2
 80127ec:	d10a      	bne.n	8012804 <pass_route3+0x48c>
					pass[p-2] = -16;
 80127ee:	78bb      	ldrb	r3, [r7, #2]
 80127f0:	3b02      	subs	r3, #2
 80127f2:	4a1b      	ldr	r2, [pc, #108]	; (8012860 <pass_route3+0x4e8>)
 80127f4:	21f0      	movs	r1, #240	; 0xf0
 80127f6:	54d1      	strb	r1, [r2, r3]
					pass[p-1] = -114;
 80127f8:	78bb      	ldrb	r3, [r7, #2]
 80127fa:	3b01      	subs	r3, #1
 80127fc:	4a18      	ldr	r2, [pc, #96]	; (8012860 <pass_route3+0x4e8>)
 80127fe:	218e      	movs	r1, #142	; 0x8e
 8012800:	54d1      	strb	r1, [r2, r3]
 8012802:	e020      	b.n	8012846 <pass_route3+0x4ce>
				}else if(pass[p-1] == -1){
 8012804:	78bb      	ldrb	r3, [r7, #2]
 8012806:	3b01      	subs	r3, #1
 8012808:	4a15      	ldr	r2, [pc, #84]	; (8012860 <pass_route3+0x4e8>)
 801280a:	56d3      	ldrsb	r3, [r2, r3]
 801280c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012810:	d109      	bne.n	8012826 <pass_route3+0x4ae>
					pass[p-1] = -13;
 8012812:	78bb      	ldrb	r3, [r7, #2]
 8012814:	3b01      	subs	r3, #1
 8012816:	4a12      	ldr	r2, [pc, #72]	; (8012860 <pass_route3+0x4e8>)
 8012818:	21f3      	movs	r1, #243	; 0xf3
 801281a:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 801281c:	78bb      	ldrb	r3, [r7, #2]
 801281e:	4a10      	ldr	r2, [pc, #64]	; (8012860 <pass_route3+0x4e8>)
 8012820:	218e      	movs	r1, #142	; 0x8e
 8012822:	54d1      	strb	r1, [r2, r3]
 8012824:	e00f      	b.n	8012846 <pass_route3+0x4ce>
				}else if(pass[p-1] == -2){
 8012826:	78bb      	ldrb	r3, [r7, #2]
 8012828:	3b01      	subs	r3, #1
 801282a:	4a0d      	ldr	r2, [pc, #52]	; (8012860 <pass_route3+0x4e8>)
 801282c:	56d3      	ldrsb	r3, [r2, r3]
 801282e:	f113 0f02 	cmn.w	r3, #2
 8012832:	d108      	bne.n	8012846 <pass_route3+0x4ce>
					pass[p-1] = -14;
 8012834:	78bb      	ldrb	r3, [r7, #2]
 8012836:	3b01      	subs	r3, #1
 8012838:	4a09      	ldr	r2, [pc, #36]	; (8012860 <pass_route3+0x4e8>)
 801283a:	21f2      	movs	r1, #242	; 0xf2
 801283c:	54d1      	strb	r1, [r2, r3]
					pass[p] = -114;
 801283e:	78bb      	ldrb	r3, [r7, #2]
 8012840:	4a07      	ldr	r2, [pc, #28]	; (8012860 <pass_route3+0x4e8>)
 8012842:	218e      	movs	r1, #142	; 0x8e
 8012844:	54d1      	strb	r1, [r2, r3]
				}
			}
			pass[p] = -114;							//a終了用配列
 8012846:	78bb      	ldrb	r3, [r7, #2]
 8012848:	4a05      	ldr	r2, [pc, #20]	; (8012860 <pass_route3+0x4e8>)
 801284a:	218e      	movs	r1, #142	; 0x8e
 801284c:	54d1      	strb	r1, [r2, r3]
			i++;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	3301      	adds	r3, #1
 8012852:	607b      	str	r3, [r7, #4]
 8012854:	e09c      	b.n	8012990 <pass_route3+0x618>
 8012856:	bf00      	nop
 8012858:	20000b28 	.word	0x20000b28
 801285c:	20000c9c 	.word	0x20000c9c
 8012860:	20000388 	.word	0x20000388
 8012864:	200012ec 	.word	0x200012ec
		}else if(v_flag == 1 && route[i] == 0x44 && route[i+1] == 0x11){
 8012868:	4b51      	ldr	r3, [pc, #324]	; (80129b0 <pass_route3+0x638>)
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	2b01      	cmp	r3, #1
 801286e:	d118      	bne.n	80128a2 <pass_route3+0x52a>
 8012870:	4a50      	ldr	r2, [pc, #320]	; (80129b4 <pass_route3+0x63c>)
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	4413      	add	r3, r2
 8012876:	781b      	ldrb	r3, [r3, #0]
 8012878:	2b44      	cmp	r3, #68	; 0x44
 801287a:	d112      	bne.n	80128a2 <pass_route3+0x52a>
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	3301      	adds	r3, #1
 8012880:	4a4c      	ldr	r2, [pc, #304]	; (80129b4 <pass_route3+0x63c>)
 8012882:	5cd3      	ldrb	r3, [r2, r3]
 8012884:	2b11      	cmp	r3, #17
 8012886:	d10c      	bne.n	80128a2 <pass_route3+0x52a>
			s_flag = 0;
 8012888:	2300      	movs	r3, #0
 801288a:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 801288c:	78bb      	ldrb	r3, [r7, #2]
 801288e:	4a4a      	ldr	r2, [pc, #296]	; (80129b8 <pass_route3+0x640>)
 8012890:	2140      	movs	r1, #64	; 0x40
 8012892:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 8012894:	4b46      	ldr	r3, [pc, #280]	; (80129b0 <pass_route3+0x638>)
 8012896:	2201      	movs	r2, #1
 8012898:	701a      	strb	r2, [r3, #0]
			i++;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	3301      	adds	r3, #1
 801289e:	607b      	str	r3, [r7, #4]
 80128a0:	e076      	b.n	8012990 <pass_route3+0x618>
		}else if(v_flag == 1 && route[i] == 0x11 && route[i+1] == 0x44){
 80128a2:	4b43      	ldr	r3, [pc, #268]	; (80129b0 <pass_route3+0x638>)
 80128a4:	781b      	ldrb	r3, [r3, #0]
 80128a6:	2b01      	cmp	r3, #1
 80128a8:	d118      	bne.n	80128dc <pass_route3+0x564>
 80128aa:	4a42      	ldr	r2, [pc, #264]	; (80129b4 <pass_route3+0x63c>)
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	4413      	add	r3, r2
 80128b0:	781b      	ldrb	r3, [r3, #0]
 80128b2:	2b11      	cmp	r3, #17
 80128b4:	d112      	bne.n	80128dc <pass_route3+0x564>
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	3301      	adds	r3, #1
 80128ba:	4a3e      	ldr	r2, [pc, #248]	; (80129b4 <pass_route3+0x63c>)
 80128bc:	5cd3      	ldrb	r3, [r2, r3]
 80128be:	2b44      	cmp	r3, #68	; 0x44
 80128c0:	d10c      	bne.n	80128dc <pass_route3+0x564>
			s_flag = 0;
 80128c2:	2300      	movs	r3, #0
 80128c4:	70fb      	strb	r3, [r7, #3]
			pass[p] = 64;							//a斜め半直線
 80128c6:	78bb      	ldrb	r3, [r7, #2]
 80128c8:	4a3b      	ldr	r2, [pc, #236]	; (80129b8 <pass_route3+0x640>)
 80128ca:	2140      	movs	r1, #64	; 0x40
 80128cc:	54d1      	strb	r1, [r2, r3]
			v_flag = 1;
 80128ce:	4b38      	ldr	r3, [pc, #224]	; (80129b0 <pass_route3+0x638>)
 80128d0:	2201      	movs	r2, #1
 80128d2:	701a      	strb	r2, [r3, #0]
			i++;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	3301      	adds	r3, #1
 80128d8:	607b      	str	r3, [r7, #4]
 80128da:	e059      	b.n	8012990 <pass_route3+0x618>
		}else if(route[i] == 0x44){
 80128dc:	4a35      	ldr	r2, [pc, #212]	; (80129b4 <pass_route3+0x63c>)
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	4413      	add	r3, r2
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	2b44      	cmp	r3, #68	; 0x44
 80128e6:	d107      	bne.n	80128f8 <pass_route3+0x580>
			pass[p] = -1;							//a右スラローム
 80128e8:	78bb      	ldrb	r3, [r7, #2]
 80128ea:	4a33      	ldr	r2, [pc, #204]	; (80129b8 <pass_route3+0x640>)
 80128ec:	21ff      	movs	r1, #255	; 0xff
 80128ee:	54d1      	strb	r1, [r2, r3]
			i++;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	3301      	adds	r3, #1
 80128f4:	607b      	str	r3, [r7, #4]
 80128f6:	e04b      	b.n	8012990 <pass_route3+0x618>
		}else if(route[i] == 0x11){
 80128f8:	4a2e      	ldr	r2, [pc, #184]	; (80129b4 <pass_route3+0x63c>)
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	4413      	add	r3, r2
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	2b11      	cmp	r3, #17
 8012902:	d107      	bne.n	8012914 <pass_route3+0x59c>
			pass[p] = -2;							//a左スラローム
 8012904:	78bb      	ldrb	r3, [r7, #2]
 8012906:	4a2c      	ldr	r2, [pc, #176]	; (80129b8 <pass_route3+0x640>)
 8012908:	21fe      	movs	r1, #254	; 0xfe
 801290a:	54d1      	strb	r1, [r2, r3]
			i++;
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	3301      	adds	r3, #1
 8012910:	607b      	str	r3, [r7, #4]
 8012912:	e03d      	b.n	8012990 <pass_route3+0x618>
		}else if(route[i] == 0x77){
 8012914:	4a27      	ldr	r2, [pc, #156]	; (80129b4 <pass_route3+0x63c>)
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	4413      	add	r3, r2
 801291a:	781b      	ldrb	r3, [r3, #0]
 801291c:	2b77      	cmp	r3, #119	; 0x77
 801291e:	d137      	bne.n	8012990 <pass_route3+0x618>
			if(s_flag){
 8012920:	78fb      	ldrb	r3, [r7, #3]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d012      	beq.n	801294c <pass_route3+0x5d4>
				pass[p-1]++;						//aスラローム前半直線追加
 8012926:	78bb      	ldrb	r3, [r7, #2]
 8012928:	3b01      	subs	r3, #1
 801292a:	4a23      	ldr	r2, [pc, #140]	; (80129b8 <pass_route3+0x640>)
 801292c:	56d2      	ldrsb	r2, [r2, r3]
 801292e:	b2d2      	uxtb	r2, r2
 8012930:	3201      	adds	r2, #1
 8012932:	b2d2      	uxtb	r2, r2
 8012934:	b251      	sxtb	r1, r2
 8012936:	4a20      	ldr	r2, [pc, #128]	; (80129b8 <pass_route3+0x640>)
 8012938:	54d1      	strb	r1, [r2, r3]
				p--;
 801293a:	78bb      	ldrb	r3, [r7, #2]
 801293c:	3b01      	subs	r3, #1
 801293e:	70bb      	strb	r3, [r7, #2]
				s_flag = 0;
 8012940:	2300      	movs	r3, #0
 8012942:	70fb      	strb	r3, [r7, #3]
				i++;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	3301      	adds	r3, #1
 8012948:	607b      	str	r3, [r7, #4]
 801294a:	e021      	b.n	8012990 <pass_route3+0x618>
			}else{
				s++;
 801294c:	787b      	ldrb	r3, [r7, #1]
 801294e:	3301      	adds	r3, #1
 8012950:	707b      	strb	r3, [r7, #1]
				pass[p] = s;						//aもし半直線1つだけの場合whileには入らない
 8012952:	78bb      	ldrb	r3, [r7, #2]
 8012954:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8012958:	4a17      	ldr	r2, [pc, #92]	; (80129b8 <pass_route3+0x640>)
 801295a:	54d1      	strb	r1, [r2, r3]
				while(route[i+1] == 0x77){
 801295c:	e00c      	b.n	8012978 <pass_route3+0x600>
					s_flag = 1;
 801295e:	2301      	movs	r3, #1
 8012960:	70fb      	strb	r3, [r7, #3]
					pass[p] = s;					//a半直線2つ以上続く場合、最後半直線は大回り用に残す
 8012962:	78bb      	ldrb	r3, [r7, #2]
 8012964:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8012968:	4a13      	ldr	r2, [pc, #76]	; (80129b8 <pass_route3+0x640>)
 801296a:	54d1      	strb	r1, [r2, r3]
					i++;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	3301      	adds	r3, #1
 8012970:	607b      	str	r3, [r7, #4]
					s++;
 8012972:	787b      	ldrb	r3, [r7, #1]
 8012974:	3301      	adds	r3, #1
 8012976:	707b      	strb	r3, [r7, #1]
				while(route[i+1] == 0x77){
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	3301      	adds	r3, #1
 801297c:	4a0d      	ldr	r2, [pc, #52]	; (80129b4 <pass_route3+0x63c>)
 801297e:	5cd3      	ldrb	r3, [r2, r3]
 8012980:	2b77      	cmp	r3, #119	; 0x77
 8012982:	d0ec      	beq.n	801295e <pass_route3+0x5e6>
				}
				if(!s_flag){
 8012984:	78fb      	ldrb	r3, [r7, #3]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d102      	bne.n	8012990 <pass_route3+0x618>
					i++;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	3301      	adds	r3, #1
 801298e:	607b      	str	r3, [r7, #4]
				}
			}
		}
		p++;
 8012990:	78bb      	ldrb	r3, [r7, #2]
 8012992:	3301      	adds	r3, #1
 8012994:	70bb      	strb	r3, [r7, #2]
	while(route[i-1] != 0xff){
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	3b01      	subs	r3, #1
 801299a:	4a06      	ldr	r2, [pc, #24]	; (80129b4 <pass_route3+0x63c>)
 801299c:	5cd3      	ldrb	r3, [r2, r3]
 801299e:	2bff      	cmp	r3, #255	; 0xff
 80129a0:	f47f ad07 	bne.w	80123b2 <pass_route3+0x3a>
	}
}
 80129a4:	bf00      	nop
 80129a6:	370c      	adds	r7, #12
 80129a8:	46bd      	mov	sp, r7
 80129aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ae:	4770      	bx	lr
 80129b0:	20000b28 	.word	0x20000b28
 80129b4:	20000c9c 	.word	0x20000c9c
 80129b8:	20000388 	.word	0x20000388

080129bc <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 80129bc:	b580      	push	{r7, lr}
 80129be:	b082      	sub	sp, #8
 80129c0:	af00      	add	r7, sp, #0
	printf("eprom func start \n");
 80129c2:	4818      	ldr	r0, [pc, #96]	; (8012a24 <store_map_in_eeprom+0x68>)
 80129c4:	f000 ff28 	bl	8013818 <puts>
	eeprom_enable_write();
 80129c8:	f7fa fa70 	bl	800ceac <eeprom_enable_write>
	printf("eprom enable_write fin \n");
 80129cc:	4816      	ldr	r0, [pc, #88]	; (8012a28 <store_map_in_eeprom+0x6c>)
 80129ce:	f000 ff23 	bl	8013818 <puts>
	int i;
	for(i = 0; i < 16; i++){
 80129d2:	2300      	movs	r3, #0
 80129d4:	607b      	str	r3, [r7, #4]
 80129d6:	e01b      	b.n	8012a10 <store_map_in_eeprom+0x54>
		int j;
		for(j = 0; j < 16; j++){
 80129d8:	2300      	movs	r3, #0
 80129da:	603b      	str	r3, [r7, #0]
 80129dc:	e012      	b.n	8012a04 <store_map_in_eeprom+0x48>
			eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	011a      	lsls	r2, r3, #4
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	4413      	add	r3, r2
 80129e6:	4618      	mov	r0, r3
 80129e8:	4a10      	ldr	r2, [pc, #64]	; (8012a2c <store_map_in_eeprom+0x70>)
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	011b      	lsls	r3, r3, #4
 80129ee:	441a      	add	r2, r3
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	4413      	add	r3, r2
 80129f4:	781b      	ldrb	r3, [r3, #0]
 80129f6:	b29b      	uxth	r3, r3
 80129f8:	4619      	mov	r1, r3
 80129fa:	f7fa fa82 	bl	800cf02 <eeprom_write_halfword>
		for(j = 0; j < 16; j++){
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	3301      	adds	r3, #1
 8012a02:	603b      	str	r3, [r7, #0]
 8012a04:	683b      	ldr	r3, [r7, #0]
 8012a06:	2b0f      	cmp	r3, #15
 8012a08:	dde9      	ble.n	80129de <store_map_in_eeprom+0x22>
	for(i = 0; i < 16; i++){
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	3301      	adds	r3, #1
 8012a0e:	607b      	str	r3, [r7, #4]
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	2b0f      	cmp	r3, #15
 8012a14:	dde0      	ble.n	80129d8 <store_map_in_eeprom+0x1c>
		}
	}
	eeprom_disable_write();
 8012a16:	f7fa fa6d 	bl	800cef4 <eeprom_disable_write>
}
 8012a1a:	bf00      	nop
 8012a1c:	3708      	adds	r7, #8
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	bd80      	pop	{r7, pc}
 8012a22:	bf00      	nop
 8012a24:	08014e7c 	.word	0x08014e7c
 8012a28:	08014e90 	.word	0x08014e90
 8012a2c:	200001e4 	.word	0x200001e4

08012a30 <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b082      	sub	sp, #8
 8012a34:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 16; i++){
 8012a36:	2300      	movs	r3, #0
 8012a38:	607b      	str	r3, [r7, #4]
 8012a3a:	e01c      	b.n	8012a76 <load_map_from_eeprom+0x46>
		int j;
		for(j = 0; j < 16; j++){
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	603b      	str	r3, [r7, #0]
 8012a40:	e013      	b.n	8012a6a <load_map_from_eeprom+0x3a>
			map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	011a      	lsls	r2, r3, #4
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	4413      	add	r3, r2
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7fa fa76 	bl	800cf3c <eeprom_read_halfword>
 8012a50:	4603      	mov	r3, r0
 8012a52:	b2d9      	uxtb	r1, r3
 8012a54:	4a0b      	ldr	r2, [pc, #44]	; (8012a84 <load_map_from_eeprom+0x54>)
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	011b      	lsls	r3, r3, #4
 8012a5a:	441a      	add	r2, r3
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	4413      	add	r3, r2
 8012a60:	460a      	mov	r2, r1
 8012a62:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < 16; j++){
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	3301      	adds	r3, #1
 8012a68:	603b      	str	r3, [r7, #0]
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	2b0f      	cmp	r3, #15
 8012a6e:	dde8      	ble.n	8012a42 <load_map_from_eeprom+0x12>
	for(i = 0; i < 16; i++){
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	3301      	adds	r3, #1
 8012a74:	607b      	str	r3, [r7, #4]
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2b0f      	cmp	r3, #15
 8012a7a:	dddf      	ble.n	8012a3c <load_map_from_eeprom+0xc>
		}
	}
}
 8012a7c:	bf00      	nop
 8012a7e:	3708      	adds	r7, #8
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}
 8012a84:	200001e4 	.word	0x200001e4

08012a88 <sensor_init>:

#include "global.h"


void sensor_init(void){
 8012a88:	b480      	push	{r7}
 8012a8a:	af00      	add	r7, sp, #0
	tp = 0;
 8012a8c:	4b0e      	ldr	r3, [pc, #56]	; (8012ac8 <sensor_init+0x40>)
 8012a8e:	2200      	movs	r2, #0
 8012a90:	701a      	strb	r2, [r3, #0]
	ad_l = ad_r = ad_fr = ad_fl = 0;
 8012a92:	4b0e      	ldr	r3, [pc, #56]	; (8012acc <sensor_init+0x44>)
 8012a94:	2200      	movs	r2, #0
 8012a96:	601a      	str	r2, [r3, #0]
 8012a98:	4b0c      	ldr	r3, [pc, #48]	; (8012acc <sensor_init+0x44>)
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	4a0c      	ldr	r2, [pc, #48]	; (8012ad0 <sensor_init+0x48>)
 8012a9e:	6013      	str	r3, [r2, #0]
 8012aa0:	4b0b      	ldr	r3, [pc, #44]	; (8012ad0 <sensor_init+0x48>)
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	4a0b      	ldr	r2, [pc, #44]	; (8012ad4 <sensor_init+0x4c>)
 8012aa6:	6013      	str	r3, [r2, #0]
 8012aa8:	4b0a      	ldr	r3, [pc, #40]	; (8012ad4 <sensor_init+0x4c>)
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	4a0a      	ldr	r2, [pc, #40]	; (8012ad8 <sensor_init+0x50>)
 8012aae:	6013      	str	r3, [r2, #0]
	base_l = base_r = 0;
 8012ab0:	4b0a      	ldr	r3, [pc, #40]	; (8012adc <sensor_init+0x54>)
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	801a      	strh	r2, [r3, #0]
 8012ab6:	4b09      	ldr	r3, [pc, #36]	; (8012adc <sensor_init+0x54>)
 8012ab8:	881a      	ldrh	r2, [r3, #0]
 8012aba:	4b09      	ldr	r3, [pc, #36]	; (8012ae0 <sensor_init+0x58>)
 8012abc:	801a      	strh	r2, [r3, #0]
}
 8012abe:	bf00      	nop
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac6:	4770      	bx	lr
 8012ac8:	20000fc3 	.word	0x20000fc3
 8012acc:	20000d9c 	.word	0x20000d9c
 8012ad0:	20000c48 	.word	0x20000c48
 8012ad4:	20000fa8 	.word	0x20000fa8
 8012ad8:	20000b3c 	.word	0x20000b3c
 8012adc:	200002f8 	.word	0x200002f8
 8012ae0:	20000384 	.word	0x20000384

08012ae4 <get_base>:


uint8_t get_base(){
 8012ae4:	b480      	push	{r7}
 8012ae6:	b083      	sub	sp, #12
 8012ae8:	af00      	add	r7, sp, #0
	uint8_t res = 1;									//for return
 8012aea:	2301      	movs	r3, #1
 8012aec:	71fb      	strb	r3, [r7, #7]

	base_l = ad_l;										//sensor value base L
 8012aee:	4b08      	ldr	r3, [pc, #32]	; (8012b10 <get_base+0x2c>)
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	b29a      	uxth	r2, r3
 8012af4:	4b07      	ldr	r3, [pc, #28]	; (8012b14 <get_base+0x30>)
 8012af6:	801a      	strh	r2, [r3, #0]
	base_r = ad_r;										//sensor value base R
 8012af8:	4b07      	ldr	r3, [pc, #28]	; (8012b18 <get_base+0x34>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	b29a      	uxth	r2, r3
 8012afe:	4b07      	ldr	r3, [pc, #28]	; (8012b1c <get_base+0x38>)
 8012b00:	801a      	strh	r2, [r3, #0]

	return res;											//
 8012b02:	79fb      	ldrb	r3, [r7, #7]
}
 8012b04:	4618      	mov	r0, r3
 8012b06:	370c      	adds	r7, #12
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0e:	4770      	bx	lr
 8012b10:	20000b3c 	.word	0x20000b3c
 8012b14:	20000384 	.word	0x20000384
 8012b18:	20000fa8 	.word	0x20000fa8
 8012b1c:	200002f8 	.word	0x200002f8

08012b20 <get_wall_info>:


void get_wall_info(){
 8012b20:	b480      	push	{r7}
 8012b22:	af00      	add	r7, sp, #0

	//----reset----
	wall_info = 0x00;									//wall
 8012b24:	4b16      	ldr	r3, [pc, #88]	; (8012b80 <get_wall_info+0x60>)
 8012b26:	2200      	movs	r2, #0
 8012b28:	701a      	strb	r2, [r3, #0]
	//----look forward----
	if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 8012b2a:	4b16      	ldr	r3, [pc, #88]	; (8012b84 <get_wall_info+0x64>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	2b5a      	cmp	r3, #90	; 0x5a
 8012b30:	d803      	bhi.n	8012b3a <get_wall_info+0x1a>
 8012b32:	4b15      	ldr	r3, [pc, #84]	; (8012b88 <get_wall_info+0x68>)
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	2bc8      	cmp	r3, #200	; 0xc8
 8012b38:	d906      	bls.n	8012b48 <get_wall_info+0x28>
		wall_info |= 0x88;								//forward check
 8012b3a:	4b11      	ldr	r3, [pc, #68]	; (8012b80 <get_wall_info+0x60>)
 8012b3c:	781b      	ldrb	r3, [r3, #0]
 8012b3e:	f063 0377 	orn	r3, r3, #119	; 0x77
 8012b42:	b2da      	uxtb	r2, r3
 8012b44:	4b0e      	ldr	r3, [pc, #56]	; (8012b80 <get_wall_info+0x60>)
 8012b46:	701a      	strb	r2, [r3, #0]
	}
	//----look right----
	if(ad_r > WALL_BASE_R){
 8012b48:	4b10      	ldr	r3, [pc, #64]	; (8012b8c <get_wall_info+0x6c>)
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	2b82      	cmp	r3, #130	; 0x82
 8012b4e:	d906      	bls.n	8012b5e <get_wall_info+0x3e>
		wall_info |= 0x44;								//right check
 8012b50:	4b0b      	ldr	r3, [pc, #44]	; (8012b80 <get_wall_info+0x60>)
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8012b58:	b2da      	uxtb	r2, r3
 8012b5a:	4b09      	ldr	r3, [pc, #36]	; (8012b80 <get_wall_info+0x60>)
 8012b5c:	701a      	strb	r2, [r3, #0]
	}
	//----look left----
	if(ad_l > WALL_BASE_L){
 8012b5e:	4b0c      	ldr	r3, [pc, #48]	; (8012b90 <get_wall_info+0x70>)
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	2b5a      	cmp	r3, #90	; 0x5a
 8012b64:	d906      	bls.n	8012b74 <get_wall_info+0x54>
		wall_info |= 0x11;								//light check
 8012b66:	4b06      	ldr	r3, [pc, #24]	; (8012b80 <get_wall_info+0x60>)
 8012b68:	781b      	ldrb	r3, [r3, #0]
 8012b6a:	f043 0311 	orr.w	r3, r3, #17
 8012b6e:	b2da      	uxtb	r2, r3
 8012b70:	4b03      	ldr	r3, [pc, #12]	; (8012b80 <get_wall_info+0x60>)
 8012b72:	701a      	strb	r2, [r3, #0]
	}
}
 8012b74:	bf00      	nop
 8012b76:	46bd      	mov	sp, r7
 8012b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7c:	4770      	bx	lr
 8012b7e:	bf00      	nop
 8012b80:	20000300 	.word	0x20000300
 8012b84:	20000c48 	.word	0x20000c48
 8012b88:	20000d9c 	.word	0x20000d9c
 8012b8c:	20000fa8 	.word	0x20000fa8
 8012b90:	20000b3c 	.word	0x20000b3c

08012b94 <led_write>:
//led_write
//aモード選択用LEDのON-OFF
//a引数：led1(0=>OFF, 1=>ON), led2(0=>OFF, 1=>ON), led3(0=>OFF, 1=>ON)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write(uint8_t led1, uint8_t led2, uint8_t led3){
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b082      	sub	sp, #8
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	71fb      	strb	r3, [r7, #7]
 8012b9e:	460b      	mov	r3, r1
 8012ba0:	71bb      	strb	r3, [r7, #6]
 8012ba2:	4613      	mov	r3, r2
 8012ba4:	717b      	strb	r3, [r7, #5]
	if(led1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8012ba6:	79fb      	ldrb	r3, [r7, #7]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d005      	beq.n	8012bb8 <led_write+0x24>
 8012bac:	2201      	movs	r2, #1
 8012bae:	2110      	movs	r1, #16
 8012bb0:	4814      	ldr	r0, [pc, #80]	; (8012c04 <led_write+0x70>)
 8012bb2:	f7ef fba7 	bl	8002304 <HAL_GPIO_WritePin>
 8012bb6:	e004      	b.n	8012bc2 <led_write+0x2e>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8012bb8:	2200      	movs	r2, #0
 8012bba:	2110      	movs	r1, #16
 8012bbc:	4811      	ldr	r0, [pc, #68]	; (8012c04 <led_write+0x70>)
 8012bbe:	f7ef fba1 	bl	8002304 <HAL_GPIO_WritePin>

	if(led2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8012bc2:	79bb      	ldrb	r3, [r7, #6]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d005      	beq.n	8012bd4 <led_write+0x40>
 8012bc8:	2201      	movs	r2, #1
 8012bca:	2140      	movs	r1, #64	; 0x40
 8012bcc:	480d      	ldr	r0, [pc, #52]	; (8012c04 <led_write+0x70>)
 8012bce:	f7ef fb99 	bl	8002304 <HAL_GPIO_WritePin>
 8012bd2:	e004      	b.n	8012bde <led_write+0x4a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	2140      	movs	r1, #64	; 0x40
 8012bd8:	480a      	ldr	r0, [pc, #40]	; (8012c04 <led_write+0x70>)
 8012bda:	f7ef fb93 	bl	8002304 <HAL_GPIO_WritePin>

	if(led3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8012bde:	797b      	ldrb	r3, [r7, #5]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d005      	beq.n	8012bf0 <led_write+0x5c>
 8012be4:	2201      	movs	r2, #1
 8012be6:	2180      	movs	r1, #128	; 0x80
 8012be8:	4806      	ldr	r0, [pc, #24]	; (8012c04 <led_write+0x70>)
 8012bea:	f7ef fb8b 	bl	8002304 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 8012bee:	e004      	b.n	8012bfa <led_write+0x66>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	2180      	movs	r1, #128	; 0x80
 8012bf4:	4803      	ldr	r0, [pc, #12]	; (8012c04 <led_write+0x70>)
 8012bf6:	f7ef fb85 	bl	8002304 <HAL_GPIO_WritePin>
}
 8012bfa:	bf00      	nop
 8012bfc:	3708      	adds	r7, #8
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	40020000 	.word	0x40020000

08012c08 <full_led_write>:
//full_led_write
//aフルカラーLEDの色選択
//a引数：fulled(0=>OFF, 1=>a赤, 2=>緑, 3=>青, 4=>青緑, 5=>紫, 6=>黄, 7=>白)
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void full_led_write(uint8_t fulled){
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	4603      	mov	r3, r0
 8012c10:	71fb      	strb	r3, [r7, #7]
	if(fulled == 0){
 8012c12:	79fb      	ldrb	r3, [r7, #7]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d112      	bne.n	8012c3e <full_led_write+0x36>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8012c18:	2201      	movs	r2, #1
 8012c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012c1e:	4856      	ldr	r0, [pc, #344]	; (8012d78 <full_led_write+0x170>)
 8012c20:	f7ef fb70 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8012c24:	2201      	movs	r2, #1
 8012c26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012c2a:	4853      	ldr	r0, [pc, #332]	; (8012d78 <full_led_write+0x170>)
 8012c2c:	f7ef fb6a 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8012c30:	2201      	movs	r2, #1
 8012c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012c36:	4851      	ldr	r0, [pc, #324]	; (8012d7c <full_led_write+0x174>)
 8012c38:	f7ef fb64 	bl	8002304 <HAL_GPIO_WritePin>
	else if(fulled == 7){
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 8012c3c:	e098      	b.n	8012d70 <full_led_write+0x168>
	else if(fulled == 1){
 8012c3e:	79fb      	ldrb	r3, [r7, #7]
 8012c40:	2b01      	cmp	r3, #1
 8012c42:	d112      	bne.n	8012c6a <full_led_write+0x62>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8012c44:	2201      	movs	r2, #1
 8012c46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012c4a:	484b      	ldr	r0, [pc, #300]	; (8012d78 <full_led_write+0x170>)
 8012c4c:	f7ef fb5a 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8012c50:	2201      	movs	r2, #1
 8012c52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012c56:	4848      	ldr	r0, [pc, #288]	; (8012d78 <full_led_write+0x170>)
 8012c58:	f7ef fb54 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012c62:	4846      	ldr	r0, [pc, #280]	; (8012d7c <full_led_write+0x174>)
 8012c64:	f7ef fb4e 	bl	8002304 <HAL_GPIO_WritePin>
}
 8012c68:	e082      	b.n	8012d70 <full_led_write+0x168>
	else if(fulled == 2){
 8012c6a:	79fb      	ldrb	r3, [r7, #7]
 8012c6c:	2b02      	cmp	r3, #2
 8012c6e:	d112      	bne.n	8012c96 <full_led_write+0x8e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8012c70:	2201      	movs	r2, #1
 8012c72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012c76:	4840      	ldr	r0, [pc, #256]	; (8012d78 <full_led_write+0x170>)
 8012c78:	f7ef fb44 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012c82:	483d      	ldr	r0, [pc, #244]	; (8012d78 <full_led_write+0x170>)
 8012c84:	f7ef fb3e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8012c88:	2201      	movs	r2, #1
 8012c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012c8e:	483b      	ldr	r0, [pc, #236]	; (8012d7c <full_led_write+0x174>)
 8012c90:	f7ef fb38 	bl	8002304 <HAL_GPIO_WritePin>
}
 8012c94:	e06c      	b.n	8012d70 <full_led_write+0x168>
	else if(fulled == 3){
 8012c96:	79fb      	ldrb	r3, [r7, #7]
 8012c98:	2b03      	cmp	r3, #3
 8012c9a:	d112      	bne.n	8012cc2 <full_led_write+0xba>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012ca2:	4835      	ldr	r0, [pc, #212]	; (8012d78 <full_led_write+0x170>)
 8012ca4:	f7ef fb2e 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8012ca8:	2201      	movs	r2, #1
 8012caa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012cae:	4832      	ldr	r0, [pc, #200]	; (8012d78 <full_led_write+0x170>)
 8012cb0:	f7ef fb28 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8012cb4:	2201      	movs	r2, #1
 8012cb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012cba:	4830      	ldr	r0, [pc, #192]	; (8012d7c <full_led_write+0x174>)
 8012cbc:	f7ef fb22 	bl	8002304 <HAL_GPIO_WritePin>
}
 8012cc0:	e056      	b.n	8012d70 <full_led_write+0x168>
	else if(fulled == 4){
 8012cc2:	79fb      	ldrb	r3, [r7, #7]
 8012cc4:	2b04      	cmp	r3, #4
 8012cc6:	d112      	bne.n	8012cee <full_led_write+0xe6>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8012cc8:	2200      	movs	r2, #0
 8012cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012cce:	482a      	ldr	r0, [pc, #168]	; (8012d78 <full_led_write+0x170>)
 8012cd0:	f7ef fb18 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012cda:	4827      	ldr	r0, [pc, #156]	; (8012d78 <full_led_write+0x170>)
 8012cdc:	f7ef fb12 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8012ce0:	2201      	movs	r2, #1
 8012ce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012ce6:	4825      	ldr	r0, [pc, #148]	; (8012d7c <full_led_write+0x174>)
 8012ce8:	f7ef fb0c 	bl	8002304 <HAL_GPIO_WritePin>
}
 8012cec:	e040      	b.n	8012d70 <full_led_write+0x168>
	else if(fulled == 5){
 8012cee:	79fb      	ldrb	r3, [r7, #7]
 8012cf0:	2b05      	cmp	r3, #5
 8012cf2:	d112      	bne.n	8012d1a <full_led_write+0x112>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012cfa:	481f      	ldr	r0, [pc, #124]	; (8012d78 <full_led_write+0x170>)
 8012cfc:	f7ef fb02 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8012d00:	2201      	movs	r2, #1
 8012d02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012d06:	481c      	ldr	r0, [pc, #112]	; (8012d78 <full_led_write+0x170>)
 8012d08:	f7ef fafc 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012d12:	481a      	ldr	r0, [pc, #104]	; (8012d7c <full_led_write+0x174>)
 8012d14:	f7ef faf6 	bl	8002304 <HAL_GPIO_WritePin>
}
 8012d18:	e02a      	b.n	8012d70 <full_led_write+0x168>
	else if(fulled == 6){
 8012d1a:	79fb      	ldrb	r3, [r7, #7]
 8012d1c:	2b06      	cmp	r3, #6
 8012d1e:	d112      	bne.n	8012d46 <full_led_write+0x13e>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8012d20:	2201      	movs	r2, #1
 8012d22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012d26:	4814      	ldr	r0, [pc, #80]	; (8012d78 <full_led_write+0x170>)
 8012d28:	f7ef faec 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012d32:	4811      	ldr	r0, [pc, #68]	; (8012d78 <full_led_write+0x170>)
 8012d34:	f7ef fae6 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8012d38:	2200      	movs	r2, #0
 8012d3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012d3e:	480f      	ldr	r0, [pc, #60]	; (8012d7c <full_led_write+0x174>)
 8012d40:	f7ef fae0 	bl	8002304 <HAL_GPIO_WritePin>
}
 8012d44:	e014      	b.n	8012d70 <full_led_write+0x168>
	else if(fulled == 7){
 8012d46:	79fb      	ldrb	r3, [r7, #7]
 8012d48:	2b07      	cmp	r3, #7
 8012d4a:	d111      	bne.n	8012d70 <full_led_write+0x168>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012d52:	4809      	ldr	r0, [pc, #36]	; (8012d78 <full_led_write+0x170>)
 8012d54:	f7ef fad6 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8012d58:	2200      	movs	r2, #0
 8012d5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012d5e:	4806      	ldr	r0, [pc, #24]	; (8012d78 <full_led_write+0x170>)
 8012d60:	f7ef fad0 	bl	8002304 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8012d64:	2200      	movs	r2, #0
 8012d66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012d6a:	4804      	ldr	r0, [pc, #16]	; (8012d7c <full_led_write+0x174>)
 8012d6c:	f7ef faca 	bl	8002304 <HAL_GPIO_WritePin>
}
 8012d70:	bf00      	nop
 8012d72:	3708      	adds	r7, #8
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}
 8012d78:	40020400 	.word	0x40020400
 8012d7c:	40020800 	.word	0x40020800

08012d80 <sensor_test>:
//sensor_test
//a壁センサーとジャイロセンサーの値確認
//a引数：なし
//a戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_test(){
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b08c      	sub	sp, #48	; 0x30
 8012d84:	af02      	add	r7, sp, #8

	int mode = 0;
 8012d86:	2300      	movs	r3, #0
 8012d88:	627b      	str	r3, [r7, #36]	; 0x24
	printf("Mode : %d\n", mode);
 8012d8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d8c:	4881      	ldr	r0, [pc, #516]	; (8012f94 <sensor_test+0x214>)
 8012d8e:	f000 fccf 	bl	8013730 <iprintf>

	while(1){
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8012d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d94:	b2db      	uxtb	r3, r3
 8012d96:	f003 0301 	and.w	r3, r3, #1
 8012d9a:	b2d8      	uxtb	r0, r3
 8012d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d9e:	b2db      	uxtb	r3, r3
 8012da0:	f003 0302 	and.w	r3, r3, #2
 8012da4:	b2d9      	uxtb	r1, r3
 8012da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da8:	b2db      	uxtb	r3, r3
 8012daa:	f003 0304 	and.w	r3, r3, #4
 8012dae:	b2db      	uxtb	r3, r3
 8012db0:	461a      	mov	r2, r3
 8012db2:	f7ff feef 	bl	8012b94 <led_write>
		  if(dist_r >= 20){
 8012db6:	4b78      	ldr	r3, [pc, #480]	; (8012f98 <sensor_test+0x218>)
 8012db8:	edd3 7a00 	vldr	s15, [r3]
 8012dbc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8012dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dc8:	db0f      	blt.n	8012dea <sensor_test+0x6a>
			  mode++;
 8012dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dcc:	3301      	adds	r3, #1
 8012dce:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8012dd0:	4b71      	ldr	r3, [pc, #452]	; (8012f98 <sensor_test+0x218>)
 8012dd2:	f04f 0200 	mov.w	r2, #0
 8012dd6:	601a      	str	r2, [r3, #0]
			  if(mode > 7){
 8012dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dda:	2b07      	cmp	r3, #7
 8012ddc:	dd01      	ble.n	8012de2 <sensor_test+0x62>
				  mode = 0;
 8012dde:	2300      	movs	r3, #0
 8012de0:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 8012de2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012de4:	486b      	ldr	r0, [pc, #428]	; (8012f94 <sensor_test+0x214>)
 8012de6:	f000 fca3 	bl	8013730 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(dist_r <= -20){
 8012dea:	4b6b      	ldr	r3, [pc, #428]	; (8012f98 <sensor_test+0x218>)
 8012dec:	edd3 7a00 	vldr	s15, [r3]
 8012df0:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8012df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dfc:	d80f      	bhi.n	8012e1e <sensor_test+0x9e>
			  mode--;
 8012dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e00:	3b01      	subs	r3, #1
 8012e02:	627b      	str	r3, [r7, #36]	; 0x24
			  dist_r = 0;
 8012e04:	4b64      	ldr	r3, [pc, #400]	; (8012f98 <sensor_test+0x218>)
 8012e06:	f04f 0200 	mov.w	r2, #0
 8012e0a:	601a      	str	r2, [r3, #0]
			  if(mode < 0){
 8012e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	da01      	bge.n	8012e16 <sensor_test+0x96>
				  mode = 7;
 8012e12:	2307      	movs	r3, #7
 8012e14:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  printf("Mode : %d\n", mode);
 8012e16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e18:	485e      	ldr	r0, [pc, #376]	; (8012f94 <sensor_test+0x214>)
 8012e1a:	f000 fc89 	bl	8013730 <iprintf>
			  //buzzer(pitagola2[mode-1][0], pitagola2[mode-1][1]);
			  //buzzer(pitagola[2][0], pitagola[2][1]);
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET){
 8012e1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012e22:	485e      	ldr	r0, [pc, #376]	; (8012f9c <sensor_test+0x21c>)
 8012e24:	f7ef fa56 	bl	80022d4 <HAL_GPIO_ReadPin>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d1b1      	bne.n	8012d92 <sensor_test+0x12>
			  HAL_Delay(50);
 8012e2e:	2032      	movs	r0, #50	; 0x32
 8012e30:	f7ee f8f4 	bl	800101c <HAL_Delay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_RESET);
 8012e34:	bf00      	nop
 8012e36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012e3a:	4858      	ldr	r0, [pc, #352]	; (8012f9c <sensor_test+0x21c>)
 8012e3c:	f7ef fa4a 	bl	80022d4 <HAL_GPIO_ReadPin>
 8012e40:	4603      	mov	r3, r0
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d0f7      	beq.n	8012e36 <sensor_test+0xb6>

			  drive_ready();
 8012e46:	f7f1 ff15 	bl	8004c74 <drive_ready>

			  switch(mode){
 8012e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e4c:	2b07      	cmp	r3, #7
 8012e4e:	d8a0      	bhi.n	8012d92 <sensor_test+0x12>
 8012e50:	a201      	add	r2, pc, #4	; (adr r2, 8012e58 <sensor_test+0xd8>)
 8012e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e56:	bf00      	nop
 8012e58:	08012e79 	.word	0x08012e79
 8012e5c:	08012e7f 	.word	0x08012e7f
 8012e60:	08012ed1 	.word	0x08012ed1
 8012e64:	08012d93 	.word	0x08012d93
 8012e68:	08012d93 	.word	0x08012d93
 8012e6c:	08012d93 	.word	0x08012d93
 8012e70:	08012d93 	.word	0x08012d93
 8012e74:	08012d93 	.word	0x08012d93
				case 0:
					get_base();
 8012e78:	f7ff fe34 	bl	8012ae4 <get_base>
					break;
 8012e7c:	e089      	b.n	8012f92 <sensor_test+0x212>
				case 1:
			  		  //----Wall sensor check----
			  		  printf("Wall Sensor Check.\n");
 8012e7e:	4848      	ldr	r0, [pc, #288]	; (8012fa0 <sensor_test+0x220>)
 8012e80:	f000 fcca 	bl	8013818 <puts>
			  		  while(1){
			  			  get_wall_info();
 8012e84:	f7ff fe4c 	bl	8012b20 <get_wall_info>
			  			  led_write(wall_info & 0x11, wall_info & 0x88, wall_info & 0x44);
 8012e88:	4b46      	ldr	r3, [pc, #280]	; (8012fa4 <sensor_test+0x224>)
 8012e8a:	781b      	ldrb	r3, [r3, #0]
 8012e8c:	f003 0311 	and.w	r3, r3, #17
 8012e90:	b2d8      	uxtb	r0, r3
 8012e92:	4b44      	ldr	r3, [pc, #272]	; (8012fa4 <sensor_test+0x224>)
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8012e9a:	b2d9      	uxtb	r1, r3
 8012e9c:	4b41      	ldr	r3, [pc, #260]	; (8012fa4 <sensor_test+0x224>)
 8012e9e:	781b      	ldrb	r3, [r3, #0]
 8012ea0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012ea4:	b2db      	uxtb	r3, r3
 8012ea6:	461a      	mov	r2, r3
 8012ea8:	f7ff fe74 	bl	8012b94 <led_write>
			  			  printf("ad_l : %d, ad_fl : %d, ad_fr : %d, ad_r : %d\n", ad_l, ad_fl, ad_fr, ad_r);
 8012eac:	4b3e      	ldr	r3, [pc, #248]	; (8012fa8 <sensor_test+0x228>)
 8012eae:	6819      	ldr	r1, [r3, #0]
 8012eb0:	4b3e      	ldr	r3, [pc, #248]	; (8012fac <sensor_test+0x22c>)
 8012eb2:	681a      	ldr	r2, [r3, #0]
 8012eb4:	4b3e      	ldr	r3, [pc, #248]	; (8012fb0 <sensor_test+0x230>)
 8012eb6:	6818      	ldr	r0, [r3, #0]
 8012eb8:	4b3e      	ldr	r3, [pc, #248]	; (8012fb4 <sensor_test+0x234>)
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	9300      	str	r3, [sp, #0]
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	483d      	ldr	r0, [pc, #244]	; (8012fb8 <sensor_test+0x238>)
 8012ec2:	f000 fc35 	bl	8013730 <iprintf>
			  			  HAL_Delay(333);
 8012ec6:	f240 104d 	movw	r0, #333	; 0x14d
 8012eca:	f7ee f8a7 	bl	800101c <HAL_Delay>
			  			  get_wall_info();
 8012ece:	e7d9      	b.n	8012e84 <sensor_test+0x104>
						}
					break;
				case 2:
					//----Gyro sensor check----
					printf("Gyro Sensor Check.\n");
 8012ed0:	483a      	ldr	r0, [pc, #232]	; (8012fbc <sensor_test+0x23c>)
 8012ed2:	f000 fca1 	bl	8013818 <puts>
					int accel_x, accel_y, accel_z;
					int gyro_x, gyro_y, gyro_z;
					int deg_x, deg_y, deg_z;
			  		  while(1){
			  			  accel_x = accel_read_x();
 8012ed6:	f7fa f8d9 	bl	800d08c <accel_read_x>
 8012eda:	eef0 7a40 	vmov.f32	s15, s0
 8012ede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012ee2:	ee17 3a90 	vmov	r3, s15
 8012ee6:	623b      	str	r3, [r7, #32]
			  			  accel_y = accel_read_y();
 8012ee8:	f7fa f8f6 	bl	800d0d8 <accel_read_y>
 8012eec:	eef0 7a40 	vmov.f32	s15, s0
 8012ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012ef4:	ee17 3a90 	vmov	r3, s15
 8012ef8:	61fb      	str	r3, [r7, #28]
			  			  accel_z = accel_read_z();
 8012efa:	f7fa f913 	bl	800d124 <accel_read_z>
 8012efe:	eef0 7a40 	vmov.f32	s15, s0
 8012f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f06:	ee17 3a90 	vmov	r3, s15
 8012f0a:	61bb      	str	r3, [r7, #24]
			  			  gyro_x = gyro_read_x();
 8012f0c:	f7fa f934 	bl	800d178 <gyro_read_x>
 8012f10:	eef0 7a40 	vmov.f32	s15, s0
 8012f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f18:	ee17 3a90 	vmov	r3, s15
 8012f1c:	617b      	str	r3, [r7, #20]
			  			  gyro_y = gyro_read_y();
 8012f1e:	f7fa f967 	bl	800d1f0 <gyro_read_y>
 8012f22:	eef0 7a40 	vmov.f32	s15, s0
 8012f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f2a:	ee17 3a90 	vmov	r3, s15
 8012f2e:	613b      	str	r3, [r7, #16]
			  			  gyro_z = gyro_read_z();
 8012f30:	f7fa f99a 	bl	800d268 <gyro_read_z>
 8012f34:	eef0 7a40 	vmov.f32	s15, s0
 8012f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f3c:	ee17 3a90 	vmov	r3, s15
 8012f40:	60fb      	str	r3, [r7, #12]
			  			  deg_x = degree_x;
 8012f42:	4b1f      	ldr	r3, [pc, #124]	; (8012fc0 <sensor_test+0x240>)
 8012f44:	edd3 7a00 	vldr	s15, [r3]
 8012f48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f4c:	ee17 3a90 	vmov	r3, s15
 8012f50:	60bb      	str	r3, [r7, #8]
			  			  deg_y = degree_y;
 8012f52:	4b1c      	ldr	r3, [pc, #112]	; (8012fc4 <sensor_test+0x244>)
 8012f54:	edd3 7a00 	vldr	s15, [r3]
 8012f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f5c:	ee17 3a90 	vmov	r3, s15
 8012f60:	607b      	str	r3, [r7, #4]
			  			  deg_z = degree_z;
 8012f62:	4b19      	ldr	r3, [pc, #100]	; (8012fc8 <sensor_test+0x248>)
 8012f64:	edd3 7a00 	vldr	s15, [r3]
 8012f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f6c:	ee17 3a90 	vmov	r3, s15
 8012f70:	603b      	str	r3, [r7, #0]

			  			  //printf("Accel x: %3d, y: %3d, z: %3d\n", accel_x, accel_y, accel_z);
			  			  printf("Gyro  x: %3d, y: %3d, z: %3d\n", gyro_x, gyro_y, gyro_z);
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	693a      	ldr	r2, [r7, #16]
 8012f76:	6979      	ldr	r1, [r7, #20]
 8012f78:	4814      	ldr	r0, [pc, #80]	; (8012fcc <sensor_test+0x24c>)
 8012f7a:	f000 fbd9 	bl	8013730 <iprintf>
			  			  printf("Deg   x: %3d, y: %3d, z: %3d\n", deg_x, deg_y, deg_z);
 8012f7e:	683b      	ldr	r3, [r7, #0]
 8012f80:	687a      	ldr	r2, [r7, #4]
 8012f82:	68b9      	ldr	r1, [r7, #8]
 8012f84:	4812      	ldr	r0, [pc, #72]	; (8012fd0 <sensor_test+0x250>)
 8012f86:	f000 fbd3 	bl	8013730 <iprintf>
			  			  HAL_Delay(111);
 8012f8a:	206f      	movs	r0, #111	; 0x6f
 8012f8c:	f7ee f846 	bl	800101c <HAL_Delay>
			  			  accel_x = accel_read_x();
 8012f90:	e7a1      	b.n	8012ed6 <sensor_test+0x156>
		led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 8012f92:	e6fe      	b.n	8012d92 <sensor_test+0x12>
 8012f94:	08014ea8 	.word	0x08014ea8
 8012f98:	20000b2c 	.word	0x20000b2c
 8012f9c:	40020000 	.word	0x40020000
 8012fa0:	08014eb4 	.word	0x08014eb4
 8012fa4:	20000300 	.word	0x20000300
 8012fa8:	20000b3c 	.word	0x20000b3c
 8012fac:	20000d9c 	.word	0x20000d9c
 8012fb0:	20000c48 	.word	0x20000c48
 8012fb4:	20000fa8 	.word	0x20000fa8
 8012fb8:	08014ec8 	.word	0x08014ec8
 8012fbc:	08014ef8 	.word	0x08014ef8
 8012fc0:	20000488 	.word	0x20000488
 8012fc4:	20000fb4 	.word	0x20000fb4
 8012fc8:	20000b9c 	.word	0x20000b9c
 8012fcc:	08014f0c 	.word	0x08014f0c
 8012fd0:	08014f2c 	.word	0x08014f2c

08012fd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012fd4:	b480      	push	{r7}
 8012fd6:	b083      	sub	sp, #12
 8012fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012fda:	2300      	movs	r3, #0
 8012fdc:	607b      	str	r3, [r7, #4]
 8012fde:	4b10      	ldr	r3, [pc, #64]	; (8013020 <HAL_MspInit+0x4c>)
 8012fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012fe2:	4a0f      	ldr	r2, [pc, #60]	; (8013020 <HAL_MspInit+0x4c>)
 8012fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8012fea:	4b0d      	ldr	r3, [pc, #52]	; (8013020 <HAL_MspInit+0x4c>)
 8012fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012ff2:	607b      	str	r3, [r7, #4]
 8012ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	603b      	str	r3, [r7, #0]
 8012ffa:	4b09      	ldr	r3, [pc, #36]	; (8013020 <HAL_MspInit+0x4c>)
 8012ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ffe:	4a08      	ldr	r2, [pc, #32]	; (8013020 <HAL_MspInit+0x4c>)
 8013000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013004:	6413      	str	r3, [r2, #64]	; 0x40
 8013006:	4b06      	ldr	r3, [pc, #24]	; (8013020 <HAL_MspInit+0x4c>)
 8013008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801300a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801300e:	603b      	str	r3, [r7, #0]
 8013010:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8013012:	bf00      	nop
 8013014:	370c      	adds	r7, #12
 8013016:	46bd      	mov	sp, r7
 8013018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301c:	4770      	bx	lr
 801301e:	bf00      	nop
 8013020:	40023800 	.word	0x40023800

08013024 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b08a      	sub	sp, #40	; 0x28
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801302c:	f107 0314 	add.w	r3, r7, #20
 8013030:	2200      	movs	r2, #0
 8013032:	601a      	str	r2, [r3, #0]
 8013034:	605a      	str	r2, [r3, #4]
 8013036:	609a      	str	r2, [r3, #8]
 8013038:	60da      	str	r2, [r3, #12]
 801303a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	4a17      	ldr	r2, [pc, #92]	; (80130a0 <HAL_ADC_MspInit+0x7c>)
 8013042:	4293      	cmp	r3, r2
 8013044:	d127      	bne.n	8013096 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8013046:	2300      	movs	r3, #0
 8013048:	613b      	str	r3, [r7, #16]
 801304a:	4b16      	ldr	r3, [pc, #88]	; (80130a4 <HAL_ADC_MspInit+0x80>)
 801304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801304e:	4a15      	ldr	r2, [pc, #84]	; (80130a4 <HAL_ADC_MspInit+0x80>)
 8013050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013054:	6453      	str	r3, [r2, #68]	; 0x44
 8013056:	4b13      	ldr	r3, [pc, #76]	; (80130a4 <HAL_ADC_MspInit+0x80>)
 8013058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801305a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801305e:	613b      	str	r3, [r7, #16]
 8013060:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013062:	2300      	movs	r3, #0
 8013064:	60fb      	str	r3, [r7, #12]
 8013066:	4b0f      	ldr	r3, [pc, #60]	; (80130a4 <HAL_ADC_MspInit+0x80>)
 8013068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801306a:	4a0e      	ldr	r2, [pc, #56]	; (80130a4 <HAL_ADC_MspInit+0x80>)
 801306c:	f043 0301 	orr.w	r3, r3, #1
 8013070:	6313      	str	r3, [r2, #48]	; 0x30
 8013072:	4b0c      	ldr	r3, [pc, #48]	; (80130a4 <HAL_ADC_MspInit+0x80>)
 8013074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013076:	f003 0301 	and.w	r3, r3, #1
 801307a:	60fb      	str	r3, [r7, #12]
 801307c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 801307e:	230f      	movs	r3, #15
 8013080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8013082:	2303      	movs	r3, #3
 8013084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013086:	2300      	movs	r3, #0
 8013088:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801308a:	f107 0314 	add.w	r3, r7, #20
 801308e:	4619      	mov	r1, r3
 8013090:	4805      	ldr	r0, [pc, #20]	; (80130a8 <HAL_ADC_MspInit+0x84>)
 8013092:	f7ee ff85 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8013096:	bf00      	nop
 8013098:	3728      	adds	r7, #40	; 0x28
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}
 801309e:	bf00      	nop
 80130a0:	40012000 	.word	0x40012000
 80130a4:	40023800 	.word	0x40023800
 80130a8:	40020000 	.word	0x40020000

080130ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b08a      	sub	sp, #40	; 0x28
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80130b4:	f107 0314 	add.w	r3, r7, #20
 80130b8:	2200      	movs	r2, #0
 80130ba:	601a      	str	r2, [r3, #0]
 80130bc:	605a      	str	r2, [r3, #4]
 80130be:	609a      	str	r2, [r3, #8]
 80130c0:	60da      	str	r2, [r3, #12]
 80130c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	4a19      	ldr	r2, [pc, #100]	; (8013130 <HAL_SPI_MspInit+0x84>)
 80130ca:	4293      	cmp	r3, r2
 80130cc:	d12c      	bne.n	8013128 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80130ce:	2300      	movs	r3, #0
 80130d0:	613b      	str	r3, [r7, #16]
 80130d2:	4b18      	ldr	r3, [pc, #96]	; (8013134 <HAL_SPI_MspInit+0x88>)
 80130d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130d6:	4a17      	ldr	r2, [pc, #92]	; (8013134 <HAL_SPI_MspInit+0x88>)
 80130d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80130dc:	6413      	str	r3, [r2, #64]	; 0x40
 80130de:	4b15      	ldr	r3, [pc, #84]	; (8013134 <HAL_SPI_MspInit+0x88>)
 80130e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80130e6:	613b      	str	r3, [r7, #16]
 80130e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80130ea:	2300      	movs	r3, #0
 80130ec:	60fb      	str	r3, [r7, #12]
 80130ee:	4b11      	ldr	r3, [pc, #68]	; (8013134 <HAL_SPI_MspInit+0x88>)
 80130f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130f2:	4a10      	ldr	r2, [pc, #64]	; (8013134 <HAL_SPI_MspInit+0x88>)
 80130f4:	f043 0304 	orr.w	r3, r3, #4
 80130f8:	6313      	str	r3, [r2, #48]	; 0x30
 80130fa:	4b0e      	ldr	r3, [pc, #56]	; (8013134 <HAL_SPI_MspInit+0x88>)
 80130fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130fe:	f003 0304 	and.w	r3, r3, #4
 8013102:	60fb      	str	r3, [r7, #12]
 8013104:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8013106:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801310a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801310c:	2302      	movs	r3, #2
 801310e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013110:	2300      	movs	r3, #0
 8013112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013114:	2303      	movs	r3, #3
 8013116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8013118:	2306      	movs	r3, #6
 801311a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801311c:	f107 0314 	add.w	r3, r7, #20
 8013120:	4619      	mov	r1, r3
 8013122:	4805      	ldr	r0, [pc, #20]	; (8013138 <HAL_SPI_MspInit+0x8c>)
 8013124:	f7ee ff3c 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8013128:	bf00      	nop
 801312a:	3728      	adds	r7, #40	; 0x28
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}
 8013130:	40003c00 	.word	0x40003c00
 8013134:	40023800 	.word	0x40023800
 8013138:	40020800 	.word	0x40020800

0801313c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b086      	sub	sp, #24
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801314c:	d10e      	bne.n	801316c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 801314e:	2300      	movs	r3, #0
 8013150:	617b      	str	r3, [r7, #20]
 8013152:	4b20      	ldr	r3, [pc, #128]	; (80131d4 <HAL_TIM_Base_MspInit+0x98>)
 8013154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013156:	4a1f      	ldr	r2, [pc, #124]	; (80131d4 <HAL_TIM_Base_MspInit+0x98>)
 8013158:	f043 0301 	orr.w	r3, r3, #1
 801315c:	6413      	str	r3, [r2, #64]	; 0x40
 801315e:	4b1d      	ldr	r3, [pc, #116]	; (80131d4 <HAL_TIM_Base_MspInit+0x98>)
 8013160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013162:	f003 0301 	and.w	r3, r3, #1
 8013166:	617b      	str	r3, [r7, #20]
 8013168:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 801316a:	e02e      	b.n	80131ca <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	4a19      	ldr	r2, [pc, #100]	; (80131d8 <HAL_TIM_Base_MspInit+0x9c>)
 8013172:	4293      	cmp	r3, r2
 8013174:	d10e      	bne.n	8013194 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8013176:	2300      	movs	r3, #0
 8013178:	613b      	str	r3, [r7, #16]
 801317a:	4b16      	ldr	r3, [pc, #88]	; (80131d4 <HAL_TIM_Base_MspInit+0x98>)
 801317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801317e:	4a15      	ldr	r2, [pc, #84]	; (80131d4 <HAL_TIM_Base_MspInit+0x98>)
 8013180:	f043 0302 	orr.w	r3, r3, #2
 8013184:	6413      	str	r3, [r2, #64]	; 0x40
 8013186:	4b13      	ldr	r3, [pc, #76]	; (80131d4 <HAL_TIM_Base_MspInit+0x98>)
 8013188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801318a:	f003 0302 	and.w	r3, r3, #2
 801318e:	613b      	str	r3, [r7, #16]
 8013190:	693b      	ldr	r3, [r7, #16]
}
 8013192:	e01a      	b.n	80131ca <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	4a10      	ldr	r2, [pc, #64]	; (80131dc <HAL_TIM_Base_MspInit+0xa0>)
 801319a:	4293      	cmp	r3, r2
 801319c:	d115      	bne.n	80131ca <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 801319e:	2300      	movs	r3, #0
 80131a0:	60fb      	str	r3, [r7, #12]
 80131a2:	4b0c      	ldr	r3, [pc, #48]	; (80131d4 <HAL_TIM_Base_MspInit+0x98>)
 80131a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131a6:	4a0b      	ldr	r2, [pc, #44]	; (80131d4 <HAL_TIM_Base_MspInit+0x98>)
 80131a8:	f043 0310 	orr.w	r3, r3, #16
 80131ac:	6413      	str	r3, [r2, #64]	; 0x40
 80131ae:	4b09      	ldr	r3, [pc, #36]	; (80131d4 <HAL_TIM_Base_MspInit+0x98>)
 80131b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131b2:	f003 0310 	and.w	r3, r3, #16
 80131b6:	60fb      	str	r3, [r7, #12]
 80131b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80131ba:	2200      	movs	r2, #0
 80131bc:	2100      	movs	r1, #0
 80131be:	2036      	movs	r0, #54	; 0x36
 80131c0:	f7ee fbe3 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80131c4:	2036      	movs	r0, #54	; 0x36
 80131c6:	f7ee fbfc 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 80131ca:	bf00      	nop
 80131cc:	3718      	adds	r7, #24
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd80      	pop	{r7, pc}
 80131d2:	bf00      	nop
 80131d4:	40023800 	.word	0x40023800
 80131d8:	40000400 	.word	0x40000400
 80131dc:	40001000 	.word	0x40001000

080131e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b08c      	sub	sp, #48	; 0x30
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80131e8:	f107 031c 	add.w	r3, r7, #28
 80131ec:	2200      	movs	r2, #0
 80131ee:	601a      	str	r2, [r3, #0]
 80131f0:	605a      	str	r2, [r3, #4]
 80131f2:	609a      	str	r2, [r3, #8]
 80131f4:	60da      	str	r2, [r3, #12]
 80131f6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	4a32      	ldr	r2, [pc, #200]	; (80132c8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80131fe:	4293      	cmp	r3, r2
 8013200:	d12c      	bne.n	801325c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8013202:	2300      	movs	r3, #0
 8013204:	61bb      	str	r3, [r7, #24]
 8013206:	4b31      	ldr	r3, [pc, #196]	; (80132cc <HAL_TIM_Encoder_MspInit+0xec>)
 8013208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801320a:	4a30      	ldr	r2, [pc, #192]	; (80132cc <HAL_TIM_Encoder_MspInit+0xec>)
 801320c:	f043 0304 	orr.w	r3, r3, #4
 8013210:	6413      	str	r3, [r2, #64]	; 0x40
 8013212:	4b2e      	ldr	r3, [pc, #184]	; (80132cc <HAL_TIM_Encoder_MspInit+0xec>)
 8013214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013216:	f003 0304 	and.w	r3, r3, #4
 801321a:	61bb      	str	r3, [r7, #24]
 801321c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801321e:	2300      	movs	r3, #0
 8013220:	617b      	str	r3, [r7, #20]
 8013222:	4b2a      	ldr	r3, [pc, #168]	; (80132cc <HAL_TIM_Encoder_MspInit+0xec>)
 8013224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013226:	4a29      	ldr	r2, [pc, #164]	; (80132cc <HAL_TIM_Encoder_MspInit+0xec>)
 8013228:	f043 0302 	orr.w	r3, r3, #2
 801322c:	6313      	str	r3, [r2, #48]	; 0x30
 801322e:	4b27      	ldr	r3, [pc, #156]	; (80132cc <HAL_TIM_Encoder_MspInit+0xec>)
 8013230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013232:	f003 0302 	and.w	r3, r3, #2
 8013236:	617b      	str	r3, [r7, #20]
 8013238:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801323a:	23c0      	movs	r3, #192	; 0xc0
 801323c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801323e:	2302      	movs	r3, #2
 8013240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013242:	2300      	movs	r3, #0
 8013244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013246:	2300      	movs	r3, #0
 8013248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 801324a:	2302      	movs	r3, #2
 801324c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801324e:	f107 031c 	add.w	r3, r7, #28
 8013252:	4619      	mov	r1, r3
 8013254:	481e      	ldr	r0, [pc, #120]	; (80132d0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8013256:	f7ee fea3 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 801325a:	e030      	b.n	80132be <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	4a1c      	ldr	r2, [pc, #112]	; (80132d4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8013262:	4293      	cmp	r3, r2
 8013264:	d12b      	bne.n	80132be <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8013266:	2300      	movs	r3, #0
 8013268:	613b      	str	r3, [r7, #16]
 801326a:	4b18      	ldr	r3, [pc, #96]	; (80132cc <HAL_TIM_Encoder_MspInit+0xec>)
 801326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801326e:	4a17      	ldr	r2, [pc, #92]	; (80132cc <HAL_TIM_Encoder_MspInit+0xec>)
 8013270:	f043 0302 	orr.w	r3, r3, #2
 8013274:	6453      	str	r3, [r2, #68]	; 0x44
 8013276:	4b15      	ldr	r3, [pc, #84]	; (80132cc <HAL_TIM_Encoder_MspInit+0xec>)
 8013278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801327a:	f003 0302 	and.w	r3, r3, #2
 801327e:	613b      	str	r3, [r7, #16]
 8013280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013282:	2300      	movs	r3, #0
 8013284:	60fb      	str	r3, [r7, #12]
 8013286:	4b11      	ldr	r3, [pc, #68]	; (80132cc <HAL_TIM_Encoder_MspInit+0xec>)
 8013288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801328a:	4a10      	ldr	r2, [pc, #64]	; (80132cc <HAL_TIM_Encoder_MspInit+0xec>)
 801328c:	f043 0304 	orr.w	r3, r3, #4
 8013290:	6313      	str	r3, [r2, #48]	; 0x30
 8013292:	4b0e      	ldr	r3, [pc, #56]	; (80132cc <HAL_TIM_Encoder_MspInit+0xec>)
 8013294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013296:	f003 0304 	and.w	r3, r3, #4
 801329a:	60fb      	str	r3, [r7, #12]
 801329c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801329e:	23c0      	movs	r3, #192	; 0xc0
 80132a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80132a2:	2302      	movs	r3, #2
 80132a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132a6:	2300      	movs	r3, #0
 80132a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80132aa:	2300      	movs	r3, #0
 80132ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80132ae:	2303      	movs	r3, #3
 80132b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80132b2:	f107 031c 	add.w	r3, r7, #28
 80132b6:	4619      	mov	r1, r3
 80132b8:	4807      	ldr	r0, [pc, #28]	; (80132d8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80132ba:	f7ee fe71 	bl	8001fa0 <HAL_GPIO_Init>
}
 80132be:	bf00      	nop
 80132c0:	3730      	adds	r7, #48	; 0x30
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}
 80132c6:	bf00      	nop
 80132c8:	40000800 	.word	0x40000800
 80132cc:	40023800 	.word	0x40023800
 80132d0:	40020400 	.word	0x40020400
 80132d4:	40010400 	.word	0x40010400
 80132d8:	40020800 	.word	0x40020800

080132dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b08a      	sub	sp, #40	; 0x28
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80132e4:	f107 0314 	add.w	r3, r7, #20
 80132e8:	2200      	movs	r2, #0
 80132ea:	601a      	str	r2, [r3, #0]
 80132ec:	605a      	str	r2, [r3, #4]
 80132ee:	609a      	str	r2, [r3, #8]
 80132f0:	60da      	str	r2, [r3, #12]
 80132f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80132fc:	d13d      	bne.n	801337a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80132fe:	2300      	movs	r3, #0
 8013300:	613b      	str	r3, [r7, #16]
 8013302:	4b31      	ldr	r3, [pc, #196]	; (80133c8 <HAL_TIM_MspPostInit+0xec>)
 8013304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013306:	4a30      	ldr	r2, [pc, #192]	; (80133c8 <HAL_TIM_MspPostInit+0xec>)
 8013308:	f043 0301 	orr.w	r3, r3, #1
 801330c:	6313      	str	r3, [r2, #48]	; 0x30
 801330e:	4b2e      	ldr	r3, [pc, #184]	; (80133c8 <HAL_TIM_MspPostInit+0xec>)
 8013310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013312:	f003 0301 	and.w	r3, r3, #1
 8013316:	613b      	str	r3, [r7, #16]
 8013318:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801331a:	2300      	movs	r3, #0
 801331c:	60fb      	str	r3, [r7, #12]
 801331e:	4b2a      	ldr	r3, [pc, #168]	; (80133c8 <HAL_TIM_MspPostInit+0xec>)
 8013320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013322:	4a29      	ldr	r2, [pc, #164]	; (80133c8 <HAL_TIM_MspPostInit+0xec>)
 8013324:	f043 0302 	orr.w	r3, r3, #2
 8013328:	6313      	str	r3, [r2, #48]	; 0x30
 801332a:	4b27      	ldr	r3, [pc, #156]	; (80133c8 <HAL_TIM_MspPostInit+0xec>)
 801332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801332e:	f003 0302 	and.w	r3, r3, #2
 8013332:	60fb      	str	r3, [r7, #12]
 8013334:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8013336:	2320      	movs	r3, #32
 8013338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801333a:	2302      	movs	r3, #2
 801333c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801333e:	2300      	movs	r3, #0
 8013340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013342:	2300      	movs	r3, #0
 8013344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8013346:	2301      	movs	r3, #1
 8013348:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801334a:	f107 0314 	add.w	r3, r7, #20
 801334e:	4619      	mov	r1, r3
 8013350:	481e      	ldr	r0, [pc, #120]	; (80133cc <HAL_TIM_MspPostInit+0xf0>)
 8013352:	f7ee fe25 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8013356:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801335a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801335c:	2302      	movs	r3, #2
 801335e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013360:	2300      	movs	r3, #0
 8013362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013364:	2300      	movs	r3, #0
 8013366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8013368:	2301      	movs	r3, #1
 801336a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801336c:	f107 0314 	add.w	r3, r7, #20
 8013370:	4619      	mov	r1, r3
 8013372:	4817      	ldr	r0, [pc, #92]	; (80133d0 <HAL_TIM_MspPostInit+0xf4>)
 8013374:	f7ee fe14 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8013378:	e022      	b.n	80133c0 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	4a15      	ldr	r2, [pc, #84]	; (80133d4 <HAL_TIM_MspPostInit+0xf8>)
 8013380:	4293      	cmp	r3, r2
 8013382:	d11d      	bne.n	80133c0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013384:	2300      	movs	r3, #0
 8013386:	60bb      	str	r3, [r7, #8]
 8013388:	4b0f      	ldr	r3, [pc, #60]	; (80133c8 <HAL_TIM_MspPostInit+0xec>)
 801338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801338c:	4a0e      	ldr	r2, [pc, #56]	; (80133c8 <HAL_TIM_MspPostInit+0xec>)
 801338e:	f043 0302 	orr.w	r3, r3, #2
 8013392:	6313      	str	r3, [r2, #48]	; 0x30
 8013394:	4b0c      	ldr	r3, [pc, #48]	; (80133c8 <HAL_TIM_MspPostInit+0xec>)
 8013396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013398:	f003 0302 	and.w	r3, r3, #2
 801339c:	60bb      	str	r3, [r7, #8]
 801339e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80133a0:	2320      	movs	r3, #32
 80133a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80133a4:	2302      	movs	r3, #2
 80133a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133a8:	2300      	movs	r3, #0
 80133aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80133ac:	2300      	movs	r3, #0
 80133ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80133b0:	2302      	movs	r3, #2
 80133b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80133b4:	f107 0314 	add.w	r3, r7, #20
 80133b8:	4619      	mov	r1, r3
 80133ba:	4805      	ldr	r0, [pc, #20]	; (80133d0 <HAL_TIM_MspPostInit+0xf4>)
 80133bc:	f7ee fdf0 	bl	8001fa0 <HAL_GPIO_Init>
}
 80133c0:	bf00      	nop
 80133c2:	3728      	adds	r7, #40	; 0x28
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}
 80133c8:	40023800 	.word	0x40023800
 80133cc:	40020000 	.word	0x40020000
 80133d0:	40020400 	.word	0x40020400
 80133d4:	40000400 	.word	0x40000400

080133d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b08a      	sub	sp, #40	; 0x28
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80133e0:	f107 0314 	add.w	r3, r7, #20
 80133e4:	2200      	movs	r2, #0
 80133e6:	601a      	str	r2, [r3, #0]
 80133e8:	605a      	str	r2, [r3, #4]
 80133ea:	609a      	str	r2, [r3, #8]
 80133ec:	60da      	str	r2, [r3, #12]
 80133ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	4a19      	ldr	r2, [pc, #100]	; (801345c <HAL_UART_MspInit+0x84>)
 80133f6:	4293      	cmp	r3, r2
 80133f8:	d12c      	bne.n	8013454 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80133fa:	2300      	movs	r3, #0
 80133fc:	613b      	str	r3, [r7, #16]
 80133fe:	4b18      	ldr	r3, [pc, #96]	; (8013460 <HAL_UART_MspInit+0x88>)
 8013400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013402:	4a17      	ldr	r2, [pc, #92]	; (8013460 <HAL_UART_MspInit+0x88>)
 8013404:	f043 0310 	orr.w	r3, r3, #16
 8013408:	6453      	str	r3, [r2, #68]	; 0x44
 801340a:	4b15      	ldr	r3, [pc, #84]	; (8013460 <HAL_UART_MspInit+0x88>)
 801340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801340e:	f003 0310 	and.w	r3, r3, #16
 8013412:	613b      	str	r3, [r7, #16]
 8013414:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013416:	2300      	movs	r3, #0
 8013418:	60fb      	str	r3, [r7, #12]
 801341a:	4b11      	ldr	r3, [pc, #68]	; (8013460 <HAL_UART_MspInit+0x88>)
 801341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801341e:	4a10      	ldr	r2, [pc, #64]	; (8013460 <HAL_UART_MspInit+0x88>)
 8013420:	f043 0301 	orr.w	r3, r3, #1
 8013424:	6313      	str	r3, [r2, #48]	; 0x30
 8013426:	4b0e      	ldr	r3, [pc, #56]	; (8013460 <HAL_UART_MspInit+0x88>)
 8013428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801342a:	f003 0301 	and.w	r3, r3, #1
 801342e:	60fb      	str	r3, [r7, #12]
 8013430:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8013432:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8013436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013438:	2302      	movs	r3, #2
 801343a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801343c:	2301      	movs	r3, #1
 801343e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013440:	2303      	movs	r3, #3
 8013442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8013444:	2307      	movs	r3, #7
 8013446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013448:	f107 0314 	add.w	r3, r7, #20
 801344c:	4619      	mov	r1, r3
 801344e:	4805      	ldr	r0, [pc, #20]	; (8013464 <HAL_UART_MspInit+0x8c>)
 8013450:	f7ee fda6 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8013454:	bf00      	nop
 8013456:	3728      	adds	r7, #40	; 0x28
 8013458:	46bd      	mov	sp, r7
 801345a:	bd80      	pop	{r7, pc}
 801345c:	40011000 	.word	0x40011000
 8013460:	40023800 	.word	0x40023800
 8013464:	40020000 	.word	0x40020000

08013468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8013468:	b480      	push	{r7}
 801346a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 801346c:	bf00      	nop
 801346e:	46bd      	mov	sp, r7
 8013470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013474:	4770      	bx	lr

08013476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8013476:	b480      	push	{r7}
 8013478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801347a:	e7fe      	b.n	801347a <HardFault_Handler+0x4>

0801347c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801347c:	b480      	push	{r7}
 801347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8013480:	e7fe      	b.n	8013480 <MemManage_Handler+0x4>

08013482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8013482:	b480      	push	{r7}
 8013484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8013486:	e7fe      	b.n	8013486 <BusFault_Handler+0x4>

08013488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8013488:	b480      	push	{r7}
 801348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801348c:	e7fe      	b.n	801348c <UsageFault_Handler+0x4>

0801348e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801348e:	b480      	push	{r7}
 8013490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8013492:	bf00      	nop
 8013494:	46bd      	mov	sp, r7
 8013496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349a:	4770      	bx	lr

0801349c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801349c:	b480      	push	{r7}
 801349e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80134a0:	bf00      	nop
 80134a2:	46bd      	mov	sp, r7
 80134a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a8:	4770      	bx	lr

080134aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80134aa:	b480      	push	{r7}
 80134ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80134ae:	bf00      	nop
 80134b0:	46bd      	mov	sp, r7
 80134b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b6:	4770      	bx	lr

080134b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80134bc:	f7ed fd8e 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80134c0:	bf00      	nop
 80134c2:	bd80      	pop	{r7, pc}

080134c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80134c8:	4802      	ldr	r0, [pc, #8]	; (80134d4 <TIM6_DAC_IRQHandler+0x10>)
 80134ca:	f7f0 fa76 	bl	80039ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80134ce:	bf00      	nop
 80134d0:	bd80      	pop	{r7, pc}
 80134d2:	bf00      	nop
 80134d4:	20000bf8 	.word	0x20000bf8

080134d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b086      	sub	sp, #24
 80134dc:	af00      	add	r7, sp, #0
 80134de:	60f8      	str	r0, [r7, #12]
 80134e0:	60b9      	str	r1, [r7, #8]
 80134e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80134e4:	2300      	movs	r3, #0
 80134e6:	617b      	str	r3, [r7, #20]
 80134e8:	e00a      	b.n	8013500 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80134ea:	f3af 8000 	nop.w
 80134ee:	4601      	mov	r1, r0
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	1c5a      	adds	r2, r3, #1
 80134f4:	60ba      	str	r2, [r7, #8]
 80134f6:	b2ca      	uxtb	r2, r1
 80134f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80134fa:	697b      	ldr	r3, [r7, #20]
 80134fc:	3301      	adds	r3, #1
 80134fe:	617b      	str	r3, [r7, #20]
 8013500:	697a      	ldr	r2, [r7, #20]
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	429a      	cmp	r2, r3
 8013506:	dbf0      	blt.n	80134ea <_read+0x12>
	}

return len;
 8013508:	687b      	ldr	r3, [r7, #4]
}
 801350a:	4618      	mov	r0, r3
 801350c:	3718      	adds	r7, #24
 801350e:	46bd      	mov	sp, r7
 8013510:	bd80      	pop	{r7, pc}

08013512 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8013512:	b580      	push	{r7, lr}
 8013514:	b086      	sub	sp, #24
 8013516:	af00      	add	r7, sp, #0
 8013518:	60f8      	str	r0, [r7, #12]
 801351a:	60b9      	str	r1, [r7, #8]
 801351c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801351e:	2300      	movs	r3, #0
 8013520:	617b      	str	r3, [r7, #20]
 8013522:	e009      	b.n	8013538 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8013524:	68bb      	ldr	r3, [r7, #8]
 8013526:	1c5a      	adds	r2, r3, #1
 8013528:	60ba      	str	r2, [r7, #8]
 801352a:	781b      	ldrb	r3, [r3, #0]
 801352c:	4618      	mov	r0, r3
 801352e:	f7f9 fedd 	bl	800d2ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013532:	697b      	ldr	r3, [r7, #20]
 8013534:	3301      	adds	r3, #1
 8013536:	617b      	str	r3, [r7, #20]
 8013538:	697a      	ldr	r2, [r7, #20]
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	429a      	cmp	r2, r3
 801353e:	dbf1      	blt.n	8013524 <_write+0x12>
	}
	return len;
 8013540:	687b      	ldr	r3, [r7, #4]
}
 8013542:	4618      	mov	r0, r3
 8013544:	3718      	adds	r7, #24
 8013546:	46bd      	mov	sp, r7
 8013548:	bd80      	pop	{r7, pc}

0801354a <_close>:

int _close(int file)
{
 801354a:	b480      	push	{r7}
 801354c:	b083      	sub	sp, #12
 801354e:	af00      	add	r7, sp, #0
 8013550:	6078      	str	r0, [r7, #4]
	return -1;
 8013552:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013556:	4618      	mov	r0, r3
 8013558:	370c      	adds	r7, #12
 801355a:	46bd      	mov	sp, r7
 801355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013560:	4770      	bx	lr

08013562 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8013562:	b480      	push	{r7}
 8013564:	b083      	sub	sp, #12
 8013566:	af00      	add	r7, sp, #0
 8013568:	6078      	str	r0, [r7, #4]
 801356a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013572:	605a      	str	r2, [r3, #4]
	return 0;
 8013574:	2300      	movs	r3, #0
}
 8013576:	4618      	mov	r0, r3
 8013578:	370c      	adds	r7, #12
 801357a:	46bd      	mov	sp, r7
 801357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013580:	4770      	bx	lr

08013582 <_isatty>:

int _isatty(int file)
{
 8013582:	b480      	push	{r7}
 8013584:	b083      	sub	sp, #12
 8013586:	af00      	add	r7, sp, #0
 8013588:	6078      	str	r0, [r7, #4]
	return 1;
 801358a:	2301      	movs	r3, #1
}
 801358c:	4618      	mov	r0, r3
 801358e:	370c      	adds	r7, #12
 8013590:	46bd      	mov	sp, r7
 8013592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013596:	4770      	bx	lr

08013598 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8013598:	b480      	push	{r7}
 801359a:	b085      	sub	sp, #20
 801359c:	af00      	add	r7, sp, #0
 801359e:	60f8      	str	r0, [r7, #12]
 80135a0:	60b9      	str	r1, [r7, #8]
 80135a2:	607a      	str	r2, [r7, #4]
	return 0;
 80135a4:	2300      	movs	r3, #0
}
 80135a6:	4618      	mov	r0, r3
 80135a8:	3714      	adds	r7, #20
 80135aa:	46bd      	mov	sp, r7
 80135ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b0:	4770      	bx	lr
	...

080135b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b084      	sub	sp, #16
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80135bc:	4b11      	ldr	r3, [pc, #68]	; (8013604 <_sbrk+0x50>)
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d102      	bne.n	80135ca <_sbrk+0x16>
		heap_end = &end;
 80135c4:	4b0f      	ldr	r3, [pc, #60]	; (8013604 <_sbrk+0x50>)
 80135c6:	4a10      	ldr	r2, [pc, #64]	; (8013608 <_sbrk+0x54>)
 80135c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80135ca:	4b0e      	ldr	r3, [pc, #56]	; (8013604 <_sbrk+0x50>)
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80135d0:	4b0c      	ldr	r3, [pc, #48]	; (8013604 <_sbrk+0x50>)
 80135d2:	681a      	ldr	r2, [r3, #0]
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	4413      	add	r3, r2
 80135d8:	466a      	mov	r2, sp
 80135da:	4293      	cmp	r3, r2
 80135dc:	d907      	bls.n	80135ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80135de:	f000 f875 	bl	80136cc <__errno>
 80135e2:	4602      	mov	r2, r0
 80135e4:	230c      	movs	r3, #12
 80135e6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80135e8:	f04f 33ff 	mov.w	r3, #4294967295
 80135ec:	e006      	b.n	80135fc <_sbrk+0x48>
	}

	heap_end += incr;
 80135ee:	4b05      	ldr	r3, [pc, #20]	; (8013604 <_sbrk+0x50>)
 80135f0:	681a      	ldr	r2, [r3, #0]
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	4413      	add	r3, r2
 80135f6:	4a03      	ldr	r2, [pc, #12]	; (8013604 <_sbrk+0x50>)
 80135f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80135fa:	68fb      	ldr	r3, [r7, #12]
}
 80135fc:	4618      	mov	r0, r3
 80135fe:	3710      	adds	r7, #16
 8013600:	46bd      	mov	sp, r7
 8013602:	bd80      	pop	{r7, pc}
 8013604:	2000014c 	.word	0x2000014c
 8013608:	20001300 	.word	0x20001300

0801360c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801360c:	b480      	push	{r7}
 801360e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8013610:	4b16      	ldr	r3, [pc, #88]	; (801366c <SystemInit+0x60>)
 8013612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013616:	4a15      	ldr	r2, [pc, #84]	; (801366c <SystemInit+0x60>)
 8013618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801361c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8013620:	4b13      	ldr	r3, [pc, #76]	; (8013670 <SystemInit+0x64>)
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	4a12      	ldr	r2, [pc, #72]	; (8013670 <SystemInit+0x64>)
 8013626:	f043 0301 	orr.w	r3, r3, #1
 801362a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801362c:	4b10      	ldr	r3, [pc, #64]	; (8013670 <SystemInit+0x64>)
 801362e:	2200      	movs	r2, #0
 8013630:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8013632:	4b0f      	ldr	r3, [pc, #60]	; (8013670 <SystemInit+0x64>)
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	4a0e      	ldr	r2, [pc, #56]	; (8013670 <SystemInit+0x64>)
 8013638:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 801363c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013640:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8013642:	4b0b      	ldr	r3, [pc, #44]	; (8013670 <SystemInit+0x64>)
 8013644:	4a0b      	ldr	r2, [pc, #44]	; (8013674 <SystemInit+0x68>)
 8013646:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8013648:	4b09      	ldr	r3, [pc, #36]	; (8013670 <SystemInit+0x64>)
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	4a08      	ldr	r2, [pc, #32]	; (8013670 <SystemInit+0x64>)
 801364e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013652:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8013654:	4b06      	ldr	r3, [pc, #24]	; (8013670 <SystemInit+0x64>)
 8013656:	2200      	movs	r2, #0
 8013658:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801365a:	4b04      	ldr	r3, [pc, #16]	; (801366c <SystemInit+0x60>)
 801365c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013660:	609a      	str	r2, [r3, #8]
#endif
}
 8013662:	bf00      	nop
 8013664:	46bd      	mov	sp, r7
 8013666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366a:	4770      	bx	lr
 801366c:	e000ed00 	.word	0xe000ed00
 8013670:	40023800 	.word	0x40023800
 8013674:	24003010 	.word	0x24003010

08013678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8013678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80136b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801367c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801367e:	e003      	b.n	8013688 <LoopCopyDataInit>

08013680 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8013680:	4b0c      	ldr	r3, [pc, #48]	; (80136b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8013682:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8013684:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8013686:	3104      	adds	r1, #4

08013688 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8013688:	480b      	ldr	r0, [pc, #44]	; (80136b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801368a:	4b0c      	ldr	r3, [pc, #48]	; (80136bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801368c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801368e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8013690:	d3f6      	bcc.n	8013680 <CopyDataInit>
  ldr  r2, =_sbss
 8013692:	4a0b      	ldr	r2, [pc, #44]	; (80136c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8013694:	e002      	b.n	801369c <LoopFillZerobss>

08013696 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8013696:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8013698:	f842 3b04 	str.w	r3, [r2], #4

0801369c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801369c:	4b09      	ldr	r3, [pc, #36]	; (80136c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801369e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80136a0:	d3f9      	bcc.n	8013696 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80136a2:	f7ff ffb3 	bl	801360c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80136a6:	f000 f817 	bl	80136d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80136aa:	f7fb f9e9 	bl	800ea80 <main>
  bx  lr    
 80136ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80136b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80136b4:	08015010 	.word	0x08015010
  ldr  r0, =_sdata
 80136b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80136bc:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 80136c0:	20000124 	.word	0x20000124
  ldr  r3, = _ebss
 80136c4:	20001300 	.word	0x20001300

080136c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80136c8:	e7fe      	b.n	80136c8 <ADC_IRQHandler>
	...

080136cc <__errno>:
 80136cc:	4b01      	ldr	r3, [pc, #4]	; (80136d4 <__errno+0x8>)
 80136ce:	6818      	ldr	r0, [r3, #0]
 80136d0:	4770      	bx	lr
 80136d2:	bf00      	nop
 80136d4:	200000bc 	.word	0x200000bc

080136d8 <__libc_init_array>:
 80136d8:	b570      	push	{r4, r5, r6, lr}
 80136da:	4e0d      	ldr	r6, [pc, #52]	; (8013710 <__libc_init_array+0x38>)
 80136dc:	4c0d      	ldr	r4, [pc, #52]	; (8013714 <__libc_init_array+0x3c>)
 80136de:	1ba4      	subs	r4, r4, r6
 80136e0:	10a4      	asrs	r4, r4, #2
 80136e2:	2500      	movs	r5, #0
 80136e4:	42a5      	cmp	r5, r4
 80136e6:	d109      	bne.n	80136fc <__libc_init_array+0x24>
 80136e8:	4e0b      	ldr	r6, [pc, #44]	; (8013718 <__libc_init_array+0x40>)
 80136ea:	4c0c      	ldr	r4, [pc, #48]	; (801371c <__libc_init_array+0x44>)
 80136ec:	f001 f932 	bl	8014954 <_init>
 80136f0:	1ba4      	subs	r4, r4, r6
 80136f2:	10a4      	asrs	r4, r4, #2
 80136f4:	2500      	movs	r5, #0
 80136f6:	42a5      	cmp	r5, r4
 80136f8:	d105      	bne.n	8013706 <__libc_init_array+0x2e>
 80136fa:	bd70      	pop	{r4, r5, r6, pc}
 80136fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013700:	4798      	blx	r3
 8013702:	3501      	adds	r5, #1
 8013704:	e7ee      	b.n	80136e4 <__libc_init_array+0xc>
 8013706:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801370a:	4798      	blx	r3
 801370c:	3501      	adds	r5, #1
 801370e:	e7f2      	b.n	80136f6 <__libc_init_array+0x1e>
 8013710:	08015008 	.word	0x08015008
 8013714:	08015008 	.word	0x08015008
 8013718:	08015008 	.word	0x08015008
 801371c:	0801500c 	.word	0x0801500c

08013720 <memset>:
 8013720:	4402      	add	r2, r0
 8013722:	4603      	mov	r3, r0
 8013724:	4293      	cmp	r3, r2
 8013726:	d100      	bne.n	801372a <memset+0xa>
 8013728:	4770      	bx	lr
 801372a:	f803 1b01 	strb.w	r1, [r3], #1
 801372e:	e7f9      	b.n	8013724 <memset+0x4>

08013730 <iprintf>:
 8013730:	b40f      	push	{r0, r1, r2, r3}
 8013732:	4b0a      	ldr	r3, [pc, #40]	; (801375c <iprintf+0x2c>)
 8013734:	b513      	push	{r0, r1, r4, lr}
 8013736:	681c      	ldr	r4, [r3, #0]
 8013738:	b124      	cbz	r4, 8013744 <iprintf+0x14>
 801373a:	69a3      	ldr	r3, [r4, #24]
 801373c:	b913      	cbnz	r3, 8013744 <iprintf+0x14>
 801373e:	4620      	mov	r0, r4
 8013740:	f000 fad8 	bl	8013cf4 <__sinit>
 8013744:	ab05      	add	r3, sp, #20
 8013746:	9a04      	ldr	r2, [sp, #16]
 8013748:	68a1      	ldr	r1, [r4, #8]
 801374a:	9301      	str	r3, [sp, #4]
 801374c:	4620      	mov	r0, r4
 801374e:	f000 fc99 	bl	8014084 <_vfiprintf_r>
 8013752:	b002      	add	sp, #8
 8013754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013758:	b004      	add	sp, #16
 801375a:	4770      	bx	lr
 801375c:	200000bc 	.word	0x200000bc

08013760 <_puts_r>:
 8013760:	b570      	push	{r4, r5, r6, lr}
 8013762:	460e      	mov	r6, r1
 8013764:	4605      	mov	r5, r0
 8013766:	b118      	cbz	r0, 8013770 <_puts_r+0x10>
 8013768:	6983      	ldr	r3, [r0, #24]
 801376a:	b90b      	cbnz	r3, 8013770 <_puts_r+0x10>
 801376c:	f000 fac2 	bl	8013cf4 <__sinit>
 8013770:	69ab      	ldr	r3, [r5, #24]
 8013772:	68ac      	ldr	r4, [r5, #8]
 8013774:	b913      	cbnz	r3, 801377c <_puts_r+0x1c>
 8013776:	4628      	mov	r0, r5
 8013778:	f000 fabc 	bl	8013cf4 <__sinit>
 801377c:	4b23      	ldr	r3, [pc, #140]	; (801380c <_puts_r+0xac>)
 801377e:	429c      	cmp	r4, r3
 8013780:	d117      	bne.n	80137b2 <_puts_r+0x52>
 8013782:	686c      	ldr	r4, [r5, #4]
 8013784:	89a3      	ldrh	r3, [r4, #12]
 8013786:	071b      	lsls	r3, r3, #28
 8013788:	d51d      	bpl.n	80137c6 <_puts_r+0x66>
 801378a:	6923      	ldr	r3, [r4, #16]
 801378c:	b1db      	cbz	r3, 80137c6 <_puts_r+0x66>
 801378e:	3e01      	subs	r6, #1
 8013790:	68a3      	ldr	r3, [r4, #8]
 8013792:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013796:	3b01      	subs	r3, #1
 8013798:	60a3      	str	r3, [r4, #8]
 801379a:	b9e9      	cbnz	r1, 80137d8 <_puts_r+0x78>
 801379c:	2b00      	cmp	r3, #0
 801379e:	da2e      	bge.n	80137fe <_puts_r+0x9e>
 80137a0:	4622      	mov	r2, r4
 80137a2:	210a      	movs	r1, #10
 80137a4:	4628      	mov	r0, r5
 80137a6:	f000 f8f5 	bl	8013994 <__swbuf_r>
 80137aa:	3001      	adds	r0, #1
 80137ac:	d011      	beq.n	80137d2 <_puts_r+0x72>
 80137ae:	200a      	movs	r0, #10
 80137b0:	e011      	b.n	80137d6 <_puts_r+0x76>
 80137b2:	4b17      	ldr	r3, [pc, #92]	; (8013810 <_puts_r+0xb0>)
 80137b4:	429c      	cmp	r4, r3
 80137b6:	d101      	bne.n	80137bc <_puts_r+0x5c>
 80137b8:	68ac      	ldr	r4, [r5, #8]
 80137ba:	e7e3      	b.n	8013784 <_puts_r+0x24>
 80137bc:	4b15      	ldr	r3, [pc, #84]	; (8013814 <_puts_r+0xb4>)
 80137be:	429c      	cmp	r4, r3
 80137c0:	bf08      	it	eq
 80137c2:	68ec      	ldreq	r4, [r5, #12]
 80137c4:	e7de      	b.n	8013784 <_puts_r+0x24>
 80137c6:	4621      	mov	r1, r4
 80137c8:	4628      	mov	r0, r5
 80137ca:	f000 f935 	bl	8013a38 <__swsetup_r>
 80137ce:	2800      	cmp	r0, #0
 80137d0:	d0dd      	beq.n	801378e <_puts_r+0x2e>
 80137d2:	f04f 30ff 	mov.w	r0, #4294967295
 80137d6:	bd70      	pop	{r4, r5, r6, pc}
 80137d8:	2b00      	cmp	r3, #0
 80137da:	da04      	bge.n	80137e6 <_puts_r+0x86>
 80137dc:	69a2      	ldr	r2, [r4, #24]
 80137de:	429a      	cmp	r2, r3
 80137e0:	dc06      	bgt.n	80137f0 <_puts_r+0x90>
 80137e2:	290a      	cmp	r1, #10
 80137e4:	d004      	beq.n	80137f0 <_puts_r+0x90>
 80137e6:	6823      	ldr	r3, [r4, #0]
 80137e8:	1c5a      	adds	r2, r3, #1
 80137ea:	6022      	str	r2, [r4, #0]
 80137ec:	7019      	strb	r1, [r3, #0]
 80137ee:	e7cf      	b.n	8013790 <_puts_r+0x30>
 80137f0:	4622      	mov	r2, r4
 80137f2:	4628      	mov	r0, r5
 80137f4:	f000 f8ce 	bl	8013994 <__swbuf_r>
 80137f8:	3001      	adds	r0, #1
 80137fa:	d1c9      	bne.n	8013790 <_puts_r+0x30>
 80137fc:	e7e9      	b.n	80137d2 <_puts_r+0x72>
 80137fe:	6823      	ldr	r3, [r4, #0]
 8013800:	200a      	movs	r0, #10
 8013802:	1c5a      	adds	r2, r3, #1
 8013804:	6022      	str	r2, [r4, #0]
 8013806:	7018      	strb	r0, [r3, #0]
 8013808:	e7e5      	b.n	80137d6 <_puts_r+0x76>
 801380a:	bf00      	nop
 801380c:	08014f88 	.word	0x08014f88
 8013810:	08014fa8 	.word	0x08014fa8
 8013814:	08014f68 	.word	0x08014f68

08013818 <puts>:
 8013818:	4b02      	ldr	r3, [pc, #8]	; (8013824 <puts+0xc>)
 801381a:	4601      	mov	r1, r0
 801381c:	6818      	ldr	r0, [r3, #0]
 801381e:	f7ff bf9f 	b.w	8013760 <_puts_r>
 8013822:	bf00      	nop
 8013824:	200000bc 	.word	0x200000bc

08013828 <setbuf>:
 8013828:	2900      	cmp	r1, #0
 801382a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801382e:	bf0c      	ite	eq
 8013830:	2202      	moveq	r2, #2
 8013832:	2200      	movne	r2, #0
 8013834:	f000 b800 	b.w	8013838 <setvbuf>

08013838 <setvbuf>:
 8013838:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801383c:	461d      	mov	r5, r3
 801383e:	4b51      	ldr	r3, [pc, #324]	; (8013984 <setvbuf+0x14c>)
 8013840:	681e      	ldr	r6, [r3, #0]
 8013842:	4604      	mov	r4, r0
 8013844:	460f      	mov	r7, r1
 8013846:	4690      	mov	r8, r2
 8013848:	b126      	cbz	r6, 8013854 <setvbuf+0x1c>
 801384a:	69b3      	ldr	r3, [r6, #24]
 801384c:	b913      	cbnz	r3, 8013854 <setvbuf+0x1c>
 801384e:	4630      	mov	r0, r6
 8013850:	f000 fa50 	bl	8013cf4 <__sinit>
 8013854:	4b4c      	ldr	r3, [pc, #304]	; (8013988 <setvbuf+0x150>)
 8013856:	429c      	cmp	r4, r3
 8013858:	d152      	bne.n	8013900 <setvbuf+0xc8>
 801385a:	6874      	ldr	r4, [r6, #4]
 801385c:	f1b8 0f02 	cmp.w	r8, #2
 8013860:	d006      	beq.n	8013870 <setvbuf+0x38>
 8013862:	f1b8 0f01 	cmp.w	r8, #1
 8013866:	f200 8089 	bhi.w	801397c <setvbuf+0x144>
 801386a:	2d00      	cmp	r5, #0
 801386c:	f2c0 8086 	blt.w	801397c <setvbuf+0x144>
 8013870:	4621      	mov	r1, r4
 8013872:	4630      	mov	r0, r6
 8013874:	f000 f9d4 	bl	8013c20 <_fflush_r>
 8013878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801387a:	b141      	cbz	r1, 801388e <setvbuf+0x56>
 801387c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013880:	4299      	cmp	r1, r3
 8013882:	d002      	beq.n	801388a <setvbuf+0x52>
 8013884:	4630      	mov	r0, r6
 8013886:	f000 fb2b 	bl	8013ee0 <_free_r>
 801388a:	2300      	movs	r3, #0
 801388c:	6363      	str	r3, [r4, #52]	; 0x34
 801388e:	2300      	movs	r3, #0
 8013890:	61a3      	str	r3, [r4, #24]
 8013892:	6063      	str	r3, [r4, #4]
 8013894:	89a3      	ldrh	r3, [r4, #12]
 8013896:	061b      	lsls	r3, r3, #24
 8013898:	d503      	bpl.n	80138a2 <setvbuf+0x6a>
 801389a:	6921      	ldr	r1, [r4, #16]
 801389c:	4630      	mov	r0, r6
 801389e:	f000 fb1f 	bl	8013ee0 <_free_r>
 80138a2:	89a3      	ldrh	r3, [r4, #12]
 80138a4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80138a8:	f023 0303 	bic.w	r3, r3, #3
 80138ac:	f1b8 0f02 	cmp.w	r8, #2
 80138b0:	81a3      	strh	r3, [r4, #12]
 80138b2:	d05d      	beq.n	8013970 <setvbuf+0x138>
 80138b4:	ab01      	add	r3, sp, #4
 80138b6:	466a      	mov	r2, sp
 80138b8:	4621      	mov	r1, r4
 80138ba:	4630      	mov	r0, r6
 80138bc:	f000 faa4 	bl	8013e08 <__swhatbuf_r>
 80138c0:	89a3      	ldrh	r3, [r4, #12]
 80138c2:	4318      	orrs	r0, r3
 80138c4:	81a0      	strh	r0, [r4, #12]
 80138c6:	bb2d      	cbnz	r5, 8013914 <setvbuf+0xdc>
 80138c8:	9d00      	ldr	r5, [sp, #0]
 80138ca:	4628      	mov	r0, r5
 80138cc:	f000 fb00 	bl	8013ed0 <malloc>
 80138d0:	4607      	mov	r7, r0
 80138d2:	2800      	cmp	r0, #0
 80138d4:	d14e      	bne.n	8013974 <setvbuf+0x13c>
 80138d6:	f8dd 9000 	ldr.w	r9, [sp]
 80138da:	45a9      	cmp	r9, r5
 80138dc:	d13c      	bne.n	8013958 <setvbuf+0x120>
 80138de:	f04f 30ff 	mov.w	r0, #4294967295
 80138e2:	89a3      	ldrh	r3, [r4, #12]
 80138e4:	f043 0302 	orr.w	r3, r3, #2
 80138e8:	81a3      	strh	r3, [r4, #12]
 80138ea:	2300      	movs	r3, #0
 80138ec:	60a3      	str	r3, [r4, #8]
 80138ee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80138f2:	6023      	str	r3, [r4, #0]
 80138f4:	6123      	str	r3, [r4, #16]
 80138f6:	2301      	movs	r3, #1
 80138f8:	6163      	str	r3, [r4, #20]
 80138fa:	b003      	add	sp, #12
 80138fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013900:	4b22      	ldr	r3, [pc, #136]	; (801398c <setvbuf+0x154>)
 8013902:	429c      	cmp	r4, r3
 8013904:	d101      	bne.n	801390a <setvbuf+0xd2>
 8013906:	68b4      	ldr	r4, [r6, #8]
 8013908:	e7a8      	b.n	801385c <setvbuf+0x24>
 801390a:	4b21      	ldr	r3, [pc, #132]	; (8013990 <setvbuf+0x158>)
 801390c:	429c      	cmp	r4, r3
 801390e:	bf08      	it	eq
 8013910:	68f4      	ldreq	r4, [r6, #12]
 8013912:	e7a3      	b.n	801385c <setvbuf+0x24>
 8013914:	2f00      	cmp	r7, #0
 8013916:	d0d8      	beq.n	80138ca <setvbuf+0x92>
 8013918:	69b3      	ldr	r3, [r6, #24]
 801391a:	b913      	cbnz	r3, 8013922 <setvbuf+0xea>
 801391c:	4630      	mov	r0, r6
 801391e:	f000 f9e9 	bl	8013cf4 <__sinit>
 8013922:	f1b8 0f01 	cmp.w	r8, #1
 8013926:	bf08      	it	eq
 8013928:	89a3      	ldrheq	r3, [r4, #12]
 801392a:	6027      	str	r7, [r4, #0]
 801392c:	bf04      	itt	eq
 801392e:	f043 0301 	orreq.w	r3, r3, #1
 8013932:	81a3      	strheq	r3, [r4, #12]
 8013934:	89a3      	ldrh	r3, [r4, #12]
 8013936:	f013 0008 	ands.w	r0, r3, #8
 801393a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 801393e:	d01b      	beq.n	8013978 <setvbuf+0x140>
 8013940:	f013 0001 	ands.w	r0, r3, #1
 8013944:	bf18      	it	ne
 8013946:	426d      	negne	r5, r5
 8013948:	f04f 0300 	mov.w	r3, #0
 801394c:	bf1d      	ittte	ne
 801394e:	60a3      	strne	r3, [r4, #8]
 8013950:	61a5      	strne	r5, [r4, #24]
 8013952:	4618      	movne	r0, r3
 8013954:	60a5      	streq	r5, [r4, #8]
 8013956:	e7d0      	b.n	80138fa <setvbuf+0xc2>
 8013958:	4648      	mov	r0, r9
 801395a:	f000 fab9 	bl	8013ed0 <malloc>
 801395e:	4607      	mov	r7, r0
 8013960:	2800      	cmp	r0, #0
 8013962:	d0bc      	beq.n	80138de <setvbuf+0xa6>
 8013964:	89a3      	ldrh	r3, [r4, #12]
 8013966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801396a:	81a3      	strh	r3, [r4, #12]
 801396c:	464d      	mov	r5, r9
 801396e:	e7d3      	b.n	8013918 <setvbuf+0xe0>
 8013970:	2000      	movs	r0, #0
 8013972:	e7b6      	b.n	80138e2 <setvbuf+0xaa>
 8013974:	46a9      	mov	r9, r5
 8013976:	e7f5      	b.n	8013964 <setvbuf+0x12c>
 8013978:	60a0      	str	r0, [r4, #8]
 801397a:	e7be      	b.n	80138fa <setvbuf+0xc2>
 801397c:	f04f 30ff 	mov.w	r0, #4294967295
 8013980:	e7bb      	b.n	80138fa <setvbuf+0xc2>
 8013982:	bf00      	nop
 8013984:	200000bc 	.word	0x200000bc
 8013988:	08014f88 	.word	0x08014f88
 801398c:	08014fa8 	.word	0x08014fa8
 8013990:	08014f68 	.word	0x08014f68

08013994 <__swbuf_r>:
 8013994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013996:	460e      	mov	r6, r1
 8013998:	4614      	mov	r4, r2
 801399a:	4605      	mov	r5, r0
 801399c:	b118      	cbz	r0, 80139a6 <__swbuf_r+0x12>
 801399e:	6983      	ldr	r3, [r0, #24]
 80139a0:	b90b      	cbnz	r3, 80139a6 <__swbuf_r+0x12>
 80139a2:	f000 f9a7 	bl	8013cf4 <__sinit>
 80139a6:	4b21      	ldr	r3, [pc, #132]	; (8013a2c <__swbuf_r+0x98>)
 80139a8:	429c      	cmp	r4, r3
 80139aa:	d12a      	bne.n	8013a02 <__swbuf_r+0x6e>
 80139ac:	686c      	ldr	r4, [r5, #4]
 80139ae:	69a3      	ldr	r3, [r4, #24]
 80139b0:	60a3      	str	r3, [r4, #8]
 80139b2:	89a3      	ldrh	r3, [r4, #12]
 80139b4:	071a      	lsls	r2, r3, #28
 80139b6:	d52e      	bpl.n	8013a16 <__swbuf_r+0x82>
 80139b8:	6923      	ldr	r3, [r4, #16]
 80139ba:	b363      	cbz	r3, 8013a16 <__swbuf_r+0x82>
 80139bc:	6923      	ldr	r3, [r4, #16]
 80139be:	6820      	ldr	r0, [r4, #0]
 80139c0:	1ac0      	subs	r0, r0, r3
 80139c2:	6963      	ldr	r3, [r4, #20]
 80139c4:	b2f6      	uxtb	r6, r6
 80139c6:	4283      	cmp	r3, r0
 80139c8:	4637      	mov	r7, r6
 80139ca:	dc04      	bgt.n	80139d6 <__swbuf_r+0x42>
 80139cc:	4621      	mov	r1, r4
 80139ce:	4628      	mov	r0, r5
 80139d0:	f000 f926 	bl	8013c20 <_fflush_r>
 80139d4:	bb28      	cbnz	r0, 8013a22 <__swbuf_r+0x8e>
 80139d6:	68a3      	ldr	r3, [r4, #8]
 80139d8:	3b01      	subs	r3, #1
 80139da:	60a3      	str	r3, [r4, #8]
 80139dc:	6823      	ldr	r3, [r4, #0]
 80139de:	1c5a      	adds	r2, r3, #1
 80139e0:	6022      	str	r2, [r4, #0]
 80139e2:	701e      	strb	r6, [r3, #0]
 80139e4:	6963      	ldr	r3, [r4, #20]
 80139e6:	3001      	adds	r0, #1
 80139e8:	4283      	cmp	r3, r0
 80139ea:	d004      	beq.n	80139f6 <__swbuf_r+0x62>
 80139ec:	89a3      	ldrh	r3, [r4, #12]
 80139ee:	07db      	lsls	r3, r3, #31
 80139f0:	d519      	bpl.n	8013a26 <__swbuf_r+0x92>
 80139f2:	2e0a      	cmp	r6, #10
 80139f4:	d117      	bne.n	8013a26 <__swbuf_r+0x92>
 80139f6:	4621      	mov	r1, r4
 80139f8:	4628      	mov	r0, r5
 80139fa:	f000 f911 	bl	8013c20 <_fflush_r>
 80139fe:	b190      	cbz	r0, 8013a26 <__swbuf_r+0x92>
 8013a00:	e00f      	b.n	8013a22 <__swbuf_r+0x8e>
 8013a02:	4b0b      	ldr	r3, [pc, #44]	; (8013a30 <__swbuf_r+0x9c>)
 8013a04:	429c      	cmp	r4, r3
 8013a06:	d101      	bne.n	8013a0c <__swbuf_r+0x78>
 8013a08:	68ac      	ldr	r4, [r5, #8]
 8013a0a:	e7d0      	b.n	80139ae <__swbuf_r+0x1a>
 8013a0c:	4b09      	ldr	r3, [pc, #36]	; (8013a34 <__swbuf_r+0xa0>)
 8013a0e:	429c      	cmp	r4, r3
 8013a10:	bf08      	it	eq
 8013a12:	68ec      	ldreq	r4, [r5, #12]
 8013a14:	e7cb      	b.n	80139ae <__swbuf_r+0x1a>
 8013a16:	4621      	mov	r1, r4
 8013a18:	4628      	mov	r0, r5
 8013a1a:	f000 f80d 	bl	8013a38 <__swsetup_r>
 8013a1e:	2800      	cmp	r0, #0
 8013a20:	d0cc      	beq.n	80139bc <__swbuf_r+0x28>
 8013a22:	f04f 37ff 	mov.w	r7, #4294967295
 8013a26:	4638      	mov	r0, r7
 8013a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a2a:	bf00      	nop
 8013a2c:	08014f88 	.word	0x08014f88
 8013a30:	08014fa8 	.word	0x08014fa8
 8013a34:	08014f68 	.word	0x08014f68

08013a38 <__swsetup_r>:
 8013a38:	4b32      	ldr	r3, [pc, #200]	; (8013b04 <__swsetup_r+0xcc>)
 8013a3a:	b570      	push	{r4, r5, r6, lr}
 8013a3c:	681d      	ldr	r5, [r3, #0]
 8013a3e:	4606      	mov	r6, r0
 8013a40:	460c      	mov	r4, r1
 8013a42:	b125      	cbz	r5, 8013a4e <__swsetup_r+0x16>
 8013a44:	69ab      	ldr	r3, [r5, #24]
 8013a46:	b913      	cbnz	r3, 8013a4e <__swsetup_r+0x16>
 8013a48:	4628      	mov	r0, r5
 8013a4a:	f000 f953 	bl	8013cf4 <__sinit>
 8013a4e:	4b2e      	ldr	r3, [pc, #184]	; (8013b08 <__swsetup_r+0xd0>)
 8013a50:	429c      	cmp	r4, r3
 8013a52:	d10f      	bne.n	8013a74 <__swsetup_r+0x3c>
 8013a54:	686c      	ldr	r4, [r5, #4]
 8013a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a5a:	b29a      	uxth	r2, r3
 8013a5c:	0715      	lsls	r5, r2, #28
 8013a5e:	d42c      	bmi.n	8013aba <__swsetup_r+0x82>
 8013a60:	06d0      	lsls	r0, r2, #27
 8013a62:	d411      	bmi.n	8013a88 <__swsetup_r+0x50>
 8013a64:	2209      	movs	r2, #9
 8013a66:	6032      	str	r2, [r6, #0]
 8013a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a6c:	81a3      	strh	r3, [r4, #12]
 8013a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8013a72:	e03e      	b.n	8013af2 <__swsetup_r+0xba>
 8013a74:	4b25      	ldr	r3, [pc, #148]	; (8013b0c <__swsetup_r+0xd4>)
 8013a76:	429c      	cmp	r4, r3
 8013a78:	d101      	bne.n	8013a7e <__swsetup_r+0x46>
 8013a7a:	68ac      	ldr	r4, [r5, #8]
 8013a7c:	e7eb      	b.n	8013a56 <__swsetup_r+0x1e>
 8013a7e:	4b24      	ldr	r3, [pc, #144]	; (8013b10 <__swsetup_r+0xd8>)
 8013a80:	429c      	cmp	r4, r3
 8013a82:	bf08      	it	eq
 8013a84:	68ec      	ldreq	r4, [r5, #12]
 8013a86:	e7e6      	b.n	8013a56 <__swsetup_r+0x1e>
 8013a88:	0751      	lsls	r1, r2, #29
 8013a8a:	d512      	bpl.n	8013ab2 <__swsetup_r+0x7a>
 8013a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a8e:	b141      	cbz	r1, 8013aa2 <__swsetup_r+0x6a>
 8013a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a94:	4299      	cmp	r1, r3
 8013a96:	d002      	beq.n	8013a9e <__swsetup_r+0x66>
 8013a98:	4630      	mov	r0, r6
 8013a9a:	f000 fa21 	bl	8013ee0 <_free_r>
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	6363      	str	r3, [r4, #52]	; 0x34
 8013aa2:	89a3      	ldrh	r3, [r4, #12]
 8013aa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013aa8:	81a3      	strh	r3, [r4, #12]
 8013aaa:	2300      	movs	r3, #0
 8013aac:	6063      	str	r3, [r4, #4]
 8013aae:	6923      	ldr	r3, [r4, #16]
 8013ab0:	6023      	str	r3, [r4, #0]
 8013ab2:	89a3      	ldrh	r3, [r4, #12]
 8013ab4:	f043 0308 	orr.w	r3, r3, #8
 8013ab8:	81a3      	strh	r3, [r4, #12]
 8013aba:	6923      	ldr	r3, [r4, #16]
 8013abc:	b94b      	cbnz	r3, 8013ad2 <__swsetup_r+0x9a>
 8013abe:	89a3      	ldrh	r3, [r4, #12]
 8013ac0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013ac8:	d003      	beq.n	8013ad2 <__swsetup_r+0x9a>
 8013aca:	4621      	mov	r1, r4
 8013acc:	4630      	mov	r0, r6
 8013ace:	f000 f9bf 	bl	8013e50 <__smakebuf_r>
 8013ad2:	89a2      	ldrh	r2, [r4, #12]
 8013ad4:	f012 0301 	ands.w	r3, r2, #1
 8013ad8:	d00c      	beq.n	8013af4 <__swsetup_r+0xbc>
 8013ada:	2300      	movs	r3, #0
 8013adc:	60a3      	str	r3, [r4, #8]
 8013ade:	6963      	ldr	r3, [r4, #20]
 8013ae0:	425b      	negs	r3, r3
 8013ae2:	61a3      	str	r3, [r4, #24]
 8013ae4:	6923      	ldr	r3, [r4, #16]
 8013ae6:	b953      	cbnz	r3, 8013afe <__swsetup_r+0xc6>
 8013ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013aec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013af0:	d1ba      	bne.n	8013a68 <__swsetup_r+0x30>
 8013af2:	bd70      	pop	{r4, r5, r6, pc}
 8013af4:	0792      	lsls	r2, r2, #30
 8013af6:	bf58      	it	pl
 8013af8:	6963      	ldrpl	r3, [r4, #20]
 8013afa:	60a3      	str	r3, [r4, #8]
 8013afc:	e7f2      	b.n	8013ae4 <__swsetup_r+0xac>
 8013afe:	2000      	movs	r0, #0
 8013b00:	e7f7      	b.n	8013af2 <__swsetup_r+0xba>
 8013b02:	bf00      	nop
 8013b04:	200000bc 	.word	0x200000bc
 8013b08:	08014f88 	.word	0x08014f88
 8013b0c:	08014fa8 	.word	0x08014fa8
 8013b10:	08014f68 	.word	0x08014f68

08013b14 <__sflush_r>:
 8013b14:	898a      	ldrh	r2, [r1, #12]
 8013b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b1a:	4605      	mov	r5, r0
 8013b1c:	0710      	lsls	r0, r2, #28
 8013b1e:	460c      	mov	r4, r1
 8013b20:	d458      	bmi.n	8013bd4 <__sflush_r+0xc0>
 8013b22:	684b      	ldr	r3, [r1, #4]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	dc05      	bgt.n	8013b34 <__sflush_r+0x20>
 8013b28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	dc02      	bgt.n	8013b34 <__sflush_r+0x20>
 8013b2e:	2000      	movs	r0, #0
 8013b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b36:	2e00      	cmp	r6, #0
 8013b38:	d0f9      	beq.n	8013b2e <__sflush_r+0x1a>
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013b40:	682f      	ldr	r7, [r5, #0]
 8013b42:	6a21      	ldr	r1, [r4, #32]
 8013b44:	602b      	str	r3, [r5, #0]
 8013b46:	d032      	beq.n	8013bae <__sflush_r+0x9a>
 8013b48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013b4a:	89a3      	ldrh	r3, [r4, #12]
 8013b4c:	075a      	lsls	r2, r3, #29
 8013b4e:	d505      	bpl.n	8013b5c <__sflush_r+0x48>
 8013b50:	6863      	ldr	r3, [r4, #4]
 8013b52:	1ac0      	subs	r0, r0, r3
 8013b54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013b56:	b10b      	cbz	r3, 8013b5c <__sflush_r+0x48>
 8013b58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b5a:	1ac0      	subs	r0, r0, r3
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	4602      	mov	r2, r0
 8013b60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b62:	6a21      	ldr	r1, [r4, #32]
 8013b64:	4628      	mov	r0, r5
 8013b66:	47b0      	blx	r6
 8013b68:	1c43      	adds	r3, r0, #1
 8013b6a:	89a3      	ldrh	r3, [r4, #12]
 8013b6c:	d106      	bne.n	8013b7c <__sflush_r+0x68>
 8013b6e:	6829      	ldr	r1, [r5, #0]
 8013b70:	291d      	cmp	r1, #29
 8013b72:	d848      	bhi.n	8013c06 <__sflush_r+0xf2>
 8013b74:	4a29      	ldr	r2, [pc, #164]	; (8013c1c <__sflush_r+0x108>)
 8013b76:	40ca      	lsrs	r2, r1
 8013b78:	07d6      	lsls	r6, r2, #31
 8013b7a:	d544      	bpl.n	8013c06 <__sflush_r+0xf2>
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	6062      	str	r2, [r4, #4]
 8013b80:	04d9      	lsls	r1, r3, #19
 8013b82:	6922      	ldr	r2, [r4, #16]
 8013b84:	6022      	str	r2, [r4, #0]
 8013b86:	d504      	bpl.n	8013b92 <__sflush_r+0x7e>
 8013b88:	1c42      	adds	r2, r0, #1
 8013b8a:	d101      	bne.n	8013b90 <__sflush_r+0x7c>
 8013b8c:	682b      	ldr	r3, [r5, #0]
 8013b8e:	b903      	cbnz	r3, 8013b92 <__sflush_r+0x7e>
 8013b90:	6560      	str	r0, [r4, #84]	; 0x54
 8013b92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b94:	602f      	str	r7, [r5, #0]
 8013b96:	2900      	cmp	r1, #0
 8013b98:	d0c9      	beq.n	8013b2e <__sflush_r+0x1a>
 8013b9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b9e:	4299      	cmp	r1, r3
 8013ba0:	d002      	beq.n	8013ba8 <__sflush_r+0x94>
 8013ba2:	4628      	mov	r0, r5
 8013ba4:	f000 f99c 	bl	8013ee0 <_free_r>
 8013ba8:	2000      	movs	r0, #0
 8013baa:	6360      	str	r0, [r4, #52]	; 0x34
 8013bac:	e7c0      	b.n	8013b30 <__sflush_r+0x1c>
 8013bae:	2301      	movs	r3, #1
 8013bb0:	4628      	mov	r0, r5
 8013bb2:	47b0      	blx	r6
 8013bb4:	1c41      	adds	r1, r0, #1
 8013bb6:	d1c8      	bne.n	8013b4a <__sflush_r+0x36>
 8013bb8:	682b      	ldr	r3, [r5, #0]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d0c5      	beq.n	8013b4a <__sflush_r+0x36>
 8013bbe:	2b1d      	cmp	r3, #29
 8013bc0:	d001      	beq.n	8013bc6 <__sflush_r+0xb2>
 8013bc2:	2b16      	cmp	r3, #22
 8013bc4:	d101      	bne.n	8013bca <__sflush_r+0xb6>
 8013bc6:	602f      	str	r7, [r5, #0]
 8013bc8:	e7b1      	b.n	8013b2e <__sflush_r+0x1a>
 8013bca:	89a3      	ldrh	r3, [r4, #12]
 8013bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bd0:	81a3      	strh	r3, [r4, #12]
 8013bd2:	e7ad      	b.n	8013b30 <__sflush_r+0x1c>
 8013bd4:	690f      	ldr	r7, [r1, #16]
 8013bd6:	2f00      	cmp	r7, #0
 8013bd8:	d0a9      	beq.n	8013b2e <__sflush_r+0x1a>
 8013bda:	0793      	lsls	r3, r2, #30
 8013bdc:	680e      	ldr	r6, [r1, #0]
 8013bde:	bf08      	it	eq
 8013be0:	694b      	ldreq	r3, [r1, #20]
 8013be2:	600f      	str	r7, [r1, #0]
 8013be4:	bf18      	it	ne
 8013be6:	2300      	movne	r3, #0
 8013be8:	eba6 0807 	sub.w	r8, r6, r7
 8013bec:	608b      	str	r3, [r1, #8]
 8013bee:	f1b8 0f00 	cmp.w	r8, #0
 8013bf2:	dd9c      	ble.n	8013b2e <__sflush_r+0x1a>
 8013bf4:	4643      	mov	r3, r8
 8013bf6:	463a      	mov	r2, r7
 8013bf8:	6a21      	ldr	r1, [r4, #32]
 8013bfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013bfc:	4628      	mov	r0, r5
 8013bfe:	47b0      	blx	r6
 8013c00:	2800      	cmp	r0, #0
 8013c02:	dc06      	bgt.n	8013c12 <__sflush_r+0xfe>
 8013c04:	89a3      	ldrh	r3, [r4, #12]
 8013c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c0a:	81a3      	strh	r3, [r4, #12]
 8013c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8013c10:	e78e      	b.n	8013b30 <__sflush_r+0x1c>
 8013c12:	4407      	add	r7, r0
 8013c14:	eba8 0800 	sub.w	r8, r8, r0
 8013c18:	e7e9      	b.n	8013bee <__sflush_r+0xda>
 8013c1a:	bf00      	nop
 8013c1c:	20400001 	.word	0x20400001

08013c20 <_fflush_r>:
 8013c20:	b538      	push	{r3, r4, r5, lr}
 8013c22:	690b      	ldr	r3, [r1, #16]
 8013c24:	4605      	mov	r5, r0
 8013c26:	460c      	mov	r4, r1
 8013c28:	b1db      	cbz	r3, 8013c62 <_fflush_r+0x42>
 8013c2a:	b118      	cbz	r0, 8013c34 <_fflush_r+0x14>
 8013c2c:	6983      	ldr	r3, [r0, #24]
 8013c2e:	b90b      	cbnz	r3, 8013c34 <_fflush_r+0x14>
 8013c30:	f000 f860 	bl	8013cf4 <__sinit>
 8013c34:	4b0c      	ldr	r3, [pc, #48]	; (8013c68 <_fflush_r+0x48>)
 8013c36:	429c      	cmp	r4, r3
 8013c38:	d109      	bne.n	8013c4e <_fflush_r+0x2e>
 8013c3a:	686c      	ldr	r4, [r5, #4]
 8013c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c40:	b17b      	cbz	r3, 8013c62 <_fflush_r+0x42>
 8013c42:	4621      	mov	r1, r4
 8013c44:	4628      	mov	r0, r5
 8013c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c4a:	f7ff bf63 	b.w	8013b14 <__sflush_r>
 8013c4e:	4b07      	ldr	r3, [pc, #28]	; (8013c6c <_fflush_r+0x4c>)
 8013c50:	429c      	cmp	r4, r3
 8013c52:	d101      	bne.n	8013c58 <_fflush_r+0x38>
 8013c54:	68ac      	ldr	r4, [r5, #8]
 8013c56:	e7f1      	b.n	8013c3c <_fflush_r+0x1c>
 8013c58:	4b05      	ldr	r3, [pc, #20]	; (8013c70 <_fflush_r+0x50>)
 8013c5a:	429c      	cmp	r4, r3
 8013c5c:	bf08      	it	eq
 8013c5e:	68ec      	ldreq	r4, [r5, #12]
 8013c60:	e7ec      	b.n	8013c3c <_fflush_r+0x1c>
 8013c62:	2000      	movs	r0, #0
 8013c64:	bd38      	pop	{r3, r4, r5, pc}
 8013c66:	bf00      	nop
 8013c68:	08014f88 	.word	0x08014f88
 8013c6c:	08014fa8 	.word	0x08014fa8
 8013c70:	08014f68 	.word	0x08014f68

08013c74 <std>:
 8013c74:	2300      	movs	r3, #0
 8013c76:	b510      	push	{r4, lr}
 8013c78:	4604      	mov	r4, r0
 8013c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8013c7e:	6083      	str	r3, [r0, #8]
 8013c80:	8181      	strh	r1, [r0, #12]
 8013c82:	6643      	str	r3, [r0, #100]	; 0x64
 8013c84:	81c2      	strh	r2, [r0, #14]
 8013c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013c8a:	6183      	str	r3, [r0, #24]
 8013c8c:	4619      	mov	r1, r3
 8013c8e:	2208      	movs	r2, #8
 8013c90:	305c      	adds	r0, #92	; 0x5c
 8013c92:	f7ff fd45 	bl	8013720 <memset>
 8013c96:	4b05      	ldr	r3, [pc, #20]	; (8013cac <std+0x38>)
 8013c98:	6263      	str	r3, [r4, #36]	; 0x24
 8013c9a:	4b05      	ldr	r3, [pc, #20]	; (8013cb0 <std+0x3c>)
 8013c9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8013c9e:	4b05      	ldr	r3, [pc, #20]	; (8013cb4 <std+0x40>)
 8013ca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013ca2:	4b05      	ldr	r3, [pc, #20]	; (8013cb8 <std+0x44>)
 8013ca4:	6224      	str	r4, [r4, #32]
 8013ca6:	6323      	str	r3, [r4, #48]	; 0x30
 8013ca8:	bd10      	pop	{r4, pc}
 8013caa:	bf00      	nop
 8013cac:	080145e1 	.word	0x080145e1
 8013cb0:	08014603 	.word	0x08014603
 8013cb4:	0801463b 	.word	0x0801463b
 8013cb8:	0801465f 	.word	0x0801465f

08013cbc <_cleanup_r>:
 8013cbc:	4901      	ldr	r1, [pc, #4]	; (8013cc4 <_cleanup_r+0x8>)
 8013cbe:	f000 b885 	b.w	8013dcc <_fwalk_reent>
 8013cc2:	bf00      	nop
 8013cc4:	08013c21 	.word	0x08013c21

08013cc8 <__sfmoreglue>:
 8013cc8:	b570      	push	{r4, r5, r6, lr}
 8013cca:	1e4a      	subs	r2, r1, #1
 8013ccc:	2568      	movs	r5, #104	; 0x68
 8013cce:	4355      	muls	r5, r2
 8013cd0:	460e      	mov	r6, r1
 8013cd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013cd6:	f000 f951 	bl	8013f7c <_malloc_r>
 8013cda:	4604      	mov	r4, r0
 8013cdc:	b140      	cbz	r0, 8013cf0 <__sfmoreglue+0x28>
 8013cde:	2100      	movs	r1, #0
 8013ce0:	e9c0 1600 	strd	r1, r6, [r0]
 8013ce4:	300c      	adds	r0, #12
 8013ce6:	60a0      	str	r0, [r4, #8]
 8013ce8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013cec:	f7ff fd18 	bl	8013720 <memset>
 8013cf0:	4620      	mov	r0, r4
 8013cf2:	bd70      	pop	{r4, r5, r6, pc}

08013cf4 <__sinit>:
 8013cf4:	6983      	ldr	r3, [r0, #24]
 8013cf6:	b510      	push	{r4, lr}
 8013cf8:	4604      	mov	r4, r0
 8013cfa:	bb33      	cbnz	r3, 8013d4a <__sinit+0x56>
 8013cfc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013d00:	6503      	str	r3, [r0, #80]	; 0x50
 8013d02:	4b12      	ldr	r3, [pc, #72]	; (8013d4c <__sinit+0x58>)
 8013d04:	4a12      	ldr	r2, [pc, #72]	; (8013d50 <__sinit+0x5c>)
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	6282      	str	r2, [r0, #40]	; 0x28
 8013d0a:	4298      	cmp	r0, r3
 8013d0c:	bf04      	itt	eq
 8013d0e:	2301      	moveq	r3, #1
 8013d10:	6183      	streq	r3, [r0, #24]
 8013d12:	f000 f81f 	bl	8013d54 <__sfp>
 8013d16:	6060      	str	r0, [r4, #4]
 8013d18:	4620      	mov	r0, r4
 8013d1a:	f000 f81b 	bl	8013d54 <__sfp>
 8013d1e:	60a0      	str	r0, [r4, #8]
 8013d20:	4620      	mov	r0, r4
 8013d22:	f000 f817 	bl	8013d54 <__sfp>
 8013d26:	2200      	movs	r2, #0
 8013d28:	60e0      	str	r0, [r4, #12]
 8013d2a:	2104      	movs	r1, #4
 8013d2c:	6860      	ldr	r0, [r4, #4]
 8013d2e:	f7ff ffa1 	bl	8013c74 <std>
 8013d32:	2201      	movs	r2, #1
 8013d34:	2109      	movs	r1, #9
 8013d36:	68a0      	ldr	r0, [r4, #8]
 8013d38:	f7ff ff9c 	bl	8013c74 <std>
 8013d3c:	2202      	movs	r2, #2
 8013d3e:	2112      	movs	r1, #18
 8013d40:	68e0      	ldr	r0, [r4, #12]
 8013d42:	f7ff ff97 	bl	8013c74 <std>
 8013d46:	2301      	movs	r3, #1
 8013d48:	61a3      	str	r3, [r4, #24]
 8013d4a:	bd10      	pop	{r4, pc}
 8013d4c:	08014f64 	.word	0x08014f64
 8013d50:	08013cbd 	.word	0x08013cbd

08013d54 <__sfp>:
 8013d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d56:	4b1b      	ldr	r3, [pc, #108]	; (8013dc4 <__sfp+0x70>)
 8013d58:	681e      	ldr	r6, [r3, #0]
 8013d5a:	69b3      	ldr	r3, [r6, #24]
 8013d5c:	4607      	mov	r7, r0
 8013d5e:	b913      	cbnz	r3, 8013d66 <__sfp+0x12>
 8013d60:	4630      	mov	r0, r6
 8013d62:	f7ff ffc7 	bl	8013cf4 <__sinit>
 8013d66:	3648      	adds	r6, #72	; 0x48
 8013d68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013d6c:	3b01      	subs	r3, #1
 8013d6e:	d503      	bpl.n	8013d78 <__sfp+0x24>
 8013d70:	6833      	ldr	r3, [r6, #0]
 8013d72:	b133      	cbz	r3, 8013d82 <__sfp+0x2e>
 8013d74:	6836      	ldr	r6, [r6, #0]
 8013d76:	e7f7      	b.n	8013d68 <__sfp+0x14>
 8013d78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013d7c:	b16d      	cbz	r5, 8013d9a <__sfp+0x46>
 8013d7e:	3468      	adds	r4, #104	; 0x68
 8013d80:	e7f4      	b.n	8013d6c <__sfp+0x18>
 8013d82:	2104      	movs	r1, #4
 8013d84:	4638      	mov	r0, r7
 8013d86:	f7ff ff9f 	bl	8013cc8 <__sfmoreglue>
 8013d8a:	6030      	str	r0, [r6, #0]
 8013d8c:	2800      	cmp	r0, #0
 8013d8e:	d1f1      	bne.n	8013d74 <__sfp+0x20>
 8013d90:	230c      	movs	r3, #12
 8013d92:	603b      	str	r3, [r7, #0]
 8013d94:	4604      	mov	r4, r0
 8013d96:	4620      	mov	r0, r4
 8013d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d9a:	4b0b      	ldr	r3, [pc, #44]	; (8013dc8 <__sfp+0x74>)
 8013d9c:	6665      	str	r5, [r4, #100]	; 0x64
 8013d9e:	e9c4 5500 	strd	r5, r5, [r4]
 8013da2:	60a5      	str	r5, [r4, #8]
 8013da4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013da8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013dac:	2208      	movs	r2, #8
 8013dae:	4629      	mov	r1, r5
 8013db0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013db4:	f7ff fcb4 	bl	8013720 <memset>
 8013db8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013dbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013dc0:	e7e9      	b.n	8013d96 <__sfp+0x42>
 8013dc2:	bf00      	nop
 8013dc4:	08014f64 	.word	0x08014f64
 8013dc8:	ffff0001 	.word	0xffff0001

08013dcc <_fwalk_reent>:
 8013dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013dd0:	4680      	mov	r8, r0
 8013dd2:	4689      	mov	r9, r1
 8013dd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013dd8:	2600      	movs	r6, #0
 8013dda:	b914      	cbnz	r4, 8013de2 <_fwalk_reent+0x16>
 8013ddc:	4630      	mov	r0, r6
 8013dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013de2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013de6:	3f01      	subs	r7, #1
 8013de8:	d501      	bpl.n	8013dee <_fwalk_reent+0x22>
 8013dea:	6824      	ldr	r4, [r4, #0]
 8013dec:	e7f5      	b.n	8013dda <_fwalk_reent+0xe>
 8013dee:	89ab      	ldrh	r3, [r5, #12]
 8013df0:	2b01      	cmp	r3, #1
 8013df2:	d907      	bls.n	8013e04 <_fwalk_reent+0x38>
 8013df4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013df8:	3301      	adds	r3, #1
 8013dfa:	d003      	beq.n	8013e04 <_fwalk_reent+0x38>
 8013dfc:	4629      	mov	r1, r5
 8013dfe:	4640      	mov	r0, r8
 8013e00:	47c8      	blx	r9
 8013e02:	4306      	orrs	r6, r0
 8013e04:	3568      	adds	r5, #104	; 0x68
 8013e06:	e7ee      	b.n	8013de6 <_fwalk_reent+0x1a>

08013e08 <__swhatbuf_r>:
 8013e08:	b570      	push	{r4, r5, r6, lr}
 8013e0a:	460e      	mov	r6, r1
 8013e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e10:	2900      	cmp	r1, #0
 8013e12:	b096      	sub	sp, #88	; 0x58
 8013e14:	4614      	mov	r4, r2
 8013e16:	461d      	mov	r5, r3
 8013e18:	da07      	bge.n	8013e2a <__swhatbuf_r+0x22>
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	602b      	str	r3, [r5, #0]
 8013e1e:	89b3      	ldrh	r3, [r6, #12]
 8013e20:	061a      	lsls	r2, r3, #24
 8013e22:	d410      	bmi.n	8013e46 <__swhatbuf_r+0x3e>
 8013e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013e28:	e00e      	b.n	8013e48 <__swhatbuf_r+0x40>
 8013e2a:	466a      	mov	r2, sp
 8013e2c:	f000 fc3e 	bl	80146ac <_fstat_r>
 8013e30:	2800      	cmp	r0, #0
 8013e32:	dbf2      	blt.n	8013e1a <__swhatbuf_r+0x12>
 8013e34:	9a01      	ldr	r2, [sp, #4]
 8013e36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013e3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013e3e:	425a      	negs	r2, r3
 8013e40:	415a      	adcs	r2, r3
 8013e42:	602a      	str	r2, [r5, #0]
 8013e44:	e7ee      	b.n	8013e24 <__swhatbuf_r+0x1c>
 8013e46:	2340      	movs	r3, #64	; 0x40
 8013e48:	2000      	movs	r0, #0
 8013e4a:	6023      	str	r3, [r4, #0]
 8013e4c:	b016      	add	sp, #88	; 0x58
 8013e4e:	bd70      	pop	{r4, r5, r6, pc}

08013e50 <__smakebuf_r>:
 8013e50:	898b      	ldrh	r3, [r1, #12]
 8013e52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013e54:	079d      	lsls	r5, r3, #30
 8013e56:	4606      	mov	r6, r0
 8013e58:	460c      	mov	r4, r1
 8013e5a:	d507      	bpl.n	8013e6c <__smakebuf_r+0x1c>
 8013e5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013e60:	6023      	str	r3, [r4, #0]
 8013e62:	6123      	str	r3, [r4, #16]
 8013e64:	2301      	movs	r3, #1
 8013e66:	6163      	str	r3, [r4, #20]
 8013e68:	b002      	add	sp, #8
 8013e6a:	bd70      	pop	{r4, r5, r6, pc}
 8013e6c:	ab01      	add	r3, sp, #4
 8013e6e:	466a      	mov	r2, sp
 8013e70:	f7ff ffca 	bl	8013e08 <__swhatbuf_r>
 8013e74:	9900      	ldr	r1, [sp, #0]
 8013e76:	4605      	mov	r5, r0
 8013e78:	4630      	mov	r0, r6
 8013e7a:	f000 f87f 	bl	8013f7c <_malloc_r>
 8013e7e:	b948      	cbnz	r0, 8013e94 <__smakebuf_r+0x44>
 8013e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e84:	059a      	lsls	r2, r3, #22
 8013e86:	d4ef      	bmi.n	8013e68 <__smakebuf_r+0x18>
 8013e88:	f023 0303 	bic.w	r3, r3, #3
 8013e8c:	f043 0302 	orr.w	r3, r3, #2
 8013e90:	81a3      	strh	r3, [r4, #12]
 8013e92:	e7e3      	b.n	8013e5c <__smakebuf_r+0xc>
 8013e94:	4b0d      	ldr	r3, [pc, #52]	; (8013ecc <__smakebuf_r+0x7c>)
 8013e96:	62b3      	str	r3, [r6, #40]	; 0x28
 8013e98:	89a3      	ldrh	r3, [r4, #12]
 8013e9a:	6020      	str	r0, [r4, #0]
 8013e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ea0:	81a3      	strh	r3, [r4, #12]
 8013ea2:	9b00      	ldr	r3, [sp, #0]
 8013ea4:	6163      	str	r3, [r4, #20]
 8013ea6:	9b01      	ldr	r3, [sp, #4]
 8013ea8:	6120      	str	r0, [r4, #16]
 8013eaa:	b15b      	cbz	r3, 8013ec4 <__smakebuf_r+0x74>
 8013eac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013eb0:	4630      	mov	r0, r6
 8013eb2:	f000 fc0d 	bl	80146d0 <_isatty_r>
 8013eb6:	b128      	cbz	r0, 8013ec4 <__smakebuf_r+0x74>
 8013eb8:	89a3      	ldrh	r3, [r4, #12]
 8013eba:	f023 0303 	bic.w	r3, r3, #3
 8013ebe:	f043 0301 	orr.w	r3, r3, #1
 8013ec2:	81a3      	strh	r3, [r4, #12]
 8013ec4:	89a3      	ldrh	r3, [r4, #12]
 8013ec6:	431d      	orrs	r5, r3
 8013ec8:	81a5      	strh	r5, [r4, #12]
 8013eca:	e7cd      	b.n	8013e68 <__smakebuf_r+0x18>
 8013ecc:	08013cbd 	.word	0x08013cbd

08013ed0 <malloc>:
 8013ed0:	4b02      	ldr	r3, [pc, #8]	; (8013edc <malloc+0xc>)
 8013ed2:	4601      	mov	r1, r0
 8013ed4:	6818      	ldr	r0, [r3, #0]
 8013ed6:	f000 b851 	b.w	8013f7c <_malloc_r>
 8013eda:	bf00      	nop
 8013edc:	200000bc 	.word	0x200000bc

08013ee0 <_free_r>:
 8013ee0:	b538      	push	{r3, r4, r5, lr}
 8013ee2:	4605      	mov	r5, r0
 8013ee4:	2900      	cmp	r1, #0
 8013ee6:	d045      	beq.n	8013f74 <_free_r+0x94>
 8013ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013eec:	1f0c      	subs	r4, r1, #4
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	bfb8      	it	lt
 8013ef2:	18e4      	addlt	r4, r4, r3
 8013ef4:	f000 fc0e 	bl	8014714 <__malloc_lock>
 8013ef8:	4a1f      	ldr	r2, [pc, #124]	; (8013f78 <_free_r+0x98>)
 8013efa:	6813      	ldr	r3, [r2, #0]
 8013efc:	4610      	mov	r0, r2
 8013efe:	b933      	cbnz	r3, 8013f0e <_free_r+0x2e>
 8013f00:	6063      	str	r3, [r4, #4]
 8013f02:	6014      	str	r4, [r2, #0]
 8013f04:	4628      	mov	r0, r5
 8013f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f0a:	f000 bc04 	b.w	8014716 <__malloc_unlock>
 8013f0e:	42a3      	cmp	r3, r4
 8013f10:	d90c      	bls.n	8013f2c <_free_r+0x4c>
 8013f12:	6821      	ldr	r1, [r4, #0]
 8013f14:	1862      	adds	r2, r4, r1
 8013f16:	4293      	cmp	r3, r2
 8013f18:	bf04      	itt	eq
 8013f1a:	681a      	ldreq	r2, [r3, #0]
 8013f1c:	685b      	ldreq	r3, [r3, #4]
 8013f1e:	6063      	str	r3, [r4, #4]
 8013f20:	bf04      	itt	eq
 8013f22:	1852      	addeq	r2, r2, r1
 8013f24:	6022      	streq	r2, [r4, #0]
 8013f26:	6004      	str	r4, [r0, #0]
 8013f28:	e7ec      	b.n	8013f04 <_free_r+0x24>
 8013f2a:	4613      	mov	r3, r2
 8013f2c:	685a      	ldr	r2, [r3, #4]
 8013f2e:	b10a      	cbz	r2, 8013f34 <_free_r+0x54>
 8013f30:	42a2      	cmp	r2, r4
 8013f32:	d9fa      	bls.n	8013f2a <_free_r+0x4a>
 8013f34:	6819      	ldr	r1, [r3, #0]
 8013f36:	1858      	adds	r0, r3, r1
 8013f38:	42a0      	cmp	r0, r4
 8013f3a:	d10b      	bne.n	8013f54 <_free_r+0x74>
 8013f3c:	6820      	ldr	r0, [r4, #0]
 8013f3e:	4401      	add	r1, r0
 8013f40:	1858      	adds	r0, r3, r1
 8013f42:	4282      	cmp	r2, r0
 8013f44:	6019      	str	r1, [r3, #0]
 8013f46:	d1dd      	bne.n	8013f04 <_free_r+0x24>
 8013f48:	6810      	ldr	r0, [r2, #0]
 8013f4a:	6852      	ldr	r2, [r2, #4]
 8013f4c:	605a      	str	r2, [r3, #4]
 8013f4e:	4401      	add	r1, r0
 8013f50:	6019      	str	r1, [r3, #0]
 8013f52:	e7d7      	b.n	8013f04 <_free_r+0x24>
 8013f54:	d902      	bls.n	8013f5c <_free_r+0x7c>
 8013f56:	230c      	movs	r3, #12
 8013f58:	602b      	str	r3, [r5, #0]
 8013f5a:	e7d3      	b.n	8013f04 <_free_r+0x24>
 8013f5c:	6820      	ldr	r0, [r4, #0]
 8013f5e:	1821      	adds	r1, r4, r0
 8013f60:	428a      	cmp	r2, r1
 8013f62:	bf04      	itt	eq
 8013f64:	6811      	ldreq	r1, [r2, #0]
 8013f66:	6852      	ldreq	r2, [r2, #4]
 8013f68:	6062      	str	r2, [r4, #4]
 8013f6a:	bf04      	itt	eq
 8013f6c:	1809      	addeq	r1, r1, r0
 8013f6e:	6021      	streq	r1, [r4, #0]
 8013f70:	605c      	str	r4, [r3, #4]
 8013f72:	e7c7      	b.n	8013f04 <_free_r+0x24>
 8013f74:	bd38      	pop	{r3, r4, r5, pc}
 8013f76:	bf00      	nop
 8013f78:	20000150 	.word	0x20000150

08013f7c <_malloc_r>:
 8013f7c:	b570      	push	{r4, r5, r6, lr}
 8013f7e:	1ccd      	adds	r5, r1, #3
 8013f80:	f025 0503 	bic.w	r5, r5, #3
 8013f84:	3508      	adds	r5, #8
 8013f86:	2d0c      	cmp	r5, #12
 8013f88:	bf38      	it	cc
 8013f8a:	250c      	movcc	r5, #12
 8013f8c:	2d00      	cmp	r5, #0
 8013f8e:	4606      	mov	r6, r0
 8013f90:	db01      	blt.n	8013f96 <_malloc_r+0x1a>
 8013f92:	42a9      	cmp	r1, r5
 8013f94:	d903      	bls.n	8013f9e <_malloc_r+0x22>
 8013f96:	230c      	movs	r3, #12
 8013f98:	6033      	str	r3, [r6, #0]
 8013f9a:	2000      	movs	r0, #0
 8013f9c:	bd70      	pop	{r4, r5, r6, pc}
 8013f9e:	f000 fbb9 	bl	8014714 <__malloc_lock>
 8013fa2:	4a21      	ldr	r2, [pc, #132]	; (8014028 <_malloc_r+0xac>)
 8013fa4:	6814      	ldr	r4, [r2, #0]
 8013fa6:	4621      	mov	r1, r4
 8013fa8:	b991      	cbnz	r1, 8013fd0 <_malloc_r+0x54>
 8013faa:	4c20      	ldr	r4, [pc, #128]	; (801402c <_malloc_r+0xb0>)
 8013fac:	6823      	ldr	r3, [r4, #0]
 8013fae:	b91b      	cbnz	r3, 8013fb8 <_malloc_r+0x3c>
 8013fb0:	4630      	mov	r0, r6
 8013fb2:	f000 fb05 	bl	80145c0 <_sbrk_r>
 8013fb6:	6020      	str	r0, [r4, #0]
 8013fb8:	4629      	mov	r1, r5
 8013fba:	4630      	mov	r0, r6
 8013fbc:	f000 fb00 	bl	80145c0 <_sbrk_r>
 8013fc0:	1c43      	adds	r3, r0, #1
 8013fc2:	d124      	bne.n	801400e <_malloc_r+0x92>
 8013fc4:	230c      	movs	r3, #12
 8013fc6:	6033      	str	r3, [r6, #0]
 8013fc8:	4630      	mov	r0, r6
 8013fca:	f000 fba4 	bl	8014716 <__malloc_unlock>
 8013fce:	e7e4      	b.n	8013f9a <_malloc_r+0x1e>
 8013fd0:	680b      	ldr	r3, [r1, #0]
 8013fd2:	1b5b      	subs	r3, r3, r5
 8013fd4:	d418      	bmi.n	8014008 <_malloc_r+0x8c>
 8013fd6:	2b0b      	cmp	r3, #11
 8013fd8:	d90f      	bls.n	8013ffa <_malloc_r+0x7e>
 8013fda:	600b      	str	r3, [r1, #0]
 8013fdc:	50cd      	str	r5, [r1, r3]
 8013fde:	18cc      	adds	r4, r1, r3
 8013fe0:	4630      	mov	r0, r6
 8013fe2:	f000 fb98 	bl	8014716 <__malloc_unlock>
 8013fe6:	f104 000b 	add.w	r0, r4, #11
 8013fea:	1d23      	adds	r3, r4, #4
 8013fec:	f020 0007 	bic.w	r0, r0, #7
 8013ff0:	1ac3      	subs	r3, r0, r3
 8013ff2:	d0d3      	beq.n	8013f9c <_malloc_r+0x20>
 8013ff4:	425a      	negs	r2, r3
 8013ff6:	50e2      	str	r2, [r4, r3]
 8013ff8:	e7d0      	b.n	8013f9c <_malloc_r+0x20>
 8013ffa:	428c      	cmp	r4, r1
 8013ffc:	684b      	ldr	r3, [r1, #4]
 8013ffe:	bf16      	itet	ne
 8014000:	6063      	strne	r3, [r4, #4]
 8014002:	6013      	streq	r3, [r2, #0]
 8014004:	460c      	movne	r4, r1
 8014006:	e7eb      	b.n	8013fe0 <_malloc_r+0x64>
 8014008:	460c      	mov	r4, r1
 801400a:	6849      	ldr	r1, [r1, #4]
 801400c:	e7cc      	b.n	8013fa8 <_malloc_r+0x2c>
 801400e:	1cc4      	adds	r4, r0, #3
 8014010:	f024 0403 	bic.w	r4, r4, #3
 8014014:	42a0      	cmp	r0, r4
 8014016:	d005      	beq.n	8014024 <_malloc_r+0xa8>
 8014018:	1a21      	subs	r1, r4, r0
 801401a:	4630      	mov	r0, r6
 801401c:	f000 fad0 	bl	80145c0 <_sbrk_r>
 8014020:	3001      	adds	r0, #1
 8014022:	d0cf      	beq.n	8013fc4 <_malloc_r+0x48>
 8014024:	6025      	str	r5, [r4, #0]
 8014026:	e7db      	b.n	8013fe0 <_malloc_r+0x64>
 8014028:	20000150 	.word	0x20000150
 801402c:	20000154 	.word	0x20000154

08014030 <__sfputc_r>:
 8014030:	6893      	ldr	r3, [r2, #8]
 8014032:	3b01      	subs	r3, #1
 8014034:	2b00      	cmp	r3, #0
 8014036:	b410      	push	{r4}
 8014038:	6093      	str	r3, [r2, #8]
 801403a:	da08      	bge.n	801404e <__sfputc_r+0x1e>
 801403c:	6994      	ldr	r4, [r2, #24]
 801403e:	42a3      	cmp	r3, r4
 8014040:	db01      	blt.n	8014046 <__sfputc_r+0x16>
 8014042:	290a      	cmp	r1, #10
 8014044:	d103      	bne.n	801404e <__sfputc_r+0x1e>
 8014046:	f85d 4b04 	ldr.w	r4, [sp], #4
 801404a:	f7ff bca3 	b.w	8013994 <__swbuf_r>
 801404e:	6813      	ldr	r3, [r2, #0]
 8014050:	1c58      	adds	r0, r3, #1
 8014052:	6010      	str	r0, [r2, #0]
 8014054:	7019      	strb	r1, [r3, #0]
 8014056:	4608      	mov	r0, r1
 8014058:	f85d 4b04 	ldr.w	r4, [sp], #4
 801405c:	4770      	bx	lr

0801405e <__sfputs_r>:
 801405e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014060:	4606      	mov	r6, r0
 8014062:	460f      	mov	r7, r1
 8014064:	4614      	mov	r4, r2
 8014066:	18d5      	adds	r5, r2, r3
 8014068:	42ac      	cmp	r4, r5
 801406a:	d101      	bne.n	8014070 <__sfputs_r+0x12>
 801406c:	2000      	movs	r0, #0
 801406e:	e007      	b.n	8014080 <__sfputs_r+0x22>
 8014070:	463a      	mov	r2, r7
 8014072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014076:	4630      	mov	r0, r6
 8014078:	f7ff ffda 	bl	8014030 <__sfputc_r>
 801407c:	1c43      	adds	r3, r0, #1
 801407e:	d1f3      	bne.n	8014068 <__sfputs_r+0xa>
 8014080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014084 <_vfiprintf_r>:
 8014084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014088:	460c      	mov	r4, r1
 801408a:	b09d      	sub	sp, #116	; 0x74
 801408c:	4617      	mov	r7, r2
 801408e:	461d      	mov	r5, r3
 8014090:	4606      	mov	r6, r0
 8014092:	b118      	cbz	r0, 801409c <_vfiprintf_r+0x18>
 8014094:	6983      	ldr	r3, [r0, #24]
 8014096:	b90b      	cbnz	r3, 801409c <_vfiprintf_r+0x18>
 8014098:	f7ff fe2c 	bl	8013cf4 <__sinit>
 801409c:	4b7c      	ldr	r3, [pc, #496]	; (8014290 <_vfiprintf_r+0x20c>)
 801409e:	429c      	cmp	r4, r3
 80140a0:	d158      	bne.n	8014154 <_vfiprintf_r+0xd0>
 80140a2:	6874      	ldr	r4, [r6, #4]
 80140a4:	89a3      	ldrh	r3, [r4, #12]
 80140a6:	0718      	lsls	r0, r3, #28
 80140a8:	d55e      	bpl.n	8014168 <_vfiprintf_r+0xe4>
 80140aa:	6923      	ldr	r3, [r4, #16]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d05b      	beq.n	8014168 <_vfiprintf_r+0xe4>
 80140b0:	2300      	movs	r3, #0
 80140b2:	9309      	str	r3, [sp, #36]	; 0x24
 80140b4:	2320      	movs	r3, #32
 80140b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80140ba:	2330      	movs	r3, #48	; 0x30
 80140bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80140c0:	9503      	str	r5, [sp, #12]
 80140c2:	f04f 0b01 	mov.w	fp, #1
 80140c6:	46b8      	mov	r8, r7
 80140c8:	4645      	mov	r5, r8
 80140ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80140ce:	b10b      	cbz	r3, 80140d4 <_vfiprintf_r+0x50>
 80140d0:	2b25      	cmp	r3, #37	; 0x25
 80140d2:	d154      	bne.n	801417e <_vfiprintf_r+0xfa>
 80140d4:	ebb8 0a07 	subs.w	sl, r8, r7
 80140d8:	d00b      	beq.n	80140f2 <_vfiprintf_r+0x6e>
 80140da:	4653      	mov	r3, sl
 80140dc:	463a      	mov	r2, r7
 80140de:	4621      	mov	r1, r4
 80140e0:	4630      	mov	r0, r6
 80140e2:	f7ff ffbc 	bl	801405e <__sfputs_r>
 80140e6:	3001      	adds	r0, #1
 80140e8:	f000 80c2 	beq.w	8014270 <_vfiprintf_r+0x1ec>
 80140ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140ee:	4453      	add	r3, sl
 80140f0:	9309      	str	r3, [sp, #36]	; 0x24
 80140f2:	f898 3000 	ldrb.w	r3, [r8]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	f000 80ba 	beq.w	8014270 <_vfiprintf_r+0x1ec>
 80140fc:	2300      	movs	r3, #0
 80140fe:	f04f 32ff 	mov.w	r2, #4294967295
 8014102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014106:	9304      	str	r3, [sp, #16]
 8014108:	9307      	str	r3, [sp, #28]
 801410a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801410e:	931a      	str	r3, [sp, #104]	; 0x68
 8014110:	46a8      	mov	r8, r5
 8014112:	2205      	movs	r2, #5
 8014114:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014118:	485e      	ldr	r0, [pc, #376]	; (8014294 <_vfiprintf_r+0x210>)
 801411a:	f7ec f859 	bl	80001d0 <memchr>
 801411e:	9b04      	ldr	r3, [sp, #16]
 8014120:	bb78      	cbnz	r0, 8014182 <_vfiprintf_r+0xfe>
 8014122:	06d9      	lsls	r1, r3, #27
 8014124:	bf44      	itt	mi
 8014126:	2220      	movmi	r2, #32
 8014128:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801412c:	071a      	lsls	r2, r3, #28
 801412e:	bf44      	itt	mi
 8014130:	222b      	movmi	r2, #43	; 0x2b
 8014132:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014136:	782a      	ldrb	r2, [r5, #0]
 8014138:	2a2a      	cmp	r2, #42	; 0x2a
 801413a:	d02a      	beq.n	8014192 <_vfiprintf_r+0x10e>
 801413c:	9a07      	ldr	r2, [sp, #28]
 801413e:	46a8      	mov	r8, r5
 8014140:	2000      	movs	r0, #0
 8014142:	250a      	movs	r5, #10
 8014144:	4641      	mov	r1, r8
 8014146:	f811 3b01 	ldrb.w	r3, [r1], #1
 801414a:	3b30      	subs	r3, #48	; 0x30
 801414c:	2b09      	cmp	r3, #9
 801414e:	d969      	bls.n	8014224 <_vfiprintf_r+0x1a0>
 8014150:	b360      	cbz	r0, 80141ac <_vfiprintf_r+0x128>
 8014152:	e024      	b.n	801419e <_vfiprintf_r+0x11a>
 8014154:	4b50      	ldr	r3, [pc, #320]	; (8014298 <_vfiprintf_r+0x214>)
 8014156:	429c      	cmp	r4, r3
 8014158:	d101      	bne.n	801415e <_vfiprintf_r+0xda>
 801415a:	68b4      	ldr	r4, [r6, #8]
 801415c:	e7a2      	b.n	80140a4 <_vfiprintf_r+0x20>
 801415e:	4b4f      	ldr	r3, [pc, #316]	; (801429c <_vfiprintf_r+0x218>)
 8014160:	429c      	cmp	r4, r3
 8014162:	bf08      	it	eq
 8014164:	68f4      	ldreq	r4, [r6, #12]
 8014166:	e79d      	b.n	80140a4 <_vfiprintf_r+0x20>
 8014168:	4621      	mov	r1, r4
 801416a:	4630      	mov	r0, r6
 801416c:	f7ff fc64 	bl	8013a38 <__swsetup_r>
 8014170:	2800      	cmp	r0, #0
 8014172:	d09d      	beq.n	80140b0 <_vfiprintf_r+0x2c>
 8014174:	f04f 30ff 	mov.w	r0, #4294967295
 8014178:	b01d      	add	sp, #116	; 0x74
 801417a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801417e:	46a8      	mov	r8, r5
 8014180:	e7a2      	b.n	80140c8 <_vfiprintf_r+0x44>
 8014182:	4a44      	ldr	r2, [pc, #272]	; (8014294 <_vfiprintf_r+0x210>)
 8014184:	1a80      	subs	r0, r0, r2
 8014186:	fa0b f000 	lsl.w	r0, fp, r0
 801418a:	4318      	orrs	r0, r3
 801418c:	9004      	str	r0, [sp, #16]
 801418e:	4645      	mov	r5, r8
 8014190:	e7be      	b.n	8014110 <_vfiprintf_r+0x8c>
 8014192:	9a03      	ldr	r2, [sp, #12]
 8014194:	1d11      	adds	r1, r2, #4
 8014196:	6812      	ldr	r2, [r2, #0]
 8014198:	9103      	str	r1, [sp, #12]
 801419a:	2a00      	cmp	r2, #0
 801419c:	db01      	blt.n	80141a2 <_vfiprintf_r+0x11e>
 801419e:	9207      	str	r2, [sp, #28]
 80141a0:	e004      	b.n	80141ac <_vfiprintf_r+0x128>
 80141a2:	4252      	negs	r2, r2
 80141a4:	f043 0302 	orr.w	r3, r3, #2
 80141a8:	9207      	str	r2, [sp, #28]
 80141aa:	9304      	str	r3, [sp, #16]
 80141ac:	f898 3000 	ldrb.w	r3, [r8]
 80141b0:	2b2e      	cmp	r3, #46	; 0x2e
 80141b2:	d10e      	bne.n	80141d2 <_vfiprintf_r+0x14e>
 80141b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80141b8:	2b2a      	cmp	r3, #42	; 0x2a
 80141ba:	d138      	bne.n	801422e <_vfiprintf_r+0x1aa>
 80141bc:	9b03      	ldr	r3, [sp, #12]
 80141be:	1d1a      	adds	r2, r3, #4
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	9203      	str	r2, [sp, #12]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	bfb8      	it	lt
 80141c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80141cc:	f108 0802 	add.w	r8, r8, #2
 80141d0:	9305      	str	r3, [sp, #20]
 80141d2:	4d33      	ldr	r5, [pc, #204]	; (80142a0 <_vfiprintf_r+0x21c>)
 80141d4:	f898 1000 	ldrb.w	r1, [r8]
 80141d8:	2203      	movs	r2, #3
 80141da:	4628      	mov	r0, r5
 80141dc:	f7eb fff8 	bl	80001d0 <memchr>
 80141e0:	b140      	cbz	r0, 80141f4 <_vfiprintf_r+0x170>
 80141e2:	2340      	movs	r3, #64	; 0x40
 80141e4:	1b40      	subs	r0, r0, r5
 80141e6:	fa03 f000 	lsl.w	r0, r3, r0
 80141ea:	9b04      	ldr	r3, [sp, #16]
 80141ec:	4303      	orrs	r3, r0
 80141ee:	f108 0801 	add.w	r8, r8, #1
 80141f2:	9304      	str	r3, [sp, #16]
 80141f4:	f898 1000 	ldrb.w	r1, [r8]
 80141f8:	482a      	ldr	r0, [pc, #168]	; (80142a4 <_vfiprintf_r+0x220>)
 80141fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80141fe:	2206      	movs	r2, #6
 8014200:	f108 0701 	add.w	r7, r8, #1
 8014204:	f7eb ffe4 	bl	80001d0 <memchr>
 8014208:	2800      	cmp	r0, #0
 801420a:	d037      	beq.n	801427c <_vfiprintf_r+0x1f8>
 801420c:	4b26      	ldr	r3, [pc, #152]	; (80142a8 <_vfiprintf_r+0x224>)
 801420e:	bb1b      	cbnz	r3, 8014258 <_vfiprintf_r+0x1d4>
 8014210:	9b03      	ldr	r3, [sp, #12]
 8014212:	3307      	adds	r3, #7
 8014214:	f023 0307 	bic.w	r3, r3, #7
 8014218:	3308      	adds	r3, #8
 801421a:	9303      	str	r3, [sp, #12]
 801421c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801421e:	444b      	add	r3, r9
 8014220:	9309      	str	r3, [sp, #36]	; 0x24
 8014222:	e750      	b.n	80140c6 <_vfiprintf_r+0x42>
 8014224:	fb05 3202 	mla	r2, r5, r2, r3
 8014228:	2001      	movs	r0, #1
 801422a:	4688      	mov	r8, r1
 801422c:	e78a      	b.n	8014144 <_vfiprintf_r+0xc0>
 801422e:	2300      	movs	r3, #0
 8014230:	f108 0801 	add.w	r8, r8, #1
 8014234:	9305      	str	r3, [sp, #20]
 8014236:	4619      	mov	r1, r3
 8014238:	250a      	movs	r5, #10
 801423a:	4640      	mov	r0, r8
 801423c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014240:	3a30      	subs	r2, #48	; 0x30
 8014242:	2a09      	cmp	r2, #9
 8014244:	d903      	bls.n	801424e <_vfiprintf_r+0x1ca>
 8014246:	2b00      	cmp	r3, #0
 8014248:	d0c3      	beq.n	80141d2 <_vfiprintf_r+0x14e>
 801424a:	9105      	str	r1, [sp, #20]
 801424c:	e7c1      	b.n	80141d2 <_vfiprintf_r+0x14e>
 801424e:	fb05 2101 	mla	r1, r5, r1, r2
 8014252:	2301      	movs	r3, #1
 8014254:	4680      	mov	r8, r0
 8014256:	e7f0      	b.n	801423a <_vfiprintf_r+0x1b6>
 8014258:	ab03      	add	r3, sp, #12
 801425a:	9300      	str	r3, [sp, #0]
 801425c:	4622      	mov	r2, r4
 801425e:	4b13      	ldr	r3, [pc, #76]	; (80142ac <_vfiprintf_r+0x228>)
 8014260:	a904      	add	r1, sp, #16
 8014262:	4630      	mov	r0, r6
 8014264:	f3af 8000 	nop.w
 8014268:	f1b0 3fff 	cmp.w	r0, #4294967295
 801426c:	4681      	mov	r9, r0
 801426e:	d1d5      	bne.n	801421c <_vfiprintf_r+0x198>
 8014270:	89a3      	ldrh	r3, [r4, #12]
 8014272:	065b      	lsls	r3, r3, #25
 8014274:	f53f af7e 	bmi.w	8014174 <_vfiprintf_r+0xf0>
 8014278:	9809      	ldr	r0, [sp, #36]	; 0x24
 801427a:	e77d      	b.n	8014178 <_vfiprintf_r+0xf4>
 801427c:	ab03      	add	r3, sp, #12
 801427e:	9300      	str	r3, [sp, #0]
 8014280:	4622      	mov	r2, r4
 8014282:	4b0a      	ldr	r3, [pc, #40]	; (80142ac <_vfiprintf_r+0x228>)
 8014284:	a904      	add	r1, sp, #16
 8014286:	4630      	mov	r0, r6
 8014288:	f000 f888 	bl	801439c <_printf_i>
 801428c:	e7ec      	b.n	8014268 <_vfiprintf_r+0x1e4>
 801428e:	bf00      	nop
 8014290:	08014f88 	.word	0x08014f88
 8014294:	08014fc8 	.word	0x08014fc8
 8014298:	08014fa8 	.word	0x08014fa8
 801429c:	08014f68 	.word	0x08014f68
 80142a0:	08014fce 	.word	0x08014fce
 80142a4:	08014fd2 	.word	0x08014fd2
 80142a8:	00000000 	.word	0x00000000
 80142ac:	0801405f 	.word	0x0801405f

080142b0 <_printf_common>:
 80142b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142b4:	4691      	mov	r9, r2
 80142b6:	461f      	mov	r7, r3
 80142b8:	688a      	ldr	r2, [r1, #8]
 80142ba:	690b      	ldr	r3, [r1, #16]
 80142bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80142c0:	4293      	cmp	r3, r2
 80142c2:	bfb8      	it	lt
 80142c4:	4613      	movlt	r3, r2
 80142c6:	f8c9 3000 	str.w	r3, [r9]
 80142ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80142ce:	4606      	mov	r6, r0
 80142d0:	460c      	mov	r4, r1
 80142d2:	b112      	cbz	r2, 80142da <_printf_common+0x2a>
 80142d4:	3301      	adds	r3, #1
 80142d6:	f8c9 3000 	str.w	r3, [r9]
 80142da:	6823      	ldr	r3, [r4, #0]
 80142dc:	0699      	lsls	r1, r3, #26
 80142de:	bf42      	ittt	mi
 80142e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80142e4:	3302      	addmi	r3, #2
 80142e6:	f8c9 3000 	strmi.w	r3, [r9]
 80142ea:	6825      	ldr	r5, [r4, #0]
 80142ec:	f015 0506 	ands.w	r5, r5, #6
 80142f0:	d107      	bne.n	8014302 <_printf_common+0x52>
 80142f2:	f104 0a19 	add.w	sl, r4, #25
 80142f6:	68e3      	ldr	r3, [r4, #12]
 80142f8:	f8d9 2000 	ldr.w	r2, [r9]
 80142fc:	1a9b      	subs	r3, r3, r2
 80142fe:	42ab      	cmp	r3, r5
 8014300:	dc28      	bgt.n	8014354 <_printf_common+0xa4>
 8014302:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014306:	6822      	ldr	r2, [r4, #0]
 8014308:	3300      	adds	r3, #0
 801430a:	bf18      	it	ne
 801430c:	2301      	movne	r3, #1
 801430e:	0692      	lsls	r2, r2, #26
 8014310:	d42d      	bmi.n	801436e <_printf_common+0xbe>
 8014312:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014316:	4639      	mov	r1, r7
 8014318:	4630      	mov	r0, r6
 801431a:	47c0      	blx	r8
 801431c:	3001      	adds	r0, #1
 801431e:	d020      	beq.n	8014362 <_printf_common+0xb2>
 8014320:	6823      	ldr	r3, [r4, #0]
 8014322:	68e5      	ldr	r5, [r4, #12]
 8014324:	f8d9 2000 	ldr.w	r2, [r9]
 8014328:	f003 0306 	and.w	r3, r3, #6
 801432c:	2b04      	cmp	r3, #4
 801432e:	bf08      	it	eq
 8014330:	1aad      	subeq	r5, r5, r2
 8014332:	68a3      	ldr	r3, [r4, #8]
 8014334:	6922      	ldr	r2, [r4, #16]
 8014336:	bf0c      	ite	eq
 8014338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801433c:	2500      	movne	r5, #0
 801433e:	4293      	cmp	r3, r2
 8014340:	bfc4      	itt	gt
 8014342:	1a9b      	subgt	r3, r3, r2
 8014344:	18ed      	addgt	r5, r5, r3
 8014346:	f04f 0900 	mov.w	r9, #0
 801434a:	341a      	adds	r4, #26
 801434c:	454d      	cmp	r5, r9
 801434e:	d11a      	bne.n	8014386 <_printf_common+0xd6>
 8014350:	2000      	movs	r0, #0
 8014352:	e008      	b.n	8014366 <_printf_common+0xb6>
 8014354:	2301      	movs	r3, #1
 8014356:	4652      	mov	r2, sl
 8014358:	4639      	mov	r1, r7
 801435a:	4630      	mov	r0, r6
 801435c:	47c0      	blx	r8
 801435e:	3001      	adds	r0, #1
 8014360:	d103      	bne.n	801436a <_printf_common+0xba>
 8014362:	f04f 30ff 	mov.w	r0, #4294967295
 8014366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801436a:	3501      	adds	r5, #1
 801436c:	e7c3      	b.n	80142f6 <_printf_common+0x46>
 801436e:	18e1      	adds	r1, r4, r3
 8014370:	1c5a      	adds	r2, r3, #1
 8014372:	2030      	movs	r0, #48	; 0x30
 8014374:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014378:	4422      	add	r2, r4
 801437a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801437e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014382:	3302      	adds	r3, #2
 8014384:	e7c5      	b.n	8014312 <_printf_common+0x62>
 8014386:	2301      	movs	r3, #1
 8014388:	4622      	mov	r2, r4
 801438a:	4639      	mov	r1, r7
 801438c:	4630      	mov	r0, r6
 801438e:	47c0      	blx	r8
 8014390:	3001      	adds	r0, #1
 8014392:	d0e6      	beq.n	8014362 <_printf_common+0xb2>
 8014394:	f109 0901 	add.w	r9, r9, #1
 8014398:	e7d8      	b.n	801434c <_printf_common+0x9c>
	...

0801439c <_printf_i>:
 801439c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80143a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80143a4:	460c      	mov	r4, r1
 80143a6:	7e09      	ldrb	r1, [r1, #24]
 80143a8:	b085      	sub	sp, #20
 80143aa:	296e      	cmp	r1, #110	; 0x6e
 80143ac:	4617      	mov	r7, r2
 80143ae:	4606      	mov	r6, r0
 80143b0:	4698      	mov	r8, r3
 80143b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80143b4:	f000 80b3 	beq.w	801451e <_printf_i+0x182>
 80143b8:	d822      	bhi.n	8014400 <_printf_i+0x64>
 80143ba:	2963      	cmp	r1, #99	; 0x63
 80143bc:	d036      	beq.n	801442c <_printf_i+0x90>
 80143be:	d80a      	bhi.n	80143d6 <_printf_i+0x3a>
 80143c0:	2900      	cmp	r1, #0
 80143c2:	f000 80b9 	beq.w	8014538 <_printf_i+0x19c>
 80143c6:	2958      	cmp	r1, #88	; 0x58
 80143c8:	f000 8083 	beq.w	80144d2 <_printf_i+0x136>
 80143cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80143d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80143d4:	e032      	b.n	801443c <_printf_i+0xa0>
 80143d6:	2964      	cmp	r1, #100	; 0x64
 80143d8:	d001      	beq.n	80143de <_printf_i+0x42>
 80143da:	2969      	cmp	r1, #105	; 0x69
 80143dc:	d1f6      	bne.n	80143cc <_printf_i+0x30>
 80143de:	6820      	ldr	r0, [r4, #0]
 80143e0:	6813      	ldr	r3, [r2, #0]
 80143e2:	0605      	lsls	r5, r0, #24
 80143e4:	f103 0104 	add.w	r1, r3, #4
 80143e8:	d52a      	bpl.n	8014440 <_printf_i+0xa4>
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	6011      	str	r1, [r2, #0]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	da03      	bge.n	80143fa <_printf_i+0x5e>
 80143f2:	222d      	movs	r2, #45	; 0x2d
 80143f4:	425b      	negs	r3, r3
 80143f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80143fa:	486f      	ldr	r0, [pc, #444]	; (80145b8 <_printf_i+0x21c>)
 80143fc:	220a      	movs	r2, #10
 80143fe:	e039      	b.n	8014474 <_printf_i+0xd8>
 8014400:	2973      	cmp	r1, #115	; 0x73
 8014402:	f000 809d 	beq.w	8014540 <_printf_i+0x1a4>
 8014406:	d808      	bhi.n	801441a <_printf_i+0x7e>
 8014408:	296f      	cmp	r1, #111	; 0x6f
 801440a:	d020      	beq.n	801444e <_printf_i+0xb2>
 801440c:	2970      	cmp	r1, #112	; 0x70
 801440e:	d1dd      	bne.n	80143cc <_printf_i+0x30>
 8014410:	6823      	ldr	r3, [r4, #0]
 8014412:	f043 0320 	orr.w	r3, r3, #32
 8014416:	6023      	str	r3, [r4, #0]
 8014418:	e003      	b.n	8014422 <_printf_i+0x86>
 801441a:	2975      	cmp	r1, #117	; 0x75
 801441c:	d017      	beq.n	801444e <_printf_i+0xb2>
 801441e:	2978      	cmp	r1, #120	; 0x78
 8014420:	d1d4      	bne.n	80143cc <_printf_i+0x30>
 8014422:	2378      	movs	r3, #120	; 0x78
 8014424:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014428:	4864      	ldr	r0, [pc, #400]	; (80145bc <_printf_i+0x220>)
 801442a:	e055      	b.n	80144d8 <_printf_i+0x13c>
 801442c:	6813      	ldr	r3, [r2, #0]
 801442e:	1d19      	adds	r1, r3, #4
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	6011      	str	r1, [r2, #0]
 8014434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801443c:	2301      	movs	r3, #1
 801443e:	e08c      	b.n	801455a <_printf_i+0x1be>
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	6011      	str	r1, [r2, #0]
 8014444:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014448:	bf18      	it	ne
 801444a:	b21b      	sxthne	r3, r3
 801444c:	e7cf      	b.n	80143ee <_printf_i+0x52>
 801444e:	6813      	ldr	r3, [r2, #0]
 8014450:	6825      	ldr	r5, [r4, #0]
 8014452:	1d18      	adds	r0, r3, #4
 8014454:	6010      	str	r0, [r2, #0]
 8014456:	0628      	lsls	r0, r5, #24
 8014458:	d501      	bpl.n	801445e <_printf_i+0xc2>
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	e002      	b.n	8014464 <_printf_i+0xc8>
 801445e:	0668      	lsls	r0, r5, #25
 8014460:	d5fb      	bpl.n	801445a <_printf_i+0xbe>
 8014462:	881b      	ldrh	r3, [r3, #0]
 8014464:	4854      	ldr	r0, [pc, #336]	; (80145b8 <_printf_i+0x21c>)
 8014466:	296f      	cmp	r1, #111	; 0x6f
 8014468:	bf14      	ite	ne
 801446a:	220a      	movne	r2, #10
 801446c:	2208      	moveq	r2, #8
 801446e:	2100      	movs	r1, #0
 8014470:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014474:	6865      	ldr	r5, [r4, #4]
 8014476:	60a5      	str	r5, [r4, #8]
 8014478:	2d00      	cmp	r5, #0
 801447a:	f2c0 8095 	blt.w	80145a8 <_printf_i+0x20c>
 801447e:	6821      	ldr	r1, [r4, #0]
 8014480:	f021 0104 	bic.w	r1, r1, #4
 8014484:	6021      	str	r1, [r4, #0]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d13d      	bne.n	8014506 <_printf_i+0x16a>
 801448a:	2d00      	cmp	r5, #0
 801448c:	f040 808e 	bne.w	80145ac <_printf_i+0x210>
 8014490:	4665      	mov	r5, ip
 8014492:	2a08      	cmp	r2, #8
 8014494:	d10b      	bne.n	80144ae <_printf_i+0x112>
 8014496:	6823      	ldr	r3, [r4, #0]
 8014498:	07db      	lsls	r3, r3, #31
 801449a:	d508      	bpl.n	80144ae <_printf_i+0x112>
 801449c:	6923      	ldr	r3, [r4, #16]
 801449e:	6862      	ldr	r2, [r4, #4]
 80144a0:	429a      	cmp	r2, r3
 80144a2:	bfde      	ittt	le
 80144a4:	2330      	movle	r3, #48	; 0x30
 80144a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80144aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80144ae:	ebac 0305 	sub.w	r3, ip, r5
 80144b2:	6123      	str	r3, [r4, #16]
 80144b4:	f8cd 8000 	str.w	r8, [sp]
 80144b8:	463b      	mov	r3, r7
 80144ba:	aa03      	add	r2, sp, #12
 80144bc:	4621      	mov	r1, r4
 80144be:	4630      	mov	r0, r6
 80144c0:	f7ff fef6 	bl	80142b0 <_printf_common>
 80144c4:	3001      	adds	r0, #1
 80144c6:	d14d      	bne.n	8014564 <_printf_i+0x1c8>
 80144c8:	f04f 30ff 	mov.w	r0, #4294967295
 80144cc:	b005      	add	sp, #20
 80144ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144d2:	4839      	ldr	r0, [pc, #228]	; (80145b8 <_printf_i+0x21c>)
 80144d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80144d8:	6813      	ldr	r3, [r2, #0]
 80144da:	6821      	ldr	r1, [r4, #0]
 80144dc:	1d1d      	adds	r5, r3, #4
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	6015      	str	r5, [r2, #0]
 80144e2:	060a      	lsls	r2, r1, #24
 80144e4:	d50b      	bpl.n	80144fe <_printf_i+0x162>
 80144e6:	07ca      	lsls	r2, r1, #31
 80144e8:	bf44      	itt	mi
 80144ea:	f041 0120 	orrmi.w	r1, r1, #32
 80144ee:	6021      	strmi	r1, [r4, #0]
 80144f0:	b91b      	cbnz	r3, 80144fa <_printf_i+0x15e>
 80144f2:	6822      	ldr	r2, [r4, #0]
 80144f4:	f022 0220 	bic.w	r2, r2, #32
 80144f8:	6022      	str	r2, [r4, #0]
 80144fa:	2210      	movs	r2, #16
 80144fc:	e7b7      	b.n	801446e <_printf_i+0xd2>
 80144fe:	064d      	lsls	r5, r1, #25
 8014500:	bf48      	it	mi
 8014502:	b29b      	uxthmi	r3, r3
 8014504:	e7ef      	b.n	80144e6 <_printf_i+0x14a>
 8014506:	4665      	mov	r5, ip
 8014508:	fbb3 f1f2 	udiv	r1, r3, r2
 801450c:	fb02 3311 	mls	r3, r2, r1, r3
 8014510:	5cc3      	ldrb	r3, [r0, r3]
 8014512:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014516:	460b      	mov	r3, r1
 8014518:	2900      	cmp	r1, #0
 801451a:	d1f5      	bne.n	8014508 <_printf_i+0x16c>
 801451c:	e7b9      	b.n	8014492 <_printf_i+0xf6>
 801451e:	6813      	ldr	r3, [r2, #0]
 8014520:	6825      	ldr	r5, [r4, #0]
 8014522:	6961      	ldr	r1, [r4, #20]
 8014524:	1d18      	adds	r0, r3, #4
 8014526:	6010      	str	r0, [r2, #0]
 8014528:	0628      	lsls	r0, r5, #24
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	d501      	bpl.n	8014532 <_printf_i+0x196>
 801452e:	6019      	str	r1, [r3, #0]
 8014530:	e002      	b.n	8014538 <_printf_i+0x19c>
 8014532:	066a      	lsls	r2, r5, #25
 8014534:	d5fb      	bpl.n	801452e <_printf_i+0x192>
 8014536:	8019      	strh	r1, [r3, #0]
 8014538:	2300      	movs	r3, #0
 801453a:	6123      	str	r3, [r4, #16]
 801453c:	4665      	mov	r5, ip
 801453e:	e7b9      	b.n	80144b4 <_printf_i+0x118>
 8014540:	6813      	ldr	r3, [r2, #0]
 8014542:	1d19      	adds	r1, r3, #4
 8014544:	6011      	str	r1, [r2, #0]
 8014546:	681d      	ldr	r5, [r3, #0]
 8014548:	6862      	ldr	r2, [r4, #4]
 801454a:	2100      	movs	r1, #0
 801454c:	4628      	mov	r0, r5
 801454e:	f7eb fe3f 	bl	80001d0 <memchr>
 8014552:	b108      	cbz	r0, 8014558 <_printf_i+0x1bc>
 8014554:	1b40      	subs	r0, r0, r5
 8014556:	6060      	str	r0, [r4, #4]
 8014558:	6863      	ldr	r3, [r4, #4]
 801455a:	6123      	str	r3, [r4, #16]
 801455c:	2300      	movs	r3, #0
 801455e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014562:	e7a7      	b.n	80144b4 <_printf_i+0x118>
 8014564:	6923      	ldr	r3, [r4, #16]
 8014566:	462a      	mov	r2, r5
 8014568:	4639      	mov	r1, r7
 801456a:	4630      	mov	r0, r6
 801456c:	47c0      	blx	r8
 801456e:	3001      	adds	r0, #1
 8014570:	d0aa      	beq.n	80144c8 <_printf_i+0x12c>
 8014572:	6823      	ldr	r3, [r4, #0]
 8014574:	079b      	lsls	r3, r3, #30
 8014576:	d413      	bmi.n	80145a0 <_printf_i+0x204>
 8014578:	68e0      	ldr	r0, [r4, #12]
 801457a:	9b03      	ldr	r3, [sp, #12]
 801457c:	4298      	cmp	r0, r3
 801457e:	bfb8      	it	lt
 8014580:	4618      	movlt	r0, r3
 8014582:	e7a3      	b.n	80144cc <_printf_i+0x130>
 8014584:	2301      	movs	r3, #1
 8014586:	464a      	mov	r2, r9
 8014588:	4639      	mov	r1, r7
 801458a:	4630      	mov	r0, r6
 801458c:	47c0      	blx	r8
 801458e:	3001      	adds	r0, #1
 8014590:	d09a      	beq.n	80144c8 <_printf_i+0x12c>
 8014592:	3501      	adds	r5, #1
 8014594:	68e3      	ldr	r3, [r4, #12]
 8014596:	9a03      	ldr	r2, [sp, #12]
 8014598:	1a9b      	subs	r3, r3, r2
 801459a:	42ab      	cmp	r3, r5
 801459c:	dcf2      	bgt.n	8014584 <_printf_i+0x1e8>
 801459e:	e7eb      	b.n	8014578 <_printf_i+0x1dc>
 80145a0:	2500      	movs	r5, #0
 80145a2:	f104 0919 	add.w	r9, r4, #25
 80145a6:	e7f5      	b.n	8014594 <_printf_i+0x1f8>
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d1ac      	bne.n	8014506 <_printf_i+0x16a>
 80145ac:	7803      	ldrb	r3, [r0, #0]
 80145ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80145b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80145b6:	e76c      	b.n	8014492 <_printf_i+0xf6>
 80145b8:	08014fd9 	.word	0x08014fd9
 80145bc:	08014fea 	.word	0x08014fea

080145c0 <_sbrk_r>:
 80145c0:	b538      	push	{r3, r4, r5, lr}
 80145c2:	4c06      	ldr	r4, [pc, #24]	; (80145dc <_sbrk_r+0x1c>)
 80145c4:	2300      	movs	r3, #0
 80145c6:	4605      	mov	r5, r0
 80145c8:	4608      	mov	r0, r1
 80145ca:	6023      	str	r3, [r4, #0]
 80145cc:	f7fe fff2 	bl	80135b4 <_sbrk>
 80145d0:	1c43      	adds	r3, r0, #1
 80145d2:	d102      	bne.n	80145da <_sbrk_r+0x1a>
 80145d4:	6823      	ldr	r3, [r4, #0]
 80145d6:	b103      	cbz	r3, 80145da <_sbrk_r+0x1a>
 80145d8:	602b      	str	r3, [r5, #0]
 80145da:	bd38      	pop	{r3, r4, r5, pc}
 80145dc:	200012fc 	.word	0x200012fc

080145e0 <__sread>:
 80145e0:	b510      	push	{r4, lr}
 80145e2:	460c      	mov	r4, r1
 80145e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145e8:	f000 f896 	bl	8014718 <_read_r>
 80145ec:	2800      	cmp	r0, #0
 80145ee:	bfab      	itete	ge
 80145f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80145f2:	89a3      	ldrhlt	r3, [r4, #12]
 80145f4:	181b      	addge	r3, r3, r0
 80145f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80145fa:	bfac      	ite	ge
 80145fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80145fe:	81a3      	strhlt	r3, [r4, #12]
 8014600:	bd10      	pop	{r4, pc}

08014602 <__swrite>:
 8014602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014606:	461f      	mov	r7, r3
 8014608:	898b      	ldrh	r3, [r1, #12]
 801460a:	05db      	lsls	r3, r3, #23
 801460c:	4605      	mov	r5, r0
 801460e:	460c      	mov	r4, r1
 8014610:	4616      	mov	r6, r2
 8014612:	d505      	bpl.n	8014620 <__swrite+0x1e>
 8014614:	2302      	movs	r3, #2
 8014616:	2200      	movs	r2, #0
 8014618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801461c:	f000 f868 	bl	80146f0 <_lseek_r>
 8014620:	89a3      	ldrh	r3, [r4, #12]
 8014622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801462a:	81a3      	strh	r3, [r4, #12]
 801462c:	4632      	mov	r2, r6
 801462e:	463b      	mov	r3, r7
 8014630:	4628      	mov	r0, r5
 8014632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014636:	f000 b817 	b.w	8014668 <_write_r>

0801463a <__sseek>:
 801463a:	b510      	push	{r4, lr}
 801463c:	460c      	mov	r4, r1
 801463e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014642:	f000 f855 	bl	80146f0 <_lseek_r>
 8014646:	1c43      	adds	r3, r0, #1
 8014648:	89a3      	ldrh	r3, [r4, #12]
 801464a:	bf15      	itete	ne
 801464c:	6560      	strne	r0, [r4, #84]	; 0x54
 801464e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014656:	81a3      	strheq	r3, [r4, #12]
 8014658:	bf18      	it	ne
 801465a:	81a3      	strhne	r3, [r4, #12]
 801465c:	bd10      	pop	{r4, pc}

0801465e <__sclose>:
 801465e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014662:	f000 b813 	b.w	801468c <_close_r>
	...

08014668 <_write_r>:
 8014668:	b538      	push	{r3, r4, r5, lr}
 801466a:	4c07      	ldr	r4, [pc, #28]	; (8014688 <_write_r+0x20>)
 801466c:	4605      	mov	r5, r0
 801466e:	4608      	mov	r0, r1
 8014670:	4611      	mov	r1, r2
 8014672:	2200      	movs	r2, #0
 8014674:	6022      	str	r2, [r4, #0]
 8014676:	461a      	mov	r2, r3
 8014678:	f7fe ff4b 	bl	8013512 <_write>
 801467c:	1c43      	adds	r3, r0, #1
 801467e:	d102      	bne.n	8014686 <_write_r+0x1e>
 8014680:	6823      	ldr	r3, [r4, #0]
 8014682:	b103      	cbz	r3, 8014686 <_write_r+0x1e>
 8014684:	602b      	str	r3, [r5, #0]
 8014686:	bd38      	pop	{r3, r4, r5, pc}
 8014688:	200012fc 	.word	0x200012fc

0801468c <_close_r>:
 801468c:	b538      	push	{r3, r4, r5, lr}
 801468e:	4c06      	ldr	r4, [pc, #24]	; (80146a8 <_close_r+0x1c>)
 8014690:	2300      	movs	r3, #0
 8014692:	4605      	mov	r5, r0
 8014694:	4608      	mov	r0, r1
 8014696:	6023      	str	r3, [r4, #0]
 8014698:	f7fe ff57 	bl	801354a <_close>
 801469c:	1c43      	adds	r3, r0, #1
 801469e:	d102      	bne.n	80146a6 <_close_r+0x1a>
 80146a0:	6823      	ldr	r3, [r4, #0]
 80146a2:	b103      	cbz	r3, 80146a6 <_close_r+0x1a>
 80146a4:	602b      	str	r3, [r5, #0]
 80146a6:	bd38      	pop	{r3, r4, r5, pc}
 80146a8:	200012fc 	.word	0x200012fc

080146ac <_fstat_r>:
 80146ac:	b538      	push	{r3, r4, r5, lr}
 80146ae:	4c07      	ldr	r4, [pc, #28]	; (80146cc <_fstat_r+0x20>)
 80146b0:	2300      	movs	r3, #0
 80146b2:	4605      	mov	r5, r0
 80146b4:	4608      	mov	r0, r1
 80146b6:	4611      	mov	r1, r2
 80146b8:	6023      	str	r3, [r4, #0]
 80146ba:	f7fe ff52 	bl	8013562 <_fstat>
 80146be:	1c43      	adds	r3, r0, #1
 80146c0:	d102      	bne.n	80146c8 <_fstat_r+0x1c>
 80146c2:	6823      	ldr	r3, [r4, #0]
 80146c4:	b103      	cbz	r3, 80146c8 <_fstat_r+0x1c>
 80146c6:	602b      	str	r3, [r5, #0]
 80146c8:	bd38      	pop	{r3, r4, r5, pc}
 80146ca:	bf00      	nop
 80146cc:	200012fc 	.word	0x200012fc

080146d0 <_isatty_r>:
 80146d0:	b538      	push	{r3, r4, r5, lr}
 80146d2:	4c06      	ldr	r4, [pc, #24]	; (80146ec <_isatty_r+0x1c>)
 80146d4:	2300      	movs	r3, #0
 80146d6:	4605      	mov	r5, r0
 80146d8:	4608      	mov	r0, r1
 80146da:	6023      	str	r3, [r4, #0]
 80146dc:	f7fe ff51 	bl	8013582 <_isatty>
 80146e0:	1c43      	adds	r3, r0, #1
 80146e2:	d102      	bne.n	80146ea <_isatty_r+0x1a>
 80146e4:	6823      	ldr	r3, [r4, #0]
 80146e6:	b103      	cbz	r3, 80146ea <_isatty_r+0x1a>
 80146e8:	602b      	str	r3, [r5, #0]
 80146ea:	bd38      	pop	{r3, r4, r5, pc}
 80146ec:	200012fc 	.word	0x200012fc

080146f0 <_lseek_r>:
 80146f0:	b538      	push	{r3, r4, r5, lr}
 80146f2:	4c07      	ldr	r4, [pc, #28]	; (8014710 <_lseek_r+0x20>)
 80146f4:	4605      	mov	r5, r0
 80146f6:	4608      	mov	r0, r1
 80146f8:	4611      	mov	r1, r2
 80146fa:	2200      	movs	r2, #0
 80146fc:	6022      	str	r2, [r4, #0]
 80146fe:	461a      	mov	r2, r3
 8014700:	f7fe ff4a 	bl	8013598 <_lseek>
 8014704:	1c43      	adds	r3, r0, #1
 8014706:	d102      	bne.n	801470e <_lseek_r+0x1e>
 8014708:	6823      	ldr	r3, [r4, #0]
 801470a:	b103      	cbz	r3, 801470e <_lseek_r+0x1e>
 801470c:	602b      	str	r3, [r5, #0]
 801470e:	bd38      	pop	{r3, r4, r5, pc}
 8014710:	200012fc 	.word	0x200012fc

08014714 <__malloc_lock>:
 8014714:	4770      	bx	lr

08014716 <__malloc_unlock>:
 8014716:	4770      	bx	lr

08014718 <_read_r>:
 8014718:	b538      	push	{r3, r4, r5, lr}
 801471a:	4c07      	ldr	r4, [pc, #28]	; (8014738 <_read_r+0x20>)
 801471c:	4605      	mov	r5, r0
 801471e:	4608      	mov	r0, r1
 8014720:	4611      	mov	r1, r2
 8014722:	2200      	movs	r2, #0
 8014724:	6022      	str	r2, [r4, #0]
 8014726:	461a      	mov	r2, r3
 8014728:	f7fe fed6 	bl	80134d8 <_read>
 801472c:	1c43      	adds	r3, r0, #1
 801472e:	d102      	bne.n	8014736 <_read_r+0x1e>
 8014730:	6823      	ldr	r3, [r4, #0]
 8014732:	b103      	cbz	r3, 8014736 <_read_r+0x1e>
 8014734:	602b      	str	r3, [r5, #0]
 8014736:	bd38      	pop	{r3, r4, r5, pc}
 8014738:	200012fc 	.word	0x200012fc

0801473c <sqrt>:
 801473c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014740:	ed2d 8b02 	vpush	{d8}
 8014744:	b08b      	sub	sp, #44	; 0x2c
 8014746:	ec55 4b10 	vmov	r4, r5, d0
 801474a:	f000 f851 	bl	80147f0 <__ieee754_sqrt>
 801474e:	4b26      	ldr	r3, [pc, #152]	; (80147e8 <sqrt+0xac>)
 8014750:	eeb0 8a40 	vmov.f32	s16, s0
 8014754:	eef0 8a60 	vmov.f32	s17, s1
 8014758:	f993 6000 	ldrsb.w	r6, [r3]
 801475c:	1c73      	adds	r3, r6, #1
 801475e:	d02a      	beq.n	80147b6 <sqrt+0x7a>
 8014760:	4622      	mov	r2, r4
 8014762:	462b      	mov	r3, r5
 8014764:	4620      	mov	r0, r4
 8014766:	4629      	mov	r1, r5
 8014768:	f7ec f9d8 	bl	8000b1c <__aeabi_dcmpun>
 801476c:	4607      	mov	r7, r0
 801476e:	bb10      	cbnz	r0, 80147b6 <sqrt+0x7a>
 8014770:	f04f 0800 	mov.w	r8, #0
 8014774:	f04f 0900 	mov.w	r9, #0
 8014778:	4642      	mov	r2, r8
 801477a:	464b      	mov	r3, r9
 801477c:	4620      	mov	r0, r4
 801477e:	4629      	mov	r1, r5
 8014780:	f7ec f9a4 	bl	8000acc <__aeabi_dcmplt>
 8014784:	b1b8      	cbz	r0, 80147b6 <sqrt+0x7a>
 8014786:	2301      	movs	r3, #1
 8014788:	9300      	str	r3, [sp, #0]
 801478a:	4b18      	ldr	r3, [pc, #96]	; (80147ec <sqrt+0xb0>)
 801478c:	9301      	str	r3, [sp, #4]
 801478e:	9708      	str	r7, [sp, #32]
 8014790:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8014794:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8014798:	b9b6      	cbnz	r6, 80147c8 <sqrt+0x8c>
 801479a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801479e:	4668      	mov	r0, sp
 80147a0:	f000 f8d6 	bl	8014950 <matherr>
 80147a4:	b1d0      	cbz	r0, 80147dc <sqrt+0xa0>
 80147a6:	9b08      	ldr	r3, [sp, #32]
 80147a8:	b11b      	cbz	r3, 80147b2 <sqrt+0x76>
 80147aa:	f7fe ff8f 	bl	80136cc <__errno>
 80147ae:	9b08      	ldr	r3, [sp, #32]
 80147b0:	6003      	str	r3, [r0, #0]
 80147b2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80147b6:	eeb0 0a48 	vmov.f32	s0, s16
 80147ba:	eef0 0a68 	vmov.f32	s1, s17
 80147be:	b00b      	add	sp, #44	; 0x2c
 80147c0:	ecbd 8b02 	vpop	{d8}
 80147c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80147c8:	4642      	mov	r2, r8
 80147ca:	464b      	mov	r3, r9
 80147cc:	4640      	mov	r0, r8
 80147ce:	4649      	mov	r1, r9
 80147d0:	f7ec f834 	bl	800083c <__aeabi_ddiv>
 80147d4:	2e02      	cmp	r6, #2
 80147d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80147da:	d1e0      	bne.n	801479e <sqrt+0x62>
 80147dc:	f7fe ff76 	bl	80136cc <__errno>
 80147e0:	2321      	movs	r3, #33	; 0x21
 80147e2:	6003      	str	r3, [r0, #0]
 80147e4:	e7df      	b.n	80147a6 <sqrt+0x6a>
 80147e6:	bf00      	nop
 80147e8:	20000120 	.word	0x20000120
 80147ec:	08014ffb 	.word	0x08014ffb

080147f0 <__ieee754_sqrt>:
 80147f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147f4:	4955      	ldr	r1, [pc, #340]	; (801494c <__ieee754_sqrt+0x15c>)
 80147f6:	ec55 4b10 	vmov	r4, r5, d0
 80147fa:	43a9      	bics	r1, r5
 80147fc:	462b      	mov	r3, r5
 80147fe:	462a      	mov	r2, r5
 8014800:	d112      	bne.n	8014828 <__ieee754_sqrt+0x38>
 8014802:	ee10 2a10 	vmov	r2, s0
 8014806:	ee10 0a10 	vmov	r0, s0
 801480a:	4629      	mov	r1, r5
 801480c:	f7eb feec 	bl	80005e8 <__aeabi_dmul>
 8014810:	4602      	mov	r2, r0
 8014812:	460b      	mov	r3, r1
 8014814:	4620      	mov	r0, r4
 8014816:	4629      	mov	r1, r5
 8014818:	f7eb fd30 	bl	800027c <__adddf3>
 801481c:	4604      	mov	r4, r0
 801481e:	460d      	mov	r5, r1
 8014820:	ec45 4b10 	vmov	d0, r4, r5
 8014824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014828:	2d00      	cmp	r5, #0
 801482a:	ee10 0a10 	vmov	r0, s0
 801482e:	4621      	mov	r1, r4
 8014830:	dc0f      	bgt.n	8014852 <__ieee754_sqrt+0x62>
 8014832:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014836:	4330      	orrs	r0, r6
 8014838:	d0f2      	beq.n	8014820 <__ieee754_sqrt+0x30>
 801483a:	b155      	cbz	r5, 8014852 <__ieee754_sqrt+0x62>
 801483c:	ee10 2a10 	vmov	r2, s0
 8014840:	4620      	mov	r0, r4
 8014842:	4629      	mov	r1, r5
 8014844:	f7eb fd18 	bl	8000278 <__aeabi_dsub>
 8014848:	4602      	mov	r2, r0
 801484a:	460b      	mov	r3, r1
 801484c:	f7eb fff6 	bl	800083c <__aeabi_ddiv>
 8014850:	e7e4      	b.n	801481c <__ieee754_sqrt+0x2c>
 8014852:	151b      	asrs	r3, r3, #20
 8014854:	d073      	beq.n	801493e <__ieee754_sqrt+0x14e>
 8014856:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801485a:	07dd      	lsls	r5, r3, #31
 801485c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8014860:	bf48      	it	mi
 8014862:	0fc8      	lsrmi	r0, r1, #31
 8014864:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014868:	bf44      	itt	mi
 801486a:	0049      	lslmi	r1, r1, #1
 801486c:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8014870:	2500      	movs	r5, #0
 8014872:	1058      	asrs	r0, r3, #1
 8014874:	0fcb      	lsrs	r3, r1, #31
 8014876:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801487a:	0049      	lsls	r1, r1, #1
 801487c:	2316      	movs	r3, #22
 801487e:	462c      	mov	r4, r5
 8014880:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8014884:	19a7      	adds	r7, r4, r6
 8014886:	4297      	cmp	r7, r2
 8014888:	bfde      	ittt	le
 801488a:	19bc      	addle	r4, r7, r6
 801488c:	1bd2      	suble	r2, r2, r7
 801488e:	19ad      	addle	r5, r5, r6
 8014890:	0fcf      	lsrs	r7, r1, #31
 8014892:	3b01      	subs	r3, #1
 8014894:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8014898:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801489c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80148a0:	d1f0      	bne.n	8014884 <__ieee754_sqrt+0x94>
 80148a2:	f04f 0c20 	mov.w	ip, #32
 80148a6:	469e      	mov	lr, r3
 80148a8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80148ac:	42a2      	cmp	r2, r4
 80148ae:	eb06 070e 	add.w	r7, r6, lr
 80148b2:	dc02      	bgt.n	80148ba <__ieee754_sqrt+0xca>
 80148b4:	d112      	bne.n	80148dc <__ieee754_sqrt+0xec>
 80148b6:	428f      	cmp	r7, r1
 80148b8:	d810      	bhi.n	80148dc <__ieee754_sqrt+0xec>
 80148ba:	2f00      	cmp	r7, #0
 80148bc:	eb07 0e06 	add.w	lr, r7, r6
 80148c0:	da42      	bge.n	8014948 <__ieee754_sqrt+0x158>
 80148c2:	f1be 0f00 	cmp.w	lr, #0
 80148c6:	db3f      	blt.n	8014948 <__ieee754_sqrt+0x158>
 80148c8:	f104 0801 	add.w	r8, r4, #1
 80148cc:	1b12      	subs	r2, r2, r4
 80148ce:	428f      	cmp	r7, r1
 80148d0:	bf88      	it	hi
 80148d2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80148d6:	1bc9      	subs	r1, r1, r7
 80148d8:	4433      	add	r3, r6
 80148da:	4644      	mov	r4, r8
 80148dc:	0052      	lsls	r2, r2, #1
 80148de:	f1bc 0c01 	subs.w	ip, ip, #1
 80148e2:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80148e6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80148ea:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80148ee:	d1dd      	bne.n	80148ac <__ieee754_sqrt+0xbc>
 80148f0:	430a      	orrs	r2, r1
 80148f2:	d006      	beq.n	8014902 <__ieee754_sqrt+0x112>
 80148f4:	1c5c      	adds	r4, r3, #1
 80148f6:	bf13      	iteet	ne
 80148f8:	3301      	addne	r3, #1
 80148fa:	3501      	addeq	r5, #1
 80148fc:	4663      	moveq	r3, ip
 80148fe:	f023 0301 	bicne.w	r3, r3, #1
 8014902:	106a      	asrs	r2, r5, #1
 8014904:	085b      	lsrs	r3, r3, #1
 8014906:	07e9      	lsls	r1, r5, #31
 8014908:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801490c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8014910:	bf48      	it	mi
 8014912:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8014916:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801491a:	461c      	mov	r4, r3
 801491c:	e780      	b.n	8014820 <__ieee754_sqrt+0x30>
 801491e:	0aca      	lsrs	r2, r1, #11
 8014920:	3815      	subs	r0, #21
 8014922:	0549      	lsls	r1, r1, #21
 8014924:	2a00      	cmp	r2, #0
 8014926:	d0fa      	beq.n	801491e <__ieee754_sqrt+0x12e>
 8014928:	02d6      	lsls	r6, r2, #11
 801492a:	d50a      	bpl.n	8014942 <__ieee754_sqrt+0x152>
 801492c:	f1c3 0420 	rsb	r4, r3, #32
 8014930:	fa21 f404 	lsr.w	r4, r1, r4
 8014934:	1e5d      	subs	r5, r3, #1
 8014936:	4099      	lsls	r1, r3
 8014938:	4322      	orrs	r2, r4
 801493a:	1b43      	subs	r3, r0, r5
 801493c:	e78b      	b.n	8014856 <__ieee754_sqrt+0x66>
 801493e:	4618      	mov	r0, r3
 8014940:	e7f0      	b.n	8014924 <__ieee754_sqrt+0x134>
 8014942:	0052      	lsls	r2, r2, #1
 8014944:	3301      	adds	r3, #1
 8014946:	e7ef      	b.n	8014928 <__ieee754_sqrt+0x138>
 8014948:	46a0      	mov	r8, r4
 801494a:	e7bf      	b.n	80148cc <__ieee754_sqrt+0xdc>
 801494c:	7ff00000 	.word	0x7ff00000

08014950 <matherr>:
 8014950:	2000      	movs	r0, #0
 8014952:	4770      	bx	lr

08014954 <_init>:
 8014954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014956:	bf00      	nop
 8014958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801495a:	bc08      	pop	{r3}
 801495c:	469e      	mov	lr, r3
 801495e:	4770      	bx	lr

08014960 <_fini>:
 8014960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014962:	bf00      	nop
 8014964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014966:	bc08      	pop	{r3}
 8014968:	469e      	mov	lr, r3
 801496a:	4770      	bx	lr
